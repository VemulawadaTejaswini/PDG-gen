Line_12 $$ int relativeIndex = index - cur.nodeOffset-->Line_16 $$ cur.position = relativeIndex[ FD ]
Line_14 $$ if (cur.isLeaf()) -->Line_16 $$ cur.position = relativeIndex[ CD ]
Line_9 $$ NodeCursor<K> cur = root()-->Line_14 $$ if (cur.isLeaf()) [ FD ]
Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)-->Line_30 $$ cur.position = -1 - boundary[ FD ]
Line_9 $$ NodeCursor<K> cur = root()-->Line_31 $$ cur = cur.descend()[ FD ]
Line_13 $$ Object[] node = cur.node-->Line_20 $$ int[] sizeMap = getSizeMap(node)[ FD ]
Line_2 $$ void seekTo(int index) -->Line_3 $$ if ((index < 0) | (index >= BTree.size(rootNode()))) [ CD ]
Line_11 $$ while (true) -->Line_12 $$ int relativeIndex = index - cur.nodeOffset[ CD ]
Line_13 $$ Object[] node = cur.node-->Line_15 $$ assert relativeIndex < getLeafKeyEnd(node)[ FD ]
Line_31 $$ cur = cur.descend()-->Line_17 $$ this.cur = cur[ FD ]
Line_11 $$ while (true) -->Line_31 $$ cur = cur.descend()[ CD ]
Line_22 $$ if (boundary >= 0) -->Line_24 $$ cur.position = boundary[ CD ]
Line_2 $$ void seekTo(int index) -->Line_9 $$ NodeCursor<K> cur = root()[ CD ]
Line_2 $$ void seekTo(int index) -->Line_11 $$ while (true) [ CD ]
Line_9 $$ NodeCursor<K> cur = root()-->Line_17 $$ this.cur = cur[ FD ]
Line_12 $$ int relativeIndex = index - cur.nodeOffset-->Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)[ FD ]
Line_3 $$ if ((index < 0) | (index >= BTree.size(rootNode()))) -->Line_7 $$ return[ CD ]
Line_3 $$ if ((index < 0) | (index >= BTree.size(rootNode()))) -->Line_6 $$ reset(index == -1)[ CD ]
Line_31 $$ cur = cur.descend()-->Line_14 $$ if (cur.isLeaf()) [ FD ]
Line_11 $$ while (true) -->Line_20 $$ int[] sizeMap = getSizeMap(node)[ CD ]
Line_11 $$ while (true) -->Line_22 $$ if (boundary >= 0) [ CD ]
Line_22 $$ if (boundary >= 0) -->Line_26 $$ this.cur = cur[ CD ]
Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)-->Line_24 $$ cur.position = boundary[ FD ]
Line_14 $$ if (cur.isLeaf()) -->Line_17 $$ this.cur = cur[ CD ]
Line_11 $$ while (true) -->Line_29 $$ cur.inChild = true[ CD ]
Line_31 $$ cur = cur.descend()-->Line_26 $$ this.cur = cur[ FD ]
Line_20 $$ int[] sizeMap = getSizeMap(node)-->Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)[ FD ]
Line_22 $$ if (boundary >= 0) -->Line_27 $$ return[ CD ]
Line_9 $$ NodeCursor<K> cur = root()-->Line_26 $$ this.cur = cur[ FD ]
Line_11 $$ while (true) -->Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)[ CD ]
Line_22 $$ if (boundary >= 0) -->Line_25 $$ cur.inChild = false[ CD ]
Line_11 $$ while (true) -->Line_14 $$ if (cur.isLeaf()) [ CD ]
Line_21 $$ int boundary = Arrays.binarySearch(sizeMap, relativeIndex)-->Line_22 $$ if (boundary >= 0) [ FD ]
Line_11 $$ while (true) -->Line_13 $$ Object[] node = cur.node[ CD ]
Line_11 $$ while (true) -->Line_30 $$ cur.position = -1 - boundary[ CD ]
Line_14 $$ if (cur.isLeaf()) -->Line_18 $$ return[ CD ]
Line_3 $$ if ((index < 0) | (index >= BTree.size(rootNode()))) -->Line_4 $$ if ((index < -1) | (index > BTree.size(rootNode())))[ CD ]
