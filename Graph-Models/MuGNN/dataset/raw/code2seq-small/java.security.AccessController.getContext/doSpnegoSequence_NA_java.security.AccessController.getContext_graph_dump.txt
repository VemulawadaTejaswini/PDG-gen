Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_36 $$ gssContext.requestCredDeleg(true)[ FD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_55 $$ gssContext.dispose()[ FD ]
Line_15 $$ if (subject == null) -->Line_16 $$ LOG.debug("No subject in context, logging in")[ CD ]
Line_54 $$ if (gssContext != null) -->Line_56 $$ gssContext = null[ CD ]
Line_28 $$ GSSContext gssContext = null-->Line_56 $$ gssContext = null[ FD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_47 $$ if (!gssContext.isEstablished()) [ FD ]
Line_15 $$ if (subject == null) -->Line_17 $$ subject = new Subject()[ CD ]
Line_39 $$ byte[] outToken-->Line_45 $$ sendToken(outToken)[ FD ]
Line_44 $$ if (outToken != null) -->Line_45 $$ sendToken(outToken)[ CD ]
Line_14 $$ Subject subject = Subject.getSubject(context)-->Line_17 $$ subject = new Subject()[ FD ]
Line_38 $$ byte[] inToken = new byte[0]-->Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_15 $$ if (subject == null) -->Line_19 $$ login.login()[ CD ]
Line_38 $$ byte[] inToken = new byte[0]-->Line_48 $$ inToken = readToken()[ FD ]
Line_40 $$ boolean established = false-->Line_50 $$ established = true[ FD ]
Line_28 $$ GSSContext gssContext = null-->Line_36 $$ gssContext.requestCredDeleg(true)[ FD ]
Line_24 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() -->Line_59 $$ return null[ CD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_34 $$ oid = KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")-->Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_37 $$ gssContext.requestMutualAuth(true)[ FD ]
Line_30 $$ GSSManager gssManager = GSSManager.getInstance()-->Line_33 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_33 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)-->Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_14 $$ Subject subject = Subject.getSubject(context)-->Line_15 $$ if (subject == null) [ FD ]
Line_28 $$ GSSContext gssContext = null-->Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_28 $$ GSSContext gssContext = null-->Line_47 $$ if (!gssContext.isEstablished()) [ FD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_54 $$ if (gssContext != null) [ FD ]
Line_28 $$ GSSContext gssContext = null-->Line_55 $$ gssContext.dispose()[ FD ]
Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)-->Line_45 $$ sendToken(outToken)[ FD ]
Line_18 $$ LoginContext login = new LoginContext("", subject, null, new KerberosConfiguration())-->Line_19 $$ login.login()[ FD ]
Line_13 $$ AccessControlContext context = AccessController.getContext()-->Line_14 $$ Subject subject = Subject.getSubject(context)[ FD ]
Line_30 $$ GSSManager gssManager = GSSManager.getInstance()-->Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_47 $$ if (!gssContext.isEstablished()) -->Line_48 $$ inToken = readToken()[ CD ]
Line_28 $$ GSSContext gssContext = null-->Line_54 $$ if (gssContext != null) [ FD ]
Line_32 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_33 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_47 $$ if (!gssContext.isEstablished()) -->Line_50 $$ established = true[ CD ]
Line_28 $$ GSSContext gssContext = null-->Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)-->Line_44 $$ if (outToken != null) [ FD ]
Line_31 $$ String servicePrincipal = KerberosUtil.getServicePrincipal("HTTP", KerberosAuthenticator.this.url.getHost())-->Line_33 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_28 $$ GSSContext gssContext = null-->Line_37 $$ gssContext.requestMutualAuth(true)[ FD ]
Line_54 $$ if (gssContext != null) -->Line_55 $$ gssContext.dispose()[ CD ]
Line_24 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() -->Line_28 $$ GSSContext gssContext = null[ CD ]
Line_17 $$ subject = new Subject()-->Line_24 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() [ FD ]
Line_48 $$ inToken = readToken()-->Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_56 $$ gssContext = null[ FD ]
Line_21 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("Using subject: " + subject)[ CD ]
Line_14 $$ Subject subject = Subject.getSubject(context)-->Line_24 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() [ FD ]
Line_39 $$ byte[] outToken-->Line_43 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_32 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_35 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_15 $$ if (subject == null) -->Line_18 $$ LoginContext login = new LoginContext("", subject, null, new KerberosConfiguration())[ CD ]
Line_32 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_34 $$ oid = KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")[ FD ]
Line_39 $$ byte[] outToken-->Line_44 $$ if (outToken != null) [ FD ]
