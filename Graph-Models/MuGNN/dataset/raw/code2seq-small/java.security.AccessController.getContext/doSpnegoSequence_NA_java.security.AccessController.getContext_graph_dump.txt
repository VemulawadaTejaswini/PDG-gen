Line_17 $$ GSSContext gssContext = null-->Line_25 $$ gssContext.requestCredDeleg(true)[ FD ]
Line_30 $$ while (!established) -->Line_35 $$ if (!gssContext.isEstablished()) [ CD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_42 $$ if (gssContext != null) [ FD ]
Line_6 $$ if (subject == null) -->Line_10 $$ login.login()[ CD ]
Line_17 $$ GSSContext gssContext = null-->Line_35 $$ if (!gssContext.isEstablished()) [ FD ]
Line_9 $$ LoginContext login = new LoginContext("", subject, null, new KerberosConfiguration())-->Line_10 $$ login.login()[ FD ]
Line_17 $$ GSSContext gssContext = null-->Line_44 $$ gssContext = null[ FD ]
Line_5 $$ Subject subject = Subject.getSubject(context)-->Line_15 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() [ FD ]
Line_20 $$ String servicePrincipal = KerberosUtil.getServicePrincipal("HTTP", KerberosAuthenticator.this.url.getHost())-->Line_22 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_2 $$ private void doSpnegoSequence(AuthenticatedURL.Token token) throws IOException, AuthenticationException -->Line_55 $$ AuthenticatedURL.extractToken(conn, token)[ CD ]
Line_5 $$ Subject subject = Subject.getSubject(context)-->Line_8 $$ subject = new Subject()[ FD ]
Line_29 $$ boolean established = false-->Line_38 $$ established = true[ FD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_25 $$ gssContext.requestCredDeleg(true)[ FD ]
Line_22 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)-->Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_27 $$ byte[] inToken = new byte[0]-->Line_36 $$ inToken = readToken()[ FD ]
Line_42 $$ if (gssContext != null) -->Line_43 $$ gssContext.dispose()[ CD ]
Line_21 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_23 $$ oid = KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")[ FD ]
Line_30 $$ while (!established) -->Line_32 $$ if (outToken != null) [ CD ]
Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)-->Line_32 $$ if (outToken != null) [ FD ]
Line_19 $$ GSSManager gssManager = GSSManager.getInstance()-->Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_2 $$ private void doSpnegoSequence(AuthenticatedURL.Token token) throws IOException, AuthenticationException -->Line_55 $$ AuthenticatedURL.extractToken(conn, token)[ FD ]
Line_8 $$ subject = new Subject()-->Line_15 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() [ FD ]
Line_21 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_22 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_6 $$ if (subject == null) -->Line_8 $$ subject = new Subject()[ CD ]
Line_17 $$ GSSContext gssContext = null-->Line_43 $$ gssContext.dispose()[ FD ]
Line_15 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() -->Line_17 $$ GSSContext gssContext = null[ CD ]
Line_5 $$ Subject subject = Subject.getSubject(context)-->Line_6 $$ if (subject == null) [ FD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_35 $$ if (!gssContext.isEstablished()) [ FD ]
Line_38 $$ established = true-->Line_30 $$ while (!established) [ FD ]
Line_4 $$ AccessControlContext context = AccessController.getContext()-->Line_5 $$ Subject subject = Subject.getSubject(context)[ FD ]
Line_28 $$ byte[] outToken-->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_36 $$ inToken = readToken()-->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_43 $$ gssContext.dispose()[ FD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_26 $$ gssContext.requestMutualAuth(true)[ FD ]
Line_6 $$ if (subject == null) -->Line_9 $$ LoginContext login = new LoginContext("", subject, null, new KerberosConfiguration())[ CD ]
Line_17 $$ GSSContext gssContext = null-->Line_42 $$ if (gssContext != null) [ FD ]
Line_17 $$ GSSContext gssContext = null-->Line_26 $$ gssContext.requestMutualAuth(true)[ FD ]
Line_30 $$ while (!established) -->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ CD ]
Line_12 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ LOG.debug("Using subject: " + subject)[ CD ]
Line_19 $$ GSSManager gssManager = GSSManager.getInstance()-->Line_22 $$ GSSName serviceName = gssManager.createName(servicePrincipal, oid)[ FD ]
Line_15 $$ Subject.doAs(subject, new PrivilegedExceptionAction<Void>() -->Line_47 $$ return null[ CD ]
Line_42 $$ if (gssContext != null) -->Line_44 $$ gssContext = null[ CD ]
Line_21 $$ Oid oid = KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL")-->Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_32 $$ if (outToken != null) -->Line_33 $$ sendToken(outToken)[ CD ]
Line_23 $$ oid = KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID")-->Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_27 $$ byte[] inToken = new byte[0]-->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_29 $$ boolean established = false-->Line_30 $$ while (!established) [ FD ]
Line_35 $$ if (!gssContext.isEstablished()) -->Line_38 $$ established = true[ CD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_44 $$ gssContext = null[ FD ]
Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)-->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_28 $$ byte[] outToken-->Line_32 $$ if (outToken != null) [ FD ]
Line_17 $$ GSSContext gssContext = null-->Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)[ FD ]
Line_31 $$ outToken = gssContext.initSecContext(inToken, 0, inToken.length)-->Line_33 $$ sendToken(outToken)[ FD ]
Line_17 $$ GSSContext gssContext = null-->Line_24 $$ gssContext = gssManager.createContext(serviceName, oid, null, GSSContext.DEFAULT_LIFETIME)[ FD ]
Line_35 $$ if (!gssContext.isEstablished()) -->Line_36 $$ inToken = readToken()[ CD ]
Line_28 $$ byte[] outToken-->Line_33 $$ sendToken(outToken)[ FD ]
Line_6 $$ if (subject == null) -->Line_7 $$ LOG.debug("No subject in context, logging in")[ CD ]
