Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_22 $$ byte[] buf = new byte[FILE_LENGTH][ CD ]
Line_12 $$ Path path = new Path("/foo")-->Line_17 $$ FSDataOutputStream fos = fs.create(path, (short) 1)[ FD ]
Line_21 $$ FSDataInputStream fis = cluster.getFileSystem().open(path)-->Line_23 $$ IOUtils.readFully(fis, buf, 0, FILE_LENGTH)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_3 $$ final short REPL_FACTOR = 1[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_4 $$ final int FILE_LENGTH = 512[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_7 $$ HdfsConfiguration conf = getConfiguration(socketDir)[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_9 $$ cluster.waitActive()[ CD ]
Line_13 $$ byte[] orig = new byte[FILE_LENGTH]-->Line_25 $$ Assert.assertArrayEquals(orig, buf)[ FD ]
Line_12 $$ Path path = new Path("/foo")-->Line_21 $$ FSDataInputStream fis = cluster.getFileSystem().open(path)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_27 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_22 $$ byte[] buf = new byte[FILE_LENGTH]-->Line_26 $$ Arrays.equals(orig, buf)[ FD ]
Line_14 $$ for (int i = 0; i < orig.length; i++) -->Line_15 $$ orig[i] = (byte) (i % 10)[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_24 $$ fis.close()[ CD ]
Line_12 $$ Path path = new Path("/foo")-->Line_20 $$ DFSTestUtil.waitReplication(fs, path, REPL_FACTOR)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_27 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_12 $$ Path path = new Path("/foo")[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_18 $$ fos.write(orig)[ CD ]
Line_4 $$ final int FILE_LENGTH = 512-->Line_23 $$ IOUtils.readFully(fis, buf, 0, FILE_LENGTH)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_20 $$ DFSTestUtil.waitReplication(fs, path, REPL_FACTOR)[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_5 $$ Assume.assumeTrue(null == DomainSocket.getLoadingFailureReason())[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_17 $$ FSDataOutputStream fos = fs.create(path, (short) 1)[ CD ]
Line_17 $$ FSDataOutputStream fos = fs.create(path, (short) 1)-->Line_18 $$ fos.write(orig)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_23 $$ IOUtils.readFully(fis, buf, 0, FILE_LENGTH)[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_11 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_11 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_22 $$ byte[] buf = new byte[FILE_LENGTH]-->Line_25 $$ Assert.assertArrayEquals(orig, buf)[ FD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_20 $$ DFSTestUtil.waitReplication(fs, path, REPL_FACTOR)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_19 $$ fos.close()[ CD ]
Line_6 $$ TemporarySocketDirectory socketDir = new TemporarySocketDirectory()-->Line_10 $$ socketDir.close()[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_21 $$ FSDataInputStream fis = cluster.getFileSystem().open(path)[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_26 $$ Arrays.equals(orig, buf)[ CD ]
Line_13 $$ byte[] orig = new byte[FILE_LENGTH]-->Line_18 $$ fos.write(orig)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_10 $$ socketDir.close()[ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_14 $$ for (int i = 0; i < orig.length; i++) [ CD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_6 $$ TemporarySocketDirectory socketDir = new TemporarySocketDirectory()[ CD ]
Line_21 $$ FSDataInputStream fis = cluster.getFileSystem().open(path)-->Line_24 $$ fis.close()[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_17 $$ FSDataOutputStream fos = fs.create(path, (short) 1)-->Line_19 $$ fos.close()[ FD ]
Line_22 $$ byte[] buf = new byte[FILE_LENGTH]-->Line_23 $$ IOUtils.readFully(fis, buf, 0, FILE_LENGTH)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_13 $$ byte[] orig = new byte[FILE_LENGTH][ CD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_21 $$ FSDataInputStream fis = cluster.getFileSystem().open(path)[ FD ]
Line_3 $$ final short REPL_FACTOR = 1-->Line_20 $$ DFSTestUtil.waitReplication(fs, path, REPL_FACTOR)[ FD ]
Line_2 $$ public void testBothOldAndNewShortCircuitConfigured() throws Exception -->Line_25 $$ Assert.assertArrayEquals(orig, buf)[ CD ]
Line_13 $$ byte[] orig = new byte[FILE_LENGTH]-->Line_26 $$ Arrays.equals(orig, buf)[ FD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_17 $$ FSDataOutputStream fos = fs.create(path, (short) 1)[ FD ]
Line_6 $$ TemporarySocketDirectory socketDir = new TemporarySocketDirectory()-->Line_7 $$ HdfsConfiguration conf = getConfiguration(socketDir)[ FD ]
