Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_3 $$ final int readSize = pattern.length * 16 * 1024 * 1024[ CD ]
Line_23 $$ for (int k = 0; k < thisread; k++) -->Line_24 $$ assertTrue("file is corrupted at or after byte " + (fileSize - bytesToRead), b[k] == compb[k])[ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_32 $$ stm.close()[ CD ]
Line_15 $$ FSDataInputStream stm = fs.open(name)-->Line_18 $$ stm.readFully(b, 0, thisread)[ FD ]
Line_3 $$ final int readSize = pattern.length * 16 * 1024 * 1024-->Line_4 $$ if (readSize > Integer.MAX_VALUE) [ FD ]
Line_11 $$ for (int j = 0; j < readSize; j++) -->Line_12 $$ compb[j] = pattern[j % pattern.length][ CD ]
Line_9 $$ byte[] compb = new byte[readSize]-->Line_21 $$ assertTrue("file is corrupted at or after byte " + (fileSize - bytesToRead), Arrays.equals(b, compb))[ FD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_16 $$ while (bytesToRead > 0) [ CD ]
Line_8 $$ long bytesToRead = fileSize-->Line_29 $$ bytesToRead -= thisread[ FD ]
Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)-->Line_18 $$ stm.readFully(b, 0, thisread)[ FD ]
Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)-->Line_23 $$ for (int k = 0; k < thisread; k++) [ FD ]
Line_8 $$ long bytesToRead = fileSize-->Line_16 $$ while (bytesToRead > 0) [ FD ]
Line_16 $$ while (bytesToRead > 0) -->Line_29 $$ bytesToRead -= thisread[ CD ]
Line_16 $$ while (bytesToRead > 0) -->Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)[ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_7 $$ byte[] b = new byte[readSize][ CD ]
Line_15 $$ FSDataInputStream stm = fs.open(name)-->Line_32 $$ stm.close()[ FD ]
Line_16 $$ while (bytesToRead > 0) -->Line_28 $$ LOG.debug("Before update: to read: " + bytesToRead + "; read already: " + thisread)[ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_10 $$ if (verifyData) [ CD ]
Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)-->Line_20 $$ if (thisread == readSize) [ FD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_9 $$ byte[] compb = new byte[readSize][ CD ]
Line_16 $$ while (bytesToRead > 0) -->Line_18 $$ stm.readFully(b, 0, thisread)[ CD ]
Line_20 $$ if (thisread == readSize) -->Line_23 $$ for (int k = 0; k < thisread; k++) [ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_8 $$ long bytesToRead = fileSize[ CD ]
Line_3 $$ final int readSize = pattern.length * 16 * 1024 * 1024-->Line_11 $$ for (int j = 0; j < readSize; j++) [ FD ]
Line_10 $$ if (verifyData) -->Line_11 $$ for (int j = 0; j < readSize; j++) [ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_15 $$ FSDataInputStream stm = fs.open(name)[ FD ]
Line_7 $$ byte[] b = new byte[readSize]-->Line_18 $$ stm.readFully(b, 0, thisread)[ FD ]
Line_16 $$ while (bytesToRead > 0) -->Line_19 $$ if (verifyData) [ CD ]
Line_3 $$ final int readSize = pattern.length * 16 * 1024 * 1024-->Line_20 $$ if (thisread == readSize) [ FD ]
Line_7 $$ byte[] b = new byte[readSize]-->Line_21 $$ assertTrue("file is corrupted at or after byte " + (fileSize - bytesToRead), Arrays.equals(b, compb))[ FD ]
Line_29 $$ bytesToRead -= thisread-->Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)[ FD ]
Line_20 $$ if (thisread == readSize) -->Line_21 $$ assertTrue("file is corrupted at or after byte " + (fileSize - bytesToRead), Arrays.equals(b, compb))[ CD ]
Line_8 $$ long bytesToRead = fileSize-->Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)[ FD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_15 $$ FSDataInputStream stm = fs.open(name)[ CD ]
Line_16 $$ while (bytesToRead > 0) -->Line_30 $$ LOG.debug("After  update: to read: " + bytesToRead + "; read already: " + thisread)[ CD ]
Line_19 $$ if (verifyData) -->Line_20 $$ if (thisread == readSize) [ CD ]
Line_2 $$ static void checkFullFile(FileSystem fs, Path name, final long fileSize) throws IOException -->Line_4 $$ if (readSize > Integer.MAX_VALUE) [ CD ]
Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)-->Line_29 $$ bytesToRead -= thisread[ FD ]
Line_29 $$ bytesToRead -= thisread-->Line_16 $$ while (bytesToRead > 0) [ FD ]
Line_3 $$ final int readSize = pattern.length * 16 * 1024 * 1024-->Line_17 $$ int thisread = (int) Math.min(readSize, bytesToRead)[ FD ]
