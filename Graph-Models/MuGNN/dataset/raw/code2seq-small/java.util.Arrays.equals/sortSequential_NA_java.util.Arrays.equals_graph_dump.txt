Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_5 $$ for (int i = 0; i < SAMPLE; ++i) [ CD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_3 $$ final int SAMPLE = 500[ CD ]
Line_4 $$ int[] values = new int[SAMPLE]-->Line_11 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_8 $$ SampleSortable s = new SampleSortable(values)[ CD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ CD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_11 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ CD ]
Line_3 $$ final int SAMPLE = 500-->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_5 $$ for (int i = 0; i < SAMPLE; ++i) -->Line_6 $$ values[i] = i[ CD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_10 $$ int[] check = s.getSorted()[ CD ]
Line_8 $$ SampleSortable s = new SampleSortable(values)-->Line_10 $$ int[] check = s.getSorted()[ FD ]
Line_10 $$ int[] check = s.getSorted()-->Line_11 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_8 $$ SampleSortable s = new SampleSortable(values)-->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_2 $$ public void sortSequential(IndexedSorter sorter) throws Exception -->Line_4 $$ int[] values = new int[SAMPLE][ CD ]
Line_3 $$ final int SAMPLE = 500-->Line_5 $$ for (int i = 0; i < SAMPLE; ++i) [ FD ]
Line_5 $$ for (int i = 0; i < SAMPLE; ++i) -->Line_6 $$ values[i] = i[ FD ]
