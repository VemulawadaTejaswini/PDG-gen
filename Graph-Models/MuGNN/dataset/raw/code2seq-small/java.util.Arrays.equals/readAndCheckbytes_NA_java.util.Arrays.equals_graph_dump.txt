Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_3 $$ String value = "value"[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_8 $$ String valStr = value + keyStr[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_15 $$ assertTrue("bytes for vals do not match", Arrays.equals(valStr.getBytes(), val))[ CD ]
Line_12 $$ key = readKey(scanner)-->Line_9 $$ assertTrue("btyes for keys do not match " + keyStr + " " + new String(key), Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_6 $$ byte[] val = readValue(scanner)[ FD ]
Line_6 $$ byte[] val = readValue(scanner)-->Line_10 $$ assertTrue("bytes for vals do not match " + valStr + " " + new String(val), Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_16 $$ assertTrue(scanner.advance())[ FD ]
Line_13 $$ val = readValue(scanner)-->Line_15 $$ assertTrue("bytes for vals do not match", Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_8 $$ String valStr = value + keyStr-->Line_15 $$ assertTrue("bytes for vals do not match", Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_7 $$ String keyStr = String.format(localFormatter, i)-->Line_14 $$ assertTrue("btyes for keys do not match", Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_13 $$ val = readValue(scanner)[ CD ]
Line_6 $$ byte[] val = readValue(scanner)-->Line_13 $$ val = readValue(scanner)[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_18 $$ return (start + n)[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_11 $$ assertTrue(scanner.advance())[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_14 $$ assertTrue("btyes for keys do not match", Arrays.equals(keyStr.getBytes(), key))[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_7 $$ String keyStr = String.format(localFormatter, i)[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_5 $$ byte[] key = readKey(scanner)[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_13 $$ val = readValue(scanner)[ FD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_11 $$ assertTrue(scanner.advance())[ FD ]
Line_7 $$ String keyStr = String.format(localFormatter, i)-->Line_9 $$ assertTrue("btyes for keys do not match " + keyStr + " " + new String(key), Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_10 $$ assertTrue("bytes for vals do not match " + valStr + " " + new String(val), Arrays.equals(valStr.getBytes(), val))[ CD ]
Line_5 $$ byte[] key = readKey(scanner)-->Line_12 $$ key = readKey(scanner)[ FD ]
Line_12 $$ key = readKey(scanner)-->Line_14 $$ assertTrue("btyes for keys do not match", Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_6 $$ byte[] val = readValue(scanner)[ CD ]
Line_13 $$ val = readValue(scanner)-->Line_10 $$ assertTrue("bytes for vals do not match " + valStr + " " + new String(val), Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_5 $$ byte[] key = readKey(scanner)-->Line_14 $$ assertTrue("btyes for keys do not match", Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_12 $$ key = readKey(scanner)[ CD ]
Line_6 $$ byte[] val = readValue(scanner)-->Line_15 $$ assertTrue("bytes for vals do not match", Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_8 $$ String valStr = value + keyStr-->Line_10 $$ assertTrue("bytes for vals do not match " + valStr + " " + new String(val), Arrays.equals(valStr.getBytes(), val))[ FD ]
Line_5 $$ byte[] key = readKey(scanner)-->Line_9 $$ assertTrue("btyes for keys do not match " + keyStr + " " + new String(key), Arrays.equals(keyStr.getBytes(), key))[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_7 $$ String keyStr = String.format(localFormatter, i)[ CD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_4 $$ for (int i = start; i < (start + n); i++) [ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_5 $$ byte[] key = readKey(scanner)[ CD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_9 $$ assertTrue("btyes for keys do not match " + keyStr + " " + new String(key), Arrays.equals(keyStr.getBytes(), key))[ CD ]
Line_2 $$ private int readAndCheckbytes(Scanner scanner, int start, int n) throws IOException -->Line_12 $$ key = readKey(scanner)[ FD ]
Line_4 $$ for (int i = start; i < (start + n); i++) -->Line_16 $$ assertTrue(scanner.advance())[ CD ]
