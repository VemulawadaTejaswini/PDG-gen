Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_4 $$ SampleSortable s = new SampleSortable(SAMPLE)[ CD ]
Line_3 $$ final int SAMPLE = 1-->Line_6 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_7 $$ int[] check = s.getSorted()-->Line_8 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_6 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_4 $$ SampleSortable s = new SampleSortable(SAMPLE)-->Line_7 $$ int[] check = s.getSorted()[ FD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_7 $$ int[] check = s.getSorted()[ CD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_8 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ CD ]
Line_4 $$ SampleSortable s = new SampleSortable(SAMPLE)-->Line_6 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_5 $$ int[] values = s.getValues()[ CD ]
Line_5 $$ int[] values = s.getValues()-->Line_8 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_4 $$ SampleSortable s = new SampleSortable(SAMPLE)-->Line_5 $$ int[] values = s.getValues()[ FD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_3 $$ final int SAMPLE = 1[ CD ]
Line_2 $$ public void sortSingleRecord(IndexedSorter sorter) throws Exception -->Line_6 $$ sorter.sort(s, 0, SAMPLE)[ CD ]
