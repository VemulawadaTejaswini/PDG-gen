Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_3 $$ if (!ltree.fullRange.equals(rtree.fullRange))[ CD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_14 $$ diff.add(active)[ FD ]
Line_12 $$ if (lhash != null && rhash != null && !Arrays.equals(lhash, rhash)) -->Line_15 $$ if (lhash == null || rhash == null)[ CD ]
Line_5 $$ List<TreeRange> diff = new ArrayList()-->Line_14 $$ diff.add(active)[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_8 $$ Hashable rnode = rtree.find(active)[ CD ]
Line_8 $$ Hashable rnode = rtree.find(active)-->Line_11 $$ active.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_12 $$ if (lhash != null && rhash != null && !Arrays.equals(lhash, rhash)) [ CD ]
Line_13 $$ if (FULLY_INCONSISTENT == differenceHelper(ltree, rtree, diff, active))-->Line_14 $$ diff.add(active)[ CD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_7 $$ Hashable lnode = ltree.find(active)[ FD ]
Line_7 $$ Hashable lnode = ltree.find(active)-->Line_11 $$ active.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_10 $$ byte[] rhash = rnode.hash()[ CD ]
Line_9 $$ byte[] lhash = lnode.hash()-->Line_12 $$ if (lhash != null && rhash != null && !Arrays.equals(lhash, rhash)) [ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_5 $$ List<TreeRange> diff = new ArrayList()[ CD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_8 $$ Hashable rnode = rtree.find(active)[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_11 $$ active.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ CD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_9 $$ byte[] lhash = lnode.hash()[ CD ]
Line_5 $$ List<TreeRange> diff = new ArrayList()-->Line_13 $$ if (FULLY_INCONSISTENT == differenceHelper(ltree, rtree, diff, active))[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_17 $$ return diff[ CD ]
Line_7 $$ Hashable lnode = ltree.find(active)-->Line_9 $$ byte[] lhash = lnode.hash()[ FD ]
Line_12 $$ if (lhash != null && rhash != null && !Arrays.equals(lhash, rhash)) -->Line_13 $$ if (FULLY_INCONSISTENT == differenceHelper(ltree, rtree, diff, active))[ CD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_13 $$ if (FULLY_INCONSISTENT == differenceHelper(ltree, rtree, diff, active))[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_7 $$ Hashable lnode = ltree.find(active)[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_7 $$ Hashable lnode = ltree.find(active)[ CD ]
Line_10 $$ byte[] rhash = rnode.hash()-->Line_12 $$ if (lhash != null && rhash != null && !Arrays.equals(lhash, rhash)) [ FD ]
Line_8 $$ Hashable rnode = rtree.find(active)-->Line_10 $$ byte[] rhash = rnode.hash()[ FD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_8 $$ Hashable rnode = rtree.find(active)[ FD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_11 $$ active.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_5 $$ List<TreeRange> diff = new ArrayList()-->Line_16 $$ diff.add(active)[ FD ]
Line_2 $$ public static List<TreeRange> difference(MerkleTree ltree, MerkleTree rtree) -->Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)[ CD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_16 $$ diff.add(active)[ FD ]
Line_15 $$ if (lhash == null || rhash == null)-->Line_16 $$ diff.add(active)[ CD ]
Line_6 $$ TreeDifference active = new TreeDifference(ltree.fullRange.left, ltree.fullRange.right, (byte) 0)-->Line_13 $$ if (FULLY_INCONSISTENT == differenceHelper(ltree, rtree, diff, active))[ FD ]
