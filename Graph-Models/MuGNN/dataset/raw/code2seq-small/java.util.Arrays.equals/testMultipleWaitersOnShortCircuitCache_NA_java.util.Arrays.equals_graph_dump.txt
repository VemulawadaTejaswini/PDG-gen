Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_40 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_40 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_41 $$ threads[i] = new Thread(readerRunnable)[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_45 $$ latch.countDown()[ FD ]
Line_46 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_47 $$ Uninterruptibles.joinUninterruptibly(threads[i])[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_17 $$ Configuration conf = createShortCircuitConf("testMultipleWaitersOnShortCircuitCache", sockDir)[ CD ]
Line_31 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)-->Line_32 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_40 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_46 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_13 $$ return null[ CD ]
Line_4 $$ final AtomicBoolean creationIsBlocked = new AtomicBoolean(true)-->Line_30 $$ Assert.assertFalse(creationIsBlocked.get())[ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_49 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_45 $$ latch.countDown()[ CD ]
Line_10 $$ if (!creationIsBlocked.compareAndSet(true, false)) -->Line_11 $$ Assert.fail("there were multiple calls to " + "createShortCircuitReplicaInfo.  Only one was expected.")[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_6 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_9 $$ Uninterruptibles.awaitUninterruptibly(latch)[ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_18 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_51 $$ Assert.assertFalse(testFailed.get())[ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_4 $$ final AtomicBoolean creationIsBlocked = new AtomicBoolean(true)[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_19 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_46 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_29 $$ byte[] contents = DFSTestUtil.readFileBuffer(dfs, new Path(TEST_FILE))-->Line_32 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)[ CD ]
Line_40 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_42 $$ threads[i].start()[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_25 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_44 $$ Thread.sleep(500)[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_9 $$ Uninterruptibles.awaitUninterruptibly(latch)[ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_51 $$ Assert.assertFalse(testFailed.get())[ CD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_10 $$ if (!creationIsBlocked.compareAndSet(true, false)) [ CD ]
Line_4 $$ final AtomicBoolean creationIsBlocked = new AtomicBoolean(true)-->Line_10 $$ if (!creationIsBlocked.compareAndSet(true, false)) [ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() [ CD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_50 $$ sockDir.close()[ CD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_35 $$ testFailed.set(true)[ FD ]
Line_2 $$ public void testMultipleWaitersOnShortCircuitCache() throws Exception -->Line_20 $$ final DistributedFileSystem dfs = cluster.getFileSystem()[ CD ]
