Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_22 $$ Arrays.fill(buffer, n, buffer.length, (byte) 0)[ FD ]
Line_11 $$ while (read < size) -->Line_26 $$ reporter.setStatus("reading " + name + "@" + read + "/" + size)[ CD ]
Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_14 $$ in.readFully(buffer, 0, n)[ FD ]
Line_11 $$ while (read < size) -->Line_15 $$ read += n[ CD ]
Line_21 $$ if (n != buffer.length) -->Line_23 $$ Arrays.fill(check, n, check.length, (byte) 0)[ CD ]
Line_4 $$ long size = value.get()-->Line_11 $$ while (read < size) [ FD ]
Line_8 $$ DataInputStream in = new DataInputStream(fs.open(new Path(DATA_DIR, name)))-->Line_14 $$ in.readFully(buffer, 0, n)[ FD ]
Line_11 $$ while (read < size) -->Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length[ CD ]
Line_11 $$ while (read < size) -->Line_12 $$ long remains = size - read[ CD ]
Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_15 $$ read += n[ FD ]
Line_11 $$ while (read < size) -->Line_16 $$ if (fastCheck) [ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_31 $$ collector.collect(new Text("bytes"), new LongWritable(read))[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_26 $$ reporter.setStatus("reading " + name + "@" + read + "/" + size)[ FD ]
Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_23 $$ Arrays.fill(check, n, check.length, (byte) 0)[ FD ]
Line_3 $$ String name = key.toString()-->Line_5 $$ long seed = Long.parseLong(name)[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_7 $$ reporter.setStatus("opening " + name)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_3 $$ String name = key.toString()[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_3 $$ String name = key.toString()[ CD ]
Line_11 $$ while (read < size) -->Line_25 $$ assertTrue(Arrays.equals(buffer, check))[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_8 $$ DataInputStream in = new DataInputStream(fs.open(new Path(DATA_DIR, name)))[ CD ]
Line_13 $$ int n = (remains <= buffer.length) ? (int) remains : buffer.length-->Line_21 $$ if (n != buffer.length) [ FD ]
Line_11 $$ while (read < size) -->Line_21 $$ if (n != buffer.length) [ CD ]
Line_15 $$ read += n-->Line_11 $$ while (read < size) [ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_6 $$ random.setSeed(seed)[ CD ]
Line_5 $$ long seed = Long.parseLong(name)-->Line_6 $$ random.setSeed(seed)[ FD ]
Line_8 $$ DataInputStream in = new DataInputStream(fs.open(new Path(DATA_DIR, name)))-->Line_29 $$ in.close()[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_32 $$ reporter.setStatus("read " + name)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_32 $$ reporter.setStatus("read " + name)[ FD ]
Line_16 $$ if (fastCheck) -->Line_19 $$ random.nextBytes(check)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_5 $$ long seed = Long.parseLong(name)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_9 $$ long read = 0[ CD ]
Line_9 $$ long read = 0-->Line_15 $$ read += n[ FD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_7 $$ reporter.setStatus("opening " + name)[ FD ]
Line_16 $$ if (fastCheck) -->Line_17 $$ Arrays.fill(check, (byte) random.nextInt(Byte.MAX_VALUE))[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_4 $$ long size = value.get()[ FD ]
Line_11 $$ while (read < size) -->Line_14 $$ in.readFully(buffer, 0, n)[ CD ]
Line_21 $$ if (n != buffer.length) -->Line_22 $$ Arrays.fill(buffer, n, buffer.length, (byte) 0)[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_4 $$ long size = value.get()[ CD ]
Line_2 $$ public void map(Text key, LongWritable value, OutputCollector<Text, LongWritable> collector, Reporter reporter) throws IOException -->Line_31 $$ collector.collect(new Text("bytes"), new LongWritable(read))[ FD ]
Line_9 $$ long read = 0-->Line_11 $$ while (read < size) [ FD ]
