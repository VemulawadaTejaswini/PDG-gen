Line_3 $$ final List<Method> methods = new ArrayList<Method>(32)-->Line_22 $$ methods.add(method)[ FD ]
Line_2 $$ public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) -->Line_4 $$ doWithMethods(leafClass, new MethodCallback() [ FD ]
Line_7 $$ Method methodBeingOverriddenWithCovariantReturnType = null-->Line_19 $$ methods.remove(methodBeingOverriddenWithCovariantReturnType)[ FD ]
Line_2 $$ public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) -->Line_3 $$ final List<Method> methods = new ArrayList<Method>(32)[ CD ]
Line_8 $$ for (Method existingMethod : methods) -->Line_9 $$ if (method.getName().equals(existingMethod.getName()) && Arrays.equals(method.getParameterTypes(), existingMethod.getParameterTypes())) [ FD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_9 $$ if (method.getName().equals(existingMethod.getName()) && Arrays.equals(method.getParameterTypes(), existingMethod.getParameterTypes())) [ FD ]
Line_9 $$ if (method.getName().equals(existingMethod.getName()) && Arrays.equals(method.getParameterTypes(), existingMethod.getParameterTypes())) -->Line_10 $$ if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) [ CD ]
Line_6 $$ boolean knownSignature = false-->Line_13 $$ knownSignature = true[ FD ]
Line_11 $$ methodBeingOverriddenWithCovariantReturnType = existingMethod-->Line_18 $$ if (methodBeingOverriddenWithCovariantReturnType != null) [ FD ]
Line_2 $$ public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) -->Line_26 $$ return methods.toArray(new Method[methods.size()])[ CD ]
Line_7 $$ Method methodBeingOverriddenWithCovariantReturnType = null-->Line_18 $$ if (methodBeingOverriddenWithCovariantReturnType != null) [ FD ]
Line_2 $$ public static Method[] getUniqueDeclaredMethods(Class<?> leafClass) -->Line_4 $$ doWithMethods(leafClass, new MethodCallback() [ CD ]
Line_10 $$ if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) -->Line_11 $$ methodBeingOverriddenWithCovariantReturnType = existingMethod[ CD ]
Line_8 $$ for (Method existingMethod : methods) -->Line_10 $$ if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) [ FD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_6 $$ boolean knownSignature = false[ CD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_21 $$ if (!knownSignature && !isCglibRenamedMethod(method)) [ CD ]
Line_21 $$ if (!knownSignature && !isCglibRenamedMethod(method)) -->Line_22 $$ methods.add(method)[ CD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_7 $$ Method methodBeingOverriddenWithCovariantReturnType = null[ CD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_21 $$ if (!knownSignature && !isCglibRenamedMethod(method)) [ FD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_22 $$ methods.add(method)[ FD ]
Line_18 $$ if (methodBeingOverriddenWithCovariantReturnType != null) -->Line_19 $$ methods.remove(methodBeingOverriddenWithCovariantReturnType)[ CD ]
Line_11 $$ methodBeingOverriddenWithCovariantReturnType = existingMethod-->Line_19 $$ methods.remove(methodBeingOverriddenWithCovariantReturnType)[ FD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_18 $$ if (methodBeingOverriddenWithCovariantReturnType != null) [ CD ]
Line_7 $$ Method methodBeingOverriddenWithCovariantReturnType = null-->Line_11 $$ methodBeingOverriddenWithCovariantReturnType = existingMethod[ FD ]
Line_10 $$ if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) -->Line_13 $$ knownSignature = true[ CD ]
Line_13 $$ knownSignature = true-->Line_21 $$ if (!knownSignature && !isCglibRenamedMethod(method)) [ FD ]
Line_3 $$ final List<Method> methods = new ArrayList<Method>(32)-->Line_26 $$ return methods.toArray(new Method[methods.size()])[ FD ]
Line_8 $$ for (Method existingMethod : methods) -->Line_11 $$ methodBeingOverriddenWithCovariantReturnType = existingMethod[ FD ]
Line_3 $$ final List<Method> methods = new ArrayList<Method>(32)-->Line_19 $$ methods.remove(methodBeingOverriddenWithCovariantReturnType)[ FD ]
Line_6 $$ boolean knownSignature = false-->Line_21 $$ if (!knownSignature && !isCglibRenamedMethod(method)) [ FD ]
Line_4 $$ doWithMethods(leafClass, new MethodCallback() -->Line_10 $$ if (existingMethod.getReturnType() != method.getReturnType() && existingMethod.getReturnType().isAssignableFrom(method.getReturnType())) [ FD ]
