Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_16 $$ int ldiff = CONSISTENT[ CD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_25 $$ rhash = rnode.hash()[ CD ]
Line_13 $$ rhash = rnode.hash()-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_23 $$ rnode = rtree.find(right)-->Line_25 $$ rhash = rnode.hash()[ FD ]
Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)-->Line_39 $$ if (rdiff == FULLY_INCONSISTENT) [ FD ]
Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))-->Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))[ CD ]
Line_36 $$ if (ldiff == FULLY_INCONSISTENT) -->Line_39 $$ if (rdiff == FULLY_INCONSISTENT) [ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_15 $$ left.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_23 $$ rnode = rtree.find(right)[ FD ]
Line_8 $$ byte[] lhash, rhash-->Line_13 $$ rhash = rnode.hash()[ FD ]
Line_16 $$ int ldiff = CONSISTENT-->Line_21 $$ ldiff = FULLY_INCONSISTENT[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_24 $$ lhash = lnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_8 $$ byte[] lhash, rhash[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_34 $$ if (ldiff == FULLY_INCONSISTENT && rdiff == FULLY_INCONSISTENT) [ CD ]
Line_11 $$ rnode = rtree.find(left)-->Line_23 $$ rnode = rtree.find(right)[ FD ]
Line_3 $$ if (active.depth == Byte.MAX_VALUE)-->Line_4 $$ return CONSISTENT[ CD ]
Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))-->Line_20 $$ if (!lreso)[ CD ]
Line_24 $$ lhash = lnode.hash()-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_39 $$ if (rdiff == FULLY_INCONSISTENT) -->Line_41 $$ return PARTIALLY_INCONSISTENT[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))[ CD ]
Line_23 $$ rnode = rtree.find(right)-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_14 $$ left.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_15 $$ left.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)-->Line_33 $$ rdiff = FULLY_INCONSISTENT[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_10 $$ lnode = ltree.find(left)[ CD ]
Line_25 $$ rhash = rnode.hash()-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_36 $$ if (ldiff == FULLY_INCONSISTENT) -->Line_37 $$ diff.add(left)[ CD ]
Line_34 $$ if (ldiff == FULLY_INCONSISTENT && rdiff == FULLY_INCONSISTENT) -->Line_36 $$ if (ldiff == FULLY_INCONSISTENT) [ CD ]
Line_16 $$ int ldiff = CONSISTENT-->Line_36 $$ if (ldiff == FULLY_INCONSISTENT) [ FD ]
Line_13 $$ rhash = rnode.hash()-->Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_29 $$ boolean rreso = lhash != null && rhash != null[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_23 $$ rnode = rtree.find(right)[ CD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ CD ]
Line_11 $$ rnode = rtree.find(left)-->Line_15 $$ left.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_14 $$ left.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_8 $$ byte[] lhash, rhash-->Line_12 $$ lhash = lnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_17 $$ boolean lreso = lhash != null && rhash != null[ CD ]
Line_11 $$ rnode = rtree.find(left)-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_23 $$ rnode = rtree.find(right)[ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_24 $$ lhash = lnode.hash()[ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_11 $$ rnode = rtree.find(left)[ FD ]
Line_29 $$ boolean rreso = lhash != null && rhash != null-->Line_32 $$ if (!rreso)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_40 $$ diff.add(right)[ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_37 $$ diff.add(left)[ FD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_40 $$ diff.add(right)[ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)[ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_22 $$ lnode = ltree.find(right)[ FD ]
Line_11 $$ rnode = rtree.find(left)-->Line_14 $$ left.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_3 $$ if (active.depth == Byte.MAX_VALUE)[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_28 $$ int rdiff = CONSISTENT[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_5 $$ Token midpoint = ltree.partitioner().midpoint(active.left, active.right)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_9 $$ Hashable lnode, rnode[ CD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_28 $$ int rdiff = CONSISTENT-->Line_33 $$ rdiff = FULLY_INCONSISTENT[ FD ]
Line_39 $$ if (rdiff == FULLY_INCONSISTENT) -->Line_40 $$ diff.add(right)[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))[ CD ]
Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))-->Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)[ CD ]
Line_10 $$ lnode = ltree.find(left)-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_14 $$ left.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_14 $$ left.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ CD ]
Line_9 $$ Hashable lnode, rnode-->Line_10 $$ lnode = ltree.find(left)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_24 $$ lhash = lnode.hash()[ CD ]
Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))-->Line_32 $$ if (!rreso)[ CD ]
Line_7 $$ TreeDifference right = new TreeDifference(midpoint, active.right, inc(active.depth))-->Line_22 $$ lnode = ltree.find(right)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_37 $$ diff.add(left)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)[ FD ]
Line_22 $$ lnode = ltree.find(right)-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_12 $$ lhash = lnode.hash()-->Line_24 $$ lhash = lnode.hash()[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_13 $$ rhash = rnode.hash()[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_20 $$ if (!lreso)-->Line_21 $$ ldiff = FULLY_INCONSISTENT[ CD ]
Line_9 $$ Hashable lnode, rnode-->Line_12 $$ lhash = lnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_22 $$ lnode = ltree.find(right)[ FD ]
Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)-->Line_36 $$ if (ldiff == FULLY_INCONSISTENT) [ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ CD ]
Line_11 $$ rnode = rtree.find(left)-->Line_25 $$ rhash = rnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_22 $$ lnode = ltree.find(right)[ CD ]
Line_17 $$ boolean lreso = lhash != null && rhash != null-->Line_20 $$ if (!lreso)[ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_28 $$ int rdiff = CONSISTENT-->Line_31 $$ rdiff = differenceHelper(ltree, rtree, diff, right)[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_10 $$ lnode = ltree.find(left)[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_22 $$ lnode = ltree.find(right)[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_25 $$ rhash = rnode.hash()[ FD ]
Line_34 $$ if (ldiff == FULLY_INCONSISTENT && rdiff == FULLY_INCONSISTENT) -->Line_35 $$ return FULLY_INCONSISTENT[ CD ]
Line_8 $$ byte[] lhash, rhash-->Line_24 $$ lhash = lnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_5 $$ Token midpoint = ltree.partitioner().midpoint(active.left, active.right)[ CD ]
Line_29 $$ boolean rreso = lhash != null && rhash != null-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_8 $$ byte[] lhash, rhash-->Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_11 $$ rnode = rtree.find(left)[ FD ]
Line_8 $$ byte[] lhash, rhash-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_28 $$ int rdiff = CONSISTENT-->Line_39 $$ if (rdiff == FULLY_INCONSISTENT) [ FD ]
Line_11 $$ rnode = rtree.find(left)-->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ FD ]
Line_36 $$ if (ldiff == FULLY_INCONSISTENT) -->Line_38 $$ return PARTIALLY_INCONSISTENT[ CD ]
Line_33 $$ rdiff = FULLY_INCONSISTENT-->Line_39 $$ if (rdiff == FULLY_INCONSISTENT) [ FD ]
Line_10 $$ lnode = ltree.find(left)-->Line_12 $$ lhash = lnode.hash()[ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_15 $$ left.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_22 $$ lnode = ltree.find(right)-->Line_24 $$ lhash = lnode.hash()[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_23 $$ rnode = rtree.find(right)[ FD ]
Line_12 $$ lhash = lnode.hash()-->Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_9 $$ Hashable lnode, rnode-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_26 $$ right.setSize(lnode.sizeOfRange(), rnode.sizeOfRange())[ CD ]
Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)-->Line_21 $$ ldiff = FULLY_INCONSISTENT[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_43 $$ return PARTIALLY_INCONSISTENT[ CD ]
Line_8 $$ byte[] lhash, rhash-->Line_25 $$ rhash = rnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_13 $$ rhash = rnode.hash()[ CD ]
Line_9 $$ Hashable lnode, rnode-->Line_15 $$ left.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_11 $$ rnode = rtree.find(left)-->Line_13 $$ rhash = rnode.hash()[ FD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_11 $$ rnode = rtree.find(left)[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_12 $$ lhash = lnode.hash()[ CD ]
Line_2 $$ static int differenceHelper(MerkleTree ltree, MerkleTree rtree, List<TreeRange> diff, TreeRange active) -->Line_11 $$ rnode = rtree.find(left)[ FD ]
Line_32 $$ if (!rreso)-->Line_33 $$ rdiff = FULLY_INCONSISTENT[ CD ]
Line_12 $$ lhash = lnode.hash()-->Line_30 $$ if (rreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_22 $$ lnode = ltree.find(right)-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
Line_17 $$ boolean lreso = lhash != null && rhash != null-->Line_18 $$ if (lreso && !Arrays.equals(lhash, rhash))[ FD ]
Line_21 $$ ldiff = FULLY_INCONSISTENT-->Line_36 $$ if (ldiff == FULLY_INCONSISTENT) [ FD ]
Line_6 $$ TreeDifference left = new TreeDifference(active.left, midpoint, inc(active.depth))-->Line_10 $$ lnode = ltree.find(left)[ FD ]
Line_16 $$ int ldiff = CONSISTENT-->Line_19 $$ ldiff = differenceHelper(ltree, rtree, diff, left)[ FD ]
Line_13 $$ rhash = rnode.hash()-->Line_25 $$ rhash = rnode.hash()[ FD ]
Line_23 $$ rnode = rtree.find(right)-->Line_27 $$ right.setRows(lnode.rowsInRange(), rnode.rowsInRange())[ FD ]
