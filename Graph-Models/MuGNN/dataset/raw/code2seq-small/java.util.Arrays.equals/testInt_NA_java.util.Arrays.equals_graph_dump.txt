Line_2 $$ public void testInt() -->Line_7 $$ byte[] bytes = new byte[_COUNT * 4][ CD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testInt() -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_2 $$ public void testInt() -->Line_16 $$ int[] newInts = new int[_COUNT][ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ intBuffer.put(ints[i])[ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_13 $$ BigEndianCodec.putInt(bytes, i * 4, ints[i])[ FD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ IntBuffer intBuffer = byteBuffer.asIntBuffer()[ FD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_5 $$ ints[i] = _random.nextInt()[ CD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_2 $$ public void testInt() -->Line_4 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_2 $$ public void testInt() -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_3 $$ int[] ints = new int[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(ints, newInts))[ FD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_17 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ newInts[i] = BigEndianCodec.getInt(bytes, i * 4)[ CD ]
Line_2 $$ public void testInt() -->Line_20 $$ Assert.assertTrue(Arrays.equals(ints, newInts))[ CD ]
Line_16 $$ int[] newInts = new int[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(ints, newInts))[ FD ]
Line_10 $$ IntBuffer intBuffer = byteBuffer.asIntBuffer()-->Line_12 $$ intBuffer.put(ints[i])[ FD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ BigEndianCodec.putInt(bytes, i * 4, ints[i])[ CD ]
Line_2 $$ public void testInt() -->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_18 $$ newInts[i] = BigEndianCodec.getInt(bytes, i * 4)[ FD ]
Line_2 $$ public void testInt() -->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ CD ]
Line_2 $$ public void testInt() -->Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)[ CD ]
Line_2 $$ public void testInt() -->Line_3 $$ int[] ints = new int[_COUNT][ CD ]
Line_2 $$ public void testInt() -->Line_10 $$ IntBuffer intBuffer = byteBuffer.asIntBuffer()[ CD ]
