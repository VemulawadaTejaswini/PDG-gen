Line_3 $$ for (int i = start; i < start; i++) -->Line_13 $$ read = readLongValue(scanner, value.getBytes().length)[ CD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_17 $$ return (start + n)[ CD ]
Line_4 $$ String key = String.format(localFormatter, i)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_13 $$ read = readLongValue(scanner, value.getBytes().length)-->Line_14 $$ assertTrue("values nto equal", Arrays.equals(read, value.getBytes()))[ FD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_4 $$ String key = String.format(localFormatter, i)[ FD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_14 $$ assertTrue("values nto equal", Arrays.equals(read, value.getBytes()))[ CD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_5 $$ byte[] read = readKey(scanner)[ CD ]
Line_13 $$ read = readLongValue(scanner, value.getBytes().length)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_3 $$ for (int i = start; i < start; i++) [ FD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_8 $$ read = readValue(scanner)[ FD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_14 $$ assertTrue("values nto equal", Arrays.equals(read, value.getBytes()))[ FD ]
Line_8 $$ read = readValue(scanner)-->Line_13 $$ read = readLongValue(scanner, value.getBytes().length)[ FD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_12 $$ String value = "value" + key[ CD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_15 $$ scanner.advance()[ CD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_3 $$ for (int i = start; i < start; i++) [ CD ]
Line_8 $$ read = readValue(scanner)-->Line_14 $$ assertTrue("values nto equal", Arrays.equals(read, value.getBytes()))[ FD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ CD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_8 $$ read = readValue(scanner)[ FD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_15 $$ scanner.advance()[ FD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_13 $$ read = readLongValue(scanner, value.getBytes().length)[ FD ]
Line_12 $$ String value = "value" + key-->Line_14 $$ assertTrue("values nto equal", Arrays.equals(read, value.getBytes()))[ FD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_13 $$ read = readLongValue(scanner, value.getBytes().length)[ FD ]
Line_2 $$ private int readPrepWithUnknownLength(Scanner scanner, int start, int n) throws IOException -->Line_5 $$ byte[] read = readKey(scanner)[ FD ]
Line_3 $$ for (int i = start; i < start; i++) -->Line_4 $$ String key = String.format(localFormatter, i)[ CD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_8 $$ read = readValue(scanner)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_12 $$ String value = "value" + key-->Line_13 $$ read = readLongValue(scanner, value.getBytes().length)[ FD ]
