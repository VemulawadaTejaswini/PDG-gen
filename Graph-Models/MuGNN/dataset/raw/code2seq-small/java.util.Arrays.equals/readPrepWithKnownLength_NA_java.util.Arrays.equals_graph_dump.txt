Line_4 $$ String key = String.format(localFormatter, i)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_2 $$ private int readPrepWithKnownLength(Scanner scanner, int start, int n) throws IOException -->Line_10 $$ scanner.advance()[ FD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_7 $$ String value = "value" + key[ CD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_4 $$ String key = String.format(localFormatter, i)[ CD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ CD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_8 $$ read = readValue(scanner)[ FD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_10 $$ scanner.advance()[ CD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_8 $$ read = readValue(scanner)[ CD ]
Line_2 $$ private int readPrepWithKnownLength(Scanner scanner, int start, int n) throws IOException -->Line_8 $$ read = readValue(scanner)[ FD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_5 $$ byte[] read = readKey(scanner)[ CD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_9 $$ assertTrue("values not equal", Arrays.equals(value.getBytes(), read))[ FD ]
Line_2 $$ private int readPrepWithKnownLength(Scanner scanner, int start, int n) throws IOException -->Line_3 $$ for (int i = start; i < (start + n); i++) [ CD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_9 $$ assertTrue("values not equal", Arrays.equals(value.getBytes(), read))[ CD ]
Line_8 $$ read = readValue(scanner)-->Line_9 $$ assertTrue("values not equal", Arrays.equals(value.getBytes(), read))[ FD ]
Line_7 $$ String value = "value" + key-->Line_9 $$ assertTrue("values not equal", Arrays.equals(value.getBytes(), read))[ FD ]
Line_2 $$ private int readPrepWithKnownLength(Scanner scanner, int start, int n) throws IOException -->Line_5 $$ byte[] read = readKey(scanner)[ FD ]
Line_3 $$ for (int i = start; i < (start + n); i++) -->Line_4 $$ String key = String.format(localFormatter, i)[ FD ]
Line_2 $$ private int readPrepWithKnownLength(Scanner scanner, int start, int n) throws IOException -->Line_12 $$ return (start + n)[ CD ]
Line_5 $$ byte[] read = readKey(scanner)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
Line_8 $$ read = readValue(scanner)-->Line_6 $$ assertTrue("keys not equal", Arrays.equals(key.getBytes(), read))[ FD ]
