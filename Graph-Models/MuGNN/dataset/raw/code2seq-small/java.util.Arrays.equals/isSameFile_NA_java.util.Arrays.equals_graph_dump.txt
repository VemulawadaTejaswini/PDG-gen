Line_4 $$ if (!sameFileSize) -->Line_5 $$ return false[ CD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_9 $$ return Arrays.equals(firstBytes, secondBytes)[ CD ]
Line_8 $$ byte[] secondBytes = Files.readAllBytes(second)-->Line_9 $$ return Arrays.equals(firstBytes, secondBytes)[ FD ]
Line_7 $$ byte[] firstBytes = Files.readAllBytes(first)-->Line_9 $$ return Arrays.equals(firstBytes, secondBytes)[ FD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_3 $$ boolean sameFileSize = Files.size(first) == Files.size(second)[ CD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_3 $$ boolean sameFileSize = Files.size(first) == Files.size(second)[ FD ]
Line_3 $$ boolean sameFileSize = Files.size(first) == Files.size(second)-->Line_4 $$ if (!sameFileSize) [ FD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_8 $$ byte[] secondBytes = Files.readAllBytes(second)[ CD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_8 $$ byte[] secondBytes = Files.readAllBytes(second)[ FD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_4 $$ if (!sameFileSize) [ CD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_7 $$ byte[] firstBytes = Files.readAllBytes(first)[ CD ]
Line_2 $$ private boolean isSameFile(Path first, Path second) throws IOException -->Line_7 $$ byte[] firstBytes = Files.readAllBytes(first)[ FD ]
