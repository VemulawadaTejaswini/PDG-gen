Line_3 $$ byte[] bytes = new byte[4096]-->Line_12 $$ assertTrue(Arrays.equals(bytes, bb))[ FD ]
Line_7 $$ try (MemoryInputStream stream = new MemoryInputStream(memory, 1024)) -->Line_9 $$ assertEquals(bytes.length, stream.available())[ FD ]
Line_3 $$ byte[] bytes = new byte[4096]-->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ FD ]
Line_2 $$ public void testInputStream() throws IOException -->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ CD ]
Line_8 $$ byte[] bb = new byte[bytes.length]-->Line_10 $$ stream.readFully(bb)[ FD ]
Line_7 $$ try (MemoryInputStream stream = new MemoryInputStream(memory, 1024)) -->Line_11 $$ assertEquals(0, stream.available())[ FD ]
Line_7 $$ try (MemoryInputStream stream = new MemoryInputStream(memory, 1024)) -->Line_10 $$ stream.readFully(bb)[ FD ]
Line_8 $$ byte[] bb = new byte[bytes.length]-->Line_12 $$ assertTrue(Arrays.equals(bytes, bb))[ FD ]
Line_5 $$ final Memory memory = Memory.allocate(bytes.length)-->Line_6 $$ memory.setBytes(0, bytes, 0, bytes.length)[ FD ]
Line_2 $$ public void testInputStream() throws IOException -->Line_3 $$ byte[] bytes = new byte[4096][ CD ]
Line_7 $$ try (MemoryInputStream stream = new MemoryInputStream(memory, 1024)) -->Line_14 $$ stream.readInt()[ FD ]
Line_2 $$ public void testInputStream() throws IOException -->Line_4 $$ ThreadLocalRandom.current().nextBytes(bytes)[ CD ]
Line_3 $$ byte[] bytes = new byte[4096]-->Line_4 $$ ThreadLocalRandom.current().nextBytes(bytes)[ FD ]
Line_2 $$ public void testInputStream() throws IOException -->Line_5 $$ final Memory memory = Memory.allocate(bytes.length)[ CD ]
