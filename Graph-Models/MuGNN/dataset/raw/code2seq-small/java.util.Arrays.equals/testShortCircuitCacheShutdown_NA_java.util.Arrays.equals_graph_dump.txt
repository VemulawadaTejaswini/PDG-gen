Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_9 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_19 $$ cache.close()[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_16 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ CD ]
Line_4 $$ Configuration conf = createShortCircuitConf("testShortCircuitCacheShutdown", sockDir)-->Line_5 $$ conf.set(DFS_CLIENT_CONTEXT, "testShortCircuitCacheShutdown")[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_18 $$ final ShortCircuitCache cache = fs.dfs.getClientContext().getShortCircuitCache()[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_21 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_5 $$ conf.set(DFS_CLIENT_CONTEXT, "testShortCircuitCacheShutdown")[ CD ]
Line_18 $$ final ShortCircuitCache cache = fs.dfs.getClientContext().getShortCircuitCache()-->Line_19 $$ cache.close()[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_6 $$ Configuration serverConf = new Configuration(conf)[ CD ]
Line_10 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), conf)-->Line_14 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_11 $$ final String TEST_FILE = "/test_file"[ CD ]
Line_18 $$ final ShortCircuitCache cache = fs.dfs.getClientContext().getShortCircuitCache()-->Line_20 $$ Assert.assertTrue(cache.getDfsClientShmManager().getDomainSocketWatcher().isClosed())[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_17 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_14 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_15 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_10 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), conf)[ CD ]
Line_15 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))-->Line_17 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_12 $$ final int TEST_FILE_LEN = 4000-->Line_14 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()[ CD ]
Line_10 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), conf)-->Line_15 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))[ FD ]
Line_13 $$ final int SEED = 0xFADEC-->Line_16 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_20 $$ Assert.assertTrue(cache.getDfsClientShmManager().getDomainSocketWatcher().isClosed())[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_10 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), conf)[ FD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_3 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_4 $$ Configuration conf = createShortCircuitConf("testShortCircuitCacheShutdown", sockDir)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_7 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_12 $$ final int TEST_FILE_LEN = 4000[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_21 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_4 $$ Configuration conf = createShortCircuitConf("testShortCircuitCacheShutdown", sockDir)[ CD ]
Line_16 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)-->Line_17 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_4 $$ Configuration conf = createShortCircuitConf("testShortCircuitCacheShutdown", sockDir)-->Line_10 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), conf)[ FD ]
Line_13 $$ final int SEED = 0xFADEC-->Line_14 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_3 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()[ CD ]
Line_12 $$ final int TEST_FILE_LEN = 4000-->Line_16 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testShortCircuitCacheShutdown() throws Exception -->Line_13 $$ final int SEED = 0xFADEC[ CD ]
