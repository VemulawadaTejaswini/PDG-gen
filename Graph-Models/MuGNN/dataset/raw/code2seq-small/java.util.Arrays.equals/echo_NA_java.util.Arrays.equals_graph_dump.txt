Line_19 $$ ClientHttpResponse response = futureResponse.get()-->Line_27 $$ response.close()[ FD ]
Line_10 $$ final byte[] body = "Hello World".getBytes("UTF-8")-->Line_16 $$ StreamUtils.copy(body, request.getBody())[ FD ]
Line_13 $$ StreamingHttpOutputMessage streamingRequest = (StreamingHttpOutputMessage) request-->Line_14 $$ streamingRequest.setBody( outputStream -> StreamUtils.copy(body, outputStream))[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_10 $$ final byte[] body = "Hello World".getBytes("UTF-8")[ CD ]
Line_2 $$ public void echo() throws Exception -->Line_19 $$ ClientHttpResponse response = futureResponse.get()[ CD ]
Line_6 $$ String headerValue1 = "value1"-->Line_23 $$ assertEquals("Header value not found", Arrays.asList(headerValue1, headerValue2), response.getHeaders().get(headerName))[ FD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_18 $$ Future<ClientHttpResponse> futureResponse = request.executeAsync()[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_4 $$ assertEquals("Invalid HTTP method", HttpMethod.PUT, request.getMethod())[ CD ]
Line_6 $$ String headerValue1 = "value1"-->Line_7 $$ request.getHeaders().add(headerName, headerValue1)[ FD ]
Line_19 $$ ClientHttpResponse response = futureResponse.get()-->Line_21 $$ assertEquals("Invalid status code", HttpStatus.OK, response.getStatusCode())[ FD ]
Line_12 $$ if (request instanceof StreamingHttpOutputMessage) -->Line_16 $$ StreamUtils.copy(body, request.getBody())[ CD ]
Line_19 $$ ClientHttpResponse response = futureResponse.get()-->Line_24 $$ byte[] result = FileCopyUtils.copyToByteArray(response.getBody())[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_5 $$ String headerName = "MyHeader"[ CD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_9 $$ request.getHeaders().add(headerName, headerValue2)[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_7 $$ request.getHeaders().add(headerName, headerValue1)[ CD ]
Line_19 $$ ClientHttpResponse response = futureResponse.get()-->Line_22 $$ assertTrue("Header not found", response.getHeaders().containsKey(headerName))[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_11 $$ request.getHeaders().setContentLength(body.length)[ CD ]
Line_10 $$ final byte[] body = "Hello World".getBytes("UTF-8")-->Line_25 $$ assertTrue("Invalid body", Arrays.equals(body, result))[ FD ]
Line_8 $$ String headerValue2 = "value2"-->Line_9 $$ request.getHeaders().add(headerName, headerValue2)[ FD ]
Line_8 $$ String headerValue2 = "value2"-->Line_23 $$ assertEquals("Header value not found", Arrays.asList(headerValue1, headerValue2), response.getHeaders().get(headerName))[ FD ]
Line_19 $$ ClientHttpResponse response = futureResponse.get()-->Line_23 $$ assertEquals("Header value not found", Arrays.asList(headerValue1, headerValue2), response.getHeaders().get(headerName))[ FD ]
Line_5 $$ String headerName = "MyHeader"-->Line_9 $$ request.getHeaders().add(headerName, headerValue2)[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_8 $$ String headerValue2 = "value2"[ CD ]
Line_5 $$ String headerName = "MyHeader"-->Line_23 $$ assertEquals("Header value not found", Arrays.asList(headerValue1, headerValue2), response.getHeaders().get(headerName))[ FD ]
Line_10 $$ final byte[] body = "Hello World".getBytes("UTF-8")-->Line_14 $$ StreamUtils.copy(body, outputStream)[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_12 $$ if (request instanceof StreamingHttpOutputMessage) [ CD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_4 $$ assertEquals("Invalid HTTP method", HttpMethod.PUT, request.getMethod())[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)[ CD ]
Line_5 $$ String headerName = "MyHeader"-->Line_22 $$ assertTrue("Header not found", response.getHeaders().containsKey(headerName))[ FD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_16 $$ StreamUtils.copy(body, request.getBody())[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_6 $$ String headerValue1 = "value1"[ CD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_12 $$ if (request instanceof StreamingHttpOutputMessage) [ FD ]
Line_12 $$ if (request instanceof StreamingHttpOutputMessage) -->Line_13 $$ StreamingHttpOutputMessage streamingRequest = (StreamingHttpOutputMessage) request[ CD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_7 $$ request.getHeaders().add(headerName, headerValue1)[ FD ]
Line_24 $$ byte[] result = FileCopyUtils.copyToByteArray(response.getBody())-->Line_25 $$ assertTrue("Invalid body", Arrays.equals(body, result))[ FD ]
Line_12 $$ if (request instanceof StreamingHttpOutputMessage) -->Line_14 $$ streamingRequest.setBody( outputStream -> StreamUtils.copy(body, outputStream))[ CD ]
Line_3 $$ AsyncClientHttpRequest request = this.factory.createAsyncRequest(new URI(baseUrl + "/echo"), HttpMethod.PUT)-->Line_11 $$ request.getHeaders().setContentLength(body.length)[ FD ]
Line_18 $$ Future<ClientHttpResponse> futureResponse = request.executeAsync()-->Line_19 $$ ClientHttpResponse response = futureResponse.get()[ FD ]
Line_2 $$ public void echo() throws Exception -->Line_9 $$ request.getHeaders().add(headerName, headerValue2)[ CD ]
Line_2 $$ public void echo() throws Exception -->Line_18 $$ Future<ClientHttpResponse> futureResponse = request.executeAsync()[ CD ]
Line_5 $$ String headerName = "MyHeader"-->Line_7 $$ request.getHeaders().add(headerName, headerValue1)[ FD ]
