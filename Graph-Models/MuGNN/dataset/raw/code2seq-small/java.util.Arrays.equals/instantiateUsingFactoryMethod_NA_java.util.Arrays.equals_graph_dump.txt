Line_8 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ FD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_129 $$ if (factoryMethodToUse == null) [ FD ]
Line_74 $$ for (int i = 0; i < candidates.length; i++) -->Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ CD ]
Line_131 $$ if (explicitArgs != null) -->Line_137 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ CD ]
Line_157 $$ if (System.getSecurityManager() != null) -->Line_161 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_62 $$ boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ CD ]
Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_161 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_172 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_157 $$ if (System.getSecurityManager() != null) -->Line_159 $$ final Method factoryMethod = factoryMethodToUse[ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_53 $$ List<Method> candidateSet = new ArrayList<Method>()[ CD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_63 $$ int minTypeDiffWeight = Integer.MAX_VALUE-->Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_51 $$ factoryClass = ClassUtils.getUserClass(factoryClass)[ CD ]
Line_46 $$ if (argsToResolve != null) -->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ CD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_74 $$ for (int i = 0; i < candidates.length; i++) [ CD ]
Line_77 $$ if (paramTypes.length >= minNrOfArgs) -->Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) [ CD ]
Line_132 $$ for (Object arg : explicitArgs) -->Line_133 $$ argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")[ FD ]
Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))-->Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_14 $$ if (factoryBean == null) [ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_23 $$ if (!mbd.hasBeanClass()) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_33 $$ if (explicitArgs != null) [ CD ]
Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ FD ]
Line_78 $$ ArgumentsHolder argsHolder-->Line_115 $$ argsHolderToUse = argsHolder[ FD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_20 $$ factoryClass = factoryBean.getClass()-->Line_51 $$ factoryClass = ClassUtils.getUserClass(factoryClass)[ FD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_137 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_34 $$ argsToUse = explicitArgs-->Line_41 $$ if (argsToUse == null) [ FD ]
Line_81 $$ String[] paramNames = null-->Line_84 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_79 $$ if (resolvedValues != null) -->Line_110 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ CD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_118 $$ ambiguousFactoryMethods = null[ FD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_70 $$ resolvedValues = new ConstructorArgumentValues()[ FD ]
Line_34 $$ argsToUse = explicitArgs-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))-->Line_117 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_121 $$ if (ambiguousFactoryMethods == null) -->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ CD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod[ FD ]
Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_20 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_33 $$ if (explicitArgs != null) [ FD ]
Line_130 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_141 $$ argTypes.add(argType)[ FD ]
Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_14 $$ if (factoryBean == null) [ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_21 $$ isStatic = false[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_55 $$ if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) [ FD ]
Line_129 $$ if (factoryMethodToUse == null) -->Line_144 $$ String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)[ CD ]
Line_118 $$ ambiguousFactoryMethods = null-->Line_148 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ CD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_79 $$ if (resolvedValues != null) [ FD ]
Line_110 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_82 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_84 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_114 $$ factoryMethodToUse = candidate[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_172 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_27 $$ factoryClass = mbd.getBeanClass()[ CD ]
Line_6 $$ Class<?> factoryClass-->Line_27 $$ factoryClass = mbd.getBeanClass()[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_32 $$ Object[] argsToUse = null[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_66 $$ if (explicitArgs != null) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_17 $$ if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) [ FD ]
Line_6 $$ Class<?> factoryClass-->Line_51 $$ factoryClass = ClassUtils.getUserClass(factoryClass)[ FD ]
Line_69 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_31 $$ ArgumentsHolder argsHolderToUse = null[ CD ]
Line_62 $$ boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_91 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_102 $$ causes.add(ex)[ CD ]
Line_160 $$ final Object[] args = argsToUse-->Line_163 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_26 $$ factoryBean = null-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_32 $$ Object[] argsToUse = null-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_26 $$ factoryBean = null[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_69 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()[ FD ]
Line_129 $$ if (factoryMethodToUse == null) -->Line_131 $$ if (explicitArgs != null) [ CD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_56 $$ candidateSet.add(candidate)[ FD ]
Line_59 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])-->Line_60 $$ AutowireUtils.sortFactoryMethods(candidates)[ FD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ FD ]
Line_34 $$ argsToUse = explicitArgs-->Line_116 $$ argsToUse = argsHolder.arguments[ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_61 $$ ConstructorArgumentValues resolvedValues = null[ CD ]
Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) -->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ CD ]
Line_118 $$ ambiguousFactoryMethods = null-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_121 $$ if (ambiguousFactoryMethods == null) -->Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ CD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_151 $$ if (explicitArgs == null && argsHolderToUse != null) -->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ CD ]
Line_110 $$ argsHolder = new ArgumentsHolder(explicitArgs)-->Line_115 $$ argsHolderToUse = argsHolder[ FD ]
Line_53 $$ List<Method> candidateSet = new ArrayList<Method>()-->Line_59 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])[ FD ]
Line_91 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_99 $$ if (causes == null) [ CD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_114 $$ factoryMethodToUse = candidate[ FD ]
Line_32 $$ Object[] argsToUse = null-->Line_40 $$ argsToUse = mbd.resolvedConstructorArguments[ FD ]
Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_110 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_41 $$ if (argsToUse == null) -->Line_42 $$ argsToResolve = mbd.preparedConstructorArguments[ CD ]
Line_51 $$ factoryClass = ClassUtils.getUserClass(factoryClass)-->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_118 $$ ambiguousFactoryMethods = null[ CD ]
Line_42 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_73 $$ List<Exception> causes = null-->Line_92 $$ if (causes != null) [ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_156 $$ Object beanInstance-->Line_161 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_27 $$ factoryClass = mbd.getBeanClass()[ FD ]
Line_129 $$ if (factoryMethodToUse == null) -->Line_146 $$ if (void.class == factoryMethodToUse.getReturnType()) [ CD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_34 $$ argsToUse = explicitArgs[ FD ]
Line_136 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())-->Line_138 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_145 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "No matching factory method found: " + (mbd.getFactoryBeanName() != null ? "factory bean '" + mbd.getFactoryBeanName() + "'; " : "") + "factory method '" + mbd.getFactoryMethodName() + "(" + argDesc + ")'. " + "Check that a method with the specified name " + (minNrOfArgs > 0 ? "and arguments " : "") + "exists and that it is " + (isStatic ? "static" : "non-static") + ".")[ FD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_137 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_129 $$ if (factoryMethodToUse == null) [ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_123 $$ ambiguousFactoryMethods.add(factoryMethodToUse)[ FD ]
Line_66 $$ if (explicitArgs != null) -->Line_67 $$ minNrOfArgs = explicitArgs.length[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_147 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Invalid factory method '" + mbd.getFactoryMethodName() + "': needs to have a non-void return type!")[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) [ CD ]
Line_156 $$ Object beanInstance-->Line_172 $$ bw.setWrappedInstance(beanInstance)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_77 $$ if (paramTypes.length >= minNrOfArgs) -->Line_79 $$ if (resolvedValues != null) [ CD ]
Line_118 $$ ambiguousFactoryMethods = null-->Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ FD ]
Line_130 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_144 $$ String argDesc = StringUtils.collectionToCommaDelimitedString(argTypes)[ FD ]
Line_100 $$ causes = new LinkedList<Exception>()-->Line_92 $$ if (causes != null) [ FD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_121 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_53 $$ List<Method> candidateSet = new ArrayList<Method>()-->Line_56 $$ candidateSet.add(candidate)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ FD ]
Line_77 $$ if (paramTypes.length >= minNrOfArgs) -->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ CD ]
Line_66 $$ if (explicitArgs != null) -->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ CD ]
Line_39 $$ if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) -->Line_40 $$ argsToUse = mbd.resolvedConstructorArguments[ CD ]
Line_55 $$ if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) -->Line_56 $$ candidateSet.add(candidate)[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_149 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Ambiguous factory method matches found in bean '" + beanName + "' " + "(hint: specify index/type/name arguments for simple parameters to avoid type ambiguities): " + ambiguousFactoryMethods)[ FD ]
Line_93 $$ for (Exception cause : causes) -->Line_94 $$ this.beanFactory.onSuppressedException(cause)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_8 $$ String factoryBeanName = mbd.getFactoryBeanName()[ CD ]
Line_31 $$ ArgumentsHolder argsHolderToUse = null-->Line_115 $$ argsHolderToUse = argsHolder[ FD ]
Line_5 $$ Object factoryBean-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_5 $$ Object factoryBean-->Line_20 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_161 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_169 $$ if (beanInstance == null) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_62 $$ boolean autowiring = (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR)[ FD ]
Line_21 $$ isStatic = false-->Line_28 $$ isStatic = true[ FD ]
Line_130 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)-->Line_133 $$ argTypes.add(arg != null ? arg.getClass().getSimpleName() : "null")[ FD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_136 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ FD ]
Line_136 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())-->Line_137 $$ valueHolders.addAll(resolvedValues.getIndexedArgumentValues().values())[ FD ]
Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_121 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_4 $$ this.beanFactory.initBeanWrapper(bw)[ CD ]
Line_9 $$ if (factoryBeanName != null) -->Line_23 $$ if (!mbd.hasBeanClass()) [ CD ]
Line_39 $$ if (factoryMethodToUse != null && mbd.constructorArgumentsResolved) -->Line_41 $$ if (argsToUse == null) [ CD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_40 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_41 $$ if (argsToUse == null) [ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_116 $$ argsToUse = argsHolder.arguments[ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_73 $$ List<Exception> causes = null[ CD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_138 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)-->Line_116 $$ argsToUse = argsHolder.arguments[ FD ]
Line_169 $$ if (beanInstance == null) -->Line_170 $$ return null[ CD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_88 $$ if (this.beanFactory.logger.isTraceEnabled()) -->Line_89 $$ this.beanFactory.logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex)[ CD ]
Line_91 $$ if (i == candidates.length - 1 && argsHolderToUse == null) -->Line_92 $$ if (causes != null) [ CD ]
Line_129 $$ if (factoryMethodToUse == null) -->Line_130 $$ List<String> argTypes = new ArrayList<String>(minNrOfArgs)[ CD ]
Line_99 $$ if (causes == null) -->Line_100 $$ causes = new LinkedList<Exception>()[ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_63 $$ int minTypeDiffWeight = Integer.MAX_VALUE[ CD ]
Line_100 $$ causes = new LinkedList<Exception>()-->Line_102 $$ causes.add(ex)[ FD ]
Line_20 $$ factoryClass = factoryBean.getClass()-->Line_27 $$ factoryClass = mbd.getBeanClass()[ FD ]
Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)-->Line_77 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_8 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_9 $$ if (factoryBeanName != null) [ FD ]
Line_118 $$ ambiguousFactoryMethods = null-->Line_121 $$ if (ambiguousFactoryMethods == null) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_9 $$ if (factoryBeanName != null) [ CD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_65 $$ int minNrOfArgs-->Line_77 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_30 $$ Method factoryMethodToUse = null[ CD ]
Line_158 $$ final Object fb = factoryBean-->Line_163 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_6 $$ Class<?> factoryClass-->Line_20 $$ factoryClass = factoryBean.getClass()[ FD ]
Line_36 $$ Object[] argsToResolve = null-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_15 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "factory-bean '" + factoryBeanName + "' (or a BeanPostProcessor involved) returned null")[ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_131 $$ if (explicitArgs != null) -->Line_138 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ CD ]
Line_33 $$ if (explicitArgs != null) -->Line_46 $$ if (argsToResolve != null) [ CD ]
Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_75 $$ Method candidate = candidates[i]-->Line_114 $$ factoryMethodToUse = candidate[ FD ]
Line_79 $$ if (resolvedValues != null) -->Line_107 $$ if (paramTypes.length != explicitArgs.length) [ CD ]
Line_9 $$ if (factoryBeanName != null) -->Line_10 $$ if (factoryBeanName.equals(beanName)) [ CD ]
Line_67 $$ minNrOfArgs = explicitArgs.length-->Line_77 $$ if (paramTypes.length >= minNrOfArgs) [ FD ]
Line_40 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_116 $$ argsToUse = argsHolder.arguments[ FD ]
Line_74 $$ for (int i = 0; i < candidates.length; i++) -->Line_77 $$ if (paramTypes.length >= minNrOfArgs) [ CD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_114 $$ factoryMethodToUse = candidate[ FD ]
Line_5 $$ Object factoryBean-->Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_115 $$ argsHolderToUse = argsHolder[ CD ]
Line_78 $$ ArgumentsHolder argsHolder-->Line_110 $$ argsHolder = new ArgumentsHolder(explicitArgs)[ FD ]
Line_146 $$ if (void.class == factoryMethodToUse.getReturnType()) -->Line_148 $$ if (ambiguousFactoryMethods != null) [ CD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_73 $$ List<Exception> causes = null-->Line_102 $$ causes.add(ex)[ FD ]
Line_6 $$ Class<?> factoryClass-->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_6 $$ Class<?> factoryClass[ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_66 $$ if (explicitArgs != null) [ CD ]
Line_159 $$ final Method factoryMethod = factoryMethodToUse-->Line_163 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_139 $$ for (ValueHolder value : valueHolders) -->Line_140 $$ String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) : (value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))[ FD ]
Line_116 $$ argsToUse = argsHolder.arguments-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_32 $$ Object[] argsToUse = null-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_55 $$ if (Modifier.isStatic(candidate.getModifiers()) == isStatic && mbd.isFactoryMethod(candidate)) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ FD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_129 $$ if (factoryMethodToUse == null) [ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_20 $$ factoryClass = factoryBean.getClass()[ CD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ FD ]
Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_115 $$ argsHolderToUse = argsHolder[ FD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_146 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_129 $$ if (factoryMethodToUse == null) [ FD ]
Line_75 $$ Method candidate = candidates[i]-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_27 $$ factoryClass = mbd.getBeanClass()-->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_136 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ FD ]
Line_5 $$ Object factoryBean-->Line_26 $$ factoryBean = null[ FD ]
Line_33 $$ if (explicitArgs != null) -->Line_34 $$ argsToUse = explicitArgs[ CD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_146 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_8 $$ String factoryBeanName = mbd.getFactoryBeanName()-->Line_10 $$ if (factoryBeanName.equals(beanName)) [ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_117 $$ minTypeDiffWeight = typeDiffWeight[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_8 $$ String factoryBeanName = mbd.getFactoryBeanName()[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_131 $$ if (explicitArgs != null) [ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_64 $$ Set<Method> ambiguousFactoryMethods = null[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_5 $$ Object factoryBean[ CD ]
Line_157 $$ if (System.getSecurityManager() != null) -->Line_160 $$ final Object[] args = argsToUse[ CD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_65 $$ int minNrOfArgs-->Line_67 $$ minNrOfArgs = explicitArgs.length[ FD ]
Line_114 $$ factoryMethodToUse = candidate-->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_74 $$ for (int i = 0; i < candidates.length; i++) -->Line_75 $$ Method candidate = candidates[i][ CD ]
Line_36 $$ Object[] argsToResolve = null-->Line_42 $$ argsToResolve = mbd.preparedConstructorArguments[ FD ]
Line_30 $$ Method factoryMethodToUse = null-->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_27 $$ factoryClass = mbd.getBeanClass()-->Line_51 $$ factoryClass = ClassUtils.getUserClass(factoryClass)[ FD ]
Line_157 $$ if (System.getSecurityManager() != null) -->Line_158 $$ final Object fb = factoryBean[ CD ]
Line_118 $$ ambiguousFactoryMethods = null-->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_32 $$ Object[] argsToUse = null-->Line_41 $$ if (argsToUse == null) [ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_7 $$ boolean isStatic[ CD ]
Line_78 $$ ArgumentsHolder argsHolder-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_146 $$ if (void.class == factoryMethodToUse.getReturnType()) [ FD ]
Line_73 $$ List<Exception> causes = null-->Line_100 $$ causes = new LinkedList<Exception>()[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_163 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ FD ]
Line_42 $$ argsToResolve = mbd.preparedConstructorArguments-->Line_46 $$ if (argsToResolve != null) [ FD ]
Line_5 $$ Object factoryBean-->Line_14 $$ if (factoryBean == null) [ FD ]
Line_66 $$ if (explicitArgs != null) -->Line_69 $$ ConstructorArgumentValues cargs = mbd.getConstructorArgumentValues()[ CD ]
Line_73 $$ List<Exception> causes = null-->Line_99 $$ if (causes == null) [ FD ]
Line_156 $$ Object beanInstance-->Line_169 $$ if (beanInstance == null) [ FD ]
Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()-->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_79 $$ if (resolvedValues != null) [ FD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()[ FD ]
Line_64 $$ Set<Method> ambiguousFactoryMethods = null-->Line_148 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ CD ]
Line_20 $$ factoryClass = factoryBean.getClass()-->Line_52 $$ Method[] rawCandidates = getCandidateMethods(factoryClass, mbd)[ FD ]
Line_75 $$ Method candidate = candidates[i]-->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_140 $$ String argType = (value.getType() != null ? ClassUtils.getShortName(value.getType()) : (value.getValue() != null ? value.getValue().getClass().getSimpleName() : "null"))-->Line_141 $$ argTypes.add(argType)[ FD ]
Line_66 $$ if (explicitArgs != null) -->Line_70 $$ resolvedValues = new ConstructorArgumentValues()[ CD ]
Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_151 $$ if (explicitArgs == null && argsHolderToUse != null) [ CD ]
Line_157 $$ if (System.getSecurityManager() != null) -->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ CD ]
Line_70 $$ resolvedValues = new ConstructorArgumentValues()-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_32 $$ Object[] argsToUse = null-->Line_116 $$ argsToUse = argsHolder.arguments[ FD ]
Line_34 $$ argsToUse = explicitArgs-->Line_40 $$ argsToUse = mbd.resolvedConstructorArguments[ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_13 $$ factoryBean = this.beanFactory.getBean(factoryBeanName)[ CD ]
Line_83 $$ if (pnd != null) -->Line_84 $$ paramNames = pnd.getParameterNames(candidate)[ CD ]
Line_9 $$ if (factoryBeanName != null) -->Line_28 $$ isStatic = true[ CD ]
Line_38 $$ factoryMethodToUse = (Method) mbd.resolvedConstructorOrFactoryMethod-->Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) [ FD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_125 $$ ambiguousFactoryMethods.add(candidate)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_100 $$ causes = new LinkedList<Exception>()-->Line_99 $$ if (causes == null) [ FD ]
Line_117 $$ minTypeDiffWeight = typeDiffWeight-->Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) [ FD ]
Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_7 $$ boolean isStatic-->Line_21 $$ isStatic = false[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_175 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Bean instantiation via factory method failed", ex)[ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_26 $$ factoryBean = null[ CD ]
Line_32 $$ Object[] argsToUse = null-->Line_34 $$ argsToUse = explicitArgs[ FD ]
Line_40 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_161 $$ beanInstance = AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_163 $$ return beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, beanFactory, fb, factoryMethod, args)[ CD ]
Line_7 $$ boolean isStatic-->Line_28 $$ isStatic = true[ FD ]
Line_67 $$ minNrOfArgs = explicitArgs.length-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_36 $$ Object[] argsToResolve = null-->Line_46 $$ if (argsToResolve != null) [ FD ]
Line_77 $$ if (paramTypes.length >= minNrOfArgs) -->Line_78 $$ ArgumentsHolder argsHolder[ CD ]
Line_63 $$ int minTypeDiffWeight = Integer.MAX_VALUE-->Line_117 $$ minTypeDiffWeight = typeDiffWeight[ FD ]
Line_122 $$ ambiguousFactoryMethods = new LinkedHashSet<Method>()-->Line_148 $$ if (ambiguousFactoryMethods != null) [ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_60 $$ AutowireUtils.sortFactoryMethods(candidates)[ CD ]
Line_31 $$ ArgumentsHolder argsHolderToUse = null-->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_75 $$ Method candidate = candidates[i]-->Line_76 $$ Class<?>[] paramTypes = candidate.getParameterTypes()[ FD ]
Line_33 $$ if (explicitArgs != null) -->Line_36 $$ Object[] argsToResolve = null[ CD ]
Line_40 $$ argsToUse = mbd.resolvedConstructorArguments-->Line_47 $$ argsToUse = resolvePreparedArguments(beanName, mbd, bw, factoryMethodToUse, argsToResolve)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()[ CD ]
Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)-->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_24 $$ throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName, "bean definition declares neither a bean class nor a factory-bean reference")[ FD ]
Line_131 $$ if (explicitArgs != null) -->Line_136 $$ Set<ValueHolder> valueHolders = new LinkedHashSet<ValueHolder>(resolvedValues.getArgumentCount())[ CD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_59 $$ Method[] candidates = candidateSet.toArray(new Method[candidateSet.size()])[ CD ]
Line_82 $$ ParameterNameDiscoverer pnd = this.beanFactory.getParameterNameDiscoverer()-->Line_83 $$ if (pnd != null) [ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_4 $$ this.beanFactory.initBeanWrapper(bw)[ FD ]
Line_81 $$ String[] paramNames = null-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_61 $$ ConstructorArgumentValues resolvedValues = null-->Line_138 $$ valueHolders.addAll(resolvedValues.getGenericArgumentValues())[ FD ]
Line_84 $$ paramNames = pnd.getParameterNames(candidate)-->Line_86 $$ argsHolder = createArgumentArray(beanName, mbd, resolvedValues, bw, paramTypes, paramNames, candidate, autowiring)[ FD ]
Line_34 $$ argsToUse = explicitArgs-->Line_167 $$ beanInstance = this.beanFactory.getInstantiationStrategy().instantiate(mbd, beanName, this.beanFactory, factoryBean, factoryMethodToUse, argsToUse)[ FD ]
Line_54 $$ for (Method candidate : rawCandidates) -->Line_84 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_115 $$ argsHolderToUse = argsHolder-->Line_152 $$ argsHolderToUse.storeCache(mbd, factoryMethodToUse)[ FD ]
Line_50 $$ if (factoryMethodToUse == null || argsToUse == null) -->Line_65 $$ int minNrOfArgs[ CD ]
Line_75 $$ Method candidate = candidates[i]-->Line_84 $$ paramNames = pnd.getParameterNames(candidate)[ FD ]
Line_78 $$ ArgumentsHolder argsHolder-->Line_112 $$ int typeDiffWeight = (mbd.isLenientConstructorResolution() ? argsHolder.getTypeDifferenceWeight(paramTypes) : argsHolder.getAssignabilityWeight(paramTypes))[ FD ]
Line_9 $$ if (factoryBeanName != null) -->Line_17 $$ if (mbd.isSingleton() && this.beanFactory.containsSingleton(beanName)) [ CD ]
Line_65 $$ int minNrOfArgs-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_3 $$ BeanWrapperImpl bw = new BeanWrapperImpl()-->Line_71 $$ minNrOfArgs = resolveConstructorArguments(beanName, mbd, bw, cargs, resolvedValues)[ FD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_10 $$ if (factoryBeanName.equals(beanName)) [ FD ]
Line_113 $$ if (typeDiffWeight < minTypeDiffWeight) -->Line_114 $$ factoryMethodToUse = candidate[ CD ]
Line_2 $$ public BeanWrapper instantiateUsingFactoryMethod(final String beanName, final RootBeanDefinition mbd, final Object[] explicitArgs) -->Line_11 $$ throw new BeanDefinitionStoreException(mbd.getResourceDescription(), beanName, "factory-bean reference points back to the same bean definition")[ FD ]
Line_120 $$ if (factoryMethodToUse != null && typeDiffWeight == minTypeDiffWeight && !mbd.isLenientConstructorResolution() && paramTypes.length == factoryMethodToUse.getParameterTypes().length && !Arrays.equals(paramTypes, factoryMethodToUse.getParameterTypes())) -->Line_121 $$ if (ambiguousFactoryMethods == null) [ CD ]
