Line_3 $$ final File f = writeFile(params)-->Line_7 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_3 $$ final File f = writeFile(params)-->Line_11 $$ assertEquals(f.length(), reader.bytesRemaining())[ FD ]
Line_4 $$ try (ChannelProxy channel = new ChannelProxy(f)) -->Line_7 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_10 $$ assertEquals(f.length(), reader.length())[ FD ]
Line_2 $$ private static void testReadFully(Parameters params) throws IOException -->Line_3 $$ final File f = writeFile(params)[ CD ]
Line_3 $$ final File f = writeFile(params)-->Line_12 $$ assertEquals(Math.min(Integer.MAX_VALUE, f.length()), reader.available())[ FD ]
Line_5 $$ RandomAccessReader.Builder builder = new RandomAccessReader.Builder(channel).bufferType(params.bufferType).bufferSize(params.bufferSize)-->Line_8 $$ try (RandomAccessReader reader = builder.build()) [ FD ]
Line_15 $$ while (numRead < params.fileLength) -->Line_18 $$ numRead += b.length[ CD ]
Line_14 $$ long numRead = 0-->Line_15 $$ while (numRead < params.fileLength) [ FD ]
Line_15 $$ while (numRead < params.fileLength) -->Line_16 $$ reader.readFully(b)[ CD ]
Line_2 $$ private static void testReadFully(Parameters params) throws IOException -->Line_6 $$ if (params.mmappedRegions)[ FD ]
Line_13 $$ byte[] b = new byte[params.expected.length]-->Line_17 $$ assertTrue(Arrays.equals(params.expected, b))[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_20 $$ assertTrue(reader.isEOF())[ FD ]
Line_3 $$ final File f = writeFile(params)-->Line_9 $$ assertEquals(f.getAbsolutePath(), reader.getPath())[ FD ]
Line_3 $$ final File f = writeFile(params)-->Line_10 $$ assertEquals(f.length(), reader.length())[ FD ]
Line_15 $$ while (numRead < params.fileLength) -->Line_17 $$ assertTrue(Arrays.equals(params.expected, b))[ CD ]
Line_2 $$ private static void testReadFully(Parameters params) throws IOException -->Line_3 $$ final File f = writeFile(params)[ FD ]
Line_23 $$ if (builder.regions != null)-->Line_24 $$ assertNull(builder.regions.close(null))[ CD ]
Line_5 $$ RandomAccessReader.Builder builder = new RandomAccessReader.Builder(channel).bufferType(params.bufferType).bufferSize(params.bufferSize)-->Line_7 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_12 $$ assertEquals(Math.min(Integer.MAX_VALUE, f.length()), reader.available())[ FD ]
Line_18 $$ numRead += b.length-->Line_15 $$ while (numRead < params.fileLength) [ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_16 $$ reader.readFully(b)[ FD ]
Line_14 $$ long numRead = 0-->Line_18 $$ numRead += b.length[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_21 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_11 $$ assertEquals(f.length(), reader.bytesRemaining())[ FD ]
Line_6 $$ if (params.mmappedRegions)-->Line_7 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ CD ]
Line_13 $$ byte[] b = new byte[params.expected.length]-->Line_16 $$ reader.readFully(b)[ FD ]
Line_8 $$ try (RandomAccessReader reader = builder.build()) -->Line_9 $$ assertEquals(f.getAbsolutePath(), reader.getPath())[ FD ]
