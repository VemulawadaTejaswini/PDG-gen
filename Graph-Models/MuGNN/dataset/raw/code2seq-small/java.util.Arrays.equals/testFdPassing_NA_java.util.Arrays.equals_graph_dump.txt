Line_36 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_37 $$ OutputStream clientOutputStream = client.getOutputStream()[ FD ]
Line_41 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_45 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_47 $$ for (int i = 0; i < passedFds.length; i++) -->Line_62 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_32 $$ serverThread.start()[ CD ]
Line_36 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_38 $$ InputStream clientInputStream = client.getInputStream()[ FD ]
Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_56 $$ threadResults.add(e)[ FD ]
Line_37 $$ OutputStream clientOutputStream = client.getOutputStream()-->Line_39 $$ clientOutputStream.write(clientMsg1)[ FD ]
Line_22 $$ DomainSocket domainConn = (DomainSocket) conn-->Line_23 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_19 $$ InputStream connInputStream = conn.getInputStream()-->Line_20 $$ IOUtils.readFully(connInputStream, in1, 0, in1.length)[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_62 $$ for (int i = 0; i < 2; i++) [ CD ]
Line_13 $$ Thread serverThread = new Thread() -->Line_68 $$ serverThread.join(120000)[ FD ]
Line_7 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)-->Line_70 $$ serv.close()[ FD ]
Line_33 $$ Thread clientThread = new Thread() -->Line_58 $$ threadResults.add(new Success())[ CD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_7 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)[ CD ]
Line_22 $$ DomainSocket domainConn = (DomainSocket) conn-->Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_10 $$ for (int i = 0; i < passedFiles.length; i++) [ CD ]
Line_15 $$ DomainSocket conn = null-->Line_19 $$ InputStream connInputStream = conn.getInputStream()[ FD ]
Line_10 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_47 $$ for (int i = 0; i < passedFds.length; i++) [ FD ]
Line_62 $$ for (int i = 0; i < 2; i++) -->Line_64 $$ if (!(t instanceof Success)) [ CD ]
Line_13 $$ Thread serverThread = new Thread() -->Line_15 $$ DomainSocket conn = null[ CD ]
Line_36 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_54 $$ client.close()[ FD ]
Line_62 $$ for (int i = 0; i < 2; i++) -->Line_63 $$ Throwable t = threadResults.take()[ CD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_61 $$ clientThread.start()[ CD ]
Line_47 $$ for (int i = 0; i < passedFds.length; i++) -->Line_49 $$ passedFiles[i].checkInputStream(recvFis[i])[ CD ]
Line_7 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)-->Line_17 $$ conn = serv.accept()[ FD ]
Line_9 $$ final FileDescriptor[] passedFds = new FileDescriptor[passedFiles.length]-->Line_23 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_63 $$ Throwable t = threadResults.take()-->Line_65 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ FD ]
Line_13 $$ Thread serverThread = new Thread() -->Line_29 $$ threadResults.add(new Success())[ CD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_70 $$ serv.close()[ CD ]
Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_26 $$ threadResults.add(e)[ FD ]
Line_5 $$ final byte[] serverMsg1 = new byte[] -->Line_46 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_9 $$ final FileDescriptor[] passedFds = new FileDescriptor[passedFiles.length][ CD ]
Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock").getAbsolutePath()-->Line_7 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)[ FD ]
Line_47 $$ for (int i = 0; i < passedFds.length; i++) -->Line_48 $$ Assert.assertNotNull(recvFis[i])[ CD ]
Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_63 $$ Throwable t = threadResults.take()[ FD ]
Line_18 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_21 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_42 $$ FileInputStream[] recvFis = new FileInputStream[passedFds.length]-->Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_5 $$ final byte[] serverMsg1 = new byte[] -->Line_23 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)[ CD ]
Line_15 $$ DomainSocket conn = null-->Line_24 $$ conn.close()[ FD ]
Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock").getAbsolutePath()-->Line_36 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)[ FD ]
Line_4 $$ final byte[] clientMsg1 = new byte[] -->Line_39 $$ clientOutputStream.write(clientMsg1)[ FD ]
Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_29 $$ threadResults.add(new Success())[ FD ]
Line_40 $$ DomainSocket domainConn = (DomainSocket) client-->Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_41 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_41 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_46 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_18 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_20 $$ IOUtils.readFully(connInputStream, in1, 0, in1.length)[ FD ]
Line_18 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_46 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_64 $$ if (!(t instanceof Success)) -->Line_65 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ CD ]
Line_10 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_11 $$ passedFds[i] = passedFiles[i].getInputStream().getFD()[ CD ]
Line_17 $$ conn = serv.accept()-->Line_19 $$ InputStream connInputStream = conn.getInputStream()[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_68 $$ serverThread.join(120000)[ CD ]
Line_38 $$ InputStream clientInputStream = client.getInputStream()-->Line_45 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_5 $$ final byte[] serverMsg1 = new byte[] [ CD ]
Line_13 $$ Thread serverThread = new Thread() -->Line_32 $$ serverThread.start()[ FD ]
Line_6 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_58 $$ threadResults.add(new Success())[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_8 $$ final PassedFile[] passedFiles = new PassedFile[] [ CD ]
Line_10 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_62 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_4 $$ final byte[] clientMsg1 = new byte[] -->Line_21 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_13 $$ Thread serverThread = new Thread() [ CD ]
Line_18 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_45 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)-->Line_45 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_18 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_43 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_51 $$ for (FileInputStream fis : recvFis) -->Line_52 $$ fis.close()[ FD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_3 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock").getAbsolutePath()[ CD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_69 $$ clientThread.join(120000)[ CD ]
Line_2 $$ public void testFdPassing() throws Exception -->Line_4 $$ final byte[] clientMsg1 = new byte[] [ CD ]
Line_17 $$ conn = serv.accept()-->Line_24 $$ conn.close()[ FD ]
Line_15 $$ DomainSocket conn = null-->Line_17 $$ conn = serv.accept()[ FD ]
