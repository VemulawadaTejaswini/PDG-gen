Line_7 $$ String[] values = s.getValues()-->Line_8 $$ Arrays.sort(values)[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_7 $$ String[] values = s.getValues()[ CD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_11 $$ assertTrue("seed: " + seed + "\ndoesn't match", Arrays.equals(values, check))[ CD ]
Line_7 $$ String[] values = s.getValues()-->Line_11 $$ assertTrue("seed: " + seed + "\ndoesn't match", Arrays.equals(values, check))[ FD ]
Line_4 $$ WritableSortable s = new WritableSortable(SAMPLE)-->Line_5 $$ long seed = s.getSeed()[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_6 $$ System.out.println("sortWritable seed: " + seed + "(" + sorter.getClass().getName() + ")")[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_5 $$ long seed = s.getSeed()[ CD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_10 $$ String[] check = s.getSorted()[ CD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_8 $$ Arrays.sort(values)[ CD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_4 $$ WritableSortable s = new WritableSortable(SAMPLE)-->Line_7 $$ String[] values = s.getValues()[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_3 $$ final int SAMPLE = 1000[ CD ]
Line_3 $$ final int SAMPLE = 1000-->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_4 $$ WritableSortable s = new WritableSortable(SAMPLE)-->Line_10 $$ String[] check = s.getSorted()[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_4 $$ WritableSortable s = new WritableSortable(SAMPLE)[ CD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_6 $$ System.out.println("sortWritable seed: " + seed + "(" + sorter.getClass().getName() + ")")[ CD ]
Line_4 $$ WritableSortable s = new WritableSortable(SAMPLE)-->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_2 $$ public void sortWritable(IndexedSorter sorter) throws Exception -->Line_9 $$ sorter.sort(s, 0, SAMPLE)[ CD ]
Line_10 $$ String[] check = s.getSorted()-->Line_11 $$ assertTrue("seed: " + seed + "\ndoesn't match", Arrays.equals(values, check))[ FD ]
