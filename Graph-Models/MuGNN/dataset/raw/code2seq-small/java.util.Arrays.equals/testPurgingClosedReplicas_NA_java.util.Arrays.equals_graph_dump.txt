Line_59 $$ while (thread.isAlive()) -->Line_62 $$ sem.release()[ CD ]
Line_70 $$ if (blockReader != null)-->Line_71 $$ blockReader.close()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_58 $$ thread.start()[ CD ]
Line_4 $$ final AtomicInteger replicasCreated = new AtomicInteger(0)-->Line_9 $$ replicasCreated.incrementAndGet()[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() [ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_4 $$ final AtomicInteger replicasCreated = new AtomicInteger(0)[ CD ]
Line_67 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_70 $$ if (blockReader != null)[ FD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_9 $$ replicasCreated.incrementAndGet()[ CD ]
Line_30 $$ while (true) -->Line_48 $$ LOG.info("read another " + TEST_FILE_LEN + " bytes.")[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_76 $$ dfs.close()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_14 $$ Configuration conf = createShortCircuitConf("testPurgingClosedReplicas", sockDir)[ CD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_46 $$ blockReader.close()[ FD ]
Line_31 $$ BlockReader blockReader = null-->Line_67 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_31 $$ BlockReader blockReader = null-->Line_36 $$ blockReader.readAll(buf, 0, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_16 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_59 $$ while (thread.isAlive()) [ CD ]
Line_31 $$ BlockReader blockReader = null-->Line_68 $$ blockReader.readFully(buf, 0, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_78 $$ sockDir.close()[ CD ]
Line_67 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_68 $$ blockReader.readFully(buf, 0, TEST_FILE_LEN)[ FD ]
Line_31 $$ BlockReader blockReader = null-->Line_71 $$ blockReader.close()[ FD ]
Line_4 $$ final AtomicInteger replicasCreated = new AtomicInteger(0)-->Line_75 $$ Assert.assertEquals(2, replicasCreated.get())[ FD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_64 $$ Assert.assertFalse(testFailed.get())[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_22 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_17 $$ final DistributedFileSystem dfs = cluster.getFileSystem()[ CD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_67 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_67 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_71 $$ blockReader.close()[ FD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_45 $$ if (blockReader != null)[ FD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_52 $$ testFailed.set(true)[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_75 $$ Assert.assertEquals(2, replicasCreated.get())[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_24 $$ final List<LocatedBlock> locatedBlocks = cluster.getNameNode().getRpcServer().getBlockLocations(TEST_FILE, 0, TEST_FILE_LEN).getLocatedBlocks()[ CD ]
Line_59 $$ while (thread.isAlive()) -->Line_60 $$ sem.acquireUninterruptibly()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_15 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_73 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ CD ]
Line_45 $$ if (blockReader != null)-->Line_46 $$ blockReader.close()[ CD ]
Line_31 $$ BlockReader blockReader = null-->Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_30 $$ while (true) -->Line_31 $$ BlockReader blockReader = null[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_3 $$ BlockReaderTestUtil.enableBlockReaderFactoryTracing()[ CD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_36 $$ blockReader.readAll(buf, 0, TEST_FILE_LEN)[ FD ]
Line_31 $$ BlockReader blockReader = null-->Line_45 $$ if (blockReader != null)[ FD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_70 $$ if (blockReader != null)[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_64 $$ Assert.assertFalse(testFailed.get())[ CD ]
Line_59 $$ while (thread.isAlive()) -->Line_61 $$ thread.interrupt()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_77 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_25 $$ final LocatedBlock lblock = locatedBlocks.get(0)[ CD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_68 $$ blockReader.readFully(buf, 0, TEST_FILE_LEN)[ FD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_10 $$ return null[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)[ CD ]
Line_31 $$ BlockReader blockReader = null-->Line_70 $$ if (blockReader != null)[ FD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_6 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_2 $$ public void testPurgingClosedReplicas() throws Exception -->Line_74 $$ Assert.assertTrue(Arrays.equals(buf, expected))[ CD ]
Line_31 $$ BlockReader blockReader = null-->Line_46 $$ blockReader.close()[ FD ]
Line_33 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_71 $$ blockReader.close()[ FD ]
