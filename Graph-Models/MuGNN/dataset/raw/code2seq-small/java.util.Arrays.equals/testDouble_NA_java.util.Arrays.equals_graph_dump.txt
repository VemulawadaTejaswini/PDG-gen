Line_17 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ newDoubles[i] = BigEndianCodec.getDouble(bytes, i * 8)[ CD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ BigEndianCodec.putDouble(bytes, i * 8, doubles[i])[ CD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()[ FD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testDouble() -->Line_16 $$ double[] newDoubles = new double[_COUNT][ CD ]
Line_3 $$ double[] doubles = new double[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(doubles, newDoubles))[ FD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 8]-->Line_13 $$ BigEndianCodec.putDouble(bytes, i * 8, doubles[i])[ FD ]
Line_2 $$ public void testDouble() -->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ CD ]
Line_2 $$ public void testDouble() -->Line_7 $$ byte[] bytes = new byte[_COUNT * 8][ CD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_5 $$ doubles[i] = _random.nextDouble()[ CD ]
Line_2 $$ public void testDouble() -->Line_10 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()[ CD ]
Line_2 $$ public void testDouble() -->Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)[ CD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testDouble() -->Line_4 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_16 $$ double[] newDoubles = new double[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(doubles, newDoubles))[ FD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_10 $$ DoubleBuffer doubleBuffer = byteBuffer.asDoubleBuffer()-->Line_12 $$ doubleBuffer.put(doubles[i])[ FD ]
Line_2 $$ public void testDouble() -->Line_3 $$ double[] doubles = new double[_COUNT][ CD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_2 $$ public void testDouble() -->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_2 $$ public void testDouble() -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_2 $$ public void testDouble() -->Line_20 $$ Assert.assertTrue(Arrays.equals(doubles, newDoubles))[ CD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ doubleBuffer.put(doubles[i])[ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 8]-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 8]-->Line_18 $$ newDoubles[i] = BigEndianCodec.getDouble(bytes, i * 8)[ FD ]
Line_2 $$ public void testDouble() -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
