Line_2 $$ public void testBlockRead() throws IOException -->Line_3 $$ UnsyncStringReader unsyncStringReader = new UnsyncStringReader("abcdefg")[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_6 $$ Assert.assertEquals(4, unsyncStringReader.index)[ CD ]
Line_4 $$ char[] chars = new char[4]-->Line_7 $$ Assert.assertTrue(Arrays.equals("abcd".toCharArray(), chars))[ FD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_8 $$ Assert.assertEquals(3, unsyncStringReader.read(chars))[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_7 $$ Assert.assertTrue(Arrays.equals("abcd".toCharArray(), chars))[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_5 $$ Assert.assertEquals(4, unsyncStringReader.read(chars))[ CD ]
Line_3 $$ UnsyncStringReader unsyncStringReader = new UnsyncStringReader("abcdefg")-->Line_5 $$ Assert.assertEquals(4, unsyncStringReader.read(chars))[ FD ]
Line_3 $$ UnsyncStringReader unsyncStringReader = new UnsyncStringReader("abcdefg")-->Line_12 $$ Assert.assertEquals(-1, unsyncStringReader.read(chars))[ FD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_9 $$ Assert.assertEquals('e', chars[0])[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_11 $$ Assert.assertEquals('g', chars[2])[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_12 $$ Assert.assertEquals(-1, unsyncStringReader.read(chars))[ CD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_10 $$ Assert.assertEquals('f', chars[1])[ CD ]
Line_4 $$ char[] chars = new char[4]-->Line_12 $$ Assert.assertEquals(-1, unsyncStringReader.read(chars))[ FD ]
Line_4 $$ char[] chars = new char[4]-->Line_8 $$ Assert.assertEquals(3, unsyncStringReader.read(chars))[ FD ]
Line_3 $$ UnsyncStringReader unsyncStringReader = new UnsyncStringReader("abcdefg")-->Line_8 $$ Assert.assertEquals(3, unsyncStringReader.read(chars))[ FD ]
Line_4 $$ char[] chars = new char[4]-->Line_5 $$ Assert.assertEquals(4, unsyncStringReader.read(chars))[ FD ]
Line_2 $$ public void testBlockRead() throws IOException -->Line_4 $$ char[] chars = new char[4][ CD ]
