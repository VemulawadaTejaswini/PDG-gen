Line_11 $$ if (!Arrays.equals(shellBasedGroupsArray, jniBasedGroupsArray)) -->Line_12 $$ fail("Groups returned by " + ShellBasedUnixGroupsMapping.class.getCanonicalName() + " and " + JniBasedUnixGroupsMapping.class.getCanonicalName() + " didn't match for " + user)[ CD ]
Line_3 $$ GroupMappingServiceProvider g = new ShellBasedUnixGroupsMapping()-->Line_6 $$ List<String> jniBasedGroups = g.getGroups(user)[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_3 $$ GroupMappingServiceProvider g = new ShellBasedUnixGroupsMapping()[ CD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_9 $$ String[] jniBasedGroupsArray = jniBasedGroups.toArray(new String[0])[ CD ]
Line_7 $$ String[] shellBasedGroupsArray = shellBasedGroups.toArray(new String[0])-->Line_8 $$ Arrays.sort(shellBasedGroupsArray)[ FD ]
Line_3 $$ GroupMappingServiceProvider g = new ShellBasedUnixGroupsMapping()-->Line_4 $$ List<String> shellBasedGroups = g.getGroups(user)[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_4 $$ List<String> shellBasedGroups = g.getGroups(user)[ CD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_8 $$ Arrays.sort(shellBasedGroupsArray)[ CD ]
Line_9 $$ String[] jniBasedGroupsArray = jniBasedGroups.toArray(new String[0])-->Line_10 $$ Arrays.sort(jniBasedGroupsArray)[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_11 $$ if (!Arrays.equals(shellBasedGroupsArray, jniBasedGroupsArray)) [ CD ]
Line_4 $$ List<String> shellBasedGroups = g.getGroups(user)-->Line_7 $$ String[] shellBasedGroupsArray = shellBasedGroups.toArray(new String[0])[ FD ]
Line_6 $$ List<String> jniBasedGroups = g.getGroups(user)-->Line_9 $$ String[] jniBasedGroupsArray = jniBasedGroups.toArray(new String[0])[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_4 $$ List<String> shellBasedGroups = g.getGroups(user)[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_5 $$ g = new JniBasedUnixGroupsMapping()[ CD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_6 $$ List<String> jniBasedGroups = g.getGroups(user)[ CD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_10 $$ Arrays.sort(jniBasedGroupsArray)[ CD ]
Line_9 $$ String[] jniBasedGroupsArray = jniBasedGroups.toArray(new String[0])-->Line_11 $$ if (!Arrays.equals(shellBasedGroupsArray, jniBasedGroupsArray)) [ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_7 $$ String[] shellBasedGroupsArray = shellBasedGroups.toArray(new String[0])[ CD ]
Line_7 $$ String[] shellBasedGroupsArray = shellBasedGroups.toArray(new String[0])-->Line_11 $$ if (!Arrays.equals(shellBasedGroupsArray, jniBasedGroupsArray)) [ FD ]
Line_3 $$ GroupMappingServiceProvider g = new ShellBasedUnixGroupsMapping()-->Line_5 $$ g = new JniBasedUnixGroupsMapping()[ FD ]
Line_5 $$ g = new JniBasedUnixGroupsMapping()-->Line_6 $$ List<String> jniBasedGroups = g.getGroups(user)[ FD ]
Line_2 $$ private void testForUser(String user) throws Exception -->Line_6 $$ List<String> jniBasedGroups = g.getGroups(user)[ FD ]
