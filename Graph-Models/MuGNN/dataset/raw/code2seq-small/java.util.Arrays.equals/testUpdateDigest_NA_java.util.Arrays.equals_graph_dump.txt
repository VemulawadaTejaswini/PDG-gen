Line_2 $$ public void testUpdateDigest() throws Exception -->Line_16 $$ CounterContext.instance().updateDigest(digest2, cleared.value())[ CD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)[ CD ]
Line_6 $$ MessageDigest digest2 = MessageDigest.getInstance("md5")-->Line_16 $$ CounterContext.instance().updateDigest(digest2, cleared.value())[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_4 $$ ByteBuffer col = ByteBufferUtil.bytes("val")[ CD ]
Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)-->Line_11 $$ state.writeLocal(CounterId.fromInt(4), 4L, 4L)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_3 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COUNTER1)[ CD ]
Line_4 $$ ByteBuffer col = ByteBufferUtil.bytes("val")-->Line_12 $$ Cell original = createCounterCellFromContext(cfs, col, state, 5)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_8 $$ state.writeRemote(CounterId.fromInt(1), 4L, 4L)[ CD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_14 $$ Cell cleared = BufferCell.live(cfs.metadata, cDef, 5, CounterContext.instance().clearAllLocal(state.context))[ CD ]
Line_5 $$ MessageDigest digest1 = MessageDigest.getInstance("md5")-->Line_15 $$ CounterContext.instance().updateDigest(digest1, original.value())[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_10 $$ state.writeRemote(CounterId.fromInt(3), 4L, 4L)[ CD ]
Line_6 $$ MessageDigest digest2 = MessageDigest.getInstance("md5")-->Line_17 $$ assert Arrays.equals(digest1.digest(), digest2.digest())[ FD ]
Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)-->Line_9 $$ state.writeLocal(CounterId.fromInt(2), 4L, 4L)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_15 $$ CounterContext.instance().updateDigest(digest1, original.value())[ CD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_9 $$ state.writeLocal(CounterId.fromInt(2), 4L, 4L)[ CD ]
Line_12 $$ Cell original = createCounterCellFromContext(cfs, col, state, 5)-->Line_15 $$ CounterContext.instance().updateDigest(digest1, original.value())[ FD ]
Line_5 $$ MessageDigest digest1 = MessageDigest.getInstance("md5")-->Line_17 $$ assert Arrays.equals(digest1.digest(), digest2.digest())[ FD ]
Line_13 $$ ColumnDefinition cDef = cfs.metadata.getColumnDefinition(col)-->Line_14 $$ Cell cleared = BufferCell.live(cfs.metadata, cDef, 5, CounterContext.instance().clearAllLocal(state.context))[ FD ]
Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)-->Line_8 $$ state.writeRemote(CounterId.fromInt(1), 4L, 4L)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_5 $$ MessageDigest digest1 = MessageDigest.getInstance("md5")[ CD ]
Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)-->Line_10 $$ state.writeRemote(CounterId.fromInt(3), 4L, 4L)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_11 $$ state.writeLocal(CounterId.fromInt(4), 4L, 4L)[ CD ]
Line_3 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(COUNTER1)-->Line_12 $$ Cell original = createCounterCellFromContext(cfs, col, state, 5)[ FD ]
Line_14 $$ Cell cleared = BufferCell.live(cfs.metadata, cDef, 5, CounterContext.instance().clearAllLocal(state.context))-->Line_16 $$ CounterContext.instance().updateDigest(digest2, cleared.value())[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_12 $$ Cell original = createCounterCellFromContext(cfs, col, state, 5)[ CD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_6 $$ MessageDigest digest2 = MessageDigest.getInstance("md5")[ CD ]
Line_7 $$ CounterContext.ContextState state = CounterContext.ContextState.allocate(0, 2, 2)-->Line_12 $$ Cell original = createCounterCellFromContext(cfs, col, state, 5)[ FD ]
Line_4 $$ ByteBuffer col = ByteBufferUtil.bytes("val")-->Line_13 $$ ColumnDefinition cDef = cfs.metadata.getColumnDefinition(col)[ FD ]
Line_2 $$ public void testUpdateDigest() throws Exception -->Line_13 $$ ColumnDefinition cDef = cfs.metadata.getColumnDefinition(col)[ CD ]
