Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_41 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_43 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_60 $$ sockDir.close()[ CD ]
Line_44 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()-->Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) [ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()[ CD ]
Line_46 $$ Slot slot = iter.next()-->Line_47 $$ if (slot.isValid()) [ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_26 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ FD ]
Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_60 $$ sockDir.close()[ FD ]
Line_5 $$ Configuration conf = createShortCircuitConf("testUnlinkingReplicasInFileDescriptorCache", sockDir)-->Line_6 $$ conf.setLong(DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY, 1000000000L)[ FD ]
Line_47 $$ if (slot.isValid()) -->Line_48 $$ done.setValue(false)[ CD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_13 $$ Assert.assertEquals(0, info.size())[ CD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_28 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ CD ]
Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) -->Line_47 $$ if (slot.isValid()) [ CD ]
Line_10 $$ final ShortCircuitCache cache = fs.getClient().getClientContext().getShortCircuitCache()-->Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() [ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_26 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ CD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_28 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_6 $$ conf.setLong(DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY, 1000000000L)[ CD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_13 $$ Assert.assertEquals(0, info.size())[ FD ]
Line_10 $$ final ShortCircuitCache cache = fs.getClient().getClientContext().getShortCircuitCache()-->Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() [ FD ]
Line_7 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_59 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_3 $$ BlockReaderTestUtil.enableShortCircuitShmTracing()[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_43 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_27 $$ Assert.assertFalse(info.get(datanode).disabled)[ FD ]
Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) -->Line_46 $$ Slot slot = iter.next()[ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_21 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ CD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_33 $$ fs.delete(TEST_PATH, false)[ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_27 $$ Assert.assertFalse(info.get(datanode).disabled)[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_8 $$ cluster.waitActive()[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_44 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_26 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ FD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_10 $$ final ShortCircuitCache cache = fs.getClient().getClientContext().getShortCircuitCache()[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_7 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) [ CD ]
Line_29 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()-->Line_30 $$ Assert.assertFalse(shm.isDisconnected())[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_10 $$ final ShortCircuitCache cache = fs.getClient().getClientContext().getShortCircuitCache()[ CD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_44 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ FD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_19 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_29 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_59 $$ cluster.shutdown()[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_44 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() [ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_33 $$ fs.delete(TEST_PATH, false)[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_41 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_42 $$ Assert.assertFalse(info.get(datanode).disabled)[ FD ]
Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_5 $$ Configuration conf = createShortCircuitConf("testUnlinkingReplicasInFileDescriptorCache", sockDir)[ FD ]
Line_10 $$ final ShortCircuitCache cache = fs.getClient().getClientContext().getShortCircuitCache()-->Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() [ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_42 $$ Assert.assertFalse(info.get(datanode).disabled)[ FD ]
Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) -->Line_46 $$ Slot slot = iter.next()[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_22 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ CD ]
Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_20 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, TEST_PATH)[ FD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_42 $$ Assert.assertFalse(info.get(datanode).disabled)[ CD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_29 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ CD ]
Line_29 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()-->Line_45 $$ for (Iterator<Slot> iter = shm.slotIterator(); iter.hasNext(); ) [ FD ]
Line_7 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_23 $$ final DatanodeInfo datanode = new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId())[ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_27 $$ Assert.assertFalse(info.get(datanode).disabled)[ CD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_28 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_29 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ FD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_41 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() [ CD ]
Line_11 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_44 $$ DfsClientShm shm = info.get(datanode).notFull.values().iterator().next()[ FD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_41 $$ Assert.assertTrue(info.get(datanode).full.isEmpty())[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_43 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_19 $$ DFSTestUtil.createFile(fs, TEST_PATH, TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_34 $$ GenericTestUtils.waitFor(new Supplier<Boolean>() -->Line_56 $$ return done.booleanValue()[ CD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_30 $$ Assert.assertFalse(shm.isDisconnected())[ CD ]
Line_7 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_8 $$ cluster.waitActive()[ FD ]
Line_24 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_43 $$ Assert.assertEquals(1, info.get(datanode).notFull.values().size())[ FD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_34 $$ GenericTestUtils.waitFor(new Supplier<Boolean>() [ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_20 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, TEST_PATH)[ CD ]
Line_2 $$ public void testUnlinkingReplicasInFileDescriptorCache() throws Exception -->Line_5 $$ Configuration conf = createShortCircuitConf("testUnlinkingReplicasInFileDescriptorCache", sockDir)[ CD ]
Line_39 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_42 $$ Assert.assertFalse(info.get(datanode).disabled)[ FD ]
Line_7 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_9 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
