Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_10 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_21 $$ sockDir.close()[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_11 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_20 $$ cluster.shutdown()[ CD ]
Line_14 $$ final int TEST_FILE_LEN = 8193-->Line_16 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_18 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ CD ]
Line_5 $$ Configuration clientConf = createShortCircuitConf("testFallbackFromShortCircuitToUnixDomainTraffic", sockDir)-->Line_7 $$ clientConf.setBoolean(DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC, true)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_8 $$ Configuration serverConf = new Configuration(clientConf)[ CD ]
Line_14 $$ final int TEST_FILE_LEN = 8193-->Line_18 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_15 $$ final int SEED = 0xFADED-->Line_18 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_6 $$ clientConf.set(DFS_CLIENT_CONTEXT, "testFallbackFromShortCircuitToUnixDomainTraffic_clientContext")[ CD ]
Line_8 $$ Configuration serverConf = new Configuration(clientConf)-->Line_9 $$ serverConf.setBoolean(DFS_CLIENT_READ_SHORTCIRCUIT_KEY, false)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()[ CD ]
Line_5 $$ Configuration clientConf = createShortCircuitConf("testFallbackFromShortCircuitToUnixDomainTraffic", sockDir)-->Line_12 $$ FileSystem dfs = FileSystem.get(cluster.getURI(0), clientConf)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_3 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_9 $$ serverConf.setBoolean(DFS_CLIENT_READ_SHORTCIRCUIT_KEY, false)[ CD ]
Line_10 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_11 $$ cluster.waitActive()[ FD ]
Line_17 $$ byte[] contents = DFSTestUtil.readFileBuffer(dfs, new Path(TEST_FILE))-->Line_19 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_16 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_14 $$ final int TEST_FILE_LEN = 8193[ CD ]
Line_18 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)-->Line_19 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_5 $$ Configuration clientConf = createShortCircuitConf("testFallbackFromShortCircuitToUnixDomainTraffic", sockDir)-->Line_6 $$ clientConf.set(DFS_CLIENT_CONTEXT, "testFallbackFromShortCircuitToUnixDomainTraffic_clientContext")[ FD ]
Line_15 $$ final int SEED = 0xFADED-->Line_16 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_17 $$ byte[] contents = DFSTestUtil.readFileBuffer(dfs, new Path(TEST_FILE))[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_5 $$ Configuration clientConf = createShortCircuitConf("testFallbackFromShortCircuitToUnixDomainTraffic", sockDir)[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_13 $$ String TEST_FILE = "/test_file"[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_7 $$ clientConf.setBoolean(DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC, true)[ CD ]
Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_21 $$ sockDir.close()[ FD ]
Line_10 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_12 $$ FileSystem dfs = FileSystem.get(cluster.getURI(0), clientConf)[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_12 $$ FileSystem dfs = FileSystem.get(cluster.getURI(0), clientConf)[ CD ]
Line_4 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_5 $$ Configuration clientConf = createShortCircuitConf("testFallbackFromShortCircuitToUnixDomainTraffic", sockDir)[ FD ]
Line_12 $$ FileSystem dfs = FileSystem.get(cluster.getURI(0), clientConf)-->Line_17 $$ byte[] contents = DFSTestUtil.readFileBuffer(dfs, new Path(TEST_FILE))[ FD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_19 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ CD ]
Line_2 $$ public void testFallbackFromShortCircuitToUnixDomainTraffic() throws Exception -->Line_15 $$ final int SEED = 0xFADED[ CD ]
Line_12 $$ FileSystem dfs = FileSystem.get(cluster.getURI(0), clientConf)-->Line_16 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_10 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_20 $$ cluster.shutdown()[ FD ]
