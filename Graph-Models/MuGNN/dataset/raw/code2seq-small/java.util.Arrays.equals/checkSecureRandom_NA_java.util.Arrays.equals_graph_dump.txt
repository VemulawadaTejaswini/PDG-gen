Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_6 $$ codec.generateSecureRandom(rand1)[ FD ]
Line_4 $$ byte[] rand1 = new byte[len]-->Line_9 $$ Assert.assertFalse(Arrays.equals(rand, rand1))[ FD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_5 $$ codec.generateSecureRandom(rand)[ CD ]
Line_3 $$ byte[] rand = new byte[len]-->Line_5 $$ codec.generateSecureRandom(rand)[ FD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_3 $$ byte[] rand = new byte[len][ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_7 $$ Assert.assertEquals(len, rand.length)[ FD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_4 $$ byte[] rand1 = new byte[len][ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_9 $$ Assert.assertFalse(Arrays.equals(rand, rand1))[ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_7 $$ Assert.assertEquals(len, rand.length)[ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_8 $$ Assert.assertEquals(len, rand1.length)[ FD ]
Line_4 $$ byte[] rand1 = new byte[len]-->Line_6 $$ codec.generateSecureRandom(rand1)[ FD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_6 $$ codec.generateSecureRandom(rand1)[ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_8 $$ Assert.assertEquals(len, rand1.length)[ CD ]
Line_2 $$ private void checkSecureRandom(CryptoCodec codec, int len) -->Line_5 $$ codec.generateSecureRandom(rand)[ FD ]
Line_3 $$ byte[] rand = new byte[len]-->Line_9 $$ Assert.assertFalse(Arrays.equals(rand, rand1))[ FD ]
