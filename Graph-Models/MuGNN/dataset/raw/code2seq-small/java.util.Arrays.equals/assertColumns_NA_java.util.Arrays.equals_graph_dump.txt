Line_2 $$ public static void assertColumns(Row row, String... expectedColumnNames) -->Line_3 $$ Iterator<Cell> cells = row == null ? Iterators.<Cell>emptyIterator() : row.cells().iterator()[ FD ]
Line_4 $$ String[] actual = Iterators.toArray(Iterators.transform(cells, new Function<Cell, String>() -->Line_6 $$ return cell.column().name.toString()[ FD ]
Line_2 $$ public static void assertColumns(Row row, String... expectedColumnNames) -->Line_4 $$ String[] actual = Iterators.toArray(Iterators.transform(cells, new Function<Cell, String>() [ CD ]
Line_2 $$ public static void assertColumns(Row row, String... expectedColumnNames) -->Line_9 $$ assert Arrays.equals(actual, expectedColumnNames) : String.format("Columns [%s])] is not expected [%s]", ((row == null) ? "" : row.columns().toString()), StringUtils.join(expectedColumnNames, ","))[ FD ]
Line_4 $$ String[] actual = Iterators.toArray(Iterators.transform(cells, new Function<Cell, String>() -->Line_6 $$ return cell.column().name.toString()[ CD ]
Line_4 $$ String[] actual = Iterators.toArray(Iterators.transform(cells, new Function<Cell, String>() -->Line_9 $$ assert Arrays.equals(actual, expectedColumnNames) : String.format("Columns [%s])] is not expected [%s]", ((row == null) ? "" : row.columns().toString()), StringUtils.join(expectedColumnNames, ","))[ FD ]
Line_3 $$ Iterator<Cell> cells = row == null ? Iterators.<Cell>emptyIterator() : row.cells().iterator()-->Line_4 $$ String[] actual = Iterators.toArray(Iterators.transform(cells, new Function<Cell, String>() [ FD ]
Line_2 $$ public static void assertColumns(Row row, String... expectedColumnNames) -->Line_3 $$ Iterator<Cell> cells = row == null ? Iterators.<Cell>emptyIterator() : row.cells().iterator()[ CD ]
