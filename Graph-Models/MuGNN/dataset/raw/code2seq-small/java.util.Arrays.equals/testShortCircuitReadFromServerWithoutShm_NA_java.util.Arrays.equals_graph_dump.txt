Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_23 $$ Assert.assertEquals(1, info.size())[ FD ]
Line_20 $$ final DatanodeInfo datanode = new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId())-->Line_24 $$ PerDatanodeVisitorInfo vinfo = info.get(datanode)[ FD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_20 $$ final DatanodeInfo datanode = new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId())[ FD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_4 $$ Configuration clientConf = createShortCircuitConf("testShortCircuitReadFromServerWithoutShm", sockDir)[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_10 $$ clientConf.set(DFS_CLIENT_CONTEXT, "testShortCircuitReadFromServerWithoutShm_clientContext")[ CD ]
Line_13 $$ final int TEST_FILE_LEN = 4000-->Line_17 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_15 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_5 $$ Configuration serverConf = new Configuration(clientConf)[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_18 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_19 $$ final ShortCircuitCache cache = fs.dfs.getClientContext().getShortCircuitCache()[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_20 $$ final DatanodeInfo datanode = new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId())[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_11 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), clientConf)[ CD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_26 $$ Assert.assertEquals(0, vinfo.full.size())[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_12 $$ final String TEST_FILE = "/test_file"[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_6 $$ serverConf.setInt(DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS, 0)[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_11 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), clientConf)[ FD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_14 $$ final int SEED = 0xFADEC[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_16 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_30 $$ cluster.shutdown()[ FD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_25 $$ Assert.assertTrue(vinfo.disabled)[ CD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_24 $$ PerDatanodeVisitorInfo vinfo = info.get(datanode)[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_30 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_13 $$ final int TEST_FILE_LEN = 4000[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_3 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_17 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ CD ]
Line_4 $$ Configuration clientConf = createShortCircuitConf("testShortCircuitReadFromServerWithoutShm", sockDir)-->Line_11 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), clientConf)[ FD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()[ CD ]
Line_11 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), clientConf)-->Line_16 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))[ FD ]
Line_3 $$ TemporarySocketDirectory sockDir = new TemporarySocketDirectory()-->Line_4 $$ Configuration clientConf = createShortCircuitConf("testShortCircuitReadFromServerWithoutShm", sockDir)[ FD ]
Line_19 $$ final ShortCircuitCache cache = fs.dfs.getClientContext().getShortCircuitCache()-->Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() [ FD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_24 $$ PerDatanodeVisitorInfo vinfo = info.get(datanode)[ FD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_7 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_23 $$ Assert.assertEquals(1, info.size())[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_9 $$ cluster.waitActive()[ CD ]
Line_2 $$ public void testShortCircuitReadFromServerWithoutShm() throws Exception -->Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() [ CD ]
Line_14 $$ final int SEED = 0xFADEC-->Line_15 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_21 $$ cache.getDfsClientShmManager().visit(new Visitor() -->Line_27 $$ Assert.assertEquals(0, vinfo.notFull.size())[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_5 $$ Configuration serverConf = new Configuration(clientConf)-->Line_6 $$ serverConf.setInt(DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS, 0)[ FD ]
Line_14 $$ final int SEED = 0xFADEC-->Line_17 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)[ FD ]
Line_4 $$ Configuration clientConf = createShortCircuitConf("testShortCircuitReadFromServerWithoutShm", sockDir)-->Line_10 $$ clientConf.set(DFS_CLIENT_CONTEXT, "testShortCircuitReadFromServerWithoutShm_clientContext")[ FD ]
Line_11 $$ final DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(cluster.getURI(0), clientConf)-->Line_15 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_13 $$ final int TEST_FILE_LEN = 4000-->Line_15 $$ DFSTestUtil.createFile(fs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ FD ]
Line_16 $$ byte[] contents = DFSTestUtil.readFileBuffer(fs, new Path(TEST_FILE))-->Line_18 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
Line_17 $$ byte[] expected = DFSTestUtil.calculateFileContentsFromSeed(SEED, TEST_FILE_LEN)-->Line_18 $$ Assert.assertTrue(Arrays.equals(contents, expected))[ FD ]
