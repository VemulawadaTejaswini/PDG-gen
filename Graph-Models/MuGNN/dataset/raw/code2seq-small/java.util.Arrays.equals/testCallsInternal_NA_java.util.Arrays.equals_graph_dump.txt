Line_21 $$ String[] stringResults = proxy.echo(new String[] -->Line_24 $$ assertTrue(Arrays.equals(stringResults, null))[ FD ]
Line_27 $$ utf8Result = (UTF8) proxy.echo((UTF8) null)-->Line_28 $$ assertEquals(null, utf8Result)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ FD ]
Line_29 $$ int intResult = proxy.add(1, 2)-->Line_32 $$ assertEquals(intResult, 3)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_27 $$ utf8Result = (UTF8) proxy.echo((UTF8) null)[ FD ]
Line_53 $$ for (int i = 0; i < numThreads; i++) -->Line_54 $$ Transactions trans = new Transactions(proxy, datasize)[ CD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_31 $$ intResult = proxy.add(new int[] [ FD ]
Line_23 $$ stringResults = proxy.echo((String[]) null)-->Line_24 $$ assertTrue(Arrays.equals(stringResults, null))[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_68 $$ if (proxy != null)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_31 $$ intResult = proxy.add(new int[] [ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_10 $$ String stringResult = proxy.echo("foo")[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_9 $$ proxy.ping()[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_68 $$ if (proxy != null)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_29 $$ int intResult = proxy.add(1, 2)[ FD ]
Line_33 $$ EnumDescriptorProto sendProto = EnumDescriptorProto.newBuilder().setName("test").build()-->Line_36 $$ assertNotSame(sendProto, retProto)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_49 $$ proxy.testServerGet()[ FD ]
Line_37 $$ boolean caught = false-->Line_46 $$ assertTrue(caught)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_12 $$ stringResult = proxy.echo((String) null)[ FD ]
Line_12 $$ stringResult = proxy.echo((String) null)-->Line_13 $$ assertEquals(stringResult, null)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_10 $$ String stringResult = proxy.echo("foo")[ FD ]
Line_53 $$ for (int i = 0; i < numThreads; i++) -->Line_55 $$ threadId[i] = new Thread(trans, "TransactionThread-" + i)[ CD ]
Line_3 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).build()-->Line_67 $$ server.stop()[ FD ]
Line_18 $$ rb = getMetrics(server.rpcDetailedMetrics.name())-->Line_19 $$ assertCounter("EchoNumOps", 2L, rb)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_16 $$ assertCounterGt("SentBytes", 0L, rb)[ FD ]
Line_21 $$ String[] stringResults = proxy.echo(new String[] -->Line_23 $$ stringResults = proxy.echo((String[]) null)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_17 $$ assertCounterGt("ReceivedBytes", 0L, rb)[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_23 $$ stringResults = proxy.echo((String[]) null)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_21 $$ String[] stringResults = proxy.echo(new String[] [ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_25 $$ UTF8 utf8Result = (UTF8) proxy.echo(new UTF8("hello world"))[ FD ]
Line_25 $$ UTF8 utf8Result = (UTF8) proxy.echo(new UTF8("hello world"))-->Line_28 $$ assertEquals(null, utf8Result)[ FD ]
Line_37 $$ boolean caught = false-->Line_44 $$ caught = true[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_9 $$ proxy.ping()[ FD ]
Line_29 $$ int intResult = proxy.add(1, 2)-->Line_30 $$ assertEquals(intResult, 3)[ FD ]
Line_33 $$ EnumDescriptorProto sendProto = EnumDescriptorProto.newBuilder().setName("test").build()-->Line_34 $$ EnumDescriptorProto retProto = proxy.exchangeProto(sendProto)[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_12 $$ stringResult = proxy.echo((String) null)[ FD ]
Line_10 $$ String stringResult = proxy.echo("foo")-->Line_11 $$ assertEquals(stringResult, "foo")[ FD ]
Line_18 $$ rb = getMetrics(server.rpcDetailedMetrics.name())-->Line_20 $$ assertCounter("PingNumOps", 1L, rb)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_34 $$ EnumDescriptorProto retProto = proxy.exchangeProto(sendProto)[ FD ]
Line_34 $$ EnumDescriptorProto retProto = proxy.exchangeProto(sendProto)-->Line_36 $$ assertNotSame(sendProto, retProto)[ FD ]
Line_2 $$ private void testCallsInternal(Configuration conf) throws IOException -->Line_3 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).build()[ CD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_25 $$ UTF8 utf8Result = (UTF8) proxy.echo(new UTF8("hello world"))[ FD ]
Line_29 $$ int intResult = proxy.add(1, 2)-->Line_31 $$ intResult = proxy.add(new int[] [ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_39 $$ proxy.error()[ FD ]
Line_7 $$ InetSocketAddress addr = NetUtils.getConnectAddress(server)-->Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ FD ]
Line_3 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).build()-->Line_7 $$ InetSocketAddress addr = NetUtils.getConnectAddress(server)[ FD ]
Line_53 $$ for (int i = 0; i < numThreads; i++) -->Line_56 $$ threadId[i].start()[ CD ]
Line_3 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).build()-->Line_6 $$ server.start()[ FD ]
Line_25 $$ UTF8 utf8Result = (UTF8) proxy.echo(new UTF8("hello world"))-->Line_27 $$ utf8Result = (UTF8) proxy.echo((UTF8) null)[ FD ]
Line_21 $$ String[] stringResults = proxy.echo(new String[] -->Line_22 $$ assertTrue(Arrays.equals(stringResults, new String[] [ FD ]
Line_34 $$ EnumDescriptorProto retProto = proxy.exchangeProto(sendProto)-->Line_35 $$ assertEquals(sendProto, retProto)[ FD ]
Line_33 $$ EnumDescriptorProto sendProto = EnumDescriptorProto.newBuilder().setName("test").build()-->Line_35 $$ assertEquals(sendProto, retProto)[ FD ]
Line_2 $$ private void testCallsInternal(Configuration conf) throws IOException -->Line_4 $$ TestProtocol proxy = null[ CD ]
Line_47 $$ rb = getMetrics(server.rpcDetailedMetrics.name())-->Line_48 $$ assertCounter("IOExceptionNumOps", 1L, rb)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_18 $$ rb = getMetrics(server.rpcDetailedMetrics.name())[ FD ]
Line_53 $$ for (int i = 0; i < numThreads; i++) -->Line_63 $$ i--[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_15 $$ assertCounter("RpcProcessingTimeNumOps", 3L, rb)[ FD ]
Line_31 $$ intResult = proxy.add(new int[] -->Line_32 $$ assertEquals(intResult, 3)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_48 $$ assertCounter("IOExceptionNumOps", 1L, rb)[ FD ]
Line_2 $$ private void testCallsInternal(Configuration conf) throws IOException -->Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_69 $$ RPC.stopProxy(proxy)[ FD ]
Line_10 $$ String stringResult = proxy.echo("foo")-->Line_12 $$ stringResult = proxy.echo((String) null)[ FD ]
Line_68 $$ if (proxy != null)-->Line_69 $$ RPC.stopProxy(proxy)[ CD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_49 $$ proxy.testServerGet()[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_23 $$ stringResults = proxy.echo((String[]) null)[ FD ]
Line_4 $$ TestProtocol proxy = null-->Line_39 $$ proxy.error()[ FD ]
Line_18 $$ rb = getMetrics(server.rpcDetailedMetrics.name())-->Line_48 $$ assertCounter("IOExceptionNumOps", 1L, rb)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_19 $$ assertCounter("EchoNumOps", 2L, rb)[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_29 $$ int intResult = proxy.add(1, 2)[ FD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_47 $$ rb = getMetrics(server.rpcDetailedMetrics.name())[ FD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_42 $$ LOG.debug("Caught " + e)[ CD ]
Line_14 $$ MetricsRecordBuilder rb = getMetrics(server.rpcMetrics.name())-->Line_20 $$ assertCounter("PingNumOps", 1L, rb)[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_27 $$ utf8Result = (UTF8) proxy.echo((UTF8) null)[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_34 $$ EnumDescriptorProto retProto = proxy.exchangeProto(sendProto)[ FD ]
Line_59 $$ for (int i = 0; i < numThreads; i++) -->Line_63 $$ i--[ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_21 $$ String[] stringResults = proxy.echo(new String[] [ FD ]
Line_53 $$ for (int i = 0; i < numThreads; i++) -->Line_59 $$ for (int i = 0; i < numThreads; i++) [ FD ]
Line_8 $$ proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_69 $$ RPC.stopProxy(proxy)[ FD ]
Line_18 $$ rb = getMetrics(server.rpcDetailedMetrics.name())-->Line_47 $$ rb = getMetrics(server.rpcDetailedMetrics.name())[ FD ]
Line_3 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).build()-->Line_51 $$ server.setSocketSendBufSize(1024)[ FD ]
Line_44 $$ caught = true-->Line_46 $$ assertTrue(caught)[ FD ]
Line_25 $$ UTF8 utf8Result = (UTF8) proxy.echo(new UTF8("hello world"))-->Line_26 $$ assertEquals(new UTF8("hello world"), utf8Result)[ FD ]
Line_10 $$ String stringResult = proxy.echo("foo")-->Line_13 $$ assertEquals(stringResult, null)[ FD ]
