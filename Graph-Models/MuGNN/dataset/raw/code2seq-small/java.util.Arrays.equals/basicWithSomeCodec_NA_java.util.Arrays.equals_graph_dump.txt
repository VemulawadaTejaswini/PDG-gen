Line_10 $$ Scanner scanner = reader.createScanner()-->Line_25 $$ scanner.upperBound(getSomeKey(50))[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_19 $$ byte[] val2 = readValue(scanner)[ FD ]
Line_23 $$ readKey = readKey(scanner)-->Line_28 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(51)))[ FD ]
Line_3 $$ Path ncTFile = new Path(ROOT, "basic.tfile")-->Line_4 $$ FSDataOutputStream fout = createFSOutput(ncTFile)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_7 $$ fout.close()[ CD ]
Line_4 $$ FSDataOutputStream fout = createFSOutput(ncTFile)-->Line_7 $$ fout.close()[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_21 $$ scanner.lowerBound(getSomeKey(50))[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)[ CD ]
Line_3 $$ Path ncTFile = new Path(ROOT, "basic.tfile")-->Line_36 $$ fs.delete(ncTFile, true)[ FD ]
Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)-->Line_10 $$ Scanner scanner = reader.createScanner()[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_32 $$ assertFalse(scanner.advance())[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_10 $$ Scanner scanner = reader.createScanner()[ CD ]
Line_14 $$ byte[] readKey = readKey(scanner)-->Line_23 $$ readKey = readKey(scanner)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_12 $$ scanner.seekTo(getSomeKey(50))[ FD ]
Line_23 $$ readKey = readKey(scanner)-->Line_27 $$ readKey = readKey(scanner)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_32 $$ assertFalse(scanner.advance())[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_20 $$ assertTrue(Arrays.equals(val1, val2))[ CD ]
Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)-->Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))[ FD ]
Line_3 $$ Path ncTFile = new Path(ROOT, "basic.tfile")-->Line_8 $$ FSDataInputStream fin = fs.open(ncTFile)[ FD ]
Line_27 $$ readKey = readKey(scanner)-->Line_28 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(51)))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))[ CD ]
Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)-->Line_26 $$ assertTrue("location lookup failed", scanner.currentLocation.compareTo(reader.end()) < 0)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_29 $$ scanner.close()[ CD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_18 $$ scanner.seekTo(new byte[0])[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_33 $$ scanner.close()[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_5 $$ Writer writer = new Writer(fout, minBlockSize, codec, "memcmp", conf)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_24 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(50)))[ CD ]
Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)-->Line_22 $$ assertTrue("locaton lookup failed", scanner.currentLocation.compareTo(reader.end()) < 0)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_16 $$ scanner.seekTo(new byte[0])[ CD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_21 $$ scanner.lowerBound(getSomeKey(50))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_34 $$ reader.close()[ CD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_14 $$ byte[] readKey = readKey(scanner)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_23 $$ readKey = readKey(scanner)[ FD ]
Line_14 $$ byte[] readKey = readKey(scanner)-->Line_15 $$ assertTrue("seeked key does not match", Arrays.equals(getSomeKey(50), readKey))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_4 $$ FSDataOutputStream fout = createFSOutput(ncTFile)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_8 $$ FSDataInputStream fin = fs.open(ncTFile)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_31 $$ readAndCheckbytes(scanner, 10, 50)[ CD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_13 $$ assertTrue("location lookup failed", scanner.seekTo(getSomeKey(50)))[ FD ]
Line_23 $$ readKey = readKey(scanner)-->Line_24 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(50)))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_19 $$ byte[] val2 = readValue(scanner)[ CD ]
Line_14 $$ byte[] readKey = readKey(scanner)-->Line_27 $$ readKey = readKey(scanner)[ FD ]
Line_14 $$ byte[] readKey = readKey(scanner)-->Line_28 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(51)))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_28 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(51)))[ CD ]
Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))-->Line_31 $$ readAndCheckbytes(scanner, 10, 50)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_15 $$ assertTrue("seeked key does not match", Arrays.equals(getSomeKey(50), readKey))[ CD ]
Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))-->Line_32 $$ assertFalse(scanner.advance())[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_11 $$ readAllRecords(scanner)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_6 $$ writeRecords(writer)[ CD ]
Line_8 $$ FSDataInputStream fin = fs.open(ncTFile)-->Line_35 $$ fin.close()[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_36 $$ fs.delete(ncTFile, true)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_33 $$ scanner.close()[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_18 $$ scanner.seekTo(new byte[0])[ CD ]
Line_14 $$ byte[] readKey = readKey(scanner)-->Line_24 $$ assertTrue("seeked key does not match", Arrays.equals(readKey, getSomeKey(50)))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_26 $$ assertTrue("location lookup failed", scanner.currentLocation.compareTo(reader.end()) < 0)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_13 $$ assertTrue("location lookup failed", scanner.seekTo(getSomeKey(50)))[ CD ]
Line_5 $$ Writer writer = new Writer(fout, minBlockSize, codec, "memcmp", conf)-->Line_6 $$ writeRecords(writer)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_11 $$ readAllRecords(scanner)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_27 $$ readKey = readKey(scanner)[ FD ]
Line_19 $$ byte[] val2 = readValue(scanner)-->Line_20 $$ assertTrue(Arrays.equals(val1, val2))[ FD ]
Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)-->Line_34 $$ reader.close()[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_17 $$ byte[] val1 = readValue(scanner)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_22 $$ assertTrue("locaton lookup failed", scanner.currentLocation.compareTo(reader.end()) < 0)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_35 $$ fin.close()[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_23 $$ readKey = readKey(scanner)[ CD ]
Line_3 $$ Path ncTFile = new Path(ROOT, "basic.tfile")-->Line_9 $$ Reader reader = new Reader(fs.open(ncTFile), fs.getFileStatus(ncTFile).getLen(), conf)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_31 $$ readAndCheckbytes(scanner, 10, 50)[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_29 $$ scanner.close()[ FD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_17 $$ byte[] val1 = readValue(scanner)[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_25 $$ scanner.upperBound(getSomeKey(50))[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_3 $$ Path ncTFile = new Path(ROOT, "basic.tfile")[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_14 $$ byte[] readKey = readKey(scanner)[ CD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_12 $$ scanner.seekTo(getSomeKey(50))[ CD ]
Line_10 $$ Scanner scanner = reader.createScanner()-->Line_16 $$ scanner.seekTo(new byte[0])[ FD ]
Line_30 $$ scanner = reader.createScannerByKey(getSomeKey(10), getSomeKey(60))-->Line_33 $$ scanner.close()[ FD ]
Line_17 $$ byte[] val1 = readValue(scanner)-->Line_20 $$ assertTrue(Arrays.equals(val1, val2))[ FD ]
Line_2 $$ void basicWithSomeCodec(String codec) throws IOException -->Line_27 $$ readKey = readKey(scanner)[ CD ]
