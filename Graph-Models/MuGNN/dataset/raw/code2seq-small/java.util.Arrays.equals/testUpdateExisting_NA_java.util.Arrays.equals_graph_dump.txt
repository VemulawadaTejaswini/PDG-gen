Line_12 $$ Blob newDataBlob = new OutputBlob(new UnsyncByteArrayInputStream(newDataBytes), newDataBytes.length)-->Line_13 $$ newDLContent.setData(newDataBlob)[ FD ]
Line_10 $$ String newDataString = RandomTestUtil.randomString()-->Line_11 $$ byte[] newDataBytes = newDataString.getBytes(StringPool.UTF8)[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_24 $$ Assert.assertTrue(Arrays.equals(existingData.getBytes(1, (int) existingData.length()), newDataBytes))[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_6 $$ newDLContent.setCompanyId(RandomTestUtil.nextLong())[ CD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_17 $$ Assert.assertEquals(existingDLContent.getContentId(), newDLContent.getContentId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_23 $$ Blob existingData = existingDLContent.getData()[ CD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_22 $$ Assert.assertEquals(existingDLContent.getVersion(), newDLContent.getVersion())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_15 $$ _dlContents.add(_persistence.update(newDLContent))[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_15 $$ _dlContents.add(_persistence.update(newDLContent))[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_12 $$ Blob newDataBlob = new OutputBlob(new UnsyncByteArrayInputStream(newDataBytes), newDataBytes.length)[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_22 $$ Assert.assertEquals(existingDLContent.getVersion(), newDLContent.getVersion())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_20 $$ Assert.assertEquals(existingDLContent.getRepositoryId(), newDLContent.getRepositoryId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_5 $$ newDLContent.setGroupId(RandomTestUtil.nextLong())[ CD ]
Line_11 $$ byte[] newDataBytes = newDataString.getBytes(StringPool.UTF8)-->Line_24 $$ Assert.assertTrue(Arrays.equals(existingData.getBytes(1, (int) existingData.length()), newDataBytes))[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_6 $$ newDLContent.setCompanyId(RandomTestUtil.nextLong())[ FD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_25 $$ Assert.assertEquals(existingDLContent.getSize(), newDLContent.getSize())[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_5 $$ newDLContent.setGroupId(RandomTestUtil.nextLong())[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_7 $$ newDLContent.setRepositoryId(RandomTestUtil.nextLong())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_11 $$ byte[] newDataBytes = newDataString.getBytes(StringPool.UTF8)[ CD ]
Line_3 $$ long pk = RandomTestUtil.nextLong()-->Line_4 $$ DLContent newDLContent = _persistence.create(pk)[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_19 $$ Assert.assertEquals(existingDLContent.getCompanyId(), newDLContent.getCompanyId())[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_21 $$ Assert.assertEquals(existingDLContent.getPath(), newDLContent.getPath())[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())[ FD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_23 $$ Blob existingData = existingDLContent.getData()[ FD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_22 $$ Assert.assertEquals(existingDLContent.getVersion(), newDLContent.getVersion())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_10 $$ String newDataString = RandomTestUtil.randomString()[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_20 $$ Assert.assertEquals(existingDLContent.getRepositoryId(), newDLContent.getRepositoryId())[ CD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_19 $$ Assert.assertEquals(existingDLContent.getCompanyId(), newDLContent.getCompanyId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_17 $$ Assert.assertEquals(existingDLContent.getContentId(), newDLContent.getContentId())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_9 $$ newDLContent.setVersion(RandomTestUtil.randomString())[ FD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_21 $$ Assert.assertEquals(existingDLContent.getPath(), newDLContent.getPath())[ FD ]
Line_23 $$ Blob existingData = existingDLContent.getData()-->Line_24 $$ Assert.assertTrue(Arrays.equals(existingData.getBytes(1, (int) existingData.length()), newDataBytes))[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_8 $$ newDLContent.setPath(RandomTestUtil.randomString())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_18 $$ Assert.assertEquals(existingDLContent.getGroupId(), newDLContent.getGroupId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_19 $$ Assert.assertEquals(existingDLContent.getCompanyId(), newDLContent.getCompanyId())[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_25 $$ Assert.assertEquals(existingDLContent.getSize(), newDLContent.getSize())[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_9 $$ newDLContent.setVersion(RandomTestUtil.randomString())[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_14 $$ newDLContent.setSize(RandomTestUtil.nextLong())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_25 $$ Assert.assertEquals(existingDLContent.getSize(), newDLContent.getSize())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_3 $$ long pk = RandomTestUtil.nextLong()[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_4 $$ DLContent newDLContent = _persistence.create(pk)[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_17 $$ Assert.assertEquals(existingDLContent.getContentId(), newDLContent.getContentId())[ FD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_20 $$ Assert.assertEquals(existingDLContent.getRepositoryId(), newDLContent.getRepositoryId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_18 $$ Assert.assertEquals(existingDLContent.getGroupId(), newDLContent.getGroupId())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_13 $$ newDLContent.setData(newDataBlob)[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_7 $$ newDLContent.setRepositoryId(RandomTestUtil.nextLong())[ CD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_21 $$ Assert.assertEquals(existingDLContent.getPath(), newDLContent.getPath())[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_8 $$ newDLContent.setPath(RandomTestUtil.randomString())[ FD ]
Line_16 $$ DLContent existingDLContent = _persistence.findByPrimaryKey(newDLContent.getPrimaryKey())-->Line_18 $$ Assert.assertEquals(existingDLContent.getGroupId(), newDLContent.getGroupId())[ FD ]
Line_2 $$ public void testUpdateExisting() throws Exception -->Line_13 $$ newDLContent.setData(newDataBlob)[ CD ]
Line_4 $$ DLContent newDLContent = _persistence.create(pk)-->Line_14 $$ newDLContent.setSize(RandomTestUtil.nextLong())[ FD ]
