Line_2 $$ public void testShort() -->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_2 $$ public void testShort() -->Line_4 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_13 $$ BigEndianCodec.putShort(bytes, i * 2, shorts[i])[ FD ]
Line_2 $$ public void testShort() -->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ CD ]
Line_2 $$ public void testShort() -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_11 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_16 $$ short[] newShorts = new short[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(shorts, newShorts))[ FD ]
Line_2 $$ public void testShort() -->Line_3 $$ short[] shorts = new short[_COUNT][ CD ]
Line_10 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()-->Line_12 $$ shortBuffer.put(shorts[i])[ FD ]
Line_2 $$ public void testShort() -->Line_10 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()[ CD ]
Line_2 $$ public void testShort() -->Line_16 $$ short[] newShorts = new short[_COUNT][ CD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_18 $$ newShorts[i] = BigEndianCodec.getShort(bytes, i * 2)[ FD ]
Line_2 $$ public void testShort() -->Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)[ CD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ BigEndianCodec.putShort(bytes, i * 2, shorts[i])[ CD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_9 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_3 $$ short[] shorts = new short[_COUNT]-->Line_20 $$ Assert.assertTrue(Arrays.equals(shorts, newShorts))[ FD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_5 $$ shorts[i] = (short) _random.nextInt()[ CD ]
Line_11 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ shortBuffer.put(shorts[i])[ CD ]
Line_17 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ newShorts[i] = BigEndianCodec.getShort(bytes, i * 2)[ CD ]
Line_4 $$ for (int i = 0; i < _COUNT; i++) -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testShort() -->Line_7 $$ byte[] bytes = new byte[_COUNT * 2][ CD ]
Line_7 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_15 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_2 $$ public void testShort() -->Line_17 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_2 $$ public void testShort() -->Line_20 $$ Assert.assertTrue(Arrays.equals(shorts, newShorts))[ CD ]
Line_8 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()[ FD ]
