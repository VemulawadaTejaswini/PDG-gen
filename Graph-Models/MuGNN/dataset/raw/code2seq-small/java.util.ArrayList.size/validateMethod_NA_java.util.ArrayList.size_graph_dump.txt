Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_14 $$ List<PsiMethod> list = map.get(method)[ FD ]
Line_3 $$ ArrayList<String> conflicts = new ArrayList<String>()-->Line_26 $$ return conflicts.size() <= 0 || reportConflicts(conflicts, helper.getProject())[ FD ]
Line_4 $$ PsiClass owner = helper.getOwner()-->Line_5 $$ PsiMethod[] methods = ArrayUtil.mergeArrays(owner.getAllMethods(), new PsiMethod[] [ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_26 $$ return conflicts.size() <= 0 || reportConflicts(conflicts, helper.getProject())[ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_4 $$ PsiClass owner = helper.getOwner()[ CD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_18 $$ if (psiMethod != method) [ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() [ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_26 $$ return conflicts.size() <= 0 || reportConflicts(conflicts, helper.getProject())[ FD ]
Line_3 $$ ArrayList<String> conflicts = new ArrayList<String>()-->Line_23 $$ conflicts.add(message)[ FD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_22 $$ String message = containingClass instanceof GroovyScriptClass ? GroovyRefactoringBundle.message("method.is.already.defined.in.script", GroovyRefactoringUtil.getMethodSignature(method), CommonRefactoringUtil.htmlEmphasize(containingClass.getQualifiedName())) : GroovyRefactoringBundle.message("method.is.already.defined.in.class", GroovyRefactoringUtil.getMethodSignature(method), CommonRefactoringUtil.htmlEmphasize(containingClass.getQualifiedName()))[ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_14 $$ List<PsiMethod> list = map.get(method)[ CD ]
Line_5 $$ PsiMethod[] methods = ArrayUtil.mergeArrays(owner.getAllMethods(), new PsiMethod[] -->Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() [ FD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_8 $$ return method.getSignature(PsiSubstitutor.EMPTY).hashCode()[ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_8 $$ return method.getSignature(PsiSubstitutor.EMPTY).hashCode()[ FD ]
Line_18 $$ if (psiMethod != method) -->Line_19 $$ PsiClass containingClass = psiMethod.getContainingClass()[ CD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_11 $$ return method1.getSignature(PsiSubstitutor.EMPTY).equals(method2.getSignature(PsiSubstitutor.EMPTY))[ CD ]
Line_15 $$ if (list == null)-->Line_16 $$ return true[ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_18 $$ if (psiMethod != method) [ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_22 $$ String message = containingClass instanceof GroovyScriptClass ? GroovyRefactoringBundle.message("method.is.already.defined.in.script", GroovyRefactoringUtil.getMethodSignature(method), CommonRefactoringUtil.htmlEmphasize(containingClass.getQualifiedName())) : GroovyRefactoringBundle.message("method.is.already.defined.in.class", GroovyRefactoringUtil.getMethodSignature(method), CommonRefactoringUtil.htmlEmphasize(containingClass.getQualifiedName()))[ FD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_14 $$ List<PsiMethod> list = map.get(method)[ FD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_8 $$ return method.getSignature(PsiSubstitutor.EMPTY).hashCode()[ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_15 $$ if (list == null)[ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_4 $$ PsiClass owner = helper.getOwner()[ FD ]
Line_6 $$ final Map<PsiMethod, List<PsiMethod>> map = DuplicatesUtil.factorDuplicates(methods, new TObjectHashingStrategy<PsiMethod>() -->Line_11 $$ return method1.getSignature(PsiSubstitutor.EMPTY).equals(method2.getSignature(PsiSubstitutor.EMPTY))[ FD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_5 $$ PsiMethod[] methods = ArrayUtil.mergeArrays(owner.getAllMethods(), new PsiMethod[] [ CD ]
Line_2 $$ private static boolean validateMethod(GrMethod method, ExtractMethodInfoHelper helper) -->Line_3 $$ ArrayList<String> conflicts = new ArrayList<String>()[ CD ]
Line_18 $$ if (psiMethod != method) -->Line_23 $$ conflicts.add(message)[ CD ]
Line_20 $$ if (containingClass == null)-->Line_21 $$ return true[ CD ]
Line_18 $$ if (psiMethod != method) -->Line_20 $$ if (containingClass == null)[ CD ]
