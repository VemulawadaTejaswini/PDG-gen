Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_16 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 100L)[ CD ]
Line_3 $$ Client client = client()-->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_3 $$ Client client = client()-->Line_36 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots(randomFrom("test-snap", "_all", "*", "*-snap", "test*")).get().getSnapshots()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_39 $$ assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_42 $$ for (int i = 0; i < 50; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_12 $$ index("test-idx-3", "doc", Integer.toString(i), "foo", "baz" + i)[ CD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_48 $$ for (int i = 0; i < 100; i += 2) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_5 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_48 $$ for (int i = 0; i < 100; i += 2) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_53 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 50L)[ CD ]
Line_78 $$ if (flushResponseFuture != null) -->Line_79 $$ flushResponseFuture.actionGet()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_19 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_56 $$ client.admin().indices().prepareClose("test-idx-1", "test-idx-2").get()[ CD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_45 $$ for (int i = 50; i < 100; i++) [ FD ]
Line_58 $$ RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()-->Line_59 $$ assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0))[ FD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_12 $$ index("test-idx-3", "doc", Integer.toString(i), "foo", "baz" + i)[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_20 $$ ArrayList<String> indicesToFlush = new ArrayList()-->Line_23 $$ indicesToFlush.add("test-idx-" + i)[ FD ]
Line_3 $$ Client client = client()-->Line_56 $$ client.admin().indices().prepareClose("test-idx-1", "test-idx-2").get()[ FD ]
Line_3 $$ Client client = client()-->Line_16 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 100L)[ FD ]
Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()-->Line_78 $$ if (flushResponseFuture != null) [ FD ]
Line_3 $$ Client client = client()-->Line_62 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ FD ]
Line_3 $$ Client client = client()-->Line_69 $$ restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-2").execute().actionGet()[ FD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_21 $$ for (int i = 1; i < 4; i++) [ FD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_43 $$ client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get()[ FD ]
Line_75 $$ ClusterState clusterState = client.admin().cluster().prepareState().get().getState()-->Line_76 $$ assertThat(clusterState.getMetaData().hasIndex("test-idx-1"), equalTo(true))[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_10 $$ index("test-idx-1", "doc", Integer.toString(i), "foo", "bar" + i)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_38 $$ SnapshotInfo snapshotInfo = snapshotInfos.get(0)[ CD ]
Line_3 $$ Client client = client()-->Line_58 $$ RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()[ FD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_37 $$ assertThat(snapshotInfos.size(), equalTo(1))[ CD ]
Line_22 $$ if (randomBoolean()) -->Line_23 $$ indicesToFlush.add("test-idx-" + i)[ CD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_22 $$ if (randomBoolean()) [ CD ]
Line_33 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-3").get()-->Line_34 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_3 $$ Client client = client()-->Line_75 $$ ClusterState clusterState = client.admin().cluster().prepareState().get().getState()[ FD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_10 $$ index("test-idx-1", "doc", Integer.toString(i), "foo", "bar" + i)[ CD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_43 $$ client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_42 $$ for (int i = 0; i < 50; i++) [ CD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_43 $$ client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_18 $$ ListenableActionFuture<FlushResponse> flushResponseFuture = null[ CD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_48 $$ for (int i = 0; i < 100; i += 2) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_33 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-3").get()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_78 $$ if (flushResponseFuture != null) [ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_17 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 100L)[ CD ]
Line_3 $$ Client client = client()-->Line_63 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 100L)[ FD ]
Line_3 $$ Client client = client()-->Line_53 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 50L)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_51 $$ assertAllSuccessful(refresh())[ CD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_42 $$ for (int i = 0; i < 50; i++) [ FD ]
Line_18 $$ ListenableActionFuture<FlushResponse> flushResponseFuture = null-->Line_79 $$ flushResponseFuture.actionGet()[ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_45 $$ for (int i = 50; i < 100; i++) [ FD ]
Line_3 $$ Client client = client()-->Line_43 $$ client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_76 $$ assertThat(clusterState.getMetaData().hasIndex("test-idx-1"), equalTo(true))[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_6 $$ createIndex("test-idx-1", "test-idx-2", "test-idx-3")[ CD ]
Line_20 $$ ArrayList<String> indicesToFlush = new ArrayList()-->Line_26 $$ if (!indicesToFlush.isEmpty()) [ FD ]
Line_20 $$ ArrayList<String> indicesToFlush = new ArrayList()-->Line_27 $$ String[] indices = indicesToFlush.toArray(new String[indicesToFlush.size()])[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_71 $$ ensureGreen()[ CD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_38 $$ SnapshotInfo snapshotInfo = snapshotInfos.get(0)-->Line_40 $$ assertThat(snapshotInfo.version(), equalTo(Version.CURRENT))[ FD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ FD ]
Line_36 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots(randomFrom("test-snap", "_all", "*", "*-snap", "test*")).get().getSnapshots()-->Line_37 $$ assertThat(snapshotInfos.size(), equalTo(1))[ FD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_58 $$ RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()-->Line_70 $$ assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0))[ FD ]
Line_19 $$ if (randomBoolean()) -->Line_20 $$ ArrayList<String> indicesToFlush = new ArrayList()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_77 $$ assertThat(clusterState.getMetaData().hasIndex("test-idx-2"), equalTo(false))[ CD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_43 $$ client.prepareDelete("test-idx-1", "doc", Integer.toString(i)).get()[ CD ]
Line_3 $$ Client client = client()-->Line_17 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 100L)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_52 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 50L)[ CD ]
Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()-->Line_79 $$ flushResponseFuture.actionGet()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_70 $$ assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0))[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_75 $$ ClusterState clusterState = client.admin().cluster().prepareState().get().getState()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_48 $$ for (int i = 0; i < 100; i += 2) [ CD ]
Line_21 $$ for (int i = 1; i < 4; i++) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_11 $$ index("test-idx-2", "doc", Integer.toString(i), "foo", "baz" + i)[ CD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_11 $$ index("test-idx-2", "doc", Integer.toString(i), "foo", "baz" + i)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_61 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_18 $$ ListenableActionFuture<FlushResponse> flushResponseFuture = null-->Line_78 $$ if (flushResponseFuture != null) [ FD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_69 $$ restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-2").execute().actionGet()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_45 $$ for (int i = 50; i < 100; i++) [ CD ]
Line_48 $$ for (int i = 0; i < 100; i += 2) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ FD ]
Line_26 $$ if (!indicesToFlush.isEmpty()) -->Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()[ CD ]
Line_27 $$ String[] indices = indicesToFlush.toArray(new String[indicesToFlush.size()])-->Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()[ FD ]
Line_3 $$ Client client = client()-->Line_33 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-3").get()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_7 $$ ensureGreen()[ CD ]
Line_3 $$ Client client = client()-->Line_5 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_64 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 50L)[ CD ]
Line_26 $$ if (!indicesToFlush.isEmpty()) -->Line_27 $$ String[] indices = indicesToFlush.toArray(new String[indicesToFlush.size()])[ CD ]
Line_3 $$ Client client = client()-->Line_52 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 50L)[ FD ]
Line_3 $$ Client client = client()-->Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()[ FD ]
Line_3 $$ Client client = client()-->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_63 $$ assertHitCount(client.prepareSearch("test-idx-2").setSize(0).get(), 100L)[ CD ]
Line_45 $$ for (int i = 50; i < 100; i++) -->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ CD ]
Line_19 $$ if (randomBoolean()) -->Line_26 $$ if (!indicesToFlush.isEmpty()) [ CD ]
Line_72 $$ for (int i = 0; i < 5; i++) -->Line_73 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ CD ]
Line_33 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-3").get()-->Line_35 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_54 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 50L)[ CD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_45 $$ for (int i = 50; i < 100; i++) [ FD ]
Line_9 $$ for (int i = 0; i < 100; i++) -->Line_48 $$ for (int i = 0; i < 100; i += 2) [ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_59 $$ assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0))[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_34 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_72 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_75 $$ ClusterState clusterState = client.admin().cluster().prepareState().get().getState()-->Line_77 $$ assertThat(clusterState.getMetaData().hasIndex("test-idx-2"), equalTo(false))[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_14 $$ refresh()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_58 $$ RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()[ CD ]
Line_58 $$ RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).execute().actionGet()-->Line_69 $$ restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-2").execute().actionGet()[ FD ]
Line_19 $$ if (randomBoolean()) -->Line_21 $$ for (int i = 1; i < 4; i++) [ CD ]
Line_36 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots(randomFrom("test-snap", "_all", "*", "*-snap", "test*")).get().getSnapshots()-->Line_38 $$ SnapshotInfo snapshotInfo = snapshotInfos.get(0)[ FD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_48 $$ for (int i = 0; i < 100; i += 2) [ FD ]
Line_3 $$ Client client = client()-->Line_15 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_40 $$ assertThat(snapshotInfo.version(), equalTo(Version.CURRENT))[ CD ]
Line_38 $$ SnapshotInfo snapshotInfo = snapshotInfos.get(0)-->Line_39 $$ assertThat(snapshotInfo.state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_48 $$ for (int i = 0; i < 100; i += 2) -->Line_49 $$ client.prepareDelete("test-idx-3", "doc", Integer.toString(i)).get()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_35 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_3 $$ Client client = client()-->Line_73 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_15 $$ assertHitCount(client.prepareSearch("test-idx-1").setSize(0).get(), 100L)[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_36 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots(randomFrom("test-snap", "_all", "*", "*-snap", "test*")).get().getSnapshots()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_60 $$ ensureGreen()[ CD ]
Line_69 $$ restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx-*", "-test-idx-2").execute().actionGet()-->Line_70 $$ assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0))[ FD ]
Line_18 $$ ListenableActionFuture<FlushResponse> flushResponseFuture = null-->Line_29 $$ flushResponseFuture = client.admin().indices().prepareFlush(indices).execute()[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_9 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_3 $$ Client client = client()-->Line_64 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 50L)[ FD ]
Line_48 $$ for (int i = 0; i < 100; i += 2) -->Line_72 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_3 $$ Client client = client()-->Line_54 $$ assertHitCount(client.prepareSearch("test-idx-3").setSize(0).get(), 50L)[ FD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_3 $$ Client client = client()[ CD ]
Line_2 $$ public void testBasicWorkFlow() throws Exception -->Line_67 $$ cluster().wipeIndices("test-idx-1", "test-idx-2")[ CD ]
Line_42 $$ for (int i = 0; i < 50; i++) -->Line_46 $$ client.prepareDelete("test-idx-2", "doc", Integer.toString(i)).get()[ FD ]
