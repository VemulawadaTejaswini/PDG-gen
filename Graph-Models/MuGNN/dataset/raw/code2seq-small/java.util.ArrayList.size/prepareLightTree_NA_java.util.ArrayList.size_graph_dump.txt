Line_28 $$ curNode = marker-->Line_58 $$ assertMarkersBalanced(curNode == rootMarker, curNode)[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_20 $$ if (curNode == null)[ FD ]
Line_16 $$ int maxDepth = 0-->Line_31 $$ maxDepth = curDepth[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_44 $$ if (myCurrentLexeme < myLexemeCount) [ CD ]
Line_24 $$ final StartMarker marker = (StartMarker) item-->Line_26 $$ curNode.addChild(marker)[ FD ]
Line_13 $$ final Stack<StartMarker> nodes = ContainerUtil.newStack()-->Line_27 $$ nodes.push(curNode)[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_27 $$ nodes.push(curNode)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_18 $$ for (int i = 1; i < myProduction.size(); i++) [ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_59 $$ checkTreeDepth(maxDepth, rootMarker.getTokenType() instanceof IFileElementType)[ CD ]
Line_19 $$ final ProductionMarker item = myProduction.get(i)-->Line_36 $$ if (item instanceof ErrorItem) [ FD ]
Line_52 $$ if (myLexStarts.length <= myCurrentLexeme + 1) -->Line_53 $$ resizeLexemes(myCurrentLexeme + 1)[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_57 $$ myLexTypes[myCurrentLexeme] = null[ CD ]
Line_18 $$ for (int i = 1; i < myProduction.size(); i++) -->Line_23 $$ if (item instanceof StartMarker) [ CD ]
Line_19 $$ final ProductionMarker item = myProduction.get(i)-->Line_32 $$ if (item instanceof DoneMarker) [ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_13 $$ final Stack<StartMarker> nodes = ContainerUtil.newStack()[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_12 $$ StartMarker curNode = rootMarker[ CD ]
Line_24 $$ final StartMarker marker = (StartMarker) item-->Line_28 $$ curNode = marker[ FD ]
Line_17 $$ int curDepth = 0-->Line_29 $$ curDepth++[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_26 $$ curNode.addChild(marker)[ FD ]
Line_18 $$ for (int i = 1; i < myProduction.size(); i++) -->Line_19 $$ final ProductionMarker item = myProduction.get(i)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_58 $$ assertMarkersBalanced(curNode == rootMarker, curNode)[ CD ]
Line_36 $$ if (item instanceof ErrorItem) -->Line_37 $$ int curToken = item.myLexemeIndex[ CD ]
Line_6 $$ StartMarker rootMarker = (StartMarker) myProduction.get(0)-->Line_14 $$ nodes.push(rootMarker)[ FD ]
Line_16 $$ int maxDepth = 0-->Line_59 $$ checkTreeDepth(maxDepth, rootMarker.getTokenType() instanceof IFileElementType)[ FD ]
Line_18 $$ for (int i = 1; i < myProduction.size(); i++) -->Line_22 $$ item.myParent = curNode[ CD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_25 $$ marker.myFirstChild = marker.myLastChild = marker.myNext = null[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_60 $$ clearCachedTokenType()[ CD ]
Line_19 $$ final ProductionMarker item = myProduction.get(i)-->Line_33 $$ assertMarkersBalanced(((DoneMarker) item).myStart == curNode, item)[ FD ]
Line_3 $$ if (myProduction.isEmpty()) -->Line_4 $$ LOG.error("Parser produced no markers. Text:\n" + myText)[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_10 $$ balanceWhiteSpaces()[ CD ]
Line_34 $$ curNode = nodes.pop()-->Line_26 $$ curNode.addChild(marker)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_15 $$ int lastErrorIndex = -1[ CD ]
Line_40 $$ lastErrorIndex = curToken-->Line_38 $$ if (curToken == lastErrorIndex)[ FD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_29 $$ curDepth++[ CD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_30 $$ if (curDepth > maxDepth)[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_14 $$ nodes.push(rootMarker)[ CD ]
Line_37 $$ int curToken = item.myLexemeIndex-->Line_38 $$ if (curToken == lastErrorIndex)[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_28 $$ curNode = marker[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_48 $$ if (rootMarker.myDoneMarker.myLexemeIndex < myLexemeCount) [ CD ]
Line_32 $$ if (item instanceof DoneMarker) -->Line_34 $$ curNode = nodes.pop()[ CD ]
Line_34 $$ curNode = nodes.pop()-->Line_22 $$ item.myParent = curNode[ FD ]
Line_34 $$ curNode = nodes.pop()-->Line_27 $$ nodes.push(curNode)[ FD ]
Line_48 $$ if (rootMarker.myDoneMarker.myLexemeIndex < myLexemeCount) -->Line_49 $$ final List<IElementType> missed = ContainerUtil.newArrayList(myLexTypes, rootMarker.myDoneMarker.myLexemeIndex, myLexemeCount)[ CD ]
Line_34 $$ curNode = nodes.pop()-->Line_58 $$ assertMarkersBalanced(curNode == rootMarker, curNode)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_11 $$ rootMarker.myParent = rootMarker.myFirstChild = rootMarker.myLastChild = rootMarker.myNext = null[ CD ]
Line_13 $$ final Stack<StartMarker> nodes = ContainerUtil.newStack()-->Line_14 $$ nodes.push(rootMarker)[ FD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_32 $$ if (item instanceof DoneMarker) [ CD ]
Line_44 $$ if (myCurrentLexeme < myLexemeCount) -->Line_45 $$ final List<IElementType> missed = ContainerUtil.newArrayList(myLexTypes, myCurrentLexeme, myLexemeCount)[ CD ]
Line_36 $$ if (item instanceof ErrorItem) -->Line_38 $$ if (curToken == lastErrorIndex)[ CD ]
Line_37 $$ int curToken = item.myLexemeIndex-->Line_40 $$ lastErrorIndex = curToken[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_55 $$ myLexStarts[myCurrentLexeme] = myText.length()[ CD ]
Line_7 $$ if (rootMarker.myFirstChild != null)-->Line_8 $$ return rootMarker[ CD ]
Line_19 $$ final ProductionMarker item = myProduction.get(i)-->Line_23 $$ if (item instanceof StartMarker) [ FD ]
Line_15 $$ int lastErrorIndex = -1-->Line_40 $$ lastErrorIndex = curToken[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_61 $$ return rootMarker[ CD ]
Line_36 $$ if (item instanceof ErrorItem) -->Line_41 $$ curNode.addChild(item)[ CD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_27 $$ nodes.push(curNode)[ CD ]
Line_17 $$ int curDepth = 0-->Line_31 $$ maxDepth = curDepth[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_52 $$ if (myLexStarts.length <= myCurrentLexeme + 1) [ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_6 $$ StartMarker rootMarker = (StartMarker) myProduction.get(0)[ CD ]
Line_28 $$ curNode = marker-->Line_20 $$ if (curNode == null)[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_58 $$ assertMarkersBalanced(curNode == rootMarker, curNode)[ FD ]
Line_32 $$ if (item instanceof DoneMarker) -->Line_36 $$ if (item instanceof ErrorItem) [ CD ]
Line_19 $$ final ProductionMarker item = myProduction.get(i)-->Line_41 $$ curNode.addChild(item)[ FD ]
Line_16 $$ int maxDepth = 0-->Line_30 $$ if (curDepth > maxDepth)[ FD ]
Line_6 $$ StartMarker rootMarker = (StartMarker) myProduction.get(0)-->Line_7 $$ if (rootMarker.myFirstChild != null)[ FD ]
Line_32 $$ if (item instanceof DoneMarker) -->Line_33 $$ assertMarkersBalanced(((DoneMarker) item).myStart == curNode, item)[ CD ]
Line_30 $$ if (curDepth > maxDepth)-->Line_31 $$ maxDepth = curDepth[ CD ]
Line_32 $$ if (item instanceof DoneMarker) -->Line_35 $$ curDepth--[ CD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_26 $$ curNode.addChild(marker)[ CD ]
Line_18 $$ for (int i = 1; i < myProduction.size(); i++) -->Line_20 $$ if (curNode == null)[ CD ]
Line_28 $$ curNode = marker-->Line_41 $$ curNode.addChild(item)[ FD ]
Line_28 $$ curNode = marker-->Line_27 $$ nodes.push(curNode)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_3 $$ if (myProduction.isEmpty()) [ CD ]
Line_15 $$ int lastErrorIndex = -1-->Line_38 $$ if (curToken == lastErrorIndex)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_17 $$ int curDepth = 0[ CD ]
Line_28 $$ curNode = marker-->Line_22 $$ item.myParent = curNode[ FD ]
Line_17 $$ int curDepth = 0-->Line_35 $$ curDepth--[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_34 $$ curNode = nodes.pop()[ FD ]
Line_17 $$ int curDepth = 0-->Line_30 $$ if (curDepth > maxDepth)[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_22 $$ item.myParent = curNode[ FD ]
Line_12 $$ StartMarker curNode = rootMarker-->Line_41 $$ curNode.addChild(item)[ FD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_24 $$ final StartMarker marker = (StartMarker) item[ CD ]
Line_28 $$ curNode = marker-->Line_26 $$ curNode.addChild(marker)[ FD ]
Line_13 $$ final Stack<StartMarker> nodes = ContainerUtil.newStack()-->Line_34 $$ curNode = nodes.pop()[ FD ]
Line_31 $$ maxDepth = curDepth-->Line_30 $$ if (curDepth > maxDepth)[ FD ]
Line_48 $$ if (rootMarker.myDoneMarker.myLexemeIndex < myLexemeCount) -->Line_50 $$ LOG.error("Tokens " + missed + " are outside of root element \"" + rootMarker.myType + "\". Text:\n" + myText)[ CD ]
Line_34 $$ curNode = nodes.pop()-->Line_20 $$ if (curNode == null)[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_7 $$ if (rootMarker.myFirstChild != null)[ CD ]
Line_20 $$ if (curNode == null)-->Line_21 $$ LOG.error("Unexpected end of the production")[ CD ]
Line_23 $$ if (item instanceof StartMarker) -->Line_28 $$ curNode = marker[ CD ]
Line_18 $$ for (int i = 1; i < myProduction.size(); i++) -->Line_19 $$ final ProductionMarker item = myProduction.get(i)[ CD ]
Line_34 $$ curNode = nodes.pop()-->Line_41 $$ curNode.addChild(item)[ FD ]
Line_44 $$ if (myCurrentLexeme < myLexemeCount) -->Line_46 $$ LOG.error("Tokens " + missed + " were not inserted into the tree. " + (myFile != null ? myFile.getLanguage() + ", " : "") + "Text:\n" + myText)[ CD ]
Line_31 $$ maxDepth = curDepth-->Line_59 $$ checkTreeDepth(maxDepth, rootMarker.getTokenType() instanceof IFileElementType)[ FD ]
Line_6 $$ StartMarker rootMarker = (StartMarker) myProduction.get(0)-->Line_59 $$ checkTreeDepth(maxDepth, rootMarker.getTokenType() instanceof IFileElementType)[ FD ]
Line_28 $$ curNode = marker-->Line_34 $$ curNode = nodes.pop()[ FD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_56 $$ myLexStarts[myCurrentLexeme + 1] = 0[ CD ]
Line_36 $$ if (item instanceof ErrorItem) -->Line_40 $$ lastErrorIndex = curToken[ CD ]
Line_2 $$ private StartMarker prepareLightTree() -->Line_16 $$ int maxDepth = 0[ CD ]
