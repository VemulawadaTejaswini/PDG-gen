Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_3 $$ Assert.notNull(requiredType, "Required type must not be null")[ CD ]
Line_19 $$ Map<String, Object> candidates = new HashMap<String, Object>()-->Line_31 $$ throw new NoUniqueBeanDefinitionException(requiredType, candidates.keySet())[ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_29 $$ return getBean(priorityCandidate, requiredType, args)[ FD ]
Line_6 $$ ArrayList<String> autowireCandidates = new ArrayList<String>()-->Line_9 $$ autowireCandidates.add(beanName)[ FD ]
Line_18 $$ if (beanNames.length > 1) -->Line_28 $$ if (priorityCandidate != null) [ CD ]
Line_7 $$ for (String beanName : beanNames) -->Line_21 $$ candidates.put(beanName, getBean(beanName, requiredType, args))[ FD ]
Line_18 $$ if (beanNames.length > 1) -->Line_32 $$ if (getParentBeanFactory() != null) [ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_3 $$ Assert.notNull(requiredType, "Required type must not be null")[ FD ]
Line_32 $$ if (getParentBeanFactory() != null) -->Line_33 $$ return getParentBeanFactory().getBean(requiredType, args)[ CD ]
Line_6 $$ ArrayList<String> autowireCandidates = new ArrayList<String>()-->Line_13 $$ beanNames = autowireCandidates.toArray(new String[autowireCandidates.size()])[ FD ]
Line_16 $$ if (beanNames.length == 1) -->Line_17 $$ return getBean(beanNames[0], requiredType, args)[ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_16 $$ if (beanNames.length == 1) [ CD ]
Line_19 $$ Map<String, Object> candidates = new HashMap<String, Object>()-->Line_27 $$ String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType)[ FD ]
Line_27 $$ String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType)-->Line_29 $$ return getBean(priorityCandidate, requiredType, args)[ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_23 $$ String primaryCandidate = determinePrimaryCandidate(candidates, requiredType)[ FD ]
Line_12 $$ if (autowireCandidates.size() > 0) -->Line_13 $$ beanNames = autowireCandidates.toArray(new String[autowireCandidates.size()])[ CD ]
Line_18 $$ if (beanNames.length > 1) -->Line_19 $$ Map<String, Object> candidates = new HashMap<String, Object>()[ CD ]
Line_28 $$ if (priorityCandidate != null) -->Line_29 $$ return getBean(priorityCandidate, requiredType, args)[ CD ]
Line_5 $$ if (beanNames.length > 1) -->Line_12 $$ if (autowireCandidates.size() > 0) [ CD ]
Line_4 $$ String[] beanNames = getBeanNamesForType(requiredType)-->Line_13 $$ beanNames = autowireCandidates.toArray(new String[autowireCandidates.size()])[ FD ]
Line_7 $$ for (String beanName : beanNames) -->Line_8 $$ if (!containsBeanDefinition(beanName) || getBeanDefinition(beanName).isAutowireCandidate()) [ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_5 $$ if (beanNames.length > 1) [ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_21 $$ candidates.put(beanName, getBean(beanName, requiredType, args))[ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_17 $$ return getBean(beanNames[0], requiredType, args)[ FD ]
Line_19 $$ Map<String, Object> candidates = new HashMap<String, Object>()-->Line_21 $$ candidates.put(beanName, getBean(beanName, requiredType, args))[ FD ]
Line_23 $$ String primaryCandidate = determinePrimaryCandidate(candidates, requiredType)-->Line_24 $$ if (primaryCandidate != null) [ FD ]
Line_8 $$ if (!containsBeanDefinition(beanName) || getBeanDefinition(beanName).isAutowireCandidate()) -->Line_9 $$ autowireCandidates.add(beanName)[ CD ]
Line_18 $$ if (beanNames.length > 1) -->Line_27 $$ String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType)[ CD ]
Line_27 $$ String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType)-->Line_28 $$ if (priorityCandidate != null) [ FD ]
Line_23 $$ String primaryCandidate = determinePrimaryCandidate(candidates, requiredType)-->Line_25 $$ return getBean(primaryCandidate, requiredType, args)[ FD ]
Line_16 $$ if (beanNames.length == 1) -->Line_18 $$ if (beanNames.length > 1) [ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_27 $$ String priorityCandidate = determineHighestPriorityCandidate(candidates, requiredType)[ FD ]
Line_5 $$ if (beanNames.length > 1) -->Line_6 $$ ArrayList<String> autowireCandidates = new ArrayList<String>()[ CD ]
Line_7 $$ for (String beanName : beanNames) -->Line_9 $$ autowireCandidates.add(beanName)[ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_4 $$ String[] beanNames = getBeanNamesForType(requiredType)[ FD ]
Line_18 $$ if (beanNames.length > 1) -->Line_24 $$ if (primaryCandidate != null) [ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_25 $$ return getBean(primaryCandidate, requiredType, args)[ FD ]
Line_24 $$ if (primaryCandidate != null) -->Line_25 $$ return getBean(primaryCandidate, requiredType, args)[ CD ]
Line_18 $$ if (beanNames.length > 1) -->Line_23 $$ String primaryCandidate = determinePrimaryCandidate(candidates, requiredType)[ CD ]
Line_6 $$ ArrayList<String> autowireCandidates = new ArrayList<String>()-->Line_12 $$ if (autowireCandidates.size() > 0) [ FD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_4 $$ String[] beanNames = getBeanNamesForType(requiredType)[ CD ]
Line_2 $$ public <T> T getBean(Class<T> requiredType, Object... args) throws BeansException -->Line_33 $$ return getParentBeanFactory().getBean(requiredType, args)[ FD ]
Line_19 $$ Map<String, Object> candidates = new HashMap<String, Object>()-->Line_23 $$ String primaryCandidate = determinePrimaryCandidate(candidates, requiredType)[ FD ]
