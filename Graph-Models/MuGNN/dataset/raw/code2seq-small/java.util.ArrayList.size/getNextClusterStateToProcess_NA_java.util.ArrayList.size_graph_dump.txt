Line_3 $$ if (pendingStates.isEmpty()) -->Line_4 $$ return null[ CD ]
Line_18 $$ for (; index < pendingStates.size(); index++) -->Line_19 $$ ClusterStateContext potentialState = pendingStates.get(index)[ CD ]
Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_20 $$ if (potentialState.state.supersedes(stateToProcess.state) && potentialState.committed()) [ FD ]
Line_8 $$ for (; index < pendingStates.size(); index++) -->Line_10 $$ if (potentialState.committed()) [ CD ]
Line_6 $$ ClusterStateContext stateToProcess = null-->Line_11 $$ stateToProcess = potentialState[ FD ]
Line_11 $$ stateToProcess = potentialState-->Line_15 $$ if (stateToProcess == null) [ FD ]
Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_11 $$ stateToProcess = potentialState[ FD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_18 $$ for (; index < pendingStates.size(); index++) [ CD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_8 $$ for (; index < pendingStates.size(); index++) [ CD ]
Line_11 $$ stateToProcess = potentialState-->Line_21 $$ stateToProcess = potentialState[ FD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_6 $$ ClusterStateContext stateToProcess = null[ CD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_3 $$ if (pendingStates.isEmpty()) [ CD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_7 $$ int index = 0[ CD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_25 $$ return stateToProcess.state[ CD ]
Line_6 $$ ClusterStateContext stateToProcess = null-->Line_21 $$ stateToProcess = potentialState[ FD ]
Line_7 $$ int index = 0-->Line_18 $$ for (; index < pendingStates.size(); index++) [ FD ]
Line_6 $$ ClusterStateContext stateToProcess = null-->Line_24 $$ assert stateToProcess.committed() : "should only return committed cluster state. found " + stateToProcess.state[ FD ]
Line_19 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_21 $$ stateToProcess = potentialState[ FD ]
Line_7 $$ int index = 0-->Line_8 $$ for (; index < pendingStates.size(); index++) [ FD ]
Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_21 $$ stateToProcess = potentialState[ FD ]
Line_15 $$ if (stateToProcess == null) -->Line_16 $$ return null[ CD ]
Line_7 $$ int index = 0-->Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)[ FD ]
Line_11 $$ stateToProcess = potentialState-->Line_24 $$ assert stateToProcess.committed() : "should only return committed cluster state. found " + stateToProcess.state[ FD ]
Line_18 $$ for (; index < pendingStates.size(); index++) -->Line_20 $$ if (potentialState.state.supersedes(stateToProcess.state) && potentialState.committed()) [ CD ]
Line_10 $$ if (potentialState.committed()) -->Line_11 $$ stateToProcess = potentialState[ CD ]
Line_2 $$ public synchronized ClusterState getNextClusterStateToProcess() -->Line_15 $$ if (stateToProcess == null) [ CD ]
Line_6 $$ ClusterStateContext stateToProcess = null-->Line_15 $$ if (stateToProcess == null) [ FD ]
Line_21 $$ stateToProcess = potentialState-->Line_24 $$ assert stateToProcess.committed() : "should only return committed cluster state. found " + stateToProcess.state[ FD ]
Line_7 $$ int index = 0-->Line_19 $$ ClusterStateContext potentialState = pendingStates.get(index)[ FD ]
Line_20 $$ if (potentialState.state.supersedes(stateToProcess.state) && potentialState.committed()) -->Line_21 $$ stateToProcess = potentialState[ CD ]
Line_8 $$ for (; index < pendingStates.size(); index++) -->Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)[ CD ]
Line_9 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_10 $$ if (potentialState.committed()) [ FD ]
Line_19 $$ ClusterStateContext potentialState = pendingStates.get(index)-->Line_20 $$ if (potentialState.state.supersedes(stateToProcess.state) && potentialState.committed()) [ FD ]
