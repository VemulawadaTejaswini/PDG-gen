Line_30 $$ if (debugAllocOther != null) -->Line_32 $$ ExceptionUtil.makeStackTraceRelative(debugAllocThis, currentTrace).printStackTrace(System.err)[ CD ]
Line_27 $$ if (otherMarker.myDoneMarker == null) -->Line_30 $$ if (debugAllocOther != null) [ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_14 $$ if (before != null) [ CD ]
Line_10 $$ if (idx < 0) -->Line_11 $$ LOG.error("Marker has never been added.")[ CD ]
Line_9 $$ int idx = myProduction.lastIndexOf(marker)-->Line_23 $$ for (int i = endIdx - 1; i > idx; i--) [ FD ]
Line_13 $$ int endIdx = myProduction.size()-->Line_19 $$ if (idx > endIdx) [ FD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_3 $$ final DoneMarker doneMarker = ((StartMarker) marker).myDoneMarker[ CD ]
Line_7 $$ if (!myDebugMode)-->Line_8 $$ return[ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_10 $$ if (idx < 0) [ CD ]
Line_31 $$ Throwable currentTrace = new Throwable()-->Line_33 $$ ExceptionUtil.makeStackTraceRelative(debugAllocOther, currentTrace).printStackTrace(System.err)[ FD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_15 $$ endIdx = myProduction.lastIndexOf(before)[ FD ]
Line_30 $$ if (debugAllocOther != null) -->Line_33 $$ ExceptionUtil.makeStackTraceRelative(debugAllocOther, currentTrace).printStackTrace(System.err)[ CD ]
Line_4 $$ if (doneMarker != null) -->Line_5 $$ LOG.error("Marker already done.")[ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_14 $$ if (before != null) [ FD ]
Line_31 $$ Throwable currentTrace = new Throwable()-->Line_32 $$ ExceptionUtil.makeStackTraceRelative(debugAllocThis, currentTrace).printStackTrace(System.err)[ FD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_9 $$ int idx = myProduction.lastIndexOf(marker)[ CD ]
Line_28 $$ final Throwable debugAllocOther = otherMarker.myDebugAllocationPosition-->Line_33 $$ ExceptionUtil.makeStackTraceRelative(debugAllocOther, currentTrace).printStackTrace(System.err)[ FD ]
Line_27 $$ if (otherMarker.myDoneMarker == null) -->Line_35 $$ LOG.error("Another not done marker added after this one. Must be done before this.")[ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_9 $$ int idx = myProduction.lastIndexOf(marker)[ FD ]
Line_27 $$ if (otherMarker.myDoneMarker == null) -->Line_29 $$ final Throwable debugAllocThis = ((StartMarker) marker).myDebugAllocationPosition[ CD ]
Line_9 $$ int idx = myProduction.lastIndexOf(marker)-->Line_19 $$ if (idx > endIdx) [ FD ]
Line_24 $$ Object item = myProduction.get(i)-->Line_25 $$ if (item instanceof StartMarker) [ FD ]
Line_25 $$ if (item instanceof StartMarker) -->Line_26 $$ StartMarker otherMarker = (StartMarker) item[ CD ]
Line_19 $$ if (idx > endIdx) -->Line_20 $$ LOG.error("'Before' marker precedes this one.")[ CD ]
Line_16 $$ if (endIdx < 0) -->Line_17 $$ LOG.error("'Before' marker has never been added.")[ CD ]
Line_23 $$ for (int i = endIdx - 1; i > idx; i--) -->Line_25 $$ if (item instanceof StartMarker) [ CD ]
Line_29 $$ final Throwable debugAllocThis = ((StartMarker) marker).myDebugAllocationPosition-->Line_32 $$ ExceptionUtil.makeStackTraceRelative(debugAllocThis, currentTrace).printStackTrace(System.err)[ FD ]
Line_14 $$ if (before != null) -->Line_19 $$ if (idx > endIdx) [ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_13 $$ int endIdx = myProduction.size()[ CD ]
Line_3 $$ final DoneMarker doneMarker = ((StartMarker) marker).myDoneMarker-->Line_4 $$ if (doneMarker != null) [ FD ]
Line_14 $$ if (before != null) -->Line_16 $$ if (endIdx < 0) [ CD ]
Line_15 $$ endIdx = myProduction.lastIndexOf(before)-->Line_16 $$ if (endIdx < 0) [ FD ]
Line_15 $$ endIdx = myProduction.lastIndexOf(before)-->Line_19 $$ if (idx > endIdx) [ FD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_23 $$ for (int i = endIdx - 1; i > idx; i--) [ CD ]
Line_25 $$ if (item instanceof StartMarker) -->Line_27 $$ if (otherMarker.myDoneMarker == null) [ CD ]
Line_13 $$ int endIdx = myProduction.size()-->Line_16 $$ if (endIdx < 0) [ FD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_7 $$ if (!myDebugMode)[ CD ]
Line_30 $$ if (debugAllocOther != null) -->Line_31 $$ Throwable currentTrace = new Throwable()[ CD ]
Line_9 $$ int idx = myProduction.lastIndexOf(marker)-->Line_10 $$ if (idx < 0) [ FD ]
Line_28 $$ final Throwable debugAllocOther = otherMarker.myDebugAllocationPosition-->Line_30 $$ if (debugAllocOther != null) [ FD ]
Line_23 $$ for (int i = endIdx - 1; i > idx; i--) -->Line_24 $$ Object item = myProduction.get(i)[ FD ]
Line_13 $$ int endIdx = myProduction.size()-->Line_15 $$ endIdx = myProduction.lastIndexOf(before)[ FD ]
Line_27 $$ if (otherMarker.myDoneMarker == null) -->Line_28 $$ final Throwable debugAllocOther = otherMarker.myDebugAllocationPosition[ CD ]
Line_2 $$ private void doValidityChecks(@NotNull Marker marker, @Nullable final Marker before) -->Line_4 $$ if (doneMarker != null) [ CD ]
Line_23 $$ for (int i = endIdx - 1; i > idx; i--) -->Line_24 $$ Object item = myProduction.get(i)[ CD ]
Line_14 $$ if (before != null) -->Line_15 $$ endIdx = myProduction.lastIndexOf(before)[ CD ]
