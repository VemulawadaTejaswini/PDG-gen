Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")[ CD ]
Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")-->Line_61 $$ template = template.replace("<compile/>", compile.toString())[ FD ]
Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_16 $$ ArrayList<String> libsDirs = new ArrayList<String>()-->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ FD ]
Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_60 $$ template = template.replace("<clean/>", clean.toString())-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_18 $$ for (BuildTarget target : targets) -->Line_19 $$ String buildFile = generateBuildTargetTemplate(config, target)[ FD ]
Line_46 $$ StringBuffer pack = new StringBuffer()-->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ FD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_60 $$ template = template.replace("<clean/>", clean.toString())[ FD ]
Line_60 $$ template = template.replace("<clean/>", clean.toString())-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_44 $$ StringBuffer clean = new StringBuffer()-->Line_60 $$ template = template.replace("<clean/>", clean.toString())[ FD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_51 $$ for (int i = 0; i < libsDirs.size(); i++) [ FD ]
Line_20 $$ FileDescriptor libsDir = new FileDescriptor(getLibsDirectory(config, target))-->Line_22 $$ if (!libsDir.mkdirs())[ FD ]
Line_34 $$ String sharedLibFilename = target.libName-->Line_35 $$ if (sharedLibFilename == null)[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_46 $$ StringBuffer pack = new StringBuffer()[ CD ]
Line_16 $$ ArrayList<String> libsDirs = new ArrayList<String>()-->Line_39 $$ libsDirs.add("../" + libsDir.path().replace('\\', '/'))[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_63 $$ template = template.replace("<pack/>", pack)[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")[ CD ]
Line_44 $$ StringBuffer clean = new StringBuffer()-->Line_48 $$ clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n")[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_12 $$ if (config.jniDir.child("memcpy_wrap.c").exists() == false) [ CD ]
Line_25 $$ String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32") + ".xml"-->Line_32 $$ buildFiles.add(buildFileName)[ FD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_48 $$ clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n")[ FD ]
Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")-->Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")[ FD ]
Line_60 $$ template = template.replace("<clean/>", clean.toString())-->Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")[ FD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_12 $$ if (config.jniDir.child("memcpy_wrap.c").exists() == false) -->Line_13 $$ new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/memcpy_wrap.c", FileType.Classpath).copyTo(config.jniDir.child("memcpy_wrap.c"))[ CD ]
Line_18 $$ for (BuildTarget target : targets) -->Line_20 $$ FileDescriptor libsDir = new FileDescriptor(getLibsDirectory(config, target))[ FD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_35 $$ if (sharedLibFilename == null)-->Line_36 $$ sharedLibFilename = getSharedLibFilename(target.os, target.is64Bit, config.sharedLibName)[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_20 $$ FileDescriptor libsDir = new FileDescriptor(getLibsDirectory(config, target))[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_61 $$ template = template.replace("<compile/>", compile.toString())[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_51 $$ for (int i = 0; i < libsDirs.size(); i++) [ CD ]
Line_30 $$ if (!target.excludeFromMasterBuildFile) -->Line_31 $$ if (target.os != TargetOs.MacOsX && target.os != TargetOs.IOS) [ CD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")[ FD ]
Line_3 $$ if (!config.libsDir.exists()) -->Line_4 $$ if (!config.libsDir.mkdirs())[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) [ CD ]
Line_45 $$ StringBuffer compile = new StringBuffer()-->Line_61 $$ template = template.replace("<compile/>", compile.toString())[ FD ]
Line_16 $$ ArrayList<String> libsDirs = new ArrayList<String>()-->Line_51 $$ for (int i = 0; i < libsDirs.size(); i++) [ FD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_48 $$ clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n")[ CD ]
Line_61 $$ template = template.replace("<compile/>", compile.toString())-->Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")[ FD ]
Line_45 $$ StringBuffer compile = new StringBuffer()-->Line_49 $$ compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n")[ FD ]
Line_62 $$ template = template.replace("%packFile%", "../" + config.libsDir.path().replace('\\', '/') + "/" + config.sharedLibName + "-natives.jar")-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_54 $$ if (config.sharedLibs != null) [ CD ]
Line_15 $$ ArrayList<String> buildFiles = new ArrayList<String>()-->Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) [ FD ]
Line_30 $$ if (!target.excludeFromMasterBuildFile) -->Line_38 $$ if (target.os != TargetOs.Android && target.os != TargetOs.IOS) [ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_16 $$ ArrayList<String> libsDirs = new ArrayList<String>()[ CD ]
Line_60 $$ template = template.replace("<clean/>", clean.toString())-->Line_61 $$ template = template.replace("<compile/>", compile.toString())[ FD ]
Line_34 $$ String sharedLibFilename = target.libName-->Line_37 $$ sharedLibFiles.add(sharedLibFilename)[ FD ]
Line_27 $$ buildFileName = target.buildFileName-->Line_32 $$ buildFiles.add(buildFileName)[ FD ]
Line_17 $$ ArrayList<String> sharedLibFiles = new ArrayList<String>()-->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ FD ]
Line_30 $$ if (!target.excludeFromMasterBuildFile) -->Line_34 $$ String sharedLibFilename = target.libName[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_44 $$ StringBuffer clean = new StringBuffer()[ CD ]
Line_15 $$ ArrayList<String> buildFiles = new ArrayList<String>()-->Line_48 $$ clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n")[ FD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_49 $$ compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n")[ FD ]
Line_20 $$ FileDescriptor libsDir = new FileDescriptor(getLibsDirectory(config, target))-->Line_39 $$ libsDirs.add("../" + libsDir.path().replace('\\', '/'))[ FD ]
Line_63 $$ template = template.replace("<pack/>", pack)-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_51 $$ for (int i = 0; i < libsDirs.size(); i++) -->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_7 $$ if (!config.jniDir.exists()) [ CD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_61 $$ template = template.replace("<compile/>", compile.toString())[ FD ]
Line_46 $$ StringBuffer pack = new StringBuffer()-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_17 $$ ArrayList<String> sharedLibFiles = new ArrayList<String>()-->Line_37 $$ sharedLibFiles.add(sharedLibFilename)[ FD ]
Line_27 $$ buildFileName = target.buildFileName-->Line_29 $$ System.out.println("Wrote target '" + target.os + (target.is64Bit ? "64" : "") + "' build script '" + config.jniDir.child(buildFileName) + "'")[ FD ]
Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")-->Line_60 $$ template = template.replace("<clean/>", clean.toString())[ FD ]
Line_31 $$ if (target.os != TargetOs.MacOsX && target.os != TargetOs.IOS) -->Line_32 $$ buildFiles.add(buildFileName)[ CD ]
Line_36 $$ sharedLibFilename = getSharedLibFilename(target.os, target.is64Bit, config.sharedLibName)-->Line_37 $$ sharedLibFiles.add(sharedLibFilename)[ FD ]
Line_30 $$ if (!target.excludeFromMasterBuildFile) -->Line_35 $$ if (sharedLibFilename == null)[ CD ]
Line_25 $$ String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32") + ".xml"-->Line_27 $$ buildFileName = target.buildFileName[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_65 $$ System.out.println("Wrote master build script '" + config.jniDir.child("build.xml") + "'")[ CD ]
Line_38 $$ if (target.os != TargetOs.Android && target.os != TargetOs.IOS) -->Line_39 $$ libsDirs.add("../" + libsDir.path().replace('\\', '/'))[ CD ]
Line_25 $$ String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32") + ".xml"-->Line_29 $$ System.out.println("Wrote target '" + target.os + (target.is64Bit ? "64" : "") + "' build script '" + config.jniDir.child(buildFileName) + "'")[ FD ]
Line_43 $$ String template = new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build.xml.template", FileType.Classpath).readString()-->Line_59 $$ template = template.replace("%projectName%", config.sharedLibName + "-natives")[ FD ]
Line_19 $$ String buildFile = generateBuildTargetTemplate(config, target)-->Line_28 $$ config.jniDir.child(buildFileName).writeString(buildFile, false)[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_3 $$ if (!config.libsDir.exists()) [ CD ]
Line_61 $$ template = template.replace("<compile/>", compile.toString())-->Line_64 $$ config.jniDir.child("build.xml").writeString(template, false)[ FD ]
Line_21 $$ if (!libsDir.exists()) -->Line_22 $$ if (!libsDir.mkdirs())[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_15 $$ ArrayList<String> buildFiles = new ArrayList<String>()[ CD ]
Line_61 $$ template = template.replace("<compile/>", compile.toString())-->Line_63 $$ template = template.replace("<pack/>", pack)[ FD ]
Line_15 $$ ArrayList<String> buildFiles = new ArrayList<String>()-->Line_49 $$ compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n")[ FD ]
Line_15 $$ ArrayList<String> buildFiles = new ArrayList<String>()-->Line_32 $$ buildFiles.add(buildFileName)[ FD ]
Line_7 $$ if (!config.jniDir.exists()) -->Line_8 $$ if (!config.jniDir.mkdirs())[ CD ]
Line_20 $$ FileDescriptor libsDir = new FileDescriptor(getLibsDirectory(config, target))-->Line_21 $$ if (!libsDir.exists()) [ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_60 $$ template = template.replace("<clean/>", clean.toString())[ CD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ FD ]
Line_26 $$ if (target.buildFileName != null)-->Line_27 $$ buildFileName = target.buildFileName[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_45 $$ StringBuffer compile = new StringBuffer()[ CD ]
Line_30 $$ if (!target.excludeFromMasterBuildFile) -->Line_37 $$ sharedLibFiles.add(sharedLibFilename)[ CD ]
Line_34 $$ String sharedLibFilename = target.libName-->Line_36 $$ sharedLibFilename = getSharedLibFilename(target.os, target.is64Bit, config.sharedLibName)[ FD ]
Line_46 $$ StringBuffer pack = new StringBuffer()-->Line_56 $$ pack.append("\t\t\t<fileset dir=\"" + sharedLib + "\"/>\n")[ FD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_19 $$ String buildFile = generateBuildTargetTemplate(config, target)[ FD ]
Line_47 $$ for (int i = 0; i < buildFiles.size(); i++) -->Line_49 $$ compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n")[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_17 $$ ArrayList<String> sharedLibFiles = new ArrayList<String>()[ CD ]
Line_2 $$ public void generate(BuildConfig config, BuildTarget... targets) -->Line_11 $$ copyJniHeaders(config.jniDir.path())[ CD ]
Line_27 $$ buildFileName = target.buildFileName-->Line_28 $$ config.jniDir.child(buildFileName).writeString(buildFile, false)[ FD ]
Line_51 $$ for (int i = 0; i < libsDirs.size(); i++) -->Line_52 $$ pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\"" + sharedLibFiles.get(i) + "\"/>\n")[ CD ]
Line_25 $$ String buildFileName = "build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32") + ".xml"-->Line_28 $$ config.jniDir.child(buildFileName).writeString(buildFile, false)[ FD ]
