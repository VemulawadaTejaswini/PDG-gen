Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_24 $$ String[] argv = argsList.toArray(new String[argsList.size()])[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_34 $$ int res = ToolRunner.run(conf, client, argv)[ FD ]
Line_24 $$ String[] argv = argsList.toArray(new String[argsList.size()])-->Line_34 $$ int res = ToolRunner.run(conf, client, argv)[ FD ]
Line_9 $$ Configuration conf = null-->Line_34 $$ int res = ToolRunner.run(conf, client, argv)[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_13 $$ argsList.add("-D" + Gridmix.GRIDMIX_USR_RSV + "=" + EchoUserResolver.class.getName())[ FD ]
Line_6 $$ if (!workspace.exists()) -->Line_7 $$ assertTrue(workspace.mkdirs())[ CD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_15 $$ argsList.add("-D" + JobCreator.GRIDMIX_JOB_TYPE + "=" + jobCreatorName)[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_17 $$ if (!defaultOutputPath) [ FD ]
Line_9 $$ Configuration conf = null-->Line_27 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_4 $$ final Path out = GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_41 $$ out.getFileSystem(conf).delete(out, true)[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_9 $$ Configuration conf = null[ CD ]
Line_17 $$ if (!defaultOutputPath) -->Line_18 $$ argsList.add("-D" + Gridmix.GRIDMIX_OUT_DIR + "=" + out)[ CD ]
Line_14 $$ if (jobCreatorName != null) -->Line_15 $$ argsList.add("-D" + JobCreator.GRIDMIX_JOB_TYPE + "=" + jobCreatorName)[ CD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_42 $$ root.getFileSystem(conf).delete(root, true)[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_31 $$ conf.set(MRJobConfig.USER_NAME, ugi.getUserName())[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_40 $$ in.getFileSystem(conf).delete(in, true)[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_3 $$ final Path in = new Path("foo").makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())[ CD ]
Line_25 $$ DebugGridmix client = new DebugGridmix()-->Line_34 $$ int res = ToolRunner.run(conf, client, argv)[ FD ]
Line_5 $$ final Path root = new Path(workspace.getName()).makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_33 $$ GridmixTestUtils.dfs.setPermission(root, new FsPermission((short) 777))[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_4 $$ final Path out = GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())[ CD ]
Line_5 $$ final Path root = new Path(workspace.getName()).makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_42 $$ root.getFileSystem(conf).delete(root, true)[ FD ]
Line_9 $$ Configuration conf = null-->Line_42 $$ root.getFileSystem(conf).delete(root, true)[ FD ]
Line_9 $$ Configuration conf = null-->Line_41 $$ out.getFileSystem(conf).delete(out, true)[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_6 $$ if (!workspace.exists()) [ CD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_22 $$ argsList.add(in.toString())[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_14 $$ if (jobCreatorName != null) [ FD ]
Line_9 $$ Configuration conf = null-->Line_29 $$ conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE, true)[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_28 $$ conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY, policy)[ FD ]
Line_3 $$ final Path in = new Path("foo").makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_40 $$ in.getFileSystem(conf).delete(in, true)[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_41 $$ out.getFileSystem(conf).delete(out, true)[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_23 $$ argsList.add("-")[ FD ]
Line_9 $$ Configuration conf = null-->Line_31 $$ conf.set(MRJobConfig.USER_NAME, ugi.getUserName())[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_29 $$ conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE, true)[ FD ]
Line_2 $$ protected void doSubmission(String jobCreatorName, boolean defaultOutputPath) throws Exception -->Line_5 $$ final Path root = new Path(workspace.getName()).makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())[ CD ]
Line_9 $$ Configuration conf = null-->Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_21 $$ argsList.add(String.valueOf(GENDATA) + "m")[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_18 $$ argsList.add("-D" + Gridmix.GRIDMIX_OUT_DIR + "=" + out)[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_12 $$ argsList.add("-D" + FilePool.GRIDMIX_MIN_FILE + "=0")[ FD ]
Line_11 $$ ArrayList<String> argsList = new ArrayList<String>()-->Line_20 $$ argsList.add("-generate")[ FD ]
Line_25 $$ DebugGridmix client = new DebugGridmix()-->Line_36 $$ client.checkMonitor()[ FD ]
Line_26 $$ conf = GridmixTestUtils.mrvl.getConfig()-->Line_27 $$ CompressionEmulationUtil.setCompressionEmulationEnabled(conf, true)[ FD ]
Line_9 $$ Configuration conf = null-->Line_28 $$ conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY, policy)[ FD ]
Line_30 $$ UserGroupInformation ugi = UserGroupInformation.getLoginUser()-->Line_31 $$ conf.set(MRJobConfig.USER_NAME, ugi.getUserName())[ FD ]
Line_9 $$ Configuration conf = null-->Line_40 $$ in.getFileSystem(conf).delete(in, true)[ FD ]
Line_34 $$ int res = ToolRunner.run(conf, client, argv)-->Line_35 $$ assertEquals("Client exited with nonzero status", 0, res)[ FD ]
Line_5 $$ final Path root = new Path(workspace.getName()).makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_32 $$ GridmixTestUtils.dfs.mkdirs(root, new FsPermission((short) 777))[ FD ]
Line_3 $$ final Path in = new Path("foo").makeQualified(GridmixTestUtils.dfs.getUri(), GridmixTestUtils.dfs.getWorkingDirectory())-->Line_22 $$ argsList.add(in.toString())[ FD ]
