Line_6 $$ Collection<MapInfo> selection = myDirectoryMappingTable.getSelection()-->Line_8 $$ Collection<MapInfo> removedValidRoots = ContainerUtil.mapNotNull(selection, new Function<MapInfo, MapInfo>() [ FD ]
Line_16 $$ if (mappings.size() > 0) -->Line_20 $$ myDirectoryMappingTable.getSelectionModel().setSelectionInterval(index, index)[ CD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_7 $$ mappings.removeAll(selection)[ FD ]
Line_16 $$ if (mappings.size() > 0) -->Line_17 $$ if (index >= mappings.size()) [ CD ]
Line_2 $$ private void removeMapping() -->Line_5 $$ int index = myDirectoryMappingTable.getSelectionModel().getMinSelectionIndex()[ CD ]
Line_2 $$ private void removeMapping() -->Line_15 $$ myModel.setItems(mappings)[ CD ]
Line_2 $$ private void removeMapping() -->Line_7 $$ mappings.removeAll(selection)[ CD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_14 $$ sortAndAddSeparatorIfNeeded(mappings)[ FD ]
Line_6 $$ Collection<MapInfo> selection = myDirectoryMappingTable.getSelection()-->Line_7 $$ mappings.removeAll(selection)[ FD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_13 $$ mappings.addAll(removedValidRoots)[ FD ]
Line_2 $$ private void removeMapping() -->Line_6 $$ Collection<MapInfo> selection = myDirectoryMappingTable.getSelection()[ CD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_16 $$ if (mappings.size() > 0) [ FD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_18 $$ index = mappings.size() - 1[ FD ]
Line_5 $$ int index = myDirectoryMappingTable.getSelectionModel().getMinSelectionIndex()-->Line_17 $$ if (index >= mappings.size()) [ FD ]
Line_8 $$ Collection<MapInfo> removedValidRoots = ContainerUtil.mapNotNull(selection, new Function<MapInfo, MapInfo>() -->Line_10 $$ return info.type == MapInfo.Type.NORMAL && myCheckers.get(info.mapping.getVcs()) != null ? MapInfo.unregistered(info.mapping.getDirectory(), info.mapping.getVcs()) : null[ CD ]
Line_5 $$ int index = myDirectoryMappingTable.getSelectionModel().getMinSelectionIndex()-->Line_20 $$ myDirectoryMappingTable.getSelectionModel().setSelectionInterval(index, index)[ FD ]
Line_8 $$ Collection<MapInfo> removedValidRoots = ContainerUtil.mapNotNull(selection, new Function<MapInfo, MapInfo>() -->Line_13 $$ mappings.addAll(removedValidRoots)[ FD ]
Line_2 $$ private void removeMapping() -->Line_16 $$ if (mappings.size() > 0) [ CD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_15 $$ myModel.setItems(mappings)[ FD ]
Line_2 $$ private void removeMapping() -->Line_8 $$ Collection<MapInfo> removedValidRoots = ContainerUtil.mapNotNull(selection, new Function<MapInfo, MapInfo>() [ CD ]
Line_2 $$ private void removeMapping() -->Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())[ CD ]
Line_2 $$ private void removeMapping() -->Line_14 $$ sortAndAddSeparatorIfNeeded(mappings)[ CD ]
Line_2 $$ private void removeMapping() -->Line_22 $$ checkNotifyListeners(activeVcses)[ CD ]
Line_3 $$ Collection<AbstractVcs> activeVcses = getActiveVcses()-->Line_22 $$ checkNotifyListeners(activeVcses)[ FD ]
Line_4 $$ ArrayList<MapInfo> mappings = new ArrayList<MapInfo>(myModel.getItems())-->Line_17 $$ if (index >= mappings.size()) [ FD ]
Line_2 $$ private void removeMapping() -->Line_13 $$ mappings.addAll(removedValidRoots)[ CD ]
Line_2 $$ private void removeMapping() -->Line_3 $$ Collection<AbstractVcs> activeVcses = getActiveVcses()[ CD ]
