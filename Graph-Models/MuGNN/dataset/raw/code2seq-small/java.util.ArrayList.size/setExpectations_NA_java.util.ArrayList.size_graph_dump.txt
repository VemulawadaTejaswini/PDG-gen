Line_2 $$ public void setExpectations(Expectations expectations) -->Line_12 $$ expectations.allowing(mock).exists()[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_13 $$ expectations.will(expectations.returnValue(true))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_14 $$ expectations.allowing(mock).lastModified()[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_15 $$ expectations.will(expectations.returnValue(1L))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_4 $$ expectations.allowing(mock).getCanonicalFile()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_8 $$ expectations.allowing(mock).isFile()[ CD ]
Line_19 $$ for (MockFile child : children) -->Line_20 $$ mockChildren.add(child.getMock())[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_24 $$ expectations.will(expectations.returnValue(mockChildren.toArray(new File[mockChildren.size()])))[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_11 $$ expectations.will(expectations.returnValue(name))[ CD ]
Line_19 $$ for (MockFile child : children) -->Line_21 $$ child.setExpectations(expectations)[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_16 $$ expectations.allowing(mock).length()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_18 $$ ArrayList<File> mockChildren = new ArrayList<File>(children.size())[ CD ]
Line_18 $$ ArrayList<File> mockChildren = new ArrayList<File>(children.size())-->Line_24 $$ expectations.will(expectations.returnValue(mockChildren.toArray(new File[mockChildren.size()])))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_17 $$ expectations.will(expectations.returnValue(1L))[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_23 $$ expectations.allowing(mock).listFiles()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_14 $$ expectations.allowing(mock).lastModified()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_16 $$ expectations.allowing(mock).length()[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_9 $$ expectations.will(expectations.returnValue(isFile))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_15 $$ expectations.will(expectations.returnValue(1L))[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_10 $$ expectations.allowing(mock).getName()[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_17 $$ expectations.will(expectations.returnValue(1L))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_23 $$ expectations.allowing(mock).listFiles()[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_11 $$ expectations.will(expectations.returnValue(name))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_24 $$ expectations.will(expectations.returnValue(mockChildren.toArray(new File[mockChildren.size()])))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_12 $$ expectations.allowing(mock).exists()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_9 $$ expectations.will(expectations.returnValue(isFile))[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_10 $$ expectations.allowing(mock).getName()[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_13 $$ expectations.will(expectations.returnValue(true))[ CD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_5 $$ expectations.will(expectations.returnValue(mock))[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_8 $$ expectations.allowing(mock).isFile()[ FD ]
Line_18 $$ ArrayList<File> mockChildren = new ArrayList<File>(children.size())-->Line_20 $$ mockChildren.add(child.getMock())[ FD ]
Line_2 $$ public void setExpectations(Expectations expectations) -->Line_21 $$ child.setExpectations(expectations)[ FD ]
