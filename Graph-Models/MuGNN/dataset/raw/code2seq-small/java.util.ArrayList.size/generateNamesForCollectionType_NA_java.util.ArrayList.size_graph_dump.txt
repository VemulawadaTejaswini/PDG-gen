Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))-->Line_25 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))-->Line_21 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_14 $$ PsiClass psiClass = classType.resolve()-->Line_15 $$ if (psiClass == null)[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_12 $$ if (componentType instanceof PsiClassType) [ CD ]
Line_12 $$ if (componentType instanceof PsiClassType) -->Line_15 $$ if (psiClass == null)[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_9 $$ String collectionName = clazz.getName()[ CD ]
Line_24 $$ candidateName = collectionName.toLowerCase() + "Of" + fromUpperLetter(candidateName)-->Line_25 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_17 $$ componentName = psiClass.getName()-->Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))[ FD ]
Line_11 $$ String componentName = cleanTypeName(componentType.getPresentableText())-->Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_6 $$ PsiClass clazz = ((PsiClassType) type).resolve()[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_21 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))-->Line_23 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_7 $$ if (clazz == null)[ CD ]
Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))-->Line_22 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_3 $$ PsiType componentType = getCollectionComponentType(type, validator.getProject())[ CD ]
Line_23 $$ candidateName = camelizedName.get(camelizedName.size() - 1)-->Line_25 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_9 $$ String collectionName = clazz.getName()-->Line_24 $$ candidateName = collectionName.toLowerCase() + "Of" + fromUpperLetter(candidateName)[ FD ]
Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))-->Line_24 $$ candidateName = collectionName.toLowerCase() + "Of" + fromUpperLetter(candidateName)[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_23 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ CD ]
Line_4 $$ if (!(type instanceof PsiClassType) || componentType == null)-->Line_5 $$ return[ CD ]
Line_7 $$ if (clazz == null)-->Line_8 $$ return[ CD ]
Line_3 $$ PsiType componentType = getCollectionComponentType(type, validator.getProject())-->Line_11 $$ String componentName = cleanTypeName(componentType.getPresentableText())[ FD ]
Line_12 $$ if (componentType instanceof PsiClassType) -->Line_17 $$ componentName = psiClass.getName()[ CD ]
Line_14 $$ PsiClass psiClass = classType.resolve()-->Line_17 $$ componentName = psiClass.getName()[ FD ]
Line_6 $$ PsiClass clazz = ((PsiClassType) type).resolve()-->Line_9 $$ String collectionName = clazz.getName()[ FD ]
Line_22 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)-->Line_23 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_25 $$ possibleNames.add(validator.validateName(candidateName, true))[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_3 $$ PsiType componentType = getCollectionComponentType(type, validator.getProject())[ FD ]
Line_6 $$ PsiClass clazz = ((PsiClassType) type).resolve()-->Line_7 $$ if (clazz == null)[ FD ]
Line_3 $$ PsiType componentType = getCollectionComponentType(type, validator.getProject())-->Line_12 $$ if (componentType instanceof PsiClassType) [ FD ]
Line_13 $$ PsiClassType classType = (PsiClassType) componentType-->Line_14 $$ PsiClass psiClass = classType.resolve()[ FD ]
Line_11 $$ String componentName = cleanTypeName(componentType.getPresentableText())-->Line_17 $$ componentName = psiClass.getName()[ FD ]
Line_12 $$ if (componentType instanceof PsiClassType) -->Line_14 $$ PsiClass psiClass = classType.resolve()[ CD ]
Line_12 $$ if (componentType instanceof PsiClassType) -->Line_13 $$ PsiClassType classType = (PsiClassType) componentType[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_22 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_20 $$ String candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(componentName))[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_11 $$ String componentName = cleanTypeName(componentType.getPresentableText())[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_24 $$ candidateName = collectionName.toLowerCase() + "Of" + fromUpperLetter(candidateName)[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_25 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_4 $$ if (!(type instanceof PsiClassType) || componentType == null)[ CD ]
Line_15 $$ if (psiClass == null)-->Line_16 $$ return[ CD ]
Line_2 $$ private static void generateNamesForCollectionType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_21 $$ generateCamelNames(possibleNames, validator, candidateName)[ CD ]
Line_23 $$ candidateName = camelizedName.get(camelizedName.size() - 1)-->Line_24 $$ candidateName = collectionName.toLowerCase() + "Of" + fromUpperLetter(candidateName)[ FD ]
