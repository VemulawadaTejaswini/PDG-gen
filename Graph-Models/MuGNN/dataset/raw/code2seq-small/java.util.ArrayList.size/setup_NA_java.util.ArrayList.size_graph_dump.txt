Line_8 $$ final ArrayList<OneLineComponent> components = new ArrayList<OneLineComponent>()-->Line_42 $$ myOneLineComponents = components.toArray(new OneLineComponent[components.size()])[ FD ]
Line_38 $$ final OneLineComponent component = new OneLineComponent()-->Line_40 $$ add(component, new GridBagConstraints(0, index, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0))[ FD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_23 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.STRIKEOUT)) [ CD ]
Line_20 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.DISABLE)) -->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ CD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_41 $$ components.add(component)[ FD ]
Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)-->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_35 $$ components.add(component)[ CD ]
Line_15 $$ line += texts[i]-->Line_27 $$ if (line.length() >= 50) [ FD ]
Line_10 $$ String line = ""-->Line_34 $$ line = ""[ FD ]
Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)-->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_5 $$ setBackground(background)[ CD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_15 $$ line += texts[i][ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder()-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_38 $$ final OneLineComponent component = new OneLineComponent()-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_15 $$ line += texts[i]-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_34 $$ line = ""-->Line_27 $$ if (line.length() >= 50) [ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_3 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_27 $$ if (line.length() >= 50) -->Line_34 $$ line = ""[ CD ]
Line_38 $$ final OneLineComponent component = new OneLineComponent()-->Line_41 $$ components.add(component)[ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_32 $$ flagsMap.clear()[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_4 $$ removeAll()[ CD ]
Line_26 $$ curOffset += paramText.length()-->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ FD ]
Line_15 $$ line += texts[i]-->Line_34 $$ line = ""[ FD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_43 $$ return buf.toString()[ CD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_16 $$ final EnumSet<ParameterInfoUIContextEx.Flag> flag = flags[i][ CD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ CD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_27 $$ if (line.length() >= 50) [ CD ]
Line_26 $$ curOffset += paramText.length()-->Line_33 $$ curOffset = 0[ FD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_32 $$ flagsMap.clear()[ FD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_17 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.HIGHLIGHT)) [ CD ]
Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)-->Line_13 $$ if (paramText == null)[ FD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_40 $$ add(component, new GridBagConstraints(0, index, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0))[ FD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_13 $$ if (paramText == null)[ CD ]
Line_26 $$ curOffset += paramText.length()-->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ FD ]
Line_10 $$ String line = ""-->Line_15 $$ line += texts[i][ FD ]
Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)-->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ FD ]
Line_33 $$ curOffset = 0-->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ FD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ FD ]
Line_10 $$ String line = ""-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_8 $$ final ArrayList<OneLineComponent> components = new ArrayList<OneLineComponent>()-->Line_35 $$ components.add(component)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)[ CD ]
Line_17 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.HIGHLIGHT)) -->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ CD ]
Line_8 $$ final ArrayList<OneLineComponent> components = new ArrayList<OneLineComponent>()-->Line_41 $$ components.add(component)[ FD ]
Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)-->Line_26 $$ curOffset += paramText.length()[ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_30 $$ add(component, new GridBagConstraints(0, index, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0))[ CD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_40 $$ add(component, new GridBagConstraints(0, index, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0))[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_6 $$ int index = 0-->Line_31 $$ index += 1[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_11 $$ for (int i = 0; i < texts.length; i++) [ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_10 $$ String line = ""[ CD ]
Line_9 $$ Map<TextRange, ParameterInfoUIContextEx.Flag> flagsMap = new TreeMap<TextRange, ParameterInfoUIContextEx.Flag>(TEXT_RANGE_COMPARATOR)-->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ FD ]
Line_33 $$ curOffset = 0-->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ FD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_26 $$ curOffset += paramText.length()[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_42 $$ myOneLineComponents = components.toArray(new OneLineComponent[components.size()])[ CD ]
Line_10 $$ String line = ""-->Line_27 $$ if (line.length() >= 50) [ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_31 $$ index += 1[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_38 $$ final OneLineComponent component = new OneLineComponent()[ CD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_20 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.DISABLE)) [ CD ]
Line_16 $$ final EnumSet<ParameterInfoUIContextEx.Flag> flag = flags[i]-->Line_23 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.STRIKEOUT)) [ FD ]
Line_11 $$ for (int i = 0; i < texts.length; i++) -->Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_7 $$ int curOffset = 0-->Line_33 $$ curOffset = 0[ FD ]
Line_10 $$ String line = ""-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_41 $$ components.add(component)[ CD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_8 $$ final ArrayList<OneLineComponent> components = new ArrayList<OneLineComponent>()[ CD ]
Line_34 $$ line = ""-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_26 $$ curOffset += paramText.length()-->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_12 $$ String paramText = escapeString(texts[i], escapeFunction)[ FD ]
Line_34 $$ line = ""-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_7 $$ int curOffset = 0-->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ FD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_30 $$ add(component, new GridBagConstraints(0, index, 1, 1, 1, 0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0))[ FD ]
Line_28 $$ final OneLineComponent component = new OneLineComponent()-->Line_35 $$ components.add(component)[ FD ]
Line_7 $$ int curOffset = 0-->Line_26 $$ curOffset += paramText.length()[ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_33 $$ curOffset = 0[ CD ]
Line_7 $$ int curOffset = 0-->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_6 $$ int index = 0[ CD ]
Line_3 $$ StringBuilder buf = new StringBuilder()-->Line_39 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_27 $$ if (line.length() >= 50) -->Line_28 $$ final OneLineComponent component = new OneLineComponent()[ CD ]
Line_15 $$ line += texts[i]-->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ FD ]
Line_16 $$ final EnumSet<ParameterInfoUIContextEx.Flag> flag = flags[i]-->Line_17 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.HIGHLIGHT)) [ FD ]
Line_33 $$ curOffset = 0-->Line_21 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.DISABLE)[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_5 $$ setBackground(background)[ FD ]
Line_23 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.STRIKEOUT)) -->Line_24 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.STRIKEOUT)[ CD ]
Line_27 $$ if (line.length() >= 50) -->Line_29 $$ buf.append(component.setup(escapeString(line, escapeFunction), flagsMap, background))[ CD ]
Line_16 $$ final EnumSet<ParameterInfoUIContextEx.Flag> flag = flags[i]-->Line_20 $$ if (flag.contains(ParameterInfoUIContextEx.Flag.DISABLE)) [ FD ]
Line_7 $$ int curOffset = 0-->Line_18 $$ flagsMap.put(TextRange.create(curOffset, curOffset + paramText.trim().length()), ParameterInfoUIContextEx.Flag.HIGHLIGHT)[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder()-->Line_43 $$ return buf.toString()[ FD ]
Line_2 $$ public String setup(final String[] texts, Function<String, String> escapeFunction, final EnumSet<ParameterInfoUIContextEx.Flag>[] flags, final Color background) -->Line_7 $$ int curOffset = 0[ CD ]
