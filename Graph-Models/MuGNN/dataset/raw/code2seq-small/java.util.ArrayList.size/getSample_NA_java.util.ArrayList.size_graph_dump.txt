Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_11 $$ InputSplit tmp = splits.get(i)[ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_12 $$ int j = r.nextInt(splits.size())[ CD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_20 $$ while (reader.nextKeyValue()) [ CD ]
Line_20 $$ while (reader.nextKeyValue()) -->Line_21 $$ if (r.nextDouble() <= freq) [ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_12 $$ int j = r.nextInt(splits.size())[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_7 $$ long seed = r.nextLong()[ CD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_3 $$ List<InputSplit> splits = inf.getSplits(job)[ CD ]
Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_27 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_6 $$ Random r = new Random()-->Line_25 $$ int ind = r.nextInt(numSamples)[ FD ]
Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_27 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) [ CD ]
Line_6 $$ Random r = new Random()-->Line_21 $$ if (r.nextDouble() <= freq) [ FD ]
Line_21 $$ if (r.nextDouble() <= freq) -->Line_22 $$ if (samples.size() < numSamples) [ CD ]
Line_12 $$ int j = r.nextInt(splits.size())-->Line_14 $$ splits.set(j, tmp)[ FD ]
Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_23 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_35 $$ return (K[]) samples.toArray()[ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_5 $$ int splitsToSample = Math.min(maxSplitsSampled, splits.size())[ CD ]
Line_7 $$ long seed = r.nextLong()-->Line_8 $$ r.setSeed(seed)[ FD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) [ FD ]
Line_25 $$ int ind = r.nextInt(numSamples)-->Line_27 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_27 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_33 $$ reader.close()[ FD ]
Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_23 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_26 $$ if (ind != numSamples) -->Line_27 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_10 $$ for (int i = 0; i < splits.size(); ++i) [ FD ]
Line_22 $$ if (samples.size() < numSamples) -->Line_26 $$ if (ind != numSamples) [ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_13 $$ splits.set(i, splits.get(j))[ FD ]
Line_6 $$ Random r = new Random()-->Line_7 $$ long seed = r.nextLong()[ FD ]
Line_22 $$ if (samples.size() < numSamples) -->Line_25 $$ int ind = r.nextInt(numSamples)[ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_5 $$ int splitsToSample = Math.min(maxSplitsSampled, splits.size())[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_9 $$ LOG.debug("seed: " + seed)[ CD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_3 $$ List<InputSplit> splits = inf.getSplits(job)[ FD ]
Line_17 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_17 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_22 $$ if (samples.size() < numSamples) [ FD ]
Line_6 $$ Random r = new Random()-->Line_12 $$ int j = r.nextInt(splits.size())[ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_13 $$ splits.set(i, splits.get(j))[ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_14 $$ splits.set(j, tmp)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_35 $$ return (K[]) samples.toArray()[ CD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) [ FD ]
Line_22 $$ if (samples.size() < numSamples) -->Line_23 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ CD ]
Line_11 $$ InputSplit tmp = splits.get(i)-->Line_14 $$ splits.set(j, tmp)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_17 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_10 $$ for (int i = 0; i < splits.size(); ++i) [ CD ]
Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_8 $$ r.setSeed(seed)[ CD ]
Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) [ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_14 $$ splits.set(j, tmp)[ CD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_3 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_11 $$ InputSplit tmp = splits.get(i)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_4 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)[ CD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_6 $$ Random r = new Random()[ CD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_13 $$ splits.set(i, splits.get(j))[ FD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_17 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())[ CD ]
Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_20 $$ while (reader.nextKeyValue()) [ FD ]
Line_25 $$ int ind = r.nextInt(numSamples)-->Line_26 $$ if (ind != numSamples) [ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_11 $$ InputSplit tmp = splits.get(i)[ CD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_33 $$ reader.close()[ CD ]
Line_6 $$ Random r = new Random()-->Line_8 $$ r.setSeed(seed)[ FD ]
Line_2 $$ public K[] getSample(InputFormat<K, V> inf, Job job) throws IOException, InterruptedException -->Line_23 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_10 $$ for (int i = 0; i < splits.size(); ++i) -->Line_19 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_16 $$ for (int i = 0; i < splitsToSample || (i < splits.size() && samples.size() < numSamples); ++i) -->Line_18 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ CD ]
Line_12 $$ int j = r.nextInt(splits.size())-->Line_13 $$ splits.set(i, splits.get(j))[ FD ]
