Line_3 $$ final AbstractProjectViewPane viewPane = getCurrentProjectViewPane()-->Line_6 $$ final Object[] elements = viewPane.getSelectedElements()[ FD ]
Line_23 $$ if (module != null)-->Line_24 $$ result.add(module)[ CD ]
Line_10 $$ final Module module = (Module) element-->Line_11 $$ if (!module.isDisposed()) [ FD ]
Line_2 $$ private Module[] getSelectedModules() -->Line_3 $$ final AbstractProjectViewPane viewPane = getCurrentProjectViewPane()[ CD ]
Line_21 $$ if (element instanceof VirtualFile) -->Line_22 $$ Module module = moduleBySingleContentRoot((VirtualFile) element)[ CD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_12 $$ result.add(module)[ FD ]
Line_27 $$ if (result.isEmpty()) -->Line_28 $$ return null[ CD ]
Line_10 $$ final Module module = (Module) element-->Line_24 $$ result.add(module)[ FD ]
Line_10 $$ final Module module = (Module) element-->Line_19 $$ if (module != null)[ FD ]
Line_9 $$ if (element instanceof Module) -->Line_14 $$ if (element instanceof ModuleGroup) [ CD ]
Line_3 $$ final AbstractProjectViewPane viewPane = getCurrentProjectViewPane()-->Line_4 $$ if (viewPane == null)[ FD ]
Line_17 $$ if (element instanceof PsiDirectory) -->Line_18 $$ Module module = moduleBySingleContentRoot(((PsiDirectory) element).getVirtualFile())[ CD ]
Line_10 $$ final Module module = (Module) element-->Line_20 $$ result.add(module)[ FD ]
Line_2 $$ private Module[] getSelectedModules() -->Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()[ CD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_30 $$ return result.toArray(new Module[result.size()])[ FD ]
Line_15 $$ Collection<Module> modules = ((ModuleGroup) element).modulesInGroup(myProject, true)-->Line_16 $$ result.addAll(modules)[ FD ]
Line_9 $$ if (element instanceof Module) -->Line_10 $$ final Module module = (Module) element[ CD ]
Line_9 $$ if (element instanceof Module) -->Line_11 $$ if (!module.isDisposed()) [ CD ]
Line_14 $$ if (element instanceof ModuleGroup) -->Line_15 $$ Collection<Module> modules = ((ModuleGroup) element).modulesInGroup(myProject, true)[ CD ]
Line_14 $$ if (element instanceof ModuleGroup) -->Line_17 $$ if (element instanceof PsiDirectory) [ CD ]
Line_8 $$ for (Object element : elements) -->Line_9 $$ if (element instanceof Module) [ FD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_27 $$ if (result.isEmpty()) [ FD ]
Line_8 $$ for (Object element : elements) -->Line_21 $$ if (element instanceof VirtualFile) [ FD ]
Line_19 $$ if (module != null)-->Line_20 $$ result.add(module)[ CD ]
Line_2 $$ private Module[] getSelectedModules() -->Line_4 $$ if (viewPane == null)[ CD ]
Line_21 $$ if (element instanceof VirtualFile) -->Line_23 $$ if (module != null)[ CD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_24 $$ result.add(module)[ FD ]
Line_11 $$ if (!module.isDisposed()) -->Line_12 $$ result.add(module)[ CD ]
Line_2 $$ private Module[] getSelectedModules() -->Line_6 $$ final Object[] elements = viewPane.getSelectedElements()[ CD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_20 $$ result.add(module)[ FD ]
Line_10 $$ final Module module = (Module) element-->Line_12 $$ result.add(module)[ FD ]
Line_8 $$ for (Object element : elements) -->Line_17 $$ if (element instanceof PsiDirectory) [ FD ]
Line_17 $$ if (element instanceof PsiDirectory) -->Line_19 $$ if (module != null)[ CD ]
Line_8 $$ for (Object element : elements) -->Line_14 $$ if (element instanceof ModuleGroup) [ FD ]
Line_2 $$ private Module[] getSelectedModules() -->Line_27 $$ if (result.isEmpty()) [ CD ]
Line_4 $$ if (viewPane == null)-->Line_5 $$ return null[ CD ]
Line_17 $$ if (element instanceof PsiDirectory) -->Line_21 $$ if (element instanceof VirtualFile) [ CD ]
Line_10 $$ final Module module = (Module) element-->Line_23 $$ if (module != null)[ FD ]
Line_14 $$ if (element instanceof ModuleGroup) -->Line_16 $$ result.addAll(modules)[ CD ]
Line_27 $$ if (result.isEmpty()) -->Line_30 $$ return result.toArray(new Module[result.size()])[ CD ]
Line_7 $$ ArrayList<Module> result = new ArrayList<Module>()-->Line_16 $$ result.addAll(modules)[ FD ]
