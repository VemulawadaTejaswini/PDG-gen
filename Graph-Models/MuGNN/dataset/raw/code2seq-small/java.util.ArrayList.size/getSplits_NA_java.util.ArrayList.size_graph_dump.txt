Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_6 $$ LongWritable key = new LongWritable()[ CD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_5 $$ ArrayList<IndirectSplit> splits = new ArrayList<IndirectSplit>(numSplits)[ CD ]
Line_7 $$ Text value = new Text()-->Line_8 $$ for (SequenceFile.Reader sl = new SequenceFile.Reader(fs, src, job); sl.next(key, value); ) [ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_3 $$ Path src = new Path(job.get(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.INDIRECT_INPUT_FILE, null))[ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_3 $$ Path src = new Path(job.get(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.INDIRECT_INPUT_FILE, null))[ CD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_4 $$ FileSystem fs = src.getFileSystem(job)[ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_7 $$ Text value = new Text()[ CD ]
Line_6 $$ LongWritable key = new LongWritable()-->Line_8 $$ for (SequenceFile.Reader sl = new SequenceFile.Reader(fs, src, job); sl.next(key, value); ) [ FD ]
Line_5 $$ ArrayList<IndirectSplit> splits = new ArrayList<IndirectSplit>(numSplits)-->Line_9 $$ splits.add(new IndirectSplit(new Path(value.toString()), key.get()))[ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_8 $$ for (SequenceFile.Reader sl = new SequenceFile.Reader(fs, src, job); sl.next(key, value); ) [ CD ]
Line_5 $$ ArrayList<IndirectSplit> splits = new ArrayList<IndirectSplit>(numSplits)-->Line_11 $$ return splits.toArray(new IndirectSplit[splits.size()])[ FD ]
Line_6 $$ LongWritable key = new LongWritable()-->Line_9 $$ splits.add(new IndirectSplit(new Path(value.toString()), key.get()))[ FD ]
Line_3 $$ Path src = new Path(job.get(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.INDIRECT_INPUT_FILE, null))-->Line_4 $$ FileSystem fs = src.getFileSystem(job)[ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_11 $$ return splits.toArray(new IndirectSplit[splits.size()])[ CD ]
Line_8 $$ for (SequenceFile.Reader sl = new SequenceFile.Reader(fs, src, job); sl.next(key, value); ) -->Line_9 $$ splits.add(new IndirectSplit(new Path(value.toString()), key.get()))[ CD ]
Line_7 $$ Text value = new Text()-->Line_9 $$ splits.add(new IndirectSplit(new Path(value.toString()), key.get()))[ FD ]
Line_2 $$ public InputSplit[] getSplits(JobConf job, int numSplits) throws IOException -->Line_4 $$ FileSystem fs = src.getFileSystem(job)[ CD ]
