Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) [ CD ]
Line_12 $$ final DiscoveryNode pendingMasterNode = pendingState.nodes().masterNode()-->Line_19 $$ logger.trace("removing non-committed state with uuid[[ FD ]
Line_6 $$ final DiscoveryNode currentMaster = state.nodes().masterNode()-->Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) [ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_3 $$ if (findState(state.stateUUID()) == null) [ CD ]
Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) -->Line_24 $$ pendingContext.listener.onNewClusterStateProcessed()[ CD ]
Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_11 $$ final ClusterState pendingState = pendingContext.state[ CD ]
Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) -->Line_23 $$ contextsToRemove.add(pendingContext)[ CD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_6 $$ final DiscoveryNode currentMaster = state.nodes().masterNode()[ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_8 $$ ArrayList<ClusterStateContext> contextsToRemove = new ArrayList()[ CD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) [ FD ]
Line_15 $$ if (pendingContext.committed()) -->Line_19 $$ logger.trace("removing non-committed state with uuid[[ CD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_25 $$ if (pendingState.stateUUID().equals(state.stateUUID())) [ FD ]
Line_8 $$ ArrayList<ClusterStateContext> contextsToRemove = new ArrayList()-->Line_27 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)[ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) [ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) [ CD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_31 $$ pendingStates.removeAll(contextsToRemove)[ CD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_16 $$ logger.warn("received a cluster state (uuid[[ FD ]
Line_6 $$ final DiscoveryNode currentMaster = state.nodes().masterNode()-->Line_16 $$ logger.warn("received a cluster state (uuid[[ FD ]
Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) -->Line_14 $$ contextsToRemove.add(pendingContext)[ CD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_14 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_4 $$ throw new IllegalStateException("can't resolve processed cluster state with uuid [" + state.stateUUID() + "], version [" + state.version() + "]")[ FD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) [ FD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_22 $$ logger.trace("processing pending state uuid[[ FD ]
Line_8 $$ ArrayList<ClusterStateContext> contextsToRemove = new ArrayList()-->Line_31 $$ pendingStates.removeAll(contextsToRemove)[ FD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_15 $$ if (pendingContext.committed()) [ FD ]
Line_12 $$ final DiscoveryNode pendingMasterNode = pendingState.nodes().masterNode()-->Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) [ FD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_23 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_25 $$ if (pendingState.stateUUID().equals(state.stateUUID())) [ FD ]
Line_8 $$ ArrayList<ClusterStateContext> contextsToRemove = new ArrayList()-->Line_14 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_12 $$ final DiscoveryNode pendingMasterNode = pendingState.nodes().masterNode()-->Line_16 $$ logger.warn("received a cluster state (uuid[[ FD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_27 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_25 $$ if (pendingState.stateUUID().equals(state.stateUUID())) -->Line_27 $$ contextsToRemove.add(pendingContext)[ CD ]
Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) -->Line_22 $$ logger.trace("processing pending state uuid[[ CD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_19 $$ logger.trace("removing non-committed state with uuid[[ FD ]
Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_12 $$ final DiscoveryNode pendingMasterNode = pendingState.nodes().masterNode()[ CD ]
Line_6 $$ final DiscoveryNode currentMaster = state.nodes().masterNode()-->Line_19 $$ logger.trace("removing non-committed state with uuid[[ FD ]
Line_8 $$ ArrayList<ClusterStateContext> contextsToRemove = new ArrayList()-->Line_23 $$ contextsToRemove.add(pendingContext)[ FD ]
Line_25 $$ if (pendingState.stateUUID().equals(state.stateUUID())) -->Line_28 $$ pendingContext.listener.onNewClusterStateProcessed()[ CD ]
Line_9 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)[ CD ]
Line_15 $$ if (pendingContext.committed()) -->Line_17 $$ pendingContext.listener.onNewClusterStateFailed(new IllegalStateException("cluster state from a different master than the current one, rejecting (received " + pendingMasterNode + ", current " + currentMaster + ")"))[ CD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_22 $$ logger.trace("processing pending state uuid[[ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_6 $$ final DiscoveryNode currentMaster = state.nodes().masterNode()[ CD ]
Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) -->Line_25 $$ if (pendingState.stateUUID().equals(state.stateUUID())) [ CD ]
Line_10 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_26 $$ assert pendingContext.committed() : "processed cluster state is not committed " + state[ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_3 $$ if (findState(state.stateUUID()) == null) [ FD ]
Line_2 $$ public synchronized void markAsProcessed(ClusterState state) -->Line_32 $$ assert findState(state.stateUUID()) == null : "state was marked as processed but can still be found in pending list " + state[ FD ]
Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) -->Line_15 $$ if (pendingContext.committed()) [ CD ]
Line_11 $$ final ClusterState pendingState = pendingContext.state-->Line_12 $$ final DiscoveryNode pendingMasterNode = pendingState.nodes().masterNode()[ FD ]
Line_13 $$ if (Objects.equals(currentMaster, pendingMasterNode) == false) -->Line_21 $$ if (state.supersedes(pendingState) && pendingContext.committed()) [ CD ]
Line_15 $$ if (pendingContext.committed()) -->Line_16 $$ logger.warn("received a cluster state (uuid[[ CD ]
