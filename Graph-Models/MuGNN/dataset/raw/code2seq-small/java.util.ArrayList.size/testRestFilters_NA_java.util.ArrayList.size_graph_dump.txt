Line_16 $$ Collections.sort(restFiltersByOrder, new Comparator<RestFilter>() -->Line_18 $$ return Integer.compare(o1.order(), o2.order())[ CD ]
Line_11 $$ TestFilter testFilter = new TestFilter(order, randomFrom(Operation.values()))-->Line_58 $$ assertThat(testFilter, equalTo(expectedRestFilters.get(i)))[ FD ]
Line_11 $$ TestFilter testFilter = new TestFilter(order, randomFrom(Operation.values()))-->Line_24 $$ expectedRestFilters.add(testFilter)[ FD ]
Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_57 $$ TestFilter testFilter = finalTestFilters.get(i)[ CD ]
Line_11 $$ TestFilter testFilter = new TestFilter(order, randomFrom(Operation.values()))-->Line_50 $$ finalTestFilters.add(testFilter)[ FD ]
Line_4 $$ int numFilters = randomInt(10)-->Line_6 $$ while (orders.size() < numFilters) [ FD ]
Line_6 $$ while (orders.size() < numFilters) -->Line_7 $$ orders.add(randomInt(10))[ CD ]
Line_57 $$ TestFilter testFilter = finalTestFilters.get(i)-->Line_58 $$ assertThat(testFilter, equalTo(expectedRestFilters.get(i)))[ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_9 $$ List<RestFilter> filters = new ArrayList()[ CD ]
Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_58 $$ assertThat(testFilter, equalTo(expectedRestFilters.get(i)))[ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_3 $$ RestController restController = new RestController(Settings.EMPTY)[ CD ]
Line_3 $$ RestController restController = new RestController(Settings.EMPTY)-->Line_36 $$ restController.dispatchRequest(fakeRestRequest, fakeRestChannel)[ FD ]
Line_5 $$ Set<Integer> orders = new HashSet(numFilters)-->Line_6 $$ while (orders.size() < numFilters) [ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_16 $$ Collections.sort(restFiltersByOrder, new Comparator<RestFilter>() [ CD ]
Line_11 $$ TestFilter testFilter = new TestFilter(order, randomFrom(Operation.values()))-->Line_12 $$ filters.add(testFilter)[ FD ]
Line_9 $$ List<RestFilter> filters = new ArrayList()-->Line_12 $$ filters.add(testFilter)[ FD ]
Line_15 $$ ArrayList<RestFilter> restFiltersByOrder = new ArrayList(filters)-->Line_16 $$ Collections.sort(restFiltersByOrder, new Comparator<RestFilter>() [ FD ]
Line_3 $$ RestController restController = new RestController(Settings.EMPTY)-->Line_29 $$ restController.registerHandler(RestRequest.Method.GET, "/", new RestHandler() [ FD ]
Line_3 $$ RestController restController = new RestController(Settings.EMPTY)-->Line_13 $$ restController.registerFilter(testFilter)[ FD ]
Line_42 $$ Collections.sort(testFiltersByLastExecution, new Comparator<TestFilter>() -->Line_44 $$ return Long.compare(o1.executionToken, o2.executionToken)[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_37 $$ assertThat(fakeRestChannel.await(), equalTo(true))[ CD ]
Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_59 $$ assertThat(testFilter.runs.get(), equalTo(1))[ CD ]
Line_5 $$ Set<Integer> orders = new HashSet(numFilters)-->Line_7 $$ orders.add(randomInt(10))[ FD ]
Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_57 $$ TestFilter testFilter = finalTestFilters.get(i)[ FD ]
Line_16 $$ Collections.sort(restFiltersByOrder, new Comparator<RestFilter>() -->Line_18 $$ return Integer.compare(o1.order(), o2.order())[ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_29 $$ restController.registerHandler(RestRequest.Method.GET, "/", new RestHandler() [ CD ]
Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_58 $$ assertThat(testFilter, equalTo(expectedRestFilters.get(i)))[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_6 $$ while (orders.size() < numFilters) [ CD ]
Line_29 $$ restController.registerHandler(RestRequest.Method.GET, "/", new RestHandler() -->Line_31 $$ channel.sendResponse(new TestResponse())[ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_4 $$ int numFilters = randomInt(10)[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_36 $$ restController.dispatchRequest(fakeRestRequest, fakeRestChannel)[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_42 $$ Collections.sort(testFiltersByLastExecution, new Comparator<TestFilter>() [ CD ]
Line_11 $$ TestFilter testFilter = new TestFilter(order, randomFrom(Operation.values()))-->Line_13 $$ restController.registerFilter(testFilter)[ FD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_56 $$ for (int i = 0; i < finalTestFilters.size(); i++) [ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_15 $$ ArrayList<RestFilter> restFiltersByOrder = new ArrayList(filters)[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_5 $$ Set<Integer> orders = new HashSet(numFilters)[ CD ]
Line_2 $$ public void testRestFilters() throws InterruptedException -->Line_55 $$ assertThat(finalTestFilters.size(), equalTo(expectedRestFilters.size()))[ CD ]
Line_29 $$ restController.registerHandler(RestRequest.Method.GET, "/", new RestHandler() -->Line_31 $$ channel.sendResponse(new TestResponse())[ CD ]
