Line_4 $$ Set<Integer> orders = new HashSet(numFilters)-->Line_5 $$ while (orders.size() < numFilters) [ FD ]
Line_14 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) -->Line_16 $$ listener.onResponse(new TestResponse())[ CD ]
Line_4 $$ Set<Integer> orders = new HashSet(numFilters)-->Line_6 $$ orders.add(randomInt(10))[ FD ]
Line_5 $$ while (orders.size() < numFilters) -->Line_6 $$ orders.add(randomInt(10))[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_4 $$ Set<Integer> orders = new HashSet(numFilters)[ CD ]
Line_13 $$ ActionFilters actionFilters = new ActionFilters(filters)-->Line_46 $$ for (ActionFilter actionFilter : actionFilters.filters()) [ FD ]
Line_3 $$ int numFilters = randomInt(10)-->Line_5 $$ while (orders.size() < numFilters) [ FD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_13 $$ ActionFilters actionFilters = new ActionFilters(filters)[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_62 $$ assertThat(finalTestFilters.size(), equalTo(expectedActionFilters.size()))[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_8 $$ Set<ActionFilter> filters = new HashSet()[ CD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_67 $$ assertThat(testFilter.lastActionName, equalTo(actionName))[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) [ CD ]
Line_20 $$ Collections.sort(actionFiltersByOrder, new Comparator<ActionFilter>() -->Line_22 $$ return Integer.compare(o1.order(), o2.order())[ CD ]
Line_64 $$ RequestTestFilter testFilter = finalTestFilters.get(i)-->Line_65 $$ assertThat(testFilter, equalTo(expectedActionFilters.get(i)))[ FD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_65 $$ assertThat(testFilter, equalTo(expectedActionFilters.get(i)))[ FD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_5 $$ while (orders.size() < numFilters) [ CD ]
Line_14 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) -->Line_38 $$ transportAction.execute(new TestRequest(), future)[ FD ]
Line_49 $$ Collections.sort(testFiltersByLastExecution, new Comparator<RequestTestFilter>() -->Line_51 $$ return Integer.compare(o1.executionToken, o2.executionToken)[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_14 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) [ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_3 $$ int numFilters = randomInt(10)[ CD ]
Line_20 $$ Collections.sort(actionFiltersByOrder, new Comparator<ActionFilter>() -->Line_22 $$ return Integer.compare(o1.order(), o2.order())[ FD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_65 $$ assertThat(testFilter, equalTo(expectedActionFilters.get(i)))[ CD ]
Line_14 $$ TransportAction<TestRequest, TestResponse> transportAction = new TransportAction<TestRequest, TestResponse>(Settings.EMPTY, actionName, null, actionFilters, null) -->Line_16 $$ listener.onResponse(new TestResponse())[ FD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_64 $$ RequestTestFilter testFilter = finalTestFilters.get(i)[ FD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_66 $$ assertThat(testFilter.runs.get(), equalTo(1))[ CD ]
Line_8 $$ Set<ActionFilter> filters = new HashSet()-->Line_10 $$ filters.add(new RequestTestFilter(order, randomFrom(RequestOperation.values())))[ FD ]
Line_63 $$ for (int i = 0; i < finalTestFilters.size(); i++) -->Line_64 $$ RequestTestFilter testFilter = finalTestFilters.get(i)[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_49 $$ Collections.sort(testFiltersByLastExecution, new Comparator<RequestTestFilter>() [ CD ]
Line_12 $$ String actionName = randomAsciiOfLength(randomInt(30))-->Line_67 $$ assertThat(testFilter.lastActionName, equalTo(actionName))[ FD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_38 $$ transportAction.execute(new TestRequest(), future)[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_12 $$ String actionName = randomAsciiOfLength(randomInt(30))[ CD ]
Line_2 $$ public void testActionFiltersRequest() throws ExecutionException, InterruptedException -->Line_20 $$ Collections.sort(actionFiltersByOrder, new Comparator<ActionFilter>() [ CD ]
