Line_2 $$ private void createOperationForMethod(Method method) -->Line_3 $$ if (method2OperationMap.get(method) != null) [ FD ]
Line_29 $$ if (isWSICompliant && name2OperationsMap != null) -->Line_31 $$ name = JavaUtils.getUniqueValue(methodNames, name)[ CD ]
Line_29 $$ if (isWSICompliant && name2OperationsMap != null) -->Line_30 $$ Collection methodNames = name2OperationsMap.keySet()[ CD ]
Line_54 $$ Class retClass = method.getReturnType()-->Line_55 $$ operation.setReturnClass(retClass)[ FD ]
Line_26 $$ boolean isWSICompliant = JavaUtils.isTrue(AxisProperties.getProperty(Constants.WSIBP11_COMPAT_PROPERTY))-->Line_29 $$ if (isWSICompliant && name2OperationsMap != null) [ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_81 $$ addOperationDesc(operation)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_42 $$ operation.setMethod(method)[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_51 $$ operation.setReturnClass(Object.class)[ FD ]
Line_7 $$ ArrayList overloads = name2OperationsMap == null ? null : (ArrayList) name2OperationsMap.get(method.getName())-->Line_8 $$ if (overloads != null && !overloads.isEmpty()) [ FD ]
Line_10 $$ OperationDesc op = (OperationDesc) overloads.get(i)-->Line_11 $$ Method checkMethod = op.getMethod()[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_62 $$ String paramNamespace = (this.style == Style.RPC ? "" : operation.getElementQName().getNamespaceURI())[ CD ]
Line_44 $$ int messageOperType = checkMessageMethod(method)-->Line_50 $$ operation.setMessageOperationStyle(messageOperType)[ FD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_77 $$ operation.addParameter(paramDesc)[ FD ]
Line_7 $$ ArrayList overloads = name2OperationsMap == null ? null : (ArrayList) name2OperationsMap.get(method.getName())-->Line_9 $$ for (int i = 0; i < overloads.size(); i++) [ FD ]
Line_30 $$ Collection methodNames = name2OperationsMap.keySet()-->Line_31 $$ name = JavaUtils.getUniqueValue(methodNames, name)[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_43 $$ if (style == Style.MESSAGE) [ CD ]
Line_15 $$ int j = 0-->Line_20 $$ if (j == others.length)[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_38 $$ if (defaultNS.length() == 0) [ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_59 $$ for (int k = 0; k < paramTypes.length; k++) [ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_80 $$ createFaultMetadata(method, operation)[ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_52 $$ operation.setReturnType(Constants.XSD_ANYTYPE)[ CD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_70 $$ paramDesc.setMode(ParameterDesc.INOUT)[ FD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_56 $$ QName typeQName = getTypeQName(retClass)[ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_45 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_42 $$ operation.setMethod(method)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_82 $$ method2OperationMap.put(method, operation)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_54 $$ Class retClass = method.getReturnType()[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_60 $$ Class type = paramTypes[k][ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_28 $$ String name = method.getName()[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_77 $$ operation.addParameter(paramDesc)[ CD ]
Line_63 $$ if (paramNames != null && paramNames[k] != null && paramNames[k].length() > 0) -->Line_64 $$ paramDesc.setQName(new QName(paramNamespace, paramNames[k]))[ CD ]
Line_60 $$ Class type = paramTypes[k]-->Line_68 $$ Class heldClass = JavaUtils.getHolderValueType(type)[ FD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_57 $$ operation.setReturnType(typeQName)[ CD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_50 $$ operation.setMessageOperationStyle(messageOperType)[ FD ]
Line_3 $$ if (method2OperationMap.get(method) != null) -->Line_4 $$ return[ CD ]
Line_44 $$ int messageOperType = checkMessageMethod(method)-->Line_45 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_55 $$ operation.setReturnClass(retClass)[ FD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_50 $$ operation.setMessageOperationStyle(messageOperType)[ CD ]
Line_7 $$ ArrayList overloads = name2OperationsMap == null ? null : (ArrayList) name2OperationsMap.get(method.getName())-->Line_10 $$ OperationDesc op = (OperationDesc) overloads.get(i)[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_77 $$ operation.addParameter(paramDesc)[ FD ]
Line_36 $$ defaultNS = (String) namespaceMappings.get(0)-->Line_38 $$ if (defaultNS.length() == 0) [ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_28 $$ String name = method.getName()[ CD ]
Line_20 $$ if (j == others.length)-->Line_21 $$ return[ CD ]
Line_35 $$ if (namespaceMappings != null && !namespaceMappings.isEmpty()) -->Line_36 $$ defaultNS = (String) namespaceMappings.get(0)[ CD ]
Line_69 $$ if (heldClass != null) -->Line_74 $$ paramDesc.setTypeQName(getTypeQName(type))[ CD ]
Line_60 $$ Class type = paramTypes[k]-->Line_76 $$ paramDesc.setJavaType(type)[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_7 $$ ArrayList overloads = name2OperationsMap == null ? null : (ArrayList) name2OperationsMap.get(method.getName())[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_76 $$ paramDesc.setJavaType(type)[ CD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_81 $$ addOperationDesc(operation)[ FD ]
Line_9 $$ for (int i = 0; i < overloads.size(); i++) -->Line_11 $$ Method checkMethod = op.getMethod()[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_29 $$ if (isWSICompliant && name2OperationsMap != null) [ CD ]
Line_14 $$ if (paramTypes.length == others.length) -->Line_15 $$ int j = 0[ CD ]
Line_11 $$ Method checkMethod = op.getMethod()-->Line_12 $$ if (checkMethod != null) [ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_26 $$ boolean isWSICompliant = JavaUtils.isTrue(AxisProperties.getProperty(Constants.WSIBP11_COMPAT_PROPERTY))[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_3 $$ if (method2OperationMap.get(method) != null) [ CD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_42 $$ operation.setMethod(method)[ FD ]
Line_14 $$ if (paramTypes.length == others.length) -->Line_20 $$ if (j == others.length)[ CD ]
Line_34 $$ String defaultNS = ""-->Line_36 $$ defaultNS = (String) namespaceMappings.get(0)[ FD ]
Line_12 $$ if (checkMethod != null) -->Line_14 $$ if (paramTypes.length == others.length) [ CD ]
Line_16 $$ for (; j < others.length; j++) -->Line_17 $$ if (!others[j].equals(paramTypes[j]))[ CD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_69 $$ if (heldClass != null) [ CD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_33 $$ operation.setName(name)[ FD ]
Line_14 $$ if (paramTypes.length == others.length) -->Line_16 $$ for (; j < others.length; j++) [ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_8 $$ if (overloads != null && !overloads.isEmpty()) [ CD ]
Line_34 $$ String defaultNS = ""-->Line_38 $$ if (defaultNS.length() == 0) [ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_62 $$ String paramNamespace = (this.style == Style.RPC ? "" : operation.getElementQName().getNamespaceURI())[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_80 $$ createFaultMetadata(method, operation)[ FD ]
Line_44 $$ int messageOperType = checkMessageMethod(method)-->Line_47 $$ if (messageOperType == -1) [ FD ]
Line_8 $$ if (overloads != null && !overloads.isEmpty()) -->Line_9 $$ for (int i = 0; i < overloads.size(); i++) [ CD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_71 $$ paramDesc.setTypeQName(getTypeQName(heldClass))[ FD ]
Line_54 $$ Class retClass = method.getReturnType()-->Line_56 $$ QName typeQName = getTypeQName(retClass)[ FD ]
Line_45 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)-->Line_46 $$ return[ CD ]
Line_28 $$ String name = method.getName()-->Line_31 $$ name = JavaUtils.getUniqueValue(methodNames, name)[ FD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_58 $$ String[] paramNames = getParamNames(method)[ CD ]
Line_69 $$ if (heldClass != null) -->Line_70 $$ paramDesc.setMode(ParameterDesc.INOUT)[ CD ]
Line_69 $$ if (heldClass != null) -->Line_71 $$ paramDesc.setTypeQName(getTypeQName(heldClass))[ CD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_7 $$ ArrayList overloads = name2OperationsMap == null ? null : (ArrayList) name2OperationsMap.get(method.getName())[ CD ]
Line_31 $$ name = JavaUtils.getUniqueValue(methodNames, name)-->Line_33 $$ operation.setName(name)[ FD ]
Line_28 $$ String name = method.getName()-->Line_33 $$ operation.setName(name)[ FD ]
Line_38 $$ if (defaultNS.length() == 0) -->Line_39 $$ defaultNS = Namespaces.makeNamespace(method.getDeclaringClass().getName())[ CD ]
Line_9 $$ for (int i = 0; i < overloads.size(); i++) -->Line_10 $$ OperationDesc op = (OperationDesc) overloads.get(i)[ CD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_73 $$ paramDesc.setMode(ParameterDesc.IN)[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_6 $$ Class[] paramTypes = method.getParameterTypes()[ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_54 $$ Class retClass = method.getReturnType()[ CD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_82 $$ method2OperationMap.put(method, operation)[ FD ]
Line_12 $$ if (checkMethod != null) -->Line_13 $$ Class[] others = checkMethod.getParameterTypes()[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_80 $$ createFaultMetadata(method, operation)[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_63 $$ if (paramNames != null && paramNames[k] != null && paramNames[k].length() > 0) [ CD ]
Line_15 $$ int j = 0-->Line_16 $$ for (; j < others.length; j++) [ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_34 $$ String defaultNS = ""[ CD ]
Line_9 $$ for (int i = 0; i < overloads.size(); i++) -->Line_10 $$ OperationDesc op = (OperationDesc) overloads.get(i)[ FD ]
Line_69 $$ if (heldClass != null) -->Line_73 $$ paramDesc.setMode(ParameterDesc.IN)[ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_47 $$ if (messageOperType == -1) [ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_44 $$ int messageOperType = checkMessageMethod(method)[ CD ]
Line_34 $$ String defaultNS = ""-->Line_39 $$ defaultNS = Namespaces.makeNamespace(method.getDeclaringClass().getName())[ FD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_55 $$ operation.setReturnClass(retClass)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_35 $$ if (namespaceMappings != null && !namespaceMappings.isEmpty()) [ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_33 $$ operation.setName(name)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_44 $$ int messageOperType = checkMessageMethod(method)[ FD ]
Line_63 $$ if (paramNames != null && paramNames[k] != null && paramNames[k].length() > 0) -->Line_66 $$ paramDesc.setQName(new QName(paramNamespace, "in" + k))[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_82 $$ method2OperationMap.put(method, operation)[ FD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_64 $$ paramDesc.setQName(new QName(paramNamespace, paramNames[k]))[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_52 $$ operation.setReturnType(Constants.XSD_ANYTYPE)[ FD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_66 $$ paramDesc.setQName(new QName(paramNamespace, "in" + k))[ FD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_74 $$ paramDesc.setTypeQName(getTypeQName(type))[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_39 $$ defaultNS = Namespaces.makeNamespace(method.getDeclaringClass().getName())[ FD ]
Line_68 $$ Class heldClass = JavaUtils.getHolderValueType(type)-->Line_71 $$ paramDesc.setTypeQName(getTypeQName(heldClass))[ FD ]
Line_60 $$ Class type = paramTypes[k]-->Line_74 $$ paramDesc.setTypeQName(getTypeQName(type))[ FD ]
Line_9 $$ for (int i = 0; i < overloads.size(); i++) -->Line_12 $$ if (checkMethod != null) [ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_41 $$ operation.setElementQName(new QName(defaultNS, name))[ CD ]
Line_43 $$ if (style == Style.MESSAGE) -->Line_51 $$ operation.setReturnClass(Object.class)[ CD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_27 $$ OperationDesc operation = new OperationDesc()[ CD ]
Line_68 $$ Class heldClass = JavaUtils.getHolderValueType(type)-->Line_69 $$ if (heldClass != null) [ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_6 $$ Class[] paramTypes = method.getParameterTypes()[ FD ]
Line_61 $$ ParameterDesc paramDesc = new ParameterDesc()-->Line_76 $$ paramDesc.setJavaType(type)[ FD ]
Line_11 $$ Method checkMethod = op.getMethod()-->Line_13 $$ Class[] others = checkMethod.getParameterTypes()[ FD ]
Line_59 $$ for (int k = 0; k < paramTypes.length; k++) -->Line_68 $$ Class heldClass = JavaUtils.getHolderValueType(type)[ CD ]
Line_36 $$ defaultNS = (String) namespaceMappings.get(0)-->Line_39 $$ defaultNS = Namespaces.makeNamespace(method.getDeclaringClass().getName())[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_57 $$ operation.setReturnType(typeQName)[ FD ]
Line_2 $$ private void createOperationForMethod(Method method) -->Line_58 $$ String[] paramNames = getParamNames(method)[ FD ]
Line_27 $$ OperationDesc operation = new OperationDesc()-->Line_41 $$ operation.setElementQName(new QName(defaultNS, name))[ FD ]
Line_56 $$ QName typeQName = getTypeQName(retClass)-->Line_57 $$ operation.setReturnType(typeQName)[ FD ]
