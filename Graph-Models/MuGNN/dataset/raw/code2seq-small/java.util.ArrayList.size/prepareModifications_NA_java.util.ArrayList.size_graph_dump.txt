Line_16 $$ Modification chown = new FileChown(node.fileList.get((node.nullFileIndex + 4) % node.fileList.size()), hdfs, userGroup[0], userGroup[1])-->Line_28 $$ mList.add(chown)[ FD ]
Line_11 $$ Modification append = new FileAppend(f, hdfs, BLOCKSIZE)-->Line_24 $$ mList.add(append)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_23 $$ mList.add(delete)[ FD ]
Line_8 $$ Modification create = new FileCreation(node.fileList.get(node.nullFileIndex), hdfs, BLOCKSIZE)-->Line_22 $$ mList.add(create)[ FD ]
Line_2 $$ private Modification[] prepareModifications(TestDirectoryTree.Node[] nodes) throws Exception -->Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()[ CD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_25 $$ mList.add(appendNotClose)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_28 $$ mList.add(chown)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_29 $$ mList.add(replication)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_27 $$ mList.add(chmod)[ FD ]
Line_12 $$ FileAppendNotClose appendNotClose = new FileAppendNotClose(f, hdfs, BLOCKSIZE)-->Line_25 $$ mList.add(appendNotClose)[ FD ]
Line_13 $$ Modification appendClose = new FileAppendClose(f, hdfs, BLOCKSIZE, appendNotClose)-->Line_26 $$ mList.add(appendClose)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_31 $$ mList.add(dirRename)[ FD ]
Line_5 $$ if (node.fileList == null) -->Line_6 $$ node.initFileList(hdfs, node.nodePath.getName(), BLOCKSIZE, REPLICATION, seed, 6)[ CD ]
Line_19 $$ Modification dirChange = new DirCreationOrDeletion(node.nodePath, hdfs, node, random.nextBoolean())-->Line_30 $$ mList.add(dirChange)[ FD ]
Line_21 $$ Modification dirRename = new DirRename(node.nodePath, hdfs, node, dstParent)-->Line_31 $$ mList.add(dirRename)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_22 $$ mList.add(create)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_24 $$ mList.add(append)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_26 $$ mList.add(appendClose)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_33 $$ return mList.toArray(new Modification[mList.size()])[ FD ]
Line_9 $$ Modification delete = new FileDeletion(node.fileList.get((node.nullFileIndex + 1) % node.fileList.size()), hdfs)-->Line_23 $$ mList.add(delete)[ FD ]
Line_3 $$ ArrayList<Modification> mList = new ArrayList<Modification>()-->Line_30 $$ mList.add(dirChange)[ FD ]
Line_2 $$ private Modification[] prepareModifications(TestDirectoryTree.Node[] nodes) throws Exception -->Line_20 $$ Node dstParent = dirTree.getRandomDirNode(random, Arrays.asList(nodes))[ FD ]
Line_4 $$ for (TestDirectoryTree.Node node : nodes) -->Line_6 $$ node.initFileList(hdfs, node.nodePath.getName(), BLOCKSIZE, REPLICATION, seed, 6)[ FD ]
Line_17 $$ Modification replication = new FileChangeReplication(node.fileList.get((node.nullFileIndex + 5) % node.fileList.size()), hdfs, (short) (random.nextInt(REPLICATION) + 1))-->Line_29 $$ mList.add(replication)[ FD ]
Line_2 $$ private Modification[] prepareModifications(TestDirectoryTree.Node[] nodes) throws Exception -->Line_33 $$ return mList.toArray(new Modification[mList.size()])[ CD ]
Line_14 $$ Modification chmod = new FileChangePermission(node.fileList.get((node.nullFileIndex + 3) % node.fileList.size()), hdfs, genRandomPermission())-->Line_27 $$ mList.add(chmod)[ FD ]
