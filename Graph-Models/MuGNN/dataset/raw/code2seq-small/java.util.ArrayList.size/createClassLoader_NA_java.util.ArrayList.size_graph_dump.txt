Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_3 $$ final ArrayList<URL> urls = new ArrayList<URL>()[ CD ]
Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(runClasspath, File.pathSeparator)-->Line_8 $$ final String s = tokenizer.nextToken()[ FD ]
Line_3 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_12 $$ urls.add(realFile != null ? realFile.toURI().toURL() : new File(s).toURI().toURL())[ FD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_7 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_3 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_20 $$ final URL[] _urls = urls.toArray(new URL[urls.size()])[ FD ]
Line_8 $$ final String s = tokenizer.nextToken()-->Line_10 $$ VirtualFile vFile = manager.findFileByUrl(VfsUtil.pathToUrl(s))[ FD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_4 $$ final VirtualFileManager manager = VirtualFileManager.getInstance()[ CD ]
Line_4 $$ final VirtualFileManager manager = VirtualFileManager.getInstance()-->Line_10 $$ VirtualFile vFile = manager.findFileByUrl(VfsUtil.pathToUrl(s))[ FD ]
Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(runClasspath, File.pathSeparator)-->Line_7 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_21 $$ return new DesignTimeClassLoader(Arrays.asList(_urls), LoaderFactory.class.getClassLoader(), moduleName)[ CD ]
Line_7 $$ while (tokenizer.hasMoreTokens()) -->Line_8 $$ final String s = tokenizer.nextToken()[ CD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(runClasspath, File.pathSeparator)[ CD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_5 $$ final JarFileSystemImpl fileSystem = (JarFileSystemImpl) JarFileSystem.getInstance()[ CD ]
Line_3 $$ final ArrayList<URL> urls = new ArrayList<URL>()-->Line_17 $$ urls.add(new File(PathUtil.getJarPathForClass(Spacer.class)).toURI().toURL())[ FD ]
Line_11 $$ final File realFile = fileSystem.getMirroredFile(vFile)-->Line_12 $$ urls.add(realFile != null ? realFile.toURI().toURL() : new File(s).toURI().toURL())[ FD ]
Line_10 $$ VirtualFile vFile = manager.findFileByUrl(VfsUtil.pathToUrl(s))-->Line_11 $$ final File realFile = fileSystem.getMirroredFile(vFile)[ FD ]
Line_5 $$ final JarFileSystemImpl fileSystem = (JarFileSystemImpl) JarFileSystem.getInstance()-->Line_11 $$ final File realFile = fileSystem.getMirroredFile(vFile)[ FD ]
Line_20 $$ final URL[] _urls = urls.toArray(new URL[urls.size()])-->Line_21 $$ return new DesignTimeClassLoader(Arrays.asList(_urls), LoaderFactory.class.getClassLoader(), moduleName)[ FD ]
Line_2 $$ private static ClassLoader createClassLoader(final String runClasspath, final String moduleName) -->Line_20 $$ final URL[] _urls = urls.toArray(new URL[urls.size()])[ CD ]
