Line_4 $$ for (int i = 0; i < myTexts.size(); i++) -->Line_6 $$ result.append(myTexts.get(i), overridden)[ FD ]
Line_4 $$ for (int i = 0; i < myTexts.size(); i++) -->Line_6 $$ result.append(myTexts.get(i), overridden)[ CD ]
Line_4 $$ for (int i = 0; i < myTexts.size(); i++) -->Line_5 $$ SimpleTextAttributes overridden = override ? SimpleTextAttributes.merge(myAttributes.get(i), attributes) : SimpleTextAttributes.merge(attributes, myAttributes.get(i))[ CD ]
Line_2 $$ public SimpleColoredText derive(SimpleTextAttributes attributes, boolean override) -->Line_5 $$ SimpleTextAttributes overridden = override ? SimpleTextAttributes.merge(myAttributes.get(i), attributes) : SimpleTextAttributes.merge(attributes, myAttributes.get(i))[ FD ]
Line_4 $$ for (int i = 0; i < myTexts.size(); i++) -->Line_5 $$ SimpleTextAttributes overridden = override ? SimpleTextAttributes.merge(myAttributes.get(i), attributes) : SimpleTextAttributes.merge(attributes, myAttributes.get(i))[ FD ]
Line_5 $$ SimpleTextAttributes overridden = override ? SimpleTextAttributes.merge(myAttributes.get(i), attributes) : SimpleTextAttributes.merge(attributes, myAttributes.get(i))-->Line_6 $$ result.append(myTexts.get(i), overridden)[ FD ]
Line_2 $$ public SimpleColoredText derive(SimpleTextAttributes attributes, boolean override) -->Line_4 $$ for (int i = 0; i < myTexts.size(); i++) [ CD ]
Line_3 $$ SimpleColoredText result = new SimpleColoredText()-->Line_6 $$ result.append(myTexts.get(i), overridden)[ FD ]
Line_2 $$ public SimpleColoredText derive(SimpleTextAttributes attributes, boolean override) -->Line_8 $$ return result[ CD ]
Line_2 $$ public SimpleColoredText derive(SimpleTextAttributes attributes, boolean override) -->Line_3 $$ SimpleColoredText result = new SimpleColoredText()[ CD ]
