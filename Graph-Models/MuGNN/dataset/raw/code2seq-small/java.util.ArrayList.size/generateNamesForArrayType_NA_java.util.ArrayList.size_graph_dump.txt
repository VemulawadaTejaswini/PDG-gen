Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_6 $$ PsiType deepType = type.getDeepComponentType()[ FD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_15 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)[ FD ]
Line_16 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)-->Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_16 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ FD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_15 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)-->Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_3 $$ int arrayDim = type.getArrayDimensions()[ FD ]
Line_3 $$ int arrayDim = type.getArrayDimensions()-->Line_4 $$ if (arrayDim == 0)[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_15 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_16 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ FD ]
Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))-->Line_15 $$ generateCamelNames(possibleNames, validator, candidateName)[ FD ]
Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)-->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_9 $$ PsiClass clazz = ((PsiClassType) deepType).resolve()-->Line_10 $$ if (clazz == null)[ FD ]
Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))-->Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_6 $$ PsiType deepType = type.getDeepComponentType()[ CD ]
Line_6 $$ PsiType deepType = type.getDeepComponentType()-->Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())[ FD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ CD ]
Line_10 $$ if (clazz == null)-->Line_11 $$ return[ CD ]
Line_8 $$ if (deepType instanceof PsiClassType) -->Line_10 $$ if (clazz == null)[ CD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))-->Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_4 $$ if (arrayDim == 0)[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_3 $$ int arrayDim = type.getArrayDimensions()[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_16 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)[ CD ]
Line_8 $$ if (deepType instanceof PsiClassType) -->Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())[ CD ]
Line_8 $$ if (deepType instanceof PsiClassType) -->Line_9 $$ PsiClass clazz = ((PsiClassType) deepType).resolve()[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_9 $$ PsiClass clazz = ((PsiClassType) deepType).resolve()-->Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))[ FD ]
Line_12 $$ candidateName = GroovyNamesUtil.fromLowerLetter(clazz.getName())-->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))[ CD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_15 $$ generateCamelNames(possibleNames, validator, candidateName)[ CD ]
Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))-->Line_16 $$ ArrayList<String> camelizedName = GroovyNamesUtil.camelizeString(candidateName)[ FD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_4 $$ if (arrayDim == 0)-->Line_5 $$ return[ CD ]
Line_18 $$ candidateName = "arrayOf" + fromUpperLetter(candidateName)-->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_14 $$ candidateName = StringUtil.pluralize(GroovyNamesUtil.fromLowerLetter(candidateName))-->Line_19 $$ possibleNames.add(validator.validateName(candidateName, true))[ FD ]
Line_2 $$ private static void generateNamesForArrayType(PsiType type, Set<String> possibleNames, NameValidator validator) -->Line_8 $$ if (deepType instanceof PsiClassType) [ CD ]
Line_7 $$ String candidateName = cleanTypeName(deepType.getPresentableText())-->Line_17 $$ candidateName = camelizedName.get(camelizedName.size() - 1)[ FD ]
Line_6 $$ PsiType deepType = type.getDeepComponentType()-->Line_8 $$ if (deepType instanceof PsiClassType) [ FD ]
