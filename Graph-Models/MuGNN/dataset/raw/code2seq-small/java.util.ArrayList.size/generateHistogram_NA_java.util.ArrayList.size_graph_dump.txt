Line_11 $$ lastWasGap = true-->Line_22 $$ lastWasGap = false[ FD ]
Line_28 $$ if (emptyHisto) -->Line_33 $$ for (int j = 0; j < bucket.count; j++) [ CD ]
Line_29 $$ int idx = randomIntBetween(0, values.size() - 1)-->Line_30 $$ MockBucket bucket = values.get(idx)[ FD ]
Line_28 $$ if (emptyHisto) -->Line_31 $$ bucket.count = randomIntBetween(1, 50)[ CD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_8 $$ if (randomDouble() < gapProbability) [ FD ]
Line_33 $$ for (int j = 0; j < bucket.count; j++) -->Line_34 $$ bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)[ CD ]
Line_8 $$ if (randomDouble() < gapProbability) -->Line_10 $$ bucket.docValues = new double[0][ CD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_25 $$ bucket.key = i * interval[ FD ]
Line_8 $$ if (randomDouble() < gapProbability) -->Line_11 $$ lastWasGap = true[ CD ]
Line_15 $$ lastWasGap = true-->Line_22 $$ lastWasGap = false[ FD ]
Line_3 $$ ArrayList<MockBucket> values = new ArrayList(size)-->Line_30 $$ MockBucket bucket = values.get(idx)[ FD ]
Line_11 $$ lastWasGap = true-->Line_15 $$ lastWasGap = true[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ MockBucket bucket = new MockBucket()[ CD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_13 $$ bucket.count = 0[ CD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_14 $$ bucket.docValues = new double[0][ CD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_17 $$ bucket.count = randomIntBetween(1, 50)[ CD ]
Line_28 $$ if (emptyHisto) -->Line_30 $$ MockBucket bucket = values.get(idx)[ CD ]
Line_8 $$ if (randomDouble() < gapProbability) -->Line_9 $$ bucket.count = 0[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_25 $$ bucket.key = i * interval[ FD ]
Line_3 $$ ArrayList<MockBucket> values = new ArrayList(size)-->Line_29 $$ int idx = randomIntBetween(0, values.size() - 1)[ FD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
Line_30 $$ MockBucket bucket = values.get(idx)-->Line_36 $$ values.set(idx, bucket)[ FD ]
Line_4 $$ boolean lastWasGap = false-->Line_15 $$ lastWasGap = true[ FD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_38 $$ return values[ CD ]
Line_11 $$ lastWasGap = true-->Line_12 $$ if (lastWasGap && randomDouble() < runProbability) [ FD ]
Line_28 $$ if (emptyHisto) -->Line_29 $$ int idx = randomIntBetween(0, values.size() - 1)[ CD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_5 $$ boolean emptyHisto = true[ CD ]
Line_4 $$ boolean lastWasGap = false-->Line_11 $$ lastWasGap = true[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_26 $$ values.add(bucket)[ CD ]
Line_28 $$ if (emptyHisto) -->Line_32 $$ bucket.docValues = new double[bucket.count][ CD ]
Line_8 $$ if (randomDouble() < gapProbability) -->Line_12 $$ if (lastWasGap && randomDouble() < runProbability) [ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_8 $$ if (randomDouble() < gapProbability) [ CD ]
Line_29 $$ int idx = randomIntBetween(0, values.size() - 1)-->Line_36 $$ values.set(idx, bucket)[ FD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_4 $$ boolean lastWasGap = false[ CD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_22 $$ lastWasGap = false[ CD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_3 $$ ArrayList<MockBucket> values = new ArrayList(size)[ CD ]
Line_7 $$ MockBucket bucket = new MockBucket()-->Line_36 $$ values.set(idx, bucket)[ FD ]
Line_3 $$ ArrayList<MockBucket> values = new ArrayList(size)-->Line_36 $$ values.set(idx, bucket)[ FD ]
Line_5 $$ boolean emptyHisto = true-->Line_23 $$ emptyHisto = false[ FD ]
Line_28 $$ if (emptyHisto) -->Line_36 $$ values.set(idx, bucket)[ CD ]
Line_15 $$ lastWasGap = true-->Line_12 $$ if (lastWasGap && randomDouble() < runProbability) [ FD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_18 $$ bucket.docValues = new double[bucket.count][ CD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_6 $$ for (int i = 0; i < size; i++) [ CD ]
Line_22 $$ lastWasGap = false-->Line_12 $$ if (lastWasGap && randomDouble() < runProbability) [ FD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_19 $$ for (int j = 0; j < bucket.count; j++) [ CD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_15 $$ lastWasGap = true[ CD ]
Line_4 $$ boolean lastWasGap = false-->Line_12 $$ if (lastWasGap && randomDouble() < runProbability) [ FD ]
Line_19 $$ for (int j = 0; j < bucket.count; j++) -->Line_33 $$ for (int j = 0; j < bucket.count; j++) [ FD ]
Line_2 $$ public static ArrayList<MockBucket> generateHistogram(int interval, int size, double gapProbability, double runProbability) -->Line_28 $$ if (emptyHisto) [ CD ]
Line_19 $$ for (int j = 0; j < bucket.count; j++) -->Line_20 $$ bucket.docValues[j] = randomDouble() * randomIntBetween(-20, 20)[ CD ]
Line_4 $$ boolean lastWasGap = false-->Line_22 $$ lastWasGap = false[ FD ]
Line_3 $$ ArrayList<MockBucket> values = new ArrayList(size)-->Line_26 $$ values.add(bucket)[ FD ]
Line_12 $$ if (lastWasGap && randomDouble() < runProbability) -->Line_23 $$ emptyHisto = false[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_25 $$ bucket.key = i * interval[ CD ]
Line_7 $$ MockBucket bucket = new MockBucket()-->Line_26 $$ values.add(bucket)[ FD ]
