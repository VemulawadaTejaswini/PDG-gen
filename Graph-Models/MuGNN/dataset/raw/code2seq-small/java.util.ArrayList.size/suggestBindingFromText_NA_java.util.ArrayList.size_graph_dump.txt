Line_7 $$ if (words.size() > 0) -->Line_20 $$ if (FormEditingUtil.findComponentWithBinding(root, binding, component) != null) [ CD ]
Line_7 $$ if (words.size() > 0) -->Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))[ CD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_12 $$ final String shortClassName = StringUtil.capitalize(InsertComponentProcessor.getShortClassName(component.getComponentClassName()))[ FD ]
Line_12 $$ final String shortClassName = StringUtil.capitalize(InsertComponentProcessor.getShortClassName(component.getComponentClassName()))-->Line_13 $$ if (shortClassName.equalsIgnoreCase(nameBuilder.toString())) [ FD ]
Line_7 $$ if (words.size() > 0) -->Line_23 $$ return binding[ CD ]
Line_3 $$ if (StringUtil.startsWithIgnoreCase(text, PREFIX_HTML)) -->Line_4 $$ text = Pattern.compile("<.+?>").matcher(text).replaceAll("")[ CD ]
Line_7 $$ if (words.size() > 0) -->Line_19 $$ String binding = JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(nameBuilder.toString(), VariableKind.FIELD)[ CD ]
Line_17 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)-->Line_21 $$ binding = InsertComponentProcessor.getUniqueBinding(root, nameBuilder.toString())[ FD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_17 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)[ FD ]
Line_18 $$ Project project = root.getProject()-->Line_19 $$ String binding = JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(nameBuilder.toString(), VariableKind.FIELD)[ FD ]
Line_7 $$ if (words.size() > 0) -->Line_13 $$ if (shortClassName.equalsIgnoreCase(nameBuilder.toString())) [ CD ]
Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))-->Line_7 $$ if (words.size() > 0) [ FD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))[ FD ]
Line_7 $$ if (words.size() > 0) -->Line_9 $$ for (int i = 1; i < words.size() && i < 4; i++) [ CD ]
Line_20 $$ if (FormEditingUtil.findComponentWithBinding(root, binding, component) != null) -->Line_21 $$ binding = InsertComponentProcessor.getUniqueBinding(root, nameBuilder.toString())[ CD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_3 $$ if (StringUtil.startsWithIgnoreCase(text, PREFIX_HTML)) [ FD ]
Line_7 $$ if (words.size() > 0) -->Line_16 $$ nameBuilder.append(shortClassName)[ CD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))[ CD ]
Line_7 $$ if (words.size() > 0) -->Line_12 $$ final String shortClassName = StringUtil.capitalize(InsertComponentProcessor.getShortClassName(component.getComponentClassName()))[ CD ]
Line_19 $$ String binding = JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(nameBuilder.toString(), VariableKind.FIELD)-->Line_20 $$ if (FormEditingUtil.findComponentWithBinding(root, binding, component) != null) [ FD ]
Line_9 $$ for (int i = 1; i < words.size() && i < 4; i++) -->Line_10 $$ nameBuilder.append(StringUtil.capitalize(words.get(i)))[ FD ]
Line_12 $$ final String shortClassName = StringUtil.capitalize(InsertComponentProcessor.getShortClassName(component.getComponentClassName()))-->Line_16 $$ nameBuilder.append(shortClassName)[ FD ]
Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))-->Line_21 $$ binding = InsertComponentProcessor.getUniqueBinding(root, nameBuilder.toString())[ FD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_25 $$ return null[ CD ]
Line_17 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)-->Line_18 $$ Project project = root.getProject()[ FD ]
Line_7 $$ if (words.size() > 0) -->Line_18 $$ Project project = root.getProject()[ CD ]
Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))-->Line_13 $$ if (shortClassName.equalsIgnoreCase(nameBuilder.toString())) [ FD ]
Line_9 $$ for (int i = 1; i < words.size() && i < 4; i++) -->Line_10 $$ nameBuilder.append(StringUtil.capitalize(words.get(i)))[ CD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_4 $$ text = Pattern.compile("<.+?>").matcher(text).replaceAll("")[ FD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_20 $$ if (FormEditingUtil.findComponentWithBinding(root, binding, component) != null) [ FD ]
Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))-->Line_16 $$ nameBuilder.append(shortClassName)[ FD ]
Line_7 $$ if (words.size() > 0) -->Line_17 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)[ CD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_3 $$ if (StringUtil.startsWithIgnoreCase(text, PREFIX_HTML)) [ CD ]
Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))-->Line_19 $$ String binding = JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(nameBuilder.toString(), VariableKind.FIELD)[ FD ]
Line_17 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(component)-->Line_20 $$ if (FormEditingUtil.findComponentWithBinding(root, binding, component) != null) [ FD ]
Line_2 $$ public static String suggestBindingFromText(final RadComponent component, String text) -->Line_7 $$ if (words.size() > 0) [ CD ]
Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))-->Line_10 $$ nameBuilder.append(StringUtil.capitalize(words.get(i)))[ FD ]
Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))-->Line_8 $$ StringBuilder nameBuilder = new StringBuilder(StringUtil.decapitalize(words.get(0)))[ FD ]
Line_4 $$ text = Pattern.compile("<.+?>").matcher(text).replaceAll("")-->Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))[ FD ]
Line_13 $$ if (shortClassName.equalsIgnoreCase(nameBuilder.toString())) -->Line_14 $$ return null[ CD ]
Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))-->Line_9 $$ for (int i = 1; i < words.size() && i < 4; i++) [ FD ]
Line_19 $$ String binding = JavaCodeStyleManager.getInstance(project).propertyNameToVariableName(nameBuilder.toString(), VariableKind.FIELD)-->Line_21 $$ binding = InsertComponentProcessor.getUniqueBinding(root, nameBuilder.toString())[ FD ]
Line_6 $$ ArrayList<String> words = new ArrayList<String>(StringUtil.getWordsIn(text))-->Line_10 $$ nameBuilder.append(StringUtil.capitalize(words.get(i)))[ FD ]
