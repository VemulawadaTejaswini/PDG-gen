Line_21 $$ if (i == 1) -->Line_22 $$ cluster.finalizeCluster(conf)[ CD ]
Line_28 $$ while (!toList.isEmpty()) -->Line_29 $$ Path p = toList.remove(0)[ CD ]
Line_25 $$ ArrayList<Path> toList = new ArrayList<Path>()-->Line_26 $$ toList.add(new Path("/"))[ FD ]
Line_32 $$ final String path = status.getPath().toUri().getPath()-->Line_34 $$ found.add(path)[ FD ]
Line_35 $$ if (status.isDirectory()) -->Line_36 $$ toList.add(status.getPath())[ CD ]
Line_5 $$ final Configuration conf = new Configuration()-->Line_22 $$ cluster.finalizeCluster(conf)[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_46 $$ if (cluster != null) [ FD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_28 $$ while (!toList.isEmpty()) [ CD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_27 $$ ArrayList<String> found = new ArrayList<String>()[ CD ]
Line_27 $$ ArrayList<String> found = new ArrayList<String>()-->Line_43 $$ assertEquals("Found an unexpected path while listing filesystem", found.size(), expected.length)[ FD ]
Line_31 $$ for (FileStatus status : statuses) -->Line_36 $$ toList.add(status.getPath())[ FD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_21 $$ if (i == 1) [ FD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_25 $$ ArrayList<Path> toList = new ArrayList<Path>()[ CD ]
Line_29 $$ Path p = toList.remove(0)-->Line_30 $$ FileStatus[] statuses = dfs.listStatus(p)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_46 $$ if (cluster != null) [ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_11 $$ if (cluster != null) [ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_23 $$ cluster.restartNameNode(true)[ FD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_26 $$ toList.add(new Path("/"))[ CD ]
Line_2 $$ public void testUpgradeFromRel2ReservedImage() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_21 $$ if (i == 1) -->Line_23 $$ cluster.restartNameNode(true)[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_22 $$ cluster.finalizeCluster(conf)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_47 $$ cluster.shutdown()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_22 $$ cluster.finalizeCluster(conf)[ FD ]
Line_27 $$ ArrayList<String> found = new ArrayList<String>()-->Line_34 $$ found.add(path)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_18 $$ DistributedFileSystem dfs = cluster.getFileSystem()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_18 $$ DistributedFileSystem dfs = cluster.getFileSystem()[ FD ]
Line_18 $$ DistributedFileSystem dfs = cluster.getFileSystem()-->Line_30 $$ FileStatus[] statuses = dfs.listStatus(p)[ FD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_43 $$ assertEquals("Found an unexpected path while listing filesystem", found.size(), expected.length)[ CD ]
Line_20 $$ for (int i = 0; i < 2; i++) -->Line_21 $$ if (i == 1) [ CD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_12 $$ cluster.shutdown()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster.shutdown()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_23 $$ cluster.restartNameNode(true)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_47 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testUpgradeFromRel2ReservedImage() throws Exception -->Line_5 $$ final Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testUpgradeFromRel2ReservedImage() throws Exception -->Line_3 $$ unpackStorage(HADOOP2_RESERVED_IMAGE, HADOOP_DFS_DIR_TXT)[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_23 $$ cluster.restartNameNode(true)[ FD ]
Line_31 $$ for (FileStatus status : statuses) -->Line_32 $$ final String path = status.getPath().toUri().getPath()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()[ FD ]
Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_47 $$ cluster.shutdown()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_11 $$ if (cluster != null) [ FD ]
Line_25 $$ ArrayList<Path> toList = new ArrayList<Path>()-->Line_36 $$ toList.add(status.getPath())[ FD ]
Line_25 $$ ArrayList<Path> toList = new ArrayList<Path>()-->Line_28 $$ while (!toList.isEmpty()) [ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_22 $$ cluster.finalizeCluster(conf)[ FD ]
Line_25 $$ ArrayList<Path> toList = new ArrayList<Path>()-->Line_29 $$ Path p = toList.remove(0)[ FD ]
Line_28 $$ while (!toList.isEmpty()) -->Line_30 $$ FileStatus[] statuses = dfs.listStatus(p)[ CD ]
Line_31 $$ for (FileStatus status : statuses) -->Line_35 $$ if (status.isDirectory()) [ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_17 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()[ FD ]
Line_11 $$ if (cluster != null) -->Line_12 $$ cluster.shutdown()[ CD ]
Line_27 $$ ArrayList<String> found = new ArrayList<String>()-->Line_41 $$ assertTrue("Did not find expected path " + s, found.contains(s))[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_18 $$ DistributedFileSystem dfs = cluster.getFileSystem()[ FD ]
Line_46 $$ if (cluster != null) -->Line_47 $$ cluster.shutdown()[ CD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build()-->Line_46 $$ if (cluster != null) [ FD ]
