Line_8 $$ CompositeRecordReader ret = null-->Line_13 $$ ret = (CompositeRecordReader) rrCstrMap.get(ident).newInstance(id, taskContext.getConfiguration(), capacity, cmpcl)[ FD ]
Line_21 $$ for (int i = 0; i < capacity; ++i) -->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ CD ]
Line_21 $$ for (int i = 0; i < capacity; ++i) -->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ FD ]
Line_7 $$ final int capacity = kids.size()-->Line_13 $$ ret = (CompositeRecordReader) rrCstrMap.get(ident).newInstance(id, taskContext.getConfiguration(), capacity, cmpcl)[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_8 $$ CompositeRecordReader ret = null[ CD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_6 $$ final CompositeInputSplit spl = (CompositeInputSplit) split[ CD ]
Line_7 $$ final int capacity = kids.size()-->Line_21 $$ for (int i = 0; i < capacity; ++i) [ FD ]
Line_13 $$ ret = (CompositeRecordReader) rrCstrMap.get(ident).newInstance(id, taskContext.getConfiguration(), capacity, cmpcl)-->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_24 $$ return (ComposableRecordReader) ret[ CD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_3 $$ if (!(split instanceof CompositeInputSplit)) [ CD ]
Line_6 $$ final CompositeInputSplit spl = (CompositeInputSplit) split-->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_4 $$ throw new IOException("Invalid split type:" + split.getClass().getName())[ FD ]
Line_8 $$ CompositeRecordReader ret = null-->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_13 $$ ret = (CompositeRecordReader) rrCstrMap.get(ident).newInstance(id, taskContext.getConfiguration(), capacity, cmpcl)[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_22 $$ ret.add(kids.get(i).createRecordReader(spl.get(i), taskContext))[ FD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_7 $$ final int capacity = kids.size()[ CD ]
Line_2 $$ public ComposableRecordReader createRecordReader(InputSplit split, TaskAttemptContext taskContext) throws IOException, InterruptedException -->Line_21 $$ for (int i = 0; i < capacity; ++i) [ CD ]
