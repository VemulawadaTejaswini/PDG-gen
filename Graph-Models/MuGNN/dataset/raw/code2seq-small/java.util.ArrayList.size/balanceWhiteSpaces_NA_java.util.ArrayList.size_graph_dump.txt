Line_2 $$ private void balanceWhiteSpaces() -->Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) [ CD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_31 $$ if (item.myLexemeIndex < wsStartIndex) [ FD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_17 $$ if (wsStartIndex != wsEndIndex) [ CD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_18 $$ wsTokens.configure(wsStartIndex, wsEndIndex)[ FD ]
Line_22 $$ if (recursive) -->Line_23 $$ for (int k = i - 1; k > 1; k--) [ CD ]
Line_17 $$ if (wsStartIndex != wsEndIndex) -->Line_21 $$ item.myLexemeIndex = wsStartIndex + item.myEdgeTokenBinder.getEdgePosition(wsTokens, atEnd, tokenTextGetter)[ CD ]
Line_2 $$ private void balanceWhiteSpaces() -->Line_4 $$ RelativeTokenTextView tokenTextGetter = new RelativeTokenTextView()[ CD ]
Line_5 $$ int lastIndex = 0-->Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)[ FD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_11 $$ boolean recursive = item.myEdgeTokenBinder instanceof WhitespacesAndCommentsBinder.RecursiveBinder[ CD ]
Line_4 $$ RelativeTokenTextView tokenTextGetter = new RelativeTokenTextView()-->Line_19 $$ tokenTextGetter.configure(wsStartIndex)[ FD ]
Line_31 $$ if (item.myLexemeIndex < wsStartIndex) -->Line_32 $$ item.myLexemeIndex = wsStartIndex[ CD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_21 $$ item.myLexemeIndex = wsStartIndex + item.myEdgeTokenBinder.getEdgePosition(wsTokens, atEnd, tokenTextGetter)[ FD ]
Line_7 $$ ProductionMarker item = myProduction.get(i)-->Line_9 $$ assertMarkersBalanced(((StartMarker) item).myDoneMarker != null, item)[ FD ]
Line_23 $$ for (int k = i - 1; k > 1; k--) -->Line_24 $$ ProductionMarker prev = myProduction.get(k)[ CD ]
Line_23 $$ for (int k = i - 1; k > 1; k--) -->Line_25 $$ if (prev.myLexemeIndex >= item.myLexemeIndex) [ CD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)[ CD ]
Line_8 $$ if (item instanceof StartMarker) -->Line_9 $$ assertMarkersBalanced(((StartMarker) item).myDoneMarker != null, item)[ CD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_7 $$ ProductionMarker item = myProduction.get(i)[ CD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_32 $$ item.myLexemeIndex = wsStartIndex[ FD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_14 $$ while (wsStartIndex > prevProductionLexIndex && whitespaceOrComment(myLexTypes[wsStartIndex - 1])) wsStartIndex--[ CD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_14 $$ wsStartIndex--[ FD ]
Line_17 $$ if (wsStartIndex != wsEndIndex) -->Line_18 $$ wsTokens.configure(wsStartIndex, wsEndIndex)[ CD ]
Line_23 $$ for (int k = i - 1; k > 1; k--) -->Line_24 $$ ProductionMarker prev = myProduction.get(k)[ FD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_19 $$ tokenTextGetter.configure(wsStartIndex)[ FD ]
Line_3 $$ RelativeTokenTypesView wsTokens = new RelativeTokenTypesView()-->Line_21 $$ item.myLexemeIndex = wsStartIndex + item.myEdgeTokenBinder.getEdgePosition(wsTokens, atEnd, tokenTextGetter)[ FD ]
Line_2 $$ private void balanceWhiteSpaces() -->Line_5 $$ int lastIndex = 0[ CD ]
Line_25 $$ if (prev.myLexemeIndex >= item.myLexemeIndex) -->Line_26 $$ prev.myLexemeIndex = item.myLexemeIndex[ CD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_34 $$ lastIndex = item.myLexemeIndex[ CD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_8 $$ if (item instanceof StartMarker) [ CD ]
Line_3 $$ RelativeTokenTypesView wsTokens = new RelativeTokenTypesView()-->Line_18 $$ wsTokens.configure(wsStartIndex, wsEndIndex)[ FD ]
Line_2 $$ private void balanceWhiteSpaces() -->Line_3 $$ RelativeTokenTypesView wsTokens = new RelativeTokenTypesView()[ CD ]
Line_17 $$ if (wsStartIndex != wsEndIndex) -->Line_19 $$ tokenTextGetter.configure(wsStartIndex)[ CD ]
Line_4 $$ RelativeTokenTextView tokenTextGetter = new RelativeTokenTextView()-->Line_21 $$ item.myLexemeIndex = wsStartIndex + item.myEdgeTokenBinder.getEdgePosition(wsTokens, atEnd, tokenTextGetter)[ FD ]
Line_34 $$ lastIndex = item.myLexemeIndex-->Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)[ FD ]
Line_17 $$ if (wsStartIndex != wsEndIndex) -->Line_31 $$ if (item.myLexemeIndex < wsStartIndex) [ CD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_12 $$ int prevProductionLexIndex = recursive ? 0 : myProduction.get(i - 1).myLexemeIndex[ CD ]
Line_17 $$ if (wsStartIndex != wsEndIndex) -->Line_22 $$ if (recursive) [ CD ]
Line_7 $$ ProductionMarker item = myProduction.get(i)-->Line_8 $$ if (item instanceof StartMarker) [ FD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_7 $$ ProductionMarker item = myProduction.get(i)[ FD ]
Line_5 $$ int lastIndex = 0-->Line_34 $$ lastIndex = item.myLexemeIndex[ FD ]
Line_13 $$ int wsStartIndex = Math.max(item.myLexemeIndex, lastIndex)-->Line_17 $$ if (wsStartIndex != wsEndIndex) [ FD ]
Line_6 $$ for (int i = 1, size = myProduction.size() - 1; i < size; i++) -->Line_16 $$ while (wsEndIndex < myLexemeCount && whitespaceOrComment(myLexTypes[wsEndIndex])) wsEndIndex++[ CD ]
