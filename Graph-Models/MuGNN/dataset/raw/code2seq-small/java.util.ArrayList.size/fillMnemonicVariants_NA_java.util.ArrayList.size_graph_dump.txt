Line_5 $$ if (container != null) -->Line_6 $$ while (container.getParent() != null) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_28 $$ if (variants.size() == 0) [ CD ]
Line_21 $$ final char ch = value.charAt(i)-->Line_22 $$ if (i == 0 || Character.isUpperCase(ch) || (i > 0 && value.charAt(i - 1) == ' ')) [ FD ]
Line_4 $$ RadContainer container = myComponent.getParent()-->Line_6 $$ while (container.getParent() != null) [ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_5 $$ if (container != null) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_39 $$ return ArrayUtil.toStringArray(variants)[ CD ]
Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() -->Line_12 $$ if (twm != null) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_4 $$ RadContainer container = myComponent.getParent()[ CD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_21 $$ final char ch = value.charAt(i)[ CD ]
Line_6 $$ while (container.getParent() != null) -->Line_7 $$ container = container.getParent()[ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_20 $$ for (int i = 0; i < value.length(); i++) [ FD ]
Line_21 $$ final char ch = value.charAt(i)-->Line_31 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ FD ]
Line_11 $$ SupportCode.TextWithMnemonic twm = DuplicateMnemonicInspection.getTextWithMnemonic(myEditor.getModule(), component)-->Line_12 $$ if (twm != null) [ FD ]
Line_4 $$ RadContainer container = myComponent.getParent()-->Line_5 $$ if (container != null) [ FD ]
Line_4 $$ RadContainer container = myComponent.getParent()-->Line_7 $$ container = container.getParent()[ FD ]
Line_29 $$ for (int i = 0; i < value.length(); i++) -->Line_32 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_3 $$ final StringBuffer usedMnemonics = new StringBuffer()[ CD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_21 $$ final char ch = value.charAt(i)[ FD ]
Line_11 $$ SupportCode.TextWithMnemonic twm = DuplicateMnemonicInspection.getTextWithMnemonic(myEditor.getModule(), component)-->Line_13 $$ usedMnemonics.append(twm.getMnemonicChar())[ FD ]
Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() -->Line_11 $$ SupportCode.TextWithMnemonic twm = DuplicateMnemonicInspection.getTextWithMnemonic(myEditor.getModule(), component)[ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_24 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ FD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_30 $$ final char ch = value.charAt(i)[ FD ]
Line_3 $$ final StringBuffer usedMnemonics = new StringBuffer()-->Line_23 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ FD ]
Line_7 $$ container = container.getParent()-->Line_6 $$ while (container.getParent() != null) [ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_30 $$ final char ch = value.charAt(i)[ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_22 $$ if (i == 0 || Character.isUpperCase(ch) || (i > 0 && value.charAt(i - 1) == ' ')) [ FD ]
Line_21 $$ final char ch = value.charAt(i)-->Line_23 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ FD ]
Line_29 $$ for (int i = 0; i < value.length(); i++) -->Line_30 $$ final char ch = value.charAt(i)[ CD ]
Line_22 $$ if (i == 0 || Character.isUpperCase(ch) || (i > 0 && value.charAt(i - 1) == ' ')) -->Line_23 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ CD ]
Line_7 $$ container = container.getParent()-->Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() [ FD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_29 $$ for (int i = 0; i < value.length(); i++) [ FD ]
Line_4 $$ RadContainer container = myComponent.getParent()-->Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() [ FD ]
Line_23 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) -->Line_24 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ CD ]
Line_28 $$ if (variants.size() == 0) -->Line_29 $$ for (int i = 0; i < value.length(); i++) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_36 $$ if (variants.size() == 0) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_20 $$ for (int i = 0; i < value.length(); i++) [ CD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_24 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ FD ]
Line_31 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) -->Line_32 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ CD ]
Line_3 $$ final StringBuffer usedMnemonics = new StringBuffer()-->Line_13 $$ usedMnemonics.append(twm.getMnemonicChar())[ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_29 $$ for (int i = 0; i < value.length(); i++) [ FD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_32 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ FD ]
Line_36 $$ if (variants.size() == 0) -->Line_37 $$ variants.add(value)[ CD ]
Line_30 $$ final char ch = value.charAt(i)-->Line_31 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ FD ]
Line_29 $$ for (int i = 0; i < value.length(); i++) -->Line_31 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ CD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_32 $$ variants.add(value.substring(0, i) + "&" + value.substring(i))[ FD ]
Line_20 $$ for (int i = 0; i < value.length(); i++) -->Line_22 $$ if (i == 0 || Character.isUpperCase(ch) || (i > 0 && value.charAt(i - 1) == ' ')) [ CD ]
Line_5 $$ if (container != null) -->Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() [ CD ]
Line_3 $$ final StringBuffer usedMnemonics = new StringBuffer()-->Line_31 $$ if (Character.isLetter(ch) && usedMnemonics.indexOf(String.valueOf(ch).toUpperCase()) < 0) [ FD ]
Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() -->Line_15 $$ return true[ CD ]
Line_12 $$ if (twm != null) -->Line_13 $$ usedMnemonics.append(twm.getMnemonicChar())[ CD ]
Line_9 $$ FormEditingUtil.iterate(container, new FormEditingUtil.ComponentVisitor() -->Line_11 $$ SupportCode.TextWithMnemonic twm = DuplicateMnemonicInspection.getTextWithMnemonic(myEditor.getModule(), component)[ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_21 $$ final char ch = value.charAt(i)[ FD ]
Line_2 $$ private String[] fillMnemonicVariants(final String value) -->Line_37 $$ variants.add(value)[ FD ]
Line_29 $$ for (int i = 0; i < value.length(); i++) -->Line_30 $$ final char ch = value.charAt(i)[ FD ]
