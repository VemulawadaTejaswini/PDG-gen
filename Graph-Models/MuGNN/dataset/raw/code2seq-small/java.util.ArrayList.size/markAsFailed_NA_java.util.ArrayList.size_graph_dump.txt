Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_13 $$ if (pendingContext.committed() == false) [ CD ]
Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)[ CD ]
Line_17 $$ if (pendingContext.equals(failedContext)) -->Line_20 $$ if (state.supersedes(pendingState)) [ CD ]
Line_16 $$ final ClusterState pendingState = pendingContext.state-->Line_20 $$ if (state.supersedes(pendingState)) [ FD ]
Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_13 $$ if (pendingContext.committed() == false) [ FD ]
Line_10 $$ ArrayList<ClusterStateContext> statesToRemove = new ArrayList()-->Line_21 $$ statesToRemove.add(pendingContext)[ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_7 $$ if (failedContext.committed() == false) [ CD ]
Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())-->Line_7 $$ if (failedContext.committed() == false) [ FD ]
Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())-->Line_17 $$ if (pendingContext.equals(failedContext)) [ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_23 $$ pendingContext.listener.onNewClusterStateFailed(reason)[ FD ]
Line_10 $$ ArrayList<ClusterStateContext> statesToRemove = new ArrayList()-->Line_26 $$ pendingStates.removeAll(statesToRemove)[ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_20 $$ if (state.supersedes(pendingState)) [ FD ]
Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_16 $$ final ClusterState pendingState = pendingContext.state[ CD ]
Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())-->Line_22 $$ logger.debug("failing committed state [ FD ]
Line_10 $$ ArrayList<ClusterStateContext> statesToRemove = new ArrayList()-->Line_18 $$ statesToRemove.add(pendingContext)[ FD ]
Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_21 $$ statesToRemove.add(pendingContext)[ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_4 $$ if (failedContext == null) [ CD ]
Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)[ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_19 $$ pendingContext.listener.onNewClusterStateFailed(reason)[ FD ]
Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_22 $$ logger.debug("failing committed state [ FD ]
Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) -->Line_17 $$ if (pendingContext.equals(failedContext)) [ CD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_10 $$ ArrayList<ClusterStateContext> statesToRemove = new ArrayList()[ CD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())[ CD ]
Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_18 $$ statesToRemove.add(pendingContext)[ FD ]
Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())-->Line_4 $$ if (failedContext == null) [ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_11 $$ for (int index = 0; index < pendingStates.size(); index++) [ CD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_26 $$ pendingStates.removeAll(statesToRemove)[ CD ]
Line_20 $$ if (state.supersedes(pendingState)) -->Line_21 $$ statesToRemove.add(pendingContext)[ CD ]
Line_20 $$ if (state.supersedes(pendingState)) -->Line_23 $$ pendingContext.listener.onNewClusterStateFailed(reason)[ CD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_27 $$ assert findState(state.stateUUID()) == null : "state was marked as processed but can still be found in pending list " + state[ FD ]
Line_17 $$ if (pendingContext.equals(failedContext)) -->Line_18 $$ statesToRemove.add(pendingContext)[ CD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_5 $$ throw new IllegalArgumentException("can't resolve failed cluster state with uuid [" + state.stateUUID() + "], version [" + state.version() + "]")[ FD ]
Line_12 $$ final ClusterStateContext pendingContext = pendingStates.get(index)-->Line_17 $$ if (pendingContext.equals(failedContext)) [ FD ]
Line_2 $$ public synchronized void markAsFailed(ClusterState state, Throwable reason) -->Line_3 $$ final ClusterStateContext failedContext = findState(state.stateUUID())[ FD ]
Line_20 $$ if (state.supersedes(pendingState)) -->Line_22 $$ logger.debug("failing committed state [ CD ]
Line_17 $$ if (pendingContext.equals(failedContext)) -->Line_19 $$ pendingContext.listener.onNewClusterStateFailed(reason)[ CD ]
