Line_11 $$ for (FieldResult field : entity.fields()) -->Line_31 $$ properties.add(index, field)[ FD ]
Line_22 $$ String reducedName = name.substring(0, dotIndex)-->Line_23 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)[ FD ]
Line_25 $$ int index = propertyNames.size()-->Line_31 $$ properties.add(index, field)[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_17 $$ PersistentClass pc = context.getMetadataCollector().getEntityBinding(entity.entityClass().getName())[ CD ]
Line_23 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)-->Line_24 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ FD ]
Line_35 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_7 $$ int entityAliasIndex = 0[ CD ]
Line_74 $$ for (ColumnResult columnResult : constructorResult.columns()) -->Line_75 $$ columnReturns.add(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(columnResult.name()), columnResult.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(columnResult.type().getName()) : null))[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_3 $$ if (ann == null)[ CD ]
Line_12 $$ String name = field.name()-->Line_39 $$ if ("class".equals(name)) [ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())[ CD ]
Line_79 $$ if (isDefault) -->Line_82 $$ context.getMetadataCollector().addResultSetMapping(definition)[ CD ]
Line_72 $$ for (ConstructorResult constructorResult : ann.classes()) -->Line_74 $$ for (ColumnResult columnResult : constructorResult.columns()) [ FD ]
Line_55 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_57 $$ propertyResults.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))[ FD ]
Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_53 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_9 $$ List<FieldResult> properties = new ArrayList<FieldResult>()-->Line_31 $$ properties.add(index, field)[ FD ]
Line_12 $$ String name = field.name()-->Line_22 $$ String reducedName = name.substring(0, dotIndex)[ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_43 $$ throw new MappingException("duplicate @FieldResult for property " + name + " on @Entity " + entity.entityClass().getName() + " in " + ann.name())[ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_19 $$ throw new MappingException(String.format(Locale.ENGLISH, "Could not resolve entity [%s] referenced in SqlResultSetMapping [%s]", entity.entityClass().getName(), ann.name()))[ FD ]
Line_55 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_63 $$ if (propertyResults.isEmpty()) [ FD ]
Line_28 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index-->Line_30 $$ propertyNames.add(index, name)[ FD ]
Line_12 $$ String name = field.name()-->Line_15 $$ propertyNames.add(name)[ FD ]
Line_22 $$ String reducedName = name.substring(0, dotIndex)-->Line_24 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_79 $$ if (isDefault) [ CD ]
Line_10 $$ List<String> propertyNames = new ArrayList<String>()-->Line_27 $$ int currentIndex = getIndexOfFirstMatchingProperty(propertyNames, follower)[ FD ]
Line_50 $$ intermediateResults = new ArrayList<String>()-->Line_51 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_31 $$ properties.add(index, field)[ CD ]
Line_35 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_56 $$ for (Map.Entry<String, ArrayList<String>> entry : propertyResultsTmp.entrySet()) [ FD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_6 $$ LOG.debugf("Binding result set mapping: %s", definition.getName())[ FD ]
Line_46 $$ final String quotingNormalizedColumnName = normalizeColumnQuoting(propertyresult.column())-->Line_53 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_2 $$ public void doSecondPass(Map persistentClasses) throws MappingException -->Line_6 $$ LOG.debugf("Binding result set mapping: %s", definition.getName())[ CD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_80 $$ context.getMetadataCollector().addDefaultResultSetMapping(definition)[ FD ]
Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_49 $$ if (intermediateResults == null) [ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_59 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) [ FD ]
Line_3 $$ if (ann == null)-->Line_4 $$ return[ CD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_15 $$ propertyNames.add(name)[ CD ]
Line_28 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index-->Line_31 $$ properties.add(index, field)[ FD ]
Line_56 $$ for (Map.Entry<String, ArrayList<String>> entry : propertyResultsTmp.entrySet()) -->Line_57 $$ propertyResults.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]))[ FD ]
Line_59 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) -->Line_61 $$ propertyResults.put("class", new String[] [ CD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_14 $$ properties.add(field)[ CD ]
Line_12 $$ String name = field.name()-->Line_21 $$ int dotIndex = name.lastIndexOf('.')[ FD ]
Line_11 $$ for (FieldResult field : entity.fields()) -->Line_14 $$ properties.add(field)[ FD ]
Line_55 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_61 $$ propertyResults.put("class", new String[] [ FD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_77 $$ definition.addQueryReturn(new NativeSQLQueryConstructorReturn(constructorResult.targetClass(), columnReturns))[ FD ]
Line_17 $$ PersistentClass pc = context.getMetadataCollector().getEntityBinding(entity.entityClass().getName())-->Line_18 $$ if (pc == null) [ FD ]
Line_21 $$ int dotIndex = name.lastIndexOf('.')-->Line_22 $$ String reducedName = name.substring(0, dotIndex)[ FD ]
Line_50 $$ intermediateResults = new ArrayList<String>()-->Line_53 $$ intermediateResults.add(quotingNormalizedColumnName)[ FD ]
Line_37 $$ final FieldResult propertyresult = (FieldResult) property-->Line_46 $$ final String quotingNormalizedColumnName = normalizeColumnQuoting(propertyresult.column())[ FD ]
Line_63 $$ if (propertyResults.isEmpty()) -->Line_64 $$ propertyResults = java.util.Collections.emptyMap()[ CD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_66 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)[ FD ]
Line_55 $$ Map<String, String[]> propertyResults = new HashMap<String, String[]>()-->Line_64 $$ propertyResults = java.util.Collections.emptyMap()[ FD ]
Line_37 $$ final FieldResult propertyresult = (FieldResult) property-->Line_38 $$ final String name = propertyresult.name()[ FD ]
Line_10 $$ List<String> propertyNames = new ArrayList<String>()-->Line_15 $$ propertyNames.add(name)[ FD ]
Line_35 $$ Map<String, ArrayList<String>> propertyResultsTmp = new HashMap<String, ArrayList<String>>()-->Line_51 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_12 $$ String name = field.name()-->Line_13 $$ if (name.indexOf('.') == -1) [ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_23 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)[ CD ]
Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_51 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_69 $$ for (ColumnResult column : ann.columns()) -->Line_70 $$ definition.addQueryReturn(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(column.name()), column.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(column.type().getName()) : null))[ FD ]
Line_10 $$ List<String> propertyNames = new ArrayList<String>()-->Line_25 $$ int index = propertyNames.size()[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_18 $$ if (pc == null) [ CD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_70 $$ definition.addQueryReturn(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(column.name()), column.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(column.type().getName()) : null))[ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_17 $$ PersistentClass pc = context.getMetadataCollector().getEntityBinding(entity.entityClass().getName())[ FD ]
Line_10 $$ List<String> propertyNames = new ArrayList<String>()-->Line_30 $$ propertyNames.add(index, name)[ FD ]
Line_7 $$ int entityAliasIndex = 0-->Line_66 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)[ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_60 $$ final String quotingNormalizedName = normalizeColumnQuoting(entity.discriminatorColumn())[ FD ]
Line_47 $$ String key = StringHelper.root(name)-->Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)[ FD ]
Line_25 $$ int index = propertyNames.size()-->Line_30 $$ propertyNames.add(index, name)[ FD ]
Line_72 $$ for (ConstructorResult constructorResult : ann.classes()) -->Line_77 $$ definition.addQueryReturn(new NativeSQLQueryConstructorReturn(constructorResult.targetClass(), columnReturns))[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_22 $$ String reducedName = name.substring(0, dotIndex)[ CD ]
Line_17 $$ PersistentClass pc = context.getMetadataCollector().getEntityBinding(entity.entityClass().getName())-->Line_23 $$ Iterator parentPropItr = getSubPropertyIterator(pc, reducedName)[ FD ]
Line_26 $$ for (String follower : followers) -->Line_27 $$ int currentIndex = getIndexOfFirstMatchingProperty(propertyNames, follower)[ FD ]
Line_34 $$ Set<String> uniqueReturnProperty = new HashSet<String>()-->Line_42 $$ if (uniqueReturnProperty.contains(name)) [ FD ]
Line_12 $$ String name = field.name()-->Line_24 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ FD ]
Line_12 $$ String name = field.name()-->Line_42 $$ if (uniqueReturnProperty.contains(name)) [ FD ]
Line_73 $$ List<NativeSQLQueryScalarReturn> columnReturns = new ArrayList<NativeSQLQueryScalarReturn>()-->Line_75 $$ columnReturns.add(new NativeSQLQueryScalarReturn(normalizeColumnQuoting(columnResult.name()), columnResult.type() != null ? context.getMetadataCollector().getTypeResolver().heuristicType(columnResult.type().getName()) : null))[ FD ]
Line_9 $$ List<FieldResult> properties = new ArrayList<FieldResult>()-->Line_14 $$ properties.add(field)[ FD ]
Line_49 $$ if (intermediateResults == null) -->Line_51 $$ propertyResultsTmp.put(key, intermediateResults)[ CD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_30 $$ propertyNames.add(index, name)[ CD ]
Line_34 $$ Set<String> uniqueReturnProperty = new HashSet<String>()-->Line_45 $$ uniqueReturnProperty.add(name)[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_21 $$ int dotIndex = name.lastIndexOf('.')[ CD ]
Line_47 $$ String key = StringHelper.root(name)-->Line_51 $$ propertyResultsTmp.put(key, intermediateResults)[ FD ]
Line_25 $$ int index = propertyNames.size()-->Line_28 $$ index = currentIndex != -1 && currentIndex < index ? currentIndex : index[ FD ]
Line_79 $$ if (isDefault) -->Line_80 $$ context.getMetadataCollector().addDefaultResultSetMapping(definition)[ CD ]
Line_12 $$ String name = field.name()-->Line_45 $$ uniqueReturnProperty.add(name)[ FD ]
Line_8 $$ for (EntityResult entity : ann.entities()) -->Line_11 $$ for (FieldResult field : entity.fields()) [ FD ]
Line_12 $$ String name = field.name()-->Line_47 $$ String key = StringHelper.root(name)[ FD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_82 $$ context.getMetadataCollector().addResultSetMapping(definition)[ FD ]
Line_49 $$ if (intermediateResults == null) -->Line_50 $$ intermediateResults = new ArrayList<String>()[ CD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_24 $$ List<String> followers = getFollowers(parentPropItr, reducedName, name)[ CD ]
Line_11 $$ for (FieldResult field : entity.fields()) -->Line_12 $$ String name = field.name()[ FD ]
Line_13 $$ if (name.indexOf('.') == -1) -->Line_25 $$ int index = propertyNames.size()[ CD ]
Line_12 $$ String name = field.name()-->Line_30 $$ propertyNames.add(index, name)[ FD ]
Line_66 $$ NativeSQLQueryRootReturn result = new NativeSQLQueryRootReturn("alias" + entityAliasIndex++, entity.entityClass().getName(), propertyResults, LockMode.READ)-->Line_67 $$ definition.addQueryReturn(result)[ FD ]
Line_59 $$ if (!BinderHelper.isEmptyAnnotationValue(entity.discriminatorColumn())) -->Line_60 $$ final String quotingNormalizedName = normalizeColumnQuoting(entity.discriminatorColumn())[ CD ]
Line_5 $$ ResultSetMappingDefinition definition = new ResultSetMappingDefinition(ann.name())-->Line_67 $$ definition.addQueryReturn(result)[ FD ]
Line_48 $$ ArrayList<String> intermediateResults = propertyResultsTmp.get(key)-->Line_50 $$ intermediateResults = new ArrayList<String>()[ FD ]
