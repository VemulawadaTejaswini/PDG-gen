Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)[ FD ]
Line_29 $$ if (randomBoolean()) -->Line_35 $$ indexRandom(true, docs)[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_3 $$ if (backwardsCluster().numNewDataNodes() == 0) [ CD ]
Line_3 $$ if (backwardsCluster().numNewDataNodes() == 0) -->Line_4 $$ backwardsCluster().startNewNode()[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_43 $$ final int numIters = randomIntBetween(10, 20)[ CD ]
Line_36 $$ if (compatibilityVersion().before(Version.V_1_3_0)) -->Line_37 $$ assertNoFailures(backwardsCluster().internalCluster().dataNodeClient().admin().indices().prepareRefresh().setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get())[ CD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_44 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_21 $$ if (randomBoolean()) -->Line_26 $$ backwardsCluster().allowOnAllNodes("test")[ CD ]
Line_9 $$ int numDocs = randomIntBetween(100, 150)-->Line_30 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_8 $$ assertAllShardsOnNodes("test", backwardsCluster().backwardsNodePattern())[ CD ]
Line_12 $$ IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]-->Line_18 $$ indexRandom(true, docs)[ FD ]
Line_21 $$ if (randomBoolean()) -->Line_23 $$ backwardsCluster().allowOnlyNewNodes("test")[ CD ]
Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)-->Line_32 $$ ids.add(id)[ FD ]
Line_12 $$ IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs]-->Line_35 $$ indexRandom(true, docs)[ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_42 $$ ensureYellow("test")[ CD ]
Line_29 $$ if (randomBoolean()) -->Line_30 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_21 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_19 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()[ CD ]
Line_31 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i)-->Line_32 $$ ids.add(id)[ FD ]
Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)-->Line_33 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(numDocs + i))[ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_6 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put("index.routing.allocation.exclude._name", backwardsCluster().newNodePattern()).put(indexSettings())))[ CD ]
Line_44 $$ for (int i = 0; i < numIters; i++) -->Line_45 $$ assertSearchHits(client().prepareSearch().setSize(ids.size()).get(), ids.toArray(new String[ids.size()]))[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_29 $$ if (randomBoolean()) [ CD ]
Line_9 $$ int numDocs = randomIntBetween(100, 150)-->Line_13 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_30 $$ for (int i = 0; i < numDocs; i++) -->Line_32 $$ ids.add(id)[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_10 $$ ArrayList<String> ids = new ArrayList()[ CD ]
Line_29 $$ if (randomBoolean()) -->Line_39 $$ numDocs *= 2[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_7 $$ ensureYellow()[ CD ]
Line_30 $$ for (int i = 0; i < numDocs; i++) -->Line_33 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(numDocs + i))[ CD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_16 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i))[ CD ]
Line_19 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()-->Line_20 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)[ CD ]
Line_9 $$ int numDocs = randomIntBetween(100, 150)-->Line_20 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_9 $$ int numDocs = randomIntBetween(100, 150)-->Line_39 $$ numDocs *= 2[ FD ]
Line_10 $$ ArrayList<String> ids = new ArrayList()-->Line_45 $$ assertSearchHits(client().prepareSearch().setSize(ids.size()).get(), ids.toArray(new String[ids.size()]))[ FD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_30 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)-->Line_16 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i))[ FD ]
Line_43 $$ final int numIters = randomIntBetween(10, 20)-->Line_44 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_10 $$ ArrayList<String> ids = new ArrayList()-->Line_15 $$ ids.add(id)[ FD ]
Line_30 $$ for (int i = 0; i < numDocs; i++) -->Line_44 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_9 $$ int numDocs = randomIntBetween(100, 150)[ CD ]
Line_30 $$ for (int i = 0; i < numDocs; i++) -->Line_31 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i)[ CD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_16 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i))[ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_47 $$ assertVersionCreated(compatibilityVersion(), "test")[ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_18 $$ indexRandom(true, docs)[ CD ]
Line_10 $$ ArrayList<String> ids = new ArrayList()-->Line_32 $$ ids.add(id)[ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_12 $$ IndexRequestBuilder[] docs = new IndexRequestBuilder[numDocs][ CD ]
Line_14 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(i)-->Line_15 $$ ids.add(id)[ FD ]
Line_31 $$ String id = randomRealisticUnicodeOfLength(10) + String.valueOf(numDocs + i)-->Line_33 $$ docs[i] = client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(numDocs + i))[ FD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_44 $$ for (int i = 0; i < numIters; i++) [ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_13 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_13 $$ for (int i = 0; i < numDocs; i++) -->Line_15 $$ ids.add(id)[ CD ]
Line_29 $$ if (randomBoolean()) -->Line_36 $$ if (compatibilityVersion().before(Version.V_1_3_0)) [ CD ]
Line_2 $$ public void testRecoverFromPreviousVersion() throws ExecutionException, InterruptedException -->Line_20 $$ assertHitCount(countResponse, numDocs)[ CD ]
