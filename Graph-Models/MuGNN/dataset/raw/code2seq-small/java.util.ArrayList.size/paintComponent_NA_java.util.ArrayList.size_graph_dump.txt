Line_9 $$ g = g.create()-->Line_23 $$ g.setColor(JBColor.BLACK)[ FD ]
Line_29 $$ FontMetrics fm = g.getFontMetrics()-->Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_23 $$ g.setColor(JBColor.BLACK)[ CD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ CD ]
Line_17 $$ int y = bounds.y - myBounds.y + getY()-->Line_31 $$ y += (bounds.height - fm.getHeight()) / 2[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_22 $$ y = bounds.y - myBounds.y + getY()[ CD ]
Line_3 $$ if (update()) -->Line_7 $$ repaint()[ CD ]
Line_9 $$ g = g.create()-->Line_10 $$ if (g instanceof Graphics2D) [ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_14 $$ ScreenInfo info = myScreenList.get(i)[ FD ]
Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_16 $$ int x = bounds.x - myBounds.x + getX()-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_9 $$ g = g.create()-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_17 $$ int y = bounds.y - myBounds.y + getY()[ CD ]
Line_16 $$ int x = bounds.x - myBounds.x + getX()-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_3 $$ if (update()) -->Line_6 $$ revalidate()[ CD ]
Line_16 $$ int x = bounds.x - myBounds.x + getX()-->Line_21 $$ x = bounds.x - myBounds.x + getX()[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_10 $$ if (g instanceof Graphics2D) [ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_26 $$ int size = Math.min(bounds.width << 1, bounds.height)[ CD ]
Line_9 $$ g = g.create()-->Line_28 $$ g.setFont(new Font("Monospaced", Font.BOLD, size))[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) [ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_34 $$ g.dispose()[ CD ]
Line_22 $$ y = bounds.y - myBounds.y + getY()-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_9 $$ g = g.create()-->Line_34 $$ g.dispose()[ FD ]
Line_21 $$ x = bounds.x - myBounds.x + getX()-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_16 $$ int x = bounds.x - myBounds.x + getX()[ CD ]
Line_17 $$ int y = bounds.y - myBounds.y + getY()-->Line_22 $$ y = bounds.y - myBounds.y + getY()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_9 $$ g = g.create()-->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_10 $$ if (g instanceof Graphics2D) -->Line_11 $$ UISettings.setupAntialiasing(g)[ CD ]
Line_21 $$ x = bounds.x - myBounds.x + getX()-->Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2[ FD ]
Line_22 $$ y = bounds.y - myBounds.y + getY()-->Line_31 $$ y += (bounds.height - fm.getHeight()) / 2[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ CD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_15 $$ Rectangle bounds = info.myOuterBounds[ CD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_32 $$ g.drawString(id, x, y + size)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_9 $$ g = g.create()[ CD ]
Line_3 $$ if (update()) -->Line_5 $$ setMinimumSize(myBounds.getSize())[ CD ]
Line_31 $$ y += (bounds.height - fm.getHeight()) / 2-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_21 $$ x = bounds.x - myBounds.x + getX()-->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_31 $$ y += (bounds.height - fm.getHeight()) / 2[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_11 $$ UISettings.setupAntialiasing(g)[ FD ]
Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2-->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_3 $$ if (update()) -->Line_4 $$ setPreferredSize(myBounds.getSize())[ CD ]
Line_15 $$ Rectangle bounds = info.myOuterBounds-->Line_20 $$ bounds = info.myInnerBounds[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_20 $$ bounds = info.myInnerBounds[ CD ]
Line_29 $$ FontMetrics fm = g.getFontMetrics()-->Line_31 $$ y += (bounds.height - fm.getHeight()) / 2[ FD ]
Line_25 $$ String id = String.valueOf(i + 1)-->Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_9 $$ g = g.create()[ FD ]
Line_9 $$ g = g.create()-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_18 $$ g.setColor(JBColor.BLUE)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_10 $$ if (g instanceof Graphics2D) [ CD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_18 $$ g.setColor(JBColor.BLUE)[ CD ]
Line_21 $$ x = bounds.x - myBounds.x + getX()-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_17 $$ int y = bounds.y - myBounds.y + getY()-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_29 $$ FontMetrics fm = g.getFontMetrics()[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_23 $$ g.setColor(JBColor.BLACK)[ FD ]
Line_9 $$ g = g.create()-->Line_11 $$ UISettings.setupAntialiasing(g)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_14 $$ ScreenInfo info = myScreenList.get(i)[ CD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_28 $$ g.setFont(new Font("Monospaced", Font.BOLD, size))[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_3 $$ if (update()) [ CD ]
Line_16 $$ int x = bounds.x - myBounds.x + getX()-->Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_27 $$ g.setColor(JBColor.WHITE)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_34 $$ g.dispose()[ FD ]
Line_17 $$ int y = bounds.y - myBounds.y + getY()-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_25 $$ String id = String.valueOf(i + 1)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_28 $$ g.setFont(new Font("Monospaced", Font.BOLD, size))[ FD ]
Line_16 $$ int x = bounds.x - myBounds.x + getX()-->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_29 $$ FontMetrics fm = g.getFontMetrics()[ CD ]
Line_9 $$ g = g.create()-->Line_29 $$ FontMetrics fm = g.getFontMetrics()[ FD ]
Line_22 $$ y = bounds.y - myBounds.y + getY()-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_9 $$ g = g.create()-->Line_27 $$ g.setColor(JBColor.WHITE)[ FD ]
Line_31 $$ y += (bounds.height - fm.getHeight()) / 2-->Line_19 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_25 $$ String id = String.valueOf(i + 1)-->Line_32 $$ g.drawString(id, x, y + size)[ FD ]
Line_30 $$ x += (bounds.width - fm.stringWidth(id)) / 2-->Line_24 $$ g.fillRect(x, y, bounds.width, bounds.height)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_27 $$ g.setColor(JBColor.WHITE)[ CD ]
Line_9 $$ g = g.create()-->Line_18 $$ g.setColor(JBColor.BLUE)[ FD ]
Line_13 $$ for (int i = 0; i < myScreenList.size(); i++) -->Line_21 $$ x = bounds.x - myBounds.x + getX()[ CD ]
