Line_7 $$ do -->Line_11 $$ length.add(fromFile)[ CD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_6 $$ final HashMap<String, Double> sb = new HashMap<String, Double>()[ CD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)[ FD ]
Line_7 $$ do -->Line_24 $$ bytes -= fromFile[ CD ]
Line_7 $$ do -->Line_26 $$ CompressionCodec codec = compressionCodecs.getCodec(current.getPath())[ CD ]
Line_6 $$ final HashMap<String, Double> sb = new HashMap<String, Double>()-->Line_19 $$ sb.put(l, j.doubleValue() + tedium)[ FD ]
Line_6 $$ final HashMap<String, Double> sb = new HashMap<String, Double>()-->Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_33 $$ Collections.sort(sort, hostRank)[ CD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_7 $$ do [ CD ]
Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())-->Line_34 $$ final String[] hosts = new String[Math.min(nLocs, sort.size())][ FD ]
Line_6 $$ final HashMap<String, Double> sb = new HashMap<String, Double>()-->Line_15 $$ Double j = sb.get(l)[ FD ]
Line_24 $$ bytes -= fromFile-->Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_35 $$ for (int i = 0; i < nLocs && i < sort.size(); ++i) [ CD ]
Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())-->Line_36 $$ hosts[i] = sort.get(i).getKey()[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_7 $$ do [ FD ]
Line_13 $$ final double tedium = loc.getLength() / (1.0 * bytes)-->Line_17 $$ sb.put(l, tedium)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_12 $$ for (BlockLocation loc : inputDir.locationsFor(current, currentStart, fromFile)) [ FD ]
Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())-->Line_33 $$ Collections.sort(sort, hostRank)[ FD ]
Line_3 $$ final ArrayList<Path> paths = new ArrayList<Path>()-->Line_38 $$ return new CombineFileSplit(paths.toArray(new Path[0]), toLongArray(start), toLongArray(length), hosts)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_3 $$ final ArrayList<Path> paths = new ArrayList<Path>()[ CD ]
Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)-->Line_11 $$ length.add(fromFile)[ FD ]
Line_14 $$ for (String l : loc.getHosts()) -->Line_15 $$ Double j = sb.get(l)[ FD ]
Line_35 $$ for (int i = 0; i < nLocs && i < sort.size(); ++i) -->Line_36 $$ hosts[i] = sort.get(i).getKey()[ FD ]
Line_25 $$ CompressionCodecFactory compressionCodecs = new CompressionCodecFactory(conf)-->Line_26 $$ CompressionCodec codec = compressionCodecs.getCodec(current.getPath())[ FD ]
Line_5 $$ final ArrayList<Long> length = new ArrayList<Long>()-->Line_11 $$ length.add(fromFile)[ FD ]
Line_14 $$ for (String l : loc.getHosts()) -->Line_17 $$ sb.put(l, tedium)[ FD ]
Line_7 $$ do -->Line_9 $$ start.add(currentStart)[ CD ]
Line_4 $$ final ArrayList<Long> start = new ArrayList<Long>()-->Line_9 $$ start.add(currentStart)[ FD ]
Line_35 $$ for (int i = 0; i < nLocs && i < sort.size(); ++i) -->Line_36 $$ hosts[i] = sort.get(i).getKey()[ CD ]
Line_5 $$ final ArrayList<Long> length = new ArrayList<Long>()-->Line_38 $$ return new CombineFileSplit(paths.toArray(new Path[0]), toLongArray(start), toLongArray(length), hosts)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_34 $$ final String[] hosts = new String[Math.min(nLocs, sort.size())][ CD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_34 $$ final String[] hosts = new String[Math.min(nLocs, sort.size())][ FD ]
Line_7 $$ do -->Line_25 $$ CompressionCodecFactory compressionCodecs = new CompressionCodecFactory(conf)[ CD ]
Line_3 $$ final ArrayList<Path> paths = new ArrayList<Path>()-->Line_8 $$ paths.add(current.getPath())[ FD ]
Line_7 $$ do -->Line_27 $$ if (current.getLen() - currentStart == 0 || codec != null) [ CD ]
Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)-->Line_12 $$ for (BlockLocation loc : inputDir.locationsFor(current, currentStart, fromFile)) [ FD ]
Line_24 $$ bytes -= fromFile-->Line_7 $$ do [ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_5 $$ final ArrayList<Long> length = new ArrayList<Long>()[ CD ]
Line_14 $$ for (String l : loc.getHosts()) -->Line_19 $$ sb.put(l, j.doubleValue() + tedium)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())[ CD ]
Line_32 $$ final ArrayList<Entry<String, Double>> sort = new ArrayList<Entry<String, Double>>(sb.entrySet())-->Line_35 $$ for (int i = 0; i < nLocs && i < sort.size(); ++i) [ FD ]
Line_12 $$ for (BlockLocation loc : inputDir.locationsFor(current, currentStart, fromFile)) -->Line_13 $$ final double tedium = loc.getLength() / (1.0 * bytes)[ FD ]
Line_12 $$ for (BlockLocation loc : inputDir.locationsFor(current, currentStart, fromFile)) -->Line_14 $$ for (String l : loc.getHosts()) [ FD ]
Line_15 $$ Double j = sb.get(l)-->Line_16 $$ if (null == j) [ FD ]
Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)-->Line_24 $$ bytes -= fromFile[ FD ]
Line_4 $$ final ArrayList<Long> start = new ArrayList<Long>()-->Line_38 $$ return new CombineFileSplit(paths.toArray(new Path[0]), toLongArray(start), toLongArray(length), hosts)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_38 $$ return new CombineFileSplit(paths.toArray(new Path[0]), toLongArray(start), toLongArray(length), hosts)[ CD ]
Line_7 $$ do -->Line_10 $$ final long fromFile = Math.min(bytes, current.getLen() - currentStart)[ CD ]
Line_6 $$ final HashMap<String, Double> sb = new HashMap<String, Double>()-->Line_17 $$ sb.put(l, tedium)[ FD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_24 $$ bytes -= fromFile[ FD ]
Line_16 $$ if (null == j) -->Line_17 $$ sb.put(l, tedium)[ CD ]
Line_2 $$ CombineFileSplit splitFor(FilePool inputDir, long bytes, int nLocs) throws IOException -->Line_4 $$ final ArrayList<Long> start = new ArrayList<Long>()[ CD ]
Line_15 $$ Double j = sb.get(l)-->Line_19 $$ sb.put(l, j.doubleValue() + tedium)[ FD ]
Line_7 $$ do -->Line_8 $$ paths.add(current.getPath())[ CD ]
Line_16 $$ if (null == j) -->Line_19 $$ sb.put(l, j.doubleValue() + tedium)[ CD ]
Line_27 $$ if (current.getLen() - currentStart == 0 || codec != null) -->Line_28 $$ current = files.get(++idx % files.size())[ CD ]
