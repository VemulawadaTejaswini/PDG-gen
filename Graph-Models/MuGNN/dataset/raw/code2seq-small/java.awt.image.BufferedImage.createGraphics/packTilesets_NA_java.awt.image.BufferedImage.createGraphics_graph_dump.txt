Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_5 $$ Graphics g[ CD ]
Line_7 $$ for (TiledMapTileSet set : tilesetsToPack.values()) -->Line_13 $$ int firstgid = set.getProperties().get("firstgid", Integer.class)[ FD ]
Line_26 $$ g = tile.createGraphics()-->Line_27 $$ g.drawImage(layout.image, 0, 0, tileWidth, tileHeight, (int) tileLocation.x, (int) tileLocation.y, (int) tileLocation.x + tileWidth, (int) tileLocation.y + tileHeight, null)[ FD ]
Line_25 $$ tile = new BufferedImage(tileWidth, tileHeight, BufferedImage.TYPE_4BYTE_ABGR)-->Line_26 $$ g = tile.createGraphics()[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_32 $$ final String separator = "_"[ CD ]
Line_15 $$ TileSetLayout layout = new TileSetLayout(firstgid, set, inputDirHandle)-->Line_24 $$ tileLocation = layout.getLocation(gid)[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_18 $$ if (usedIds != null && !usedIds.contains(gid)) [ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_18 $$ if (usedIds != null && !usedIds.contains(gid)) [ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_17 $$ boolean verbose = this.settings.verbose[ CD ]
Line_38 $$ File relativeTilesetOutputDir = new File(tilesetOutputDir)-->Line_39 $$ File outputDirTilesets = new File(relativeTilesetOutputDir.getCanonicalPath())[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_34 $$ packer.addImage(tile, regionName)[ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_28 $$ if (verbose) [ CD ]
Line_12 $$ int tileHeight = set.getProperties().get("tileheight", Integer.class)-->Line_27 $$ g.drawImage(layout.image, 0, 0, tileWidth, tileHeight, (int) tileLocation.x, (int) tileLocation.y, (int) tileLocation.x + tileWidth, (int) tileLocation.y + tileHeight, null)[ FD ]
Line_10 $$ IntArray usedIds = this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName, -1) : null-->Line_18 $$ if (usedIds != null && !usedIds.contains(gid)) [ FD ]
Line_8 $$ String tilesetName = set.getName()-->Line_10 $$ IntArray usedIds = this.settings.stripUnusedTiles ? getUsedIdsBucket(tilesetName, -1) : null[ FD ]
Line_28 $$ if (verbose) -->Line_29 $$ System.out.println("Adding " + tileWidth + "x" + tileHeight + " (" + (int) tileLocation.x + ", " + (int) tileLocation.y + ")")[ CD ]
Line_4 $$ Vector2 tileLocation-->Line_24 $$ tileLocation = layout.getLocation(gid)[ FD ]
Line_7 $$ for (TiledMapTileSet set : tilesetsToPack.values()) -->Line_11 $$ int tileWidth = set.getProperties().get("tilewidth", Integer.class)[ FD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_39 $$ File outputDirTilesets = new File(relativeTilesetOutputDir.getCanonicalPath())[ CD ]
Line_7 $$ for (TiledMapTileSet set : tilesetsToPack.values()) -->Line_8 $$ String tilesetName = set.getName()[ FD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_40 $$ outputDirTilesets.mkdirs()[ CD ]
Line_11 $$ int tileWidth = set.getProperties().get("tilewidth", Integer.class)-->Line_27 $$ g.drawImage(layout.image, 0, 0, tileWidth, tileHeight, (int) tileLocation.x, (int) tileLocation.y, (int) tileLocation.x + tileWidth, (int) tileLocation.y + tileHeight, null)[ FD ]
Line_33 $$ String regionName = tilesetName + separator + adjustedGid-->Line_34 $$ packer.addImage(tile, regionName)[ FD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_37 $$ String tilesetOutputDir = outputDir.toString() + "/" + this.settings.tilesetOutputDirectory[ CD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_4 $$ Vector2 tileLocation[ CD ]
Line_3 $$ BufferedImage tile-->Line_26 $$ g = tile.createGraphics()[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_27 $$ g.drawImage(layout.image, 0, 0, tileWidth, tileHeight, (int) tileLocation.x, (int) tileLocation.y, (int) tileLocation.x + tileWidth, (int) tileLocation.y + tileHeight, null)[ CD ]
Line_7 $$ for (TiledMapTileSet set : tilesetsToPack.values()) -->Line_14 $$ String imageName = set.getProperties().get("imagesource", String.class)[ FD ]
Line_19 $$ if (verbose) -->Line_20 $$ System.out.println("Stripped id #" + gid + " from tileset \"" + tilesetName + "\"")[ CD ]
Line_39 $$ File outputDirTilesets = new File(relativeTilesetOutputDir.getCanonicalPath())-->Line_40 $$ outputDirTilesets.mkdirs()[ FD ]
Line_5 $$ Graphics g-->Line_27 $$ g.drawImage(layout.image, 0, 0, tileWidth, tileHeight, (int) tileLocation.x, (int) tileLocation.y, (int) tileLocation.x + tileWidth, (int) tileLocation.y + tileHeight, null)[ FD ]
Line_25 $$ tile = new BufferedImage(tileWidth, tileHeight, BufferedImage.TYPE_4BYTE_ABGR)-->Line_34 $$ packer.addImage(tile, regionName)[ FD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_41 $$ packer.pack(outputDirTilesets, this.settings.atlasOutputName + ".atlas")[ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_25 $$ tile = new BufferedImage(tileWidth, tileHeight, BufferedImage.TYPE_4BYTE_ABGR)[ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_33 $$ String regionName = tilesetName + separator + adjustedGid[ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_31 $$ int adjustedGid = gid - layout.firstgid[ CD ]
Line_5 $$ Graphics g-->Line_26 $$ g = tile.createGraphics()[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_24 $$ tileLocation = layout.getLocation(gid)[ FD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_24 $$ tileLocation = layout.getLocation(gid)[ CD ]
Line_7 $$ for (TiledMapTileSet set : tilesetsToPack.values()) -->Line_12 $$ int tileHeight = set.getProperties().get("tileheight", Integer.class)[ FD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_38 $$ File relativeTilesetOutputDir = new File(tilesetOutputDir)[ CD ]
Line_2 $$ private void packTilesets(FileHandle inputDirHandle, Settings texturePackerSettings) throws IOException -->Line_3 $$ BufferedImage tile[ CD ]
Line_16 $$ for (int gid = layout.firstgid, i = 0; i < layout.numTiles; gid++, i++) -->Line_26 $$ g = tile.createGraphics()[ CD ]
Line_3 $$ BufferedImage tile-->Line_25 $$ tile = new BufferedImage(tileWidth, tileHeight, BufferedImage.TYPE_4BYTE_ABGR)[ FD ]
Line_3 $$ BufferedImage tile-->Line_34 $$ packer.addImage(tile, regionName)[ FD ]
Line_39 $$ File outputDirTilesets = new File(relativeTilesetOutputDir.getCanonicalPath())-->Line_41 $$ packer.pack(outputDirTilesets, this.settings.atlasOutputName + ".atlas")[ FD ]
Line_18 $$ if (usedIds != null && !usedIds.contains(gid)) -->Line_19 $$ if (verbose) [ CD ]
