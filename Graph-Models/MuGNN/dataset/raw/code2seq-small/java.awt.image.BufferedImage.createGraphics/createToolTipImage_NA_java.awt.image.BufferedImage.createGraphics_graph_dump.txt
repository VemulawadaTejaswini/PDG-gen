Line_34 $$ int height = cellBounds.height-->Line_37 $$ Dimension size = getImageSize(width, height)[ FD ]
Line_46 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)-->Line_53 $$ myTipComponent.setBorder(border)[ FD ]
Line_39 $$ Graphics2D g = myImage.createGraphics()-->Line_40 $$ g.setClip(null)[ FD ]
Line_14 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) -->Line_15 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ CD ]
Line_14 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) -->Line_16 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ CD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_15 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ FD ]
Line_39 $$ Graphics2D g = myImage.createGraphics()-->Line_51 $$ g.dispose()[ FD ]
Line_32 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_47 $$ location.y -= borderWidth[ FD ]
Line_5 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_15 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ FD ]
Line_5 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_16 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ FD ]
Line_34 $$ int height = cellBounds.height-->Line_41 $$ doFillBackground(height, width, g)[ FD ]
Line_29 $$ Point location = new Point(visMaxX, cellBounds.y)-->Line_31 $$ Rectangle screen = !Registry.is("ide.expansion.hints.on.all.screens") ? ScreenUtil.getScreenRectangle(location) : ScreenUtil.getAllScreensRectangle()[ FD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_52 $$ myRendererPane.remove(renderer)[ FD ]
Line_5 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_7 $$ if (rendererAndBounds == null)[ FD ]
Line_37 $$ Dimension size = getImageSize(width, height)-->Line_54 $$ myTipComponent.setPreferredSize(size)[ FD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_43 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_7 $$ if (rendererAndBounds == null)-->Line_8 $$ return null[ CD ]
Line_24 $$ int visMaxY = visibleRect.y + visibleRect.height-->Line_25 $$ if (cellMaxY > visMaxY)[ FD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_10 $$ if (renderer == null)[ FD ]
Line_12 $$ if (renderer.getClientProperty(DISABLE_EXPANDABLE_HANDLER) != null)-->Line_13 $$ return null[ CD ]
Line_33 $$ int width = Math.min(screen.width + screen.x - location.x - borderWidth, cellMaxX - visMaxX)-->Line_41 $$ doFillBackground(height, width, g)[ FD ]
Line_45 $$ if (borderWidth > 0) -->Line_46 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)[ CD ]
Line_45 $$ if (borderWidth > 0) -->Line_47 $$ location.y -= borderWidth[ CD ]
Line_32 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_45 $$ if (borderWidth > 0) [ FD ]
Line_45 $$ if (borderWidth > 0) -->Line_48 $$ size.width += borderWidth[ CD ]
Line_39 $$ Graphics2D g = myImage.createGraphics()-->Line_42 $$ g.translate(cellBounds.x - visMaxX, 0)[ FD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_16 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ FD ]
Line_35 $$ if (width <= 0 || height <= 0)-->Line_36 $$ return null[ CD ]
Line_39 $$ Graphics2D g = myImage.createGraphics()-->Line_41 $$ doFillBackground(height, width, g)[ FD ]
Line_33 $$ int width = Math.min(screen.width + screen.x - location.x - borderWidth, cellMaxX - visMaxX)-->Line_37 $$ Dimension size = getImageSize(width, height)[ FD ]
Line_5 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_14 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) [ FD ]
Line_23 $$ int cellMaxY = cellBounds.y + cellBounds.height-->Line_25 $$ if (cellMaxY > visMaxY)[ FD ]
Line_19 $$ Rectangle cellBounds = myKeyItemBounds-->Line_43 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_32 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_49 $$ size.height += borderWidth + borderWidth[ FD ]
Line_32 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_48 $$ size.width += borderWidth[ FD ]
Line_10 $$ if (renderer == null)-->Line_11 $$ return null[ CD ]
Line_44 $$ CustomLineBorder border = null-->Line_53 $$ myTipComponent.setBorder(border)[ FD ]
Line_21 $$ if (cellBounds.y < visibleRect.y)-->Line_22 $$ return null[ CD ]
Line_44 $$ CustomLineBorder border = null-->Line_46 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)[ FD ]
Line_9 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_12 $$ if (renderer.getClientProperty(DISABLE_EXPANDABLE_HANDLER) != null)[ FD ]
Line_29 $$ Point location = new Point(visMaxX, cellBounds.y)-->Line_30 $$ SwingUtilities.convertPointToScreen(location, myComponent)[ FD ]
Line_25 $$ if (cellMaxY > visMaxY)-->Line_26 $$ return null[ CD ]
Line_45 $$ if (borderWidth > 0) -->Line_49 $$ size.height += borderWidth + borderWidth[ CD ]
Line_39 $$ Graphics2D g = myImage.createGraphics()-->Line_43 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
