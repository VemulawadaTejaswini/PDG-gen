Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_31 $$ int borderWidth = isPaintBorder() ? 1 : 0[ CD ]
Line_38 $$ Graphics2D g = myImage.createGraphics()-->Line_50 $$ g.dispose()[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_34 $$ if (width <= 0 || height <= 0)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_22 $$ int cellMaxY = cellBounds.y + cellBounds.height[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_32 $$ int width = Math.min(screen.width + screen.x - location.x - borderWidth, cellMaxX - visMaxX)[ CD ]
Line_32 $$ int width = Math.min(screen.width + screen.x - location.x - borderWidth, cellMaxX - visMaxX)-->Line_36 $$ Dimension size = getImageSize(width, height)[ FD ]
Line_44 $$ if (borderWidth > 0) -->Line_48 $$ size.height += borderWidth + borderWidth[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_6 $$ if (rendererAndBounds == null)[ CD ]
Line_22 $$ int cellMaxY = cellBounds.y + cellBounds.height-->Line_24 $$ if (cellMaxY > visMaxY)[ FD ]
Line_38 $$ Graphics2D g = myImage.createGraphics()-->Line_41 $$ g.translate(cellBounds.x - visMaxX, 0)[ FD ]
Line_23 $$ int visMaxY = visibleRect.y + visibleRect.height-->Line_24 $$ if (cellMaxY > visMaxY)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_37 $$ myImage = UIUtil.createImage(size.width, size.height, BufferedImage.TYPE_INT_RGB)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_44 $$ if (borderWidth > 0) [ CD ]
Line_31 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_47 $$ size.width += borderWidth[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_52 $$ myTipComponent.setBorder(border)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_26 $$ int cellMaxX = cellBounds.x + cellBounds.width[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_5 $$ UIUtil.putClientProperty(myComponent, EXPANDED_RENDERER, null)[ CD ]
Line_28 $$ Point location = new Point(visMaxX, cellBounds.y)-->Line_29 $$ SwingUtilities.convertPointToScreen(location, myComponent)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_53 $$ myTipComponent.setPreferredSize(size)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_19 $$ Rectangle visibleRect = getVisibleRect(key)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_28 $$ Point location = new Point(visMaxX, cellBounds.y)[ CD ]
Line_38 $$ Graphics2D g = myImage.createGraphics()-->Line_42 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_44 $$ if (borderWidth > 0) -->Line_46 $$ location.y -= borderWidth[ CD ]
Line_38 $$ Graphics2D g = myImage.createGraphics()-->Line_40 $$ doFillBackground(height, width, g)[ FD ]
Line_31 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_48 $$ size.height += borderWidth + borderWidth[ FD ]
Line_38 $$ Graphics2D g = myImage.createGraphics()-->Line_39 $$ g.setClip(null)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_33 $$ int height = cellBounds.height[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_30 $$ Rectangle screen = !Registry.is("ide.expansion.hints.on.all.screens") ? ScreenUtil.getScreenRectangle(location) : ScreenUtil.getAllScreensRectangle()[ CD ]
Line_11 $$ if (renderer.getClientProperty(DISABLE_EXPANDABLE_HANDLER) != null)-->Line_12 $$ return null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_13 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) [ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_23 $$ int visMaxY = visibleRect.y + visibleRect.height[ CD ]
Line_33 $$ int height = cellBounds.height-->Line_40 $$ doFillBackground(height, width, g)[ FD ]
Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_13 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) [ FD ]
Line_20 $$ if (cellBounds.y < visibleRect.y)-->Line_21 $$ return null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_51 $$ myRendererPane.remove(renderer)[ CD ]
Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_15 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ FD ]
Line_44 $$ if (borderWidth > 0) -->Line_45 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_9 $$ if (renderer == null)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)[ CD ]
Line_28 $$ Point location = new Point(visMaxX, cellBounds.y)-->Line_30 $$ Rectangle screen = !Registry.is("ide.expansion.hints.on.all.screens") ? ScreenUtil.getScreenRectangle(location) : ScreenUtil.getAllScreensRectangle()[ FD ]
Line_43 $$ CustomLineBorder border = null-->Line_45 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)[ FD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_11 $$ if (renderer.getClientProperty(DISABLE_EXPANDABLE_HANDLER) != null)[ FD ]
Line_32 $$ int width = Math.min(screen.width + screen.x - location.x - borderWidth, cellMaxX - visMaxX)-->Line_40 $$ doFillBackground(height, width, g)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_41 $$ g.translate(cellBounds.x - visMaxX, 0)[ CD ]
Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_14 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_29 $$ SwingUtilities.convertPointToScreen(location, myComponent)[ CD ]
Line_44 $$ if (borderWidth > 0) -->Line_47 $$ size.width += borderWidth[ CD ]
Line_36 $$ Dimension size = getImageSize(width, height)-->Line_53 $$ myTipComponent.setPreferredSize(size)[ FD ]
Line_18 $$ Rectangle cellBounds = myKeyItemBounds-->Line_42 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_38 $$ Graphics2D g = myImage.createGraphics()[ CD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_9 $$ if (renderer == null)[ FD ]
Line_45 $$ border = new CustomLineBorder(getBorderColor(), borderWidth, 0, borderWidth, borderWidth)-->Line_52 $$ myTipComponent.setBorder(border)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_20 $$ if (cellBounds.y < visibleRect.y)[ CD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_15 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ FD ]
Line_4 $$ Pair<Component, Rectangle> rendererAndBounds = getCellRendererAndBounds(key)-->Line_6 $$ if (rendererAndBounds == null)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_19 $$ Rectangle visibleRect = getVisibleRect(key)[ CD ]
Line_9 $$ if (renderer == null)-->Line_10 $$ return null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_50 $$ g.dispose()[ CD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_14 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ FD ]
Line_34 $$ if (width <= 0 || height <= 0)-->Line_35 $$ return null[ CD ]
Line_31 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_46 $$ location.y -= borderWidth[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_27 $$ int visMaxX = visibleRect.x + visibleRect.width[ CD ]
Line_13 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) -->Line_15 $$ rendererAndBounds.getSecond().setSize(renderer.getSize())[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_11 $$ if (renderer.getClientProperty(DISABLE_EXPANDABLE_HANDLER) != null)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_40 $$ doFillBackground(height, width, g)[ CD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_42 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_24 $$ if (cellMaxY > visMaxY)[ CD ]
Line_31 $$ int borderWidth = isPaintBorder() ? 1 : 0-->Line_44 $$ if (borderWidth > 0) [ FD ]
Line_33 $$ int height = cellBounds.height-->Line_36 $$ Dimension size = getImageSize(width, height)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_3 $$ UIUtil.putClientProperty(myComponent, EXPANDED_RENDERER, true)[ CD ]
Line_24 $$ if (cellMaxY > visMaxY)-->Line_25 $$ return null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_18 $$ Rectangle cellBounds = myKeyItemBounds[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_42 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_54 $$ return location[ CD ]
Line_13 $$ if (UIUtil.getClientProperty((JComponent) rendererAndBounds.getFirst(), USE_RENDERER_BOUNDS) == Boolean.TRUE) -->Line_14 $$ rendererAndBounds.getSecond().translate(renderer.getX(), renderer.getY())[ CD ]
Line_8 $$ JComponent renderer = ObjectUtils.tryCast(rendererAndBounds.first, JComponent.class)-->Line_51 $$ myRendererPane.remove(renderer)[ FD ]
Line_43 $$ CustomLineBorder border = null-->Line_52 $$ myTipComponent.setBorder(border)[ FD ]
Line_6 $$ if (rendererAndBounds == null)-->Line_7 $$ return null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_42 $$ doPaintTooltipImage(renderer, cellBounds, g, key)[ FD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_43 $$ CustomLineBorder border = null[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_36 $$ Dimension size = getImageSize(width, height)[ CD ]
Line_2 $$ private Point createToolTipImage(@NotNull KeyType key) -->Line_39 $$ g.setClip(null)[ CD ]
