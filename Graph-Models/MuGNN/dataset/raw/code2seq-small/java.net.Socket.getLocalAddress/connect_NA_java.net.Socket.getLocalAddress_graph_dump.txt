Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_3 $$ if (socket == null || endpoint == null || timeout < 0) [ CD ]
Line_7 $$ if (localAddr != null) -->Line_11 $$ socket.bind(localAddr)[ CD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_11 $$ socket.bind(localAddr)[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_17 $$ SocketIOWithTimeout.connect(ch, endpoint, timeout)[ FD ]
Line_7 $$ if (localAddr != null) -->Line_10 $$ Preconditions.checkArgument(localClass.equals(remoteClass), "Local address %s must be of same family as remote address %s.", localAddr, endpoint)[ CD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_6 $$ SocketChannel ch = socket.getChannel()[ CD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_15 $$ socket.connect(endpoint, timeout)[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_7 $$ if (localAddr != null) [ CD ]
Line_6 $$ SocketChannel ch = socket.getChannel()-->Line_14 $$ if (ch == null) [ FD ]
Line_8 $$ Class localClass = localAddr.getClass()-->Line_10 $$ Preconditions.checkArgument(localClass.equals(remoteClass), "Local address %s must be of same family as remote address %s.", localAddr, endpoint)[ FD ]
Line_14 $$ if (ch == null) -->Line_17 $$ SocketIOWithTimeout.connect(ch, endpoint, timeout)[ CD ]
Line_7 $$ if (localAddr != null) -->Line_8 $$ Class localClass = localAddr.getClass()[ CD ]
Line_6 $$ SocketChannel ch = socket.getChannel()-->Line_17 $$ SocketIOWithTimeout.connect(ch, endpoint, timeout)[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_6 $$ SocketChannel ch = socket.getChannel()[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_22 $$ if (socket.getLocalPort() == socket.getPort() && socket.getLocalAddress().equals(socket.getInetAddress())) [ CD ]
Line_7 $$ if (localAddr != null) -->Line_9 $$ Class remoteClass = endpoint.getClass()[ CD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_22 $$ if (socket.getLocalPort() == socket.getPort() && socket.getLocalAddress().equals(socket.getInetAddress())) [ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_10 $$ Preconditions.checkArgument(localClass.equals(remoteClass), "Local address %s must be of same family as remote address %s.", localAddr, endpoint)[ FD ]
Line_14 $$ if (ch == null) -->Line_15 $$ socket.connect(endpoint, timeout)[ CD ]
Line_22 $$ if (socket.getLocalPort() == socket.getPort() && socket.getLocalAddress().equals(socket.getInetAddress())) -->Line_24 $$ socket.close()[ CD ]
Line_22 $$ if (socket.getLocalPort() == socket.getPort() && socket.getLocalAddress().equals(socket.getInetAddress())) -->Line_23 $$ LOG.info("Detected a loopback TCP socket, disconnecting it")[ CD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_24 $$ socket.close()[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_7 $$ if (localAddr != null) [ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_9 $$ Class remoteClass = endpoint.getClass()[ FD ]
Line_9 $$ Class remoteClass = endpoint.getClass()-->Line_10 $$ Preconditions.checkArgument(localClass.equals(remoteClass), "Local address %s must be of same family as remote address %s.", localAddr, endpoint)[ FD ]
Line_2 $$ public static void connect(Socket socket, SocketAddress endpoint, SocketAddress localAddr, int timeout) throws IOException -->Line_8 $$ Class localClass = localAddr.getClass()[ FD ]
