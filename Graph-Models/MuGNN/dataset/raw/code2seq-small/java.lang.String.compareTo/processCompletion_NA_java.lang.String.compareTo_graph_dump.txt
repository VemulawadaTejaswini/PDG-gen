Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_5 $$ result.myKidsAfterSeparator = new ArrayList<LookupFile>()[ CD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_86 $$ if (result.currentParentMatch && result.mySiblings.size() > 0) [ CD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_34 $$ result.effectivePrefix = typedText[ FD ]
Line_71 $$ toPreselect = null-->Line_75 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_13 $$ if (result.current != null) -->Line_15 $$ result.closedPath = typed.endsWith(myFinder.getSeparator()) && typedText.length() > myFinder.getSeparator().length()[ CD ]
Line_76 $$ if (result.effectivePrefix.length() == 0) -->Line_77 $$ if (result.mySiblings.size() > 0) [ CD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_17 $$ if (!StringUtil.toUpperCase(typedText).startsWith(StringUtil.toUpperCase(currentParentText)))[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_75 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_13 $$ if (result.current != null) -->Line_16 $$ final String currentParentText = result.current.getAbsolutePath()[ CD ]
Line_16 $$ final String currentParentText = result.current.getAbsolutePath()-->Line_19 $$ String prefix = typedText.substring(currentParentText.length())[ FD ]
Line_13 $$ if (result.current != null) -->Line_17 $$ if (!StringUtil.toUpperCase(typedText).startsWith(StringUtil.toUpperCase(currentParentText)))[ CD ]
Line_50 $$ int currentDiff = Integer.MIN_VALUE-->Line_60 $$ currentDiff = Math.max(diff, currentDiff)[ FD ]
Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) -->Line_82 $$ toPreselect = result.myToComplete.get(0)[ CD ]
Line_20 $$ if (prefix.startsWith(myFinder.getSeparator())) -->Line_22 $$ if (typed.endsWith(myFinder.getSeparator())) [ CD ]
Line_86 $$ if (result.currentParentMatch && result.mySiblings.size() > 0) -->Line_87 $$ toPreselect = null[ CD ]
Line_63 $$ toPreselectFixed = true-->Line_67 $$ if (!toPreselectFixed) [ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_73 $$ if (toPreselect == null) [ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_71 $$ toPreselect = null[ FD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_13 $$ if (result.current != null) [ CD ]
Line_73 $$ if (toPreselect == null) -->Line_74 $$ if (result.myToComplete.size() == 1) [ CD ]
Line_13 $$ if (result.current != null) -->Line_34 $$ result.effectivePrefix = typedText[ CD ]
Line_78 $$ toPreselect = result.mySiblings.get(0)-->Line_87 $$ toPreselect = null[ FD ]
Line_87 $$ toPreselect = null-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_22 $$ if (typed.endsWith(myFinder.getSeparator())) -->Line_23 $$ prefix = ""[ CD ]
Line_62 $$ toPreselect = each-->Line_87 $$ toPreselect = null[ FD ]
Line_19 $$ String prefix = typedText.substring(currentParentText.length())-->Line_25 $$ result.effectivePrefix = prefix[ FD ]
Line_78 $$ toPreselect = result.mySiblings.get(0)-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_89 $$ result.myPreselected = toPreselect[ CD ]
Line_71 $$ toPreselect = null-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_39 $$ if (result.current != null) -->Line_44 $$ if (result.grandparentPrefix != null) [ CD ]
Line_23 $$ prefix = ""-->Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)[ FD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_15 $$ result.closedPath = typed.endsWith(myFinder.getSeparator()) && typedText.length() > myFinder.getSeparator().length()[ FD ]
Line_75 $$ toPreselect = result.myToComplete.get(0)-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_73 $$ if (toPreselect == null) -->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ CD ]
Line_19 $$ String prefix = typedText.substring(currentParentText.length())-->Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_52 $$ if (toPreselect == null || !result.myToComplete.contains(toPreselect)) [ FD ]
Line_19 $$ String prefix = typedText.substring(currentParentText.length())-->Line_21 $$ prefix = prefix.substring(myFinder.getSeparator().length())[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_87 $$ toPreselect = null[ FD ]
Line_68 $$ toPreselect = null-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_13 $$ if (result.current != null) -->Line_20 $$ if (prefix.startsWith(myFinder.getSeparator())) [ CD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_9 $$ addMacroPaths(result, typed)[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_78 $$ toPreselect = result.mySiblings.get(0)[ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_50 $$ int currentDiff = Integer.MIN_VALUE[ CD ]
Line_21 $$ prefix = prefix.substring(myFinder.getSeparator().length())-->Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)[ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_94 $$ return parent.getChildren(new LookupFilter() [ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_60 $$ currentDiff = Math.max(diff, currentDiff)-->Line_61 $$ if (currentDiff == diff) [ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_94 $$ return parent.getChildren(new LookupFilter() [ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_10 $$ final String typedText = myFinder.normalize(typed)[ CD ]
Line_21 $$ prefix = prefix.substring(myFinder.getSeparator().length())-->Line_23 $$ prefix = ""[ FD ]
Line_16 $$ final String currentParentText = result.current.getAbsolutePath()-->Line_30 $$ result.grandparentPrefix = currentParentText.substring(currentGrandparentText.length() + myFinder.getSeparator().length())[ FD ]
Line_29 $$ if (StringUtil.startsWithConcatenation(typedText, currentGrandparentText, myFinder.getSeparator())) -->Line_30 $$ result.grandparentPrefix = currentParentText.substring(currentGrandparentText.length() + myFinder.getSeparator().length())[ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_6 $$ final String typed = result.myCompletionBase[ CD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)[ FD ]
Line_27 $$ if (result.currentGrandparent != null && result.currentParentMatch && !result.closedPath) -->Line_28 $$ final String currentGrandparentText = result.currentGrandparent.getAbsolutePath()[ CD ]
Line_68 $$ toPreselect = null-->Line_78 $$ toPreselect = result.mySiblings.get(0)[ FD ]
Line_68 $$ toPreselect = null-->Line_87 $$ toPreselect = null[ FD ]
Line_23 $$ prefix = ""-->Line_25 $$ result.effectivePrefix = prefix[ FD ]
Line_56 $$ String eachName = StringUtil.toUpperCase(each.getName())-->Line_59 $$ int diff = result.effectivePrefix.compareTo(eachName)[ FD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_14 $$ result.currentParentMatch = SystemInfo.isFileSystemCaseSensitive ? typedText.equals(result.current.getAbsolutePath()) : typedText.equalsIgnoreCase(result.current.getAbsolutePath())[ FD ]
Line_68 $$ toPreselect = null-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_82 $$ toPreselect = result.myToComplete.get(0)-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_21 $$ prefix = prefix.substring(myFinder.getSeparator().length())-->Line_25 $$ result.effectivePrefix = prefix[ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_51 $$ LookupFile toPreselect = result.myPreselected[ CD ]
Line_61 $$ if (currentDiff == diff) -->Line_62 $$ toPreselect = each[ CD ]
Line_39 $$ if (result.current != null) -->Line_41 $$ if (result.currentParentMatch && !result.closedPath && !typed.isEmpty()) [ CD ]
Line_68 $$ toPreselect = null-->Line_75 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_41 $$ if (result.currentParentMatch && !result.closedPath && !typed.isEmpty()) [ FD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_19 $$ String prefix = typedText.substring(currentParentText.length())[ FD ]
Line_68 $$ toPreselect = null-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_55 $$ for (LookupFile each : result.myToComplete) -->Line_62 $$ toPreselect = each[ FD ]
Line_55 $$ for (LookupFile each : result.myToComplete) -->Line_56 $$ String eachName = StringUtil.toUpperCase(each.getName())[ FD ]
Line_71 $$ toPreselect = null-->Line_87 $$ toPreselect = null[ FD ]
Line_28 $$ final String currentGrandparentText = result.currentGrandparent.getAbsolutePath()-->Line_29 $$ if (StringUtil.startsWithConcatenation(typedText, currentGrandparentText, myFinder.getSeparator())) [ FD ]
Line_59 $$ int diff = result.effectivePrefix.compareTo(eachName)-->Line_61 $$ if (currentDiff == diff) [ FD ]
Line_75 $$ toPreselect = result.myToComplete.get(0)-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_13 $$ if (result.current != null) -->Line_26 $$ result.currentGrandparent = result.current.getParent()[ CD ]
Line_59 $$ int diff = result.effectivePrefix.compareTo(eachName)-->Line_60 $$ currentDiff = Math.max(diff, currentDiff)[ FD ]
Line_53 $$ boolean toPreselectFixed = false-->Line_63 $$ toPreselectFixed = true[ FD ]
Line_28 $$ final String currentGrandparentText = result.currentGrandparent.getAbsolutePath()-->Line_30 $$ result.grandparentPrefix = currentParentText.substring(currentGrandparentText.length() + myFinder.getSeparator().length())[ FD ]
Line_52 $$ if (toPreselect == null || !result.myToComplete.contains(toPreselect)) -->Line_53 $$ boolean toPreselectFixed = false[ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_7 $$ if (typed == null)[ CD ]
Line_62 $$ toPreselect = each-->Line_78 $$ toPreselect = result.mySiblings.get(0)[ FD ]
Line_19 $$ String prefix = typedText.substring(currentParentText.length())-->Line_23 $$ prefix = ""[ FD ]
Line_62 $$ toPreselect = each-->Line_71 $$ toPreselect = null[ FD ]
Line_68 $$ toPreselect = null-->Line_71 $$ toPreselect = null[ FD ]
Line_53 $$ boolean toPreselectFixed = false-->Line_67 $$ if (!toPreselectFixed) [ FD ]
Line_52 $$ if (toPreselect == null || !result.myToComplete.contains(toPreselect)) -->Line_54 $$ if (result.effectivePrefix.length() > 0) [ CD ]
Line_62 $$ toPreselect = each-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_71 $$ toPreselect = null-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_13 $$ if (result.current != null) -->Line_14 $$ result.currentParentMatch = SystemInfo.isFileSystemCaseSensitive ? typedText.equals(result.current.getAbsolutePath()) : typedText.equalsIgnoreCase(result.current.getAbsolutePath())[ CD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_11 $$ result.current = getClosestParent(typed)[ FD ]
Line_94 $$ return parent.getChildren(new LookupFilter() -->Line_97 $$ return !file.equals(result.current) && myFilter.isAccepted(file) && matcher.matches(file.getName())[ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_15 $$ result.closedPath = typed.endsWith(myFinder.getSeparator()) && typedText.length() > myFinder.getSeparator().length()[ FD ]
Line_41 $$ if (result.currentParentMatch && !result.closedPath && !typed.isEmpty()) -->Line_42 $$ result.myKidsAfterSeparator.addAll(result.myToComplete)[ CD ]
Line_62 $$ toPreselect = each-->Line_73 $$ if (toPreselect == null) [ FD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_12 $$ result.myClosestParent = result.current[ CD ]
Line_27 $$ if (result.currentGrandparent != null && result.currentParentMatch && !result.closedPath) -->Line_29 $$ if (StringUtil.startsWithConcatenation(typedText, currentGrandparentText, myFinder.getSeparator())) [ CD ]
Line_75 $$ toPreselect = result.myToComplete.get(0)-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_44 $$ if (result.grandparentPrefix != null) -->Line_46 $$ result.myToComplete.addAll(0, siblings)[ CD ]
Line_19 $$ String prefix = typedText.substring(currentParentText.length())-->Line_20 $$ if (prefix.startsWith(myFinder.getSeparator())) [ FD ]
Line_67 $$ if (!toPreselectFixed) -->Line_68 $$ toPreselect = null[ CD ]
Line_71 $$ toPreselect = null-->Line_73 $$ if (toPreselect == null) [ FD ]
Line_13 $$ if (result.current != null) -->Line_19 $$ String prefix = typedText.substring(currentParentText.length())[ CD ]
Line_7 $$ if (typed == null)-->Line_8 $$ return[ CD ]
Line_10 $$ final String typedText = myFinder.normalize(typed)-->Line_29 $$ if (StringUtil.startsWithConcatenation(typedText, currentGrandparentText, myFinder.getSeparator())) [ FD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_52 $$ if (toPreselect == null || !result.myToComplete.contains(toPreselect)) [ CD ]
Line_61 $$ if (currentDiff == diff) -->Line_63 $$ toPreselectFixed = true[ CD ]
Line_75 $$ toPreselect = result.myToComplete.get(0)-->Line_87 $$ toPreselect = null[ FD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_10 $$ final String typedText = myFinder.normalize(typed)[ FD ]
Line_52 $$ if (toPreselect == null || !result.myToComplete.contains(toPreselect)) -->Line_73 $$ if (toPreselect == null) [ CD ]
Line_78 $$ toPreselect = result.mySiblings.get(0)-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_78 $$ toPreselect = result.mySiblings.get(0)-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_7 $$ if (typed == null)[ FD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_9 $$ addMacroPaths(result, typed)[ FD ]
Line_54 $$ if (result.effectivePrefix.length() > 0) -->Line_67 $$ if (!toPreselectFixed) [ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_4 $$ result.mySiblings = new ArrayList<LookupFile>()[ CD ]
Line_74 $$ if (result.myToComplete.size() == 1) -->Line_75 $$ toPreselect = result.myToComplete.get(0)[ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_9 $$ addMacroPaths(result, typed)[ CD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_39 $$ if (result.current != null) [ CD ]
Line_68 $$ toPreselect = null-->Line_73 $$ if (toPreselect == null) [ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_44 $$ if (result.grandparentPrefix != null) -->Line_45 $$ final List<LookupFile> siblings = getMatchingChildren(result.grandparentPrefix, result.currentGrandparent)[ CD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_3 $$ result.myToComplete = new ArrayList<LookupFile>()[ CD ]
Line_13 $$ if (result.current != null) -->Line_25 $$ result.effectivePrefix = prefix[ CD ]
Line_6 $$ final String typed = result.myCompletionBase-->Line_22 $$ if (typed.endsWith(myFinder.getSeparator())) [ FD ]
Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)-->Line_97 $$ return !file.equals(result.current) && myFilter.isAccepted(file) && matcher.matches(file.getName())[ FD ]
Line_71 $$ toPreselect = null-->Line_78 $$ toPreselect = result.mySiblings.get(0)[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_62 $$ toPreselect = each[ FD ]
Line_50 $$ int currentDiff = Integer.MIN_VALUE-->Line_61 $$ if (currentDiff == diff) [ FD ]
Line_44 $$ if (result.grandparentPrefix != null) -->Line_47 $$ result.mySiblings.addAll(siblings)[ CD ]
Line_77 $$ if (result.mySiblings.size() > 0) -->Line_78 $$ toPreselect = result.mySiblings.get(0)[ CD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_68 $$ toPreselect = null[ FD ]
Line_62 $$ toPreselect = each-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_62 $$ toPreselect = each-->Line_89 $$ result.myPreselected = toPreselect[ FD ]
Line_82 $$ toPreselect = result.myToComplete.get(0)-->Line_87 $$ toPreselect = null[ FD ]
Line_56 $$ String eachName = StringUtil.toUpperCase(each.getName())-->Line_57 $$ if (!eachName.startsWith(result.effectivePrefix))[ FD ]
Line_62 $$ toPreselect = each-->Line_75 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_71 $$ toPreselect = null-->Line_82 $$ toPreselect = result.myToComplete.get(0)[ FD ]
Line_51 $$ LookupFile toPreselect = result.myPreselected-->Line_81 $$ if (toPreselect == null && !result.myToComplete.contains(toPreselect) && result.myToComplete.size() > 0) [ FD ]
Line_20 $$ if (prefix.startsWith(myFinder.getSeparator())) -->Line_21 $$ prefix = prefix.substring(myFinder.getSeparator().length())[ CD ]
Line_16 $$ final String currentParentText = result.current.getAbsolutePath()-->Line_17 $$ if (!StringUtil.toUpperCase(typedText).startsWith(StringUtil.toUpperCase(currentParentText)))[ FD ]
Line_13 $$ if (result.current != null) -->Line_27 $$ if (result.currentGrandparent != null && result.currentParentMatch && !result.closedPath) [ CD ]
Line_36 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_93 $$ final MinusculeMatcher matcher = createMatcher(prefix)[ CD ]
Line_45 $$ final List<LookupFile> siblings = getMatchingChildren(result.grandparentPrefix, result.currentGrandparent)-->Line_46 $$ result.myToComplete.addAll(0, siblings)[ FD ]
Line_2 $$ public void processCompletion(final CompletionResult result) -->Line_11 $$ result.current = getClosestParent(typed)[ CD ]
Line_74 $$ if (result.myToComplete.size() == 1) -->Line_76 $$ if (result.effectivePrefix.length() == 0) [ CD ]
Line_39 $$ if (result.current != null) -->Line_40 $$ result.myToComplete.addAll(getMatchingChildren(result.effectivePrefix, result.current))[ CD ]
Line_45 $$ final List<LookupFile> siblings = getMatchingChildren(result.grandparentPrefix, result.currentGrandparent)-->Line_47 $$ result.mySiblings.addAll(siblings)[ FD ]
Line_75 $$ toPreselect = result.myToComplete.get(0)-->Line_78 $$ toPreselect = result.mySiblings.get(0)[ FD ]
Line_17 $$ if (!StringUtil.toUpperCase(typedText).startsWith(StringUtil.toUpperCase(currentParentText)))-->Line_18 $$ return[ CD ]
Line_54 $$ if (result.effectivePrefix.length() > 0) -->Line_71 $$ toPreselect = null[ CD ]
Line_62 $$ toPreselect = each-->Line_68 $$ toPreselect = null[ FD ]
Line_94 $$ return parent.getChildren(new LookupFilter() -->Line_97 $$ return !file.equals(result.current) && myFilter.isAccepted(file) && matcher.matches(file.getName())[ FD ]
