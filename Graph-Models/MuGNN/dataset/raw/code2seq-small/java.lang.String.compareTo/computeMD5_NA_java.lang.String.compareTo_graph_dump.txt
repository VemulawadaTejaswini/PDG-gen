Line_2 $$ private String computeMD5() throws Exception -->Line_15 $$ return md5str[ CD ]
Line_4 $$ Collections.sort(files, new Comparator<File>() -->Line_9 $$ return file.getPath().toUpperCase().replaceAll("\\\\", "/")[ CD ]
Line_4 $$ Collections.sort(files, new Comparator<File>() -->Line_6 $$ return normalizePath(lhs).compareTo(normalizePath(rhs))[ CD ]
Line_3 $$ List<File> files = FileSetUtils.convertFileSetToFiles(source)-->Line_4 $$ Collections.sort(files, new Comparator<File>() [ FD ]
Line_3 $$ List<File> files = FileSetUtils.convertFileSetToFiles(source)-->Line_12 $$ byte[] md5 = computeMD5(files)[ FD ]
Line_2 $$ private String computeMD5() throws Exception -->Line_13 $$ String md5str = byteArrayToString(md5)[ CD ]
Line_4 $$ Collections.sort(files, new Comparator<File>() -->Line_6 $$ return normalizePath(lhs).compareTo(normalizePath(rhs))[ FD ]
Line_2 $$ private String computeMD5() throws Exception -->Line_4 $$ Collections.sort(files, new Comparator<File>() [ CD ]
Line_4 $$ Collections.sort(files, new Comparator<File>() -->Line_9 $$ return file.getPath().toUpperCase().replaceAll("\\\\", "/")[ FD ]
Line_2 $$ private String computeMD5() throws Exception -->Line_12 $$ byte[] md5 = computeMD5(files)[ CD ]
Line_2 $$ private String computeMD5() throws Exception -->Line_14 $$ getLog().info("Computed MD5: " + md5str)[ CD ]
Line_2 $$ private String computeMD5() throws Exception -->Line_3 $$ List<File> files = FileSetUtils.convertFileSetToFiles(source)[ CD ]
