Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_16 $$ if (scope instanceof GrLoopStatement) [ FD ]
Line_18 $$ while (son.getParent() != null && !(son.getParent() instanceof GrLoopStatement)) -->Line_19 $$ son = son.getParent()[ CD ]
Line_6 $$ if (element1 != null && element1.equals(element2))-->Line_7 $$ return 0[ CD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_16 $$ if (scope instanceof GrLoopStatement) [ CD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_24 $$ collectOccurrences(expr, scope, occurrences, comparator, scope instanceof GrTypeDefinition || scope instanceof GroovyFileBase)[ FD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_3 $$ ArrayList<PsiElement> occurrences = new ArrayList<PsiElement>()[ CD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() [ CD ]
Line_3 $$ ArrayList<PsiElement> occurrences = new ArrayList<PsiElement>()-->Line_26 $$ return PsiUtilCore.toPsiElementArray(occurrences)[ FD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_8 $$ if (element1 instanceof GrParameter && element2 instanceof GrParameter) [ CD ]
Line_8 $$ if (element1 instanceof GrParameter && element2 instanceof GrParameter) -->Line_11 $$ return name1.compareTo(name2)[ CD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_6 $$ if (element1 != null && element1.equals(element2))[ FD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_22 $$ collectOccurrences(expr, son, occurrences, comparator, false)[ FD ]
Line_16 $$ if (scope instanceof GrLoopStatement) -->Line_22 $$ collectOccurrences(expr, son, occurrences, comparator, false)[ CD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_24 $$ collectOccurrences(expr, scope, occurrences, comparator, scope instanceof GrTypeDefinition || scope instanceof GroovyFileBase)[ FD ]
Line_8 $$ if (element1 instanceof GrParameter && element2 instanceof GrParameter) -->Line_9 $$ final String name1 = ((GrParameter) element1).getName()[ CD ]
Line_16 $$ if (scope instanceof GrLoopStatement) -->Line_18 $$ while (son.getParent() != null && !(son.getParent() instanceof GrLoopStatement)) [ CD ]
Line_3 $$ ArrayList<PsiElement> occurrences = new ArrayList<PsiElement>()-->Line_22 $$ collectOccurrences(expr, son, occurrences, comparator, false)[ FD ]
Line_8 $$ if (element1 instanceof GrParameter && element2 instanceof GrParameter) -->Line_10 $$ final String name2 = ((GrParameter) element2).getName()[ CD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_6 $$ if (element1 != null && element1.equals(element2))[ CD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_22 $$ collectOccurrences(expr, son, occurrences, comparator, false)[ FD ]
Line_3 $$ ArrayList<PsiElement> occurrences = new ArrayList<PsiElement>()-->Line_24 $$ collectOccurrences(expr, scope, occurrences, comparator, scope instanceof GrTypeDefinition || scope instanceof GroovyFileBase)[ FD ]
Line_10 $$ final String name2 = ((GrParameter) element2).getName()-->Line_11 $$ return name1.compareTo(name2)[ FD ]
Line_16 $$ if (scope instanceof GrLoopStatement) -->Line_24 $$ collectOccurrences(expr, scope, occurrences, comparator, scope instanceof GrTypeDefinition || scope instanceof GroovyFileBase)[ CD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_21 $$ assert scope.equals(son.getParent())[ FD ]
Line_4 $$ Comparator<PsiElement> comparator = new Comparator<PsiElement>() -->Line_13 $$ return 1[ CD ]
Line_2 $$ public static PsiElement[] getExpressionOccurrences(@NotNull PsiElement expr, @NotNull PsiElement scope) -->Line_26 $$ return PsiUtilCore.toPsiElementArray(occurrences)[ CD ]
Line_9 $$ final String name1 = ((GrParameter) element1).getName()-->Line_11 $$ return name1.compareTo(name2)[ FD ]
