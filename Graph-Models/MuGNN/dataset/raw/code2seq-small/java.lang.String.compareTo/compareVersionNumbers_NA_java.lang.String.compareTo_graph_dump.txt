Line_17 $$ String p2 = part2[idx]-->Line_19 $$ if (p1.matches("\\d+") && p2.matches("\\d+")) [ FD ]
Line_6 $$ if (v1 == null) -->Line_7 $$ return -1[ CD ]
Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) -->Line_19 $$ if (p1.matches("\\d+") && p2.matches("\\d+")) [ CD ]
Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) -->Line_24 $$ if (cmp != 0)[ CD ]
Line_27 $$ if (part1.length == part2.length) -->Line_30 $$ boolean left = part1.length > idx[ CD ]
Line_22 $$ cmp = part1[idx].compareTo(part2[idx])-->Line_36 $$ cmp = new Integer(p).compareTo(0)[ FD ]
Line_32 $$ for (; idx < parts.length; idx++) -->Line_33 $$ String p = parts[idx][ CD ]
Line_22 $$ cmp = part1[idx].compareTo(part2[idx])-->Line_24 $$ if (cmp != 0)[ FD ]
Line_22 $$ cmp = part1[idx].compareTo(part2[idx])-->Line_40 $$ if (cmp != 0)[ FD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_13 $$ String[] part2 = v2.split("[\\.\\_\\-]")[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_12 $$ String[] part1 = v1.split("[\\.\\_\\-]")[ FD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_36 $$ cmp = new Integer(p).compareTo(0)[ FD ]
Line_27 $$ if (part1.length == part2.length) -->Line_32 $$ for (; idx < parts.length; idx++) [ CD ]
Line_19 $$ if (p1.matches("\\d+") && p2.matches("\\d+")) -->Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_6 $$ if (v1 == null) [ FD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_22 $$ cmp = part1[idx].compareTo(part2[idx])[ FD ]
Line_22 $$ cmp = part1[idx].compareTo(part2[idx])-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) -->Line_17 $$ String p2 = part2[idx][ CD ]
Line_9 $$ if (v2 == null) -->Line_10 $$ return 1[ CD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_24 $$ if (cmp != 0)[ FD ]
Line_32 $$ for (; idx < parts.length; idx++) -->Line_34 $$ int cmp[ CD ]
Line_18 $$ int cmp-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_35 $$ if (p.matches("\\d+")) -->Line_38 $$ cmp = 1[ CD ]
Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) -->Line_16 $$ String p1 = part1[idx][ CD ]
Line_27 $$ if (part1.length == part2.length) -->Line_43 $$ return 0[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_13 $$ String[] part2 = v2.split("[\\.\\_\\-]")[ FD ]
Line_18 $$ int cmp-->Line_38 $$ cmp = 1[ FD ]
Line_3 $$ if (v1 == null && v2 == null) -->Line_4 $$ return 0[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) [ CD ]
Line_14 $$ int idx = 0-->Line_32 $$ for (; idx < parts.length; idx++) [ FD ]
Line_35 $$ if (p.matches("\\d+")) -->Line_36 $$ cmp = new Integer(p).compareTo(0)[ CD ]
Line_34 $$ int cmp-->Line_36 $$ cmp = new Integer(p).compareTo(0)[ FD ]
Line_18 $$ int cmp-->Line_40 $$ if (cmp != 0)[ FD ]
Line_34 $$ int cmp-->Line_40 $$ if (cmp != 0)[ FD ]
Line_33 $$ String p = parts[idx]-->Line_35 $$ if (p.matches("\\d+")) [ FD ]
Line_22 $$ cmp = part1[idx].compareTo(part2[idx])-->Line_38 $$ cmp = 1[ FD ]
Line_32 $$ for (; idx < parts.length; idx++) -->Line_40 $$ if (cmp != 0)[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_14 $$ int idx = 0[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_6 $$ if (v1 == null) [ CD ]
Line_14 $$ int idx = 0-->Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) [ FD ]
Line_18 $$ int cmp-->Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))[ FD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_9 $$ if (v2 == null) [ CD ]
Line_18 $$ int cmp-->Line_24 $$ if (cmp != 0)[ FD ]
Line_38 $$ cmp = 1-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_18 $$ int cmp-->Line_22 $$ cmp = part1[idx].compareTo(part2[idx])[ FD ]
Line_27 $$ if (part1.length == part2.length) -->Line_31 $$ String[] parts = left ? part1 : part2[ CD ]
Line_24 $$ if (cmp != 0)-->Line_25 $$ return cmp[ CD ]
Line_38 $$ cmp = 1-->Line_40 $$ if (cmp != 0)[ FD ]
Line_32 $$ for (; idx < parts.length; idx++) -->Line_35 $$ if (p.matches("\\d+")) [ CD ]
Line_15 $$ for (; idx < part1.length && idx < part2.length; idx++) -->Line_18 $$ int cmp[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_27 $$ if (part1.length == part2.length) [ CD ]
Line_16 $$ String p1 = part1[idx]-->Line_19 $$ if (p1.matches("\\d+") && p2.matches("\\d+")) [ FD ]
Line_18 $$ int cmp-->Line_36 $$ cmp = new Integer(p).compareTo(0)[ FD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_40 $$ if (cmp != 0)[ FD ]
Line_34 $$ int cmp-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_36 $$ cmp = new Integer(p).compareTo(0)-->Line_41 $$ return left ? cmp : -cmp[ FD ]
Line_27 $$ if (part1.length == part2.length) -->Line_28 $$ return 0[ CD ]
Line_36 $$ cmp = new Integer(p).compareTo(0)-->Line_38 $$ cmp = 1[ FD ]
Line_36 $$ cmp = new Integer(p).compareTo(0)-->Line_40 $$ if (cmp != 0)[ FD ]
Line_40 $$ if (cmp != 0)-->Line_41 $$ return left ? cmp : -cmp[ CD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_9 $$ if (v2 == null) [ FD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_12 $$ String[] part1 = v1.split("[\\.\\_\\-]")[ CD ]
Line_20 $$ cmp = new Integer(p1).compareTo(new Integer(p2))-->Line_38 $$ cmp = 1[ FD ]
Line_2 $$ public static int compareVersionNumbers(@Nullable String v1, @Nullable String v2) -->Line_3 $$ if (v1 == null && v2 == null) [ CD ]
Line_34 $$ int cmp-->Line_38 $$ cmp = 1[ FD ]
Line_19 $$ if (p1.matches("\\d+") && p2.matches("\\d+")) -->Line_22 $$ cmp = part1[idx].compareTo(part2[idx])[ CD ]
