Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_4 $$ final KeymapManagerEx keymapManager = KeymapManagerEx.getInstanceEx()[ CD ]
Line_8 $$ Collections.sort(plugins, new Comparator<IdeaPluginDescriptor>() -->Line_10 $$ return o1.getName().compareTo(o2.getName())[ CD ]
Line_3 $$ Group pluginsGroup = new Group(KeyMapBundle.message("plugins.group.title"), null, null)-->Line_40 $$ pluginsGroup.addGroup(pluginGroup)[ FD ]
Line_39 $$ if (pluginGroup.getSize() > 0) -->Line_40 $$ pluginsGroup.addGroup(pluginGroup)[ CD ]
Line_4 $$ final KeymapManagerEx keymapManager = KeymapManagerEx.getInstanceEx()-->Line_52 $$ if (keymapManager.getBoundActions().contains(pluginAction))[ FD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_3 $$ Group pluginsGroup = new Group(KeyMapBundle.message("plugins.group.title"), null, null)[ CD ]
Line_5 $$ ActionManagerEx managerEx = ActionManagerEx.getInstanceEx()-->Line_22 $$ final String[] pluginActions = managerEx.getPluginActions(plugin.getPluginId())[ FD ]
Line_6 $$ final List<IdeaPluginDescriptor> plugins = new ArrayList<IdeaPluginDescriptor>()-->Line_8 $$ Collections.sort(plugins, new Comparator<IdeaPluginDescriptor>() [ FD ]
Line_3 $$ Group pluginsGroup = new Group(KeyMapBundle.message("plugins.group.title"), null, null)-->Line_60 $$ pluginsGroup.addGroup(pluginGroup)[ FD ]
Line_4 $$ final KeymapManagerEx keymapManager = KeymapManagerEx.getInstanceEx()-->Line_32 $$ if (keymapManager.getBoundActions().contains(pluginAction))[ FD ]
Line_5 $$ ActionManagerEx managerEx = ActionManagerEx.getInstanceEx()-->Line_47 $$ final String[] pluginActions = managerEx.getPluginActions(pluginId)[ FD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_55 $$ if (filtered == null || filtered.value(anAction)) [ FD ]
Line_26 $$ Arrays.sort(pluginActions, new Comparator<String>() -->Line_28 $$ return getTextToCompare(o1).compareTo(getTextToCompare(o2))[ FD ]
Line_5 $$ ActionManagerEx managerEx = ActionManagerEx.getInstanceEx()-->Line_34 $$ final AnAction anAction = managerEx.getActionOrStub(pluginAction)[ FD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_7 $$ Collections.addAll(plugins, PluginManagerCore.getPlugins())[ CD ]
Line_59 $$ if (pluginGroup.getSize() > 0) -->Line_60 $$ pluginsGroup.addGroup(pluginGroup)[ CD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_63 $$ return pluginsGroup[ CD ]
Line_55 $$ if (filtered == null || filtered.value(anAction)) -->Line_56 $$ pluginGroup.addActionId(pluginAction)[ CD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_6 $$ final List<IdeaPluginDescriptor> plugins = new ArrayList<IdeaPluginDescriptor>()[ CD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_8 $$ Collections.sort(plugins, new Comparator<IdeaPluginDescriptor>() [ CD ]
Line_6 $$ final List<IdeaPluginDescriptor> plugins = new ArrayList<IdeaPluginDescriptor>()-->Line_7 $$ Collections.addAll(plugins, PluginManagerCore.getPlugins())[ FD ]
Line_5 $$ ActionManagerEx managerEx = ActionManagerEx.getInstanceEx()-->Line_54 $$ final AnAction anAction = managerEx.getActionOrStub(pluginAction)[ FD ]
Line_8 $$ Collections.sort(plugins, new Comparator<IdeaPluginDescriptor>() -->Line_10 $$ return o1.getName().compareTo(o2.getName())[ FD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_5 $$ ActionManagerEx managerEx = ActionManagerEx.getInstanceEx()[ CD ]
Line_2 $$ private static Group createPluginsActionsGroup(Condition<AnAction> filtered) -->Line_35 $$ if (filtered == null || filtered.value(anAction)) [ FD ]
Line_35 $$ if (filtered == null || filtered.value(anAction)) -->Line_36 $$ pluginGroup.addActionId(pluginAction)[ CD ]
Line_26 $$ Arrays.sort(pluginActions, new Comparator<String>() -->Line_28 $$ return getTextToCompare(o1).compareTo(getTextToCompare(o2))[ CD ]
Line_8 $$ Collections.sort(plugins, new Comparator<IdeaPluginDescriptor>() -->Line_28 $$ return getTextToCompare(o1).compareTo(getTextToCompare(o2))[ FD ]
