Line_3 $$ LinkedHashSet<PsiClass> bases = new LinkedHashSet<PsiClass>()-->Line_4 $$ InheritanceUtil.getSuperClasses(subClass, bases, includeNonProject)[ FD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_7 $$ PsiClass javaLangObject = JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, subClass.getResolveScope())[ FD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_27 $$ return basesList[ CD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_18 $$ if (fqn1 != null && fqn2 != null)[ CD ]
Line_8 $$ if (includeNonProject && javaLangObject != null && !manager.areElementsEquivalent(javaLangObject, subClass)) -->Line_9 $$ bases.add(javaLangObject)[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_12 $$ ArrayList<PsiClass> basesList = new ArrayList<PsiClass>(bases)[ CD ]
Line_18 $$ if (fqn1 != null && fqn2 != null)-->Line_19 $$ return fqn1.compareTo(fqn2)[ CD ]
Line_6 $$ final PsiManager manager = subClass.getManager()-->Line_7 $$ PsiClass javaLangObject = JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, subClass.getResolveScope())[ FD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_16 $$ final String fqn1 = c1.getQualifiedName()[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_4 $$ InheritanceUtil.getSuperClasses(subClass, bases, includeNonProject)[ CD ]
Line_12 $$ ArrayList<PsiClass> basesList = new ArrayList<PsiClass>(bases)-->Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() [ FD ]
Line_6 $$ final PsiManager manager = subClass.getManager()-->Line_8 $$ if (includeNonProject && javaLangObject != null && !manager.areElementsEquivalent(javaLangObject, subClass)) [ FD ]
Line_17 $$ final String fqn2 = c2.getQualifiedName()-->Line_19 $$ return fqn1.compareTo(fqn2)[ FD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_5 $$ if (!subClass.isInterface()) [ FD ]
Line_7 $$ PsiClass javaLangObject = JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, subClass.getResolveScope())-->Line_9 $$ bases.add(javaLangObject)[ FD ]
Line_3 $$ LinkedHashSet<PsiClass> bases = new LinkedHashSet<PsiClass>()-->Line_9 $$ bases.add(javaLangObject)[ FD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_17 $$ final String fqn2 = c2.getQualifiedName()[ CD ]
Line_5 $$ if (!subClass.isInterface()) -->Line_8 $$ if (includeNonProject && javaLangObject != null && !manager.areElementsEquivalent(javaLangObject, subClass)) [ CD ]
Line_5 $$ if (!subClass.isInterface()) -->Line_6 $$ final PsiManager manager = subClass.getManager()[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_8 $$ if (includeNonProject && javaLangObject != null && !manager.areElementsEquivalent(javaLangObject, subClass)) [ FD ]
Line_20 $$ if (fqn1 == null && fqn2 == null) -->Line_21 $$ return Comparing.compare(c1.getName(), c2.getName())[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_5 $$ if (!subClass.isInterface()) [ CD ]
Line_13 $$ if (sortAlphabetically) -->Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() [ CD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_16 $$ final String fqn1 = c1.getQualifiedName()[ FD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_17 $$ final String fqn2 = c2.getQualifiedName()[ FD ]
Line_7 $$ PsiClass javaLangObject = JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, subClass.getResolveScope())-->Line_8 $$ if (includeNonProject && javaLangObject != null && !manager.areElementsEquivalent(javaLangObject, subClass)) [ FD ]
Line_5 $$ if (!subClass.isInterface()) -->Line_7 $$ PsiClass javaLangObject = JavaPsiFacade.getInstance(manager.getProject()).findClass(CommonClassNames.JAVA_LANG_OBJECT, subClass.getResolveScope())[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_6 $$ final PsiManager manager = subClass.getManager()[ FD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_21 $$ return Comparing.compare(c1.getName(), c2.getName())[ FD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_13 $$ if (sortAlphabetically) [ CD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_20 $$ if (fqn1 == null && fqn2 == null) [ CD ]
Line_16 $$ final String fqn1 = c1.getQualifiedName()-->Line_19 $$ return fqn1.compareTo(fqn2)[ FD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_3 $$ LinkedHashSet<PsiClass> bases = new LinkedHashSet<PsiClass>()[ CD ]
Line_2 $$ public static ArrayList<PsiClass> createBasesList(PsiClass subClass, boolean includeNonProject, boolean sortAlphabetically) -->Line_4 $$ InheritanceUtil.getSuperClasses(subClass, bases, includeNonProject)[ FD ]
Line_14 $$ Collections.sort(basesList, new Comparator<PsiClass>() -->Line_23 $$ return fqn1 == null ? 1 : -1[ CD ]
