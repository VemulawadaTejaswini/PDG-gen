Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_30 $$ assertEquals(node1, root.getChildAt(1))[ FD ]
Line_2 $$ public void testSorting() -->Line_19 $$ assertEquals(node2, root.getChildAt(1))[ CD ]
Line_2 $$ public void testSorting() -->Line_5 $$ root.add(node2)[ CD ]
Line_2 $$ public void testSorting() -->Line_4 $$ DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("2")[ CD ]
Line_12 $$ DefaultTreeModel model = new DefaultTreeModel(root)-->Line_13 $$ TreeUtil.sort(model, new Comparator() [ FD ]
Line_2 $$ public void testSorting() -->Line_30 $$ assertEquals(node1, root.getChildAt(1))[ CD ]
Line_13 $$ TreeUtil.sort(model, new Comparator() -->Line_15 $$ return o1.toString().compareTo(o2.toString())[ CD ]
Line_2 $$ public void testSorting() -->Line_7 $$ root.add(node1)[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_5 $$ root.add(node2)[ FD ]
Line_4 $$ DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("2")-->Line_19 $$ assertEquals(node2, root.getChildAt(1))[ FD ]
Line_2 $$ public void testSorting() -->Line_8 $$ DefaultMutableTreeNode node1_2 = new DefaultMutableTreeNode("1_2")[ CD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_20 $$ assertEquals(node1_1, node1.getChildAt(0))[ FD ]
Line_2 $$ public void testSorting() -->Line_11 $$ node1.add(node1_1)[ CD ]
Line_4 $$ DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("2")-->Line_29 $$ assertEquals(node2, root.getChildAt(0))[ FD ]
Line_2 $$ public void testSorting() -->Line_29 $$ assertEquals(node2, root.getChildAt(0))[ CD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_21 $$ assertEquals(node1_2, node1.getChildAt(1))[ FD ]
Line_2 $$ public void testSorting() -->Line_10 $$ DefaultMutableTreeNode node1_1 = new DefaultMutableTreeNode("1_1")[ CD ]
Line_22 $$ TreeUtil.sort(model, new Comparator() -->Line_25 $$ TreeNode n2 = (TreeNode) o2[ CD ]
Line_2 $$ public void testSorting() -->Line_9 $$ node1.add(node1_2)[ CD ]
Line_2 $$ public void testSorting() -->Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_7 $$ root.add(node1)[ FD ]
Line_25 $$ TreeNode n2 = (TreeNode) o2-->Line_26 $$ return n1.getChildCount() - n2.getChildCount()[ FD ]
Line_22 $$ TreeUtil.sort(model, new Comparator() -->Line_24 $$ TreeNode n1 = (TreeNode) o1[ CD ]
Line_10 $$ DefaultMutableTreeNode node1_1 = new DefaultMutableTreeNode("1_1")-->Line_11 $$ node1.add(node1_1)[ FD ]
Line_13 $$ TreeUtil.sort(model, new Comparator() -->Line_15 $$ return o1.toString().compareTo(o2.toString())[ FD ]
Line_12 $$ DefaultTreeModel model = new DefaultTreeModel(root)-->Line_22 $$ TreeUtil.sort(model, new Comparator() [ FD ]
Line_4 $$ DefaultMutableTreeNode node2 = new DefaultMutableTreeNode("2")-->Line_5 $$ root.add(node2)[ FD ]
Line_2 $$ public void testSorting() -->Line_12 $$ DefaultTreeModel model = new DefaultTreeModel(root)[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_18 $$ assertEquals(node1, root.getChildAt(0))[ FD ]
Line_10 $$ DefaultMutableTreeNode node1_1 = new DefaultMutableTreeNode("1_1")-->Line_20 $$ assertEquals(node1_1, node1.getChildAt(0))[ FD ]
Line_2 $$ public void testSorting() -->Line_22 $$ TreeUtil.sort(model, new Comparator() [ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_29 $$ assertEquals(node2, root.getChildAt(0))[ FD ]
Line_2 $$ public void testSorting() -->Line_21 $$ assertEquals(node1_2, node1.getChildAt(1))[ CD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_9 $$ node1.add(node1_2)[ FD ]
Line_2 $$ public void testSorting() -->Line_18 $$ assertEquals(node1, root.getChildAt(0))[ CD ]
Line_22 $$ TreeUtil.sort(model, new Comparator() -->Line_26 $$ return n1.getChildCount() - n2.getChildCount()[ CD ]
Line_8 $$ DefaultMutableTreeNode node1_2 = new DefaultMutableTreeNode("1_2")-->Line_9 $$ node1.add(node1_2)[ FD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_7 $$ root.add(node1)[ FD ]
Line_2 $$ public void testSorting() -->Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")[ CD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_18 $$ assertEquals(node1, root.getChildAt(0))[ FD ]
Line_2 $$ public void testSorting() -->Line_13 $$ TreeUtil.sort(model, new Comparator() [ CD ]
Line_2 $$ public void testSorting() -->Line_20 $$ assertEquals(node1_1, node1.getChildAt(0))[ CD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_30 $$ assertEquals(node1, root.getChildAt(1))[ FD ]
Line_24 $$ TreeNode n1 = (TreeNode) o1-->Line_26 $$ return n1.getChildCount() - n2.getChildCount()[ FD ]
Line_6 $$ DefaultMutableTreeNode node1 = new DefaultMutableTreeNode("1")-->Line_11 $$ node1.add(node1_1)[ FD ]
Line_3 $$ DefaultMutableTreeNode root = new DefaultMutableTreeNode("root")-->Line_19 $$ assertEquals(node2, root.getChildAt(1))[ FD ]
Line_8 $$ DefaultMutableTreeNode node1_2 = new DefaultMutableTreeNode("1_2")-->Line_21 $$ assertEquals(node1_2, node1.getChildAt(1))[ FD ]
