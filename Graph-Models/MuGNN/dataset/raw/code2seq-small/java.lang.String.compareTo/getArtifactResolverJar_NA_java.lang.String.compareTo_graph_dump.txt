Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) -->Line_9 $$ isMaven3 = true[ CD ]
Line_5 $$ if (mavenVersion != null && mavenVersion.compareTo("3.1.0") >= 0) -->Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) [ CD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_22 $$ tempFile.deleteOnExit()[ CD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_16 $$ if (!classDirOrJar.isDirectory()) [ CD ]
Line_9 $$ isMaven3 = true-->Line_12 $$ isMaven3 = false[ FD ]
Line_6 $$ isMaven3 = true-->Line_12 $$ isMaven3 = false[ FD ]
Line_23 $$ ZipOutputStream zipOutput = new ZipOutputStream(new FileOutputStream(tempFile))-->Line_32 $$ zipOutput.close()[ FD ]
Line_4 $$ Class marker-->Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))[ FD ]
Line_26 $$ if (isMaven3) -->Line_29 $$ ZipUtil.addDirToZipRecursively(zipOutput, null, new File(m2Module, commonClassesPath), commonClassesPath, null, null)[ CD ]
Line_6 $$ isMaven3 = true-->Line_9 $$ isMaven3 = true[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_23 $$ ZipOutputStream zipOutput = new ZipOutputStream(new FileOutputStream(tempFile))[ CD ]
Line_3 $$ boolean isMaven3-->Line_6 $$ isMaven3 = true[ FD ]
Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) -->Line_13 $$ marker = MavenArtifactResolvedM2RtMarker.class[ CD ]
Line_26 $$ if (isMaven3) -->Line_28 $$ String commonClassesPath = MavenModuleMap.class.getPackage().getName().replace('.', '/')[ CD ]
Line_5 $$ if (mavenVersion != null && mavenVersion.compareTo("3.1.0") >= 0) -->Line_7 $$ marker = MavenArtifactResolvedM31RtMarker.class[ CD ]
Line_3 $$ boolean isMaven3-->Line_9 $$ isMaven3 = true[ FD ]
Line_10 $$ marker = MavenArtifactResolvedM3RtMarker.class-->Line_13 $$ marker = MavenArtifactResolvedM2RtMarker.class[ FD ]
Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))-->Line_25 $$ ZipUtil.addDirToZipRecursively(zipOutput, null, classDirOrJar, "", null, null)[ FD ]
Line_13 $$ marker = MavenArtifactResolvedM2RtMarker.class-->Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))[ FD ]
Line_10 $$ marker = MavenArtifactResolvedM3RtMarker.class-->Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))[ FD ]
Line_23 $$ ZipOutputStream zipOutput = new ZipOutputStream(new FileOutputStream(tempFile))-->Line_25 $$ ZipUtil.addDirToZipRecursively(zipOutput, null, classDirOrJar, "", null, null)[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) [ FD ]
Line_7 $$ marker = MavenArtifactResolvedM31RtMarker.class-->Line_13 $$ marker = MavenArtifactResolvedM2RtMarker.class[ FD ]
Line_28 $$ String commonClassesPath = MavenModuleMap.class.getPackage().getName().replace('.', '/')-->Line_29 $$ ZipUtil.addDirToZipRecursively(zipOutput, null, new File(m2Module, commonClassesPath), commonClassesPath, null, null)[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_4 $$ Class marker[ CD ]
Line_23 $$ ZipOutputStream zipOutput = new ZipOutputStream(new FileOutputStream(tempFile))-->Line_29 $$ ZipUtil.addDirToZipRecursively(zipOutput, null, new File(m2Module, commonClassesPath), commonClassesPath, null, null)[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_34 $$ return tempFile.getAbsolutePath()[ CD ]
Line_4 $$ Class marker-->Line_13 $$ marker = MavenArtifactResolvedM2RtMarker.class[ FD ]
Line_4 $$ Class marker-->Line_10 $$ marker = MavenArtifactResolvedM3RtMarker.class[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_5 $$ if (mavenVersion != null && mavenVersion.compareTo("3.1.0") >= 0) [ CD ]
Line_3 $$ boolean isMaven3-->Line_12 $$ isMaven3 = false[ FD ]
Line_26 $$ if (isMaven3) -->Line_27 $$ File m2Module = new File(PathUtil.getJarPathForClass(MavenModuleMap.class))[ CD ]
Line_5 $$ if (mavenVersion != null && mavenVersion.compareTo("3.1.0") >= 0) -->Line_6 $$ isMaven3 = true[ CD ]
Line_7 $$ marker = MavenArtifactResolvedM31RtMarker.class-->Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))[ FD ]
Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) -->Line_12 $$ isMaven3 = false[ CD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_5 $$ if (mavenVersion != null && mavenVersion.compareTo("3.1.0") >= 0) [ FD ]
Line_8 $$ if (mavenVersion != null && mavenVersion.compareTo("3.0.0") >= 0) -->Line_10 $$ marker = MavenArtifactResolvedM3RtMarker.class[ CD ]
Line_7 $$ marker = MavenArtifactResolvedM31RtMarker.class-->Line_10 $$ marker = MavenArtifactResolvedM3RtMarker.class[ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))[ CD ]
Line_4 $$ Class marker-->Line_7 $$ marker = MavenArtifactResolvedM31RtMarker.class[ FD ]
Line_15 $$ File classDirOrJar = new File(PathUtil.getJarPathForClass(marker))-->Line_16 $$ if (!classDirOrJar.isDirectory()) [ FD ]
Line_2 $$ private static String getArtifactResolverJar(@Nullable String mavenVersion) throws IOException -->Line_3 $$ boolean isMaven3[ CD ]
