Line_6 $$ for (MavenArtifactInfo artifactInfo : each.versions) -->Line_7 $$ tree.put(new MavenVersionComparable(artifactInfo.getVersion()), artifactInfo)[ FD ]
Line_5 $$ TreeMap<MavenVersionComparable, MavenArtifactInfo> tree = new TreeMap<MavenVersionComparable, MavenArtifactInfo>(Collections.reverseOrder())-->Line_10 $$ each.versions.addAll(tree.values())[ FD ]
Line_5 $$ TreeMap<MavenVersionComparable, MavenArtifactInfo> tree = new TreeMap<MavenVersionComparable, MavenArtifactInfo>(Collections.reverseOrder())-->Line_7 $$ tree.put(new MavenVersionComparable(artifactInfo.getVersion()), artifactInfo)[ FD ]
Line_4 $$ if (each.versions.size() > 1) -->Line_10 $$ each.versions.addAll(tree.values())[ CD ]
Line_13 $$ Collections.sort(result, new Comparator<RESULT_TYPE>() -->Line_16 $$ return makeSortKey(o1).compareTo(makeSortKey(o2))[ FD ]
Line_2 $$ private void sort(List<RESULT_TYPE> result) -->Line_13 $$ Collections.sort(result, new Comparator<RESULT_TYPE>() [ FD ]
Line_4 $$ if (each.versions.size() > 1) -->Line_9 $$ each.versions.clear()[ CD ]
Line_4 $$ if (each.versions.size() > 1) -->Line_5 $$ TreeMap<MavenVersionComparable, MavenArtifactInfo> tree = new TreeMap<MavenVersionComparable, MavenArtifactInfo>(Collections.reverseOrder())[ CD ]
Line_13 $$ Collections.sort(result, new Comparator<RESULT_TYPE>() -->Line_16 $$ return makeSortKey(o1).compareTo(makeSortKey(o2))[ CD ]
Line_2 $$ private void sort(List<RESULT_TYPE> result) -->Line_13 $$ Collections.sort(result, new Comparator<RESULT_TYPE>() [ CD ]
