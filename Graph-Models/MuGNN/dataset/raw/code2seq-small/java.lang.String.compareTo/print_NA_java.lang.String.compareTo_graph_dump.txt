Line_2 $$ public void print(StyledTextOutput output) -->Line_27 $$ output.println()[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_29 $$ output.println()[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_8 $$ final List<Class> sortedClasses = sort(classes, new Comparator<Class>() [ CD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_28 $$ printTaskDescription(output, tasksByType)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_26 $$ printlnCommandlineOptions(output, tasksByType)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_4 $$ output.text("Detailed task information for ").withStyle(UserInput).println(taskPath)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_30 $$ printTaskGroup(output, tasksByType)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_3 $$ final List<Task> tasks = sort(selection.getTasks())[ CD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_16 $$ final LinePrefixingStyledTextOutput pathOutput = createIndentedOutput(output, INDENT)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_14 $$ output.println()[ FD ]
Line_8 $$ final List<Class> sortedClasses = sort(classes, new Comparator<Class>() -->Line_10 $$ return o1.getSimpleName().compareTo(o2.getSimpleName())[ CD ]
Line_6 $$ final Set<Class> classes = classListMap.keySet()-->Line_7 $$ boolean multipleClasses = classes.size() > 1[ FD ]
Line_8 $$ final List<Class> sortedClasses = sort(classes, new Comparator<Class>() -->Line_10 $$ return o1.getSimpleName().compareTo(o2.getSimpleName())[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_21 $$ output.println()[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_22 $$ final LinePrefixingStyledTextOutput typeOutput = createIndentedOutput(output, INDENT)[ FD ]
Line_3 $$ final List<Task> tasks = sort(selection.getTasks())-->Line_5 $$ final ListMultimap<Class, Task> classListMap = groupTasksByType(tasks)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_6 $$ final Set<Class> classes = classListMap.keySet()[ CD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_33 $$ output.println("----------------------")[ FD ]
Line_6 $$ final Set<Class> classes = classListMap.keySet()-->Line_8 $$ final List<Class> sortedClasses = sort(classes, new Comparator<Class>() [ FD ]
Line_5 $$ final ListMultimap<Class, Task> classListMap = groupTasksByType(tasks)-->Line_6 $$ final Set<Class> classes = classListMap.keySet()[ FD ]
Line_31 $$ if (multipleClasses) -->Line_33 $$ output.println("----------------------")[ CD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_5 $$ final ListMultimap<Class, Task> classListMap = groupTasksByType(tasks)[ CD ]
Line_31 $$ if (multipleClasses) -->Line_32 $$ output.println()[ CD ]
Line_5 $$ final ListMultimap<Class, Task> classListMap = groupTasksByType(tasks)-->Line_15 $$ final List<Task> tasksByType = classListMap.get(clazz)[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_32 $$ output.println()[ FD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_7 $$ boolean multipleClasses = classes.size() > 1[ CD ]
Line_2 $$ public void print(StyledTextOutput output) -->Line_4 $$ output.text("Detailed task information for ").withStyle(UserInput).println(taskPath)[ CD ]
