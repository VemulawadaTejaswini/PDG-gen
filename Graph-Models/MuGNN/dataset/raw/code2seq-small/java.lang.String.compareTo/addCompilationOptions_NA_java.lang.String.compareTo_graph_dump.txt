Line_25 $$ String bytecodeTarget = null-->Line_32 $$ bytecodeTarget = moduleTarget[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_47 $$ final int chunkSdkVersion = getChunkSdkVersion(chunk)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_62 $$ options.add("1." + chunkSdkVersion)[ FD ]
Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) -->Line_9 $$ if (encoding != null) [ CD ]
Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)-->Line_16 $$ options.add(encoding)[ FD ]
Line_80 $$ if (srcOutput != null) -->Line_81 $$ srcOutput.mkdirs()[ CD ]
Line_41 $$ bytecodeTarget = langLevel-->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ FD ]
Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())-->Line_41 $$ bytecodeTarget = langLevel[ FD ]
Line_9 $$ if (encoding != null) -->Line_10 $$ msgBuilder.append("\n\"").append(encoding).append("\" will be used by compiler")[ CD ]
Line_79 $$ final File srcOutput = ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(), chunk.containsTests(), profile)-->Line_83 $$ options.add(srcOutput.getPath())[ FD ]
Line_80 $$ if (srcOutput != null) -->Line_83 $$ options.add(srcOutput.getPath())[ CD ]
Line_31 $$ if (bytecodeTarget == null) -->Line_34 $$ if (moduleTarget.compareTo(bytecodeTarget) < 0) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_65 $$ if (profile != null && profile.isEnabled()) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_26 $$ for (JpsModule module : chunk.getModules()) [ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ FD ]
Line_3 $$ if (!isEncodingSet(options)) -->Line_14 $$ if (!StringUtil.isEmpty(encoding)) [ CD ]
Line_41 $$ bytecodeTarget = langLevel-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_79 $$ final File srcOutput = ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(), chunk.containsTests(), profile)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_8 $$ msgBuilder.append("Multiple encodings set for module chunk ").append(chunk.getName())[ FD ]
Line_66 $$ if (!profile.isObtainProcessorsFromClasspath()) -->Line_67 $$ final String processorsPath = profile.getProcessorPath()[ CD ]
Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)-->Line_14 $$ if (!StringUtil.isEmpty(encoding)) [ FD ]
Line_34 $$ if (moduleTarget.compareTo(bytecodeTarget) < 0) -->Line_35 $$ bytecodeTarget = moduleTarget[ CD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_72 $$ if (!processors.isEmpty()) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_3 $$ if (!isEncodingSet(options)) [ CD ]
Line_48 $$ if (bytecodeTarget != null) -->Line_58 $$ options.add(bytecodeTarget)[ CD ]
Line_14 $$ if (!StringUtil.isEmpty(encoding)) -->Line_16 $$ options.add(encoding)[ CD ]
Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())-->Line_34 $$ if (moduleTarget.compareTo(bytecodeTarget) < 0) [ FD ]
Line_20 $$ if (!StringUtil.isEmpty(langLevel)) -->Line_21 $$ options.add("-source")[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_15 $$ options.add("-encoding")[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())[ FD ]
Line_48 $$ if (bytecodeTarget != null) -->Line_49 $$ options.add("-target")[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_22 $$ options.add(langLevel)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_83 $$ options.add(srcOutput.getPath())[ FD ]
Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) -->Line_7 $$ final StringBuilder msgBuilder = new StringBuilder()[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_66 $$ if (!profile.isObtainProcessorsFromClasspath()) [ FD ]
Line_26 $$ for (JpsModule module : chunk.getModules()) -->Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)[ FD ]
Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) -->Line_8 $$ msgBuilder.append("Multiple encodings set for module chunk ").append(chunk.getName())[ CD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_39 $$ if (bytecodeTarget == null) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) [ FD ]
Line_47 $$ final int chunkSdkVersion = getChunkSdkVersion(chunk)-->Line_53 $$ if (userSpecifiedTargetVersion > chunkSdkVersion) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_74 $$ options.add(StringUtil.join(processors, ","))[ FD ]
Line_14 $$ if (!StringUtil.isEmpty(encoding)) -->Line_15 $$ options.add("-encoding")[ CD ]
Line_71 $$ final Set<String> processors = profile.getProcessors()-->Line_72 $$ if (!processors.isEmpty()) [ FD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_71 $$ final Set<String> processors = profile.getProcessors()[ CD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_48 $$ if (bytecodeTarget != null) [ FD ]
Line_31 $$ if (bytecodeTarget == null) -->Line_32 $$ bytecodeTarget = moduleTarget[ CD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ FD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_80 $$ if (srcOutput != null) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ FD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_48 $$ if (bytecodeTarget != null) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_4 $$ final CompilerEncodingConfiguration config = context.getProjectDescriptor().getEncodingConfiguration()[ FD ]
Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)-->Line_10 $$ msgBuilder.append("\n\"").append(encoding).append("\" will be used by compiler")[ FD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_66 $$ if (!profile.isObtainProcessorsFromClasspath()) [ CD ]
Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())-->Line_40 $$ if (!StringUtil.isEmpty(langLevel)) [ FD ]
Line_48 $$ if (bytecodeTarget != null) -->Line_60 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) [ CD ]
Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_41 $$ bytecodeTarget = langLevel-->Line_48 $$ if (bytecodeTarget != null) [ FD ]
Line_3 $$ if (!isEncodingSet(options)) -->Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) [ CD ]
Line_4 $$ final CompilerEncodingConfiguration config = context.getProjectDescriptor().getEncodingConfiguration()-->Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_73 $$ options.add("-processor")[ FD ]
Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)-->Line_9 $$ if (encoding != null) [ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)-->Line_53 $$ if (userSpecifiedTargetVersion > chunkSdkVersion) [ FD ]
Line_66 $$ if (!profile.isObtainProcessorsFromClasspath()) -->Line_68 $$ options.add("-processorpath")[ CD ]
Line_79 $$ final File srcOutput = ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(), chunk.containsTests(), profile)-->Line_81 $$ srcOutput.mkdirs()[ FD ]
Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_40 $$ if (!StringUtil.isEmpty(langLevel)) -->Line_41 $$ bytecodeTarget = langLevel[ CD ]
Line_25 $$ String bytecodeTarget = null-->Line_41 $$ bytecodeTarget = langLevel[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_12 $$ context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.INFO, msgBuilder.toString()))[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_20 $$ if (!StringUtil.isEmpty(langLevel)) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_41 $$ bytecodeTarget = langLevel-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_6 $$ if (config.getAllModuleChunkEncodings(chunk).size() > 1) -->Line_12 $$ context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.INFO, msgBuilder.toString()))[ CD ]
Line_3 $$ if (!isEncodingSet(options)) -->Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)[ CD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_41 $$ bytecodeTarget = langLevel[ FD ]
Line_47 $$ final int chunkSdkVersion = getChunkSdkVersion(chunk)-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_24 $$ final JpsJavaCompilerConfiguration compilerConfiguration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(context.getProjectDescriptor().getProject())-->Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_77 $$ options.add("-A" + optionEntry.getKey() + "=" + optionEntry.getValue())[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_25 $$ String bytecodeTarget = null[ CD ]
Line_3 $$ if (!isEncodingSet(options)) -->Line_4 $$ final CompilerEncodingConfiguration config = context.getProjectDescriptor().getEncodingConfiguration()[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_21 $$ options.add("-source")[ FD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_79 $$ final File srcOutput = ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(), chunk.containsTests(), profile)[ CD ]
Line_66 $$ if (!profile.isObtainProcessorsFromClasspath()) -->Line_69 $$ options.add(FileUtil.toSystemDependentName(processorsPath.trim()))[ CD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_41 $$ bytecodeTarget = langLevel[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_24 $$ final JpsJavaCompilerConfiguration compilerConfiguration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(context.getProjectDescriptor().getProject())[ FD ]
Line_65 $$ if (profile != null && profile.isEnabled()) -->Line_86 $$ options.add("-proc:none")[ CD ]
Line_39 $$ if (bytecodeTarget == null) -->Line_40 $$ if (!StringUtil.isEmpty(langLevel)) [ CD ]
Line_79 $$ final File srcOutput = ProjectPaths.getAnnotationProcessorGeneratedSourcesOutputDir(chunk.getModules().iterator().next(), chunk.containsTests(), profile)-->Line_80 $$ if (srcOutput != null) [ FD ]
Line_7 $$ final StringBuilder msgBuilder = new StringBuilder()-->Line_12 $$ context.processMessage(new CompilerMessage(BUILDER_NAME, BuildMessage.Kind.INFO, msgBuilder.toString()))[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_52 $$ if (userSpecifiedTargetVersion > 0 && userSpecifiedTargetVersion <= compilerSdkVersion) -->Line_53 $$ if (userSpecifiedTargetVersion > chunkSdkVersion) [ CD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_69 $$ options.add(FileUtil.toSystemDependentName(processorsPath.trim()))[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_46 $$ final int compilerSdkVersion = getCompilerSdkVersion(context)[ CD ]
Line_50 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) -->Line_52 $$ if (userSpecifiedTargetVersion > 0 && userSpecifiedTargetVersion <= compilerSdkVersion) [ CD ]
Line_72 $$ if (!processors.isEmpty()) -->Line_74 $$ options.add(StringUtil.join(processors, ","))[ CD ]
Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())-->Line_32 $$ bytecodeTarget = moduleTarget[ FD ]
Line_7 $$ final StringBuilder msgBuilder = new StringBuilder()-->Line_8 $$ msgBuilder.append("Multiple encodings set for module chunk ").append(chunk.getName())[ FD ]
Line_60 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) -->Line_61 $$ options.add("-target")[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_82 $$ options.add("-s")[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_68 $$ options.add("-processorpath")[ FD ]
Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())-->Line_35 $$ bytecodeTarget = moduleTarget[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_31 $$ if (bytecodeTarget == null) [ FD ]
Line_60 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) -->Line_62 $$ options.add("1." + chunkSdkVersion)[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_86 $$ options.add("-proc:none")[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_34 $$ if (moduleTarget.compareTo(bytecodeTarget) < 0) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_65 $$ if (profile != null && profile.isEnabled()) [ CD ]
Line_41 $$ bytecodeTarget = langLevel-->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ FD ]
Line_71 $$ final Set<String> processors = profile.getProcessors()-->Line_74 $$ options.add(StringUtil.join(processors, ","))[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_16 $$ options.add(encoding)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_48 $$ if (bytecodeTarget != null) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_49 $$ options.add("-target")[ FD ]
Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)-->Line_48 $$ if (bytecodeTarget != null) [ FD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_39 $$ if (bytecodeTarget == null) [ FD ]
Line_72 $$ if (!processors.isEmpty()) -->Line_73 $$ options.add("-processor")[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_24 $$ final JpsJavaCompilerConfiguration compilerConfiguration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(context.getProjectDescriptor().getProject())[ CD ]
Line_50 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) -->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ CD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_61 $$ options.add("-target")[ FD ]
Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())-->Line_22 $$ options.add(langLevel)[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ FD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_35 $$ bytecodeTarget = moduleTarget[ FD ]
Line_48 $$ if (bytecodeTarget != null) -->Line_50 $$ if (chunkSdkVersion > 0 && compilerSdkVersion > chunkSdkVersion) [ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_71 $$ final Set<String> processors = profile.getProcessors()[ FD ]
Line_19 $$ final String langLevel = getLanguageLevel(chunk.getModules().iterator().next())-->Line_20 $$ if (!StringUtil.isEmpty(langLevel)) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_3 $$ if (!isEncodingSet(options)) [ FD ]
Line_76 $$ for (Map.Entry<String, String> optionEntry : profile.getProcessorOptions().entrySet()) -->Line_77 $$ options.add("-A" + optionEntry.getKey() + "=" + optionEntry.getValue())[ FD ]
Line_20 $$ if (!StringUtil.isEmpty(langLevel)) -->Line_22 $$ options.add(langLevel)[ CD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_7 $$ final StringBuilder msgBuilder = new StringBuilder()-->Line_10 $$ msgBuilder.append("\n\"").append(encoding).append("\" will be used by compiler")[ FD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_58 $$ options.add(bytecodeTarget)[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_35 $$ bytecodeTarget = moduleTarget[ FD ]
Line_40 $$ if (!StringUtil.isEmpty(langLevel)) -->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ CD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_76 $$ for (Map.Entry<String, String> optionEntry : profile.getProcessorOptions().entrySet()) [ FD ]
Line_53 $$ if (userSpecifiedTargetVersion > chunkSdkVersion) -->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ CD ]
Line_25 $$ String bytecodeTarget = null-->Line_39 $$ if (bytecodeTarget == null) [ FD ]
Line_35 $$ bytecodeTarget = moduleTarget-->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ FD ]
Line_27 $$ final String moduleTarget = compilerConfiguration.getByteCodeTargetLevel(module.getName())-->Line_28 $$ if (moduleTarget == null) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_46 $$ final int compilerSdkVersion = getCompilerSdkVersion(context)[ FD ]
Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)-->Line_54 $$ bytecodeTarget = "1." + chunkSdkVersion[ FD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)[ FD ]
Line_25 $$ String bytecodeTarget = null-->Line_48 $$ if (bytecodeTarget != null) [ FD ]
Line_43 $$ bytecodeTarget = USER_DEFINED_BYTECODE_TARGET.get(context)-->Line_51 $$ final int userSpecifiedTargetVersion = convertToNumber(bytecodeTarget)[ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_67 $$ final String processorsPath = profile.getProcessorPath()[ FD ]
Line_80 $$ if (srcOutput != null) -->Line_82 $$ options.add("-s")[ CD ]
Line_67 $$ final String processorsPath = profile.getProcessorPath()-->Line_69 $$ options.add(FileUtil.toSystemDependentName(processorsPath.trim()))[ FD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_34 $$ if (moduleTarget.compareTo(bytecodeTarget) < 0) [ FD ]
Line_32 $$ bytecodeTarget = moduleTarget-->Line_39 $$ if (bytecodeTarget == null) [ FD ]
Line_2 $$ public static void addCompilationOptions(List<String> options, CompileContext context, ModuleChunk chunk, @Nullable ProcessorConfigProfile profile) -->Line_47 $$ final int chunkSdkVersion = getChunkSdkVersion(chunk)[ CD ]
Line_4 $$ final CompilerEncodingConfiguration config = context.getProjectDescriptor().getEncodingConfiguration()-->Line_5 $$ final String encoding = config.getPreferredModuleChunkEncoding(chunk)[ FD ]
