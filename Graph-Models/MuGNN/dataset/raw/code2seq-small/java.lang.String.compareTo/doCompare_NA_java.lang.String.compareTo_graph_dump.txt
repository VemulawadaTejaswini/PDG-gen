Line_9 $$ String name2 = javaTerm2.getName()-->Line_14 $$ if (!StringUtil.isUpperCase(name1) && StringUtil.isUpperCase(name2) && !StringUtil.isLowerCase(name2)) [ FD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_19 $$ if (name2.equals("_log") || name2.equals("_logger")) [ FD ]
Line_3 $$ int type1 = javaTerm1.getType()-->Line_18 $$ if (type1 == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) [ FD ]
Line_19 $$ if (name2.equals("_log") || name2.equals("_logger")) -->Line_20 $$ return 1[ CD ]
Line_22 $$ if (name1.equals("_instance") || name1.equals("_log") || name1.equals("_logger")) -->Line_23 $$ return -1[ CD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_33 $$ if (name1.compareTo(name2) != 0) [ FD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_11 $$ if (StringUtil.isUpperCase(name1) && !StringUtil.isLowerCase(name1) && !StringUtil.isUpperCase(name2)) [ FD ]
Line_30 $$ NaturalOrderStringComparator naturalOrderStringComparator = new NaturalOrderStringComparator(true, false)-->Line_35 $$ return -naturalOrderStringComparator.compare(name1, name2)[ FD ]
Line_11 $$ if (StringUtil.isUpperCase(name1) && !StringUtil.isLowerCase(name1) && !StringUtil.isUpperCase(name2)) -->Line_12 $$ return -1[ CD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_35 $$ return -naturalOrderStringComparator.compare(name1, name2)[ FD ]
Line_14 $$ if (!StringUtil.isUpperCase(name1) && StringUtil.isUpperCase(name2) && !StringUtil.isLowerCase(name2)) -->Line_15 $$ return 1[ CD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_35 $$ return -naturalOrderStringComparator.compare(name1, name2)[ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_4 $$ int type2 = javaTerm2.getType()[ CD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_29 $$ if (name1.compareToIgnoreCase(name2) != 0) [ FD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_33 $$ if (name1.compareTo(name2) != 0) [ FD ]
Line_18 $$ if (type1 == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) -->Line_19 $$ if (name2.equals("_log") || name2.equals("_logger")) [ CD ]
Line_3 $$ int type1 = javaTerm1.getType()-->Line_5 $$ if (type1 != type2) [ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_18 $$ if (type1 == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) [ CD ]
Line_18 $$ if (type1 == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) -->Line_22 $$ if (name1.equals("_instance") || name1.equals("_log") || name1.equals("_logger")) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_4 $$ int type2 = javaTerm2.getType()[ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_10 $$ if (javaTerm1.isVariable()) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_8 $$ String name1 = javaTerm1.getName()[ FD ]
Line_29 $$ if (name1.compareToIgnoreCase(name2) != 0) -->Line_31 $$ return naturalOrderStringComparator.compare(name1, name2)[ CD ]
Line_18 $$ if (type1 == JavaTerm.TYPE_VARIABLE_PRIVATE_STATIC) -->Line_25 $$ if (name2.equals("_instance")) [ CD ]
Line_10 $$ if (javaTerm1.isVariable()) -->Line_14 $$ if (!StringUtil.isUpperCase(name1) && StringUtil.isUpperCase(name2) && !StringUtil.isLowerCase(name2)) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_3 $$ int type1 = javaTerm1.getType()[ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_10 $$ if (javaTerm1.isVariable()) [ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_9 $$ String name2 = javaTerm2.getName()[ CD ]
Line_5 $$ if (type1 != type2) -->Line_6 $$ return type1 - type2[ CD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_29 $$ if (name1.compareToIgnoreCase(name2) != 0) [ FD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_11 $$ if (StringUtil.isUpperCase(name1) && !StringUtil.isLowerCase(name1) && !StringUtil.isUpperCase(name2)) [ FD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_25 $$ if (name2.equals("_instance")) [ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_5 $$ if (type1 != type2) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_8 $$ String name1 = javaTerm1.getName()[ CD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_22 $$ if (name1.equals("_instance") || name1.equals("_log") || name1.equals("_logger")) [ FD ]
Line_9 $$ String name2 = javaTerm2.getName()-->Line_31 $$ return naturalOrderStringComparator.compare(name1, name2)[ FD ]
Line_29 $$ if (name1.compareToIgnoreCase(name2) != 0) -->Line_30 $$ NaturalOrderStringComparator naturalOrderStringComparator = new NaturalOrderStringComparator(true, false)[ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_33 $$ if (name1.compareTo(name2) != 0) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_37 $$ return compareParameterTypes(javaTerm1, javaTerm2)[ CD ]
Line_30 $$ NaturalOrderStringComparator naturalOrderStringComparator = new NaturalOrderStringComparator(true, false)-->Line_31 $$ return naturalOrderStringComparator.compare(name1, name2)[ FD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_14 $$ if (!StringUtil.isUpperCase(name1) && StringUtil.isUpperCase(name2) && !StringUtil.isLowerCase(name2)) [ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_37 $$ return compareParameterTypes(javaTerm1, javaTerm2)[ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_9 $$ String name2 = javaTerm2.getName()[ FD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_29 $$ if (name1.compareToIgnoreCase(name2) != 0) [ CD ]
Line_10 $$ if (javaTerm1.isVariable()) -->Line_11 $$ if (StringUtil.isUpperCase(name1) && !StringUtil.isLowerCase(name1) && !StringUtil.isUpperCase(name2)) [ CD ]
Line_2 $$ protected int doCompare(JavaTerm javaTerm1, JavaTerm javaTerm2) -->Line_3 $$ int type1 = javaTerm1.getType()[ FD ]
Line_4 $$ int type2 = javaTerm2.getType()-->Line_5 $$ if (type1 != type2) [ FD ]
Line_33 $$ if (name1.compareTo(name2) != 0) -->Line_35 $$ return -naturalOrderStringComparator.compare(name1, name2)[ CD ]
Line_25 $$ if (name2.equals("_instance")) -->Line_26 $$ return 1[ CD ]
Line_8 $$ String name1 = javaTerm1.getName()-->Line_31 $$ return naturalOrderStringComparator.compare(name1, name2)[ FD ]
