Line_11 $$ dis = fileSystem.open(outFile)-->Line_26 $$ dis.close()[ FD ]
Line_15 $$ String keyString = record.substring(0, blankPos)-->Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) [ FD ]
Line_9 $$ for (Path outFile : fileList) -->Line_11 $$ dis = fileSystem.open(outFile)[ FD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_14 $$ int blankPos = record.indexOf(" ")[ FD ]
Line_12 $$ String record-->Line_16 $$ String valueString = record.substring(blankPos + 1)[ FD ]
Line_25 $$ if (dis != null) -->Line_26 $$ dis.close()[ CD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_31 $$ assertEquals((long) (NUM_MAPPERS * NUM_LINES), numValidRecords)[ CD ]
Line_15 $$ String keyString = record.substring(0, blankPos)-->Line_18 $$ prevKeyValue = keyString[ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_8 $$ Path[] fileList = FileUtil.stat2Paths(fileSystem.listStatus(OUTPUT, new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_16 $$ String valueString = record.substring(blankPos + 1)-->Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) [ FD ]
Line_3 $$ FSDataInputStream dis = null-->Line_11 $$ dis = fileSystem.open(outFile)[ FD ]
Line_5 $$ long numInvalidRecords = 0-->Line_21 $$ numInvalidRecords++[ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_11 $$ dis = fileSystem.open(outFile)[ FD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_15 $$ String keyString = record.substring(0, blankPos)[ CD ]
Line_7 $$ String prevKeyValue = "000000000"-->Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) [ FD ]
Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) -->Line_21 $$ numInvalidRecords++[ CD ]
Line_12 $$ String record-->Line_13 $$ while ((record = dis.readLine()) != null) [ FD ]
Line_12 $$ String record-->Line_15 $$ String keyString = record.substring(0, blankPos)[ FD ]
Line_3 $$ FSDataInputStream dis = null-->Line_25 $$ if (dis != null) [ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_3 $$ FSDataInputStream dis = null[ CD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_15 $$ String keyString = record.substring(0, blankPos)[ FD ]
Line_25 $$ if (dis != null) -->Line_27 $$ dis = null[ CD ]
Line_11 $$ dis = fileSystem.open(outFile)-->Line_27 $$ dis = null[ FD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_14 $$ int blankPos = record.indexOf(" ")[ CD ]
Line_5 $$ long numInvalidRecords = 0-->Line_32 $$ assertEquals(0, numInvalidRecords)[ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_5 $$ long numInvalidRecords = 0[ CD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_16 $$ String valueString = record.substring(blankPos + 1)[ FD ]
Line_12 $$ String record-->Line_14 $$ int blankPos = record.indexOf(" ")[ FD ]
Line_4 $$ long numValidRecords = 0-->Line_31 $$ assertEquals((long) (NUM_MAPPERS * NUM_LINES), numValidRecords)[ FD ]
Line_11 $$ dis = fileSystem.open(outFile)-->Line_25 $$ if (dis != null) [ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_4 $$ long numValidRecords = 0[ CD ]
Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) -->Line_18 $$ prevKeyValue = keyString[ CD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) [ CD ]
Line_18 $$ prevKeyValue = keyString-->Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) [ FD ]
Line_14 $$ int blankPos = record.indexOf(" ")-->Line_15 $$ String keyString = record.substring(0, blankPos)[ FD ]
Line_13 $$ while ((record = dis.readLine()) != null) -->Line_16 $$ String valueString = record.substring(blankPos + 1)[ CD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_8 $$ Path[] fileList = FileUtil.stat2Paths(fileSystem.listStatus(OUTPUT, new Utils.OutputFileUtils.OutputFilesFilter()))[ FD ]
Line_3 $$ FSDataInputStream dis = null-->Line_26 $$ dis.close()[ FD ]
Line_7 $$ String prevKeyValue = "000000000"-->Line_18 $$ prevKeyValue = keyString[ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_6 $$ long numMappersLaunched = NUM_MAPPERS[ CD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_7 $$ String prevKeyValue = "000000000"[ CD ]
Line_11 $$ dis = fileSystem.open(outFile)-->Line_13 $$ while ((record = dis.readLine()) != null) [ FD ]
Line_4 $$ long numValidRecords = 0-->Line_19 $$ numValidRecords++[ FD ]
Line_2 $$ private void verifyOutput(RunningJob submittedJob, FileSystem fileSystem) throws Exception -->Line_32 $$ assertEquals(0, numInvalidRecords)[ CD ]
Line_17 $$ if (keyString.compareTo(prevKeyValue) >= 0 && keyString.equals(valueString)) -->Line_19 $$ numValidRecords++[ CD ]
Line_3 $$ FSDataInputStream dis = null-->Line_27 $$ dis = null[ FD ]
Line_3 $$ FSDataInputStream dis = null-->Line_13 $$ while ((record = dis.readLine()) != null) [ FD ]
