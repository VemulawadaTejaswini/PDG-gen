Line_22 $$ String callSignature1 = javaMethod1.getCallSignature()-->Line_24 $$ return callSignature1.compareTo(callSignature2)[ FD ]
Line_8 $$ String javaMethodKey = _getMethodKey(javaMethod)-->Line_11 $$ javaMethodMap.put(javaMethodKey, javaMethod)[ FD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_27 $$ Collections.sort(javaMethods, comparator)[ CD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_3 $$ Map<String, JavaMethod> javaMethodMap = new HashMap()[ CD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_27 $$ Collections.sort(javaMethods, comparator)[ FD ]
Line_9 $$ JavaMethod existingJavaMethod = javaMethodMap.get(javaMethodKey)-->Line_10 $$ if (existingJavaMethod == null) [ FD ]
Line_3 $$ Map<String, JavaMethod> javaMethodMap = new HashMap()-->Line_11 $$ javaMethodMap.put(javaMethodKey, javaMethod)[ FD ]
Line_12 $$ if (mergeAnnotations) -->Line_14 $$ existingJavaMethod.setAnnotations(annotations)[ CD ]
Line_10 $$ if (existingJavaMethod == null) -->Line_11 $$ javaMethodMap.put(javaMethodKey, javaMethod)[ CD ]
Line_4 $$ for (JavaMethod javaMethod : javaMethods2) -->Line_8 $$ String javaMethodKey = _getMethodKey(javaMethod)[ FD ]
Line_9 $$ JavaMethod existingJavaMethod = javaMethodMap.get(javaMethodKey)-->Line_14 $$ existingJavaMethod.setAnnotations(annotations)[ FD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_17 $$ List<JavaMethod> javaMethods = new ArrayList(javaMethodMap.values())[ CD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_28 $$ return javaMethods.toArray(new JavaMethod[javaMethods.size()])[ CD ]
Line_17 $$ List<JavaMethod> javaMethods = new ArrayList(javaMethodMap.values())-->Line_28 $$ return javaMethods.toArray(new JavaMethod[javaMethods.size()])[ FD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_10 $$ if (existingJavaMethod == null) [ FD ]
Line_12 $$ if (mergeAnnotations) -->Line_13 $$ Annotation[] annotations = _mergeAnnotations(javaMethod.getAnnotations(), existingJavaMethod.getAnnotations())[ CD ]
Line_13 $$ Annotation[] annotations = _mergeAnnotations(javaMethod.getAnnotations(), existingJavaMethod.getAnnotations())-->Line_14 $$ existingJavaMethod.setAnnotations(annotations)[ FD ]
Line_2 $$ private JavaMethod[] _mergeMethods(JavaMethod[] javaMethods1, JavaMethod[] javaMethods2, boolean mergeAnnotations) -->Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() [ CD ]
Line_3 $$ Map<String, JavaMethod> javaMethodMap = new HashMap()-->Line_5 $$ javaMethodMap.put(_getMethodKey(javaMethod), javaMethod)[ FD ]
Line_10 $$ if (existingJavaMethod == null) -->Line_12 $$ if (mergeAnnotations) [ CD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_23 $$ String callSignature2 = javaMethod2.getCallSignature()[ FD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_22 $$ String callSignature1 = javaMethod1.getCallSignature()[ CD ]
Line_4 $$ for (JavaMethod javaMethod : javaMethods2) -->Line_11 $$ javaMethodMap.put(javaMethodKey, javaMethod)[ FD ]
Line_3 $$ Map<String, JavaMethod> javaMethodMap = new HashMap()-->Line_9 $$ JavaMethod existingJavaMethod = javaMethodMap.get(javaMethodKey)[ FD ]
Line_4 $$ for (JavaMethod javaMethod : javaMethods2) -->Line_5 $$ javaMethodMap.put(_getMethodKey(javaMethod), javaMethod)[ FD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_24 $$ return callSignature1.compareTo(callSignature2)[ CD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_22 $$ String callSignature1 = javaMethod1.getCallSignature()[ FD ]
Line_18 $$ Comparator<JavaMethod> comparator = new Comparator<JavaMethod>() -->Line_23 $$ String callSignature2 = javaMethod2.getCallSignature()[ CD ]
Line_17 $$ List<JavaMethod> javaMethods = new ArrayList(javaMethodMap.values())-->Line_27 $$ Collections.sort(javaMethods, comparator)[ FD ]
Line_4 $$ for (JavaMethod javaMethod : javaMethods2) -->Line_13 $$ Annotation[] annotations = _mergeAnnotations(javaMethod.getAnnotations(), existingJavaMethod.getAnnotations())[ FD ]
Line_23 $$ String callSignature2 = javaMethod2.getCallSignature()-->Line_24 $$ return callSignature1.compareTo(callSignature2)[ FD ]
Line_3 $$ Map<String, JavaMethod> javaMethodMap = new HashMap()-->Line_17 $$ List<JavaMethod> javaMethods = new ArrayList(javaMethodMap.values())[ FD ]
Line_9 $$ JavaMethod existingJavaMethod = javaMethodMap.get(javaMethodKey)-->Line_13 $$ Annotation[] annotations = _mergeAnnotations(javaMethod.getAnnotations(), existingJavaMethod.getAnnotations())[ FD ]
Line_8 $$ String javaMethodKey = _getMethodKey(javaMethod)-->Line_9 $$ JavaMethod existingJavaMethod = javaMethodMap.get(javaMethodKey)[ FD ]
