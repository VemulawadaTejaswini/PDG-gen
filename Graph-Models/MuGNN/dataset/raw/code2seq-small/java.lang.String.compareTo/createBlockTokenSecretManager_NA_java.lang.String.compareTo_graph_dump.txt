Line_17 $$ if (isHaEnabled) -->Line_20 $$ return new BlockTokenSecretManager(updateMin * 60 * 1000L, lifetimeMin * 60 * 1000L, thisNnId.compareTo(otherNnId) < 0 ? 0 : 1, null, encryptionAlgorithm)[ CD ]
Line_15 $$ String nsId = DFSUtil.getNamenodeNameServiceId(conf)-->Line_18 $$ String thisNnId = HAUtil.getNameNodeId(conf, nsId)[ FD ]
Line_6 $$ if (UserGroupInformation.isSecurityEnabled()) -->Line_7 $$ LOG.error("Security is enabled but block access tokens " + "(via " + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + ") " + "aren't enabled. This may cause issues " + "when clients attempt to talk to a DataNode.")[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_5 $$ if (!isEnabled) [ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_12 $$ final long lifetimeMin = conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_3 $$ final boolean isEnabled = conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_12 $$ final long lifetimeMin = conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT)[ CD ]
Line_18 $$ String thisNnId = HAUtil.getNameNodeId(conf, nsId)-->Line_20 $$ return new BlockTokenSecretManager(updateMin * 60 * 1000L, lifetimeMin * 60 * 1000L, thisNnId.compareTo(otherNnId) < 0 ? 0 : 1, null, encryptionAlgorithm)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_17 $$ if (isHaEnabled) [ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_16 $$ boolean isHaEnabled = HAUtil.isHAEnabled(conf, nsId)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_14 $$ LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY + "=" + updateMin + " min(s), " + DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY + "=" + lifetimeMin + " min(s), " + DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY + "=" + encryptionAlgorithm)[ CD ]
Line_5 $$ if (!isEnabled) -->Line_9 $$ return null[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_3 $$ final boolean isEnabled = conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_16 $$ boolean isHaEnabled = HAUtil.isHAEnabled(conf, nsId)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_13 $$ final String encryptionAlgorithm = conf.get(DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY)[ FD ]
Line_15 $$ String nsId = DFSUtil.getNamenodeNameServiceId(conf)-->Line_16 $$ boolean isHaEnabled = HAUtil.isHAEnabled(conf, nsId)[ FD ]
Line_17 $$ if (isHaEnabled) -->Line_18 $$ String thisNnId = HAUtil.getNameNodeId(conf, nsId)[ CD ]
Line_17 $$ if (isHaEnabled) -->Line_22 $$ return new BlockTokenSecretManager(updateMin * 60 * 1000L, lifetimeMin * 60 * 1000L, 0, null, encryptionAlgorithm)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_11 $$ final long updateMin = conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_19 $$ String otherNnId = HAUtil.getNameNodeIdOfOtherNode(conf, nsId)[ FD ]
Line_19 $$ String otherNnId = HAUtil.getNameNodeIdOfOtherNode(conf, nsId)-->Line_20 $$ return new BlockTokenSecretManager(updateMin * 60 * 1000L, lifetimeMin * 60 * 1000L, thisNnId.compareTo(otherNnId) < 0 ? 0 : 1, null, encryptionAlgorithm)[ FD ]
Line_15 $$ String nsId = DFSUtil.getNamenodeNameServiceId(conf)-->Line_19 $$ String otherNnId = HAUtil.getNameNodeIdOfOtherNode(conf, nsId)[ FD ]
Line_17 $$ if (isHaEnabled) -->Line_19 $$ String otherNnId = HAUtil.getNameNodeIdOfOtherNode(conf, nsId)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_18 $$ String thisNnId = HAUtil.getNameNodeId(conf, nsId)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_15 $$ String nsId = DFSUtil.getNamenodeNameServiceId(conf)[ CD ]
Line_3 $$ final boolean isEnabled = conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT)-->Line_5 $$ if (!isEnabled) [ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_4 $$ LOG.info(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY + "=" + isEnabled)[ CD ]
Line_5 $$ if (!isEnabled) -->Line_6 $$ if (UserGroupInformation.isSecurityEnabled()) [ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_15 $$ String nsId = DFSUtil.getNamenodeNameServiceId(conf)[ FD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_13 $$ final String encryptionAlgorithm = conf.get(DFSConfigKeys.DFS_DATA_ENCRYPTION_ALGORITHM_KEY)[ CD ]
Line_2 $$ private static BlockTokenSecretManager createBlockTokenSecretManager(final Configuration conf) -->Line_11 $$ final long updateMin = conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY, DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT)[ FD ]
