Line_13 $$ list = myResult-->Line_38 $$ list.clear()[ FD ]
Line_2 $$ public void run() -->Line_3 $$ final List<?> list[ CD ]
Line_31 $$ if (o instanceof PsiElement) -->Line_34 $$ indicator.setText2(element.getContainingFile().getName())[ CD ]
Line_3 $$ final List<?> list-->Line_38 $$ list.clear()[ FD ]
Line_31 $$ if (o instanceof PsiElement) -->Line_32 $$ final PsiElement element = (PsiElement) o[ CD ]
Line_3 $$ final List<?> list-->Line_13 $$ list = myResult[ FD ]
Line_3 $$ final List<?> list-->Line_18 $$ Collections.sort(list, new Comparator() [ FD ]
Line_28 $$ for (int i = 0; i < size; i++) -->Line_29 $$ indicator.checkCanceled()[ CD ]
Line_28 $$ for (int i = 0; i < size; i++) -->Line_36 $$ indicator.setFraction(i / (double) size)[ CD ]
Line_28 $$ for (int i = 0; i < size; i++) -->Line_31 $$ if (o instanceof PsiElement) [ CD ]
Line_2 $$ public void run() -->Line_28 $$ for (int i = 0; i < size; i++) [ CD ]
Line_18 $$ Collections.sort(list, new Comparator() -->Line_20 $$ indicator.checkCanceled()[ CD ]
Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)-->Line_38 $$ list.clear()[ FD ]
Line_31 $$ if (o instanceof PsiElement) -->Line_33 $$ processor.process(new UsageInfo2UsageAdapter(new UsageInfo(element)))[ CD ]
Line_28 $$ for (int i = 0; i < size; i++) -->Line_30 $$ Object o = list.get(i)[ CD ]
Line_2 $$ public void run() -->Line_18 $$ Collections.sort(list, new Comparator() [ CD ]
Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_20 $$ indicator.checkCanceled()[ FD ]
Line_21 $$ if (o1 instanceof PsiElement && o2 instanceof PsiElement) -->Line_24 $$ return String.valueOf(o1).compareTo(String.valueOf(o2))[ CD ]
Line_3 $$ final List<?> list-->Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)[ FD ]
Line_15 $$ final int size = list.size()-->Line_28 $$ for (int i = 0; i < size; i++) [ FD ]
Line_13 $$ list = myResult-->Line_15 $$ final int size = list.size()[ FD ]
Line_4 $$ if (myResult.isEmpty()) -->Line_13 $$ list = myResult[ CD ]
Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)-->Line_13 $$ list = myResult[ FD ]
Line_2 $$ public void run() -->Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ public void run() -->Line_15 $$ final int size = list.size()[ CD ]
Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)-->Line_30 $$ Object o = list.get(i)[ FD ]
Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)-->Line_15 $$ final int size = list.size()[ FD ]
Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_29 $$ indicator.checkCanceled()[ FD ]
Line_32 $$ final PsiElement element = (PsiElement) o-->Line_34 $$ indicator.setText2(element.getContainingFile().getName())[ FD ]
Line_18 $$ Collections.sort(list, new Comparator() -->Line_21 $$ if (o1 instanceof PsiElement && o2 instanceof PsiElement) [ CD ]
Line_2 $$ public void run() -->Line_17 $$ indicator.setText("Collecting matches...")[ CD ]
Line_28 $$ for (int i = 0; i < size; i++) -->Line_30 $$ Object o = list.get(i)[ FD ]
Line_30 $$ Object o = list.get(i)-->Line_31 $$ if (o instanceof PsiElement) [ FD ]
Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_34 $$ indicator.setText2(element.getContainingFile().getName())[ FD ]
Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_36 $$ indicator.setFraction(i / (double) size)[ FD ]
Line_6 $$ list = (List<?>) myXPath.selectNodes(myContextNode)-->Line_18 $$ Collections.sort(list, new Comparator() [ FD ]
Line_13 $$ list = myResult-->Line_30 $$ Object o = list.get(i)[ FD ]
Line_16 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_17 $$ indicator.setText("Collecting matches...")[ FD ]
Line_21 $$ if (o1 instanceof PsiElement && o2 instanceof PsiElement) -->Line_22 $$ return ((PsiElement) o1).getTextRange().getStartOffset() - ((PsiElement) o2).getTextRange().getStartOffset()[ CD ]
Line_2 $$ public void run() -->Line_38 $$ list.clear()[ CD ]
Line_18 $$ Collections.sort(list, new Comparator() -->Line_24 $$ return String.valueOf(o1).compareTo(String.valueOf(o2))[ FD ]
Line_3 $$ final List<?> list-->Line_15 $$ final int size = list.size()[ FD ]
Line_13 $$ list = myResult-->Line_18 $$ Collections.sort(list, new Comparator() [ FD ]
Line_2 $$ public void run() -->Line_4 $$ if (myResult.isEmpty()) [ CD ]
Line_3 $$ final List<?> list-->Line_30 $$ Object o = list.get(i)[ FD ]
