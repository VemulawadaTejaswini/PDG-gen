Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_42 $$ buffer.append("Fails:\n")[ FD ]
Line_9 $$ for (final PsiElement expr : myConversions.keySet()) -->Line_12 $$ conversions[k++] = (expr.getText() + " -> " + ((Pair) conversion).second + "\n")[ FD ]
Line_33 $$ Arrays.sort(newChanges, new Comparator<String>() -->Line_36 $$ return x.compareTo(y)[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_47 $$ final PsiElement element1 = o1.getFirst().getElement()[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_24 $$ buffer.append(conversion)[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_48 $$ final PsiElement element2 = o2.getFirst().getElement()[ CD ]
Line_10 $$ final Object conversion = myConversions.get(expr)-->Line_24 $$ buffer.append(conversion)[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_57 $$ buffer.append(element.getText()).append("->").append(p.getSecond().getCanonicalText()).append("\n")[ FD ]
Line_8 $$ int k = 0-->Line_14 $$ conversions[k++] = (expr.getText() + " -> " + conversion + "\n")[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_51 $$ return element1.getText().compareTo(element2.getText())[ CD ]
Line_17 $$ Arrays.sort(conversions, new Comparator<String>() -->Line_20 $$ return x.compareTo(y)[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_49 $$ if (element1 == null || element2 == null)[ CD ]
Line_56 $$ if (element != null) -->Line_57 $$ buffer.append(element.getText()).append("->").append(p.getSecond().getCanonicalText()).append("\n")[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_6 $$ buffer.append("Conversions:\n")[ FD ]
Line_17 $$ Arrays.sort(conversions, new Comparator<String>() -->Line_20 $$ return x.compareTo(y)[ CD ]
Line_48 $$ final PsiElement element2 = o2.getFirst().getElement()-->Line_51 $$ return element1.getText().compareTo(element2.getText())[ FD ]
Line_8 $$ int k = 0-->Line_12 $$ conversions[k++] = (expr.getText() + " -> " + ((Pair) conversion).second + "\n")[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_48 $$ final PsiElement element2 = o2.getFirst().getElement()[ FD ]
Line_44 $$ Collections.sort(failsList, new Comparator<Pair<SmartPsiElementPointer<PsiExpression>, PsiType>>() -->Line_47 $$ final PsiElement element1 = o1.getFirst().getElement()[ CD ]
Line_47 $$ final PsiElement element1 = o1.getFirst().getElement()-->Line_51 $$ return element1.getText().compareTo(element2.getText())[ FD ]
Line_17 $$ Arrays.sort(conversions, new Comparator<String>() -->Line_36 $$ return x.compareTo(y)[ FD ]
Line_49 $$ if (element1 == null || element2 == null)-->Line_50 $$ return 0[ CD ]
Line_9 $$ for (final PsiElement expr : myConversions.keySet()) -->Line_14 $$ conversions[k++] = (expr.getText() + " -> " + conversion + "\n")[ FD ]
Line_7 $$ final String[] conversions = new String[myConversions.size()]-->Line_17 $$ Arrays.sort(conversions, new Comparator<String>() [ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_60 $$ return buffer.toString()[ FD ]
Line_9 $$ for (final PsiElement expr : myConversions.keySet()) -->Line_10 $$ final Object conversion = myConversions.get(expr)[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_40 $$ buffer.append(change)[ FD ]
Line_11 $$ if (conversion instanceof Pair && ((Pair) conversion).first == null) -->Line_12 $$ conversions[k++] = (expr.getText() + " -> " + ((Pair) conversion).second + "\n")[ CD ]
Line_33 $$ Arrays.sort(newChanges, new Comparator<String>() -->Line_36 $$ return x.compareTo(y)[ CD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_5 $$ buffer.append("Types:\n").append(getTypeEvaluator().getReport()).append("\n")[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder()-->Line_26 $$ buffer.append("\nNew expression type changes:\n")[ FD ]
Line_11 $$ if (conversion instanceof Pair && ((Pair) conversion).first == null) -->Line_14 $$ conversions[k++] = (expr.getText() + " -> " + conversion + "\n")[ CD ]
