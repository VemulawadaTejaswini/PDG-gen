Line_17 $$ tasksGroupedByType.putAll(taskType, filter(tasks, new Spec<Task>() -->Line_20 $$ return getDeclaredTaskType(element).equals(taskType)[ FD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_24 $$ return tasksGroupedByType[ CD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_3 $$ final Set<Class> taskTypes = new TreeSet<Class>(new Comparator<Class>() [ CD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_15 $$ ListMultimap<Class, Task> tasksGroupedByType = ArrayListMultimap.create()[ CD ]
Line_17 $$ tasksGroupedByType.putAll(taskType, filter(tasks, new Spec<Task>() -->Line_20 $$ return getDeclaredTaskType(element).equals(taskType)[ CD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_17 $$ tasksGroupedByType.putAll(taskType, filter(tasks, new Spec<Task>() [ FD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_9 $$ taskTypes.addAll(collect(tasks, new Transformer<Class, Task>() [ CD ]
Line_2 $$ private ListMultimap<Class, Task> groupTasksByType(List<Task> tasks) -->Line_9 $$ taskTypes.addAll(collect(tasks, new Transformer<Class, Task>() [ FD ]
Line_9 $$ taskTypes.addAll(collect(tasks, new Transformer<Class, Task>() -->Line_12 $$ return getDeclaredTaskType(original)[ CD ]
Line_9 $$ taskTypes.addAll(collect(tasks, new Transformer<Class, Task>() -->Line_12 $$ return getDeclaredTaskType(original)[ FD ]
Line_3 $$ final Set<Class> taskTypes = new TreeSet<Class>(new Comparator<Class>() -->Line_9 $$ taskTypes.addAll(collect(tasks, new Transformer<Class, Task>() [ FD ]
Line_3 $$ final Set<Class> taskTypes = new TreeSet<Class>(new Comparator<Class>() -->Line_6 $$ return o1.getSimpleName().compareTo(o2.getSimpleName())[ FD ]
Line_3 $$ final Set<Class> taskTypes = new TreeSet<Class>(new Comparator<Class>() -->Line_6 $$ return o1.getSimpleName().compareTo(o2.getSimpleName())[ CD ]
