Line_32 $$ minLong = Math.min(minLong, l)-->Line_63 $$ assertThat(response.getAllFieldStats().get("long").getMinValue(), equalTo(minLong))[ FD ]
Line_40 $$ String str = randomRealisticUnicodeOfLength(3)-->Line_41 $$ if (str.compareTo(minString) < 0) [ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_14 $$ float maxFloat = Float.MIN_VALUE[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_58 $$ assertThat(response.getAllFieldStats().get("byte").getMaxValue(), equalTo(maxByte))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_35 $$ minFloat = Math.min(minFloat, f)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_11 $$ long minLong = Long.MAX_VALUE[ CD ]
Line_27 $$ maxShort = Math.max(maxShort, s)-->Line_60 $$ assertThat(response.getAllFieldStats().get("short").getMaxValue(), equalTo(maxShort))[ FD ]
Line_30 $$ maxInt = Math.max(maxInt, i)-->Line_62 $$ assertThat(response.getAllFieldStats().get("integer").getMaxValue(), equalTo(maxInt))[ FD ]
Line_14 $$ float maxFloat = Float.MIN_VALUE-->Line_36 $$ maxFloat = Math.max(maxFloat, f)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_7 $$ long minShort = Short.MAX_VALUE[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_20 $$ List<IndexRequestBuilder> request = new ArrayList(numDocs)[ CD ]
Line_8 $$ long maxShort = Short.MIN_VALUE-->Line_27 $$ maxShort = Math.max(maxShort, s)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_62 $$ assertThat(response.getAllFieldStats().get("integer").getMaxValue(), equalTo(maxInt))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_61 $$ assertThat(response.getAllFieldStats().get("integer").getMinValue(), equalTo(minInt))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_68 $$ assertThat(response.getAllFieldStats().get("double").getMaxValue(), equalTo(maxDouble))[ CD ]
Line_38 $$ minDouble = Math.min(minDouble, d)-->Line_67 $$ assertThat(response.getAllFieldStats().get("double").getMinValue(), equalTo(minDouble))[ FD ]
Line_52 $$ for (FieldStats stats : response.getAllFieldStats().values()) -->Line_53 $$ assertThat(stats.getMaxDoc(), equalTo((long) numDocs))[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_66 $$ assertThat(response.getAllFieldStats().get("float").getMaxValue(), equalTo(maxFloat))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_4 $$ ensureGreen("test")[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_68 $$ assertThat(response.getAllFieldStats().get("double").getMaxValue(), equalTo(maxDouble))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_63 $$ assertThat(response.getAllFieldStats().get("long").getMinValue(), equalTo(minLong))[ CD ]
Line_15 $$ double minDouble = Double.MAX_VALUE-->Line_38 $$ minDouble = Math.min(minDouble, d)[ FD ]
Line_25 $$ short s = randomShort()-->Line_26 $$ minShort = Math.min(minShort, s)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_67 $$ assertThat(response.getAllFieldStats().get("double").getMinValue(), equalTo(minDouble))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_5 $$ long minByte = Byte.MAX_VALUE[ CD ]
Line_20 $$ List<IndexRequestBuilder> request = new ArrayList(numDocs)-->Line_49 $$ indexRandom(true, false, request)[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_37 $$ double d = randomDouble()[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_59 $$ assertThat(response.getAllFieldStats().get("short").getMinValue(), equalTo(minShort))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_9 $$ long minInt = Integer.MAX_VALUE[ CD ]
Line_31 $$ long l = randomLong()-->Line_33 $$ maxLong = Math.max(maxLong, l)[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_26 $$ minShort = Math.min(minShort, s)[ CD ]
Line_12 $$ long maxLong = Long.MIN_VALUE-->Line_33 $$ maxLong = Math.max(maxLong, l)[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_40 $$ String str = randomRealisticUnicodeOfLength(3)[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_34 $$ float f = randomFloat()[ CD ]
Line_9 $$ long minInt = Integer.MAX_VALUE-->Line_61 $$ assertThat(response.getAllFieldStats().get("integer").getMinValue(), equalTo(minInt))[ FD ]
Line_22 $$ byte b = randomByte()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_23 $$ minByte = Math.min(minByte, b)-->Line_57 $$ assertThat(response.getAllFieldStats().get("byte").getMinValue(), equalTo(minByte))[ FD ]
Line_12 $$ long maxLong = Long.MIN_VALUE-->Line_64 $$ assertThat(response.getAllFieldStats().get("long").getMaxValue(), equalTo(maxLong))[ FD ]
Line_52 $$ for (FieldStats stats : response.getAllFieldStats().values()) -->Line_55 $$ assertThat(stats.getDensity(), equalTo(100))[ FD ]
Line_52 $$ for (FieldStats stats : response.getAllFieldStats().values()) -->Line_54 $$ assertThat(stats.getDocCount(), equalTo((long) numDocs))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_19 $$ int numDocs = scaledRandomIntBetween(128, 1024)[ CD ]
Line_9 $$ long minInt = Integer.MAX_VALUE-->Line_29 $$ minInt = Math.min(minInt, i)[ FD ]
Line_5 $$ long minByte = Byte.MAX_VALUE-->Line_57 $$ assertThat(response.getAllFieldStats().get("byte").getMinValue(), equalTo(minByte))[ FD ]
Line_33 $$ maxLong = Math.max(maxLong, l)-->Line_64 $$ assertThat(response.getAllFieldStats().get("long").getMaxValue(), equalTo(maxLong))[ FD ]
Line_13 $$ float minFloat = Float.MAX_VALUE-->Line_35 $$ minFloat = Math.min(minFloat, f)[ FD ]
Line_37 $$ double d = randomDouble()-->Line_38 $$ minDouble = Math.min(minDouble, d)[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_51 $$ assertAllSuccessful(response)[ FD ]
Line_16 $$ double maxDouble = Double.MIN_VALUE-->Line_68 $$ assertThat(response.getAllFieldStats().get("double").getMaxValue(), equalTo(maxDouble))[ FD ]
Line_29 $$ minInt = Math.min(minInt, i)-->Line_61 $$ assertThat(response.getAllFieldStats().get("integer").getMinValue(), equalTo(minInt))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_18 $$ String maxString = "0"[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_21 $$ for (int doc = 0; doc < numDocs; doc++) [ CD ]
Line_36 $$ maxFloat = Math.max(maxFloat, f)-->Line_66 $$ assertThat(response.getAllFieldStats().get("float").getMaxValue(), equalTo(maxFloat))[ FD ]
Line_10 $$ long maxInt = Integer.MIN_VALUE-->Line_30 $$ maxInt = Math.max(maxInt, i)[ FD ]
Line_18 $$ String maxString = "0"-->Line_45 $$ maxString = str[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_34 $$ float f = randomFloat()-->Line_35 $$ minFloat = Math.min(minFloat, f)[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_62 $$ assertThat(response.getAllFieldStats().get("integer").getMaxValue(), equalTo(maxInt))[ FD ]
Line_14 $$ float maxFloat = Float.MIN_VALUE-->Line_66 $$ assertThat(response.getAllFieldStats().get("float").getMaxValue(), equalTo(maxFloat))[ FD ]
Line_8 $$ long maxShort = Short.MIN_VALUE-->Line_60 $$ assertThat(response.getAllFieldStats().get("short").getMaxValue(), equalTo(maxShort))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_38 $$ minDouble = Math.min(minDouble, d)[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_64 $$ assertThat(response.getAllFieldStats().get("long").getMaxValue(), equalTo(maxLong))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_16 $$ double maxDouble = Double.MIN_VALUE[ CD ]
Line_11 $$ long minLong = Long.MAX_VALUE-->Line_32 $$ minLong = Math.min(minLong, l)[ FD ]
Line_34 $$ float f = randomFloat()-->Line_36 $$ maxFloat = Math.max(maxFloat, f)[ FD ]
Line_19 $$ int numDocs = scaledRandomIntBetween(128, 1024)-->Line_21 $$ for (int doc = 0; doc < numDocs; doc++) [ FD ]
Line_28 $$ int i = randomInt()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_44 $$ if (str.compareTo(maxString) > 0) -->Line_45 $$ maxString = str[ CD ]
Line_28 $$ int i = randomInt()-->Line_29 $$ minInt = Math.min(minInt, i)[ FD ]
Line_37 $$ double d = randomDouble()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_35 $$ minFloat = Math.min(minFloat, f)-->Line_65 $$ assertThat(response.getAllFieldStats().get("float").getMinValue(), equalTo(minFloat))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_24 $$ maxByte = Math.max(maxByte, b)[ CD ]
Line_7 $$ long minShort = Short.MAX_VALUE-->Line_59 $$ assertThat(response.getAllFieldStats().get("short").getMinValue(), equalTo(minShort))[ FD ]
Line_15 $$ double minDouble = Double.MAX_VALUE-->Line_67 $$ assertThat(response.getAllFieldStats().get("double").getMinValue(), equalTo(minDouble))[ FD ]
Line_31 $$ long l = randomLong()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_42 $$ minString = str-->Line_41 $$ if (str.compareTo(minString) < 0) [ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_57 $$ assertThat(response.getAllFieldStats().get("byte").getMinValue(), equalTo(minByte))[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_23 $$ minByte = Math.min(minByte, b)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_64 $$ assertThat(response.getAllFieldStats().get("long").getMaxValue(), equalTo(maxLong))[ CD ]
Line_6 $$ long maxByte = Byte.MIN_VALUE-->Line_58 $$ assertThat(response.getAllFieldStats().get("byte").getMaxValue(), equalTo(maxByte))[ FD ]
Line_22 $$ byte b = randomByte()-->Line_24 $$ maxByte = Math.max(maxByte, b)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_8 $$ long maxShort = Short.MIN_VALUE[ CD ]
Line_5 $$ long minByte = Byte.MAX_VALUE-->Line_23 $$ minByte = Math.min(minByte, b)[ FD ]
Line_41 $$ if (str.compareTo(minString) < 0) -->Line_42 $$ minString = str[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_36 $$ maxFloat = Math.max(maxFloat, f)[ CD ]
Line_25 $$ short s = randomShort()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_25 $$ short s = randomShort()[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_15 $$ double minDouble = Double.MAX_VALUE[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_65 $$ assertThat(response.getAllFieldStats().get("float").getMinValue(), equalTo(minFloat))[ CD ]
Line_17 $$ String minString = new String(Character.toChars(1114111))-->Line_42 $$ minString = str[ FD ]
Line_26 $$ minShort = Math.min(minShort, s)-->Line_59 $$ assertThat(response.getAllFieldStats().get("short").getMinValue(), equalTo(minShort))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_33 $$ maxLong = Math.max(maxLong, l)[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_29 $$ minInt = Math.min(minInt, i)[ CD ]
Line_24 $$ maxByte = Math.max(maxByte, b)-->Line_58 $$ assertThat(response.getAllFieldStats().get("byte").getMaxValue(), equalTo(maxByte))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_6 $$ long maxByte = Byte.MIN_VALUE[ CD ]
Line_40 $$ String str = randomRealisticUnicodeOfLength(3)-->Line_42 $$ minString = str[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_28 $$ int i = randomInt()[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_27 $$ maxShort = Math.max(maxShort, s)[ CD ]
Line_25 $$ short s = randomShort()-->Line_27 $$ maxShort = Math.max(maxShort, s)[ FD ]
Line_17 $$ String minString = new String(Character.toChars(1114111))-->Line_41 $$ if (str.compareTo(minString) < 0) [ FD ]
Line_45 $$ maxString = str-->Line_44 $$ if (str.compareTo(maxString) > 0) [ FD ]
Line_34 $$ float f = randomFloat()-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_52 $$ for (FieldStats stats : response.getAllFieldStats().values()) [ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_60 $$ assertThat(response.getAllFieldStats().get("short").getMaxValue(), equalTo(maxShort))[ CD ]
Line_39 $$ maxDouble = Math.max(maxDouble, d)-->Line_68 $$ assertThat(response.getAllFieldStats().get("double").getMaxValue(), equalTo(maxDouble))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ CD ]
Line_11 $$ long minLong = Long.MAX_VALUE-->Line_63 $$ assertThat(response.getAllFieldStats().get("long").getMinValue(), equalTo(minLong))[ FD ]
Line_40 $$ String str = randomRealisticUnicodeOfLength(3)-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_10 $$ long maxInt = Integer.MIN_VALUE[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_51 $$ assertAllSuccessful(response)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_12 $$ long maxLong = Long.MIN_VALUE[ CD ]
Line_31 $$ long l = randomLong()-->Line_32 $$ minLong = Math.min(minLong, l)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_59 $$ assertThat(response.getAllFieldStats().get("short").getMinValue(), equalTo(minShort))[ CD ]
Line_22 $$ byte b = randomByte()-->Line_23 $$ minByte = Math.min(minByte, b)[ FD ]
Line_40 $$ String str = randomRealisticUnicodeOfLength(3)-->Line_44 $$ if (str.compareTo(maxString) > 0) [ FD ]
Line_18 $$ String maxString = "0"-->Line_44 $$ if (str.compareTo(maxString) > 0) [ FD ]
Line_20 $$ List<IndexRequestBuilder> request = new ArrayList(numDocs)-->Line_47 $$ request.add(client().prepareIndex("test", "test", Integer.toString(doc)).setSource("byte", b, "short", s, "integer", i, "long", l, "float", f, "double", d, "string", str))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_41 $$ if (str.compareTo(minString) < 0) [ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_13 $$ float minFloat = Float.MAX_VALUE[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_60 $$ assertThat(response.getAllFieldStats().get("short").getMaxValue(), equalTo(maxShort))[ FD ]
Line_13 $$ float minFloat = Float.MAX_VALUE-->Line_65 $$ assertThat(response.getAllFieldStats().get("float").getMinValue(), equalTo(minFloat))[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_67 $$ assertThat(response.getAllFieldStats().get("double").getMinValue(), equalTo(minDouble))[ FD ]
Line_7 $$ long minShort = Short.MAX_VALUE-->Line_26 $$ minShort = Math.min(minShort, s)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_49 $$ indexRandom(true, false, request)[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_57 $$ assertThat(response.getAllFieldStats().get("byte").getMinValue(), equalTo(minByte))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_22 $$ byte b = randomByte()[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_44 $$ if (str.compareTo(maxString) > 0) [ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_32 $$ minLong = Math.min(minLong, l)[ CD ]
Line_28 $$ int i = randomInt()-->Line_30 $$ maxInt = Math.max(maxInt, i)[ FD ]
Line_40 $$ String str = randomRealisticUnicodeOfLength(3)-->Line_45 $$ maxString = str[ FD ]
Line_10 $$ long maxInt = Integer.MIN_VALUE-->Line_62 $$ assertThat(response.getAllFieldStats().get("integer").getMaxValue(), equalTo(maxInt))[ FD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_61 $$ assertThat(response.getAllFieldStats().get("integer").getMinValue(), equalTo(minInt))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_31 $$ long l = randomLong()[ CD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_30 $$ maxInt = Math.max(maxInt, i)[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_63 $$ assertThat(response.getAllFieldStats().get("long").getMinValue(), equalTo(minLong))[ FD ]
Line_21 $$ for (int doc = 0; doc < numDocs; doc++) -->Line_39 $$ maxDouble = Math.max(maxDouble, d)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").addMapping("test", "string", "type=string", "date", "type=date", "double", "type=double", "double", "type=double", "float", "type=float", "long", "type=long", "integer", "type=integer", "short", "type=short", "byte", "type=byte"))[ CD ]
Line_50 $$ FieldStatsResponse response = client().prepareFieldStats().setFields("byte", "short", "integer", "long", "float", "double", "string").get()-->Line_65 $$ assertThat(response.getAllFieldStats().get("float").getMinValue(), equalTo(minFloat))[ FD ]
Line_6 $$ long maxByte = Byte.MIN_VALUE-->Line_24 $$ maxByte = Math.max(maxByte, b)[ FD ]
Line_16 $$ double maxDouble = Double.MIN_VALUE-->Line_39 $$ maxDouble = Math.max(maxDouble, d)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_58 $$ assertThat(response.getAllFieldStats().get("byte").getMaxValue(), equalTo(maxByte))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_17 $$ String minString = new String(Character.toChars(1114111))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_66 $$ assertThat(response.getAllFieldStats().get("float").getMaxValue(), equalTo(maxFloat))[ CD ]
Line_37 $$ double d = randomDouble()-->Line_39 $$ maxDouble = Math.max(maxDouble, d)[ FD ]
