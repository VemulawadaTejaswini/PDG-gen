Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_19 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) [ FD ]
Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()-->Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() [ FD ]
Line_23 $$ if (!aClass1.isInterface() && aClass2.isInterface()) -->Line_24 $$ return 1[ CD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_32 $$ return name1.compareTo(name2)[ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() [ FD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_19 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) [ CD ]
Line_21 $$ if (aClass1.isInterface() && !aClass2.isInterface()) -->Line_22 $$ return -1[ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_35 $$ return result[ CD ]
Line_21 $$ if (aClass1.isInterface() && !aClass2.isInterface()) -->Line_23 $$ if (!aClass1.isInterface() && aClass2.isInterface()) [ CD ]
Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()-->Line_8 $$ result.add(method.getMethod())[ FD ]
Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_31 $$ final String name2 = aClass2.getName()[ FD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_8 $$ result.add(method.getMethod())[ FD ]
Line_19 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) -->Line_20 $$ return 0[ CD ]
Line_19 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) -->Line_21 $$ if (aClass1.isInterface() && !aClass2.isInterface()) [ CD ]
Line_23 $$ if (!aClass1.isInterface() && aClass2.isInterface()) -->Line_25 $$ if (aClass1.isInheritor(aClass2, true)) [ CD ]
Line_31 $$ final String name2 = aClass2.getName()-->Line_32 $$ return name1.compareTo(name2)[ FD ]
Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_25 $$ if (aClass1.isInheritor(aClass2, true)) [ FD ]
Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_23 $$ if (!aClass1.isInterface() && aClass2.isInterface()) [ FD ]
Line_25 $$ if (aClass1.isInheritor(aClass2, true)) -->Line_26 $$ return 1[ CD ]
Line_30 $$ final String name1 = aClass1.getName()-->Line_32 $$ return name1.compareTo(name2)[ FD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()[ FD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()[ CD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_30 $$ final String name1 = aClass1.getName()[ CD ]
Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_21 $$ if (aClass1.isInterface() && !aClass2.isInterface()) [ FD ]
Line_25 $$ if (aClass1.isInheritor(aClass2, true)) -->Line_27 $$ if (aClass2.isInheritor(aClass1, true)) [ CD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_31 $$ final String name2 = aClass2.getName()[ CD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_8 $$ result.add(method.getMethod())[ FD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() [ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() [ CD ]
Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_27 $$ if (aClass2.isInheritor(aClass1, true)) [ FD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_9 $$ return true[ CD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_8 $$ result.add(method.getMethod())[ CD ]
Line_12 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_18 $$ final PsiClass aClass2 = method2.getContainingClass()[ CD ]
Line_27 $$ if (aClass2.isInheritor(aClass1, true)) -->Line_28 $$ return -1[ CD ]
