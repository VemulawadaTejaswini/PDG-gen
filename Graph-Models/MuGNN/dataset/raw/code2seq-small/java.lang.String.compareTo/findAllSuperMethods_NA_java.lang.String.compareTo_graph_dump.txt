Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_20 $$ if (aClass1.isInheritor(aClass2, true)) [ FD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()[ CD ]
Line_22 $$ if (aClass2.isInheritor(aClass1, true)) -->Line_23 $$ return -1[ CD ]
Line_25 $$ final String name1 = aClass1.getName()-->Line_27 $$ return name1.compareTo(name2)[ FD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() [ CD ]
Line_14 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) -->Line_15 $$ return 0[ CD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_20 $$ if (aClass1.isInheritor(aClass2, true)) [ FD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_18 $$ if (!aClass1.isInterface() && aClass2.isInterface()) [ FD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_6 $$ result.add(method.getMethod())[ CD ]
Line_20 $$ if (aClass1.isInheritor(aClass2, true)) -->Line_22 $$ if (aClass2.isInheritor(aClass1, true)) [ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_6 $$ result.add(method.getMethod())[ FD ]
Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_22 $$ if (aClass2.isInheritor(aClass1, true)) [ FD ]
Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()-->Line_6 $$ result.add(method.getMethod())[ FD ]
Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_18 $$ if (!aClass1.isInterface() && aClass2.isInterface()) [ FD ]
Line_18 $$ if (!aClass1.isInterface() && aClass2.isInterface()) -->Line_19 $$ return 1[ CD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_26 $$ final String name2 = aClass2.getName()[ CD ]
Line_3 $$ final List<PsiMethod> result = new ArrayList<PsiMethod>()-->Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() [ FD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_27 $$ return name1.compareTo(name2)[ CD ]
Line_16 $$ if (aClass1.isInterface() && !aClass2.isInterface()) -->Line_17 $$ return -1[ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_30 $$ return result[ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() [ FD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_14 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) [ FD ]
Line_20 $$ if (aClass1.isInheritor(aClass2, true)) -->Line_21 $$ return 1[ CD ]
Line_14 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) -->Line_16 $$ if (aClass1.isInterface() && !aClass2.isInterface()) [ CD ]
Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_26 $$ final String name2 = aClass2.getName()[ FD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_16 $$ if (aClass1.isInterface() && !aClass2.isInterface()) [ FD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()[ CD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_14 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) [ CD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_22 $$ if (aClass2.isInheritor(aClass1, true)) [ FD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()[ FD ]
Line_16 $$ if (aClass1.isInterface() && !aClass2.isInterface()) -->Line_18 $$ if (!aClass1.isInterface() && aClass2.isInterface()) [ CD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_6 $$ result.add(method.getMethod())[ FD ]
Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() -->Line_7 $$ return true[ CD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()[ CD ]
Line_2 $$ private static List<PsiMethod> findAllSuperMethods(PsiMethod method) -->Line_4 $$ SuperMethodsSearch.search(method, null, true, false).forEach(new Processor<MethodSignatureBackedByPsiMethod>() [ CD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_25 $$ final String name1 = aClass1.getName()[ CD ]
Line_26 $$ final String name2 = aClass2.getName()-->Line_27 $$ return name1.compareTo(name2)[ FD ]
Line_10 $$ Collections.sort(result, new Comparator<PsiMethod>() -->Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()[ FD ]
Line_18 $$ if (!aClass1.isInterface() && aClass2.isInterface()) -->Line_20 $$ if (aClass1.isInheritor(aClass2, true)) [ CD ]
Line_12 $$ final PsiClass aClass1 = method1.getContainingClass()-->Line_25 $$ final String name1 = aClass1.getName()[ FD ]
Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_16 $$ if (aClass1.isInterface() && !aClass2.isInterface()) [ FD ]
Line_13 $$ final PsiClass aClass2 = method2.getContainingClass()-->Line_14 $$ if (aClass1 == null || aClass2 == null || aClass1.equals(aClass2)) [ FD ]
