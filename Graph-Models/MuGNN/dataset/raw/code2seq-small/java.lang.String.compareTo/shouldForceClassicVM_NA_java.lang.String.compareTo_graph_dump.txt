Line_16 $$ version += ".0"-->Line_20 $$ if ((version.startsWith("1.3.1_07") || version.startsWith("1.3.1_08")) && SystemInfo.isWindows) [ FD ]
Line_9 $$ if (version != null) -->Line_20 $$ if ((version.startsWith("1.3.1_07") || version.startsWith("1.3.1_08")) && SystemInfo.isWindows) [ CD ]
Line_17 $$ if (version.startsWith("1.3.0") && SystemInfo.isWindows) -->Line_18 $$ return true[ CD ]
Line_16 $$ version += ".0"-->Line_17 $$ if (version.startsWith("1.3.0") && SystemInfo.isWindows) [ FD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)[ FD ]
Line_20 $$ if ((version.startsWith("1.3.1_07") || version.startsWith("1.3.1_08")) && SystemInfo.isWindows) -->Line_21 $$ return false[ CD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_10 $$ if (version.compareTo("1.4") >= 0) [ FD ]
Line_9 $$ if (version != null) -->Line_17 $$ if (version.startsWith("1.3.0") && SystemInfo.isWindows) [ CD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_9 $$ if (version != null) [ CD ]
Line_6 $$ if (jdk == null)-->Line_7 $$ return false[ CD ]
Line_9 $$ if (version != null) -->Line_16 $$ version += ".0"[ CD ]
Line_3 $$ if (SystemInfo.isMac) -->Line_4 $$ return false[ CD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)[ CD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_13 $$ if (version.startsWith("1.2") && SystemInfo.isWindows) [ FD ]
Line_9 $$ if (version != null) -->Line_10 $$ if (version.compareTo("1.4") >= 0) [ CD ]
Line_9 $$ if (version != null) -->Line_13 $$ if (version.startsWith("1.2") && SystemInfo.isWindows) [ CD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_6 $$ if (jdk == null)[ CD ]
Line_13 $$ if (version.startsWith("1.2") && SystemInfo.isWindows) -->Line_14 $$ return true[ CD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_6 $$ if (jdk == null)[ FD ]
Line_10 $$ if (version.compareTo("1.4") >= 0) -->Line_11 $$ return false[ CD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_20 $$ if ((version.startsWith("1.3.1_07") || version.startsWith("1.3.1_08")) && SystemInfo.isWindows) [ FD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_3 $$ if (SystemInfo.isMac) [ CD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_16 $$ version += ".0"[ FD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_9 $$ if (version != null) [ FD ]
Line_8 $$ String version = JdkUtil.getJdkMainAttribute(jdk, Attributes.Name.IMPLEMENTATION_VERSION)-->Line_17 $$ if (version.startsWith("1.3.0") && SystemInfo.isWindows) [ FD ]
Line_2 $$ private static boolean shouldForceClassicVM(Sdk jdk) -->Line_24 $$ return DebuggerSettings.getInstance().FORCE_CLASSIC_VM[ CD ]
