Line_10 $$ if (actualRead != -1) -->Line_12 $$ if (header.compareTo(HEADER) != 0) [ CD ]
Line_12 $$ if (header.compareTo(HEADER) != 0) -->Line_13 $$ bufferedIn.reset()[ CD ]
Line_11 $$ String header = new String(headerBytes)-->Line_12 $$ if (header.compareTo(HEADER) != 0) [ FD ]
Line_10 $$ if (actualRead != -1) -->Line_11 $$ String header = new String(headerBytes)[ CD ]
Line_8 $$ byte[] headerBytes = new byte[HEADER_LEN]-->Line_19 $$ actualRead = bufferedIn.read(headerBytes, 0, SUB_HEADER_LEN)[ FD ]
Line_9 $$ int actualRead = bufferedIn.read(headerBytes, 0, HEADER_LEN)-->Line_20 $$ if (actualRead != -1) [ FD ]
Line_9 $$ int actualRead = bufferedIn.read(headerBytes, 0, HEADER_LEN)-->Line_19 $$ actualRead = bufferedIn.read(headerBytes, 0, SUB_HEADER_LEN)[ FD ]
Line_20 $$ if (actualRead != -1) -->Line_21 $$ this.isSubHeaderStripped = true[ CD ]
Line_9 $$ int actualRead = bufferedIn.read(headerBytes, 0, HEADER_LEN)-->Line_10 $$ if (actualRead != -1) [ FD ]
Line_19 $$ actualRead = bufferedIn.read(headerBytes, 0, SUB_HEADER_LEN)-->Line_20 $$ if (actualRead != -1) [ FD ]
Line_2 $$ private BufferedInputStream readStreamHeader() throws IOException -->Line_27 $$ if (bufferedIn == null) [ CD ]
Line_12 $$ if (header.compareTo(HEADER) != 0) -->Line_15 $$ this.isHeaderStripped = true[ CD ]
Line_2 $$ private BufferedInputStream readStreamHeader() throws IOException -->Line_30 $$ return bufferedIn[ CD ]
Line_8 $$ byte[] headerBytes = new byte[HEADER_LEN]-->Line_9 $$ int actualRead = bufferedIn.read(headerBytes, 0, HEADER_LEN)[ FD ]
