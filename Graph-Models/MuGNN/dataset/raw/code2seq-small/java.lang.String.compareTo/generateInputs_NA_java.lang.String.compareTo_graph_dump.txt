Line_16 $$ FileNameGenerator nameGenerator-->Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ FD ]
Line_3 $$ int nrDatanodes = getNumDatanodes()-->Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ FD ]
Line_7 $$ String prevDNName = ""-->Line_13 $$ prevDNName = datanodes[idx].getXferAddr()[ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_5 $$ int nrFiles = (int) Math.ceil((double) nrBlocks / blocksPerFile)[ CD ]
Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_23 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ CD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_26 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_16 $$ FileNameGenerator nameGenerator[ CD ]
Line_18 $$ String clientName = getClientName(007)-->Line_23 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ FD ]
Line_23 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)-->Line_24 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_17 $$ nameGenerator = new FileNameGenerator(getBaseDir(), 100)[ CD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_7 $$ String prevDNName = ""[ CD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_9 $$ datanodes[idx] = new TinyDatanode(idx, blocksPerReport)[ CD ]
Line_17 $$ nameGenerator = new FileNameGenerator(getBaseDir(), 100)-->Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ FD ]
Line_16 $$ FileNameGenerator nameGenerator-->Line_17 $$ nameGenerator = new FileNameGenerator(getBaseDir(), 100)[ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_4 $$ int nrBlocks = (int) Math.ceil((double) blocksPerReport * nrDatanodes / replication)[ CD ]
Line_26 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_27 $$ datanodes[idx].formBlockReport()[ CD ]
Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_22 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ CD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_13 $$ prevDNName = datanodes[idx].getXferAddr()[ CD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_18 $$ String clientName = getClientName(007)[ CD ]
Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_24 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_5 $$ int nrFiles = (int) Math.ceil((double) nrBlocks / blocksPerFile)-->Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) [ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_15 $$ LOG.info("Creating " + nrFiles + " files with " + blocksPerFile + " blocks each.")[ CD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_10 $$ datanodes[idx].register()[ CD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_19 $$ nameNodeProto.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ CD ]
Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_24 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ CD ]
Line_18 $$ String clientName = getClientName(007)-->Line_22 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ FD ]
Line_13 $$ prevDNName = datanodes[idx].getXferAddr()-->Line_11 $$ assert datanodes[idx].getXferAddr().compareTo(prevDNName) > 0 : "Data-nodes must be sorted lexicographically."[ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_3 $$ int nrDatanodes = getNumDatanodes()[ CD ]
Line_7 $$ String prevDNName = ""-->Line_11 $$ assert datanodes[idx].getXferAddr().compareTo(prevDNName) > 0 : "Data-nodes must be sorted lexicographically."[ FD ]
Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ CD ]
Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_26 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ FD ]
Line_3 $$ int nrDatanodes = getNumDatanodes()-->Line_26 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) [ CD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_20 $$ for (int idx = 0; idx < nrFiles; idx++) [ FD ]
Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_12 $$ datanodes[idx].sendHeartbeat()[ CD ]
Line_18 $$ String clientName = getClientName(007)-->Line_24 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_26 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ CD ]
Line_2 $$ void generateInputs(int[] ignore) throws IOException -->Line_8 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ CD ]
Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_22 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ FD ]
Line_21 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_23 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ FD ]
