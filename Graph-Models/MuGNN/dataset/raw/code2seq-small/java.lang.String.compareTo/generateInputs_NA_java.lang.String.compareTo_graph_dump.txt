Line_6 $$ int nrFiles = (int) Math.ceil((double) nrBlocks / blocksPerFile)-->Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) [ FD ]
Line_4 $$ int nrDatanodes = getNumDatanodes()-->Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) [ FD ]
Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_14 $$ datanodes[idx].sendHeartbeat()[ CD ]
Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) [ FD ]
Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_27 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ CD ]
Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_25 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ FD ]
Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ CD ]
Line_19 $$ FileNameGenerator nameGenerator-->Line_20 $$ nameGenerator = new FileNameGenerator(getBaseDir(), 100)[ FD ]
Line_15 $$ prevDNName = datanodes[idx].getXferAddr()-->Line_13 $$ assert datanodes[idx].getXferAddr().compareTo(prevDNName) > 0 : "Data-nodes must be sorted lexicographically."[ FD ]
Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_11 $$ datanodes[idx] = new TinyDatanode(idx, blocksPerReport)[ CD ]
Line_21 $$ String clientName = getClientName(007)-->Line_25 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ FD ]
Line_19 $$ FileNameGenerator nameGenerator-->Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ FD ]
Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_27 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_15 $$ prevDNName = datanodes[idx].getXferAddr()[ CD ]
Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")-->Line_26 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ FD ]
Line_21 $$ String clientName = getClientName(007)-->Line_27 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_25 $$ nameNodeProto.create(fileName, FsPermission.getDefault(), clientName, new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE)), true, replication, BLOCK_SIZE, null)[ CD ]
Line_20 $$ nameGenerator = new FileNameGenerator(getBaseDir(), 100)-->Line_24 $$ String fileName = nameGenerator.getNextFileName("ThroughputBench")[ FD ]
Line_23 $$ for (int idx = 0; idx < nrFiles; idx++) -->Line_26 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ CD ]
Line_26 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)-->Line_27 $$ nameNodeProto.complete(fileName, clientName, lastBlock, INodeId.GRANDFATHER_INODE_ID)[ FD ]
Line_21 $$ String clientName = getClientName(007)-->Line_26 $$ ExtendedBlock lastBlock = addBlocks(fileName, clientName)[ FD ]
Line_10 $$ for (int idx = 0; idx < nrDatanodes; idx++) -->Line_12 $$ datanodes[idx].register()[ CD ]
