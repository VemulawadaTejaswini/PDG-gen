Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_29 $$ if (encodedLen2 > encoded2.length)[ CD ]
Line_26 $$ encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)]-->Line_27 $$ IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1, 0, encodedLen1)[ FD ]
Line_2 $$ public void testEncodedSortability() -->Line_3 $$ byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH][ CD ]
Line_17 $$ for (int byteNum = 0; byteNum < numBytes2; ++byteNum) -->Line_20 $$ originalString2[byteNum] = (char) randomInt[ CD ]
Line_8 $$ char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_30 $$ encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)][ FD ]
Line_30 $$ encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)]-->Line_31 $$ IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0, encodedLen2)[ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_17 $$ for (int byteNum = 0; byteNum < numBytes2; ++byteNum) [ CD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ CD ]
Line_10 $$ int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1-->Line_27 $$ IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1, 0, encodedLen1)[ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_10 $$ int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1[ CD ]
Line_8 $$ char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_31 $$ IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0, encodedLen2)[ FD ]
Line_6 $$ byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_28 $$ int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2, 0, numBytes2)[ FD ]
Line_2 $$ public void testEncodedSortability() -->Line_7 $$ char[] originalString2 = new char[MAX_RANDOM_BINARY_LENGTH][ CD ]
Line_17 $$ for (int byteNum = 0; byteNum < numBytes2; ++byteNum) -->Line_18 $$ int randomInt = random().nextInt(0x100)[ CD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_22 $$ int originalComparison = new String(originalString1, 0, numBytes1).compareTo(new String(originalString2, 0, numBytes2))[ CD ]
Line_3 $$ byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_24 $$ int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(originalArray1, 0, numBytes1)[ FD ]
Line_10 $$ int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_27 $$ IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1, 0, encodedLen1)[ CD ]
Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) -->Line_12 $$ int randomInt = random().nextInt(0x100)[ CD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_32 $$ int encodedComparison = new String(encoded1, 0, encodedLen1).compareTo(new String(encoded2, 0, encodedLen2))[ CD ]
Line_10 $$ int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1-->Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) [ FD ]
Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) -->Line_13 $$ originalArray1[byteNum] = (byte) randomInt[ CD ]
Line_5 $$ char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_3 $$ byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_25 $$ if (encodedLen1 > encoded1.length)[ CD ]
Line_17 $$ for (int byteNum = 0; byteNum < numBytes2; ++byteNum) -->Line_19 $$ original2[byteNum] = (byte) randomInt[ CD ]
Line_5 $$ char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_27 $$ IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1, 0, encodedLen1)[ FD ]
Line_2 $$ public void testEncodedSortability() -->Line_5 $$ char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10][ CD ]
Line_30 $$ encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_8 $$ char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_6 $$ byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_25 $$ if (encodedLen1 > encoded1.length)-->Line_26 $$ encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)][ CD ]
Line_10 $$ int numBytes1 = random().nextInt(MAX_RANDOM_BINARY_LENGTH - 1) + 1-->Line_24 $$ int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(originalArray1, 0, numBytes1)[ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_31 $$ IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0, encodedLen2)[ CD ]
Line_26 $$ encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)]-->Line_34 $$ assertEquals("Test #" + (testNum + 1) + ": Original bytes and encoded chars compare differently:" + System.getProperty("line.separator") + " binary 1: " + binaryDump(originalArray1, numBytes1) + System.getProperty("line.separator") + " binary 2: " + binaryDump(original2, numBytes2) + System.getProperty("line.separator") + "encoded 1: " + charArrayDump(encoded1, encodedLen1) + System.getProperty("line.separator") + "encoded 2: " + charArrayDump(encoded2, encodedLen2) + System.getProperty("line.separator"), originalComparison, encodedComparison)[ FD ]
Line_6 $$ byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_31 $$ IndexableBinaryStringTools.encode(original2, 0, numBytes2, encoded2, 0, encodedLen2)[ FD ]
Line_2 $$ public void testEncodedSortability() -->Line_4 $$ char[] originalString1 = new char[MAX_RANDOM_BINARY_LENGTH][ CD ]
Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) -->Line_14 $$ originalString1[byteNum] = (char) randomInt[ CD ]
Line_2 $$ public void testEncodedSortability() -->Line_8 $$ char[] encoded2 = new char[MAX_RANDOM_BINARY_LENGTH * 10][ CD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) [ CD ]
Line_11 $$ for (int byteNum = 0; byteNum < numBytes1; ++byteNum) -->Line_17 $$ for (int byteNum = 0; byteNum < numBytes2; ++byteNum) [ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_24 $$ int encodedLen1 = IndexableBinaryStringTools.getEncodedLength(originalArray1, 0, numBytes1)[ CD ]
Line_5 $$ char[] encoded1 = new char[MAX_RANDOM_BINARY_LENGTH * 10]-->Line_26 $$ encoded1 = new char[ArrayUtil.oversize(encodedLen1, RamUsageEstimator.NUM_BYTES_CHAR)][ FD ]
Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) -->Line_28 $$ int encodedLen2 = IndexableBinaryStringTools.getEncodedLength(original2, 0, numBytes2)[ CD ]
Line_2 $$ public void testEncodedSortability() -->Line_9 $$ for (int testNum = 0; testNum < NUM_RANDOM_TESTS; ++testNum) [ CD ]
Line_3 $$ byte[] originalArray1 = new byte[MAX_RANDOM_BINARY_LENGTH]-->Line_27 $$ IndexableBinaryStringTools.encode(originalArray1, 0, numBytes1, encoded1, 0, encodedLen1)[ FD ]
Line_29 $$ if (encodedLen2 > encoded2.length)-->Line_30 $$ encoded2 = new char[ArrayUtil.oversize(encodedLen2, RamUsageEstimator.NUM_BYTES_CHAR)][ CD ]
Line_2 $$ public void testEncodedSortability() -->Line_6 $$ byte[] original2 = new byte[MAX_RANDOM_BINARY_LENGTH][ CD ]
