Line_2 $$ private static int compareLines(String[] mergedLines, String[] curLines, int start) -->Line_3 $$ if (mergedLines.length < curLines.length)[ CD ]
Line_2 $$ private static int compareLines(String[] mergedLines, String[] curLines, int start) -->Line_12 $$ return 0[ CD ]
Line_8 $$ final int comp = mergedLines[i].compareTo(curLines[i])-->Line_9 $$ if (comp != 0)[ FD ]
Line_5 $$ if (mergedLines.length > curLines.length)-->Line_6 $$ return 1[ CD ]
Line_7 $$ for (int i = start; i < mergedLines.length; i++) -->Line_9 $$ if (comp != 0)[ CD ]
Line_3 $$ if (mergedLines.length < curLines.length)-->Line_4 $$ return -1[ CD ]
Line_2 $$ private static int compareLines(String[] mergedLines, String[] curLines, int start) -->Line_5 $$ if (mergedLines.length > curLines.length)[ CD ]
Line_7 $$ for (int i = start; i < mergedLines.length; i++) -->Line_8 $$ final int comp = mergedLines[i].compareTo(curLines[i])[ CD ]
Line_2 $$ private static int compareLines(String[] mergedLines, String[] curLines, int start) -->Line_7 $$ for (int i = start; i < mergedLines.length; i++) [ CD ]
Line_9 $$ if (comp != 0)-->Line_10 $$ return comp[ CD ]
