Line_65 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())-->Line_66 $$ if (selectedPattern != null) [ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_78 $$ return panel[ CD ]
Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_23 $$ list.clear()[ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_12 $$ listModel.add(s)[ FD ]
Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_19 $$ listChanged()[ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_25 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_36 $$ listChanged()[ CD ]
Line_65 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())-->Line_67 $$ listModel.add(selectedPattern)[ FD ]
Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_50 $$ return aClass.isAnnotationType()[ CD ]
Line_72 $$ if (borderTitle == null) -->Line_73 $$ return toolbarDecorator.createPanel()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_77 $$ panel.add(toolbarDecorator.createPanel(), BorderLayout.CENTER)[ CD ]
Line_43 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_45 $$ project = ProjectManager.getInstance().getDefaultProject()[ FD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_44 $$ if (project == null)[ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_7 $$ return o1.compareTo(o2)[ FD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_53 $$ chooser.showDialog()[ CD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_43 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_14 $$ injectionList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION)[ CD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_54 $$ final PsiClass selected = chooser.getSelected()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_60 $$ if (acceptPatterns) [ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_24 $$ for (int i = 0; i < listModel.getSize(); i++) [ FD ]
Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_50 $$ return aClass.isAnnotationType()[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_76 $$ panel.add(SeparatorFactory.createSeparator(borderTitle, null), BorderLayout.NORTH)[ CD ]
Line_24 $$ for (int i = 0; i < listModel.getSize(); i++) -->Line_25 $$ list.add((String) listModel.getElementAt(i))[ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_7 $$ return o1.compareTo(o2)[ CD ]
Line_24 $$ for (int i = 0; i < listModel.getSize(); i++) -->Line_25 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_23 $$ list.clear()[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_72 $$ if (borderTitle == null) [ CD ]
Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_53 $$ chooser.showDialog()[ FD ]
Line_44 $$ if (project == null)-->Line_45 $$ project = ProjectManager.getInstance().getDefaultProject()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_25 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_67 $$ listModel.add(selectedPattern)[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_76 $$ panel.add(SeparatorFactory.createSeparator(borderTitle, null), BorderLayout.NORTH)[ FD ]
Line_60 $$ if (acceptPatterns) -->Line_61 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_72 $$ if (borderTitle == null) [ FD ]
Line_43 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_44 $$ if (project == null)[ FD ]
Line_45 $$ project = ProjectManager.getInstance().getDefaultProject()-->Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ FD ]
Line_61 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) -->Line_65 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())[ CD ]
Line_66 $$ if (selectedPattern != null) -->Line_67 $$ listModel.add(selectedPattern)[ CD ]
Line_55 $$ if (selected != null) -->Line_56 $$ listModel.add(selected.getQualifiedName())[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() [ CD ]
Line_61 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) -->Line_66 $$ if (selectedPattern != null) [ CD ]
Line_43 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ FD ]
Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_31 $$ listChanged()[ CD ]
Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_54 $$ final PsiClass selected = chooser.getSelected()[ FD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_46 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_56 $$ listModel.add(selected.getQualifiedName())[ FD ]
Line_39 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_55 $$ if (selected != null) [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() [ CD ]
Line_15 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_24 $$ for (int i = 0; i < listModel.getSize(); i++) [ CD ]
