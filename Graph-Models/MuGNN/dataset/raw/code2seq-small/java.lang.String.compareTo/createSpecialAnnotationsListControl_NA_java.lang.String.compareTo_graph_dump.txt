Line_32 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_63 $$ return panel[ CD ]
Line_19 $$ for (int i = 0; i < listModel.getSize(); i++) -->Line_20 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_48 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) -->Line_50 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_61 $$ panel.add(SeparatorFactory.createSeparator(borderTitle, null), BorderLayout.NORTH)[ CD ]
Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_37 $$ return aClass.isAnnotationType()[ CD ]
Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_37 $$ return aClass.isAnnotationType()[ FD ]
Line_32 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_34 $$ project = ProjectManager.getInstance().getDefaultProject()[ FD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_40 $$ chooser.showDialog()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() [ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_10 $$ listModel.add(s)[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_12 $$ injectionList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION)[ CD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ CD ]
Line_57 $$ if (borderTitle == null) -->Line_58 $$ return toolbarDecorator.createPanel()[ CD ]
Line_47 $$ if (acceptPatterns) -->Line_48 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_62 $$ panel.add(toolbarDecorator.createPanel(), BorderLayout.CENTER)[ CD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_32 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() [ CD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_41 $$ final PsiClass selected = chooser.getSelected()[ CD ]
Line_32 $$ Project project = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(injectionList))-->Line_33 $$ if (project == null)[ FD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_5 $$ return o1.compareTo(o2)[ FD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_52 $$ listModel.add(selectedPattern)[ FD ]
Line_51 $$ if (selectedPattern != null) -->Line_52 $$ listModel.add(selectedPattern)[ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_20 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_27 $$ listChanged()[ CD ]
Line_34 $$ project = ProjectManager.getInstance().getDefaultProject()-->Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() [ FD ]
Line_50 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())-->Line_51 $$ if (selectedPattern != null) [ FD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_33 $$ if (project == null)[ CD ]
Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_41 $$ final PsiClass selected = chooser.getSelected()[ FD ]
Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_24 $$ listChanged()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_20 $$ list.add((String) listModel.getElementAt(i))[ FD ]
Line_48 $$ toolbarDecorator.setAddIcon(IconUtil.getAddClassIcon()).addExtraAction(new AnActionButton(InspectionsBundle.message("special.annotations.list.annotation.pattern"), IconUtil.getAddPatternIcon()) -->Line_51 $$ if (selectedPattern != null) [ CD ]
Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_19 $$ for (int i = 0; i < listModel.getSize(); i++) [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() [ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_57 $$ if (borderTitle == null) [ FD ]
Line_30 $$ ToolbarDecorator toolbarDecorator = ToolbarDecorator.createDecorator(injectionList).setAddAction(new AnActionButtonRunnable() -->Line_42 $$ if (selected != null) [ CD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_43 $$ listModel.add(selected.getQualifiedName())[ FD ]
Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_18 $$ list.clear()[ CD ]
Line_19 $$ for (int i = 0; i < listModel.getSize(); i++) -->Line_20 $$ list.add((String) listModel.getElementAt(i))[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_18 $$ list.clear()[ FD ]
Line_50 $$ String selectedPattern = Messages.showInputDialog(InspectionsBundle.message("special.annotations.list.annotation.pattern"), InspectionsBundle.message("special.annotations.list.annotation.pattern"), Messages.getQuestionIcon())-->Line_52 $$ listModel.add(selectedPattern)[ FD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_19 $$ for (int i = 0; i < listModel.getSize(); i++) [ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_61 $$ panel.add(SeparatorFactory.createSeparator(borderTitle, null), BorderLayout.NORTH)[ FD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_57 $$ if (borderTitle == null) [ CD ]
Line_42 $$ if (selected != null) -->Line_43 $$ listModel.add(selected.getQualifiedName())[ CD ]
Line_13 $$ injectionList.getModel().addListDataListener(new ListDataListener() -->Line_15 $$ listChanged()[ CD ]
Line_35 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createWithInnerClassesScopeChooser(InspectionsBundle.message("special.annotations.list.annotation.class"), GlobalSearchScope.allScope(project), new ClassFilter() -->Line_40 $$ chooser.showDialog()[ FD ]
Line_3 $$ final SortedListModel<String> listModel = new SortedListModel<String>(new Comparator<String>() -->Line_5 $$ return o1.compareTo(o2)[ CD ]
Line_33 $$ if (project == null)-->Line_34 $$ project = ProjectManager.getInstance().getDefaultProject()[ CD ]
Line_2 $$ public static JPanel createSpecialAnnotationsListControl(final List<String> list, final String borderTitle, final boolean acceptPatterns) -->Line_47 $$ if (acceptPatterns) [ CD ]
