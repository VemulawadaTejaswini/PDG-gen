Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_15 $$ orderedFkSecondPasses.add(0, sp)[ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_4 $$ if (dependencies == null || dependencies.size() == 0) [ CD ]
Line_8 $$ String dependentTable = sp.getValue().getTable().getQualifiedTableName().render()-->Line_9 $$ if (dependentTable.compareTo(startTable) == 0) [ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_13 $$ buildRecursiveOrderedFkSecondPasses(orderedFkSecondPasses, isADependencyOf, startTable, dependentTable)[ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_9 $$ if (dependentTable.compareTo(startTable) == 0) [ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_3 $$ Set<FkSecondPass> dependencies = isADependencyOf.get(currentTable)[ CD ]
Line_7 $$ for (FkSecondPass sp : dependencies) -->Line_8 $$ String dependentTable = sp.getValue().getTable().getQualifiedTableName().render()[ FD ]
Line_9 $$ if (dependentTable.compareTo(startTable) == 0) -->Line_10 $$ String sb = "Foreign key circularity dependency involving the following tables: "[ CD ]
Line_8 $$ String dependentTable = sp.getValue().getTable().getQualifiedTableName().render()-->Line_13 $$ buildRecursiveOrderedFkSecondPasses(orderedFkSecondPasses, isADependencyOf, startTable, dependentTable)[ FD ]
Line_7 $$ for (FkSecondPass sp : dependencies) -->Line_14 $$ if (!orderedFkSecondPasses.contains(sp)) [ FD ]
Line_14 $$ if (!orderedFkSecondPasses.contains(sp)) -->Line_15 $$ orderedFkSecondPasses.add(0, sp)[ CD ]
Line_7 $$ for (FkSecondPass sp : dependencies) -->Line_15 $$ orderedFkSecondPasses.add(0, sp)[ FD ]
Line_3 $$ Set<FkSecondPass> dependencies = isADependencyOf.get(currentTable)-->Line_4 $$ if (dependencies == null || dependencies.size() == 0) [ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_3 $$ Set<FkSecondPass> dependencies = isADependencyOf.get(currentTable)[ FD ]
Line_2 $$ private void buildRecursiveOrderedFkSecondPasses(List<FkSecondPass> orderedFkSecondPasses, Map<String, Set<FkSecondPass>> isADependencyOf, String startTable, String currentTable) -->Line_14 $$ if (!orderedFkSecondPasses.contains(sp)) [ FD ]
Line_4 $$ if (dependencies == null || dependencies.size() == 0) -->Line_5 $$ return[ CD ]
