Line_8 $$ while (true) -->Line_10 $$ if (settings != null)[ CD ]
Line_8 $$ while (true) -->Line_9 $$ settings = dirToSettings.get(parent)[ CD ]
Line_9 $$ settings = dirToSettings.get(parent)-->Line_17 $$ settings = defaultSettings[ FD ]
Line_9 $$ settings = dirToSettings.get(parent)-->Line_18 $$ if (settings.combineSubdirectories) [ FD ]
Line_40 $$ int dotIndex = full1.lastIndexOf('.')-->Line_42 $$ full1 = full1.substring(0, dotIndex)[ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_61 $$ name2 = matcher.group(1)[ FD ]
Line_9 $$ settings = dirToSettings.get(parent)-->Line_16 $$ if (settings == null)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_18 $$ if (settings.combineSubdirectories) [ CD ]
Line_17 $$ settings = defaultSettings-->Line_18 $$ if (settings.combineSubdirectories) [ FD ]
Line_40 $$ int dotIndex = full1.lastIndexOf('.')-->Line_45 $$ if (dotIndex != -1)[ FD ]
Line_48 $$ int num1 = 0, num2 = 0-->Line_52 $$ num1 = Integer.parseInt(matcher.group(2))[ FD ]
Line_47 $$ String name1 = full1, name2 = full2-->Line_61 $$ name2 = matcher.group(1)[ FD ]
Line_9 $$ settings = dirToSettings.get(parent)-->Line_10 $$ if (settings != null)[ FD ]
Line_3 $$ if (ignoreDirs.contains(inputDir.inputFile))-->Line_4 $$ return[ CD ]
Line_14 $$ parent = parent.getParentFile()-->Line_9 $$ settings = dirToSettings.get(parent)[ FD ]
Line_7 $$ File parent = inputDir.inputFile-->Line_9 $$ settings = dirToSettings.get(parent)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_8 $$ while (true) [ CD ]
Line_40 $$ int dotIndex = full1.lastIndexOf('.')-->Line_46 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_65 $$ int compare = name1.compareTo(name2)-->Line_66 $$ if (compare != 0 || num1 == num2)[ FD ]
Line_66 $$ if (compare != 0 || num1 == num2)-->Line_67 $$ return compare[ CD ]
Line_47 $$ String name1 = full1, name2 = full2-->Line_53 $$ name1 = matcher.group(1)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_31 $$ if (files.isEmpty())[ FD ]
Line_31 $$ if (files.isEmpty())-->Line_32 $$ return[ CD ]
Line_45 $$ if (dotIndex != -1)-->Line_46 $$ full2 = full2.substring(0, dotIndex)[ CD ]
Line_47 $$ String name1 = full1, name2 = full2-->Line_65 $$ int compare = name1.compareTo(name2)[ FD ]
Line_43 $$ String full2 = entry2.inputFile.getName()-->Line_44 $$ dotIndex = full2.lastIndexOf('.')[ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_58 $$ if (matcher.matches()) [ FD ]
Line_7 $$ File parent = inputDir.inputFile-->Line_12 $$ if (parent.equals(root))[ FD ]
Line_48 $$ int num1 = 0, num2 = 0-->Line_60 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
Line_57 $$ matcher = digitSuffix.matcher(full2)-->Line_60 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
Line_61 $$ name2 = matcher.group(1)-->Line_65 $$ int compare = name1.compareTo(name2)[ FD ]
Line_40 $$ int dotIndex = full1.lastIndexOf('.')-->Line_44 $$ dotIndex = full2.lastIndexOf('.')[ FD ]
Line_7 $$ File parent = inputDir.inputFile-->Line_14 $$ parent = parent.getParentFile()[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_76 $$ packer.pack(inputDir.outputDir, packFileName)[ CD ]
Line_39 $$ String full1 = entry1.inputFile.getName()-->Line_42 $$ full1 = full1.substring(0, dotIndex)[ FD ]
Line_40 $$ int dotIndex = full1.lastIndexOf('.')-->Line_41 $$ if (dotIndex != -1)[ FD ]
Line_42 $$ full1 = full1.substring(0, dotIndex)-->Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)[ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_60 $$ num2 = Integer.parseInt(matcher.group(2))[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_3 $$ if (ignoreDirs.contains(inputDir.inputFile))[ CD ]
Line_43 $$ String full2 = entry2.inputFile.getName()-->Line_46 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_16 $$ if (settings == null)[ CD ]
Line_16 $$ if (settings == null)-->Line_17 $$ settings = defaultSettings[ CD ]
Line_39 $$ String full1 = entry1.inputFile.getName()-->Line_40 $$ int dotIndex = full1.lastIndexOf('.')[ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_57 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_41 $$ if (dotIndex != -1)-->Line_42 $$ full1 = full1.substring(0, dotIndex)[ CD ]
Line_8 $$ while (true) -->Line_14 $$ parent = parent.getParentFile()[ CD ]
Line_8 $$ while (true) -->Line_12 $$ if (parent.equals(root))[ CD ]
Line_46 $$ full2 = full2.substring(0, dotIndex)-->Line_57 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_31 $$ if (files.isEmpty())[ CD ]
Line_53 $$ name1 = matcher.group(1)-->Line_65 $$ int compare = name1.compareTo(name2)[ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_53 $$ name1 = matcher.group(1)[ FD ]
Line_44 $$ dotIndex = full2.lastIndexOf('.')-->Line_45 $$ if (dotIndex != -1)[ FD ]
Line_2 $$ protected void processDir(Entry inputDir, ArrayList<Entry> files) throws Exception -->Line_7 $$ File parent = inputDir.inputFile[ CD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_50 $$ if (matcher.matches()) [ FD ]
Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)-->Line_52 $$ num1 = Integer.parseInt(matcher.group(2))[ FD ]
Line_14 $$ parent = parent.getParentFile()-->Line_12 $$ if (parent.equals(root))[ FD ]
Line_39 $$ String full1 = entry1.inputFile.getName()-->Line_49 $$ Matcher matcher = digitSuffix.matcher(full1)[ FD ]
Line_43 $$ String full2 = entry2.inputFile.getName()-->Line_57 $$ matcher = digitSuffix.matcher(full2)[ FD ]
Line_57 $$ matcher = digitSuffix.matcher(full2)-->Line_58 $$ if (matcher.matches()) [ FD ]
Line_44 $$ dotIndex = full2.lastIndexOf('.')-->Line_46 $$ full2 = full2.substring(0, dotIndex)[ FD ]
Line_57 $$ matcher = digitSuffix.matcher(full2)-->Line_61 $$ name2 = matcher.group(1)[ FD ]
