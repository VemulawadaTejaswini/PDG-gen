Line_5 $$ KernelServices mainServices = builder.build()-->Line_31 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ FD ]
Line_31 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_32 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_4 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())-->Line_5 $$ KernelServices mainServices = builder.build()[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_29 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_10 $$ ModelNode result-->Line_21 $$ checkResult(result)[ FD ]
Line_25 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_27 $$ writeOp.get("name").set("debug")[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_41 $$ checkResult(mainServices.executeOperation(addSession))[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_6 $$ if (!mainServices.isSuccessfulBoot()) [ FD ]
Line_29 $$ result = mainServices.executeOperation(writeOp)-->Line_30 $$ checkResult(result)[ FD ]
Line_29 $$ result = mainServices.executeOperation(writeOp)-->Line_45 $$ checkForFailure(result)[ FD ]
Line_9 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_25 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)[ FD ]
Line_35 $$ Properties properties = session.getProperties()-->Line_37 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_19 $$ addServerOp.get("password").set("pswd")[ FD ]
Line_35 $$ Properties properties = session.getProperties()-->Line_36 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ FD ]
Line_39 $$ ModelNode addSession = Util.createAddOperation(nonExisting)-->Line_40 $$ addSession.get("jndi-name").set("java:/bah")[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_7 $$ Assert.fail(mainServices.getBootError().toString())[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_18 $$ addServerOp.get("username").set("user")[ FD ]
Line_10 $$ ModelNode result-->Line_45 $$ checkForFailure(result)[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_17 $$ addServerOp.get("outbound-socket-binding-ref").set("mail-imap")[ FD ]
Line_25 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_29 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_39 $$ ModelNode addSession = Util.createAddOperation(nonExisting)-->Line_41 $$ checkResult(mainServices.executeOperation(addSession))[ FD ]
Line_10 $$ ModelNode result-->Line_13 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_25 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_26 $$ writeOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_33 $$ Session session = (Session) javaMailService.getValue()-->Line_35 $$ Properties properties = session.getProperties()[ FD ]
Line_11 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_42 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_29 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_33 $$ Session session = (Session) javaMailService.getValue()-->Line_34 $$ Assert.assertNotNull("session should not be null", session)[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_24 $$ checkResult(mainServices.executeOperation(addServerOp))[ FD ]
Line_25 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_28 $$ writeOp.get("value").set(false)[ FD ]
Line_9 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_11 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_13 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_20 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_24 $$ checkResult(mainServices.executeOperation(addServerOp))[ FD ]
Line_10 $$ ModelNode result-->Line_29 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_6 $$ if (!mainServices.isSuccessfulBoot()) -->Line_7 $$ Assert.fail(mainServices.getBootError().toString())[ CD ]
Line_38 $$ PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "non-existing-session"))-->Line_42 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))[ FD ]
Line_31 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_33 $$ Session session = (Session) javaMailService.getValue()[ FD ]
Line_11 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_12 $$ removeServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_20 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_11 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_13 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_10 $$ ModelNode result-->Line_20 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_16 $$ addServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_20 $$ result = mainServices.executeOperation(addServerOp)-->Line_30 $$ checkResult(result)[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_20 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_14 $$ checkResult(result)[ FD ]
Line_38 $$ PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "non-existing-session"))-->Line_39 $$ ModelNode addSession = Util.createAddOperation(nonExisting)[ FD ]
Line_20 $$ result = mainServices.executeOperation(addServerOp)-->Line_45 $$ checkForFailure(result)[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_21 $$ checkResult(result)[ FD ]
Line_20 $$ result = mainServices.executeOperation(addServerOp)-->Line_21 $$ checkResult(result)[ FD ]
Line_10 $$ ModelNode result-->Line_30 $$ checkResult(result)[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_30 $$ checkResult(result)[ FD ]
Line_13 $$ result = mainServices.executeOperation(removeServerOp)-->Line_45 $$ checkForFailure(result)[ FD ]
Line_20 $$ result = mainServices.executeOperation(addServerOp)-->Line_29 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_10 $$ ModelNode result-->Line_14 $$ checkResult(result)[ FD ]
Line_9 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_15 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))[ FD ]
