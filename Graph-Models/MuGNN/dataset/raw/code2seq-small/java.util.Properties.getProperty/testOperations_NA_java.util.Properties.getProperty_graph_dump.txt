Line_4 $$ KernelServices mainServices = builder.build()-->Line_29 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ FD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_28 $$ checkResult(result)[ FD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_22 $$ checkResult(mainServices.executeOperation(addServerOp))[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_22 $$ checkResult(mainServices.executeOperation(addServerOp))[ CD ]
Line_31 $$ Session session = (Session) javaMailService.getValue()-->Line_32 $$ Assert.assertNotNull("session should not be null", session)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_5 $$ if (!mainServices.isSuccessfulBoot()) [ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_32 $$ Assert.assertNotNull("session should not be null", session)[ CD ]
Line_36 $$ PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "non-existing-session"))-->Line_37 $$ ModelNode addSession = Util.createAddOperation(nonExisting)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_11 $$ removeServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_20 $$ checkResult(result)[ CD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_42 $$ checkForFailure(result)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_40 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))[ CD ]
Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_24 $$ writeOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_9 $$ ModelNode result-->Line_28 $$ checkResult(result)[ FD ]
Line_8 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))[ FD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_20 $$ checkResult(result)[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_19 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_19 $$ result = mainServices.executeOperation(addServerOp)-->Line_20 $$ checkResult(result)[ FD ]
Line_8 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_34 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_38 $$ addSession.get("jndi-name").set("java:/bah")[ CD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_19 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_40 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))[ FD ]
Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_12 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_31 $$ Session session = (Session) javaMailService.getValue()-->Line_33 $$ Properties properties = session.getProperties()[ FD ]
Line_8 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))-->Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)[ FD ]
Line_37 $$ ModelNode addSession = Util.createAddOperation(nonExisting)-->Line_38 $$ addSession.get("jndi-name").set("java:/bah")[ FD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_13 $$ checkResult(result)[ FD ]
Line_9 $$ ModelNode result-->Line_19 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_17 $$ addServerOp.get("username").set("user")[ CD ]
Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_26 $$ writeOp.get("value").set(false)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_42 $$ checkForFailure(result)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_33 $$ Properties properties = session.getProperties()[ CD ]
Line_27 $$ result = mainServices.executeOperation(writeOp)-->Line_42 $$ checkForFailure(result)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))[ CD ]
Line_9 $$ ModelNode result-->Line_42 $$ checkForFailure(result)[ FD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_18 $$ addServerOp.get("password").set("pswd")[ FD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_27 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_41 $$ result = mainServices.executeOperation(removeServerOp)-->Line_42 $$ checkForFailure(result)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_26 $$ writeOp.get("value").set(false)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_9 $$ ModelNode result[ CD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_37 $$ ModelNode addSession = Util.createAddOperation(nonExisting)[ CD ]
Line_29 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_30 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_27 $$ result = mainServices.executeOperation(writeOp)-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_25 $$ writeOp.get("name").set("debug")[ FD ]
Line_33 $$ Properties properties = session.getProperties()-->Line_34 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_21 $$ checkResult(mainServices.executeOperation(removeServerOp))[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_6 $$ Assert.fail(mainServices.getBootError().toString())[ FD ]
Line_37 $$ ModelNode addSession = Util.createAddOperation(nonExisting)-->Line_39 $$ checkResult(mainServices.executeOperation(addSession))[ FD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_16 $$ addServerOp.get("outbound-socket-binding-ref").set("mail-imap")[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_31 $$ Session session = (Session) javaMailService.getValue()[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_30 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_3 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())[ CD ]
Line_19 $$ result = mainServices.executeOperation(addServerOp)-->Line_27 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_25 $$ writeOp.get("name").set("debug")[ CD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_15 $$ addServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_19 $$ result = mainServices.executeOperation(addServerOp)[ FD ]
Line_27 $$ result = mainServices.executeOperation(writeOp)-->Line_28 $$ checkResult(result)[ FD ]
Line_5 $$ if (!mainServices.isSuccessfulBoot()) -->Line_6 $$ Assert.fail(mainServices.getBootError().toString())[ CD ]
Line_40 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_24 $$ writeOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_5 $$ if (!mainServices.isSuccessfulBoot()) [ FD ]
Line_33 $$ Properties properties = session.getProperties()-->Line_35 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ FD ]
Line_36 $$ PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "non-existing-session"))-->Line_40 $$ removeServerOp = Util.createRemoveOperation(nonExisting.append("server", "imap"))[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_18 $$ addServerOp.get("password").set("pswd")[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_29 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ CD ]
Line_29 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_31 $$ Session session = (Session) javaMailService.getValue()[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_4 $$ KernelServices mainServices = builder.build()[ CD ]
Line_9 $$ ModelNode result-->Line_27 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_39 $$ checkResult(mainServices.executeOperation(addSession))[ FD ]
Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_11 $$ removeServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ FD ]
Line_19 $$ result = mainServices.executeOperation(addServerOp)-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_39 $$ checkResult(mainServices.executeOperation(addSession))[ CD ]
Line_9 $$ ModelNode result-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)-->Line_27 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_12 $$ result = mainServices.executeOperation(removeServerOp)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_28 $$ checkResult(result)[ CD ]
Line_9 $$ ModelNode result-->Line_13 $$ checkResult(result)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_13 $$ checkResult(result)[ CD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_22 $$ checkResult(mainServices.executeOperation(addServerOp))[ FD ]
Line_19 $$ result = mainServices.executeOperation(addServerOp)-->Line_28 $$ checkResult(result)[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_27 $$ result = mainServices.executeOperation(writeOp)[ FD ]
Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))-->Line_17 $$ addServerOp.get("username").set("user")[ FD ]
Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_21 $$ checkResult(mainServices.executeOperation(removeServerOp))[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_12 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_15 $$ addServerOp.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_35 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_19 $$ result = mainServices.executeOperation(addServerOp)[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_8 $$ PathAddress sessionAddress = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "defaultMail"))[ CD ]
Line_9 $$ ModelNode result-->Line_20 $$ checkResult(result)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_21 $$ checkResult(mainServices.executeOperation(removeServerOp))[ CD ]
Line_3 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())-->Line_4 $$ KernelServices mainServices = builder.build()[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_36 $$ PathAddress nonExisting = PathAddress.pathAddress(MailExtension.SUBSYSTEM_PATH, PathElement.pathElement(MailExtension.MAIL_SESSION_PATH.getKey(), "non-existing-session"))[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_14 $$ ModelNode addServerOp = Util.createAddOperation(sessionAddress.append("server", "imap"))[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_23 $$ ModelNode writeOp = Util.createEmptyOperation(WRITE_ATTRIBUTE_OPERATION, sessionAddress)[ CD ]
Line_12 $$ result = mainServices.executeOperation(removeServerOp)-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_2 $$ public void testOperations() throws Exception -->Line_16 $$ addServerOp.get("outbound-socket-binding-ref").set("mail-imap")[ CD ]
Line_2 $$ public void testOperations() throws Exception -->Line_27 $$ result = mainServices.executeOperation(writeOp)[ CD ]
Line_9 $$ ModelNode result-->Line_12 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_10 $$ ModelNode removeServerOp = Util.createRemoveOperation(sessionAddress.append("server", "imap"))-->Line_41 $$ result = mainServices.executeOperation(removeServerOp)[ FD ]
Line_19 $$ result = mainServices.executeOperation(addServerOp)-->Line_42 $$ checkForFailure(result)[ FD ]
