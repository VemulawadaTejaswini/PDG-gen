Line_2 $$ protected void initAuthFailures(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, String key) throws Exception -->Line_5 $$ AuthFailure authFailure = (AuthFailure) newInstance(portletClassLoader, AuthFailure.class, authFailureClassName)[ FD ]
Line_2 $$ protected void initAuthFailures(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, String key) throws Exception -->Line_6 $$ registerService(servletContextName, authFailureClassName, AuthFailure.class, authFailure, "key", key)[ FD ]
Line_2 $$ protected void initAuthFailures(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, String key) throws Exception -->Line_3 $$ String[] authFailureClassNames = StringUtil.split(portalProperties.getProperty(key))[ FD ]
Line_4 $$ for (String authFailureClassName : authFailureClassNames) -->Line_6 $$ registerService(servletContextName, authFailureClassName, AuthFailure.class, authFailure, "key", key)[ FD ]
Line_2 $$ protected void initAuthFailures(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, String key) throws Exception -->Line_3 $$ String[] authFailureClassNames = StringUtil.split(portalProperties.getProperty(key))[ CD ]
Line_5 $$ AuthFailure authFailure = (AuthFailure) newInstance(portletClassLoader, AuthFailure.class, authFailureClassName)-->Line_6 $$ registerService(servletContextName, authFailureClassName, AuthFailure.class, authFailure, "key", key)[ FD ]
Line_4 $$ for (String authFailureClassName : authFailureClassNames) -->Line_5 $$ AuthFailure authFailure = (AuthFailure) newInstance(portletClassLoader, AuthFailure.class, authFailureClassName)[ FD ]
