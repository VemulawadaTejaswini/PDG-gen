Line_18 $$ for (String name : schema.stringPropertyNames()) -->Line_20 $$ configuration.set(name, schema.getProperty(name))[ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_23 $$ RCFile.Reader recordReader[ CD ]
Line_19 $$ if (name.startsWith("serialization.")) -->Line_20 $$ configuration.set(name, schema.getProperty(name))[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_3 $$ if (true || !isOptimizedReaderEnabled(session)) [ FD ]
Line_18 $$ for (String name : schema.stringPropertyNames()) -->Line_19 $$ if (name.startsWith("serialization.")) [ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_6 $$ String deserializerClassName = getDeserializerClassName(schema)[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_16 $$ List<Integer> readHiveColumnIndexes = ImmutableList.copyOf(transform(readColumns, HiveColumnHandle::<>getHiveColumnIndex))[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_17 $$ setReadColumns(configuration, readHiveColumnIndexes)[ FD ]
Line_7 $$ RcFileBlockLoader blockLoader-->Line_9 $$ blockLoader = new RcBinaryBlockLoader()[ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_17 $$ setReadColumns(configuration, readHiveColumnIndexes)[ CD ]
Line_23 $$ RCFile.Reader recordReader-->Line_34 $$ recordReader.close()[ FD ]
Line_26 $$ recordReader = new RCFile.Reader(fileSystem, path, configuration)-->Line_34 $$ recordReader.close()[ FD ]
Line_10 $$ if (deserializerClassName.equals(ColumnarSerDe.class.getName())) -->Line_13 $$ return Optional.empty()[ CD ]
Line_6 $$ String deserializerClassName = getDeserializerClassName(schema)-->Line_8 $$ if (deserializerClassName.equals(LazyBinaryColumnarSerDe.class.getName())) [ FD ]
Line_8 $$ if (deserializerClassName.equals(LazyBinaryColumnarSerDe.class.getName())) -->Line_9 $$ blockLoader = new RcBinaryBlockLoader()[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_18 $$ for (String name : schema.stringPropertyNames()) [ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_6 $$ String deserializerClassName = getDeserializerClassName(schema)[ FD ]
Line_8 $$ if (deserializerClassName.equals(LazyBinaryColumnarSerDe.class.getName())) -->Line_10 $$ if (deserializerClassName.equals(ColumnarSerDe.class.getName())) [ CD ]
Line_3 $$ if (true || !isOptimizedReaderEnabled(session)) -->Line_4 $$ return Optional.empty()[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_8 $$ if (deserializerClassName.equals(LazyBinaryColumnarSerDe.class.getName())) [ CD ]
Line_23 $$ RCFile.Reader recordReader-->Line_26 $$ recordReader = new RCFile.Reader(fileSystem, path, configuration)[ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_3 $$ if (true || !isOptimizedReaderEnabled(session)) [ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_20 $$ configuration.set(name, schema.getProperty(name))[ FD ]
Line_15 $$ List<HiveColumnHandle> readColumns = ImmutableList.copyOf(filter(columns, not(HiveColumnHandle::<>isPartitionKey)))-->Line_16 $$ List<Integer> readHiveColumnIndexes = ImmutableList.copyOf(transform(readColumns, HiveColumnHandle::<>getHiveColumnIndex))[ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_15 $$ List<HiveColumnHandle> readColumns = ImmutableList.copyOf(filter(columns, not(HiveColumnHandle::<>isPartitionKey)))[ FD ]
Line_10 $$ if (deserializerClassName.equals(ColumnarSerDe.class.getName())) -->Line_11 $$ blockLoader = new RcTextBlockLoader(hiveStorageTimeZone)[ CD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_15 $$ List<HiveColumnHandle> readColumns = ImmutableList.copyOf(filter(columns, not(HiveColumnHandle::<>isPartitionKey)))[ CD ]
Line_7 $$ RcFileBlockLoader blockLoader-->Line_11 $$ blockLoader = new RcTextBlockLoader(hiveStorageTimeZone)[ FD ]
Line_6 $$ String deserializerClassName = getDeserializerClassName(schema)-->Line_10 $$ if (deserializerClassName.equals(ColumnarSerDe.class.getName())) [ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_25 $$ FileSystem fileSystem = path.getFileSystem(configuration)[ FD ]
Line_9 $$ blockLoader = new RcBinaryBlockLoader()-->Line_11 $$ blockLoader = new RcTextBlockLoader(hiveStorageTimeZone)[ FD ]
Line_2 $$ public Optional<? extends ConnectorPageSource> createPageSource(Configuration configuration, ConnectorSession session, Path path, long start, long length, Properties schema, List<HiveColumnHandle> columns, List<HivePartitionKey> partitionKeys, TupleDomain<HiveColumnHandle> effectivePredicate, DateTimeZone hiveStorageTimeZone) -->Line_7 $$ RcFileBlockLoader blockLoader[ CD ]
Line_16 $$ List<Integer> readHiveColumnIndexes = ImmutableList.copyOf(transform(readColumns, HiveColumnHandle::<>getHiveColumnIndex))-->Line_17 $$ setReadColumns(configuration, readHiveColumnIndexes)[ FD ]
