Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_54 $$ long[] userGroupIds = ArrayUtil.toLongArray(newUserGroupIds)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) [ CD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_16 $$ sb.append(StringPool.EQUAL)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_15 $$ sb.append(groupMappingsUser)[ CD ]
Line_23 $$ while (cookie != null) -->Line_26 $$ groupMappingsGroupName = StringUtil.toLowerCase(groupMappingsGroupName)[ CD ]
Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)-->Line_42 $$ for (int i = 0; i < userGroupAttribute.size(); i++) [ FD ]
Line_22 $$ byte[] cookie = new byte[0]-->Line_23 $$ while (cookie != null) [ FD ]
Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_29 $$ String fullGroupDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, searchResult)-->Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()-->Line_54 $$ long[] userGroupIds = ArrayUtil.toLongArray(newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_18 $$ String fullUserDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, binding)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_19 $$ sb.append(escapeValue(fullUserDN))[ CD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_10 $$ sb.append(StringPool.AMPERSAND)[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_21 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_39 $$ if (userGroupAttribute == null) [ CD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_42 $$ for (int i = 0; i < userGroupAttribute.size(); i++) [ CD ]
Line_35 $$ if (Validator.isNull(userMappingsGroup)) -->Line_36 $$ return[ CD ]
Line_25 $$ String groupMappingsGroupName = GetterUtil.getString(groupMappings.getProperty("groupName"))-->Line_26 $$ groupMappingsGroupName = StringUtil.toLowerCase(groupMappingsGroupName)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_47 $$ addUserGroupsNotAddedByLDAPImport(user.getUserId(), newUserGroupIds)[ CD ]
Line_54 $$ long[] userGroupIds = ArrayUtil.toLongArray(newUserGroupIds)-->Line_55 $$ _userGroupLocalService.setUserUserGroups(user.getUserId(), userGroupIds)[ FD ]
Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()-->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_55 $$ _userGroupLocalService.setUserUserGroups(user.getUserId(), userGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_16 $$ sb.append(StringPool.EQUAL)[ CD ]
Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()-->Line_47 $$ addUserGroupsNotAddedByLDAPImport(user.getUserId(), newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_34 $$ String userMappingsGroup = userMappings.getProperty("group")[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_9 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_13 $$ sb.append(groupSearchFilter)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_5 $$ LDAPServerConfiguration ldapServerConfiguration = _ldapServerConfigurationProvider.getConfiguration(companyId, ldapServerId)[ CD ]
Line_50 $$ for (UserGroup oldUserGroup : oldUserGroups) -->Line_51 $$ oldUserGroupIds.add(oldUserGroup.getUserGroupId())[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_14 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)[ FD ]
Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)-->Line_43 $$ String fullGroupDN = (String) userGroupAttribute.get(i)[ FD ]
Line_42 $$ for (int i = 0; i < userGroupAttribute.size(); i++) -->Line_43 $$ String fullGroupDN = (String) userGroupAttribute.get(i)[ CD ]
Line_34 $$ String userMappingsGroup = userMappings.getProperty("group")-->Line_35 $$ if (Validator.isNull(userMappingsGroup)) [ FD ]
Line_23 $$ while (cookie != null) -->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ CD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_21 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_22 $$ byte[] cookie = new byte[0][ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_3 $$ String groupMappingsUser = groupMappings.getProperty("user")[ CD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_7 $$ String baseDN = ldapServerConfiguration.baseDN()[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) [ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_29 $$ String fullGroupDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, searchResult)[ FD ]
Line_48 $$ Set<Long> oldUserGroupIds = new LinkedHashSet()-->Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) [ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_9 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_49 $$ List<UserGroup> oldUserGroups = _userGroupLocalService.getUserUserGroups(user.getUserId())[ FD ]
Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_47 $$ addUserGroupsNotAddedByLDAPImport(user.getUserId(), newUserGroupIds)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_49 $$ List<UserGroup> oldUserGroups = _userGroupLocalService.getUserUserGroups(user.getUserId())[ CD ]
Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()-->Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) [ FD ]
Line_42 $$ for (int i = 0; i < userGroupAttribute.size(); i++) -->Line_43 $$ String fullGroupDN = (String) userGroupAttribute.get(i)[ FD ]
Line_7 $$ String baseDN = ldapServerConfiguration.baseDN()-->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_13 $$ sb.append(groupSearchFilter)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_18 $$ String fullUserDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, binding)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_17 $$ Binding binding = _portalLDAP.getUser(ldapServerId, companyId, user.getScreenName(), user.getEmailAddress())[ CD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_8 $$ StringBundler sb = new StringBundler(9)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()[ CD ]
Line_17 $$ Binding binding = _portalLDAP.getUser(ldapServerId, companyId, user.getScreenName(), user.getEmailAddress())-->Line_18 $$ String fullUserDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, binding)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_47 $$ addUserGroupsNotAddedByLDAPImport(user.getUserId(), newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)[ CD ]
Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) -->Line_55 $$ _userGroupLocalService.setUserUserGroups(user.getUserId(), userGroupIds)[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_15 $$ sb.append(groupMappingsUser)[ FD ]
Line_22 $$ byte[] cookie = new byte[0]-->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_17 $$ Binding binding = _portalLDAP.getUser(ldapServerId, companyId, user.getScreenName(), user.getEmailAddress())[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_23 $$ while (cookie != null) [ CD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_14 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_11 $$ String groupSearchFilter = ldapServerConfiguration.groupSearchFilter()[ CD ]
Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) [ FD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_10 $$ sb.append(StringPool.AMPERSAND)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_12 $$ LDAPUtil.validateFilter(groupSearchFilter, "LDAPServerConfiguration.groupSearchFilter")[ CD ]
Line_23 $$ while (cookie != null) -->Line_24 $$ List<SearchResult> searchResults = new ArrayList()[ CD ]
Line_18 $$ String fullUserDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, binding)-->Line_19 $$ sb.append(escapeValue(fullUserDN))[ FD ]
Line_28 $$ for (SearchResult searchResult : searchResults) -->Line_29 $$ String fullGroupDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, searchResult)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_19 $$ sb.append(escapeValue(fullUserDN))[ FD ]
Line_4 $$ Set<Long> newUserGroupIds = new LinkedHashSet()-->Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(9)-->Line_20 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] -->Line_23 $$ while (cookie != null) [ FD ]
Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) -->Line_54 $$ long[] userGroupIds = ArrayUtil.toLongArray(newUserGroupIds)[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_3 $$ String groupMappingsUser = groupMappings.getProperty("user")[ FD ]
Line_24 $$ List<SearchResult> searchResults = new ArrayList()-->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ FD ]
Line_48 $$ Set<Long> oldUserGroupIds = new LinkedHashSet()-->Line_51 $$ oldUserGroupIds.add(oldUserGroup.getUserGroupId())[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_20 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_34 $$ String userMappingsGroup = userMappings.getProperty("group")-->Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)[ FD ]
Line_5 $$ LDAPServerConfiguration ldapServerConfiguration = _ldapServerConfigurationProvider.getConfiguration(companyId, ldapServerId)-->Line_7 $$ String baseDN = ldapServerConfiguration.baseDN()[ FD ]
Line_42 $$ for (int i = 0; i < userGroupAttribute.size(); i++) -->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ CD ]
Line_29 $$ String fullGroupDN = _portalLDAP.getNameInNamespace(ldapServerId, companyId, searchResult)-->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_5 $$ LDAPServerConfiguration ldapServerConfiguration = _ldapServerConfigurationProvider.getConfiguration(companyId, ldapServerId)-->Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) [ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_27 $$ cookie = _portalLDAP.searchLDAP(companyId, ldapContext, cookie, 0, baseDN, sb.toString(), new String[] [ FD ]
Line_30 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_53 $$ if (!oldUserGroupIds.equals(newUserGroupIds)) [ FD ]
Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_54 $$ long[] userGroupIds = ArrayUtil.toLongArray(newUserGroupIds)[ FD ]
Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) -->Line_35 $$ if (Validator.isNull(userMappingsGroup)) [ CD ]
Line_11 $$ String groupSearchFilter = ldapServerConfiguration.groupSearchFilter()-->Line_13 $$ sb.append(groupSearchFilter)[ FD ]
Line_43 $$ String fullGroupDN = (String) userGroupAttribute.get(i)-->Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_5 $$ LDAPServerConfiguration ldapServerConfiguration = _ldapServerConfigurationProvider.getConfiguration(companyId, ldapServerId)[ FD ]
Line_3 $$ String groupMappingsUser = groupMappings.getProperty("user")-->Line_6 $$ if (Validator.isNotNull(groupMappingsUser) && ldapServerConfiguration.groupSearchFilterEnabled()) [ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_48 $$ Set<Long> oldUserGroupIds = new LinkedHashSet()[ CD ]
Line_5 $$ LDAPServerConfiguration ldapServerConfiguration = _ldapServerConfigurationProvider.getConfiguration(companyId, ldapServerId)-->Line_11 $$ String groupSearchFilter = ldapServerConfiguration.groupSearchFilter()[ FD ]
Line_39 $$ if (userGroupAttribute == null) -->Line_40 $$ return[ CD ]
Line_23 $$ while (cookie != null) -->Line_25 $$ String groupMappingsGroupName = GetterUtil.getString(groupMappings.getProperty("groupName"))[ CD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_25 $$ String groupMappingsGroupName = GetterUtil.getString(groupMappings.getProperty("groupName"))[ FD ]
Line_2 $$ protected void importGroups(long ldapServerId, long companyId, LdapContext ldapContext, Attributes attributes, User user, Properties userMappings, Properties groupMappings) throws Exception -->Line_34 $$ String userMappingsGroup = userMappings.getProperty("group")[ FD ]
Line_38 $$ Attribute userGroupAttribute = attributes.get(userMappingsGroup)-->Line_39 $$ if (userGroupAttribute == null) [ FD ]
Line_44 $$ newUserGroupIds = importGroup(ldapServerId, companyId, ldapContext, fullGroupDN, user, groupMappings, newUserGroupIds)-->Line_47 $$ addUserGroupsNotAddedByLDAPImport(user.getUserId(), newUserGroupIds)[ FD ]
Line_3 $$ String groupMappingsUser = groupMappings.getProperty("user")-->Line_15 $$ sb.append(groupMappingsUser)[ FD ]
Line_11 $$ String groupSearchFilter = ldapServerConfiguration.groupSearchFilter()-->Line_12 $$ LDAPUtil.validateFilter(groupSearchFilter, "LDAPServerConfiguration.groupSearchFilter")[ FD ]
