Line_5 $$ AbstractPlatformTransactionManager abstractPlatformTransactionManager = (AbstractPlatformTransactionManager) clazz.newInstance()-->Line_13 $$ if (abstractPlatformTransactionManager instanceof HibernateTransactionManager) [ FD ]
Line_8 $$ while (enu.hasMoreElements()) -->Line_9 $$ String key = enu.nextElement()[ CD ]
Line_6 $$ Properties properties = PropsUtil.getProperties("transaction.manager.property.", true)-->Line_10 $$ String value = properties.getProperty(key)[ FD ]
Line_6 $$ Properties properties = PropsUtil.getProperties("transaction.manager.property.", true)-->Line_7 $$ Enumeration<String> enu = (Enumeration<String>) properties.propertyNames()[ FD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_4 $$ Class<?> clazz = classLoader.loadClass(PropsValues.TRANSACTION_MANAGER_IMPL)[ CD ]
Line_13 $$ if (abstractPlatformTransactionManager instanceof HibernateTransactionManager) -->Line_14 $$ HibernateTransactionManager hibernateTransactionManager = (HibernateTransactionManager) abstractPlatformTransactionManager[ CD ]
Line_5 $$ AbstractPlatformTransactionManager abstractPlatformTransactionManager = (AbstractPlatformTransactionManager) clazz.newInstance()-->Line_11 $$ BeanUtil.setProperty(abstractPlatformTransactionManager, key, value)[ FD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_6 $$ Properties properties = PropsUtil.getProperties("transaction.manager.property.", true)[ CD ]
Line_14 $$ HibernateTransactionManager hibernateTransactionManager = (HibernateTransactionManager) abstractPlatformTransactionManager-->Line_16 $$ hibernateTransactionManager.setSessionFactory(sessionFactory)[ FD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_8 $$ while (enu.hasMoreElements()) [ CD ]
Line_18 $$ if (_log.isDebugEnabled()) -->Line_19 $$ _log.debug("Created transaction manager " + abstractPlatformTransactionManager.getClass().getName())[ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_16 $$ hibernateTransactionManager.setSessionFactory(sessionFactory)[ FD ]
Line_10 $$ String value = properties.getProperty(key)-->Line_11 $$ BeanUtil.setProperty(abstractPlatformTransactionManager, key, value)[ FD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_7 $$ Enumeration<String> enu = (Enumeration<String>) properties.propertyNames()[ CD ]
Line_14 $$ HibernateTransactionManager hibernateTransactionManager = (HibernateTransactionManager) abstractPlatformTransactionManager-->Line_15 $$ hibernateTransactionManager.setDataSource(dataSource)[ FD ]
Line_8 $$ while (enu.hasMoreElements()) -->Line_10 $$ String value = properties.getProperty(key)[ CD ]
Line_7 $$ Enumeration<String> enu = (Enumeration<String>) properties.propertyNames()-->Line_9 $$ String key = enu.nextElement()[ FD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_18 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_23 $$ return abstractPlatformTransactionManager[ CD ]
Line_5 $$ AbstractPlatformTransactionManager abstractPlatformTransactionManager = (AbstractPlatformTransactionManager) clazz.newInstance()-->Line_19 $$ _log.debug("Created transaction manager " + abstractPlatformTransactionManager.getClass().getName())[ FD ]
Line_7 $$ Enumeration<String> enu = (Enumeration<String>) properties.propertyNames()-->Line_8 $$ while (enu.hasMoreElements()) [ FD ]
Line_3 $$ ClassLoader classLoader = ClassLoaderUtil.getPortalClassLoader()-->Line_4 $$ Class<?> clazz = classLoader.loadClass(PropsValues.TRANSACTION_MANAGER_IMPL)[ FD ]
Line_8 $$ while (enu.hasMoreElements()) -->Line_11 $$ BeanUtil.setProperty(abstractPlatformTransactionManager, key, value)[ CD ]
Line_18 $$ if (_log.isDebugEnabled()) -->Line_21 $$ sortedProperties.list(System.out)[ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_13 $$ if (abstractPlatformTransactionManager instanceof HibernateTransactionManager) [ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_5 $$ AbstractPlatformTransactionManager abstractPlatformTransactionManager = (AbstractPlatformTransactionManager) clazz.newInstance()[ CD ]
Line_18 $$ if (_log.isDebugEnabled()) -->Line_20 $$ SortedProperties sortedProperties = new SortedProperties(properties)[ CD ]
Line_13 $$ if (abstractPlatformTransactionManager instanceof HibernateTransactionManager) -->Line_15 $$ hibernateTransactionManager.setDataSource(dataSource)[ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_15 $$ hibernateTransactionManager.setDataSource(dataSource)[ FD ]
Line_9 $$ String key = enu.nextElement()-->Line_10 $$ String value = properties.getProperty(key)[ FD ]
Line_4 $$ Class<?> clazz = classLoader.loadClass(PropsValues.TRANSACTION_MANAGER_IMPL)-->Line_5 $$ AbstractPlatformTransactionManager abstractPlatformTransactionManager = (AbstractPlatformTransactionManager) clazz.newInstance()[ FD ]
Line_13 $$ if (abstractPlatformTransactionManager instanceof HibernateTransactionManager) -->Line_16 $$ hibernateTransactionManager.setSessionFactory(sessionFactory)[ CD ]
Line_2 $$ public static AbstractPlatformTransactionManager createTransactionManager(DataSource dataSource, SessionFactory sessionFactory) throws Exception -->Line_3 $$ ClassLoader classLoader = ClassLoaderUtil.getPortalClassLoader()[ CD ]
Line_9 $$ String key = enu.nextElement()-->Line_11 $$ BeanUtil.setProperty(abstractPlatformTransactionManager, key, value)[ FD ]
Line_20 $$ SortedProperties sortedProperties = new SortedProperties(properties)-->Line_21 $$ sortedProperties.list(System.out)[ FD ]
