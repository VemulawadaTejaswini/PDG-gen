Line_23 $$ Properties props = pu1.getProperties()-->Line_26 $$ assertEquals("bar", props.getProperty("foo"))[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_34 $$ assertEquals("order2.xml", pu2.getMappingFileNames().get(0))[ FD ]
Line_7 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_9 $$ dataSources.put("jdbc/MyDB", ds)[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_15 $$ assertEquals("pu1", pu1.getPersistenceUnitName())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_19 $$ assertEquals(1, pu1.getJarFileUrls().size())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_20 $$ assertEquals(new ClassPathResource("order.jar").getURL(), pu1.getJarFileUrls().get(0))[ FD ]
Line_23 $$ Properties props = pu1.getProperties()-->Line_24 $$ assertEquals(2, props.keySet().size())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_21 $$ assertFalse(pu1.excludeUnlistedClasses())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_17 $$ assertEquals(1, pu1.getMappingFileNames().size())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_28 $$ assertSame(ds, pu1.getJtaDataSource())[ FD ]
Line_11 $$ PersistenceUnitReader reader = new PersistenceUnitReader(new PathMatchingResourcePatternResolver(), dataSourceLookup)-->Line_12 $$ PersistenceUnitInfo[] info = reader.readPersistenceUnitInfos(resource)[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_41 $$ assertTrue("Exclude unlisted should be true when no value.", pu2.excludeUnlistedClasses())[ FD ]
Line_7 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_8 $$ dataSources.put("jdbc/MyPartDB", ds)[ FD ]
Line_5 $$ String resource = "/org/springframework/orm/jpa/persistence-complex.xml"-->Line_12 $$ PersistenceUnitInfo[] info = reader.readPersistenceUnitInfos(resource)[ FD ]
Line_23 $$ Properties props = pu1.getProperties()-->Line_25 $$ assertEquals("on", props.getProperty("com.acme.persistence.sql-logging"))[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_16 $$ assertEquals("com.acme.AcmePersistence", pu1.getPersistenceProviderClassName())[ FD ]
Line_4 $$ DataSource ds = new DriverManagerDataSource()-->Line_40 $$ assertEquals(ds, pu2.getNonJtaDataSource())[ FD ]
Line_4 $$ DataSource ds = new DriverManagerDataSource()-->Line_9 $$ dataSources.put("jdbc/MyDB", ds)[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_27 $$ assertNull(pu1.getNonJtaDataSource())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_22 $$ assertSame(PersistenceUnitTransactionType.RESOURCE_LOCAL, pu1.getTransactionType())[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_40 $$ assertEquals(ds, pu2.getNonJtaDataSource())[ FD ]
Line_6 $$ MapDataSourceLookup dataSourceLookup = new MapDataSourceLookup()-->Line_10 $$ dataSourceLookup.setDataSources(dataSources)[ FD ]
Line_4 $$ DataSource ds = new DriverManagerDataSource()-->Line_28 $$ assertSame(ds, pu1.getJtaDataSource())[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_23 $$ Properties props = pu1.getProperties()[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_18 $$ assertEquals("ormap2.xml", pu1.getMappingFileNames().get(0))[ FD ]
Line_14 $$ PersistenceUnitInfo pu1 = info[0]-->Line_29 $$ assertFalse("Exclude unlisted should default false in 1.0.", pu1.excludeUnlistedClasses())[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_31 $$ assertSame(PersistenceUnitTransactionType.JTA, pu2.getTransactionType())[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_39 $$ assertNull(pu2.getJtaDataSource())[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_32 $$ assertEquals("com.acme.AcmePersistence", pu2.getPersistenceProviderClassName())[ FD ]
Line_4 $$ DataSource ds = new DriverManagerDataSource()-->Line_8 $$ dataSources.put("jdbc/MyPartDB", ds)[ FD ]
Line_7 $$ Map<String, DataSource> dataSources = new HashMap<String, DataSource>()-->Line_10 $$ dataSourceLookup.setDataSources(dataSources)[ FD ]
Line_30 $$ PersistenceUnitInfo pu2 = info[1]-->Line_33 $$ assertEquals(1, pu2.getMappingFileNames().size())[ FD ]
