Line_9 $$ String processedKey = key-->Line_24 $$ analyzer.setProperty(processedKey, value)[ FD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) [ CD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_24 $$ analyzer.setProperty(processedKey, value)[ CD ]
Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) -->Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))[ CD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_5 $$ Enumeration<Object> keys = properties.keys()[ CD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_3 $$ String bundleSymbolicName = analyzer.getProperty(Constants.BUNDLE_SYMBOLICNAME)[ FD ]
Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) -->Line_11 $$ String filterString = StringPool.OPEN_BRACKET + bundleSymbolicName + StringPool.CLOSE_BRACKET[ CD ]
Line_20 $$ if (processedKey.equals(Constants.IMPORT_PACKAGE)) -->Line_21 $$ Collections.addAll(_importPackageNames, StringUtil.split(value))[ CD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_8 $$ String value = properties.getProperty(key)[ CD ]
Line_5 $$ Enumeration<Object> keys = properties.keys()-->Line_6 $$ while (keys.hasMoreElements()) [ FD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_17 $$ if (Validator.isNotNull(value)) [ CD ]
Line_8 $$ String value = properties.getProperty(key)-->Line_21 $$ Collections.addAll(_importPackageNames, StringUtil.split(value))[ FD ]
Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))-->Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) [ FD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_4 $$ Properties properties = PropsUtil.getProperties(PropsKeys.MODULE_FRAMEWORK_WEB_GENERATOR_HEADERS, true)[ CD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_7 $$ String key = (String) keys.nextElement()[ CD ]
Line_9 $$ String processedKey = key-->Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))[ FD ]
Line_4 $$ Properties properties = PropsUtil.getProperties(PropsKeys.MODULE_FRAMEWORK_WEB_GENERATOR_HEADERS, true)-->Line_5 $$ Enumeration<Object> keys = properties.keys()[ FD ]
Line_9 $$ String processedKey = key-->Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) [ FD ]
Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))-->Line_20 $$ if (processedKey.equals(Constants.IMPORT_PACKAGE)) [ FD ]
Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))-->Line_12 $$ if (!processedKey.endsWith(filterString)) [ FD ]
Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))-->Line_18 $$ if (processedKey.equals(Constants.EXPORT_PACKAGE)) [ FD ]
Line_17 $$ if (Validator.isNotNull(value)) -->Line_18 $$ if (processedKey.equals(Constants.EXPORT_PACKAGE)) [ CD ]
Line_8 $$ String value = properties.getProperty(key)-->Line_24 $$ analyzer.setProperty(processedKey, value)[ FD ]
Line_6 $$ while (keys.hasMoreElements()) -->Line_9 $$ String processedKey = key[ CD ]
Line_10 $$ if (processedKey.endsWith(StringPool.CLOSE_BRACKET)) -->Line_12 $$ if (!processedKey.endsWith(filterString)) [ CD ]
Line_8 $$ String value = properties.getProperty(key)-->Line_19 $$ Collections.addAll(_exportPackageNames, StringUtil.split(value))[ FD ]
Line_9 $$ String processedKey = key-->Line_20 $$ if (processedKey.equals(Constants.IMPORT_PACKAGE)) [ FD ]
Line_18 $$ if (processedKey.equals(Constants.EXPORT_PACKAGE)) -->Line_20 $$ if (processedKey.equals(Constants.IMPORT_PACKAGE)) [ CD ]
Line_8 $$ String value = properties.getProperty(key)-->Line_17 $$ if (Validator.isNotNull(value)) [ FD ]
Line_9 $$ String processedKey = key-->Line_18 $$ if (processedKey.equals(Constants.EXPORT_PACKAGE)) [ FD ]
Line_5 $$ Enumeration<Object> keys = properties.keys()-->Line_7 $$ String key = (String) keys.nextElement()[ FD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_3 $$ String bundleSymbolicName = analyzer.getProperty(Constants.BUNDLE_SYMBOLICNAME)[ CD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_6 $$ while (keys.hasMoreElements()) [ CD ]
Line_15 $$ processedKey = processedKey.substring(0, processedKey.indexOf(StringPool.OPEN_BRACKET))-->Line_24 $$ analyzer.setProperty(processedKey, value)[ FD ]
Line_4 $$ Properties properties = PropsUtil.getProperties(PropsKeys.MODULE_FRAMEWORK_WEB_GENERATOR_HEADERS, true)-->Line_8 $$ String value = properties.getProperty(key)[ FD ]
Line_18 $$ if (processedKey.equals(Constants.EXPORT_PACKAGE)) -->Line_19 $$ Collections.addAll(_exportPackageNames, StringUtil.split(value))[ CD ]
Line_9 $$ String processedKey = key-->Line_12 $$ if (!processedKey.endsWith(filterString)) [ FD ]
Line_2 $$ protected void processExtraHeaders(Analyzer analyzer) -->Line_24 $$ analyzer.setProperty(processedKey, value)[ FD ]
Line_7 $$ String key = (String) keys.nextElement()-->Line_8 $$ String value = properties.getProperty(key)[ FD ]
Line_11 $$ String filterString = StringPool.OPEN_BRACKET + bundleSymbolicName + StringPool.CLOSE_BRACKET-->Line_12 $$ if (!processedKey.endsWith(filterString)) [ FD ]
