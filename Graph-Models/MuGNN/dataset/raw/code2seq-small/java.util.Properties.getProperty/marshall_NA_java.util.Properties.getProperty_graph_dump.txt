Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_3 $$ final StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)[ CD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_7 $$ final Properties params = jobExecution.getJobParameters()[ CD ]
Line_7 $$ final Properties params = jobExecution.getJobParameters()-->Line_8 $$ for (String key : params.stringPropertyNames()) [ FD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_9 $$ generator.write(key, params.getProperty(key))[ FD ]
Line_8 $$ for (String key : params.stringPropertyNames()) -->Line_9 $$ generator.write(key, params.getProperty(key))[ FD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_12 $$ generator.writeEnd()[ CD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_13 $$ generator.close()[ CD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_14 $$ return writer.toString()[ CD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_6 $$ generator.writeStartObject(PROPERTIES)[ FD ]
Line_3 $$ final StringWriter writer = new StringWriter()-->Line_14 $$ return writer.toString()[ FD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_5 $$ generator.writeStartObject().write(ID, jobExecution.getExecutionId()).write(NAME, jobExecution.getJobName()).write(STATUS, jobExecution.getBatchStatus().toString()).write(EXIT_STATUS, jobExecution.getExitStatus()).write(CREATE_TIME, jobExecution.getCreateTime().getTime()).write(END_TIME, jobExecution.getEndTime().getTime()).write(LAST_UPDATE_TIME, jobExecution.getLastUpdatedTime().getTime()).write(START_TIME, jobExecution.getStartTime().getTime())[ CD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_7 $$ final Properties params = jobExecution.getJobParameters()[ FD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_6 $$ generator.writeStartObject(PROPERTIES)[ CD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_13 $$ generator.close()[ FD ]
Line_7 $$ final Properties params = jobExecution.getJobParameters()-->Line_9 $$ generator.write(key, params.getProperty(key))[ FD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_5 $$ generator.writeStartObject().write(ID, jobExecution.getExecutionId()).write(NAME, jobExecution.getJobName()).write(STATUS, jobExecution.getBatchStatus().toString()).write(EXIT_STATUS, jobExecution.getExitStatus()).write(CREATE_TIME, jobExecution.getCreateTime().getTime()).write(END_TIME, jobExecution.getEndTime().getTime()).write(LAST_UPDATE_TIME, jobExecution.getLastUpdatedTime().getTime()).write(START_TIME, jobExecution.getStartTime().getTime())[ FD ]
Line_2 $$ public static String marshall(final JobExecution jobExecution) -->Line_11 $$ generator.writeEnd()[ CD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_12 $$ generator.writeEnd()[ FD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_11 $$ generator.writeEnd()[ FD ]
Line_3 $$ final StringWriter writer = new StringWriter()-->Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)[ FD ]
Line_4 $$ final JsonGenerator generator = Json.createGenerator(writer)-->Line_5 $$ generator.writeStartObject().write(ID, jobExecution.getExecutionId()).write(NAME, jobExecution.getJobName()).write(STATUS, jobExecution.getBatchStatus().toString()).write(EXIT_STATUS, jobExecution.getExitStatus()).write(CREATE_TIME, jobExecution.getCreateTime().getTime()).write(END_TIME, jobExecution.getEndTime().getTime()).write(LAST_UPDATE_TIME, jobExecution.getLastUpdatedTime().getTime()).write(START_TIME, jobExecution.getStartTime().getTime())[ FD ]
