Line_143 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) -->Line_145 $$ FullNameValidator fullNameValidator = (FullNameValidator) newInstance(portletClassLoader, FullNameValidator.class, fullNameValidatorClassName)[ CD ]
Line_69 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) -->Line_70 $$ StoreFactory storeFactory = StoreFactory.getInstance()[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_117 $$ String phoneNumberFormatClassName = portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_116 $$ if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) [ FD ]
Line_69 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) -->Line_72 $$ storeFactory.setStore(storeClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_153 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_148 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) [ FD ]
Line_149 $$ String screenNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR)-->Line_151 $$ registerService(servletContextName, screenNameGeneratorClassName, ScreenNameGenerator.class, screenNameGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_112 $$ String toolkitClassName = portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT)[ FD ]
Line_159 $$ for (String liferayFilterClassName : liferayFilterClassNames) -->Line_160 $$ if (!portalProperties.containsKey(liferayFilterClassName)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_172 $$ ReleaseLocalServiceUtil.updateRelease(servletContextName, upgradeProcesses, unfilteredPortalProperties)[ FD ]
Line_171 $$ List<UpgradeProcess> upgradeProcesses = UpgradeProcessUtil.initUpgradeProcesses(portletClassLoader, upgradeProcessClassNames)-->Line_172 $$ ReleaseLocalServiceUtil.updateRelease(servletContextName, upgradeProcesses, unfilteredPortalProperties)[ FD ]
Line_91 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) -->Line_92 $$ String organizationMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)[ CD ]
Line_154 $$ String screenNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)-->Line_155 $$ ScreenNameValidator screenNameValidator = (ScreenNameValidator) newInstance(portletClassLoader, ScreenNameValidator.class, screenNameValidatorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_24 $$ registerService(servletContextName, authTokenClassName, AuthToken.class, authToken)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_129 $$ String emailAddressGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)[ FD ]
Line_123 $$ for (String sanitizerClassName : sanitizerClassNames) -->Line_124 $$ Sanitizer sanitizer = (Sanitizer) newInstance(portletClassLoader, Sanitizer.class, sanitizerClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_136 $$ registerService(servletContextName, emailAddressValidatorClassName, EmailAddressValidator.class, emailAddressValidator)[ FD ]
Line_148 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) -->Line_150 $$ ScreenNameGenerator screenNameGenerator = (ScreenNameGenerator) newInstance(portletClassLoader, ScreenNameGenerator.class, screenNameGeneratorClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_49 $$ DLProcessor dlProcessor = (DLProcessor) InstanceFactory.newInstance(portletClassLoader, dlProcessorClassName)[ FD ]
Line_30 $$ Captcha currentCaptcha = CaptchaUtil.getCaptcha()-->Line_31 $$ if (currentCaptcha instanceof DoPrivilegedBean) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_111 $$ if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) [ FD ]
Line_123 $$ for (String sanitizerClassName : sanitizerClassNames) -->Line_125 $$ registerService(servletContextName, sanitizerClassName, Sanitizer.class, sanitizer)[ FD ]
Line_48 $$ for (String dlProcessorClassName : dlProcessorClassNames) -->Line_49 $$ DLProcessor dlProcessor = (DLProcessor) InstanceFactory.newInstance(portletClassLoader, dlProcessorClassName)[ FD ]
Line_128 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) -->Line_129 $$ String emailAddressGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)[ CD ]
Line_76 $$ AttributesTransformer attributesTransformer = (AttributesTransformer) newInstance(portletClassLoader, AttributesTransformer.class, attributesTransformerClassName)-->Line_77 $$ registerService(servletContextName, attributesTransformerClassName, AttributesTransformer.class, attributesTransformer)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_79 $$ if (portalProperties.containsKey(LOCK_LISTENERS)) [ FD ]
Line_86 $$ if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) -->Line_88 $$ com.liferay.mail.util.Hook mailHook = (com.liferay.mail.util.Hook) newInstance(portletClassLoader, com.liferay.mail.util.Hook.class, mailHookClassName)[ CD ]
Line_133 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) -->Line_134 $$ String emailAddressValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_138 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_114 $$ registerService(servletContextName, toolkitClassName, Toolkit.class, toolkit)[ FD ]
Line_133 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) -->Line_135 $$ EmailAddressValidator emailAddressValidator = (EmailAddressValidator) newInstance(portletClassLoader, EmailAddressValidator.class, emailAddressValidatorClassName)[ CD ]
Line_111 $$ if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) -->Line_112 $$ String toolkitClassName = portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_135 $$ EmailAddressValidator emailAddressValidator = (EmailAddressValidator) newInstance(portletClassLoader, EmailAddressValidator.class, emailAddressValidatorClassName)[ FD ]
Line_148 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) -->Line_149 $$ String screenNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_148 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) [ CD ]
Line_9 $$ for (String key : _PROPS_VALUES_OBSOLETE) -->Line_10 $$ if (_log.isInfoEnabled() && portalProperties.contains(key)) [ FD ]
Line_54 $$ if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) -->Line_56 $$ DLRepositoryContainer dlRepositoryContainer = new DLRepositoryContainer()[ CD ]
Line_46 $$ DLFileEntryProcessorContainer dlFileEntryProcessorContainer = new DLFileEntryProcessorContainer()-->Line_47 $$ _dlFileEntryProcessorContainerMap.put(servletContextName, dlFileEntryProcessorContainer)[ FD ]
Line_86 $$ if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) -->Line_89 $$ registerService(servletContextName, mailHookClassName, com.liferay.mail.util.Hook.class, mailHook)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_14 $$ resetPortalProperties(servletContextName, portalProperties, true)[ CD ]
Line_129 $$ String emailAddressGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)-->Line_130 $$ EmailAddressGenerator emailAddressGenerator = (EmailAddressGenerator) newInstance(portletClassLoader, EmailAddressGenerator.class, emailAddressGeneratorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_155 $$ ScreenNameValidator screenNameValidator = (ScreenNameValidator) newInstance(portletClassLoader, ScreenNameValidator.class, screenNameValidatorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_156 $$ registerService(servletContextName, screenNameValidatorClassName, ScreenNameValidator.class, screenNameValidator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_3 $$ PropsUtil.addProperties(portalProperties)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_65 $$ AntivirusScanner antivirusScanner = (AntivirusScanner) newInstance(portletClassLoader, AntivirusScanner.class, antivirusScannerClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_103 $$ SiteMembershipPolicy siteMembershipPolicy = (SiteMembershipPolicy) newInstance(portletClassLoader, SiteMembershipPolicy.class, siteMembershipPolicyClassName)[ FD ]
Line_96 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) -->Line_97 $$ String roleMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES)[ CD ]
Line_169 $$ if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) -->Line_171 $$ List<UpgradeProcess> upgradeProcesses = UpgradeProcessUtil.initUpgradeProcesses(portletClassLoader, upgradeProcessClassNames)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_41 $$ ControlPanelEntry controlPanelEntry = (ControlPanelEntry) newInstance(portletClassLoader, ControlPanelEntry.class, controlPanelEntryClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_124 $$ Sanitizer sanitizer = (Sanitizer) newInstance(portletClassLoader, Sanitizer.class, sanitizerClassName)[ FD ]
Line_116 $$ if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) -->Line_118 $$ PhoneNumberFormat phoneNumberFormat = (PhoneNumberFormat) newInstance(portletClassLoader, PhoneNumberFormat.class, phoneNumberFormatClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_151 $$ registerService(servletContextName, screenNameGeneratorClassName, ScreenNameGenerator.class, screenNameGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_5 $$ _log.debug("Portlet locales " + portalProperties.getProperty(LOCALES))[ FD ]
Line_75 $$ String attributesTransformerClassName = portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)-->Line_77 $$ registerService(servletContextName, attributesTransformerClassName, AttributesTransformer.class, attributesTransformer)[ FD ]
Line_138 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) -->Line_140 $$ FullNameGenerator fullNameGenerator = (FullNameGenerator) newInstance(portletClassLoader, FullNameGenerator.class, fullNameGeneratorClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_19 $$ initAuthTokenWhiteListActions(servletContextName, portalProperties)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_71 $$ String storeClassName = portalProperties.getProperty(PropsKeys.DL_STORE_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_74 $$ if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_106 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) [ CD ]
Line_145 $$ FullNameValidator fullNameValidator = (FullNameValidator) newInstance(portletClassLoader, FullNameValidator.class, fullNameValidatorClassName)-->Line_146 $$ registerService(servletContextName, fullNameValidatorClassName, FullNameValidator.class, fullNameValidator)[ FD ]
Line_106 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) -->Line_108 $$ UserGroupMembershipPolicy userGroupMembershipPolicy = (UserGroupMembershipPolicy) newInstance(portletClassLoader, UserGroupMembershipPolicy.class, userGroupMembershipPolicyClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_69 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) [ FD ]
Line_144 $$ String fullNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR)-->Line_145 $$ FullNameValidator fullNameValidator = (FullNameValidator) newInstance(portletClassLoader, FullNameValidator.class, fullNameValidatorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_10 $$ if (_log.isInfoEnabled() && portalProperties.contains(key)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_128 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_15 $$ if (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) [ CD ]
Line_138 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) -->Line_141 $$ registerService(servletContextName, fullNameGeneratorClassName, FullNameGenerator.class, fullNameGenerator)[ CD ]
Line_41 $$ ControlPanelEntry controlPanelEntry = (ControlPanelEntry) newInstance(portletClassLoader, ControlPanelEntry.class, controlPanelEntryClassName)-->Line_42 $$ registerService(servletContextName, controlPanelEntryClassName, ControlPanelEntry.class, controlPanelEntry)[ FD ]
Line_92 $$ String organizationMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)-->Line_93 $$ OrganizationMembershipPolicy organizationMembershipPolicy = (OrganizationMembershipPolicy) newInstance(portletClassLoader, OrganizationMembershipPolicy.class, organizationMembershipPolicyClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_96 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_121 $$ if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_134 $$ String emailAddressValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_138 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) [ FD ]
Line_4 $$ if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) -->Line_6 $$ _log.debug("Merged locales " + PropsUtil.get(LOCALES))[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_97 $$ String roleMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES)[ FD ]
Line_169 $$ if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) -->Line_170 $$ String[] upgradeProcessClassNames = StringUtil.split(unfilteredPortalProperties.getProperty(PropsKeys.UPGRADE_PROCESSES))[ CD ]
Line_113 $$ Toolkit toolkit = (Toolkit) newInstance(portletClassLoader, Toolkit.class, toolkitClassName)-->Line_114 $$ registerService(servletContextName, toolkitClassName, Toolkit.class, toolkit)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_143 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) [ CD ]
Line_153 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) -->Line_154 $$ String screenNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_89 $$ registerService(servletContextName, mailHookClassName, com.liferay.mail.util.Hook.class, mailHook)[ FD ]
Line_124 $$ Sanitizer sanitizer = (Sanitizer) newInstance(portletClassLoader, Sanitizer.class, sanitizerClassName)-->Line_125 $$ registerService(servletContextName, sanitizerClassName, Sanitizer.class, sanitizer)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_125 $$ registerService(servletContextName, sanitizerClassName, Sanitizer.class, sanitizer)[ FD ]
Line_153 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) -->Line_155 $$ ScreenNameValidator screenNameValidator = (ScreenNameValidator) newInstance(portletClassLoader, ScreenNameValidator.class, screenNameValidatorClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_101 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) [ CD ]
Line_112 $$ String toolkitClassName = portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT)-->Line_113 $$ Toolkit toolkit = (Toolkit) newInstance(portletClassLoader, Toolkit.class, toolkitClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_121 $$ if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) [ CD ]
Line_58 $$ for (String dlRepositoryClassName : dlRepositoryClassNames) -->Line_60 $$ dlRepositoryContainer.registerRepositoryFactory(dlRepositoryClassName, externalRepositoryFactory)[ FD ]
Line_101 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) -->Line_104 $$ registerService(servletContextName, siteMembershipPolicyClassName, SiteMembershipPolicy.class, siteMembershipPolicy)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_140 $$ FullNameGenerator fullNameGenerator = (FullNameGenerator) newInstance(portletClassLoader, FullNameGenerator.class, fullNameGeneratorClassName)[ FD ]
Line_49 $$ DLProcessor dlProcessor = (DLProcessor) InstanceFactory.newInstance(portletClassLoader, dlProcessorClassName)-->Line_50 $$ dlProcessor = (DLProcessor) newInstance(portletClassLoader, ReflectionUtil.getInterfaces(dlProcessor, portletClassLoader), dlProcessorClassName)[ FD ]
Line_18 $$ if (containsKey(portalProperties, AUTH_TOKEN_IGNORE_ACTIONS)) -->Line_19 $$ initAuthTokenWhiteListActions(servletContextName, portalProperties)[ CD ]
Line_81 $$ for (String lockListenerClassName : lockListenerClassNames) -->Line_83 $$ registerService(servletContextName, lockListenerClassName, LockListener.class, lockListener)[ FD ]
Line_134 $$ String emailAddressValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)-->Line_135 $$ EmailAddressValidator emailAddressValidator = (EmailAddressValidator) newInstance(portletClassLoader, EmailAddressValidator.class, emailAddressValidatorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_39 $$ if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_54 $$ if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) [ CD ]
Line_135 $$ EmailAddressValidator emailAddressValidator = (EmailAddressValidator) newInstance(portletClassLoader, EmailAddressValidator.class, emailAddressValidatorClassName)-->Line_136 $$ registerService(servletContextName, emailAddressValidatorClassName, EmailAddressValidator.class, emailAddressValidator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_130 $$ EmailAddressGenerator emailAddressGenerator = (EmailAddressGenerator) newInstance(portletClassLoader, EmailAddressGenerator.class, emailAddressGeneratorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_108 $$ UserGroupMembershipPolicy userGroupMembershipPolicy = (UserGroupMembershipPolicy) newInstance(portletClassLoader, UserGroupMembershipPolicy.class, userGroupMembershipPolicyClassName)[ FD ]
Line_117 $$ String phoneNumberFormatClassName = portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)-->Line_119 $$ registerService(servletContextName, phoneNumberFormatClassName, PhoneNumberFormat.class, phoneNumberFormat)[ FD ]
Line_103 $$ SiteMembershipPolicy siteMembershipPolicy = (SiteMembershipPolicy) newInstance(portletClassLoader, SiteMembershipPolicy.class, siteMembershipPolicyClassName)-->Line_104 $$ registerService(servletContextName, siteMembershipPolicyClassName, SiteMembershipPolicy.class, siteMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_107 $$ String userGroupMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)[ FD ]
Line_33 $$ captchaImpl = (CaptchaImpl) doPrivilegedBean.getActualBean()-->Line_37 $$ captchaImpl.setCaptcha(captcha)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_54 $$ if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_4 $$ if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) [ FD ]
Line_28 $$ Captcha captcha = (Captcha) newInstance(portletClassLoader, Captcha.class, captchaClassName)-->Line_37 $$ captchaImpl.setCaptcha(captcha)[ FD ]
Line_87 $$ String mailHookClassName = portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL)-->Line_88 $$ com.liferay.mail.util.Hook mailHook = (com.liferay.mail.util.Hook) newInstance(portletClassLoader, com.liferay.mail.util.Hook.class, mailHookClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_3 $$ PropsUtil.addProperties(portalProperties)[ FD ]
Line_112 $$ String toolkitClassName = portalProperties.getProperty(PropsKeys.PASSWORDS_TOOLKIT)-->Line_114 $$ registerService(servletContextName, toolkitClassName, Toolkit.class, toolkit)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_47 $$ _dlFileEntryProcessorContainerMap.put(servletContextName, dlFileEntryProcessorContainer)[ FD ]
Line_169 $$ if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) -->Line_172 $$ ReleaseLocalServiceUtil.updateRelease(servletContextName, upgradeProcesses, unfilteredPortalProperties)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_96 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) [ CD ]
Line_106 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) -->Line_109 $$ registerService(servletContextName, userGroupMembershipPolicyClassName, UserGroupMembershipPolicy.class, userGroupMembershipPolicy)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_145 $$ FullNameValidator fullNameValidator = (FullNameValidator) newInstance(portletClassLoader, FullNameValidator.class, fullNameValidatorClassName)[ FD ]
Line_74 $$ if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) -->Line_75 $$ String attributesTransformerClassName = portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_4 $$ if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) [ CD ]
Line_121 $$ if (portalProperties.containsKey(PropsKeys.SANITIZER_IMPL)) -->Line_122 $$ String[] sanitizerClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.SANITIZER_IMPL))[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_57 $$ _dlRepositoryContainerMap.put(servletContextName, dlRepositoryContainer)[ FD ]
Line_129 $$ String emailAddressGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)-->Line_131 $$ registerService(servletContextName, emailAddressGeneratorClassName, EmailAddressGenerator.class, emailAddressGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_160 $$ if (!portalProperties.containsKey(liferayFilterClassName)) [ FD ]
Line_71 $$ String storeClassName = portalProperties.getProperty(PropsKeys.DL_STORE_IMPL)-->Line_72 $$ storeFactory.setStore(storeClassName)[ FD ]
Line_159 $$ for (String liferayFilterClassName : liferayFilterClassNames) -->Line_163 $$ boolean filterEnabled = GetterUtil.getBoolean(portalProperties.getProperty(liferayFilterClassName))[ FD ]
Line_159 $$ for (String liferayFilterClassName : liferayFilterClassNames) -->Line_164 $$ Set<LiferayFilter> liferayFilters = LiferayFilterTracker.getLiferayFilters(liferayFilterClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_88 $$ com.liferay.mail.util.Hook mailHook = (com.liferay.mail.util.Hook) newInstance(portletClassLoader, com.liferay.mail.util.Hook.class, mailHookClassName)[ FD ]
Line_27 $$ String captchaClassName = portalProperties.getProperty(PropsKeys.CAPTCHA_ENGINE_IMPL)-->Line_28 $$ Captcha captcha = (Captcha) newInstance(portletClassLoader, Captcha.class, captchaClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_42 $$ registerService(servletContextName, controlPanelEntryClassName, ControlPanelEntry.class, controlPanelEntry)[ FD ]
Line_82 $$ LockListener lockListener = (LockListener) newInstance(portletClassLoader, LockListener.class, lockListenerClassName)-->Line_83 $$ registerService(servletContextName, lockListenerClassName, LockListener.class, lockListener)[ FD ]
Line_22 $$ String authTokenClassName = portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL)-->Line_24 $$ registerService(servletContextName, authTokenClassName, AuthToken.class, authToken)[ FD ]
Line_143 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) -->Line_144 $$ String fullNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR)[ CD ]
Line_66 $$ AntivirusScannerWrapper antivirusScannerWrapper = (AntivirusScannerWrapper) AntivirusScannerUtil.getAntivirusScanner()-->Line_67 $$ antivirusScannerWrapper.setAntivirusScanner(antivirusScanner)[ FD ]
Line_39 $$ if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) -->Line_41 $$ ControlPanelEntry controlPanelEntry = (ControlPanelEntry) newInstance(portletClassLoader, ControlPanelEntry.class, controlPanelEntryClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_82 $$ LockListener lockListener = (LockListener) newInstance(portletClassLoader, LockListener.class, lockListenerClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_69 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_153 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) [ CD ]
Line_81 $$ for (String lockListenerClassName : lockListenerClassNames) -->Line_82 $$ LockListener lockListener = (LockListener) newInstance(portletClassLoader, LockListener.class, lockListenerClassName)[ FD ]
Line_93 $$ OrganizationMembershipPolicy organizationMembershipPolicy = (OrganizationMembershipPolicy) newInstance(portletClassLoader, OrganizationMembershipPolicy.class, organizationMembershipPolicyClassName)-->Line_94 $$ registerService(servletContextName, organizationMembershipPolicyClassName, OrganizationMembershipPolicy.class, organizationMembershipPolicy)[ FD ]
Line_64 $$ String antivirusScannerClassName = portalProperties.getProperty(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)-->Line_65 $$ AntivirusScanner antivirusScanner = (AntivirusScanner) newInstance(portletClassLoader, AntivirusScanner.class, antivirusScannerClassName)[ FD ]
Line_21 $$ if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) -->Line_22 $$ String authTokenClassName = portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL)[ CD ]
Line_31 $$ if (currentCaptcha instanceof DoPrivilegedBean) -->Line_35 $$ captchaImpl = (CaptchaImpl) currentCaptcha[ CD ]
Line_102 $$ String siteMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES)-->Line_104 $$ registerService(servletContextName, siteMembershipPolicyClassName, SiteMembershipPolicy.class, siteMembershipPolicy)[ FD ]
Line_143 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) -->Line_146 $$ registerService(servletContextName, fullNameValidatorClassName, FullNameValidator.class, fullNameValidator)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_104 $$ registerService(servletContextName, siteMembershipPolicyClassName, SiteMembershipPolicy.class, siteMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_91 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) [ CD ]
Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) -->Line_67 $$ antivirusScannerWrapper.setAntivirusScanner(antivirusScanner)[ CD ]
Line_23 $$ AuthToken authToken = (AuthToken) newInstance(portletClassLoader, AuthToken.class, authTokenClassName)-->Line_24 $$ registerService(servletContextName, authTokenClassName, AuthToken.class, authToken)[ FD ]
Line_32 $$ DoPrivilegedBean doPrivilegedBean = (DoPrivilegedBean) currentCaptcha-->Line_33 $$ captchaImpl = (CaptchaImpl) doPrivilegedBean.getActualBean()[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) [ CD ]
Line_40 $$ String controlPanelEntryClassName = portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)-->Line_42 $$ registerService(servletContextName, controlPanelEntryClassName, ControlPanelEntry.class, controlPanelEntry)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_131 $$ registerService(servletContextName, emailAddressGeneratorClassName, EmailAddressGenerator.class, emailAddressGenerator)[ FD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_37 $$ captchaImpl.setCaptcha(captcha)[ CD ]
Line_15 $$ if (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) -->Line_16 $$ initAuthPublicPaths(servletContextName, portalProperties)[ CD ]
Line_69 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_IMPL)) -->Line_71 $$ String storeClassName = portalProperties.getProperty(PropsKeys.DL_STORE_IMPL)[ CD ]
Line_111 $$ if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) -->Line_114 $$ registerService(servletContextName, toolkitClassName, Toolkit.class, toolkit)[ CD ]
Line_4 $$ if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) -->Line_7 $$ _log.debug("Merged locales array length " + PropsUtil.getArray(LOCALES).length)[ CD ]
Line_138 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_GENERATOR)) -->Line_139 $$ String fullNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR)[ CD ]
Line_4 $$ if (_log.isDebugEnabled() && portalProperties.containsKey(LOCALES)) -->Line_5 $$ _log.debug("Portlet locales " + portalProperties.getProperty(LOCALES))[ CD ]
Line_29 $$ CaptchaImpl captchaImpl = null-->Line_35 $$ captchaImpl = (CaptchaImpl) currentCaptcha[ FD ]
Line_148 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_GENERATOR)) -->Line_151 $$ registerService(servletContextName, screenNameGeneratorClassName, ScreenNameGenerator.class, screenNameGenerator)[ CD ]
Line_49 $$ DLProcessor dlProcessor = (DLProcessor) InstanceFactory.newInstance(portletClassLoader, dlProcessorClassName)-->Line_51 $$ dlFileEntryProcessorContainer.registerDLProcessor(dlProcessor)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_21 $$ if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_18 $$ if (containsKey(portalProperties, AUTH_TOKEN_IGNORE_ACTIONS)) [ FD ]
Line_31 $$ if (currentCaptcha instanceof DoPrivilegedBean) -->Line_33 $$ captchaImpl = (CaptchaImpl) doPrivilegedBean.getActualBean()[ CD ]
Line_86 $$ if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) -->Line_87 $$ String mailHookClassName = portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_94 $$ registerService(servletContextName, organizationMembershipPolicyClassName, OrganizationMembershipPolicy.class, organizationMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_143 $$ if (portalProperties.containsKey(PropsKeys.USERS_FULL_NAME_VALIDATOR)) [ FD ]
Line_155 $$ ScreenNameValidator screenNameValidator = (ScreenNameValidator) newInstance(portletClassLoader, ScreenNameValidator.class, screenNameValidatorClassName)-->Line_156 $$ registerService(servletContextName, screenNameValidatorClassName, ScreenNameValidator.class, screenNameValidator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_122 $$ String[] sanitizerClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.SANITIZER_IMPL))[ FD ]
Line_108 $$ UserGroupMembershipPolicy userGroupMembershipPolicy = (UserGroupMembershipPolicy) newInstance(portletClassLoader, UserGroupMembershipPolicy.class, userGroupMembershipPolicyClassName)-->Line_109 $$ registerService(servletContextName, userGroupMembershipPolicyClassName, UserGroupMembershipPolicy.class, userGroupMembershipPolicy)[ FD ]
Line_46 $$ DLFileEntryProcessorContainer dlFileEntryProcessorContainer = new DLFileEntryProcessorContainer()-->Line_51 $$ dlFileEntryProcessorContainer.registerDLProcessor(dlProcessor)[ FD ]
Line_39 $$ if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) -->Line_42 $$ registerService(servletContextName, controlPanelEntryClassName, ControlPanelEntry.class, controlPanelEntry)[ CD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_27 $$ String captchaClassName = portalProperties.getProperty(PropsKeys.CAPTCHA_ENGINE_IMPL)[ CD ]
Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) -->Line_64 $$ String antivirusScannerClassName = portalProperties.getProperty(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)[ CD ]
Line_134 $$ String emailAddressValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)-->Line_136 $$ registerService(servletContextName, emailAddressValidatorClassName, EmailAddressValidator.class, emailAddressValidator)[ FD ]
Line_91 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) -->Line_94 $$ registerService(servletContextName, organizationMembershipPolicyClassName, OrganizationMembershipPolicy.class, organizationMembershipPolicy)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_44 $$ if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) [ CD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_29 $$ CaptchaImpl captchaImpl = null[ CD ]
Line_102 $$ String siteMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES)-->Line_103 $$ SiteMembershipPolicy siteMembershipPolicy = (SiteMembershipPolicy) newInstance(portletClassLoader, SiteMembershipPolicy.class, siteMembershipPolicyClassName)[ FD ]
Line_33 $$ captchaImpl = (CaptchaImpl) doPrivilegedBean.getActualBean()-->Line_35 $$ captchaImpl = (CaptchaImpl) currentCaptcha[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_133 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) [ CD ]
Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) -->Line_66 $$ AntivirusScannerWrapper antivirusScannerWrapper = (AntivirusScannerWrapper) AntivirusScannerUtil.getAntivirusScanner()[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_99 $$ registerService(servletContextName, roleMembershipPolicyClassName, RoleMembershipPolicy.class, roleMembershipPolicy)[ FD ]
Line_140 $$ FullNameGenerator fullNameGenerator = (FullNameGenerator) newInstance(portletClassLoader, FullNameGenerator.class, fullNameGeneratorClassName)-->Line_141 $$ registerService(servletContextName, fullNameGeneratorClassName, FullNameGenerator.class, fullNameGenerator)[ FD ]
Line_92 $$ String organizationMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)-->Line_94 $$ registerService(servletContextName, organizationMembershipPolicyClassName, OrganizationMembershipPolicy.class, organizationMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_150 $$ ScreenNameGenerator screenNameGenerator = (ScreenNameGenerator) newInstance(portletClassLoader, ScreenNameGenerator.class, screenNameGeneratorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_141 $$ registerService(servletContextName, fullNameGeneratorClassName, FullNameGenerator.class, fullNameGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_64 $$ String antivirusScannerClassName = portalProperties.getProperty(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_16 $$ initAuthPublicPaths(servletContextName, portalProperties)[ FD ]
Line_91 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) -->Line_93 $$ OrganizationMembershipPolicy organizationMembershipPolicy = (OrganizationMembershipPolicy) newInstance(portletClassLoader, OrganizationMembershipPolicy.class, organizationMembershipPolicyClassName)[ CD ]
Line_44 $$ if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) -->Line_47 $$ _dlFileEntryProcessorContainerMap.put(servletContextName, dlFileEntryProcessorContainer)[ CD ]
Line_149 $$ String screenNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR)-->Line_150 $$ ScreenNameGenerator screenNameGenerator = (ScreenNameGenerator) newInstance(portletClassLoader, ScreenNameGenerator.class, screenNameGeneratorClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_163 $$ boolean filterEnabled = GetterUtil.getBoolean(portalProperties.getProperty(liferayFilterClassName))[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_75 $$ String attributesTransformerClassName = portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_55 $$ String[] dlRepositoryClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL))[ FD ]
Line_56 $$ DLRepositoryContainer dlRepositoryContainer = new DLRepositoryContainer()-->Line_60 $$ dlRepositoryContainer.registerRepositoryFactory(dlRepositoryClassName, externalRepositoryFactory)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_91 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)) [ FD ]
Line_101 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) -->Line_103 $$ SiteMembershipPolicy siteMembershipPolicy = (SiteMembershipPolicy) newInstance(portletClassLoader, SiteMembershipPolicy.class, siteMembershipPolicyClassName)[ CD ]
Line_107 $$ String userGroupMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)-->Line_109 $$ registerService(servletContextName, userGroupMembershipPolicyClassName, UserGroupMembershipPolicy.class, userGroupMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_111 $$ if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_133 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) [ FD ]
Line_74 $$ if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) -->Line_77 $$ registerService(servletContextName, attributesTransformerClassName, AttributesTransformer.class, attributesTransformer)[ CD ]
Line_50 $$ dlProcessor = (DLProcessor) newInstance(portletClassLoader, ReflectionUtil.getInterfaces(dlProcessor, portletClassLoader), dlProcessorClassName)-->Line_51 $$ dlFileEntryProcessorContainer.registerDLProcessor(dlProcessor)[ FD ]
Line_128 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) -->Line_130 $$ EmailAddressGenerator emailAddressGenerator = (EmailAddressGenerator) newInstance(portletClassLoader, EmailAddressGenerator.class, emailAddressGeneratorClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_86 $$ if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_27 $$ String captchaClassName = portalProperties.getProperty(PropsKeys.CAPTCHA_ENGINE_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_169 $$ if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) [ CD ]
Line_118 $$ PhoneNumberFormat phoneNumberFormat = (PhoneNumberFormat) newInstance(portletClassLoader, PhoneNumberFormat.class, phoneNumberFormatClassName)-->Line_119 $$ registerService(servletContextName, phoneNumberFormatClassName, PhoneNumberFormat.class, phoneNumberFormat)[ FD ]
Line_111 $$ if (portalProperties.containsKey(PropsKeys.PASSWORDS_TOOLKIT)) -->Line_113 $$ Toolkit toolkit = (Toolkit) newInstance(portletClassLoader, Toolkit.class, toolkitClassName)[ CD ]
Line_54 $$ if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) -->Line_57 $$ _dlRepositoryContainerMap.put(servletContextName, dlRepositoryContainer)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_109 $$ registerService(servletContextName, userGroupMembershipPolicyClassName, UserGroupMembershipPolicy.class, userGroupMembershipPolicy)[ FD ]
Line_154 $$ String screenNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)-->Line_156 $$ registerService(servletContextName, screenNameValidatorClassName, ScreenNameValidator.class, screenNameValidator)[ FD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_31 $$ if (currentCaptcha instanceof DoPrivilegedBean) [ CD ]
Line_133 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_VALIDATOR)) -->Line_136 $$ registerService(servletContextName, emailAddressValidatorClassName, EmailAddressValidator.class, emailAddressValidator)[ CD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_28 $$ Captcha captcha = (Captcha) newInstance(portletClassLoader, Captcha.class, captchaClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_87 $$ String mailHookClassName = portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL)[ FD ]
Line_26 $$ if (portalProperties.containsKey(PropsKeys.CAPTCHA_ENGINE_IMPL)) -->Line_30 $$ Captcha currentCaptcha = CaptchaUtil.getCaptcha()[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) [ FD ]
Line_35 $$ captchaImpl = (CaptchaImpl) currentCaptcha-->Line_37 $$ captchaImpl.setCaptcha(captcha)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_39 $$ if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) [ FD ]
Line_63 $$ if (portalProperties.containsKey(PropsKeys.DL_STORE_ANTIVIRUS_IMPL)) -->Line_65 $$ AntivirusScanner antivirusScanner = (AntivirusScanner) newInstance(portletClassLoader, AntivirusScanner.class, antivirusScannerClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_28 $$ Captcha captcha = (Captcha) newInstance(portletClassLoader, Captcha.class, captchaClassName)[ FD ]
Line_101 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) -->Line_102 $$ String siteMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_45 $$ String[] dlProcessorClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.DL_FILE_ENTRY_PROCESSORS))[ FD ]
Line_70 $$ StoreFactory storeFactory = StoreFactory.getInstance()-->Line_72 $$ storeFactory.setStore(storeClassName)[ FD ]
Line_106 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) -->Line_107 $$ String userGroupMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)[ CD ]
Line_165 $$ for (LiferayFilter liferayFilter : liferayFilters) -->Line_166 $$ liferayFilter.setFilterEnabled(filterEnabled)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_119 $$ registerService(servletContextName, phoneNumberFormatClassName, PhoneNumberFormat.class, phoneNumberFormat)[ FD ]
Line_29 $$ CaptchaImpl captchaImpl = null-->Line_33 $$ captchaImpl = (CaptchaImpl) doPrivilegedBean.getActualBean()[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_93 $$ OrganizationMembershipPolicy organizationMembershipPolicy = (OrganizationMembershipPolicy) newInstance(portletClassLoader, OrganizationMembershipPolicy.class, organizationMembershipPolicyClassName)[ FD ]
Line_97 $$ String roleMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES)-->Line_98 $$ RoleMembershipPolicy roleMembershipPolicy = (RoleMembershipPolicy) newInstance(portletClassLoader, RoleMembershipPolicy.class, roleMembershipPolicyClassName)[ FD ]
Line_153 $$ if (portalProperties.containsKey(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)) -->Line_156 $$ registerService(servletContextName, screenNameValidatorClassName, ScreenNameValidator.class, screenNameValidator)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_170 $$ String[] upgradeProcessClassNames = StringUtil.split(unfilteredPortalProperties.getProperty(PropsKeys.UPGRADE_PROCESSES))[ FD ]
Line_79 $$ if (portalProperties.containsKey(LOCK_LISTENERS)) -->Line_80 $$ String[] lockListenerClassNames = StringUtil.split(portalProperties.getProperty(LOCK_LISTENERS))[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_22 $$ String authTokenClassName = portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_98 $$ RoleMembershipPolicy roleMembershipPolicy = (RoleMembershipPolicy) newInstance(portletClassLoader, RoleMembershipPolicy.class, roleMembershipPolicyClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_144 $$ String fullNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR)[ FD ]
Line_144 $$ String fullNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_VALIDATOR)-->Line_146 $$ registerService(servletContextName, fullNameValidatorClassName, FullNameValidator.class, fullNameValidator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_21 $$ if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) [ FD ]
Line_96 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) -->Line_99 $$ registerService(servletContextName, roleMembershipPolicyClassName, RoleMembershipPolicy.class, roleMembershipPolicy)[ CD ]
Line_128 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) -->Line_131 $$ registerService(servletContextName, emailAddressGeneratorClassName, EmailAddressGenerator.class, emailAddressGenerator)[ CD ]
Line_170 $$ String[] upgradeProcessClassNames = StringUtil.split(unfilteredPortalProperties.getProperty(PropsKeys.UPGRADE_PROCESSES))-->Line_171 $$ List<UpgradeProcess> upgradeProcesses = UpgradeProcessUtil.initUpgradeProcesses(portletClassLoader, upgradeProcessClassNames)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_23 $$ AuthToken authToken = (AuthToken) newInstance(portletClassLoader, AuthToken.class, authTokenClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_79 $$ if (portalProperties.containsKey(LOCK_LISTENERS)) [ CD ]
Line_10 $$ if (_log.isInfoEnabled() && portalProperties.contains(key)) -->Line_11 $$ _log.info("Portal property \"" + key + "\" is obsolete")[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_40 $$ String controlPanelEntryClassName = portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)[ FD ]
Line_130 $$ EmailAddressGenerator emailAddressGenerator = (EmailAddressGenerator) newInstance(portletClassLoader, EmailAddressGenerator.class, emailAddressGeneratorClassName)-->Line_131 $$ registerService(servletContextName, emailAddressGeneratorClassName, EmailAddressGenerator.class, emailAddressGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_113 $$ Toolkit toolkit = (Toolkit) newInstance(portletClassLoader, Toolkit.class, toolkitClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_128 $$ if (portalProperties.containsKey(PropsKeys.USERS_EMAIL_ADDRESS_GENERATOR)) [ CD ]
Line_163 $$ boolean filterEnabled = GetterUtil.getBoolean(portalProperties.getProperty(liferayFilterClassName))-->Line_166 $$ liferayFilter.setFilterEnabled(filterEnabled)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_50 $$ dlProcessor = (DLProcessor) newInstance(portletClassLoader, ReflectionUtil.getInterfaces(dlProcessor, portletClassLoader), dlProcessorClassName)[ FD ]
Line_116 $$ if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) -->Line_117 $$ String phoneNumberFormatClassName = portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_76 $$ AttributesTransformer attributesTransformer = (AttributesTransformer) newInstance(portletClassLoader, AttributesTransformer.class, attributesTransformerClassName)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_106 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_102 $$ String siteMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_SITES)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_86 $$ if (portalProperties.containsKey(PropsKeys.MAIL_HOOK_IMPL)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_83 $$ registerService(servletContextName, lockListenerClassName, LockListener.class, lockListener)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_139 $$ String fullNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR)[ FD ]
Line_96 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_ROLES)) -->Line_98 $$ RoleMembershipPolicy roleMembershipPolicy = (RoleMembershipPolicy) newInstance(portletClassLoader, RoleMembershipPolicy.class, roleMembershipPolicyClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_146 $$ registerService(servletContextName, fullNameValidatorClassName, FullNameValidator.class, fullNameValidator)[ FD ]
Line_75 $$ String attributesTransformerClassName = portalProperties.getProperty(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)-->Line_76 $$ AttributesTransformer attributesTransformer = (AttributesTransformer) newInstance(portletClassLoader, AttributesTransformer.class, attributesTransformerClassName)[ FD ]
Line_150 $$ ScreenNameGenerator screenNameGenerator = (ScreenNameGenerator) newInstance(portletClassLoader, ScreenNameGenerator.class, screenNameGeneratorClassName)-->Line_151 $$ registerService(servletContextName, screenNameGeneratorClassName, ScreenNameGenerator.class, screenNameGenerator)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_118 $$ PhoneNumberFormat phoneNumberFormat = (PhoneNumberFormat) newInstance(portletClassLoader, PhoneNumberFormat.class, phoneNumberFormatClassName)[ FD ]
Line_21 $$ if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) -->Line_24 $$ registerService(servletContextName, authTokenClassName, AuthToken.class, authToken)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_15 $$ if (portalProperties.containsKey(PropsKeys.AUTH_PUBLIC_PATHS)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_74 $$ if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) [ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_14 $$ resetPortalProperties(servletContextName, portalProperties, true)[ FD ]
Line_44 $$ if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) -->Line_46 $$ DLFileEntryProcessorContainer dlFileEntryProcessorContainer = new DLFileEntryProcessorContainer()[ CD ]
Line_56 $$ DLRepositoryContainer dlRepositoryContainer = new DLRepositoryContainer()-->Line_57 $$ _dlRepositoryContainerMap.put(servletContextName, dlRepositoryContainer)[ FD ]
Line_98 $$ RoleMembershipPolicy roleMembershipPolicy = (RoleMembershipPolicy) newInstance(portletClassLoader, RoleMembershipPolicy.class, roleMembershipPolicyClassName)-->Line_99 $$ registerService(servletContextName, roleMembershipPolicyClassName, RoleMembershipPolicy.class, roleMembershipPolicy)[ FD ]
Line_117 $$ String phoneNumberFormatClassName = portalProperties.getProperty(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)-->Line_118 $$ PhoneNumberFormat phoneNumberFormat = (PhoneNumberFormat) newInstance(portletClassLoader, PhoneNumberFormat.class, phoneNumberFormatClassName)[ FD ]
Line_116 $$ if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) -->Line_119 $$ registerService(servletContextName, phoneNumberFormatClassName, PhoneNumberFormat.class, phoneNumberFormat)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_171 $$ List<UpgradeProcess> upgradeProcesses = UpgradeProcessUtil.initUpgradeProcesses(portletClassLoader, upgradeProcessClassNames)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_169 $$ if (unfilteredPortalProperties.containsKey(PropsKeys.RELEASE_INFO_BUILD_NUMBER) || unfilteredPortalProperties.containsKey(PropsKeys.UPGRADE_PROCESSES)) [ FD ]
Line_97 $$ String roleMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ROLES)-->Line_99 $$ registerService(servletContextName, roleMembershipPolicyClassName, RoleMembershipPolicy.class, roleMembershipPolicy)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_158 $$ Set<String> liferayFilterClassNames = LiferayFilterTracker.getClassNames()[ CD ]
Line_29 $$ CaptchaImpl captchaImpl = null-->Line_37 $$ captchaImpl.setCaptcha(captcha)[ FD ]
Line_54 $$ if (portalProperties.containsKey(PropsKeys.DL_REPOSITORY_IMPL)) -->Line_55 $$ String[] dlRepositoryClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.DL_REPOSITORY_IMPL))[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_116 $$ if (portalProperties.containsKey(PropsKeys.PHONE_NUMBER_FORMAT_IMPL)) [ CD ]
Line_22 $$ String authTokenClassName = portalProperties.getProperty(PropsKeys.AUTH_TOKEN_IMPL)-->Line_23 $$ AuthToken authToken = (AuthToken) newInstance(portletClassLoader, AuthToken.class, authTokenClassName)[ FD ]
Line_31 $$ if (currentCaptcha instanceof DoPrivilegedBean) -->Line_32 $$ DoPrivilegedBean doPrivilegedBean = (DoPrivilegedBean) currentCaptcha[ CD ]
Line_21 $$ if (portalProperties.containsKey(PropsKeys.AUTH_TOKEN_IMPL)) -->Line_23 $$ AuthToken authToken = (AuthToken) newInstance(portletClassLoader, AuthToken.class, authTokenClassName)[ CD ]
Line_44 $$ if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) -->Line_45 $$ String[] dlProcessorClassNames = StringUtil.split(portalProperties.getProperty(PropsKeys.DL_FILE_ENTRY_PROCESSORS))[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_44 $$ if (portalProperties.containsKey(PropsKeys.DL_FILE_ENTRY_PROCESSORS)) [ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_92 $$ String organizationMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_ORGANIZATIONS)[ FD ]
Line_48 $$ for (String dlProcessorClassName : dlProcessorClassNames) -->Line_50 $$ dlProcessor = (DLProcessor) newInstance(portletClassLoader, ReflectionUtil.getInterfaces(dlProcessor, portletClassLoader), dlProcessorClassName)[ FD ]
Line_39 $$ if (portalProperties.containsKey(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)) -->Line_40 $$ String controlPanelEntryClassName = portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_101 $$ if (portalProperties.containsKey(PropsKeys.MEMBERSHIP_POLICY_SITES)) [ FD ]
Line_139 $$ String fullNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR)-->Line_140 $$ FullNameGenerator fullNameGenerator = (FullNameGenerator) newInstance(portletClassLoader, FullNameGenerator.class, fullNameGeneratorClassName)[ FD ]
Line_87 $$ String mailHookClassName = portalProperties.getProperty(PropsKeys.MAIL_HOOK_IMPL)-->Line_89 $$ registerService(servletContextName, mailHookClassName, com.liferay.mail.util.Hook.class, mailHook)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_149 $$ String screenNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_GENERATOR)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_18 $$ if (containsKey(portalProperties, AUTH_TOKEN_IGNORE_ACTIONS)) [ CD ]
Line_59 $$ ExternalRepositoryFactory externalRepositoryFactory = new ExternalRepositoryFactoryImpl(dlRepositoryClassName, portletClassLoader)-->Line_60 $$ dlRepositoryContainer.registerRepositoryFactory(dlRepositoryClassName, externalRepositoryFactory)[ FD ]
Line_139 $$ String fullNameGeneratorClassName = portalProperties.getProperty(PropsKeys.USERS_FULL_NAME_GENERATOR)-->Line_141 $$ registerService(servletContextName, fullNameGeneratorClassName, FullNameGenerator.class, fullNameGenerator)[ FD ]
Line_74 $$ if (portalProperties.containsKey(PropsKeys.LDAP_ATTRS_TRANSFORMER_IMPL)) -->Line_76 $$ AttributesTransformer attributesTransformer = (AttributesTransformer) newInstance(portletClassLoader, AttributesTransformer.class, attributesTransformerClassName)[ CD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_80 $$ String[] lockListenerClassNames = StringUtil.split(portalProperties.getProperty(LOCK_LISTENERS))[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_77 $$ registerService(servletContextName, attributesTransformerClassName, AttributesTransformer.class, attributesTransformer)[ FD ]
Line_107 $$ String userGroupMembershipPolicyClassName = portalProperties.getProperty(PropsKeys.MEMBERSHIP_POLICY_USER_GROUPS)-->Line_108 $$ UserGroupMembershipPolicy userGroupMembershipPolicy = (UserGroupMembershipPolicy) newInstance(portletClassLoader, UserGroupMembershipPolicy.class, userGroupMembershipPolicyClassName)[ FD ]
Line_88 $$ com.liferay.mail.util.Hook mailHook = (com.liferay.mail.util.Hook) newInstance(portletClassLoader, com.liferay.mail.util.Hook.class, mailHookClassName)-->Line_89 $$ registerService(servletContextName, mailHookClassName, com.liferay.mail.util.Hook.class, mailHook)[ FD ]
Line_2 $$ protected void initPortalProperties(String servletContextName, ClassLoader portletClassLoader, Properties portalProperties, Properties unfilteredPortalProperties) throws Exception -->Line_154 $$ String screenNameValidatorClassName = portalProperties.getProperty(PropsKeys.USERS_SCREEN_NAME_VALIDATOR)[ FD ]
Line_40 $$ String controlPanelEntryClassName = portalProperties.getProperty(PropsKeys.CONTROL_PANEL_DEFAULT_ENTRY_CLASS)-->Line_41 $$ ControlPanelEntry controlPanelEntry = (ControlPanelEntry) newInstance(portletClassLoader, ControlPanelEntry.class, controlPanelEntryClassName)[ FD ]
Line_65 $$ AntivirusScanner antivirusScanner = (AntivirusScanner) newInstance(portletClassLoader, AntivirusScanner.class, antivirusScannerClassName)-->Line_67 $$ antivirusScannerWrapper.setAntivirusScanner(antivirusScanner)[ FD ]
