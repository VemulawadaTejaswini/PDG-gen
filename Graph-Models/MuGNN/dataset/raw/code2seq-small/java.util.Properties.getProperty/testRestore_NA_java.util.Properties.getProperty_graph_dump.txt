Line_8 $$ if (cfidString != null) -->Line_10 $$ if (Schema.instance.getCF(cfid) == null) [ CD ]
Line_8 $$ if (cfidString != null) -->Line_9 $$ UUID cfid = UUID.fromString(cfidString)[ CD ]
Line_5 $$ int hash = Integer.parseInt(prop.getProperty(HASH_PROPERTY))-->Line_21 $$ Assert.assertEquals(hash, hasher.hash)[ FD ]
Line_10 $$ if (Schema.instance.getCF(cfid) == null) -->Line_12 $$ Schema.instance.unload(cfm)[ CD ]
Line_3 $$ Properties prop = new Properties()-->Line_5 $$ int hash = Integer.parseInt(prop.getProperty(HASH_PROPERTY))[ FD ]
Line_3 $$ Properties prop = new Properties()-->Line_6 $$ int cells = Integer.parseInt(prop.getProperty(CELLS_PROPERTY))[ FD ]
Line_7 $$ String cfidString = prop.getProperty(CFID_PROPERTY)-->Line_8 $$ if (cfidString != null) [ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_5 $$ int hash = Integer.parseInt(prop.getProperty(HASH_PROPERTY))[ CD ]
Line_17 $$ CommitLogTestReplayer replayer = new CommitLogTestReplayer(CommitLog.instance, hasher)-->Line_19 $$ replayer.recover(files)[ FD ]
Line_11 $$ CFMetaData cfm = Schema.instance.getCFMetaData(KEYSPACE, TABLE)-->Line_13 $$ Schema.instance.load(cfm.copy(cfid))[ FD ]
Line_18 $$ File[] files = new File(location).listFiles(( file,  name) -> name.endsWith(".log"))-->Line_19 $$ replayer.recover(files)[ FD ]
Line_9 $$ UUID cfid = UUID.fromString(cfidString)-->Line_13 $$ Schema.instance.load(cfm.copy(cfid))[ FD ]
Line_3 $$ Properties prop = new Properties()-->Line_7 $$ String cfidString = prop.getProperty(CFID_PROPERTY)[ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_18 $$ File[] files = new File(location).listFiles(( file,  name) -> name.endsWith(".log"))[ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_6 $$ int cells = Integer.parseInt(prop.getProperty(CELLS_PROPERTY))[ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_8 $$ if (cfidString != null) [ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_16 $$ Hasher hasher = new Hasher()[ CD ]
Line_10 $$ if (Schema.instance.getCF(cfid) == null) -->Line_11 $$ CFMetaData cfm = Schema.instance.getCFMetaData(KEYSPACE, TABLE)[ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_19 $$ replayer.recover(files)[ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_21 $$ Assert.assertEquals(hash, hasher.hash)[ CD ]
Line_9 $$ UUID cfid = UUID.fromString(cfidString)-->Line_10 $$ if (Schema.instance.getCF(cfid) == null) [ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_20 $$ Assert.assertEquals(cells, hasher.cells)[ CD ]
Line_7 $$ String cfidString = prop.getProperty(CFID_PROPERTY)-->Line_9 $$ UUID cfid = UUID.fromString(cfidString)[ FD ]
Line_3 $$ Properties prop = new Properties()-->Line_4 $$ prop.load(new FileInputStream(new File(location + File.separatorChar + PROPERTIES_FILE)))[ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_7 $$ String cfidString = prop.getProperty(CFID_PROPERTY)[ CD ]
Line_11 $$ CFMetaData cfm = Schema.instance.getCFMetaData(KEYSPACE, TABLE)-->Line_12 $$ Schema.instance.unload(cfm)[ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_4 $$ prop.load(new FileInputStream(new File(location + File.separatorChar + PROPERTIES_FILE)))[ CD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_3 $$ Properties prop = new Properties()[ CD ]
Line_10 $$ if (Schema.instance.getCF(cfid) == null) -->Line_13 $$ Schema.instance.load(cfm.copy(cfid))[ CD ]
Line_6 $$ int cells = Integer.parseInt(prop.getProperty(CELLS_PROPERTY))-->Line_20 $$ Assert.assertEquals(cells, hasher.cells)[ FD ]
Line_2 $$ public void testRestore(String location) throws IOException, InterruptedException -->Line_17 $$ CommitLogTestReplayer replayer = new CommitLogTestReplayer(CommitLog.instance, hasher)[ CD ]
