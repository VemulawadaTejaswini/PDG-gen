Line_12 $$ FileSet fileSet = new FileSet()-->Line_21 $$ fileSet.setIncludes(StringUtil.merge(slicedIncludedFiles, StringPool.COMMA))[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_26 $$ formatter.setToFile(_logFilePath.toFile())[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_10 $$ _pmdTask.setShortFilenames(true)[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_15 $$ fileSet.setExcludes(_buildProperties.getProperty("pmd.java.excludes"))[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_28 $$ _pmdTask.addFormatter(formatter)[ CD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_23 $$ _pmdTask.addFileset(fileSet)[ FD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_19 $$ fileSet = new FileSet()[ FD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_20 $$ fileSet.setDir(new File(_PROJECT_DIR))[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_16 $$ if (isCIMode()) [ CD ]
Line_16 $$ if (isCIMode()) -->Line_18 $$ String[] slicedIncludedFiles = slice(directoryScanner.getIncludedFiles())[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_24 $$ Formatter formatter = new Formatter()[ CD ]
Line_19 $$ fileSet = new FileSet()-->Line_23 $$ _pmdTask.addFileset(fileSet)[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_23 $$ _pmdTask.addFileset(fileSet)[ CD ]
Line_3 $$ try (FileReader fileReader = new FileReader(new File(_PROJECT_DIR, "/tools/sdk/build.properties"))) -->Line_4 $$ _buildProperties.load(fileReader)[ FD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_17 $$ DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(_pmdTask.getProject())[ FD ]
Line_19 $$ fileSet = new FileSet()-->Line_20 $$ fileSet.setDir(new File(_PROJECT_DIR))[ FD ]
Line_16 $$ if (isCIMode()) -->Line_21 $$ fileSet.setIncludes(StringUtil.merge(slicedIncludedFiles, StringPool.COMMA))[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_29 $$ _pmdTask.setRuleSetFiles(StringUtil.replace(_buildProperties.getProperty("pmd.java.ruleset"), "$[ CD ]
Line_17 $$ DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(_pmdTask.getProject())-->Line_18 $$ String[] slicedIncludedFiles = slice(directoryScanner.getIncludedFiles())[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_12 $$ FileSet fileSet = new FileSet()[ CD ]
Line_3 $$ try (FileReader fileReader = new FileReader(new File(_PROJECT_DIR, "/tools/sdk/build.properties"))) -->Line_7 $$ _buildProperties.load(fileReader)[ FD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_14 $$ fileSet.setIncludes(_buildProperties.getProperty("pmd.java.includes"))[ FD ]
Line_16 $$ if (isCIMode()) -->Line_17 $$ DirectoryScanner directoryScanner = fileSet.getDirectoryScanner(_pmdTask.getProject())[ CD ]
Line_19 $$ fileSet = new FileSet()-->Line_21 $$ fileSet.setIncludes(StringUtil.merge(slicedIncludedFiles, StringPool.COMMA))[ FD ]
Line_24 $$ Formatter formatter = new Formatter()-->Line_26 $$ formatter.setToFile(_logFilePath.toFile())[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_11 $$ _pmdTask.setThreads(GetterUtil.get(_buildProperties.getProperty("pmd.threads"), 2))[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_14 $$ fileSet.setIncludes(_buildProperties.getProperty("pmd.java.includes"))[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_25 $$ _logFilePath = Files.createTempFile(null, null)[ CD ]
Line_2 $$ public void setUp() throws IOException -->Line_9 $$ _pmdTask.setProject(new Project())[ CD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_15 $$ fileSet.setExcludes(_buildProperties.getProperty("pmd.java.excludes"))[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_27 $$ formatter.setType("text")[ CD ]
Line_24 $$ Formatter formatter = new Formatter()-->Line_28 $$ _pmdTask.addFormatter(formatter)[ FD ]
Line_2 $$ public void setUp() throws IOException -->Line_13 $$ fileSet.setDir(new File(_PROJECT_DIR))[ CD ]
Line_12 $$ FileSet fileSet = new FileSet()-->Line_13 $$ fileSet.setDir(new File(_PROJECT_DIR))[ FD ]
Line_16 $$ if (isCIMode()) -->Line_20 $$ fileSet.setDir(new File(_PROJECT_DIR))[ CD ]
Line_24 $$ Formatter formatter = new Formatter()-->Line_27 $$ formatter.setType("text")[ FD ]
Line_18 $$ String[] slicedIncludedFiles = slice(directoryScanner.getIncludedFiles())-->Line_21 $$ fileSet.setIncludes(StringUtil.merge(slicedIncludedFiles, StringPool.COMMA))[ FD ]
Line_16 $$ if (isCIMode()) -->Line_19 $$ fileSet = new FileSet()[ CD ]
