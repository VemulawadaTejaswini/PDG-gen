Line_50 $$ line = r.readLine()-->Line_49 $$ sb.append(line).append("[ FD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_7 $$ map.put("0", orgName.toLowerCase())[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_7 $$ map.put("0", orgName.toLowerCase())[ CD ]
Line_4 $$ String orgDomain = conf.getProperty(ORG_DOMAIN)-->Line_8 $$ map.put("1", orgDomain.toLowerCase())[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_12 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_10 $$ map.put("3", orgDomain.toUpperCase())[ CD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_10 $$ map.put("3", orgDomain.toUpperCase())[ FD ]
Line_48 $$ while (line != null) -->Line_49 $$ sb.append(line).append("[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_41 $$ kdc.start()[ CD ]
Line_18 $$ reader = new LdifReader(new StringReader(content))-->Line_23 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_46 $$ r = new BufferedReader(new InputStreamReader(is2, Charsets.UTF_8))-->Line_53 $$ IOUtils.closeQuietly(r)[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_14 $$ SchemaManager schemaManager = ds.getSchemaManager()[ CD ]
Line_30 $$ if (transport.trim().equals("TCP")) -->Line_31 $$ kdc.addTransports(new TcpTransport(bindAddress, port, 3, 50))[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_57 $$ FileUtils.writeStringToFile(krb5conf, MessageFormat.format(sb.toString(), getRealm(), getHost(), Integer.toString(getPort()), System.getProperty("line.separator")))[ CD ]
Line_13 $$ InputStream is1 = cl.getResourceAsStream("minikdc.ldiff")-->Line_17 $$ final String content = StrSubstitutor.replace(IOUtils.toString(is1), map)[ FD ]
Line_65 $$ classRef = Class.forName("sun.security.krb5.Config")-->Line_67 $$ Method refreshMethod = classRef.getMethod("refresh", new Class[0])[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_68 $$ refreshMethod.invoke(classRef, new Object[0])[ CD ]
Line_46 $$ r = new BufferedReader(new InputStreamReader(is2, Charsets.UTF_8))-->Line_47 $$ String line = r.readLine()[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_5 $$ String bindAddress = conf.getProperty(KDC_BIND_ADDRESS)[ CD ]
Line_65 $$ classRef = Class.forName("sun.security.krb5.Config")-->Line_68 $$ refreshMethod.invoke(classRef, new Object[0])[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_37 $$ kdc.setServiceName(conf.getProperty(INSTANCE))[ CD ]
Line_32 $$ if (transport.trim().equals("UDP")) -->Line_33 $$ kdc.addTransports(new UdpTransport(port))[ CD ]
Line_47 $$ String line = r.readLine()-->Line_49 $$ sb.append(line).append("[ FD ]
Line_63 $$ classRef = Class.forName("com.ibm.security.krb5.internal.Config")-->Line_65 $$ classRef = Class.forName("sun.security.krb5.Config")[ FD ]
Line_12 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()-->Line_13 $$ InputStream is1 = cl.getResourceAsStream("minikdc.ldiff")[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_44 $$ BufferedReader r = null[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_40 $$ kdc.getConfig().setPaEncTimestampRequired(false)[ CD ]
Line_44 $$ BufferedReader r = null-->Line_50 $$ line = r.readLine()[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_8 $$ map.put("1", orgDomain.toLowerCase())[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_38 $$ kdc.getConfig().setMaximumRenewableLifetime(Long.parseLong(conf.getProperty(MAX_RENEWABLE_LIFETIME)))[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_58 $$ System.setProperty("java.security.krb5.conf", krb5conf.getAbsolutePath())[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_69 $$ LOG.info("MiniKdc listening at port: [ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_59 $$ System.setProperty("sun.security.krb5.debug", conf.getProperty(DEBUG, "false"))[ CD ]
Line_62 $$ if (System.getProperty("java.vendor").contains("IBM")) -->Line_63 $$ classRef = Class.forName("com.ibm.security.krb5.internal.Config")[ CD ]
Line_46 $$ r = new BufferedReader(new InputStreamReader(is2, Charsets.UTF_8))-->Line_50 $$ line = r.readLine()[ FD ]
Line_5 $$ String bindAddress = conf.getProperty(KDC_BIND_ADDRESS)-->Line_11 $$ map.put("4", bindAddress)[ FD ]
Line_43 $$ InputStream is2 = cl.getResourceAsStream("minikdc-krb5.conf")-->Line_54 $$ IOUtils.closeQuietly(is2)[ FD ]
Line_13 $$ InputStream is1 = cl.getResourceAsStream("minikdc.ldiff")-->Line_24 $$ IOUtils.closeQuietly(is1)[ FD ]
Line_3 $$ String orgName = conf.getProperty(ORG_NAME)-->Line_7 $$ map.put("0", orgName.toLowerCase())[ FD ]
Line_44 $$ BufferedReader r = null-->Line_46 $$ r = new BufferedReader(new InputStreamReader(is2, Charsets.UTF_8))[ FD ]
Line_12 $$ ClassLoader cl = Thread.currentThread().getContextClassLoader()-->Line_43 $$ InputStream is2 = cl.getResourceAsStream("minikdc-krb5.conf")[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_9 $$ map.put("2", orgName.toUpperCase())[ CD ]
Line_42 $$ StringBuilder sb = new StringBuilder()-->Line_49 $$ sb.append(line).append("[ FD ]
Line_15 $$ LdifReader reader = null-->Line_18 $$ reader = new LdifReader(new StringReader(content))[ FD ]
Line_15 $$ LdifReader reader = null-->Line_23 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_6 $$ final Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_47 $$ String line = r.readLine()-->Line_48 $$ while (line != null) [ FD ]
Line_63 $$ classRef = Class.forName("com.ibm.security.krb5.internal.Config")-->Line_68 $$ refreshMethod.invoke(classRef, new Object[0])[ FD ]
Line_67 $$ Method refreshMethod = classRef.getMethod("refresh", new Class[0])-->Line_68 $$ refreshMethod.invoke(classRef, new Object[0])[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_42 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_27 $$ kdc.setDirectoryService(ds)[ CD ]
Line_62 $$ if (System.getProperty("java.vendor").contains("IBM")) -->Line_65 $$ classRef = Class.forName("sun.security.krb5.Config")[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_56 $$ krb5conf = new File(workDir, "krb5.conf").getAbsoluteFile()[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_15 $$ LdifReader reader = null[ CD ]
Line_30 $$ if (transport.trim().equals("TCP")) -->Line_32 $$ if (transport.trim().equals("UDP")) [ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_43 $$ InputStream is2 = cl.getResourceAsStream("minikdc-krb5.conf")[ CD ]
Line_48 $$ while (line != null) -->Line_50 $$ line = r.readLine()[ CD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_9 $$ map.put("2", orgName.toUpperCase())[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_4 $$ String orgDomain = conf.getProperty(ORG_DOMAIN)[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_62 $$ if (System.getProperty("java.vendor").contains("IBM")) [ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_39 $$ kdc.getConfig().setMaximumTicketLifetime(Long.parseLong(conf.getProperty(MAX_TICKET_LIFETIME)))[ CD ]
Line_3 $$ String orgName = conf.getProperty(ORG_NAME)-->Line_9 $$ map.put("2", orgName.toUpperCase())[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_67 $$ Method refreshMethod = classRef.getMethod("refresh", new Class[0])[ CD ]
Line_19 $$ for (LdifEntry ldifEntry : reader) -->Line_20 $$ ds.getAdminSession().add(new DefaultEntry(schemaManager, ldifEntry.getEntry()))[ FD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_17 $$ final String content = StrSubstitutor.replace(IOUtils.toString(is1), map)[ FD ]
Line_44 $$ BufferedReader r = null-->Line_53 $$ IOUtils.closeQuietly(r)[ FD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_8 $$ map.put("1", orgDomain.toLowerCase())[ FD ]
Line_47 $$ String line = r.readLine()-->Line_50 $$ line = r.readLine()[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ FileUtils.writeStringToFile(krb5conf, MessageFormat.format(sb.toString(), getRealm(), getHost(), Integer.toString(getPort()), System.getProperty("line.separator")))[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_30 $$ if (transport.trim().equals("TCP")) [ CD ]
Line_44 $$ BufferedReader r = null-->Line_47 $$ String line = r.readLine()[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_13 $$ InputStream is1 = cl.getResourceAsStream("minikdc.ldiff")[ CD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_3 $$ String orgName = conf.getProperty(ORG_NAME)[ CD ]
Line_4 $$ String orgDomain = conf.getProperty(ORG_DOMAIN)-->Line_10 $$ map.put("3", orgDomain.toUpperCase())[ FD ]
Line_50 $$ line = r.readLine()-->Line_48 $$ while (line != null) [ FD ]
Line_63 $$ classRef = Class.forName("com.ibm.security.krb5.internal.Config")-->Line_67 $$ Method refreshMethod = classRef.getMethod("refresh", new Class[0])[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_11 $$ map.put("4", bindAddress)[ CD ]
Line_6 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_11 $$ map.put("4", bindAddress)[ FD ]
Line_2 $$ private void initKDCServer() throws Exception -->Line_70 $$ LOG.info("MiniKdc setting JVM krb5.conf to: [ CD ]
