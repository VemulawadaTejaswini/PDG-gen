Line_5 $$ HttpServletRequest request = accessControlContext.getRequest()-->Line_14 $$ HttpAuthManagerUtil.generateChallenge(request, accessControlContext.getResponse(), httpAuthorizationHeader)[ FD ]
Line_5 $$ HttpServletRequest request = accessControlContext.getRequest()-->Line_6 $$ long userId = HttpAuthManagerUtil.getDigestUserId(request)[ FD ]
Line_7 $$ if (userId == 0) -->Line_12 $$ if (forcedDigestAuth) [ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties configuration) throws AuthException -->Line_14 $$ HttpAuthManagerUtil.generateChallenge(request, accessControlContext.getResponse(), httpAuthorizationHeader)[ FD ]
Line_7 $$ if (userId == 0) -->Line_9 $$ if (!forcedDigestAuth) [ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties configuration) throws AuthException -->Line_5 $$ HttpServletRequest request = accessControlContext.getRequest()[ FD ]
Line_6 $$ long userId = HttpAuthManagerUtil.getDigestUserId(request)-->Line_7 $$ if (userId == 0) [ FD ]
Line_4 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_15 $$ authVerifierResult.setState(AuthVerifierResult.State.INVALID_CREDENTIALS)[ FD ]
Line_12 $$ if (forcedDigestAuth) -->Line_14 $$ HttpAuthManagerUtil.generateChallenge(request, accessControlContext.getResponse(), httpAuthorizationHeader)[ CD ]
Line_4 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_19 $$ authVerifierResult.setPasswordBasedAuthentication(true)[ FD ]
Line_7 $$ if (userId == 0) -->Line_17 $$ return authVerifierResult[ CD ]
Line_4 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_21 $$ authVerifierResult.setUserId(userId)[ FD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties configuration) throws AuthException -->Line_8 $$ boolean forcedDigestAuth = MapUtil.getBoolean(accessControlContext.getSettings(), "digest_auth")[ FD ]
Line_13 $$ HttpAuthorizationHeader httpAuthorizationHeader = new HttpAuthorizationHeader(HttpAuthorizationHeader.SCHEME_DIGEST)-->Line_14 $$ HttpAuthManagerUtil.generateChallenge(request, accessControlContext.getResponse(), httpAuthorizationHeader)[ FD ]
Line_9 $$ if (!forcedDigestAuth) -->Line_10 $$ forcedDigestAuth = GetterUtil.getBoolean(configuration.getProperty("digest_auth"))[ CD ]
Line_6 $$ long userId = HttpAuthManagerUtil.getDigestUserId(request)-->Line_21 $$ authVerifierResult.setUserId(userId)[ FD ]
Line_8 $$ boolean forcedDigestAuth = MapUtil.getBoolean(accessControlContext.getSettings(), "digest_auth")-->Line_10 $$ forcedDigestAuth = GetterUtil.getBoolean(configuration.getProperty("digest_auth"))[ FD ]
Line_4 $$ AuthVerifierResult authVerifierResult = new AuthVerifierResult()-->Line_20 $$ authVerifierResult.setState(AuthVerifierResult.State.SUCCESS)[ FD ]
Line_8 $$ boolean forcedDigestAuth = MapUtil.getBoolean(accessControlContext.getSettings(), "digest_auth")-->Line_9 $$ if (!forcedDigestAuth) [ FD ]
Line_12 $$ if (forcedDigestAuth) -->Line_15 $$ authVerifierResult.setState(AuthVerifierResult.State.INVALID_CREDENTIALS)[ CD ]
Line_2 $$ public AuthVerifierResult verify(AccessControlContext accessControlContext, Properties configuration) throws AuthException -->Line_10 $$ forcedDigestAuth = GetterUtil.getBoolean(configuration.getProperty("digest_auth"))[ FD ]
Line_7 $$ if (userId == 0) -->Line_8 $$ boolean forcedDigestAuth = MapUtil.getBoolean(accessControlContext.getSettings(), "digest_auth")[ CD ]
Line_12 $$ if (forcedDigestAuth) -->Line_13 $$ HttpAuthorizationHeader httpAuthorizationHeader = new HttpAuthorizationHeader(HttpAuthorizationHeader.SCHEME_DIGEST)[ CD ]
