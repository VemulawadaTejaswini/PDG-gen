Line_12 $$ String propertyName = params.getProperty(DynamicParameterizedType.PROPERTY)-->Line_14 $$ Assert.assertEquals(propertyName, xproperty.getName())[ FD ]
Line_13 $$ XProperty xproperty = (XProperty) params.get(DynamicParameterizedType.XPROPERTY)-->Line_15 $$ Assert.assertEquals(entity, xproperty.getDeclaringClass().getName())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_12 $$ String propertyName = params.getProperty(DynamicParameterizedType.PROPERTY)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_26 $$ value += "." + params.getProperty("suffix").toUpperCase()[ FD ]
Line_12 $$ String propertyName = params.getProperty(DynamicParameterizedType.PROPERTY)-->Line_18 $$ String columnName = propertyName.toUpperCase().split("_")[1][ FD ]
Line_11 $$ String entity = params.getProperty(DynamicParameterizedType.ENTITY)-->Line_15 $$ Assert.assertEquals(entity, xproperty.getDeclaringClass().getName())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_13 $$ XProperty xproperty = (XProperty) params.get(DynamicParameterizedType.XPROPERTY)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_7 $$ Boolean primaryKey = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_PRIMARY_KEY))[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_21 $$ Assert.assertEquals(columnName, parameterType.getColumns()[0])[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_11 $$ String entity = params.getProperty(DynamicParameterizedType.ENTITY)[ FD ]
Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)-->Line_22 $$ Assert.assertEquals(String.class, parameterType.getReturnedClass())[ FD ]
Line_7 $$ Boolean primaryKey = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_PRIMARY_KEY))-->Line_8 $$ Assert.assertFalse(primaryKey)[ FD ]
Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)-->Line_23 $$ Assert.assertEquals(tableName, parameterType.getTable())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_5 $$ String returnedClass = params.getProperty(DynamicParameterizedType.RETURNED_CLASS)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_9 $$ String accessType = params.getProperty(DynamicParameterizedType.ACCESS_TYPE)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_14 $$ Assert.assertEquals(propertyName, xproperty.getName())[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_6 $$ Assert.assertEquals(String.class.getName(), returnedClass)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_11 $$ String entity = params.getProperty(DynamicParameterizedType.ENTITY)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_3 $$ Boolean dynamic = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_DYNAMIC))[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_16 $$ Assert.assertEquals(String.class.getName(), xproperty.getType().getName())[ CD ]
Line_17 $$ String tableName = propertyName.toUpperCase().split("_")[0]-->Line_23 $$ Assert.assertEquals(tableName, parameterType.getTable())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_7 $$ Boolean primaryKey = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_PRIMARY_KEY))[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_18 $$ String columnName = propertyName.toUpperCase().split("_")[1][ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_25 $$ if (params.containsKey("suffix")) [ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_24 $$ String value = tableName + "." + columnName[ CD ]
Line_13 $$ XProperty xproperty = (XProperty) params.get(DynamicParameterizedType.XPROPERTY)-->Line_14 $$ Assert.assertEquals(propertyName, xproperty.getName())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_25 $$ if (params.containsKey("suffix")) [ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)[ FD ]
Line_25 $$ if (params.containsKey("suffix")) -->Line_26 $$ value += "." + params.getProperty("suffix").toUpperCase()[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_20 $$ Assert.assertEquals(1, parameterType.getColumns().length)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_17 $$ String tableName = propertyName.toUpperCase().split("_")[0][ CD ]
Line_24 $$ String value = tableName + "." + columnName-->Line_26 $$ value += "." + params.getProperty("suffix").toUpperCase()[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_8 $$ Assert.assertFalse(primaryKey)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_10 $$ Assert.assertEquals("field", accessType)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_12 $$ String propertyName = params.getProperty(DynamicParameterizedType.PROPERTY)[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_9 $$ String accessType = params.getProperty(DynamicParameterizedType.ACCESS_TYPE)[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_5 $$ String returnedClass = params.getProperty(DynamicParameterizedType.RETURNED_CLASS)[ FD ]
Line_13 $$ XProperty xproperty = (XProperty) params.get(DynamicParameterizedType.XPROPERTY)-->Line_16 $$ Assert.assertEquals(String.class.getName(), xproperty.getType().getName())[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_28 $$ return value[ CD ]
Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)-->Line_21 $$ Assert.assertEquals(columnName, parameterType.getColumns()[0])[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_4 $$ Assert.assertTrue(dynamic)[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_23 $$ Assert.assertEquals(tableName, parameterType.getTable())[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_22 $$ Assert.assertEquals(String.class, parameterType.getReturnedClass())[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_13 $$ XProperty xproperty = (XProperty) params.get(DynamicParameterizedType.XPROPERTY)[ FD ]
Line_18 $$ String columnName = propertyName.toUpperCase().split("_")[1]-->Line_21 $$ Assert.assertEquals(columnName, parameterType.getColumns()[0])[ FD ]
Line_12 $$ String propertyName = params.getProperty(DynamicParameterizedType.PROPERTY)-->Line_17 $$ String tableName = propertyName.toUpperCase().split("_")[0][ FD ]
Line_9 $$ String accessType = params.getProperty(DynamicParameterizedType.ACCESS_TYPE)-->Line_10 $$ Assert.assertEquals("field", accessType)[ FD ]
Line_3 $$ Boolean dynamic = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_DYNAMIC))-->Line_4 $$ Assert.assertTrue(dynamic)[ FD ]
Line_5 $$ String returnedClass = params.getProperty(DynamicParameterizedType.RETURNED_CLASS)-->Line_6 $$ Assert.assertEquals(String.class.getName(), returnedClass)[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)[ CD ]
Line_19 $$ ParameterType parameterType = (ParameterType) params.get(DynamicParameterizedType.PARAMETER_TYPE)-->Line_20 $$ Assert.assertEquals(1, parameterType.getColumns().length)[ FD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_15 $$ Assert.assertEquals(entity, xproperty.getDeclaringClass().getName())[ CD ]
Line_2 $$ protected String assertInternallyConsistent(Properties params) -->Line_3 $$ Boolean dynamic = Boolean.valueOf(params.getProperty(DynamicParameterizedType.IS_DYNAMIC))[ FD ]
