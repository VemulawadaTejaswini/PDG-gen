Line_13 $$ Properties properties = session.getProperties()-->Line_16 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ FD ]
Line_4 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())-->Line_5 $$ KernelServices mainServices = builder.build()[ FD ]
Line_20 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))-->Line_21 $$ session = (Session) customMailService.getValue()[ FD ]
Line_20 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))-->Line_32 $$ MailSessionService service = (MailSessionService) customMailService.getService()[ FD ]
Line_32 $$ MailSessionService service = (MailSessionService) customMailService.getService()-->Line_33 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_6 $$ if (!mainServices.isSuccessfulBoot()) [ FD ]
Line_13 $$ Properties properties = session.getProperties()-->Line_23 $$ String host = properties.getProperty("mail.smtp.host")[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_17 $$ ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("default2"))[ FD ]
Line_33 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()-->Line_35 $$ Assert.assertEquals(credentials.getPassword(), "password")[ FD ]
Line_23 $$ String host = properties.getProperty("mail.smtp.host")-->Line_24 $$ Assert.assertNotNull("smtp host should be set", host)[ FD ]
Line_9 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_10 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_22 $$ properties = session.getProperties()-->Line_23 $$ String host = properties.getProperty("mail.smtp.host")[ FD ]
Line_13 $$ Properties properties = session.getProperties()-->Line_15 $$ Assert.assertNotNull("pop3 host should be set", properties.getProperty("mail.pop3.host"))[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_7 $$ Assert.fail(mainServices.getBootError().toString())[ FD ]
Line_18 $$ session = (Session) defaultMailService.getValue()-->Line_19 $$ Assert.assertEquals("Debug should be true", true, session.getDebug())[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_20 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))[ FD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_19 $$ Assert.assertEquals("Debug should be true", true, session.getDebug())[ FD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_21 $$ session = (Session) customMailService.getValue()[ FD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_13 $$ Properties properties = session.getProperties()[ FD ]
Line_18 $$ session = (Session) defaultMailService.getValue()-->Line_22 $$ properties = session.getProperties()[ FD ]
Line_13 $$ Properties properties = session.getProperties()-->Line_14 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ FD ]
Line_23 $$ String host = properties.getProperty("mail.smtp.host")-->Line_25 $$ Assert.assertEquals("mail.example.com", host)[ FD ]
Line_13 $$ Properties properties = session.getProperties()-->Line_22 $$ properties = session.getProperties()[ FD ]
Line_6 $$ if (!mainServices.isSuccessfulBoot()) -->Line_7 $$ Assert.fail(mainServices.getBootError().toString())[ CD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_12 $$ Assert.assertNotNull("session should not be null", session)[ FD ]
Line_5 $$ KernelServices mainServices = builder.build()-->Line_9 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ FD ]
Line_17 $$ ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("default2"))-->Line_18 $$ session = (Session) defaultMailService.getValue()[ FD ]
Line_21 $$ session = (Session) customMailService.getValue()-->Line_22 $$ properties = session.getProperties()[ FD ]
Line_33 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()-->Line_34 $$ Assert.assertEquals(credentials.getUsername(), "username")[ FD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_18 $$ session = (Session) defaultMailService.getValue()[ FD ]
Line_9 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_11 $$ Session session = (Session) javaMailService.getValue()[ FD ]
Line_11 $$ Session session = (Session) javaMailService.getValue()-->Line_22 $$ properties = session.getProperties()[ FD ]
Line_18 $$ session = (Session) defaultMailService.getValue()-->Line_21 $$ session = (Session) customMailService.getValue()[ FD ]
