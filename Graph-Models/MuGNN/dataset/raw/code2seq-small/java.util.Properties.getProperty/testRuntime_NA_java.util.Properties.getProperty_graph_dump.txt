Line_2 $$ public void testRuntime() throws Exception -->Line_14 $$ Assert.assertNotNull("pop3 host should be set", properties.getProperty("mail.pop3.host"))[ CD ]
Line_22 $$ String host = properties.getProperty("mail.smtp.host")-->Line_24 $$ Assert.assertEquals("mail.example.com", host)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_5 $$ if (!mainServices.isSuccessfulBoot()) [ CD ]
Line_17 $$ session = (Session) defaultMailService.getValue()-->Line_21 $$ properties = session.getProperties()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_17 $$ session = (Session) defaultMailService.getValue()[ CD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_8 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ FD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_11 $$ Assert.assertNotNull("session should not be null", session)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_28 $$ MailSessionService service = (MailSessionService) customMailService.getService()[ CD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_14 $$ Assert.assertNotNull("pop3 host should be set", properties.getProperty("mail.pop3.host"))[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_10 $$ Session session = (Session) javaMailService.getValue()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_16 $$ ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("default2"))[ CD ]
Line_17 $$ session = (Session) defaultMailService.getValue()-->Line_18 $$ Assert.assertEquals("Debug should be true", true, session.getDebug())[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_29 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()[ CD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_20 $$ session = (Session) customMailService.getValue()[ FD ]
Line_5 $$ if (!mainServices.isSuccessfulBoot()) -->Line_6 $$ Assert.fail(mainServices.getBootError().toString())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_3 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())[ CD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_21 $$ properties = session.getProperties()[ FD ]
Line_20 $$ session = (Session) customMailService.getValue()-->Line_21 $$ properties = session.getProperties()[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_19 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))[ FD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_12 $$ Properties properties = session.getProperties()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_30 $$ Assert.assertEquals(credentials.getUsername(), "username")[ CD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_13 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_5 $$ if (!mainServices.isSuccessfulBoot()) [ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_25 $$ Assert.assertEquals("localhost", properties.get("mail.pop3.host"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_4 $$ KernelServices mainServices = builder.build()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_13 $$ Assert.assertNotNull("smtp host should be set", properties.getProperty("mail.smtp.host"))[ CD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_26 $$ Assert.assertEquals("some-custom-prop-value", properties.get("mail.pop3.custom_prop"))[ FD ]
Line_28 $$ MailSessionService service = (MailSessionService) customMailService.getService()-->Line_29 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()[ FD ]
Line_8 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_9 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_21 $$ properties = session.getProperties()-->Line_25 $$ Assert.assertEquals("localhost", properties.get("mail.pop3.host"))[ FD ]
Line_29 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()-->Line_31 $$ Assert.assertEquals(credentials.getPassword(), "password")[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_23 $$ Assert.assertNotNull("smtp host should be set", host)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_24 $$ Assert.assertEquals("mail.example.com", host)[ CD ]
Line_3 $$ KernelServicesBuilder builder = createKernelServicesBuilder(new MailSubsystem10TestCase.Initializer()).setSubsystemXml(getSubsystemXml())-->Line_4 $$ KernelServices mainServices = builder.build()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_26 $$ Assert.assertEquals("some-custom-prop-value", properties.get("mail.pop3.custom_prop"))[ CD ]
Line_21 $$ properties = session.getProperties()-->Line_22 $$ String host = properties.getProperty("mail.smtp.host")[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_8 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_15 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ CD ]
Line_17 $$ session = (Session) defaultMailService.getValue()-->Line_20 $$ session = (Session) customMailService.getValue()[ FD ]
Line_21 $$ properties = session.getProperties()-->Line_26 $$ Assert.assertEquals("some-custom-prop-value", properties.get("mail.pop3.custom_prop"))[ FD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_21 $$ properties = session.getProperties()[ FD ]
Line_22 $$ String host = properties.getProperty("mail.smtp.host")-->Line_23 $$ Assert.assertNotNull("smtp host should be set", host)[ FD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_18 $$ Assert.assertEquals("Debug should be true", true, session.getDebug())[ FD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_15 $$ Assert.assertNotNull("imap host should be set", properties.getProperty("mail.imap.host"))[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_16 $$ ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("default2"))[ FD ]
Line_16 $$ ServiceController<?> defaultMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("default2"))-->Line_17 $$ session = (Session) defaultMailService.getValue()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_18 $$ Assert.assertEquals("Debug should be true", true, session.getDebug())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_27 $$ Assert.assertEquals("fully-qualified-prop-name", properties.get("some.fully.qualified.property"))[ CD ]
Line_8 $$ ServiceController<?> javaMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("defaultMail"))-->Line_10 $$ Session session = (Session) javaMailService.getValue()[ FD ]
Line_19 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))-->Line_20 $$ session = (Session) customMailService.getValue()[ FD ]
Line_10 $$ Session session = (Session) javaMailService.getValue()-->Line_17 $$ session = (Session) defaultMailService.getValue()[ FD ]
Line_21 $$ properties = session.getProperties()-->Line_27 $$ Assert.assertEquals("fully-qualified-prop-name", properties.get("some.fully.qualified.property"))[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_12 $$ Properties properties = session.getProperties()[ CD ]
Line_29 $$ Credentials credentials = service.getConfig().getCustomServers()[0].getCredentials()-->Line_30 $$ Assert.assertEquals(credentials.getUsername(), "username")[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_11 $$ Assert.assertNotNull("session should not be null", session)[ CD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_27 $$ Assert.assertEquals("fully-qualified-prop-name", properties.get("some.fully.qualified.property"))[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_31 $$ Assert.assertEquals(credentials.getPassword(), "password")[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_22 $$ String host = properties.getProperty("mail.smtp.host")[ CD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_22 $$ String host = properties.getProperty("mail.smtp.host")[ FD ]
Line_12 $$ Properties properties = session.getProperties()-->Line_25 $$ Assert.assertEquals("localhost", properties.get("mail.pop3.host"))[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_21 $$ properties = session.getProperties()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_9 $$ javaMailService.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_20 $$ session = (Session) customMailService.getValue()[ CD ]
Line_19 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))-->Line_28 $$ MailSessionService service = (MailSessionService) customMailService.getService()[ FD ]
Line_4 $$ KernelServices mainServices = builder.build()-->Line_6 $$ Assert.fail(mainServices.getBootError().toString())[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_19 $$ ServiceController<?> customMailService = mainServices.getContainer().getService(MailSessionAdd.MAIL_SESSION_SERVICE_NAME.append("custom"))[ CD ]
