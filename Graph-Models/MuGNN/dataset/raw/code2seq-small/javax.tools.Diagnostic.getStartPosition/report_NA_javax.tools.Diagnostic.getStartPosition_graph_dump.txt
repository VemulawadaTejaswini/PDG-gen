Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_32 $$ String message = diagnostic.getMessage(Locale.US)[ FD ]
Line_21 $$ sourceFile = source != null ? Utils.convertToFile(source.toUri()) : null-->Line_27 $$ myFilesWithErrors.add(sourceFile)[ FD ]
Line_32 $$ String message = diagnostic.getMessage(Locale.US)-->Line_34 $$ LOG.info(message)[ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_36 $$ myContext.processMessage(new CompilerMessage(BUILDER_NAME, kind, message, srcPath, diagnostic.getStartPosition(), diagnostic.getEndPosition(), diagnostic.getPosition(), diagnostic.getLineNumber(), diagnostic.getColumnNumber()))[ CD ]
Line_3 $$ final CompilerMessage.Kind kind-->Line_11 $$ kind = BuildMessage.Kind.WARNING[ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_20 $$ final JavaFileObject source = diagnostic.getSource()[ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_32 $$ String message = diagnostic.getMessage(Locale.US)[ CD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_26 $$ if (sourceFile != null) [ CD ]
Line_21 $$ sourceFile = source != null ? Utils.convertToFile(source.toUri()) : null-->Line_26 $$ if (sourceFile != null) [ FD ]
Line_20 $$ final JavaFileObject source = diagnostic.getSource()-->Line_21 $$ sourceFile = source != null ? Utils.convertToFile(source.toUri()) : null[ FD ]
Line_6 $$ kind = BuildMessage.Kind.ERROR-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_26 $$ if (sourceFile != null) -->Line_27 $$ myFilesWithErrors.add(sourceFile)[ CD ]
Line_26 $$ if (sourceFile != null) -->Line_28 $$ srcPath = FileUtil.toSystemIndependentName(sourceFile.getPath())[ CD ]
Line_26 $$ if (sourceFile != null) -->Line_30 $$ srcPath = null[ CD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_18 $$ File sourceFile = null[ CD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_25 $$ final String srcPath[ CD ]
Line_18 $$ File sourceFile = null-->Line_28 $$ srcPath = FileUtil.toSystemIndependentName(sourceFile.getPath())[ FD ]
Line_18 $$ File sourceFile = null-->Line_27 $$ myFilesWithErrors.add(sourceFile)[ FD ]
Line_28 $$ srcPath = FileUtil.toSystemIndependentName(sourceFile.getPath())-->Line_30 $$ srcPath = null[ FD ]
Line_11 $$ kind = BuildMessage.Kind.WARNING-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_18 $$ File sourceFile = null-->Line_26 $$ if (sourceFile != null) [ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_36 $$ myContext.processMessage(new CompilerMessage(BUILDER_NAME, kind, message, srcPath, diagnostic.getStartPosition(), diagnostic.getEndPosition(), diagnostic.getPosition(), diagnostic.getLineNumber(), diagnostic.getColumnNumber()))[ FD ]
Line_18 $$ File sourceFile = null-->Line_21 $$ sourceFile = source != null ? Utils.convertToFile(source.toUri()) : null[ FD ]
Line_21 $$ sourceFile = source != null ? Utils.convertToFile(source.toUri()) : null-->Line_28 $$ srcPath = FileUtil.toSystemIndependentName(sourceFile.getPath())[ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_3 $$ final CompilerMessage.Kind kind[ CD ]
Line_25 $$ final String srcPath-->Line_30 $$ srcPath = null[ FD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_4 $$ switch(diagnostic.getKind()) [ FD ]
Line_3 $$ final CompilerMessage.Kind kind-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_33 $$ if (Utils.IS_TEST_MODE) -->Line_34 $$ LOG.info(message)[ CD ]
Line_2 $$ public void report(Diagnostic<? extends JavaFileObject> diagnostic) -->Line_33 $$ if (Utils.IS_TEST_MODE) [ CD ]
Line_3 $$ final CompilerMessage.Kind kind-->Line_6 $$ kind = BuildMessage.Kind.ERROR[ FD ]
Line_25 $$ final String srcPath-->Line_28 $$ srcPath = FileUtil.toSystemIndependentName(sourceFile.getPath())[ FD ]
Line_6 $$ kind = BuildMessage.Kind.ERROR-->Line_11 $$ kind = BuildMessage.Kind.WARNING[ FD ]
