Line_9 $$ XMLReader reader = result.getXMLReader()-->Line_18 $$ reader.parse(inputSource)[ FD ]
Line_8 $$ InputSource inputSource = result.getInputSource()-->Line_18 $$ reader.parse(inputSource)[ FD ]
Line_10 $$ reader.setContentHandler(new DefaultHandler() -->Line_14 $$ String s = new String(ch, start, length)[ CD ]
Line_9 $$ XMLReader reader = result.getXMLReader()-->Line_10 $$ reader.setContentHandler(new DefaultHandler() [ FD ]
Line_7 $$ SAXSource result = (SAXSource) converter.read(SAXSource.class, inputMessage)-->Line_9 $$ XMLReader reader = result.getXMLReader()[ FD ]
Line_7 $$ SAXSource result = (SAXSource) converter.read(SAXSource.class, inputMessage)-->Line_8 $$ InputSource inputSource = result.getInputSource()[ FD ]
Line_10 $$ reader.setContentHandler(new DefaultHandler() -->Line_15 $$ assertNotEquals("Invalid result", "Foo Bar", s)[ CD ]
Line_4 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(bodyExternal.getBytes("UTF-8"))-->Line_7 $$ SAXSource result = (SAXSource) converter.read(SAXSource.class, inputMessage)[ FD ]
Line_14 $$ String s = new String(ch, start, length)-->Line_15 $$ assertNotEquals("Invalid result", "Foo Bar", s)[ FD ]
Line_4 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(bodyExternal.getBytes("UTF-8"))-->Line_5 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "xml"))[ FD ]
