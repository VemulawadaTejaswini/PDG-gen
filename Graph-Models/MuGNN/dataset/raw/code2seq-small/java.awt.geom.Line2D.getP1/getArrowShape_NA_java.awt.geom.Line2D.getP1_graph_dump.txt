Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_11 $$ AffineTransform move = AffineTransform.getTranslateInstance(intersectionPoint.getX() - myArrowSize, intersectionPoint.getY() - myArrowSize / 2)[ CD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_5 $$ double theta = Math.asin(deltaY / length)[ CD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_6 $$ if (line.getP1().getX() > line.getP2().getX()) [ FD ]
Line_3 $$ final double deltaY = line.getP2().getY() - line.getP1().getY()-->Line_4 $$ final double length = Math.sqrt(Math.pow(deltaY, 2) + Math.pow(line.getP2().getX() - line.getP1().getX(), 2))[ FD ]
Line_7 $$ theta = Math.PI - theta-->Line_9 $$ AffineTransform rotate = AffineTransform.getRotateInstance(theta, myArrowSize, myArrowSize / 2)[ FD ]
Line_5 $$ double theta = Math.asin(deltaY / length)-->Line_7 $$ theta = Math.PI - theta[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_4 $$ final double length = Math.sqrt(Math.pow(deltaY, 2) + Math.pow(line.getP2().getX() - line.getP1().getX(), 2))[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_11 $$ AffineTransform move = AffineTransform.getTranslateInstance(intersectionPoint.getX() - myArrowSize, intersectionPoint.getY() - myArrowSize / 2)[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_12 $$ polygon = move.createTransformedShape(polygon)[ CD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_4 $$ final double length = Math.sqrt(Math.pow(deltaY, 2) + Math.pow(line.getP2().getX() - line.getP1().getX(), 2))[ CD ]
Line_9 $$ AffineTransform rotate = AffineTransform.getRotateInstance(theta, myArrowSize, myArrowSize / 2)-->Line_10 $$ Shape polygon = rotate.createTransformedShape(myArrowPolygon)[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_13 $$ return polygon[ CD ]
Line_5 $$ double theta = Math.asin(deltaY / length)-->Line_9 $$ AffineTransform rotate = AffineTransform.getRotateInstance(theta, myArrowSize, myArrowSize / 2)[ FD ]
Line_6 $$ if (line.getP1().getX() > line.getP2().getX()) -->Line_7 $$ theta = Math.PI - theta[ CD ]
Line_11 $$ AffineTransform move = AffineTransform.getTranslateInstance(intersectionPoint.getX() - myArrowSize, intersectionPoint.getY() - myArrowSize / 2)-->Line_12 $$ polygon = move.createTransformedShape(polygon)[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_3 $$ final double deltaY = line.getP2().getY() - line.getP1().getY()[ CD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_10 $$ Shape polygon = rotate.createTransformedShape(myArrowPolygon)[ CD ]
Line_10 $$ Shape polygon = rotate.createTransformedShape(myArrowPolygon)-->Line_12 $$ polygon = move.createTransformedShape(polygon)[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_3 $$ final double deltaY = line.getP2().getY() - line.getP1().getY()[ FD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_9 $$ AffineTransform rotate = AffineTransform.getRotateInstance(theta, myArrowSize, myArrowSize / 2)[ CD ]
Line_2 $$ public static Shape getArrowShape(Line2D line, Point2D intersectionPoint) -->Line_6 $$ if (line.getP1().getX() > line.getP2().getX()) [ CD ]
