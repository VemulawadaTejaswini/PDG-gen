Line_5 $$ byte[] newerFileBuffer = JBDiff.bsdiff(olderFileIn, newerFileIn, diffOutput)-->Line_12 $$ Utils.copyBytesToStream(newerFileBuffer, patchOutput)[ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_8 $$ patchOutput.write(1)[ FD ]
Line_4 $$ ByteArrayOutputStream diffOutput = new ByteArrayOutputStream()-->Line_5 $$ byte[] newerFileBuffer = JBDiff.bsdiff(olderFileIn, newerFileIn, diffOutput)[ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_11 $$ patchOutput.write(0)[ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_5 $$ byte[] newerFileBuffer = JBDiff.bsdiff(olderFileIn, newerFileIn, diffOutput)[ CD ]
Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) -->Line_11 $$ patchOutput.write(0)[ CD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_4 $$ ByteArrayOutputStream diffOutput = new ByteArrayOutputStream()[ CD ]
Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) -->Line_12 $$ Utils.copyBytesToStream(newerFileBuffer, patchOutput)[ CD ]
Line_4 $$ ByteArrayOutputStream diffOutput = new ByteArrayOutputStream()-->Line_9 $$ Utils.copyBytesToStream(diffOutput, patchOutput)[ FD ]
Line_4 $$ ByteArrayOutputStream diffOutput = new ByteArrayOutputStream()-->Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) [ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) [ CD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_12 $$ Utils.copyBytesToStream(newerFileBuffer, patchOutput)[ FD ]
Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) -->Line_9 $$ Utils.copyBytesToStream(diffOutput, patchOutput)[ CD ]
Line_7 $$ if (!isCritical() && diffOutput.size() < newerFileBuffer.length) -->Line_8 $$ patchOutput.write(1)[ CD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_6 $$ diffOutput.close()[ CD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_3 $$ Runner.logger.info("writing diff")[ CD ]
Line_4 $$ ByteArrayOutputStream diffOutput = new ByteArrayOutputStream()-->Line_6 $$ diffOutput.close()[ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_5 $$ byte[] newerFileBuffer = JBDiff.bsdiff(olderFileIn, newerFileIn, diffOutput)[ FD ]
Line_2 $$ protected void writeDiff(InputStream olderFileIn, InputStream newerFileIn, OutputStream patchOutput) throws IOException -->Line_9 $$ Utils.copyBytesToStream(diffOutput, patchOutput)[ FD ]
