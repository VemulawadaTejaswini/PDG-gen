Line_10 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_21 $$ if (os.size() > 0) [ FD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_9 $$ InputStream is = response.getBody()[ CD ]
Line_29 $$ if (b == '\n') -->Line_30 $$ handleFrame(os)[ CD ]
Line_20 $$ if (b == -1) -->Line_21 $$ if (os.size() > 0) [ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_16 $$ response.close()[ FD ]
Line_24 $$ if (logger.isTraceEnabled()) -->Line_25 $$ logger.trace("XHR receive completed")[ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_3 $$ if (!HttpStatus.OK.equals(response.getStatusCode())) [ CD ]
Line_11 $$ while (true) -->Line_19 $$ int b = is.read()[ CD ]
Line_21 $$ if (os.size() > 0) -->Line_22 $$ handleFrame(os)[ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_4 $$ throw new HttpServerErrorException(response.getStatusCode())[ FD ]
Line_29 $$ if (b == '\n') -->Line_32 $$ os.write(b)[ CD ]
Line_11 $$ while (true) -->Line_29 $$ if (b == '\n') [ CD ]
Line_11 $$ while (true) -->Line_20 $$ if (b == -1) [ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_6 $$ if (logger.isTraceEnabled()) [ CD ]
Line_10 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_22 $$ handleFrame(os)[ FD ]
Line_13 $$ if (logger.isDebugEnabled()) -->Line_14 $$ logger.debug("SockJS sockJsSession closed, closing response.")[ CD ]
Line_10 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_30 $$ handleFrame(os)[ FD ]
Line_12 $$ if (this.sockJsSession.isDisconnected()) -->Line_16 $$ response.close()[ CD ]
Line_19 $$ int b = is.read()-->Line_32 $$ os.write(b)[ FD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_35 $$ return null[ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_7 $$ logger.trace("XHR receive headers: " + response.getHeaders())[ FD ]
Line_9 $$ InputStream is = response.getBody()-->Line_19 $$ int b = is.read()[ FD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_11 $$ while (true) [ CD ]
Line_10 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_32 $$ os.write(b)[ FD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_10 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_3 $$ if (!HttpStatus.OK.equals(response.getStatusCode())) [ FD ]
Line_6 $$ if (logger.isTraceEnabled()) -->Line_7 $$ logger.trace("XHR receive headers: " + response.getHeaders())[ CD ]
Line_11 $$ while (true) -->Line_12 $$ if (this.sockJsSession.isDisconnected()) [ CD ]
Line_19 $$ int b = is.read()-->Line_29 $$ if (b == '\n') [ FD ]
Line_19 $$ int b = is.read()-->Line_20 $$ if (b == -1) [ FD ]
Line_2 $$ public Object extractData(ClientHttpResponse response) throws IOException -->Line_9 $$ InputStream is = response.getBody()[ FD ]
Line_20 $$ if (b == -1) -->Line_24 $$ if (logger.isTraceEnabled()) [ CD ]
Line_12 $$ if (this.sockJsSession.isDisconnected()) -->Line_13 $$ if (logger.isDebugEnabled()) [ CD ]
