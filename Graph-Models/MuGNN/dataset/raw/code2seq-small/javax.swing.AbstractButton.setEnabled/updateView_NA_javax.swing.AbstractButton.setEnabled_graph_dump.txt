Line_7 $$ if (selectedMethod instanceof GrMethod) -->Line_9 $$ superMethod.setEnabled(((GrMethod) selectedMethod).findDeepestSuperMethod() != null)[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_9 $$ superMethod.setEnabled(((GrMethod) selectedMethod).findDeepestSuperMethod() != null)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_6 $$ highlighters.add(rangeHighlighter)[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_4 $$ final TextRange textRange = selectedMethod.getTextRange()[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_12 $$ superMethod.setEnabled(findVariableToUse(selectedMethod) != null)[ FD ]
Line_5 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, attributes, HighlighterTargetArea.EXACT_RANGE)-->Line_6 $$ highlighters.add(rangeHighlighter)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_5 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_5 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_8 $$ superMethod.setText(USE_SUPER_METHOD_OF)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_4 $$ final TextRange textRange = selectedMethod.getTextRange()[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_3 $$ final MarkupModel markupModel = editor.getMarkupModel()[ FD ]
Line_7 $$ if (selectedMethod instanceof GrMethod) -->Line_11 $$ superMethod.setText(CHANGE_USAGES_OF)[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_6 $$ highlighters.add(rangeHighlighter)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_3 $$ final MarkupModel markupModel = editor.getMarkupModel()[ CD ]
Line_3 $$ final MarkupModel markupModel = editor.getMarkupModel()-->Line_5 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ if (selectedMethod instanceof GrMethod) -->Line_8 $$ superMethod.setText(USE_SUPER_METHOD_OF)[ CD ]
Line_4 $$ final TextRange textRange = selectedMethod.getTextRange()-->Line_5 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_7 $$ if (selectedMethod instanceof GrMethod) [ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_7 $$ if (selectedMethod instanceof GrMethod) [ FD ]
Line_7 $$ if (selectedMethod instanceof GrMethod) -->Line_12 $$ superMethod.setEnabled(findVariableToUse(selectedMethod) != null)[ CD ]
Line_2 $$ public static void updateView(GrParametersOwner selectedMethod, Editor editor, TextAttributes attributes, List<RangeHighlighter> highlighters, JCheckBox superMethod) -->Line_11 $$ superMethod.setText(CHANGE_USAGES_OF)[ FD ]
