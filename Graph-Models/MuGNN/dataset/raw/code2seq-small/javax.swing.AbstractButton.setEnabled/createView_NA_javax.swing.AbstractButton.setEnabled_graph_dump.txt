Line_46 $$ if (!showHidden && virtualFile.getName().charAt(0) == '.')-->Line_47 $$ return false[ CD ]
Line_13 $$ classField.setComponent(new EditorTextFieldWithBrowseButton(project, true, new JavaCodeFragment.VisibilityChecker() -->Line_15 $$ if (declaration instanceof PsiClass && place.getParent() instanceof PsiJavaCodeReferenceElement) [ CD ]
Line_2 $$ private void createView() -->Line_10 $$ classTest.setEnabled(true)[ CD ]
Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() -->Line_57 $$ propertiesTableView.setRowSelectionInterval(index, index)[ CD ]
Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() -->Line_61 $$ int idx = propertiesTableView.getSelectedRow() - 1[ CD ]
Line_61 $$ int idx = propertiesTableView.getSelectedRow() - 1-->Line_77 $$ myListenersList.setSelectedIndex(idx)[ FD ]
Line_44 $$ FileChooserDescriptor propertiesFileDescriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_48 $$ return virtualFile.isDirectory() || "properties".equals(virtualFile.getExtension())[ FD ]
Line_2 $$ private void createView() -->Line_5 $$ suiteTest.setSelected(false)[ CD ]
Line_2 $$ private void createView() -->Line_43 $$ propertiesFile.setComponent(textFieldWithBrowseButton)[ CD ]
Line_44 $$ FileChooserDescriptor propertiesFileDescriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_46 $$ if (!showHidden && virtualFile.getName().charAt(0) == '.')[ CD ]
Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() -->Line_55 $$ propertiesTableModel.addParameter()[ CD ]
Line_73 $$ for (int row : myListenersList.getSelectedIndices()) -->Line_74 $$ listenerModel.removeListener(row)[ FD ]
Line_2 $$ private void createView() -->Line_33 $$ packageField.setEnabled(true)[ CD ]
Line_2 $$ private void createView() -->Line_9 $$ classTest.setSelected(false)[ CD ]
Line_76 $$ if (idx > -1)-->Line_77 $$ myListenersList.setSelectedIndex(idx)[ CD ]
Line_44 $$ FileChooserDescriptor propertiesFileDescriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_48 $$ return virtualFile.isDirectory() || "properties".equals(virtualFile.getExtension())[ CD ]
Line_61 $$ int idx = propertiesTableView.getSelectedRow() - 1-->Line_66 $$ propertiesTableView.setRowSelectionInterval(idx, idx)[ FD ]
Line_2 $$ private void createView() -->Line_34 $$ packageField.setComponent(new EditorTextFieldWithBrowseButton(project, false))[ CD ]
Line_61 $$ int idx = propertiesTableView.getSelectedRow() - 1-->Line_65 $$ if (idx > -1)[ FD ]
Line_2 $$ private void createView() -->Line_7 $$ groupTest.setSelected(false)[ CD ]
Line_72 $$ int idx = myListenersList.getSelectedIndex() - 1-->Line_76 $$ if (idx > -1)[ FD ]
Line_15 $$ if (declaration instanceof PsiClass && place.getParent() instanceof PsiJavaCodeReferenceElement) -->Line_16 $$ return Visibility.VISIBLE[ CD ]
Line_61 $$ int idx = propertiesTableView.getSelectedRow() - 1-->Line_76 $$ if (idx > -1)[ FD ]
Line_65 $$ if (idx > -1)-->Line_66 $$ propertiesTableView.setRowSelectionInterval(idx, idx)[ CD ]
Line_70 $$ myListenersPanel.add(ToolbarDecorator.createDecorator(myListenersList).setAddAction(new AddActionButtonRunnable()).setRemoveAction(new AnActionButtonRunnable() -->Line_72 $$ int idx = myListenersList.getSelectedIndex() - 1[ CD ]
Line_62 $$ for (int row : propertiesTableView.getSelectedRows()) -->Line_74 $$ listenerModel.removeListener(row)[ FD ]
Line_72 $$ int idx = myListenersList.getSelectedIndex() - 1-->Line_77 $$ myListenersList.setSelectedIndex(idx)[ FD ]
Line_2 $$ private void createView() -->Line_8 $$ groupTest.setEnabled(true)[ CD ]
Line_2 $$ private void createView() -->Line_32 $$ packageField.setVisible(true)[ CD ]
Line_2 $$ private void createView() -->Line_11 $$ patternTest.setSelected(false)[ CD ]
Line_56 $$ int index = propertiesTableModel.getRowCount() - 1-->Line_57 $$ propertiesTableView.setRowSelectionInterval(index, index)[ FD ]
Line_70 $$ myListenersPanel.add(ToolbarDecorator.createDecorator(myListenersList).setAddAction(new AddActionButtonRunnable()).setRemoveAction(new AnActionButtonRunnable() -->Line_76 $$ if (idx > -1)[ CD ]
Line_2 $$ private void createView() -->Line_13 $$ classField.setComponent(new EditorTextFieldWithBrowseButton(project, true, new JavaCodeFragment.VisibilityChecker() [ CD ]
Line_2 $$ private void createView() -->Line_51 $$ textFieldWithBrowseButton.addBrowseFolderListener("TestNG", "Select .properties file for test properties", project, propertiesFileDescriptor)[ CD ]
Line_2 $$ private void createView() -->Line_6 $$ suiteTest.setEnabled(true)[ CD ]
Line_2 $$ private void createView() -->Line_31 $$ suiteField.setComponent(new TextFieldWithBrowseButton())[ CD ]
Line_2 $$ private void createView() -->Line_36 $$ outputDirectory.setComponent(outputDirectoryButton)[ CD ]
Line_2 $$ private void createView() -->Line_39 $$ moduleClasspath.setComponent(new ModulesComboBox())[ CD ]
Line_62 $$ for (int row : propertiesTableView.getSelectedRows()) -->Line_63 $$ propertiesTableModel.removeProperty(row)[ FD ]
Line_2 $$ private void createView() -->Line_3 $$ commonParametersPanel.add(commonJavaParameters, BorderLayout.CENTER)[ CD ]
Line_2 $$ private void createView() -->Line_12 $$ patternTest.setEnabled(true)[ CD ]
Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() -->Line_56 $$ int index = propertiesTableModel.getRowCount() - 1[ CD ]
Line_13 $$ classField.setComponent(new EditorTextFieldWithBrowseButton(project, true, new JavaCodeFragment.VisibilityChecker() -->Line_15 $$ if (declaration instanceof PsiClass && place.getParent() instanceof PsiJavaCodeReferenceElement) [ FD ]
Line_13 $$ classField.setComponent(new EditorTextFieldWithBrowseButton(project, true, new JavaCodeFragment.VisibilityChecker() -->Line_25 $$ return Visibility.NOT_VISIBLE[ CD ]
Line_2 $$ private void createView() -->Line_4 $$ packageTest.setSelected(false)[ CD ]
Line_2 $$ private void createView() -->Line_70 $$ myListenersPanel.add(ToolbarDecorator.createDecorator(myListenersList).setAddAction(new AddActionButtonRunnable()).setRemoveAction(new AnActionButtonRunnable() [ CD ]
Line_2 $$ private void createView() -->Line_29 $$ methodField.setComponent(methodEditorTextField)[ CD ]
Line_70 $$ myListenersPanel.add(ToolbarDecorator.createDecorator(myListenersList).setAddAction(new AddActionButtonRunnable()).setRemoveAction(new AnActionButtonRunnable() -->Line_81 $$ return !project.isDefault()[ CD ]
Line_44 $$ FileChooserDescriptor propertiesFileDescriptor = new FileChooserDescriptor(true, false, false, false, false, false) -->Line_46 $$ if (!showHidden && virtualFile.getName().charAt(0) == '.')[ FD ]
Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() -->Line_65 $$ if (idx > -1)[ CD ]
Line_2 $$ private void createView() -->Line_53 $$ myPropertiesPanel.add(ToolbarDecorator.createDecorator(propertiesTableView).setAddAction(new AnActionButtonRunnable() [ CD ]
Line_2 $$ private void createView() -->Line_38 $$ moduleClasspath.setEnabled(true)[ CD ]
Line_2 $$ private void createView() -->Line_37 $$ outputDirectoryButton.addBrowseFolderListener("TestNG", "Select test output directory", project, FileChooserDescriptorFactory.createSingleFolderDescriptor())[ CD ]
Line_19 $$ if (declaration instanceof PsiClass && new TestClassBrowser(project, TestNGConfigurationEditor.this).getFilter().isAccepted((PsiClass) declaration)) -->Line_20 $$ return Visibility.VISIBLE[ CD ]
Line_2 $$ private void createView() -->Line_30 $$ groupField.setComponent(new TextFieldWithBrowseButton.NoPathCompletion())[ CD ]
