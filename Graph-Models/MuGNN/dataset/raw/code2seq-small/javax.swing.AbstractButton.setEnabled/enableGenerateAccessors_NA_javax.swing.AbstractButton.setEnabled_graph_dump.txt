Line_3 $$ boolean existingNotALibraryClass = false-->Line_16 $$ myGenerateAccessorsCheckBox.setEnabled(existingNotALibraryClass)[ FD ]
Line_3 $$ boolean existingNotALibraryClass = false-->Line_17 $$ myEscalateVisibilityCheckBox.setEnabled(existingNotALibraryClass)[ FD ]
Line_11 $$ existingNotALibraryClass = ProjectRootManager.getInstance(myProject).getFileIndex().isUnderSourceRootOfType(virtualFile, JavaModuleSourceRootTypes.SOURCES)-->Line_17 $$ myEscalateVisibilityCheckBox.setEnabled(existingNotALibraryClass)[ FD ]
Line_9 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_11 $$ existingNotALibraryClass = ProjectRootManager.getInstance(myProject).getFileIndex().isUnderSourceRootOfType(virtualFile, JavaModuleSourceRootTypes.SOURCES)[ FD ]
Line_2 $$ private void enableGenerateAccessors() -->Line_17 $$ myEscalateVisibilityCheckBox.setEnabled(existingNotALibraryClass)[ CD ]
Line_2 $$ private void enableGenerateAccessors() -->Line_3 $$ boolean existingNotALibraryClass = false[ CD ]
Line_9 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_10 $$ if (virtualFile != null) [ FD ]
Line_7 $$ final PsiFile containingFile = selectedClass.getContainingFile()-->Line_8 $$ if (containingFile != null) [ FD ]
Line_6 $$ if (selectedClass != null) -->Line_7 $$ final PsiFile containingFile = selectedClass.getContainingFile()[ CD ]
Line_6 $$ if (selectedClass != null) -->Line_8 $$ if (containingFile != null) [ CD ]
Line_7 $$ final PsiFile containingFile = selectedClass.getContainingFile()-->Line_9 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_2 $$ private void enableGenerateAccessors() -->Line_16 $$ myGenerateAccessorsCheckBox.setEnabled(existingNotALibraryClass)[ CD ]
Line_4 $$ if (useExistingClassButton.isSelected()) -->Line_6 $$ if (selectedClass != null) [ CD ]
Line_5 $$ final PsiClass selectedClass = JavaPsiFacade.getInstance(myProject).findClass(existingClassField.getText(), GlobalSearchScope.projectScope(myProject))-->Line_7 $$ final PsiFile containingFile = selectedClass.getContainingFile()[ FD ]
Line_10 $$ if (virtualFile != null) -->Line_11 $$ existingNotALibraryClass = ProjectRootManager.getInstance(myProject).getFileIndex().isUnderSourceRootOfType(virtualFile, JavaModuleSourceRootTypes.SOURCES)[ CD ]
Line_11 $$ existingNotALibraryClass = ProjectRootManager.getInstance(myProject).getFileIndex().isUnderSourceRootOfType(virtualFile, JavaModuleSourceRootTypes.SOURCES)-->Line_16 $$ myGenerateAccessorsCheckBox.setEnabled(existingNotALibraryClass)[ FD ]
Line_3 $$ boolean existingNotALibraryClass = false-->Line_11 $$ existingNotALibraryClass = ProjectRootManager.getInstance(myProject).getFileIndex().isUnderSourceRootOfType(virtualFile, JavaModuleSourceRootTypes.SOURCES)[ FD ]
Line_8 $$ if (containingFile != null) -->Line_10 $$ if (virtualFile != null) [ CD ]
Line_5 $$ final PsiClass selectedClass = JavaPsiFacade.getInstance(myProject).findClass(existingClassField.getText(), GlobalSearchScope.projectScope(myProject))-->Line_6 $$ if (selectedClass != null) [ FD ]
Line_4 $$ if (useExistingClassButton.isSelected()) -->Line_5 $$ final PsiClass selectedClass = JavaPsiFacade.getInstance(myProject).findClass(existingClassField.getText(), GlobalSearchScope.projectScope(myProject))[ CD ]
Line_8 $$ if (containingFile != null) -->Line_9 $$ final VirtualFile virtualFile = containingFile.getVirtualFile()[ CD ]
Line_2 $$ private void enableGenerateAccessors() -->Line_4 $$ if (useExistingClassButton.isSelected()) [ CD ]
