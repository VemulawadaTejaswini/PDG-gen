Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_51 $$ final char c = canonicalText.charAt(index)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_34 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_5 $$ signature.next()[ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_36 $$ processTypeArgument(signature, canonicalText)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_50 $$ for (int index = 0; index < canonicalText.length(); index++) [ CD ]
Line_50 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_51 $$ final char c = canonicalText.charAt(index)[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_59 $$ return canonicalText.toString()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_10 $$ char previous = signature.previous()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_3 $$ assert signature.current() == 'L'[ FD ]
Line_22 $$ if (standAlone$) -->Line_23 $$ canonicalText.append('$')[ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_43 $$ canonicalText.append(signature.current())[ FD ]
Line_50 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_52 $$ if ('0' <= c && c <= '1') [ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_53 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_59 $$ return canonicalText.toString()[ CD ]
Line_17 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_18 $$ char next = signature.next()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_35 $$ do [ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_23 $$ canonicalText.append('$')[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_19 $$ signature.previous()[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_38 $$ canonicalText.append('>')[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_54 $$ canonicalText.setCharAt(index - 1, '$')[ FD ]
Line_52 $$ if ('0' <= c && c <= '1') -->Line_53 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') [ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_17 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) [ FD ]
Line_50 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_51 $$ final char c = canonicalText.charAt(index)[ CD ]
Line_17 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_19 $$ signature.previous()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_47 $$ if (signature.current() == CharacterIterator.DONE) [ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_7 $$ switch(signature.current()) [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_45 $$ signature.next()[ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_14 $$ if (standAlone$) [ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_50 $$ for (int index = 0; index < canonicalText.length(); index++) [ FD ]
Line_14 $$ if (standAlone$) -->Line_15 $$ canonicalText.append('$')[ CD ]
Line_35 $$ do -->Line_36 $$ processTypeArgument(signature, canonicalText)[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_36 $$ processTypeArgument(signature, canonicalText)[ FD ]
Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) -->Line_45 $$ signature.next()[ CD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_11 $$ signature.next()[ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_33 $$ canonicalText.append('<')[ FD ]
Line_53 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') -->Line_54 $$ canonicalText.setCharAt(index - 1, '$')[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_47 $$ if (signature.current() == CharacterIterator.DONE) [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) [ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_9 $$ if (signature.getIndex() > 0) [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_4 $$ StringBuilder canonicalText = new StringBuilder()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_58 $$ signature.next()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_58 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_43 $$ canonicalText.append(signature.current())[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_5 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_11 $$ signature.next()[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_30 $$ canonicalText.append('.')[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_18 $$ char next = signature.next()[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_15 $$ canonicalText.append('$')[ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_10 $$ char previous = signature.previous()[ CD ]
Line_17 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_22 $$ if (standAlone$) [ CD ]
Line_14 $$ if (standAlone$) -->Line_17 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) [ CD ]
