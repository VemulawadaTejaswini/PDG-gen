Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) [ CD ]
Line_32 $$ if (range != null) -->Line_33 $$ doc.deleteString(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_55 $$ if (composedTextIndex < text.getEndIndex()) -->Line_64 $$ composedTextRange = ProperTextRange.from(getCaretModel().getOffset(), composedText.length())[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_21 $$ AttributedCharacterIterator text = e.getText()[ CD ]
Line_9 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_14 $$ if (caretOffset > 0) [ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_20 $$ int commitCount = e.getCommittedCharacterCount()[ CD ]
Line_40 $$ if (text != null) -->Line_41 $$ text.first()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_40 $$ if (text != null) [ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_20 $$ int commitCount = e.getCommittedCharacterCount()[ FD ]
Line_55 $$ if (composedTextIndex < text.getEndIndex()) -->Line_56 $$ createComposedString(composedTextIndex, text)[ CD ]
Line_57 $$ runUndoTransparent(new Runnable() -->Line_61 $$ EditorModificationUtil.insertStringAtCaret(EditorImpl.this, composedText, false, false)[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) [ FD ]
Line_31 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))-->Line_32 $$ if (range != null) [ FD ]
Line_9 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_15 $$ caret.setSelection(caretOffset - 1, caretOffset)[ FD ]
Line_26 $$ runUndoTransparent(new Runnable() -->Line_30 $$ int docLength = doc.getTextLength()[ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_21 $$ AttributedCharacterIterator text = e.getText()[ FD ]
Line_25 $$ if (!isViewer() && doc.isWritable()) -->Line_26 $$ runUndoTransparent(new Runnable() [ CD ]
Line_2 $$ private void replaceInputMethodText(@NotNull InputMethodEvent e) -->Line_24 $$ if (composedText != null) [ CD ]
Line_13 $$ int caretOffset = caret.getOffset()-->Line_15 $$ caret.setSelection(caretOffset - 1, caretOffset)[ FD ]
Line_3 $$ if (myNeedToSelectPreviousChar && SystemInfo.isMac && (Registry.is("ide.mac.pressAndHold.brute.workaround") || Registry.is("ide.mac.pressAndHold.workaround") && (e.getCommittedCharacterCount() > 0 || e.getCaret() == null))) -->Line_9 $$ getCaretModel().runForEachCaret(new CaretAction() [ CD ]
Line_24 $$ if (composedText != null) -->Line_25 $$ if (!isViewer() && doc.isWritable()) [ CD ]
Line_26 $$ runUndoTransparent(new Runnable() -->Line_32 $$ if (range != null) [ CD ]
Line_14 $$ if (caretOffset > 0) -->Line_15 $$ caret.setSelection(caretOffset - 1, caretOffset)[ CD ]
Line_9 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_13 $$ int caretOffset = caret.getOffset()[ CD ]
Line_9 $$ getCaretModel().runForEachCaret(new CaretAction() -->Line_13 $$ int caretOffset = caret.getOffset()[ FD ]
Line_26 $$ runUndoTransparent(new Runnable() -->Line_31 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))[ CD ]
Line_55 $$ if (composedTextIndex < text.getEndIndex()) -->Line_57 $$ runUndoTransparent(new Runnable() [ CD ]
Line_13 $$ int caretOffset = caret.getOffset()-->Line_14 $$ if (caretOffset > 0) [ FD ]
Line_31 $$ ProperTextRange range = composedTextRange.intersection(new TextRange(0, docLength))-->Line_33 $$ doc.deleteString(range.getStartOffset(), range.getEndOffset())[ FD ]
