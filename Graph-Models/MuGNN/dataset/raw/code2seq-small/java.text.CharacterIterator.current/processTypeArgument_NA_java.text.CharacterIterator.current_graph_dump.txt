Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_6 $$ canonicalText.append(',')[ FD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_3 $$ String typeArgument = parseClassOrTypeVariableElement(signature)[ FD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_5 $$ if (signature.current() != '>') [ FD ]
Line_5 $$ if (signature.current() != '>') -->Line_6 $$ canonicalText.append(',')[ CD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_5 $$ if (signature.current() != '>') [ CD ]
Line_3 $$ String typeArgument = parseClassOrTypeVariableElement(signature)-->Line_4 $$ canonicalText.append(typeArgument)[ FD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_4 $$ canonicalText.append(typeArgument)[ FD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_4 $$ canonicalText.append(typeArgument)[ CD ]
Line_2 $$ private static void processTypeArgument(CharacterIterator signature, StringBuilder canonicalText) throws ClsFormatException -->Line_3 $$ String typeArgument = parseClassOrTypeVariableElement(signature)[ CD ]
