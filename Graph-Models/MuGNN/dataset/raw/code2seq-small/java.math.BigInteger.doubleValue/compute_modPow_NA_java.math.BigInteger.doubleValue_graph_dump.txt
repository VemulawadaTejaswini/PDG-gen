Line_6 $$ for (; e > E.limit; e += E.delta) -->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ CD ]
Line_6 $$ for (; e > E.limit; e += E.delta) -->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ FD ]
Line_3 $$ long e = E.value-->Line_6 $$ for (; e > E.limit; e += E.delta) [ FD ]
Line_6 $$ for (; e > E.limit; e += E.delta) -->Line_8 $$ n += N.delta[ CD ]
Line_2 $$ double compute_modPow() -->Line_5 $$ double s = 0[ CD ]
Line_8 $$ n += N.delta-->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ FD ]
Line_4 $$ long n = N.value-->Line_8 $$ n += N.delta[ FD ]
Line_5 $$ double s = 0-->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ FD ]
Line_2 $$ double compute_modPow() -->Line_3 $$ long e = E.value[ CD ]
Line_2 $$ double compute_modPow() -->Line_10 $$ return s[ CD ]
Line_4 $$ long n = N.value-->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ FD ]
Line_2 $$ double compute_modPow() -->Line_6 $$ for (; e > E.limit; e += E.delta) [ CD ]
Line_3 $$ long e = E.value-->Line_7 $$ s = Modular.addMod(s, TWO.modPow(BigInteger.valueOf(e), BigInteger.valueOf(n)).doubleValue() / n)[ FD ]
Line_2 $$ double compute_modPow() -->Line_4 $$ long n = N.value[ CD ]
