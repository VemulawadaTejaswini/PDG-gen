Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_18 $$ WatchEvent<File> watchEvent = (WatchEvent<File>) watchEvents.get(i)[ FD ]
Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_23 $$ WatchEvent.Kind<?> kind = watchEvent.kind()[ CD ]
Line_27 $$ if (!watchKey.reset()) -->Line_31 $$ processMissingFilePath(getBaseFilePath())[ CD ]
Line_19 $$ File file = watchEvent.context()-->Line_24 $$ processWatchEvent(kind.name(), file.toPath())[ FD ]
Line_5 $$ WatchKey watchKey = null-->Line_16 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()[ FD ]
Line_5 $$ WatchKey watchKey = null-->Line_7 $$ watchKey = _watchService.take()[ FD ]
Line_28 $$ if (_logger.isTraceEnabled()) -->Line_29 $$ _logger.trace("Unregistered file path [ CD ]
Line_11 $$ if (_logger.isTraceEnabled()) -->Line_12 $$ _logger.trace(e.getMessage(), e)[ CD ]
Line_23 $$ WatchEvent.Kind<?> kind = watchEvent.kind()-->Line_24 $$ processWatchEvent(kind.name(), file.toPath())[ FD ]
Line_19 $$ File file = watchEvent.context()-->Line_20 $$ if (file == null) [ FD ]
Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_19 $$ File file = watchEvent.context()[ CD ]
Line_16 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()-->Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) [ FD ]
Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_20 $$ if (file == null) [ CD ]
Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_24 $$ processWatchEvent(kind.name(), file.toPath())[ CD ]
Line_16 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()-->Line_18 $$ WatchEvent<File> watchEvent = (WatchEvent<File>) watchEvents.get(i)[ FD ]
Line_7 $$ watchKey = _watchService.take()-->Line_27 $$ if (!watchKey.reset()) [ FD ]
Line_17 $$ for (int i = 0; i < watchEvents.size(); i++) -->Line_18 $$ WatchEvent<File> watchEvent = (WatchEvent<File>) watchEvents.get(i)[ CD ]
Line_2 $$ public void run() -->Line_3 $$ while (true) [ CD ]
Line_18 $$ WatchEvent<File> watchEvent = (WatchEvent<File>) watchEvents.get(i)-->Line_19 $$ File file = watchEvent.context()[ FD ]
Line_5 $$ WatchKey watchKey = null-->Line_27 $$ if (!watchKey.reset()) [ FD ]
Line_7 $$ watchKey = _watchService.take()-->Line_16 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()[ FD ]
Line_18 $$ WatchEvent<File> watchEvent = (WatchEvent<File>) watchEvents.get(i)-->Line_23 $$ WatchEvent.Kind<?> kind = watchEvent.kind()[ FD ]
Line_27 $$ if (!watchKey.reset()) -->Line_28 $$ if (_logger.isTraceEnabled()) [ CD ]
