Line_7 $$ final MetadataImplementor metadata = (MetadataImplementor) new MetadataSources(ssr).addAnnotatedClass(TestEntity.class).buildMetadata()-->Line_8 $$ metadata.validate()[ FD ]
Line_9 $$ SchemaUpdate su = new SchemaUpdate(ssr, metadata)-->Line_12 $$ su.setDelimiter(DELIMITER)[ FD ]
Line_9 $$ SchemaUpdate su = new SchemaUpdate(ssr, metadata)-->Line_11 $$ su.setOutputFile(output.getAbsolutePath())[ FD ]
Line_9 $$ SchemaUpdate su = new SchemaUpdate(ssr, metadata)-->Line_14 $$ su.execute(Target.SCRIPT)[ FD ]
Line_3 $$ StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().applySetting(Environment.HBM2DDL_AUTO, "none").build()-->Line_17 $$ StandardServiceRegistryBuilder.destroy(ssr)[ FD ]
Line_9 $$ SchemaUpdate su = new SchemaUpdate(ssr, metadata)-->Line_13 $$ su.setFormat(true)[ FD ]
Line_5 $$ File output = File.createTempFile("update_script", ".sql")-->Line_6 $$ output.deleteOnExit()[ FD ]
Line_9 $$ SchemaUpdate su = new SchemaUpdate(ssr, metadata)-->Line_10 $$ su.setHaltOnError(true)[ FD ]
Line_2 $$ public void testSetFormat() throws Exception -->Line_3 $$ StandardServiceRegistry ssr = new StandardServiceRegistryBuilder().applySetting(Environment.HBM2DDL_AUTO, "none").build()[ CD ]
Line_5 $$ File output = File.createTempFile("update_script", ".sql")-->Line_15 $$ Assert.assertEquals(AFTER_FORMAT, new String(Files.readAllBytes(output.toPath())))[ FD ]
Line_5 $$ File output = File.createTempFile("update_script", ".sql")-->Line_11 $$ su.setOutputFile(output.getAbsolutePath())[ FD ]
