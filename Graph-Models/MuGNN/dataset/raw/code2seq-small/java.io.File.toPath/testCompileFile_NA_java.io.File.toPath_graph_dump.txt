Line_6 $$ File inputFile = new File(testDir, "input.scss")-->Line_7 $$ if (!inputFile.exists()) [ FD ]
Line_12 $$ File expectedOutputFile = new File(testDir, "expected_output.css")-->Line_13 $$ String expectedOutput = read(expectedOutputFile.toPath())[ FD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_3 $$ SassCompiler sassCompiler = new RubySassCompiler()[ CD ]
Line_4 $$ File sassSpecDir = new File("../sass-compiler-jni/src/test/resources/com/liferay/sass" + "/compiler/jni/internal/dependencies/sass-spec")-->Line_5 $$ for (File testDir : sassSpecDir.listFiles()) [ FD ]
Line_3 $$ SassCompiler sassCompiler = new RubySassCompiler()-->Line_10 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "")[ FD ]
Line_6 $$ File inputFile = new File(testDir, "input.scss")-->Line_10 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "")[ FD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_4 $$ File sassSpecDir = new File("../sass-compiler-jni/src/test/resources/com/liferay/sass" + "/compiler/jni/internal/dependencies/sass-spec")[ CD ]
Line_10 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "")-->Line_11 $$ Assert.assertNotNull(actualOutput)[ FD ]
Line_13 $$ String expectedOutput = read(expectedOutputFile.toPath())-->Line_14 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_10 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "")-->Line_14 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
