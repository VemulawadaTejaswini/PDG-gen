Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_8 $$ if (name.equals(n)) [ CD ]
Line_7 $$ final String n = cn + kind.extension-->Line_11 $$ if (name.equalsIgnoreCase(n)) [ FD ]
Line_7 $$ final String n = cn + kind.extension-->Line_8 $$ if (name.equals(n)) [ FD ]
Line_8 $$ if (name.equals(n)) -->Line_9 $$ return true[ CD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_11 $$ if (name.equalsIgnoreCase(n)) [ CD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_17 $$ return false[ CD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_3 $$ cn.getClass()[ FD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_4 $$ if (kind == Kind.OTHER && getKind() != kind) [ CD ]
Line_4 $$ if (kind == Kind.OTHER && getKind() != kind) -->Line_5 $$ return false[ CD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_7 $$ final String n = cn + kind.extension[ CD ]
Line_7 $$ final String n = cn + kind.extension-->Line_13 $$ return n.equals(file.toPath().toRealPath(LinkOption.NOFOLLOW_LINKS).getFileName().toString())[ FD ]
Line_2 $$ public boolean isNameCompatible(String cn, JavaFileObject.Kind kind) -->Line_3 $$ cn.getClass()[ CD ]
