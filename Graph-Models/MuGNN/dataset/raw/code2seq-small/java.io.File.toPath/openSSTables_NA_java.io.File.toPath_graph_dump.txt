Line_15 $$ if (!new File(desc.filenameFor(Component.PRIMARY_INDEX)).exists()) -->Line_17 $$ return false[ CD ]
Line_2 $$ protected Collection<SSTableReader> openSSTables(final Map<InetAddress, Collection<Range<Token>>> ranges) -->Line_4 $$ LifecycleTransaction.getFiles(directory.toPath(), ( file,  type) -> [ CD ]
Line_19 $$ CFMetaData metadata = client.getTableMetadata(desc.cfname)-->Line_20 $$ if (metadata == null) [ FD ]
Line_31 $$ if (new File(desc.filenameFor(Component.STATS)).exists())-->Line_32 $$ components.add(Component.STATS)[ CD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)[ FD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_28 $$ components.add(Component.SUMMARY)[ FD ]
Line_36 $$ for (Map.Entry<InetAddress, Collection<Range<Token>>> entry : ranges.entrySet()) -->Line_37 $$ InetAddress endpoint = entry.getKey()[ FD ]
Line_12 $$ Descriptor desc = p == null ? null : p.left-->Line_31 $$ if (new File(desc.filenameFor(Component.STATS)).exists())[ FD ]
Line_2 $$ protected Collection<SSTableReader> openSSTables(final Map<InetAddress, Collection<Range<Token>>> ranges) -->Line_51 $$ return sstables[ CD ]
Line_2 $$ protected Collection<SSTableReader> openSSTables(final Map<InetAddress, Collection<Range<Token>>> ranges) -->Line_3 $$ outputHandler.output("Opening sstables and calculating sections to stream")[ CD ]
Line_7 $$ if (type != Directories.FileType.FINAL) -->Line_8 $$ outputHandler.output(String.format("Skipping temporary file %s", name))[ CD ]
Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)-->Line_40 $$ long estimatedKeys = sstable.estimatedKeysForRanges(tokenRanges)[ FD ]
Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)-->Line_41 $$ Ref<SSTableReader> ref = sstable.ref()[ FD ]
Line_2 $$ protected Collection<SSTableReader> openSSTables(final Map<InetAddress, Collection<Range<Token>>> ranges) -->Line_36 $$ for (Map.Entry<InetAddress, Collection<Range<Token>>> entry : ranges.entrySet()) [ FD ]
Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)-->Line_39 $$ List<Pair<Long, Long>> sstableSections = sstable.getPositionsForRanges(tokenRanges)[ FD ]
Line_38 $$ Collection<Range<Token>> tokenRanges = entry.getValue()-->Line_40 $$ long estimatedKeys = sstable.estimatedKeysForRanges(tokenRanges)[ FD ]
Line_36 $$ for (Map.Entry<InetAddress, Collection<Range<Token>>> entry : ranges.entrySet()) -->Line_38 $$ Collection<Range<Token>> tokenRanges = entry.getValue()[ FD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_32 $$ components.add(Component.STATS)[ FD ]
Line_6 $$ String name = file.getName()-->Line_21 $$ outputHandler.output(String.format("Skipping file %s: table %s.%s doesn't exist", name, keyspace, desc.cfname))[ FD ]
Line_29 $$ if (new File(desc.filenameFor(Component.COMPRESSION_INFO)).exists())-->Line_30 $$ components.add(Component.COMPRESSION_INFO)[ CD ]
Line_38 $$ Collection<Range<Token>> tokenRanges = entry.getValue()-->Line_39 $$ List<Pair<Long, Long>> sstableSections = sstable.getPositionsForRanges(tokenRanges)[ FD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_25 $$ components.add(Component.DATA)[ FD ]
Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)-->Line_45 $$ sstable.releaseSummary()[ FD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_26 $$ components.add(Component.PRIMARY_INDEX)[ FD ]
Line_6 $$ String name = file.getName()-->Line_16 $$ outputHandler.output(String.format("Skipping file %s because index is missing", name))[ FD ]
Line_42 $$ StreamSession.SSTableStreamingSections details = new StreamSession.SSTableStreamingSections(ref, sstableSections, estimatedKeys, ActiveRepairService.UNREPAIRED_SSTABLE)-->Line_43 $$ streamingDetails.put(endpoint, details)[ FD ]
Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)-->Line_35 $$ sstables.add(sstable)[ FD ]
Line_6 $$ String name = file.getName()-->Line_47 $$ outputHandler.output(String.format("Skipping file %s, error opening it: %s", name, e.getMessage()))[ FD ]
Line_24 $$ Set<Component> components = new HashSet()-->Line_30 $$ components.add(Component.COMPRESSION_INFO)[ FD ]
Line_6 $$ String name = file.getName()-->Line_8 $$ outputHandler.output(String.format("Skipping temporary file %s", name))[ FD ]
Line_12 $$ Descriptor desc = p == null ? null : p.left-->Line_27 $$ if (new File(desc.filenameFor(Component.SUMMARY)).exists())[ FD ]
Line_5 $$ File dir = file.getParentFile()-->Line_11 $$ Pair<Descriptor, Component> p = SSTable.tryComponentFromFilename(dir, name)[ FD ]
Line_19 $$ CFMetaData metadata = client.getTableMetadata(desc.cfname)-->Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)[ FD ]
Line_37 $$ InetAddress endpoint = entry.getKey()-->Line_43 $$ streamingDetails.put(endpoint, details)[ FD ]
Line_7 $$ if (type != Directories.FileType.FINAL) -->Line_9 $$ return false[ CD ]
Line_6 $$ String name = file.getName()-->Line_11 $$ Pair<Descriptor, Component> p = SSTable.tryComponentFromFilename(dir, name)[ FD ]
Line_15 $$ if (!new File(desc.filenameFor(Component.PRIMARY_INDEX)).exists()) -->Line_16 $$ outputHandler.output(String.format("Skipping file %s because index is missing", name))[ CD ]
Line_12 $$ Descriptor desc = p == null ? null : p.left-->Line_15 $$ if (!new File(desc.filenameFor(Component.PRIMARY_INDEX)).exists()) [ FD ]
Line_27 $$ if (new File(desc.filenameFor(Component.SUMMARY)).exists())-->Line_28 $$ components.add(Component.SUMMARY)[ CD ]
Line_20 $$ if (metadata == null) -->Line_21 $$ outputHandler.output(String.format("Skipping file %s: table %s.%s doesn't exist", name, keyspace, desc.cfname))[ CD ]
Line_13 $$ if (p == null || !p.right.equals(Component.DATA))-->Line_14 $$ return false[ CD ]
Line_12 $$ Descriptor desc = p == null ? null : p.left-->Line_34 $$ SSTableReader sstable = SSTableReader.openForBatch(desc, components, metadata)[ FD ]
Line_12 $$ Descriptor desc = p == null ? null : p.left-->Line_29 $$ if (new File(desc.filenameFor(Component.COMPRESSION_INFO)).exists())[ FD ]
Line_20 $$ if (metadata == null) -->Line_22 $$ return false[ CD ]
