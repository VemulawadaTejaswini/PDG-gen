Line_19 $$ NettyFabricWorkerConfig<?> nettyFabricWorkerConfig = (NettyFabricWorkerConfig<?>) obj-->Line_20 $$ nettyFabricAgentStub.finishStartup(nettyFabricWorkerConfig.getId())[ FD ]
Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_15 $$ super.write(channelHandlerContext, obj, channelPromise)[ CD ]
Line_5 $$ long id = idGenerator.get()-->Line_38 $$ NettyFabricWorkerStub<String> nettyFabricWorkerStub = (NettyFabricWorkerStub<String>) nettyFabricAgentStub.takeNettyStubFabricWorker(id)[ FD ]
Line_6 $$ Builder builder = new Builder()-->Line_7 $$ ProcessConfig processConfig = builder.build()[ FD ]
Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_20 $$ nettyFabricAgentStub.finishStartup(nettyFabricWorkerConfig.getId())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_47 $$ Assert.assertEquals(path3, outputPathMap.get(testOutput3.toPath()))[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_42 $$ Path path1 = testFile1.toPath()[ CD ]
Line_12 $$ ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() [ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_27 $$ Assert.assertEquals(id, nettyFabricWorkerConfig.getId())[ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_30 $$ Assert.assertNotSame(processCallable, nettyFabricWorkerProcessCallable)[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_12 $$ ChannelPipeline channelPipeline = _embeddedChannel.pipeline()[ CD ]
Line_8 $$ File testFile1 = new File("TestFile1")-->Line_42 $$ Path path1 = testFile1.toPath()[ FD ]
Line_4 $$ AtomicLong idGenerator = ReflectionTestUtil.getFieldValue(nettyFabricAgentStub, "_idGenerator")-->Line_5 $$ long id = idGenerator.get()[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_44 $$ Assert.assertEquals(path1, outputPathMap.get(testOutput1.toPath()))[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_4 $$ AtomicLong idGenerator = ReflectionTestUtil.getFieldValue(nettyFabricAgentStub, "_idGenerator")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_34 $$ Assert.assertEquals(1, fabricWorkers.size())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_36 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_49 $$ Assert.assertEquals(processCallable.call(), noticeableFuture.get())[ FD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_38 $$ NettyFabricWorkerStub<String> nettyFabricWorkerStub = (NettyFabricWorkerStub<String>) nettyFabricAgentStub.takeNettyStubFabricWorker(id)[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_49 $$ Assert.assertEquals(processCallable.call(), noticeableFuture.get())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_6 $$ Builder builder = new Builder()[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)[ CD ]
Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_16 $$ if (!(obj instanceof NettyFabricWorkerConfig)) [ CD ]
Line_16 $$ if (!(obj instanceof NettyFabricWorkerConfig)) -->Line_17 $$ return[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() [ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_23 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(processConfig, processCallable)[ FD ]
Line_19 $$ NettyFabricWorkerConfig<?> nettyFabricWorkerConfig = (NettyFabricWorkerConfig<?>) obj-->Line_27 $$ Assert.assertEquals(id, nettyFabricWorkerConfig.getId())[ FD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_4 $$ AtomicLong idGenerator = ReflectionTestUtil.getFieldValue(nettyFabricAgentStub, "_idGenerator")[ FD ]
Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_15 $$ super.write(channelHandlerContext, obj, channelPromise)[ FD ]
Line_7 $$ ProcessConfig processConfig = builder.build()-->Line_28 $$ Assert.assertSame(processConfig, nettyFabricWorkerConfig.getProcessConfig())[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_35 $$ Assert.assertTrue(fabricWorkers.contains(fabricWorker))[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_43 $$ File testOutput1 = ReflectionTestUtil.getFieldValue(processCallable, "_testOutput1")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_5 $$ long id = idGenerator.get()[ CD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_33 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ FD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_48 $$ nettyFabricWorkerStub.setResult(processCallable.call())[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_23 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(processConfig, processCallable)[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_29 $$ ProcessCallable<String> nettyFabricWorkerProcessCallable = nettyFabricWorkerConfig.getProcessCallable()[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)[ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_43 $$ File testOutput1 = ReflectionTestUtil.getFieldValue(processCallable, "_testOutput1")[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_45 $$ Path path3 = testFile3.toPath()[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_28 $$ Assert.assertSame(processConfig, nettyFabricWorkerConfig.getProcessConfig())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_40 $$ Map<Path, Path> outputPathMap = ReflectionTestUtil.getFieldValue(nettyFabricWorkerStub, "_outputPathMap")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_39 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_50 $$ nettyFabricAgentStub.finishStartup(id)[ CD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_23 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(processConfig, processCallable)[ FD ]
Line_5 $$ long id = idGenerator.get()-->Line_50 $$ nettyFabricAgentStub.finishStartup(id)[ FD ]
Line_19 $$ NettyFabricWorkerConfig<?> nettyFabricWorkerConfig = (NettyFabricWorkerConfig<?>) obj-->Line_28 $$ Assert.assertSame(processConfig, nettyFabricWorkerConfig.getProcessConfig())[ FD ]
Line_7 $$ ProcessConfig processConfig = builder.build()-->Line_23 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(processConfig, processCallable)[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_9 $$ File testFile2 = new File("TestFile2")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_32 $$ Assert.assertEquals(processCallable.call(), nettyFabricWorkerProcessCallable.call())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_31 $$ Assert.assertEquals(processCallable.toString(), nettyFabricWorkerProcessCallable.toString())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_37 $$ Assert.assertFalse(noticeableFuture.isDone())[ CD ]
Line_10 $$ File testFile3 = new File("TestFile3")-->Line_45 $$ Path path3 = testFile3.toPath()[ FD ]
Line_13 $$ channelPipeline.addLast(new ChannelOutboundHandlerAdapter() -->Line_19 $$ NettyFabricWorkerConfig<?> nettyFabricWorkerConfig = (NettyFabricWorkerConfig<?>) obj[ CD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_20 $$ nettyFabricAgentStub.finishStartup(nettyFabricWorkerConfig.getId())[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_46 $$ File testOutput3 = ReflectionTestUtil.getFieldValue(processCallable, "_testOutput3")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_7 $$ ProcessConfig processConfig = builder.build()[ CD ]
Line_5 $$ long id = idGenerator.get()-->Line_27 $$ Assert.assertEquals(id, nettyFabricWorkerConfig.getId())[ FD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_31 $$ Assert.assertEquals(processCallable.toString(), nettyFabricWorkerProcessCallable.toString())[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_48 $$ nettyFabricWorkerStub.setResult(processCallable.call())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_8 $$ File testFile1 = new File("TestFile1")[ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_46 $$ File testOutput3 = ReflectionTestUtil.getFieldValue(processCallable, "_testOutput3")[ FD ]
Line_3 $$ final NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_50 $$ nettyFabricAgentStub.finishStartup(id)[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_24 $$ Queue<Object> messages = _embeddedChannel.outboundMessages()[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_10 $$ File testFile3 = new File("TestFile3")[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_25 $$ Assert.assertEquals(1, messages.size())[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_30 $$ Assert.assertNotSame(processCallable, nettyFabricWorkerProcessCallable)[ CD ]
Line_2 $$ public void testExecute() throws Exception -->Line_33 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ CD ]
Line_11 $$ ProcessCallable<String> processCallable = new TestProcessCallable(testFile1, testFile2, testFile3)-->Line_32 $$ Assert.assertEquals(processCallable.call(), nettyFabricWorkerProcessCallable.call())[ FD ]
Line_19 $$ NettyFabricWorkerConfig<?> nettyFabricWorkerConfig = (NettyFabricWorkerConfig<?>) obj-->Line_29 $$ ProcessCallable<String> nettyFabricWorkerProcessCallable = nettyFabricWorkerConfig.getProcessCallable()[ FD ]
Line_2 $$ public void testExecute() throws Exception -->Line_41 $$ Assert.assertEquals(2, outputPathMap.size())[ CD ]
