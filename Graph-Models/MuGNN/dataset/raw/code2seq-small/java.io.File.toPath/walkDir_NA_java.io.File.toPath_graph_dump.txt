Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_35 $$ return new DefaultFileVisitDetails(child, childPath, stopFlag, fileSystem, fileSystem, isDirectory, attrs.lastModifiedTime().toMillis(), attrs.size())[ CD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_9 $$ directoryDetailsHolder.push(details)[ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_33 $$ FileVisitDetails dirDetails = directoryDetailsHolder.peek()[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) [ CD ]
Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) -->Line_15 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_27 $$ visitor.visitFile(details)[ FD ]
Line_50 $$ FileVisitDetails details = directoryDetailsHolder.peek()-->Line_52 $$ visitor.visitDir(details)[ FD ]
Line_33 $$ FileVisitDetails dirDetails = directoryDetailsHolder.peek()-->Line_34 $$ RelativePath childPath = dirDetails != null ? dirDetails.getRelativePath().append(!isDirectory, child.getName()) : rootPath[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_35 $$ return new DefaultFileVisitDetails(child, childPath, stopFlag, fileSystem, fileSystem, isDirectory, attrs.lastModifiedTime().toMillis(), attrs.size())[ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_50 $$ FileVisitDetails details = directoryDetailsHolder.peek()[ FD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_26 $$ if (isAllowed(details, spec)) [ FD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) [ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) [ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_10 $$ if (directoryDetailsHolder.size() > 1 && !postfix) [ FD ]
Line_10 $$ if (directoryDetailsHolder.size() > 1 && !postfix) -->Line_11 $$ visitor.visitDir(details)[ CD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() [ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_29 $$ return checkStopFlag()[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_32 $$ File child = file.toFile()[ FD ]
Line_26 $$ if (isAllowed(details, spec)) -->Line_27 $$ visitor.visitFile(details)[ CD ]
Line_25 $$ FileVisitDetails details = getFileVisitDetails(file, attrs, false)-->Line_27 $$ visitor.visitFile(details)[ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_9 $$ directoryDetailsHolder.push(details)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_25 $$ FileVisitDetails details = getFileVisitDetails(file, attrs, false)[ CD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_27 $$ visitor.visitFile(details)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_34 $$ RelativePath childPath = dirDetails != null ? dirDetails.getRelativePath().append(!isDirectory, child.getName()) : rootPath[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_39 $$ throw new GradleException(String.format("Could not read path '%s'.", file), exc)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)[ CD ]
Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) -->Line_13 $$ return checkStopFlag()[ CD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_26 $$ if (isAllowed(details, spec)) [ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_34 $$ RelativePath childPath = dirDetails != null ? dirDetails.getRelativePath().append(!isDirectory, child.getName()) : rootPath[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_57 $$ return checkStopFlag()[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_56 $$ directoryDetailsHolder.pop()[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_22 $$ if (attrs.isSymbolicLink()) [ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_46 $$ throw new GradleException(String.format("Could not read directory path '%s'.", dir), exc)[ FD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_11 $$ visitor.visitDir(details)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_26 $$ if (isAllowed(details, spec)) [ CD ]
Line_25 $$ FileVisitDetails details = getFileVisitDetails(file, attrs, false)-->Line_52 $$ visitor.visitDir(details)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_25 $$ FileVisitDetails details = getFileVisitDetails(file, attrs, false)[ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_56 $$ directoryDetailsHolder.pop()[ FD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_11 $$ visitor.visitDir(details)[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_33 $$ FileVisitDetails dirDetails = directoryDetailsHolder.peek()[ CD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_52 $$ visitor.visitDir(details)[ FD ]
Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()-->Line_51 $$ if (directoryDetailsHolder.size() > 1 && details != null) [ FD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) [ FD ]
Line_49 $$ if (postfix) -->Line_50 $$ FileVisitDetails details = directoryDetailsHolder.peek()[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_22 $$ if (attrs.isSymbolicLink()) [ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_41 $$ return checkStopFlag()[ CD ]
Line_49 $$ if (postfix) -->Line_51 $$ if (directoryDetailsHolder.size() > 1 && details != null) [ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_19 $$ return stopFlag.get() ? FileVisitResult.TERMINATE : FileVisitResult.CONTINUE[ CD ]
Line_7 $$ FileVisitDetails details = getFileVisitDetails(dir, attrs, true)-->Line_52 $$ visitor.visitDir(details)[ FD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_61 $$ throw new GradleException(String.format("Could not list contents of directory '%s'.", rootDir), e)[ FD ]
Line_44 $$ if (exc != null) -->Line_49 $$ if (postfix) [ CD ]
Line_51 $$ if (directoryDetailsHolder.size() > 1 && details != null) -->Line_52 $$ visitor.visitDir(details)[ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_23 $$ throw new GradleException(String.format("Could not list contents of '%s'. Couldn't follow symbolic link.", file))[ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_44 $$ if (exc != null) [ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_32 $$ File child = file.toFile()[ CD ]
Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) -->Line_9 $$ directoryDetailsHolder.push(details)[ CD ]
Line_44 $$ if (exc != null) -->Line_45 $$ if (!(exc instanceof FileSystemLoopException)) [ CD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_44 $$ if (exc != null) [ FD ]
Line_25 $$ FileVisitDetails details = getFileVisitDetails(file, attrs, false)-->Line_26 $$ if (isAllowed(details, spec)) [ FD ]
Line_5 $$ Files.walkFileTree(rootDir.toPath(), EnumSet.of(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new java.nio.file.FileVisitor<Path>() -->Line_38 $$ if (exc != null && !(exc instanceof FileSystemLoopException)) [ CD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_3 $$ final Deque<FileVisitDetails> directoryDetailsHolder = new LinkedList<FileVisitDetails>()[ CD ]
Line_32 $$ File child = file.toFile()-->Line_34 $$ RelativePath childPath = dirDetails != null ? dirDetails.getRelativePath().append(!isDirectory, child.getName()) : rootPath[ FD ]
Line_8 $$ if (directoryDetailsHolder.size() == 0 || isAllowed(details, spec)) -->Line_10 $$ if (directoryDetailsHolder.size() > 1 && !postfix) [ CD ]
Line_2 $$ public void walkDir(final File rootDir, final RelativePath rootPath, final FileVisitor visitor, final Spec<FileTreeElement> spec, final AtomicBoolean stopFlag, final FileSystem fileSystem, final boolean postfix) -->Line_19 $$ return stopFlag.get() ? FileVisitResult.TERMINATE : FileVisitResult.CONTINUE[ FD ]
