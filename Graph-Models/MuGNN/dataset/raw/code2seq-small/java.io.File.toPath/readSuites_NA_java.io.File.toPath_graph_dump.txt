Line_7 $$ ImmutableList.Builder<Suite> runOptions = ImmutableList.builder()-->Line_9 $$ runOptions.add(entry.getValue().toSuite(entry.getKey()))[ FD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_5 $$ byte[] json = Files.readAllBytes(file.toPath())[ CD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_4 $$ checkArgument(file.canRead(), "Can not read file: %s" + file)[ CD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_7 $$ ImmutableList.Builder<Suite> runOptions = ImmutableList.builder()[ CD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_5 $$ byte[] json = Files.readAllBytes(file.toPath())[ FD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_6 $$ Map<String, OptionsJson> options = mapJsonCodec(String.class, OptionsJson.class).fromJson(json)[ CD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_3 $$ requireNonNull(file, "file is null")[ FD ]
Line_7 $$ ImmutableList.Builder<Suite> runOptions = ImmutableList.builder()-->Line_11 $$ return runOptions.build()[ FD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_4 $$ checkArgument(file.canRead(), "Can not read file: %s" + file)[ FD ]
Line_8 $$ for (Entry<String, OptionsJson> entry : options.entrySet()) -->Line_9 $$ runOptions.add(entry.getValue().toSuite(entry.getKey()))[ FD ]
Line_5 $$ byte[] json = Files.readAllBytes(file.toPath())-->Line_6 $$ Map<String, OptionsJson> options = mapJsonCodec(String.class, OptionsJson.class).fromJson(json)[ FD ]
Line_6 $$ Map<String, OptionsJson> options = mapJsonCodec(String.class, OptionsJson.class).fromJson(json)-->Line_8 $$ for (Entry<String, OptionsJson> entry : options.entrySet()) [ FD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_3 $$ requireNonNull(file, "file is null")[ CD ]
Line_2 $$ public static List<Suite> readSuites(File file) throws IOException -->Line_11 $$ return runOptions.build()[ CD ]
