Line_6 $$ final AtomicLong lastModified = new AtomicLong()-->Line_11 $$ if (fileTimeMillis > lastModified.longValue()) [ FD ]
Line_11 $$ if (fileTimeMillis > lastModified.longValue()) -->Line_12 $$ lastModified.set(fileTimeMillis)[ CD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_4 $$ return file.lastModified()[ FD ]
Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() -->Line_9 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ CD ]
Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() -->Line_9 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ FD ]
Line_3 $$ if (file.isFile()) -->Line_4 $$ return file.lastModified()[ CD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_17 $$ return lastModified.get()[ CD ]
Line_6 $$ final AtomicLong lastModified = new AtomicLong()-->Line_12 $$ lastModified.set(fileTimeMillis)[ FD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() [ CD ]
Line_9 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()-->Line_10 $$ long fileTimeMillis = fileTime.toMillis()[ FD ]
Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() -->Line_14 $$ return FileVisitResult.CONTINUE[ CD ]
Line_10 $$ long fileTimeMillis = fileTime.toMillis()-->Line_12 $$ lastModified.set(fileTimeMillis)[ FD ]
Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() -->Line_10 $$ long fileTimeMillis = fileTime.toMillis()[ CD ]
Line_10 $$ long fileTimeMillis = fileTime.toMillis()-->Line_11 $$ if (fileTimeMillis > lastModified.longValue()) [ FD ]
Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() -->Line_11 $$ if (fileTimeMillis > lastModified.longValue()) [ CD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_6 $$ final AtomicLong lastModified = new AtomicLong()[ CD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_3 $$ if (file.isFile()) [ FD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_7 $$ Files.walkFileTree(file.toPath(), new SimpleFileVisitor<Path>() [ FD ]
Line_6 $$ final AtomicLong lastModified = new AtomicLong()-->Line_17 $$ return lastModified.get()[ FD ]
Line_2 $$ private static long _getLastModified(File file) throws IOException -->Line_3 $$ if (file.isFile()) [ CD ]
