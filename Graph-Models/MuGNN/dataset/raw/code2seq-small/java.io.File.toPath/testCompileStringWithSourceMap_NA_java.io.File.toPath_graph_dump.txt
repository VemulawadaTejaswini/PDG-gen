Line_9 $$ String input = read(inputFile.toPath())-->Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_14 $$ String expectedOutput = read(expectedOutputFile.toPath())-->Line_15 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_3 $$ SassCompiler sassCompiler = new RubySassCompiler()[ CD ]
Line_8 $$ File inputFile = new File(inputDir, "input.scss")-->Line_9 $$ String input = read(inputFile.toPath())[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_11 $$ Assert.assertNotNull(actualOutput)[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_4 $$ File inputDir = new File("../sass-compiler-jni/src/test/resources/com/liferay/sass" + "/compiler/jni/internal/dependencies/sass-spec/14_imports")[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_5 $$ File sourceMapFile = new File(inputDir, "input.css.map")[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_7 $$ Assert.assertFalse(sourceMapFile.exists())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_14 $$ String expectedOutput = read(expectedOutputFile.toPath())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_12 $$ Assert.assertTrue(sourceMapFile.exists())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_8 $$ File inputFile = new File(inputDir, "input.scss")[ CD ]
Line_8 $$ File inputFile = new File(inputDir, "input.scss")-->Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_13 $$ File expectedOutputFile = new File("../sass-compiler-jni/src/test/resources/com/liferay/sass" + "/compiler/jni/internal/dependencies/sourcemap", "expected_output.css")[ CD ]
Line_5 $$ File sourceMapFile = new File(inputDir, "input.css.map")-->Line_6 $$ sourceMapFile.deleteOnExit()[ FD ]
Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)-->Line_11 $$ Assert.assertNotNull(actualOutput)[ FD ]
Line_3 $$ SassCompiler sassCompiler = new RubySassCompiler()-->Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_15 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ CD ]
Line_5 $$ File sourceMapFile = new File(inputDir, "input.css.map")-->Line_7 $$ Assert.assertFalse(sourceMapFile.exists())[ FD ]
Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)-->Line_15 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_6 $$ sourceMapFile.deleteOnExit()[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_9 $$ String input = read(inputFile.toPath())[ CD ]
Line_13 $$ File expectedOutputFile = new File("../sass-compiler-jni/src/test/resources/com/liferay/sass" + "/compiler/jni/internal/dependencies/sourcemap", "expected_output.css")-->Line_14 $$ String expectedOutput = read(expectedOutputFile.toPath())[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_10 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ CD ]
Line_5 $$ File sourceMapFile = new File(inputDir, "input.css.map")-->Line_12 $$ Assert.assertTrue(sourceMapFile.exists())[ FD ]
