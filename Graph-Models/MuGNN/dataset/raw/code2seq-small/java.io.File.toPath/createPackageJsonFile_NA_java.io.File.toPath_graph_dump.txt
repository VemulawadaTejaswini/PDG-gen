Line_3 $$ Map<String, Object> map = new HashMap()-->Line_30 $$ String json = JsonOutput.toJson(map)[ FD ]
Line_4 $$ String author = getModuleAuthor()-->Line_6 $$ map.put("author", author)[ FD ]
Line_25 $$ String repository = getModuleRepository()-->Line_26 $$ if (Validator.isNotNull(repository)) [ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_30 $$ String json = JsonOutput.toJson(map)[ CD ]
Line_34 $$ File packageJsonFile = getPackageJsonFile()-->Line_35 $$ Files.write(packageJsonFile.toPath(), json.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_20 $$ String license = getModuleLicense()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_29 $$ map.put("version", getModuleVersion())[ CD ]
Line_16 $$ List<String> keywords = getModuleKeywords()-->Line_17 $$ if (!keywords.isEmpty()) [ FD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_18 $$ map.put("keywords", keywords)[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_5 $$ if (Validator.isNotNull(author)) [ CD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_22 $$ map.put("license", license)[ FD ]
Line_30 $$ String json = JsonOutput.toJson(map)-->Line_32 $$ _logger.info(json)[ FD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_29 $$ map.put("version", getModuleVersion())[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_3 $$ Map<String, Object> map = new HashMap()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_9 $$ if (Validator.isNotNull(bugsUrl)) [ CD ]
Line_16 $$ List<String> keywords = getModuleKeywords()-->Line_18 $$ map.put("keywords", keywords)[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_12 $$ String description = getModuleDescription()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_25 $$ String repository = getModuleRepository()[ CD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_14 $$ map.put("description", description)[ FD ]
Line_30 $$ String json = JsonOutput.toJson(map)-->Line_35 $$ Files.write(packageJsonFile.toPath(), json.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_31 $$ if (_logger.isInfoEnabled()) -->Line_32 $$ _logger.info(json)[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_16 $$ List<String> keywords = getModuleKeywords()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_24 $$ map.put("name", getModuleName())[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_13 $$ if (Validator.isNotNull(description)) [ CD ]
Line_17 $$ if (!keywords.isEmpty()) -->Line_18 $$ map.put("keywords", keywords)[ CD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_6 $$ map.put("author", author)[ FD ]
Line_20 $$ String license = getModuleLicense()-->Line_21 $$ if (Validator.isNotNull(license)) [ FD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_24 $$ map.put("name", getModuleName())[ FD ]
Line_5 $$ if (Validator.isNotNull(author)) -->Line_6 $$ map.put("author", author)[ CD ]
Line_8 $$ String bugsUrl = getModuleBugsUrl()-->Line_10 $$ map.put("bugs", bugsUrl)[ FD ]
Line_9 $$ if (Validator.isNotNull(bugsUrl)) -->Line_10 $$ map.put("bugs", bugsUrl)[ CD ]
Line_26 $$ if (Validator.isNotNull(repository)) -->Line_27 $$ map.put("repository", repository)[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_21 $$ if (Validator.isNotNull(license)) [ CD ]
Line_4 $$ String author = getModuleAuthor()-->Line_5 $$ if (Validator.isNotNull(author)) [ FD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_10 $$ map.put("bugs", bugsUrl)[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_4 $$ String author = getModuleAuthor()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_31 $$ if (_logger.isInfoEnabled()) [ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_35 $$ Files.write(packageJsonFile.toPath(), json.getBytes(StandardCharsets.UTF_8))[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_26 $$ if (Validator.isNotNull(repository)) [ CD ]
Line_25 $$ String repository = getModuleRepository()-->Line_27 $$ map.put("repository", repository)[ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_17 $$ if (!keywords.isEmpty()) [ CD ]
Line_21 $$ if (Validator.isNotNull(license)) -->Line_22 $$ map.put("license", license)[ CD ]
Line_8 $$ String bugsUrl = getModuleBugsUrl()-->Line_9 $$ if (Validator.isNotNull(bugsUrl)) [ FD ]
Line_3 $$ Map<String, Object> map = new HashMap()-->Line_27 $$ map.put("repository", repository)[ FD ]
Line_12 $$ String description = getModuleDescription()-->Line_14 $$ map.put("description", description)[ FD ]
Line_20 $$ String license = getModuleLicense()-->Line_22 $$ map.put("license", license)[ FD ]
Line_13 $$ if (Validator.isNotNull(description)) -->Line_14 $$ map.put("description", description)[ CD ]
Line_12 $$ String description = getModuleDescription()-->Line_13 $$ if (Validator.isNotNull(description)) [ FD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_8 $$ String bugsUrl = getModuleBugsUrl()[ CD ]
Line_2 $$ protected void createPackageJsonFile() throws IOException -->Line_34 $$ File packageJsonFile = getPackageJsonFile()[ CD ]
