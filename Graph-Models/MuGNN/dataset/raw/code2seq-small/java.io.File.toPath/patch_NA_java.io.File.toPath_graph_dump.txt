Line_11 $$ Map<Object, Object> leadingPathReplacementsMap = new HashMap()-->Line_12 $$ leadingPathReplacementsMap.put(originalLibSrcDirName, "")[ FD ]
Line_2 $$ public void patch() throws Exception -->Line_7 $$ Closure<Void> closure = new Closure<Void>(null) [ CD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_28 $$ execSpec.setIgnoreExitValue(true)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_18 $$ copySpec.into(temporaryDir)[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_15 $$ copySpec.filter(FixCrLfFilter.class)[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_16 $$ copySpec.from(project.zipTree(getOriginalLibSrcFile()))[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_28 $$ execSpec.setIgnoreExitValue(true)[ CD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_31 $$ execSpec.args("--input=" + FileUtil.relativize(patchFile, temporaryDir))[ FD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_6 $$ temporaryDir.mkdir()[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_13 $$ copySpec.eachFile(new ReplaceLeadingPathAction(leadingPathReplacementsMap))[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_29 $$ execSpec.setWorkingDir(temporaryDir)[ CD ]
Line_3 $$ final Project project = getProject()-->Line_39 $$ FileTree fileTree = project.fileTree(temporaryDir)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_16 $$ copySpec.from(project.zipTree(getOriginalLibSrcFile()))[ CD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_39 $$ FileTree fileTree = project.fileTree(temporaryDir)[ FD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_18 $$ copySpec.into(temporaryDir)[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_27 $$ execSpec.setExecutable("patch")[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_30 $$ execSpec.args(getArgs())[ FD ]
Line_2 $$ public void patch() throws Exception -->Line_6 $$ temporaryDir.mkdir()[ CD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_31 $$ execSpec.args("--input=" + FileUtil.relativize(patchFile, temporaryDir))[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_18 $$ copySpec.into(temporaryDir)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_19 $$ copySpec.setIncludeEmptyDirs(false)[ CD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_29 $$ execSpec.setWorkingDir(temporaryDir)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_10 $$ if (!originalLibSrcDirName.equals(".")) [ CD ]
Line_10 $$ if (!originalLibSrcDirName.equals(".")) -->Line_12 $$ leadingPathReplacementsMap.put(originalLibSrcDirName, "")[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_17 $$ copySpec.include(getFileNames())[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_17 $$ copySpec.include(getFileNames())[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_19 $$ copySpec.setIncludeEmptyDirs(false)[ FD ]
Line_2 $$ public void patch() throws Exception -->Line_4 $$ final File temporaryDir = getTemporaryDir()[ CD ]
Line_2 $$ public void patch() throws Exception -->Line_3 $$ final Project project = getProject()[ CD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_27 $$ execSpec.setExecutable("patch")[ CD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_5 $$ project.delete(temporaryDir)[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_30 $$ execSpec.args(getArgs())[ CD ]
Line_4 $$ final File temporaryDir = getTemporaryDir()-->Line_46 $$ String relativePath = FileUtil.relativize(file, temporaryDir)[ FD ]
Line_2 $$ public void patch() throws Exception -->Line_22 $$ project.copy(closure)[ CD ]
Line_3 $$ final Project project = getProject()-->Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() [ FD ]
Line_2 $$ public void patch() throws Exception -->Line_5 $$ project.delete(temporaryDir)[ CD ]
Line_3 $$ final Project project = getProject()-->Line_22 $$ project.copy(closure)[ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_32 $$ execSpec.setStandardOutput(byteArrayOutputStream)[ CD ]
Line_9 $$ final String originalLibSrcDirName = getOriginalLibSrcDirName()-->Line_10 $$ if (!originalLibSrcDirName.equals(".")) [ FD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_31 $$ execSpec.args("--input=" + FileUtil.relativize(patchFile, temporaryDir))[ CD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_29 $$ execSpec.setWorkingDir(temporaryDir)[ FD ]
Line_9 $$ final String originalLibSrcDirName = getOriginalLibSrcDirName()-->Line_12 $$ leadingPathReplacementsMap.put(originalLibSrcDirName, "")[ FD ]
Line_10 $$ if (!originalLibSrcDirName.equals(".")) -->Line_13 $$ copySpec.eachFile(new ReplaceLeadingPathAction(leadingPathReplacementsMap))[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_9 $$ final String originalLibSrcDirName = getOriginalLibSrcDirName()[ CD ]
Line_10 $$ if (!originalLibSrcDirName.equals(".")) -->Line_11 $$ Map<Object, Object> leadingPathReplacementsMap = new HashMap()[ CD ]
Line_2 $$ public void patch() throws Exception -->Line_39 $$ FileTree fileTree = project.fileTree(temporaryDir)[ CD ]
Line_25 $$ ExecResult execResult = project.exec(new Action<ExecSpec>() -->Line_32 $$ execSpec.setStandardOutput(byteArrayOutputStream)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_22 $$ project.copy(closure)[ FD ]
Line_3 $$ final Project project = getProject()-->Line_16 $$ copySpec.from(project.zipTree(getOriginalLibSrcFile()))[ FD ]
Line_3 $$ final Project project = getProject()-->Line_5 $$ project.delete(temporaryDir)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_15 $$ copySpec.filter(FixCrLfFilter.class)[ FD ]
