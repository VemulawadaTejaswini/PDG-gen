Line_2 $$ public void testReadFromFile() throws IOException -->Line_6 $$ ImmutableMap<String, Object> parameters = ImmutableMap.of()[ CD ]
Line_2 $$ public void testReadFromFile() throws IOException -->Line_3 $$ UUID hostId = UUID.randomUUID()[ CD ]
Line_7 $$ HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters)-->Line_12 $$ HintsDescriptor actual = HintsDescriptor.readFromFile(new File(directory, expected.fileName()).toPath())[ FD ]
Line_7 $$ HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters)-->Line_13 $$ assertEquals(expected, actual)[ FD ]
Line_12 $$ HintsDescriptor actual = HintsDescriptor.readFromFile(new File(directory, expected.fileName()).toPath())-->Line_13 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ public void testReadFromFile() throws IOException -->Line_4 $$ int version = HintsDescriptor.CURRENT_VERSION[ CD ]
Line_8 $$ File directory = Files.createTempDir()-->Line_10 $$ try (HintsWriter ignored = HintsWriter.create(directory, expected)) [ FD ]
Line_8 $$ File directory = Files.createTempDir()-->Line_15 $$ directory.deleteOnExit()[ FD ]
Line_2 $$ public void testReadFromFile() throws IOException -->Line_8 $$ File directory = Files.createTempDir()[ CD ]
Line_2 $$ public void testReadFromFile() throws IOException -->Line_5 $$ long timestamp = System.currentTimeMillis()[ CD ]
Line_7 $$ HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters)-->Line_10 $$ try (HintsWriter ignored = HintsWriter.create(directory, expected)) [ FD ]
Line_2 $$ public void testReadFromFile() throws IOException -->Line_7 $$ HintsDescriptor expected = new HintsDescriptor(hostId, version, timestamp, parameters)[ CD ]
