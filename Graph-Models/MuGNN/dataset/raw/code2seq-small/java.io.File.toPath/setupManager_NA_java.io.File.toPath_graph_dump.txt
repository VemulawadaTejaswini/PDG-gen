Line_37 $$ if (elementName.equals("user")) -->Line_39 $$ if (userName.equals(getManagerUserName())) [ CD ]
Line_53 $$ if (!tomcatManagerUserExists) -->Line_57 $$ element.setAttribute("username", getManagerUserName())[ CD ]
Line_6 $$ final File zipFile = FileUtil.get(project, getZipUrl())-->Line_10 $$ copySpec.from(project.zipTree(zipFile))[ FD ]
Line_38 $$ String userName = element.getAttribute("username")-->Line_39 $$ if (userName.equals(getManagerUserName())) [ FD ]
Line_46 $$ if (!existentRoleNames.contains(roleName)) -->Line_49 $$ tomcatUsersElement.appendChild(element)[ CD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_61 $$ if (tomcatUsersXmlFileModified) [ CD ]
Line_28 $$ Node node = nodeList.item(i)-->Line_29 $$ if (node.getNodeType() != Node.ELEMENT_NODE) [ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_13 $$ copySpec.setIncludeEmptyDirs(false)[ FD ]
Line_32 $$ Element element = (Element) node-->Line_33 $$ String elementName = element.getNodeName()[ FD ]
Line_53 $$ if (!tomcatManagerUserExists) -->Line_56 $$ element.setAttribute("roles", "tomcat,manager-gui,manager-script,manager-jmx,manager-status")[ CD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_32 $$ Element element = (Element) node[ CD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_4 $$ if (!managerDir.exists()) [ CD ]
Line_5 $$ final Project project = getProject()-->Line_10 $$ copySpec.from(project.zipTree(zipFile))[ FD ]
Line_33 $$ String elementName = element.getNodeName()-->Line_34 $$ if (elementName.equals("role")) [ FD ]
Line_3 $$ final File managerDir = new File(getDir(), "webapps/manager")-->Line_12 $$ copySpec.into(managerDir.getParentFile())[ FD ]
Line_4 $$ if (!managerDir.exists()) -->Line_6 $$ final File zipFile = FileUtil.get(project, getZipUrl())[ CD ]
Line_32 $$ Element element = (Element) node-->Line_38 $$ String userName = element.getAttribute("username")[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_12 $$ copySpec.into(managerDir.getParentFile())[ FD ]
Line_35 $$ String roleName = element.getAttribute("rolename")-->Line_46 $$ if (!existentRoleNames.contains(roleName)) [ FD ]
Line_5 $$ final Project project = getProject()-->Line_6 $$ final File zipFile = FileUtil.get(project, getZipUrl())[ FD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_33 $$ String elementName = element.getNodeName()[ CD ]
Line_32 $$ Element element = (Element) node-->Line_57 $$ element.setAttribute("username", getManagerUserName())[ FD ]
Line_32 $$ Element element = (Element) node-->Line_55 $$ element.setAttribute("password", getManagerPassword())[ FD ]
Line_4 $$ if (!managerDir.exists()) -->Line_5 $$ final Project project = getProject()[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_9 $$ copySpec.eachFile(new StripPathSegmentsAction(2))[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_12 $$ copySpec.into(managerDir.getParentFile())[ CD ]
Line_37 $$ if (elementName.equals("user")) -->Line_38 $$ String userName = element.getAttribute("username")[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_9 $$ copySpec.eachFile(new StripPathSegmentsAction(2))[ FD ]
Line_33 $$ String elementName = element.getNodeName()-->Line_37 $$ if (elementName.equals("user")) [ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_11 $$ copySpec.include("apache-tomcat-*/webapps/manager*")[ CD ]
Line_32 $$ Element element = (Element) node-->Line_35 $$ String roleName = element.getAttribute("rolename")[ FD ]
Line_53 $$ if (!tomcatManagerUserExists) -->Line_55 $$ element.setAttribute("password", getManagerPassword())[ CD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_28 $$ Node node = nodeList.item(i)[ CD ]
Line_46 $$ if (!existentRoleNames.contains(roleName)) -->Line_48 $$ element.setAttribute("rolename", roleName)[ CD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_29 $$ if (node.getNodeType() != Node.ELEMENT_NODE) [ CD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_23 $$ Element tomcatUsersElement = document.getDocumentElement()[ CD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) [ CD ]
Line_4 $$ if (!managerDir.exists()) -->Line_7 $$ Closure<Void> closure = new Closure<Void>(null) [ CD ]
Line_34 $$ if (elementName.equals("role")) -->Line_35 $$ String roleName = element.getAttribute("rolename")[ CD ]
Line_61 $$ if (tomcatUsersXmlFileModified) -->Line_63 $$ Files.copy(tomcatUsersXmlFile.toPath(), timestampTomcatUserXmlFilePath)[ CD ]
Line_4 $$ if (!managerDir.exists()) -->Line_16 $$ project.copy(closure)[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_13 $$ copySpec.setIncludeEmptyDirs(false)[ CD ]
Line_34 $$ if (elementName.equals("role")) -->Line_37 $$ if (elementName.equals("user")) [ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_11 $$ copySpec.include("apache-tomcat-*/webapps/manager*")[ FD ]
Line_3 $$ final File managerDir = new File(getDir(), "webapps/manager")-->Line_4 $$ if (!managerDir.exists()) [ FD ]
Line_32 $$ Element element = (Element) node-->Line_58 $$ tomcatUsersElement.appendChild(element)[ FD ]
Line_53 $$ if (!tomcatManagerUserExists) -->Line_58 $$ tomcatUsersElement.appendChild(element)[ CD ]
Line_32 $$ Element element = (Element) node-->Line_48 $$ element.setAttribute("rolename", roleName)[ FD ]
Line_5 $$ final Project project = getProject()-->Line_16 $$ project.copy(closure)[ FD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_53 $$ if (!tomcatManagerUserExists) [ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_10 $$ copySpec.from(project.zipTree(zipFile))[ FD ]
Line_53 $$ if (!tomcatManagerUserExists) -->Line_54 $$ Element element = document.createElement("user")[ CD ]
Line_35 $$ String roleName = element.getAttribute("rolename")-->Line_36 $$ existentRoleNames.add(roleName)[ FD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_16 $$ project.copy(closure)[ FD ]
Line_32 $$ Element element = (Element) node-->Line_49 $$ tomcatUsersElement.appendChild(element)[ FD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_28 $$ Node node = nodeList.item(i)[ FD ]
Line_34 $$ if (elementName.equals("role")) -->Line_36 $$ existentRoleNames.add(roleName)[ CD ]
Line_35 $$ String roleName = element.getAttribute("rolename")-->Line_48 $$ element.setAttribute("rolename", roleName)[ FD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_26 $$ NodeList nodeList = tomcatUsersElement.getChildNodes()[ CD ]
Line_27 $$ for (int i = 0; i < nodeList.getLength(); i++) -->Line_34 $$ if (elementName.equals("role")) [ CD ]
Line_2 $$ protected void setupManager() throws Exception -->Line_3 $$ final File managerDir = new File(getDir(), "webapps/manager")[ CD ]
Line_46 $$ if (!existentRoleNames.contains(roleName)) -->Line_47 $$ Element element = document.createElement("role")[ CD ]
Line_7 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_10 $$ copySpec.from(project.zipTree(zipFile))[ CD ]
Line_61 $$ if (tomcatUsersXmlFileModified) -->Line_62 $$ Path timestampTomcatUserXmlFilePath = Paths.get(tomcatUsersXmlFile.toString() + "." + _timestampDateFormat.format(new Date()))[ CD ]
Line_32 $$ Element element = (Element) node-->Line_56 $$ element.setAttribute("roles", "tomcat,manager-gui,manager-script,manager-jmx,manager-status")[ FD ]
