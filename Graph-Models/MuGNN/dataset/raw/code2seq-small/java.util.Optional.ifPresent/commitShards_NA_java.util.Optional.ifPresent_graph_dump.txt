Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_6 $$ Map<String, Integer> nodeIds = toNodeIdMap(shards)[ CD ]
Line_8 $$ ShardManagerDao dao = handle.attach(ShardManagerDao.class)-->Line_9 $$ commitTransaction(dao, transactionId)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_10 $$ externalBatchId.ifPresent(dao::<>insertExternalBatch)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_11 $$ lockTable(handle, tableId)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_12 $$ insertShardsAndIndex(tableId, columns, shards, nodeIds, handle)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_4 $$ throw new PrestoException(RAPTOR_EXTERNAL_BATCH_ALREADY_EXISTS, "External batch already exists: " + externalBatchId.get())[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_9 $$ commitTransaction(dao, transactionId)[ FD ]
Line_6 $$ Map<String, Integer> nodeIds = toNodeIdMap(shards)-->Line_12 $$ insertShardsAndIndex(tableId, columns, shards, nodeIds, handle)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_3 $$ if (externalBatchId.isPresent() && dao.externalBatchExists(externalBatchId.get())) [ CD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_7 $$ runTransaction(dbi, ( handle,  status) -> [ CD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_6 $$ Map<String, Integer> nodeIds = toNodeIdMap(shards)[ FD ]
Line_2 $$ public void commitShards(long transactionId, long tableId, List<ColumnInfo> columns, Collection<ShardInfo> shards, Optional<String> externalBatchId) -->Line_3 $$ if (externalBatchId.isPresent() && dao.externalBatchExists(externalBatchId.get())) [ FD ]
