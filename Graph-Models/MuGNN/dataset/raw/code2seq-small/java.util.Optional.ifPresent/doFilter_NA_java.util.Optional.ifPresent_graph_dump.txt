Line_7 $$ HttpServletRequest request = (HttpServletRequest) servletRequest-->Line_9 $$ String header = request.getHeader(HttpHeaders.AUTHORIZATION)[ FD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_30 $$ sendChallenge(response, includeRealm)[ CD ]
Line_8 $$ HttpServletResponse response = (HttpServletResponse) servletResponse-->Line_30 $$ sendChallenge(response, includeRealm)[ FD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_9 $$ String header = request.getHeader(HttpHeaders.AUTHORIZATION)[ CD ]
Line_7 $$ HttpServletRequest request = (HttpServletRequest) servletRequest-->Line_10 $$ boolean includeRealm = "true".equalsIgnoreCase(request.getHeader(INCLUDE_REALM_HEADER))[ FD ]
Line_10 $$ boolean includeRealm = "true".equalsIgnoreCase(request.getHeader(INCLUDE_REALM_HEADER))-->Line_30 $$ sendChallenge(response, includeRealm)[ FD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_3 $$ if (!servletRequest.isSecure()) [ CD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_18 $$ nextFilter.doFilter(new HttpServletRequestWrapper(request) [ FD ]
Line_8 $$ HttpServletResponse response = (HttpServletResponse) servletResponse-->Line_17 $$ response.setHeader(HttpHeaders.WWW_AUTHENTICATE, formatAuthenticationHeader(includeRealm, Optional.ofNullable(token)))[ FD ]
Line_9 $$ String header = request.getHeader(HttpHeaders.AUTHORIZATION)-->Line_11 $$ if (header != null) [ FD ]
Line_9 $$ String header = request.getHeader(HttpHeaders.AUTHORIZATION)-->Line_12 $$ String[] parts = header.split("\\s+")[ FD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_11 $$ if (header != null) [ CD ]
Line_11 $$ if (header != null) -->Line_13 $$ if (parts.length == 2 && parts[0].equals(NEGOTIATE_SCHEME)) [ CD ]
Line_11 $$ if (header != null) -->Line_12 $$ String[] parts = header.split("\\s+")[ CD ]
Line_3 $$ if (!servletRequest.isSecure()) -->Line_5 $$ return[ CD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_10 $$ boolean includeRealm = "true".equalsIgnoreCase(request.getHeader(INCLUDE_REALM_HEADER))[ CD ]
Line_10 $$ boolean includeRealm = "true".equalsIgnoreCase(request.getHeader(INCLUDE_REALM_HEADER))-->Line_17 $$ response.setHeader(HttpHeaders.WWW_AUTHENTICATE, formatAuthenticationHeader(includeRealm, Optional.ofNullable(token)))[ FD ]
Line_16 $$ if (authentication.isPresent()) -->Line_23 $$ return[ CD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_8 $$ HttpServletResponse response = (HttpServletResponse) servletResponse[ CD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_4 $$ nextFilter.doFilter(servletRequest, servletResponse)[ FD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_7 $$ HttpServletRequest request = (HttpServletRequest) servletRequest[ CD ]
Line_15 $$ Optional<Result> authentication = authenticate(parts[1])-->Line_16 $$ if (authentication.isPresent()) [ FD ]
Line_16 $$ if (authentication.isPresent()) -->Line_18 $$ nextFilter.doFilter(new HttpServletRequestWrapper(request) [ CD ]
Line_16 $$ if (authentication.isPresent()) -->Line_17 $$ authentication.get().getToken().ifPresent( token -> response.setHeader(HttpHeaders.WWW_AUTHENTICATE, formatAuthenticationHeader(includeRealm, Optional.ofNullable(token))))[ CD ]
Line_15 $$ Optional<Result> authentication = authenticate(parts[1])-->Line_17 $$ authentication.get().getToken().ifPresent( token -> response.setHeader(HttpHeaders.WWW_AUTHENTICATE, formatAuthenticationHeader(includeRealm, Optional.ofNullable(token))))[ FD ]
Line_3 $$ if (!servletRequest.isSecure()) -->Line_4 $$ nextFilter.doFilter(servletRequest, servletResponse)[ CD ]
Line_2 $$ public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain nextFilter) throws IOException, ServletException -->Line_3 $$ if (!servletRequest.isSecure()) [ FD ]
Line_18 $$ nextFilter.doFilter(new HttpServletRequestWrapper(request) -->Line_20 $$ return authentication.get().getPrincipal()[ CD ]
Line_15 $$ Optional<Result> authentication = authenticate(parts[1])-->Line_20 $$ return authentication.get().getPrincipal()[ FD ]
