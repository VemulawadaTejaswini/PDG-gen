Line_36 $$ if (!toRefresh.isEmpty()) -->Line_37 $$ LOG.info("Refreshing list of NNs for nameservices: " + Joiner.on(",").useForNull("<default>").join(toRefresh))[ CD ]
Line_9 $$ if (bpByNameserviceId.containsKey(nameserviceId)) -->Line_12 $$ toAdd.add(nameserviceId)[ CD ]
Line_21 $$ BPOfferService bpos = createBPOS(addrs)-->Line_33 $$ bpos.join()[ FD ]
Line_19 $$ for (String nsToAdd : toAdd) -->Line_22 $$ bpByNameserviceId.put(nsToAdd, bpos)[ FD ]
Line_15 $$ toRemove = Sets.newHashSet(Sets.difference(bpByNameserviceId.keySet(), addrMap.keySet()))-->Line_29 $$ LOG.info("Stopping BPOfferServices for nameservices: " + Joiner.on(",").useForNull("<default>").join(toRemove))[ FD ]
Line_8 $$ for (String nameserviceId : addrMap.keySet()) -->Line_9 $$ if (bpByNameserviceId.containsKey(nameserviceId)) [ FD ]
Line_20 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToAdd).values())-->Line_21 $$ BPOfferService bpos = createBPOS(addrs)[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_8 $$ for (String nameserviceId : addrMap.keySet()) [ FD ]
Line_9 $$ if (bpByNameserviceId.containsKey(nameserviceId)) -->Line_10 $$ toRefresh.add(nameserviceId)[ CD ]
Line_20 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToAdd).values())-->Line_41 $$ bpos.refreshNNList(addrs)[ FD ]
Line_5 $$ Set<String> toAdd = Sets.newLinkedHashSet()-->Line_16 $$ assert toRefresh.size() + toAdd.size() == addrMap.size() : "toAdd: " + Joiner.on(",").useForNull("<default>").join(toAdd) + "  toRemove: " + Joiner.on(",").useForNull("<default>").join(toRemove) + "  toRefresh: " + Joiner.on(",").useForNull("<default>").join(toRefresh)[ FD ]
Line_21 $$ BPOfferService bpos = createBPOS(addrs)-->Line_41 $$ bpos.refreshNNList(addrs)[ FD ]
Line_38 $$ for (String nsToRefresh : toRefresh) -->Line_39 $$ BPOfferService bpos = bpByNameserviceId.get(nsToRefresh)[ FD ]
Line_19 $$ for (String nsToAdd : toAdd) -->Line_20 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToAdd).values())[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_36 $$ if (!toRefresh.isEmpty()) [ CD ]
Line_6 $$ Set<String> toRemove-->Line_15 $$ toRemove = Sets.newHashSet(Sets.difference(bpByNameserviceId.keySet(), addrMap.keySet()))[ FD ]
Line_4 $$ Set<String> toRefresh = Sets.newLinkedHashSet()-->Line_10 $$ toRefresh.add(nameserviceId)[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_4 $$ Set<String> toRefresh = Sets.newLinkedHashSet()[ CD ]
Line_6 $$ Set<String> toRemove-->Line_29 $$ LOG.info("Stopping BPOfferServices for nameservices: " + Joiner.on(",").useForNull("<default>").join(toRemove))[ FD ]
Line_4 $$ Set<String> toRefresh = Sets.newLinkedHashSet()-->Line_36 $$ if (!toRefresh.isEmpty()) [ FD ]
Line_8 $$ for (String nameserviceId : addrMap.keySet()) -->Line_10 $$ toRefresh.add(nameserviceId)[ FD ]
Line_28 $$ if (!toRemove.isEmpty()) -->Line_29 $$ LOG.info("Stopping BPOfferServices for nameservices: " + Joiner.on(",").useForNull("<default>").join(toRemove))[ CD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_40 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToRefresh).values())[ FD ]
Line_6 $$ Set<String> toRemove-->Line_28 $$ if (!toRemove.isEmpty()) [ FD ]
Line_17 $$ if (!toAdd.isEmpty()) -->Line_18 $$ LOG.info("Starting BPOfferServices for nameservices: " + Joiner.on(",").useForNull("<default>").join(toAdd))[ CD ]
Line_21 $$ BPOfferService bpos = createBPOS(addrs)-->Line_23 $$ offerServices.add(bpos)[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_20 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToAdd).values())[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_6 $$ Set<String> toRemove[ CD ]
Line_5 $$ Set<String> toAdd = Sets.newLinkedHashSet()-->Line_12 $$ toAdd.add(nameserviceId)[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_5 $$ Set<String> toAdd = Sets.newLinkedHashSet()[ CD ]
Line_21 $$ BPOfferService bpos = createBPOS(addrs)-->Line_32 $$ bpos.stop()[ FD ]
Line_30 $$ for (String nsToRemove : toRemove) -->Line_31 $$ BPOfferService bpos = bpByNameserviceId.get(nsToRemove)[ FD ]
Line_4 $$ Set<String> toRefresh = Sets.newLinkedHashSet()-->Line_16 $$ assert toRefresh.size() + toAdd.size() == addrMap.size() : "toAdd: " + Joiner.on(",").useForNull("<default>").join(toAdd) + "  toRemove: " + Joiner.on(",").useForNull("<default>").join(toRemove) + "  toRefresh: " + Joiner.on(",").useForNull("<default>").join(toRefresh)[ FD ]
Line_15 $$ toRemove = Sets.newHashSet(Sets.difference(bpByNameserviceId.keySet(), addrMap.keySet()))-->Line_16 $$ assert toRefresh.size() + toAdd.size() == addrMap.size() : "toAdd: " + Joiner.on(",").useForNull("<default>").join(toAdd) + "  toRemove: " + Joiner.on(",").useForNull("<default>").join(toRemove) + "  toRefresh: " + Joiner.on(",").useForNull("<default>").join(toRefresh)[ FD ]
Line_15 $$ toRemove = Sets.newHashSet(Sets.difference(bpByNameserviceId.keySet(), addrMap.keySet()))-->Line_28 $$ if (!toRemove.isEmpty()) [ FD ]
Line_5 $$ Set<String> toAdd = Sets.newLinkedHashSet()-->Line_17 $$ if (!toAdd.isEmpty()) [ FD ]
Line_38 $$ for (String nsToRefresh : toRefresh) -->Line_40 $$ ArrayList<InetSocketAddress> addrs = Lists.newArrayList(addrMap.get(nsToRefresh).values())[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_28 $$ if (!toRemove.isEmpty()) [ CD ]
Line_8 $$ for (String nameserviceId : addrMap.keySet()) -->Line_12 $$ toAdd.add(nameserviceId)[ FD ]
Line_21 $$ BPOfferService bpos = createBPOS(addrs)-->Line_22 $$ bpByNameserviceId.put(nsToAdd, bpos)[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_15 $$ toRemove = Sets.newHashSet(Sets.difference(bpByNameserviceId.keySet(), addrMap.keySet()))[ FD ]
Line_6 $$ Set<String> toRemove-->Line_16 $$ assert toRefresh.size() + toAdd.size() == addrMap.size() : "toAdd: " + Joiner.on(",").useForNull("<default>").join(toAdd) + "  toRemove: " + Joiner.on(",").useForNull("<default>").join(toRemove) + "  toRefresh: " + Joiner.on(",").useForNull("<default>").join(toRefresh)[ FD ]
Line_5 $$ Set<String> toAdd = Sets.newLinkedHashSet()-->Line_18 $$ LOG.info("Starting BPOfferServices for nameservices: " + Joiner.on(",").useForNull("<default>").join(toAdd))[ FD ]
Line_4 $$ Set<String> toRefresh = Sets.newLinkedHashSet()-->Line_37 $$ LOG.info("Refreshing list of NNs for nameservices: " + Joiner.on(",").useForNull("<default>").join(toRefresh))[ FD ]
Line_2 $$ private void doRefreshNamenodes(Map<String, Map<String, InetSocketAddress>> addrMap) throws IOException -->Line_16 $$ assert toRefresh.size() + toAdd.size() == addrMap.size() : "toAdd: " + Joiner.on(",").useForNull("<default>").join(toAdd) + "  toRemove: " + Joiner.on(",").useForNull("<default>").join(toRemove) + "  toRefresh: " + Joiner.on(",").useForNull("<default>").join(toRefresh)[ FD ]
