Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_15 $$ checkState(!isTerminalState(state), "%s can not transition from %s to %s", name, state, newState)[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_5 $$ requireNonNull(newState, "newState is null")[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_9 $$ if (!state.equals(expectedState)) [ FD ]
Line_9 $$ if (!state.equals(expectedState)) -->Line_10 $$ return false[ CD ]
Line_12 $$ if (state.equals(newState)) -->Line_13 $$ return false[ CD ]
Line_7 $$ ImmutableList<StateChangeListener<T>> stateChangeListeners-->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ CD ]
Line_17 $$ futureStateChange = this.futureStateChange.getAndSet(new FutureStateChange())-->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_4 $$ requireNonNull(expectedState, "expectedState is null")[ CD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_12 $$ if (state.equals(newState)) [ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_25 $$ return true[ CD ]
Line_19 $$ if (isTerminalState(state)) -->Line_20 $$ this.stateChangeListeners.clear()[ CD ]
Line_18 $$ stateChangeListeners = ImmutableList.copyOf(this.stateChangeListeners)-->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_3 $$ checkState(!Thread.holdsLock(lock), "Can not set state while holding the lock")[ CD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_7 $$ ImmutableList<StateChangeListener<T>> stateChangeListeners[ CD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_4 $$ requireNonNull(expectedState, "expectedState is null")[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ FD ]
Line_6 $$ FutureStateChange<T> futureStateChange-->Line_24 $$ fireStateChanged(newState, futureStateChange, stateChangeListeners)[ FD ]
Line_6 $$ FutureStateChange<T> futureStateChange-->Line_17 $$ futureStateChange = this.futureStateChange.getAndSet(new FutureStateChange())[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_5 $$ requireNonNull(newState, "newState is null")[ CD ]
Line_7 $$ ImmutableList<StateChangeListener<T>> stateChangeListeners-->Line_18 $$ stateChangeListeners = ImmutableList.copyOf(this.stateChangeListeners)[ FD ]
Line_2 $$ public boolean compareAndSet(T expectedState, T newState) -->Line_6 $$ FutureStateChange<T> futureStateChange[ CD ]
