Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_7 $$ Preconditions.checkState(segmentTxId > curSegmentTxId, "Cannot start writing to log segment " + segmentTxId + " when previous log segment started at " + curSegmentTxId)[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_5 $$ Preconditions.checkArgument(segmentTxId > 0, "Bad txid: %s", segmentTxId)[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_8 $$ Preconditions.checkArgument(segmentTxId == txid + 1, "Cannot start log segment at txid %s when next expected " + "txid is %s", segmentTxId, txid + 1)[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_8 $$ Preconditions.checkArgument(segmentTxId == txid + 1, "Cannot start log segment at txid %s when next expected " + "txid is %s", segmentTxId, txid + 1)[ FD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_4 $$ LOG.info("Starting log segment at " + segmentTxId)[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_12 $$ editLogStream = journalSet.startLogSegment(segmentTxId, NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_6 $$ Preconditions.checkState(state == State.BETWEEN_LOG_SEGMENTS, "Bad state: %s", state)[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_10 $$ storage.attemptRestoreRemovedStorage()[ CD ]
Line_2 $$ private void startLogSegment(final long segmentTxId) throws IOException -->Line_5 $$ Preconditions.checkArgument(segmentTxId > 0, "Bad txid: %s", segmentTxId)[ FD ]
