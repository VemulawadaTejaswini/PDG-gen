Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_19 $$ if (treeSelection.size() == 1)[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() [ CD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_18 $$ myTree.setSelectionPaths(treeSelection.toArray(new TreePath[treeSelection.size()]))[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_32 $$ myList.setSelectedIndices(int2int(listSelection))[ CD ]
Line_25 $$ for (int i = 0; i < size; i++) -->Line_28 $$ if (changes.contains(el)) [ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_23 $$ final int size = model.getSize()[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_19 $$ if (treeSelection.size() == 1)[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_25 $$ for (int i = 0; i < size; i++) [ CD ]
Line_3 $$ final DefaultTreeModel treeModel = (DefaultTreeModel) myTree.getModel()-->Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()[ FD ]
Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_15 $$ return true[ CD ]
Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()-->Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() [ FD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_20 $$ myTree.scrollPathToVisible(treeSelection.get(0))[ FD ]
Line_19 $$ if (treeSelection.size() == 1)-->Line_20 $$ myTree.scrollPathToVisible(treeSelection.get(0))[ CD ]
Line_28 $$ if (changes.contains(el)) -->Line_29 $$ listSelection.add(i)[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_28 $$ if (changes.contains(el)) [ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_18 $$ myTree.setSelectionPaths(treeSelection.toArray(new TreePath[treeSelection.size()]))[ CD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_13 $$ treeSelection.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_3 $$ final DefaultTreeModel treeModel = (DefaultTreeModel) myTree.getModel()[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_24 $$ final List<Integer> listSelection = new ArrayList<Integer>(changes.size())[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_12 $$ if (changes.contains(change)) [ FD ]
Line_33 $$ if (listSelection.size() == 1)-->Line_34 $$ myList.ensureIndexIsVisible(listSelection.get(0))[ CD ]
Line_25 $$ for (int i = 0; i < size; i++) -->Line_29 $$ listSelection.add(i)[ FD ]
Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_12 $$ if (changes.contains(change)) [ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()[ CD ]
Line_12 $$ if (changes.contains(change)) -->Line_13 $$ treeSelection.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_33 $$ if (listSelection.size() == 1)[ CD ]
