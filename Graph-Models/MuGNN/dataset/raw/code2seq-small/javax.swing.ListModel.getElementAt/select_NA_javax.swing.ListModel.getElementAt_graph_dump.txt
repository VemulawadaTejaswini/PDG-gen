Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()-->Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() [ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())[ CD ]
Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_12 $$ return true[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_15 $$ myTree.setSelectionPaths(treeSelection.toArray(new TreePath[treeSelection.size()]))[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())[ FD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_15 $$ myTree.setSelectionPaths(treeSelection.toArray(new TreePath[treeSelection.size()]))[ FD ]
Line_3 $$ final DefaultTreeModel treeModel = (DefaultTreeModel) myTree.getModel()-->Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()[ FD ]
Line_21 $$ for (int i = 0; i < size; i++) -->Line_22 $$ final T el = (T) model.getElementAt(i)[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_27 $$ myList.setSelectedIndices(int2int(listSelection))[ CD ]
Line_28 $$ if (listSelection.size() == 1)-->Line_29 $$ myList.ensureIndexIsVisible(listSelection.get(0))[ CD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_17 $$ myTree.scrollPathToVisible(treeSelection.get(0))[ FD ]
Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_9 $$ if (changes.contains(change)) [ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_19 $$ final int size = model.getSize()[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_16 $$ if (treeSelection.size() == 1)[ CD ]
Line_21 $$ for (int i = 0; i < size; i++) -->Line_23 $$ if (changes.contains(el)) [ CD ]
Line_22 $$ final T el = (T) model.getElementAt(i)-->Line_23 $$ if (changes.contains(el)) [ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_9 $$ if (changes.contains(change)) [ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() [ CD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_16 $$ if (treeSelection.size() == 1)[ FD ]
Line_23 $$ if (changes.contains(el)) -->Line_24 $$ listSelection.add(i)[ CD ]
Line_5 $$ final List<TreePath> treeSelection = new ArrayList<TreePath>(changes.size())-->Line_10 $$ treeSelection.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ FD ]
Line_16 $$ if (treeSelection.size() == 1)-->Line_17 $$ myTree.scrollPathToVisible(treeSelection.get(0))[ CD ]
Line_6 $$ TreeUtil.traverse(root, new TreeUtil.Traverse() -->Line_8 $$ final T change = (T) ((DefaultMutableTreeNode) node).getUserObject()[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_18 $$ final ListModel model = myList.getModel()[ CD ]
Line_9 $$ if (changes.contains(change)) -->Line_10 $$ treeSelection.add(new TreePath(((DefaultMutableTreeNode) node).getPath()))[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_3 $$ final DefaultTreeModel treeModel = (DefaultTreeModel) myTree.getModel()[ CD ]
Line_8 $$ final T change = (T) ((DefaultMutableTreeNode) node).getUserObject()-->Line_9 $$ if (changes.contains(change)) [ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_20 $$ final List<Integer> listSelection = new ArrayList<Integer>(changes.size())[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_28 $$ if (listSelection.size() == 1)[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_21 $$ for (int i = 0; i < size; i++) [ CD ]
Line_21 $$ for (int i = 0; i < size; i++) -->Line_24 $$ listSelection.add(i)[ FD ]
Line_2 $$ public void select(final List<T> changes) -->Line_4 $$ final TreeNode root = (TreeNode) treeModel.getRoot()[ CD ]
Line_2 $$ public void select(final List<T> changes) -->Line_23 $$ if (changes.contains(el)) [ FD ]
Line_21 $$ for (int i = 0; i < size; i++) -->Line_22 $$ final T el = (T) model.getElementAt(i)[ FD ]
