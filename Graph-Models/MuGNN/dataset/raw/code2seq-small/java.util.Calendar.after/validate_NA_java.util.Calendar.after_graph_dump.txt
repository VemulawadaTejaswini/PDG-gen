Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_32 $$ Calendar until = recurrence.getUntil()[ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_9 $$ sb.append(startDateDay)[ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) [ FD ]
Line_33 $$ if ((until != null) && startDate.after(until)) -->Line_36 $$ sb.append(startDate.getTimeInMillis())[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_16 $$ sb.append(StringPool.CLOSE_BRACKET)[ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_13 $$ sb.append(startDateYear)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_38 $$ sb.append(until.getTimeInMillis())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_27 $$ sb.append(StringPool.CLOSE_BRACKET)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_15 $$ sb.append(title)[ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_16 $$ sb.append(StringPool.CLOSE_BRACKET)[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_3 $$ if (Validator.isNull(title)) [ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_31 $$ if (repeating) [ CD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_27 $$ sb.append(StringPool.CLOSE_BRACKET)[ CD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_12 $$ sb.append(", startDateYear=")[ CD ]
Line_31 $$ if (repeating) -->Line_32 $$ Calendar until = recurrence.getUntil()[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_30 $$ Calendar startDate = CalendarFactoryUtil.getCalendar(startDateYear, startDateMonth, startDateDay)[ CD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_23 $$ sb.append(", durationMinute=")[ CD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_26 $$ sb.append(title)[ CD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_22 $$ sb.append(durationHour)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_37 $$ sb.append(" must be before recurrence end date time ")[ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_10 $$ sb.append(", startDateMonth=")[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_25 $$ sb.append(", title=")[ FD ]
Line_30 $$ Calendar startDate = CalendarFactoryUtil.getCalendar(startDateYear, startDateMonth, startDateDay)-->Line_33 $$ if ((until != null) && startDate.after(until)) [ FD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_21 $$ sb.append("Invalid date for [ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_35 $$ sb.append("Start date time ")[ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_15 $$ sb.append(title)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_10 $$ sb.append(", startDateMonth=")[ FD ]
Line_30 $$ Calendar startDate = CalendarFactoryUtil.getCalendar(startDateYear, startDateMonth, startDateDay)-->Line_36 $$ sb.append(startDate.getTimeInMillis())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_22 $$ sb.append(durationHour)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_36 $$ sb.append(startDate.getTimeInMillis())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_17 $$ throw new EventStartDateException(sb.toString())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_26 $$ sb.append(title)[ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_7 $$ StringBundler sb = new StringBundler(9)[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_15 $$ sb.append(title)[ FD ]
Line_33 $$ if ((until != null) && startDate.after(until)) -->Line_38 $$ sb.append(until.getTimeInMillis())[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_22 $$ sb.append(durationHour)[ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) [ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_24 $$ sb.append(durationMinute)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_9 $$ sb.append(startDateDay)[ FD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_25 $$ sb.append(", title=")[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_13 $$ sb.append(startDateYear)[ FD ]
Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) -->Line_24 $$ sb.append(durationMinute)[ CD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_11 $$ sb.append(startDateMonth)[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_11 $$ sb.append(startDateMonth)[ FD ]
Line_33 $$ if ((until != null) && startDate.after(until)) -->Line_35 $$ sb.append("Start date time ")[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_30 $$ Calendar startDate = CalendarFactoryUtil.getCalendar(startDateYear, startDateMonth, startDateDay)[ FD ]
Line_32 $$ Calendar until = recurrence.getUntil()-->Line_38 $$ sb.append(until.getTimeInMillis())[ FD ]
Line_32 $$ Calendar until = recurrence.getUntil()-->Line_33 $$ if ((until != null) && startDate.after(until)) [ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_12 $$ sb.append(", startDateYear=")[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_21 $$ sb.append("Invalid date for [ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_39 $$ throw new EventEndDateException(sb.toString())[ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_9 $$ sb.append(startDateDay)[ CD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_8 $$ sb.append("Invalid date for [ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_26 $$ sb.append(title)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_14 $$ sb.append(", title=")[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_23 $$ sb.append(", durationMinute=")[ FD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) [ CD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_14 $$ sb.append(", title=")[ CD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_8 $$ sb.append("Invalid date for [ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_19 $$ if (!allDay && (durationHour <= 0) && (durationMinute <= 0)) [ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_28 $$ throw new EventDurationException(sb.toString())[ FD ]
Line_7 $$ StringBundler sb = new StringBundler(9)-->Line_11 $$ sb.append(startDateMonth)[ FD ]
Line_31 $$ if (repeating) -->Line_33 $$ if ((until != null) && startDate.after(until)) [ CD ]
Line_33 $$ if ((until != null) && startDate.after(until)) -->Line_37 $$ sb.append(" must be before recurrence end date time ")[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_3 $$ if (Validator.isNull(title)) [ FD ]
Line_6 $$ if (!Validator.isDate(startDateMonth, startDateDay, startDateYear)) -->Line_13 $$ sb.append(startDateYear)[ CD ]
Line_2 $$ protected void validate(String title, int startDateMonth, int startDateDay, int startDateYear, int durationHour, int durationMinute, boolean allDay, boolean repeating, TZSRecurrence recurrence) throws PortalException -->Line_24 $$ sb.append(durationMinute)[ FD ]
