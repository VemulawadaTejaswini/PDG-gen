Line_58 $$ if (nel == null) -->Line_59 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_140 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, false), td)[ CD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_26 $$ td.fdMap.put(fd.name, fd)[ FD ]
Line_60 $$ if (nel.content instanceof DTDEmpty || nel.content instanceof DTDAny) -->Line_61 $$ boolean hasAttrFields = false[ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_123 $$ final DTDContainer cont = (DTDContainer) p[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_191 $$ String typeName = model.toJavaTypeName(entity.name, namespace)[ FD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_125 $$ final boolean required = !isChoice && pentry.required && p.cardinal != DTDCardinal.ZEROMANY && p.cardinal != DTDCardinal.OPTIONAL[ CD ]
Line_158 $$ if (p instanceof DTDName) -->Line_159 $$ clist.add(p)[ CD ]
Line_42 $$ final LinkedList<Entry> plist = new LinkedList<Entry>()-->Line_44 $$ plist.add(new Entry(el.content, false, true))[ FD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_55 $$ if (nel != null) [ FD ]
Line_22 $$ boolean duplicates = false-->Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_83 $$ if (nel.content instanceof DTDContainer) -->Line_85 $$ boolean hasTextField = false[ CD ]
Line_66 $$ hasAttrFields = true-->Line_70 $$ if (hasAttrFields || hasTextContents) [ FD ]
Line_166 $$ String s = Util.toJavaFieldName(p.value)-->Line_167 $$ FieldDesc fd = td.fdMap.get(s)[ FD ]
Line_14 $$ final String typeName = model.toJavaTypeName(el.name, namespace)-->Line_15 $$ final String typeQName = model.toJavaQualifiedTypeName(namespace, typeName, false)[ FD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_117 $$ fd1.clType = -fd1.clType[ CD ]
Line_85 $$ boolean hasTextField = false-->Line_96 $$ if (hasTextField && !hasAttrFields) [ FD ]
Line_187 $$ String value = entity.value-->Line_188 $$ if (!value.startsWith("(") || !value.endsWith(")")) [ FD ]
Line_48 $$ final DTDItem p = pentry.p-->Line_158 $$ if (p instanceof DTDName) [ FD ]
Line_48 $$ final DTDItem p = pentry.p-->Line_159 $$ clist.add(p)[ FD ]
Line_91 $$ hasAttrFields = true-->Line_96 $$ if (hasTextField && !hasAttrFields) [ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_11 $$ while (--ptr > -1) [ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_73 $$ fd1.contentQualifiedName = model.toJavaQualifiedTypeName(namespace, fd1.name, false)[ CD ]
Line_153 $$ if (p instanceof DTDContainer) -->Line_158 $$ if (p instanceof DTDName) [ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_128 $$ if (!many && isChoice) [ CD ]
Line_8 $$ int ptr = 1-->Line_105 $$ elements[ptr++] = nel[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_14 $$ final String typeName = model.toJavaTypeName(el.name, namespace)[ FD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_58 $$ if (nel == null) [ FD ]
Line_168 $$ if (fd == null) -->Line_170 $$ if (fd == null) [ CD ]
Line_52 $$ final String pName = n.value-->Line_53 $$ final FieldDesc fd1 = new FieldDesc(FieldDesc.STR, Util.toJavaFieldName(pName), pName, null, "null", pentry.required && (n.cardinal == DTDCardinal.ONEMANY || n.cardinal == DTDCardinal.NONE))[ FD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_165 $$ DTDName p = (DTDName) clist.get(i)[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_139 $$ td.documentation = parseDTDItemDocumentation(dtd, el, "Type " + el.name + " documentation")[ CD ]
Line_48 $$ final DTDItem p = pentry.p-->Line_153 $$ if (p instanceof DTDContainer) [ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_3 $$ final NamespaceDesc nsd = ensureNamespaceExists(namespace)[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_52 $$ final String pName = n.value[ CD ]
Line_43 $$ if (el.content instanceof DTDContainer) -->Line_44 $$ plist.add(new Entry(el.content, false, true))[ CD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_167 $$ FieldDesc fd = td.fdMap.get(s)[ CD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_112 $$ fd1.elementType = fd1.type[ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_127 $$ List<DTDItem> l = cont.getItemsVec()[ CD ]
Line_12 $$ final DTDElement el = elements[ptr]-->Line_139 $$ td.documentation = parseDTDItemDocumentation(dtd, el, "Type " + el.name + " documentation")[ FD ]
Line_151 $$ while (!elist.isEmpty()) -->Line_153 $$ if (p instanceof DTDContainer) [ CD ]
Line_35 $$ FieldDesc fd1 = new FieldDesc(FieldDesc.ATTR, Util.toJavaFieldName(attrName), "String", null, "\"\"", required)-->Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_3 $$ final NamespaceDesc nsd = ensureNamespaceExists(namespace)[ CD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_166 $$ String s = Util.toJavaFieldName(p.value)[ CD ]
Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))-->Line_177 $$ if (fd.required)[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_56 $$ fd1.documentation = parseDTDItemDocumentation(dtd, nel, "Type " + nel.name + " documentation")[ FD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_76 $$ elements[ptr++] = nel[ FD ]
Line_23 $$ if ((el.content instanceof DTDAny) || (el.content instanceof DTDMixed)) -->Line_26 $$ td.fdMap.put(fd.name, fd)[ CD ]
Line_49 $$ if (p instanceof DTDName) -->Line_53 $$ final FieldDesc fd1 = new FieldDesc(FieldDesc.STR, Util.toJavaFieldName(pName), pName, null, "null", pentry.required && (n.cardinal == DTDCardinal.ONEMANY || n.cardinal == DTDCardinal.NONE))[ CD ]
Line_61 $$ boolean hasAttrFields = false-->Line_96 $$ if (hasTextField && !hasAttrFields) [ FD ]
Line_6 $$ final ArrayList<String> resultQNames = new ArrayList<String>()-->Line_16 $$ if (resultQNames.contains(typeQName)) [ FD ]
Line_170 $$ if (fd == null) -->Line_171 $$ Util.logerr("uknown choice element: " + s)[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_59 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ FD ]
Line_152 $$ DTDItem p = elist.removeFirst()-->Line_158 $$ if (p instanceof DTDName) [ FD ]
Line_48 $$ final DTDItem p = pentry.p-->Line_49 $$ if (p instanceof DTDName) [ FD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_168 $$ if (fd == null) [ FD ]
Line_8 $$ int ptr = 1-->Line_76 $$ elements[ptr++] = nel[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_50 $$ final DTDName n = (DTDName) p[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_199 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, true), td)[ FD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_113 $$ fd1.elementName = fd1.name[ CD ]
Line_39 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates-->Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_12 $$ final DTDElement el = elements[ptr]-->Line_13 $$ visitedElements.add(el)[ FD ]
Line_39 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates-->Line_138 $$ td.duplicates = duplicates[ FD ]
Line_3 $$ final NamespaceDesc nsd = ensureNamespaceExists(namespace)-->Line_4 $$ if (nsd.skip)[ FD ]
Line_195 $$ final String s = st.nextToken()-->Line_196 $$ td.fdMap.put(s, new FieldDesc(Util.computeEnumConstantName(s, td.name), s))[ FD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_175 $$ choice[i] = fd[ FD ]
Line_35 $$ FieldDesc fd1 = new FieldDesc(FieldDesc.ATTR, Util.toJavaFieldName(attrName), "String", null, "\"\"", required)-->Line_39 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_90 $$ if (attr.decl != DTDDecl.FIXED && !"ID".equals(attr.type)) -->Line_91 $$ hasAttrFields = true[ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_72 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ CD ]
Line_167 $$ FieldDesc fd = td.fdMap.get(s)-->Line_170 $$ if (fd == null) [ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_103 $$ fd1.contentQualifiedName = model.toJavaQualifiedTypeName(namespace, fd1.tagName, false)[ FD ]
Line_52 $$ final String pName = n.value-->Line_54 $$ fd1.tagName = pName[ FD ]
Line_21 $$ final TypeDesc td = new TypeDesc(el.name, namespace, typeName, TypeDesc.TypeEnum.CLASS)-->Line_140 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, false), td)[ FD ]
Line_193 $$ StringTokenizer st = new StringTokenizer(value, "(|)")-->Line_195 $$ final String s = st.nextToken()[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_9 $$ final HashSet<DTDElement> visitedElements = new HashSet<DTDElement>()[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_12 $$ final DTDElement el = elements[ptr][ CD ]
Line_49 $$ if (p instanceof DTDName) -->Line_55 $$ if (nel != null) [ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_79 $$ fd1.clType = FieldDesc.BOOL[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_10 $$ elements[0] = dtd.rootElement[ CD ]
Line_16 $$ if (resultQNames.contains(typeQName)) -->Line_19 $$ resultQNames.add(typeQName)[ CD ]
Line_85 $$ boolean hasTextField = false-->Line_87 $$ hasTextField = true[ FD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_56 $$ fd1.documentation = parseDTDItemDocumentation(dtd, nel, "Type " + nel.name + " documentation")[ FD ]
Line_41 $$ final ArrayList<List<DTDItem>> choiceList = new ArrayList<List<DTDItem>>()-->Line_129 $$ choiceList.add(l)[ FD ]
Line_46 $$ while (!plist.isEmpty()) -->Line_48 $$ final DTDItem p = pentry.p[ CD ]
Line_194 $$ while (st.hasMoreTokens()) -->Line_195 $$ final String s = st.nextToken()[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_8 $$ int ptr = 1[ CD ]
Line_46 $$ while (!plist.isEmpty()) -->Line_49 $$ if (p instanceof DTDName) [ CD ]
Line_152 $$ DTDItem p = elist.removeFirst()-->Line_159 $$ clist.add(p)[ FD ]
Line_11 $$ while (--ptr > -1) -->Line_22 $$ boolean duplicates = false[ CD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_104 $$ if (!visitedElements.contains(nel)) [ FD ]
Line_148 $$ for (i = 0; i < l.size(); i++) -->Line_149 $$ elist.add(l.get(i))[ CD ]
Line_49 $$ if (p instanceof DTDName) -->Line_58 $$ if (nel == null) [ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_140 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, false), td)[ FD ]
Line_29 $$ String attrName = (String) o-->Line_30 $$ DTDAttribute attr = (DTDAttribute) el.attributes.get(attrName)[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_21 $$ final TypeDesc td = new TypeDesc(el.name, namespace, typeName, TypeDesc.TypeEnum.CLASS)[ CD ]
Line_61 $$ boolean hasAttrFields = false-->Line_70 $$ if (hasAttrFields || hasTextContents) [ FD ]
Line_194 $$ while (st.hasMoreTokens()) -->Line_196 $$ td.fdMap.put(s, new FieldDesc(Util.computeEnumConstantName(s, td.name), s))[ CD ]
Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))-->Line_175 $$ choice[i] = fd[ FD ]
Line_127 $$ List<DTDItem> l = cont.getItemsVec()-->Line_149 $$ elist.add(l.get(i))[ FD ]
Line_168 $$ if (fd == null) -->Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))[ CD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))[ FD ]
Line_167 $$ FieldDesc fd = td.fdMap.get(s)-->Line_175 $$ choice[i] = fd[ FD ]
Line_11 $$ while (--ptr > -1) -->Line_16 $$ if (resultQNames.contains(typeQName)) [ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_72 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)[ CD ]
Line_83 $$ if (nel.content instanceof DTDContainer) -->Line_109 $$ fd1.type = "ERROR:Name"[ CD ]
Line_124 $$ final boolean isChoice = cont instanceof DTDChoice-->Line_125 $$ final boolean required = !isChoice && pentry.required && p.cardinal != DTDCardinal.ZEROMANY && p.cardinal != DTDCardinal.OPTIONAL[ FD ]
Line_9 $$ final HashSet<DTDElement> visitedElements = new HashSet<DTDElement>()-->Line_13 $$ visitedElements.add(el)[ FD ]
Line_11 $$ while (--ptr > -1) -->Line_43 $$ if (el.content instanceof DTDContainer) [ CD ]
Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates-->Line_138 $$ td.duplicates = duplicates[ FD ]
Line_86 $$ if ((nel.content instanceof DTDMixed) && ((DTDMixed) nel.content).getItemsVec().size() == 1) -->Line_87 $$ hasTextField = true[ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_135 $$ Util.logerr("unknown item " + p)[ CD ]
Line_128 $$ if (!many && isChoice) -->Line_129 $$ choiceList.add(l)[ CD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_170 $$ if (fd == null) [ FD ]
Line_6 $$ final ArrayList<String> resultQNames = new ArrayList<String>()-->Line_19 $$ resultQNames.add(typeQName)[ FD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_114 $$ fd1.type = "List<" + fd1.elementType + ">"[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_41 $$ final ArrayList<List<DTDItem>> choiceList = new ArrayList<List<DTDItem>>()[ CD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_102 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ CD ]
Line_65 $$ if (attr.decl != DTDDecl.FIXED && !"ID".equals(attr.type)) -->Line_66 $$ hasAttrFields = true[ CD ]
Line_66 $$ hasAttrFields = true-->Line_91 $$ hasAttrFields = true[ FD ]
Line_104 $$ if (!visitedElements.contains(nel)) -->Line_105 $$ elements[ptr++] = nel[ CD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_115 $$ fd1.name = Util.pluralize(fd1.name)[ CD ]
Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))-->Line_170 $$ if (fd == null) [ FD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_175 $$ choice[i] = fd[ CD ]
Line_23 $$ if ((el.content instanceof DTDAny) || (el.content instanceof DTDMixed)) -->Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_138 $$ td.duplicates = duplicates[ CD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_97 $$ fd1.clType = FieldDesc.STR[ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_74 $$ fd1.def = "null"[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_73 $$ fd1.contentQualifiedName = model.toJavaQualifiedTypeName(namespace, fd1.name, false)[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_139 $$ td.documentation = parseDTDItemDocumentation(dtd, el, "Type " + el.name + " documentation")[ FD ]
Line_83 $$ if (nel.content instanceof DTDContainer) -->Line_86 $$ if ((nel.content instanceof DTDMixed) && ((DTDMixed) nel.content).getItemsVec().size() == 1) [ CD ]
Line_152 $$ DTDItem p = elist.removeFirst()-->Line_153 $$ if (p instanceof DTDContainer) [ FD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_177 $$ if (fd.required)[ CD ]
Line_75 $$ if (!visitedElements.contains(nel)) -->Line_76 $$ elements[ptr++] = nel[ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_124 $$ final boolean isChoice = cont instanceof DTDChoice[ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_75 $$ if (!visitedElements.contains(nel)) [ CD ]
Line_62 $$ boolean hasTextContents = nel.content instanceof DTDAny-->Line_70 $$ if (hasAttrFields || hasTextContents) [ FD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_118 $$ fd1.comment = "array of " + fd1.elementType[ CD ]
Line_53 $$ final FieldDesc fd1 = new FieldDesc(FieldDesc.STR, Util.toJavaFieldName(pName), pName, null, "null", pentry.required && (n.cardinal == DTDCardinal.ONEMANY || n.cardinal == DTDCardinal.NONE))-->Line_121 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_11 $$ while (--ptr > -1) -->Line_14 $$ final String typeName = model.toJavaTypeName(el.name, namespace)[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_46 $$ while (!plist.isEmpty()) [ CD ]
Line_127 $$ List<DTDItem> l = cont.getItemsVec()-->Line_129 $$ choiceList.add(l)[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_7 $$ final DTDElement[] elements = new DTDElement[dtd.elements.size()][ CD ]
Line_166 $$ String s = Util.toJavaFieldName(p.value)-->Line_196 $$ td.fdMap.put(s, new FieldDesc(Util.computeEnumConstantName(s, td.name), s))[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) [ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_6 $$ final ArrayList<String> resultQNames = new ArrayList<String>()[ CD ]
Line_49 $$ if (p instanceof DTDName) -->Line_120 $$ fd1.realIndex = td.fdMap.size()[ CD ]
Line_15 $$ final String typeQName = model.toJavaQualifiedTypeName(namespace, typeName, false)-->Line_16 $$ if (resultQNames.contains(typeQName)) [ FD ]
Line_21 $$ final TypeDesc td = new TypeDesc(el.name, namespace, typeName, TypeDesc.TypeEnum.CLASS)-->Line_199 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, true), td)[ FD ]
Line_60 $$ if (nel.content instanceof DTDEmpty || nel.content instanceof DTDAny) -->Line_70 $$ if (hasAttrFields || hasTextContents) [ CD ]
Line_192 $$ TypeDesc td = new TypeDesc(entity.name, namespace, typeName, TypeDesc.TypeEnum.ENUM)-->Line_199 $$ jtMap.put(model.toJavaQualifiedTypeName(namespace, td.name, true), td)[ FD ]
Line_186 $$ for (DTDEntity entity : entList) -->Line_198 $$ td.documentation = parseDTDItemDocumentation(dtd, entity, "Type " + entity.name + " documentation")[ FD ]
Line_155 $$ for (DTDItem aL2 : l2) -->Line_156 $$ elist.addFirst(aL2)[ FD ]
Line_11 $$ while (--ptr > -1) -->Line_13 $$ visitedElements.add(el)[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_102 $$ fd1.type = model.toJavaTypeName(fd1.tagName, namespace)[ FD ]
Line_22 $$ boolean duplicates = false-->Line_39 $$ duplicates = Util.addToNameMap(td.fdMap, fd1, false) || duplicates[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_185 $$ List<DTDEntity> entList = dtd.getItemsByType(DTDEntity.class)[ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_122 $$ if (p instanceof DTDContainer) [ CD ]
Line_153 $$ if (p instanceof DTDContainer) -->Line_154 $$ List<DTDItem> l2 = ((DTDContainer) p).getItemsVec()[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_185 $$ List<DTDEntity> entList = dtd.getItemsByType(DTDEntity.class)[ CD ]
Line_122 $$ if (p instanceof DTDContainer) -->Line_126 $$ final boolean many = p.cardinal == DTDCardinal.ONEMANY || p.cardinal == DTDCardinal.ZEROMANY[ CD ]
Line_8 $$ int ptr = 1-->Line_11 $$ while (--ptr > -1) [ FD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_104 $$ if (!visitedElements.contains(nel)) [ CD ]
Line_167 $$ FieldDesc fd = td.fdMap.get(s)-->Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))[ FD ]
Line_9 $$ final HashSet<DTDElement> visitedElements = new HashSet<DTDElement>()-->Line_75 $$ if (!visitedElements.contains(nel)) [ FD ]
Line_127 $$ List<DTDItem> l = cont.getItemsVec()-->Line_148 $$ for (i = 0; i < l.size(); i++) [ FD ]
Line_42 $$ final LinkedList<Entry> plist = new LinkedList<Entry>()-->Line_47 $$ final Entry pentry = plist.removeFirst()[ FD ]
Line_60 $$ if (nel.content instanceof DTDEmpty || nel.content instanceof DTDAny) -->Line_62 $$ boolean hasTextContents = nel.content instanceof DTDAny[ CD ]
Line_22 $$ boolean duplicates = false-->Line_138 $$ td.duplicates = duplicates[ FD ]
Line_167 $$ FieldDesc fd = td.fdMap.get(s)-->Line_177 $$ if (fd.required)[ FD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_98 $$ fd1.type = "String"[ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_15 $$ final String typeQName = model.toJavaQualifiedTypeName(namespace, typeName, false)[ FD ]
Line_55 $$ if (nel != null) -->Line_56 $$ fd1.documentation = parseDTDItemDocumentation(dtd, nel, "Type " + nel.name + " documentation")[ CD ]
Line_61 $$ boolean hasAttrFields = false-->Line_66 $$ hasAttrFields = true[ FD ]
Line_15 $$ final String typeQName = model.toJavaQualifiedTypeName(namespace, typeName, false)-->Line_19 $$ resultQNames.add(typeQName)[ FD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_99 $$ fd1.def = "null"[ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_71 $$ fd1.clType = FieldDesc.OBJ[ CD ]
Line_29 $$ String attrName = (String) o-->Line_36 $$ fd1.tagName = attrName[ FD ]
Line_42 $$ final LinkedList<Entry> plist = new LinkedList<Entry>()-->Line_46 $$ while (!plist.isEmpty()) [ FD ]
Line_46 $$ while (!plist.isEmpty()) -->Line_47 $$ final Entry pentry = plist.removeFirst()[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_15 $$ final String typeQName = model.toJavaQualifiedTypeName(namespace, typeName, false)[ CD ]
Line_124 $$ final boolean isChoice = cont instanceof DTDChoice-->Line_128 $$ if (!many && isChoice) [ FD ]
Line_60 $$ if (nel.content instanceof DTDEmpty || nel.content instanceof DTDAny) -->Line_83 $$ if (nel.content instanceof DTDContainer) [ CD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_81 $$ fd1.def = "false"[ CD ]
Line_48 $$ final DTDItem p = pentry.p-->Line_122 $$ if (p instanceof DTDContainer) [ FD ]
Line_66 $$ hasAttrFields = true-->Line_96 $$ if (hasTextField && !hasAttrFields) [ FD ]
Line_123 $$ final DTDContainer cont = (DTDContainer) p-->Line_127 $$ List<DTDItem> l = cont.getItemsVec()[ FD ]
Line_151 $$ while (!elist.isEmpty()) -->Line_152 $$ DTDItem p = elist.removeFirst()[ CD ]
Line_91 $$ hasAttrFields = true-->Line_70 $$ if (hasAttrFields || hasTextContents) [ FD ]
Line_87 $$ hasTextField = true-->Line_96 $$ if (hasTextField && !hasAttrFields) [ FD ]
Line_164 $$ for (i = 0; i < choice.length; i++) -->Line_168 $$ if (fd == null) [ CD ]
Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))-->Line_168 $$ if (fd == null) [ FD ]
Line_49 $$ if (p instanceof DTDName) -->Line_54 $$ fd1.tagName = pName[ CD ]
Line_58 $$ if (nel == null) -->Line_60 $$ if (nel.content instanceof DTDEmpty || nel.content instanceof DTDAny) [ CD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_4 $$ if (nsd.skip)[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_23 $$ if ((el.content instanceof DTDAny) || (el.content instanceof DTDMixed)) [ CD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_105 $$ elements[ptr++] = nel[ FD ]
Line_23 $$ if ((el.content instanceof DTDAny) || (el.content instanceof DTDMixed)) -->Line_25 $$ fd.realIndex = td.fdMap.size()[ CD ]
Line_9 $$ final HashSet<DTDElement> visitedElements = new HashSet<DTDElement>()-->Line_104 $$ if (!visitedElements.contains(nel)) [ FD ]
Line_70 $$ if (hasAttrFields || hasTextContents) -->Line_80 $$ fd1.type = "boolean"[ CD ]
Line_167 $$ FieldDesc fd = td.fdMap.get(s)-->Line_168 $$ if (fd == null) [ FD ]
Line_83 $$ if (nel.content instanceof DTDContainer) -->Line_96 $$ if (hasTextField && !hasAttrFields) [ CD ]
Line_111 $$ if ((pentry.many || n.cardinal.type >= 2) && fd1.clType != FieldDesc.BOOL) -->Line_116 $$ fd1.def = "new ArrayList(0)"[ CD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_101 $$ fd1.clType = FieldDesc.OBJ[ CD ]
Line_11 $$ while (--ptr > -1) -->Line_42 $$ final LinkedList<Entry> plist = new LinkedList<Entry>()[ CD ]
Line_166 $$ String s = Util.toJavaFieldName(p.value)-->Line_169 $$ fd = td.fdMap.get(Util.pluralize(s))[ FD ]
Line_42 $$ final LinkedList<Entry> plist = new LinkedList<Entry>()-->Line_132 $$ plist.add(new Entry(aL, many, required))[ FD ]
Line_126 $$ final boolean many = p.cardinal == DTDCardinal.ONEMANY || p.cardinal == DTDCardinal.ZEROMANY-->Line_128 $$ if (!many && isChoice) [ FD ]
Line_29 $$ String attrName = (String) o-->Line_35 $$ FieldDesc fd1 = new FieldDesc(FieldDesc.ATTR, Util.toJavaFieldName(attrName), "String", null, "\"\"", required)[ FD ]
Line_2 $$ private void processDTD(String namespace, DTD dtd, Map<String, TypeDesc> jtMap, Map<String, NamespaceDesc> nsdMap) -->Line_198 $$ td.documentation = parseDTDItemDocumentation(dtd, entity, "Type " + entity.name + " documentation")[ FD ]
Line_96 $$ if (hasTextField && !hasAttrFields) -->Line_103 $$ fd1.contentQualifiedName = model.toJavaQualifiedTypeName(namespace, fd1.tagName, false)[ CD ]
Line_24 $$ FieldDesc fd = new FieldDesc(FieldDesc.SIMPLE, "value", "String", null, "null", false)-->Line_177 $$ if (fd.required)[ FD ]
Line_61 $$ boolean hasAttrFields = false-->Line_91 $$ hasAttrFields = true[ FD ]
Line_4 $$ if (nsd.skip)-->Line_5 $$ return[ CD ]
Line_51 $$ final DTDElement nel = (DTDElement) dtd.elements.get(n.value)-->Line_75 $$ if (!visitedElements.contains(nel)) [ FD ]
Line_193 $$ StringTokenizer st = new StringTokenizer(value, "(|)")-->Line_194 $$ while (st.hasMoreTokens()) [ FD ]
