Line_13 $$ final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent()-->Line_15 $$ final PsiElement parentOfParent = nameSuggestionContextParent.getParent()[ FD ]
Line_37 $$ if (!list.contains(initialName)) -->Line_38 $$ list.add(initialName)[ CD ]
Line_13 $$ final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent()-->Line_14 $$ if (nameSuggestionContextParent instanceof PsiParameterList) [ FD ]
Line_6 $$ SuggestedNameInfo info = suggestNamesForElement(element, nameSuggestionContext)-->Line_8 $$ info = JavaCodeStyleManager.getInstance(element.getProject()).suggestUniqueVariableName(info, element, true, true)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_28 $$ if (properlyCased != null) [ CD ]
Line_17 $$ final String propName = PropertyUtil.getPropertyName((PsiMethod) parentOfParent)-->Line_19 $$ parameterName = propName[ FD ]
Line_14 $$ if (nameSuggestionContextParent instanceof PsiParameterList) -->Line_16 $$ if (parentOfParent instanceof PsiMethod) [ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_37 $$ if (!list.contains(initialName)) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_45 $$ result.addAll(list)[ FD ]
Line_12 $$ if (nameSuggestionContext instanceof PsiParameter) -->Line_13 $$ final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent()[ CD ]
Line_16 $$ if (parentOfParent instanceof PsiMethod) -->Line_21 $$ superMethodName = getSuperMethodName((PsiParameter) nameSuggestionContext, (PsiMethod) parentOfParent)[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_27 $$ final String[] properlyCased = suggestProperlyCasedName(element)[ CD ]
Line_19 $$ parameterName = propName-->Line_32 $$ list.add(parameterName)[ FD ]
Line_5 $$ String initialName = UsageViewUtil.getShortName(element)-->Line_42 $$ list.add(initialName)[ FD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_40 $$ int i = list.indexOf(initialName)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_25 $$ final String[] strings = info != null ? info.names : ArrayUtil.EMPTY_STRING_ARRAY[ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_32 $$ list.add(parameterName)[ FD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_38 $$ list.add(initialName)[ FD ]
Line_10 $$ String parameterName = null-->Line_19 $$ parameterName = propName[ FD ]
Line_11 $$ String superMethodName = null-->Line_34 $$ if (superMethodName != null && !list.contains(superMethodName)) [ FD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_35 $$ list.add(0, superMethodName)[ FD ]
Line_31 $$ if (parameterName != null && !list.contains(parameterName)) -->Line_32 $$ list.add(parameterName)[ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_42 $$ list.add(initialName)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_5 $$ String initialName = UsageViewUtil.getShortName(element)[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_8 $$ info = JavaCodeStyleManager.getInstance(element.getProject()).suggestUniqueVariableName(info, element, true, true)[ FD ]
Line_18 $$ if (propName != null) -->Line_19 $$ parameterName = propName[ CD ]
Line_11 $$ String superMethodName = null-->Line_35 $$ list.add(0, superMethodName)[ FD ]
Line_21 $$ superMethodName = getSuperMethodName((PsiParameter) nameSuggestionContext, (PsiMethod) parentOfParent)-->Line_35 $$ list.add(0, superMethodName)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_12 $$ if (nameSuggestionContext instanceof PsiParameter) [ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_46 $$ return info[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_37 $$ if (!list.contains(initialName)) [ CD ]
Line_40 $$ int i = list.indexOf(initialName)-->Line_41 $$ list.remove(i)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_31 $$ if (parameterName != null && !list.contains(parameterName)) [ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_34 $$ if (superMethodName != null && !list.contains(superMethodName)) [ FD ]
Line_28 $$ if (properlyCased != null) -->Line_29 $$ Collections.addAll(list, properlyCased)[ CD ]
Line_12 $$ if (nameSuggestionContext instanceof PsiParameter) -->Line_14 $$ if (nameSuggestionContextParent instanceof PsiParameterList) [ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_13 $$ final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent()[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_3 $$ if (!element.getLanguage().isKindOf(JavaLanguage.INSTANCE))[ FD ]
Line_16 $$ if (parentOfParent instanceof PsiMethod) -->Line_18 $$ if (propName != null) [ CD ]
Line_37 $$ if (!list.contains(initialName)) -->Line_41 $$ list.remove(i)[ CD ]
Line_5 $$ String initialName = UsageViewUtil.getShortName(element)-->Line_40 $$ int i = list.indexOf(initialName)[ FD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_45 $$ result.addAll(list)[ FD ]
Line_3 $$ if (!element.getLanguage().isKindOf(JavaLanguage.INSTANCE))-->Line_4 $$ return null[ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_41 $$ list.remove(i)[ FD ]
Line_19 $$ parameterName = propName-->Line_31 $$ if (parameterName != null && !list.contains(parameterName)) [ FD ]
Line_27 $$ final String[] properlyCased = suggestProperlyCasedName(element)-->Line_29 $$ Collections.addAll(list, properlyCased)[ FD ]
Line_10 $$ String parameterName = null-->Line_32 $$ list.add(parameterName)[ FD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_44 $$ ContainerUtil.removeDuplicates(list)[ FD ]
Line_5 $$ String initialName = UsageViewUtil.getShortName(element)-->Line_37 $$ if (!list.contains(initialName)) [ FD ]
Line_37 $$ if (!list.contains(initialName)) -->Line_42 $$ list.add(initialName)[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_11 $$ String superMethodName = null[ CD ]
Line_15 $$ final PsiElement parentOfParent = nameSuggestionContextParent.getParent()-->Line_16 $$ if (parentOfParent instanceof PsiMethod) [ FD ]
Line_5 $$ String initialName = UsageViewUtil.getShortName(element)-->Line_38 $$ list.add(initialName)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_7 $$ if (info != null) [ CD ]
Line_21 $$ superMethodName = getSuperMethodName((PsiParameter) nameSuggestionContext, (PsiMethod) parentOfParent)-->Line_34 $$ if (superMethodName != null && !list.contains(superMethodName)) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_34 $$ if (superMethodName != null && !list.contains(superMethodName)) [ CD ]
Line_7 $$ if (info != null) -->Line_8 $$ info = JavaCodeStyleManager.getInstance(element.getProject()).suggestUniqueVariableName(info, element, true, true)[ CD ]
Line_34 $$ if (superMethodName != null && !list.contains(superMethodName)) -->Line_35 $$ list.add(0, superMethodName)[ CD ]
Line_10 $$ String parameterName = null-->Line_31 $$ if (parameterName != null && !list.contains(parameterName)) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_12 $$ if (nameSuggestionContext instanceof PsiParameter) [ FD ]
Line_27 $$ final String[] properlyCased = suggestProperlyCasedName(element)-->Line_28 $$ if (properlyCased != null) [ FD ]
Line_6 $$ SuggestedNameInfo info = suggestNamesForElement(element, nameSuggestionContext)-->Line_7 $$ if (info != null) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_5 $$ String initialName = UsageViewUtil.getShortName(element)[ FD ]
Line_25 $$ final String[] strings = info != null ? info.names : ArrayUtil.EMPTY_STRING_ARRAY-->Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))[ FD ]
Line_37 $$ if (!list.contains(initialName)) -->Line_40 $$ int i = list.indexOf(initialName)[ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_29 $$ Collections.addAll(list, properlyCased)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_6 $$ SuggestedNameInfo info = suggestNamesForElement(element, nameSuggestionContext)[ CD ]
Line_16 $$ if (parentOfParent instanceof PsiMethod) -->Line_17 $$ final String propName = PropertyUtil.getPropertyName((PsiMethod) parentOfParent)[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))[ CD ]
Line_26 $$ final ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings))-->Line_31 $$ if (parameterName != null && !list.contains(parameterName)) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_27 $$ final String[] properlyCased = suggestProperlyCasedName(element)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_3 $$ if (!element.getLanguage().isKindOf(JavaLanguage.INSTANCE))[ CD ]
Line_14 $$ if (nameSuggestionContextParent instanceof PsiParameterList) -->Line_15 $$ final PsiElement parentOfParent = nameSuggestionContextParent.getParent()[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_44 $$ ContainerUtil.removeDuplicates(list)[ CD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_10 $$ String parameterName = null[ CD ]
Line_17 $$ final String propName = PropertyUtil.getPropertyName((PsiMethod) parentOfParent)-->Line_18 $$ if (propName != null) [ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_6 $$ SuggestedNameInfo info = suggestNamesForElement(element, nameSuggestionContext)[ FD ]
Line_11 $$ String superMethodName = null-->Line_21 $$ superMethodName = getSuperMethodName((PsiParameter) nameSuggestionContext, (PsiMethod) parentOfParent)[ FD ]
Line_2 $$ public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, Set<String> result) -->Line_45 $$ result.addAll(list)[ CD ]
