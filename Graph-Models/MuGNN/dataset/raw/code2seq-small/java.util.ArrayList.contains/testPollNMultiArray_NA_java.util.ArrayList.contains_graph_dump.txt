Line_2 $$ public void testPollNMultiArray() -->Line_31 $$ poll = set.pollToArray(poll)[ CD ]
Line_12 $$ poll = new Integer[NUM]-->Line_13 $$ poll = set.pollToArray(poll)[ FD ]
Line_15 $$ for (int i = 0; i < NUM - 10; i++) -->Line_33 $$ assertTrue(set.contains(list.get(i)))[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_23 $$ assertTrue(set.isEmpty())[ CD ]
Line_26 $$ for (int i = 0; i < NUM; i++) -->Line_27 $$ assertTrue(list.contains(poll[i]))[ CD ]
Line_22 $$ poll = set.pollToArray(poll)-->Line_30 $$ poll = new Integer[0][ FD ]
Line_13 $$ poll = set.pollToArray(poll)-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_12 $$ poll = new Integer[NUM][ CD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_26 $$ for (int i = 0; i < NUM; i++) -->Line_32 $$ for (int i = 0; i < NUM; i++) [ FD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_12 $$ poll = new Integer[NUM][ FD ]
Line_12 $$ poll = new Integer[NUM]-->Line_21 $$ poll = new Integer[NUM][ FD ]
Line_12 $$ poll = new Integer[NUM]-->Line_22 $$ poll = set.pollToArray(poll)[ FD ]
Line_26 $$ for (int i = 0; i < NUM; i++) -->Line_33 $$ assertTrue(set.contains(list.get(i)))[ FD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_6 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_3 $$ LOG.info("Test pollN multi array")[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_21 $$ poll = new Integer[NUM][ CD ]
Line_32 $$ for (int i = 0; i < NUM; i++) -->Line_33 $$ assertTrue(set.contains(list.get(i)))[ FD ]
Line_21 $$ poll = new Integer[NUM]-->Line_22 $$ poll = set.pollToArray(poll)[ FD ]
Line_8 $$ for (Integer i : poll) -->Line_32 $$ for (int i = 0; i < NUM; i++) [ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_13 $$ poll = set.pollToArray(poll)[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_22 $$ poll = set.pollToArray(poll)[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_24 $$ assertEquals(0, set.size())[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_36 $$ LOG.info("Test pollN multi array- DONE")[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_32 $$ for (int i = 0; i < NUM; i++) [ CD ]
Line_8 $$ for (Integer i : poll) -->Line_9 $$ assertTrue(list.contains(i))[ FD ]
Line_15 $$ for (int i = 0; i < NUM - 10; i++) -->Line_26 $$ for (int i = 0; i < NUM; i++) [ FD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_12 $$ poll = new Integer[NUM][ FD ]
Line_32 $$ for (int i = 0; i < NUM; i++) -->Line_33 $$ assertTrue(set.contains(list.get(i)))[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_30 $$ poll = new Integer[0][ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_19 $$ assertEquals(0, set.size())[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_6 $$ poll = set.pollToArray(poll)[ CD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_30 $$ poll = new Integer[0][ FD ]
Line_15 $$ for (int i = 0; i < NUM - 10; i++) -->Line_16 $$ assertTrue(list.contains(poll[i]))[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_7 $$ assertEquals(10, poll.length)[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_14 $$ assertEquals(NUM - 10, poll.length)[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_26 $$ for (int i = 0; i < NUM; i++) [ CD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_13 $$ poll = set.pollToArray(poll)[ FD ]
Line_8 $$ for (Integer i : poll) -->Line_15 $$ for (int i = 0; i < NUM - 10; i++) [ FD ]
Line_21 $$ poll = new Integer[NUM]-->Line_30 $$ poll = new Integer[0][ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_18 $$ assertTrue(set.isEmpty())[ CD ]
Line_13 $$ poll = set.pollToArray(poll)-->Line_21 $$ poll = new Integer[NUM][ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_35 $$ assertEquals(0, poll.length)[ CD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_21 $$ poll = new Integer[NUM][ FD ]
Line_8 $$ for (Integer i : poll) -->Line_33 $$ assertTrue(set.contains(list.get(i)))[ FD ]
Line_12 $$ poll = new Integer[NUM]-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_29 $$ set.addAll(list)[ CD ]
Line_2 $$ public void testPollNMultiArray() -->Line_4 $$ set.addAll(list)[ CD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_21 $$ poll = new Integer[NUM][ FD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_13 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_20 $$ set.addAll(list)[ CD ]
Line_12 $$ poll = new Integer[NUM]-->Line_30 $$ poll = new Integer[0][ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_15 $$ for (int i = 0; i < NUM - 10; i++) [ CD ]
Line_13 $$ poll = set.pollToArray(poll)-->Line_30 $$ poll = new Integer[0][ FD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_8 $$ for (Integer i : poll) -->Line_26 $$ for (int i = 0; i < NUM; i++) [ FD ]
Line_30 $$ poll = new Integer[0]-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_5 $$ Integer[] poll = new Integer[10][ CD ]
Line_13 $$ poll = set.pollToArray(poll)-->Line_22 $$ poll = set.pollToArray(poll)[ FD ]
Line_8 $$ for (Integer i : poll) -->Line_10 $$ assertFalse(set.contains(i))[ FD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_22 $$ poll = set.pollToArray(poll)[ FD ]
Line_15 $$ for (int i = 0; i < NUM - 10; i++) -->Line_32 $$ for (int i = 0; i < NUM; i++) [ FD ]
Line_22 $$ poll = set.pollToArray(poll)-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_2 $$ public void testPollNMultiArray() -->Line_25 $$ assertEquals(NUM, poll.length)[ CD ]
Line_21 $$ poll = new Integer[NUM]-->Line_31 $$ poll = set.pollToArray(poll)[ FD ]
Line_5 $$ Integer[] poll = new Integer[10]-->Line_22 $$ poll = set.pollToArray(poll)[ FD ]
Line_6 $$ poll = set.pollToArray(poll)-->Line_30 $$ poll = new Integer[0][ FD ]
