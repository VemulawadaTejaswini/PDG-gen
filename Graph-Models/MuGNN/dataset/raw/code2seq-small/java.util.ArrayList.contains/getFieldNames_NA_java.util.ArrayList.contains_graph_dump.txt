Line_17 $$ for (final PsiField field : fields) -->Line_42 $$ final PsiType fieldType = field.getType()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_48 $$ String text = FormInspectionUtil.getText(component.getModule(), component)[ CD ]
Line_51 $$ if (binding != null && !result.contains(binding)) -->Line_52 $$ result.add(binding)[ CD ]
Line_21 $$ final String fieldName = field.getName()-->Line_46 $$ result.add(fieldName)[ FD ]
Line_30 $$ componentClassName = component.getComponentClassName()-->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_3 $$ final ArrayList<String> result = new ArrayList<String>()[ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_7 $$ final IRootContainer root = FormEditingUtil.getRoot(component)[ FD ]
Line_42 $$ final PsiType fieldType = field.getType()-->Line_43 $$ if (!fieldType.isAssignableFrom(componentType)) [ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_5 $$ result.add(currentName)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_48 $$ String text = FormInspectionUtil.getText(component.getModule(), component)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_4 $$ if (currentName != null) [ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_29 $$ if (component instanceof RadErrorComponent) [ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_14 $$ return ArrayUtil.toStringArray(result)[ FD ]
Line_48 $$ String text = FormInspectionUtil.getText(component.getModule(), component)-->Line_49 $$ if (text != null) [ FD ]
Line_49 $$ if (text != null) -->Line_51 $$ if (binding != null && !result.contains(binding)) [ CD ]
Line_50 $$ String binding = BindingProperty.suggestBindingFromText(component, text)-->Line_51 $$ if (binding != null && !result.contains(binding)) [ FD ]
Line_28 $$ final String componentClassName-->Line_32 $$ componentClassName = Spacer.class.getName()[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_51 $$ if (binding != null && !result.contains(binding)) [ FD ]
Line_36 $$ final PsiType componentType-->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_22 $$ if (Comparing.equal(currentName, fieldName)) [ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_46 $$ result.add(fieldName)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_4 $$ if (currentName != null) [ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_8 $$ final String className = root.getClassToBind()[ CD ]
Line_55 $$ final String[] names = ArrayUtil.toStringArray(result)-->Line_56 $$ Arrays.sort(names)[ FD ]
Line_28 $$ final String componentClassName-->Line_30 $$ componentClassName = component.getComponentClassName()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_7 $$ final IRootContainer root = FormEditingUtil.getRoot(component)[ CD ]
Line_31 $$ if (component instanceof RadHSpacer || component instanceof RadVSpacer) -->Line_34 $$ componentClassName = component.getComponentClass().getName()[ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_56 $$ Arrays.sort(names)[ CD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_10 $$ return ArrayUtil.toStringArray(result)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_25 $$ if (!FormEditingUtil.isBindingUnique(component, fieldName, root)) [ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_9 $$ if (className == null) [ CD ]
Line_8 $$ final String className = root.getClassToBind()-->Line_12 $$ final PsiClass aClass = FormEditingUtil.findClassToBind(component.getModule(), className)[ FD ]
Line_21 $$ final String fieldName = field.getName()-->Line_25 $$ if (!FormEditingUtil.isBindingUnique(component, fieldName, root)) [ FD ]
Line_50 $$ String binding = BindingProperty.suggestBindingFromText(component, text)-->Line_52 $$ result.add(binding)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_12 $$ final PsiClass aClass = FormEditingUtil.findClassToBind(component.getModule(), className)[ FD ]
Line_49 $$ if (text != null) -->Line_50 $$ String binding = BindingProperty.suggestBindingFromText(component, text)[ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_13 $$ if (aClass == null) [ CD ]
Line_12 $$ final PsiClass aClass = FormEditingUtil.findClassToBind(component.getModule(), className)-->Line_16 $$ final PsiField[] fields = aClass.getFields()[ FD ]
Line_12 $$ final PsiClass aClass = FormEditingUtil.findClassToBind(component.getModule(), className)-->Line_13 $$ if (aClass == null) [ FD ]
Line_30 $$ componentClassName = component.getComponentClassName()-->Line_34 $$ componentClassName = component.getComponentClass().getName()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_34 $$ componentClassName = component.getComponentClass().getName()[ FD ]
Line_30 $$ componentClassName = component.getComponentClassName()-->Line_32 $$ componentClassName = Spacer.class.getName()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_5 $$ result.add(currentName)[ FD ]
Line_28 $$ final String componentClassName-->Line_34 $$ componentClassName = component.getComponentClass().getName()[ FD ]
Line_21 $$ final String fieldName = field.getName()-->Line_22 $$ if (Comparing.equal(currentName, fieldName)) [ FD ]
Line_13 $$ if (aClass == null) -->Line_14 $$ return ArrayUtil.toStringArray(result)[ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_12 $$ final PsiClass aClass = FormEditingUtil.findClassToBind(component.getModule(), className)[ CD ]
Line_34 $$ componentClassName = component.getComponentClass().getName()-->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_28 $$ final String componentClassName-->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_55 $$ final String[] names = ArrayUtil.toStringArray(result)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_30 $$ componentClassName = component.getComponentClassName()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_50 $$ String binding = BindingProperty.suggestBindingFromText(component, text)[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_52 $$ result.add(binding)[ FD ]
Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)-->Line_43 $$ if (!fieldType.isAssignableFrom(componentType)) [ FD ]
Line_17 $$ for (final PsiField field : fields) -->Line_18 $$ if (field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_32 $$ componentClassName = Spacer.class.getName()-->Line_38 $$ componentType = JavaPsiFacade.getInstance(component.getProject()).getElementFactory().createTypeFromText(componentClassName, null)[ FD ]
Line_36 $$ final PsiType componentType-->Line_43 $$ if (!fieldType.isAssignableFrom(componentType)) [ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_16 $$ final PsiField[] fields = aClass.getFields()[ CD ]
Line_32 $$ componentClassName = Spacer.class.getName()-->Line_34 $$ componentClassName = component.getComponentClass().getName()[ FD ]
Line_9 $$ if (className == null) -->Line_10 $$ return ArrayUtil.toStringArray(result)[ CD ]
Line_29 $$ if (component instanceof RadErrorComponent) -->Line_30 $$ componentClassName = component.getComponentClassName()[ CD ]
Line_17 $$ for (final PsiField field : fields) -->Line_21 $$ final String fieldName = field.getName()[ FD ]
Line_7 $$ final IRootContainer root = FormEditingUtil.getRoot(component)-->Line_8 $$ final String className = root.getClassToBind()[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_49 $$ if (text != null) [ CD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_55 $$ final String[] names = ArrayUtil.toStringArray(result)[ CD ]
Line_29 $$ if (component instanceof RadErrorComponent) -->Line_31 $$ if (component instanceof RadHSpacer || component instanceof RadVSpacer) [ CD ]
Line_7 $$ final IRootContainer root = FormEditingUtil.getRoot(component)-->Line_25 $$ if (!FormEditingUtil.isBindingUnique(component, fieldName, root)) [ FD ]
Line_48 $$ String text = FormInspectionUtil.getText(component.getModule(), component)-->Line_50 $$ String binding = BindingProperty.suggestBindingFromText(component, text)[ FD ]
Line_2 $$ private static String[] getFieldNames(final RadComponent component, final String currentName) -->Line_57 $$ return names[ CD ]
Line_8 $$ final String className = root.getClassToBind()-->Line_9 $$ if (className == null) [ FD ]
Line_31 $$ if (component instanceof RadHSpacer || component instanceof RadVSpacer) -->Line_32 $$ componentClassName = Spacer.class.getName()[ CD ]
Line_4 $$ if (currentName != null) -->Line_5 $$ result.add(currentName)[ CD ]
