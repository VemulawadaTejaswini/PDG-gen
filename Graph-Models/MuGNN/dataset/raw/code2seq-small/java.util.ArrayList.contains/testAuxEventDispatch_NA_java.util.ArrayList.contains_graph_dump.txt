Line_2 $$ public void testAuxEventDispatch() -->Line_32 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId1, 1)[ CD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_45 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_21 $$ aux.handle(event)[ CD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_18 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_22 $$ Collection<AuxiliaryService> servs = aux.getServices()[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, "Asrv"), ServiceA.class, Service.class)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setInt("B.expected.stop", 1)[ FD ]
Line_34 $$ Container container = new ContainerImpl(null, null, null, null, null, null, cti)-->Line_35 $$ ContainerId containerId = container.getContainerId()[ FD ]
Line_34 $$ Container container = new ContainerImpl(null, null, null, null, null, null, cti)-->Line_36 $$ Resource resource = container.getResource()[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_11 $$ aux.start()[ CD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_10 $$ aux.init(conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] [ FD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)[ FD ]
Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)-->Line_46 $$ aux.handle(event)[ FD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_21 $$ aux.handle(event)[ FD ]
Line_35 $$ ContainerId containerId = container.getContainerId()-->Line_48 $$ assertEquals(containerId, ((LightService) serv).containerId)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_4 $$ conf.setStrings(YarnConfiguration.NM_AUX_SERVICES, new String[] [ CD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_38 $$ aux.handle(event)[ FD ]
Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)-->Line_38 $$ aux.handle(event)[ FD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocate(6)-->Line_16 $$ buf.flip()[ FD ]
Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)-->Line_21 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_16 $$ buf.flip()[ CD ]
Line_36 $$ Resource resource = container.getResource()-->Line_41 $$ assertEquals(resource, ((LightService) serv).resource)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)[ CD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_21 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_6 $$ conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, "Bsrv"), ServiceB.class, Service.class)[ CD ]
Line_35 $$ ContainerId containerId = container.getContainerId()-->Line_40 $$ assertEquals(containerId, ((LightService) serv).containerId)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_13 $$ ByteBuffer buf = ByteBuffer.allocate(6)[ CD ]
Line_24 $$ ArrayList<Integer> appIds = ((LightService) serv).getAppIdsStopped()-->Line_26 $$ assertTrue("wrong app stopped", appIds.contains((Integer) 66))[ FD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_18 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_14 $$ buf.putChar('A')[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_15 $$ buf.putInt(65)[ CD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_46 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_38 $$ aux.handle(event)[ CD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_38 $$ aux.handle(event)[ FD ]
Line_45 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container)-->Line_46 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_19 $$ ApplicationId appId2 = ApplicationId.newInstance(0, 66)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_33 $$ ContainerTokenIdentifier cti = new ContainerTokenIdentifier(ContainerId.newInstance(attemptId, 1), "", "", Resource.newInstance(1, 1), 0, 0, 0, Priority.newInstance(0), 0)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_9 $$ final AuxServices aux = new AuxServices()[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_45 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container)[ CD ]
Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)-->Line_38 $$ aux.handle(event)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_10 $$ aux.init(conf)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_10 $$ aux.init(conf)[ FD ]
Line_12 $$ ApplicationId appId1 = ApplicationId.newInstance(0, 65)-->Line_32 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId1, 1)[ FD ]
Line_36 $$ Resource resource = container.getResource()-->Line_49 $$ assertEquals(resource, ((LightService) serv).resource)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_7 $$ conf.setInt("A.expected.init", 1)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_18 $$ aux.handle(event)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_8 $$ conf.setInt("B.expected.stop", 1)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setInt("A.expected.init", 1)[ FD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)[ FD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocate(6)-->Line_15 $$ buf.putInt(65)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_5 $$ conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, "Asrv"), ServiceA.class, Service.class)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_46 $$ aux.handle(event)[ CD ]
Line_17 $$ AuxServicesEvent event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT, "user0", appId1, "Asrv", buf)-->Line_46 $$ aux.handle(event)[ FD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_22 $$ Collection<AuxiliaryService> servs = aux.getServices()[ FD ]
Line_24 $$ ArrayList<Integer> appIds = ((LightService) serv).getAppIdsStopped()-->Line_25 $$ assertEquals("app not properly stopped", 1, appIds.size())[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_12 $$ ApplicationId appId1 = ApplicationId.newInstance(0, 65)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)[ CD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_36 $$ Resource resource = container.getResource()[ CD ]
Line_13 $$ ByteBuffer buf = ByteBuffer.allocate(6)-->Line_14 $$ buf.putChar('A')[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_35 $$ ContainerId containerId = container.getContainerId()[ CD ]
Line_9 $$ final AuxServices aux = new AuxServices()-->Line_11 $$ aux.start()[ FD ]
Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)-->Line_45 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container)[ FD ]
Line_32 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId1, 1)-->Line_33 $$ ContainerTokenIdentifier cti = new ContainerTokenIdentifier(ContainerId.newInstance(attemptId, 1), "", "", Resource.newInstance(1, 1), 0, 0, 0, Priority.newInstance(0), 0)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT, "Bsrv"), ServiceB.class, Service.class)[ FD ]
Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)-->Line_45 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP, container)[ FD ]
Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)-->Line_46 $$ aux.handle(event)[ FD ]
Line_20 $$ event = new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP, "user0", appId2, "Bsrv", null)-->Line_37 $$ event = new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT, container)[ FD ]
Line_2 $$ public void testAuxEventDispatch() -->Line_34 $$ Container container = new ContainerImpl(null, null, null, null, null, null, cti)[ CD ]
