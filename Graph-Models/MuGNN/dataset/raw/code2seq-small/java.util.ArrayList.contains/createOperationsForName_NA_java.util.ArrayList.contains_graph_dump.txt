Line_4 $$ if (methodName.equals("getOperationDescByName") || methodName.equals("getOperationDescs"))-->Line_5 $$ return[ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_3 $$ if (isSkeletonClass) [ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_10 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) [ FD ]
Line_8 $$ for (int i = 0; i < methods.length; i++) -->Line_10 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) [ CD ]
Line_15 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_16 $$ createOperationsForName(superClass, methodName)[ CD ]
Line_14 $$ Class superClass = implClass.getSuperclass()-->Line_16 $$ createOperationsForName(superClass, methodName)[ FD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_4 $$ if (methodName.equals("getOperationDescByName") || methodName.equals("getOperationDescs"))[ FD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_16 $$ createOperationsForName(superClass, methodName)[ FD ]
Line_9 $$ Method method = methods[i]-->Line_10 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) [ FD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_8 $$ for (int i = 0; i < methods.length; i++) [ CD ]
Line_9 $$ Method method = methods[i]-->Line_11 $$ createOperationForMethod(method)[ FD ]
Line_3 $$ if (isSkeletonClass) -->Line_4 $$ if (methodName.equals("getOperationDescByName") || methodName.equals("getOperationDescs"))[ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_15 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_7 $$ Method[] methods = getMethods(implClass)[ CD ]
Line_14 $$ Class superClass = implClass.getSuperclass()-->Line_15 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_14 $$ Class superClass = implClass.getSuperclass()[ FD ]
Line_8 $$ for (int i = 0; i < methods.length; i++) -->Line_9 $$ Method method = methods[i][ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_14 $$ Class superClass = implClass.getSuperclass()[ CD ]
Line_2 $$ private void createOperationsForName(Class implClass, String methodName) -->Line_7 $$ Method[] methods = getMethods(implClass)[ FD ]
Line_10 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) -->Line_11 $$ createOperationForMethod(method)[ CD ]
