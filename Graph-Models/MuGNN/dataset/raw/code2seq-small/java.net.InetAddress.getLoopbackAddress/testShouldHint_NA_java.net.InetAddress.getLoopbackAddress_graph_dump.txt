Line_2 $$ private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) -->Line_4 $$ WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getLoopbackAddress(), null, new MessageOut(verb, payload, null), null, cl, allowHints)[ CD ]
Line_2 $$ private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) -->Line_5 $$ Assert.assertEquals(expectHint, wcbi.shouldHint())[ FD ]
Line_6 $$ if (expectHint) -->Line_15 $$ Assert.assertTrue(fail)[ CD ]
Line_6 $$ if (expectHint) -->Line_9 $$ boolean fail = false[ CD ]
Line_4 $$ WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getLoopbackAddress(), null, new MessageOut(verb, payload, null), null, cl, allowHints)-->Line_5 $$ Assert.assertEquals(expectHint, wcbi.shouldHint())[ FD ]
Line_13 $$ fail = true-->Line_15 $$ Assert.assertTrue(fail)[ FD ]
Line_2 $$ private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) -->Line_3 $$ Object payload = verb == Verb.PAXOS_COMMIT ? new Commit(UUID.randomUUID(), new PartitionUpdate(MockSchema.newCFMetaData("", ""), ByteBufferUtil.EMPTY_BYTE_BUFFER, PartitionColumns.NONE, 1)) : new Mutation("", new BufferDecoratedKey(new Murmur3Partitioner.LongToken(0), ByteBufferUtil.EMPTY_BYTE_BUFFER))[ CD ]
Line_4 $$ WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getLoopbackAddress(), null, new MessageOut(verb, payload, null), null, cl, allowHints)-->Line_11 $$ wcbi.mutation()[ FD ]
Line_2 $$ private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) -->Line_5 $$ Assert.assertEquals(expectHint, wcbi.shouldHint())[ CD ]
Line_9 $$ boolean fail = false-->Line_13 $$ fail = true[ FD ]
Line_9 $$ boolean fail = false-->Line_15 $$ Assert.assertTrue(fail)[ FD ]
Line_2 $$ private void testShouldHint(Verb verb, ConsistencyLevel cl, boolean allowHints, boolean expectHint) -->Line_6 $$ if (expectHint) [ CD ]
Line_6 $$ if (expectHint) -->Line_7 $$ Assert.assertNotNull(wcbi.mutation())[ CD ]
Line_4 $$ WriteCallbackInfo wcbi = new WriteCallbackInfo(InetAddress.getLoopbackAddress(), null, new MessageOut(verb, payload, null), null, cl, allowHints)-->Line_7 $$ Assert.assertNotNull(wcbi.mutation())[ FD ]
