Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_16 $$ return (X) Integer.valueOf(value.intValue())[ FD ]
Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_9 $$ if (Byte.class.isAssignableFrom(type)) -->Line_10 $$ return (X) Byte.valueOf(value.byteValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_3 $$ if (value == null) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_21 $$ if (Double.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_13 $$ return (X) Short.valueOf(value.shortValue())[ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_15 $$ if (Integer.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_27 $$ if (BigDecimal.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_33 $$ throw unknownUnwrap(type)[ FD ]
Line_15 $$ if (Integer.class.isAssignableFrom(type)) -->Line_16 $$ return (X) Integer.valueOf(value.intValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_31 $$ return (X) value.toString()[ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Byte.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_12 $$ if (Short.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_24 $$ if (BigInteger.class.isAssignableFrom(type)) [ CD ]
Line_18 $$ if (Long.class.isAssignableFrom(type)) -->Line_19 $$ return (X) Long.valueOf(value.longValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_18 $$ if (Long.class.isAssignableFrom(type)) [ FD ]
Line_6 $$ if (Float.class.isAssignableFrom(type)) -->Line_7 $$ return (X) value[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_3 $$ if (value == null) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_24 $$ if (BigInteger.class.isAssignableFrom(type)) [ FD ]
Line_12 $$ if (Short.class.isAssignableFrom(type)) -->Line_13 $$ return (X) Short.valueOf(value.shortValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_15 $$ if (Integer.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_6 $$ if (Float.class.isAssignableFrom(type)) [ CD ]
Line_24 $$ if (BigInteger.class.isAssignableFrom(type)) -->Line_25 $$ return (X) BigInteger.valueOf(value.longValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_12 $$ if (Short.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_10 $$ return (X) Byte.valueOf(value.byteValue())[ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_21 $$ if (Double.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_19 $$ return (X) Long.valueOf(value.longValue())[ FD ]
Line_21 $$ if (Double.class.isAssignableFrom(type)) -->Line_22 $$ return (X) Double.valueOf(value.doubleValue())[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_27 $$ if (BigDecimal.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_6 $$ if (Float.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_30 $$ if (String.class.isAssignableFrom(type)) [ FD ]
Line_30 $$ if (String.class.isAssignableFrom(type)) -->Line_31 $$ return (X) value.toString()[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_18 $$ if (Long.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_25 $$ return (X) BigInteger.valueOf(value.longValue())[ FD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Byte.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_28 $$ return (X) BigDecimal.valueOf(value)[ FD ]
Line_27 $$ if (BigDecimal.class.isAssignableFrom(type)) -->Line_28 $$ return (X) BigDecimal.valueOf(value)[ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_30 $$ if (String.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Float value, Class<X> type, WrapperOptions options) -->Line_22 $$ return (X) Double.valueOf(value.doubleValue())[ FD ]
