Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_17 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_21 $$ if (node.getUserObject() instanceof Class) [ CD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_41 $$ if (className.length() == 0)[ CD ]
Line_91 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_94 $$ if (mySelectedProperties.length > 0) [ CD ]
Line_9 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()-->Line_10 $$ if (leadSelectionPath == null)[ FD ]
Line_91 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_93 $$ updateSelectedProperties()[ CD ]
Line_68 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ CD ]
Line_40 $$ String className = dlg.getClassName()-->Line_51 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.component", className), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_94 $$ if (mySelectedProperties.length > 0) -->Line_97 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ CD ]
Line_21 $$ if (node.getUserObject() instanceof Class) -->Line_22 $$ Class cls = (Class) node.getUserObject()[ CD ]
Line_33 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)[ CD ]
Line_72 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_82 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ FD ]
Line_6 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_9 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()[ CD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_38 $$ dlg.show()[ FD ]
Line_76 $$ for (ClientPropertiesManager.ClientProperty prop : props) -->Line_77 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_41 $$ if (className.length() == 0)-->Line_42 $$ return[ CD ]
Line_17 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_97 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ FD ]
Line_40 $$ String className = dlg.getClassName()-->Line_41 $$ if (className.length() == 0)[ FD ]
Line_77 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) -->Line_78 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.already.defined", prop.getName()), UIDesignerBundle.message("client.properties.title"))[ CD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_77 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_68 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_90 $$ int row = myPropertiesTable.getSelectedRow()[ CD ]
Line_95 $$ if (row >= mySelectedProperties.length)-->Line_96 $$ row--[ CD ]
Line_10 $$ if (leadSelectionPath == null)-->Line_11 $$ return[ CD ]
Line_90 $$ int row = myPropertiesTable.getSelectedRow()-->Line_96 $$ row--[ FD ]
Line_9 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()-->Line_12 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()[ FD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_40 $$ String className = dlg.getClassName()[ CD ]
Line_90 $$ int row = myPropertiesTable.getSelectedRow()-->Line_95 $$ if (row >= mySelectedProperties.length)[ FD ]
Line_33 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_62 $$ if (mySelectedClass != null) [ CD ]
Line_6 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_14 $$ updateSelectedProperties()[ CD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_55 $$ fillClassTree()[ CD ]
Line_68 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_72 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)[ CD ]
Line_72 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_77 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_50 $$ if (!JComponent.class.isAssignableFrom(aClass)) -->Line_51 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.component", className), UIDesignerBundle.message("client.properties.title"))[ CD ]
Line_33 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ CD ]
Line_45 $$ aClass = Class.forName(className)-->Line_50 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ FD ]
Line_68 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_73 $$ dlg.show()[ CD ]
Line_6 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_9 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()[ FD ]
Line_62 $$ if (mySelectedClass != null) -->Line_64 $$ fillClassTree()[ CD ]
Line_43 $$ final Class aClass-->Line_50 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ FD ]
Line_17 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_20 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value[ CD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_73 $$ dlg.show()[ FD ]
Line_20 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_21 $$ if (node.getUserObject() instanceof Class) [ FD ]
Line_50 $$ if (!JComponent.class.isAssignableFrom(aClass)) -->Line_52 $$ return[ CD ]
Line_21 $$ if (node.getUserObject() instanceof Class) -->Line_23 $$ if (cls != null) [ CD ]
Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_83 $$ updateSelectedProperties()[ CD ]
Line_17 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_95 $$ if (row >= mySelectedProperties.length)[ FD ]
Line_22 $$ Class cls = (Class) node.getUserObject()-->Line_23 $$ if (cls != null) [ FD ]
Line_90 $$ int row = myPropertiesTable.getSelectedRow()-->Line_97 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ FD ]
Line_17 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_96 $$ row--[ FD ]
Line_94 $$ if (mySelectedProperties.length > 0) -->Line_95 $$ if (row >= mySelectedProperties.length)[ CD ]
Line_33 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_38 $$ dlg.show()[ CD ]
Line_76 $$ for (ClientPropertiesManager.ClientProperty prop : props) -->Line_78 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.already.defined", prop.getName()), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_22 $$ Class cls = (Class) node.getUserObject()-->Line_24 $$ append(cls.getName(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_12 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_13 $$ mySelectedClass = (Class) node.getUserObject()[ FD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_40 $$ String className = dlg.getClassName()-->Line_47 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.found", className), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_82 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ CD ]
Line_12 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_21 $$ if (node.getUserObject() instanceof Class) [ FD ]
Line_6 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_10 $$ if (leadSelectionPath == null)[ CD ]
Line_77 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) -->Line_79 $$ return[ CD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_54 $$ myManager.addClientPropertyClass(className)[ CD ]
Line_62 $$ if (mySelectedClass != null) -->Line_63 $$ myManager.removeClientPropertyClass(mySelectedClass)[ CD ]
Line_91 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_92 $$ myManager.removeConfiguredProperty(mySelectedClass, mySelectedProperties[row].getName())[ CD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_82 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ FD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_50 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ CD ]
Line_20 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_22 $$ Class cls = (Class) node.getUserObject()[ FD ]
Line_40 $$ String className = dlg.getClassName()-->Line_54 $$ myManager.addClientPropertyClass(className)[ FD ]
Line_39 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_43 $$ final Class aClass[ CD ]
Line_23 $$ if (cls != null) -->Line_24 $$ append(cls.getName(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_68 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_91 $$ if (row >= 0 && row < mySelectedProperties.length) [ CD ]
Line_43 $$ final Class aClass-->Line_45 $$ aClass = Class.forName(className)[ FD ]
Line_72 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_73 $$ dlg.show()[ FD ]
Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_75 $$ ClientPropertiesManager.ClientProperty[] props = myManager.getClientProperties(mySelectedClass)[ CD ]
Line_6 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_12 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()[ CD ]
Line_12 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_22 $$ Class cls = (Class) node.getUserObject()[ FD ]
Line_37 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_40 $$ String className = dlg.getClassName()[ FD ]
Line_72 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_74 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_40 $$ String className = dlg.getClassName()-->Line_45 $$ aClass = Class.forName(className)[ FD ]
