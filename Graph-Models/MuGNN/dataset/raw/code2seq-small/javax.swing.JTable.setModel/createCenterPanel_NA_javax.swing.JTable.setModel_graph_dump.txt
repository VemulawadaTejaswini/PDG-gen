Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_12 $$ updateSelectedProperties()[ CD ]
Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_18 $$ if (node.getUserObject() instanceof Class) [ CD ]
Line_83 $$ if (mySelectedProperties.length > 0) -->Line_84 $$ if (row >= mySelectedProperties.length)[ CD ]
Line_67 $$ for (ClientPropertiesManager.ClientProperty prop : props) -->Line_68 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_30 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)[ CD ]
Line_35 $$ String className = dlg.getClassName()-->Line_49 $$ myManager.addClientPropertyClass(className)[ FD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_7 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()[ CD ]
Line_19 $$ Class cls = (Class) node.getUserObject()-->Line_21 $$ append(cls.getName(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_63 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_67 $$ for (ClientPropertiesManager.ClientProperty prop : props) -->Line_69 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.already.defined", prop.getName()), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_10 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_18 $$ if (node.getUserObject() instanceof Class) [ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() [ CD ]
Line_45 $$ if (!JComponent.class.isAssignableFrom(aClass)) -->Line_46 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.component", className), UIDesignerBundle.message("client.properties.title"))[ CD ]
Line_79 $$ int row = myPropertiesTable.getSelectedRow()-->Line_84 $$ if (row >= mySelectedProperties.length)[ FD ]
Line_83 $$ if (mySelectedProperties.length > 0) -->Line_86 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ CD ]
Line_68 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) -->Line_69 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.already.defined", prop.getName()), UIDesignerBundle.message("client.properties.title"))[ CD ]
Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_8 $$ if (leadSelectionPath == null)[ CD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_35 $$ String className = dlg.getClassName()[ FD ]
Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_63 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)[ CD ]
Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_84 $$ if (row >= mySelectedProperties.length)[ FD ]
Line_18 $$ if (node.getUserObject() instanceof Class) -->Line_20 $$ if (cls != null) [ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() [ CD ]
Line_80 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_82 $$ updateSelectedProperties()[ CD ]
Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_80 $$ if (row >= 0 && row < mySelectedProperties.length) [ CD ]
Line_17 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_18 $$ if (node.getUserObject() instanceof Class) [ FD ]
Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_85 $$ row--[ FD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_49 $$ myManager.addClientPropertyClass(className)[ CD ]
Line_18 $$ if (node.getUserObject() instanceof Class) -->Line_19 $$ Class cls = (Class) node.getUserObject()[ CD ]
Line_63 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_68 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_38 $$ final Class aClass-->Line_40 $$ aClass = Class.forName(className)[ FD ]
Line_7 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()-->Line_8 $$ if (leadSelectionPath == null)[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_4 $$ myClassTree.setRootVisible(false)[ CD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_35 $$ String className = dlg.getClassName()[ CD ]
Line_35 $$ String className = dlg.getClassName()-->Line_46 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.component", className), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_79 $$ int row = myPropertiesTable.getSelectedRow()-->Line_86 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ FD ]
Line_20 $$ if (cls != null) -->Line_21 $$ append(cls.getName(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_7 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()-->Line_10 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()[ FD ]
Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_86 $$ myPropertiesTable.getSelectionModel().setSelectionInterval(row, row)[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_30 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() [ CD ]
Line_45 $$ if (!JComponent.class.isAssignableFrom(aClass)) -->Line_47 $$ return[ CD ]
Line_8 $$ if (leadSelectionPath == null)-->Line_9 $$ return[ CD ]
Line_63 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_73 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_26 $$ fillClassTree()[ CD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_50 $$ fillClassTree()[ CD ]
Line_63 $$ AddClientPropertyDialog dlg = new AddClientPropertyDialog(myProject)-->Line_64 $$ dlg.show()[ FD ]
Line_30 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_33 $$ dlg.show()[ CD ]
Line_10 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_11 $$ mySelectedClass = (Class) node.getUserObject()[ FD ]
Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_7 $$ final TreePath leadSelectionPath = e.getNewLeadSelectionPath()[ FD ]
Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_74 $$ updateSelectedProperties()[ CD ]
Line_35 $$ String className = dlg.getClassName()-->Line_42 $$ Messages.showErrorDialog(mySplitter, UIDesignerBundle.message("client.properties.class.not.found", className), UIDesignerBundle.message("client.properties.title"))[ FD ]
Line_38 $$ final Class aClass-->Line_45 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ FD ]
Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_73 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ CD ]
Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ CD ]
Line_40 $$ aClass = Class.forName(className)-->Line_45 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ FD ]
Line_55 $$ if (mySelectedClass != null) -->Line_57 $$ fillClassTree()[ CD ]
Line_80 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_81 $$ myManager.removeConfiguredProperty(mySelectedClass, mySelectedProperties[row].getName())[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_28 $$ myPropertiesTable.setModel(myTableModel)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_91 $$ return mySplitter[ CD ]
Line_65 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_66 $$ ClientPropertiesManager.ClientProperty[] props = myManager.getClientProperties(mySelectedClass)[ CD ]
Line_36 $$ if (className.length() == 0)-->Line_37 $$ return[ CD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ FD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_38 $$ final Class aClass[ CD ]
Line_68 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) -->Line_70 $$ return[ CD ]
Line_84 $$ if (row >= mySelectedProperties.length)-->Line_85 $$ row--[ CD ]
Line_5 $$ myClassTree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() -->Line_10 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()[ CD ]
Line_55 $$ if (mySelectedClass != null) -->Line_56 $$ myManager.removeClientPropertyClass(mySelectedClass)[ CD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_36 $$ if (className.length() == 0)[ CD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_64 $$ dlg.show()[ FD ]
Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_79 $$ int row = myPropertiesTable.getSelectedRow()[ CD ]
Line_79 $$ int row = myPropertiesTable.getSelectedRow()-->Line_85 $$ row--[ FD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_73 $$ myManager.addConfiguredProperty(mySelectedClass, dlg.getEnteredProperty())[ FD ]
Line_35 $$ String className = dlg.getClassName()-->Line_36 $$ if (className.length() == 0)[ FD ]
Line_17 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_19 $$ Class cls = (Class) node.getUserObject()[ FD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_33 $$ dlg.show()[ FD ]
Line_15 $$ myClassTree.setCellRenderer(new ColoredTreeCellRenderer() -->Line_17 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value[ CD ]
Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) -->Line_45 $$ if (!JComponent.class.isAssignableFrom(aClass)) [ CD ]
Line_80 $$ if (row >= 0 && row < mySelectedProperties.length) -->Line_83 $$ if (mySelectedProperties.length > 0) [ CD ]
Line_35 $$ String className = dlg.getClassName()-->Line_40 $$ aClass = Class.forName(className)[ FD ]
Line_19 $$ Class cls = (Class) node.getUserObject()-->Line_20 $$ if (cls != null) [ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() [ CD ]
Line_61 $$ mySplitter.setSecondComponent(ToolbarDecorator.createDecorator(myPropertiesTable).disableUpDownActions().setAddAction(new AnActionButtonRunnable() -->Line_64 $$ dlg.show()[ CD ]
Line_30 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_55 $$ if (mySelectedClass != null) [ CD ]
Line_10 $$ final DefaultMutableTreeNode node = (DefaultMutableTreeNode) leadSelectionPath.getLastPathComponent()-->Line_19 $$ Class cls = (Class) node.getUserObject()[ FD ]
Line_32 $$ ClassNameInputDialog dlg = new ClassNameInputDialog(myProject, mySplitter)-->Line_68 $$ if (prop.getName().equalsIgnoreCase(dlg.getEnteredProperty().getName())) [ FD ]
Line_30 $$ mySplitter.setFirstComponent(ToolbarDecorator.createDecorator(myClassTree).setAddAction(new AnActionButtonRunnable() -->Line_34 $$ if (dlg.getExitCode() == OK_EXIT_CODE) [ CD ]
