Line_26 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_48 $$ popup.show(point)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_13 $$ slider.setPaintTrack(true)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_11 $$ slider.setMinorTickSpacing(1)[ FD ]
Line_4 $$ JPanel result = new JPanel(new BorderLayout())-->Line_44 $$ int width = result.getPreferredSize().width[ FD ]
Line_27 $$ popup.setFinalRunnable(new Runnable() -->Line_31 $$ int value = slider.getModel().getValue()[ CD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_17 $$ slider.setLabelTable(LABELS)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_16 $$ slider.setPaintLabels(true)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_31 $$ int value = slider.getModel().getValue()[ FD ]
Line_4 $$ JPanel result = new JPanel(new BorderLayout())-->Line_18 $$ result.add(slider, BorderLayout.CENTER)[ FD ]
Line_43 $$ if (inputEvent instanceof MouseEvent) -->Line_50 $$ popup.showInBestPositionFor(e.getDataContext())[ CD ]
Line_26 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_27 $$ popup.setFinalRunnable(new Runnable() [ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_23 $$ slider.setValue(i + 1)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_26 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()[ FD ]
Line_21 $$ int mark = ourMarks[i]-->Line_22 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) [ FD ]
Line_27 $$ popup.setFinalRunnable(new Runnable() -->Line_32 $$ if (configuration.SHORT_DIFF_EXTRA_LINES != ourMarks[value - 1]) [ CD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_14 $$ slider.setSnapToTicks(true)[ FD ]
Line_22 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) -->Line_23 $$ slider.setValue(i + 1)[ CD ]
Line_4 $$ JPanel result = new JPanel(new BorderLayout())-->Line_9 $$ result.add(wrapper, BorderLayout.WEST)[ FD ]
Line_20 $$ for (int i = 0; i < ourMarks.length; i++) -->Line_22 $$ if (mark == configuration.SHORT_DIFF_EXTRA_LINES) [ CD ]
Line_26 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()-->Line_50 $$ popup.showInBestPositionFor(e.getDataContext())[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_15 $$ UIUtil.setSliderIsFilled(slider, true)[ FD ]
Line_43 $$ if (inputEvent instanceof MouseEvent) -->Line_48 $$ popup.show(point)[ CD ]
Line_20 $$ for (int i = 0; i < ourMarks.length; i++) -->Line_21 $$ int mark = ourMarks[i][ CD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_12 $$ slider.setPaintTicks(true)[ FD ]
Line_10 $$ final JSlider slider = new JSlider(SwingConstants.HORIZONTAL, 1, 5, 1)-->Line_18 $$ result.add(slider, BorderLayout.CENTER)[ FD ]
Line_5 $$ JLabel label = new JLabel("Lines around:")-->Line_8 $$ wrapper.add(label, BorderLayout.NORTH)[ FD ]
Line_5 $$ JLabel label = new JLabel("Lines around:")-->Line_6 $$ label.setBorder(BorderFactory.createEmptyBorder(4, 4, 0, 0))[ FD ]
Line_7 $$ JPanel wrapper = new JPanel(new BorderLayout())-->Line_9 $$ result.add(wrapper, BorderLayout.WEST)[ FD ]
Line_7 $$ JPanel wrapper = new JPanel(new BorderLayout())-->Line_8 $$ wrapper.add(label, BorderLayout.NORTH)[ FD ]
Line_4 $$ JPanel result = new JPanel(new BorderLayout())-->Line_26 $$ JBPopup popup = JBPopupFactory.getInstance().createComponentPopupBuilder(result, slider).createPopup()[ FD ]
Line_32 $$ if (configuration.SHORT_DIFF_EXTRA_LINES != ourMarks[value - 1]) -->Line_33 $$ configuration.SHORT_DIFF_EXTRA_LINES = ourMarks[value - 1][ CD ]
