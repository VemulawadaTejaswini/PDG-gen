Line_2 $$ public void testEmptyKey() throws Exception -->Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_11 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_69 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_65 $$ expectedOutput = "def"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_56 $$ expectedOutput = "xyz"[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_17 $$ conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_12 $$ String input = "abc\tdef\txyz"[ CD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_54 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_56 $$ expectedOutput = "xyz"[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_49 $$ conf = new Configuration()[ CD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_35 $$ conf = new Configuration()-->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_35 $$ conf = new Configuration()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_38 $$ expectedOutput = "def\txyz"[ CD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_39 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_35 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_37 $$ kfbp.setConf(conf)[ CD ]
Line_35 $$ conf = new Configuration()-->Line_44 $$ conf = new Configuration()[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_26 $$ conf = new Configuration()[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ CD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_35 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_3 $$ int numReducers = 10[ CD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ kfbp.setConf(conf)[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_44 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_10 $$ conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_44 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_17 $$ conf = new Configuration()[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_3 $$ int numReducers = 10-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_3 $$ int numReducers = 10-->Line_8 $$ assertEquals("Empty key should map to 0th partition", 0, kfbp.getPartition(new Text(), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_35 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_35 $$ conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_3 $$ int numReducers = 10-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_57 $$ eBytes = expectedOutput.getBytes()-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_65 $$ expectedOutput = "def"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_44 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_35 $$ conf = new Configuration()[ FD ]
Line_68 $$ expectedOutput = "xyz"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_39 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_35 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_29 $$ expectedOutput = "def\txyz"[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_62 $$ conf = new Configuration()[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_20 $$ String expectedOutput = "def"[ CD ]
Line_17 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_8 $$ assertEquals("Empty key should map to 0th partition", 0, kfbp.getPartition(new Text(), new Text(), numReducers))[ CD ]
Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_26 $$ conf = new Configuration()[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ CD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_57 $$ eBytes = expectedOutput.getBytes()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_49 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ CD ]
Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_44 $$ conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ CD ]
Line_53 $$ expectedOutput = "def"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_7 $$ kfbp.setConf(conf)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_39 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_44 $$ conf = new Configuration()[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_65 $$ expectedOutput = "def"[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_35 $$ conf = new Configuration()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_11 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_3 $$ int numReducers = 10-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_65 $$ expectedOutput = "def"[ FD ]
Line_10 $$ conf = new Configuration()-->Line_26 $$ conf = new Configuration()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_52 $$ input = "abc\tdef\tpqr\txyz"[ CD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_26 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_57 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_66 $$ eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_68 $$ expectedOutput = "xyz"[ CD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_15 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_66 $$ eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_56 $$ expectedOutput = "xyz"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_35 $$ conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_7 $$ kfbp.setConf(conf)[ CD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_57 $$ eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_49 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_44 $$ conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_10 $$ conf = new Configuration()[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_49 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_3 $$ int numReducers = 10-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_18 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2")[ CD ]
Line_20 $$ String expectedOutput = "def"-->Line_38 $$ expectedOutput = "def\txyz"[ FD ]
Line_10 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_10 $$ conf = new Configuration()[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_35 $$ conf = new Configuration()[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_3 $$ int numReducers = 10-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_17 $$ conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_47 $$ assertEquals("Partitioner doesnt work as expected", 0, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_17 $$ conf = new Configuration()[ FD ]
Line_10 $$ conf = new Configuration()-->Line_11 $$ kfbp.setConf(conf)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_39 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_15 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_17 $$ conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_10 $$ conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_3 $$ int numReducers = 10-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_18 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_26 $$ conf = new Configuration()[ CD ]
Line_20 $$ String expectedOutput = "def"-->Line_56 $$ expectedOutput = "xyz"[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_38 $$ expectedOutput = "def\txyz"[ FD ]
Line_49 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_10 $$ conf = new Configuration()-->Line_44 $$ conf = new Configuration()[ FD ]
Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_20 $$ String expectedOutput = "def"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_10 $$ conf = new Configuration()-->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ CD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_56 $$ expectedOutput = "xyz"[ FD ]
Line_3 $$ int numReducers = 10-->Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_3 $$ int numReducers = 10-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_3 $$ int numReducers = 10-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_28 $$ kfbp.setConf(conf)[ CD ]
Line_62 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ CD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_51 $$ kfbp.setConf(conf)[ CD ]
Line_26 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_12 $$ String input = "abc\tdef\txyz"-->Line_13 $$ int hashCode = input.hashCode()[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_53 $$ expectedOutput = "def"[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_11 $$ kfbp.setConf(conf)[ CD ]
Line_17 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_15 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_65 $$ expectedOutput = "def"-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_44 $$ conf = new Configuration()[ CD ]
Line_10 $$ conf = new Configuration()-->Line_62 $$ conf = new Configuration()[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_62 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_30 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_29 $$ expectedOutput = "def\txyz"[ CD ]
Line_35 $$ conf = new Configuration()-->Line_46 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_30 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_3 $$ int numReducers = 10-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_15 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_53 $$ expectedOutput = "def"[ CD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_10 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_56 $$ expectedOutput = "xyz"[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_54 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_17 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_44 $$ conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_49 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_69 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_11 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_27 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,5")[ CD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_65 $$ expectedOutput = "def"[ FD ]
Line_3 $$ int numReducers = 10-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_17 $$ conf = new Configuration()[ CD ]
Line_20 $$ String expectedOutput = "def"-->Line_21 $$ byte[] eBytes = expectedOutput.getBytes()[ FD ]
Line_56 $$ expectedOutput = "xyz"-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ CD ]
Line_10 $$ conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_56 $$ expectedOutput = "xyz"-->Line_65 $$ expectedOutput = "def"[ FD ]
Line_57 $$ eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_57 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_10 $$ conf = new Configuration()-->Line_27 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,5")[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_27 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,5")[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_24 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_44 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_53 $$ expectedOutput = "def"-->Line_65 $$ expectedOutput = "def"[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setInt("num.key.fields.for.partition", 10)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_26 $$ conf = new Configuration()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_33 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_3 $$ int numReducers = 10-->Line_15 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_53 $$ expectedOutput = "def"[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_56 $$ expectedOutput = "xyz"-->Line_66 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_65 $$ expectedOutput = "def"[ CD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_72 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_6 $$ conf.setInt("num.key.fields.for.partition", 10)[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_66 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_69 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ CD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_38 $$ expectedOutput = "def\txyz"-->Line_53 $$ expectedOutput = "def"[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_35 $$ conf = new Configuration()[ CD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_56 $$ expectedOutput = "xyz"-->Line_68 $$ expectedOutput = "xyz"[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ CD ]
Line_13 $$ int hashCode = input.hashCode()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_17 $$ conf = new Configuration()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_22 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_19 $$ kfbp.setConf(conf)[ CD ]
Line_29 $$ expectedOutput = "def\txyz"-->Line_39 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_12 $$ String input = "abc\tdef\txyz"-->Line_52 $$ input = "abc\tdef\tpqr\txyz"[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_51 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_13 $$ int hashCode = input.hashCode()[ CD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_17 $$ conf = new Configuration()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_44 $$ conf = new Configuration()[ FD ]
Line_44 $$ conf = new Configuration()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_37 $$ kfbp.setConf(conf)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_30 $$ eBytes = expectedOutput.getBytes()[ CD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_8 $$ assertEquals("Empty key should map to 0th partition", 0, kfbp.getPartition(new Text(), new Text(), numReducers))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_18 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_64 $$ kfbp.setConf(conf)[ CD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_35 $$ conf = new Configuration()[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_27 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,5")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ CD ]
Line_39 $$ eBytes = expectedOutput.getBytes()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ CD ]
Line_35 $$ conf = new Configuration()-->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_21 $$ byte[] eBytes = expectedOutput.getBytes()[ CD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_60 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_39 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_63 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k30,21 -k4,4 -k5")[ CD ]
Line_30 $$ eBytes = expectedOutput.getBytes()-->Line_57 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_34 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_48 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_36 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2")[ FD ]
Line_43 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_42 $$ assertEquals("Partitioner doesnt work as expected", expectedPartition, kfbp.getPartition(new Text(input), new Text(), numReducers))[ FD ]
Line_14 $$ int expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_20 $$ String expectedOutput = "def"-->Line_30 $$ eBytes = expectedOutput.getBytes()[ FD ]
Line_23 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_4 $$ KeyFieldBasedPartitioner<Text, Text> kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_64 $$ kfbp.setConf(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_19 $$ kfbp.setConf(conf)[ FD ]
Line_55 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_46 $$ kfbp.setConf(conf)[ CD ]
Line_21 $$ byte[] eBytes = expectedOutput.getBytes()-->Line_58 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_9 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_67 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_27 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,5")[ FD ]
Line_3 $$ int numReducers = 10-->Line_32 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_59 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_54 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_16 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_40 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_44 $$ conf = new Configuration()[ FD ]
Line_2 $$ public void testEmptyKey() throws Exception -->Line_45 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k10")[ CD ]
Line_25 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()-->Line_61 $$ kfbp = new KeyFieldBasedPartitioner<Text, Text>()[ FD ]
Line_17 $$ conf = new Configuration()-->Line_28 $$ kfbp.setConf(conf)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_50 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2 -k4,4")[ FD ]
Line_41 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)-->Line_71 $$ expectedPartition = kfbp.getPartition(hashCode, numReducers)[ FD ]
Line_66 $$ eBytes = expectedOutput.getBytes()-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
Line_17 $$ conf = new Configuration()-->Line_18 $$ conf.set(KeyFieldBasedPartitioner.PARTITIONER_OPTIONS, "-k2,2")[ FD ]
Line_31 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, 0)-->Line_70 $$ hashCode = kfbp.hashCode(eBytes, 0, eBytes.length - 1, hashCode)[ FD ]
