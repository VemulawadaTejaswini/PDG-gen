Line_2 $$ private int init(String[] args) throws IOException -->Line_9 $$ int hostHashCode = hostname.hashCode()[ CD ]
Line_39 $$ if (args[i].equals("-maxDelayBetweenOps")) -->Line_40 $$ maxDelayBetweenOps = Integer.parseInt(args[++i])[ CD ]
Line_33 $$ if (writeProbs[0] < 0 || writeProbs[0] > 1) -->Line_34 $$ System.err.println("The write probability must be [0, 1]: " + writeProbs[0])[ CD ]
Line_2 $$ private int init(String[] args) throws IOException -->Line_10 $$ boolean scriptSpecified = false[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_68 $$ for (int i = 0; i < readProbs.length; i++) [ FD ]
Line_55 $$ if (args[i].equals("-seed")) -->Line_58 $$ System.err.println(USAGE)[ CD ]
Line_27 $$ if (args[i].equals("-writeProbability")) -->Line_32 $$ writeProbs[0] = Double.parseDouble(args[++i])[ CD ]
Line_18 $$ if (scriptSpecified) -->Line_19 $$ System.err.println("Can't specify probabilities and use script.")[ CD ]
Line_17 $$ if (args[i].equals("-readProbability")) -->Line_18 $$ if (scriptSpecified) [ CD ]
Line_43 $$ if (numOfThreads <= 0) -->Line_45 $$ return -1[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_38 $$ root = new Path(args[++i])[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_32 $$ writeProbs[0] = Double.parseDouble(args[++i])[ FD ]
Line_23 $$ if (readProbs[0] < 0 || readProbs[0] > 1) -->Line_24 $$ System.err.println("The read probability must be [0, 1]: " + readProbs[0])[ CD ]
Line_37 $$ if (args[i].equals("-root")) -->Line_39 $$ if (args[i].equals("-maxDelayBetweenOps")) [ CD ]
Line_69 $$ if (readProbs[i] + writeProbs[i] < 0 || readProbs[i] + writeProbs[i] > 1) -->Line_70 $$ System.err.println("The sum of read probability and write probability must be [0, 1]: " + readProbs[i] + " " + writeProbs[i])[ CD ]
Line_13 $$ if (args[i].equals("-scriptFile")) -->Line_17 $$ if (args[i].equals("-readProbability")) [ CD ]
Line_10 $$ boolean scriptSpecified = false-->Line_16 $$ scriptSpecified = true[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_40 $$ maxDelayBetweenOps = Integer.parseInt(args[++i])[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_56 $$ r = new Random(Long.parseLong(args[++i]) + hostHashCode)[ FD ]
Line_18 $$ if (scriptSpecified) -->Line_20 $$ return -1[ CD ]
Line_69 $$ if (readProbs[i] + writeProbs[i] < 0 || readProbs[i] + writeProbs[i] > 1) -->Line_71 $$ return -1[ CD ]
Line_23 $$ if (readProbs[0] < 0 || readProbs[0] > 1) -->Line_25 $$ return -1[ CD ]
Line_39 $$ if (args[i].equals("-maxDelayBetweenOps")) -->Line_41 $$ if (args[i].equals("-numOfThreads")) [ CD ]
Line_27 $$ if (args[i].equals("-writeProbability")) -->Line_33 $$ if (writeProbs[0] < 0 || writeProbs[0] > 1) [ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_14 $$ if (loadScriptFile(args[++i]) == -1)[ FD ]
Line_17 $$ if (args[i].equals("-readProbability")) -->Line_23 $$ if (readProbs[0] < 0 || readProbs[0] > 1) [ CD ]
Line_49 $$ if (args[i].equals("-elapsedTime")) -->Line_55 $$ if (args[i].equals("-seed")) [ CD ]
Line_41 $$ if (args[i].equals("-numOfThreads")) -->Line_42 $$ numOfThreads = Integer.parseInt(args[++i])[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_48 $$ startTime = Long.parseLong(args[++i])[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_54 $$ durations[0] = Long.parseLong(args[++i])[ FD ]
Line_27 $$ if (args[i].equals("-writeProbability")) -->Line_37 $$ if (args[i].equals("-root")) [ CD ]
Line_2 $$ private int init(String[] args) throws IOException -->Line_68 $$ for (int i = 0; i < readProbs.length; i++) [ CD ]
Line_47 $$ if (args[i].equals("-startTime")) -->Line_49 $$ if (args[i].equals("-elapsedTime")) [ CD ]
Line_13 $$ if (args[i].equals("-scriptFile")) -->Line_16 $$ scriptSpecified = true[ CD ]
Line_43 $$ if (numOfThreads <= 0) -->Line_44 $$ System.err.println("Number of threads must be positive: " + numOfThreads)[ CD ]
Line_50 $$ if (scriptSpecified) -->Line_52 $$ return -1[ CD ]
Line_50 $$ if (scriptSpecified) -->Line_51 $$ System.err.println("Can't specify elapsedTime and use script.")[ CD ]
Line_68 $$ for (int i = 0; i < readProbs.length; i++) -->Line_69 $$ if (readProbs[i] + writeProbs[i] < 0 || readProbs[i] + writeProbs[i] > 1) [ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_22 $$ readProbs[0] = Double.parseDouble(args[++i])[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_13 $$ if (args[i].equals("-scriptFile")) [ CD ]
Line_17 $$ if (args[i].equals("-readProbability")) -->Line_22 $$ readProbs[0] = Double.parseDouble(args[++i])[ CD ]
Line_2 $$ private int init(String[] args) throws IOException -->Line_77 $$ return initFileDirTables()[ CD ]
Line_41 $$ if (args[i].equals("-numOfThreads")) -->Line_47 $$ if (args[i].equals("-startTime")) [ CD ]
Line_27 $$ if (args[i].equals("-writeProbability")) -->Line_28 $$ if (scriptSpecified) [ CD ]
Line_55 $$ if (args[i].equals("-seed")) -->Line_59 $$ ToolRunner.printGenericCommandUsage(System.err)[ CD ]
Line_14 $$ if (loadScriptFile(args[++i]) == -1)-->Line_15 $$ return -1[ CD ]
Line_13 $$ if (args[i].equals("-scriptFile")) -->Line_14 $$ if (loadScriptFile(args[++i]) == -1)[ CD ]
Line_55 $$ if (args[i].equals("-seed")) -->Line_60 $$ return -1[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++) -->Line_42 $$ numOfThreads = Integer.parseInt(args[++i])[ FD ]
Line_33 $$ if (writeProbs[0] < 0 || writeProbs[0] > 1) -->Line_35 $$ return -1[ CD ]
Line_17 $$ if (args[i].equals("-readProbability")) -->Line_27 $$ if (args[i].equals("-writeProbability")) [ CD ]
Line_49 $$ if (args[i].equals("-elapsedTime")) -->Line_50 $$ if (scriptSpecified) [ CD ]
Line_28 $$ if (scriptSpecified) -->Line_29 $$ System.err.println("Can't specify probabilities and use script.")[ CD ]
Line_28 $$ if (scriptSpecified) -->Line_30 $$ return -1[ CD ]
Line_41 $$ if (args[i].equals("-numOfThreads")) -->Line_43 $$ if (numOfThreads <= 0) [ CD ]
Line_49 $$ if (args[i].equals("-elapsedTime")) -->Line_54 $$ durations[0] = Long.parseLong(args[++i])[ CD ]
Line_47 $$ if (args[i].equals("-startTime")) -->Line_48 $$ startTime = Long.parseLong(args[++i])[ CD ]
Line_2 $$ private int init(String[] args) throws IOException -->Line_74 $$ if (r == null) [ CD ]
