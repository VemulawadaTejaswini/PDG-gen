Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_21 $$ int count = result.size()[ CD ]
Line_16 $$ VirtualFile vFile = file.getVirtualFile()-->Line_17 $$ if (!hasAcceptablePackage(vFile))[ FD ]
Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())-->Line_31 $$ return result.toArray(new PsiClass[count])[ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_3 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)[ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_22 $$ if (count == 0)[ CD ]
Line_26 $$ ContainerUtil.quickSort(result, new Comparator<PsiClass>() -->Line_28 $$ return scope.compare(o2.getContainingFile().getVirtualFile(), o1.getContainingFile().getVirtualFile())[ CD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_26 $$ ContainerUtil.quickSort(result, new Comparator<PsiClass>() [ CD ]
Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())-->Line_21 $$ int count = result.size()[ FD ]
Line_22 $$ if (count == 0)-->Line_23 $$ return PsiClass.EMPTY_ARRAY[ CD ]
Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())-->Line_26 $$ ContainerUtil.quickSort(result, new Comparator<PsiClass>() [ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_24 $$ if (count == 1)[ CD ]
Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())-->Line_19 $$ result.add(aClass)[ FD ]
Line_7 $$ for (PsiClass aClass : classes) -->Line_19 $$ result.add(aClass)[ FD ]
Line_21 $$ int count = result.size()-->Line_22 $$ if (count == 0)[ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_4 $$ if (classes.isEmpty())[ CD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_28 $$ return scope.compare(o2.getContainingFile().getVirtualFile(), o1.getContainingFile().getVirtualFile())[ FD ]
Line_7 $$ for (PsiClass aClass : classes) -->Line_12 $$ PsiFile file = aClass.getContainingFile()[ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_31 $$ return result.toArray(new PsiClass[count])[ CD ]
Line_12 $$ PsiFile file = aClass.getContainingFile()-->Line_13 $$ if (file == null) [ FD ]
Line_3 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)-->Line_4 $$ if (classes.isEmpty())[ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_9 $$ if (qualifiedName == null || !qualifiedName.equals(qName))[ FD ]
Line_26 $$ ContainerUtil.quickSort(result, new Comparator<PsiClass>() -->Line_28 $$ return scope.compare(o2.getContainingFile().getVirtualFile(), o1.getContainingFile().getVirtualFile())[ FD ]
Line_21 $$ int count = result.size()-->Line_24 $$ if (count == 1)[ FD ]
Line_3 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)-->Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())[ FD ]
Line_7 $$ for (PsiClass aClass : classes) -->Line_14 $$ throw new AssertionError("No file for class: " + aClass + " of " + aClass.getClass())[ FD ]
Line_12 $$ PsiFile file = aClass.getContainingFile()-->Line_16 $$ VirtualFile vFile = file.getVirtualFile()[ FD ]
Line_4 $$ if (classes.isEmpty())-->Line_5 $$ return PsiClass.EMPTY_ARRAY[ CD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())[ CD ]
Line_8 $$ final String qualifiedName = aClass.getQualifiedName()-->Line_9 $$ if (qualifiedName == null || !qualifiedName.equals(qName))[ FD ]
Line_24 $$ if (count == 1)-->Line_25 $$ return new PsiClass[] [ CD ]
Line_7 $$ for (PsiClass aClass : classes) -->Line_11 $$ PsiUtilCore.ensureValid(aClass)[ FD ]
Line_7 $$ for (PsiClass aClass : classes) -->Line_8 $$ final String qualifiedName = aClass.getQualifiedName()[ FD ]
Line_6 $$ List<PsiClass> result = new ArrayList<PsiClass>(classes.size())-->Line_25 $$ return new PsiClass[] [ FD ]
Line_2 $$ public PsiClass[] findClasses(@NotNull String qName, @NotNull final GlobalSearchScope scope) -->Line_3 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)[ CD ]
