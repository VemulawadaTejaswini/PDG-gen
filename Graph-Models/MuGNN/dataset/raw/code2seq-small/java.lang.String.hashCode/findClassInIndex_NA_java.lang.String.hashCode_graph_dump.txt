Line_6 $$ for (PsiClass aClass : classes) -->Line_25 $$ bestClass = aClass[ FD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_23 $$ if (bestFile == null || scope.compare(vFile, bestFile) > 0) [ FD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_4 $$ PsiClass bestClass = null[ CD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_3 $$ VirtualFile bestFile = null[ CD ]
Line_6 $$ for (PsiClass aClass : classes) -->Line_9 $$ LOG.error("aClass=" + aClass + " of class " + aClass.getClass() + "; valid=" + aClass.isValid())[ FD ]
Line_23 $$ if (bestFile == null || scope.compare(vFile, bestFile) > 0) -->Line_25 $$ bestClass = aClass[ CD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_5 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)[ CD ]
Line_3 $$ VirtualFile bestFile = null-->Line_23 $$ if (bestFile == null || scope.compare(vFile, bestFile) > 0) [ FD ]
Line_8 $$ if (file == null) -->Line_9 $$ LOG.error("aClass=" + aClass + " of class " + aClass.getClass() + "; valid=" + aClass.isValid())[ CD ]
Line_7 $$ PsiFile file = aClass.getContainingFile()-->Line_15 $$ LOG.error("Invalid class " + aClass + "; " + file + (file.isValid() ? "" : " (invalid)") + "; virtualFile:" + vFile + (vFile != null && !vFile.isValid() ? " (invalid)" : "") + "; id=" + (vFile == null ? 0 : ((VirtualFileWithId) vFile).getId()), new PsiInvalidElementAccessException(aClass))[ FD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_19 $$ if (qualifiedName == null || !qualifiedName.equals(qName))[ FD ]
Line_14 $$ if (!valid) -->Line_15 $$ LOG.error("Invalid class " + aClass + "; " + file + (file.isValid() ? "" : " (invalid)") + "; virtualFile:" + vFile + (vFile != null && !vFile.isValid() ? " (invalid)" : "") + "; id=" + (vFile == null ? 0 : ((VirtualFileWithId) vFile).getId()), new PsiInvalidElementAccessException(aClass))[ CD ]
Line_13 $$ VirtualFile vFile = file.getVirtualFile()-->Line_21 $$ if (!hasAcceptablePackage(vFile))[ FD ]
Line_6 $$ for (PsiClass aClass : classes) -->Line_18 $$ final String qualifiedName = aClass.getQualifiedName()[ FD ]
Line_18 $$ final String qualifiedName = aClass.getQualifiedName()-->Line_19 $$ if (qualifiedName == null || !qualifiedName.equals(qName))[ FD ]
Line_6 $$ for (PsiClass aClass : classes) -->Line_7 $$ PsiFile file = aClass.getContainingFile()[ FD ]
Line_12 $$ final boolean valid = aClass.isValid()-->Line_14 $$ if (!valid) [ FD ]
Line_6 $$ for (PsiClass aClass : classes) -->Line_12 $$ final boolean valid = aClass.isValid()[ FD ]
Line_4 $$ PsiClass bestClass = null-->Line_25 $$ bestClass = aClass[ FD ]
Line_13 $$ VirtualFile vFile = file.getVirtualFile()-->Line_24 $$ bestFile = vFile[ FD ]
Line_3 $$ VirtualFile bestFile = null-->Line_24 $$ bestFile = vFile[ FD ]
Line_7 $$ PsiFile file = aClass.getContainingFile()-->Line_8 $$ if (file == null) [ FD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_5 $$ final Collection<PsiClass> classes = JavaFullClassNameIndex.getInstance().get(qName.hashCode(), myManager.getProject(), scope)[ FD ]
Line_13 $$ VirtualFile vFile = file.getVirtualFile()-->Line_23 $$ if (bestFile == null || scope.compare(vFile, bestFile) > 0) [ FD ]
Line_2 $$ private PsiClass findClassInIndex(String qName, GlobalSearchScope scope) -->Line_28 $$ return bestClass[ CD ]
Line_13 $$ VirtualFile vFile = file.getVirtualFile()-->Line_15 $$ LOG.error("Invalid class " + aClass + "; " + file + (file.isValid() ? "" : " (invalid)") + "; virtualFile:" + vFile + (vFile != null && !vFile.isValid() ? " (invalid)" : "") + "; id=" + (vFile == null ? 0 : ((VirtualFileWithId) vFile).getId()), new PsiInvalidElementAccessException(aClass))[ FD ]
Line_23 $$ if (bestFile == null || scope.compare(vFile, bestFile) > 0) -->Line_24 $$ bestFile = vFile[ CD ]
Line_7 $$ PsiFile file = aClass.getContainingFile()-->Line_13 $$ VirtualFile vFile = file.getVirtualFile()[ FD ]
