Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_8 $$ sink.occurrence(GrFullScriptNameIndex.KEY, fqn.hashCode())[ FD ]
Line_10 $$ for (String anno : stub.getAnnotations()) -->Line_11 $$ sink.occurrence(GrAnnotatedMemberIndex.KEY, anno)[ FD ]
Line_14 $$ if (fileId == null)-->Line_15 $$ return[ CD ]
Line_6 $$ final String pName = GrStubUtils.getPackageName(stub)-->Line_7 $$ final String fqn = StringUtil.isEmpty(pName) ? name : pName + "." + name[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_3 $$ String name = stub.getName().toString()[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_17 $$ sink.occurrence(JavaStubIndexKeys.UNITS, unit)[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_10 $$ for (String anno : stub.getAnnotations()) [ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_14 $$ if (fileId == null)[ CD ]
Line_13 $$ Integer fileId = stub.getUserData(IndexingDataKeys.VIRTUAL_FILE_ID)-->Line_16 $$ IndexTree.Unit unit = GrStubIndexer.translate(fileId, stub)[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_17 $$ sink.occurrence(JavaStubIndexKeys.UNITS, unit)[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_5 $$ sink.occurrence(GrScriptClassNameIndex.KEY, name)[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_11 $$ sink.occurrence(GrAnnotatedMemberIndex.KEY, anno)[ FD ]
Line_4 $$ if (stub.isScript() && name != null) -->Line_8 $$ sink.occurrence(GrFullScriptNameIndex.KEY, fqn.hashCode())[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_13 $$ Integer fileId = stub.getUserData(IndexingDataKeys.VIRTUAL_FILE_ID)[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_4 $$ if (stub.isScript() && name != null) [ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_4 $$ if (stub.isScript() && name != null) [ CD ]
Line_4 $$ if (stub.isScript() && name != null) -->Line_6 $$ final String pName = GrStubUtils.getPackageName(stub)[ CD ]
Line_3 $$ String name = stub.getName().toString()-->Line_5 $$ sink.occurrence(GrScriptClassNameIndex.KEY, name)[ FD ]
Line_4 $$ if (stub.isScript() && name != null) -->Line_7 $$ final String fqn = StringUtil.isEmpty(pName) ? name : pName + "." + name[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_6 $$ final String pName = GrStubUtils.getPackageName(stub)[ FD ]
Line_16 $$ IndexTree.Unit unit = GrStubIndexer.translate(fileId, stub)-->Line_17 $$ sink.occurrence(JavaStubIndexKeys.UNITS, unit)[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_16 $$ IndexTree.Unit unit = GrStubIndexer.translate(fileId, stub)[ FD ]
Line_4 $$ if (stub.isScript() && name != null) -->Line_5 $$ sink.occurrence(GrScriptClassNameIndex.KEY, name)[ CD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_16 $$ IndexTree.Unit unit = GrStubIndexer.translate(fileId, stub)[ CD ]
Line_13 $$ Integer fileId = stub.getUserData(IndexingDataKeys.VIRTUAL_FILE_ID)-->Line_14 $$ if (fileId == null)[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_3 $$ String name = stub.getName().toString()[ FD ]
Line_2 $$ public void indexStub(@NotNull GrFileStub stub, @NotNull IndexSink sink) -->Line_13 $$ Integer fileId = stub.getUserData(IndexingDataKeys.VIRTUAL_FILE_ID)[ FD ]
Line_7 $$ final String fqn = StringUtil.isEmpty(pName) ? name : pName + "." + name-->Line_8 $$ sink.occurrence(GrFullScriptNameIndex.KEY, fqn.hashCode())[ FD ]
