Line_39 $$ String resourceUrl-->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_48 $$ String resourcePath[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_75 $$ if (nestedException[0] != null) [ CD ]
Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)-->Line_58 $$ if (resourcePath == null)[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_28 $$ VirtualFile virtualFile = findFileByPath(resPath, dtdUrl, indicator)[ FD ]
Line_66 $$ for (String u : newLinks) -->Line_68 $$ if (!processedLinks.contains(u))[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_23 $$ final String resPath = fetchOneFile(indicator, url, project, extResourcesPath, null)[ FD ]
Line_41 $$ resourceUrl = s-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_45 $$ baseUrl = url-->Line_44 $$ if (baseUrl == null)[ FD ]
Line_3 $$ final String extResourcesPath = getExternalResourcesPath()-->Line_23 $$ final String resPath = fetchOneFile(indicator, url, project, extResourcesPath, null)[ FD ]
Line_39 $$ String resourceUrl-->Line_67 $$ baseUrls.put(u, resourceUrl)[ FD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_43 $$ String baseUrl = baseUrls.get(s)[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_61 $$ downloadedResources.add(resourcePath)[ CD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_40 $$ if (absoluteUrl) [ CD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_37 $$ processedLinks.add(s)[ FD ]
Line_75 $$ if (nestedException[0] != null) -->Line_76 $$ cleanup(resourceUrls, downloadedResources)[ CD ]
Line_48 $$ String resourcePath-->Line_58 $$ if (resourcePath == null)[ FD ]
Line_48 $$ String resourcePath-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_49 $$ String refname = s.substring(s.lastIndexOf('/') + 1)[ CD ]
Line_39 $$ String resourceUrl-->Line_41 $$ resourceUrl = s[ FD ]
Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)-->Line_60 $$ virtualFile = findFileByPath(resourcePath, absoluteUrl ? s : null, indicator)[ FD ]
Line_6 $$ final PsiManager psiManager = PsiManager.getInstance(project)-->Line_33 $$ linksToProcess.addAll(extractEmbeddedFileReferences(virtualFile, null, psiManager, url))[ FD ]
Line_66 $$ for (String u : newLinks) -->Line_69 $$ linksToProcess.add(u)[ FD ]
Line_41 $$ resourceUrl = s-->Line_67 $$ baseUrls.put(u, resourceUrl)[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_38 $$ final boolean absoluteUrl = s.startsWith(HTTP_PROTOCOL)[ CD ]
Line_24 $$ if (resPath == null)-->Line_25 $$ return[ CD ]
Line_43 $$ String baseUrl = baseUrls.get(s)-->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ FD ]
Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)-->Line_61 $$ downloadedResources.add(resourcePath)[ FD ]
Line_11 $$ final String path = FileUtil.toSystemIndependentName(extResources.getAbsolutePath())-->Line_13 $$ LOG.assertTrue(vFile != null, path)[ FD ]
Line_43 $$ String baseUrl = baseUrls.get(s)-->Line_45 $$ baseUrl = url[ FD ]
Line_48 $$ String resourcePath-->Line_61 $$ downloadedResources.add(resourcePath)[ FD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_38 $$ final boolean absoluteUrl = s.startsWith(HTTP_PROTOCOL)[ FD ]
Line_40 $$ if (absoluteUrl) -->Line_44 $$ if (baseUrl == null)[ CD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_60 $$ virtualFile = findFileByPath(resourcePath, absoluteUrl ? s : null, indicator)[ CD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_63 $$ resourceUrls.add(s)[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_50 $$ if (absoluteUrl)[ CD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_35 $$ String s = linksToProcess.iterator().next()[ CD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_51 $$ refname = Integer.toHexString(s.hashCode()) + "_" + refname[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_5 $$ LOG.assertTrue(extResources.mkdirs() || extResources.exists(), extResources)[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_45 $$ baseUrl = url[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_39 $$ String resourceUrl[ CD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_65 $$ final Set<String> newLinks = extractEmbeddedFileReferences(virtualFile, contextFile, psiManager, resourceUrl)[ CD ]
Line_49 $$ String refname = s.substring(s.lastIndexOf('/') + 1)-->Line_51 $$ refname = Integer.toHexString(s.hashCode()) + "_" + refname[ FD ]
Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_39 $$ String resourceUrl-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_39 $$ String resourceUrl-->Line_65 $$ final Set<String> newLinks = extractEmbeddedFileReferences(virtualFile, contextFile, psiManager, resourceUrl)[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_26 $$ resourceUrls.add(dtdUrl)[ FD ]
Line_41 $$ resourceUrl = s-->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ FD ]
Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() -->Line_9 $$ final AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(FetchExtResourceAction.class)[ CD ]
Line_9 $$ final AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(FetchExtResourceAction.class)-->Line_15 $$ token.finish()[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_37 $$ processedLinks.add(s)[ CD ]
Line_41 $$ resourceUrl = s-->Line_65 $$ final Set<String> newLinks = extractEmbeddedFileReferences(virtualFile, contextFile, psiManager, resourceUrl)[ FD ]
Line_66 $$ for (String u : newLinks) -->Line_67 $$ baseUrls.put(u, resourceUrl)[ FD ]
Line_48 $$ String resourcePath-->Line_60 $$ virtualFile = findFileByPath(resourcePath, absoluteUrl ? s : null, indicator)[ FD ]
Line_45 $$ baseUrl = url-->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_3 $$ final String extResourcesPath = getExternalResourcesPath()[ CD ]
Line_43 $$ String baseUrl = baseUrls.get(s)-->Line_44 $$ if (baseUrl == null)[ FD ]
Line_6 $$ final PsiManager psiManager = PsiManager.getInstance(project)-->Line_65 $$ final Set<String> newLinks = extractEmbeddedFileReferences(virtualFile, contextFile, psiManager, resourceUrl)[ FD ]
Line_4 $$ final File extResources = new File(extResourcesPath)-->Line_11 $$ final String path = FileUtil.toSystemIndependentName(extResources.getAbsolutePath())[ FD ]
Line_44 $$ if (baseUrl == null)-->Line_45 $$ baseUrl = url[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() [ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_36 $$ linksToProcess.remove(s)[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_4 $$ final File extResources = new File(extResourcesPath)[ CD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ FD ]
Line_62 $$ if (absoluteUrl) -->Line_63 $$ resourceUrls.add(s)[ CD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_58 $$ if (resourcePath == null)[ CD ]
Line_50 $$ if (absoluteUrl)-->Line_51 $$ refname = Integer.toHexString(s.hashCode()) + "_" + refname[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_60 $$ virtualFile = findFileByPath(resourcePath, absoluteUrl ? s : null, indicator)[ FD ]
Line_49 $$ String refname = s.substring(s.lastIndexOf('/') + 1)-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_11 $$ final String path = FileUtil.toSystemIndependentName(extResources.getAbsolutePath())-->Line_12 $$ final VirtualFile vFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(path)[ FD ]
Line_40 $$ if (absoluteUrl) -->Line_41 $$ resourceUrl = s[ CD ]
Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s-->Line_67 $$ baseUrls.put(u, resourceUrl)[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_6 $$ final PsiManager psiManager = PsiManager.getInstance(project)[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_40 $$ if (absoluteUrl) -->Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s[ CD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_33 $$ linksToProcess.addAll(extractEmbeddedFileReferences(virtualFile, null, psiManager, url))[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_6 $$ final PsiManager psiManager = PsiManager.getInstance(project)[ FD ]
Line_2 $$ private void fetchDtd(final Project project, final String dtdUrl, final String url, final ProgressIndicator indicator) throws IOException -->Line_7 $$ ApplicationManager.getApplication().invokeAndWait(new Runnable() [ CD ]
Line_68 $$ if (!processedLinks.contains(u))-->Line_69 $$ linksToProcess.add(u)[ CD ]
Line_40 $$ if (absoluteUrl) -->Line_43 $$ String baseUrl = baseUrls.get(s)[ CD ]
Line_46 $$ resourceUrl = baseUrl.substring(0, baseUrl.lastIndexOf('/') + 1) + s-->Line_65 $$ final Set<String> newLinks = extractEmbeddedFileReferences(virtualFile, contextFile, psiManager, resourceUrl)[ FD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_41 $$ resourceUrl = s[ FD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_49 $$ String refname = s.substring(s.lastIndexOf('/') + 1)[ FD ]
Line_4 $$ final File extResources = new File(extResourcesPath)-->Line_5 $$ LOG.assertTrue(extResources.mkdirs() || extResources.exists(), extResources)[ FD ]
Line_34 $$ while (!linksToProcess.isEmpty()) -->Line_62 $$ if (absoluteUrl) [ CD ]
Line_51 $$ refname = Integer.toHexString(s.hashCode()) + "_" + refname-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
Line_35 $$ String s = linksToProcess.iterator().next()-->Line_36 $$ linksToProcess.remove(s)[ FD ]
Line_3 $$ final String extResourcesPath = getExternalResourcesPath()-->Line_53 $$ resourcePath = fetchOneFile(indicator, resourceUrl, project, extResourcesPath, refname)[ FD ]
