Line_4 $$ if (position != null) -->Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()[ CD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_8 $$ if (debugProcess.getSearchScope().contains(breakpointFile)) [ CD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_33 $$ final Module module = fileIndex.getModuleForFile(breakpointFile)[ FD ]
Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() -->Line_24 $$ return aClass.getContainingFile().getVirtualFile()[ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_32 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(breakpointFile)[ CD ]
Line_4 $$ if (position != null) -->Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()[ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() [ CD ]
Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()-->Line_32 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(breakpointFile)[ FD ]
Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()-->Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) [ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_34 $$ LOG.debug("Did not find '" + className + "' in " + scope + "; contains=" + contains + "; contentRoot=" + contentRoot + "; module = " + module + "; all files in index are: " + files + "; all possible files are: " + allFiles)[ CD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() [ FD ]
Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()-->Line_33 $$ final Module module = fileIndex.getModuleForFile(breakpointFile)[ FD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_36 $$ return false[ CD ]
Line_12 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ LOG.debug("Found " + (candidates == null ? "null" : candidates.size()) + " candidate containing files for class " + className)[ CD ]
Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()-->Line_8 $$ if (debugProcess.getSearchScope().contains(breakpointFile)) [ FD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_12 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_3 $$ final SourcePosition position = getSourcePosition()-->Line_4 $$ if (position != null) [ FD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_18 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_3 $$ final SourcePosition position = getSourcePosition()-->Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()[ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ final Project project = getProject()[ CD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) [ FD ]
Line_21 $$ final Project project = getProject()-->Line_27 $$ final List<VirtualFile> allFiles = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, new EverythingGlobalScope(project)), new Function<PsiClass, VirtualFile>() [ FD ]
Line_15 $$ if (candidates == null) -->Line_16 $$ return true[ CD ]
Line_4 $$ if (position != null) -->Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) [ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_19 $$ final GlobalSearchScope scope = debugProcess.getSearchScope()[ CD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_20 $$ final boolean contains = scope.contains(breakpointFile)[ CD ]
Line_21 $$ final Project project = getProject()-->Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() [ FD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_11 $$ final Collection<VirtualFile> candidates = findClassCandidatesInSourceContent(className, debugProcess.getSearchScope(), fileIndex)[ CD ]
Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() -->Line_29 $$ return aClass.getContainingFile().getVirtualFile()[ FD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_39 $$ return true[ CD ]
Line_11 $$ final Collection<VirtualFile> candidates = findClassCandidatesInSourceContent(className, debugProcess.getSearchScope(), fileIndex)-->Line_13 $$ LOG.debug("Found " + (candidates == null ? "null" : candidates.size()) + " candidate containing files for class " + className)[ FD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_3 $$ final SourcePosition position = getSourcePosition()[ CD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_19 $$ final GlobalSearchScope scope = debugProcess.getSearchScope()[ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_33 $$ final Module module = fileIndex.getModuleForFile(breakpointFile)[ CD ]
Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() -->Line_24 $$ return aClass.getContainingFile().getVirtualFile()[ FD ]
Line_18 $$ if (LOG.isDebugEnabled()) -->Line_27 $$ final List<VirtualFile> allFiles = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, new EverythingGlobalScope(project)), new Function<PsiClass, VirtualFile>() [ CD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_11 $$ final Collection<VirtualFile> candidates = findClassCandidatesInSourceContent(className, debugProcess.getSearchScope(), fileIndex)[ FD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_32 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(breakpointFile)[ FD ]
Line_5 $$ final VirtualFile breakpointFile = position.getFile().getVirtualFile()-->Line_20 $$ final boolean contains = scope.contains(breakpointFile)[ FD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_27 $$ final List<VirtualFile> allFiles = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, new EverythingGlobalScope(project)), new Function<PsiClass, VirtualFile>() [ FD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_8 $$ if (debugProcess.getSearchScope().contains(breakpointFile)) [ FD ]
Line_7 $$ if (breakpointFile != null && fileIndex.isUnderSourceRootOfType(breakpointFile, JavaModuleSourceRootTypes.SOURCES)) -->Line_15 $$ if (candidates == null) [ CD ]
Line_11 $$ final Collection<VirtualFile> candidates = findClassCandidatesInSourceContent(className, debugProcess.getSearchScope(), fileIndex)-->Line_15 $$ if (candidates == null) [ FD ]
Line_27 $$ final List<VirtualFile> allFiles = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, new EverythingGlobalScope(project)), new Function<PsiClass, VirtualFile>() -->Line_29 $$ return aClass.getContainingFile().getVirtualFile()[ CD ]
Line_19 $$ final GlobalSearchScope scope = debugProcess.getSearchScope()-->Line_20 $$ final boolean contains = scope.contains(breakpointFile)[ FD ]
Line_8 $$ if (debugProcess.getSearchScope().contains(breakpointFile)) -->Line_9 $$ return true[ CD ]
Line_19 $$ final GlobalSearchScope scope = debugProcess.getSearchScope()-->Line_22 $$ final List<VirtualFile> files = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, scope), new Function<PsiClass, VirtualFile>() [ FD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_4 $$ if (position != null) [ CD ]
Line_2 $$ private boolean isInScopeOf(DebugProcessImpl debugProcess, String className) -->Line_11 $$ final Collection<VirtualFile> candidates = findClassCandidatesInSourceContent(className, debugProcess.getSearchScope(), fileIndex)[ FD ]
Line_27 $$ final List<VirtualFile> allFiles = ContainerUtil.map(JavaFullClassNameIndex.getInstance().get(className.hashCode(), project, new EverythingGlobalScope(project)), new Function<PsiClass, VirtualFile>() -->Line_29 $$ return aClass.getContainingFile().getVirtualFile()[ FD ]
