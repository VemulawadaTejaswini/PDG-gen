Line_5 $$ for (int i = 0; i < dirs.length; i++) -->Line_6 $$ int index = (hashCode + i & Integer.MAX_VALUE) % dirs.length[ CD ]
Line_8 $$ File dir = file.getParentFile()-->Line_9 $$ if (dir.exists() || dir.mkdirs()) [ FD ]
Line_5 $$ for (int i = 0; i < dirs.length; i++) -->Line_7 $$ File file = new File(dirs[index], path)[ CD ]
Line_2 $$ public File getFile(String dirsProp, String path) throws IOException -->Line_3 $$ String[] dirs = getTrimmedStrings(dirsProp)[ CD ]
Line_7 $$ File file = new File(dirs[index], path)-->Line_8 $$ File dir = file.getParentFile()[ FD ]
Line_2 $$ public File getFile(String dirsProp, String path) throws IOException -->Line_3 $$ String[] dirs = getTrimmedStrings(dirsProp)[ FD ]
Line_2 $$ public File getFile(String dirsProp, String path) throws IOException -->Line_4 $$ int hashCode = path.hashCode()[ CD ]
Line_5 $$ for (int i = 0; i < dirs.length; i++) -->Line_8 $$ File dir = file.getParentFile()[ CD ]
Line_2 $$ public File getFile(String dirsProp, String path) throws IOException -->Line_5 $$ for (int i = 0; i < dirs.length; i++) [ CD ]
Line_9 $$ if (dir.exists() || dir.mkdirs()) -->Line_10 $$ return file[ CD ]
Line_5 $$ for (int i = 0; i < dirs.length; i++) -->Line_9 $$ if (dir.exists() || dir.mkdirs()) [ CD ]
Line_2 $$ public File getFile(String dirsProp, String path) throws IOException -->Line_4 $$ int hashCode = path.hashCode()[ FD ]
