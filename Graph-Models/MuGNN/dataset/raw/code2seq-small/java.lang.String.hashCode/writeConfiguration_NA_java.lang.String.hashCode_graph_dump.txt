Line_20 $$ fingerprint += encoding.hashCode()-->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_12 $$ final JpsJavaCompilerConfiguration config = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(module.getProject())-->Line_13 $$ final String bytecodeTarget = config.getByteCodeTargetLevel(module.getName())[ FD ]
Line_3 $$ final JpsModule module = getModule()-->Line_8 $$ final LanguageLevel level = JpsJavaExtensionService.getInstance().getLanguageLevel(module)[ FD ]
Line_8 $$ final LanguageLevel level = JpsJavaExtensionService.getInstance().getLanguageLevel(module)-->Line_10 $$ fingerprint += level.name().hashCode()[ FD ]
Line_13 $$ final String bytecodeTarget = config.getByteCodeTargetLevel(module.getName())-->Line_15 $$ fingerprint += bytecodeTarget.hashCode()[ FD ]
Line_4 $$ int fingerprint = getDependenciesFingerprint()-->Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())[ FD ]
Line_9 $$ if (level != null) -->Line_10 $$ fingerprint += level.name().hashCode()[ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_9 $$ if (level != null) [ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ CD ]
Line_4 $$ int fingerprint = getDependenciesFingerprint()-->Line_15 $$ fingerprint += bytecodeTarget.hashCode()[ FD ]
Line_10 $$ fingerprint += level.name().hashCode()-->Line_20 $$ fingerprint += encoding.hashCode()[ FD ]
Line_17 $$ final CompilerEncodingConfiguration encodingConfig = pd.getEncodingConfiguration()-->Line_18 $$ final String encoding = encodingConfig.getPreferredModuleEncoding(module)[ FD ]
Line_3 $$ final JpsModule module = getModule()-->Line_12 $$ final JpsJavaCompilerConfiguration config = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(module.getProject())[ FD ]
Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())-->Line_15 $$ fingerprint += bytecodeTarget.hashCode()[ FD ]
Line_19 $$ if (encoding != null) -->Line_20 $$ fingerprint += encoding.hashCode()[ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_18 $$ final String encoding = encodingConfig.getPreferredModuleEncoding(module)[ CD ]
Line_18 $$ final String encoding = encodingConfig.getPreferredModuleEncoding(module)-->Line_20 $$ fingerprint += encoding.hashCode()[ FD ]
Line_15 $$ fingerprint += bytecodeTarget.hashCode()-->Line_20 $$ fingerprint += encoding.hashCode()[ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_14 $$ if (bytecodeTarget != null) [ CD ]
Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())-->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_12 $$ final JpsJavaCompilerConfiguration config = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(module.getProject())[ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_3 $$ final JpsModule module = getModule()[ CD ]
Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())-->Line_20 $$ fingerprint += encoding.hashCode()[ FD ]
Line_5 $$ for (JavaSourceRootDescriptor root : pd.getBuildRootIndex().getTargetRoots(this, null)) -->Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())[ FD ]
Line_4 $$ int fingerprint = getDependenciesFingerprint()-->Line_20 $$ fingerprint += encoding.hashCode()[ FD ]
Line_3 $$ final JpsModule module = getModule()-->Line_18 $$ final String encoding = encodingConfig.getPreferredModuleEncoding(module)[ FD ]
Line_8 $$ final LanguageLevel level = JpsJavaExtensionService.getInstance().getLanguageLevel(module)-->Line_9 $$ if (level != null) [ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_5 $$ for (JavaSourceRootDescriptor root : pd.getBuildRootIndex().getTargetRoots(this, null)) [ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_4 $$ int fingerprint = getDependenciesFingerprint()[ CD ]
Line_14 $$ if (bytecodeTarget != null) -->Line_15 $$ fingerprint += bytecodeTarget.hashCode()[ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_13 $$ final String bytecodeTarget = config.getByteCodeTargetLevel(module.getName())[ CD ]
Line_13 $$ final String bytecodeTarget = config.getByteCodeTargetLevel(module.getName())-->Line_14 $$ if (bytecodeTarget != null) [ FD ]
Line_18 $$ final String encoding = encodingConfig.getPreferredModuleEncoding(module)-->Line_19 $$ if (encoding != null) [ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_8 $$ final LanguageLevel level = JpsJavaExtensionService.getInstance().getLanguageLevel(module)[ CD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_17 $$ final CompilerEncodingConfiguration encodingConfig = pd.getEncodingConfiguration()[ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_19 $$ if (encoding != null) [ CD ]
Line_10 $$ fingerprint += level.name().hashCode()-->Line_15 $$ fingerprint += bytecodeTarget.hashCode()[ FD ]
Line_4 $$ int fingerprint = getDependenciesFingerprint()-->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_10 $$ fingerprint += level.name().hashCode()-->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_15 $$ fingerprint += bytecodeTarget.hashCode()-->Line_22 $$ out.write(Integer.toHexString(fingerprint))[ FD ]
Line_4 $$ int fingerprint = getDependenciesFingerprint()-->Line_10 $$ fingerprint += level.name().hashCode()[ FD ]
Line_2 $$ public void writeConfiguration(ProjectDescriptor pd, PrintWriter out) -->Line_17 $$ final CompilerEncodingConfiguration encodingConfig = pd.getEncodingConfiguration()[ CD ]
Line_3 $$ final JpsModule module = getModule()-->Line_13 $$ final String bytecodeTarget = config.getByteCodeTargetLevel(module.getName())[ FD ]
Line_6 $$ fingerprint += FileUtil.fileHashCode(root.getRootFile())-->Line_10 $$ fingerprint += level.name().hashCode()[ FD ]
