Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_32 $$ if (qName1.hashCode() != qName2.hashCode() || !qName1.equals(qName2)) [ CD ]
Line_15 $$ if (name1.hashCode() != name2.hashCode())-->Line_16 $$ return false[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_42 $$ if (original1 == original2 && original1 != null || original1 == file2 || original2 == file1 || file1 == file2) [ CD ]
Line_26 $$ PsiTypeParameter p2 = (PsiTypeParameter) another-->Line_27 $$ return p1.getIndex() == p2.getIndex() && (aClass.getManager().areElementsEquivalent(p1.getOwner(), p2.getOwner()) || InferenceSession.areSameFreshVariables(p1, p2))[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_21 $$ if (qName1 == null || qName2 == null) [ CD ]
Line_20 $$ String qName2 = ((PsiClass) another).getQualifiedName()-->Line_32 $$ if (qName1.hashCode() != qName2.hashCode() || !qName1.equals(qName2)) [ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_39 $$ final PsiFile file2 = another.getContainingFile().getOriginalFile()[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_10 $$ if (!another.isValid())[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_38 $$ final PsiFile file1 = aClass.getContainingFile().getOriginalFile()[ CD ]
Line_3 $$ if (aClass == another)-->Line_4 $$ return true[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_41 $$ final PsiFile original2 = file2.getUserData(PsiFileFactory.ORIGINAL_FILE)[ CD ]
Line_24 $$ if (aClass instanceof PsiTypeParameter && another instanceof PsiTypeParameter) -->Line_27 $$ return p1.getIndex() == p2.getIndex() && (aClass.getManager().areElementsEquivalent(p1.getOwner(), p2.getOwner()) || InferenceSession.areSameFreshVariables(p1, p2))[ CD ]
Line_39 $$ final PsiFile file2 = another.getContainingFile().getOriginalFile()-->Line_47 $$ final VirtualFile vfile2 = file2.getViewProvider().getVirtualFile()[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_48 $$ boolean lib1 = fileIndex.isInLibraryClasses(vfile1)[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_15 $$ if (name1.hashCode() != name2.hashCode())[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_19 $$ String qName1 = aClass.getQualifiedName()[ FD ]
Line_7 $$ String name1 = aClass.getName()-->Line_17 $$ if (!name1.equals(name2))[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_39 $$ final PsiFile file2 = another.getContainingFile().getOriginalFile()[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_49 $$ boolean lib2 = fileIndex.isInLibraryClasses(vfile2)[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_35 $$ if (aClass.getOriginalElement().equals(another.getOriginalElement())) [ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_50 $$ return (fileIndex.isInSource(vfile1) || lib1) && (fileIndex.isInSource(vfile2) || lib2)[ CD ]
Line_38 $$ final PsiFile file1 = aClass.getContainingFile().getOriginalFile()-->Line_45 $$ final FileIndexFacade fileIndex = ServiceManager.getService(file1.getProject(), FileIndexFacade.class)[ FD ]
Line_45 $$ final FileIndexFacade fileIndex = ServiceManager.getService(file1.getProject(), FileIndexFacade.class)-->Line_49 $$ boolean lib2 = fileIndex.isInLibraryClasses(vfile2)[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_17 $$ if (!name1.equals(name2))[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_47 $$ final VirtualFile vfile2 = file2.getViewProvider().getVirtualFile()[ CD ]
Line_17 $$ if (!name1.equals(name2))-->Line_18 $$ return false[ CD ]
Line_35 $$ if (aClass.getOriginalElement().equals(another.getOriginalElement())) -->Line_36 $$ return true[ CD ]
Line_8 $$ if (name1 == null)-->Line_9 $$ return false[ CD ]
Line_22 $$ if (qName1 != qName2)-->Line_23 $$ return false[ CD ]
Line_32 $$ if (qName1.hashCode() != qName2.hashCode() || !qName1.equals(qName2)) -->Line_33 $$ return false[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_3 $$ if (aClass == another)[ FD ]
Line_12 $$ String name2 = ((PsiClass) another).getName()-->Line_17 $$ if (!name1.equals(name2))[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_19 $$ String qName1 = aClass.getQualifiedName()[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_3 $$ if (aClass == another)[ CD ]
Line_12 $$ String name2 = ((PsiClass) another).getName()-->Line_15 $$ if (name1.hashCode() != name2.hashCode())[ FD ]
Line_21 $$ if (qName1 == null || qName2 == null) -->Line_22 $$ if (qName1 != qName2)[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_7 $$ String name1 = aClass.getName()[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_35 $$ if (aClass.getOriginalElement().equals(another.getOriginalElement())) [ CD ]
Line_47 $$ final VirtualFile vfile2 = file2.getViewProvider().getVirtualFile()-->Line_49 $$ boolean lib2 = fileIndex.isInLibraryClasses(vfile2)[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_8 $$ if (name1 == null)[ CD ]
Line_5 $$ if (!(another instanceof PsiClass))-->Line_6 $$ return false[ CD ]
Line_47 $$ final VirtualFile vfile2 = file2.getViewProvider().getVirtualFile()-->Line_50 $$ return (fileIndex.isInSource(vfile1) || lib1) && (fileIndex.isInSource(vfile2) || lib2)[ FD ]
Line_38 $$ final PsiFile file1 = aClass.getContainingFile().getOriginalFile()-->Line_40 $$ final PsiFile original1 = file1.getUserData(PsiFileFactory.ORIGINAL_FILE)[ FD ]
Line_45 $$ final FileIndexFacade fileIndex = ServiceManager.getService(file1.getProject(), FileIndexFacade.class)-->Line_50 $$ return (fileIndex.isInSource(vfile1) || lib1) && (fileIndex.isInSource(vfile2) || lib2)[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_13 $$ if (name2 == null)[ CD ]
Line_38 $$ final PsiFile file1 = aClass.getContainingFile().getOriginalFile()-->Line_46 $$ final VirtualFile vfile1 = file1.getViewProvider().getVirtualFile()[ FD ]
Line_21 $$ if (qName1 == null || qName2 == null) -->Line_24 $$ if (aClass instanceof PsiTypeParameter && another instanceof PsiTypeParameter) [ CD ]
Line_25 $$ PsiTypeParameter p1 = (PsiTypeParameter) aClass-->Line_27 $$ return p1.getIndex() == p2.getIndex() && (aClass.getManager().areElementsEquivalent(p1.getOwner(), p2.getOwner()) || InferenceSession.areSameFreshVariables(p1, p2))[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_46 $$ final VirtualFile vfile1 = file1.getViewProvider().getVirtualFile()[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_20 $$ String qName2 = ((PsiClass) another).getQualifiedName()[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_45 $$ final FileIndexFacade fileIndex = ServiceManager.getService(file1.getProject(), FileIndexFacade.class)[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_40 $$ final PsiFile original1 = file1.getUserData(PsiFileFactory.ORIGINAL_FILE)[ CD ]
Line_46 $$ final VirtualFile vfile1 = file1.getViewProvider().getVirtualFile()-->Line_50 $$ return (fileIndex.isInSource(vfile1) || lib1) && (fileIndex.isInSource(vfile2) || lib2)[ FD ]
Line_7 $$ String name1 = aClass.getName()-->Line_8 $$ if (name1 == null)[ FD ]
Line_13 $$ if (name2 == null)-->Line_14 $$ return false[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_43 $$ return compareClassSeqNumber(aClass, (PsiClass) another)[ FD ]
Line_46 $$ final VirtualFile vfile1 = file1.getViewProvider().getVirtualFile()-->Line_48 $$ boolean lib1 = fileIndex.isInLibraryClasses(vfile1)[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_10 $$ if (!another.isValid())[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_7 $$ String name1 = aClass.getName()[ FD ]
Line_19 $$ String qName1 = aClass.getQualifiedName()-->Line_32 $$ if (qName1.hashCode() != qName2.hashCode() || !qName1.equals(qName2)) [ FD ]
Line_7 $$ String name1 = aClass.getName()-->Line_15 $$ if (name1.hashCode() != name2.hashCode())[ FD ]
Line_10 $$ if (!another.isValid())-->Line_11 $$ return false[ CD ]
Line_42 $$ if (original1 == original2 && original1 != null || original1 == file2 || original2 == file1 || file1 == file2) -->Line_43 $$ return compareClassSeqNumber(aClass, (PsiClass) another)[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_38 $$ final PsiFile file1 = aClass.getContainingFile().getOriginalFile()[ FD ]
Line_39 $$ final PsiFile file2 = another.getContainingFile().getOriginalFile()-->Line_41 $$ final PsiFile original2 = file2.getUserData(PsiFileFactory.ORIGINAL_FILE)[ FD ]
Line_12 $$ String name2 = ((PsiClass) another).getName()-->Line_13 $$ if (name2 == null)[ FD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_12 $$ String name2 = ((PsiClass) another).getName()[ CD ]
Line_19 $$ String qName1 = aClass.getQualifiedName()-->Line_22 $$ if (qName1 != qName2)[ FD ]
Line_24 $$ if (aClass instanceof PsiTypeParameter && another instanceof PsiTypeParameter) -->Line_25 $$ PsiTypeParameter p1 = (PsiTypeParameter) aClass[ CD ]
Line_24 $$ if (aClass instanceof PsiTypeParameter && another instanceof PsiTypeParameter) -->Line_26 $$ PsiTypeParameter p2 = (PsiTypeParameter) another[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_27 $$ return p1.getIndex() == p2.getIndex() && (aClass.getManager().areElementsEquivalent(p1.getOwner(), p2.getOwner()) || InferenceSession.areSameFreshVariables(p1, p2))[ FD ]
Line_20 $$ String qName2 = ((PsiClass) another).getQualifiedName()-->Line_22 $$ if (qName1 != qName2)[ FD ]
Line_24 $$ if (aClass instanceof PsiTypeParameter && another instanceof PsiTypeParameter) -->Line_29 $$ return false[ CD ]
Line_2 $$ public static boolean isClassEquivalentTo(@NotNull PsiClass aClass, PsiElement another) -->Line_5 $$ if (!(another instanceof PsiClass))[ CD ]
Line_45 $$ final FileIndexFacade fileIndex = ServiceManager.getService(file1.getProject(), FileIndexFacade.class)-->Line_48 $$ boolean lib1 = fileIndex.isInLibraryClasses(vfile1)[ FD ]
