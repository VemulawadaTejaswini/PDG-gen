Line_35 $$ include = replaceTemplate(include, getTemplate())-->Line_34 $$ include = convertTimestamp(include)[ FD ]
Line_29 $$ include = evaluateVM(includeFileName, include)-->Line_36 $$ runSQLTemplateString(include, false, true)[ FD ]
Line_20 $$ String includeFileName = line.substring(pos + 1)-->Line_27 $$ if (includeFileName.endsWith(".vm")) [ FD ]
Line_2 $$ public void runSQLTemplateString(Connection connection, String template, boolean evaluate, boolean failOnError) throws IOException, NamingException, SQLException -->Line_3 $$ template = applyMaxStringIndexLengthLimitation(_columnLengthPattern.matcher(template))[ CD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_26 $$ String include = StringUtil.read(is)[ CD ]
Line_2 $$ public void runSQLTemplateString(Connection connection, String template, boolean evaluate, boolean failOnError) throws IOException, NamingException, SQLException -->Line_44 $$ runSQL(connection, sql)[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_15 $$ if (line.startsWith("##")) [ FD ]
Line_23 $$ if (is == null) -->Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)[ CD ]
Line_13 $$ String line = null-->Line_20 $$ String includeFileName = line.substring(pos + 1)[ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_34 $$ include = convertTimestamp(include)[ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_15 $$ if (line.startsWith("##")) [ CD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_23 $$ if (is == null) [ CD ]
Line_13 $$ String line = null-->Line_39 $$ if (line.endsWith(";")) [ FD ]
Line_40 $$ String sql = sb.toString()-->Line_68 $$ _log.warn(message + ": " + buildSQL(sql))[ FD ]
Line_22 $$ InputStream is = classLoader.getResourceAsStream("com/liferay/portal/tools/sql/dependencies/" + includeFileName)-->Line_26 $$ String include = StringUtil.read(is)[ FD ]
Line_13 $$ String line = null-->Line_71 $$ _log.error(line)[ FD ]
Line_21 $$ ClassLoader classLoader = ClassLoaderUtil.getContextClassLoader()-->Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)[ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_39 $$ if (line.endsWith(";")) [ CD ]
Line_34 $$ include = convertTimestamp(include)-->Line_35 $$ include = replaceTemplate(include, getTemplate())[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_38 $$ sb.append(line)[ FD ]
Line_11 $$ try (UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(template))) -->Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_40 $$ String sql = sb.toString()-->Line_43 $$ if (!sql.equals("COMMIT_TRANSACTION;")) [ FD ]
Line_3 $$ template = applyMaxStringIndexLengthLimitation(_columnLengthPattern.matcher(template))-->Line_6 $$ template = evaluateVM(template.hashCode() + "", template)[ FD ]
Line_66 $$ String message = GetterUtil.getString(sqle.getMessage())-->Line_67 $$ if (!message.startsWith("Duplicate key name") && _log.isWarnEnabled()) [ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_19 $$ int pos = line.indexOf(" ")[ FD ]
Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)-->Line_23 $$ if (is == null) [ FD ]
Line_43 $$ if (!sql.equals("COMMIT_TRANSACTION;")) -->Line_46 $$ if (_log.isDebugEnabled()) [ CD ]
Line_20 $$ String includeFileName = line.substring(pos + 1)-->Line_29 $$ include = evaluateVM(includeFileName, include)[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_38 $$ sb.append(line)[ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_22 $$ InputStream is = classLoader.getResourceAsStream("com/liferay/portal/tools/sql/dependencies/" + includeFileName)[ CD ]
Line_39 $$ if (line.endsWith(";")) -->Line_41 $$ sb.setIndex(0)[ CD ]
Line_51 $$ if (failOnError) -->Line_53 $$ if (_log.isWarnEnabled()) [ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_18 $$ if (line.startsWith("@include ")) [ FD ]
Line_34 $$ include = convertTimestamp(include)-->Line_36 $$ runSQLTemplateString(include, false, true)[ FD ]
Line_13 $$ String line = null-->Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_29 $$ include = evaluateVM(includeFileName, include)-->Line_35 $$ include = replaceTemplate(include, getTemplate())[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_39 $$ if (line.endsWith(";")) [ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_19 $$ int pos = line.indexOf(" ")[ CD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_21 $$ ClassLoader classLoader = ClassLoaderUtil.getContextClassLoader()[ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_20 $$ String includeFileName = line.substring(pos + 1)[ FD ]
Line_20 $$ String includeFileName = line.substring(pos + 1)-->Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)[ FD ]
Line_22 $$ InputStream is = classLoader.getResourceAsStream("com/liferay/portal/tools/sql/dependencies/" + includeFileName)-->Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)[ FD ]
Line_13 $$ String line = null-->Line_15 $$ if (line.startsWith("##")) [ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_35 $$ include = replaceTemplate(include, getTemplate())[ CD ]
Line_70 $$ if (message.startsWith("Duplicate entry") || message.startsWith("Specified key was too long")) -->Line_71 $$ _log.error(line)[ CD ]
Line_43 $$ if (!sql.equals("COMMIT_TRANSACTION;")) -->Line_44 $$ runSQL(connection, sql)[ CD ]
Line_2 $$ public void runSQLTemplateString(Connection connection, String template, boolean evaluate, boolean failOnError) throws IOException, NamingException, SQLException -->Line_4 $$ if (evaluate) [ CD ]
Line_26 $$ String include = StringUtil.read(is)-->Line_35 $$ include = replaceTemplate(include, getTemplate())[ FD ]
Line_67 $$ if (!message.startsWith("Duplicate key name") && _log.isWarnEnabled()) -->Line_68 $$ _log.warn(message + ": " + buildSQL(sql))[ CD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_41 $$ sb.setIndex(0)[ FD ]
Line_26 $$ String include = StringUtil.read(is)-->Line_29 $$ include = evaluateVM(includeFileName, include)[ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_27 $$ if (includeFileName.endsWith(".vm")) [ CD ]
Line_2 $$ public void runSQLTemplateString(Connection connection, String template, boolean evaluate, boolean failOnError) throws IOException, NamingException, SQLException -->Line_6 $$ template = evaluateVM(template.hashCode() + "", template)[ FD ]
Line_26 $$ String include = StringUtil.read(is)-->Line_34 $$ include = convertTimestamp(include)[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_40 $$ String sql = sb.toString()[ FD ]
Line_35 $$ include = replaceTemplate(include, getTemplate())-->Line_29 $$ include = evaluateVM(includeFileName, include)[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_18 $$ if (line.startsWith("@include ")) [ CD ]
Line_2 $$ public void runSQLTemplateString(Connection connection, String template, boolean evaluate, boolean failOnError) throws IOException, NamingException, SQLException -->Line_3 $$ template = applyMaxStringIndexLengthLimitation(_columnLengthPattern.matcher(template))[ FD ]
Line_46 $$ if (_log.isDebugEnabled()) -->Line_47 $$ _log.debug("Skip commit sql")[ CD ]
Line_13 $$ String line = null-->Line_18 $$ if (line.startsWith("@include ")) [ FD ]
Line_59 $$ if (_log.isWarnEnabled()) -->Line_60 $$ _log.warn(se.getMessage())[ CD ]
Line_40 $$ String sql = sb.toString()-->Line_44 $$ runSQL(connection, sql)[ FD ]
Line_21 $$ ClassLoader classLoader = ClassLoaderUtil.getContextClassLoader()-->Line_22 $$ InputStream is = classLoader.getResourceAsStream("com/liferay/portal/tools/sql/dependencies/" + includeFileName)[ FD ]
Line_22 $$ InputStream is = classLoader.getResourceAsStream("com/liferay/portal/tools/sql/dependencies/" + includeFileName)-->Line_23 $$ if (is == null) [ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_38 $$ sb.append(line)[ CD ]
Line_29 $$ include = evaluateVM(includeFileName, include)-->Line_34 $$ include = convertTimestamp(include)[ FD ]
Line_39 $$ if (line.endsWith(";")) -->Line_40 $$ String sql = sb.toString()[ CD ]
Line_13 $$ String line = null-->Line_38 $$ sb.append(line)[ FD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_36 $$ runSQLTemplateString(include, false, true)[ CD ]
Line_18 $$ if (line.startsWith("@include ")) -->Line_20 $$ String includeFileName = line.substring(pos + 1)[ CD ]
Line_13 $$ String line = null-->Line_19 $$ int pos = line.indexOf(" ")[ FD ]
Line_57 $$ if (failOnError) -->Line_59 $$ if (_log.isWarnEnabled()) [ CD ]
Line_53 $$ if (_log.isWarnEnabled()) -->Line_54 $$ _log.warn(ioe.getMessage())[ CD ]
Line_34 $$ include = convertTimestamp(include)-->Line_29 $$ include = evaluateVM(includeFileName, include)[ FD ]
Line_35 $$ include = replaceTemplate(include, getTemplate())-->Line_36 $$ runSQLTemplateString(include, false, true)[ FD ]
Line_24 $$ is = classLoader.getResourceAsStream(includeFileName)-->Line_26 $$ String include = StringUtil.read(is)[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_71 $$ _log.error(line)[ FD ]
Line_66 $$ String message = GetterUtil.getString(sqle.getMessage())-->Line_70 $$ if (message.startsWith("Duplicate entry") || message.startsWith("Specified key was too long")) [ FD ]
Line_26 $$ String include = StringUtil.read(is)-->Line_36 $$ runSQLTemplateString(include, false, true)[ FD ]
