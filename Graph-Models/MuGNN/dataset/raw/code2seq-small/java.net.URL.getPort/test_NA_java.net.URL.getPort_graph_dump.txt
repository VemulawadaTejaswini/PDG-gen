Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_66 $$ response = client.execute(new HttpTrace(uri1))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_66 $$ response = client.execute(new HttpTrace(uri1))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_30 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_12 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_38 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ Thread.sleep(DELAY)[ CD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_26 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_30 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_14 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_72 $$ response = client.execute(new HttpTrace(uri2))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_28 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_42 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_16 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_38 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_18 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_40 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_66 $$ response = client.execute(new HttpTrace(uri1))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_34 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_40 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_30 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_66 $$ response = client.execute(new HttpTrace(uri1))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_38 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_42 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ Thread.sleep(DELAY)[ CD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_24 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_26 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ URI uri2 = TraceServlet.createURI(new URL(baseURL2.getProtocol(), baseURL2.getHost(), baseURL2.getPort(), "/" + this.deploymentName + "/"))[ CD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_34 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_24 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_24 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_38 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_66 $$ response = client.execute(new HttpTrace(uri1))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_52 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_72 $$ response = client.execute(new HttpTrace(uri2))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_48 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ this.deploy(SINGLETON_DEPLOYMENT_1)[ CD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_32 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ URI uri2 = TraceServlet.createURI(new URL(baseURL2.getProtocol(), baseURL2.getHost(), baseURL2.getPort(), "/" + this.deploymentName + "/"))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_32 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_38 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_16 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_42 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_44 $$ response = client.execute(new HttpTrace(uri2))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_42 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_40 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_56 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_40 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ URI uri1 = TraceServlet.createURI(new URL(baseURL1.getProtocol(), baseURL1.getHost(), baseURL1.getPort(), "/" + this.deploymentName + "/"))[ CD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_18 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_32 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_9 $$ try (CloseableHttpClient client = TestHttpClientUtils.promiscuousCookieHttpClient()) -->Line_66 $$ response = client.execute(new HttpTrace(uri1))[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_28 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_76 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_70 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_74 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_44 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_54 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_32 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_68 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_34 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_58 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_28 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_46 $$ Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatusLine().getStatusCode())[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_62 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ this.deploy(SINGLETON_DEPLOYMENT_2)[ CD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_60 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_58 $$ response = client.execute(new HttpTrace(uri2))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_34 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_52 $$ response = client.execute(new HttpTrace(uri1))-->Line_72 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_20 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_2 $$ public void test(@ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_1) URL baseURL1, @ArquillianResource(TraceServlet.class) @OperateOnDeployment(DEPLOYMENT_2) URL baseURL2) throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ URI uri1 = TraceServlet.createURI(new URL(baseURL1.getProtocol(), baseURL1.getHost(), baseURL1.getPort(), "/" + this.deploymentName + "/"))[ FD ]
Line_24 $$ response = client.execute(new HttpTrace(uri1))-->Line_26 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_30 $$ response = client.execute(new HttpTrace(uri2))-->Line_42 $$ HttpClientUtils.closeQuietly(response)[ FD ]
Line_16 $$ response = client.execute(new HttpTrace(uri2))-->Line_30 $$ response = client.execute(new HttpTrace(uri2))[ FD ]
Line_38 $$ response = client.execute(new HttpTrace(uri1))-->Line_40 $$ Assert.assertEquals(HttpServletResponse.SC_METHOD_NOT_ALLOWED, response.getStatusLine().getStatusCode())[ FD ]
Line_10 $$ HttpResponse response = client.execute(new HttpTrace(uri1))-->Line_20 $$ HttpClientUtils.closeQuietly(response)[ FD ]
