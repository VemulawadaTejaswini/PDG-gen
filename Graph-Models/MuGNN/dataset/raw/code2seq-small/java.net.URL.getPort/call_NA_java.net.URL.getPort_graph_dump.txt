Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_19 $$ Assert.assertNotNull(kv0.getVersionName())[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_40 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_147 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_57 $$ eq = true-->Line_61 $$ Assert.assertTrue(eq)[ FD ]
Line_48 $$ boolean eq = true-->Line_59 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_156 $$ meta = kp.getMetadata("k5")[ FD ]
Line_49 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_58 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_146 $$ meta = kp.getMetadata("k4")[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_159 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_145 $$ kp.createKey("k4", options)[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_134 $$ kp.createKey("k3", options)[ FD ]
Line_156 $$ meta = kp.getMetadata("k5")-->Line_157 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_20 $$ Assert.assertNotNull(kv0.getMaterial())[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_146 $$ meta = kp.getMetadata("k4")[ FD ]
Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_156 $$ meta = kp.getMetadata("k5")[ FD ]
Line_104 $$ boolean isEq = true-->Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_100 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_155 $$ kp.createKey("k5", options)[ FD ]
Line_160 $$ Credentials credentials = new Credentials()-->Line_161 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_27 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_135 $$ meta = kp.getMetadata("k3")[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_148 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_101 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_102 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_49 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_125 $$ kp.createKey("k2", options)[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_146 $$ meta = kp.getMetadata("k4")[ FD ]
Line_160 $$ Credentials credentials = new Credentials()-->Line_162 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ FD ]
Line_48 $$ boolean eq = true-->Line_57 $$ eq = true[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_148 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_108 $$ Assert.assertFalse(isEq)[ FD ]
Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_57 $$ eq = true[ FD ]
Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_95 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_99 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_138 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_144 $$ options.setAttributes(attributes)[ FD ]
Line_49 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_99 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_103 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_156 $$ meta = kp.getMetadata("k5")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_137 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_138 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_104 $$ boolean isEq = true-->Line_108 $$ Assert.assertFalse(isEq)[ FD ]
Line_59 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i]-->Line_61 $$ Assert.assertTrue(eq)[ FD ]
Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_98 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_128 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_138 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_148 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_135 $$ meta = kp.getMetadata("k3")[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_136 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_146 $$ meta = kp.getMetadata("k4")-->Line_157 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_138 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_139 $$ attributes.put("a", "A")[ FD ]
Line_159 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)-->Line_161 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_147 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_97 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_99 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)-->Line_100 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_137 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_102 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_103 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_4 $$ Date started = new Date()-->Line_36 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_58 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_127 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_163 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())-->Line_164 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_59 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_146 $$ meta = kp.getMetadata("k4")-->Line_156 $$ meta = kp.getMetadata("k5")[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_18 $$ Assert.assertNotNull(kv0)[ FD ]
Line_138 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_154 $$ options.setAttributes(attributes)[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_92 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_102 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_105 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) -->Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ CD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_96 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_160 $$ Credentials credentials = new Credentials()-->Line_164 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_48 $$ boolean eq = true-->Line_61 $$ Assert.assertTrue(eq)[ FD ]
Line_104 $$ boolean isEq = true-->Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_52 $$ Assert.assertFalse(eq)[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_157 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_58 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_59 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_57 $$ eq = true-->Line_59 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_146 $$ meta = kp.getMetadata("k4")-->Line_148 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_61 $$ Assert.assertTrue(eq)[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_44 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_48 $$ boolean eq = true-->Line_52 $$ Assert.assertFalse(eq)[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_23 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_126 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_136 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_93 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_94 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ FD ]
Line_135 $$ meta = kp.getMetadata("k3")-->Line_157 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_17 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_7 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_156 $$ meta = kp.getMetadata("k5")[ FD ]
Line_48 $$ boolean eq = true-->Line_50 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_146 $$ meta = kp.getMetadata("k4")-->Line_147 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_4 $$ Date started = new Date()-->Line_89 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ FD ]
Line_4 $$ Date started = new Date()-->Line_76 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_103 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)-->Line_106 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_146 $$ meta = kp.getMetadata("k4")-->Line_158 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
