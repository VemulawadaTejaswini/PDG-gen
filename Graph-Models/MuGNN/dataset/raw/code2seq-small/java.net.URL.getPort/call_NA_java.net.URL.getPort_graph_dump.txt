Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_44 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_55 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_44 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_86 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_87 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_83 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_24 $$ Assert.assertEquals("AES/CTR/NoPadding", m1.getCipher())[ CD ]
Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_78 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_119 $$ options.setAttributes(attributes)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_22 $$ Assert.assertNotNull(cv1.getMaterial())[ CD ]
Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_82 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_131 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_88 $$ boolean isEq = true-->Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_42 $$ Assert.assertFalse(eq)[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ FD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_119 $$ options.setAttributes(attributes)[ FD ]
Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_53 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ FD ]
Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_123 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_69 $$ Assert.assertEquals("AES/CTR/NoPadding", kms1[0].getCipher())[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_97 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_120 $$ kp.createKey("k4", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_45 $$ Assert.assertNotNull(cv2.getMaterial())[ CD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_59 $$ Assert.assertEquals("AES", m2.getAlgorithm())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_99 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_83 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_12 $$ options.setDescription("l1")[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_102 $$ kp.createKey("k2", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_30 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")[ CD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_65 $$ Assert.assertEquals(1, ks1.size())[ CD ]
Line_86 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())-->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_115 $$ attributes.put("a", "A")[ FD ]
Line_43 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_44 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ FD ]
Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_63 $$ Assert.assertTrue(started.before(m2.getCreated()))[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_110 $$ kp.createKey("k3", options)[ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_116 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_130 $$ meta = kp.getMetadata("k5")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_111 $$ meta = kp.getMetadata("k3")[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_35 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_7 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_27 $$ Assert.assertEquals(1, m1.getVersions())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_66 $$ Assert.assertEquals("k1", ks1.get(0))[ CD ]
Line_83 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)-->Line_84 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_102 $$ kp.createKey("k2", options)[ CD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_109 $$ options.setDescription("d")[ FD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_60 $$ Assert.assertEquals(128, m2.getBitLength())[ FD ]
Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_119 $$ options.setAttributes(attributes)[ FD ]
Line_46 $$ eq = true-->Line_50 $$ Assert.assertTrue(eq)[ FD ]
Line_64 $$ List<String> ks1 = kp.getKeys()-->Line_65 $$ Assert.assertEquals(1, ks1.size())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_112 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_12 $$ options.setDescription("l1")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_43 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")[ CD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_62 $$ Assert.assertNotNull(m2.getCreated())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_74 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_107 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_15 $$ Assert.assertNotNull(kv0.getVersionName())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_84 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_11 $$ options.setBitLength(128)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_106 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_107 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_138 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)[ CD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_130 $$ meta = kp.getMetadata("k5")[ FD ]
Line_39 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_83 $$ KeyProvider.KeyVersion k1a = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_56 $$ Assert.assertNotNull(lkv2.get(1).getMaterial())[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")[ FD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_131 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_134 $$ Credentials credentials = new Credentials()-->Line_135 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_110 $$ kp.createKey("k3", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_134 $$ Credentials credentials = new Credentials()[ CD ]
Line_88 $$ boolean isEq = true-->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_20 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")[ CD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_102 $$ kp.createKey("k2", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_71 $$ Assert.assertEquals(128, kms1[0].getBitLength())[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_111 $$ meta = kp.getMetadata("k3")[ FD ]
Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_80 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_88 $$ boolean isEq = true-->Line_92 $$ Assert.assertFalse(isEq)[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_126 $$ options.setBitLength(128)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_78 $$ Assert.assertEquals(KeyProviderCryptoExtension.EEK, ek1.getEncryptedKeyVersion().getVersionName())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_59 $$ Assert.assertEquals("AES", m2.getAlgorithm())[ CD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_32 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_26 $$ Assert.assertEquals(128, m1.getBitLength())[ CD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_26 $$ Assert.assertEquals(128, m1.getBitLength())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_117 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_38 $$ boolean eq = true-->Line_42 $$ Assert.assertFalse(eq)[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_56 $$ Assert.assertNotNull(lkv2.get(1).getMaterial())[ CD ]
Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_86 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_79 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_101 $$ options.setBitLength(128)[ CD ]
Line_121 $$ meta = kp.getMetadata("k4")-->Line_122 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_112 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_110 $$ kp.createKey("k3", options)[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_67 $$ KeyProvider.Metadata[] kms1 = kp.getKeysMetadata("k1")[ FD ]
Line_20 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")-->Line_22 $$ Assert.assertNotNull(cv1.getMaterial())[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_16 $$ Assert.assertNotNull(kv0.getMaterial())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_50 $$ Assert.assertTrue(eq)[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_100 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_129 $$ kp.createKey("k5", options)[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_133 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)-->Line_135 $$ kpdte.addDelegationTokens("foo", credentials)[ FD ]
Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_62 $$ Assert.assertNotNull(m2.getCreated())[ CD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_113 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_120 $$ kp.createKey("k4", options)[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_116 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_117 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_93 $$ kp.deleteKey("k1")[ CD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_19 $$ Assert.assertNotNull(kv1.getMaterial())[ FD ]
Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_92 $$ Assert.assertFalse(isEq)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_97 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ CD ]
Line_121 $$ meta = kp.getMetadata("k4")-->Line_131 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_33 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_55 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_121 $$ meta = kp.getMetadata("k4")[ CD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_39 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_107 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_20 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")-->Line_21 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_21 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_79 $$ Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial())[ CD ]
Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_80 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_64 $$ List<String> ks1 = kp.getKeys()[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setDescription("d")[ FD ]
Line_38 $$ boolean eq = true-->Line_50 $$ Assert.assertTrue(eq)[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_130 $$ meta = kp.getMetadata("k5")[ FD ]
Line_3 $$ Date started = new Date()-->Line_74 $$ Assert.assertTrue(started.before(kms1[0].getCreated()))[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_120 $$ kp.createKey("k4", options)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_122 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_107 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_113 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_53 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ FD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_36 $$ Assert.assertNotNull(kv2.getMaterial())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_108 $$ options.setBitLength(128)[ CD ]
Line_64 $$ List<String> ks1 = kp.getKeys()-->Line_66 $$ Assert.assertEquals("k1", ks1.get(0))[ FD ]
Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_46 $$ eq = true[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_118 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_118 $$ options.setBitLength(128)[ CD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_109 $$ options.setDescription("d")[ FD ]
Line_87 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)-->Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_92 $$ Assert.assertFalse(isEq)[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_117 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_30 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")-->Line_31 $$ Assert.assertEquals(1, lkv1.size())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ CD ]
Line_2 $$ public Void call() throws Exception -->Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_102 $$ kp.createKey("k2", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_29 $$ Assert.assertTrue(started.before(m1.getCreated()))[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_93 $$ kp.deleteKey("k1")[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_116 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_135 $$ kpdte.addDelegationTokens("foo", credentials)[ CD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_121 $$ meta = kp.getMetadata("k4")[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_108 $$ options.setBitLength(128)[ FD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_63 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setDescription("d")[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_94 $$ Assert.assertNull(kp.getKeyVersion("k1"))[ FD ]
Line_30 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")-->Line_32 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_3 $$ Date started = new Date()[ CD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_35 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_38 $$ boolean eq = true-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_137 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())[ CD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_104 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_61 $$ Assert.assertEquals(2, m2.getVersions())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_82 $$ Assert.assertEquals(KeyProviderCryptoExtension.EK, k1.getVersionName())[ CD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_119 $$ options.setAttributes(attributes)[ FD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_33 $$ Assert.assertNotNull(kv1.getMaterial())[ FD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_61 $$ Assert.assertEquals(2, m2.getVersions())[ FD ]
Line_134 $$ Credentials credentials = new Credentials()-->Line_136 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_106 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_117 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_118 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_128 $$ options.setAttributes(attributes)[ CD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_120 $$ kp.createKey("k4", options)[ FD ]
Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_86 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_101 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_27 $$ Assert.assertEquals(1, m1.getVersions())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_38 $$ boolean eq = true[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_108 $$ options.setBitLength(128)[ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_109 $$ options.setDescription("d")[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_121 $$ meta = kp.getMetadata("k4")[ FD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_24 $$ Assert.assertEquals("AES/CTR/NoPadding", m1.getCipher())[ FD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_25 $$ Assert.assertEquals("AES", m1.getAlgorithm())[ FD ]
Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_2 $$ public Void call() throws Exception -->Line_115 $$ attributes.put("a", "A")[ CD ]
Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_52 $$ Assert.assertEquals(2, lkv2.size())[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_105 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_86 $$ EncryptedKeyVersion ek2 = kpExt.generateEncryptedKey(kv.getName())[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_43 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")[ FD ]
Line_47 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_38 $$ boolean eq = true-->Line_46 $$ eq = true[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_122 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_113 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ FD ]
Line_134 $$ Credentials credentials = new Credentials()-->Line_138 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_32 $$ Assert.assertEquals(kv0.getVersionName(), lkv1.get(0).getVersionName())[ CD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_133 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ CD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_121 $$ meta = kp.getMetadata("k4")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_105 $$ Assert.assertTrue(meta.getAttributes().isEmpty())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")[ CD ]
Line_130 $$ meta = kp.getMetadata("k5")-->Line_131 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i]-->Line_50 $$ Assert.assertTrue(eq)[ FD ]
Line_137 $$ InetSocketAddress kmsAddr = new InetSocketAddress(getKMSUrl().getHost(), getKMSUrl().getPort())-->Line_138 $$ Assert.assertEquals(new Text("kms-dt"), credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind())[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_14 $$ Assert.assertNotNull(kv0)[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_112 $$ Assert.assertEquals("d", meta.getDescription())[ FD ]
Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i]-->Line_50 $$ Assert.assertTrue(eq)[ FD ]
Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())[ FD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_123 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_43 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_28 $$ Assert.assertNotNull(m1.getCreated())[ CD ]
Line_39 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_120 $$ kp.createKey("k4", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_85 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_19 $$ Assert.assertNotNull(kv1.getMaterial())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_99 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ CD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_110 $$ kp.createKey("k3", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_5 $$ URI uri = createKMSUri(getKMSUrl())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_117 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_121 $$ meta = kp.getMetadata("k4")-->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_124 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_28 $$ Assert.assertNotNull(m1.getCreated())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_72 $$ Assert.assertEquals(2, kms1[0].getVersions())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_87 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ CD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_100 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_77 $$ EncryptedKeyVersion ek1 = kpExt.generateEncryptedKey(kv.getName())-->Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_54 $$ Assert.assertNotNull(lkv2.get(0).getMaterial())[ CD ]
Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_84 $$ Assert.assertArrayEquals(k1.getMaterial(), k1a.getMaterial())[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_101 $$ options.setBitLength(128)[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_10 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_98 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_95 $$ Assert.assertNull(kp.getKeyVersions("k1"))[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_123 $$ Assert.assertEquals(attributes, meta.getAttributes())[ CD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_52 $$ Assert.assertEquals(2, lkv2.size())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_10 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_67 $$ KeyProvider.Metadata[] kms1 = kp.getKeysMetadata("k1")[ CD ]
Line_37 $$ kv2 = kp.getKeyVersion(kv2.getVersionName())-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_2 $$ public Void call() throws Exception -->Line_88 $$ boolean isEq = true[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_16 $$ Assert.assertNotNull(kv0.getMaterial())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_118 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_36 $$ Assert.assertNotNull(kv2.getMaterial())[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_118 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_95 $$ Assert.assertNull(kp.getKeyVersions("k1"))[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_127 $$ options.setDescription("d")[ CD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_127 $$ options.setDescription("d")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_31 $$ Assert.assertEquals(1, lkv1.size())[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_106 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_30 $$ List<KeyProvider.KeyVersion> lkv1 = kp.getKeyVersions("k1")[ FD ]
Line_121 $$ meta = kp.getMetadata("k4")-->Line_130 $$ meta = kp.getMetadata("k5")[ FD ]
Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")-->Line_54 $$ Assert.assertNotNull(lkv2.get(0).getMaterial())[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_15 $$ Assert.assertNotNull(kv0.getVersionName())[ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_129 $$ kp.createKey("k5", options)[ FD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setDescription("d")[ FD ]
Line_130 $$ meta = kp.getMetadata("k5")-->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_109 $$ options.setDescription("d")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_46 $$ eq = true[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_21 $$ Assert.assertEquals(kv0.getVersionName(), cv1.getVersionName())[ CD ]
Line_46 $$ eq = true-->Line_48 $$ eq = eq && cv2.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")-->Line_29 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_81 $$ KeyProvider.KeyVersion k1 = kpExt.decryptEncryptedKey(ek1)-->Line_85 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_18 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_58 $$ Assert.assertEquals("AES/CTR/NoPadding", m2.getCipher())[ CD ]
Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i]-->Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) [ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_35 $$ Assert.assertNotSame(kv0.getVersionName(), kv2.getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_68 $$ Assert.assertEquals(1, kms1.length)[ CD ]
Line_34 $$ KeyProvider.KeyVersion kv2 = kp.rollNewVersion("k1")-->Line_55 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_20 $$ KeyProvider.KeyVersion cv1 = kp.getCurrentKey("k1")[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")[ FD ]
Line_3 $$ Date started = new Date()-->Line_63 $$ Assert.assertTrue(started.before(m2.getCreated()))[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_8 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_18 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ CD ]
Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())-->Line_18 $$ Assert.assertEquals(kv0.getVersionName(), kv1.getVersionName())[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_123 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_25 $$ Assert.assertEquals("AES", m1.getAlgorithm())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_70 $$ Assert.assertEquals("AES", kms1[0].getAlgorithm())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_8 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_100 $$ options.setCipher("AES/CTR/NoPadding")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_139 $$ return null[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_110 $$ kp.createKey("k3", options)[ FD ]
Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")-->Line_58 $$ Assert.assertEquals("AES/CTR/NoPadding", m2.getCipher())[ FD ]
Line_111 $$ meta = kp.getMetadata("k3")-->Line_122 $$ Assert.assertNull(meta.getDescription())[ FD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_125 $$ options.setCipher("AES/CTR/NoPadding")[ FD ]
Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)-->Line_17 $$ KeyProvider.KeyVersion kv1 = kp.getKeyVersion(kv0.getVersionName())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_39 $$ for (int i = 0; i < kv1.getMaterial().length; i++) [ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_119 $$ options.setAttributes(attributes)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_104 $$ Assert.assertNull(meta.getDescription())[ CD ]
Line_3 $$ Date started = new Date()-->Line_29 $$ Assert.assertTrue(started.before(m1.getCreated()))[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_133 $$ KeyProviderDelegationTokenExtension kpdte = KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_11 $$ options.setBitLength(128)[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_57 $$ KeyProvider.Metadata m2 = kp.getMetadata("k1")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_13 $$ KeyProvider.KeyVersion kv0 = kp.createKey("k1", options)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_55 $$ Assert.assertEquals(kv2.getVersionName(), lkv2.get(1).getVersionName())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_98 $$ Assert.assertEquals(0, kp.getKeysMetadata().length)[ CD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_130 $$ meta = kp.getMetadata("k5")[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_96 $$ Assert.assertNull(kp.getMetadata("k1"))[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_64 $$ List<String> ks1 = kp.getKeys()[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_96 $$ Assert.assertNull(kp.getMetadata("k1"))[ CD ]
Line_9 $$ KeyProvider.Options options = new KeyProvider.Options(conf)-->Line_120 $$ kp.createKey("k4", options)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_94 $$ Assert.assertNull(kp.getKeyVersion("k1"))[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_126 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_53 $$ Assert.assertEquals(kv1.getVersionName(), lkv2.get(0).getVersionName())[ CD ]
Line_99 $$ options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_73 $$ Assert.assertNotNull(kms1[0].getCreated())[ CD ]
Line_121 $$ meta = kp.getMetadata("k4")-->Line_123 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_132 $$ Assert.assertEquals(attributes, meta.getAttributes())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_23 $$ KeyProvider.Metadata m1 = kp.getMetadata("k1")[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_60 $$ Assert.assertEquals(128, m2.getBitLength())[ CD ]
Line_38 $$ boolean eq = true-->Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ FD ]
Line_75 $$ KeyProvider.KeyVersion kv = kp.getCurrentKey("k1")-->Line_85 $$ Assert.assertEquals(kv.getMaterial().length, k1.getMaterial().length)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_131 $$ Assert.assertEquals("d", meta.getDescription())[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_44 $$ Assert.assertEquals(kv2.getVersionName(), cv2.getVersionName())[ CD ]
Line_76 $$ KeyProviderCryptoExtension kpExt = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp)-->Line_87 $$ KeyProvider.KeyVersion k2 = kpExt.decryptEncryptedKey(ek2)[ FD ]
Line_103 $$ KeyProvider.Metadata meta = kp.getMetadata("k2")-->Line_111 $$ meta = kp.getMetadata("k3")[ FD ]
Line_39 $$ for (int i = 0; i < kv1.getMaterial().length; i++) -->Line_40 $$ eq = eq && kv1.getMaterial()[i] == kv2.getMaterial()[i][ CD ]
Line_43 $$ KeyProvider.KeyVersion cv2 = kp.getCurrentKey("k1")-->Line_45 $$ Assert.assertNotNull(cv2.getMaterial())[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_119 $$ options.setAttributes(attributes)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_7 $$ Assert.assertTrue(kp.getKeys().isEmpty())[ CD ]
Line_116 $$ options = new KeyProvider.Options(conf)-->Line_124 $$ options = new KeyProvider.Options(conf)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_80 $$ Assert.assertEquals(kv.getMaterial().length, ek1.getEncryptedKeyVersion().getMaterial().length)[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_14 $$ Assert.assertNotNull(kv0)[ CD ]
Line_106 $$ options = new KeyProvider.Options(conf)-->Line_108 $$ options.setBitLength(128)[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_136 $$ Assert.assertEquals(1, credentials.getAllTokens().size())[ CD ]
Line_124 $$ options = new KeyProvider.Options(conf)-->Line_127 $$ options.setDescription("d")[ FD ]
Line_2 $$ public Void call() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public Void call() throws Exception -->Line_42 $$ Assert.assertFalse(eq)[ CD ]
Line_89 $$ for (int i = 0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) -->Line_90 $$ isEq = k2.getMaterial()[i] == k1.getMaterial()[i][ CD ]
Line_2 $$ public Void call() throws Exception -->Line_116 $$ options = new KeyProvider.Options(conf)[ CD ]
Line_114 $$ Map<String, String> attributes = new HashMap<String, String>()-->Line_128 $$ options.setAttributes(attributes)[ FD ]
Line_6 $$ KeyProvider kp = new KMSClientProvider(uri, conf)-->Line_51 $$ List<KeyProvider.KeyVersion> lkv2 = kp.getKeyVersions("k1")[ FD ]
