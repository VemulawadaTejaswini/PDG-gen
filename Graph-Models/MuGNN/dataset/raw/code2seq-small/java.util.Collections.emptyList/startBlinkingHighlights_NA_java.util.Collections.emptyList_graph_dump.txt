Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) -->Line_43 $$ HighlightData highlightData = highlights.get(i)[ CD ]
Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) -->Line_44 $$ int startOffset = highlightData.getStartOffset()[ CD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_29 $$ highlights.add(highlightData)[ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) [ CD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_30 $$ matchingHighlights.add(highlightData)[ FD ]
Line_20 $$ if (!found && highlighter != null) -->Line_22 $$ do [ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_13 $$ if (show && type.equals(attrKey)) [ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_5 $$ editor.getMarkupModel().removeAllHighlighters()[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_24 $$ TextAttributesKey[] tokenHighlights = highlighter.getTokenHighlights(tokenType)[ FD ]
Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)-->Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_15 $$ highlights.add(highlightData)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_12 $$ highlights.add(highlightData)[ FD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) [ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_37 $$ Collections.sort(highlights, new Comparator<HighlightData>() [ CD ]
Line_11 $$ String type = highlightData.getHighlightType()-->Line_27 $$ if (show && type != null && type.equals(attrKey)) [ FD ]
Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) -->Line_45 $$ HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1)[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_20 $$ if (!found && highlighter != null) [ CD ]
Line_43 $$ HighlightData highlightData = highlights.get(i)-->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_29 $$ highlights.add(highlightData)[ FD ]
Line_43 $$ HighlightData highlightData = highlights.get(i)-->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_11 $$ String type = highlightData.getHighlightType()-->Line_13 $$ if (show && type.equals(attrKey)) [ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_6 $$ boolean found = false[ CD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_43 $$ HighlightData highlightData = highlights.get(i)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_52 $$ alarm.cancelAllRequests()[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_8 $$ List<HighlightData> matchingHighlights = new ArrayList<HighlightData>()[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_55 $$ startBlinkingHighlights(editor, highlightDatum, attrKey, highlighter, !show, alarm, count - 1, page)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)[ FD ]
Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) -->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ CD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_16 $$ matchingHighlights.add(highlightData)[ FD ]
Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)-->Line_22 $$ do [ FD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_12 $$ highlights.add(highlightData)[ FD ]
Line_3 $$ if (show && count <= 0)-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_3 $$ if (show && count <= 0)[ FD ]
Line_22 $$ do -->Line_24 $$ TextAttributesKey[] tokenHighlights = highlighter.getTokenHighlights(tokenType)[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_53 $$ alarm.addComponentRequest(new Runnable() [ CD ]
Line_13 $$ if (show && type.equals(attrKey)) -->Line_17 $$ found = true[ CD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) [ FD ]
Line_43 $$ HighlightData highlightData = highlights.get(i)-->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_11 $$ String type = highlightData.getHighlightType()[ FD ]
Line_27 $$ if (show && type != null && type.equals(attrKey)) -->Line_29 $$ highlights.add(highlightData)[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_3 $$ if (show && count <= 0)[ CD ]
Line_53 $$ alarm.addComponentRequest(new Runnable() -->Line_55 $$ startBlinkingHighlights(editor, highlightDatum, attrKey, highlighter, !show, alarm, count - 1, page)[ CD ]
Line_8 $$ List<HighlightData> matchingHighlights = new ArrayList<HighlightData>()-->Line_30 $$ matchingHighlights.add(highlightData)[ FD ]
Line_25 $$ for (final TextAttributesKey tokenHighlight : tokenHighlights) -->Line_26 $$ String type = tokenHighlight.getExternalName()[ FD ]
Line_23 $$ IElementType tokenType = iterator.getTokenType()-->Line_24 $$ TextAttributesKey[] tokenHighlights = highlighter.getTokenHighlights(tokenType)[ FD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_12 $$ highlights.add(highlightData)[ CD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_29 $$ highlights.add(highlightData)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_52 $$ alarm.cancelAllRequests()[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_58 $$ return matchingHighlights[ CD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_36 $$ final Map<TextAttributesKey, String> displayText = ColorSettingsUtil.keyToDisplayTextMap(page)[ CD ]
Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)-->Line_33 $$ iterator.advance()[ FD ]
Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) -->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ CD ]
Line_45 $$ HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1)-->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ FD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_45 $$ HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1)[ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_44 $$ int startOffset = highlightData.getStartOffset()[ FD ]
Line_27 $$ if (show && type != null && type.equals(attrKey)) -->Line_30 $$ matchingHighlights.add(highlightData)[ CD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_29 $$ highlights.add(highlightData)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_30 $$ matchingHighlights.add(highlightData)[ FD ]
Line_43 $$ HighlightData highlightData = highlights.get(i)-->Line_44 $$ int startOffset = highlightData.getStartOffset()[ FD ]
Line_22 $$ do -->Line_33 $$ iterator.advance()[ CD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_11 $$ String type = highlightData.getHighlightType()[ CD ]
Line_6 $$ boolean found = false-->Line_20 $$ if (!found && highlighter != null) [ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ FD ]
Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)-->Line_23 $$ IElementType tokenType = iterator.getTokenType()[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_5 $$ editor.getMarkupModel().removeAllHighlighters()[ FD ]
Line_13 $$ if (show && type.equals(attrKey)) -->Line_15 $$ highlights.add(highlightData)[ CD ]
Line_37 $$ Collections.sort(highlights, new Comparator<HighlightData>() -->Line_39 $$ return highlightData1.getStartOffset() - highlightData2.getStartOffset()[ CD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_16 $$ matchingHighlights.add(highlightData)[ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_44 $$ int startOffset = highlightData.getStartOffset()[ FD ]
Line_27 $$ if (show && type != null && type.equals(attrKey)) -->Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)[ CD ]
Line_17 $$ found = true-->Line_20 $$ if (!found && highlighter != null) [ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_36 $$ final Map<TextAttributesKey, String> displayText = ColorSettingsUtil.keyToDisplayTextMap(page)[ FD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_15 $$ highlights.add(highlightData)[ FD ]
Line_13 $$ if (show && type.equals(attrKey)) -->Line_16 $$ matchingHighlights.add(highlightData)[ CD ]
Line_22 $$ do -->Line_23 $$ IElementType tokenType = iterator.getTokenType()[ CD ]
Line_6 $$ boolean found = false-->Line_17 $$ found = true[ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_47 $$ prevHighlightData.setEndOffset(highlightData.getEndOffset())[ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_11 $$ String type = highlightData.getHighlightType()[ FD ]
Line_36 $$ final Map<TextAttributesKey, String> displayText = ColorSettingsUtil.keyToDisplayTextMap(page)-->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_27 $$ if (show && type != null && type.equals(attrKey)) [ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_44 $$ int startOffset = highlightData.getStartOffset()[ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ FD ]
Line_13 $$ if (show && type.equals(attrKey)) -->Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)[ CD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_13 $$ if (show && type.equals(attrKey)) [ CD ]
Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) -->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ CD ]
Line_45 $$ HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1)-->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ FD ]
Line_9 $$ for (int i = 0; highlightDatum != null && i < highlightDatum.length; i++) -->Line_10 $$ HighlightData highlightData = highlightDatum[i][ CD ]
Line_37 $$ Collections.sort(highlights, new Comparator<HighlightData>() -->Line_39 $$ return highlightData1.getStartOffset() - highlightData2.getStartOffset()[ FD ]
Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) -->Line_43 $$ HighlightData highlightData = highlights.get(i)[ FD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_43 $$ HighlightData highlightData = highlights.get(i)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_53 $$ alarm.addComponentRequest(new Runnable() [ FD ]
Line_8 $$ List<HighlightData> matchingHighlights = new ArrayList<HighlightData>()-->Line_16 $$ matchingHighlights.add(highlightData)[ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_12 $$ highlights.add(highlightData)[ FD ]
Line_7 $$ List<HighlightData> highlights = new ArrayList<HighlightData>()-->Line_37 $$ Collections.sort(highlights, new Comparator<HighlightData>() [ FD ]
Line_20 $$ if (!found && highlighter != null) -->Line_21 $$ HighlighterIterator iterator = editor.getHighlighter().createIterator(0)[ CD ]
Line_26 $$ String type = tokenHighlight.getExternalName()-->Line_27 $$ if (show && type != null && type.equals(attrKey)) [ FD ]
Line_14 $$ highlightData = new HighlightData(highlightData.getStartOffset(), highlightData.getEndOffset(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_15 $$ highlights.add(highlightData)[ FD ]
Line_2 $$ private List<HighlightData> startBlinkingHighlights(final EditorEx editor, final HighlightData[] highlightDatum, final String attrKey, final SyntaxHighlighter highlighter, final boolean show, final Alarm alarm, final int count, final ColorSettingsPage page) -->Line_42 $$ for (int i = highlights.size() - 1; i >= 0; i--) [ CD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_46 $$ if (prevHighlightData != null && startOffset <= prevHighlightData.getEndOffset() && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) [ FD ]
Line_10 $$ HighlightData highlightData = highlightDatum[i]-->Line_49 $$ highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText)[ FD ]
Line_28 $$ HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), CodeInsightColors.BLINKING_HIGHLIGHTS_ATTRIBUTES)-->Line_30 $$ matchingHighlights.add(highlightData)[ FD ]
