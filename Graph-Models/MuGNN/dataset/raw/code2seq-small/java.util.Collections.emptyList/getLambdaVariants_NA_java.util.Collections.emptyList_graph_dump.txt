Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()-->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ FD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ FD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_67 $$ if (params.length == 1 && PsiType.INT.equals(params[0].getType())) -->Line_68 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))[ FD ]
Line_8 $$ if (LambdaUtil.isFunctionalType(defaultType)) -->Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ CD ]
Line_8 $$ if (LambdaUtil.isFunctionalType(defaultType)) -->Line_11 $$ if (functionalInterfaceMethod != null) [ CD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> [ CD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_47 $$ result.add(lambdaElement)[ FD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_61 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_20 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ FD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()[ FD ]
Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_14 $$ final PsiElement originalPosition = parameters.getPosition()[ FD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> [ FD ]
Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() -->Line_28 $$ return getParamName(parameter, javaCodeStyleManager, originalPosition)[ FD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_49 $$ final PsiType expectedReturnType = substitutor.substitute(functionalInterfaceMethod.getReturnType())[ CD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_13 $$ PsiParameter[] params = new PsiParameter[0][ CD ]
Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> -->Line_39 $$ final Editor editor = context.getEditor()[ CD ]
Line_51 $$ if (params.length > 0) -->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ CD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_68 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()[ CD ]
Line_56 $$ if (psiClass != null && !(psiClass instanceof PsiTypeParameter)) -->Line_57 $$ if (expectedReturnType.getArrayDimensions() == 0) [ CD ]
Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_3 $$ if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()) || !isLambdaContext(parameters.getPosition()))[ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_11 $$ if (functionalInterfaceMethod != null) [ FD ]
Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_57 $$ if (expectedReturnType.getArrayDimensions() == 0) -->Line_67 $$ if (params.length == 1 && PsiType.INT.equals(params[0].getType())) [ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) [ FD ]
Line_57 $$ if (expectedReturnType.getArrayDimensions() == 0) -->Line_64 $$ if (constructors.length == 0 && params.length == 0) [ CD ]
Line_6 $$ for (ExpectedTypeInfo expectedType : JavaSmartCompletionContributor.getExpectedTypes(parameters)) -->Line_7 $$ final PsiType defaultType = expectedType.getDefaultType()[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_21 $$ if (jvmElementFactory != null) [ CD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_19 $$ final JVMElementFactory jvmElementFactory = JVMElementFactories.getFactory(originalPosition.getLanguage(), project)[ CD ]
Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_50 $$ if (expectedReturnType != null) -->Line_56 $$ if (psiClass != null && !(psiClass instanceof PsiTypeParameter)) [ CD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_20 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_60 $$ if (areParameterTypesAppropriate(psiMethod, params, substitutor, 0)) [ FD ]
Line_50 $$ if (expectedReturnType != null) -->Line_51 $$ if (params.length > 0) [ CD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_19 $$ final JVMElementFactory jvmElementFactory = JVMElementFactories.getFactory(originalPosition.getLanguage(), project)[ FD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_6 $$ for (ExpectedTypeInfo expectedType : JavaSmartCompletionContributor.getExpectedTypes(parameters)) [ FD ]
Line_50 $$ if (expectedReturnType != null) -->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_18 $$ final Project project = functionalInterfaceMethod.getProject()[ FD ]
Line_8 $$ if (LambdaUtil.isFunctionalType(defaultType)) -->Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)[ CD ]
Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> -->Line_39 $$ final Editor editor = context.getEditor()[ FD ]
Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)-->Line_60 $$ if (areParameterTypesAppropriate(psiMethod, params, substitutor, 0)) [ FD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_14 $$ final PsiElement originalPosition = parameters.getPosition()[ CD ]
Line_64 $$ if (constructors.length == 0 && params.length == 0) -->Line_65 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ CD ]
Line_20 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_28 $$ return getParamName(parameter, javaCodeStyleManager, originalPosition)[ FD ]
Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()-->Line_60 $$ if (areParameterTypesAppropriate(psiMethod, params, substitutor, 0)) [ FD ]
Line_50 $$ if (expectedReturnType != null) -->Line_55 $$ final PsiClass psiClass = PsiUtil.resolveClassInType(expectedReturnType)[ CD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_75 $$ return result[ CD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() -->Line_28 $$ return getParamName(parameter, javaCodeStyleManager, originalPosition)[ CD ]
Line_20 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> -->Line_40 $$ EditorModificationUtil.insertStringAtCaret(editor, " -> ")[ CD ]
Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)-->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ FD ]
Line_18 $$ final Project project = functionalInterfaceMethod.getProject()-->Line_31 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_44 $$ if (prioritize) [ CD ]
Line_18 $$ final Project project = functionalInterfaceMethod.getProject()-->Line_32 $$ PsiLambdaExpression lambdaExpression = (PsiLambdaExpression) JavaPsiFacade.getElementFactory(project).createExpressionFromText(paramsString + " -> [ FD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()[ FD ]
Line_19 $$ final JVMElementFactory jvmElementFactory = JVMElementFactories.getFactory(originalPosition.getLanguage(), project)-->Line_21 $$ if (jvmElementFactory != null) [ FD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_3 $$ if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()) || !isLambdaContext(parameters.getPosition()))[ FD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_65 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_68 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_7 $$ final PsiType defaultType = expectedType.getDefaultType()-->Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)[ FD ]
Line_3 $$ if (!PsiUtil.isLanguageLevel8OrHigher(parameters.getOriginalFile()) || !isLambdaContext(parameters.getPosition()))-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ CD ]
Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_47 $$ result.add(lambdaElement)[ CD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_65 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_13 $$ PsiParameter[] params = new PsiParameter[0]-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_34 $$ paramsString = lambdaExpression.getParameterList().getText()[ CD ]
Line_44 $$ if (prioritize) -->Line_45 $$ lambdaElement = PrioritizedLookupElement.withPriority(lambdaElement, 1)[ CD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_54 $$ collectThisVariants(functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_57 $$ if (expectedReturnType.getArrayDimensions() == 0) -->Line_58 $$ final PsiMethod[] constructors = psiClass.getConstructors()[ CD ]
Line_18 $$ final Project project = functionalInterfaceMethod.getProject()-->Line_20 $$ final JavaCodeStyleManager javaCodeStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()-->Line_52 $$ collectVariantsByReceiver(prioritize, functionalInterfaceType, params, originalPosition, substitutor, expectedReturnType, result)[ FD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_61 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ FD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_43 $$ LookupElement lambdaElement = builder.withAutoCompletionPolicy(AutoCompletionPolicy.NEVER_AUTOCOMPLETE)[ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> [ FD ]
Line_60 $$ if (areParameterTypesAppropriate(psiMethod, params, substitutor, 0)) -->Line_61 $$ result.add(createConstructorReferenceLookup(functionalInterfaceType, expectedReturnType))[ CD ]
Line_9 $$ final PsiType functionalInterfaceType = FunctionalInterfaceParameterizationUtil.getGroundTargetType(defaultType)-->Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))[ FD ]
Line_39 $$ final Editor editor = context.getEditor()-->Line_40 $$ EditorModificationUtil.insertStringAtCaret(editor, " -> ")[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_31 $$ final CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_10 $$ final PsiMethod functionalInterfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType)-->Line_49 $$ final PsiType expectedReturnType = substitutor.substitute(functionalInterfaceMethod.getReturnType())[ FD ]
Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() -->Line_35 $$ final LookupElementBuilder builder = LookupElementBuilder.create(functionalInterfaceMethod, paramsString).withPresentableText(paramsString + " -> [ FD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_50 $$ if (expectedReturnType != null) [ CD ]
Line_19 $$ final JVMElementFactory jvmElementFactory = JVMElementFactories.getFactory(originalPosition.getLanguage(), project)-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_18 $$ final Project project = functionalInterfaceMethod.getProject()-->Line_19 $$ final JVMElementFactory jvmElementFactory = JVMElementFactories.getFactory(originalPosition.getLanguage(), project)[ FD ]
Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) -->Line_18 $$ final Project project = functionalInterfaceMethod.getProject()[ CD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_28 $$ return getParamName(parameter, javaCodeStyleManager, originalPosition)[ FD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_16 $$ if (!functionalInterfaceMethod.hasTypeParameters()) [ CD ]
Line_17 $$ params = functionalInterfaceMethod.getParameterList().getParameters()-->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ FD ]
Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))-->Line_60 $$ if (areParameterTypesAppropriate(psiMethod, params, substitutor, 0)) [ FD ]
Line_14 $$ final PsiElement originalPosition = parameters.getPosition()-->Line_24 $$ String paramsString = params.length == 1 ? getParamName(params[0], javaCodeStyleManager, originalPosition) : "(" + StringUtil.join(params, new Function<PsiParameter, String>() [ FD ]
Line_11 $$ if (functionalInterfaceMethod != null) -->Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))[ CD ]
Line_2 $$ static List<LookupElement> getLambdaVariants(@NotNull CompletionParameters parameters, boolean prioritize) -->Line_5 $$ List<LookupElement> result = ContainerUtil.newArrayList()[ CD ]
Line_21 $$ if (jvmElementFactory != null) -->Line_22 $$ params = GenerateMembersUtil.overriddenParameters(params, jvmElementFactory, javaCodeStyleManager, substitutor, originalPosition)[ CD ]
Line_15 $$ final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(functionalInterfaceMethod, PsiUtil.resolveGenericsClassInType(functionalInterfaceType))-->Line_49 $$ final PsiType expectedReturnType = substitutor.substitute(functionalInterfaceMethod.getReturnType())[ FD ]
Line_7 $$ final PsiType defaultType = expectedType.getDefaultType()-->Line_8 $$ if (LambdaUtil.isFunctionalType(defaultType)) [ FD ]
