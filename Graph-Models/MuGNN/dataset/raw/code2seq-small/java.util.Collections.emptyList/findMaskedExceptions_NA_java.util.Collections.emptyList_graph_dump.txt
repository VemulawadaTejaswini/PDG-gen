Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_11 $$ if (!ExceptionUtils.isGenericExceptionClass(caughtType)) [ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_8 $$ thrownTypes.remove(caughtType)[ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_10 $$ if (onlyWarnOnRootExceptions) [ CD ]
Line_16 $$ for (PsiType typeThrown : thrownTypes) -->Line_17 $$ if (!caughtTypes.contains(typeThrown) && caughtType.isAssignableFrom(typeThrown)) [ FD ]
Line_3 $$ if (thrownTypes.contains(caughtType)) -->Line_8 $$ thrownTypes.remove(caughtType)[ CD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_3 $$ if (thrownTypes.contains(caughtType)) [ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_3 $$ if (thrownTypes.contains(caughtType)) [ CD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_18 $$ caughtTypes.add(typeThrown)[ FD ]
Line_11 $$ if (!ExceptionUtils.isGenericExceptionClass(caughtType)) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_15 $$ final List<PsiType> maskedTypes = new ArrayList<PsiType>()-->Line_19 $$ maskedTypes.add(typeThrown)[ FD ]
Line_17 $$ if (!caughtTypes.contains(typeThrown) && caughtType.isAssignableFrom(typeThrown)) -->Line_18 $$ caughtTypes.add(typeThrown)[ CD ]
Line_16 $$ for (PsiType typeThrown : thrownTypes) -->Line_19 $$ maskedTypes.add(typeThrown)[ FD ]
Line_17 $$ if (!caughtTypes.contains(typeThrown) && caughtType.isAssignableFrom(typeThrown)) -->Line_19 $$ maskedTypes.add(typeThrown)[ CD ]
Line_4 $$ if (ignoreThrown) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_17 $$ if (!caughtTypes.contains(typeThrown) && caughtType.isAssignableFrom(typeThrown)) [ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_7 $$ caughtTypes.add(caughtType)[ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_15 $$ final List<PsiType> maskedTypes = new ArrayList<PsiType>()[ CD ]
Line_16 $$ for (PsiType typeThrown : thrownTypes) -->Line_18 $$ caughtTypes.add(typeThrown)[ FD ]
Line_2 $$ private List<PsiType> findMaskedExceptions(Set<PsiType> thrownTypes, PsiType caughtType, Set<PsiType> caughtTypes) -->Line_22 $$ return maskedTypes[ CD ]
Line_10 $$ if (onlyWarnOnRootExceptions) -->Line_11 $$ if (!ExceptionUtils.isGenericExceptionClass(caughtType)) [ CD ]
Line_3 $$ if (thrownTypes.contains(caughtType)) -->Line_7 $$ caughtTypes.add(caughtType)[ CD ]
Line_3 $$ if (thrownTypes.contains(caughtType)) -->Line_4 $$ if (ignoreThrown) [ CD ]
