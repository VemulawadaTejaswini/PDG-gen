Line_6 $$ final ModelNode result = servicesA.executeOperation(operation)-->Line_7 $$ Assert.assertEquals(ModelDescriptionConstants.SUCCESS, result.get(ModelDescriptionConstants.OUTCOME).asString())[ FD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_6 $$ final ModelNode result = servicesA.executeOperation(operation)[ CD ]
Line_3 $$ List<ModelNode> empty = Collections.emptyList()-->Line_4 $$ KernelServices servicesA = createKernelServicesBuilder(null).setBootOperations(empty).build()[ FD ]
Line_4 $$ KernelServices servicesA = createKernelServicesBuilder(null).setBootOperations(empty).build()-->Line_8 $$ servicesA.shutdown()[ FD ]
Line_4 $$ KernelServices servicesA = createKernelServicesBuilder(null).setBootOperations(empty).build()-->Line_6 $$ final ModelNode result = servicesA.executeOperation(operation)[ FD ]
Line_5 $$ final ModelNode operation = createReadResourceDescriptionOperation()-->Line_6 $$ final ModelNode result = servicesA.executeOperation(operation)[ FD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_3 $$ List<ModelNode> empty = Collections.emptyList()[ CD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_4 $$ KernelServices servicesA = createKernelServicesBuilder(null).setBootOperations(empty).build()[ CD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_5 $$ final ModelNode operation = createReadResourceDescriptionOperation()[ CD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_8 $$ servicesA.shutdown()[ CD ]
Line_2 $$ public void testSubsystemDescriptions() throws Exception -->Line_7 $$ Assert.assertEquals(ModelDescriptionConstants.SUCCESS, result.get(ModelDescriptionConstants.OUTCOME).asString())[ CD ]
