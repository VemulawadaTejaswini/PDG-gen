Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_7 $$ return select(sstableSet, intervalTree.search(Interval.create(left, stopInTree)))[ CD ]
Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_4 $$ if (intervalTree.isEmpty())[ CD ]
Line_4 $$ if (intervalTree.isEmpty())-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_7 $$ return select(sstableSet, intervalTree.search(Interval.create(left, stopInTree)))[ FD ]
Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_3 $$ assert !AbstractBounds.strictlyWrapsAround(left, right)[ FD ]
Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_6 $$ PartitionPosition stopInTree = right.isMinimum() ? intervalTree.max() : right[ FD ]
Line_2 $$ public Iterable<SSTableReader> sstablesInBounds(SSTableSet sstableSet, PartitionPosition left, PartitionPosition right) -->Line_6 $$ PartitionPosition stopInTree = right.isMinimum() ? intervalTree.max() : right[ CD ]
Line_6 $$ PartitionPosition stopInTree = right.isMinimum() ? intervalTree.max() : right-->Line_7 $$ return select(sstableSet, intervalTree.search(Interval.create(left, stopInTree)))[ FD ]
