Line_7 $$ final File wasIgnored = new File(ignored.getPath())-->Line_23 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)[ FD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_23 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_20 $$ Assert.assertTrue(!wasIgnored.exists())[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_5 $$ disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD)[ CD ]
Line_7 $$ final File wasIgnored = new File(ignored.getPath())-->Line_25 $$ Assert.assertTrue(wasIgnored.exists())[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_12 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_19 $$ final Change s2Change = assertMovedChange(tree.myS2File)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_7 $$ final File wasIgnored = new File(ignored.getPath())[ CD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_21 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_23 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_13 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_9 $$ groupInfo.onFileEnabled(ignored)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_22 $$ rollbackIMpl(Collections.singletonList(dirChange), Collections.<Change>emptyList())[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_16 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_13 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_15 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_18 $$ final Change s1Change = assertMovedChange(tree.myS1File)[ CD ]
Line_23 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)-->Line_24 $$ Assert.assertTrue(FileStatus.UNKNOWN.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_8 $$ final FileGroupInfo groupInfo = new FileGroupInfo()-->Line_10 $$ SvnPropertyService.doAddToIgnoreProperty(myVcs, myProject, false, new VirtualFile[] [ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_21 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ CD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_24 $$ Assert.assertTrue(FileStatus.UNKNOWN.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_9 $$ groupInfo.onFileEnabled(ignored)[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_17 $$ final Change dirChange = assertRenamedChange(tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_25 $$ Assert.assertTrue(wasIgnored.exists())[ CD ]
Line_7 $$ final File wasIgnored = new File(ignored.getPath())-->Line_20 $$ Assert.assertTrue(!wasIgnored.exists())[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_11 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_6 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_7 $$ final File wasIgnored = new File(ignored.getPath())[ FD ]
Line_17 $$ final Change dirChange = assertRenamedChange(tree.mySourceDir)-->Line_22 $$ rollbackIMpl(Collections.singletonList(dirChange), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_10 $$ SvnPropertyService.doAddToIgnoreProperty(myVcs, myProject, false, new VirtualFile[] [ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_24 $$ Assert.assertTrue(FileStatus.UNKNOWN.equals(myChangeListManager.getStatus(ignored)))[ CD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_8 $$ final FileGroupInfo groupInfo = new FileGroupInfo()[ CD ]
Line_8 $$ final FileGroupInfo groupInfo = new FileGroupInfo()-->Line_9 $$ groupInfo.onFileEnabled(ignored)[ FD ]
Line_2 $$ public void testRollbackDirWithIgnored() throws Exception -->Line_14 $$ VcsTestUtil.renameFileInCommand(myProject, tree.mySourceDir, "renamed")[ CD ]
