Line_7 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_14 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_7 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_8 $$ final File wasIgnored = new File(ignored.getPath())[ FD ]
Line_8 $$ final File wasIgnored = new File(ignored.getPath())-->Line_27 $$ Assert.assertTrue(wasIgnored.exists())[ FD ]
Line_7 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_10 $$ groupInfo.onFileEnabled(ignored)[ FD ]
Line_9 $$ final FileGroupInfo groupInfo = new FileGroupInfo()-->Line_11 $$ SvnPropertyService.doAddToIgnoreProperty(myVcs, myProject, false, new VirtualFile[] [ FD ]
Line_7 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_22 $$ Assert.assertTrue(FileStatus.IGNORED.equals(myChangeListManager.getStatus(ignored)))[ FD ]
Line_9 $$ final FileGroupInfo groupInfo = new FileGroupInfo()-->Line_10 $$ groupInfo.onFileEnabled(ignored)[ FD ]
Line_7 $$ VirtualFile ignored = createFileInCommand(tree.mySourceDir, "ign.txt", "ignored")-->Line_24 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)[ FD ]
Line_18 $$ final Change dirChange = assertRenamedChange(tree.mySourceDir)-->Line_23 $$ rollbackIMpl(Collections.singletonList(dirChange), Collections.<Change>emptyList())[ FD ]
Line_8 $$ final File wasIgnored = new File(ignored.getPath())-->Line_21 $$ Assert.assertTrue(!wasIgnored.exists())[ FD ]
Line_8 $$ final File wasIgnored = new File(ignored.getPath())-->Line_24 $$ ignored = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wasIgnored)[ FD ]
