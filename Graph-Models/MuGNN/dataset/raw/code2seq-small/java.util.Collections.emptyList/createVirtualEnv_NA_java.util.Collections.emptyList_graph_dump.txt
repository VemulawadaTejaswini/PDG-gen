Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_6 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, "create", "-p", destinationDir, "python=" + version, "-y")[ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_21 $$ return (binary != null) ? binary : binaryFallback[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_19 $$ final String binary = PythonSdkType.getPythonExecutable(destinationDir)[ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_9 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_4 $$ if (condaExecutable == null)[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_6 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, "create", "-p", destinationDir, "python=" + version, "-y")[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_15 $$ if (exitCode != 0) [ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_8 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(commandLine)[ CD ]
Line_3 $$ final String condaExecutable = PyCondaPackageService.getSystemCondaExecutable()-->Line_4 $$ if (condaExecutable == null)[ FD ]
Line_3 $$ final String condaExecutable = PyCondaPackageService.getSystemCondaExecutable()-->Line_6 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, "create", "-p", destinationDir, "python=" + version, "-y")[ FD ]
Line_9 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_20 $$ final String binaryFallback = destinationDir + File.separator + "bin" + File.separator + "python"[ CD ]
Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)-->Line_14 $$ final int exitCode = result.getExitCode()[ FD ]
Line_14 $$ final int exitCode = result.getExitCode()-->Line_15 $$ if (exitCode != 0) [ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_11 $$ if (result.isCancelled()) [ CD ]
Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)-->Line_11 $$ if (result.isCancelled()) [ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_14 $$ final int exitCode = result.getExitCode()[ CD ]
Line_8 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(commandLine)-->Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_19 $$ final String binary = PythonSdkType.getPythonExecutable(destinationDir)[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_3 $$ final String condaExecutable = PyCondaPackageService.getSystemCondaExecutable()[ CD ]
Line_10 $$ final ProcessOutput result = handler.runProcessWithProgressIndicator(indicator)-->Line_16 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ FD ]
Line_15 $$ if (exitCode != 0) -->Line_16 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ CD ]
Line_2 $$ public static String createVirtualEnv(@NotNull String destinationDir, String version) throws ExecutionException -->Line_7 $$ final GeneralCommandLine commandLine = new GeneralCommandLine(parameters)[ CD ]
