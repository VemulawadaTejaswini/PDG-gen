Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_30 $$ if (resolvedElements.size() > 1) [ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_62 $$ if (targetElement != null && targetElement.isPhysical()) [ CD ]
Line_20 $$ if (targetElements[0] != resolvedElement && elementAtPointer != null && targetElements[0].isPhysical()) -->Line_21 $$ return ref != null ? new InfoSingle(ref, targetElements[0]) : new InfoSingle(elementAtPointer, targetElements[0])[ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_76 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ FD ]
Line_69 $$ if (element != null) -->Line_70 $$ PsiElement identifier = element.getNameIdentifier()[ CD ]
Line_11 $$ final PsiReference ref = TargetElementUtil.findReference(editor, offset)-->Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_6 $$ targetElement = GotoTypeDeclarationAction.findSymbolType(editor, offset)[ FD ]
Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_40 $$ found.add(psiElement)[ FD ]
Line_30 $$ if (resolvedElements.size() > 1) -->Line_31 $$ return elementAtPointer != null ? new InfoMultiple(elementAtPointer, ref) : null[ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_14 $$ final PsiElement[] targetElements = GotoDeclarationAction.findTargetElementsNoVS(project, editor, offset, false)[ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ CD ]
Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_30 $$ if (resolvedElements.size() > 1) [ FD ]
Line_33 $$ if (browseMode == BrowseMode.Implementation) -->Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)[ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_80 $$ return element.isValid()[ FD ]
Line_33 $$ if (browseMode == BrowseMode.Implementation) -->Line_47 $$ if (targetElements.length > 1) [ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_27 $$ if (resolvedElements.size() == 1) [ CD ]
Line_15 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))-->Line_49 $$ if (elementAtPointer != null) [ FD ]
Line_72 $$ return new Info(identifier) -->Line_76 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ CD ]
Line_72 $$ return new Info(identifier) -->Line_80 $$ return element.isValid()[ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_37 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)[ CD ]
Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_28 $$ return new InfoSingle(ref, resolvedElements.get(0))[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_10 $$ if (browseMode == BrowseMode.Declaration) [ FD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_33 $$ if (browseMode == BrowseMode.Implementation) [ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_69 $$ if (element != null) [ FD ]
Line_3 $$ PsiElement targetElement = null-->Line_6 $$ targetElement = GotoTypeDeclarationAction.findSymbolType(editor, offset)[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_68 $$ final PsiNameIdentifierOwner element = GotoDeclarationAction.findElementToShowUsagesOf(editor, offset)[ FD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)[ CD ]
Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_41 $$ return found.size() != 2[ CD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_44 $$ return PsiUtilCore.toPsiElementArray(found)[ CD ]
Line_16 $$ if (targetElements != null) -->Line_17 $$ if (targetElements.length == 0) [ CD ]
Line_33 $$ if (browseMode == BrowseMode.Implementation) -->Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() [ CD ]
Line_37 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_40 $$ found.add(psiElement)[ FD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ FD ]
Line_56 $$ if (descriptor == null || !descriptor.canNavigate()) -->Line_57 $$ return null[ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_69 $$ if (element != null) [ CD ]
Line_4 $$ if (browseMode == BrowseMode.TypeDeclaration) -->Line_10 $$ if (browseMode == BrowseMode.Declaration) [ CD ]
Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_40 $$ found.add(psiElement)[ CD ]
Line_37 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_41 $$ return found.size() != 2[ FD ]
Line_64 $$ if (elementAtPointer != null) -->Line_65 $$ return new InfoSingle(elementAtPointer, targetElement)[ CD ]
Line_49 $$ if (elementAtPointer != null) -->Line_50 $$ return new InfoMultiple(elementAtPointer)[ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_15 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))[ CD ]
Line_71 $$ if (identifier != null && identifier.isValid()) -->Line_72 $$ return new Info(identifier) [ CD ]
Line_47 $$ if (targetElements.length > 1) -->Line_49 $$ if (elementAtPointer != null) [ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_15 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))[ FD ]
Line_15 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))-->Line_64 $$ if (elementAtPointer != null) [ FD ]
Line_17 $$ if (targetElements.length == 0) -->Line_18 $$ return null[ CD ]
Line_37 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_44 $$ return PsiUtilCore.toPsiElementArray(found)[ FD ]
Line_6 $$ targetElement = GotoTypeDeclarationAction.findSymbolType(editor, offset)-->Line_62 $$ if (targetElement != null && targetElement.isPhysical()) [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_68 $$ final PsiNameIdentifierOwner element = GotoDeclarationAction.findElementToShowUsagesOf(editor, offset)[ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_48 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ FD ]
Line_54 $$ if (targetElements.length == 1) -->Line_55 $$ Navigatable descriptor = EditSourceUtil.getDescriptor(targetElements[0])[ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_13 $$ final PsiElement resolvedElement = resolvedElements.size() == 1 ? resolvedElements.get(0) : null[ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_16 $$ if (targetElements != null) [ CD ]
Line_62 $$ if (targetElement != null && targetElement.isPhysical()) -->Line_64 $$ if (elementAtPointer != null) [ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() [ FD ]
Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_13 $$ final PsiElement resolvedElement = resolvedElements.size() == 1 ? resolvedElements.get(0) : null[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_14 $$ final PsiElement[] targetElements = GotoDeclarationAction.findTargetElementsNoVS(project, editor, offset, false)[ FD ]
Line_19 $$ if (targetElements.length == 1) -->Line_24 $$ return elementAtPointer != null ? new InfoMultiple(elementAtPointer) : null[ CD ]
Line_14 $$ final PsiElement[] targetElements = GotoDeclarationAction.findTargetElementsNoVS(project, editor, offset, false)-->Line_16 $$ if (targetElements != null) [ FD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_69 $$ if (element != null) [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)[ FD ]
Line_12 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_27 $$ if (resolvedElements.size() == 1) [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_3 $$ PsiElement targetElement = null[ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_11 $$ final PsiReference ref = TargetElementUtil.findReference(editor, offset)[ FD ]
Line_62 $$ if (targetElement != null && targetElement.isPhysical()) -->Line_63 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ CD ]
Line_27 $$ if (resolvedElements.size() == 1) -->Line_28 $$ return new InfoSingle(ref, resolvedElements.get(0))[ CD ]
Line_33 $$ if (browseMode == BrowseMode.Implementation) -->Line_54 $$ if (targetElements.length == 1) [ CD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_70 $$ PsiElement identifier = element.getNameIdentifier()[ FD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_68 $$ final PsiNameIdentifierOwner element = GotoDeclarationAction.findElementToShowUsagesOf(editor, offset)[ FD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_4 $$ if (browseMode == BrowseMode.TypeDeclaration) [ CD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_80 $$ return element.isValid()[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_8 $$ showDumbModeNotification(project)[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_33 $$ if (browseMode == BrowseMode.Implementation) [ FD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() [ FD ]
Line_35 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_70 $$ PsiElement identifier = element.getNameIdentifier()[ FD ]
Line_47 $$ if (targetElements.length > 1) -->Line_48 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ CD ]
Line_19 $$ if (targetElements.length == 1) -->Line_20 $$ if (targetElements[0] != resolvedElement && elementAtPointer != null && targetElements[0].isPhysical()) [ CD ]
Line_17 $$ if (targetElements.length == 0) -->Line_19 $$ if (targetElements.length == 1) [ CD ]
Line_72 $$ return new Info(identifier) -->Line_77 $$ return new DocInfo("Show usages of " + name, null, element)[ CD ]
Line_10 $$ if (browseMode == BrowseMode.Declaration) -->Line_11 $$ final PsiReference ref = TargetElementUtil.findReference(editor, offset)[ CD ]
Line_34 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_76 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_4 $$ if (browseMode == BrowseMode.TypeDeclaration) [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_85 $$ return null[ CD ]
Line_69 $$ if (element != null) -->Line_71 $$ if (identifier != null && identifier.isValid()) [ CD ]
Line_54 $$ if (targetElements.length == 1) -->Line_56 $$ if (descriptor == null || !descriptor.canNavigate()) [ CD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_63 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ FD ]
Line_3 $$ PsiElement targetElement = null-->Line_62 $$ if (targetElement != null && targetElement.isPhysical()) [ FD ]
Line_2 $$ private static Info getInfoAt(@NotNull Project project, @NotNull final Editor editor, @NotNull PsiFile file, int offset, @NotNull BrowseMode browseMode) -->Line_38 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ FD ]
Line_47 $$ if (targetElements.length > 1) -->Line_52 $$ return null[ CD ]
