Line_77 $$ if (identifier != null && identifier.isValid()) -->Line_78 $$ return new Info(identifier) [ CD ]
Line_60 $$ if (targetElements.length == 1) -->Line_62 $$ if (descriptor == null || !descriptor.canNavigate()) [ CD ]
Line_15 $$ final PsiElement[] targetElements = GotoDeclarationAction.findTargetElementsNoVS(project, editor, offset, false)-->Line_17 $$ if (targetElements != null) [ FD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_87 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ FD ]
Line_4 $$ PsiElement targetElement = null-->Line_7 $$ targetElement = GotoTypeDeclarationAction.findSymbolType(editor, offset)[ FD ]
Line_5 $$ if (browseMode == BrowseMode.TypeDeclaration) -->Line_11 $$ if (browseMode == BrowseMode.Declaration) [ CD ]
Line_41 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_46 $$ found.add(psiElement)[ FD ]
Line_17 $$ if (targetElements != null) -->Line_18 $$ if (targetElements.length == 0) [ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)[ CD ]
Line_78 $$ return new Info(identifier) -->Line_88 $$ return new DocInfo("Show usages of " + name, null, element)[ CD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ FD ]
Line_53 $$ if (targetElements.length > 1) -->Line_55 $$ if (elementAtPointer != null) [ CD ]
Line_60 $$ if (targetElements.length == 1) -->Line_61 $$ Navigatable descriptor = EditSourceUtil.getDescriptor(targetElements[0])[ CD ]
Line_31 $$ if (resolvedElements.size() > 1) -->Line_32 $$ return elementAtPointer != null ? new InfoMultiple(elementAtPointer, ref) : null[ CD ]
Line_53 $$ if (targetElements.length > 1) -->Line_58 $$ return null[ CD ]
Line_34 $$ if (browseMode == BrowseMode.Implementation) -->Line_53 $$ if (targetElements.length > 1) [ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_41 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)[ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ CD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_75 $$ if (element != null) [ FD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_15 $$ final PsiElement[] targetElements = GotoDeclarationAction.findTargetElementsNoVS(project, editor, offset, false)[ CD ]
Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_46 $$ found.add(psiElement)[ FD ]
Line_62 $$ if (descriptor == null || !descriptor.canNavigate()) -->Line_63 $$ return null[ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_50 $$ return PsiUtilCore.toPsiElementArray(found)[ CD ]
Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_46 $$ found.add(psiElement)[ CD ]
Line_41 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_50 $$ return PsiUtilCore.toPsiElementArray(found)[ FD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_28 $$ if (resolvedElements.size() == 1) [ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_14 $$ final PsiElement resolvedElement = resolvedElements.size() == 1 ? resolvedElements.get(0) : null[ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_75 $$ if (element != null) [ FD ]
Line_12 $$ final PsiReference ref = TargetElementUtil.findReference(editor, offset)-->Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)[ FD ]
Line_78 $$ return new Info(identifier) -->Line_87 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_76 $$ PsiElement identifier = element.getNameIdentifier()[ FD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_93 $$ return element.isValid()[ FD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_93 $$ return element.isValid()[ FD ]
Line_28 $$ if (resolvedElements.size() == 1) -->Line_29 $$ return new InfoSingle(ref, resolvedElements.get(0))[ CD ]
Line_75 $$ if (element != null) -->Line_76 $$ PsiElement identifier = element.getNameIdentifier()[ CD ]
Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_29 $$ return new InfoSingle(ref, resolvedElements.get(0))[ FD ]
Line_68 $$ if (targetElement != null && targetElement.isPhysical()) -->Line_70 $$ if (elementAtPointer != null) [ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_16 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))[ CD ]
Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_31 $$ if (resolvedElements.size() > 1) [ FD ]
Line_34 $$ if (browseMode == BrowseMode.Implementation) -->Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)[ CD ]
Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_14 $$ final PsiElement resolvedElement = resolvedElements.size() == 1 ? resolvedElements.get(0) : null[ FD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_87 $$ String name = UsageViewUtil.getType(element) + " '" + UsageViewUtil.getShortName(element) + "'"[ FD ]
Line_20 $$ if (targetElements.length == 1) -->Line_21 $$ if (targetElements[0] != resolvedElement && elementAtPointer != null && targetElements[0].isPhysical()) [ CD ]
Line_34 $$ if (browseMode == BrowseMode.Implementation) -->Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() [ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_31 $$ if (resolvedElements.size() > 1) [ CD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() [ FD ]
Line_55 $$ if (elementAtPointer != null) -->Line_56 $$ return new InfoMultiple(elementAtPointer)[ CD ]
Line_70 $$ if (elementAtPointer != null) -->Line_71 $$ return new InfoSingle(elementAtPointer, targetElement)[ CD ]
Line_35 $$ final PsiElement element = TargetElementUtil.getInstance().findTargetElement(editor, ImplementationSearcher.getFlags(), offset)-->Line_76 $$ PsiElement identifier = element.getNameIdentifier()[ FD ]
Line_75 $$ if (element != null) -->Line_77 $$ if (identifier != null && identifier.isValid()) [ CD ]
Line_18 $$ if (targetElements.length == 0) -->Line_19 $$ return null[ CD ]
Line_41 $$ final List<PsiElement> found = new ArrayList<PsiElement>(2)-->Line_47 $$ return found.size() != 2[ FD ]
Line_18 $$ if (targetElements.length == 0) -->Line_20 $$ if (targetElements.length == 1) [ CD ]
Line_20 $$ if (targetElements.length == 1) -->Line_25 $$ return elementAtPointer != null ? new InfoMultiple(elementAtPointer) : null[ CD ]
Line_78 $$ return new Info(identifier) -->Line_93 $$ return element.isValid()[ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_12 $$ final PsiReference ref = TargetElementUtil.findReference(editor, offset)[ CD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_17 $$ if (targetElements != null) [ CD ]
Line_16 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))-->Line_55 $$ if (elementAtPointer != null) [ FD ]
Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() -->Line_47 $$ return found.size() != 2[ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_74 $$ final PsiNameIdentifierOwner element = GotoDeclarationAction.findElementToShowUsagesOf(editor, offset)[ FD ]
Line_13 $$ final List<PsiElement> resolvedElements = ref == null ? Collections.<PsiElement>emptyList() : resolve(ref)-->Line_28 $$ if (resolvedElements.size() == 1) [ FD ]
Line_4 $$ PsiElement targetElement = null-->Line_68 $$ if (targetElement != null && targetElement.isPhysical()) [ FD ]
Line_11 $$ if (browseMode == BrowseMode.Declaration) -->Line_34 $$ if (browseMode == BrowseMode.Implementation) [ CD ]
Line_7 $$ targetElement = GotoTypeDeclarationAction.findSymbolType(editor, offset)-->Line_68 $$ if (targetElement != null && targetElement.isPhysical()) [ FD ]
Line_68 $$ if (targetElement != null && targetElement.isPhysical()) -->Line_69 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ CD ]
Line_53 $$ if (targetElements.length > 1) -->Line_54 $$ PsiElement elementAtPointer = file.findElementAt(offset)[ CD ]
Line_16 $$ final PsiElement elementAtPointer = file.findElementAt(TargetElementUtil.adjustOffset(file, editor.getDocument(), offset))-->Line_70 $$ if (elementAtPointer != null) [ FD ]
Line_21 $$ if (targetElements[0] != resolvedElement && elementAtPointer != null && targetElements[0].isPhysical()) -->Line_22 $$ return ref != null ? new InfoSingle(ref, targetElements[0]) : new InfoSingle(elementAtPointer, targetElements[0])[ CD ]
Line_34 $$ if (browseMode == BrowseMode.Implementation) -->Line_60 $$ if (targetElements.length == 1) [ CD ]
Line_36 $$ PsiElement[] targetElements = new ImplementationSearcher() -->Line_42 $$ DefinitionsScopedSearch.search(element, getSearchScope(element, editor)).forEach(new Processor<PsiElement>() [ FD ]
