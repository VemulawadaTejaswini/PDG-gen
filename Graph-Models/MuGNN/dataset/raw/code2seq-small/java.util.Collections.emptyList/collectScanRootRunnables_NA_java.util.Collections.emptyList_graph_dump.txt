Line_72 $$ if (visitedRoots.add(root)) -->Line_73 $$ tasks.add(new Runnable() [ CD ]
Line_73 $$ tasks.add(new Runnable() -->Line_77 $$ if (project.isDisposed() || module.isDisposed() || !root.isValid())[ CD ]
Line_35 $$ if (visitedRoots.add(root)) -->Line_36 $$ tasks.add(new Runnable() [ CD ]
Line_65 $$ if (orderEntry instanceof LibraryOrSdkOrderEntry) -->Line_66 $$ if (orderEntry.isValid()) [ CD ]
Line_40 $$ if (project.isDisposed() || !root.isValid())-->Line_41 $$ return[ CD ]
Line_73 $$ tasks.add(new Runnable() -->Line_79 $$ iterateRecursively(root, processor, indicator, null, projectFileIndex)[ CD ]
Line_66 $$ if (orderEntry.isValid()) -->Line_68 $$ final VirtualFile[] libSources = entry.getRootFiles(OrderRootType.SOURCES)[ CD ]
Line_48 $$ if (visitedRoots.add(root)) -->Line_49 $$ tasks.add(new Runnable() [ CD ]
Line_8 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_13 $$ projectFileIndex.iterateContent(processor)[ FD ]
Line_53 $$ if (project.isDisposed() || !root.isValid())-->Line_54 $$ return[ CD ]
Line_36 $$ tasks.add(new Runnable() -->Line_42 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ CD ]
Line_7 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_49 $$ tasks.add(new Runnable() [ FD ]
Line_7 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_9 $$ tasks.add(new Runnable() [ FD ]
Line_7 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_73 $$ tasks.add(new Runnable() [ FD ]
Line_8 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_79 $$ iterateRecursively(root, processor, indicator, null, projectFileIndex)[ FD ]
Line_4 $$ if (project.isDisposed()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_9 $$ tasks.add(new Runnable() -->Line_13 $$ projectFileIndex.iterateContent(processor)[ CD ]
Line_7 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_36 $$ tasks.add(new Runnable() [ FD ]
Line_49 $$ tasks.add(new Runnable() -->Line_53 $$ if (project.isDisposed() || !root.isValid())[ CD ]
Line_66 $$ if (orderEntry.isValid()) -->Line_69 $$ final VirtualFile[] libClasses = entry.getRootFiles(OrderRootType.CLASSES)[ CD ]
Line_49 $$ tasks.add(new Runnable() -->Line_55 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ CD ]
Line_77 $$ if (project.isDisposed() || module.isDisposed() || !root.isValid())-->Line_78 $$ return[ CD ]
Line_36 $$ tasks.add(new Runnable() -->Line_40 $$ if (project.isDisposed() || !root.isValid())[ CD ]
