Line_44 $$ if (orderEntry instanceof LibraryOrSdkOrderEntry) -->Line_45 $$ if (orderEntry.isValid()) [ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_35 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_24 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_56 $$ iterateRecursively(root, processor, indicator, null, projectFileIndex)[ FD ]
Line_45 $$ if (orderEntry.isValid()) -->Line_47 $$ final VirtualFile[] libSources = entry.getRootFiles(OrderRootType.SOURCES)[ CD ]
Line_6 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_31 $$ tasks.add(new Runnable() [ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_66 $$ return tasks[ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_15 $$ if (project.isDisposed()) [ FD ]
Line_51 $$ if (visitedRoots.add(root)) -->Line_52 $$ tasks.add(new Runnable() [ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_7 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_6 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_8 $$ tasks.add(new Runnable() [ FD ]
Line_45 $$ if (orderEntry.isValid()) -->Line_48 $$ final VirtualFile[] libClasses = entry.getRootFiles(OrderRootType.CLASSES)[ CD ]
Line_15 $$ if (project.isDisposed()) -->Line_16 $$ return tasks[ CD ]
Line_30 $$ if (visitedRoots.add(root)) -->Line_31 $$ tasks.add(new Runnable() [ CD ]
Line_19 $$ if (visitedRoots.add(root)) -->Line_20 $$ tasks.add(new Runnable() [ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_10 $$ projectFileIndex.iterateContent(processor)[ FD ]
Line_52 $$ tasks.add(new Runnable() -->Line_54 $$ if (project.isDisposed() || module.isDisposed() || !root.isValid())[ CD ]
Line_22 $$ if (project.isDisposed() || !root.isValid())-->Line_23 $$ return[ CD ]
Line_3 $$ if (project.isDisposed()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_6 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_20 $$ tasks.add(new Runnable() [ FD ]
Line_52 $$ tasks.add(new Runnable() -->Line_56 $$ iterateRecursively(root, processor, indicator, null, projectFileIndex)[ CD ]
Line_20 $$ tasks.add(new Runnable() -->Line_22 $$ if (project.isDisposed() || !root.isValid())[ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_6 $$ List<Runnable> tasks = new ArrayList<Runnable>()[ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_8 $$ tasks.add(new Runnable() [ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_3 $$ if (project.isDisposed()) [ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_3 $$ if (project.isDisposed()) [ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_13 $$ final Set<VirtualFile> visitedRoots = ContainerUtil.newConcurrentSet()[ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_29 $$ for (final VirtualFile root : IndexableSetContributor.getProjectRootsToIndex(contributor, project)) [ FD ]
Line_33 $$ if (project.isDisposed() || !root.isValid())-->Line_34 $$ return[ CD ]
Line_31 $$ tasks.add(new Runnable() -->Line_33 $$ if (project.isDisposed() || !root.isValid())[ CD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_22 $$ if (project.isDisposed() || !root.isValid())[ FD ]
Line_31 $$ tasks.add(new Runnable() -->Line_35 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ CD ]
Line_20 $$ tasks.add(new Runnable() -->Line_24 $$ iterateRecursively(root, processor, indicator, visitedRoots, null)[ CD ]
Line_8 $$ tasks.add(new Runnable() -->Line_10 $$ projectFileIndex.iterateContent(processor)[ CD ]
Line_7 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_10 $$ projectFileIndex.iterateContent(processor)[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_7 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_54 $$ if (project.isDisposed() || module.isDisposed() || !root.isValid())[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_41 $$ for (final Module module : ModuleManager.getInstance(project).getModules()) [ FD ]
Line_6 $$ List<Runnable> tasks = new ArrayList<Runnable>()-->Line_52 $$ tasks.add(new Runnable() [ FD ]
Line_7 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_56 $$ iterateRecursively(root, processor, indicator, null, projectFileIndex)[ FD ]
Line_2 $$ private static List<Runnable> collectScanRootRunnables(@NotNull final ContentIterator processor, @NotNull final Project project, final ProgressIndicator indicator) -->Line_33 $$ if (project.isDisposed() || !root.isValid())[ FD ]
Line_54 $$ if (project.isDisposed() || module.isDisposed() || !root.isValid())-->Line_55 $$ return[ CD ]
