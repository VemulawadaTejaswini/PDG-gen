Line_11 $$ next = iterator.next()-->Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)[ FD ]
Line_10 $$ while (iterator.hasNext()) -->Line_13 $$ if (containsAdditionalNow && containsAdditional) [ CD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_10 $$ while (iterator.hasNext()) [ CD ]
Line_4 $$ if (!iterator.hasNext()) -->Line_6 $$ return[ CD ]
Line_30 $$ if (lastName == null) -->Line_33 $$ myAdditionalInfoParser.copyToResult(lastName)[ CD ]
Line_16 $$ if (containsAdditionalNow) -->Line_23 $$ next = iterator.next()[ CD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()[ CD ]
Line_11 $$ next = iterator.next()-->Line_18 $$ myAdditionalInfoParser.parse(next, iterator)[ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_20 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ FD ]
Line_16 $$ if (containsAdditionalNow) -->Line_19 $$ if (!iterator.hasNext()) [ CD ]
Line_11 $$ next = iterator.next()-->Line_26 $$ myPatchContentParser.parse(next, iterator)[ FD ]
Line_25 $$ if (myPatchContentParser.testIsStart(next)) -->Line_26 $$ myPatchContentParser.parse(next, iterator)[ CD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_26 $$ myPatchContentParser.parse(next, iterator)[ FD ]
Line_23 $$ next = iterator.next()-->Line_18 $$ myAdditionalInfoParser.parse(next, iterator)[ FD ]
Line_8 $$ String next-->Line_23 $$ next = iterator.next()[ FD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_9 $$ boolean containsAdditional = false[ CD ]
Line_10 $$ while (iterator.hasNext()) -->Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)[ CD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_18 $$ myAdditionalInfoParser.parse(next, iterator)[ FD ]
Line_8 $$ String next-->Line_18 $$ myAdditionalInfoParser.parse(next, iterator)[ FD ]
Line_9 $$ boolean containsAdditional = false-->Line_17 $$ containsAdditional = containsAdditionalNow[ FD ]
Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)-->Line_17 $$ containsAdditional = containsAdditionalNow[ FD ]
Line_8 $$ String next-->Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)[ FD ]
Line_8 $$ String next-->Line_11 $$ next = iterator.next()[ FD ]
Line_16 $$ if (containsAdditionalNow) -->Line_18 $$ myAdditionalInfoParser.parse(next, iterator)[ CD ]
Line_36 $$ containsAdditional = false-->Line_13 $$ if (containsAdditionalNow && containsAdditional) [ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_31 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ FD ]
Line_17 $$ containsAdditional = containsAdditionalNow-->Line_13 $$ if (containsAdditionalNow && containsAdditional) [ FD ]
Line_23 $$ next = iterator.next()-->Line_25 $$ if (myPatchContentParser.testIsStart(next)) [ FD ]
Line_10 $$ while (iterator.hasNext()) -->Line_11 $$ next = iterator.next()[ CD ]
Line_8 $$ String next-->Line_25 $$ if (myPatchContentParser.testIsStart(next)) [ FD ]
Line_23 $$ next = iterator.next()-->Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)[ FD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_8 $$ String next[ CD ]
Line_19 $$ if (!iterator.hasNext()) -->Line_20 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ CD ]
Line_9 $$ boolean containsAdditional = false-->Line_36 $$ containsAdditional = false[ FD ]
Line_30 $$ if (lastName == null) -->Line_31 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ CD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_39 $$ myPatches = myPatchContentParser.getResult()[ CD ]
Line_16 $$ if (containsAdditionalNow) -->Line_17 $$ containsAdditional = containsAdditionalNow[ CD ]
Line_10 $$ while (iterator.hasNext()) -->Line_16 $$ if (containsAdditionalNow) [ CD ]
Line_9 $$ boolean containsAdditional = false-->Line_13 $$ if (containsAdditionalNow && containsAdditional) [ FD ]
Line_10 $$ while (iterator.hasNext()) -->Line_25 $$ if (myPatchContentParser.testIsStart(next)) [ CD ]
Line_29 $$ final String lastName = myPatchContentParser.getLastName()-->Line_33 $$ myAdditionalInfoParser.copyToResult(lastName)[ FD ]
Line_12 $$ final boolean containsAdditionalNow = myAdditionalInfoParser.testIsStart(next)-->Line_13 $$ if (containsAdditionalNow && containsAdditional) [ FD ]
Line_8 $$ String next-->Line_26 $$ myPatchContentParser.parse(next, iterator)[ FD ]
Line_2 $$ public void parseAllPatches() throws PatchSyntaxException -->Line_4 $$ if (!iterator.hasNext()) [ CD ]
Line_4 $$ if (!iterator.hasNext()) -->Line_5 $$ myPatches = Collections.emptyList()[ CD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_10 $$ while (iterator.hasNext()) [ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_23 $$ next = iterator.next()[ FD ]
Line_11 $$ next = iterator.next()-->Line_23 $$ next = iterator.next()[ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_11 $$ next = iterator.next()[ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_4 $$ if (!iterator.hasNext()) [ FD ]
Line_11 $$ next = iterator.next()-->Line_25 $$ if (myPatchContentParser.testIsStart(next)) [ FD ]
Line_29 $$ final String lastName = myPatchContentParser.getLastName()-->Line_30 $$ if (lastName == null) [ FD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_19 $$ if (!iterator.hasNext()) [ FD ]
Line_23 $$ next = iterator.next()-->Line_26 $$ myPatchContentParser.parse(next, iterator)[ FD ]
Line_25 $$ if (myPatchContentParser.testIsStart(next)) -->Line_36 $$ containsAdditional = false[ CD ]
Line_17 $$ containsAdditional = containsAdditionalNow-->Line_36 $$ containsAdditional = false[ FD ]
Line_13 $$ if (containsAdditionalNow && containsAdditional) -->Line_14 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ CD ]
Line_3 $$ final ListIterator<String> iterator = myLines.listIterator()-->Line_14 $$ myAdditionalInfoParser.acceptError(new PatchSyntaxException(iterator.previousIndex(), "Contains additional information without patch itself"))[ FD ]
