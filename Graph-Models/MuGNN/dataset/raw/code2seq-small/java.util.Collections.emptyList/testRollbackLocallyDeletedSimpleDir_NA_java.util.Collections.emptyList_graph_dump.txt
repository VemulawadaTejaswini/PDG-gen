Line_15 $$ final Set<File> files = new HashSet<File>()-->Line_18 $$ files.add(wasFileS2)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_9 $$ VcsTestUtil.deleteFileInCommand(myProject, tree.mySourceDir)[ CD ]
Line_19 $$ for (LocallyDeletedChange file : deletedFiles) -->Line_20 $$ files.remove(file.getPath().getIOFile())[ FD ]
Line_15 $$ final Set<File> files = new HashSet<File>()-->Line_17 $$ files.add(wasFileS1)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_6 $$ final File wasFile = new File(tree.mySourceDir.getPath())[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_12 $$ final List<LocallyDeletedChange> deletedFiles = ((ChangeListManagerImpl) myChangeListManager).getDeletedFiles()[ CD ]
Line_12 $$ final List<LocallyDeletedChange> deletedFiles = ((ChangeListManagerImpl) myChangeListManager).getDeletedFiles()-->Line_14 $$ Assert.assertTrue(deletedFiles.size() == 3)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_15 $$ final Set<File> files = new HashSet<File>()[ CD ]
Line_15 $$ final Set<File> files = new HashSet<File>()-->Line_16 $$ files.add(wasFile)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_18 $$ files.add(wasFileS2)[ CD ]
Line_8 $$ final File wasFileS2 = new File(tree.myS2File.getPath())-->Line_18 $$ files.add(wasFileS2)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_14 $$ Assert.assertTrue(deletedFiles.size() == 3)[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_11 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_8 $$ final File wasFileS2 = new File(tree.myS2File.getPath())[ CD ]
Line_6 $$ final File wasFile = new File(tree.mySourceDir.getPath())-->Line_23 $$ rollbackLocallyDeleted(Collections.<FilePath>singletonList(VcsUtil.getFilePath(wasFile, true)), Collections.<FilePath>emptyList())[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_17 $$ files.add(wasFileS1)[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_23 $$ rollbackLocallyDeleted(Collections.<FilePath>singletonList(VcsUtil.getFilePath(wasFile, true)), Collections.<FilePath>emptyList())[ CD ]
Line_7 $$ final File wasFileS1 = new File(tree.myS1File.getPath())-->Line_17 $$ files.add(wasFileS1)[ FD ]
Line_15 $$ final Set<File> files = new HashSet<File>()-->Line_20 $$ files.remove(file.getPath().getIOFile())[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_13 $$ Assert.assertNotNull(deletedFiles)[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_10 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_22 $$ Assert.assertTrue(files.isEmpty())[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_5 $$ disableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE)[ CD ]
Line_12 $$ final List<LocallyDeletedChange> deletedFiles = ((ChangeListManagerImpl) myChangeListManager).getDeletedFiles()-->Line_13 $$ Assert.assertNotNull(deletedFiles)[ FD ]
Line_6 $$ final File wasFile = new File(tree.mySourceDir.getPath())-->Line_16 $$ files.add(wasFile)[ FD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_7 $$ final File wasFileS1 = new File(tree.myS1File.getPath())[ CD ]
Line_2 $$ public void testRollbackLocallyDeletedSimpleDir() throws Exception -->Line_16 $$ files.add(wasFile)[ CD ]
Line_15 $$ final Set<File> files = new HashSet<File>()-->Line_22 $$ Assert.assertTrue(files.isEmpty())[ FD ]
