Line_3 $$ WebSocketHandler handlerToCheck = WebSocketHandlerDecorator.unwrap(handler)-->Line_5 $$ if (handlerToCheck instanceof SubProtocolCapable) [ FD ]
Line_2 $$ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) -->Line_3 $$ WebSocketHandler handlerToCheck = WebSocketHandlerDecorator.unwrap(handler)[ FD ]
Line_2 $$ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) -->Line_8 $$ return (subProtocols != null ? subProtocols : Collections.<String>emptyList())[ CD ]
Line_4 $$ List<String> subProtocols = null-->Line_6 $$ subProtocols = ((SubProtocolCapable) handlerToCheck).getSubProtocols()[ FD ]
Line_2 $$ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) -->Line_5 $$ if (handlerToCheck instanceof SubProtocolCapable) [ CD ]
Line_5 $$ if (handlerToCheck instanceof SubProtocolCapable) -->Line_6 $$ subProtocols = ((SubProtocolCapable) handlerToCheck).getSubProtocols()[ CD ]
Line_2 $$ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) -->Line_3 $$ WebSocketHandler handlerToCheck = WebSocketHandlerDecorator.unwrap(handler)[ CD ]
Line_2 $$ protected final List<String> determineHandlerSupportedProtocols(WebSocketHandler handler) -->Line_4 $$ List<String> subProtocols = null[ CD ]
