Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_31 $$ Collection<String> activatedProfiles = collectActivatedProfiles(mavenProject)[ FD ]
Line_25 $$ RemoteNativeMavenProjectHolder holder = new RemoteNativeMavenProjectHolder(mavenProject)-->Line_27 $$ UnicastRemoteObject.exportObject(holder, 0)[ FD ]
Line_10 $$ MavenModel model = null-->Line_15 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_15 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())-->Line_20 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_12 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_18 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null[ CD ]
Line_4 $$ Collection<MavenProjectProblem> problems = MavenProjectProblem.createProblemsList()-->Line_6 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ FD ]
Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_32 $$ MavenServerExecutionResult.ProjectData data = new MavenServerExecutionResult.ProjectData(model, MavenModelConverter.convertToMap(mavenProject.getModel()), holder, activatedProfiles)[ FD ]
Line_12 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_20 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ CD ]
Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_15 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_20 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_23 $$ validate(mavenProject.getFile(), Collections.singleton(e), problems, null)[ FD ]
Line_5 $$ THashSet<MavenId> unresolvedArtifacts = new THashSet<MavenId>()-->Line_6 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ FD ]
Line_12 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_17 $$ final DependencyResolutionResult dependencyResolutionResult = result.getDependencyResolutionResult()[ CD ]
Line_18 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null-->Line_19 $$ final List<org.sonatype.aether.graph.DependencyNode> dependencyNodes = dependencyGraph != null ? dependencyGraph.getChildren() : Collections.<org.sonatype.aether.graph.DependencyNode>emptyList()[ FD ]
Line_8 $$ if (mavenProject == null)-->Line_9 $$ return new MavenServerExecutionResult(null, problems, unresolvedArtifacts)[ CD ]
Line_7 $$ MavenProject mavenProject = result.getMavenProject()-->Line_8 $$ if (mavenProject == null)[ FD ]
Line_10 $$ MavenModel model = null-->Line_20 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_17 $$ final DependencyResolutionResult dependencyResolutionResult = result.getDependencyResolutionResult()-->Line_18 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null[ FD ]
Line_4 $$ Collection<MavenProjectProblem> problems = MavenProjectProblem.createProblemsList()-->Line_23 $$ validate(mavenProject.getFile(), Collections.singleton(e), problems, null)[ FD ]
Line_12 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_15 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ CD ]
