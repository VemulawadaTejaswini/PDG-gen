Line_15 $$ final DependencyResolutionResult dependencyResolutionResult = result.getDependencyResolutionResult()-->Line_16 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null[ FD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_29 $$ Collection<String> activatedProfiles = collectActivatedProfiles(mavenProject)[ FD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_13 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_7 $$ if (mavenProject == null)[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_3 $$ Collection<MavenProjectProblem> problems = MavenProjectProblem.createProblemsList()[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_30 $$ MavenServerExecutionResult.ProjectData data = new MavenServerExecutionResult.ProjectData(model, MavenModelConverter.convertToMap(mavenProject.getModel()), holder, activatedProfiles)[ CD ]
Line_13 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())-->Line_18 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_12 $$ final List<DependencyNode> dependencyNodes = rootNode == null ? Collections.emptyList() : rootNode.getChildren()-->Line_18 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_5 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_5 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ FD ]
Line_11 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_13 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_6 $$ MavenProject mavenProject = result.getMavenProject()[ CD ]
Line_4 $$ THashSet<MavenId> unresolvedArtifacts = new THashSet<MavenId>()-->Line_5 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ FD ]
Line_11 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_12 $$ final List<DependencyNode> dependencyNodes = rootNode == null ? Collections.emptyList() : rootNode.getChildren()[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_6 $$ MavenProject mavenProject = result.getMavenProject()[ FD ]
Line_9 $$ MavenModel model = null-->Line_13 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_12 $$ final List<DependencyNode> dependencyNodes = rootNode == null ? Collections.emptyList() : rootNode.getChildren()-->Line_13 $$ model = MavenModelConverter.convertModel(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_23 $$ RemoteNativeMavenProjectHolder holder = new RemoteNativeMavenProjectHolder(mavenProject)-->Line_25 $$ UnicastRemoteObject.exportObject(holder, 0)[ FD ]
Line_3 $$ Collection<MavenProjectProblem> problems = MavenProjectProblem.createProblemsList()-->Line_21 $$ validate(mavenProject.getFile(), Collections.singleton(e), problems, null)[ FD ]
Line_7 $$ if (mavenProject == null)-->Line_8 $$ return new MavenServerExecutionResult(null, problems, unresolvedArtifacts)[ CD ]
Line_11 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_15 $$ final DependencyResolutionResult dependencyResolutionResult = result.getDependencyResolutionResult()[ CD ]
Line_11 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_18 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ CD ]
Line_11 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_16 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_15 $$ final DependencyResolutionResult dependencyResolutionResult = result.getDependencyResolutionResult()[ FD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_31 $$ return new MavenServerExecutionResult(data, problems, unresolvedArtifacts)[ CD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_7 $$ if (mavenProject == null)[ FD ]
Line_9 $$ MavenModel model = null-->Line_18 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_4 $$ THashSet<MavenId> unresolvedArtifacts = new THashSet<MavenId>()[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_12 $$ final List<DependencyNode> dependencyNodes = rootNode == null ? Collections.emptyList() : rootNode.getChildren()[ FD ]
Line_3 $$ Collection<MavenProjectProblem> problems = MavenProjectProblem.createProblemsList()-->Line_5 $$ validate(file, result.getExceptions(), problems, unresolvedArtifacts)[ FD ]
Line_16 $$ final org.sonatype.aether.graph.DependencyNode dependencyGraph = dependencyResolutionResult != null ? dependencyResolutionResult.getDependencyGraph() : null-->Line_17 $$ final List<org.sonatype.aether.graph.DependencyNode> dependencyNodes = dependencyGraph != null ? dependencyGraph.getChildren() : Collections.<org.sonatype.aether.graph.DependencyNode>emptyList()[ FD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_30 $$ MavenServerExecutionResult.ProjectData data = new MavenServerExecutionResult.ProjectData(model, MavenModelConverter.convertToMap(mavenProject.getModel()), holder, activatedProfiles)[ FD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_23 $$ RemoteNativeMavenProjectHolder holder = new RemoteNativeMavenProjectHolder(mavenProject)[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_9 $$ MavenModel model = null[ CD ]
Line_2 $$ private MavenServerExecutionResult createExecutionResult(File file, MavenExecutionResult result, DependencyNode rootNode) throws RemoteException -->Line_29 $$ Collection<String> activatedProfiles = collectActivatedProfiles(mavenProject)[ CD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_18 $$ model = Maven30AetherModelConverter.convertModelWithAetherDependencyTree(mavenProject.getModel(), mavenProject.getCompileSourceRoots(), mavenProject.getTestCompileSourceRoots(), mavenProject.getArtifacts(), dependencyNodes, mavenProject.getExtensionArtifacts(), getLocalRepositoryFile())[ FD ]
Line_6 $$ MavenProject mavenProject = result.getMavenProject()-->Line_21 $$ validate(mavenProject.getFile(), Collections.singleton(e), problems, null)[ FD ]
