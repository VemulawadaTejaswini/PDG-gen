Line_20 $$ for (int i = 0; i < children.size(); i++) -->Line_23 $$ newChildren.add(node)[ CD ]
Line_38 $$ if (last && myTemporaryMessageChildren != null) -->Line_43 $$ fireNodesRemoved(ints, removed)[ CD ]
Line_10 $$ if (children.size() > 0) -->Line_12 $$ if (myValueChildren == null) [ CD ]
Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()-->Line_35 $$ myBottomGroups = createGroupNodes(children.getBottomGroups(), myBottomGroups, newChildren)[ FD ]
Line_20 $$ for (int i = 0; i < children.size(); i++) -->Line_24 $$ if (Registry.is("ide.debugger.inline") && inlineHelper.shouldEvaluateChildrenByDefault(node) && isUseGetChildrenHack(myTree)) [ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_10 $$ if (children.size() > 0) [ FD ]
Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))-->Line_25 $$ node.getChildren()[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()[ FD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_45 $$ myTree.childrenLoaded(XValueContainerNode.this, newChildren, last)[ FD ]
Line_20 $$ for (int i = 0; i < children.size(); i++) -->Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))[ FD ]
Line_20 $$ for (int i = 0; i < children.size(); i++) -->Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))[ CD ]
Line_10 $$ if (children.size() > 0) -->Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()[ CD ]
Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()-->Line_45 $$ myTree.childrenLoaded(XValueContainerNode.this, newChildren, last)[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_35 $$ myBottomGroups = createGroupNodes(children.getBottomGroups(), myBottomGroups, newChildren)[ FD ]
Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))-->Line_22 $$ myValueChildren.add(node)[ FD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_5 $$ invokeNodeUpdate(new Runnable() [ CD ]
Line_38 $$ if (last && myTemporaryMessageChildren != null) -->Line_39 $$ final int[] ints = getNodesIndices(myTemporaryMessageChildren)[ CD ]
Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()-->Line_34 $$ myTopGroups = createGroupNodes(children.getTopGroups(), myTopGroups, newChildren)[ FD ]
Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()-->Line_37 $$ fireNodesInserted(newChildren)[ FD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_35 $$ myBottomGroups = createGroupNodes(children.getBottomGroups(), myBottomGroups, newChildren)[ FD ]
Line_3 $$ if (myObsolete)-->Line_4 $$ return[ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_20 $$ for (int i = 0; i < children.size(); i++) [ FD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_34 $$ myTopGroups = createGroupNodes(children.getTopGroups(), myTopGroups, newChildren)[ FD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_38 $$ if (last && myTemporaryMessageChildren != null) [ FD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_23 $$ newChildren.add(node)[ FD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_38 $$ if (last && myTemporaryMessageChildren != null) [ CD ]
Line_19 $$ final InlineDebuggerHelper inlineHelper = getTree().getEditorsProvider().getInlineDebuggerHelper()-->Line_24 $$ if (Registry.is("ide.debugger.inline") && inlineHelper.shouldEvaluateChildrenByDefault(node) && isUseGetChildrenHack(myTree)) [ FD ]
Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))-->Line_24 $$ if (Registry.is("ide.debugger.inline") && inlineHelper.shouldEvaluateChildrenByDefault(node) && isUseGetChildrenHack(myTree)) [ FD ]
Line_38 $$ if (last && myTemporaryMessageChildren != null) -->Line_40 $$ final TreeNode[] removed = myTemporaryMessageChildren.toArray(new TreeNode[myTemporaryMessageChildren.size()])[ CD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_34 $$ myTopGroups = createGroupNodes(children.getTopGroups(), myTopGroups, newChildren)[ CD ]
Line_12 $$ if (myValueChildren == null) -->Line_13 $$ if (!myAlreadySorted && XDebuggerSettingsManager.getInstance().getDataViewSettings().isSortValues()) [ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_16 $$ myValueChildren = new ArrayList<XValueNodeImpl>(children.size())[ FD ]
Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))-->Line_23 $$ newChildren.add(node)[ FD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_29 $$ newChildren = new SmartList<XValueContainerNode<?>>()[ FD ]
Line_24 $$ if (Registry.is("ide.debugger.inline") && inlineHelper.shouldEvaluateChildrenByDefault(node) && isUseGetChildrenHack(myTree)) -->Line_25 $$ node.getChildren()[ CD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_35 $$ myBottomGroups = createGroupNodes(children.getBottomGroups(), myBottomGroups, newChildren)[ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_45 $$ myTree.childrenLoaded(XValueContainerNode.this, newChildren, last)[ FD ]
Line_20 $$ for (int i = 0; i < children.size(); i++) -->Line_22 $$ myValueChildren.add(node)[ CD ]
Line_10 $$ if (children.size() > 0) -->Line_30 $$ if (myValueChildren == null) [ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_3 $$ if (myObsolete)[ CD ]
Line_10 $$ if (children.size() > 0) -->Line_20 $$ for (int i = 0; i < children.size(); i++) [ CD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_34 $$ myTopGroups = createGroupNodes(children.getTopGroups(), myTopGroups, newChildren)[ FD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_37 $$ fireNodesInserted(newChildren)[ CD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_37 $$ fireNodesInserted(newChildren)[ FD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_45 $$ myTree.childrenLoaded(XValueContainerNode.this, newChildren, last)[ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_21 $$ XValueNodeImpl node = new XValueNodeImpl(myTree, XValueContainerNode.this, children.getName(i), children.getValue(i))[ FD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_7 $$ if (myObsolete)[ CD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_35 $$ myBottomGroups = createGroupNodes(children.getBottomGroups(), myBottomGroups, newChildren)[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_23 $$ newChildren.add(node)[ FD ]
Line_39 $$ final int[] ints = getNodesIndices(myTemporaryMessageChildren)-->Line_43 $$ fireNodesRemoved(ints, removed)[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())[ FD ]
Line_2 $$ public void addChildren(@NotNull final XValueChildrenList children, final boolean last) -->Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())[ FD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_10 $$ if (children.size() > 0) [ CD ]
Line_5 $$ invokeNodeUpdate(new Runnable() -->Line_9 $$ List<XValueContainerNode<?>> newChildren[ CD ]
Line_10 $$ if (children.size() > 0) -->Line_19 $$ final InlineDebuggerHelper inlineHelper = getTree().getEditorsProvider().getInlineDebuggerHelper()[ CD ]
Line_40 $$ final TreeNode[] removed = myTemporaryMessageChildren.toArray(new TreeNode[myTemporaryMessageChildren.size()])-->Line_43 $$ fireNodesRemoved(ints, removed)[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_37 $$ fireNodesInserted(newChildren)[ FD ]
Line_9 $$ List<XValueContainerNode<?>> newChildren-->Line_45 $$ myTree.childrenLoaded(XValueContainerNode.this, newChildren, last)[ FD ]
Line_7 $$ if (myObsolete)-->Line_8 $$ return[ CD ]
Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())-->Line_34 $$ myTopGroups = createGroupNodes(children.getTopGroups(), myTopGroups, newChildren)[ FD ]
Line_10 $$ if (children.size() > 0) -->Line_11 $$ newChildren = new ArrayList<XValueContainerNode<?>>(children.size())[ CD ]
