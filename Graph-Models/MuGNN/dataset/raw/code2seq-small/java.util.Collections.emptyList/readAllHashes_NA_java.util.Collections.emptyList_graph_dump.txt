Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_4 $$ if (factory == null) [ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_16 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_11 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))-->Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() [ FD ]
Line_15 $$ for (HgRevisionNumber parent : parents) -->Line_16 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_14 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_19 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_14 $$ List<Hash> parentsHash = new SmartList<Hash>()[ CD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_11 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() [ CD ]
Line_9 $$ HgVersion version = hgvcs.getVersion()-->Line_10 $$ String[] templates = ArrayUtil.toStringArray(HgBaseLogParser.constructDefaultTemplate(version))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ CD ]
Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_18 $$ userRegistry.consume(factory.createUser(author, email))[ CD ]
Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_19 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ CD ]
Line_9 $$ HgVersion version = hgvcs.getVersion()-->Line_11 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_9 $$ HgVersion version = hgvcs.getVersion()[ CD ]
Line_14 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_16 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_10 $$ String[] templates = ArrayUtil.toStringArray(HgBaseLogParser.constructDefaultTemplate(version))-->Line_11 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ CD ]
Line_4 $$ if (factory == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_19 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_18 $$ userRegistry.consume(factory.createUser(author, email))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_11 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ CD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_4 $$ if (factory == null) [ CD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_19 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_9 $$ HgVersion version = hgvcs.getVersion()[ FD ]
Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_18 $$ userRegistry.consume(factory.createUser(author, email))[ FD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_10 $$ String[] templates = ArrayUtil.toStringArray(HgBaseLogParser.constructDefaultTemplate(version))[ CD ]
Line_2 $$ public static List<TimedVcsCommit> readAllHashes(@NotNull Project project, @NotNull VirtualFile root, @NotNull final Consumer<VcsUser> userRegistry, @NotNull List<String> params) throws VcsException -->Line_12 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() [ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_18 $$ userRegistry.consume(factory.createUser(author, email))[ FD ]
