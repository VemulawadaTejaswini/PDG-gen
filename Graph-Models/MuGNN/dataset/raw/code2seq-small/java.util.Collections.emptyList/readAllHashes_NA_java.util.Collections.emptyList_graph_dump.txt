Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_19 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_11 $$ String[] templates = ArrayUtil.toStringArray(HgBaseLogParser.constructDefaultTemplate(version))-->Line_12 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_17 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_19 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_22 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ CD ]
Line_17 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_22 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_10 $$ HgVersion version = hgvcs.getVersion()-->Line_12 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_21 $$ userRegistry.consume(factory.createUser(author, email))[ CD ]
Line_5 $$ if (factory == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_5 $$ if (factory == null) [ FD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_22 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_12 $$ HgCommandResult result = getLogResult(project, root, version, -1, params, HgChangesetUtil.makeTemplate(templates))-->Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() [ FD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_21 $$ userRegistry.consume(factory.createUser(author, email))[ FD ]
Line_8 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_10 $$ HgVersion version = hgvcs.getVersion()[ FD ]
Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_21 $$ userRegistry.consume(factory.createUser(author, email))[ FD ]
Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_22 $$ return factory.createTimedCommit(factory.createHash(changeset), parentsHash, revisionDate.getTime())[ FD ]
Line_18 $$ for (HgRevisionNumber parent : parents) -->Line_19 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_10 $$ HgVersion version = hgvcs.getVersion()-->Line_11 $$ String[] templates = ArrayUtil.toStringArray(HgBaseLogParser.constructDefaultTemplate(version))[ FD ]
Line_13 $$ return getCommitRecords(project, result, new HgBaseLogParser<TimedVcsCommit>() -->Line_17 $$ List<Hash> parentsHash = new SmartList<Hash>()[ CD ]
