Line_4 $$ for (MutableAccessor accessor : XmlSerializerUtil.getAccessors(aClass)) -->Line_5 $$ AbstractCollection abstractCollection = accessor.getAnnotation(AbstractCollection.class)[ FD ]
Line_2 $$ public Object createObject(@NotNull Class<?> aClass, FList<Type> processedTypes) throws Exception -->Line_3 $$ Object o = ReflectionUtil.newInstance(aClass)[ FD ]
Line_4 $$ for (MutableAccessor accessor : XmlSerializerUtil.getAccessors(aClass)) -->Line_9 $$ accessor.set(o, value)[ FD ]
Line_2 $$ public Object createObject(@NotNull Class<?> aClass, FList<Type> processedTypes) throws Exception -->Line_7 $$ Object value = createValue(accessor.getGenericType(), processedTypes, elementTypes)[ FD ]
Line_3 $$ Object o = ReflectionUtil.newInstance(aClass)-->Line_9 $$ accessor.set(o, value)[ FD ]
Line_2 $$ public Object createObject(@NotNull Class<?> aClass, FList<Type> processedTypes) throws Exception -->Line_4 $$ for (MutableAccessor accessor : XmlSerializerUtil.getAccessors(aClass)) [ FD ]
Line_2 $$ public Object createObject(@NotNull Class<?> aClass, FList<Type> processedTypes) throws Exception -->Line_12 $$ return o[ CD ]
Line_6 $$ List<Type> elementTypes = abstractCollection != null ? Arrays.<Type>asList(abstractCollection.elementTypes()) : Collections.<Type>emptyList()-->Line_7 $$ Object value = createValue(accessor.getGenericType(), processedTypes, elementTypes)[ FD ]
Line_7 $$ Object value = createValue(accessor.getGenericType(), processedTypes, elementTypes)-->Line_8 $$ if (value != null) [ FD ]
Line_7 $$ Object value = createValue(accessor.getGenericType(), processedTypes, elementTypes)-->Line_9 $$ accessor.set(o, value)[ FD ]
Line_8 $$ if (value != null) -->Line_9 $$ accessor.set(o, value)[ CD ]
Line_4 $$ for (MutableAccessor accessor : XmlSerializerUtil.getAccessors(aClass)) -->Line_7 $$ Object value = createValue(accessor.getGenericType(), processedTypes, elementTypes)[ FD ]
Line_5 $$ AbstractCollection abstractCollection = accessor.getAnnotation(AbstractCollection.class)-->Line_6 $$ List<Type> elementTypes = abstractCollection != null ? Arrays.<Type>asList(abstractCollection.elementTypes()) : Collections.<Type>emptyList()[ FD ]
Line_2 $$ public Object createObject(@NotNull Class<?> aClass, FList<Type> processedTypes) throws Exception -->Line_3 $$ Object o = ReflectionUtil.newInstance(aClass)[ CD ]
