Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() -->Line_8 $$ return ListUtil.removeSelectedItems(myList, myEnableCondition)[ CD ]
Line_2 $$ public BaseAction createAction(final JComponent component) -->Line_14 $$ final BaseAction action = createAction(behaviour)[ CD ]
Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() -->Line_14 $$ final BaseAction action = createAction(behaviour)[ FD ]
Line_2 $$ public BaseAction createAction(final JComponent component) -->Line_15 $$ action.registerCustomShortcutSet(CommonShortcuts.getDelete(), component)[ FD ]
Line_2 $$ public BaseAction createAction(final JComponent component) -->Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() [ CD ]
Line_2 $$ public BaseAction createAction(final JComponent component) -->Line_16 $$ return action[ CD ]
Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() -->Line_11 $$ e.getPresentation().setEnabled(ListUtil.canRemoveSelectedItems(myList, myEnableCondition))[ CD ]
Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() -->Line_5 $$ if (myConfirmation != null && !myConfirmation.value((List<T>) Arrays.asList(myList.getSelectedValues()))) [ CD ]
Line_2 $$ public BaseAction createAction(final JComponent component) -->Line_15 $$ action.registerCustomShortcutSet(CommonShortcuts.getDelete(), component)[ CD ]
Line_3 $$ final ActionBehaviour<List<T>> behaviour = new ActionBehaviour<List<T>>() -->Line_11 $$ e.getPresentation().setEnabled(ListUtil.canRemoveSelectedItems(myList, myEnableCondition))[ FD ]
Line_5 $$ if (myConfirmation != null && !myConfirmation.value((List<T>) Arrays.asList(myList.getSelectedValues()))) -->Line_6 $$ return Collections.emptyList()[ CD ]
