Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_12 $$ final Ref<List<MavenProjectsProcessorTask>> postTasks = new Ref<List<MavenProjectsProcessorTask>>()[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_27 $$ if (ApplicationManager.getApplication().isDispatchThread()) [ CD ]
Line_12 $$ final Ref<List<MavenProjectsProcessorTask>> postTasks = new Ref<List<MavenProjectsProcessorTask>>()-->Line_44 $$ schedulePostImportTasks(postTasks.get())[ FD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_48 $$ if (projectImporter == null)[ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_4 $$ final boolean importModuleGroupsRequired[ CD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_17 $$ return modelsProvider.getModules()[ CD ]
Line_12 $$ final Ref<List<MavenProjectsProcessorTask>> postTasks = new Ref<List<MavenProjectsProcessorTask>>()-->Line_24 $$ postTasks.set(projectImporter.importProject())[ FD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_24 $$ postTasks.set(projectImporter.importProject())[ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_3 $$ final Map<MavenProject, MavenProjectChanges> projectsToImportWithChanges[ CD ]
Line_27 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_28 $$ r.run()[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_48 $$ if (projectImporter == null)[ CD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_23 $$ importer.set(projectImporter)[ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_50 $$ return projectImporter.getCreatedModules()[ CD ]
Line_4 $$ final boolean importModuleGroupsRequired-->Line_8 $$ importModuleGroupsRequired = myImportModuleGroupsRequired[ FD ]
Line_11 $$ final Ref<MavenProjectImporter> importer = new Ref<MavenProjectImporter>()-->Line_47 $$ MavenProjectImporter projectImporter = importer.get()[ FD ]
Line_13 $$ final Runnable r = new Runnable() -->Line_28 $$ r.run()[ FD ]
Line_13 $$ final Runnable r = new Runnable() -->Line_32 $$ r.run()[ FD ]
Line_12 $$ final Ref<List<MavenProjectsProcessorTask>> postTasks = new Ref<List<MavenProjectsProcessorTask>>()-->Line_42 $$ if (postTasks.get() != null) [ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_13 $$ final Runnable r = new Runnable() [ CD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_50 $$ return projectImporter.getCreatedModules()[ FD ]
Line_42 $$ if (postTasks.get() != null) -->Line_44 $$ schedulePostImportTasks(postTasks.get())[ CD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_20 $$ return modelsProvider.getContentRoots(module)[ FD ]
Line_13 $$ final Runnable r = new Runnable() -->Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() [ CD ]
Line_15 $$ MavenProjectImporter projectImporter = new MavenProjectImporter(myProject, myProjectsTree, getFileToModuleMapping(new MavenModelsProvider() -->Line_20 $$ return modelsProvider.getContentRoots(module)[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_11 $$ final Ref<MavenProjectImporter> importer = new Ref<MavenProjectImporter>()[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_42 $$ if (postTasks.get() != null) [ CD ]
Line_48 $$ if (projectImporter == null)-->Line_49 $$ return Collections.emptyList()[ CD ]
Line_27 $$ if (ApplicationManager.getApplication().isDispatchThread()) -->Line_30 $$ MavenUtil.runInBackground(myProject, ProjectBundle.message("maven.project.importing"), false, new MavenTask() [ CD ]
Line_13 $$ final Runnable r = new Runnable() -->Line_23 $$ importer.set(projectImporter)[ CD ]
Line_37 $$ if (isNormalProject()) -->Line_40 $$ fm.syncRefresh()[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_47 $$ MavenProjectImporter projectImporter = importer.get()[ CD ]
Line_11 $$ final Ref<MavenProjectImporter> importer = new Ref<MavenProjectImporter>()-->Line_23 $$ importer.set(projectImporter)[ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_20 $$ return modelsProvider.getContentRoots(module)[ FD ]
Line_37 $$ if (isNormalProject()) -->Line_38 $$ fm.asyncRefresh(null)[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_36 $$ VirtualFileManager fm = VirtualFileManager.getInstance()[ CD ]
Line_13 $$ final Runnable r = new Runnable() -->Line_24 $$ postTasks.set(projectImporter.importProject())[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_46 $$ myImportingQueue.restartTimer()[ CD ]
Line_3 $$ final Map<MavenProject, MavenProjectChanges> projectsToImportWithChanges-->Line_6 $$ projectsToImportWithChanges = new LinkedHashMap<MavenProject, MavenProjectChanges>(myProjectsToImport)[ FD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_17 $$ return modelsProvider.getModules()[ FD ]
Line_30 $$ MavenUtil.runInBackground(myProject, ProjectBundle.message("maven.project.importing"), false, new MavenTask() -->Line_32 $$ r.run()[ CD ]
Line_2 $$ public List<Module> importProjects(final IdeModifiableModelsProvider modelsProvider) -->Line_37 $$ if (isNormalProject()) [ CD ]
