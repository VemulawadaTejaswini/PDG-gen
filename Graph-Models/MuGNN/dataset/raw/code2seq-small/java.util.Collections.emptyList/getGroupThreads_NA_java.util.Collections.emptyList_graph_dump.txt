Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_26 $$ for (long threadId : threadIds) -->Line_27 $$ MBThread thread = mbThreadPersistence.findByPrimaryKey(threadId)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_10 $$ List<Long> threadIds = null[ CD ]
Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_14 $$ if (subscribed) -->Line_16 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ CD ]
Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)-->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_14 $$ if (subscribed) -->Line_18 $$ if (includeAnonymous) [ CD ]
Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)-->Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ return doGetGroupThreads(groupId, userId, status, subscribed, includeAnonymous, start, end)[ CD ]
Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_16 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ FD ]
Line_18 $$ if (includeAnonymous) -->Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ FD ]
Line_10 $$ List<Long> threadIds = null-->Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)-->Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_11 $$ if (userId <= 0) [ FD ]
Line_27 $$ MBThread thread = mbThreadPersistence.findByPrimaryKey(threadId)-->Line_28 $$ threads.add(thread)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_10 $$ List<Long> threadIds = null-->Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_30 $$ return threads[ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_7 $$ if (categoryIds.length == 0) [ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_4 $$ return doGetGroupThreads(groupId, userId, status, subscribed, includeAnonymous, start, end)[ FD ]
Line_7 $$ if (categoryIds.length == 0) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())[ FD ]
Line_25 $$ List<MBThread> threads = new ArrayList(threadIds.size())-->Line_28 $$ threads.add(thread)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)[ FD ]
Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_11 $$ if (userId <= 0) -->Line_14 $$ if (subscribed) [ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)[ CD ]
Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)-->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ FD ]
Line_10 $$ List<Long> threadIds = null-->Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ FD ]
Line_6 $$ long[] categoryIds = mbCategoryService.getCategoryIds(groupId, MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID)-->Line_19 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, userId, categoryIds, status, start, end)[ FD ]
Line_15 $$ QueryDefinition<MBThread> queryDefinition = new QueryDefinition(status, start, end, null)-->Line_16 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ FD ]
Line_10 $$ List<Long> threadIds = null-->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ FD ]
Line_14 $$ if (subscribed) -->Line_15 $$ QueryDefinition<MBThread> queryDefinition = new QueryDefinition(status, start, end, null)[ CD ]
Line_18 $$ if (includeAnonymous) -->Line_21 $$ threadIds = mbMessageFinder.filterFindByG_U_C_A_S(groupId, userId, categoryIds, false, status, start, end)[ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_16 $$ return mbThreadFinder.filterFindByS_G_U_C(groupId, userId, categoryIds, queryDefinition)[ FD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_11 $$ if (userId <= 0) [ CD ]
Line_11 $$ if (userId <= 0) -->Line_12 $$ threadIds = mbMessageFinder.filterFindByG_U_C_S(groupId, 0, categoryIds, status, start, end)[ CD ]
Line_2 $$ public List<MBThread> getGroupThreads(long groupId, long userId, int status, boolean subscribed, boolean includeAnonymous, int start, int end) throws PortalException -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
