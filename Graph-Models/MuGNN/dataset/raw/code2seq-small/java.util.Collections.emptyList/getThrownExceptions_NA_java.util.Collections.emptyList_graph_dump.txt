Line_4 $$ if (element instanceof PsiAnonymousClass) -->Line_6 $$ if (argumentList != null) [ CD ]
Line_3 $$ if (element instanceof PsiClass) -->Line_11 $$ if (element instanceof PsiLambdaExpression) [ CD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_22 $$ if (expr == null)[ CD ]
Line_21 $$ final PsiExpression expr = ((PsiThrowStatement) element).getException()-->Line_30 $$ addExceptions(classTypes, getThrownExceptions(expr))[ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_19 $$ return getExceptionsByMethodAndChildren(element, result)[ FD ]
Line_17 $$ if (element instanceof PsiNewExpression) -->Line_19 $$ return getExceptionsByMethodAndChildren(element, result)[ CD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_32 $$ if (element instanceof PsiTryStatement) [ CD ]
Line_21 $$ final PsiExpression expr = ((PsiThrowStatement) element).getException()-->Line_22 $$ if (expr == null)[ FD ]
Line_24 $$ final List<PsiType> types = getPreciseThrowTypes(expr)-->Line_36 $$ addExceptions(types, getCloserExceptions((PsiResourceListElement) element))[ FD ]
Line_34 $$ if (element instanceof PsiResourceListElement) -->Line_35 $$ List<PsiClassType> types = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_34 $$ if (element instanceof PsiResourceListElement) [ FD ]
Line_13 $$ if (element instanceof PsiMethodCallExpression) -->Line_15 $$ JavaResolveResult result = methodRef.advancedResolve(false)[ CD ]
Line_37 $$ if (element instanceof PsiResourceVariable) -->Line_39 $$ PsiExpression initializer = variable.getInitializer()[ CD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_30 $$ addExceptions(classTypes, getThrownExceptions(expr))[ CD ]
Line_14 $$ PsiReferenceExpression methodRef = ((PsiMethodCallExpression) element).getMethodExpression()-->Line_15 $$ JavaResolveResult result = methodRef.advancedResolve(false)[ FD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_25 $$ List<PsiClassType> classTypes = new ArrayList<PsiClassType>(ContainerUtil.mapNotNull(types, new NullableFunction<PsiType, PsiClassType>() [ CD ]
Line_11 $$ if (element instanceof PsiLambdaExpression) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_13 $$ if (element instanceof PsiMethodCallExpression) -->Line_14 $$ PsiReferenceExpression methodRef = ((PsiMethodCallExpression) element).getMethodExpression()[ CD ]
Line_22 $$ if (expr == null)-->Line_23 $$ return Collections.emptyList()[ CD ]
Line_4 $$ if (element instanceof PsiAnonymousClass) -->Line_5 $$ final PsiExpressionList argumentList = ((PsiAnonymousClass) element).getArgumentList()[ CD ]
Line_5 $$ final PsiExpressionList argumentList = ((PsiAnonymousClass) element).getArgumentList()-->Line_7 $$ return getThrownExceptions(argumentList)[ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_3 $$ if (element instanceof PsiClass) [ CD ]
Line_13 $$ if (element instanceof PsiMethodCallExpression) -->Line_17 $$ if (element instanceof PsiNewExpression) [ CD ]
Line_21 $$ final PsiExpression expr = ((PsiThrowStatement) element).getException()-->Line_24 $$ final List<PsiType> types = getPreciseThrowTypes(expr)[ FD ]
Line_11 $$ if (element instanceof PsiLambdaExpression) -->Line_13 $$ if (element instanceof PsiMethodCallExpression) [ CD ]
Line_25 $$ List<PsiClassType> classTypes = new ArrayList<PsiClassType>(ContainerUtil.mapNotNull(types, new NullableFunction<PsiType, PsiClassType>() -->Line_30 $$ addExceptions(classTypes, getThrownExceptions(expr))[ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_32 $$ if (element instanceof PsiTryStatement) [ FD ]
Line_24 $$ final List<PsiType> types = getPreciseThrowTypes(expr)-->Line_41 $$ addExceptions(types, getThrownExceptions(initializer))[ FD ]
Line_40 $$ if (initializer != null) -->Line_41 $$ addExceptions(types, getThrownExceptions(initializer))[ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_16 $$ return getExceptionsByMethodAndChildren(element, result)[ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_46 $$ return getThrownExceptions(element.getChildren())[ CD ]
Line_32 $$ if (element instanceof PsiTryStatement) -->Line_34 $$ if (element instanceof PsiResourceListElement) [ CD ]
Line_5 $$ final PsiExpressionList argumentList = ((PsiAnonymousClass) element).getArgumentList()-->Line_6 $$ if (argumentList != null) [ FD ]
Line_17 $$ if (element instanceof PsiNewExpression) -->Line_20 $$ if (element instanceof PsiThrowStatement) [ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_3 $$ if (element instanceof PsiClass) [ FD ]
Line_34 $$ if (element instanceof PsiResourceListElement) -->Line_37 $$ if (element instanceof PsiResourceVariable) [ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_17 $$ if (element instanceof PsiNewExpression) [ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_11 $$ if (element instanceof PsiLambdaExpression) [ FD ]
Line_24 $$ final List<PsiType> types = getPreciseThrowTypes(expr)-->Line_25 $$ List<PsiClassType> classTypes = new ArrayList<PsiClassType>(ContainerUtil.mapNotNull(types, new NullableFunction<PsiType, PsiClassType>() [ FD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_24 $$ final List<PsiType> types = getPreciseThrowTypes(expr)[ CD ]
Line_37 $$ if (element instanceof PsiResourceVariable) -->Line_40 $$ if (initializer != null) [ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_37 $$ if (element instanceof PsiResourceVariable) [ FD ]
Line_17 $$ if (element instanceof PsiNewExpression) -->Line_18 $$ JavaResolveResult result = ((PsiNewExpression) element).resolveMethodGenerics()[ CD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_31 $$ return classTypes[ CD ]
Line_34 $$ if (element instanceof PsiResourceListElement) -->Line_44 $$ return types[ CD ]
Line_3 $$ if (element instanceof PsiClass) -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_6 $$ if (argumentList != null) -->Line_7 $$ return getThrownExceptions(argumentList)[ CD ]
Line_25 $$ List<PsiClassType> classTypes = new ArrayList<PsiClassType>(ContainerUtil.mapNotNull(types, new NullableFunction<PsiType, PsiClassType>() -->Line_27 $$ return type instanceof PsiClassType ? (PsiClassType) type : null[ CD ]
Line_32 $$ if (element instanceof PsiTryStatement) -->Line_33 $$ return getTryExceptions((PsiTryStatement) element)[ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_4 $$ if (element instanceof PsiAnonymousClass) [ FD ]
Line_15 $$ JavaResolveResult result = methodRef.advancedResolve(false)-->Line_19 $$ return getExceptionsByMethodAndChildren(element, result)[ FD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_20 $$ if (element instanceof PsiThrowStatement) [ FD ]
Line_15 $$ JavaResolveResult result = methodRef.advancedResolve(false)-->Line_16 $$ return getExceptionsByMethodAndChildren(element, result)[ FD ]
Line_13 $$ if (element instanceof PsiMethodCallExpression) -->Line_16 $$ return getExceptionsByMethodAndChildren(element, result)[ CD ]
Line_34 $$ if (element instanceof PsiResourceListElement) -->Line_36 $$ addExceptions(types, getCloserExceptions((PsiResourceListElement) element))[ CD ]
Line_3 $$ if (element instanceof PsiClass) -->Line_4 $$ if (element instanceof PsiAnonymousClass) [ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_46 $$ return getThrownExceptions(element.getChildren())[ FD ]
Line_20 $$ if (element instanceof PsiThrowStatement) -->Line_21 $$ final PsiExpression expr = ((PsiThrowStatement) element).getException()[ CD ]
Line_2 $$ public static List<PsiClassType> getThrownExceptions(@NotNull PsiElement element) -->Line_13 $$ if (element instanceof PsiMethodCallExpression) [ FD ]
