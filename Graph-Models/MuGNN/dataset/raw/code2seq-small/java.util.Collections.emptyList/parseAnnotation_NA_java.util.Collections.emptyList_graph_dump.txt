Line_5 $$ List<Exprent> values-->Line_16 $$ values = Collections.emptyList()[ FD ]
Line_8 $$ names = new ArrayList<String>(len)-->Line_15 $$ names = Collections.emptyList()[ FD ]
Line_4 $$ List<String> names-->Line_15 $$ names = Collections.emptyList()[ FD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_3 $$ String className = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()[ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_11 $$ names.add(pool.getPrimitiveConstant(data.readUnsignedShort()).getString())[ FD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_18 $$ return new AnnotationExprent(new VarType(className).value, names, values)[ CD ]
Line_7 $$ if (len > 0) -->Line_15 $$ names = Collections.emptyList()[ CD ]
Line_7 $$ if (len > 0) -->Line_9 $$ values = new ArrayList<Exprent>(len)[ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_3 $$ String className = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()[ FD ]
Line_4 $$ List<String> names-->Line_8 $$ names = new ArrayList<String>(len)[ FD ]
Line_10 $$ for (int i = 0; i < len; i++) -->Line_12 $$ values.add(parseAnnotationElement(data, pool))[ CD ]
Line_6 $$ int len = data.readUnsignedShort()-->Line_10 $$ for (int i = 0; i < len; i++) [ FD ]
Line_7 $$ if (len > 0) -->Line_16 $$ values = Collections.emptyList()[ CD ]
Line_7 $$ if (len > 0) -->Line_8 $$ names = new ArrayList<String>(len)[ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_4 $$ List<String> names[ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_12 $$ values.add(parseAnnotationElement(data, pool))[ FD ]
Line_5 $$ List<Exprent> values-->Line_12 $$ values.add(parseAnnotationElement(data, pool))[ FD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_6 $$ int len = data.readUnsignedShort()[ FD ]
Line_9 $$ values = new ArrayList<Exprent>(len)-->Line_12 $$ values.add(parseAnnotationElement(data, pool))[ FD ]
Line_5 $$ List<Exprent> values-->Line_9 $$ values = new ArrayList<Exprent>(len)[ FD ]
Line_9 $$ values = new ArrayList<Exprent>(len)-->Line_16 $$ values = Collections.emptyList()[ FD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_7 $$ if (len > 0) [ CD ]
Line_7 $$ if (len > 0) -->Line_10 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_5 $$ List<Exprent> values[ CD ]
Line_6 $$ int len = data.readUnsignedShort()-->Line_7 $$ if (len > 0) [ FD ]
Line_8 $$ names = new ArrayList<String>(len)-->Line_11 $$ names.add(pool.getPrimitiveConstant(data.readUnsignedShort()).getString())[ FD ]
Line_4 $$ List<String> names-->Line_11 $$ names.add(pool.getPrimitiveConstant(data.readUnsignedShort()).getString())[ FD ]
Line_10 $$ for (int i = 0; i < len; i++) -->Line_11 $$ names.add(pool.getPrimitiveConstant(data.readUnsignedShort()).getString())[ CD ]
Line_2 $$ public static AnnotationExprent parseAnnotation(DataInputStream data, ConstantPool pool) throws IOException -->Line_6 $$ int len = data.readUnsignedShort()[ CD ]
