Line_12 $$ final int end = mySegments.getSegmentEnd(currentSegmentNumber)-->Line_14 $$ myEditor.getCaretModel().moveToOffset(end)[ FD ]
Line_13 $$ if (end >= 0) -->Line_14 $$ myEditor.getCaretModel().moveToOffset(end)[ CD ]
Line_13 $$ if (end >= 0) -->Line_15 $$ myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_28 $$ lookupItems = Collections.emptyList()-->Line_33 $$ insertSingleItem(lookupItems)[ FD ]
Line_28 $$ lookupItems = Collections.emptyList()-->Line_38 $$ runLookup(lookupItems, expressionNode.getAdvertisingText())[ FD ]
Line_43 $$ if (result != null) -->Line_44 $$ result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber), mySegments.getSegmentEnd(currentSegmentNumber))[ CD ]
Line_24 $$ List<TemplateExpressionLookupElement> lookupItems-->Line_28 $$ lookupItems = Collections.emptyList()[ FD ]
Line_30 $$ final PsiFile psiFile = getPsiFile()-->Line_44 $$ result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber), mySegments.getSegmentEnd(currentSegmentNumber))[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_8 $$ lockSegmentAtTheSameOffsetIfAny()[ CD ]
Line_19 $$ DumbService.getInstance(myProject).withAlternativeResolveEnabled(new Runnable() -->Line_23 $$ Expression expressionNode = getCurrentExpression()[ CD ]
Line_42 $$ Result result = expressionNode.calculateResult(getCurrentExpressionContext())-->Line_44 $$ result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber), mySegments.getSegmentEnd(currentSegmentNumber))[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_51 $$ focusCurrentHighlighter(true)[ CD ]
Line_26 $$ lookupItems = getCurrentExpressionLookupItems()-->Line_28 $$ lookupItems = Collections.emptyList()[ FD ]
Line_13 $$ if (end >= 0) -->Line_17 $$ myEditor.getSelectionModel().setSelection(start, end)[ CD ]
Line_31 $$ if (!lookupItems.isEmpty()) -->Line_32 $$ if (((TemplateManagerImpl) TemplateManager.getInstance(myProject)).shouldSkipInTests()) [ CD ]
Line_2 $$ private void focusCurrentExpression() -->Line_7 $$ final int currentSegmentNumber = getCurrentSegmentNumber()[ CD ]
Line_42 $$ Result result = expressionNode.calculateResult(getCurrentExpressionContext())-->Line_43 $$ if (result != null) [ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_19 $$ DumbService.getInstance(myProject).withAlternativeResolveEnabled(new Runnable() [ CD ]
Line_26 $$ lookupItems = getCurrentExpressionLookupItems()-->Line_38 $$ runLookup(lookupItems, expressionNode.getAdvertisingText())[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_13 $$ if (end >= 0) [ CD ]
Line_28 $$ lookupItems = Collections.emptyList()-->Line_31 $$ if (!lookupItems.isEmpty()) [ FD ]
Line_13 $$ if (end >= 0) -->Line_16 $$ myEditor.getSelectionModel().removeSelection()[ CD ]
Line_26 $$ lookupItems = getCurrentExpressionLookupItems()-->Line_31 $$ if (!lookupItems.isEmpty()) [ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_6 $$ PsiDocumentManager.getInstance(myProject).commitDocument(myDocument)[ CD ]
Line_7 $$ final int currentSegmentNumber = getCurrentSegmentNumber()-->Line_11 $$ final int start = mySegments.getSegmentStart(currentSegmentNumber)[ FD ]
Line_26 $$ lookupItems = getCurrentExpressionLookupItems()-->Line_33 $$ insertSingleItem(lookupItems)[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_11 $$ final int start = mySegments.getSegmentStart(currentSegmentNumber)[ CD ]
Line_7 $$ final int currentSegmentNumber = getCurrentSegmentNumber()-->Line_12 $$ final int end = mySegments.getSegmentEnd(currentSegmentNumber)[ FD ]
Line_19 $$ DumbService.getInstance(myProject).withAlternativeResolveEnabled(new Runnable() -->Line_30 $$ final PsiFile psiFile = getPsiFile()[ CD ]
Line_32 $$ if (((TemplateManagerImpl) TemplateManager.getInstance(myProject)).shouldSkipInTests()) -->Line_33 $$ insertSingleItem(lookupItems)[ CD ]
Line_7 $$ final int currentSegmentNumber = getCurrentSegmentNumber()-->Line_44 $$ result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber), mySegments.getSegmentEnd(currentSegmentNumber))[ FD ]
Line_24 $$ List<TemplateExpressionLookupElement> lookupItems-->Line_38 $$ runLookup(lookupItems, expressionNode.getAdvertisingText())[ FD ]
Line_23 $$ Expression expressionNode = getCurrentExpression()-->Line_42 $$ Result result = expressionNode.calculateResult(getCurrentExpressionContext())[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_9 $$ if (currentSegmentNumber < 0)[ CD ]
Line_3 $$ if (isFinished()) -->Line_4 $$ return[ CD ]
Line_12 $$ final int end = mySegments.getSegmentEnd(currentSegmentNumber)-->Line_13 $$ if (end >= 0) [ FD ]
Line_19 $$ DumbService.getInstance(myProject).withAlternativeResolveEnabled(new Runnable() -->Line_24 $$ List<TemplateExpressionLookupElement> lookupItems[ CD ]
Line_19 $$ DumbService.getInstance(myProject).withAlternativeResolveEnabled(new Runnable() -->Line_31 $$ if (!lookupItems.isEmpty()) [ CD ]
Line_2 $$ private void focusCurrentExpression() -->Line_3 $$ if (isFinished()) [ CD ]
Line_9 $$ if (currentSegmentNumber < 0)-->Line_10 $$ return[ CD ]
Line_32 $$ if (((TemplateManagerImpl) TemplateManager.getInstance(myProject)).shouldSkipInTests()) -->Line_38 $$ runLookup(lookupItems, expressionNode.getAdvertisingText())[ CD ]
Line_23 $$ Expression expressionNode = getCurrentExpression()-->Line_38 $$ runLookup(lookupItems, expressionNode.getAdvertisingText())[ FD ]
Line_11 $$ final int start = mySegments.getSegmentStart(currentSegmentNumber)-->Line_17 $$ myEditor.getSelectionModel().setSelection(start, end)[ FD ]
Line_24 $$ List<TemplateExpressionLookupElement> lookupItems-->Line_31 $$ if (!lookupItems.isEmpty()) [ FD ]
Line_12 $$ final int end = mySegments.getSegmentEnd(currentSegmentNumber)-->Line_17 $$ myEditor.getSelectionModel().setSelection(start, end)[ FD ]
Line_24 $$ List<TemplateExpressionLookupElement> lookupItems-->Line_33 $$ insertSingleItem(lookupItems)[ FD ]
Line_7 $$ final int currentSegmentNumber = getCurrentSegmentNumber()-->Line_9 $$ if (currentSegmentNumber < 0)[ FD ]
Line_2 $$ private void focusCurrentExpression() -->Line_12 $$ final int end = mySegments.getSegmentEnd(currentSegmentNumber)[ CD ]
Line_24 $$ List<TemplateExpressionLookupElement> lookupItems-->Line_26 $$ lookupItems = getCurrentExpressionLookupItems()[ FD ]
