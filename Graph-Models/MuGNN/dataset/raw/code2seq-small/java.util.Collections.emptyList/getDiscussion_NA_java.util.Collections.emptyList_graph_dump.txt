Line_4 $$ MBTreeWalker treeWalker = messageDisplay.getTreeWalker()-->Line_18 $$ DiscussionComment rootDiscussionComment = new MBDiscussionCommentImpl(treeWalker.getRoot(), treeWalker, ratingsEntries, ratingsStats)[ FD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_19 $$ return new MBDiscussionImpl(rootDiscussionComment, messageDisplay.isDiscussionMaxComments())[ CD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_3 $$ MBMessageDisplay messageDisplay = _mbMessageLocalService.getDiscussionMessageDisplay(userId, groupId, className, classPK, WorkflowConstants.STATUS_ANY, new MessageThreadComparator())[ CD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_15 $$ ratingsEntries = _ratingsEntryLocalService.getEntries(userId, CommentConstants.getDiscussionClassName(), classPKs)[ FD ]
Line_9 $$ List<Long> classPKs = new ArrayList()-->Line_12 $$ classPKs.add(curMessage.getMessageId())[ FD ]
Line_11 $$ if (!curMessage.isRoot()) -->Line_12 $$ classPKs.add(curMessage.getMessageId())[ CD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_4 $$ MBTreeWalker treeWalker = messageDisplay.getTreeWalker()[ CD ]
Line_8 $$ if (messages.size() > 1) -->Line_15 $$ ratingsEntries = _ratingsEntryLocalService.getEntries(userId, CommentConstants.getDiscussionClassName(), classPKs)[ CD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_3 $$ MBMessageDisplay messageDisplay = _mbMessageLocalService.getDiscussionMessageDisplay(userId, groupId, className, classPK, WorkflowConstants.STATUS_ANY, new MessageThreadComparator())[ FD ]
Line_10 $$ for (MBMessage curMessage : messages) -->Line_12 $$ classPKs.add(curMessage.getMessageId())[ FD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_7 $$ List<RatingsStats> ratingsStats = Collections.emptyList()[ CD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_8 $$ if (messages.size() > 1) [ CD ]
Line_10 $$ for (MBMessage curMessage : messages) -->Line_11 $$ if (!curMessage.isRoot()) [ FD ]
Line_7 $$ List<RatingsStats> ratingsStats = Collections.emptyList()-->Line_16 $$ ratingsStats = _ratingsStatsLocalService.getStats(CommentConstants.getDiscussionClassName(), classPKs)[ FD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_18 $$ DiscussionComment rootDiscussionComment = new MBDiscussionCommentImpl(treeWalker.getRoot(), treeWalker, ratingsEntries, ratingsStats)[ CD ]
Line_9 $$ List<Long> classPKs = new ArrayList()-->Line_15 $$ ratingsEntries = _ratingsEntryLocalService.getEntries(userId, CommentConstants.getDiscussionClassName(), classPKs)[ FD ]
Line_3 $$ MBMessageDisplay messageDisplay = _mbMessageLocalService.getDiscussionMessageDisplay(userId, groupId, className, classPK, WorkflowConstants.STATUS_ANY, new MessageThreadComparator())-->Line_19 $$ return new MBDiscussionImpl(rootDiscussionComment, messageDisplay.isDiscussionMaxComments())[ FD ]
Line_5 $$ List<MBMessage> messages = treeWalker.getMessages()-->Line_8 $$ if (messages.size() > 1) [ FD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_5 $$ List<MBMessage> messages = treeWalker.getMessages()[ CD ]
Line_3 $$ MBMessageDisplay messageDisplay = _mbMessageLocalService.getDiscussionMessageDisplay(userId, groupId, className, classPK, WorkflowConstants.STATUS_ANY, new MessageThreadComparator())-->Line_4 $$ MBTreeWalker treeWalker = messageDisplay.getTreeWalker()[ FD ]
Line_8 $$ if (messages.size() > 1) -->Line_9 $$ List<Long> classPKs = new ArrayList()[ CD ]
Line_9 $$ List<Long> classPKs = new ArrayList()-->Line_16 $$ ratingsStats = _ratingsStatsLocalService.getStats(CommentConstants.getDiscussionClassName(), classPKs)[ FD ]
Line_2 $$ public Discussion getDiscussion(long userId, long groupId, String className, long classPK, Function<String, ServiceContext> serviceContextFunction) throws PortalException -->Line_6 $$ List<RatingsEntry> ratingsEntries = Collections.emptyList()[ CD ]
Line_6 $$ List<RatingsEntry> ratingsEntries = Collections.emptyList()-->Line_15 $$ ratingsEntries = _ratingsEntryLocalService.getEntries(userId, CommentConstants.getDiscussionClassName(), classPKs)[ FD ]
Line_4 $$ MBTreeWalker treeWalker = messageDisplay.getTreeWalker()-->Line_5 $$ List<MBMessage> messages = treeWalker.getMessages()[ FD ]
Line_8 $$ if (messages.size() > 1) -->Line_16 $$ ratingsStats = _ratingsStatsLocalService.getStats(CommentConstants.getDiscussionClassName(), classPKs)[ CD ]
