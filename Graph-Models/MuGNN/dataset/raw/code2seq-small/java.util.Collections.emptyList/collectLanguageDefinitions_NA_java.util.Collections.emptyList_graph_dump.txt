Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_28 $$ all.addAll(projectDefinitions)[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_3 $$ final PsiClass languageClass = DomJavaUtil.findClass(Language.class.getName(), context.getInvocationElement())[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() [ CD ]
Line_19 $$ final Collection<PsiClass> projectLanguages = ContainerUtil.filter(allLanguages, new Condition<PsiClass>() -->Line_23 $$ return PsiSearchScopeUtil.isInScope(projectProductionScope, aClass)[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_18 $$ final List<LanguageDefinition> libraryDefinitions = collectLibraryLanguages(context, allLanguages)[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_3 $$ final PsiClass languageClass = DomJavaUtil.findClass(Language.class.getName(), context.getInvocationElement())[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_7 $$ final Project project = context.getProject()[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_7 $$ final Project project = context.getProject()[ FD ]
Line_3 $$ final PsiClass languageClass = DomJavaUtil.findClass(Language.class.getName(), context.getInvocationElement())-->Line_4 $$ if (languageClass == null) [ FD ]
Line_3 $$ final PsiClass languageClass = DomJavaUtil.findClass(Language.class.getName(), context.getInvocationElement())-->Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() [ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_29 $$ return all[ CD ]
Line_19 $$ final Collection<PsiClass> projectLanguages = ContainerUtil.filter(allLanguages, new Condition<PsiClass>() -->Line_23 $$ return PsiSearchScopeUtil.isInScope(projectProductionScope, aClass)[ CD ]
Line_4 $$ if (languageClass == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_8 $$ final GlobalSearchScope projectProductionScope = GlobalSearchScopesCore.projectProductionScope(project)[ CD ]
Line_8 $$ final GlobalSearchScope projectProductionScope = GlobalSearchScopesCore.projectProductionScope(project)-->Line_23 $$ return PsiSearchScopeUtil.isInScope(projectProductionScope, aClass)[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_26 $$ final List<LanguageDefinition> projectDefinitions = collectProjectLanguages(projectLanguages, libraryDefinitions)[ CD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_4 $$ if (languageClass == null) [ CD ]
Line_8 $$ final GlobalSearchScope projectProductionScope = GlobalSearchScopesCore.projectProductionScope(project)-->Line_14 $$ GlobalSearchScope allScope = projectProductionScope.union(ProjectScope.getLibrariesScope(project))[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_19 $$ final Collection<PsiClass> projectLanguages = ContainerUtil.filter(allLanguages, new Condition<PsiClass>() [ CD ]
Line_7 $$ final Project project = context.getProject()-->Line_14 $$ GlobalSearchScope allScope = projectProductionScope.union(ProjectScope.getLibrariesScope(project))[ FD ]
Line_7 $$ final Project project = context.getProject()-->Line_8 $$ final GlobalSearchScope projectProductionScope = GlobalSearchScopesCore.projectProductionScope(project)[ FD ]
Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() -->Line_18 $$ final List<LanguageDefinition> libraryDefinitions = collectLibraryLanguages(context, allLanguages)[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_18 $$ final List<LanguageDefinition> libraryDefinitions = collectLibraryLanguages(context, allLanguages)[ FD ]
Line_2 $$ private static List<LanguageDefinition> collectLanguageDefinitions(final ConvertContext context) -->Line_27 $$ final List<LanguageDefinition> all = ContainerUtil.newArrayList(libraryDefinitions)[ CD ]
Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() -->Line_19 $$ final Collection<PsiClass> projectLanguages = ContainerUtil.filter(allLanguages, new Condition<PsiClass>() [ FD ]
Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() -->Line_15 $$ return Result.create(ClassInheritorsSearch.search(languageClass, allScope, true).findAll(), PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT)[ CD ]
Line_9 $$ final Collection<PsiClass> allLanguages = CachedValuesManager.getCachedValue(languageClass, new CachedValueProvider<Collection<PsiClass>>() -->Line_14 $$ GlobalSearchScope allScope = projectProductionScope.union(ProjectScope.getLibrariesScope(project))[ CD ]
Line_3 $$ final PsiClass languageClass = DomJavaUtil.findClass(Language.class.getName(), context.getInvocationElement())-->Line_15 $$ return Result.create(ClassInheritorsSearch.search(languageClass, allScope, true).findAll(), PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT)[ FD ]
Line_14 $$ GlobalSearchScope allScope = projectProductionScope.union(ProjectScope.getLibrariesScope(project))-->Line_15 $$ return Result.create(ClassInheritorsSearch.search(languageClass, allScope, true).findAll(), PsiModificationTracker.JAVA_STRUCTURE_MODIFICATION_COUNT)[ FD ]
