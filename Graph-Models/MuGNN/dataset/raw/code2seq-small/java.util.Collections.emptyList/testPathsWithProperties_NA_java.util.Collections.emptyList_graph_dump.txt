Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_9 $$ assertEquals(2, p.getBuild().getResources().size())[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_10 $$ assertResource(p.getBuild().getResources().get(0), pathFromBasedir("subDir/myRes"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ FD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_5 $$ assertSize(1, p.getBuild().getSources())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_16 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myTestClasses"), p.getBuild().getTestOutputDirectory())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_4 $$ MavenModel p = readProject(myProjectPom)[ CD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_12 $$ assertEquals(1, p.getBuild().getTestResources().size())[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_8 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myTestSrc"), p.getBuild().getTestSources().get(0))[ FD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_13 $$ assertResource(p.getBuild().getTestResources().get(0), pathFromBasedir("subDir/myTestRes"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_11 $$ assertResource(p.getBuild().getResources().get(1), pathFromBasedir("aaa/$[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_16 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myTestClasses"), p.getBuild().getTestOutputDirectory())[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_7 $$ assertSize(1, p.getBuild().getTestSources())[ FD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_10 $$ assertResource(p.getBuild().getResources().get(0), pathFromBasedir("subDir/myRes"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_12 $$ assertEquals(1, p.getBuild().getTestResources().size())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_11 $$ assertResource(p.getBuild().getResources().get(1), pathFromBasedir("aaa/$[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_15 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myClasses"), p.getBuild().getOutputDirectory())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_6 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/mySrc"), p.getBuild().getSources().get(0))[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_7 $$ assertSize(1, p.getBuild().getTestSources())[ CD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_6 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/mySrc"), p.getBuild().getSources().get(0))[ FD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_3 $$ createProjectPom("<properties>" + "  <foo>subDir</foo>" + "  <emptyProperty />" + "</properties>" + "<build>" + "  <sourceDirectory>$[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_14 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myOutput"), p.getBuild().getDirectory())[ CD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_8 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myTestSrc"), p.getBuild().getTestSources().get(0))[ CD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_14 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myOutput"), p.getBuild().getDirectory())[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_13 $$ assertResource(p.getBuild().getTestResources().get(0), pathFromBasedir("subDir/myTestRes"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ FD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_15 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("subDir/myClasses"), p.getBuild().getOutputDirectory())[ FD ]
Line_2 $$ public void testPathsWithProperties() throws Exception -->Line_9 $$ assertEquals(2, p.getBuild().getResources().size())[ CD ]
Line_4 $$ MavenModel p = readProject(myProjectPom)-->Line_5 $$ assertSize(1, p.getBuild().getSources())[ FD ]
