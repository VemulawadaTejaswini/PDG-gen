Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_3 $$ final PyArgumentList argumentList = callExpression.getArgumentList()[ CD ]
Line_12 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)-->Line_13 $$ return new PyCallExpression.PyArgumentsMapping(callExpression, markedCallee, mappingResults.getMappedParameters(), mappingResults.getUnmappedParameters(), mappingResults.getUnmappedArguments(), mappingResults.getParametersMappedToVariadicPositionalArguments(), mappingResults.getParametersMappedToVariadicKeywordArguments(), mappingResults.getMappedTupleParameters())[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_9 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)[ CD ]
Line_11 $$ final List<PyExpression> arguments = new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()))-->Line_12 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_13 $$ return new PyCallExpression.PyArgumentsMapping(callExpression, markedCallee, mappingResults.getMappedParameters(), mappingResults.getUnmappedParameters(), mappingResults.getUnmappedArguments(), mappingResults.getParametersMappedToVariadicPositionalArguments(), mappingResults.getParametersMappedToVariadicKeywordArguments(), mappingResults.getMappedTupleParameters())[ CD ]
Line_10 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())-->Line_12 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)[ FD ]
Line_3 $$ final PyArgumentList argumentList = callExpression.getArgumentList()-->Line_11 $$ final List<PyExpression> arguments = new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()))[ FD ]
Line_4 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)-->Line_10 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_8 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()[ CD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_11 $$ final List<PyExpression> arguments = new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()))[ CD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_8 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_5 $$ if (markedCallee == null || argumentList == null) [ CD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_10 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())[ CD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_4 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)[ CD ]
Line_5 $$ if (markedCallee == null || argumentList == null) -->Line_6 $$ return new PyCallExpression.PyArgumentsMapping(callExpression, null, Collections.<PyExpression, PyNamedParameter>emptyMap(), Collections.<PyParameter>emptyList(), Collections.<PyExpression>emptyList(), Collections.<PyNamedParameter>emptyList(), Collections.<PyNamedParameter>emptyList(), Collections.<PyExpression, PyTupleParameter>emptyMap())[ CD ]
Line_9 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)-->Line_10 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_3 $$ final PyArgumentList argumentList = callExpression.getArgumentList()[ FD ]
Line_4 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)-->Line_9 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_12 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)[ CD ]
Line_8 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_9 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)[ FD ]
Line_2 $$ public static PyCallExpression.PyArgumentsMapping mapArguments(@NotNull PyCallExpression callExpression, @NotNull PyResolveContext resolveContext, int implicitOffset) -->Line_4 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)[ FD ]
