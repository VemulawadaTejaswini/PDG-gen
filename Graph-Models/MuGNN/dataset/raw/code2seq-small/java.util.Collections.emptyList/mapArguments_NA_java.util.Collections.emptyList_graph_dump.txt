Line_13 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)-->Line_14 $$ return new PyCallExpression.PyArgumentsMapping(callExpression, markedCallee, mappingResults.getMappedParameters(), mappingResults.getUnmappedParameters(), mappingResults.getUnmappedArguments(), mappingResults.getParametersMappedToVariadicPositionalArguments(), mappingResults.getParametersMappedToVariadicKeywordArguments(), mappingResults.getMappedTupleParameters())[ FD ]
Line_4 $$ final PyArgumentList argumentList = callExpression.getArgumentList()-->Line_12 $$ final List<PyExpression> arguments = new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()))[ FD ]
Line_10 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)-->Line_11 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())[ FD ]
Line_12 $$ final List<PyExpression> arguments = new ArrayList<PyExpression>(Arrays.asList(argumentList.getArguments()))-->Line_13 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)[ FD ]
Line_11 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())-->Line_13 $$ final ArgumentMappingResults mappingResults = analyzeArguments(arguments, explicitParameters)[ FD ]
Line_9 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_10 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)[ FD ]
Line_5 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)-->Line_10 $$ final List<PyParameter> parameters = PyUtil.getParameters(markedCallee.getCallable(), context)[ FD ]
Line_5 $$ final PyCallExpression.PyMarkedCallee markedCallee = callExpression.resolveCallee(resolveContext, implicitOffset)-->Line_11 $$ final List<PyParameter> explicitParameters = dropImplicitParameters(parameters, markedCallee.getImplicitOffset())[ FD ]
Line_6 $$ if (markedCallee == null || argumentList == null) -->Line_7 $$ return new PyCallExpression.PyArgumentsMapping(callExpression, null, Collections.<PyExpression, PyNamedParameter>emptyMap(), Collections.<PyParameter>emptyList(), Collections.<PyExpression>emptyList(), Collections.<PyNamedParameter>emptyList(), Collections.<PyNamedParameter>emptyList(), Collections.<PyExpression, PyTupleParameter>emptyMap())[ CD ]
