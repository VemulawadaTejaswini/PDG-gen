Line_9 $$ if (myModuleSdks.containsKey(module)) -->Line_11 $$ if ((newSdk != null || oldSdk != null) && newSdk != oldSdk) [ CD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_5 $$ boolean needReparseOpenFiles = false[ CD ]
Line_22 $$ if (needReparseOpenFiles) -->Line_23 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_6 $$ for (Module module : modules) -->Line_10 $$ Sdk oldSdk = myModuleSdks.get(module)[ FD ]
Line_3 $$ Set<Sdk> updatedSdks = new HashSet<Sdk>()-->Line_17 $$ updatedSdks.add(newSdk)[ FD ]
Line_6 $$ for (Module module : modules) -->Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)[ FD ]
Line_6 $$ for (Module module : modules) -->Line_9 $$ if (myModuleSdks.containsKey(module)) [ FD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_30 $$ FileContentUtil.reparseFiles(project, Collections.<VirtualFile>emptyList(), true)[ FD ]
Line_7 $$ if (isPythonModule(module)) -->Line_9 $$ if (myModuleSdks.containsKey(module)) [ CD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_18 $$ updateSdkLanguageLevel(project, newSdk)[ FD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_22 $$ if (needReparseOpenFiles) [ CD ]
Line_27 $$ if (project.isDisposed()) -->Line_28 $$ return[ CD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_4 $$ final Module[] modules = ModuleManager.getInstance(project).getModules()[ FD ]
Line_6 $$ for (Module module : modules) -->Line_7 $$ if (isPythonModule(module)) [ FD ]
Line_16 $$ if (newSdk != null && !updatedSdks.contains(newSdk)) -->Line_17 $$ updatedSdks.add(newSdk)[ CD ]
Line_3 $$ Set<Sdk> updatedSdks = new HashSet<Sdk>()-->Line_16 $$ if (newSdk != null && !updatedSdks.contains(newSdk)) [ FD ]
Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)-->Line_15 $$ myModuleSdks.put(module, newSdk)[ FD ]
Line_23 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_30 $$ FileContentUtil.reparseFiles(project, Collections.<VirtualFile>emptyList(), true)[ CD ]
Line_23 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_27 $$ if (project.isDisposed()) [ CD ]
Line_11 $$ if ((newSdk != null || oldSdk != null) && newSdk != oldSdk) -->Line_12 $$ needReparseOpenFiles = true[ CD ]
Line_7 $$ if (isPythonModule(module)) -->Line_16 $$ if (newSdk != null && !updatedSdks.contains(newSdk)) [ CD ]
Line_6 $$ for (Module module : modules) -->Line_15 $$ myModuleSdks.put(module, newSdk)[ FD ]
Line_7 $$ if (isPythonModule(module)) -->Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)[ CD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_3 $$ Set<Sdk> updatedSdks = new HashSet<Sdk>()[ CD ]
Line_7 $$ if (isPythonModule(module)) -->Line_15 $$ myModuleSdks.put(module, newSdk)[ CD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_27 $$ if (project.isDisposed()) [ FD ]
Line_5 $$ boolean needReparseOpenFiles = false-->Line_12 $$ needReparseOpenFiles = true[ FD ]
Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)-->Line_17 $$ updatedSdks.add(newSdk)[ FD ]
Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)-->Line_18 $$ updateSdkLanguageLevel(project, newSdk)[ FD ]
Line_2 $$ public void afterRootsChanged(@NotNull final Project project) -->Line_4 $$ final Module[] modules = ModuleManager.getInstance(project).getModules()[ CD ]
Line_8 $$ Sdk newSdk = PythonSdkType.findPythonSdk(module)-->Line_16 $$ if (newSdk != null && !updatedSdks.contains(newSdk)) [ FD ]
Line_9 $$ if (myModuleSdks.containsKey(module)) -->Line_10 $$ Sdk oldSdk = myModuleSdks.get(module)[ CD ]
Line_16 $$ if (newSdk != null && !updatedSdks.contains(newSdk)) -->Line_18 $$ updateSdkLanguageLevel(project, newSdk)[ CD ]
