Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_7 $$ VfsUtil.saveText(res, "<project>" + "  <modelVersion>1.2.3</modelVersion>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "  <name>foo</name>" + "  <packaging>pom</packaging>" + "  <parent>" + "    <groupId>testParent</groupId>" + "    <artifactId>projectParent</artifactId>" + "    <version>2</version>" + "    <relativePath>../parent/pom.xml</relativePath>" + "  </parent>" + "  <build>" + "    <finalName>xxx</finalName>" + "    <defaultGoal>someGoal</defaultGoal>" + "    <sourceDirectory>mySrc</sourceDirectory>" + "    <testSourceDirectory>myTestSrc</testSourceDirectory>" + "    <scriptSourceDirectory>myScriptSrc</scriptSourceDirectory>" + "    <resources>" + "      <resource>" + "        <directory>myRes</directory>" + "        <filtering>true</filtering>" + "        <targetPath>dir</targetPath>" + "        <includes><include>**.properties</include></includes>" + "        <excludes><exclude>**.xml</exclude></excludes>" + "      </resource>" + "    </resources>" + "    <testResources>" + "      <testResource>" + "        <directory>myTestRes</directory>" + "        <includes><include>**.properties</include></includes>" + "      </testResource>" + "    </testResources>" + "    <directory>myOutput</directory>" + "    <outputDirectory>myClasses</outputDirectory>" + "    <testOutputDirectory>myTestClasses</testOutputDirectory>" + "  </build>" + "</project>")[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_12 $$ assertEquals("pom", p.getPackaging())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_11 $$ MavenModel p = readProject(file)[ FD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_24 $$ assertResource(p.getBuild().getTestResources().get(0), pathFromBasedir("myTestRes"), false, null, Collections.singletonList("**.properties"), Collections.<String>emptyList())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_26 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("myClasses"), p.getBuild().getOutputDirectory())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() [ CD ]
Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")-->Line_6 $$ result.setResult(res)[ FD ]
Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")-->Line_7 $$ VfsUtil.saveText(res, "<project>" + "  <modelVersion>1.2.3</modelVersion>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "  <name>foo</name>" + "  <packaging>pom</packaging>" + "  <parent>" + "    <groupId>testParent</groupId>" + "    <artifactId>projectParent</artifactId>" + "    <version>2</version>" + "    <relativePath>../parent/pom.xml</relativePath>" + "  </parent>" + "  <build>" + "    <finalName>xxx</finalName>" + "    <defaultGoal>someGoal</defaultGoal>" + "    <sourceDirectory>mySrc</sourceDirectory>" + "    <testSourceDirectory>myTestSrc</testSourceDirectory>" + "    <scriptSourceDirectory>myScriptSrc</scriptSourceDirectory>" + "    <resources>" + "      <resource>" + "        <directory>myRes</directory>" + "        <filtering>true</filtering>" + "        <targetPath>dir</targetPath>" + "        <includes><include>**.properties</include></includes>" + "        <excludes><exclude>**.xml</exclude></excludes>" + "      </resource>" + "    </resources>" + "    <testResources>" + "      <testResource>" + "        <directory>myTestRes</directory>" + "        <includes><include>**.properties</include></includes>" + "      </testResource>" + "    </testResources>" + "    <directory>myOutput</directory>" + "    <outputDirectory>myClasses</outputDirectory>" + "    <testOutputDirectory>myTestClasses</testOutputDirectory>" + "  </build>" + "</project>")[ FD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_18 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("mySrc"), p.getBuild().getSources().get(0))[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_6 $$ result.setResult(res)[ FD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_11 $$ MavenModel p = readProject(file)[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_13 $$ assertEquals("foo", p.getName())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_19 $$ assertSize(1, p.getBuild().getTestSources())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_10 $$ PsiDocumentManager.getInstance(myProject).commitAllDocuments()[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_14 $$ assertParent(p, "testParent", "projectParent", "2")[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_21 $$ assertEquals(1, p.getBuild().getResources().size())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_25 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("myOutput"), p.getBuild().getDirectory())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_16 $$ assertEquals("someGoal", p.getBuild().getDefaultGoal())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_17 $$ assertSize(1, p.getBuild().getSources())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_22 $$ assertResource(p.getBuild().getResources().get(0), pathFromBasedir("myRes"), true, "dir", Collections.singletonList("**.properties"), Collections.singletonList("**.xml"))[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_6 $$ result.setResult(res)[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_15 $$ assertEquals("xxx", p.getBuild().getFinalName())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_23 $$ assertEquals(1, p.getBuild().getTestResources().size())[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_27 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("myTestClasses"), p.getBuild().getTestOutputDirectory())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")[ CD ]
Line_2 $$ public void testCustomSettings() throws Exception -->Line_20 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("myTestSrc"), p.getBuild().getTestSources().get(0))[ CD ]
