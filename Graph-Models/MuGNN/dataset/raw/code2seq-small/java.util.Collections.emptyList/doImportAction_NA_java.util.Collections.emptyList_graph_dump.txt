Line_52 $$ if (currentInjections == null) -->Line_55 $$ Configuration.importInjections(currentInjections, importingInjections, originalInjections, newInjections)[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_24 $$ final Configuration cfg = Configuration.load(file.getInputStream())[ FD ]
Line_63 $$ if (n == 1) -->Line_64 $$ Messages.showInfoMessage(myProject, "One entry has been successfully imported", "Import Successful")[ CD ]
Line_25 $$ if (cfg == null) -->Line_27 $$ return[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_12 $$ return file.getFileType() == StdFileTypes.XML[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_19 $$ splitterData.externalizeFromDimensionService("IntelliLang.ImportSettingsKey.SplitterProportions")[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_12 $$ return file.getFileType() == StdFileTypes.XML[ FD ]
Line_30 $$ final Map<String, Set<InjInfo>> currentMap = ContainerUtil.classify(info.injectionInfos.iterator(), new Convertor<InjInfo, String>() -->Line_33 $$ return o.injection.getSupportId()[ CD ]
Line_61 $$ if (n > 1) -->Line_63 $$ if (n == 1) [ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_21 $$ if (file == null)[ CD ]
Line_25 $$ if (cfg == null) -->Line_26 $$ Messages.showWarningDialog(myProject, "The selected file does not contain any importable configuration.", "Nothing to Import")[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_7 $$ return super.isFileVisible(file, showHiddenFiles) && (file.isDirectory() || "xml".equals(file.getExtension()) || file.getFileType() == FileTypes.ARCHIVE)[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_21 $$ if (file == null)[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_20 $$ final VirtualFile file = FileChooser.chooseFile(descriptor, myProject, null)[ FD ]
Line_61 $$ if (n > 1) -->Line_62 $$ Messages.showInfoMessage(myProject, n + " entries have been successfully imported", "Import Successful")[ CD ]
Line_21 $$ if (file == null)-->Line_22 $$ return[ CD ]
Line_63 $$ if (n == 1) -->Line_66 $$ Messages.showInfoMessage(myProject, "No new entries have been imported", "Import")[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_17 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_17 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) [ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_17 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_16 $$ descriptor.setTitle("Import Configuration")[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_20 $$ final VirtualFile file = FileChooser.chooseFile(descriptor, myProject, null)[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_15 $$ descriptor.setDescription("Please select the configuration file (usually named IntelliLang.xml) to import.")[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_15 $$ descriptor.setDescription("Please select the configuration file (usually named IntelliLang.xml) to import.")[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_16 $$ descriptor.setTitle("Import Configuration")[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_7 $$ return super.isFileVisible(file, showHiddenFiles) && (file.isDirectory() || "xml".equals(file.getExtension()) || file.getFileType() == FileTypes.ARCHIVE)[ FD ]
Line_52 $$ if (currentInjections == null) -->Line_53 $$ newInjections.addAll(importingInjections)[ CD ]
