Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS()-->Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))[ FD ]
Line_2 $$ public void testTryModify() -->Line_6 $$ tracker.addInitialSSTables(copyOf(readers))[ CD ]
Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))-->Line_18 $$ readers.get(0).selfRef().release()[ FD ]
Line_2 $$ public void testTryModify() -->Line_4 $$ Tracker tracker = new Tracker(cfs, false)[ CD ]
Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) -->Line_11 $$ Assert.assertEquals(1, txn.originals().size())[ FD ]
Line_4 $$ Tracker tracker = new Tracker(cfs, false)-->Line_14 $$ try (LifecycleTransaction txn = tracker.tryModify(Collections.<SSTableReader>emptyList(), OperationType.COMPACTION)) [ FD ]
Line_2 $$ public void testTryModify() -->Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))[ CD ]
Line_4 $$ Tracker tracker = new Tracker(cfs, false)-->Line_7 $$ Assert.assertNull(tracker.tryModify(ImmutableList.of(MockSchema.sstable(0, cfs)), OperationType.COMPACTION))[ FD ]
Line_4 $$ Tracker tracker = new Tracker(cfs, false)-->Line_10 $$ Assert.assertNull(tracker.tryModify(readers.get(0), OperationType.COMPACTION))[ FD ]
Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))-->Line_6 $$ tracker.addInitialSSTables(copyOf(readers))[ FD ]
Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) -->Line_12 $$ Assert.assertTrue(txn.originals().contains(readers.get(0)))[ FD ]
Line_2 $$ public void testTryModify() -->Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS()[ CD ]
Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))-->Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) [ FD ]
Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) -->Line_15 $$ Assert.assertNotNull(txn)[ FD ]
Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))-->Line_10 $$ Assert.assertNull(tracker.tryModify(readers.get(0), OperationType.COMPACTION))[ FD ]
Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) -->Line_9 $$ Assert.assertNotNull(txn)[ FD ]
Line_2 $$ public void testTryModify() -->Line_7 $$ Assert.assertNull(tracker.tryModify(ImmutableList.of(MockSchema.sstable(0, cfs)), OperationType.COMPACTION))[ CD ]
Line_2 $$ public void testTryModify() -->Line_18 $$ readers.get(0).selfRef().release()[ CD ]
Line_4 $$ Tracker tracker = new Tracker(cfs, false)-->Line_6 $$ tracker.addInitialSSTables(copyOf(readers))[ FD ]
Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) -->Line_16 $$ Assert.assertEquals(0, txn.originals().size())[ FD ]
Line_4 $$ Tracker tracker = new Tracker(cfs, false)-->Line_8 $$ try (LifecycleTransaction txn = tracker.tryModify(readers.get(0), OperationType.COMPACTION)) [ FD ]
Line_5 $$ List<SSTableReader> readers = ImmutableList.of(MockSchema.sstable(0, true, cfs), MockSchema.sstable(1, cfs), MockSchema.sstable(2, cfs))-->Line_12 $$ Assert.assertTrue(txn.originals().contains(readers.get(0)))[ FD ]
Line_3 $$ ColumnFamilyStore cfs = MockSchema.newCFS()-->Line_7 $$ Assert.assertNull(tracker.tryModify(ImmutableList.of(MockSchema.sstable(0, cfs)), OperationType.COMPACTION))[ FD ]
