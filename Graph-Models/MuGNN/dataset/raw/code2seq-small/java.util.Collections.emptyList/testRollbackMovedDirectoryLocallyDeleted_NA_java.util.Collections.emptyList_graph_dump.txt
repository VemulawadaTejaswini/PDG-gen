Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_18 $$ runAndVerifyStatusSorted("D root" + File.separator + "source", "D root" + File.separator + "source" + File.separator + "s1.txt", "D root" + File.separator + "source" + File.separator + "s2.txt")[ CD ]
Line_12 $$ final File was = new File(tree.mySourceDir.getPath())-->Line_13 $$ Assert.assertNotSame(wasInitially, was)[ FD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_14 $$ disableSilentOperation(VcsConfiguration.StandardConfirmation.REMOVE)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_15 $$ VcsTestUtil.deleteFileInCommand(myProject, tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_12 $$ final File was = new File(tree.mySourceDir.getPath())[ CD ]
Line_5 $$ final File wasInitially = new File(tree.mySourceDir.getPath())-->Line_13 $$ Assert.assertNotSame(wasInitially, was)[ FD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_9 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_6 $$ Assert.assertTrue(wasInitially.exists())[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_10 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_7 $$ VcsTestUtil.moveFileInCommand(myProject, tree.mySourceDir, tree.myTargetDir)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_5 $$ final File wasInitially = new File(tree.mySourceDir.getPath())[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_17 $$ rollbackLocallyDeleted(Collections.<FilePath>singletonList(VcsUtil.getFilePath(was, true)), Collections.<FilePath>emptyList())[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_13 $$ Assert.assertNotSame(wasInitially, was)[ CD ]
Line_5 $$ final File wasInitially = new File(tree.mySourceDir.getPath())-->Line_8 $$ Assert.assertTrue(!wasInitially.exists())[ FD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_5 $$ final File wasInitially = new File(tree.mySourceDir.getPath())-->Line_6 $$ Assert.assertTrue(wasInitially.exists())[ FD ]
Line_12 $$ final File was = new File(tree.mySourceDir.getPath())-->Line_17 $$ rollbackLocallyDeleted(Collections.<FilePath>singletonList(VcsUtil.getFilePath(was, true)), Collections.<FilePath>emptyList())[ FD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_8 $$ Assert.assertTrue(!wasInitially.exists())[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_11 $$ final Change movedChange = assertMovedChange(tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackMovedDirectoryLocallyDeleted() throws Exception -->Line_16 $$ runAndVerifyStatusSorted("! root" + File.separator + "target" + File.separator + "source", "! root" + File.separator + "target" + File.separator + "source" + File.separator + "s1.txt", "! root" + File.separator + "target" + File.separator + "source" + File.separator + "s2.txt", "D root" + File.separator + "source", "D root" + File.separator + "source" + File.separator + "s1.txt", "D root" + File.separator + "source" + File.separator + "s2.txt")[ CD ]
