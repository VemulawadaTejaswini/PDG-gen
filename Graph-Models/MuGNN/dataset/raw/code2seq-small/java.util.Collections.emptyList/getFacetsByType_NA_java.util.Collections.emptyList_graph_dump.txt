Line_9 $$ for (FacetTypeId id : typeToFacets.keySet()) -->Line_11 $$ typeToFacetsCollection.put(id, Collections.unmodifiableCollection(facets))[ FD ]
Line_2 $$ public <F extends Facet> Collection<F> getFacetsByType(FacetTypeId<F> typeId) -->Line_15 $$ final Collection<F> facets = (Collection<F>) myType2Facets.get(typeId)[ FD ]
Line_3 $$ if (myType2Facets == null) -->Line_8 $$ Map<FacetTypeId, Collection<Facet>> typeToFacetsCollection = new HashMap<FacetTypeId, Collection<Facet>>()[ CD ]
Line_9 $$ for (FacetTypeId id : typeToFacets.keySet()) -->Line_10 $$ final Collection<Facet> facets = typeToFacets.get(id)[ FD ]
Line_2 $$ public <F extends Facet> Collection<F> getFacetsByType(FacetTypeId<F> typeId) -->Line_16 $$ return facets != null ? facets : Collections.<F>emptyList()[ CD ]
Line_4 $$ MultiValuesMap<FacetTypeId, Facet> typeToFacets = new MultiValuesMap<FacetTypeId, Facet>()-->Line_10 $$ final Collection<Facet> facets = typeToFacets.get(id)[ FD ]
Line_4 $$ MultiValuesMap<FacetTypeId, Facet> typeToFacets = new MultiValuesMap<FacetTypeId, Facet>()-->Line_9 $$ for (FacetTypeId id : typeToFacets.keySet()) [ FD ]
Line_10 $$ final Collection<Facet> facets = typeToFacets.get(id)-->Line_11 $$ typeToFacetsCollection.put(id, Collections.unmodifiableCollection(facets))[ FD ]
Line_5 $$ for (Facet facet : getAllFacets()) -->Line_6 $$ typeToFacets.put(facet.getTypeId(), facet)[ FD ]
Line_4 $$ MultiValuesMap<FacetTypeId, Facet> typeToFacets = new MultiValuesMap<FacetTypeId, Facet>()-->Line_6 $$ typeToFacets.put(facet.getTypeId(), facet)[ FD ]
Line_2 $$ public <F extends Facet> Collection<F> getFacetsByType(FacetTypeId<F> typeId) -->Line_3 $$ if (myType2Facets == null) [ CD ]
Line_8 $$ Map<FacetTypeId, Collection<Facet>> typeToFacetsCollection = new HashMap<FacetTypeId, Collection<Facet>>()-->Line_11 $$ typeToFacetsCollection.put(id, Collections.unmodifiableCollection(facets))[ FD ]
Line_3 $$ if (myType2Facets == null) -->Line_4 $$ MultiValuesMap<FacetTypeId, Facet> typeToFacets = new MultiValuesMap<FacetTypeId, Facet>()[ CD ]
