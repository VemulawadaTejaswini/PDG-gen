Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_23 $$ IElementType type = node.getElementType()[ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_26 $$ reportStubAstMismatch("Stub list is less than AST, last AST element: " + node.getElementType() + " " + node, stubTree, cachedDocument)[ FD ]
Line_20 $$ if (parent != null && builder.skipChildProcessingWhenBuildingStubs(parent, node)) -->Line_21 $$ return[ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_13 $$ LazyParseableElement.setSuppressEagerPsiCreation(true)[ CD ]
Line_28 $$ final StubElement stub = stubs.next()-->Line_32 $$ PsiElement psi = stub.getPsi()[ FD ]
Line_10 $$ final IStubFileElementType elementType = getElementTypeForStubBuilder()-->Line_12 $$ final StubBuilder builder = elementType.getBuilder()[ FD ]
Line_28 $$ final StubElement stub = stubs.next()-->Line_33 $$ assert psi != null : "Stub " + stub + " (" + stub.getClass() + ") has returned null PSI"[ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_12 $$ final StubBuilder builder = elementType.getBuilder()[ CD ]
Line_28 $$ final StubElement stub = stubs.next()-->Line_29 $$ if (stub.getStubType() != node.getElementType()) [ FD ]
Line_19 $$ CompositeElement parent = node.getTreeParent()-->Line_20 $$ if (parent != null && builder.skipChildProcessingWhenBuildingStubs(parent, node)) [ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_6 $$ final Iterator<StubElement<?>> stubs = stubTree.getPlainList().iterator()[ FD ]
Line_6 $$ final Iterator<StubElement<?>> stubs = stubTree.getPlainList().iterator()-->Line_25 $$ if (!stubs.hasNext()) [ FD ]
Line_25 $$ if (!stubs.hasNext()) -->Line_26 $$ reportStubAstMismatch("Stub list is less than AST, last AST element: " + node.getElementType() + " " + node, stubTree, cachedDocument)[ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_10 $$ final IStubFileElementType elementType = getElementTypeForStubBuilder()[ CD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_29 $$ if (stub.getStubType() != node.getElementType()) [ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_9 $$ final List<Pair<StubBasedPsiElementBase, CompositeElement>> result = ContainerUtil.newArrayList()[ CD ]
Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) -->Line_34 $$ result.add(Pair.create((StubBasedPsiElementBase) psi, (CompositeElement) node))[ CD ]
Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) -->Line_29 $$ if (stub.getStubType() != node.getElementType()) [ CD ]
Line_6 $$ final Iterator<StubElement<?>> stubs = stubTree.getPlainList().iterator()-->Line_42 $$ if (stubs.hasNext()) [ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_30 $$ reportStubAstMismatch("Stub and PSI element type mismatch in " + getName() + ": stub " + stub + ", AST " + node.getElementType() + "; " + node, stubTree, cachedDocument)[ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) [ CD ]
Line_42 $$ if (stubs.hasNext()) -->Line_43 $$ reportStubAstMismatch("Stub list in " + getName() + " has more elements than PSI", stubTree, cachedDocument)[ CD ]
Line_29 $$ if (stub.getStubType() != node.getElementType()) -->Line_30 $$ reportStubAstMismatch("Stub and PSI element type mismatch in " + getName() + ": stub " + stub + ", AST " + node.getElementType() + "; " + node, stubTree, cachedDocument)[ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_43 $$ reportStubAstMismatch("Stub list in " + getName() + " has more elements than PSI", stubTree, cachedDocument)[ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_3 $$ if (stubTree == null) [ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_19 $$ CompositeElement parent = node.getTreeParent()[ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_36 $$ super.visitNode(node)[ CD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_20 $$ if (parent != null && builder.skipChildProcessingWhenBuildingStubs(parent, node)) [ CD ]
Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) -->Line_28 $$ final StubElement stub = stubs.next()[ CD ]
Line_12 $$ final StubBuilder builder = elementType.getBuilder()-->Line_20 $$ if (parent != null && builder.skipChildProcessingWhenBuildingStubs(parent, node)) [ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_3 $$ if (stubTree == null) [ CD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) [ FD ]
Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) -->Line_25 $$ if (!stubs.hasNext()) [ CD ]
Line_9 $$ final List<Pair<StubBasedPsiElementBase, CompositeElement>> result = ContainerUtil.newArrayList()-->Line_34 $$ result.add(Pair.create((StubBasedPsiElementBase) psi, (CompositeElement) node))[ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_20 $$ if (parent != null && builder.skipChildProcessingWhenBuildingStubs(parent, node)) [ FD ]
Line_24 $$ if (type instanceof IStubElementType && ((IStubElementType) type).shouldCreateStub(node)) -->Line_32 $$ PsiElement psi = stub.getPsi()[ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_26 $$ reportStubAstMismatch("Stub list is less than AST, last AST element: " + node.getElementType() + " " + node, stubTree, cachedDocument)[ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_42 $$ if (stubs.hasNext()) [ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_6 $$ final Iterator<StubElement<?>> stubs = stubTree.getPlainList().iterator()[ CD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_23 $$ IElementType type = node.getElementType()[ CD ]
Line_6 $$ final Iterator<StubElement<?>> stubs = stubTree.getPlainList().iterator()-->Line_28 $$ final StubElement stub = stubs.next()[ FD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_36 $$ super.visitNode(node)[ FD ]
Line_3 $$ if (stubTree == null) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_15 $$ ((TreeElement) root).acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_19 $$ CompositeElement parent = node.getTreeParent()[ CD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_30 $$ reportStubAstMismatch("Stub and PSI element type mismatch in " + getName() + ": stub " + stub + ", AST " + node.getElementType() + "; " + node, stubTree, cachedDocument)[ FD ]
Line_2 $$ private List<Pair<StubBasedPsiElementBase, CompositeElement>> calcStubAstBindings(final ASTNode root, final Document cachedDocument, final StubTree stubTree) -->Line_45 $$ return result[ CD ]
