Line_27 $$ if (range.isEmpty()) -->Line_30 $$ if (intersection.isEmpty()) [ CD ]
Line_23 $$ if (count == 1) -->Line_24 $$ result = intersection[ CD ]
Line_29 $$ count = 1-->Line_39 $$ count--[ FD ]
Line_30 $$ if (intersection.isEmpty()) -->Line_31 $$ count = 1[ CD ]
Line_30 $$ if (intersection.isEmpty()) -->Line_36 $$ result = list[ CD ]
Line_27 $$ if (range.isEmpty()) -->Line_29 $$ count = 1[ CD ]
Line_11 $$ Place shreds = InjectedLanguageUtil.getShreds(injectedPsi)-->Line_12 $$ if (shreds == null)[ FD ]
Line_24 $$ result = intersection-->Line_28 $$ result = intersection[ FD ]
Line_26 $$ TextRange range = (TextRange) result-->Line_34 $$ list.add(range)[ FD ]
Line_38 $$ if (intersection.isEmpty()) -->Line_41 $$ ((List<TextRange>) result).add(intersection)[ CD ]
Line_33 $$ List<TextRange> list = new ArrayList<TextRange>()-->Line_35 $$ list.add(intersection)[ FD ]
Line_16 $$ int count = 0-->Line_29 $$ count = 1[ FD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_38 $$ if (intersection.isEmpty()) [ FD ]
Line_21 $$ if (intersection != null) -->Line_23 $$ if (count == 1) [ CD ]
Line_25 $$ if (count == 2) -->Line_27 $$ if (range.isEmpty()) [ CD ]
Line_30 $$ if (intersection.isEmpty()) -->Line_35 $$ list.add(intersection)[ CD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_21 $$ if (intersection != null) [ FD ]
Line_16 $$ int count = 0-->Line_23 $$ if (count == 1) [ FD ]
Line_16 $$ int count = 0-->Line_22 $$ count++[ FD ]
Line_16 $$ int count = 0-->Line_25 $$ if (count == 2) [ FD ]
Line_16 $$ int count = 0-->Line_39 $$ count--[ FD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_41 $$ ((List<TextRange>) result).add(intersection)[ FD ]
Line_33 $$ List<TextRange> list = new ArrayList<TextRange>()-->Line_34 $$ list.add(range)[ FD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_24 $$ result = intersection[ FD ]
Line_18 $$ for (PsiLanguageInjectionHost.Shred shred : shreds) -->Line_44 $$ offset += shred.getPrefix().length() + shred.getRangeInsideHost().getLength() + shred.getSuffix().length()[ FD ]
Line_24 $$ result = intersection-->Line_36 $$ result = list[ FD ]
Line_18 $$ for (PsiLanguageInjectionHost.Shred shred : shreds) -->Line_19 $$ TextRange encodedRange = TextRange.from(offset + shred.getPrefix().length(), shred.getRangeInsideHost().getLength())[ FD ]
Line_17 $$ int offset = 0-->Line_44 $$ offset += shred.getPrefix().length() + shred.getRangeInsideHost().getLength() + shred.getSuffix().length()[ FD ]
Line_25 $$ if (count == 2) -->Line_38 $$ if (intersection.isEmpty()) [ CD ]
Line_33 $$ List<TextRange> list = new ArrayList<TextRange>()-->Line_36 $$ result = list[ FD ]
Line_38 $$ if (intersection.isEmpty()) -->Line_39 $$ count--[ CD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_30 $$ if (intersection.isEmpty()) [ FD ]
Line_25 $$ if (count == 2) -->Line_26 $$ TextRange range = (TextRange) result[ CD ]
Line_28 $$ result = intersection-->Line_36 $$ result = list[ FD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_35 $$ list.add(intersection)[ FD ]
Line_30 $$ if (intersection.isEmpty()) -->Line_34 $$ list.add(range)[ CD ]
Line_29 $$ count = 1-->Line_31 $$ count = 1[ FD ]
Line_23 $$ if (count == 1) -->Line_25 $$ if (count == 2) [ CD ]
Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)-->Line_28 $$ result = intersection[ FD ]
Line_21 $$ if (intersection != null) -->Line_22 $$ count++[ CD ]
Line_31 $$ count = 1-->Line_39 $$ count--[ FD ]
Line_16 $$ int count = 0-->Line_31 $$ count = 1[ FD ]
Line_19 $$ TextRange encodedRange = TextRange.from(offset + shred.getPrefix().length(), shred.getRangeInsideHost().getLength())-->Line_20 $$ TextRange intersection = encodedRange.intersection(rangeToEdit)[ FD ]
Line_30 $$ if (intersection.isEmpty()) -->Line_33 $$ List<TextRange> list = new ArrayList<TextRange>()[ CD ]
Line_27 $$ if (range.isEmpty()) -->Line_28 $$ result = intersection[ CD ]
Line_26 $$ TextRange range = (TextRange) result-->Line_27 $$ if (range.isEmpty()) [ FD ]
Line_12 $$ if (shreds == null)-->Line_13 $$ return Collections.emptyList()[ CD ]
