Line_16 $$ if (sb != null) -->Line_17 $$ sb.append("File is of dom file type\n")[ CD ]
Line_42 $$ ObjectStubTree stubTree = StubTreeLoader.getInstance().readOrBuild(myXmlFile.getProject(), file, myXmlFile)-->Line_44 $$ stub = (FileStub) stubTree.getRoot()[ FD ]
Line_19 $$ final DomFileDescription<T> description = findFileDescription(rootTagName, sb)-->Line_30 $$ if (description == null) [ FD ]
Line_26 $$ if (fireEvents) -->Line_27 $$ events.add(new DomEvent(oldValue, false))[ CD ]
Line_52 $$ if (fireEvents) -->Line_53 $$ events.add(new DomEvent(result, true))[ CD ]
Line_21 $$ if (sb != null) -->Line_22 $$ sb.append("last " + oldValue + "\n")[ CD ]
Line_42 $$ ObjectStubTree stubTree = StubTreeLoader.getInstance().readOrBuild(myXmlFile.getProject(), file, myXmlFile)-->Line_43 $$ if (stubTree != null) [ FD ]
Line_20 $$ final DomFileElementImpl oldValue = getLastValue()-->Line_25 $$ if (oldValue != null) [ FD ]
Line_24 $$ final List<DomEvent> events = fireEvents ? new SmartList<DomEvent>() : Collections.<DomEvent>emptyList()-->Line_53 $$ events.add(new DomEvent(result, true))[ FD ]
Line_37 $$ VirtualFile file = myXmlFile.getVirtualFile()-->Line_42 $$ ObjectStubTree stubTree = StubTreeLoader.getInstance().readOrBuild(myXmlFile.getProject(), file, myXmlFile)[ FD ]
Line_10 $$ if (sb != null) -->Line_11 $$ sb.append("File is valid\n")[ CD ]
Line_41 $$ if (!XmlUtil.isStubBuilding()) -->Line_42 $$ ObjectStubTree stubTree = StubTreeLoader.getInstance().readOrBuild(myXmlFile.getProject(), file, myXmlFile)[ CD ]
Line_30 $$ if (description == null) -->Line_31 $$ return null[ CD ]
Line_13 $$ if (!(myXmlFile.getFileType() instanceof DomSupportEnabled)) -->Line_14 $$ return null[ CD ]
Line_34 $$ final XmlName xmlName = DomImplUtil.createXmlName(description.getRootTagName(), rootElementClass, null)-->Line_36 $$ final EvaluatedXmlNameImpl rootTagName1 = EvaluatedXmlNameImpl.createEvaluatedXmlName(xmlName, xmlName.getNamespaceKey(), false)[ FD ]
Line_33 $$ final Class<T> rootElementClass = description.getRootElementClass()-->Line_34 $$ final XmlName xmlName = DomImplUtil.createXmlName(description.getRootTagName(), rootElementClass, null)[ FD ]
Line_38 $$ FileStub stub = null-->Line_44 $$ stub = (FileStub) stubTree.getRoot()[ FD ]
Line_7 $$ if (!myXmlFile.isValid()) -->Line_8 $$ return null[ CD ]
Line_41 $$ if (!XmlUtil.isStubBuilding()) -->Line_43 $$ if (stubTree != null) [ CD ]
Line_39 $$ if (description.hasStubs() && file instanceof VirtualFileWithId && !isFileParsed()) -->Line_41 $$ if (!XmlUtil.isStubBuilding()) [ CD ]
Line_24 $$ final List<DomEvent> events = fireEvents ? new SmartList<DomEvent>() : Collections.<DomEvent>emptyList()-->Line_27 $$ events.add(new DomEvent(oldValue, false))[ FD ]
Line_19 $$ final DomFileDescription<T> description = findFileDescription(rootTagName, sb)-->Line_34 $$ final XmlName xmlName = DomImplUtil.createXmlName(description.getRootTagName(), rootElementClass, null)[ FD ]
Line_19 $$ final DomFileDescription<T> description = findFileDescription(rootTagName, sb)-->Line_39 $$ if (description.hasStubs() && file instanceof VirtualFileWithId && !isFileParsed()) [ FD ]
Line_49 $$ if (sb != null) -->Line_50 $$ sb.append("success " + result + "\n")[ CD ]
Line_19 $$ final DomFileDescription<T> description = findFileDescription(rootTagName, sb)-->Line_33 $$ final Class<T> rootElementClass = description.getRootElementClass()[ FD ]
Line_25 $$ if (oldValue != null) -->Line_26 $$ if (fireEvents) [ CD ]
Line_43 $$ if (stubTree != null) -->Line_44 $$ stub = (FileStub) stubTree.getRoot()[ CD ]
Line_39 $$ if (description.hasStubs() && file instanceof VirtualFileWithId && !isFileParsed()) -->Line_40 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_4 $$ if (sb != null) -->Line_5 $$ sb.append(rootTagName).append("\n")[ CD ]
