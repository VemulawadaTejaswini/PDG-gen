Line_7 $$ constraint = getLiteralConstraint(op1)-->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_3 $$ int parameter = resolveParameter(op1)-->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_3 $$ int parameter = resolveParameter(op1)[ CD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)[ CD ]
Line_13 $$ if (!(getParameter(parameter).getType() instanceof PsiPrimitiveType)) -->Line_14 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, NULL_VALUE, equality ? FALSE_VALUE : TRUE_VALUE))[ CD ]
Line_11 $$ for (ValueConstraint[] state : states) -->Line_14 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, NULL_VALUE, equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_9 $$ if (parameter >= 0 && constraint != null) [ CD ]
Line_6 $$ parameter = resolveParameter(op2)-->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_7 $$ constraint = getLiteralConstraint(op1)-->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_6 $$ parameter = resolveParameter(op2)-->Line_14 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, NULL_VALUE, equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_5 $$ if (parameter < 0 || constraint == null) [ CD ]
Line_10 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_14 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, NULL_VALUE, equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_3 $$ int parameter = resolveParameter(op1)-->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)-->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)[ FD ]
Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)-->Line_7 $$ constraint = getLiteralConstraint(op1)[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_6 $$ parameter = resolveParameter(op2)[ FD ]
Line_3 $$ int parameter = resolveParameter(op1)-->Line_14 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, NULL_VALUE, equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)-->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_7 $$ constraint = getLiteralConstraint(op1)[ FD ]
Line_3 $$ int parameter = resolveParameter(op1)-->Line_13 $$ if (!(getParameter(parameter).getType() instanceof PsiPrimitiveType)) [ FD ]
Line_3 $$ int parameter = resolveParameter(op1)-->Line_6 $$ parameter = resolveParameter(op2)[ FD ]
Line_7 $$ constraint = getLiteralConstraint(op1)-->Line_12 $$ if (constraint == NOT_NULL_VALUE) [ FD ]
Line_11 $$ for (ValueConstraint[] state : states) -->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_6 $$ parameter = resolveParameter(op2)-->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_9 $$ if (parameter >= 0 && constraint != null) -->Line_10 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_23 $$ return Collections.emptyList()[ CD ]
Line_4 $$ ValueConstraint constraint = getLiteralConstraint(op2)-->Line_12 $$ if (constraint == NOT_NULL_VALUE) [ FD ]
Line_2 $$ private List<MethodContract> visitEqualityComparison(List<ValueConstraint[]> states, PsiExpression op1, PsiExpression op2, boolean equality) -->Line_3 $$ int parameter = resolveParameter(op1)[ FD ]
Line_11 $$ for (ValueConstraint[] state : states) -->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_9 $$ if (parameter >= 0 && constraint != null) -->Line_21 $$ return result[ CD ]
Line_10 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ FD ]
Line_12 $$ if (constraint == NOT_NULL_VALUE) -->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ CD ]
Line_10 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_18 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, negateConstraint(constraint), equality ? FALSE_VALUE : TRUE_VALUE))[ FD ]
Line_5 $$ if (parameter < 0 || constraint == null) -->Line_6 $$ parameter = resolveParameter(op2)[ CD ]
Line_12 $$ if (constraint == NOT_NULL_VALUE) -->Line_17 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, parameter, constraint, equality ? TRUE_VALUE : FALSE_VALUE))[ CD ]
Line_12 $$ if (constraint == NOT_NULL_VALUE) -->Line_13 $$ if (!(getParameter(parameter).getType() instanceof PsiPrimitiveType)) [ CD ]
Line_6 $$ parameter = resolveParameter(op2)-->Line_13 $$ if (!(getParameter(parameter).getType() instanceof PsiPrimitiveType)) [ FD ]
Line_5 $$ if (parameter < 0 || constraint == null) -->Line_7 $$ constraint = getLiteralConstraint(op1)[ CD ]
