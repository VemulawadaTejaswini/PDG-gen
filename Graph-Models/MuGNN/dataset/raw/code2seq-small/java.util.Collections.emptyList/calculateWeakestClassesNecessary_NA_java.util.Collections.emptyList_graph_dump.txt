Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_68 $$ if (referenceParent instanceof PsiExpressionList) [ FD ]
Line_172 $$ if (innerClass == null) -->Line_173 $$ return Collections.emptyList()[ CD ]
Line_102 $$ if (referenceParent instanceof PsiReturnStatement) -->Line_105 $$ if (owner instanceof PsiMethod) [ CD ]
Line_7 $$ if (variableOrMethod instanceof PsiMethod) -->Line_8 $$ final PsiMethod method = (PsiMethod) variableOrMethod[ CD ]
Line_165 $$ if (qualifier != null) -->Line_171 $$ final PsiClass innerClass = classType.resolve()[ CD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_158 $$ if (referenceParent instanceof PsiIfStatement) -->Line_159 $$ return Collections.emptyList()[ CD ]
Line_57 $$ referenceElement = referenceParent-->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_7 $$ if (variableOrMethod instanceof PsiMethod) [ FD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_141 $$ if (!checkType(type, weakestTypeClasses)) [ CD ]
Line_57 $$ referenceElement = referenceParent-->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ FD ]
Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)-->Line_30 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_165 $$ if (qualifier != null) -->Line_172 $$ if (innerClass == null) [ CD ]
Line_171 $$ final PsiClass innerClass = classType.resolve()-->Line_172 $$ if (innerClass == null) [ FD ]
Line_10 $$ if (PsiType.VOID.equals(variableOrMethodType)) -->Line_11 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_27 $$ final PsiClass lowerBoundClass[ CD ]
Line_165 $$ if (qualifier != null) -->Line_170 $$ final PsiClassType classType = (PsiClassType) type[ CD ]
Line_6 $$ variableOrMethodType = variable.getType()-->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) [ FD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_117 $$ final PsiElement target = referenceExpression.resolve()[ CD ]
Line_94 $$ if (!Comparing.equal(foreachStatement.getIteratedValue(), referenceElement)) -->Line_95 $$ return Collections.emptyList()[ CD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_33 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) [ FD ]
Line_170 $$ final PsiClassType classType = (PsiClassType) type-->Line_171 $$ final PsiClass innerClass = classType.resolve()[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_57 $$ referenceElement = referenceParent[ FD ]
Line_3 $$ final PsiType variableOrMethodType-->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ FD ]
Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) -->Line_147 $$ if (variableOrMethodType.equals(type)) [ CD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())[ CD ]
Line_68 $$ if (referenceParent instanceof PsiExpressionList) -->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ CD ]
Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) -->Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()[ CD ]
Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)-->Line_45 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_76 $$ if (referenceGrandParent instanceof PsiMethodCallExpression) -->Line_78 $$ if (PsiUtil.skipParenthesizedExprUp(methodCallExpression.getParent()) instanceof PsiTypeCastExpression || !findWeakestType(methodCallExpression, weakestTypeClasses)) [ CD ]
Line_103 $$ final PsiElement owner = PsiTreeUtil.getParentOfType(referenceParent, PsiMethod.class, PsiLambdaExpression.class)-->Line_105 $$ if (owner instanceof PsiMethod) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_16 $$ if (!(variableOrMethodType instanceof PsiClassType)) [ CD ]
Line_165 $$ if (qualifier != null) -->Line_166 $$ final PsiType type = newExpression.getType()[ CD ]
Line_164 $$ final PsiExpression qualifier = newExpression.getQualifier()-->Line_165 $$ if (qualifier != null) [ FD ]
Line_147 $$ if (variableOrMethodType.equals(type)) -->Line_148 $$ if (!checkType(type, weakestTypeClasses)) [ CD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_101 $$ checkClass(javaLangIterableClass, weakestTypeClasses)[ CD ]
Line_154 $$ if (referenceParent instanceof PsiPrefixExpression) -->Line_155 $$ return Collections.emptyList()[ CD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) [ CD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_58 $$ referenceParent = referenceElement.getParent()[ FD ]
Line_9 $$ variableOrMethodType = method.getReturnType()-->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ FD ]
Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()-->Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()-->Line_30 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_102 $$ if (referenceParent instanceof PsiReturnStatement) [ FD ]
Line_48 $$ boolean hasUsages = false-->Line_185 $$ if (!hasUsages) [ FD ]
Line_137 $$ if (referenceElement.equals(condition)) -->Line_138 $$ return Collections.emptyList()[ CD ]
Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())-->Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)[ FD ]
Line_57 $$ referenceElement = referenceParent-->Line_58 $$ referenceParent = referenceElement.getParent()[ FD ]
Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) -->Line_146 $$ final PsiType type = binaryExpression.getType()[ CD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_30 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ CD ]
Line_34 $$ final PsiResourceVariable resourceVariable = (PsiResourceVariable) variableOrMethod-->Line_35 $$ final String methodCallText = resourceVariable.getName() + ".close()"[ FD ]
Line_116 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) referenceParent-->Line_117 $$ final PsiElement target = referenceExpression.resolve()[ FD ]
Line_106 $$ type = ((PsiMethod) owner).getReturnType()-->Line_112 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_130 $$ final PsiThrowStatement throwStatement = (PsiThrowStatement) referenceParent-->Line_131 $$ if (!findWeakestType(throwStatement, variableOrMethodClass, weakestTypeClasses)) [ FD ]
Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) -->Line_74 $$ return Collections.emptyList()[ CD ]
Line_135 $$ final PsiConditionalExpression conditionalExpression = (PsiConditionalExpression) referenceParent-->Line_140 $$ final PsiType type = ExpectedTypeUtils.findExpectedType(conditionalExpression, true)[ FD ]
Line_129 $$ if (referenceParent instanceof PsiThrowStatement) -->Line_130 $$ final PsiThrowStatement throwStatement = (PsiThrowStatement) referenceParent[ CD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_141 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) [ FD ]
Line_163 $$ final PsiNewExpression newExpression = (PsiNewExpression) referenceParent-->Line_166 $$ final PsiType type = newExpression.getType()[ FD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) [ FD ]
Line_19 $$ final PsiClassType variableOrMethodClassType = (PsiClassType) variableOrMethodType-->Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()[ FD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ FD ]
Line_76 $$ if (referenceGrandParent instanceof PsiMethodCallExpression) -->Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) [ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ FD ]
Line_106 $$ type = ((PsiMethod) owner).getReturnType()-->Line_148 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_47 $$ final Query<PsiReference> query = ReferencesSearch.search(variableOrMethod, variableOrMethod.getUseScope())[ CD ]
Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) -->Line_126 $$ if (!findWeakestType(arrayInitializerExpression, weakestTypeClasses)) [ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_131 $$ if (!findWeakestType(throwStatement, variableOrMethodClass, weakestTypeClasses)) [ FD ]
Line_4 $$ if (variableOrMethod instanceof PsiVariable) -->Line_5 $$ final PsiVariable variable = (PsiVariable) variableOrMethod[ CD ]
Line_160 $$ if (referenceParent instanceof PsiForStatement) -->Line_161 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())[ CD ]
Line_185 $$ if (!hasUsages) -->Line_186 $$ return Collections.emptyList()[ CD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_45 $$ weakestTypeClasses.add(lowerBoundClass)[ CD ]
Line_163 $$ final PsiNewExpression newExpression = (PsiNewExpression) referenceParent-->Line_164 $$ final PsiExpression qualifier = newExpression.getQualifier()[ FD ]
Line_102 $$ if (referenceParent instanceof PsiReturnStatement) -->Line_103 $$ final PsiElement owner = PsiTreeUtil.getParentOfType(referenceParent, PsiMethod.class, PsiLambdaExpression.class)[ CD ]
Line_4 $$ if (variableOrMethod instanceof PsiVariable) -->Line_7 $$ if (variableOrMethod instanceof PsiMethod) [ CD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_106 $$ type = ((PsiMethod) owner).getReturnType()[ FD ]
Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())-->Line_37 $$ if (!findWeakestType(methodCallExpression, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ FD ]
Line_68 $$ if (referenceParent instanceof PsiExpressionList) -->Line_76 $$ if (referenceGrandParent instanceof PsiMethodCallExpression) [ CD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_97 $$ final PsiClass javaLangIterableClass = facade.findClass(CommonClassNames.JAVA_LANG_ITERABLE, scope)[ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_160 $$ if (referenceParent instanceof PsiForStatement) [ FD ]
Line_126 $$ if (!findWeakestType(arrayInitializerExpression, weakestTypeClasses)) -->Line_127 $$ return Collections.emptyList()[ CD ]
Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) -->Line_84 $$ return Collections.emptyList()[ CD ]
Line_4 $$ if (variableOrMethod instanceof PsiVariable) -->Line_6 $$ variableOrMethodType = variable.getType()[ CD ]
Line_34 $$ final PsiResourceVariable resourceVariable = (PsiResourceVariable) variableOrMethod-->Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())[ FD ]
Line_86 $$ if (referenceParent instanceof PsiVariable) -->Line_88 $$ final PsiType type = variable.getType()[ CD ]
Line_30 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) -->Line_31 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_189 $$ return weakestTypeClasses[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_21 $$ if (variableOrMethodClass == null || variableOrMethodClass instanceof PsiTypeParameter) [ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_45 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_5 $$ final PsiVariable variable = (PsiVariable) variableOrMethod-->Line_6 $$ variableOrMethodType = variable.getType()[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_19 $$ final PsiClassType variableOrMethodClassType = (PsiClassType) variableOrMethodType[ CD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_55 $$ PsiElement referenceParent = referenceElement.getParent()[ FD ]
Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()-->Line_188 $$ weakestTypeClasses = filterAccessibleClasses(weakestTypeClasses, variableOrMethodClass, variableOrMethod)[ FD ]
Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) -->Line_62 $$ final PsiMethodReferenceExpression methodReferenceExpression = (PsiMethodReferenceExpression) reference[ CD ]
Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) -->Line_90 $$ return Collections.emptyList()[ CD ]
Line_48 $$ boolean hasUsages = false-->Line_53 $$ hasUsages = true[ FD ]
Line_152 $$ if (referenceParent instanceof PsiSwitchStatement) -->Line_154 $$ if (referenceParent instanceof PsiPrefixExpression) [ CD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_154 $$ if (referenceParent instanceof PsiPrefixExpression) [ FD ]
Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())-->Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)[ FD ]
Line_162 $$ if (referenceParent instanceof PsiNewExpression) -->Line_164 $$ final PsiExpression qualifier = newExpression.getQualifier()[ CD ]
Line_158 $$ if (referenceParent instanceof PsiIfStatement) -->Line_160 $$ if (referenceParent instanceof PsiForStatement) [ CD ]
Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)-->Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_64 $$ final PsiType returnType = LambdaUtil.getFunctionalInterfaceReturnType(type)[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_158 $$ if (referenceParent instanceof PsiIfStatement) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_92 $$ if (referenceParent instanceof PsiForeachStatement) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_92 $$ if (referenceParent instanceof PsiForeachStatement) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_3 $$ final PsiType variableOrMethodType[ CD ]
Line_25 $$ final GlobalSearchScope scope = variableOrMethod.getResolveScope()-->Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_102 $$ if (referenceParent instanceof PsiReturnStatement) [ FD ]
Line_112 $$ if (!checkType(type, weakestTypeClasses)) -->Line_113 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) [ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_188 $$ weakestTypeClasses = filterAccessibleClasses(weakestTypeClasses, variableOrMethodClass, variableOrMethod)[ CD ]
Line_86 $$ if (referenceParent instanceof PsiVariable) -->Line_92 $$ if (referenceParent instanceof PsiForeachStatement) [ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) [ FD ]
Line_8 $$ final PsiMethod method = (PsiMethod) variableOrMethod-->Line_9 $$ variableOrMethodType = method.getReturnType()[ FD ]
Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) -->Line_145 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) referenceParent[ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ FD ]
Line_156 $$ if (referenceParent instanceof PsiPostfixExpression) -->Line_157 $$ return Collections.emptyList()[ CD ]
Line_60 $$ final PsiElement referenceGrandParent = referenceParent.getParent()-->Line_76 $$ if (referenceGrandParent instanceof PsiMethodCallExpression) [ FD ]
Line_78 $$ if (PsiUtil.skipParenthesizedExprUp(methodCallExpression.getParent()) instanceof PsiTypeCastExpression || !findWeakestType(methodCallExpression, weakestTypeClasses)) -->Line_79 $$ return Collections.emptyList()[ CD ]
Line_181 $$ if (weakestTypeClasses.contains(variableOrMethodClass) || weakestTypeClasses.isEmpty()) -->Line_182 $$ return Collections.emptyList()[ CD ]
Line_6 $$ variableOrMethodType = variable.getType()-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_102 $$ if (referenceParent instanceof PsiReturnStatement) [ CD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_116 $$ final PsiReferenceExpression referenceExpression = (PsiReferenceExpression) referenceParent[ CD ]
Line_162 $$ if (referenceParent instanceof PsiNewExpression) -->Line_165 $$ if (qualifier != null) [ CD ]
Line_62 $$ final PsiMethodReferenceExpression methodReferenceExpression = (PsiMethodReferenceExpression) reference-->Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()[ FD ]
Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())-->Line_97 $$ final PsiClass javaLangIterableClass = facade.findClass(CommonClassNames.JAVA_LANG_ITERABLE, scope)[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) [ FD ]
Line_118 $$ if (!(target instanceof PsiField)) -->Line_119 $$ return Collections.emptyList()[ CD ]
Line_6 $$ variableOrMethodType = variable.getType()-->Line_9 $$ variableOrMethodType = method.getReturnType()[ FD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ FD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_140 $$ final PsiType type = ExpectedTypeUtils.findExpectedType(conditionalExpression, true)[ CD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_123 $$ checkClass(containingClass, weakestTypeClasses)[ CD ]
Line_49 $$ for (PsiReference reference : query) -->Line_50 $$ if (reference == null) [ FD ]
Line_7 $$ if (variableOrMethod instanceof PsiMethod) -->Line_9 $$ variableOrMethodType = method.getReturnType()[ CD ]
Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)-->Line_45 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()[ CD ]
Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) -->Line_82 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) referenceParent[ CD ]
Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())-->Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())[ FD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_30 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_6 $$ variableOrMethodType = variable.getType()-->Line_10 $$ if (PsiType.VOID.equals(variableOrMethodType)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_60 $$ final PsiElement referenceGrandParent = referenceParent.getParent()[ FD ]
Line_167 $$ if (!(type instanceof PsiClassType)) -->Line_168 $$ return Collections.emptyList()[ CD ]
Line_56 $$ if (referenceParent instanceof PsiMethodCallExpression) -->Line_57 $$ referenceElement = referenceParent[ CD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_137 $$ if (referenceElement.equals(condition)) [ FD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_112 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_37 $$ if (!findWeakestType(methodCallExpression, weakestTypeClasses)) [ FD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)[ CD ]
Line_175 $$ final PsiClass outerClass = innerClass.getContainingClass()-->Line_176 $$ if (outerClass != null) [ FD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_94 $$ if (!Comparing.equal(foreachStatement.getIteratedValue(), referenceElement)) [ CD ]
Line_21 $$ if (variableOrMethodClass == null || variableOrMethodClass instanceof PsiTypeParameter) -->Line_22 $$ return Collections.emptyList()[ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) [ FD ]
Line_135 $$ final PsiConditionalExpression conditionalExpression = (PsiConditionalExpression) referenceParent-->Line_136 $$ final PsiExpression condition = conditionalExpression.getCondition()[ FD ]
Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) -->Line_152 $$ if (referenceParent instanceof PsiSwitchStatement) [ CD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_45 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)-->Line_141 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)[ FD ]
Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) -->Line_129 $$ if (referenceParent instanceof PsiThrowStatement) [ CD ]
Line_35 $$ final String methodCallText = resourceVariable.getName() + ".close()"-->Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())[ FD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_33 $$ weakestTypeClasses.add(lowerBoundClass)[ CD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_160 $$ if (referenceParent instanceof PsiForStatement) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_25 $$ final GlobalSearchScope scope = variableOrMethod.getResolveScope()[ CD ]
Line_69 $$ if (!(referenceGrandParent instanceof PsiMethodCallExpression)) -->Line_70 $$ return Collections.emptyList()[ CD ]
Line_102 $$ if (referenceParent instanceof PsiReturnStatement) -->Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) [ CD ]
Line_25 $$ final GlobalSearchScope scope = variableOrMethod.getResolveScope()-->Line_97 $$ final PsiClass javaLangIterableClass = facade.findClass(CommonClassNames.JAVA_LANG_ITERABLE, scope)[ FD ]
Line_136 $$ final PsiExpression condition = conditionalExpression.getCondition()-->Line_137 $$ if (referenceElement.equals(condition)) [ FD ]
Line_105 $$ if (owner instanceof PsiMethod) -->Line_107 $$ if (owner instanceof PsiLambdaExpression) [ CD ]
Line_121 $$ final PsiField field = (PsiField) target-->Line_122 $$ final PsiClass containingClass = field.getContainingClass()[ FD ]
Line_122 $$ final PsiClass containingClass = field.getContainingClass()-->Line_123 $$ checkClass(containingClass, weakestTypeClasses)[ FD ]
Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)-->Line_112 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_4 $$ if (variableOrMethod instanceof PsiVariable) [ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_154 $$ if (referenceParent instanceof PsiPrefixExpression) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_158 $$ if (referenceParent instanceof PsiIfStatement) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_103 $$ final PsiElement owner = PsiTreeUtil.getParentOfType(referenceParent, PsiMethod.class, PsiLambdaExpression.class)[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_156 $$ if (referenceParent instanceof PsiPostfixExpression) [ FD ]
Line_37 $$ if (!findWeakestType(methodCallExpression, weakestTypeClasses)) -->Line_38 $$ return Collections.emptyList()[ CD ]
Line_49 $$ for (PsiReference reference : query) -->Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_129 $$ if (referenceParent instanceof PsiThrowStatement) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_123 $$ checkClass(containingClass, weakestTypeClasses)[ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_86 $$ if (referenceParent instanceof PsiVariable) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_58 $$ referenceParent = referenceElement.getParent()[ FD ]
Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())-->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ FD ]
Line_53 $$ hasUsages = true-->Line_185 $$ if (!hasUsages) [ FD ]
Line_171 $$ final PsiClass innerClass = classType.resolve()-->Line_175 $$ final PsiClass outerClass = innerClass.getContainingClass()[ FD ]
Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)-->Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_9 $$ variableOrMethodType = method.getReturnType()-->Line_10 $$ if (PsiType.VOID.equals(variableOrMethodType)) [ FD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_118 $$ if (!(target instanceof PsiField)) [ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_73 $$ if (!findWeakestType(referenceElement, methodCallExpression, useParameterizedTypeForCollectionMethods, weakestTypeClasses)) [ FD ]
Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)-->Line_148 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_107 $$ if (owner instanceof PsiLambdaExpression) -->Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)[ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_86 $$ if (referenceParent instanceof PsiVariable) [ FD ]
Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)-->Line_33 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_26 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(variableOrMethod.getProject())[ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_68 $$ if (referenceParent instanceof PsiExpressionList) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_56 $$ if (referenceParent instanceof PsiMethodCallExpression) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_60 $$ final PsiElement referenceGrandParent = referenceParent.getParent()[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_25 $$ final GlobalSearchScope scope = variableOrMethod.getResolveScope()[ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_144 $$ if (referenceParent instanceof PsiBinaryExpression) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_152 $$ if (referenceParent instanceof PsiSwitchStatement) [ FD ]
Line_145 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) referenceParent-->Line_146 $$ final PsiType type = binaryExpression.getType()[ FD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_98 $$ if (javaLangIterableClass == null) [ CD ]
Line_106 $$ type = ((PsiMethod) owner).getReturnType()-->Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)[ FD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_37 $$ if (!findWeakestType(methodCallExpression, weakestTypeClasses)) [ CD ]
Line_131 $$ if (!findWeakestType(throwStatement, variableOrMethodClass, weakestTypeClasses)) -->Line_132 $$ return Collections.emptyList()[ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_112 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_162 $$ if (referenceParent instanceof PsiNewExpression) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_126 $$ if (!findWeakestType(arrayInitializerExpression, weakestTypeClasses)) [ FD ]
Line_97 $$ final PsiClass javaLangIterableClass = facade.findClass(CommonClassNames.JAVA_LANG_ITERABLE, scope)-->Line_101 $$ checkClass(javaLangIterableClass, weakestTypeClasses)[ FD ]
Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_108 $$ type = LambdaUtil.getFunctionalInterfaceReturnType((PsiLambdaExpression) owner)[ FD ]
Line_64 $$ final PsiType returnType = LambdaUtil.getFunctionalInterfaceReturnType(type)-->Line_65 $$ if (!PsiType.VOID.equals(returnType) && !checkType(returnType, weakestTypeClasses)) [ FD ]
Line_97 $$ final PsiClass javaLangIterableClass = facade.findClass(CommonClassNames.JAVA_LANG_ITERABLE, scope)-->Line_98 $$ if (javaLangIterableClass == null) [ FD ]
Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) -->Line_64 $$ final PsiType returnType = LambdaUtil.getFunctionalInterfaceReturnType(type)[ CD ]
Line_82 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) referenceParent-->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_129 $$ if (referenceParent instanceof PsiThrowStatement) [ FD ]
Line_141 $$ if (!checkType(type, weakestTypeClasses)) -->Line_142 $$ return Collections.emptyList()[ CD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_135 $$ final PsiConditionalExpression conditionalExpression = (PsiConditionalExpression) referenceParent[ CD ]
Line_57 $$ referenceElement = referenceParent-->Line_94 $$ if (!Comparing.equal(foreachStatement.getIteratedValue(), referenceElement)) [ FD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_122 $$ final PsiClass containingClass = field.getContainingClass()[ CD ]
Line_125 $$ final PsiArrayInitializerExpression arrayInitializerExpression = (PsiArrayInitializerExpression) referenceParent-->Line_126 $$ if (!findWeakestType(arrayInitializerExpression, weakestTypeClasses)) [ FD ]
Line_103 $$ final PsiElement owner = PsiTreeUtil.getParentOfType(referenceParent, PsiMethod.class, PsiLambdaExpression.class)-->Line_107 $$ if (owner instanceof PsiLambdaExpression) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_148 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_57 $$ referenceElement = referenceParent[ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_177 $$ checkClass(outerClass, weakestTypeClasses)[ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()[ CD ]
Line_25 $$ final GlobalSearchScope scope = variableOrMethod.getResolveScope()-->Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)[ FD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_94 $$ if (!Comparing.equal(foreachStatement.getIteratedValue(), referenceElement)) [ FD ]
Line_63 $$ final PsiType type = methodReferenceExpression.getFunctionalInterfaceType()-->Line_148 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)-->Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)[ FD ]
Line_106 $$ type = ((PsiMethod) owner).getReturnType()-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_86 $$ if (referenceParent instanceof PsiVariable) -->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ CD ]
Line_105 $$ if (owner instanceof PsiMethod) -->Line_106 $$ type = ((PsiMethod) owner).getReturnType()[ CD ]
Line_36 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) facade.getElementFactory().createExpressionFromText(methodCallText, resourceVariable.getParent())-->Line_78 $$ if (PsiUtil.skipParenthesizedExprUp(methodCallExpression.getParent()) instanceof PsiTypeCastExpression || !findWeakestType(methodCallExpression, weakestTypeClasses)) [ FD ]
Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) -->Line_68 $$ if (referenceParent instanceof PsiExpressionList) [ CD ]
Line_176 $$ if (outerClass != null) -->Line_177 $$ checkClass(outerClass, weakestTypeClasses)[ CD ]
Line_68 $$ if (referenceParent instanceof PsiExpressionList) -->Line_69 $$ if (!(referenceGrandParent instanceof PsiMethodCallExpression)) [ CD ]
Line_129 $$ if (referenceParent instanceof PsiThrowStatement) -->Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) [ CD ]
Line_165 $$ if (qualifier != null) -->Line_176 $$ if (outerClass != null) [ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_181 $$ if (weakestTypeClasses.contains(variableOrMethodClass) || weakestTypeClasses.isEmpty()) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_156 $$ if (referenceParent instanceof PsiPostfixExpression) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_78 $$ if (PsiUtil.skipParenthesizedExprUp(methodCallExpression.getParent()) instanceof PsiTypeCastExpression || !findWeakestType(methodCallExpression, weakestTypeClasses)) [ FD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_41 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_OBJECT, scope)[ FD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_35 $$ final String methodCallText = resourceVariable.getName() + ".close()"[ CD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_29 $$ lowerBoundClass = facade.findClass(CommonClassNames.JAVA_LANG_AUTO_CLOSEABLE, scope)[ CD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_103 $$ final PsiElement owner = PsiTreeUtil.getParentOfType(referenceParent, PsiMethod.class, PsiLambdaExpression.class)[ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_188 $$ weakestTypeClasses = filterAccessibleClasses(weakestTypeClasses, variableOrMethodClass, variableOrMethod)[ FD ]
Line_27 $$ final PsiClass lowerBoundClass-->Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) [ FD ]
Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()-->Line_181 $$ if (weakestTypeClasses.contains(variableOrMethodClass) || weakestTypeClasses.isEmpty()) [ FD ]
Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) -->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ CD ]
Line_81 $$ if (referenceParent instanceof PsiAssignmentExpression) -->Line_86 $$ if (referenceParent instanceof PsiVariable) [ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_89 $$ if (!type.isAssignableFrom(variableOrMethodType) || !checkType(type, weakestTypeClasses)) [ FD ]
Line_98 $$ if (javaLangIterableClass == null) -->Line_99 $$ return Collections.emptyList()[ CD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_137 $$ if (referenceElement.equals(condition)) [ CD ]
Line_134 $$ if (referenceParent instanceof PsiConditionalExpression) -->Line_136 $$ final PsiExpression condition = conditionalExpression.getCondition()[ CD ]
Line_3 $$ final PsiType variableOrMethodType-->Line_10 $$ if (PsiType.VOID.equals(variableOrMethodType)) [ FD ]
Line_54 $$ PsiElement referenceElement = reference.getElement()-->Line_83 $$ if (!findWeakestType(referenceElement, assignmentExpression, useRighthandTypeAsWeakestTypeInAssignments, weakestTypeClasses)) [ FD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_121 $$ final PsiField field = (PsiField) target[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_47 $$ final Query<PsiReference> query = ReferencesSearch.search(variableOrMethod, variableOrMethod.getUseScope())[ FD ]
Line_165 $$ if (qualifier != null) -->Line_175 $$ final PsiClass outerClass = innerClass.getContainingClass()[ CD ]
Line_175 $$ final PsiClass outerClass = innerClass.getContainingClass()-->Line_177 $$ checkClass(outerClass, weakestTypeClasses)[ FD ]
Line_16 $$ if (!(variableOrMethodType instanceof PsiClassType)) -->Line_17 $$ return Collections.emptyList()[ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_65 $$ if (!PsiType.VOID.equals(returnType) && !checkType(returnType, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_4 $$ if (variableOrMethod instanceof PsiVariable) [ FD ]
Line_5 $$ final PsiVariable variable = (PsiVariable) variableOrMethod-->Line_88 $$ final PsiType type = variable.getType()[ FD ]
Line_162 $$ if (referenceParent instanceof PsiNewExpression) -->Line_163 $$ final PsiNewExpression newExpression = (PsiNewExpression) referenceParent[ CD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_185 $$ if (!hasUsages) [ CD ]
Line_7 $$ if (variableOrMethod instanceof PsiMethod) -->Line_10 $$ if (PsiType.VOID.equals(variableOrMethodType)) [ CD ]
Line_106 $$ type = ((PsiMethod) owner).getReturnType()-->Line_141 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
Line_107 $$ if (owner instanceof PsiLambdaExpression) -->Line_110 $$ return Collections.emptyList()[ CD ]
Line_3 $$ final PsiType variableOrMethodType-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_48 $$ boolean hasUsages = false[ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_101 $$ checkClass(javaLangIterableClass, weakestTypeClasses)[ FD ]
Line_156 $$ if (referenceParent instanceof PsiPostfixExpression) -->Line_158 $$ if (referenceParent instanceof PsiIfStatement) [ CD ]
Line_61 $$ if (reference instanceof PsiMethodReferenceExpression) -->Line_65 $$ if (!PsiType.VOID.equals(returnType) && !checkType(returnType, weakestTypeClasses)) [ CD ]
Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) -->Line_125 $$ final PsiArrayInitializerExpression arrayInitializerExpression = (PsiArrayInitializerExpression) referenceParent[ CD ]
Line_154 $$ if (referenceParent instanceof PsiPrefixExpression) -->Line_156 $$ if (referenceParent instanceof PsiPostfixExpression) [ CD ]
Line_56 $$ if (referenceParent instanceof PsiMethodCallExpression) -->Line_58 $$ referenceParent = referenceElement.getParent()[ CD ]
Line_3 $$ final PsiType variableOrMethodType-->Line_6 $$ variableOrMethodType = variable.getType()[ FD ]
Line_3 $$ final PsiType variableOrMethodType-->Line_9 $$ variableOrMethodType = method.getReturnType()[ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_162 $$ if (referenceParent instanceof PsiNewExpression) [ FD ]
Line_42 $$ if (lowerBoundClass == null || variableOrMethodClass.equals(lowerBoundClass)) -->Line_43 $$ return Collections.emptyList()[ CD ]
Line_102 $$ if (referenceParent instanceof PsiReturnStatement) -->Line_112 $$ if (!checkType(type, weakestTypeClasses)) [ CD ]
Line_93 $$ final PsiForeachStatement foreachStatement = (PsiForeachStatement) referenceParent-->Line_94 $$ if (!Comparing.equal(foreachStatement.getIteratedValue(), referenceElement)) [ FD ]
Line_49 $$ for (PsiReference reference : query) -->Line_54 $$ PsiElement referenceElement = reference.getElement()[ FD ]
Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) -->Line_124 $$ if (referenceParent instanceof PsiArrayInitializerExpression) [ CD ]
Line_148 $$ if (!checkType(type, weakestTypeClasses)) -->Line_149 $$ return Collections.emptyList()[ CD ]
Line_9 $$ variableOrMethodType = method.getReturnType()-->Line_147 $$ if (variableOrMethodType.equals(type)) [ FD ]
Line_160 $$ if (referenceParent instanceof PsiForStatement) -->Line_162 $$ if (referenceParent instanceof PsiNewExpression) [ CD ]
Line_92 $$ if (referenceParent instanceof PsiForeachStatement) -->Line_93 $$ final PsiForeachStatement foreachStatement = (PsiForeachStatement) referenceParent[ CD ]
Line_20 $$ final PsiClass variableOrMethodClass = variableOrMethodClassType.resolve()-->Line_131 $$ if (!findWeakestType(throwStatement, variableOrMethodClass, weakestTypeClasses)) [ FD ]
Line_2 $$ public static Collection<PsiClass> calculateWeakestClassesNecessary(@NotNull PsiElement variableOrMethod, boolean useRighthandTypeAsWeakestTypeInAssignments, boolean useParameterizedTypeForCollectionMethods) -->Line_188 $$ weakestTypeClasses = filterAccessibleClasses(weakestTypeClasses, variableOrMethodClass, variableOrMethod)[ FD ]
Line_65 $$ if (!PsiType.VOID.equals(returnType) && !checkType(returnType, weakestTypeClasses)) -->Line_66 $$ return Collections.emptyList()[ CD ]
Line_28 $$ if (variableOrMethod instanceof PsiResourceVariable) -->Line_34 $$ final PsiResourceVariable resourceVariable = (PsiResourceVariable) variableOrMethod[ CD ]
Line_129 $$ if (referenceParent instanceof PsiThrowStatement) -->Line_131 $$ if (!findWeakestType(throwStatement, variableOrMethodClass, weakestTypeClasses)) [ CD ]
Line_165 $$ if (qualifier != null) -->Line_167 $$ if (!(type instanceof PsiClassType)) [ CD ]
Line_57 $$ referenceElement = referenceParent-->Line_137 $$ if (referenceElement.equals(condition)) [ FD ]
Line_58 $$ referenceParent = referenceElement.getParent()-->Line_115 $$ if (referenceParent instanceof PsiReferenceExpression) [ FD ]
Line_55 $$ PsiElement referenceParent = referenceElement.getParent()-->Line_152 $$ if (referenceParent instanceof PsiSwitchStatement) [ FD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_33 $$ weakestTypeClasses.add(lowerBoundClass)[ FD ]
Line_152 $$ if (referenceParent instanceof PsiSwitchStatement) -->Line_153 $$ return Collections.emptyList()[ CD ]
Line_24 $$ Set<PsiClass> weakestTypeClasses = new HashSet<PsiClass>()-->Line_141 $$ if (!checkType(type, weakestTypeClasses)) [ FD ]
