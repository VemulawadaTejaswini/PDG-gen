Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_16 $$ variables.add(node.getName())[ FD ]
Line_19 $$ if (!node.isQualified()) -->Line_22 $$ super.visitPyReferenceExpression(node)[ CD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_16 $$ variables.add(node.getName())[ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_13 $$ variables.add(node.getName())[ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_20 $$ variables.add(node.getReferencedName())[ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_26 $$ variables.add(node.getName())[ FD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_29 $$ variables.add(node.getName())[ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_8 $$ return s != null && super.add(s)[ CD ]
Line_3 $$ if (!(scope instanceof PyClass) && !(scope instanceof PyFile) && !(scope instanceof PyFunction)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<String> collectUsedNames(@Nullable final PsiElement scope) -->Line_6 $$ final Set<String> variables = new HashSet<String>() [ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_26 $$ variables.add(node.getName())[ FD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_20 $$ variables.add(node.getReferencedName())[ FD ]
Line_2 $$ public static Collection<String> collectUsedNames(@Nullable final PsiElement scope) -->Line_3 $$ if (!(scope instanceof PyClass) && !(scope instanceof PyFile) && !(scope instanceof PyFunction)) [ CD ]
Line_19 $$ if (!node.isQualified()) -->Line_20 $$ variables.add(node.getReferencedName())[ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_26 $$ variables.add(node.getName())[ CD ]
Line_2 $$ public static Collection<String> collectUsedNames(@Nullable final PsiElement scope) -->Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() [ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_22 $$ super.visitPyReferenceExpression(node)[ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_8 $$ return s != null && super.add(s)[ FD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_13 $$ variables.add(node.getName())[ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_19 $$ if (!node.isQualified()) [ FD ]
Line_6 $$ final Set<String> variables = new HashSet<String>() -->Line_29 $$ variables.add(node.getName())[ FD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_13 $$ variables.add(node.getName())[ FD ]
Line_2 $$ public static Collection<String> collectUsedNames(@Nullable final PsiElement scope) -->Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() [ FD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_16 $$ variables.add(node.getName())[ CD ]
Line_2 $$ public static Collection<String> collectUsedNames(@Nullable final PsiElement scope) -->Line_32 $$ return variables[ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_19 $$ if (!node.isQualified()) [ CD ]
Line_11 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_29 $$ variables.add(node.getName())[ CD ]
