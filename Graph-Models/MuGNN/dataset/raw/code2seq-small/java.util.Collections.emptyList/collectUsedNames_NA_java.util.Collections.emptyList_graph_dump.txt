Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_18 $$ variables.add(node.getName())[ CD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_11 $$ return s != null && super.add(s)[ CD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_28 $$ if (!node.isQualified()) [ CD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_29 $$ variables.add(node.getReferencedName())[ FD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_37 $$ variables.add(node.getName())[ FD ]
Line_28 $$ if (!node.isQualified()) -->Line_31 $$ super.visitPyReferenceExpression(node)[ CD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_42 $$ variables.add(node.getName())[ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_23 $$ variables.add(node.getName())[ CD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_37 $$ variables.add(node.getName())[ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_31 $$ super.visitPyReferenceExpression(node)[ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_18 $$ variables.add(node.getName())[ FD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_18 $$ variables.add(node.getName())[ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_37 $$ variables.add(node.getName())[ CD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_11 $$ return s != null && super.add(s)[ FD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_42 $$ variables.add(node.getName())[ FD ]
Line_28 $$ if (!node.isQualified()) -->Line_29 $$ variables.add(node.getReferencedName())[ CD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_29 $$ variables.add(node.getReferencedName())[ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_42 $$ variables.add(node.getName())[ CD ]
Line_4 $$ if (!(scope instanceof PyClass) && !(scope instanceof PyFile) && !(scope instanceof PyFunction)) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_28 $$ if (!node.isQualified()) [ FD ]
Line_14 $$ scope.acceptChildren(new PyRecursiveElementVisitor() -->Line_23 $$ variables.add(node.getName())[ FD ]
Line_7 $$ final Set<String> variables = new HashSet<String>() -->Line_23 $$ variables.add(node.getName())[ FD ]
