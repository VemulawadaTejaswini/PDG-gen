Line_22 $$ PsiReferenceExpressionImpl expression = (PsiReferenceExpressionImpl) element-->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_7 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())[ CD ]
Line_7 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())-->Line_13 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_14 $$ if (cachedResults != null) [ CD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_13 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ CD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_22 $$ PsiReferenceExpressionImpl expression = (PsiReferenceExpressionImpl) element[ CD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_13 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ visitElement(expression)[ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_20 $$ if (!(element instanceof PsiReferenceExpressionImpl))[ CD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ CD ]
Line_14 $$ if (cachedResults != null) -->Line_15 $$ return[ CD ]
Line_6 $$ final List<ResolveResult[]> qualifiers = new SmartList<ResolveResult[]>()-->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ visitElement(expression)[ CD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_7 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_3 $$ PsiElement qualifier = expression.getQualifier()[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_13 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_4 $$ if (qualifier == null)[ CD ]
Line_3 $$ PsiElement qualifier = expression.getQualifier()-->Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_3 $$ PsiElement qualifier = expression.getQualifier()[ CD ]
Line_10 $$ if (!(expression instanceof PsiReferenceExpressionImpl)) -->Line_11 $$ return[ CD ]
Line_4 $$ if (qualifier == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_32 $$ return qualifiers[ CD ]
Line_7 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())-->Line_23 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_6 $$ final List<ResolveResult[]> qualifiers = new SmartList<ResolveResult[]>()[ CD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_17 $$ visitElement(expression)[ FD ]
Line_20 $$ if (!(element instanceof PsiReferenceExpressionImpl))-->Line_21 $$ return[ CD ]
Line_2 $$ private static List<ResolveResult[]> resolveAllQualifiers(@NotNull PsiReferenceExpressionImpl expression, @NotNull final PsiFile containingFile) -->Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_3 $$ PsiElement qualifier = expression.getQualifier()-->Line_4 $$ if (qualifier == null)[ FD ]
Line_13 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)-->Line_14 $$ if (cachedResults != null) [ FD ]
Line_8 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_10 $$ if (!(expression instanceof PsiReferenceExpressionImpl)) [ CD ]
