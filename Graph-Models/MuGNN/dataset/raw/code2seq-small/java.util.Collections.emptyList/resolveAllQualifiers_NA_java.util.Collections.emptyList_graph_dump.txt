Line_18 $$ if (cachedResults != null) -->Line_19 $$ return[ CD ]
Line_8 $$ final List<ResolveResult[]> qualifiers = new SmartList<ResolveResult[]>()-->Line_29 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_26 $$ if (!(element instanceof PsiReferenceExpressionImpl))-->Line_27 $$ return[ CD ]
Line_9 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())-->Line_17 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ FD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_21 $$ visitElement(expression)[ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_14 $$ if (!(expression instanceof PsiReferenceExpressionImpl)) [ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_21 $$ visitElement(expression)[ FD ]
Line_28 $$ PsiReferenceExpressionImpl expression = (PsiReferenceExpressionImpl) element-->Line_29 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ FD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_17 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)[ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_26 $$ if (!(element instanceof PsiReferenceExpressionImpl))[ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_29 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ CD ]
Line_14 $$ if (!(expression instanceof PsiReferenceExpressionImpl)) -->Line_15 $$ return[ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_29 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_17 $$ ResolveResult[] cachedResults = resolveCache.getCachedResults(expression, true, false, true)-->Line_18 $$ if (cachedResults != null) [ FD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ if (cachedResults != null) [ CD ]
Line_10 $$ qualifier.accept(new JavaRecursiveElementWalkingVisitor() -->Line_28 $$ PsiReferenceExpressionImpl expression = (PsiReferenceExpressionImpl) element[ CD ]
Line_9 $$ final ResolveCache resolveCache = ResolveCache.getInstance(containingFile.getProject())-->Line_29 $$ qualifiers.add(resolveCache.resolveWithCaching(expression, INSTANCE, false, false, containingFile))[ FD ]
Line_6 $$ if (qualifier == null)-->Line_7 $$ return Collections.emptyList()[ CD ]
