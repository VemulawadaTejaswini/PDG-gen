Line_6 $$ Element referencesElement = parentElement.element("references")-->Line_7 $$ if (referencesElement == null) [ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_15 $$ sb.append(groupId)[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_18 $$ if (Validator.isNotNull(uuid)) [ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_27 $$ if (referenceType != null) [ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_27 $$ if (referenceType != null) [ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_6 $$ Element referencesElement = parentElement.element("references")[ FD ]
Line_18 $$ if (Validator.isNotNull(uuid)) -->Line_19 $$ sb.append(" and @uuid=")[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_3 $$ if (parentElement == null) [ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_20 $$ sb.append(HtmlUtil.escapeXPathAttribute(uuid))[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_12 $$ sb.append(HtmlUtil.escapeXPathAttribute(className))[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_33 $$ List<Node> nodes = xPath.selectNodes(referencesElement)[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_22 $$ if (classPK > 0) [ FD ]
Line_18 $$ if (Validator.isNotNull(uuid)) -->Line_20 $$ sb.append(HtmlUtil.escapeXPathAttribute(uuid))[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_31 $$ sb.append(StringPool.CLOSE_BRACKET)[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_34 $$ return ListUtil.fromArray(nodes.toArray(new Element[nodes.size()]))[ CD ]
Line_22 $$ if (classPK > 0) -->Line_25 $$ sb.append(StringPool.APOSTROPHE)[ CD ]
Line_13 $$ if (groupId > 0) -->Line_14 $$ sb.append(" and @group-id='")[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_6 $$ Element referencesElement = parentElement.element("references")[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_13 $$ if (groupId > 0) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_14 $$ sb.append(" and @group-id='")[ FD ]
Line_7 $$ if (referencesElement == null) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_22 $$ if (classPK > 0) -->Line_24 $$ sb.append(classPK)[ CD ]
Line_27 $$ if (referenceType != null) -->Line_29 $$ sb.append(HtmlUtil.escapeXPathAttribute(referenceType))[ CD ]
Line_33 $$ List<Node> nodes = xPath.selectNodes(referencesElement)-->Line_34 $$ return ListUtil.fromArray(nodes.toArray(new Element[nodes.size()]))[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_29 $$ sb.append(HtmlUtil.escapeXPathAttribute(referenceType))[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_11 $$ sb.append("reference[@class-name=")[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_24 $$ sb.append(classPK)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_25 $$ sb.append(StringPool.APOSTROPHE)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_23 $$ sb.append(" and @class-pk='")[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_24 $$ sb.append(classPK)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_12 $$ sb.append(HtmlUtil.escapeXPathAttribute(className))[ FD ]
Line_13 $$ if (groupId > 0) -->Line_16 $$ sb.append(StringPool.APOSTROPHE)[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_32 $$ XPath xPath = SAXReaderUtil.createXPath(sb.toString())[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_11 $$ sb.append("reference[@class-name=")[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_18 $$ if (Validator.isNotNull(uuid)) [ FD ]
Line_13 $$ if (groupId > 0) -->Line_15 $$ sb.append(groupId)[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_7 $$ if (referencesElement == null) [ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_13 $$ if (groupId > 0) [ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_22 $$ if (classPK > 0) [ CD ]
Line_6 $$ Element referencesElement = parentElement.element("references")-->Line_33 $$ List<Node> nodes = xPath.selectNodes(referencesElement)[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_20 $$ sb.append(HtmlUtil.escapeXPathAttribute(uuid))[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_3 $$ if (parentElement == null) [ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_28 $$ sb.append(" and @type=")[ FD ]
Line_3 $$ if (parentElement == null) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_19 $$ sb.append(" and @uuid=")[ FD ]
Line_22 $$ if (classPK > 0) -->Line_23 $$ sb.append(" and @class-pk='")[ CD ]
Line_27 $$ if (referenceType != null) -->Line_28 $$ sb.append(" and @type=")[ CD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_32 $$ XPath xPath = SAXReaderUtil.createXPath(sb.toString())[ CD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_29 $$ sb.append(HtmlUtil.escapeXPathAttribute(referenceType))[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_31 $$ sb.append(StringPool.CLOSE_BRACKET)[ FD ]
Line_32 $$ XPath xPath = SAXReaderUtil.createXPath(sb.toString())-->Line_33 $$ List<Node> nodes = xPath.selectNodes(referencesElement)[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_12 $$ sb.append(HtmlUtil.escapeXPathAttribute(className))[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_15 $$ sb.append(groupId)[ FD ]
Line_10 $$ StringBundler sb = new StringBundler(13)-->Line_16 $$ sb.append(StringPool.APOSTROPHE)[ FD ]
Line_2 $$ protected List<Element> getReferenceElements(Element parentElement, String className, long groupId, String uuid, long classPK, String referenceType) -->Line_10 $$ StringBundler sb = new StringBundler(13)[ CD ]
