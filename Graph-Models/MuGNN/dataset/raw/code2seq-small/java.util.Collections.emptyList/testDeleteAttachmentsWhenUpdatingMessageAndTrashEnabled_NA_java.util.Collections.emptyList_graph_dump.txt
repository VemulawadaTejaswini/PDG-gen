Line_3 $$ MBMessage message = addMessage(null, true)-->Line_5 $$ MBMessageLocalServiceUtil.updateMessage(TestPropsValues.getUserId(), message.getMessageId(), RandomTestUtil.randomString(), RandomTestUtil.randomString(), Collections.<ObjectValuePair<String, InputStream>>emptyList(), Collections.<String>emptyList(), 0, false, serviceContext)[ FD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_5 $$ MBMessageLocalServiceUtil.updateMessage(TestPropsValues.getUserId(), message.getMessageId(), RandomTestUtil.randomString(), RandomTestUtil.randomString(), Collections.<ObjectValuePair<String, InputStream>>emptyList(), Collections.<String>emptyList(), 0, false, serviceContext)[ CD ]
Line_4 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId(), TestPropsValues.getUserId())-->Line_5 $$ MBMessageLocalServiceUtil.updateMessage(TestPropsValues.getUserId(), message.getMessageId(), RandomTestUtil.randomString(), RandomTestUtil.randomString(), Collections.<ObjectValuePair<String, InputStream>>emptyList(), Collections.<String>emptyList(), 0, false, serviceContext)[ FD ]
Line_9 $$ WorkflowCapability workflowCapability = fileEntry.getRepositoryCapability(WorkflowCapability.class)-->Line_10 $$ Assert.assertEquals(WorkflowConstants.STATUS_IN_TRASH, workflowCapability.getStatus(fileEntry))[ FD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_9 $$ WorkflowCapability workflowCapability = fileEntry.getRepositoryCapability(WorkflowCapability.class)[ CD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_6 $$ List<FileEntry> fileEntries = PortletFileRepositoryUtil.getPortletFileEntries(message.getGroupId(), message.getAttachmentsFolderId())[ CD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_8 $$ FileEntry fileEntry = fileEntries.get(0)[ CD ]
Line_6 $$ List<FileEntry> fileEntries = PortletFileRepositoryUtil.getPortletFileEntries(message.getGroupId(), message.getAttachmentsFolderId())-->Line_7 $$ Assert.assertEquals(1, fileEntries.size())[ FD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_10 $$ Assert.assertEquals(WorkflowConstants.STATUS_IN_TRASH, workflowCapability.getStatus(fileEntry))[ CD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_3 $$ MBMessage message = addMessage(null, true)[ CD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_4 $$ ServiceContext serviceContext = ServiceContextTestUtil.getServiceContext(_group.getGroupId(), TestPropsValues.getUserId())[ CD ]
Line_3 $$ MBMessage message = addMessage(null, true)-->Line_6 $$ List<FileEntry> fileEntries = PortletFileRepositoryUtil.getPortletFileEntries(message.getGroupId(), message.getAttachmentsFolderId())[ FD ]
Line_8 $$ FileEntry fileEntry = fileEntries.get(0)-->Line_10 $$ Assert.assertEquals(WorkflowConstants.STATUS_IN_TRASH, workflowCapability.getStatus(fileEntry))[ FD ]
Line_8 $$ FileEntry fileEntry = fileEntries.get(0)-->Line_9 $$ WorkflowCapability workflowCapability = fileEntry.getRepositoryCapability(WorkflowCapability.class)[ FD ]
Line_2 $$ public void testDeleteAttachmentsWhenUpdatingMessageAndTrashEnabled() throws Exception -->Line_7 $$ Assert.assertEquals(1, fileEntries.size())[ CD ]
Line_6 $$ List<FileEntry> fileEntries = PortletFileRepositoryUtil.getPortletFileEntries(message.getGroupId(), message.getAttachmentsFolderId())-->Line_8 $$ FileEntry fileEntry = fileEntries.get(0)[ FD ]
