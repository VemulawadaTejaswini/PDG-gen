Line_12 $$ final XmlTag tag = PsiTreeUtil.getContextOfType(e, XmlTag.class, true)-->Line_14 $$ callsToUpdate.add(tag)[ FD ]
Line_5 $$ final List<PsiElement> callsToUpdate-->Line_9 $$ callsToUpdate = new ArrayList<PsiElement>(references.size())[ FD ]
Line_5 $$ final List<PsiElement> callsToUpdate-->Line_14 $$ callsToUpdate.add(tag)[ FD ]
Line_5 $$ final List<PsiElement> callsToUpdate-->Line_17 $$ usageCount += callsToUpdate.size()[ FD ]
Line_6 $$ if (!mySettings.isCreateDefault()) -->Line_9 $$ callsToUpdate = new ArrayList<PsiElement>(references.size())[ CD ]
Line_10 $$ for (PsiReference reference : references) -->Line_11 $$ final PsiElement e = reference.getElement()[ FD ]
Line_8 $$ final Collection<PsiReference> references = ReferencesSearch.search(myTemplate, myTemplate.getUseScope(), false).findAll()-->Line_9 $$ callsToUpdate = new ArrayList<PsiElement>(references.size())[ FD ]
Line_4 $$ int usageCount = myOtherExpressions.size() + 1-->Line_17 $$ usageCount += callsToUpdate.size()[ FD ]
Line_24 $$ int i = 1-->Line_29 $$ usageInfos[i++] = new UsageInfo(o, false)[ FD ]
Line_12 $$ final XmlTag tag = PsiTreeUtil.getContextOfType(e, XmlTag.class, true)-->Line_13 $$ if (tag != null && XsltSupport.isTemplateCall(tag)) [ FD ]
Line_9 $$ callsToUpdate = new ArrayList<PsiElement>(references.size())-->Line_14 $$ callsToUpdate.add(tag)[ FD ]
Line_25 $$ for (XPathExpression expression : myOtherExpressions) -->Line_26 $$ usageInfos[i++] = XPathUsageInfo.create(expression)[ FD ]
Line_11 $$ final PsiElement e = reference.getElement()-->Line_12 $$ final XmlTag tag = PsiTreeUtil.getContextOfType(e, XmlTag.class, true)[ FD ]
Line_13 $$ if (tag != null && XsltSupport.isTemplateCall(tag)) -->Line_14 $$ callsToUpdate.add(tag)[ CD ]
Line_6 $$ if (!mySettings.isCreateDefault()) -->Line_17 $$ usageCount += callsToUpdate.size()[ CD ]
Line_24 $$ int i = 1-->Line_26 $$ usageInfos[i++] = XPathUsageInfo.create(expression)[ FD ]
Line_6 $$ if (!mySettings.isCreateDefault()) -->Line_8 $$ final Collection<PsiReference> references = ReferencesSearch.search(myTemplate, myTemplate.getUseScope(), false).findAll()[ CD ]
Line_9 $$ callsToUpdate = new ArrayList<PsiElement>(references.size())-->Line_17 $$ usageCount += callsToUpdate.size()[ FD ]
