Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)-->Line_8 $$ assertSame(node1, new SimpleSingletonElectionPolicy().elect(nodes))[ FD ]
Line_5 $$ Node node2 = mock(Node.class)-->Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)[ FD ]
Line_4 $$ Node node1 = mock(Node.class)-->Line_8 $$ assertSame(node1, new SimpleSingletonElectionPolicy().elect(nodes))[ FD ]
Line_6 $$ Node node3 = mock(Node.class)-->Line_11 $$ assertSame(node3, new SimpleSingletonElectionPolicy(2).elect(nodes))[ FD ]
Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)-->Line_12 $$ assertSame(node1, new SimpleSingletonElectionPolicy(3).elect(nodes))[ FD ]
Line_4 $$ Node node1 = mock(Node.class)-->Line_9 $$ assertSame(node1, new SimpleSingletonElectionPolicy(0).elect(nodes))[ FD ]
Line_4 $$ Node node1 = mock(Node.class)-->Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)[ FD ]
Line_6 $$ Node node3 = mock(Node.class)-->Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)[ FD ]
Line_4 $$ Node node1 = mock(Node.class)-->Line_12 $$ assertSame(node1, new SimpleSingletonElectionPolicy(3).elect(nodes))[ FD ]
Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)-->Line_9 $$ assertSame(node1, new SimpleSingletonElectionPolicy(0).elect(nodes))[ FD ]
Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)-->Line_10 $$ assertSame(node2, new SimpleSingletonElectionPolicy(1).elect(nodes))[ FD ]
Line_7 $$ List<Node> nodes = Arrays.asList(node1, node2, node3)-->Line_11 $$ assertSame(node3, new SimpleSingletonElectionPolicy(2).elect(nodes))[ FD ]
Line_5 $$ Node node2 = mock(Node.class)-->Line_10 $$ assertSame(node2, new SimpleSingletonElectionPolicy(1).elect(nodes))[ FD ]
