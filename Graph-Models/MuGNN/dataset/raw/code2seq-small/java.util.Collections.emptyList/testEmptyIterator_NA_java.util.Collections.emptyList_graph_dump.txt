Line_2 $$ public void testEmptyIterator() -->Line_9 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_27 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_5 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_23 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_15 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_18 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_5 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_26 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_11 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_25 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_13 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_3 $$ ShardShuffler shuffler = new RotationShardShuffler(0)-->Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_25 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_15 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_14 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_15 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_27 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_12 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_11 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_17 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_23 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_18 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_26 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_8 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_23 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_14 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_19 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_9 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_6 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ CD ]
Line_3 $$ ShardShuffler shuffler = new RotationShardShuffler(0)-->Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_3 $$ ShardShuffler shuffler = new RotationShardShuffler(0)-->Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_27 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_21 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_18 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_20 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_21 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_13 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_17 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_12 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_25 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_18 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_27 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_21 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_8 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_19 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_24 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_24 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_25 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_27 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_7 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_19 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_12 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_25 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_24 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_26 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_21 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_24 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_3 $$ ShardShuffler shuffler = new RotationShardShuffler(0)-->Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_20 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_24 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_26 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_26 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_20 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_17 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_6 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_14 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ FD ]
Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_23 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_20 $$ assertThat(shardIterator.nextOrNull(), nullValue())[ CD ]
Line_2 $$ public void testEmptyIterator() -->Line_17 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_11 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_7 $$ assertThat(shardIterator.remaining(), equalTo(0))[ CD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_19 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_10 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_23 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_16 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_22 $$ shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))[ FD ]
Line_4 $$ ShardIterator shardIterator = new PlainShardIterator(new ShardId("test1", 0), shuffler.shuffle(Collections.<ShardRouting>emptyList()))-->Line_13 $$ assertThat(shardIterator.remaining(), equalTo(0))[ FD ]
Line_2 $$ public void testEmptyIterator() -->Line_3 $$ ShardShuffler shuffler = new RotationShardShuffler(0)[ CD ]
