Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_17 $$ Assert.assertTrue(!wasUnversioned.exists())[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_16 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(unv.getPath()), wasUnversioned))[ CD ]
Line_6 $$ final VirtualFile unv = createFileInCommand(tree.mySourceDir, "unv.txt", "***")-->Line_7 $$ final File wasUnversioned = new File(unv.getPath())[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_10 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_15 $$ Assert.assertTrue(unv.isValid())[ CD ]
Line_7 $$ final File wasUnversioned = new File(unv.getPath())-->Line_17 $$ Assert.assertTrue(!wasUnversioned.exists())[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_13 $$ final Change s2Change = assertMovedChange(tree.myS2File)[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_18 $$ rollbackIMpl(Arrays.asList(change, s2Change), Collections.<Change>emptyList())[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_12 $$ final Change s1Change = assertMovedChange(tree.myS1File)[ CD ]
Line_7 $$ final File wasUnversioned = new File(unv.getPath())-->Line_16 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(unv.getPath()), wasUnversioned))[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_11 $$ final Change change = assertMovedChange(tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_9 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_5 $$ disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD)[ CD ]
Line_6 $$ final VirtualFile unv = createFileInCommand(tree.mySourceDir, "unv.txt", "***")-->Line_16 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(unv.getPath()), wasUnversioned))[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_8 $$ VcsTestUtil.moveFileInCommand(myProject, tree.mySourceDir, tree.myTargetDir)[ CD ]
Line_13 $$ final Change s2Change = assertMovedChange(tree.myS2File)-->Line_18 $$ rollbackIMpl(Arrays.asList(change, s2Change), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_7 $$ final File wasUnversioned = new File(unv.getPath())[ CD ]
Line_6 $$ final VirtualFile unv = createFileInCommand(tree.mySourceDir, "unv.txt", "***")-->Line_15 $$ Assert.assertTrue(unv.isValid())[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_14 $$ Assert.assertTrue(unv != null)[ CD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_19 $$ Assert.assertTrue(wasUnversioned.exists())[ CD ]
Line_11 $$ final Change change = assertMovedChange(tree.mySourceDir)-->Line_18 $$ rollbackIMpl(Arrays.asList(change, s2Change), Collections.<Change>emptyList())[ FD ]
Line_7 $$ final File wasUnversioned = new File(unv.getPath())-->Line_19 $$ Assert.assertTrue(wasUnversioned.exists())[ FD ]
Line_2 $$ public void testRollbackMOveDirVariant() throws Exception -->Line_6 $$ final VirtualFile unv = createFileInCommand(tree.mySourceDir, "unv.txt", "***")[ CD ]
