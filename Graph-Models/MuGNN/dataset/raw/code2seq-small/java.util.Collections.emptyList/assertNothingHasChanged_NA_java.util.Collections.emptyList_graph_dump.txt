Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_4 $$ PatchFileCreator.apply(preparationResult, options, TEST_UI)[ CD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_3 $$ Map<String, Long> before = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_5 $$ Map<String, Long> after = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_6 $$ DiffCalculator.Result diff = DiffCalculator.calculate(before, after, new LinkedList<String>(), false)[ FD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_9 $$ assertTrue(diff.filesToUpdate.isEmpty())[ CD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_7 $$ assertTrue(diff.filesToCreate.isEmpty())[ CD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_6 $$ DiffCalculator.Result diff = DiffCalculator.calculate(before, after, new LinkedList<String>(), false)[ CD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_5 $$ Map<String, Long> after = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_4 $$ PatchFileCreator.apply(preparationResult, options, TEST_UI)[ FD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_5 $$ Map<String, Long> after = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
Line_3 $$ Map<String, Long> before = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_6 $$ DiffCalculator.Result diff = DiffCalculator.calculate(before, after, new LinkedList<String>(), false)[ FD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_3 $$ Map<String, Long> before = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
Line_2 $$ private void assertNothingHasChanged(Patch patch, PatchFileCreator.PreparationResult preparationResult, Map<String, ValidationResult.Option> options) throws Exception -->Line_8 $$ assertTrue(diff.filesToDelete.isEmpty())[ CD ]
