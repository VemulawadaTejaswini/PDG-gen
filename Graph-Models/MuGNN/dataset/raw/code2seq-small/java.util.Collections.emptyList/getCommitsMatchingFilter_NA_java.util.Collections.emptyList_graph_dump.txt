Line_46 $$ if (filter.getAfter() != null) -->Line_52 $$ if (filter.getBefore() != null) [ CD ]
Line_43 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_53 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_47 $$ if (filter.getBefore() != null) [ FD ]
Line_8 $$ if (branchFilter != null) -->Line_14 $$ Collection<String> branchNames = repository.getBranches().keySet()[ CD ]
Line_15 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())-->Line_18 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_24 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_29 $$ atLeastOneBranchExists = true[ CD ]
Line_42 $$ StringBuilder args = new StringBuilder()-->Line_48 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_55 $$ filterParameters.add(args.toString())[ CD ]
Line_57 $$ if (filterCollection.getTextFilter() != null) -->Line_59 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ CD ]
Line_9 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_14 $$ Collection<String> branchNames = repository.getBranches().keySet()[ FD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_53 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_21 $$ atLeastOneBranchExists = true-->Line_29 $$ atLeastOneBranchExists = true[ FD ]
Line_17 $$ boolean atLeastOneBranchExists = false-->Line_29 $$ atLeastOneBranchExists = true[ FD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_50 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()[ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_59 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ FD ]
Line_58 $$ String textFilter = filterCollection.getTextFilter().getText()-->Line_59 $$ filterParameters.add(HgHistoryUtil.prepareParameter("keyword", textFilter))[ FD ]
Line_29 $$ atLeastOneBranchExists = true-->Line_31 $$ if (!atLeastOneBranchExists) [ FD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_46 $$ if (filter.getAfter() != null) [ FD ]
Line_18 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) -->Line_20 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ FD ]
Line_14 $$ Collection<String> branchNames = repository.getBranches().keySet()-->Line_18 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_47 $$ if (filter.getBefore() != null) -->Line_50 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_25 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", "."))[ FD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_43 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")[ CD ]
Line_24 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_25 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", "."))[ CD ]
Line_36 $$ if (filterCollection.getUserFilter() != null) -->Line_37 $$ filterParameters.add("-r")[ CD ]
Line_46 $$ if (filter.getAfter() != null) -->Line_47 $$ if (filter.getBefore() != null) [ CD ]
Line_42 $$ StringBuilder args = new StringBuilder()-->Line_50 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_17 $$ boolean atLeastOneBranchExists = false-->Line_21 $$ atLeastOneBranchExists = true[ FD ]
Line_42 $$ StringBuilder args = new StringBuilder()-->Line_55 $$ filterParameters.add(args.toString())[ FD ]
Line_8 $$ if (branchFilter != null) -->Line_31 $$ if (!atLeastOneBranchExists) [ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_63 $$ filterParameters.add(file.getPath())[ FD ]
Line_18 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) -->Line_19 $$ if (branchFilter.matches(branchName)) [ FD ]
Line_8 $$ if (branchFilter != null) -->Line_9 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)[ CD ]
Line_19 $$ if (branchFilter.matches(branchName)) -->Line_20 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ CD ]
Line_10 $$ if (repository == null) -->Line_11 $$ LOG.error("Repository not found for root " + root)[ CD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_52 $$ if (filter.getBefore() != null) [ FD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_46 $$ if (filter.getAfter() != null) [ CD ]
Line_16 $$ Collection<String> predefinedNames = ContainerUtil.list(TIP_REFERENCE)-->Line_18 $$ for (String branchName : ContainerUtil.concat(branchNames, bookmarkNames, predefinedNames)) [ FD ]
Line_42 $$ StringBuilder args = new StringBuilder()-->Line_53 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_57 $$ if (filterCollection.getTextFilter() != null) -->Line_58 $$ String textFilter = filterCollection.getTextFilter().getText()[ CD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_44 $$ filterParameters.add("-d")[ CD ]
Line_47 $$ if (filter.getBefore() != null) -->Line_48 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ CD ]
Line_10 $$ if (repository == null) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_45 $$ VcsLogDateFilter filter = filterCollection.getDateFilter()-->Line_48 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_8 $$ if (branchFilter != null) -->Line_16 $$ Collection<String> predefinedNames = ContainerUtil.list(TIP_REFERENCE)[ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_55 $$ filterParameters.add(args.toString())[ FD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_66 $$ return HgHistoryUtil.readAllHashes(myProject, root, Consumer.EMPTY_CONSUMER, filterParameters)[ FD ]
Line_9 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_15 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())[ FD ]
Line_8 $$ if (branchFilter != null) -->Line_17 $$ boolean atLeastOneBranchExists = false[ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_44 $$ filterParameters.add("-d")[ FD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_37 $$ filterParameters.add("-r")[ FD ]
Line_8 $$ if (branchFilter != null) -->Line_15 $$ Collection<String> bookmarkNames = HgUtil.getNamesWithoutHashes(repository.getBookmarks())[ CD ]
Line_36 $$ if (filterCollection.getUserFilter() != null) -->Line_38 $$ String authorFilter = StringUtil.join(ContainerUtil.map(filterCollection.getUserFilter().getUserNames(root), UserNameRegex.INSTANCE), "|")[ CD ]
Line_43 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_50 $$ args.append('>').append(dateFormatter.format(filter.getAfter()))[ FD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_26 $$ filterParameters.add("-r")[ FD ]
Line_43 $$ final SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm")-->Line_48 $$ args.append(dateFormatter.format(filter.getAfter())).append(" to ").append(dateFormatter.format(filter.getBefore()))[ FD ]
Line_41 $$ if (filterCollection.getDateFilter() != null) -->Line_42 $$ StringBuilder args = new StringBuilder()[ CD ]
Line_9 $$ HgRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_10 $$ if (repository == null) [ FD ]
Line_24 $$ if (branchFilter.matches(HEAD_REFERENCE)) -->Line_26 $$ filterParameters.add("-r")[ CD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_20 $$ filterParameters.add(HgHistoryUtil.prepareParameter("branch", branchName))[ FD ]
Line_36 $$ if (filterCollection.getUserFilter() != null) -->Line_39 $$ filterParameters.add("user('re:" + authorFilter + "')")[ CD ]
Line_21 $$ atLeastOneBranchExists = true-->Line_31 $$ if (!atLeastOneBranchExists) [ FD ]
Line_52 $$ if (filter.getBefore() != null) -->Line_53 $$ args.append('<').append(dateFormatter.format(filter.getBefore()))[ CD ]
Line_8 $$ if (branchFilter != null) -->Line_10 $$ if (repository == null) [ CD ]
Line_8 $$ if (branchFilter != null) -->Line_24 $$ if (branchFilter.matches(HEAD_REFERENCE)) [ CD ]
Line_17 $$ boolean atLeastOneBranchExists = false-->Line_31 $$ if (!atLeastOneBranchExists) [ FD ]
Line_5 $$ List<String> filterParameters = ContainerUtil.newArrayList()-->Line_39 $$ filterParameters.add("user('re:" + authorFilter + "')")[ FD ]
Line_62 $$ for (VirtualFile file : filterCollection.getStructureFilter().getFiles()) -->Line_63 $$ filterParameters.add(file.getPath())[ FD ]
Line_19 $$ if (branchFilter.matches(branchName)) -->Line_21 $$ atLeastOneBranchExists = true[ CD ]
