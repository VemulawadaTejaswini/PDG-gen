Line_4 $$ for (GitRepository repository : myRepositories) -->Line_5 $$ Collection<String> tb = getTrackingBranches(repository, remoteBranch)[ FD ]
Line_5 $$ Collection<String> tb = getTrackingBranches(repository, remoteBranch)-->Line_9 $$ trackingBranches = ContainerUtil.intersection(trackingBranches, tb)[ FD ]
Line_3 $$ Collection<String> trackingBranches = null-->Line_7 $$ trackingBranches = tb[ FD ]
Line_7 $$ trackingBranches = tb-->Line_9 $$ trackingBranches = ContainerUtil.intersection(trackingBranches, tb)[ FD ]
Line_6 $$ if (trackingBranches == null) -->Line_7 $$ trackingBranches = tb[ CD ]
Line_3 $$ Collection<String> trackingBranches = null-->Line_6 $$ if (trackingBranches == null) [ FD ]
Line_2 $$ public Collection<String> getTrackingBranches(@NotNull String remoteBranch) -->Line_5 $$ Collection<String> tb = getTrackingBranches(repository, remoteBranch)[ FD ]
Line_2 $$ public Collection<String> getTrackingBranches(@NotNull String remoteBranch) -->Line_12 $$ return trackingBranches == null ? Collections.<String>emptyList() : trackingBranches[ CD ]
Line_6 $$ if (trackingBranches == null) -->Line_9 $$ trackingBranches = ContainerUtil.intersection(trackingBranches, tb)[ CD ]
Line_5 $$ Collection<String> tb = getTrackingBranches(repository, remoteBranch)-->Line_7 $$ trackingBranches = tb[ FD ]
Line_2 $$ public Collection<String> getTrackingBranches(@NotNull String remoteBranch) -->Line_3 $$ Collection<String> trackingBranches = null[ CD ]
Line_3 $$ Collection<String> trackingBranches = null-->Line_9 $$ trackingBranches = ContainerUtil.intersection(trackingBranches, tb)[ FD ]
