Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)-->Line_49 $$ if (enoughAllocationsFound == false) [ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_14 $$ if (shard.allocatedPostIndexCreate(indexMetaData) == false) [ CD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_20 $$ logger.trace("[ FD ]
Line_30 $$ if (lastActiveAllocationIds.isEmpty()) -->Line_47 $$ logger.debug("[[ CD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_3 $$ boolean changed = false[ CD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())[ FD ]
Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())-->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ FD ]
Line_29 $$ final boolean enoughAllocationsFound-->Line_46 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_71 $$ logger.debug("[[ FD ]
Line_3 $$ boolean changed = false-->Line_72 $$ changed = true[ FD ]
Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())-->Line_30 $$ if (lastActiveAllocationIds.isEmpty()) [ FD ]
Line_37 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0-->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ FD ]
Line_19 $$ if (shardState.hasData() == false) -->Line_20 $$ logger.trace("[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_8 $$ final ShardRouting shard = unassignedIterator.next()[ CD ]
Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) -->Line_66 $$ logger.debug("[[ CD ]
Line_13 $$ final IndexSettings indexSettings = new IndexSettings(indexMetaData, settings, Collections.emptyList())-->Line_31 $$ assert indexSettings.getIndexVersionCreated().before(Version.V_3_0_0) : "trying to allocated a primary with an empty allocation id set, but index is new"[ FD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_68 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_26 $$ final boolean snapshotRestore = shard.restoreSource() != null[ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_4 $$ final RoutingNodes routingNodes = allocation.routingNodes()[ FD ]
Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())-->Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())[ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_18 $$ final AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState = fetchData(shard, allocation)[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_30 $$ if (lastActiveAllocationIds.isEmpty()) [ CD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_21 $$ allocation.setHasPendingAsyncFetch()[ FD ]
Line_37 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0-->Line_49 $$ if (enoughAllocationsFound == false) [ FD ]
Line_37 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0-->Line_46 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ FD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_77 $$ unassignedIterator.removeAndIgnore()[ FD ]
Line_30 $$ if (lastActiveAllocationIds.isEmpty()) -->Line_36 $$ if (snapshotRestore || recoverOnAnyNode) [ CD ]
Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) -->Line_77 $$ unassignedIterator.removeAndIgnore()[ CD ]
Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) -->Line_73 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ CD ]
Line_4 $$ final RoutingNodes routingNodes = allocation.routingNodes()-->Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_59 $$ logger.debug("[[ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_4 $$ final RoutingNodes routingNodes = allocation.routingNodes()[ CD ]
Line_29 $$ final boolean enoughAllocationsFound-->Line_37 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ FD ]
Line_36 $$ if (snapshotRestore || recoverOnAnyNode) -->Line_37 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ CD ]
Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())-->Line_47 $$ logger.debug("[[ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_5 $$ final MetaData metaData = routingNodes.metaData()[ CD ]
Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) -->Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) [ CD ]
Line_3 $$ boolean changed = false-->Line_67 $$ changed = true[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) [ CD ]
Line_50 $$ if (snapshotRestore) -->Line_53 $$ if (recoverOnAnyNode) [ CD ]
Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) -->Line_67 $$ changed = true[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_13 $$ final IndexSettings indexSettings = new IndexSettings(indexMetaData, settings, Collections.emptyList())[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_26 $$ final boolean snapshotRestore = shard.restoreSource() != null[ CD ]
Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) -->Line_68 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ CD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_80 $$ return changed[ CD ]
Line_65 $$ DiscoveryNode node = nodesToAllocate.yesNodes.get(0)-->Line_66 $$ logger.debug("[[ FD ]
Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) -->Line_71 $$ logger.debug("[[ CD ]
Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) -->Line_72 $$ changed = true[ CD ]
Line_65 $$ DiscoveryNode node = nodesToAllocate.yesNodes.get(0)-->Line_73 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_14 $$ if (shard.allocatedPostIndexCreate(indexMetaData) == false) [ FD ]
Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())-->Line_14 $$ if (shard.allocatedPostIndexCreate(indexMetaData) == false) [ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()[ CD ]
Line_19 $$ if (shardState.hasData() == false) -->Line_21 $$ allocation.setHasPendingAsyncFetch()[ CD ]
Line_29 $$ final boolean enoughAllocationsFound-->Line_49 $$ if (enoughAllocationsFound == false) [ FD ]
Line_30 $$ if (lastActiveAllocationIds.isEmpty()) -->Line_46 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ CD ]
Line_27 $$ final boolean recoverOnAnyNode = recoverOnAnyNode(indexSettings)-->Line_50 $$ if (snapshotRestore) [ FD ]
Line_65 $$ DiscoveryNode node = nodesToAllocate.yesNodes.get(0)-->Line_68 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_27 $$ final boolean recoverOnAnyNode = recoverOnAnyNode(indexSettings)[ CD ]
Line_69 $$ if (nodesToAllocate.throttleNodes.isEmpty() == true && nodesToAllocate.noNodes.isEmpty() == false) -->Line_70 $$ DiscoveryNode node = nodesToAllocate.noNodes.get(0)[ CD ]
Line_18 $$ final AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState = fetchData(shard, allocation)-->Line_19 $$ if (shardState.hasData() == false) [ FD ]
Line_36 $$ if (snapshotRestore || recoverOnAnyNode) -->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_9 $$ if (shard.primary() == false) [ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_19 $$ if (shardState.hasData() == false) [ CD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_63 $$ final NodesToAllocate nodesToAllocate = buildNodesToAllocate(shard, allocation, nodesAndVersions.nodes)[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_66 $$ logger.debug("[[ FD ]
Line_46 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0-->Line_49 $$ if (enoughAllocationsFound == false) [ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_63 $$ final NodesToAllocate nodesToAllocate = buildNodesToAllocate(shard, allocation, nodesAndVersions.nodes)[ FD ]
Line_4 $$ final RoutingNodes routingNodes = allocation.routingNodes()-->Line_5 $$ final MetaData metaData = routingNodes.metaData()[ FD ]
Line_28 $$ final NodesAndVersions nodesAndVersions-->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ FD ]
Line_2 $$ public boolean allocateUnassigned(RoutingAllocation allocation) -->Line_7 $$ while (unassignedIterator.hasNext()) [ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_29 $$ final boolean enoughAllocationsFound[ CD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_18 $$ final AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState = fetchData(shard, allocation)[ CD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_9 $$ if (shard.primary() == false) [ FD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_22 $$ unassignedIterator.removeAndIgnore()[ FD ]
Line_30 $$ if (lastActiveAllocationIds.isEmpty()) -->Line_41 $$ logger.debug("[[ CD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_18 $$ final AsyncShardFetch.FetchResult<TransportNodesListGatewayStartedShards.NodeGatewayStartedShards> shardState = fetchData(shard, allocation)[ FD ]
Line_27 $$ final boolean recoverOnAnyNode = recoverOnAnyNode(indexSettings)-->Line_36 $$ if (snapshotRestore || recoverOnAnyNode) [ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_41 $$ logger.debug("[[ FD ]
Line_13 $$ final IndexSettings indexSettings = new IndexSettings(indexMetaData, settings, Collections.emptyList())-->Line_27 $$ final boolean recoverOnAnyNode = recoverOnAnyNode(indexSettings)[ FD ]
Line_64 $$ if (nodesToAllocate.yesNodes.isEmpty() == false) -->Line_65 $$ DiscoveryNode node = nodesToAllocate.yesNodes.get(0)[ CD ]
Line_53 $$ if (recoverOnAnyNode) -->Line_59 $$ logger.debug("[[ CD ]
Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())-->Line_43 $$ assert lastActiveAllocationIds.isEmpty() == false[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_49 $$ if (enoughAllocationsFound == false) [ CD ]
Line_49 $$ if (enoughAllocationsFound == false) -->Line_50 $$ if (snapshotRestore) [ CD ]
Line_19 $$ if (shardState.hasData() == false) -->Line_22 $$ unassignedIterator.removeAndIgnore()[ CD ]
Line_65 $$ DiscoveryNode node = nodesToAllocate.yesNodes.get(0)-->Line_71 $$ logger.debug("[[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_28 $$ final NodesAndVersions nodesAndVersions[ CD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_7 $$ while (unassignedIterator.hasNext()) [ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ FD ]
Line_26 $$ final boolean snapshotRestore = shard.restoreSource() != null-->Line_36 $$ if (snapshotRestore || recoverOnAnyNode) [ FD ]
Line_67 $$ changed = true-->Line_72 $$ changed = true[ FD ]
Line_5 $$ final MetaData metaData = routingNodes.metaData()-->Line_12 $$ final IndexMetaData indexMetaData = metaData.index(shard.getIndex())[ FD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_8 $$ final ShardRouting shard = unassignedIterator.next()[ FD ]
Line_6 $$ final RoutingNodes.UnassignedShards.UnassignedIterator unassignedIterator = routingNodes.unassigned().iterator()-->Line_73 $$ unassignedIterator.initialize(node.id(), nodesAndVersions.highestVersion, ShardRouting.UNAVAILABLE_EXPECTED_SHARD_SIZE)[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_47 $$ logger.debug("[[ FD ]
Line_29 $$ final boolean enoughAllocationsFound-->Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())[ CD ]
Line_39 $$ enoughAllocationsFound = isEnoughVersionBasedAllocationsFound(shard, indexMetaData, nodesAndVersions)-->Line_46 $$ enoughAllocationsFound = nodesAndVersions.allocationsFound > 0[ FD ]
Line_8 $$ final ShardRouting shard = unassignedIterator.next()-->Line_25 $$ final Set<String> lastActiveAllocationIds = indexMetaData.activeAllocationIds(shard.id())[ FD ]
Line_7 $$ while (unassignedIterator.hasNext()) -->Line_63 $$ final NodesToAllocate nodesToAllocate = buildNodesToAllocate(shard, allocation, nodesAndVersions.nodes)[ CD ]
