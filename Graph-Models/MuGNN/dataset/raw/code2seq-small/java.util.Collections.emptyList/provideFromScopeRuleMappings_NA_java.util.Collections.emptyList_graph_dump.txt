Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_26 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_36 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_62 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_42 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_11 $$ return new ModuleDependencyBuilder().create(dependency.getProject(), scope)[ CD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_47 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_36 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_39 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_23 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()[ CD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_14 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_77 $$ return dependencies[ CD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_24 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_56 $$ Collection<String> minusConfigurationNames = minusConfigurations != null ? Lists.newArrayList(Iterables.transform(minusConfigurations, new Function<Configuration, String>() -->Line_59 $$ return configuration.getName()[ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_24 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ CD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_23 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_30 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_59 $$ return configuration.getName()[ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_39 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_63 $$ Collection<IdeDependencyKey<?, Dependency>> matchingDependencies = extractDependencies(dependencyToConfigurations, scopeMappingRule.configurationNames, minusConfigurationNames)[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_18 $$ Collection<IdeExtendedRepoFileDependency> ideRepoFileDependencies = dependenciesExtractor.extractRepoFileDependencies(ideaModule.getProject().getDependencies(), Collections.singletonList(configuration), Collections.<Configuration>emptyList(), ideaModule.isDownloadSources(), ideaModule.isDownloadJavadoc())[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_30 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) -->Line_50 $$ plusMinusConfigurations = Collections.emptyMap()[ CD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_24 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_39 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_14 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_11 $$ return new ModuleDependencyBuilder().create(dependency.getProject(), scope)[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_26 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_48 $$ if (plusMinusConfigurations == null) -->Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ CD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_26 $$ library.setModuleVersion(dependency.getId())[ CD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_47 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_25 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ FD ]
Line_36 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_49 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_62 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_62 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_25 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_70 $$ Collection<IdeDependencyKey<?, Dependency>> matchingDependencies = extractDependencies(dependencyToConfigurations, Collections.singletonList(plusConfiguration.getName()), minusConfigurationNames)[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_47 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_30 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_25 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ CD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_18 $$ Collection<IdeExtendedRepoFileDependency> ideRepoFileDependencies = dependenciesExtractor.extractRepoFileDependencies(ideaModule.getProject().getDependencies(), Collections.singletonList(configuration), Collections.<Configuration>emptyList(), ideaModule.isDownloadSources(), ideaModule.isDownloadJavadoc())[ FD ]
Line_7 $$ for (IdeProjectDependency ideProjectDependency : ideProjectDependencies) -->Line_8 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() [ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_27 $$ return library[ CD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_14 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_25 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)-->Line_26 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_20 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_23 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ CD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) [ FD ]
Line_56 $$ Collection<String> minusConfigurationNames = minusConfigurations != null ? Lists.newArrayList(Iterables.transform(minusConfigurations, new Function<Configuration, String>() -->Line_59 $$ return configuration.getName()[ CD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_42 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_36 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_47 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_36 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_39 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ CD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_42 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
