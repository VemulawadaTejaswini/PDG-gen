Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_15 $$ Collection<IdeExtendedRepoFileDependency> ideRepoFileDependencies = dependenciesExtractor.extractRepoFileDependencies(ideaModule.getProject().getDependencies(), Collections.singletonList(configuration), Collections.<Configuration>emptyList(), ideaModule.isDownloadSources(), ideaModule.isDownloadJavadoc())[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_26 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_36 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_15 $$ Collection<IdeExtendedRepoFileDependency> ideRepoFileDependencies = dependenciesExtractor.extractRepoFileDependencies(ideaModule.getProject().getDependencies(), Collections.singletonList(configuration), Collections.<Configuration>emptyList(), ideaModule.isDownloadSources(), ideaModule.isDownloadJavadoc())[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_41 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_50 $$ Collection<String> minusConfigurationNames = minusConfigurations != null ? Lists.newArrayList(Iterables.transform(minusConfigurations, new Function<Configuration, String>() -->Line_52 $$ return configuration.getName()[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_9 $$ return new ModuleDependencyBuilder().create(dependency.getProject(), scope)[ CD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_9 $$ return new ModuleDependencyBuilder().create(dependency.getProject(), scope)[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_55 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_42 $$ if (plusMinusConfigurations == null) -->Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ CD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_56 $$ Collection<IdeDependencyKey<?, Dependency>> matchingDependencies = extractDependencies(dependencyToConfigurations, scopeMappingRule.configurationNames, minusConfigurationNames)[ FD ]
Line_31 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_33 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_12 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_36 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) -->Line_44 $$ plusMinusConfigurations = Collections.emptyMap()[ CD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_5 $$ Collection<IdeProjectDependency> ideProjectDependencies = dependenciesExtractor.extractProjectDependencies(ideaModule.getProject(), Collections.singletonList(configuration), Collections.<Configuration>emptyList())[ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_36 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()[ CD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_19 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_31 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_21 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ CD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_55 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_20 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ CD ]
Line_14 $$ if (!ideaModule.isOffline()) -->Line_15 $$ Collection<IdeExtendedRepoFileDependency> ideRepoFileDependencies = dependenciesExtractor.extractRepoFileDependencies(ideaModule.getProject().getDependencies(), Collections.singletonList(configuration), Collections.<Configuration>emptyList(), ideaModule.isDownloadSources(), ideaModule.isDownloadJavadoc())[ CD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_70 $$ return dependencies[ CD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_19 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ CD ]
Line_31 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_33 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ CD ]
Line_50 $$ Collection<String> minusConfigurationNames = minusConfigurations != null ? Lists.newArrayList(Iterables.transform(minusConfigurations, new Function<Configuration, String>() -->Line_52 $$ return configuration.getName()[ CD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_63 $$ Collection<IdeDependencyKey<?, Dependency>> matchingDependencies = extractDependencies(dependencyToConfigurations, Collections.singletonList(plusConfiguration.getName()), minusConfigurationNames)[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_26 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_20 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_31 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_55 $$ for (IdeaScopeMappingRule scopeMappingRule : scopeMappings.get(scope)) [ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_26 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_12 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_33 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_43 $$ if (shouldProcessScope(scope, ideaModule.getScopes())) [ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_21 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_19 $$ Set<FilePath> javadoc = CollectionUtils.collect(dependency.getJavadocFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_29 $$ Collection<IdeLocalFileDependency> ideLocalFileDependencies = dependenciesExtractor.extractLocalFileDependencies(Collections.singletonList(configuration), Collections.<Configuration>emptyList())[ FD ]
Line_3 $$ Multimap<IdeDependencyKey<?, Dependency>, String> dependencyToConfigurations = LinkedHashMultimap.create()-->Line_12 $$ dependencyToConfigurations.put(key, configuration.getName())[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_22 $$ library.setModuleVersion(dependency.getId())[ CD ]
Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) -->Line_52 $$ return configuration.getName()[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_14 $$ if (!ideaModule.isOffline()) [ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_21 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_22 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_41 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_21 $$ SingleEntryModuleLibrary library = new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), javadoc, source, scope)-->Line_22 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_20 $$ Set<FilePath> source = CollectionUtils.collect(dependency.getSourceFiles(), new LinkedHashSet<FilePath>(), getPath)[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_4 $$ for (Configuration configuration : ideaConfigurations(ideaModule)) [ FD ]
Line_31 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forLocalFileDependency(fileDependency, new IdeDependencyKey.DependencyBuilder<IdeLocalFileDependency, Dependency>() -->Line_41 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_23 $$ return library[ CD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_33 $$ return new SingleEntryModuleLibrary(getPath.transform(dependency.getFile()), scope)[ FD ]
Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() -->Line_22 $$ library.setModuleVersion(dependency.getId())[ FD ]
Line_6 $$ for (IdeProjectDependency ideProjectDependency : ideProjectDependencies) -->Line_7 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forProjectDependency(ideProjectDependency, new IdeDependencyKey.DependencyBuilder<IdeProjectDependency, Dependency>() [ FD ]
Line_17 $$ IdeDependencyKey<?, Dependency> key = IdeDependencyKey.forRepoFileDependency(ideRepoFileDependency, new IdeDependencyKey.DependencyBuilder<IdeExtendedRepoFileDependency, Dependency>() -->Line_41 $$ Map<String, Collection<Configuration>> plusMinusConfigurations = ideaModule.getScopes().get(scope.name())[ FD ]
Line_2 $$ private Set<Dependency> provideFromScopeRuleMappings(IdeaModule ideaModule) -->Line_5 $$ Collection<IdeProjectDependency> ideProjectDependencies = dependenciesExtractor.extractProjectDependencies(ideaModule.getProject(), Collections.singletonList(configuration), Collections.<Configuration>emptyList())[ FD ]
