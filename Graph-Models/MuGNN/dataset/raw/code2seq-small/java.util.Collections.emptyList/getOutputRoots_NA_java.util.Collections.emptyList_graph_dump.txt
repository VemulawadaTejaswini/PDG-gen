Line_3 $$ MavenModuleResourceConfiguration configuration = getModuleResourcesConfiguration(context.getProjectDescriptor().dataManager.getDataPaths())-->Line_8 $$ for (ResourceRootConfiguration resConfig : getRootConfigurations(configuration)) [ FD ]
Line_3 $$ MavenModuleResourceConfiguration configuration = getModuleResourcesConfiguration(context.getProjectDescriptor().dataManager.getDataPaths())-->Line_4 $$ if (configuration == null)[ FD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_6 $$ final Set<File> result = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_8 $$ for (ResourceRootConfiguration resConfig : getRootConfigurations(configuration)) -->Line_9 $$ final File output = getOutputDir(moduleOutput, resConfig, configuration.outputDirectory)[ FD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_3 $$ MavenModuleResourceConfiguration configuration = getModuleResourcesConfiguration(context.getProjectDescriptor().dataManager.getDataPaths())[ CD ]
Line_7 $$ final File moduleOutput = getModuleOutputDir()-->Line_9 $$ final File output = getOutputDir(moduleOutput, resConfig, configuration.outputDirectory)[ FD ]
Line_10 $$ if (output != null) -->Line_11 $$ result.add(output)[ CD ]
Line_4 $$ if (configuration == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_9 $$ final File output = getOutputDir(moduleOutput, resConfig, configuration.outputDirectory)-->Line_11 $$ result.add(output)[ FD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_3 $$ MavenModuleResourceConfiguration configuration = getModuleResourcesConfiguration(context.getProjectDescriptor().dataManager.getDataPaths())[ FD ]
Line_6 $$ final Set<File> result = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_11 $$ result.add(output)[ FD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_4 $$ if (configuration == null)[ CD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_7 $$ final File moduleOutput = getModuleOutputDir()[ CD ]
Line_9 $$ final File output = getOutputDir(moduleOutput, resConfig, configuration.outputDirectory)-->Line_10 $$ if (output != null) [ FD ]
Line_2 $$ public Collection<File> getOutputRoots(CompileContext context) -->Line_14 $$ return result[ CD ]
