Line_5 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_13 $$ PsiElement method = methodExpression.resolve()[ FD ]
Line_6 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_7 $$ if (qualifierExpression != null) [ FD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_43 $$ ifNotFail.setOffset(myCurrentFlow.getInstructionCount())[ CD ]
Line_40 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)-->Line_41 $$ addInstruction(ifNotFail)[ FD ]
Line_48 $$ if (isEqualsCall) -->Line_53 $$ addInstruction(new ApplyNotNullInstruction(expression))[ CD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_42 $$ returnCheckingFinally(true, expression)[ CD ]
Line_16 $$ for (int i = 0; i < expressions.length; i++) -->Line_22 $$ if (i == 0 && isEqualsCall) [ CD ]
Line_33 $$ List<MethodContract> contracts = method instanceof PsiMethod ? getMethodCallContracts((PsiMethod) method, expression) : Collections.<MethodContract>emptyList()-->Line_35 $$ if (!contracts.isEmpty()) [ FD ]
Line_48 $$ if (isEqualsCall) -->Line_55 $$ addInstruction(new GotoInstruction(getEndOffset(expression)))[ CD ]
Line_16 $$ for (int i = 0; i < expressions.length; i++) -->Line_19 $$ if (parameters != null && i < parameters.length) [ CD ]
Line_17 $$ PsiExpression paramExpr = expressions[i]-->Line_20 $$ generateBoxingUnboxingInstructionFor(paramExpr, parameters[i].getType())[ FD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_38 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getContractFail(), null))[ CD ]
Line_7 $$ if (qualifierExpression != null) -->Line_8 $$ qualifierExpression.accept(this)[ CD ]
Line_48 $$ if (isEqualsCall) -->Line_57 $$ addInstruction(new PopInstruction())[ CD ]
Line_48 $$ if (isEqualsCall) -->Line_54 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getTrue(), null))[ CD ]
Line_19 $$ if (parameters != null && i < parameters.length) -->Line_20 $$ generateBoxingUnboxingInstructionFor(paramExpr, parameters[i].getType())[ CD ]
Line_7 $$ if (qualifierExpression != null) -->Line_10 $$ pushUnknown()[ CD ]
Line_40 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)-->Line_43 $$ ifNotFail.setOffset(myCurrentFlow.getInstructionCount())[ FD ]
Line_45 $$ if (!myCatchStack.isEmpty()) -->Line_46 $$ addMethodThrows(expression.resolveMethod(), expression)[ CD ]
Line_15 $$ boolean isEqualsCall = expressions.length == 1 && method instanceof PsiMethod && "equals".equals(((PsiMethod) method).getName()) && parameters.length == 1 && parameters[0].getType().equalsToText(JAVA_LANG_OBJECT) && PsiType.BOOLEAN.equals(((PsiMethod) method).getReturnType())-->Line_22 $$ if (i == 0 && isEqualsCall) [ FD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_39 $$ addInstruction(new BinopInstruction(JavaTokenType.EQEQ, null, myProject))[ CD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_41 $$ addInstruction(ifNotFail)[ CD ]
Line_48 $$ if (isEqualsCall) -->Line_58 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getFalse(), null))[ CD ]
Line_48 $$ if (isEqualsCall) -->Line_56 $$ ifFalse.setOffset(myCurrentFlow.getInstructionCount())[ CD ]
Line_35 $$ if (!contracts.isEmpty()) -->Line_40 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)[ CD ]
Line_17 $$ PsiExpression paramExpr = expressions[i]-->Line_18 $$ paramExpr.accept(this)[ FD ]
Line_16 $$ for (int i = 0; i < expressions.length; i++) -->Line_17 $$ PsiExpression paramExpr = expressions[i][ CD ]
Line_6 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_8 $$ qualifierExpression.accept(this)[ FD ]
Line_16 $$ for (int i = 0; i < expressions.length; i++) -->Line_18 $$ paramExpr.accept(this)[ CD ]
Line_5 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_6 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ FD ]
