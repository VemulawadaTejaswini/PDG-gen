Line_39 $$ if (!myCatchStack.isEmpty()) -->Line_40 $$ addMethodThrows(expression.resolveMethod(), expression)[ CD ]
Line_21 $$ if (i == 0 && isEqualsCall) -->Line_23 $$ addInstruction(new DupInstruction(2, 1))[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_51 $$ finishElement(expression)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_11 $$ PsiExpression[] expressions = expression.getArgumentList().getExpressions()[ CD ]
Line_16 $$ PsiExpression paramExpr = expressions[i]-->Line_17 $$ paramExpr.accept(this)[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_36 $$ returnCheckingFinally(true, expression)[ FD ]
Line_42 $$ if (isEqualsCall) -->Line_43 $$ ConditionalGotoInstruction ifFalse = addInstruction(new ConditionalGotoInstruction(null, true, null))[ CD ]
Line_16 $$ PsiExpression paramExpr = expressions[i]-->Line_19 $$ generateBoxingUnboxingInstructionFor(paramExpr, parameters[i].getType())[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_39 $$ if (!myCatchStack.isEmpty()) [ CD ]
Line_21 $$ if (i == 0 && isEqualsCall) -->Line_22 $$ addInstruction(new SwapInstruction())[ CD ]
Line_15 $$ for (int i = 0; i < expressions.length; i++) -->Line_17 $$ paramExpr.accept(this)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_28 $$ List<MethodContract> contracts = method instanceof PsiMethod ? getMethodCallContracts((PsiMethod) method, expression) : Collections.<MethodContract>emptyList()[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_30 $$ if (!contracts.isEmpty()) [ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_27 $$ addConditionalRuntimeThrow()[ CD ]
Line_21 $$ if (i == 0 && isEqualsCall) -->Line_24 $$ addInstruction(new PopInstruction())[ CD ]
Line_42 $$ if (isEqualsCall) -->Line_45 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getTrue(), null))[ CD ]
Line_43 $$ ConditionalGotoInstruction ifFalse = addInstruction(new ConditionalGotoInstruction(null, true, null))-->Line_47 $$ ifFalse.setOffset(myCurrentFlow.getInstructionCount())[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_51 $$ finishElement(expression)[ FD ]
Line_34 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)-->Line_35 $$ addInstruction(ifNotFail)[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_11 $$ PsiExpression[] expressions = expression.getArgumentList().getExpressions()[ FD ]
Line_42 $$ if (isEqualsCall) -->Line_49 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getFalse(), null))[ CD ]
Line_6 $$ if (qualifierExpression != null) -->Line_7 $$ qualifierExpression.accept(this)[ CD ]
Line_14 $$ boolean isEqualsCall = expressions.length == 1 && method instanceof PsiMethod && "equals".equals(((PsiMethod) method).getName()) && parameters.length == 1 && parameters[0].getType().equalsToText(JAVA_LANG_OBJECT) && PsiType.BOOLEAN.equals(((PsiMethod) method).getReturnType())-->Line_21 $$ if (i == 0 && isEqualsCall) [ FD ]
Line_4 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_12 $$ PsiElement method = methodExpression.resolve()[ FD ]
Line_18 $$ if (parameters != null && i < parameters.length) -->Line_19 $$ generateBoxingUnboxingInstructionFor(paramExpr, parameters[i].getType())[ CD ]
Line_42 $$ if (isEqualsCall) -->Line_44 $$ addInstruction(new ApplyNotNullInstruction(expression))[ CD ]
Line_15 $$ for (int i = 0; i < expressions.length; i++) -->Line_16 $$ PsiExpression paramExpr = expressions[i][ CD ]
Line_42 $$ if (isEqualsCall) -->Line_46 $$ addInstruction(new GotoInstruction(getEndOffset(expression)))[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_3 $$ startElement(expression)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_6 $$ if (qualifierExpression != null) [ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_4 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_4 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()[ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_37 $$ ifNotFail.setOffset(myCurrentFlow.getInstructionCount())[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_29 $$ addInstruction(new MethodCallInstruction(expression, myFactory.createValue(expression), contracts))[ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_31 $$ addInstruction(new DupInstruction())[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_28 $$ List<MethodContract> contracts = method instanceof PsiMethod ? getMethodCallContracts((PsiMethod) method, expression) : Collections.<MethodContract>emptyList()[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_46 $$ addInstruction(new GotoInstruction(getEndOffset(expression)))[ FD ]
Line_5 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_6 $$ if (qualifierExpression != null) [ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_5 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ CD ]
Line_34 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)-->Line_37 $$ ifNotFail.setOffset(myCurrentFlow.getInstructionCount())[ FD ]
Line_42 $$ if (isEqualsCall) -->Line_47 $$ ifFalse.setOffset(myCurrentFlow.getInstructionCount())[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_40 $$ addMethodThrows(expression.resolveMethod(), expression)[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_12 $$ PsiElement method = methodExpression.resolve()[ CD ]
Line_4 $$ PsiReferenceExpression methodExpression = expression.getMethodExpression()-->Line_5 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()[ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_13 $$ PsiParameter[] parameters = method instanceof PsiMethod ? ((PsiMethod) method).getParameterList().getParameters() : null[ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_35 $$ addInstruction(ifNotFail)[ CD ]
Line_42 $$ if (isEqualsCall) -->Line_48 $$ addInstruction(new PopInstruction())[ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_32 $$ addInstruction(new PushInstruction(myFactory.getConstFactory().getContractFail(), null))[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_42 $$ if (isEqualsCall) [ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_33 $$ addInstruction(new BinopInstruction(JavaTokenType.EQEQ, null, myProject))[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_29 $$ addInstruction(new MethodCallInstruction(expression, myFactory.createValue(expression), contracts))[ FD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_36 $$ returnCheckingFinally(true, expression)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_14 $$ boolean isEqualsCall = expressions.length == 1 && method instanceof PsiMethod && "equals".equals(((PsiMethod) method).getName()) && parameters.length == 1 && parameters[0].getType().equalsToText(JAVA_LANG_OBJECT) && PsiType.BOOLEAN.equals(((PsiMethod) method).getReturnType())[ CD ]
Line_30 $$ if (!contracts.isEmpty()) -->Line_34 $$ ConditionalGotoInstruction ifNotFail = new ConditionalGotoInstruction(null, true, null)[ CD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_15 $$ for (int i = 0; i < expressions.length; i++) [ CD ]
Line_28 $$ List<MethodContract> contracts = method instanceof PsiMethod ? getMethodCallContracts((PsiMethod) method, expression) : Collections.<MethodContract>emptyList()-->Line_30 $$ if (!contracts.isEmpty()) [ FD ]
Line_2 $$ public void visitMethodCallExpression(PsiMethodCallExpression expression) -->Line_3 $$ startElement(expression)[ FD ]
Line_15 $$ for (int i = 0; i < expressions.length; i++) -->Line_21 $$ if (i == 0 && isEqualsCall) [ CD ]
Line_5 $$ PsiExpression qualifierExpression = methodExpression.getQualifierExpression()-->Line_7 $$ qualifierExpression.accept(this)[ FD ]
Line_15 $$ for (int i = 0; i < expressions.length; i++) -->Line_18 $$ if (parameters != null && i < parameters.length) [ CD ]
Line_6 $$ if (qualifierExpression != null) -->Line_9 $$ pushUnknown()[ CD ]
