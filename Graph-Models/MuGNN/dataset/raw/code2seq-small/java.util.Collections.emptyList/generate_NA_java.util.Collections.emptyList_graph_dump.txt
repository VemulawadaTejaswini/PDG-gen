Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_66 $$ offset = newOffset[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_33 $$ indentStr = ""-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_57 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_45 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_51 $$ predefinedValues = null[ CD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) -->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ CD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_53 $$ String s = parentTemplate.getString()[ FD ]
Line_74 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_19 $$ String indentStr-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_20 $$ if (callback.isInInjectedFragment()) -->Line_23 $$ if (document instanceof DocumentWindowImpl && ((DocumentWindowImpl) document).isOneLine()) [ CD ]
Line_84 $$ offset += indentStr.length() + 1-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_21 $$ Editor editor = callback.getEditor()-->Line_22 $$ Document document = editor.getDocument()[ FD ]
Line_86 $$ if (end == -1 && e < offset) -->Line_87 $$ end = e[ CD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_15 $$ oneLineTemplateExpanding = true-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_19 $$ String indentStr-->Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_11 $$ for (ZenCodingFilter filter : filters) -->Line_12 $$ generationNode = filter.filterNode(generationNode)[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_45 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ CD ]
Line_57 $$ parentTemplate = parentTemplate.copy()-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)-->Line_51 $$ predefinedValues = null[ FD ]
Line_84 $$ offset += indentStr.length() + 1-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_59 $$ final String txt = hasChildren || myContainsSurroundedTextMarker ? null : mySurroundedText-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_53 $$ String s = parentTemplate.getString()[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_68 $$ end = offset[ FD ]
Line_15 $$ oneLineTemplateExpanding = true-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_66 $$ offset = newOffset-->Line_68 $$ end = offset[ FD ]
Line_41 $$ int end = -1-->Line_64 $$ end = offset[ FD ]
Line_33 $$ indentStr = ""-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_67 $$ if (end == -1 && offset < builder.length() && myChildren.size() == 0) -->Line_68 $$ end = offset[ CD ]
Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)-->Line_87 $$ end = e[ FD ]
Line_66 $$ offset = newOffset-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_91 $$ builder.setIsToReformat(false)[ FD ]
Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) -->Line_78 $$ offset += indentStr.length() + 1[ CD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_73 $$ GenerationNode child = myChildren.get(i)-->Line_74 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_62 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_64 $$ end = offset-->Line_68 $$ end = offset[ FD ]
Line_44 $$ Map<String, String> predefinedValues-->Line_51 $$ predefinedValues = null[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_11 $$ for (ZenCodingFilter filter : filters) -->Line_55 $$ s = filter.filterText(s, myTemplateToken)[ FD ]
Line_9 $$ boolean shouldNotReformatTemplate = false-->Line_14 $$ shouldNotReformatTemplate = true[ FD ]
Line_13 $$ if (filter instanceof SingleLineEmmetFilter) -->Line_14 $$ shouldNotReformatTemplate = true[ CD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_33 $$ indentStr = ""-->Line_35 $$ indentStr = "\t"[ FD ]
Line_18 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())-->Line_34 $$ if (settings.useTabCharacter(callback.getFileType())) [ FD ]
Line_66 $$ offset = newOffset-->Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_64 $$ end = offset-->Line_87 $$ end = e[ FD ]
Line_46 $$ TemplateToken xmlTemplateToken = myTemplateToken-->Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_55 $$ s = filter.filterText(s, myTemplateToken)-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_53 $$ String s = parentTemplate.getString()[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_10 $$ boolean oneLineTemplateExpanding = false-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_19 $$ String indentStr-->Line_33 $$ indentStr = ""[ FD ]
Line_37 $$ int tabSize = settings.getTabSize(callback.getFileType())-->Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_11 $$ for (ZenCodingFilter filter : filters) -->Line_13 $$ if (filter instanceof SingleLineEmmetFilter) [ FD ]
Line_42 $$ boolean hasChildren = myChildren.size() > 0-->Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_41 $$ int end = -1-->Line_87 $$ end = e[ FD ]
Line_19 $$ String indentStr-->Line_35 $$ indentStr = "\t"[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_45 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_46 $$ TemplateToken xmlTemplateToken = myTemplateToken[ CD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_73 $$ GenerationNode child = myChildren.get(i)-->Line_75 $$ boolean blockTag = child.isBlockTag()[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_68 $$ end = offset-->Line_87 $$ end = e[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_62 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ FD ]
Line_35 $$ indentStr = "\t"-->Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_66 $$ offset = newOffset-->Line_70 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_66 $$ offset = newOffset-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_62 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())-->Line_66 $$ offset = newOffset[ FD ]
Line_5 $$ GenerationNode generationNode = this-->Line_7 $$ return generationNode.generate(callback, generator, Collections.<ZenCodingFilter>emptyList(), insertSurroundedText, segmentsLimit)[ FD ]
Line_18 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())-->Line_37 $$ int tabSize = settings.getTabSize(callback.getFileType())[ FD ]
Line_84 $$ offset += indentStr.length() + 1-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_42 $$ boolean hasChildren = myChildren.size() > 0-->Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_53 $$ String s = parentTemplate.getString()-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_70 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_19 $$ String indentStr-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_44 $$ Map<String, String> predefinedValues-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_35 $$ indentStr = "\t"-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_90 $$ if (shouldNotReformatTemplate) -->Line_91 $$ builder.setIsToReformat(false)[ CD ]
Line_20 $$ if (callback.isInInjectedFragment()) -->Line_34 $$ if (settings.useTabCharacter(callback.getFileType())) [ CD ]
Line_35 $$ indentStr = "\t"-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_20 $$ if (callback.isInInjectedFragment()) -->Line_33 $$ indentStr = ""[ CD ]
Line_5 $$ GenerationNode generationNode = this-->Line_6 $$ if (generationNode != this) [ FD ]
Line_23 $$ if (document instanceof DocumentWindowImpl && ((DocumentWindowImpl) document).isOneLine()) -->Line_31 $$ filters.add(new SingleLineEmmetFilter())[ CD ]
Line_10 $$ boolean oneLineTemplateExpanding = false-->Line_15 $$ oneLineTemplateExpanding = true[ FD ]
Line_10 $$ boolean oneLineTemplateExpanding = false-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_70 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null-->Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_67 $$ if (end == -1 && offset < builder.length() && myChildren.size() == 0) [ FD ]
Line_20 $$ if (callback.isInInjectedFragment()) -->Line_22 $$ Document document = editor.getDocument()[ CD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_93 $$ return builder.buildTemplate()[ FD ]
Line_41 $$ int end = -1-->Line_68 $$ end = offset[ FD ]
Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_57 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_45 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ CD ]
Line_84 $$ offset += indentStr.length() + 1-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_66 $$ offset = newOffset-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_44 $$ Map<String, String> predefinedValues-->Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_13 $$ if (filter instanceof SingleLineEmmetFilter) -->Line_15 $$ oneLineTemplateExpanding = true[ CD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_6 $$ if (generationNode != this) -->Line_7 $$ return generationNode.generate(callback, generator, Collections.<ZenCodingFilter>emptyList(), insertSurroundedText, segmentsLimit)[ CD ]
Line_53 $$ String s = parentTemplate.getString()-->Line_55 $$ s = filter.filterText(s, myTemplateToken)[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_57 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_34 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ CD ]
Line_33 $$ indentStr = ""-->Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_66 $$ offset = newOffset-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_63 $$ if (offset < builder.length() && newOffset != offset) [ FD ]
Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) -->Line_83 $$ builder.insertText(offset, "\n" + indentStr, false)[ CD ]
Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_34 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_35 $$ indentStr = "\t"[ CD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_70 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_46 $$ TemplateToken xmlTemplateToken = myTemplateToken-->Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_40 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_66 $$ offset = newOffset-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_43 $$ TemplateImpl parentTemplate-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_81 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_5 $$ GenerationNode generationNode = this-->Line_12 $$ generationNode = filter.filterNode(generationNode)[ FD ]
Line_48 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_57 $$ parentTemplate = parentTemplate.copy()-->Line_58 $$ parentTemplate.setString(s)[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) -->Line_84 $$ offset += indentStr.length() + 1[ CD ]
Line_57 $$ parentTemplate = parentTemplate.copy()-->Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_34 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_37 $$ int tabSize = settings.getTabSize(callback.getFileType())[ CD ]
Line_66 $$ offset = newOffset-->Line_77 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_64 $$ end = offset[ FD ]
Line_84 $$ offset += indentStr.length() + 1-->Line_82 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_20 $$ if (callback.isInInjectedFragment()) -->Line_21 $$ Editor editor = callback.getEditor()[ CD ]
Line_66 $$ offset = newOffset-->Line_84 $$ offset += indentStr.length() + 1[ FD ]
Line_38 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)-->Line_78 $$ offset += indentStr.length() + 1[ FD ]
Line_78 $$ offset += indentStr.length() + 1-->Line_76 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_63 $$ if (offset < builder.length() && newOffset != offset) -->Line_64 $$ end = offset[ CD ]
Line_42 $$ boolean hasChildren = myChildren.size() > 0-->Line_47 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_45 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_50 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ CD ]
Line_51 $$ predefinedValues = null-->Line_60 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_61 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_80 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
