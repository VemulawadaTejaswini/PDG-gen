Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)-->Line_79 $$ end = e[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_65 $$ GenerationNode child = myChildren.get(i)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_20 $$ Editor editor = callback.getEditor()[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_19 $$ if (callback.isInInjectedFragment()) [ FD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_8 $$ boolean shouldNotReformatTemplate = false[ CD ]
Line_9 $$ boolean oneLineTemplateExpanding = false-->Line_14 $$ oneLineTemplateExpanding = true[ FD ]
Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_19 $$ if (callback.isInInjectedFragment()) [ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_38 $$ if (generator instanceof XmlZenCodingGenerator) [ CD ]
Line_28 $$ indentStr = "\t"-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_59 $$ offset = newOffset-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_39 $$ TemplateToken xmlTemplateToken = myTemplateToken-->Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_4 $$ GenerationNode generationNode = this-->Line_11 $$ generationNode = filter.filterNode(generationNode)[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_66 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)[ CD ]
Line_78 $$ if (end == -1 && e < offset) -->Line_79 $$ end = e[ CD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_55 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_63 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_22 $$ if (document instanceof DocumentWindowImpl && ((DocumentWindowImpl) document).isOneLine()) -->Line_23 $$ oneLineTemplateExpanding = true[ CD ]
Line_12 $$ if (filter instanceof SingleLineEmmetFilter) -->Line_14 $$ oneLineTemplateExpanding = true[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_66 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)[ FD ]
Line_38 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_39 $$ TemplateToken xmlTemplateToken = myTemplateToken[ CD ]
Line_22 $$ if (document instanceof DocumentWindowImpl && ((DocumentWindowImpl) document).isOneLine()) -->Line_24 $$ filters.add(new SingleLineEmmetFilter())[ CD ]
Line_63 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null-->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_52 $$ final String txt = hasChildren || myContainsSurroundedTextMarker ? null : mySurroundedText[ CD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_59 $$ offset = newOffset-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_83 $$ builder.setIsToReformat(false)[ FD ]
Line_20 $$ Editor editor = callback.getEditor()-->Line_21 $$ Document document = editor.getDocument()[ FD ]
Line_38 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_50 $$ parentTemplate = parentTemplate.copy()[ CD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_26 $$ indentStr = ""-->Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ CD ]
Line_55 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())-->Line_59 $$ offset = newOffset[ FD ]
Line_18 $$ String indentStr-->Line_26 $$ indentStr = ""[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_59 $$ offset = newOffset[ CD ]
Line_50 $$ parentTemplate = parentTemplate.copy()-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ CD ]
Line_38 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ CD ]
Line_59 $$ offset = newOffset-->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_3 $$ myContainsSurroundedTextMarker = !(insertSurroundedText && myInsertSurroundedTextAtTheEnd)[ CD ]
Line_44 $$ predefinedValues = null-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_35 $$ boolean hasChildren = myChildren.size() > 0-->Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_10 $$ for (ZenCodingFilter filter : filters) -->Line_48 $$ s = filter.filterText(s, myTemplateToken)[ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_50 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_4 $$ GenerationNode generationNode = this-->Line_5 $$ if (generationNode != this) [ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_76 $$ offset += indentStr.length() + 1-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_9 $$ boolean oneLineTemplateExpanding = false-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) [ CD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_61 $$ end = offset[ FD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_30 $$ int tabSize = settings.getTabSize(callback.getFileType())[ FD ]
Line_82 $$ if (shouldNotReformatTemplate) -->Line_83 $$ builder.setIsToReformat(false)[ CD ]
Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_59 $$ offset = newOffset[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_78 $$ if (end == -1 && e < offset) [ CD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_56 $$ if (offset < builder.length() && newOffset != offset) [ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ CD ]
Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_30 $$ int tabSize = settings.getTabSize(callback.getFileType())[ CD ]
Line_65 $$ GenerationNode child = myChildren.get(i)-->Line_67 $$ boolean blockTag = child.isBlockTag()[ FD ]
Line_52 $$ final String txt = hasChildren || myContainsSurroundedTextMarker ? null : mySurroundedText-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_76 $$ offset += indentStr.length() + 1-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_24 $$ filters.add(new SingleLineEmmetFilter())[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_46 $$ String s = parentTemplate.getString()[ CD ]
Line_34 $$ int end = -1-->Line_79 $$ end = e[ FD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_34 $$ int end = -1-->Line_61 $$ end = offset[ FD ]
Line_19 $$ if (callback.isInInjectedFragment()) -->Line_22 $$ if (document instanceof DocumentWindowImpl && ((DocumentWindowImpl) document).isOneLine()) [ CD ]
Line_9 $$ boolean oneLineTemplateExpanding = false-->Line_23 $$ oneLineTemplateExpanding = true[ FD ]
Line_59 $$ offset = newOffset-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_63 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_50 $$ parentTemplate = parentTemplate.copy()-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_76 $$ offset += indentStr.length() + 1-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_37 $$ Map<String, String> predefinedValues-->Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_65 $$ GenerationNode child = myChildren.get(i)-->Line_66 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)[ FD ]
Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_50 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_57 $$ end = offset-->Line_61 $$ end = offset[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_17 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())[ CD ]
Line_59 $$ offset = newOffset-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_23 $$ oneLineTemplateExpanding = true-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_37 $$ Map<String, String> predefinedValues-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_76 $$ offset += indentStr.length() + 1-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_18 $$ String indentStr[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_85 $$ return builder.buildTemplate()[ CD ]
Line_26 $$ indentStr = ""-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_18 $$ String indentStr-->Line_28 $$ indentStr = "\t"[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_19 $$ if (callback.isInInjectedFragment()) -->Line_21 $$ Document document = editor.getDocument()[ CD ]
Line_34 $$ int end = -1-->Line_57 $$ end = offset[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_60 $$ if (end == -1 && offset < builder.length() && myChildren.size() == 0) [ CD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ CD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_67 $$ boolean blockTag = child.isBlockTag()[ CD ]
Line_59 $$ offset = newOffset-->Line_63 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ FD ]
Line_18 $$ String indentStr-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_30 $$ int tabSize = settings.getTabSize(callback.getFileType())-->Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_28 $$ indentStr = "\t"-->Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_38 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_44 $$ predefinedValues = null[ CD ]
Line_35 $$ boolean hasChildren = myChildren.size() > 0-->Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)[ FD ]
Line_5 $$ if (generationNode != this) -->Line_6 $$ return generationNode.generate(callback, generator, Collections.<ZenCodingFilter>emptyList(), insertSurroundedText, segmentsLimit)[ CD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_63 $$ LiveTemplateBuilder.Marker marker = offset < builder.length() ? builder.createMarker(offset) : null[ CD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_46 $$ String s = parentTemplate.getString()-->Line_48 $$ s = filter.filterText(s, myTemplateToken)[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_60 $$ if (end == -1 && offset < builder.length() && myChildren.size() == 0) [ FD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) -->Line_70 $$ offset += indentStr.length() + 1[ CD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_59 $$ offset = newOffset-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_6 $$ return generationNode.generate(callback, generator, Collections.<ZenCodingFilter>emptyList(), insertSurroundedText, segmentsLimit)[ FD ]
Line_39 $$ TemplateToken xmlTemplateToken = myTemplateToken-->Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_51 $$ parentTemplate.setString(s)[ CD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_59 $$ offset = newOffset-->Line_61 $$ end = offset[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_50 $$ parentTemplate = parentTemplate.copy()-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_55 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ FD ]
Line_17 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())-->Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) [ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_4 $$ GenerationNode generationNode = this[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_55 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_85 $$ return builder.buildTemplate()[ FD ]
Line_28 $$ indentStr = "\t"-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_46 $$ String s = parentTemplate.getString()[ FD ]
Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_46 $$ String s = parentTemplate.getString()[ FD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_14 $$ oneLineTemplateExpanding = true-->Line_23 $$ oneLineTemplateExpanding = true[ FD ]
Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)-->Line_44 $$ predefinedValues = null[ FD ]
Line_37 $$ Map<String, String> predefinedValues-->Line_44 $$ predefinedValues = null[ FD ]
Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_19 $$ if (callback.isInInjectedFragment()) -->Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) [ CD ]
Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) -->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ CD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_69 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_14 $$ oneLineTemplateExpanding = true-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_59 $$ offset = newOffset-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_37 $$ Map<String, String> predefinedValues[ CD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()[ FD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_5 $$ if (generationNode != this) [ CD ]
Line_19 $$ if (callback.isInInjectedFragment()) -->Line_26 $$ indentStr = ""[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ CD ]
Line_12 $$ if (filter instanceof SingleLineEmmetFilter) -->Line_13 $$ shouldNotReformatTemplate = true[ CD ]
Line_56 $$ if (offset < builder.length() && newOffset != offset) -->Line_57 $$ end = offset[ CD ]
Line_60 $$ if (end == -1 && offset < builder.length() && myChildren.size() == 0) -->Line_61 $$ end = offset[ CD ]
Line_26 $$ indentStr = ""-->Line_28 $$ indentStr = "\t"[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_55 $$ int newOffset = gotoChild(callback.getProject(), builder.getText(), offset, 0, builder.length())[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_82 $$ if (shouldNotReformatTemplate) [ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_38 $$ if (generator instanceof XmlZenCodingGenerator) [ FD ]
Line_61 $$ end = offset-->Line_79 $$ end = e[ FD ]
Line_14 $$ oneLineTemplateExpanding = true-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_66 $$ TemplateImpl childTemplate = child.generate(callback, generator, filters, !myContainsSurroundedTextMarker, segmentsLimit)-->Line_72 $$ int e = builder.insertTemplate(offset, childTemplate, null)[ FD ]
Line_18 $$ String indentStr-->Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)[ FD ]
Line_8 $$ boolean shouldNotReformatTemplate = false-->Line_13 $$ shouldNotReformatTemplate = true[ FD ]
Line_46 $$ String s = parentTemplate.getString()-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_70 $$ offset += indentStr.length() + 1-->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ CD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)-->Line_57 $$ end = offset[ FD ]
Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_10 $$ for (ZenCodingFilter filter : filters) -->Line_11 $$ generationNode = filter.filterNode(generationNode)[ FD ]
Line_35 $$ boolean hasChildren = myChildren.size() > 0-->Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ FD ]
Line_9 $$ boolean oneLineTemplateExpanding = false-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_50 $$ parentTemplate = parentTemplate.copy()[ FD ]
Line_17 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())-->Line_30 $$ int tabSize = settings.getTabSize(callback.getFileType())[ FD ]
Line_76 $$ offset += indentStr.length() + 1-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_57 $$ end = offset-->Line_79 $$ end = e[ FD ]
Line_18 $$ String indentStr-->Line_76 $$ offset += indentStr.length() + 1[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_9 $$ boolean oneLineTemplateExpanding = false[ CD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_17 $$ CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(callback.getProject())[ FD ]
Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) -->Line_75 $$ builder.insertText(offset, "\n" + indentStr, false)[ CD ]
Line_36 $$ TemplateImpl parentTemplate-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_64 $$ for (int i = 0, myChildrenSize = myChildren.size(); i < myChildrenSize; i++) -->Line_65 $$ GenerationNode child = myChildren.get(i)[ CD ]
Line_23 $$ oneLineTemplateExpanding = true-->Line_68 $$ if (!oneLineTemplateExpanding && blockTag && !isNewLineBefore(builder.getText(), offset)) [ FD ]
Line_48 $$ s = filter.filterText(s, myTemplateToken)-->Line_51 $$ parentTemplate.setString(s)[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_56 $$ if (offset < builder.length() && newOffset != offset) [ CD ]
Line_26 $$ indentStr = ""-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_33 $$ LiveTemplateBuilder builder = new LiveTemplateBuilder(EmmetOptions.getInstance().isAddEditPointAtTheEndOfTemplate(), segmentsLimit)[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_36 $$ TemplateImpl parentTemplate[ CD ]
Line_73 $$ offset = marker != null ? marker.getEndOffset() : builder.length()-->Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) [ FD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_46 $$ String s = parentTemplate.getString()[ FD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) [ FD ]
Line_27 $$ if (settings.useTabCharacter(callback.getFileType())) -->Line_28 $$ indentStr = "\t"[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)[ FD ]
Line_19 $$ if (callback.isInInjectedFragment()) -->Line_20 $$ Editor editor = callback.getEditor()[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_35 $$ boolean hasChildren = myChildren.size() > 0[ CD ]
Line_40 $$ parentTemplate = invokeXmlTemplate(xmlTemplateToken, callback, generator, hasChildren)-->Line_53 $$ parentTemplate = expandTemplate(parentTemplate, predefinedValues, txt, segmentsLimit)[ FD ]
Line_59 $$ offset = newOffset-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_31 $$ indentStr = StringUtil.repeatSymbol(' ', tabSize)-->Line_70 $$ offset += indentStr.length() + 1[ FD ]
Line_4 $$ GenerationNode generationNode = this-->Line_6 $$ return generationNode.generate(callback, generator, Collections.<ZenCodingFilter>emptyList(), insertSurroundedText, segmentsLimit)[ FD ]
Line_43 $$ parentTemplate = invokeTemplate(myTemplateToken, hasChildren, callback, generator)-->Line_54 $$ int offset = builder.insertTemplate(0, parentTemplate, null)[ FD ]
Line_10 $$ for (ZenCodingFilter filter : filters) -->Line_12 $$ if (filter instanceof SingleLineEmmetFilter) [ FD ]
Line_74 $$ if (!oneLineTemplateExpanding && ((blockTag && !isNewLineAfter(builder.getText(), offset)) || myInsertNewLineBetweenNodes)) -->Line_76 $$ offset += indentStr.length() + 1[ CD ]
Line_38 $$ if (generator instanceof XmlZenCodingGenerator) -->Line_41 $$ predefinedValues = buildPredefinedValues(xmlTemplateToken.getAttributes(), (XmlZenCodingGenerator) generator, hasChildren)[ CD ]
Line_2 $$ public TemplateImpl generate(@NotNull CustomTemplateCallback callback, @Nullable ZenCodingGenerator generator, @NotNull Collection<ZenCodingFilter> filters, boolean insertSurroundedText, int segmentsLimit) -->Line_34 $$ int end = -1[ CD ]
