Line_5 $$ if (callSite instanceof PyCallExpression) -->Line_9 $$ if (callSite instanceof PySubscriptionExpression || callSite instanceof PyBinaryExpression) [ CD ]
Line_9 $$ if (callSite instanceof PySubscriptionExpression || callSite instanceof PyBinaryExpression) -->Line_26 $$ return resolvedToUnknownResult ? Collections.<PyCallable>emptyList() : results[ CD ]
Line_9 $$ if (callSite instanceof PySubscriptionExpression || callSite instanceof PyBinaryExpression) -->Line_11 $$ boolean resolvedToUnknownResult = false[ CD ]
Line_11 $$ boolean resolvedToUnknownResult = false-->Line_24 $$ resolvedToUnknownResult = true[ FD ]
Line_7 $$ final PyCallExpression.PyMarkedCallee callee = callExpr.resolveCallee(resolveContext)-->Line_8 $$ return callee != null ? Collections.singletonList(callee.getCallable()) : Collections.<PyCallable>emptyList()[ FD ]
Line_10 $$ final List<PyCallable> results = new ArrayList<PyCallable>()-->Line_14 $$ results.add((PyCallable) result)[ FD ]
Line_10 $$ final List<PyCallable> results = new ArrayList<PyCallable>()-->Line_20 $$ results.add(((PyFunctionType) resultType).getCallable())[ FD ]
Line_9 $$ if (callSite instanceof PySubscriptionExpression || callSite instanceof PyBinaryExpression) -->Line_10 $$ final List<PyCallable> results = new ArrayList<PyCallable>()[ CD ]
Line_13 $$ if (result instanceof PyCallable) -->Line_14 $$ results.add((PyCallable) result)[ CD ]
Line_6 $$ final PyCallExpression callExpr = (PyCallExpression) callSite-->Line_7 $$ final PyCallExpression.PyMarkedCallee callee = callExpr.resolveCallee(resolveContext)[ FD ]
Line_17 $$ if (result instanceof PyTypedElement) -->Line_19 $$ if (resultType instanceof PyFunctionType) [ CD ]
Line_18 $$ final PyType resultType = context.getType((PyTypedElement) result)-->Line_19 $$ if (resultType instanceof PyFunctionType) [ FD ]
Line_12 $$ for (PsiElement result : PyUtil.multiResolveTopPriority(callSite, resolveContext)) -->Line_17 $$ if (result instanceof PyTypedElement) [ FD ]
Line_4 $$ final PyResolveContext resolveContext = PyResolveContext.noImplicits().withTypeEvalContext(context)-->Line_12 $$ for (PsiElement result : PyUtil.multiResolveTopPriority(callSite, resolveContext)) [ FD ]
Line_5 $$ if (callSite instanceof PyCallExpression) -->Line_6 $$ final PyCallExpression callExpr = (PyCallExpression) callSite[ CD ]
Line_5 $$ if (callSite instanceof PyCallExpression) -->Line_8 $$ return callee != null ? Collections.singletonList(callee.getCallable()) : Collections.<PyCallable>emptyList()[ CD ]
Line_9 $$ if (callSite instanceof PySubscriptionExpression || callSite instanceof PyBinaryExpression) -->Line_28 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final PyResolveContext resolveContext = PyResolveContext.noImplicits().withTypeEvalContext(context)-->Line_7 $$ final PyCallExpression.PyMarkedCallee callee = callExpr.resolveCallee(resolveContext)[ FD ]
Line_19 $$ if (resultType instanceof PyFunctionType) -->Line_20 $$ results.add(((PyFunctionType) resultType).getCallable())[ CD ]
Line_17 $$ if (result instanceof PyTypedElement) -->Line_18 $$ final PyType resultType = context.getType((PyTypedElement) result)[ CD ]
Line_5 $$ if (callSite instanceof PyCallExpression) -->Line_7 $$ final PyCallExpression.PyMarkedCallee callee = callExpr.resolveCallee(resolveContext)[ CD ]
Line_12 $$ for (PsiElement result : PyUtil.multiResolveTopPriority(callSite, resolveContext)) -->Line_13 $$ if (result instanceof PyCallable) [ FD ]
