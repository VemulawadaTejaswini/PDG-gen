Line_9 $$ if (generator != null && generator instanceof XmlZenCodingGenerator) -->Line_10 $$ final String templatePrefix = new ZenCodingTemplate().computeTemplateKeyWithoutContextChecking(callback)[ CD ]
Line_4 $$ if (file instanceof XmlFile) -->Line_6 $$ CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)[ CD ]
Line_14 $$ TemplateImpl template = callback.getGeneratedTemplate()-->Line_15 $$ String templateText = template != null ? template.getTemplateText() : null[ FD ]
Line_4 $$ if (file instanceof XmlFile) -->Line_9 $$ if (generator != null && generator instanceof XmlZenCodingGenerator) [ CD ]
Line_6 $$ CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_13 $$ ZenCodingTemplate.expand(templatePrefix, callback, generator, Collections.<ZenCodingFilter>emptyList(), expandPrimitiveAbbreviations, 0)[ FD ]
Line_8 $$ ZenCodingGenerator generator = ZenCodingTemplate.findApplicableDefaultGenerator(context, false)-->Line_13 $$ ZenCodingTemplate.expand(templatePrefix, callback, generator, Collections.<ZenCodingFilter>emptyList(), expandPrimitiveAbbreviations, 0)[ FD ]
Line_6 $$ CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_14 $$ TemplateImpl template = callback.getGeneratedTemplate()[ FD ]
Line_6 $$ CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_10 $$ final String templatePrefix = new ZenCodingTemplate().computeTemplateKeyWithoutContextChecking(callback)[ FD ]
Line_14 $$ TemplateImpl template = callback.getGeneratedTemplate()-->Line_17 $$ return template.isToReformat() ? reformatTemplateText(file, templateText) : templateText[ FD ]
Line_7 $$ PsiElement context = callback.getContext()-->Line_8 $$ ZenCodingGenerator generator = ZenCodingTemplate.findApplicableDefaultGenerator(context, false)[ FD ]
Line_10 $$ final String templatePrefix = new ZenCodingTemplate().computeTemplateKeyWithoutContextChecking(callback)-->Line_13 $$ ZenCodingTemplate.expand(templatePrefix, callback, generator, Collections.<ZenCodingFilter>emptyList(), expandPrimitiveAbbreviations, 0)[ FD ]
Line_6 $$ CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_7 $$ PsiElement context = callback.getContext()[ FD ]
Line_15 $$ String templateText = template != null ? template.getTemplateText() : null-->Line_17 $$ return template.isToReformat() ? reformatTemplateText(file, templateText) : templateText[ FD ]
Line_15 $$ String templateText = template != null ? template.getTemplateText() : null-->Line_16 $$ if (!StringUtil.isEmpty(templateText)) [ FD ]
Line_4 $$ if (file instanceof XmlFile) -->Line_8 $$ ZenCodingGenerator generator = ZenCodingTemplate.findApplicableDefaultGenerator(context, false)[ CD ]
Line_9 $$ if (generator != null && generator instanceof XmlZenCodingGenerator) -->Line_11 $$ if (templatePrefix != null) [ CD ]
Line_4 $$ if (file instanceof XmlFile) -->Line_7 $$ PsiElement context = callback.getContext()[ CD ]
Line_16 $$ if (!StringUtil.isEmpty(templateText)) -->Line_17 $$ return template.isToReformat() ? reformatTemplateText(file, templateText) : templateText[ CD ]
Line_10 $$ final String templatePrefix = new ZenCodingTemplate().computeTemplateKeyWithoutContextChecking(callback)-->Line_11 $$ if (templatePrefix != null) [ FD ]
Line_4 $$ if (file instanceof XmlFile) -->Line_5 $$ PsiDocumentManager.getInstance(file.getProject()).commitDocument(editor.getDocument())[ CD ]
