Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_11 $$ Collections.sort(roots, new java.util.Comparator<VirtualFile>() [ CD ]
Line_7 $$ userHome = FileUtil.toSystemIndependentName(new File(SystemProperties.getUserHome()).getCanonicalPath())-->Line_9 $$ userHome = null[ FD ]
Line_21 $$ VirtualFile common = VfsUtilCore.getCommonAncestor(current, next)-->Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) [ FD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_16 $$ Iterator<VirtualFile> it = roots.iterator()[ CD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_29 $$ reducedRoots.add(current)[ CD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_17 $$ VirtualFile current = it.next()[ CD ]
Line_19 $$ while (it.hasNext()) -->Line_20 $$ VirtualFile next = it.next()[ CD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_30 $$ return reducedRoots[ CD ]
Line_5 $$ String userHome-->Line_9 $$ userHome = null[ FD ]
Line_11 $$ Collections.sort(roots, new java.util.Comparator<VirtualFile>() -->Line_13 $$ return o1.getPath().compareTo(o2.getPath())[ FD ]
Line_7 $$ userHome = FileUtil.toSystemIndependentName(new File(SystemProperties.getUserHome()).getCanonicalPath())-->Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) [ FD ]
Line_19 $$ while (it.hasNext()) -->Line_21 $$ VirtualFile common = VfsUtilCore.getCommonAncestor(current, next)[ CD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_3 $$ if (roots.isEmpty())[ FD ]
Line_5 $$ String userHome-->Line_7 $$ userHome = FileUtil.toSystemIndependentName(new File(SystemProperties.getUserHome()).getCanonicalPath())[ FD ]
Line_9 $$ userHome = null-->Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) [ FD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_11 $$ Collections.sort(roots, new java.util.Comparator<VirtualFile>() [ FD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_3 $$ if (roots.isEmpty())[ CD ]
Line_19 $$ while (it.hasNext()) -->Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) [ CD ]
Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) -->Line_23 $$ reducedRoots.add(current)[ CD ]
Line_11 $$ Collections.sort(roots, new java.util.Comparator<VirtualFile>() -->Line_13 $$ return o1.getPath().compareTo(o2.getPath())[ CD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_19 $$ while (it.hasNext()) [ CD ]
Line_5 $$ String userHome-->Line_22 $$ if (common == null || common.getParent() == null || Comparing.equal(common.getPath(), userHome)) [ FD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_5 $$ String userHome[ CD ]
Line_3 $$ if (roots.isEmpty())-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_20 $$ VirtualFile next = it.next()-->Line_21 $$ VirtualFile common = VfsUtilCore.getCommonAncestor(current, next)[ FD ]
Line_2 $$ private static List<VirtualFile> reduceRoots(List<VirtualFile> roots) -->Line_16 $$ Iterator<VirtualFile> it = roots.iterator()[ FD ]
