Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())[ FD ]
Line_36 $$ if (portlet != null) -->Line_39 $$ PortletContextFactory.destroy(portlet)[ CD ]
Line_41 $$ portlet = entry.getValue()-->Line_56 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_39 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_54 $$ if (portlet != null) -->Line_57 $$ PortletContextFactory.destroy(portlet)[ CD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_55 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_41 $$ portlet = entry.getValue()-->Line_55 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_36 $$ if (portlet != null) -->Line_37 $$ PortletInstanceFactoryUtil.clear(portlet)[ CD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_48 $$ return ListUtil.fromMapValues(portletsMap)[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_11 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_57 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_24 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) [ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_42 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_24 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) -->Line_25 $$ _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does " + "not have a matching entry in portlet.xml")[ CD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_52 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_24 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) [ FD ]
Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_41 $$ portlet = entry.getValue()[ FD ]
Line_41 $$ portlet = entry.getValue()-->Line_54 $$ if (portlet != null) [ FD ]
Line_6 $$ Set<String> liferayPortletIds = null-->Line_11 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_10 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_36 $$ if (portlet != null) -->Line_38 $$ PortletConfigFactoryUtil.destroy(portlet)[ CD ]
Line_28 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_43 $$ portletBagFactory.create(portlet)[ FD ]
Line_28 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_29 $$ portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName))[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_48 $$ return ListUtil.fromMapValues(portletsMap)[ FD ]
Line_8 $$ Set<String> servletURLPatterns = _readWebXML(xmls[3])-->Line_10 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_36 $$ if (portlet != null) [ FD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_10 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_11 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_38 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_41 $$ portlet = entry.getValue()-->Line_43 $$ portletBagFactory.create(portlet)[ FD ]
Line_41 $$ portlet = entry.getValue()-->Line_42 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_42 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_53 $$ Portlet portlet = _portletsMap.remove(entry.getKey())[ FD ]
Line_6 $$ Set<String> liferayPortletIds = null-->Line_18 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) [ FD ]
Line_28 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_31 $$ portletBagFactory.setWARFile(true)[ FD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_41 $$ portlet = entry.getValue()-->Line_57 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_18 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) -->Line_19 $$ _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not " + "have a matching entry in liferay-portlet.xml")[ CD ]
Line_5 $$ Map<String, Portlet> portletsMap = null-->Line_52 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_11 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)-->Line_18 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) [ FD ]
Line_8 $$ Set<String> servletURLPatterns = _readWebXML(xmls[3])-->Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_41 $$ portlet = entry.getValue()[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_37 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_54 $$ if (portlet != null) [ FD ]
Line_9 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_34 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_28 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_30 $$ portletBagFactory.setServletContext(servletContext)[ FD ]
Line_54 $$ if (portlet != null) -->Line_55 $$ PortletInstanceFactoryUtil.clear(portlet)[ CD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_56 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_54 $$ if (portlet != null) -->Line_56 $$ PortletConfigFactoryUtil.destroy(portlet)[ CD ]
Line_35 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_43 $$ portletBagFactory.create(portlet)[ FD ]
