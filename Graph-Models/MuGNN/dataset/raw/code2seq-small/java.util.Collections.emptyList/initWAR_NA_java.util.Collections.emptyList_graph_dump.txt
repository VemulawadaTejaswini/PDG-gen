Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_41 $$ _setSpriteImages(servletContext, portletApp, "/icons/")[ FD ]
Line_31 $$ if (portlet != null) -->Line_34 $$ PortletContextFactory.destroy(portlet)[ CD ]
Line_36 $$ portlet = entry.getValue()-->Line_37 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_24 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_27 $$ portletBagFactory.setWARFile(true)[ FD ]
Line_36 $$ portlet = entry.getValue()-->Line_47 $$ if (portlet != null) [ FD ]
Line_14 $$ for (String portletId : portletsMap.keySet()) -->Line_15 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) [ FD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_42 $$ return ListUtil.fromMapValues(portletsMap)[ FD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_45 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_46 $$ Portlet portlet = _portletsMap.remove(entry.getKey())[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_9 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_38 $$ portletBagFactory.create(portlet)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_42 $$ return ListUtil.fromMapValues(portletsMap)[ FD ]
Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_37 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_8 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_20 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) [ FD ]
Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())[ FD ]
Line_20 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) -->Line_21 $$ _log.warn("Portlet with the name " + portletId + " is described in liferay-portlet.xml but does " + "not have a matching entry in portlet.xml")[ CD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_26 $$ portletBagFactory.setServletContext(servletContext)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_14 $$ for (String portletId : portletsMap.keySet()) [ FD ]
Line_24 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_38 $$ portletBagFactory.create(portlet)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_45 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_47 $$ if (portlet != null) -->Line_49 $$ PortletConfigFactoryUtil.destroy(portlet)[ CD ]
Line_15 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) -->Line_16 $$ _log.warn("Portlet with the name " + portletId + " is described in portlet.xml but does not " + "have a matching entry in liferay-portlet.xml")[ CD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_25 $$ portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName))[ CD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_33 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_36 $$ portlet = entry.getValue()[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_27 $$ portletBagFactory.setWARFile(true)[ CD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_9 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) -->Line_36 $$ portlet = entry.getValue()[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_34 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_20 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) [ FD ]
Line_24 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_25 $$ portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName))[ FD ]
Line_36 $$ portlet = entry.getValue()-->Line_38 $$ portletBagFactory.create(portlet)[ FD ]
Line_40 $$ PortletApp portletApp = getPortletApp(servletContextName)-->Line_41 $$ _setSpriteImages(servletContext, portletApp, "/icons/")[ FD ]
Line_47 $$ if (portlet != null) -->Line_48 $$ PortletInstanceFactoryUtil.clear(portlet)[ CD ]
Line_36 $$ portlet = entry.getValue()-->Line_50 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_26 $$ portletBagFactory.setServletContext(servletContext)[ CD ]
Line_24 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()-->Line_26 $$ portletBagFactory.setServletContext(servletContext)[ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)[ FD ]
Line_4 $$ Set<String> liferayPortletIds = null-->Line_9 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_47 $$ if (portlet != null) -->Line_50 $$ PortletContextFactory.destroy(portlet)[ CD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_14 $$ for (String portletId : portletsMap.keySet()) [ FD ]
Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)-->Line_8 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_31 $$ if (portlet != null) -->Line_33 $$ PortletConfigFactoryUtil.destroy(portlet)[ CD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_49 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_9 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)-->Line_15 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) [ FD ]
Line_6 $$ Set<String> servletURLPatterns = _readWebXML(xmls[3])-->Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_37 $$ _portletsMap.put(entry.getKey(), portlet)[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_8 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_4 $$ Set<String> liferayPortletIds = null-->Line_15 $$ if (_log.isWarnEnabled() && !liferayPortletIds.contains(portletId)) [ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_50 $$ PortletContextFactory.destroy(portlet)[ FD ]
Line_36 $$ portlet = entry.getValue()-->Line_49 $$ PortletConfigFactoryUtil.destroy(portlet)[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_24 $$ PortletBagFactory portletBagFactory = new PortletBagFactory()[ CD ]
Line_31 $$ if (portlet != null) -->Line_32 $$ PortletInstanceFactoryUtil.clear(portlet)[ CD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_9 $$ liferayPortletIds = _readLiferayPortletXML(servletContextName, servletContext, xmls[2], portletsMap)[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_40 $$ PortletApp portletApp = getPortletApp(servletContextName)[ FD ]
Line_14 $$ for (String portletId : portletsMap.keySet()) -->Line_20 $$ if (_log.isWarnEnabled() && !portletsMap.containsKey(portletId)) [ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_25 $$ portletBagFactory.setClassLoader(ClassLoaderPool.getClassLoader(servletContextName))[ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_7 $$ portletsMap = _readPortletXML(servletContextName, servletContext, xmls[0], servletURLPatterns, pluginPackage)[ FD ]
Line_6 $$ Set<String> servletURLPatterns = _readWebXML(xmls[3])-->Line_8 $$ portletsMap.putAll(_readPortletXML(servletContextName, servletContext, xmls[1], servletURLPatterns, pluginPackage))[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_32 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_31 $$ if (portlet != null) [ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_48 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_36 $$ portlet = entry.getValue()-->Line_48 $$ PortletInstanceFactoryUtil.clear(portlet)[ FD ]
Line_30 $$ Portlet portlet = _portletsMap.remove(entry.getKey())-->Line_47 $$ if (portlet != null) [ FD ]
Line_3 $$ Map<String, Portlet> portletsMap = null-->Line_29 $$ for (Map.Entry<String, Portlet> entry : portletsMap.entrySet()) [ FD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_4 $$ Set<String> liferayPortletIds = null[ CD ]
Line_2 $$ public List<Portlet> initWAR(String servletContextName, ServletContext servletContext, String[] xmls, PluginPackage pluginPackage) -->Line_3 $$ Map<String, Portlet> portletsMap = null[ CD ]
