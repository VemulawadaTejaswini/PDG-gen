Line_4 $$ if (!selectionModel.hasSelection()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ if (filter.isAssignableFrom(element.getClass())) [ FD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_18 $$ if (filter.isAssignableFrom(element.getClass())) [ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_4 $$ if (!selectionModel.hasSelection()) [ CD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_15 $$ if (!selection.intersects(element.getTextRange())) [ FD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_27 $$ file.accept(visitor)[ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_8 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())[ FD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_15 $$ if (!selection.intersects(element.getTextRange())) [ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_8 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_4 $$ if (!selectionModel.hasSelection()) [ FD ]
Line_7 $$ final TextRange selection = new UnfairTextRange(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd())-->Line_15 $$ if (!selection.intersects(element.getTextRange())) [ FD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_24 $$ super.visitElement(element)[ FD ]
Line_12 $$ final List<T> results = new ArrayList<T>()-->Line_19 $$ results.add((T) element)[ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_7 $$ final TextRange selection = new UnfairTextRange(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd())[ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ CD ]
Line_13 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_24 $$ super.visitElement(element)[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_12 $$ final List<T> results = new ArrayList<T>()[ CD ]
Line_15 $$ if (!selection.intersects(element.getTextRange())) -->Line_16 $$ return[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_18 $$ if (filter.isAssignableFrom(element.getClass())) [ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_7 $$ final TextRange selection = new UnfairTextRange(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd())[ CD ]
Line_18 $$ if (filter.isAssignableFrom(element.getClass())) -->Line_19 $$ results.add((T) element)[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_28 $$ return results[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_9 $$ if (file == null || file instanceof PsiCompiledElement) [ CD ]
Line_18 $$ if (filter.isAssignableFrom(element.getClass())) -->Line_20 $$ if (!searchChildrenOfFound) [ CD ]
Line_20 $$ if (!searchChildrenOfFound) -->Line_21 $$ return[ CD ]
Line_8 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())-->Line_27 $$ file.accept(visitor)[ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_27 $$ file.accept(visitor)[ CD ]
Line_9 $$ if (file == null || file instanceof PsiCompiledElement) -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> searchElementsInSelection(Editor editor, Project project, final Class<T> filter, final boolean searchChildrenOfFound) -->Line_20 $$ if (!searchChildrenOfFound) [ FD ]
