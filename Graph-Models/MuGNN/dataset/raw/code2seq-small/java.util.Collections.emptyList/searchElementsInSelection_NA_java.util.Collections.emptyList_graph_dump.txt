Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_37 $$ super.visitElement(element)[ CD ]
Line_23 $$ final List<T> results = new ArrayList<T>()-->Line_32 $$ results.add((T) element)[ FD ]
Line_19 $$ final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument())-->Line_40 $$ file.accept(visitor)[ FD ]
Line_15 $$ if (!selectionModel.hasSelection()) -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_28 $$ if (!selection.intersects(element.getTextRange())) -->Line_29 $$ return[ CD ]
Line_18 $$ final TextRange selection = new UnfairTextRange(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd())-->Line_28 $$ if (!selection.intersects(element.getTextRange())) [ FD ]
Line_31 $$ if (filter.isAssignableFrom(element.getClass())) -->Line_32 $$ results.add((T) element)[ CD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_31 $$ if (filter.isAssignableFrom(element.getClass())) [ FD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_31 $$ if (filter.isAssignableFrom(element.getClass())) [ CD ]
Line_14 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_18 $$ final TextRange selection = new UnfairTextRange(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd())[ FD ]
Line_20 $$ if (file == null || file instanceof PsiCompiledElement) -->Line_21 $$ return Collections.emptyList()[ CD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_40 $$ file.accept(visitor)[ FD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_28 $$ if (!selection.intersects(element.getTextRange())) [ FD ]
Line_14 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_15 $$ if (!selectionModel.hasSelection()) [ FD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_37 $$ super.visitElement(element)[ FD ]
Line_24 $$ final PsiElementVisitor visitor = new JavaRecursiveElementWalkingVisitor() -->Line_28 $$ if (!selection.intersects(element.getTextRange())) [ CD ]
Line_33 $$ if (!searchChildrenOfFound) -->Line_34 $$ return[ CD ]
Line_31 $$ if (filter.isAssignableFrom(element.getClass())) -->Line_33 $$ if (!searchChildrenOfFound) [ CD ]
