Line_13 $$ Project project = containingFile.getProject()-->Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_9 $$ if (virtualFile == null) [ FD ]
Line_12 $$ if (virtualFile != null) -->Line_15 $$ if (module != null) [ CD ]
Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_4 $$ PsiFile containingFile = context.getContainingFile()-->Line_5 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)[ FD ]
Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)-->Line_17 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ FD ]
Line_13 $$ Project project = containingFile.getProject()-->Line_16 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)[ FD ]
Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)-->Line_15 $$ if (module != null) [ FD ]
Line_7 $$ containingFile = containingFileContext.getContainingFile()-->Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_6 $$ if (containingFileContext != null)-->Line_7 $$ containingFile = containingFileContext.getContainingFile()[ CD ]
Line_9 $$ if (virtualFile == null) -->Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ CD ]
Line_5 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)-->Line_7 $$ containingFile = containingFileContext.getContainingFile()[ FD ]
Line_7 $$ containingFile = containingFileContext.getContainingFile()-->Line_13 $$ Project project = containingFile.getProject()[ FD ]
Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_12 $$ if (virtualFile != null) [ FD ]
Line_5 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)-->Line_6 $$ if (containingFileContext != null)[ FD ]
Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()-->Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_4 $$ PsiFile containingFile = context.getContainingFile()-->Line_7 $$ containingFile = containingFileContext.getContainingFile()[ FD ]
Line_15 $$ if (module != null) -->Line_17 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ CD ]
Line_15 $$ if (module != null) -->Line_16 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)[ CD ]
Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_12 $$ if (virtualFile != null) -->Line_14 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ CD ]
Line_7 $$ containingFile = containingFileContext.getContainingFile()-->Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_16 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)-->Line_17 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ FD ]
Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()-->Line_12 $$ if (virtualFile != null) [ FD ]
Line_12 $$ if (virtualFile != null) -->Line_13 $$ Project project = containingFile.getProject()[ CD ]
Line_4 $$ PsiFile containingFile = context.getContainingFile()-->Line_10 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_4 $$ PsiFile containingFile = context.getContainingFile()-->Line_8 $$ VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_4 $$ PsiFile containingFile = context.getContainingFile()-->Line_13 $$ Project project = containingFile.getProject()[ FD ]
