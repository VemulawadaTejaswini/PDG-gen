Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_8 $$ if (virtualFile == null) [ FD ]
Line_14 $$ if (module != null) -->Line_15 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)[ CD ]
Line_14 $$ if (module != null) -->Line_16 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ CD ]
Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)-->Line_16 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ FD ]
Line_6 $$ containingFile = containingFileContext.getContainingFile()-->Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_15 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)-->Line_16 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_3 $$ PsiFile containingFile = context.getContainingFile()[ FD ]
Line_6 $$ containingFile = containingFileContext.getContainingFile()-->Line_12 $$ Project project = containingFile.getProject()[ FD ]
Line_8 $$ if (virtualFile == null) -->Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ CD ]
Line_6 $$ containingFile = containingFileContext.getContainingFile()-->Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_16 $$ return refManager.findPropertiesFiles(module, resourceBundleName)[ FD ]
Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_11 $$ if (virtualFile != null) [ FD ]
Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()-->Line_11 $$ if (virtualFile != null) [ FD ]
Line_12 $$ Project project = containingFile.getProject()-->Line_15 $$ PropertiesReferenceManager refManager = PropertiesReferenceManager.getInstance(project)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_5 $$ if (containingFileContext != null)[ CD ]
Line_11 $$ if (virtualFile != null) -->Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ CD ]
Line_4 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)-->Line_6 $$ containingFile = containingFileContext.getContainingFile()[ FD ]
Line_3 $$ PsiFile containingFile = context.getContainingFile()-->Line_4 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)[ FD ]
Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)-->Line_14 $$ if (module != null) [ FD ]
Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()-->Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_4 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)[ CD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()[ CD ]
Line_11 $$ if (virtualFile != null) -->Line_12 $$ Project project = containingFile.getProject()[ CD ]
Line_5 $$ if (containingFileContext != null)-->Line_6 $$ containingFile = containingFileContext.getContainingFile()[ CD ]
Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_4 $$ PsiElement containingFileContext = InjectedLanguageManager.getInstance(containingFile.getProject()).getInjectionHost(containingFile)-->Line_5 $$ if (containingFileContext != null)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_11 $$ if (virtualFile != null) [ CD ]
Line_3 $$ PsiFile containingFile = context.getContainingFile()-->Line_12 $$ Project project = containingFile.getProject()[ FD ]
Line_11 $$ if (virtualFile != null) -->Line_14 $$ if (module != null) [ CD ]
Line_12 $$ Project project = containingFile.getProject()-->Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_3 $$ PsiFile containingFile = context.getContainingFile()[ CD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_8 $$ if (virtualFile == null) [ CD ]
Line_3 $$ PsiFile containingFile = context.getContainingFile()-->Line_9 $$ virtualFile = containingFile.getOriginalFile().getVirtualFile()[ FD ]
Line_3 $$ PsiFile containingFile = context.getContainingFile()-->Line_6 $$ containingFile = containingFileContext.getContainingFile()[ FD ]
Line_3 $$ PsiFile containingFile = context.getContainingFile()-->Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()[ FD ]
Line_7 $$ VirtualFile virtualFile = containingFile.getVirtualFile()-->Line_13 $$ final Module module = ProjectRootManager.getInstance(project).getFileIndex().getModuleForFile(virtualFile)[ FD ]
Line_2 $$ public static List<PropertiesFile> propertiesFilesByBundleName(final String resourceBundleName, final PsiElement context) -->Line_19 $$ return Collections.emptyList()[ CD ]
