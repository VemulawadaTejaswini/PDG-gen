Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_36 $$ if (element instanceof PsiField) -->Line_39 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ CD ]
Line_9 $$ if (aClass == null)-->Line_10 $$ return Collections.emptyList()[ CD ]
Line_41 $$ anchor = field-->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_23 $$ if (singleNewLineWhitespace != null) -->Line_24 $$ spaceNode.getTreeParent().replaceChild(spaceNode, singleNewLineWhitespace)[ CD ]
Line_34 $$ element = element.getNextSibling()-->Line_30 $$ if (element == null)[ FD ]
Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_21 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(file.getProject())[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)[ FD ]
Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ CD ]
Line_5 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_6 $$ if (leaf == null)[ FD ]
Line_34 $$ element = element.getNextSibling()-->Line_36 $$ if (element instanceof PsiField) [ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ CD ]
Line_37 $$ PsiField field = (PsiField) element-->Line_38 $$ PsiTypeElement typeElement = field.getTypeElement()[ FD ]
Line_37 $$ PsiField field = (PsiField) element-->Line_40 $$ field.normalizeDeclaration()[ FD ]
Line_3 $$ if (memberPrototypes.isEmpty())-->Line_4 $$ return memberPrototypes[ CD ]
Line_14 $$ anchor = anchor.getNextSibling()-->Line_41 $$ anchor = field[ FD ]
Line_19 $$ whiteSpace += "\n"-->Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ FD ]
Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_17 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())[ CD ]
Line_36 $$ if (element instanceof PsiField) -->Line_38 $$ PsiTypeElement typeElement = field.getTypeElement()[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_21 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(file.getProject())[ FD ]
Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ FD ]
Line_5 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)[ FD ]
Line_39 $$ if (typeElement != null && !field.equals(typeElement.getParent())) -->Line_40 $$ field.normalizeDeclaration()[ CD ]
Line_37 $$ PsiField field = (PsiField) element-->Line_41 $$ anchor = field[ FD ]
Line_13 $$ final ASTNode spaceNode = anchor.getNode()-->Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) [ FD ]
Line_17 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())-->Line_18 $$ if (!StringUtil.containsLineBreak(whiteSpace)) [ FD ]
Line_29 $$ while (true) -->Line_30 $$ if (element == null)[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_6 $$ if (leaf == null)[ CD ]
Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_41 $$ anchor = field[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_28 $$ PsiElement element = anchor-->Line_36 $$ if (element instanceof PsiField) [ FD ]
Line_28 $$ PsiElement element = anchor-->Line_30 $$ if (element == null)[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ CD ]
Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_12 $$ if (anchor instanceof PsiWhiteSpace) [ FD ]
Line_36 $$ if (element instanceof PsiField) -->Line_37 $$ PsiField field = (PsiField) element[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_28 $$ PsiElement element = anchor[ CD ]
Line_38 $$ PsiTypeElement typeElement = field.getTypeElement()-->Line_39 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ FD ]
Line_18 $$ if (!StringUtil.containsLineBreak(whiteSpace)) -->Line_19 $$ whiteSpace += "\n"[ CD ]
Line_6 $$ if (leaf == null)-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_18 $$ if (!StringUtil.containsLineBreak(whiteSpace)) [ CD ]
Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_23 $$ if (singleNewLineWhitespace != null) [ CD ]
Line_13 $$ final ASTNode spaceNode = anchor.getNode()-->Line_24 $$ spaceNode.getTreeParent().replaceChild(spaceNode, singleNewLineWhitespace)[ FD ]
Line_28 $$ PsiElement element = anchor-->Line_34 $$ element = element.getNextSibling()[ FD ]
Line_12 $$ if (anchor instanceof PsiWhiteSpace) -->Line_13 $$ final ASTNode spaceNode = anchor.getNode()[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_3 $$ if (memberPrototypes.isEmpty())[ CD ]
Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_14 $$ anchor = anchor.getNextSibling()[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_29 $$ while (true) [ CD ]
Line_13 $$ final ASTNode spaceNode = anchor.getNode()-->Line_17 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())[ FD ]
Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()-->Line_23 $$ if (singleNewLineWhitespace != null) [ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_12 $$ if (anchor instanceof PsiWhiteSpace) [ CD ]
Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()-->Line_24 $$ spaceNode.getTreeParent().replaceChild(spaceNode, singleNewLineWhitespace)[ FD ]
Line_37 $$ PsiField field = (PsiField) element-->Line_39 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ FD ]
Line_39 $$ if (typeElement != null && !field.equals(typeElement.getParent())) -->Line_41 $$ anchor = field[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_3 $$ if (memberPrototypes.isEmpty())[ FD ]
Line_17 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())-->Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_36 $$ if (element instanceof PsiField) [ CD ]
Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_13 $$ final ASTNode spaceNode = anchor.getNode()[ FD ]
Line_29 $$ while (true) -->Line_32 $$ if (element instanceof PsiField || element instanceof PsiMethod || element instanceof PsiClassInitializer)[ CD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ FD ]
Line_17 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())-->Line_19 $$ whiteSpace += "\n"[ FD ]
Line_21 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(file.getProject())-->Line_22 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_9 $$ if (aClass == null)[ CD ]
Line_12 $$ if (anchor instanceof PsiWhiteSpace) -->Line_14 $$ anchor = anchor.getNextSibling()[ CD ]
Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_5 $$ final PsiElement leaf = file.findElementAt(offset)[ FD ]
Line_2 $$ public static <T extends GenerationInfo> List<T> insertMembersAtOffset(PsiFile file, int offset, @NotNull List<T> memberPrototypes) throws IncorrectOperationException -->Line_5 $$ final PsiElement leaf = file.findElementAt(offset)[ CD ]
Line_12 $$ if (anchor instanceof PsiWhiteSpace) -->Line_16 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) [ CD ]
Line_29 $$ while (true) -->Line_34 $$ element = element.getNextSibling()[ CD ]
Line_14 $$ anchor = anchor.getNextSibling()-->Line_44 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_8 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_9 $$ if (aClass == null)[ FD ]
Line_5 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_11 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ FD ]
