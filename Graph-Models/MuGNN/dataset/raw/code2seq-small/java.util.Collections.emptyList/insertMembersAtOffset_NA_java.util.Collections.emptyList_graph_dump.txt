Line_18 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())-->Line_19 $$ if (!StringUtil.containsLineBreak(whiteSpace)) [ FD ]
Line_52 $$ PsiField field = (PsiField) element-->Line_55 $$ field.normalizeDeclaration()[ FD ]
Line_10 $$ if (aClass == null)-->Line_11 $$ return Collections.emptyList()[ CD ]
Line_15 $$ anchor = anchor.getNextSibling()-->Line_59 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_52 $$ PsiField field = (PsiField) element-->Line_53 $$ PsiTypeElement typeElement = field.getTypeElement()[ FD ]
Line_7 $$ if (leaf == null)-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_13 $$ if (anchor instanceof PsiWhiteSpace) [ FD ]
Line_53 $$ PsiTypeElement typeElement = field.getTypeElement()-->Line_54 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ FD ]
Line_6 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ FD ]
Line_52 $$ PsiField field = (PsiField) element-->Line_54 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ FD ]
Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_36 $$ if (singleNewLineWhitespace != null) [ CD ]
Line_35 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()-->Line_36 $$ if (singleNewLineWhitespace != null) [ FD ]
Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_18 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())[ CD ]
Line_18 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())-->Line_35 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ FD ]
Line_9 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_59 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_34 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(file.getProject())-->Line_35 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ FD ]
Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_15 $$ anchor = anchor.getNextSibling()[ FD ]
Line_51 $$ if (element instanceof PsiField) -->Line_52 $$ PsiField field = (PsiField) element[ CD ]
Line_51 $$ if (element instanceof PsiField) -->Line_54 $$ if (typeElement != null && !field.equals(typeElement.getParent())) [ CD ]
Line_4 $$ if (memberPrototypes.isEmpty())-->Line_5 $$ return memberPrototypes[ CD ]
Line_51 $$ if (element instanceof PsiField) -->Line_53 $$ PsiTypeElement typeElement = field.getTypeElement()[ CD ]
Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_59 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_15 $$ anchor = anchor.getNextSibling()-->Line_56 $$ anchor = field[ FD ]
Line_13 $$ if (anchor instanceof PsiWhiteSpace) -->Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) [ CD ]
Line_44 $$ while (true) -->Line_47 $$ if (element instanceof PsiField || element instanceof PsiMethod || element instanceof PsiClassInitializer)[ CD ]
Line_9 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)[ FD ]
Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_14 $$ final ASTNode spaceNode = anchor.getNode()[ FD ]
Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_19 $$ if (!StringUtil.containsLineBreak(whiteSpace)) [ CD ]
Line_54 $$ if (typeElement != null && !field.equals(typeElement.getParent())) -->Line_56 $$ anchor = field[ CD ]
Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_35 $$ final ASTNode singleNewLineWhitespace = parserFacade.createWhiteSpaceFromText(whiteSpace).getNode()[ CD ]
Line_14 $$ final ASTNode spaceNode = anchor.getNode()-->Line_18 $$ String whiteSpace = spaceNode.getText().substring(0, offset - spaceNode.getStartOffset())[ FD ]
Line_49 $$ element = element.getNextSibling()-->Line_45 $$ if (element == null)[ FD ]
Line_14 $$ final ASTNode spaceNode = anchor.getNode()-->Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) [ FD ]
Line_13 $$ if (anchor instanceof PsiWhiteSpace) -->Line_14 $$ final ASTNode spaceNode = anchor.getNode()[ CD ]
Line_13 $$ if (anchor instanceof PsiWhiteSpace) -->Line_15 $$ anchor = anchor.getNextSibling()[ CD ]
Line_56 $$ anchor = field-->Line_59 $$ return insertMembersBeforeAnchor(aClass, anchor, memberPrototypes)[ FD ]
Line_17 $$ if (spaceNode.getStartOffset() <= offset && spaceNode.getStartOffset() + spaceNode.getTextLength() >= offset) -->Line_34 $$ final PsiParserFacade parserFacade = PsiParserFacade.SERVICE.getInstance(file.getProject())[ CD ]
Line_49 $$ element = element.getNextSibling()-->Line_51 $$ if (element instanceof PsiField) [ FD ]
Line_44 $$ while (true) -->Line_49 $$ element = element.getNextSibling()[ CD ]
Line_54 $$ if (typeElement != null && !field.equals(typeElement.getParent())) -->Line_55 $$ field.normalizeDeclaration()[ CD ]
Line_6 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_7 $$ if (leaf == null)[ FD ]
Line_6 $$ final PsiElement leaf = file.findElementAt(offset)-->Line_9 $$ PsiClass aClass = findClassAtOffset(file, leaf)[ FD ]
Line_52 $$ PsiField field = (PsiField) element-->Line_56 $$ anchor = field[ FD ]
Line_44 $$ while (true) -->Line_45 $$ if (element == null)[ CD ]
Line_12 $$ PsiElement anchor = memberPrototypes.get(0).findInsertionAnchor(aClass, leaf)-->Line_56 $$ anchor = field[ FD ]
Line_9 $$ PsiClass aClass = findClassAtOffset(file, leaf)-->Line_10 $$ if (aClass == null)[ FD ]
