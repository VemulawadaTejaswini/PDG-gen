Line_2 $$ private void performAdding(Collection<FilePath> filesToAdd) -->Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() [ CD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_7 $$ VcsFileUtil.markFilesDirty(myProject, files)[ FD ]
Line_2 $$ private void performAdding(Collection<FilePath> filesToAdd) -->Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() [ FD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_6 $$ GitFileUtils.addPaths(myProject, root, files)[ FD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_5 $$ LOG.debug("Git: adding files: " + files)[ CD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_7 $$ VcsFileUtil.markFilesDirty(myProject, files)[ CD ]
Line_3 $$ performBackgroundOperation(filesToAdd, GitBundle.getString("add.adding"), new LongOperationPerRootExecutor() -->Line_6 $$ GitFileUtils.addPaths(myProject, root, files)[ CD ]
