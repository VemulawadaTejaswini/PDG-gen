Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()-->Line_6 $$ cluster.shutdown()[ FD ]
Line_10 $$ File currentDir = new File(dir, "current")-->Line_11 $$ GenericTestUtils.assertGlobEquals(currentDir, "edits_.*", NNStorage.getFinalizedEditsFileName(1, 2))[ FD ]
Line_34 $$ if (shouldSucceed) -->Line_35 $$ LOG.info("Should have succeeded in starting cluster, but failed", ioe)[ CD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()[ CD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_6 $$ cluster.shutdown()[ CD ]
Line_13 $$ EditLogFileOutputStream stream = new EditLogFileOutputStream(conf, log, 1024)-->Line_25 $$ stream.close()[ FD ]
Line_8 $$ for (URI uri : editsDirs) -->Line_19 $$ NNStorage storage = new NNStorage(conf, Collections.<URI>emptyList(), Lists.newArrayList(uri))[ FD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_8 $$ for (URI uri : editsDirs) -->Line_9 $$ File dir = new File(uri.getPath())[ FD ]
Line_19 $$ NNStorage storage = new NNStorage(conf, Collections.<URI>emptyList(), Lists.newArrayList(uri))-->Line_21 $$ storage.writeTransactionIdFileToStorage(3)[ FD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_30 $$ if (!shouldSucceed) [ FD ]
Line_19 $$ NNStorage storage = new NNStorage(conf, Collections.<URI>emptyList(), Lists.newArrayList(uri))-->Line_23 $$ storage.close()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_29 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).build()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_6 $$ cluster.shutdown()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_41 $$ cluster.shutdown()[ FD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_7 $$ Collection<URI> editsDirs = cluster.getNameEditsDirs(0)[ CD ]
Line_30 $$ if (!shouldSucceed) -->Line_31 $$ fail("Should not have succeeded in startin cluster")[ CD ]
Line_13 $$ EditLogFileOutputStream stream = new EditLogFileOutputStream(conf, log, 1024)-->Line_15 $$ stream.create(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION)[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()-->Line_7 $$ Collection<URI> editsDirs = cluster.getNameEditsDirs(0)[ FD ]
Line_29 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).build()-->Line_41 $$ cluster.shutdown()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()-->Line_41 $$ cluster.shutdown()[ FD ]
Line_2 $$ private void doTestCrashRecoveryEmptyLog(boolean inBothDirs, boolean updateTransactionIdFile, boolean shouldSucceed) throws Exception -->Line_16 $$ if (!inBothDirs) [ FD ]
Line_34 $$ if (shouldSucceed) -->Line_38 $$ GenericTestUtils.assertExceptionContains("Gap in transactions. Expected to be able to read up until " + "at least txid 3 but unable to find any edit logs containing " + "txid 3", ioe)[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_7 $$ Collection<URI> editsDirs = cluster.getNameEditsDirs(0)[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build()-->Line_29 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).build()[ FD ]
Line_20 $$ if (updateTransactionIdFile) -->Line_21 $$ storage.writeTransactionIdFileToStorage(3)[ CD ]
