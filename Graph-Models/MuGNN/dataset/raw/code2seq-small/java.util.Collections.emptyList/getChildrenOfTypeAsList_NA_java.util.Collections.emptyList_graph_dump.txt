Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_6 $$ for (PsiElement child = element.getFirstChild(); child != null; child = child.getNextSibling()) [ CD ]
Line_7 $$ if (aClass.isInstance(child)) -->Line_8 $$ result.add((T) child)[ CD ]
Line_6 $$ for (PsiElement child = element.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_7 $$ if (aClass.isInstance(child)) [ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_3 $$ if (element == null)[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_5 $$ List<T> result = new SmartList<T>()[ CD ]
Line_3 $$ if (element == null)-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_3 $$ if (element == null)[ FD ]
Line_5 $$ List<T> result = new SmartList<T>()-->Line_8 $$ result.add((T) child)[ FD ]
Line_6 $$ for (PsiElement child = element.getFirstChild(); child != null; child = child.getNextSibling()) -->Line_7 $$ if (aClass.isInstance(child)) [ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_7 $$ if (aClass.isInstance(child)) [ FD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_11 $$ return result[ CD ]
Line_2 $$ public static <T extends PsiElement> List<T> getChildrenOfTypeAsList(@Nullable PsiElement element, @NotNull Class<T> aClass) -->Line_6 $$ for (PsiElement child = element.getFirstChild(); child != null; child = child.getNextSibling()) [ FD ]
