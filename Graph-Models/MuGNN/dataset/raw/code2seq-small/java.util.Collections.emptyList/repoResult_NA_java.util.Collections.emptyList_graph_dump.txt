Line_4 $$ GitPushNativeResult nr = new GitPushNativeResult(nativeType, from, reason, null)-->Line_5 $$ return GitPushRepoResult.addUpdateResult(convertFromNative(nr, Collections.<GitPushNativeResult>emptyList(), commits, from(from), to(to)), updateResult)[ FD ]
Line_2 $$ private static GitPushRepoResult repoResult(GitPushNativeResult.Type nativeType, String from, String to, int commits, @Nullable GitUpdateResult updateResult) -->Line_3 $$ String reason = nativeType == REJECTED ? GitPushNativeResult.FETCH_FIRST_REASON : null[ CD ]
Line_2 $$ private static GitPushRepoResult repoResult(GitPushNativeResult.Type nativeType, String from, String to, int commits, @Nullable GitUpdateResult updateResult) -->Line_5 $$ return GitPushRepoResult.addUpdateResult(convertFromNative(nr, Collections.<GitPushNativeResult>emptyList(), commits, from(from), to(to)), updateResult)[ FD ]
Line_2 $$ private static GitPushRepoResult repoResult(GitPushNativeResult.Type nativeType, String from, String to, int commits, @Nullable GitUpdateResult updateResult) -->Line_5 $$ return GitPushRepoResult.addUpdateResult(convertFromNative(nr, Collections.<GitPushNativeResult>emptyList(), commits, from(from), to(to)), updateResult)[ CD ]
Line_2 $$ private static GitPushRepoResult repoResult(GitPushNativeResult.Type nativeType, String from, String to, int commits, @Nullable GitUpdateResult updateResult) -->Line_4 $$ GitPushNativeResult nr = new GitPushNativeResult(nativeType, from, reason, null)[ CD ]
