Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)[ CD ]
Line_5 $$ if (slash == -1) -->Line_10 $$ String branchName[ CD ]
Line_5 $$ if (slash == -1) -->Line_8 $$ GitRemote remote[ CD ]
Line_4 $$ int slash = stdName.indexOf('/')-->Line_15 $$ slash = stdName.indexOf('/', slash + 1)[ FD ]
Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)[ FD ]
Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_5 $$ if (slash == -1) [ CD ]
Line_8 $$ GitRemote remote-->Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)[ FD ]
Line_9 $$ String remoteName-->Line_12 $$ remoteName = stdName.substring(0, slash)[ FD ]
Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_4 $$ int slash = stdName.indexOf('/')[ CD ]
Line_5 $$ if (slash == -1) -->Line_11 $$ do [ CD ]
Line_4 $$ int slash = stdName.indexOf('/')-->Line_5 $$ if (slash == -1) [ FD ]
Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)-->Line_12 $$ remoteName = stdName.substring(0, slash)[ FD ]
Line_5 $$ if (slash == -1) -->Line_6 $$ return new GitSvnRemoteBranch(fullBranchName)[ CD ]
Line_8 $$ GitRemote remote-->Line_17 $$ if (remote == null) [ FD ]
Line_11 $$ do -->Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)[ CD ]
Line_11 $$ do -->Line_12 $$ remoteName = stdName.substring(0, slash)[ CD ]
Line_5 $$ if (slash == -1) -->Line_22 $$ return new GitStandardRemoteBranch(remote, branchName)[ CD ]
Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)-->Line_13 $$ branchName = stdName.substring(slash + 1)[ FD ]
Line_4 $$ int slash = stdName.indexOf('/')-->Line_12 $$ remoteName = stdName.substring(0, slash)[ FD ]
Line_11 $$ do -->Line_13 $$ branchName = stdName.substring(slash + 1)[ CD ]
Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)-->Line_4 $$ int slash = stdName.indexOf('/')[ FD ]
Line_17 $$ if (remote == null) -->Line_18 $$ LOG.debug(String.format("No remote found with the name [%s]. All remotes: %s", remoteName, remotes))[ CD ]
Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_18 $$ LOG.debug(String.format("No remote found with the name [%s]. All remotes: %s", remoteName, remotes))[ FD ]
Line_11 $$ do -->Line_15 $$ slash = stdName.indexOf('/', slash + 1)[ CD ]
Line_5 $$ if (slash == -1) -->Line_17 $$ if (remote == null) [ CD ]
Line_15 $$ slash = stdName.indexOf('/', slash + 1)-->Line_12 $$ remoteName = stdName.substring(0, slash)[ FD ]
Line_17 $$ if (remote == null) -->Line_20 $$ return new GitStandardRemoteBranch(fakeRemote, branchName)[ CD ]
Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)-->Line_17 $$ if (remote == null) [ FD ]
Line_12 $$ remoteName = stdName.substring(0, slash)-->Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)[ FD ]
Line_9 $$ String remoteName-->Line_14 $$ remote = GitUtil.findRemoteByName(remotes, remoteName)[ FD ]
Line_12 $$ remoteName = stdName.substring(0, slash)-->Line_18 $$ LOG.debug(String.format("No remote found with the name [%s]. All remotes: %s", remoteName, remotes))[ FD ]
Line_9 $$ String remoteName-->Line_18 $$ LOG.debug(String.format("No remote found with the name [%s]. All remotes: %s", remoteName, remotes))[ FD ]
Line_17 $$ if (remote == null) -->Line_19 $$ GitRemote fakeRemote = new GitRemote(remoteName, ContainerUtil.<String>emptyList(), Collections.<String>emptyList(), Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_10 $$ String branchName-->Line_13 $$ branchName = stdName.substring(slash + 1)[ FD ]
Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)-->Line_15 $$ slash = stdName.indexOf('/', slash + 1)[ FD ]
Line_2 $$ private static GitRemoteBranch parseRemoteBranch(@NotNull String fullBranchName, @NotNull Collection<GitRemote> remotes) -->Line_3 $$ String stdName = GitBranchUtil.stripRefsPrefix(fullBranchName)[ FD ]
Line_5 $$ if (slash == -1) -->Line_9 $$ String remoteName[ CD ]
