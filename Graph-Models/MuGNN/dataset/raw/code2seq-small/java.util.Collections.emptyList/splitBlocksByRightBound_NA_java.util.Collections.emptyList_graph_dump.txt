Line_4 $$ if (subBlocks.size() == 0)-->Line_5 $$ return Pair.create(Collections.<DataLanguageBlockWrapper>emptyList(), Collections.<DataLanguageBlockWrapper>emptyList())[ CD ]
Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()-->Line_8 $$ splitByRightBoundAndCollectBlocks(subBlocks, before, after, bounds)[ FD ]
Line_6 $$ final ArrayList<DataLanguageBlockWrapper> before = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)-->Line_8 $$ splitByRightBoundAndCollectBlocks(subBlocks, before, after, bounds)[ FD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()[ CD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_8 $$ splitByRightBoundAndCollectBlocks(subBlocks, before, after, bounds)[ FD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_9 $$ return new Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>>(before, after)[ CD ]
Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()-->Line_6 $$ final ArrayList<DataLanguageBlockWrapper> before = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)[ FD ]
Line_7 $$ final ArrayList<DataLanguageBlockWrapper> after = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)-->Line_8 $$ splitByRightBoundAndCollectBlocks(subBlocks, before, after, bounds)[ FD ]
Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()-->Line_7 $$ final ArrayList<DataLanguageBlockWrapper> after = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)[ FD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_8 $$ splitByRightBoundAndCollectBlocks(subBlocks, before, after, bounds)[ CD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_6 $$ final ArrayList<DataLanguageBlockWrapper> before = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)[ CD ]
Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()-->Line_4 $$ if (subBlocks.size() == 0)[ FD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_3 $$ final List<Block> subBlocks = parent.getSubBlocks()[ FD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_4 $$ if (subBlocks.size() == 0)[ CD ]
Line_2 $$ public static Pair<List<DataLanguageBlockWrapper>, List<DataLanguageBlockWrapper>> splitBlocksByRightBound(@NotNull Block parent, @NotNull TextRange bounds) -->Line_7 $$ final ArrayList<DataLanguageBlockWrapper> after = new ArrayList<DataLanguageBlockWrapper>(subBlocks.size() / 2)[ CD ]
