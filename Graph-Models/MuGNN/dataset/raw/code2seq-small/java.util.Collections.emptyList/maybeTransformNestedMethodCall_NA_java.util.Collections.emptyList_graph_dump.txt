Line_12 $$ mapArg = nestedArgs.getExpression(0)-->Line_25 $$ if (mapArg != null) [ FD ]
Line_8 $$ List<Expression> extraArgs = Collections.emptyList()-->Line_15 $$ extraArgs = nestedArgs.getExpressions()[ FD ]
Line_7 $$ Expression mapArg = null-->Line_25 $$ if (mapArg != null) [ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_6 $$ Expression taskName = nestedMethod.getMethod()[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_3 $$ if (!(isTaskIdentifier(nestedMethod.getMethod()) && AstUtils.targetIsThis(nestedMethod))) [ FD ]
Line_6 $$ Expression taskName = nestedMethod.getMethod()-->Line_28 $$ args.addExpression(taskName)[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_13 $$ extraArgs = nestedArgs.getExpressions().subList(1, nestedArgs.getExpressions().size())[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_15 $$ extraArgs = nestedArgs.getExpressions()[ FD ]
Line_3 $$ if (!(isTaskIdentifier(nestedMethod.getMethod()) && AstUtils.targetIsThis(nestedMethod))) -->Line_4 $$ return false[ CD ]
Line_17 $$ mapArg = nestedArgs.getExpression(0)-->Line_26 $$ args.addExpression(mapArg)[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_14 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof ClosureExpression) [ FD ]
Line_17 $$ mapArg = nestedArgs.getExpression(0)-->Line_25 $$ if (mapArg != null) [ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_28 $$ args.addExpression(taskName)[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_32 $$ return true[ CD ]
Line_13 $$ extraArgs = nestedArgs.getExpressions().subList(1, nestedArgs.getExpressions().size())-->Line_15 $$ extraArgs = nestedArgs.getExpressions()[ FD ]
Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()-->Line_26 $$ args.addExpression(mapArg)[ FD ]
Line_14 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof ClosureExpression) -->Line_15 $$ extraArgs = nestedArgs.getExpressions()[ CD ]
Line_8 $$ List<Expression> extraArgs = Collections.emptyList()-->Line_13 $$ extraArgs = nestedArgs.getExpressions().subList(1, nestedArgs.getExpressions().size())[ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_7 $$ Expression mapArg = null[ CD ]
Line_11 $$ if (nestedArgs.getExpressions().size() == 2 && nestedArgs.getExpression(0) instanceof MapExpression && nestedArgs.getExpression(1) instanceof ClosureExpression) -->Line_14 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof ClosureExpression) [ CD ]
Line_25 $$ if (mapArg != null) -->Line_26 $$ args.addExpression(mapArg)[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_6 $$ Expression taskName = nestedMethod.getMethod()[ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_22 $$ target.setMethod(new ConstantExpression("task"))[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_22 $$ target.setMethod(new ConstantExpression("task"))[ FD ]
Line_12 $$ mapArg = nestedArgs.getExpression(0)-->Line_17 $$ mapArg = nestedArgs.getExpression(0)[ FD ]
Line_7 $$ Expression mapArg = null-->Line_26 $$ args.addExpression(mapArg)[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_11 $$ if (nestedArgs.getExpressions().size() == 2 && nestedArgs.getExpression(0) instanceof MapExpression && nestedArgs.getExpression(1) instanceof ClosureExpression) [ FD ]
Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()-->Line_24 $$ args.getExpressions().clear()[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_12 $$ mapArg = nestedArgs.getExpression(0)[ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_24 $$ args.getExpressions().clear()[ CD ]
Line_9 $$ if (nestedMethod.getArguments() instanceof TupleExpression) -->Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()[ CD ]
Line_7 $$ Expression mapArg = null-->Line_17 $$ mapArg = nestedArgs.getExpression(0)[ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_9 $$ if (nestedMethod.getArguments() instanceof TupleExpression) [ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_25 $$ if (mapArg != null) [ CD ]
Line_7 $$ Expression mapArg = null-->Line_12 $$ mapArg = nestedArgs.getExpression(0)[ FD ]
Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()-->Line_28 $$ args.addExpression(taskName)[ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_9 $$ if (nestedMethod.getArguments() instanceof TupleExpression) [ CD ]
Line_11 $$ if (nestedArgs.getExpressions().size() == 2 && nestedArgs.getExpression(0) instanceof MapExpression && nestedArgs.getExpression(1) instanceof ClosureExpression) -->Line_13 $$ extraArgs = nestedArgs.getExpressions().subList(1, nestedArgs.getExpressions().size())[ CD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_17 $$ mapArg = nestedArgs.getExpression(0)[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_18 $$ if (nestedArgs.getExpressions().size() != 0) [ FD ]
Line_11 $$ if (nestedArgs.getExpressions().size() == 2 && nestedArgs.getExpression(0) instanceof MapExpression && nestedArgs.getExpression(1) instanceof ClosureExpression) -->Line_12 $$ mapArg = nestedArgs.getExpression(0)[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_3 $$ if (!(isTaskIdentifier(nestedMethod.getMethod()) && AstUtils.targetIsThis(nestedMethod))) [ CD ]
Line_16 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof NamedArgumentListExpression) -->Line_18 $$ if (nestedArgs.getExpressions().size() != 0) [ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()[ FD ]
Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()-->Line_16 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof NamedArgumentListExpression) [ FD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_8 $$ List<Expression> extraArgs = Collections.emptyList()[ CD ]
Line_14 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof ClosureExpression) -->Line_16 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof NamedArgumentListExpression) [ CD ]
Line_12 $$ mapArg = nestedArgs.getExpression(0)-->Line_26 $$ args.addExpression(mapArg)[ FD ]
Line_23 $$ ArgumentListExpression args = (ArgumentListExpression) target.getArguments()-->Line_30 $$ args.addExpression(extraArg)[ FD ]
Line_29 $$ for (Expression extraArg : extraArgs) -->Line_30 $$ args.addExpression(extraArg)[ FD ]
Line_18 $$ if (nestedArgs.getExpressions().size() != 0) -->Line_19 $$ return false[ CD ]
Line_2 $$ private boolean maybeTransformNestedMethodCall(MethodCallExpression nestedMethod, MethodCallExpression target) -->Line_10 $$ TupleExpression nestedArgs = (TupleExpression) nestedMethod.getArguments()[ FD ]
Line_9 $$ if (nestedMethod.getArguments() instanceof TupleExpression) -->Line_11 $$ if (nestedArgs.getExpressions().size() == 2 && nestedArgs.getExpression(0) instanceof MapExpression && nestedArgs.getExpression(1) instanceof ClosureExpression) [ CD ]
Line_16 $$ if (nestedArgs.getExpressions().size() == 1 && nestedArgs.getExpression(0) instanceof NamedArgumentListExpression) -->Line_17 $$ mapArg = nestedArgs.getExpression(0)[ CD ]
