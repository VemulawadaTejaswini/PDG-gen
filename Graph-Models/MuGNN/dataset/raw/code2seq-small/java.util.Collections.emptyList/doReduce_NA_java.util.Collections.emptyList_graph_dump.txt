Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) -->Line_10 $$ for (int i = 0; i < buckets.size(); i++) [ CD ]
Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) -->Line_8 $$ InternalMultiBucketAggregation multiBucketsAgg = (InternalMultiBucketAggregation) aggregation[ CD ]
Line_8 $$ InternalMultiBucketAggregation multiBucketsAgg = (InternalMultiBucketAggregation) aggregation-->Line_9 $$ List<? extends Bucket> buckets = multiBucketsAgg.getBuckets()[ FD ]
Line_9 $$ List<? extends Bucket> buckets = multiBucketsAgg.getBuckets()-->Line_10 $$ for (int i = 0; i < buckets.size(); i++) [ FD ]
Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) -->Line_9 $$ List<? extends Bucket> buckets = multiBucketsAgg.getBuckets()[ CD ]
Line_11 $$ Bucket bucket = buckets.get(i)-->Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)[ FD ]
Line_10 $$ for (int i = 0; i < buckets.size(); i++) -->Line_13 $$ if (bucketValue != null && !Double.isNaN(bucketValue)) [ CD ]
Line_4 $$ List<String> bucketsPath = AggregationPath.parse(bucketsPaths()[0]).getPathElementsAsStringList()-->Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)[ FD ]
Line_8 $$ InternalMultiBucketAggregation multiBucketsAgg = (InternalMultiBucketAggregation) aggregation-->Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)[ FD ]
Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)-->Line_14 $$ collectBucketValue(bucket.getKeyAsString(), bucketValue)[ FD ]
Line_7 $$ bucketsPath = bucketsPath.subList(1, bucketsPath.size())-->Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)[ FD ]
Line_2 $$ public final InternalAggregation doReduce(Aggregations aggregations, ReduceContext context) -->Line_3 $$ preCollection()[ CD ]
Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)-->Line_13 $$ if (bucketValue != null && !Double.isNaN(bucketValue)) [ FD ]
Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) -->Line_7 $$ bucketsPath = bucketsPath.subList(1, bucketsPath.size())[ CD ]
Line_4 $$ List<String> bucketsPath = AggregationPath.parse(bucketsPaths()[0]).getPathElementsAsStringList()-->Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) [ FD ]
Line_10 $$ for (int i = 0; i < buckets.size(); i++) -->Line_11 $$ Bucket bucket = buckets.get(i)[ FD ]
Line_10 $$ for (int i = 0; i < buckets.size(); i++) -->Line_11 $$ Bucket bucket = buckets.get(i)[ CD ]
Line_9 $$ List<? extends Bucket> buckets = multiBucketsAgg.getBuckets()-->Line_11 $$ Bucket bucket = buckets.get(i)[ FD ]
Line_10 $$ for (int i = 0; i < buckets.size(); i++) -->Line_12 $$ Double bucketValue = BucketHelpers.resolveBucketValue(multiBucketsAgg, bucket, bucketsPath, gapPolicy)[ CD ]
Line_13 $$ if (bucketValue != null && !Double.isNaN(bucketValue)) -->Line_14 $$ collectBucketValue(bucket.getKeyAsString(), bucketValue)[ CD ]
Line_2 $$ public final InternalAggregation doReduce(Aggregations aggregations, ReduceContext context) -->Line_19 $$ return buildAggregation(Collections.emptyList(), metaData())[ CD ]
Line_5 $$ for (Aggregation aggregation : aggregations) -->Line_6 $$ if (aggregation.getName().equals(bucketsPath.get(0))) [ FD ]
Line_2 $$ public final InternalAggregation doReduce(Aggregations aggregations, ReduceContext context) -->Line_4 $$ List<String> bucketsPath = AggregationPath.parse(bucketsPaths()[0]).getPathElementsAsStringList()[ CD ]
Line_4 $$ List<String> bucketsPath = AggregationPath.parse(bucketsPaths()[0]).getPathElementsAsStringList()-->Line_7 $$ bucketsPath = bucketsPath.subList(1, bucketsPath.size())[ FD ]
Line_11 $$ Bucket bucket = buckets.get(i)-->Line_14 $$ collectBucketValue(bucket.getKeyAsString(), bucketValue)[ FD ]
