Line_13 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))-->Line_22 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) [ FD ]
Line_16 $$ for (final Command command : myCommands) -->Line_17 $$ if (command.getName().equals(commandName)) [ FD ]
Line_17 $$ if (command.getName().equals(commandName)) -->Line_18 $$ command.execute(commandName, myModule, args, myConsole)[ CD ]
Line_12 $$ final String commandName = file.getCommand()-->Line_17 $$ if (command.getName().equals(commandName)) [ FD ]
Line_8 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_12 $$ final String commandName = file.getCommand()[ FD ]
Line_9 $$ if (file == null) -->Line_10 $$ return[ CD ]
Line_8 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_13 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))[ FD ]
Line_8 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_9 $$ if (file == null) [ FD ]
Line_17 $$ if (command.getName().equals(commandName)) -->Line_19 $$ return[ CD ]
Line_16 $$ for (final Command command : myCommands) -->Line_18 $$ command.execute(commandName, myModule, args, myConsole)[ FD ]
Line_12 $$ final String commandName = file.getCommand()-->Line_26 $$ myConsole.print(PyBundle.message("commandLine.commandNotFound", commandName), ConsoleViewContentType.ERROR_OUTPUT)[ FD ]
Line_22 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) -->Line_27 $$ myConsole.print("", ConsoleViewContentType.SYSTEM_OUTPUT)[ CD ]
Line_22 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) -->Line_26 $$ myConsole.print(PyBundle.message("commandLine.commandNotFound", commandName), ConsoleViewContentType.ERROR_OUTPUT)[ CD ]
Line_12 $$ final String commandName = file.getCommand()-->Line_18 $$ command.execute(commandName, myModule, args, myConsole)[ FD ]
