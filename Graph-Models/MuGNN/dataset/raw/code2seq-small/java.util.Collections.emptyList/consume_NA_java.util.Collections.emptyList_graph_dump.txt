Line_2 $$ public void consume(final String t) -->Line_3 $$ final PsiFileFactory fileFactory = PsiFileFactory.getInstance(myModule.getProject())[ CD ]
Line_3 $$ final PsiFileFactory fileFactory = PsiFileFactory.getInstance(myModule.getProject())-->Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)[ FD ]
Line_17 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) -->Line_18 $$ myDefaultExecutor.execute(commandAndArgs.get(0), myModule, args, myConsole)[ CD ]
Line_17 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) -->Line_20 $$ myConsole.print(PyBundle.message("commandLine.commandNotFound", commandName), ConsoleViewContentType.ERROR_OUTPUT)[ CD ]
Line_17 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) -->Line_21 $$ myConsole.print("", ConsoleViewContentType.SYSTEM_OUTPUT)[ CD ]
Line_8 $$ final String commandName = file.getCommand()-->Line_13 $$ command.execute(commandName, myModule, args, myConsole)[ FD ]
Line_2 $$ public void consume(final String t) -->Line_5 $$ if (file == null) [ CD ]
Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_9 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))[ FD ]
Line_2 $$ public void consume(final String t) -->Line_10 $$ final List<String> args = (commandAndArgs.size() > 1 ? commandAndArgs.subList(1, commandAndArgs.size()) : Collections.<String>emptyList())[ CD ]
Line_9 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))-->Line_10 $$ final List<String> args = (commandAndArgs.size() > 1 ? commandAndArgs.subList(1, commandAndArgs.size()) : Collections.<String>emptyList())[ FD ]
Line_10 $$ final List<String> args = (commandAndArgs.size() > 1 ? commandAndArgs.subList(1, commandAndArgs.size()) : Collections.<String>emptyList())-->Line_18 $$ myDefaultExecutor.execute(commandAndArgs.get(0), myModule, args, myConsole)[ FD ]
Line_8 $$ final String commandName = file.getCommand()-->Line_12 $$ if (command.getName().equals(commandName)) [ FD ]
Line_10 $$ final List<String> args = (commandAndArgs.size() > 1 ? commandAndArgs.subList(1, commandAndArgs.size()) : Collections.<String>emptyList())-->Line_13 $$ command.execute(commandName, myModule, args, myConsole)[ FD ]
Line_12 $$ if (command.getName().equals(commandName)) -->Line_14 $$ return[ CD ]
Line_2 $$ public void consume(final String t) -->Line_8 $$ final String commandName = file.getCommand()[ CD ]
Line_5 $$ if (file == null) -->Line_6 $$ return[ CD ]
Line_8 $$ final String commandName = file.getCommand()-->Line_20 $$ myConsole.print(PyBundle.message("commandLine.commandNotFound", commandName), ConsoleViewContentType.ERROR_OUTPUT)[ FD ]
Line_2 $$ public void consume(final String t) -->Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)[ CD ]
Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_5 $$ if (file == null) [ FD ]
Line_9 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))-->Line_17 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) [ FD ]
Line_2 $$ public void consume(final String t) -->Line_9 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))[ CD ]
Line_11 $$ for (final Command command : myCommands) -->Line_12 $$ if (command.getName().equals(commandName)) [ FD ]
Line_2 $$ public void consume(final String t) -->Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)[ FD ]
Line_4 $$ final CommandLineFile file = PyUtil.as(fileFactory.createFileFromText(CommandLineLanguage.INSTANCE, t), CommandLineFile.class)-->Line_8 $$ final String commandName = file.getCommand()[ FD ]
Line_12 $$ if (command.getName().equals(commandName)) -->Line_13 $$ command.execute(commandName, myModule, args, myConsole)[ CD ]
Line_9 $$ final List<String> commandAndArgs = Arrays.asList(EMPTY_SPACE.split(file.getText().trim()))-->Line_18 $$ myDefaultExecutor.execute(commandAndArgs.get(0), myModule, args, myConsole)[ FD ]
Line_2 $$ public void consume(final String t) -->Line_17 $$ if (myDefaultExecutor != null && !commandAndArgs.isEmpty()) [ CD ]
Line_11 $$ for (final Command command : myCommands) -->Line_13 $$ command.execute(commandName, myModule, args, myConsole)[ FD ]
