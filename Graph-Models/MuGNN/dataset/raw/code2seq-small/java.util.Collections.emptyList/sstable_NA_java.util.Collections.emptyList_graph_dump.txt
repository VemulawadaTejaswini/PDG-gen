Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)-->Line_27 $$ reader.selfRef().release()[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_25 $$ reader.first = reader.last = readerBounds(generation)[ CD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_12 $$ if (size > 0) [ CD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_25 $$ reader.first = reader.last = readerBounds(generation)[ FD ]
Line_3 $$ Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(), cfs.keyspace.getName(), cfs.getColumnFamilyName(), generation)-->Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)[ FD ]
Line_4 $$ Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC)-->Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)[ FD ]
Line_22 $$ SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList())-->Line_23 $$ StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata.comparator).finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header).get(MetadataType.STATS)[ FD ]
Line_3 $$ Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(), cfs.keyspace.getName(), cfs.getColumnFamilyName(), generation)-->Line_6 $$ File file = new File(descriptor.filenameFor(component))[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_16 $$ raf.setLength(size)[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_12 $$ if (size > 0) [ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_23 $$ StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata.comparator).finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header).get(MetadataType.STATS)[ CD ]
Line_5 $$ for (Component component : components) -->Line_6 $$ File file = new File(descriptor.filenameFor(component))[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_26 $$ if (!keepRef)[ CD ]
Line_22 $$ SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList())-->Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_26 $$ if (!keepRef)[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)[ CD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_22 $$ SerializationHeader header = SerializationHeader.make(cfs.metadata, Collections.emptyList())[ CD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_28 $$ return reader[ CD ]
Line_23 $$ StatsMetadata metadata = (StatsMetadata) new MetadataCollector(cfs.metadata.comparator).finalizeMetadata(cfs.metadata.partitioner.getClass().getCanonicalName(), 0.01f, -1, header).get(MetadataType.STATS)-->Line_24 $$ SSTableReader reader = SSTableReader.internalOpen(descriptor, components, cfs.metadata, segmentedFile.sharedCopy(), segmentedFile.sharedCopy(), indexSummary.sharedCopy(), new AlwaysPresentFilter(), 1L, metadata, SSTableReader.OpenReason.NORMAL, header)[ FD ]
Line_15 $$ try (RandomAccessFile raf = new RandomAccessFile(file, "rw")) -->Line_16 $$ raf.setLength(size)[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_4 $$ Set<Component> components = ImmutableSet.of(Component.DATA, Component.PRIMARY_INDEX, Component.FILTER, Component.TOC)[ CD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_3 $$ Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(), cfs.keyspace.getName(), cfs.getColumnFamilyName(), generation)[ FD ]
Line_3 $$ Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(), cfs.keyspace.getName(), cfs.getColumnFamilyName(), generation)-->Line_14 $$ File file = new File(descriptor.filenameFor(Component.DATA))[ FD ]
Line_2 $$ public static SSTableReader sstable(int generation, int size, boolean keepRef, ColumnFamilyStore cfs) -->Line_3 $$ Descriptor descriptor = new Descriptor(cfs.getDirectories().getDirectoryForNewSSTables(), cfs.keyspace.getName(), cfs.getColumnFamilyName(), generation)[ CD ]
Line_6 $$ File file = new File(descriptor.filenameFor(component))-->Line_8 $$ file.createNewFile()[ FD ]
Line_26 $$ if (!keepRef)-->Line_27 $$ reader.selfRef().release()[ CD ]
