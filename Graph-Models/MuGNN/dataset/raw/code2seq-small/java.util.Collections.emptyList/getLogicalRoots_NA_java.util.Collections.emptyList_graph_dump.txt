Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> valuesMap = roots.get(module)-->Line_8 $$ return new ArrayList<LogicalRoot>(valuesMap.values())[ FD ]
Line_2 $$ public List<LogicalRoot> getLogicalRoots(@NotNull final Module module) -->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> valuesMap = roots.get(module)[ FD ]
Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> valuesMap = roots.get(module)-->Line_5 $$ if (valuesMap == null) [ FD ]
Line_3 $$ final Map<Module, MultiValuesMap<LogicalRootType, LogicalRoot>> roots = getRoots(myModuleManager)-->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> valuesMap = roots.get(module)[ FD ]
Line_2 $$ public List<LogicalRoot> getLogicalRoots(@NotNull final Module module) -->Line_5 $$ if (valuesMap == null) [ CD ]
Line_2 $$ public List<LogicalRoot> getLogicalRoots(@NotNull final Module module) -->Line_3 $$ final Map<Module, MultiValuesMap<LogicalRootType, LogicalRoot>> roots = getRoots(myModuleManager)[ CD ]
Line_2 $$ public List<LogicalRoot> getLogicalRoots(@NotNull final Module module) -->Line_8 $$ return new ArrayList<LogicalRoot>(valuesMap.values())[ CD ]
Line_2 $$ public List<LogicalRoot> getLogicalRoots(@NotNull final Module module) -->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> valuesMap = roots.get(module)[ CD ]
Line_5 $$ if (valuesMap == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
