Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_38 $$ ValueConstraint returnValue = negated ? negateConstraint(delegateContract.returnValue) : delegateContract.returnValue[ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_8 $$ final PsiExpression[] arguments = expression.getArgumentList().getExpressions()[ CD ]
Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()-->Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)[ FD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_48 $$ return fromDelegate[ CD ]
Line_13 $$ ValueConstraint[] answer = myEmptyConstraints-->Line_32 $$ if (answer == null) [ FD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()[ CD ]
Line_3 $$ JavaResolveResult result = expression.resolveMethodGenerics()-->Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)[ FD ]
Line_26 $$ if (paramIndex < 0) -->Line_27 $$ if (argConstraint != getLiteralConstraint(arguments[i])) [ CD ]
Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()-->Line_7 $$ final PsiParameter[] parameters = targetMethod.getParameterList().getParameters()[ FD ]
Line_18 $$ if (argConstraint != ANY_VALUE) -->Line_25 $$ int paramIndex = resolveParameter(arguments[i])[ CD ]
Line_17 $$ ValueConstraint argConstraint = delegateContract.arguments[i]-->Line_31 $$ answer = withConstraint(answer, paramIndex, argConstraint)[ FD ]
Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_39 $$ if (notNull && returnValue != THROW_EXCEPTION) [ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() [ CD ]
Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()-->Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() [ FD ]
Line_25 $$ int paramIndex = resolveParameter(arguments[i])-->Line_26 $$ if (paramIndex < 0) [ FD ]
Line_7 $$ final PsiParameter[] parameters = targetMethod.getParameterList().getParameters()-->Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)[ FD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_10 $$ final boolean notNull = NullableNotNullManager.isNotNull(targetMethod)[ CD ]
Line_26 $$ if (paramIndex < 0) -->Line_32 $$ if (answer == null) [ CD ]
Line_14 $$ for (int i = 0; i < delegateContract.arguments.length; i++) -->Line_18 $$ if (argConstraint != ANY_VALUE) [ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_8 $$ final PsiExpression[] arguments = expression.getArgumentList().getExpressions()[ FD ]
Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)-->Line_19 $$ if (varArgCall && i >= parameters.length - 1) [ FD ]
Line_31 $$ answer = withConstraint(answer, paramIndex, argConstraint)-->Line_32 $$ if (answer == null) [ FD ]
Line_14 $$ for (int i = 0; i < delegateContract.arguments.length; i++) -->Line_17 $$ ValueConstraint argConstraint = delegateContract.arguments[i][ CD ]
Line_20 $$ if (argConstraint == NULL_VALUE) -->Line_21 $$ return null[ CD ]
Line_3 $$ JavaResolveResult result = expression.resolveMethodGenerics()-->Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()[ FD ]
Line_13 $$ ValueConstraint[] answer = myEmptyConstraints-->Line_31 $$ answer = withConstraint(answer, paramIndex, argConstraint)[ FD ]
Line_14 $$ for (int i = 0; i < delegateContract.arguments.length; i++) -->Line_15 $$ if (i >= arguments.length)[ CD ]
Line_17 $$ ValueConstraint argConstraint = delegateContract.arguments[i]-->Line_18 $$ if (argConstraint != ANY_VALUE) [ FD ]
Line_27 $$ if (argConstraint != getLiteralConstraint(arguments[i])) -->Line_28 $$ return null[ CD ]
Line_10 $$ final boolean notNull = NullableNotNullManager.isNotNull(targetMethod)-->Line_39 $$ if (notNull && returnValue != THROW_EXCEPTION) [ FD ]
Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_46 $$ return ContainerUtil.concat(fromDelegate, Collections.singletonList(new MethodContract(myEmptyConstraints, NOT_NULL_VALUE)))[ FD ]
Line_25 $$ int paramIndex = resolveParameter(arguments[i])-->Line_31 $$ answer = withConstraint(answer, paramIndex, argConstraint)[ FD ]
Line_5 $$ if (targetMethod == null)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_13 $$ ValueConstraint[] answer = myEmptyConstraints[ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_3 $$ JavaResolveResult result = expression.resolveMethodGenerics()[ FD ]
Line_18 $$ if (argConstraint != ANY_VALUE) -->Line_19 $$ if (varArgCall && i >= parameters.length - 1) [ CD ]
Line_17 $$ ValueConstraint argConstraint = delegateContract.arguments[i]-->Line_20 $$ if (argConstraint == NULL_VALUE) [ FD ]
Line_39 $$ if (notNull && returnValue != THROW_EXCEPTION) -->Line_40 $$ returnValue = NOT_NULL_VALUE[ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_7 $$ final PsiParameter[] parameters = targetMethod.getParameterList().getParameters()[ CD ]
Line_15 $$ if (i >= arguments.length)-->Line_16 $$ return null[ CD ]
Line_18 $$ if (argConstraint != ANY_VALUE) -->Line_26 $$ if (paramIndex < 0) [ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)[ CD ]
Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()-->Line_5 $$ if (targetMethod == null)[ FD ]
Line_26 $$ if (paramIndex < 0) -->Line_31 $$ answer = withConstraint(answer, paramIndex, argConstraint)[ CD ]
Line_19 $$ if (varArgCall && i >= parameters.length - 1) -->Line_20 $$ if (argConstraint == NULL_VALUE) [ CD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_5 $$ if (targetMethod == null)[ CD ]
Line_32 $$ if (answer == null) -->Line_33 $$ return null[ CD ]
Line_38 $$ ValueConstraint returnValue = negated ? negateConstraint(delegateContract.returnValue) : delegateContract.returnValue-->Line_40 $$ returnValue = NOT_NULL_VALUE[ FD ]
Line_4 $$ final PsiMethod targetMethod = (PsiMethod) result.getElement()-->Line_10 $$ final boolean notNull = NullableNotNullManager.isNotNull(targetMethod)[ FD ]
Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_14 $$ for (int i = 0; i < delegateContract.arguments.length; i++) [ CD ]
Line_45 $$ if (notNull) -->Line_46 $$ return ContainerUtil.concat(fromDelegate, Collections.singletonList(new MethodContract(myEmptyConstraints, NOT_NULL_VALUE)))[ CD ]
Line_8 $$ final PsiExpression[] arguments = expression.getArgumentList().getExpressions()-->Line_9 $$ final boolean varArgCall = MethodCallInstruction.isVarArgCall(targetMethod, result.getSubstitutor(), arguments, parameters)[ FD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_3 $$ JavaResolveResult result = expression.resolveMethodGenerics()[ CD ]
Line_14 $$ for (int i = 0; i < delegateContract.arguments.length; i++) -->Line_15 $$ if (i >= arguments.length)[ FD ]
Line_17 $$ ValueConstraint argConstraint = delegateContract.arguments[i]-->Line_27 $$ if (argConstraint != getLiteralConstraint(arguments[i])) [ FD ]
Line_2 $$ private List<MethodContract> handleCallDelegation(PsiMethodCallExpression expression, final boolean negated) -->Line_45 $$ if (notNull) [ CD ]
Line_11 $$ List<MethodContract> fromDelegate = ContainerUtil.mapNotNull(ControlFlowAnalyzer.getMethodContracts(targetMethod), new NullableFunction<MethodContract, MethodContract>() -->Line_42 $$ return answer == null ? null : new MethodContract(answer, returnValue)[ CD ]
