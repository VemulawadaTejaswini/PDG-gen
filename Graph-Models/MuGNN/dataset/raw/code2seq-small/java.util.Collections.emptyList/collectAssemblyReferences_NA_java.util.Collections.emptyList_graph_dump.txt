Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_7 $$ file.accept(new PyRecursiveElementVisitor() [ CD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_7 $$ file.accept(new PyRecursiveElementVisitor() [ FD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_6 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_3 $$ if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_11 $$ super.visitPyCallExpression(node)[ FD ]
Line_15 $$ if (args.length == 1 && args[0] instanceof PyStringLiteralExpression) -->Line_16 $$ result.add(((PyStringLiteralExpression) args[0]).getStringValue())[ CD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_3 $$ if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) [ CD ]
Line_6 $$ final List<String> result = new ArrayList<String>()-->Line_16 $$ result.add(((PyStringLiteralExpression) args[0]).getStringValue())[ FD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_21 $$ return result[ CD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_14 $$ final PyExpression[] args = node.getArguments()[ FD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_11 $$ super.visitPyCallExpression(node)[ CD ]
