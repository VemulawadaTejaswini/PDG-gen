Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_10 $$ if (node.isCalleeText("AddReference", "AddReferenceByPartialName", "AddReferenceByName")) [ FD ]
Line_10 $$ if (node.isCalleeText("AddReference", "AddReferenceByPartialName", "AddReferenceByName")) -->Line_11 $$ final PyExpression[] args = node.getArguments()[ CD ]
Line_10 $$ if (node.isCalleeText("AddReference", "AddReferenceByPartialName", "AddReferenceByName")) -->Line_12 $$ if (args.length == 1 && args[0] instanceof PyStringLiteralExpression) [ CD ]
Line_6 $$ final List<String> result = new ArrayList<String>()-->Line_13 $$ result.add(((PyStringLiteralExpression) args[0]).getStringValue())[ FD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_7 $$ file.accept(new PyRecursiveElementVisitor() [ FD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_11 $$ final PyExpression[] args = node.getArguments()[ FD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_6 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_18 $$ return result[ CD ]
Line_3 $$ if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_7 $$ file.accept(new PyRecursiveElementVisitor() [ CD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_10 $$ if (node.isCalleeText("AddReference", "AddReferenceByPartialName", "AddReferenceByName")) [ CD ]
Line_2 $$ private List<String> collectAssemblyReferences(PsiFile file) -->Line_3 $$ if (!(PythonSdkFlavor.getFlavor(mySdk) instanceof IronPythonSdkFlavor)) [ CD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_9 $$ super.visitPyCallExpression(node)[ CD ]
Line_7 $$ file.accept(new PyRecursiveElementVisitor() -->Line_9 $$ super.visitPyCallExpression(node)[ FD ]
Line_12 $$ if (args.length == 1 && args[0] instanceof PyStringLiteralExpression) -->Line_13 $$ result.add(((PyStringLiteralExpression) args[0]).getStringValue())[ CD ]
