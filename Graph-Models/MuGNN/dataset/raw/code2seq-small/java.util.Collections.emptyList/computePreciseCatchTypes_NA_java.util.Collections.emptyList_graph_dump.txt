Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_30 $$ if (passed)[ CD ]
Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_8 $$ PsiTryStatement statement = getTryStatement()[ CD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_6 $$ PsiType declaredType = parameter.getType()[ FD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) [ CD ]
Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() -->Line_30 $$ if (passed)[ FD ]
Line_3 $$ if (parameter == null) -->Line_4 $$ return ContainerUtil.emptyList()[ CD ]
Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_12 $$ final PsiParameter[] parameters = statement.getCatchBlockParameters()[ CD ]
Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_10 $$ if (thrownTypes.isEmpty())[ CD ]
Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() [ CD ]
Line_9 $$ Collection<PsiClassType> thrownTypes = getThrownTypes(statement)-->Line_10 $$ if (thrownTypes.isEmpty())[ FD ]
Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() -->Line_20 $$ return thrownType[ CD ]
Line_6 $$ PsiType declaredType = parameter.getType()-->Line_25 $$ if (!declaredType.isAssignableFrom(type)) [ FD ]
Line_16 $$ final PsiType catchType = parameters[i].getType()-->Line_17 $$ if (catchType.isAssignableFrom(thrownType))[ FD ]
Line_8 $$ PsiTryStatement statement = getTryStatement()-->Line_12 $$ final PsiParameter[] parameters = statement.getCatchBlockParameters()[ FD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_3 $$ if (parameter == null) [ FD ]
Line_6 $$ PsiType declaredType = parameter.getType()-->Line_33 $$ return Collections.singletonList(declaredType)[ FD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_6 $$ PsiType declaredType = parameter.getType()[ CD ]
Line_8 $$ PsiTryStatement statement = getTryStatement()-->Line_9 $$ Collection<PsiClassType> thrownTypes = getThrownTypes(statement)[ FD ]
Line_15 $$ for (int i = 0; i < parameters.length && parameters[i] != parameter; i++) -->Line_16 $$ final PsiType catchType = parameters[i].getType()[ CD ]
Line_15 $$ for (int i = 0; i < parameters.length && parameters[i] != parameter; i++) -->Line_17 $$ if (catchType.isAssignableFrom(thrownType))[ CD ]
Line_10 $$ if (thrownTypes.isEmpty())-->Line_11 $$ return Collections.emptyList()[ CD ]
Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() -->Line_15 $$ for (int i = 0; i < parameters.length && parameters[i] != parameter; i++) [ CD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_3 $$ if (parameter == null) [ CD ]
Line_17 $$ if (catchType.isAssignableFrom(thrownType))-->Line_18 $$ return null[ CD ]
Line_30 $$ if (passed)-->Line_31 $$ return uncaughtTypes[ CD ]
Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() -->Line_17 $$ if (catchType.isAssignableFrom(thrownType))[ FD ]
Line_9 $$ Collection<PsiClassType> thrownTypes = getThrownTypes(statement)-->Line_13 $$ List<PsiType> uncaughtTypes = ContainerUtil.mapNotNull(thrownTypes, new NullableFunction<PsiClassType, PsiType>() [ FD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_33 $$ return Collections.singletonList(declaredType)[ CD ]
Line_2 $$ private List<PsiType> computePreciseCatchTypes(@Nullable final PsiParameter parameter) -->Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) [ FD ]
Line_7 $$ if (PsiUtil.getLanguageLevel(parameter).isAtLeast(LanguageLevel.JDK_1_7) && isCatchParameterEffectivelyFinal(parameter, getCatchBlock())) -->Line_9 $$ Collection<PsiClassType> thrownTypes = getThrownTypes(statement)[ CD ]
