Line_12 $$ if (archive != null) -->Line_13 $$ isFile = true[ CD ]
Line_10 $$ final Archive archive = myArchives.get(root)-->Line_12 $$ if (archive != null) [ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_7 $$ final String relativePath = packageName.replace('.', File.separatorChar)[ FD ]
Line_9 $$ for (File root : locationRoots) -->Line_10 $$ final Archive archive = myArchives.get(root)[ FD ]
Line_17 $$ if (isFile) -->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ CD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_4 $$ if (locationRoots == null) [ CD ]
Line_8 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_8 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_28 $$ return results.toList()[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_8 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()[ CD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_24 $$ collectFromDirectory(directory, kinds, results)[ FD ]
Line_21 $$ if (recurse) -->Line_24 $$ collectFromDirectory(directory, kinds, results)[ CD ]
Line_8 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_22 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_28 $$ return results.toList()[ CD ]
Line_12 $$ if (archive != null) -->Line_15 $$ isFile = isFile(root)[ CD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_22 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_3 $$ Iterable<? extends File> locationRoots = getLocation(location)[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_7 $$ final String relativePath = packageName.replace('.', File.separatorChar)[ CD ]
Line_20 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root-->Line_24 $$ collectFromDirectory(directory, kinds, results)[ FD ]
Line_7 $$ final String relativePath = packageName.replace('.', File.separatorChar)-->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_20 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root-->Line_22 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ FD ]
Line_2 $$ public Iterable<JavaFileObject> list(Location location, String packageName, Set<JavaFileObject.Kind> kinds, boolean recurse) throws IOException -->Line_3 $$ Iterable<? extends File> locationRoots = getLocation(location)[ CD ]
Line_10 $$ final Archive archive = myArchives.get(root)-->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_17 $$ if (isFile) -->Line_20 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root[ CD ]
Line_21 $$ if (recurse) -->Line_22 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ CD ]
Line_17 $$ if (isFile) -->Line_21 $$ if (recurse) [ CD ]
Line_11 $$ final boolean isFile-->Line_15 $$ isFile = isFile(root)[ FD ]
Line_11 $$ final boolean isFile-->Line_13 $$ isFile = true[ FD ]
Line_8 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_24 $$ collectFromDirectory(directory, kinds, results)[ FD ]
Line_7 $$ final String relativePath = packageName.replace('.', File.separatorChar)-->Line_20 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root[ FD ]
Line_9 $$ for (File root : locationRoots) -->Line_18 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_4 $$ if (locationRoots == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_9 $$ for (File root : locationRoots) -->Line_15 $$ isFile = isFile(root)[ FD ]
Line_13 $$ isFile = true-->Line_15 $$ isFile = isFile(root)[ FD ]
Line_3 $$ Iterable<? extends File> locationRoots = getLocation(location)-->Line_4 $$ if (locationRoots == null) [ FD ]
