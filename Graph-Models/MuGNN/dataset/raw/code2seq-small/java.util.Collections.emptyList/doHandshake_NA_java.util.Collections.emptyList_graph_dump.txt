Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_18 $$ return doHandshakeInternal(webSocketHandler, headersToUse, uri, subProtocols, extensions, Collections.<String, Object>emptyMap())[ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_8 $$ HttpHeaders headersToUse = new HttpHeaders()[ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_3 $$ Assert.notNull(webSocketHandler, "webSocketHandler must not be null")[ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_9 $$ if (headers != null) [ CD ]
Line_10 $$ for (String header : headers.keySet()) -->Line_12 $$ headersToUse.put(header, headers.get(header))[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_16 $$ List<String> subProtocols = ((headers != null) && (headers.getSecWebSocketProtocol() != null)) ? headers.getSecWebSocketProtocol() : Collections.<String>emptyList()[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_18 $$ return doHandshakeInternal(webSocketHandler, headersToUse, uri, subProtocols, extensions, Collections.<String, Object>emptyMap())[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_5 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_12 $$ headersToUse.put(header, headers.get(header))[ FD ]
Line_11 $$ if (!specialHeaders.contains(header.toLowerCase())) -->Line_12 $$ headersToUse.put(header, headers.get(header))[ CD ]
Line_16 $$ List<String> subProtocols = ((headers != null) && (headers.getSecWebSocketProtocol() != null)) ? headers.getSecWebSocketProtocol() : Collections.<String>emptyList()-->Line_18 $$ return doHandshakeInternal(webSocketHandler, headersToUse, uri, subProtocols, extensions, Collections.<String, Object>emptyMap())[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_10 $$ for (String header : headers.keySet()) [ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_4 $$ assertUri(uri)[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_17 $$ List<WebSocketExtension> extensions = ((headers != null) && (headers.getSecWebSocketExtensions() != null)) ? headers.getSecWebSocketExtensions() : Collections.<WebSocketExtension>emptyList()[ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_16 $$ List<String> subProtocols = ((headers != null) && (headers.getSecWebSocketProtocol() != null)) ? headers.getSecWebSocketProtocol() : Collections.<String>emptyList()[ CD ]
Line_10 $$ for (String header : headers.keySet()) -->Line_11 $$ if (!specialHeaders.contains(header.toLowerCase())) [ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_3 $$ Assert.notNull(webSocketHandler, "webSocketHandler must not be null")[ FD ]
Line_8 $$ HttpHeaders headersToUse = new HttpHeaders()-->Line_18 $$ return doHandshakeInternal(webSocketHandler, headersToUse, uri, subProtocols, extensions, Collections.<String, Object>emptyMap())[ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_17 $$ List<WebSocketExtension> extensions = ((headers != null) && (headers.getSecWebSocketExtensions() != null)) ? headers.getSecWebSocketExtensions() : Collections.<WebSocketExtension>emptyList()[ FD ]
Line_17 $$ List<WebSocketExtension> extensions = ((headers != null) && (headers.getSecWebSocketExtensions() != null)) ? headers.getSecWebSocketExtensions() : Collections.<WebSocketExtension>emptyList()-->Line_18 $$ return doHandshakeInternal(webSocketHandler, headersToUse, uri, subProtocols, extensions, Collections.<String, Object>emptyMap())[ FD ]
Line_5 $$ if (logger.isDebugEnabled()) -->Line_6 $$ logger.debug("Connecting to " + uri)[ CD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_9 $$ if (headers != null) [ FD ]
Line_2 $$ public final ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler webSocketHandler, WebSocketHttpHeaders headers, URI uri) -->Line_4 $$ assertUri(uri)[ CD ]
Line_8 $$ HttpHeaders headersToUse = new HttpHeaders()-->Line_12 $$ headersToUse.put(header, headers.get(header))[ FD ]
