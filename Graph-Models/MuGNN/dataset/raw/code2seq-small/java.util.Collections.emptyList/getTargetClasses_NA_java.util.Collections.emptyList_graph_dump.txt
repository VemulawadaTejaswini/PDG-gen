Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_25 $$ return Collections.emptyList()[ CD ]
Line_7 $$ if (enumClass == null) -->Line_10 $$ enumClass = null[ CD ]
Line_5 $$ for (PsiClass aClass : classes) -->Line_8 $$ enumClass = aClass[ FD ]
Line_4 $$ PsiClass enumClass = null-->Line_15 $$ if (enumClass != null) [ FD ]
Line_8 $$ enumClass = aClass-->Line_15 $$ if (enumClass != null) [ FD ]
Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_3 $$ final List<PsiClass> classes = super.getTargetClasses(element)[ CD ]
Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_4 $$ PsiClass enumClass = null[ CD ]
Line_5 $$ for (PsiClass aClass : classes) -->Line_6 $$ if (aClass.isEnum()) [ FD ]
Line_4 $$ PsiClass enumClass = null-->Line_7 $$ if (enumClass == null) [ FD ]
Line_21 $$ if (psiClass != null && psiClass.isEnum()) -->Line_22 $$ return Collections.singletonList(psiClass)[ CD ]
Line_7 $$ if (enumClass == null) -->Line_8 $$ enumClass = aClass[ CD ]
Line_19 $$ for (final ExpectedTypeInfo typeInfo : typeInfos) -->Line_20 $$ final PsiClass psiClass = PsiUtil.resolveClassInClassTypeOnly(typeInfo.getType())[ FD ]
Line_4 $$ PsiClass enumClass = null-->Line_10 $$ enumClass = null[ FD ]
Line_10 $$ enumClass = null-->Line_15 $$ if (enumClass != null) [ FD ]
Line_10 $$ enumClass = null-->Line_16 $$ return Collections.singletonList(enumClass)[ FD ]
Line_8 $$ enumClass = aClass-->Line_16 $$ return Collections.singletonList(enumClass)[ FD ]
Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_15 $$ if (enumClass != null) [ CD ]
Line_4 $$ PsiClass enumClass = null-->Line_16 $$ return Collections.singletonList(enumClass)[ FD ]
Line_8 $$ enumClass = aClass-->Line_10 $$ enumClass = null[ FD ]
Line_4 $$ PsiClass enumClass = null-->Line_8 $$ enumClass = aClass[ FD ]
Line_15 $$ if (enumClass != null) -->Line_16 $$ return Collections.singletonList(enumClass)[ CD ]
Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_18 $$ ExpectedTypeInfo[] typeInfos = CreateFromUsageUtils.guessExpectedTypes(myReferenceExpression, false)[ CD ]
Line_20 $$ final PsiClass psiClass = PsiUtil.resolveClassInClassTypeOnly(typeInfo.getType())-->Line_22 $$ return Collections.singletonList(psiClass)[ FD ]
Line_20 $$ final PsiClass psiClass = PsiUtil.resolveClassInClassTypeOnly(typeInfo.getType())-->Line_21 $$ if (psiClass != null && psiClass.isEnum()) [ FD ]
Line_6 $$ if (aClass.isEnum()) -->Line_7 $$ if (enumClass == null) [ CD ]
Line_2 $$ protected List<PsiClass> getTargetClasses(PsiElement element) -->Line_3 $$ final List<PsiClass> classes = super.getTargetClasses(element)[ FD ]
