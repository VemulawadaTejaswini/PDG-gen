Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeUnsignedVInt(size)[ FD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_8 $$ Slice.serializer.serialize(slice, out, version, types)[ FD ]
Line_5 $$ if (size == 0)-->Line_6 $$ return[ CD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_7 $$ List<AbstractType<?>> types = slices == ALL ? Collections.<AbstractType<?>>emptyList() : ((ArrayBackedSlices) slices).comparator.subtypes()[ CD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_5 $$ if (size == 0)[ CD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_3 $$ int size = slices.size()[ CD ]
Line_3 $$ int size = slices.size()-->Line_5 $$ if (size == 0)[ FD ]
Line_7 $$ List<AbstractType<?>> types = slices == ALL ? Collections.<AbstractType<?>>emptyList() : ((ArrayBackedSlices) slices).comparator.subtypes()-->Line_8 $$ Slice.serializer.serialize(slice, out, version, types)[ FD ]
Line_3 $$ int size = slices.size()-->Line_4 $$ out.writeUnsignedVInt(size)[ FD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_3 $$ int size = slices.size()[ FD ]
Line_2 $$ public void serialize(Slices slices, DataOutputPlus out, int version) throws IOException -->Line_4 $$ out.writeUnsignedVInt(size)[ CD ]
