Line_6 $$ final List<PyExpression> results = new ArrayList<PyExpression>()-->Line_16 $$ results.add(target)[ FD ]
Line_3 $$ final Set<String> names = new HashSet<String>()-->Line_15 $$ names.add(name)[ FD ]
Line_4 $$ final QualifiedName qualifierQName = qualifier.asQualifiedName()-->Line_12 $$ if (targetQName.getComponentCount() == qualifierQName.getComponentCount() + 1 && targetQName.matchesPrefix(qualifierQName)) [ FD ]
Line_14 $$ if (!names.contains(name)) -->Line_15 $$ names.add(name)[ CD ]
Line_13 $$ final String name = target.getName()-->Line_15 $$ names.add(name)[ FD ]
Line_10 $$ final QualifiedName targetQName = target.asQualifiedName()-->Line_11 $$ if (targetQName != null) [ FD ]
Line_5 $$ if (qualifierQName != null) -->Line_6 $$ final List<PyExpression> results = new ArrayList<PyExpression>()[ CD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_4 $$ final QualifiedName qualifierQName = qualifier.asQualifiedName()[ FD ]
Line_12 $$ if (targetQName.getComponentCount() == qualifierQName.getComponentCount() + 1 && targetQName.matchesPrefix(qualifierQName)) -->Line_13 $$ final String name = target.getName()[ CD ]
Line_13 $$ final String name = target.getName()-->Line_14 $$ if (!names.contains(name)) [ FD ]
Line_10 $$ final QualifiedName targetQName = target.asQualifiedName()-->Line_12 $$ if (targetQName.getComponentCount() == qualifierQName.getComponentCount() + 1 && targetQName.matchesPrefix(qualifierQName)) [ FD ]
Line_5 $$ if (qualifierQName != null) -->Line_7 $$ for (ScopeOwner owner = ScopeUtil.getScopeOwner(qualifier); owner != null; owner = ScopeUtil.getScopeOwner(owner)) [ CD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_4 $$ final QualifiedName qualifierQName = qualifier.asQualifiedName()[ CD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_3 $$ final Set<String> names = new HashSet<String>()[ CD ]
Line_4 $$ final QualifiedName qualifierQName = qualifier.asQualifiedName()-->Line_5 $$ if (qualifierQName != null) [ FD ]
Line_9 $$ for (PyTargetExpression target : scope.getTargetExpressions()) -->Line_10 $$ final QualifiedName targetQName = target.asQualifiedName()[ FD ]
Line_12 $$ if (targetQName.getComponentCount() == qualifierQName.getComponentCount() + 1 && targetQName.matchesPrefix(qualifierQName)) -->Line_14 $$ if (!names.contains(name)) [ CD ]
Line_3 $$ final Set<String> names = new HashSet<String>()-->Line_14 $$ if (!names.contains(name)) [ FD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_7 $$ for (ScopeOwner owner = ScopeUtil.getScopeOwner(qualifier); owner != null; owner = ScopeUtil.getScopeOwner(owner)) -->Line_8 $$ final Scope scope = ControlFlowCache.getScope(owner)[ FD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_7 $$ for (ScopeOwner owner = ScopeUtil.getScopeOwner(qualifier); owner != null; owner = ScopeUtil.getScopeOwner(owner)) [ FD ]
Line_7 $$ for (ScopeOwner owner = ScopeUtil.getScopeOwner(qualifier); owner != null; owner = ScopeUtil.getScopeOwner(owner)) -->Line_8 $$ final Scope scope = ControlFlowCache.getScope(owner)[ CD ]
Line_11 $$ if (targetQName != null) -->Line_12 $$ if (targetQName.getComponentCount() == qualifierQName.getComponentCount() + 1 && targetQName.matchesPrefix(qualifierQName)) [ CD ]
Line_9 $$ for (PyTargetExpression target : scope.getTargetExpressions()) -->Line_16 $$ results.add(target)[ FD ]
Line_5 $$ if (qualifierQName != null) -->Line_22 $$ return results[ CD ]
Line_8 $$ final Scope scope = ControlFlowCache.getScope(owner)-->Line_9 $$ for (PyTargetExpression target : scope.getTargetExpressions()) [ FD ]
Line_9 $$ for (PyTargetExpression target : scope.getTargetExpressions()) -->Line_13 $$ final String name = target.getName()[ FD ]
Line_2 $$ private static Collection<PyExpression> collectAssignedAttributes(PyQualifiedExpression qualifier) -->Line_5 $$ if (qualifierQName != null) [ CD ]
Line_14 $$ if (!names.contains(name)) -->Line_16 $$ results.add(target)[ CD ]
