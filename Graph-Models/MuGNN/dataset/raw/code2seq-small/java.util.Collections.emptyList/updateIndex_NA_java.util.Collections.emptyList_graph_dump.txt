Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)-->Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) [ FD ]
Line_2 $$ public void updateIndex(int id, MavenServerSettings settings, final MavenServerProgressIndicator indicator) throws RemoteException, MavenServerIndexerException, MavenServerProcessCanceledException -->Line_3 $$ final IndexingContext index = getIndex(id)[ FD ]
Line_2 $$ public void updateIndex(int id, MavenServerSettings settings, final MavenServerProgressIndicator indicator) throws RemoteException, MavenServerIndexerException, MavenServerProcessCanceledException -->Line_8 $$ indicator.setIndeterminate(true)[ FD ]
Line_20 $$ embedder.executeWithMavenSession(r, new Runnable() -->Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) [ CD ]
Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)-->Line_17 $$ MavenExecutionRequest r = embedder.createRequest(null, Collections.<String>emptyList(), Collections.<String>emptyList(), Collections.<String>emptyList())[ FD ]
Line_5 $$ File repository = index.getRepository()-->Line_6 $$ if (repository != null) [ FD ]
Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) -->Line_24 $$ super.downloadProgress(downloaded, total)[ CD ]
Line_5 $$ File repository = index.getRepository()-->Line_7 $$ if (repository.exists()) [ FD ]
Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) -->Line_32 $$ super.transferCompleted(event)[ CD ]
Line_3 $$ final IndexingContext index = getIndex(id)-->Line_5 $$ File repository = index.getRepository()[ FD ]
Line_3 $$ final IndexingContext index = getIndex(id)-->Line_10 $$ myIndexer.scan(index, new MyScanningListener(indicator), false)[ FD ]
Line_6 $$ if (repository != null) -->Line_7 $$ if (repository.exists()) [ CD ]
Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)-->Line_20 $$ embedder.executeWithMavenSession(r, new Runnable() [ FD ]
Line_18 $$ final IndexUpdateRequest request = new IndexUpdateRequest(index)-->Line_41 $$ myUpdater.fetchAndUpdateIndex(request)[ FD ]
Line_6 $$ if (repository != null) -->Line_18 $$ final IndexUpdateRequest request = new IndexUpdateRequest(index)[ CD ]
Line_2 $$ public void updateIndex(int id, MavenServerSettings settings, final MavenServerProgressIndicator indicator) throws RemoteException, MavenServerIndexerException, MavenServerProcessCanceledException -->Line_3 $$ final IndexingContext index = getIndex(id)[ CD ]
Line_2 $$ public void updateIndex(int id, MavenServerSettings settings, final MavenServerProgressIndicator indicator) throws RemoteException, MavenServerIndexerException, MavenServerProcessCanceledException -->Line_12 $$ indicator.setIndeterminate(false)[ FD ]
Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) -->Line_32 $$ super.transferCompleted(event)[ FD ]
Line_7 $$ if (repository.exists()) -->Line_8 $$ indicator.setIndeterminate(true)[ CD ]
Line_18 $$ final IndexUpdateRequest request = new IndexUpdateRequest(index)-->Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) [ FD ]
Line_17 $$ MavenExecutionRequest r = embedder.createRequest(null, Collections.<String>emptyList(), Collections.<String>emptyList(), Collections.<String>emptyList())-->Line_20 $$ embedder.executeWithMavenSession(r, new Runnable() [ FD ]
Line_3 $$ final IndexingContext index = getIndex(id)-->Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) [ FD ]
Line_22 $$ request.setResourceFetcher(new Maven3ServerIndexFetcher(index.getRepositoryId(), index.getRepositoryUrl(), embedder.getComponent(WagonManager.class), embedder.getComponent(RepositorySystem.class), new WagonTransferListenerAdapter(indicator) -->Line_24 $$ super.downloadProgress(downloaded, total)[ FD ]
Line_6 $$ if (repository != null) -->Line_17 $$ MavenExecutionRequest r = embedder.createRequest(null, Collections.<String>emptyList(), Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)-->Line_48 $$ embedder.release()[ FD ]
Line_2 $$ public void updateIndex(int id, MavenServerSettings settings, final MavenServerProgressIndicator indicator) throws RemoteException, MavenServerIndexerException, MavenServerProcessCanceledException -->Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)[ FD ]
Line_6 $$ if (repository != null) -->Line_16 $$ final Maven3ServerEmbedder embedder = createEmbedder(settings)[ CD ]
