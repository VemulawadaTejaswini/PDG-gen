Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_4 $$ Batch batch = Batch.createLocal(uuid, FBUtilities.timestampMicros(), mutations)[ FD ]
Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_5 $$ if (!endpoints.current.isEmpty())[ CD ]
Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_9 $$ handler.get()[ CD ]
Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_3 $$ WriteResponseHandler<?> handler = new WriteResponseHandler(endpoints.all, Collections.<InetAddress>emptyList(), endpoints.all.size() == 1 ? ConsistencyLevel.ONE : ConsistencyLevel.TWO, Keyspace.open(SystemKeyspace.NAME), null, WriteType.BATCH_LOG)[ CD ]
Line_4 $$ Batch batch = Batch.createLocal(uuid, FBUtilities.timestampMicros(), mutations)-->Line_6 $$ syncWriteToBatchlog(handler, batch, endpoints.current)[ FD ]
Line_3 $$ WriteResponseHandler<?> handler = new WriteResponseHandler(endpoints.all, Collections.<InetAddress>emptyList(), endpoints.all.size() == 1 ? ConsistencyLevel.ONE : ConsistencyLevel.TWO, Keyspace.open(SystemKeyspace.NAME), null, WriteType.BATCH_LOG)-->Line_6 $$ syncWriteToBatchlog(handler, batch, endpoints.current)[ FD ]
Line_3 $$ WriteResponseHandler<?> handler = new WriteResponseHandler(endpoints.all, Collections.<InetAddress>emptyList(), endpoints.all.size() == 1 ? ConsistencyLevel.ONE : ConsistencyLevel.TWO, Keyspace.open(SystemKeyspace.NAME), null, WriteType.BATCH_LOG)-->Line_9 $$ handler.get()[ FD ]
Line_4 $$ Batch batch = Batch.createLocal(uuid, FBUtilities.timestampMicros(), mutations)-->Line_8 $$ LegacyBatchlogMigrator.syncWriteToBatchlog(handler, batch, endpoints.legacy)[ FD ]
Line_7 $$ if (!endpoints.legacy.isEmpty())-->Line_8 $$ LegacyBatchlogMigrator.syncWriteToBatchlog(handler, batch, endpoints.legacy)[ CD ]
Line_3 $$ WriteResponseHandler<?> handler = new WriteResponseHandler(endpoints.all, Collections.<InetAddress>emptyList(), endpoints.all.size() == 1 ? ConsistencyLevel.ONE : ConsistencyLevel.TWO, Keyspace.open(SystemKeyspace.NAME), null, WriteType.BATCH_LOG)-->Line_8 $$ LegacyBatchlogMigrator.syncWriteToBatchlog(handler, batch, endpoints.legacy)[ FD ]
Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_4 $$ Batch batch = Batch.createLocal(uuid, FBUtilities.timestampMicros(), mutations)[ CD ]
Line_2 $$ private static void syncWriteToBatchlog(Collection<Mutation> mutations, BatchlogEndpoints endpoints, UUID uuid) throws WriteTimeoutException, WriteFailureException -->Line_7 $$ if (!endpoints.legacy.isEmpty())[ CD ]
Line_5 $$ if (!endpoints.current.isEmpty())-->Line_6 $$ syncWriteToBatchlog(handler, batch, endpoints.current)[ CD ]
