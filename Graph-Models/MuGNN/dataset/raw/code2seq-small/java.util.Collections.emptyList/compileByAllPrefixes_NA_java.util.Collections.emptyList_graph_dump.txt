Line_21 $$ final int[] varEndOffsets = findAllTypedVarOffsets(file, patterns)-->Line_23 $$ if (elements.size() == 0 || checkErrorElements(file, patternEndOffset, patternEndOffset, varEndOffsets, true) != Boolean.TRUE) [ FD ]
Line_12 $$ if (file == null) -->Line_13 $$ return elements[ CD ]
Line_15 $$ final PsiElement last = elements.get(elements.size() - 1)-->Line_22 $$ final int patternEndOffset = last.getTextRange().getEndOffset()[ FD ]
Line_4 $$ if (applicablePrefixes.length == 0) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_16 $$ final Pattern[] patterns = new Pattern[applicablePrefixes.length]-->Line_31 $$ final List<PsiElement> finalElements = compileByPrefixes(project, options, pattern, context, applicablePrefixes, patterns, prefixSequence, 0)[ FD ]
Line_11 $$ final PsiFile file = elements.get(0).getContainingFile()-->Line_12 $$ if (file == null) [ FD ]
Line_17 $$ for (int i = 0; i < applicablePrefixes.length; i++) -->Line_19 $$ patterns[i] = Pattern.compile(s + "\\w+\\b")[ CD ]
Line_16 $$ final Pattern[] patterns = new Pattern[applicablePrefixes.length]-->Line_21 $$ final int[] varEndOffsets = findAllTypedVarOffsets(file, patterns)[ FD ]
Line_28 $$ for (int i = 0; i < varCount; i++) -->Line_29 $$ prefixSequence[i] = applicablePrefixes[0][ CD ]
Line_11 $$ final PsiFile file = elements.get(0).getContainingFile()-->Line_23 $$ if (elements.size() == 0 || checkErrorElements(file, patternEndOffset, patternEndOffset, varEndOffsets, true) != Boolean.TRUE) [ FD ]
Line_27 $$ final String[] prefixSequence = new String[varCount]-->Line_31 $$ final List<PsiElement> finalElements = compileByPrefixes(project, options, pattern, context, applicablePrefixes, patterns, prefixSequence, 0)[ FD ]
Line_26 $$ final int varCount = varEndOffsets.length-->Line_28 $$ for (int i = 0; i < varCount; i++) [ FD ]
Line_8 $$ if (elements.isEmpty()) -->Line_9 $$ return elements[ CD ]
Line_7 $$ List<PsiElement> elements = doCompile(project, options, pattern, new ConstantPrefixProvider(applicablePrefixes[0]), context)-->Line_11 $$ final PsiFile file = elements.get(0).getContainingFile()[ FD ]
Line_22 $$ final int patternEndOffset = last.getTextRange().getEndOffset()-->Line_23 $$ if (elements.size() == 0 || checkErrorElements(file, patternEndOffset, patternEndOffset, varEndOffsets, true) != Boolean.TRUE) [ FD ]
Line_23 $$ if (elements.size() == 0 || checkErrorElements(file, patternEndOffset, patternEndOffset, varEndOffsets, true) != Boolean.TRUE) -->Line_24 $$ return elements[ CD ]
Line_7 $$ List<PsiElement> elements = doCompile(project, options, pattern, new ConstantPrefixProvider(applicablePrefixes[0]), context)-->Line_23 $$ if (elements.size() == 0 || checkErrorElements(file, patternEndOffset, patternEndOffset, varEndOffsets, true) != Boolean.TRUE) [ FD ]
Line_17 $$ for (int i = 0; i < applicablePrefixes.length; i++) -->Line_18 $$ String s = StructuralSearchUtil.shieldSpecialChars(applicablePrefixes[i])[ CD ]
Line_17 $$ for (int i = 0; i < applicablePrefixes.length; i++) -->Line_28 $$ for (int i = 0; i < varCount; i++) [ FD ]
Line_7 $$ List<PsiElement> elements = doCompile(project, options, pattern, new ConstantPrefixProvider(applicablePrefixes[0]), context)-->Line_8 $$ if (elements.isEmpty()) [ FD ]
Line_11 $$ final PsiFile file = elements.get(0).getContainingFile()-->Line_21 $$ final int[] varEndOffsets = findAllTypedVarOffsets(file, patterns)[ FD ]
Line_7 $$ List<PsiElement> elements = doCompile(project, options, pattern, new ConstantPrefixProvider(applicablePrefixes[0]), context)-->Line_15 $$ final PsiElement last = elements.get(elements.size() - 1)[ FD ]
