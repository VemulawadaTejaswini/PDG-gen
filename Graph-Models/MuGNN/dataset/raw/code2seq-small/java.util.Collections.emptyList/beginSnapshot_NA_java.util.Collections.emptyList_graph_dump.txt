Line_6 $$ MetaData metaData = clusterState.metaData()-->Line_14 $$ repository.initializeSnapshot(snapshot.snapshotId(), snapshot.indices(), metaData)[ FD ]
Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) -->Line_50 $$ failure = failureMessage.toString()[ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_32 $$ Tuple<Set<String>, Set<String>> indicesWithMissingShards = indicesWithMissingShards(shards, currentState.metaData())[ FD ]
Line_31 $$ if (!partial) -->Line_34 $$ Set<String> closed = indicesWithMissingShards.v2()[ CD ]
Line_8 $$ MetaData.Builder builder = MetaData.builder()-->Line_10 $$ builder.put(metaData.index(index), false)[ FD ]
Line_33 $$ Set<String> missing = indicesWithMissingShards.v1()-->Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) [ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_77 $$ if (!accepted && updatedSnapshot != null) [ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_87 $$ repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), snapshot.indices(), snapshot.startTime(), ExceptionsHelper.detailedMessage(t), 0, Collections.<SnapshotShardFailure>emptyList())[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_92 $$ userCreateSnapshotListener.onFailure(t)[ FD ]
Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) -->Line_39 $$ if (missing.isEmpty() == false) [ CD ]
Line_12 $$ metaData = builder.build()-->Line_14 $$ repository.initializeSnapshot(snapshot.snapshotId(), snapshot.indices(), metaData)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_66 $$ logger.warn("[[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_16 $$ if (snapshot.indices().isEmpty()) [ FD ]
Line_34 $$ Set<String> closed = indicesWithMissingShards.v2()-->Line_48 $$ failureMessage.append(closed)[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_69 $$ repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), snapshot.indices(), snapshot.startTime(), ExceptionsHelper.detailedMessage(t), 0, Collections.<SnapshotShardFailure>emptyList())[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_3 $$ boolean snapshotCreated = false[ CD ]
Line_34 $$ Set<String> closed = indicesWithMissingShards.v2()-->Line_43 $$ if (closed.isEmpty() == false) [ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_67 $$ removeSnapshotFromClusterState(snapshot.snapshotId(), null, t)[ CD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_40 $$ failureMessage.append("Indices don't have primary shards ")[ FD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_50 $$ failure = failureMessage.toString()[ FD ]
Line_28 $$ for (SnapshotsInProgress.Entry entry : snapshots.entries()) -->Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) [ FD ]
Line_32 $$ Tuple<Set<String>, Set<String>> indicesWithMissingShards = indicesWithMissingShards(shards, currentState.metaData())-->Line_34 $$ Set<String> closed = indicesWithMissingShards.v2()[ FD ]
Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) -->Line_60 $$ entries.add(entry)[ CD ]
Line_27 $$ List<SnapshotsInProgress.Entry> entries = new ArrayList()-->Line_38 $$ entries.add(updatedSnapshot)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) [ FD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_41 $$ failureMessage.append(missing)[ FD ]
Line_33 $$ Set<String> missing = indicesWithMissingShards.v1()-->Line_39 $$ if (missing.isEmpty() == false) [ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_73 $$ userCreateSnapshotListener.onFailure(t)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_83 $$ logger.warn("failed to create snapshot [[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_5 $$ Repository repository = repositoriesService.repository(snapshot.snapshotId().getRepository())[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_66 $$ logger.warn("[[ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_76 $$ userCreateSnapshotListener.onResponse()[ CD ]
Line_57 $$ accepted = true-->Line_77 $$ if (!accepted && updatedSnapshot != null) [ FD ]
Line_16 $$ if (snapshot.indices().isEmpty()) -->Line_19 $$ return[ CD ]
Line_8 $$ MetaData.Builder builder = MetaData.builder()-->Line_12 $$ metaData = builder.build()[ FD ]
Line_32 $$ Tuple<Set<String>, Set<String>> indicesWithMissingShards = indicesWithMissingShards(shards, currentState.metaData())-->Line_33 $$ Set<String> missing = indicesWithMissingShards.v1()[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_9 $$ for (String index : snapshot.indices()) [ FD ]
Line_43 $$ if (closed.isEmpty() == false) -->Line_47 $$ failureMessage.append("Indices are closed ")[ CD ]
Line_33 $$ Set<String> missing = indicesWithMissingShards.v1()-->Line_41 $$ failureMessage.append(missing)[ FD ]
Line_7 $$ if (!snapshot.includeGlobalState()) -->Line_12 $$ metaData = builder.build()[ CD ]
Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) -->Line_55 $$ entries.add(updatedSnapshot)[ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_30 $$ ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = shards(currentState, entry.indices())[ FD ]
Line_56 $$ if (!completed(shards.values())) -->Line_57 $$ accepted = true[ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_67 $$ removeSnapshotFromClusterState(snapshot.snapshotId(), null, t)[ FD ]
Line_16 $$ if (snapshot.indices().isEmpty()) -->Line_18 $$ endSnapshot(snapshot)[ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_18 $$ endSnapshot(snapshot)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_84 $$ removeSnapshotFromClusterState(snapshot.snapshotId(), null, t)[ FD ]
Line_16 $$ if (snapshot.indices().isEmpty()) -->Line_17 $$ userCreateSnapshotListener.onResponse()[ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_31 $$ if (!partial) [ FD ]
Line_31 $$ if (!partial) -->Line_33 $$ Set<String> missing = indicesWithMissingShards.v1()[ CD ]
Line_6 $$ MetaData metaData = clusterState.metaData()-->Line_12 $$ metaData = builder.build()[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_66 $$ logger.warn("[[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_92 $$ userCreateSnapshotListener.onFailure(t)[ FD ]
Line_30 $$ ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = shards(currentState, entry.indices())-->Line_32 $$ Tuple<Set<String>, Set<String>> indicesWithMissingShards = indicesWithMissingShards(shards, currentState.metaData())[ FD ]
Line_6 $$ MetaData metaData = clusterState.metaData()-->Line_10 $$ builder.put(metaData.index(index), false)[ FD ]
Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) -->Line_56 $$ if (!completed(shards.values())) [ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_69 $$ repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), snapshot.indices(), snapshot.startTime(), ExceptionsHelper.detailedMessage(t), 0, Collections.<SnapshotShardFailure>emptyList())[ FD ]
Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) -->Line_31 $$ if (!partial) [ CD ]
Line_34 $$ Set<String> closed = indicesWithMissingShards.v2()-->Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) [ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_14 $$ repository.initializeSnapshot(snapshot.snapshotId(), snapshot.indices(), metaData)[ FD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_47 $$ failureMessage.append("Indices are closed ")[ FD ]
Line_31 $$ if (!partial) -->Line_32 $$ Tuple<Set<String>, Set<String>> indicesWithMissingShards = indicesWithMissingShards(shards, currentState.metaData())[ CD ]
Line_77 $$ if (!accepted && updatedSnapshot != null) -->Line_78 $$ endSnapshot(updatedSnapshot, failure)[ CD ]
Line_29 $$ if (entry.snapshotId().equals(snapshot.snapshotId())) -->Line_30 $$ ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = shards(currentState, entry.indices())[ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_27 $$ List<SnapshotsInProgress.Entry> entries = new ArrayList()[ CD ]
Line_27 $$ List<SnapshotsInProgress.Entry> entries = new ArrayList()-->Line_60 $$ entries.add(entry)[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_84 $$ removeSnapshotFromClusterState(snapshot.snapshotId(), null, t)[ FD ]
Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) -->Line_38 $$ entries.add(updatedSnapshot)[ CD ]
Line_5 $$ Repository repository = repositoriesService.repository(snapshot.snapshotId().getRepository())-->Line_14 $$ repository.initializeSnapshot(snapshot.snapshotId(), snapshot.indices(), metaData)[ FD ]
Line_27 $$ List<SnapshotsInProgress.Entry> entries = new ArrayList()-->Line_63 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_73 $$ userCreateSnapshotListener.onFailure(t)[ FD ]
Line_43 $$ if (closed.isEmpty() == false) -->Line_48 $$ failureMessage.append(closed)[ CD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_48 $$ failureMessage.append(closed)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_87 $$ repositoriesService.repository(snapshot.snapshotId().getRepository()).finalizeSnapshot(snapshot.snapshotId(), snapshot.indices(), snapshot.startTime(), ExceptionsHelper.detailedMessage(t), 0, Collections.<SnapshotShardFailure>emptyList())[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_63 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ FD ]
Line_39 $$ if (missing.isEmpty() == false) -->Line_41 $$ failureMessage.append(missing)[ CD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_44 $$ if (failureMessage.length() > 0) [ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_17 $$ userCreateSnapshotListener.onResponse()[ FD ]
Line_43 $$ if (closed.isEmpty() == false) -->Line_44 $$ if (failureMessage.length() > 0) [ CD ]
Line_44 $$ if (failureMessage.length() > 0) -->Line_45 $$ failureMessage.append("; ")[ CD ]
Line_30 $$ ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = shards(currentState, entry.indices())-->Line_56 $$ if (!completed(shards.values())) [ FD ]
Line_36 $$ StringBuilder failureMessage = new StringBuilder()-->Line_45 $$ failureMessage.append("; ")[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_26 $$ SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE)[ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_6 $$ MetaData metaData = clusterState.metaData()[ FD ]
Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) -->Line_36 $$ StringBuilder failureMessage = new StringBuilder()[ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_71 $$ logger.warn("[[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_76 $$ userCreateSnapshotListener.onResponse()[ FD ]
Line_9 $$ for (String index : snapshot.indices()) -->Line_10 $$ builder.put(metaData.index(index), false)[ FD ]
Line_26 $$ SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE)-->Line_28 $$ for (SnapshotsInProgress.Entry entry : snapshots.entries()) [ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_67 $$ removeSnapshotFromClusterState(snapshot.snapshotId(), null, t)[ FD ]
Line_3 $$ boolean snapshotCreated = false-->Line_15 $$ snapshotCreated = true[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_89 $$ logger.warn("[[ FD ]
Line_7 $$ if (!snapshot.includeGlobalState()) -->Line_8 $$ MetaData.Builder builder = MetaData.builder()[ CD ]
Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) -->Line_43 $$ if (closed.isEmpty() == false) [ CD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_7 $$ if (!snapshot.includeGlobalState()) [ FD ]
Line_27 $$ List<SnapshotsInProgress.Entry> entries = new ArrayList()-->Line_55 $$ entries.add(updatedSnapshot)[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_63 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ CD ]
Line_28 $$ for (SnapshotsInProgress.Entry entry : snapshots.entries()) -->Line_30 $$ ImmutableOpenMap<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shards = shards(currentState, entry.indices())[ FD ]
Line_28 $$ for (SnapshotsInProgress.Entry entry : snapshots.entries()) -->Line_60 $$ entries.add(entry)[ FD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_73 $$ userCreateSnapshotListener.onFailure(t)[ CD ]
Line_39 $$ if (missing.isEmpty() == false) -->Line_40 $$ failureMessage.append("Indices don't have primary shards ")[ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_83 $$ logger.warn("failed to create snapshot [[ FD ]
Line_31 $$ if (!partial) -->Line_35 $$ if (missing.isEmpty() == false || closed.isEmpty() == false) [ CD ]
Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() -->Line_26 $$ SnapshotsInProgress snapshots = currentState.custom(SnapshotsInProgress.TYPE)[ FD ]
Line_2 $$ private void beginSnapshot(ClusterState clusterState, final SnapshotsInProgress.Entry snapshot, final boolean partial, final CreateSnapshotListener userCreateSnapshotListener) -->Line_21 $$ clusterService.submitStateUpdateTask("update_snapshot [" + snapshot.snapshotId().getSnapshot() + "]", new ClusterStateUpdateTask() [ FD ]
