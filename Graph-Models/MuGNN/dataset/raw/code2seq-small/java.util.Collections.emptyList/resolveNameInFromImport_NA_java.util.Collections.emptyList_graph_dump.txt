Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_12 $$ candidate = PyUtil.getPackageElement((PsiDirectory) candidate, importStatement)[ FD ]
Line_6 $$ List<PsiElement> resultList = new ArrayList<PsiElement>()-->Line_22 $$ if (!resultList.isEmpty()) [ FD ]
Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)-->Line_17 $$ throw new PsiInvalidElementAccessException(result, "Got an invalid candidate from resolveChild(): " + result.getClass())[ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_3 $$ PsiFile file = importStatement.getContainingFile().getOriginalFile()[ FD ]
Line_11 $$ if (candidate instanceof PsiDirectory) -->Line_12 $$ candidate = PyUtil.getPackageElement((PsiDirectory) candidate, importStatement)[ CD ]
Line_3 $$ PsiFile file = importStatement.getContainingFile().getOriginalFile()-->Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)[ FD ]
Line_6 $$ List<PsiElement> resultList = new ArrayList<PsiElement>()-->Line_23 $$ return rateResults(resultList)[ FD ]
Line_7 $$ for (PsiElement candidate : candidates) -->Line_12 $$ candidate = PyUtil.getPackageElement((PsiDirectory) candidate, importStatement)[ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_3 $$ PsiFile file = importStatement.getContainingFile().getOriginalFile()[ CD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_6 $$ List<PsiElement> resultList = new ArrayList<PsiElement>()[ CD ]
Line_12 $$ candidate = PyUtil.getPackageElement((PsiDirectory) candidate, importStatement)-->Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)[ FD ]
Line_15 $$ if (result != null) -->Line_16 $$ if (!result.isValid()) [ CD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_5 $$ final List<PsiElement> candidates = importStatement.resolveImportSourceCandidates()[ CD ]
Line_6 $$ List<PsiElement> resultList = new ArrayList<PsiElement>()-->Line_19 $$ resultList.add(result)[ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_4 $$ String name = qName.getComponents().get(0)[ CD ]
Line_7 $$ for (PsiElement candidate : candidates) -->Line_9 $$ throw new PsiInvalidElementAccessException(candidate, "Got an invalid candidate from resolveImportSourceCandidates(): " + candidate.getClass())[ FD ]
Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)-->Line_19 $$ resultList.add(result)[ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_25 $$ return Collections.emptyList()[ CD ]
Line_7 $$ for (PsiElement candidate : candidates) -->Line_8 $$ if (!candidate.isValid()) [ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_22 $$ if (!resultList.isEmpty()) [ CD ]
Line_7 $$ for (PsiElement candidate : candidates) -->Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)[ FD ]
Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)-->Line_15 $$ if (result != null) [ FD ]
Line_7 $$ for (PsiElement candidate : candidates) -->Line_11 $$ if (candidate instanceof PsiDirectory) [ FD ]
Line_22 $$ if (!resultList.isEmpty()) -->Line_23 $$ return rateResults(resultList)[ CD ]
Line_15 $$ if (result != null) -->Line_19 $$ resultList.add(result)[ CD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_5 $$ final List<PsiElement> candidates = importStatement.resolveImportSourceCandidates()[ FD ]
Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)-->Line_16 $$ if (!result.isValid()) [ FD ]
Line_2 $$ public static List<RatedResolveResult> resolveNameInFromImport(PyFromImportStatement importStatement, @NotNull QualifiedName qName) -->Line_4 $$ String name = qName.getComponents().get(0)[ FD ]
Line_4 $$ String name = qName.getComponents().get(0)-->Line_14 $$ PsiElement result = resolveChild(candidate, name, file, false, true)[ FD ]
