Line_9 $$ PsiClassType classType = (PsiClassType) type-->Line_15 $$ if (isHandled(element, classType, topElement))[ FD ]
Line_3 $$ if (referencedTypes.length > 0) -->Line_19 $$ return result[ CD ]
Line_4 $$ List<PsiClassType> result = ContainerUtil.newArrayList()-->Line_17 $$ result.add((PsiClassType) type)[ FD ]
Line_10 $$ PsiClass exceptionClass = ((PsiClassType) type).resolve()-->Line_11 $$ if (exceptionClass == null)[ FD ]
Line_2 $$ private static List<PsiClassType> getUnhandledExceptions(PsiElement element, PsiElement topElement, PsiSubstitutor substitutor, PsiClassType[] referencedTypes) -->Line_6 $$ final PsiType type = PsiClassImplUtil.correctType(GenericsUtil.eliminateWildcards(substitutor.substitute(referencedType), false), element.getResolveScope())[ FD ]
Line_3 $$ if (referencedTypes.length > 0) -->Line_4 $$ List<PsiClassType> result = ContainerUtil.newArrayList()[ CD ]
Line_5 $$ for (PsiClassType referencedType : referencedTypes) -->Line_6 $$ final PsiType type = PsiClassImplUtil.correctType(GenericsUtil.eliminateWildcards(substitutor.substitute(referencedType), false), element.getResolveScope())[ FD ]
Line_2 $$ private static List<PsiClassType> getUnhandledExceptions(PsiElement element, PsiElement topElement, PsiSubstitutor substitutor, PsiClassType[] referencedTypes) -->Line_3 $$ if (referencedTypes.length > 0) [ CD ]
Line_2 $$ private static List<PsiClassType> getUnhandledExceptions(PsiElement element, PsiElement topElement, PsiSubstitutor substitutor, PsiClassType[] referencedTypes) -->Line_15 $$ if (isHandled(element, classType, topElement))[ FD ]
Line_9 $$ PsiClassType classType = (PsiClassType) type-->Line_13 $$ if (isUncheckedException(classType))[ FD ]
Line_2 $$ private static List<PsiClassType> getUnhandledExceptions(PsiElement element, PsiElement topElement, PsiSubstitutor substitutor, PsiClassType[] referencedTypes) -->Line_21 $$ return Collections.emptyList()[ CD ]
