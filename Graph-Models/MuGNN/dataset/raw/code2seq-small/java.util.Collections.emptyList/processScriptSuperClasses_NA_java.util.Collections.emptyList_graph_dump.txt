Line_11 $$ final Project project = scriptFile.getProject()-->Line_12 $$ for (GroovyDslScript script : getDslScripts(project)) [ FD ]
Line_7 $$ if (virtualFile == null)-->Line_8 $$ return null[ CD ]
Line_17 $$ if (info instanceof Map) -->Line_20 $$ final Object _superClass = map.get("superClass")[ CD ]
Line_6 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()-->Line_7 $$ if (virtualFile == null)[ FD ]
Line_12 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_13 $$ final MultiMap staticInfo = script.getStaticInfo()[ FD ]
Line_18 $$ final Map map = (Map) info-->Line_20 $$ final Object _superClass = map.get("superClass")[ FD ]
Line_17 $$ if (info instanceof Map) -->Line_21 $$ if (_pattern instanceof String && _superClass instanceof String) [ CD ]
Line_17 $$ if (info instanceof Map) -->Line_18 $$ final Map map = (Map) info[ CD ]
Line_21 $$ if (_pattern instanceof String && _superClass instanceof String) -->Line_23 $$ final String superClass = (String) _superClass[ CD ]
Line_22 $$ final String pattern = (String) _pattern-->Line_26 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_17 $$ if (info instanceof Map) -->Line_19 $$ final Object _pattern = map.get("pattern")[ CD ]
Line_23 $$ final String superClass = (String) _superClass-->Line_26 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_10 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_35 $$ if (!supers.isEmpty()) [ FD ]
Line_35 $$ if (!supers.isEmpty()) -->Line_36 $$ final String className = supers.get(0).first[ CD ]
Line_6 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()-->Line_9 $$ final String filePath = virtualFile.getPath()[ FD ]
Line_16 $$ for (Object info : infos) -->Line_17 $$ if (info instanceof Map) [ FD ]
Line_10 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_26 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_35 $$ if (!supers.isEmpty()) -->Line_55 $$ return null[ CD ]
Line_36 $$ final String className = supers.get(0).first-->Line_39 $$ return TypesUtil.createTypeByFQClassName(className, scriptFile)[ FD ]
Line_21 $$ if (_pattern instanceof String && _superClass instanceof String) -->Line_22 $$ final String pattern = (String) _pattern[ CD ]
Line_10 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_37 $$ final GroovyDslScript script = supers.get(0).third[ FD ]
Line_12 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_29 $$ script.handleDslError(e)[ FD ]
Line_18 $$ final Map map = (Map) info-->Line_19 $$ final Object _pattern = map.get("pattern")[ FD ]
Line_10 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_36 $$ final String className = supers.get(0).first[ FD ]
Line_25 $$ if (Pattern.matches(".*" + pattern, filePath)) -->Line_26 $$ supers.add(Trinity.create(superClass, pattern, script))[ CD ]
Line_4 $$ if (!scriptFile.isScript())-->Line_5 $$ return null[ CD ]
Line_9 $$ final String filePath = virtualFile.getPath()-->Line_25 $$ if (Pattern.matches(".*" + pattern, filePath)) [ FD ]
Line_12 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_26 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_12 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_43 $$ script.handleDslError(e)[ FD ]
