Line_12 $$ final MultiMap staticInfo = script.getStaticInfo()-->Line_13 $$ final Collection infos = staticInfo != null ? staticInfo.get("scriptSuperClass") : Collections.emptyList()[ FD ]
Line_34 $$ final String className = supers.get(0).first-->Line_37 $$ return TypesUtil.createTypeByFQClassName(className, scriptFile)[ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_5 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()[ FD ]
Line_21 $$ final String superClass = (String) _superClass-->Line_24 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_10 $$ final Project project = scriptFile.getProject()[ CD ]
Line_16 $$ final Map map = (Map) info-->Line_18 $$ final Object _superClass = map.get("superClass")[ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_37 $$ return TypesUtil.createTypeByFQClassName(className, scriptFile)[ FD ]
Line_5 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()-->Line_8 $$ final String filePath = virtualFile.getPath()[ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_6 $$ if (virtualFile == null)[ CD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_10 $$ final Project project = scriptFile.getProject()[ FD ]
Line_15 $$ if (info instanceof Map) -->Line_17 $$ final Object _pattern = map.get("pattern")[ CD ]
Line_19 $$ if (_pattern instanceof String && _superClass instanceof String) -->Line_20 $$ final String pattern = (String) _pattern[ CD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_3 $$ if (!scriptFile.isScript())[ CD ]
Line_10 $$ final Project project = scriptFile.getProject()-->Line_11 $$ for (GroovyDslScript script : getDslScripts(project)) [ FD ]
Line_15 $$ if (info instanceof Map) -->Line_16 $$ final Map map = (Map) info[ CD ]
Line_11 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_24 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_11 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_27 $$ script.handleDslError(e)[ FD ]
Line_5 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()-->Line_6 $$ if (virtualFile == null)[ FD ]
Line_19 $$ if (_pattern instanceof String && _superClass instanceof String) -->Line_21 $$ final String superClass = (String) _superClass[ CD ]
Line_9 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_34 $$ final String className = supers.get(0).first[ FD ]
Line_11 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_41 $$ script.handleDslError(e)[ FD ]
Line_9 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_33 $$ if (!supers.isEmpty()) [ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_9 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()[ CD ]
Line_16 $$ final Map map = (Map) info-->Line_17 $$ final Object _pattern = map.get("pattern")[ FD ]
Line_23 $$ if (Pattern.matches(".*" + pattern, filePath)) -->Line_24 $$ supers.add(Trinity.create(superClass, pattern, script))[ CD ]
Line_33 $$ if (!supers.isEmpty()) -->Line_34 $$ final String className = supers.get(0).first[ CD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_5 $$ final VirtualFile virtualFile = scriptFile.getVirtualFile()[ CD ]
Line_6 $$ if (virtualFile == null)-->Line_7 $$ return null[ CD ]
Line_33 $$ if (!supers.isEmpty()) -->Line_46 $$ return null[ CD ]
Line_9 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_35 $$ final GroovyDslScript script = supers.get(0).third[ FD ]
Line_15 $$ if (info instanceof Map) -->Line_18 $$ final Object _superClass = map.get("superClass")[ CD ]
Line_9 $$ List<Trinity<String, String, GroovyDslScript>> supers = ContainerUtil.newArrayList()-->Line_24 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_8 $$ final String filePath = virtualFile.getPath()[ CD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_3 $$ if (!scriptFile.isScript())[ FD ]
Line_3 $$ if (!scriptFile.isScript())-->Line_4 $$ return null[ CD ]
Line_8 $$ final String filePath = virtualFile.getPath()-->Line_23 $$ if (Pattern.matches(".*" + pattern, filePath)) [ FD ]
Line_2 $$ public static PsiClassType processScriptSuperClasses(@NotNull GroovyFile scriptFile) -->Line_33 $$ if (!supers.isEmpty()) [ CD ]
Line_11 $$ for (GroovyDslScript script : getDslScripts(project)) -->Line_12 $$ final MultiMap staticInfo = script.getStaticInfo()[ FD ]
Line_20 $$ final String pattern = (String) _pattern-->Line_24 $$ supers.add(Trinity.create(superClass, pattern, script))[ FD ]
Line_15 $$ if (info instanceof Map) -->Line_19 $$ if (_pattern instanceof String && _superClass instanceof String) [ CD ]
Line_14 $$ for (Object info : infos) -->Line_15 $$ if (info instanceof Map) [ FD ]
