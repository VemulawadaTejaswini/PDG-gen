Line_7 $$ final String typeName = ElementPresentationManager.getTypeNameForObject(element)-->Line_10 $$ return Collections.singletonList(holder.createProblem(genericDomValue, DomUtil.getFile(domElement).equals(DomUtil.getFile(element)) ? IdeBundle.message("model.highlighting.identity", typeName) : IdeBundle.message("model.highlighting.identity.in.other.file", typeName, domElement.getXmlTag().getContainingFile().getName())))[ FD ]
Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)-->Line_10 $$ return Collections.singletonList(holder.createProblem(genericDomValue, DomUtil.getFile(domElement).equals(DomUtil.getFile(element)) ? IdeBundle.message("model.highlighting.identity", typeName) : IdeBundle.message("model.highlighting.identity.in.other.file", typeName, domElement.getXmlTag().getContainingFile().getName())))[ FD ]
Line_3 $$ final String elementName = ElementPresentationManager.getElementName(element)-->Line_4 $$ if (StringUtil.isNotEmpty(elementName)) [ FD ]
Line_6 $$ if (domElement != null) -->Line_7 $$ final String typeName = ElementPresentationManager.getTypeNameForObject(element)[ CD ]
Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)-->Line_6 $$ if (domElement != null) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_10 $$ return Collections.singletonList(holder.createProblem(genericDomValue, DomUtil.getFile(domElement).equals(DomUtil.getFile(element)) ? IdeBundle.message("model.highlighting.identity", typeName) : IdeBundle.message("model.highlighting.identity.in.other.file", typeName, domElement.getXmlTag().getContainingFile().getName())))[ FD ]
Line_8 $$ final GenericDomValue genericDomValue = domElement.getGenericInfo().getNameDomElement(element)-->Line_10 $$ return Collections.singletonList(holder.createProblem(genericDomValue, DomUtil.getFile(domElement).equals(DomUtil.getFile(element)) ? IdeBundle.message("model.highlighting.identity", typeName) : IdeBundle.message("model.highlighting.identity.in.other.file", typeName, domElement.getXmlTag().getContainingFile().getName())))[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_7 $$ final String typeName = ElementPresentationManager.getTypeNameForObject(element)[ FD ]
Line_4 $$ if (StringUtil.isNotEmpty(elementName)) -->Line_6 $$ if (domElement != null) [ CD ]
Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)-->Line_8 $$ final GenericDomValue genericDomValue = domElement.getGenericInfo().getNameDomElement(element)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_4 $$ if (StringUtil.isNotEmpty(elementName)) [ CD ]
Line_6 $$ if (domElement != null) -->Line_8 $$ final GenericDomValue genericDomValue = domElement.getGenericInfo().getNameDomElement(element)[ CD ]
Line_8 $$ final GenericDomValue genericDomValue = domElement.getGenericInfo().getNameDomElement(element)-->Line_9 $$ if (genericDomValue != null) [ FD ]
Line_9 $$ if (genericDomValue != null) -->Line_10 $$ return Collections.singletonList(holder.createProblem(genericDomValue, DomUtil.getFile(domElement).equals(DomUtil.getFile(element)) ? IdeBundle.message("model.highlighting.identity", typeName) : IdeBundle.message("model.highlighting.identity.in.other.file", typeName, domElement.getXmlTag().getContainingFile().getName())))[ CD ]
Line_6 $$ if (domElement != null) -->Line_9 $$ if (genericDomValue != null) [ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_3 $$ final String elementName = ElementPresentationManager.getElementName(element)[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_8 $$ final GenericDomValue genericDomValue = domElement.getGenericInfo().getNameDomElement(element)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_3 $$ final String elementName = ElementPresentationManager.getElementName(element)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)[ FD ]
Line_3 $$ final String elementName = ElementPresentationManager.getElementName(element)-->Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkNameIdentity(DomElement element, final DomElementAnnotationHolder holder) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_4 $$ if (StringUtil.isNotEmpty(elementName)) -->Line_5 $$ final DomElement domElement = DomUtil.findDuplicateNamedValue(element, elementName)[ CD ]
