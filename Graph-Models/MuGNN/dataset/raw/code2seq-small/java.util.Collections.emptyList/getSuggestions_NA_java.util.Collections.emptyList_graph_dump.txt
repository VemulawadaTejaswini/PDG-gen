Line_22 $$ for (int i = 0; i < limit; i++) -->Line_27 $$ result.add(i, suggestion.getWord())[ CD ]
Line_20 $$ List<String> result = new ArrayList<String>(limit)-->Line_27 $$ result.add(i, suggestion.getWord())[ FD ]
Line_5 $$ String transformed = transform.transform(word)-->Line_6 $$ if (transformed == null)[ FD ]
Line_23 $$ Suggestion suggestion = suggestions.get(i)-->Line_24 $$ if (bestMetrics - suggestion.getMetrics() > quality) [ FD ]
Line_5 $$ String transformed = transform.transform(word)-->Line_15 $$ int distance = EditDistance.levenshtein(transformed, rawSuggestion, true)[ FD ]
Line_5 $$ String transformed = transform.transform(word)-->Line_9 $$ restore(transformed.charAt(0), 0, Integer.MAX_VALUE, bundledDictionaries, rawSuggestions)[ FD ]
Line_23 $$ Suggestion suggestion = suggestions.get(i)-->Line_27 $$ result.add(i, suggestion.getWord())[ FD ]
Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_23 $$ Suggestion suggestion = suggestions.get(i)[ FD ]
Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_18 $$ Collections.sort(suggestions)[ FD ]
Line_11 $$ if (rawSuggestions.isEmpty())-->Line_12 $$ return Collections.emptyList()[ CD ]
Line_19 $$ int limit = Math.min(maxSuggestions, suggestions.size())-->Line_22 $$ for (int i = 0; i < limit; i++) [ FD ]
Line_22 $$ for (int i = 0; i < limit; i++) -->Line_23 $$ Suggestion suggestion = suggestions.get(i)[ FD ]
Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_21 $$ int bestMetrics = suggestions.get(0).getMetrics()[ FD ]
Line_8 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_9 $$ restore(transformed.charAt(0), 0, Integer.MAX_VALUE, bundledDictionaries, rawSuggestions)[ FD ]
Line_22 $$ for (int i = 0; i < limit; i++) -->Line_27 $$ result.add(i, suggestion.getWord())[ FD ]
Line_22 $$ for (int i = 0; i < limit; i++) -->Line_24 $$ if (bestMetrics - suggestion.getMetrics() > quality) [ CD ]
Line_22 $$ for (int i = 0; i < limit; i++) -->Line_23 $$ Suggestion suggestion = suggestions.get(i)[ CD ]
Line_6 $$ if (transformed == null)-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_8 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_11 $$ if (rawSuggestions.isEmpty())[ FD ]
Line_8 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_10 $$ restore(word.charAt(0), 0, Integer.MAX_VALUE, dictionaries, rawSuggestions)[ FD ]
Line_14 $$ for (String rawSuggestion : rawSuggestions) -->Line_15 $$ int distance = EditDistance.levenshtein(transformed, rawSuggestion, true)[ FD ]
Line_8 $$ List<String> rawSuggestions = new ArrayList<String>()-->Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())[ FD ]
Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_16 $$ suggestions.add(new Suggestion(rawSuggestion, distance))[ FD ]
Line_13 $$ List<Suggestion> suggestions = new ArrayList<Suggestion>(rawSuggestions.size())-->Line_19 $$ int limit = Math.min(maxSuggestions, suggestions.size())[ FD ]
