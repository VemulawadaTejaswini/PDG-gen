Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_8 $$ assertNotNull(new File(getProjectPath(), "target").exists())[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_4 $$ createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>")[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_7 $$ assertNotNull(result.projectData)[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_5 $$ myEmbedder.customizeForResolve(new SoutMavenConsole(), EMPTY_MAVEN_PROCESS)[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_6 $$ MavenServerExecutionResult result = myEmbedder.execute(myProjectPom, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("compile"))[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_10 $$ MavenModel project = result.projectData.mavenModel[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_11 $$ assertNotNull(project)[ CD ]
Line_10 $$ MavenModel project = result.projectData.mavenModel-->Line_11 $$ assertNotNull(project)[ FD ]
Line_10 $$ MavenModel project = result.projectData.mavenModel-->Line_12 $$ assertEquals("project", project.getMavenId().getArtifactId())[ FD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_12 $$ assertEquals("project", project.getMavenId().getArtifactId())[ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_3 $$ createProjectSubFile("src/main/java/A.java", "public class A [ CD ]
Line_2 $$ public void _testExecutionGoals() throws Exception -->Line_9 $$ assertOrderedElementsAreEqual(result.unresolvedArtifacts)[ CD ]
