Line_2 $$ public List<PsiElement> resultsAsList() -->Line_26 $$ if (!myWithoutRoots) [ CD ]
Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()-->Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) [ FD ]
Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()-->Line_10 $$ dir = ResolveImportUtil.stepBackFrom(footholdFile, myRelativeLevel)[ FD ]
Line_21 $$ if (cachedResults != null) -->Line_23 $$ return Lists.newArrayList(mySourceResults)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()[ CD ]
Line_3 $$ if (!myContext.isValid()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_43 $$ final ArrayList<PsiElement> results = Lists.newArrayList(mySourceResults)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_17 $$ final PythonPathCache cache = findMyCache()[ CD ]
Line_26 $$ if (!myWithoutRoots) -->Line_27 $$ addResultsFromRoots()[ CD ]
Line_17 $$ final PythonPathCache cache = findMyCache()-->Line_20 $$ final List<PsiElement> cachedResults = cache.get(myQualifiedName)[ FD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_19 $$ if (mayCache) [ CD ]
Line_19 $$ if (mayCache) -->Line_21 $$ if (cachedResults != null) [ CD ]
Line_34 $$ for (PyImportResolver resolver : Extensions.getExtensions(PyImportResolver.EP_NAME)) -->Line_35 $$ PsiElement foreign = resolver.resolveImportReference(myQualifiedName, myContext, !myWithoutRoots)[ FD ]
Line_44 $$ if (mayCache) -->Line_45 $$ cache.put(myQualifiedName, results)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_33 $$ if (!myWithoutForeign) [ CD ]
Line_10 $$ dir = ResolveImportUtil.stepBackFrom(footholdFile, myRelativeLevel)-->Line_12 $$ PsiElement module = resolveModuleAt(dir)[ FD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_3 $$ if (!myContext.isValid()) [ CD ]
Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()-->Line_28 $$ if (footholdFile != null) [ FD ]
Line_35 $$ PsiElement foreign = resolver.resolveImportReference(myQualifiedName, myContext, !myWithoutRoots)-->Line_37 $$ myForeignResults.add(foreign)[ FD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) [ CD ]
Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()-->Line_29 $$ addRelativeImportResultsFromSkeletons(footholdFile)[ FD ]
Line_35 $$ PsiElement foreign = resolver.resolveImportReference(myQualifiedName, myContext, !myWithoutRoots)-->Line_36 $$ if (foreign != null) [ FD ]
Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) -->Line_13 $$ if (module != null) [ CD ]
Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) -->Line_8 $$ PsiDirectory dir = footholdFile.getContainingDirectory()[ CD ]
Line_20 $$ final List<PsiElement> cachedResults = cache.get(myQualifiedName)-->Line_21 $$ if (cachedResults != null) [ FD ]
Line_28 $$ if (footholdFile != null) -->Line_29 $$ addRelativeImportResultsFromSkeletons(footholdFile)[ CD ]
Line_13 $$ if (module != null) -->Line_14 $$ addRoot(module, true)[ CD ]
Line_21 $$ if (cachedResults != null) -->Line_22 $$ mySourceResults.addAll(cachedResults)[ CD ]
Line_33 $$ if (!myWithoutForeign) -->Line_41 $$ myForeignResults.clear()[ CD ]
Line_43 $$ final ArrayList<PsiElement> results = Lists.newArrayList(mySourceResults)-->Line_45 $$ cache.put(myQualifiedName, results)[ FD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_32 $$ myLibResults.clear()[ CD ]
Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) -->Line_9 $$ if (myRelativeLevel > 0) [ CD ]
Line_8 $$ PsiDirectory dir = footholdFile.getContainingDirectory()-->Line_12 $$ PsiElement module = resolveModuleAt(dir)[ FD ]
Line_12 $$ PsiElement module = resolveModuleAt(dir)-->Line_14 $$ addRoot(module, true)[ FD ]
Line_12 $$ PsiElement module = resolveModuleAt(dir)-->Line_13 $$ if (module != null) [ FD ]
Line_8 $$ PsiDirectory dir = footholdFile.getContainingDirectory()-->Line_10 $$ dir = ResolveImportUtil.stepBackFrom(footholdFile, myRelativeLevel)[ FD ]
Line_20 $$ final List<PsiElement> cachedResults = cache.get(myQualifiedName)-->Line_22 $$ mySourceResults.addAll(cachedResults)[ FD ]
Line_36 $$ if (foreign != null) -->Line_37 $$ myForeignResults.add(foreign)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_47 $$ return results[ CD ]
Line_17 $$ final PythonPathCache cache = findMyCache()-->Line_45 $$ cache.put(myQualifiedName, results)[ FD ]
Line_19 $$ if (mayCache) -->Line_20 $$ final List<PsiElement> cachedResults = cache.get(myQualifiedName)[ CD ]
Line_9 $$ if (myRelativeLevel > 0) -->Line_10 $$ dir = ResolveImportUtil.stepBackFrom(footholdFile, myRelativeLevel)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_31 $$ mySourceResults.addAll(myLibResults)[ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_44 $$ if (mayCache) [ CD ]
Line_2 $$ public List<PsiElement> resultsAsList() -->Line_18 $$ final boolean mayCache = cache != null && !myWithoutRoots && !myWithoutForeign[ CD ]
Line_7 $$ if (myRelativeLevel >= 0 && footholdFile != null && !PyUserSkeletonsUtil.isUnderUserSkeletonsDirectory(footholdFile)) -->Line_12 $$ PsiElement module = resolveModuleAt(dir)[ CD ]
Line_33 $$ if (!myWithoutForeign) -->Line_40 $$ mySourceResults.addAll(myForeignResults)[ CD ]
Line_6 $$ final PsiFile footholdFile = myContext.getFootholdFile()-->Line_8 $$ PsiDirectory dir = footholdFile.getContainingDirectory()[ FD ]
Line_26 $$ if (!myWithoutRoots) -->Line_28 $$ if (footholdFile != null) [ CD ]
