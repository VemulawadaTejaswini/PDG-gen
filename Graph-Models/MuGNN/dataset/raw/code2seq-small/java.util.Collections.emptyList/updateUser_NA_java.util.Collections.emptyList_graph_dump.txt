Line_101 $$ if (oldOrganizationUserGroupRoles.contains(userGroupRole)) -->Line_104 $$ addOrganizationUserGroupRoles.add(userGroupRole)[ CD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_101 $$ if (oldOrganizationUserGroupRoles.contains(userGroupRole)) [ FD ]
Line_65 $$ if (roleIds != null) -->Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)[ CD ]
Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)-->Line_148 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_12 $$ UsersAdminUtil.updatePhones(Contact.class.getName(), user.getContactId(), phones)[ FD ]
Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)-->Line_41 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)-->Line_115 $$ OrganizationMembershipPolicyUtil.checkRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_48 $$ if (organizationIds != null) [ FD ]
Line_94 $$ if (userGroupRoles != null) -->Line_95 $$ userGroupRoles = checkUserGroupRoles(userId, userGroupRoles)[ CD ]
Line_46 $$ List<Long> addOrganizationIds = new ArrayList()-->Line_55 $$ addOrganizationIds.add(organizationId)[ FD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_58 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_21 $$ if (curUserId == userId) -->Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_29 $$ List<Long> addGroupIds = new ArrayList()[ CD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_104 $$ addOrganizationUserGroupRoles.add(userGroupRole)[ FD ]
Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)-->Line_151 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)-->Line_142 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)-->Line_149 $$ SiteMembershipPolicyUtil.propagateRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_121 $$ long[] oldUserGroupIds = user.getUserGroupIds()-->Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)[ FD ]
Line_80 $$ List<UserGroupRole> oldSiteUserGroupRoles = new ArrayList()-->Line_87 $$ oldSiteUserGroupRoles.add(oldUserGroupRole)[ FD ]
Line_29 $$ List<Long> addGroupIds = new ArrayList()-->Line_42 $$ SiteMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_65 $$ if (roleIds != null) -->Line_75 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ CD ]
Line_94 $$ if (userGroupRoles != null) -->Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_126 $$ userGroupIds = checkUserGroupIds(userId, userGroupIds)[ FD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_129 $$ removeUserGroupIds.remove(userGroupId)[ FD ]
Line_34 $$ for (long groupId : groupIds) -->Line_35 $$ if (ArrayUtil.contains(oldGroupIds, groupId)) [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_15 $$ UsersAdminUtil.updateWebsites(Contact.class.getName(), user.getContactId(), websites)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_23 $$ if (!StringUtil.equalsIgnoreCase(emailAddress, user.getEmailAddress())) [ FD ]
Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)-->Line_59 $$ OrganizationMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_29 $$ List<Long> addGroupIds = new ArrayList()-->Line_139 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_48 $$ if (organizationIds != null) -->Line_58 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ CD ]
Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)-->Line_118 $$ SiteMembershipPolicyUtil.checkRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_65 $$ if (roleIds != null) [ CD ]
Line_124 $$ if (userGroupIds != null) -->Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)[ CD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_145 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_62 $$ long[] oldRoleIds = user.getRoleIds()-->Line_69 $$ if (ArrayUtil.contains(oldRoleIds, roleId)) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_6 $$ UsersAdminUtil.updateAddresses(Contact.class.getName(), user.getContactId(), addresses)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_29 $$ List<Long> addGroupIds = new ArrayList()-->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_69 $$ if (ArrayUtil.contains(oldRoleIds, roleId)) -->Line_72 $$ addRoleIds.add(roleId)[ CD ]
Line_83 $$ Role role = oldUserGroupRole.getRole()-->Line_86 $$ if (role.getType() == RoleConstants.TYPE_SITE) [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_27 $$ validateUpdatePermission(user, screenName, emailAddress, firstName, middleName, lastName, prefixId, suffixId, birthdayMonth, birthdayDay, birthdayYear, male, jobTitle)[ FD ]
Line_83 $$ Role role = oldUserGroupRole.getRole()-->Line_106 $$ if (role.getType() == RoleConstants.TYPE_SITE) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_148 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ CD ]
Line_58 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) -->Line_59 $$ OrganizationMembershipPolicyUtil.checkMembership(new long[] [ CD ]
Line_62 $$ long[] oldRoleIds = user.getRoleIds()-->Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)[ FD ]
Line_79 $$ List<UserGroupRole> oldOrganizationUserGroupRoles = new ArrayList()-->Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)[ FD ]
Line_63 $$ List<Long> addRoleIds = new ArrayList()-->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ FD ]
Line_21 $$ if (curUserId == userId) -->Line_23 $$ if (!StringUtil.equalsIgnoreCase(emailAddress, user.getEmailAddress())) [ CD ]
Line_5 $$ if (addresses != null) -->Line_6 $$ UsersAdminUtil.updateAddresses(Contact.class.getName(), user.getContactId(), addresses)[ CD ]
Line_14 $$ if (websites != null) -->Line_15 $$ UsersAdminUtil.updateWebsites(Contact.class.getName(), user.getContactId(), websites)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_48 $$ if (organizationIds != null) [ CD ]
Line_100 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) -->Line_106 $$ if (role.getType() == RoleConstants.TYPE_SITE) [ CD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_139 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_145 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) -->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_8 $$ if (emailAddresses != null) [ FD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_70 $$ removeRoleIds.remove(roleId)[ FD ]
Line_83 $$ Role role = oldUserGroupRole.getRole()-->Line_84 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) [ FD ]
Line_48 $$ if (organizationIds != null) -->Line_50 $$ organizationIds = checkOrganizations(userId, organizationIds)[ CD ]
Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)-->Line_76 $$ RoleMembershipPolicyUtil.checkRoles(new long[] [ FD ]
Line_63 $$ List<Long> addRoleIds = new ArrayList()-->Line_75 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_42 $$ SiteMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_18 $$ updateAnnouncementsDeliveries(user.getUserId(), announcementsDelivers)[ FD ]
Line_41 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) -->Line_42 $$ SiteMembershipPolicyUtil.checkMembership(new long[] [ CD ]
Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)-->Line_134 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_14 $$ if (websites != null) [ FD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_75 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_83 $$ Role role = oldUserGroupRole.getRole()-->Line_100 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) [ FD ]
Line_124 $$ if (userGroupIds != null) -->Line_126 $$ userGroupIds = checkUserGroupIds(userId, userGroupIds)[ CD ]
Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()-->Line_118 $$ SiteMembershipPolicyUtil.checkRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_142 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ CD ]
Line_151 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) -->Line_152 $$ OrganizationMembershipPolicyUtil.propagateRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_31 $$ if (groupIds != null) [ CD ]
Line_100 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) -->Line_101 $$ if (oldOrganizationUserGroupRoles.contains(userGroupRole)) [ CD ]
Line_63 $$ List<Long> addRoleIds = new ArrayList()-->Line_72 $$ addRoleIds.add(roleId)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_121 $$ long[] oldUserGroupIds = user.getUserGroupIds()[ FD ]
Line_124 $$ if (userGroupIds != null) -->Line_134 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ CD ]
Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()-->Line_152 $$ OrganizationMembershipPolicyUtil.propagateRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_33 $$ groupIds = checkGroups(userId, groupIds)[ FD ]
Line_94 $$ if (userGroupRoles != null) -->Line_114 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ CD ]
Line_31 $$ if (groupIds != null) -->Line_33 $$ groupIds = checkGroups(userId, groupIds)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_14 $$ if (websites != null) [ CD ]
Line_52 $$ if (ArrayUtil.contains(oldOrganizationIds, organizationId)) -->Line_55 $$ addOrganizationIds.add(organizationId)[ CD ]
Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)-->Line_42 $$ SiteMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_121 $$ long[] oldUserGroupIds = user.getUserGroupIds()-->Line_128 $$ if (ArrayUtil.contains(oldUserGroupIds, userGroupId)) [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_62 $$ long[] oldRoleIds = user.getRoleIds()[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_23 $$ if (!StringUtil.equalsIgnoreCase(emailAddress, user.getEmailAddress())) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_5 $$ if (addresses != null) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_21 $$ if (curUserId == userId) [ CD ]
Line_106 $$ if (role.getType() == RoleConstants.TYPE_SITE) -->Line_107 $$ if (oldSiteUserGroupRoles.contains(userGroupRole)) [ CD ]
Line_127 $$ for (long userGroupId : userGroupIds) -->Line_128 $$ if (ArrayUtil.contains(oldUserGroupIds, userGroupId)) [ FD ]
Line_17 $$ if (announcementsDelivers != null) -->Line_18 $$ updateAnnouncementsDeliveries(user.getUserId(), announcementsDelivers)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_24 $$ validateEmailAddress(user, emailAddress)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_18 $$ updateAnnouncementsDeliveries(user.getUserId(), announcementsDelivers)[ FD ]
Line_127 $$ for (long userGroupId : userGroupIds) -->Line_129 $$ removeUserGroupIds.remove(userGroupId)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()[ CD ]
Line_45 $$ long[] oldOrganizationIds = user.getOrganizationIds()-->Line_52 $$ if (ArrayUtil.contains(oldOrganizationIds, organizationId)) [ FD ]
Line_68 $$ for (long roleId : roleIds) -->Line_69 $$ if (ArrayUtil.contains(oldRoleIds, roleId)) [ FD ]
Line_65 $$ if (roleIds != null) -->Line_67 $$ roleIds = checkRoles(userId, roleIds)[ CD ]
Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)-->Line_145 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_28 $$ long[] oldGroupIds = user.getGroupIds()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_46 $$ List<Long> addOrganizationIds = new ArrayList()[ CD ]
Line_31 $$ if (groupIds != null) -->Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()[ CD ]
Line_80 $$ List<UserGroupRole> oldSiteUserGroupRoles = new ArrayList()-->Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)[ FD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_135 $$ UserGroupMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_110 $$ addSiteUserGroupRoles.add(userGroupRole)[ FD ]
Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)-->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_122 $$ List<Long> addUserGroupIds = new ArrayList()-->Line_154 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_114 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) -->Line_115 $$ OrganizationMembershipPolicyUtil.checkRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ CD ]
Line_82 $$ for (UserGroupRole oldUserGroupRole : oldUserGroupRoles) -->Line_87 $$ oldSiteUserGroupRoles.add(oldUserGroupRole)[ FD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)[ FD ]
Line_117 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) -->Line_118 $$ SiteMembershipPolicyUtil.checkRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_3 $$ UserPermissionUtil.check(getPermissionChecker(), userId, organizationIds, ActionKeys.UPDATE)[ CD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_134 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_45 $$ long[] oldOrganizationIds = user.getOrganizationIds()-->Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)[ FD ]
Line_48 $$ if (organizationIds != null) -->Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_94 $$ if (userGroupRoles != null) [ CD ]
Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)-->Line_152 $$ OrganizationMembershipPolicyUtil.propagateRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_122 $$ List<Long> addUserGroupIds = new ArrayList()[ CD ]
Line_29 $$ List<Long> addGroupIds = new ArrayList()-->Line_41 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_46 $$ List<Long> addOrganizationIds = new ArrayList()-->Line_58 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)-->Line_114 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_51 $$ for (long organizationId : organizationIds) -->Line_52 $$ if (ArrayUtil.contains(oldOrganizationIds, organizationId)) [ FD ]
Line_127 $$ for (long userGroupId : userGroupIds) -->Line_131 $$ addUserGroupIds.add(userGroupId)[ FD ]
Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)-->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_28 $$ long[] oldGroupIds = user.getGroupIds()-->Line_35 $$ if (ArrayUtil.contains(oldGroupIds, groupId)) [ FD ]
Line_84 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) -->Line_86 $$ if (role.getType() == RoleConstants.TYPE_SITE) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_94 $$ if (userGroupRoles != null) [ FD ]
Line_154 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) -->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ CD ]
Line_122 $$ List<Long> addUserGroupIds = new ArrayList()-->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_95 $$ userGroupRoles = checkUserGroupRoles(userId, userGroupRoles)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_28 $$ long[] oldGroupIds = user.getGroupIds()-->Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_24 $$ validateEmailAddress(user, emailAddress)[ FD ]
Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)-->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_17 $$ if (announcementsDelivers != null) [ CD ]
Line_50 $$ organizationIds = checkOrganizations(userId, organizationIds)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_65 $$ if (roleIds != null) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_8 $$ if (emailAddresses != null) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_27 $$ validateUpdatePermission(user, screenName, emailAddress, firstName, middleName, lastName, prefixId, suffixId, birthdayMonth, birthdayDay, birthdayYear, male, jobTitle)[ CD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_41 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_63 $$ List<Long> addRoleIds = new ArrayList()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_81 $$ List<UserGroupRole> oldUserGroupRoles = userGroupRolePersistence.findByUserId(userId)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_95 $$ userGroupRoles = checkUserGroupRoles(userId, userGroupRoles)[ FD ]
Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)-->Line_117 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_122 $$ List<Long> addUserGroupIds = new ArrayList()-->Line_131 $$ addUserGroupIds.add(userGroupId)[ FD ]
Line_63 $$ List<Long> addRoleIds = new ArrayList()-->Line_76 $$ RoleMembershipPolicyUtil.checkRoles(new long[] [ FD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_59 $$ OrganizationMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_35 $$ if (ArrayUtil.contains(oldGroupIds, groupId)) -->Line_38 $$ addGroupIds.add(groupId)[ CD ]
Line_52 $$ if (ArrayUtil.contains(oldOrganizationIds, organizationId)) -->Line_53 $$ removeOrganizationIds.remove(organizationId)[ CD ]
Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)-->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_45 $$ long[] oldOrganizationIds = user.getOrganizationIds()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_81 $$ List<UserGroupRole> oldUserGroupRoles = userGroupRolePersistence.findByUserId(userId)[ CD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_28 $$ long[] oldGroupIds = user.getGroupIds()[ FD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_36 $$ removeGroupIds.remove(groupId)[ FD ]
Line_34 $$ for (long groupId : groupIds) -->Line_38 $$ addGroupIds.add(groupId)[ FD ]
Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)-->Line_135 $$ UserGroupMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)-->Line_139 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ FD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ FD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_9 $$ UsersAdminUtil.updateEmailAddresses(Contact.class.getName(), user.getContactId(), emailAddresses)[ FD ]
Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)-->Line_58 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()-->Line_104 $$ addOrganizationUserGroupRoles.add(userGroupRole)[ FD ]
Line_128 $$ if (ArrayUtil.contains(oldUserGroupIds, userGroupId)) -->Line_129 $$ removeUserGroupIds.remove(userGroupId)[ CD ]
Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()-->Line_149 $$ SiteMembershipPolicyUtil.propagateRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_76 $$ RoleMembershipPolicyUtil.checkRoles(new long[] [ FD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_102 $$ removeOrganizationUserGroupRoles.remove(userGroupRole)[ FD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_142 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)-->Line_75 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())-->Line_23 $$ if (!StringUtil.equalsIgnoreCase(emailAddress, user.getEmailAddress())) [ FD ]
Line_33 $$ groupIds = checkGroups(userId, groupIds)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())-->Line_27 $$ validateUpdatePermission(user, screenName, emailAddress, firstName, middleName, lastName, prefixId, suffixId, birthdayMonth, birthdayDay, birthdayYear, male, jobTitle)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_67 $$ roleIds = checkRoles(userId, roleIds)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_79 $$ List<UserGroupRole> oldOrganizationUserGroupRoles = new ArrayList()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()[ CD ]
Line_148 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) -->Line_149 $$ SiteMembershipPolicyUtil.propagateRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ CD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_148 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_115 $$ OrganizationMembershipPolicyUtil.checkRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_154 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_121 $$ long[] oldUserGroupIds = user.getUserGroupIds()[ CD ]
Line_107 $$ if (oldSiteUserGroupRoles.contains(userGroupRole)) -->Line_110 $$ addSiteUserGroupRoles.add(userGroupRole)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_50 $$ organizationIds = checkOrganizations(userId, organizationIds)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_11 $$ if (phones != null) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_80 $$ List<UserGroupRole> oldSiteUserGroupRoles = new ArrayList()[ CD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_102 $$ removeOrganizationUserGroupRoles.remove(userGroupRole)[ FD ]
Line_63 $$ List<Long> addRoleIds = new ArrayList()-->Line_145 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ FD ]
Line_20 $$ long curUserId = getUserId()-->Line_21 $$ if (curUserId == userId) [ FD ]
Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)-->Line_102 $$ removeOrganizationUserGroupRoles.remove(userGroupRole)[ FD ]
Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)-->Line_108 $$ removeSiteUserGroupRoles.remove(userGroupRole)[ FD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)[ FD ]
Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()-->Line_151 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)[ CD ]
Line_122 $$ List<Long> addUserGroupIds = new ArrayList()-->Line_134 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_35 $$ if (ArrayUtil.contains(oldGroupIds, groupId)) -->Line_36 $$ removeGroupIds.remove(groupId)[ CD ]
Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()-->Line_115 $$ OrganizationMembershipPolicyUtil.checkRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)-->Line_70 $$ removeRoleIds.remove(roleId)[ FD ]
Line_51 $$ for (long organizationId : organizationIds) -->Line_55 $$ addOrganizationIds.add(organizationId)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_6 $$ UsersAdminUtil.updateAddresses(Contact.class.getName(), user.getContactId(), addresses)[ FD ]
Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()-->Line_114 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_128 $$ if (ArrayUtil.contains(oldUserGroupIds, userGroupId)) -->Line_131 $$ addUserGroupIds.add(userGroupId)[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_145 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) [ CD ]
Line_107 $$ if (oldSiteUserGroupRoles.contains(userGroupRole)) -->Line_108 $$ removeSiteUserGroupRoles.remove(userGroupRole)[ CD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_151 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_3 $$ UserPermissionUtil.check(getPermissionChecker(), userId, organizationIds, ActionKeys.UPDATE)[ FD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_53 $$ removeOrganizationIds.remove(organizationId)[ FD ]
Line_68 $$ for (long roleId : roleIds) -->Line_72 $$ addRoleIds.add(roleId)[ FD ]
Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_107 $$ if (oldSiteUserGroupRoles.contains(userGroupRole)) [ FD ]
Line_8 $$ if (emailAddresses != null) -->Line_9 $$ UsersAdminUtil.updateEmailAddresses(Contact.class.getName(), user.getContactId(), emailAddresses)[ CD ]
Line_126 $$ userGroupIds = checkUserGroupIds(userId, userGroupIds)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)-->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)-->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_9 $$ UsersAdminUtil.updateEmailAddresses(Contact.class.getName(), user.getContactId(), emailAddresses)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_21 $$ if (curUserId == userId) [ FD ]
Line_84 $$ if (role.getType() == RoleConstants.TYPE_ORGANIZATION) -->Line_85 $$ oldOrganizationUserGroupRoles.add(oldUserGroupRole)[ CD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_82 $$ for (UserGroupRole oldUserGroupRole : oldUserGroupRoles) -->Line_85 $$ oldOrganizationUserGroupRoles.add(oldUserGroupRole)[ FD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_117 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_114 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ FD ]
Line_22 $$ emailAddress = StringUtil.toLowerCase(emailAddress.trim())-->Line_24 $$ validateEmailAddress(user, emailAddress)[ FD ]
Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)-->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ FD ]
Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()-->Line_110 $$ addSiteUserGroupRoles.add(userGroupRole)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_90 $$ List<UserGroupRole> addOrganizationUserGroupRoles = new ArrayList()[ CD ]
Line_69 $$ if (ArrayUtil.contains(oldRoleIds, roleId)) -->Line_70 $$ removeRoleIds.remove(roleId)[ CD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_108 $$ removeSiteUserGroupRoles.remove(userGroupRole)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_155 $$ UserGroupMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_34 $$ for (long groupId : groupIds) -->Line_36 $$ removeGroupIds.remove(groupId)[ FD ]
Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)-->Line_154 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_23 $$ if (!StringUtil.equalsIgnoreCase(emailAddress, user.getEmailAddress())) -->Line_24 $$ validateEmailAddress(user, emailAddress)[ CD ]
Line_122 $$ List<Long> addUserGroupIds = new ArrayList()-->Line_135 $$ UserGroupMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_75 $$ if (!addRoleIds.isEmpty() || !removeRoleIds.isEmpty()) -->Line_76 $$ RoleMembershipPolicyUtil.checkRoles(new long[] [ CD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_108 $$ removeSiteUserGroupRoles.remove(userGroupRole)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_151 $$ if (!addOrganizationUserGroupRoles.isEmpty() || !removeOrganizationUserGroupRoles.isEmpty()) [ CD ]
Line_64 $$ List<Long> removeRoleIds = Collections.emptyList()-->Line_66 $$ removeRoleIds = ListUtil.toList(oldRoleIds)[ FD ]
Line_11 $$ if (phones != null) -->Line_12 $$ UsersAdminUtil.updatePhones(Contact.class.getName(), user.getContactId(), phones)[ CD ]
Line_142 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) -->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ CD ]
Line_125 $$ removeUserGroupIds = ListUtil.toList(oldUserGroupIds)-->Line_129 $$ removeUserGroupIds.remove(userGroupId)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_62 $$ long[] oldRoleIds = user.getRoleIds()[ CD ]
Line_94 $$ if (userGroupRoles != null) -->Line_96 $$ removeOrganizationUserGroupRoles = ListUtil.copy(oldOrganizationUserGroupRoles)[ CD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_124 $$ if (userGroupIds != null) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ CD ]
Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()-->Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)[ FD ]
Line_86 $$ if (role.getType() == RoleConstants.TYPE_SITE) -->Line_87 $$ oldSiteUserGroupRoles.add(oldUserGroupRole)[ CD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_97 $$ removeSiteUserGroupRoles = ListUtil.copy(oldSiteUserGroupRoles)[ FD ]
Line_94 $$ if (userGroupRoles != null) -->Line_117 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_124 $$ if (userGroupIds != null) [ FD ]
Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)-->Line_53 $$ removeOrganizationIds.remove(organizationId)[ FD ]
Line_29 $$ List<Long> addGroupIds = new ArrayList()-->Line_38 $$ addGroupIds.add(groupId)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_139 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_15 $$ UsersAdminUtil.updateWebsites(Contact.class.getName(), user.getContactId(), websites)[ FD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_149 $$ SiteMembershipPolicyUtil.propagateRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_67 $$ roleIds = checkRoles(userId, roleIds)-->Line_138 $$ user = userLocalService.updateUser(userId, oldPassword, newPassword1, newPassword2, passwordReset, reminderQueryQuestion, reminderQueryAnswer, screenName, emailAddress, facebookId, openId, portrait, portraitBytes, languageId, timeZoneId, greeting, comments, firstName, middleName, lastName, prefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear, smsSn, facebookSn, jabberSn, skypeSn, twitterSn, jobTitle, groupIds, organizationIds, roleIds, userGroupRoles, userGroupIds, serviceContext)[ FD ]
Line_68 $$ for (long roleId : roleIds) -->Line_70 $$ removeRoleIds.remove(roleId)[ FD ]
Line_79 $$ List<UserGroupRole> oldOrganizationUserGroupRoles = new ArrayList()-->Line_85 $$ oldOrganizationUserGroupRoles.add(oldUserGroupRole)[ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_146 $$ RoleMembershipPolicyUtil.propagateRoles(new long[] [ FD ]
Line_4 $$ User user = userPersistence.findByPrimaryKey(userId)-->Line_45 $$ long[] oldOrganizationIds = user.getOrganizationIds()[ FD ]
Line_46 $$ List<Long> addOrganizationIds = new ArrayList()-->Line_142 $$ if (!addOrganizationIds.isEmpty() || !removeOrganizationIds.isEmpty()) [ FD ]
Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)-->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()[ CD ]
Line_51 $$ for (long organizationId : organizationIds) -->Line_53 $$ removeOrganizationIds.remove(organizationId)[ FD ]
Line_80 $$ List<UserGroupRole> oldSiteUserGroupRoles = new ArrayList()-->Line_107 $$ if (oldSiteUserGroupRoles.contains(userGroupRole)) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_20 $$ long curUserId = getUserId()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_157 $$ return user[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_5 $$ if (addresses != null) [ CD ]
Line_46 $$ List<Long> addOrganizationIds = new ArrayList()-->Line_59 $$ OrganizationMembershipPolicyUtil.checkMembership(new long[] [ FD ]
Line_134 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) -->Line_135 $$ UserGroupMembershipPolicyUtil.checkMembership(new long[] [ CD ]
Line_139 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) -->Line_140 $$ SiteMembershipPolicyUtil.propagateMembership(new long[] [ CD ]
Line_93 $$ List<UserGroupRole> removeSiteUserGroupRoles = Collections.emptyList()-->Line_118 $$ SiteMembershipPolicyUtil.checkRoles(addSiteUserGroupRoles, removeSiteUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_31 $$ if (groupIds != null) [ FD ]
Line_91 $$ List<UserGroupRole> removeOrganizationUserGroupRoles = Collections.emptyList()-->Line_152 $$ OrganizationMembershipPolicyUtil.propagateRoles(addOrganizationUserGroupRoles, removeOrganizationUserGroupRoles)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()[ CD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_27 $$ validateUpdatePermission(user, screenName, emailAddress, firstName, middleName, lastName, prefixId, suffixId, birthdayMonth, birthdayDay, birthdayYear, male, jobTitle)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_30 $$ List<Long> removeGroupIds = Collections.emptyList()[ CD ]
Line_82 $$ for (UserGroupRole oldUserGroupRole : oldUserGroupRoles) -->Line_83 $$ Role role = oldUserGroupRole.getRole()[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_12 $$ UsersAdminUtil.updatePhones(Contact.class.getName(), user.getContactId(), phones)[ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_17 $$ if (announcementsDelivers != null) [ FD ]
Line_98 $$ for (UserGroupRole userGroupRole : userGroupRoles) -->Line_99 $$ Role role = userGroupRole.getRole()[ FD ]
Line_79 $$ List<UserGroupRole> oldOrganizationUserGroupRoles = new ArrayList()-->Line_101 $$ if (oldOrganizationUserGroupRoles.contains(userGroupRole)) [ FD ]
Line_2 $$ public User updateUser(long userId, String oldPassword, String newPassword1, String newPassword2, boolean passwordReset, String reminderQueryQuestion, String reminderQueryAnswer, String screenName, String emailAddress, long facebookId, String openId, boolean portrait, byte[] portraitBytes, String languageId, String timeZoneId, String greeting, String comments, String firstName, String middleName, String lastName, long prefixId, long suffixId, boolean male, int birthdayMonth, int birthdayDay, int birthdayYear, String smsSn, String facebookSn, String jabberSn, String skypeSn, String twitterSn, String jobTitle, long[] groupIds, long[] organizationIds, long[] roleIds, List<UserGroupRole> userGroupRoles, long[] userGroupIds, List<Address> addresses, List<EmailAddress> emailAddresses, List<Phone> phones, List<Website> websites, List<AnnouncementsDelivery> announcementsDelivers, ServiceContext serviceContext) throws PortalException -->Line_11 $$ if (phones != null) [ FD ]
Line_46 $$ List<Long> addOrganizationIds = new ArrayList()-->Line_143 $$ OrganizationMembershipPolicyUtil.propagateMembership(new long[] [ FD ]
Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()-->Line_148 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_123 $$ List<Long> removeUserGroupIds = Collections.emptyList()-->Line_154 $$ if (!addUserGroupIds.isEmpty() || !removeUserGroupIds.isEmpty()) [ FD ]
Line_31 $$ if (groupIds != null) -->Line_41 $$ if (!addGroupIds.isEmpty() || !removeGroupIds.isEmpty()) [ CD ]
Line_92 $$ List<UserGroupRole> addSiteUserGroupRoles = new ArrayList()-->Line_117 $$ if (!addSiteUserGroupRoles.isEmpty() || !removeSiteUserGroupRoles.isEmpty()) [ FD ]
Line_101 $$ if (oldOrganizationUserGroupRoles.contains(userGroupRole)) -->Line_102 $$ removeOrganizationUserGroupRoles.remove(userGroupRole)[ CD ]
Line_47 $$ List<Long> removeOrganizationIds = Collections.emptyList()-->Line_49 $$ removeOrganizationIds = ListUtil.toList(oldOrganizationIds)[ FD ]
Line_32 $$ removeGroupIds = ListUtil.toList(oldGroupIds)-->Line_36 $$ removeGroupIds.remove(groupId)[ FD ]
