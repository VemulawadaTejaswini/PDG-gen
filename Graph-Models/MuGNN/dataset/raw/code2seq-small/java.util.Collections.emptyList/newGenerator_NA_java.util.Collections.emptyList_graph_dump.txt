Line_3 $$ List<String> names = settings.columns.namestrs-->Line_6 $$ columns.add(new Bytes(names.get(i), new GeneratorConfig("randomstr" + names.get(i), null, settings.columns.sizeDistribution, null)))[ FD ]
Line_2 $$ PartitionGenerator newGenerator(StressSettings settings) -->Line_7 $$ return new PartitionGenerator(partitionKey, Collections.<Generator>emptyList(), columns, PartitionGenerator.Order.ARBITRARY)[ CD ]
Line_2 $$ PartitionGenerator newGenerator(StressSettings settings) -->Line_3 $$ List<String> names = settings.columns.namestrs[ CD ]
Line_5 $$ List<Generator> columns = new ArrayList()-->Line_6 $$ columns.add(new Bytes(names.get(i), new GeneratorConfig("randomstr" + names.get(i), null, settings.columns.sizeDistribution, null)))[ FD ]
Line_2 $$ PartitionGenerator newGenerator(StressSettings settings) -->Line_6 $$ for (int i = 0; i < settings.columns.maxColumnsPerKey; i++) columns.add(new Bytes(names.get(i), new GeneratorConfig("randomstr" + names.get(i), null, settings.columns.sizeDistribution, null)))[ CD ]
Line_2 $$ PartitionGenerator newGenerator(StressSettings settings) -->Line_4 $$ List<Generator> partitionKey = Collections.<Generator>singletonList(new HexBytes("key", new GeneratorConfig("randomstrkey", null, OptionDistribution.get("fixed(" + keySize + ")"), null)))[ CD ]
Line_2 $$ PartitionGenerator newGenerator(StressSettings settings) -->Line_5 $$ List<Generator> columns = new ArrayList()[ CD ]
