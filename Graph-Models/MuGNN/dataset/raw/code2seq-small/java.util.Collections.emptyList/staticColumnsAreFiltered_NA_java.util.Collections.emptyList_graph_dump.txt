Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_4 $$ UntypedResultSet rows[ CD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_18 $$ DataOutputBuffer out = new DataOutputBuffer((int) ReadCommand.legacyReadCommandSerializer.serializedSize(cmd, MessagingService.VERSION_21))[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_5 $$ QueryProcessor.executeInternal("INSERT INTO ks.tbl (k, s, i, v) VALUES ('k', 's', 0, 'v')")[ CD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)[ FD ]
Line_4 $$ UntypedResultSet rows-->Line_12 $$ assert rows.isEmpty()[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_14 $$ ByteBuffer zero = ByteBufferUtil.bytes(0)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_20 $$ DataInputPlus in = new DataInputBuffer(out.buffer(), true)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_26 $$ partitionIterator = response.makeIterator(cfm, null)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_13 $$ ColumnFilter columnFilter = ColumnFilter.selection(PartitionColumns.of(v))[ CD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())[ FD ]
Line_26 $$ partitionIterator = response.makeIterator(cfm, null)-->Line_27 $$ assert partitionIterator.hasNext()[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_7 $$ QueryProcessor.executeInternal("DELETE FROM ks.tbl WHERE k='k' AND i=0")[ CD ]
Line_9 $$ for (UntypedResultSet.Row row : rows) -->Line_10 $$ logger.debug("Current: k=[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_19 $$ ReadCommand.legacyReadCommandSerializer.serialize(cmd, out, MessagingService.VERSION_21)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_15 $$ Slices slices = Slices.with(cfm.comparator, Slice.make(Slice.Bound.inclusiveStartOf(zero), Slice.Bound.inclusiveEndOf(zero)))[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())[ CD ]
Line_18 $$ DataOutputBuffer out = new DataOutputBuffer((int) ReadCommand.legacyReadCommandSerializer.serializedSize(cmd, MessagingService.VERSION_21))-->Line_19 $$ ReadCommand.legacyReadCommandSerializer.serialize(cmd, out, MessagingService.VERSION_21)[ FD ]
Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())-->Line_28 $$ UnfilteredRowIterator partition = partitionIterator.next()[ FD ]
Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())-->Line_26 $$ partitionIterator = response.makeIterator(cfm, null)[ FD ]
Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())-->Line_25 $$ logger.debug("creating response: [ FD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_19 $$ ReadCommand.legacyReadCommandSerializer.serialize(cmd, out, MessagingService.VERSION_21)[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)[ CD ]
Line_4 $$ UntypedResultSet rows-->Line_8 $$ rows = QueryProcessor.executeInternal("SELECT * FROM ks.tbl WHERE k='k' AND i=0")[ FD ]
Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)-->Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())[ FD ]
Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)-->Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())[ FD ]
Line_26 $$ partitionIterator = response.makeIterator(cfm, null)-->Line_28 $$ UnfilteredRowIterator partition = partitionIterator.next()[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_3 $$ DecoratedKey key = cfm.decorateKey(ByteBufferUtil.bytes("k"))[ CD ]
Line_20 $$ DataInputPlus in = new DataInputBuffer(out.buffer(), true)-->Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)[ FD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_22 $$ logger.debug("ReadCommand: [ FD ]
Line_18 $$ DataOutputBuffer out = new DataOutputBuffer((int) ReadCommand.legacyReadCommandSerializer.serializedSize(cmd, MessagingService.VERSION_21))-->Line_20 $$ DataInputPlus in = new DataInputBuffer(out.buffer(), true)[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_29 $$ LegacyLayout.LegacyUnfilteredPartition rowIter = LegacyLayout.fromUnfilteredRowIterator(partition)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_18 $$ DataOutputBuffer out = new DataOutputBuffer((int) ReadCommand.legacyReadCommandSerializer.serializedSize(cmd, MessagingService.VERSION_21))[ CD ]
Line_8 $$ rows = QueryProcessor.executeInternal("SELECT * FROM ks.tbl WHERE k='k' AND i=0")-->Line_12 $$ assert rows.isEmpty()[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_28 $$ UnfilteredRowIterator partition = partitionIterator.next()[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_8 $$ rows = QueryProcessor.executeInternal("SELECT * FROM ks.tbl WHERE k='k' AND i=0")[ CD ]
Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())-->Line_26 $$ partitionIterator = response.makeIterator(cfm, null)[ FD ]
Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())-->Line_27 $$ assert partitionIterator.hasNext()[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)[ CD ]
Line_23 $$ UnfilteredPartitionIterator partitionIterator = cmd.executeLocally(ReadExecutionController.empty())-->Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_16 $$ ClusteringIndexSliceFilter sliceFilter = new ClusteringIndexSliceFilter(slices, false)[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_30 $$ Assert.assertEquals(Collections.emptyList(), rowIter.cells)[ CD ]
Line_28 $$ UnfilteredRowIterator partition = partitionIterator.next()-->Line_29 $$ LegacyLayout.LegacyUnfilteredPartition rowIter = LegacyLayout.fromUnfilteredRowIterator(partition)[ FD ]
Line_21 $$ cmd = ReadCommand.legacyReadCommandSerializer.deserialize(in, MessagingService.VERSION_21)-->Line_22 $$ logger.debug("ReadCommand: [ FD ]
Line_17 $$ ReadCommand cmd = new SinglePartitionReadCommand(false, MessagingService.VERSION_30, true, cfm, FBUtilities.nowInSeconds(), columnFilter, RowFilter.NONE, DataLimits.NONE, key, sliceFilter)-->Line_24 $$ ReadResponse response = ReadResponse.createDataResponse(partitionIterator, cmd.columnFilter())[ FD ]
Line_14 $$ ByteBuffer zero = ByteBufferUtil.bytes(0)-->Line_15 $$ Slices slices = Slices.with(cfm.comparator, Slice.make(Slice.Bound.inclusiveStartOf(zero), Slice.Bound.inclusiveEndOf(zero)))[ FD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_22 $$ logger.debug("ReadCommand: [ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_6 $$ QueryProcessor.executeInternal("DELETE v FROM ks.tbl WHERE k='k' AND i=0")[ CD ]
Line_2 $$ public void staticColumnsAreFiltered() throws IOException -->Line_25 $$ logger.debug("creating response: [ CD ]
