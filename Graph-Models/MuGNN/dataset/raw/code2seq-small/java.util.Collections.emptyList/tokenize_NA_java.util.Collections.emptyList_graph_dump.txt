Line_2 $$ private static List<Token<PyElementType>> tokenize(@NotNull String s) -->Line_21 $$ return tokens[ CD ]
Line_3 $$ final List<Token<PyElementType>> tokens = new ArrayList<Token<PyElementType>>()-->Line_14 $$ tokens.add(token)[ FD ]
Line_2 $$ private static List<Token<PyElementType>> tokenize(@NotNull String s) -->Line_5 $$ lexer.reset(s, 0, s.length(), lexer.yystate())[ FD ]
Line_8 $$ while ((type = lexer.advance()) != null) -->Line_14 $$ tokens.add(token)[ CD ]
Line_13 $$ final Token<PyElementType> token = new Token<PyElementType>(type, lexer.yytext(), range)-->Line_14 $$ tokens.add(token)[ FD ]
Line_4 $$ final PyTypeLexer lexer = new PyTypeLexer(new StringReader(s))-->Line_8 $$ while ((type = lexer.advance()) != null) [ FD ]
Line_8 $$ while ((type = lexer.advance()) != null) -->Line_12 $$ final TextRange range = TextRange.create(lexer.getTokenStart(), lexer.getTokenEnd())[ CD ]
Line_8 $$ while ((type = lexer.advance()) != null) -->Line_9 $$ if (type == PyTypeTokenTypes.SPACE || type == PyTypeTokenTypes.MARKUP) [ CD ]
Line_4 $$ final PyTypeLexer lexer = new PyTypeLexer(new StringReader(s))-->Line_12 $$ final TextRange range = TextRange.create(lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
Line_8 $$ while ((type = lexer.advance()) != null) -->Line_13 $$ final Token<PyElementType> token = new Token<PyElementType>(type, lexer.yytext(), range)[ CD ]
Line_4 $$ final PyTypeLexer lexer = new PyTypeLexer(new StringReader(s))-->Line_5 $$ lexer.reset(s, 0, s.length(), lexer.yystate())[ FD ]
Line_7 $$ PyElementType type-->Line_8 $$ while ((type = lexer.advance()) != null) [ FD ]
Line_2 $$ private static List<Token<PyElementType>> tokenize(@NotNull String s) -->Line_5 $$ lexer.reset(s, 0, s.length(), lexer.yystate())[ CD ]
Line_4 $$ final PyTypeLexer lexer = new PyTypeLexer(new StringReader(s))-->Line_13 $$ final Token<PyElementType> token = new Token<PyElementType>(type, lexer.yytext(), range)[ FD ]
Line_2 $$ private static List<Token<PyElementType>> tokenize(@NotNull String s) -->Line_3 $$ final List<Token<PyElementType>> tokens = new ArrayList<Token<PyElementType>>()[ CD ]
Line_2 $$ private static List<Token<PyElementType>> tokenize(@NotNull String s) -->Line_4 $$ final PyTypeLexer lexer = new PyTypeLexer(new StringReader(s))[ CD ]
