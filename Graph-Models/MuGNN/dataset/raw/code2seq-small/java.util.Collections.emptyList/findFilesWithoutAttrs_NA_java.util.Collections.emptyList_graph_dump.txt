Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_10 $$ if (!result.success()) [ CD ]
Line_4 $$ if (repository == null) -->Line_5 $$ LOG.warn("Repository is null for " + root)[ CD ]
Line_3 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)-->Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ FD ]
Line_21 $$ if (attrs == null || !attrs.contains(GitAttribute.TEXT) && !attrs.contains(GitAttribute.CRLF)) -->Line_22 $$ filesWithoutAttrs.add(file)[ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_11 $$ LOG.warn(String.format("Couldn't git check-attr. Attributes: %s, files: %s", interestingAttributes, files))[ FD ]
Line_17 $$ for (VirtualFile file : files) -->Line_22 $$ filesWithoutAttrs.add(file)[ FD ]
Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)-->Line_14 $$ GitCheckAttrParser parser = GitCheckAttrParser.parse(result.getOutput())[ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_3 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)[ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_14 $$ GitCheckAttrParser parser = GitCheckAttrParser.parse(result.getOutput())[ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_3 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)[ CD ]
Line_17 $$ for (VirtualFile file : files) -->Line_19 $$ String relativePath = FileUtil.getRelativePath(root.getPath(), file.getPath(), '/')[ FD ]
Line_8 $$ Collection<String> interestingAttributes = Arrays.asList(GitAttribute.TEXT.getName(), GitAttribute.CRLF.getName())-->Line_11 $$ LOG.warn(String.format("Couldn't git check-attr. Attributes: %s, files: %s", interestingAttributes, files))[ FD ]
Line_19 $$ String relativePath = FileUtil.getRelativePath(root.getPath(), file.getPath(), '/')-->Line_20 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)[ FD ]
Line_4 $$ if (repository == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_16 $$ Collection<VirtualFile> filesWithoutAttrs = new ArrayList<VirtualFile>()-->Line_22 $$ filesWithoutAttrs.add(file)[ FD ]
Line_15 $$ Map<String, Collection<GitAttribute>> attributes = parser.getAttributes()-->Line_20 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)[ FD ]
Line_3 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)-->Line_4 $$ if (repository == null) [ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_15 $$ Map<String, Collection<GitAttribute>> attributes = parser.getAttributes()[ CD ]
Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)-->Line_10 $$ if (!result.success()) [ FD ]
Line_14 $$ GitCheckAttrParser parser = GitCheckAttrParser.parse(result.getOutput())-->Line_15 $$ Map<String, Collection<GitAttribute>> attributes = parser.getAttributes()[ FD ]
Line_20 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)-->Line_21 $$ if (attrs == null || !attrs.contains(GitAttribute.TEXT) && !attrs.contains(GitAttribute.CRLF)) [ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_8 $$ Collection<String> interestingAttributes = Arrays.asList(GitAttribute.TEXT.getName(), GitAttribute.CRLF.getName())[ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_19 $$ String relativePath = FileUtil.getRelativePath(root.getPath(), file.getPath(), '/')[ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ FD ]
Line_10 $$ if (!result.success()) -->Line_11 $$ LOG.warn(String.format("Couldn't git check-attr. Attributes: %s, files: %s", interestingAttributes, files))[ CD ]
Line_10 $$ if (!result.success()) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_25 $$ return filesWithoutAttrs[ CD ]
Line_8 $$ Collection<String> interestingAttributes = Arrays.asList(GitAttribute.TEXT.getName(), GitAttribute.CRLF.getName())-->Line_9 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ FD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_4 $$ if (repository == null) [ CD ]
Line_2 $$ private Collection<VirtualFile> findFilesWithoutAttrs(@NotNull VirtualFile root, @NotNull Collection<VirtualFile> files) -->Line_16 $$ Collection<VirtualFile> filesWithoutAttrs = new ArrayList<VirtualFile>()[ CD ]
