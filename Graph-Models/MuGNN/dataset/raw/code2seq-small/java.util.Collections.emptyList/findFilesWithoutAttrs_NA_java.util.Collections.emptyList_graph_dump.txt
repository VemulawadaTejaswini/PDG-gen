Line_22 $$ if (attrs == null || !attrs.contains(GitAttribute.TEXT) && !attrs.contains(GitAttribute.CRLF)) -->Line_23 $$ filesWithoutAttrs.add(file)[ CD ]
Line_5 $$ if (repository == null) -->Line_7 $$ return Collections.emptyList()[ CD ]
Line_9 $$ Collection<String> interestingAttributes = Arrays.asList(GitAttribute.TEXT.getName(), GitAttribute.CRLF.getName())-->Line_10 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ FD ]
Line_17 $$ Collection<VirtualFile> filesWithoutAttrs = new ArrayList<VirtualFile>()-->Line_23 $$ filesWithoutAttrs.add(file)[ FD ]
Line_10 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)-->Line_15 $$ GitCheckAttrParser parser = GitCheckAttrParser.parse(result.getOutput())[ FD ]
Line_4 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)-->Line_5 $$ if (repository == null) [ FD ]
Line_11 $$ if (!result.success()) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_15 $$ GitCheckAttrParser parser = GitCheckAttrParser.parse(result.getOutput())-->Line_16 $$ Map<String, Collection<GitAttribute>> attributes = parser.getAttributes()[ FD ]
Line_16 $$ Map<String, Collection<GitAttribute>> attributes = parser.getAttributes()-->Line_21 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)[ FD ]
Line_5 $$ if (repository == null) -->Line_6 $$ LOG.warn("Repository is null for " + root)[ CD ]
Line_4 $$ GitRepository repository = myPlatformFacade.getRepositoryManager(myProject).getRepositoryForRoot(root)-->Line_10 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)[ FD ]
Line_10 $$ GitCommandResult result = myGit.checkAttr(repository, interestingAttributes, files)-->Line_11 $$ if (!result.success()) [ FD ]
Line_18 $$ for (VirtualFile file : files) -->Line_20 $$ String relativePath = FileUtil.getRelativePath(root.getPath(), file.getPath(), '/')[ FD ]
Line_20 $$ String relativePath = FileUtil.getRelativePath(root.getPath(), file.getPath(), '/')-->Line_21 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)[ FD ]
Line_21 $$ Collection<GitAttribute> attrs = attributes.get(relativePath)-->Line_22 $$ if (attrs == null || !attrs.contains(GitAttribute.TEXT) && !attrs.contains(GitAttribute.CRLF)) [ FD ]
Line_18 $$ for (VirtualFile file : files) -->Line_23 $$ filesWithoutAttrs.add(file)[ FD ]
Line_11 $$ if (!result.success()) -->Line_12 $$ LOG.warn(String.format("Couldn't git check-attr. Attributes: %s, files: %s", interestingAttributes, files))[ CD ]
Line_9 $$ Collection<String> interestingAttributes = Arrays.asList(GitAttribute.TEXT.getName(), GitAttribute.CRLF.getName())-->Line_12 $$ LOG.warn(String.format("Couldn't git check-attr. Attributes: %s, files: %s", interestingAttributes, files))[ FD ]
