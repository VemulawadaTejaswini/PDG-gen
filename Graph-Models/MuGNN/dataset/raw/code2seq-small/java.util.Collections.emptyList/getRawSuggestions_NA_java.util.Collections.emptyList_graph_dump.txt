Line_12 $$ Set<String> unique = new LinkedHashSet<String>(suggestions)-->Line_13 $$ return unique.size() < suggestions.size() ? new ArrayList<String>(unique) : suggestions[ FD ]
Line_4 $$ if (!spellChecker.isCorrect(word)) -->Line_6 $$ if (!suggestions.isEmpty()) [ CD ]
Line_5 $$ List<String> suggestions = spellChecker.getSuggestions(word, MAX_SUGGESTIONS_THRESHOLD, MAX_METRICS)-->Line_10 $$ Strings.upperCase(suggestions)[ FD ]
Line_6 $$ if (!suggestions.isEmpty()) -->Line_12 $$ Set<String> unique = new LinkedHashSet<String>(suggestions)[ CD ]
Line_5 $$ List<String> suggestions = spellChecker.getSuggestions(word, MAX_SUGGESTIONS_THRESHOLD, MAX_METRICS)-->Line_6 $$ if (!suggestions.isEmpty()) [ FD ]
Line_6 $$ if (!suggestions.isEmpty()) -->Line_13 $$ return unique.size() < suggestions.size() ? new ArrayList<String>(unique) : suggestions[ CD ]
Line_7 $$ if (Strings.isCapitalized(word)) -->Line_9 $$ if (Strings.isUpperCase(word)) [ CD ]
Line_5 $$ List<String> suggestions = spellChecker.getSuggestions(word, MAX_SUGGESTIONS_THRESHOLD, MAX_METRICS)-->Line_8 $$ Strings.capitalize(suggestions)[ FD ]
Line_9 $$ if (Strings.isUpperCase(word)) -->Line_10 $$ Strings.upperCase(suggestions)[ CD ]
Line_6 $$ if (!suggestions.isEmpty()) -->Line_7 $$ if (Strings.isCapitalized(word)) [ CD ]
Line_4 $$ if (!spellChecker.isCorrect(word)) -->Line_5 $$ List<String> suggestions = spellChecker.getSuggestions(word, MAX_SUGGESTIONS_THRESHOLD, MAX_METRICS)[ CD ]
Line_5 $$ List<String> suggestions = spellChecker.getSuggestions(word, MAX_SUGGESTIONS_THRESHOLD, MAX_METRICS)-->Line_13 $$ return unique.size() < suggestions.size() ? new ArrayList<String>(unique) : suggestions[ FD ]
Line_7 $$ if (Strings.isCapitalized(word)) -->Line_8 $$ Strings.capitalize(suggestions)[ CD ]
