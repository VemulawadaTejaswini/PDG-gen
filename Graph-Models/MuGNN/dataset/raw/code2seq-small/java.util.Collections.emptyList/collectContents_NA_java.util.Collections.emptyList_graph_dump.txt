Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_21 $$ if (file != null) [ FD ]
Line_3 $$ if (editor != null) -->Line_5 $$ if (content == null) [ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_21 $$ if (file != null) [ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_22 $$ return getContentFromFile(file, project, null)[ FD ]
Line_8 $$ if (file != null) -->Line_9 $$ return Collections.singletonList(new FileContent(file.getName(), content))[ CD ]
Line_15 $$ List<FileContent> contents = new ArrayList<FileContent>()-->Line_17 $$ contents.addAll(getContentFromFile(vf, project, null))[ FD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_24 $$ LOG.error("File, files and editor can't be null all at once!")[ CD ]
Line_5 $$ if (content == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_14 $$ if (files != null) -->Line_15 $$ List<FileContent> contents = new ArrayList<FileContent>()[ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_17 $$ contents.addAll(getContentFromFile(vf, project, null))[ FD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_14 $$ if (files != null) [ FD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_3 $$ if (editor != null) [ FD ]
Line_14 $$ if (files != null) -->Line_19 $$ return contents[ CD ]
Line_16 $$ for (VirtualFile vf : files) -->Line_17 $$ contents.addAll(getContentFromFile(vf, project, null))[ FD ]
Line_21 $$ if (file != null) -->Line_22 $$ return getContentFromFile(file, project, null)[ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_4 $$ String content = getContentFromEditor(editor)[ FD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_9 $$ return Collections.singletonList(new FileContent(file.getName(), content))[ FD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_8 $$ if (file != null) [ FD ]
Line_8 $$ if (file != null) -->Line_11 $$ return Collections.singletonList(new FileContent("", content))[ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_3 $$ if (editor != null) [ CD ]
Line_4 $$ String content = getContentFromEditor(editor)-->Line_5 $$ if (content == null) [ FD ]
Line_3 $$ if (editor != null) -->Line_8 $$ if (file != null) [ CD ]
Line_2 $$ static List<FileContent> collectContents(@NotNull Project project, @Nullable Editor editor, @Nullable VirtualFile file, @Nullable VirtualFile[] files) -->Line_14 $$ if (files != null) [ CD ]
Line_3 $$ if (editor != null) -->Line_4 $$ String content = getContentFromEditor(editor)[ CD ]
