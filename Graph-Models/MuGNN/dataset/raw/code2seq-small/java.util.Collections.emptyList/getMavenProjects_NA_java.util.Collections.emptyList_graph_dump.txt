Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(context)-->Line_13 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_23 $$ mavenProject = projectsManager.findProject(module)-->Line_27 $$ if (mavenProject == null)[ FD ]
Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_25 $$ mavenProject = projectsManager.findProject(file)[ FD ]
Line_21 $$ if (module == null || !projectsManager.isMavenizedModule(module))-->Line_22 $$ return Collections.emptyList()[ CD ]
Line_12 $$ Set<MavenProject> res = new LinkedHashSet<MavenProject>()-->Line_29 $$ res.add(mavenProject)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_10 $$ if (!projectsManager.isMavenizedProject())[ CD ]
Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_10 $$ if (!projectsManager.isMavenizedProject())[ FD ]
Line_14 $$ for (VirtualFile file : virtualFiles) -->Line_17 $$ VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_18 $$ if (!file.equals(contentRoot))-->Line_19 $$ return Collections.emptyList()[ CD ]
Line_16 $$ if (file.isDirectory()) -->Line_18 $$ if (!file.equals(contentRoot))[ CD ]
Line_16 $$ if (file.isDirectory()) -->Line_21 $$ if (module == null || !projectsManager.isMavenizedModule(module))[ CD ]
Line_16 $$ if (file.isDirectory()) -->Line_25 $$ mavenProject = projectsManager.findProject(file)[ CD ]
Line_17 $$ VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_18 $$ if (!file.equals(contentRoot))[ FD ]
Line_14 $$ for (VirtualFile file : virtualFiles) -->Line_16 $$ if (file.isDirectory()) [ FD ]
Line_14 $$ for (VirtualFile file : virtualFiles) -->Line_25 $$ mavenProject = projectsManager.findProject(file)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_13 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_6 $$ VirtualFile[] virtualFiles = CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(context)[ CD ]
Line_25 $$ mavenProject = projectsManager.findProject(file)-->Line_27 $$ if (mavenProject == null)[ FD ]
Line_16 $$ if (file.isDirectory()) -->Line_23 $$ mavenProject = projectsManager.findProject(module)[ CD ]
Line_10 $$ if (!projectsManager.isMavenizedProject())-->Line_11 $$ return Collections.emptyList()[ CD ]
Line_13 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_20 $$ Module module = fileIndex.getModuleForFile(file)[ FD ]
Line_15 $$ MavenProject mavenProject-->Line_23 $$ mavenProject = projectsManager.findProject(module)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)[ CD ]
Line_7 $$ if (virtualFiles == null || virtualFiles.length == 0)-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(context)-->Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)[ FD ]
Line_13 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_17 $$ VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_14 $$ for (VirtualFile file : virtualFiles) -->Line_20 $$ Module module = fileIndex.getModuleForFile(file)[ FD ]
Line_20 $$ Module module = fileIndex.getModuleForFile(file)-->Line_23 $$ mavenProject = projectsManager.findProject(module)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(context)[ CD ]
Line_23 $$ mavenProject = projectsManager.findProject(module)-->Line_29 $$ res.add(mavenProject)[ FD ]
Line_20 $$ Module module = fileIndex.getModuleForFile(file)-->Line_21 $$ if (module == null || !projectsManager.isMavenizedModule(module))[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_4 $$ if (project == null)[ CD ]
Line_15 $$ MavenProject mavenProject-->Line_25 $$ mavenProject = projectsManager.findProject(file)[ FD ]
Line_16 $$ if (file.isDirectory()) -->Line_20 $$ Module module = fileIndex.getModuleForFile(file)[ CD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_12 $$ Set<MavenProject> res = new LinkedHashSet<MavenProject>()[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(context)-->Line_4 $$ if (project == null)[ FD ]
Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_23 $$ mavenProject = projectsManager.findProject(module)[ FD ]
Line_25 $$ mavenProject = projectsManager.findProject(file)-->Line_29 $$ res.add(mavenProject)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_7 $$ if (virtualFiles == null || virtualFiles.length == 0)[ CD ]
Line_15 $$ MavenProject mavenProject-->Line_27 $$ if (mavenProject == null)[ FD ]
Line_27 $$ if (mavenProject == null)-->Line_28 $$ return Collections.emptyList()[ CD ]
Line_23 $$ mavenProject = projectsManager.findProject(module)-->Line_25 $$ mavenProject = projectsManager.findProject(file)[ FD ]
Line_15 $$ MavenProject mavenProject-->Line_29 $$ res.add(mavenProject)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(context)[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_31 $$ return new ArrayList<MavenProject>(res)[ CD ]
Line_14 $$ for (VirtualFile file : virtualFiles) -->Line_18 $$ if (!file.equals(contentRoot))[ FD ]
Line_2 $$ public static List<MavenProject> getMavenProjects(DataContext context) -->Line_6 $$ VirtualFile[] virtualFiles = CommonDataKeys.VIRTUAL_FILE_ARRAY.getData(context)[ FD ]
Line_16 $$ if (file.isDirectory()) -->Line_17 $$ VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ CD ]
Line_9 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_21 $$ if (module == null || !projectsManager.isMavenizedModule(module))[ FD ]
Line_4 $$ if (project == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
