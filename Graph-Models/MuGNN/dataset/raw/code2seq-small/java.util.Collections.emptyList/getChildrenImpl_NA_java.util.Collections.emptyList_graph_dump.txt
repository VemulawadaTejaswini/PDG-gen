Line_4 $$ if (value instanceof PyClass) -->Line_13 $$ return result[ CD ]
Line_4 $$ if (value instanceof PyClass) -->Line_5 $$ final PyClass pyClass = (PyClass) value[ CD ]
Line_4 $$ if (value instanceof PyClass) -->Line_6 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()[ CD ]
Line_6 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_11 $$ result.add(new PyElementNode(myProject, function, getSettings()))[ FD ]
Line_2 $$ protected Collection<AbstractTreeNode> getChildrenImpl() -->Line_3 $$ PyElement value = getValue()[ CD ]
Line_2 $$ protected Collection<AbstractTreeNode> getChildrenImpl() -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_3 $$ PyElement value = getValue()-->Line_4 $$ if (value instanceof PyClass) [ FD ]
Line_5 $$ final PyClass pyClass = (PyClass) value-->Line_10 $$ for (PyFunction function : pyClass.getMethods()) [ FD ]
Line_2 $$ protected Collection<AbstractTreeNode> getChildrenImpl() -->Line_4 $$ if (value instanceof PyClass) [ CD ]
Line_6 $$ List<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_8 $$ result.add(new PyElementNode(myProject, aClass, getSettings()))[ FD ]
Line_5 $$ final PyClass pyClass = (PyClass) value-->Line_7 $$ for (PyClass aClass : pyClass.getNestedClasses()) [ FD ]
