Line_10 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_26 $$ result.add(edge.myOrderEntry)[ FD ]
Line_27 $$ if (edge.myRecursive) -->Line_28 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)[ CD ]
Line_14 $$ for (Node node : nodes) -->Line_21 $$ if (seen.contains(node)) [ FD ]
Line_40 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)-->Line_41 $$ if (moduleContentRoot != null) [ FD ]
Line_14 $$ for (Node node : nodes) -->Line_24 $$ seen.add(node)[ FD ]
Line_7 $$ if (roots == null) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_18 $$ Set<Node> seen = new HashSet<Node>()-->Line_24 $$ seen.add(node)[ FD ]
Line_28 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)-->Line_29 $$ if (targetNode != null) [ FD ]
Line_10 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_39 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_11 $$ Stack<Node> stack = new Stack<Node>()-->Line_19 $$ while (!stack.isEmpty()) [ FD ]
Line_6 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_39 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_19 $$ while (!stack.isEmpty()) -->Line_24 $$ seen.add(node)[ CD ]
Line_11 $$ Stack<Node> stack = new Stack<Node>()-->Line_30 $$ stack.push(targetNode)[ FD ]
Line_6 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_40 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)[ FD ]
Line_11 $$ Stack<Node> stack = new Stack<Node>()-->Line_20 $$ Node node = stack.pop()[ FD ]
Line_12 $$ for (VirtualFile root : roots) -->Line_13 $$ Collection<Node> nodes = myRoots.get(root)[ FD ]
Line_6 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_7 $$ if (roots == null) [ FD ]
Line_14 $$ for (Node node : nodes) -->Line_15 $$ stack.push(node)[ FD ]
Line_29 $$ if (targetNode != null) -->Line_30 $$ stack.push(targetNode)[ CD ]
Line_41 $$ if (moduleContentRoot != null) -->Line_42 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ CD ]
Line_40 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)-->Line_42 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_19 $$ while (!stack.isEmpty()) -->Line_21 $$ if (seen.contains(node)) [ CD ]
Line_27 $$ if (edge.myRecursive) -->Line_29 $$ if (targetNode != null) [ CD ]
Line_28 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)-->Line_30 $$ stack.push(targetNode)[ FD ]
Line_25 $$ for (Edge edge : node.myEdges) -->Line_27 $$ if (edge.myRecursive) [ FD ]
Line_18 $$ Set<Node> seen = new HashSet<Node>()-->Line_21 $$ if (seen.contains(node)) [ FD ]
Line_6 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_42 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_10 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_42 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_10 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_44 $$ Collections.sort(result, BY_OWNER_MODULE)[ FD ]
Line_11 $$ Stack<Node> stack = new Stack<Node>()-->Line_15 $$ stack.push(node)[ FD ]
Line_19 $$ while (!stack.isEmpty()) -->Line_20 $$ Node node = stack.pop()[ CD ]
Line_20 $$ Node node = stack.pop()-->Line_24 $$ seen.add(node)[ FD ]
Line_20 $$ Node node = stack.pop()-->Line_21 $$ if (seen.contains(node)) [ FD ]
