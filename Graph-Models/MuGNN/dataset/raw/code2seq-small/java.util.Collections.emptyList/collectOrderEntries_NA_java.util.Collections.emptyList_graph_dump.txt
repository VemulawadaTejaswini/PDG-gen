Line_16 $$ while (!stack.isEmpty()) -->Line_18 $$ if (seen.contains(node)) [ CD ]
Line_24 $$ if (edge.myRecursive) -->Line_25 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)[ CD ]
Line_7 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_39 $$ Collections.sort(result, BY_OWNER_MODULE)[ FD ]
Line_8 $$ Stack<Node> stack = new Stack<Node>()-->Line_12 $$ stack.push(node)[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_15 $$ Set<Node> seen = new HashSet<Node>()[ CD ]
Line_8 $$ Stack<Node> stack = new Stack<Node>()-->Line_16 $$ while (!stack.isEmpty()) [ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_34 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ CD ]
Line_8 $$ Stack<Node> stack = new Stack<Node>()-->Line_17 $$ Node node = stack.pop()[ FD ]
Line_32 $$ VirtualFile libraryClassRoot = myRootInfo.findLibraryRootInfo(roots, false)-->Line_34 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_36 $$ if (moduleContentRoot != null) [ CD ]
Line_33 $$ VirtualFile librarySourceRoot = myRootInfo.findLibraryRootInfo(roots, true)-->Line_34 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_15 $$ Set<Node> seen = new HashSet<Node>()-->Line_21 $$ seen.add(node)[ FD ]
Line_7 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_34 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_39 $$ Collections.sort(result, BY_OWNER_MODULE)[ CD ]
Line_22 $$ for (Edge edge : node.myEdges) -->Line_24 $$ if (edge.myRecursive) [ FD ]
Line_24 $$ if (edge.myRecursive) -->Line_26 $$ if (targetNode != null) [ CD ]
Line_35 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)-->Line_37 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_4 $$ if (roots == null) [ CD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_40 $$ return result[ CD ]
Line_25 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)-->Line_27 $$ stack.push(targetNode)[ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_33 $$ VirtualFile librarySourceRoot = myRootInfo.findLibraryRootInfo(roots, true)[ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_37 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_25 $$ Node targetNode = myGraph.myNodes.get(edge.myKey)-->Line_26 $$ if (targetNode != null) [ FD ]
Line_4 $$ if (roots == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_26 $$ if (targetNode != null) -->Line_27 $$ stack.push(targetNode)[ CD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_33 $$ VirtualFile librarySourceRoot = myRootInfo.findLibraryRootInfo(roots, true)[ CD ]
Line_7 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_37 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_7 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()[ CD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_32 $$ VirtualFile libraryClassRoot = myRootInfo.findLibraryRootInfo(roots, false)[ CD ]
Line_16 $$ while (!stack.isEmpty()) -->Line_21 $$ seen.add(node)[ CD ]
Line_35 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)-->Line_36 $$ if (moduleContentRoot != null) [ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_16 $$ while (!stack.isEmpty()) [ CD ]
Line_16 $$ while (!stack.isEmpty()) -->Line_17 $$ Node node = stack.pop()[ CD ]
Line_11 $$ for (Node node : nodes) -->Line_21 $$ seen.add(node)[ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_4 $$ if (roots == null) [ FD ]
Line_7 $$ List<OrderEntry> result = new ArrayList<OrderEntry>()-->Line_23 $$ result.add(edge.myOrderEntry)[ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_35 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)[ FD ]
Line_36 $$ if (moduleContentRoot != null) -->Line_37 $$ ContainerUtil.addIfNotNull(result, myRootInfo.getModuleSourceEntry(roots, moduleContentRoot, myLibClassRootEntries))[ CD ]
Line_9 $$ for (VirtualFile root : roots) -->Line_10 $$ Collection<Node> nodes = myRoots.get(root)[ FD ]
Line_11 $$ for (Node node : nodes) -->Line_18 $$ if (seen.contains(node)) [ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_34 $$ result.addAll(myRootInfo.getLibraryOrderEntries(roots, libraryClassRoot, librarySourceRoot, myLibClassRootEntries, myLibSourceRootEntries))[ FD ]
Line_11 $$ for (Node node : nodes) -->Line_12 $$ stack.push(node)[ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_35 $$ VirtualFile moduleContentRoot = myRootInfo.findModuleRootInfo(roots)[ CD ]
Line_17 $$ Node node = stack.pop()-->Line_21 $$ seen.add(node)[ FD ]
Line_15 $$ Set<Node> seen = new HashSet<Node>()-->Line_18 $$ if (seen.contains(node)) [ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)[ CD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)[ FD ]
Line_8 $$ Stack<Node> stack = new Stack<Node>()-->Line_27 $$ stack.push(targetNode)[ FD ]
Line_3 $$ List<VirtualFile> roots = getHierarchy(file, myAllRoots, myRootInfo)-->Line_32 $$ VirtualFile libraryClassRoot = myRootInfo.findLibraryRootInfo(roots, false)[ FD ]
Line_17 $$ Node node = stack.pop()-->Line_18 $$ if (seen.contains(node)) [ FD ]
Line_2 $$ private List<OrderEntry> collectOrderEntries(@NotNull VirtualFile file) -->Line_8 $$ Stack<Node> stack = new Stack<Node>()[ CD ]
