Line_15 $$ List<ZKAuthInfo> zkAuths-->Line_17 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ FD ]
Line_17 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)-->Line_19 $$ zkAuths = Collections.emptyList()[ FD ]
Line_14 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)-->Line_17 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_7 $$ zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf)[ CD ]
Line_8 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)-->Line_9 $$ if (zkAcls.isEmpty()) [ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_23 $$ Preconditions.checkArgument(zkTimeout > 0, "Invalid ZK session timeout %s", zkTimeout)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_8 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)[ CD ]
Line_15 $$ List<ZKAuthInfo> zkAuths-->Line_19 $$ zkAuths = Collections.emptyList()[ FD ]
Line_4 $$ int zkTimeout = conf.getInt(ZK_SESSION_TIMEOUT_KEY, ZK_SESSION_TIMEOUT_DEFAULT)-->Line_23 $$ Preconditions.checkArgument(zkTimeout > 0, "Invalid ZK session timeout %s", zkTimeout)[ FD ]
Line_9 $$ if (zkAcls.isEmpty()) -->Line_10 $$ zkAcls = Ids.CREATOR_ALL_ACL[ CD ]
Line_14 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)-->Line_16 $$ if (zkAuthConf != null) [ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_3 $$ zkQuorum = conf.get(ZK_QUORUM_KEY)[ CD ]
Line_7 $$ zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf)-->Line_8 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_24 $$ int maxRetryNum = conf.getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY, CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_14 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_15 $$ List<ZKAuthInfo> zkAuths[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_16 $$ if (zkAuthConf != null) [ CD ]
Line_8 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)-->Line_10 $$ zkAcls = Ids.CREATOR_ALL_ACL[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_9 $$ if (zkAcls.isEmpty()) [ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_4 $$ int zkTimeout = conf.getInt(ZK_SESSION_TIMEOUT_KEY, ZK_SESSION_TIMEOUT_DEFAULT)[ CD ]
Line_16 $$ if (zkAuthConf != null) -->Line_19 $$ zkAuths = Collections.emptyList()[ CD ]
Line_16 $$ if (zkAuthConf != null) -->Line_17 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ CD ]
