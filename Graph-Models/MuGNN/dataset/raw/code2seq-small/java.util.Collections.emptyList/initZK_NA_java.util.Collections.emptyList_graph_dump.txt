Line_11 $$ String zkAuthConf = conf.get(ZK_AUTH_KEY)-->Line_14 $$ if (zkAuthConf != null) [ FD ]
Line_14 $$ if (zkAuthConf != null) -->Line_15 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ CD ]
Line_11 $$ String zkAuthConf = conf.get(ZK_AUTH_KEY)-->Line_12 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_14 $$ if (zkAuthConf != null) [ CD ]
Line_15 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)-->Line_17 $$ zkAuths = Collections.emptyList()[ FD ]
Line_12 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)-->Line_14 $$ if (zkAuthConf != null) [ FD ]
Line_7 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)-->Line_9 $$ zkAcls = Ids.CREATOR_ALL_ACL[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_11 $$ String zkAuthConf = conf.get(ZK_AUTH_KEY)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_20 $$ Preconditions.checkArgument(zkTimeout > 0, "Invalid ZK session timeout %s", zkTimeout)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_6 $$ zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_7 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_8 $$ if (zkAcls.isEmpty()) [ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_19 $$ Preconditions.checkArgument(zkQuorum != null, "Missing required configuration '%s' for ZooKeeper quorum", ZK_QUORUM_KEY)[ CD ]
Line_13 $$ List<ZKAuthInfo> zkAuths-->Line_15 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_3 $$ zkQuorum = conf.get(ZK_QUORUM_KEY)[ CD ]
Line_5 $$ String zkAclConf = conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT)-->Line_6 $$ zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf)[ FD ]
Line_8 $$ if (zkAcls.isEmpty()) -->Line_9 $$ zkAcls = Ids.CREATOR_ALL_ACL[ CD ]
Line_14 $$ if (zkAuthConf != null) -->Line_17 $$ zkAuths = Collections.emptyList()[ CD ]
Line_6 $$ zkAclConf = ZKUtil.resolveConfIndirection(zkAclConf)-->Line_7 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)[ FD ]
Line_11 $$ String zkAuthConf = conf.get(ZK_AUTH_KEY)-->Line_15 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ FD ]
Line_4 $$ int zkTimeout = conf.getInt(ZK_SESSION_TIMEOUT_KEY, ZK_SESSION_TIMEOUT_DEFAULT)-->Line_20 $$ Preconditions.checkArgument(zkTimeout > 0, "Invalid ZK session timeout %s", zkTimeout)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_12 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)[ CD ]
Line_5 $$ String zkAclConf = conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT)-->Line_7 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)[ FD ]
Line_7 $$ List<ACL> zkAcls = ZKUtil.parseACLs(zkAclConf)-->Line_8 $$ if (zkAcls.isEmpty()) [ FD ]
Line_12 $$ zkAuthConf = ZKUtil.resolveConfIndirection(zkAuthConf)-->Line_15 $$ zkAuths = ZKUtil.parseAuth(zkAuthConf)[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_4 $$ int zkTimeout = conf.getInt(ZK_SESSION_TIMEOUT_KEY, ZK_SESSION_TIMEOUT_DEFAULT)[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_13 $$ List<ZKAuthInfo> zkAuths[ CD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_21 $$ int maxRetryNum = conf.getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY, CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT)[ CD ]
Line_13 $$ List<ZKAuthInfo> zkAuths-->Line_17 $$ zkAuths = Collections.emptyList()[ FD ]
Line_2 $$ private void initZK() throws HadoopIllegalArgumentException, IOException, KeeperException -->Line_5 $$ String zkAclConf = conf.get(ZK_ACL_KEY, ZK_ACL_DEFAULT)[ CD ]
