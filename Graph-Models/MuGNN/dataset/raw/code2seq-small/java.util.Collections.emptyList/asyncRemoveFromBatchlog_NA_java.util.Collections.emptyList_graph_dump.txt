Line_4 $$ Mutation mutation = getRemoveMutation(uuid)-->Line_7 $$ MessagingService.instance().sendRR(mutation.createMessage(MessagingService.Verb.MUTATION), target, handler, false)[ FD ]
Line_2 $$ public static void asyncRemoveFromBatchlog(Collection<InetAddress> endpoints, UUID uuid) -->Line_4 $$ Mutation mutation = getRemoveMutation(uuid)[ CD ]
Line_2 $$ public static void asyncRemoveFromBatchlog(Collection<InetAddress> endpoints, UUID uuid) -->Line_3 $$ AbstractWriteResponseHandler<IMutation> handler = new WriteResponseHandler(endpoints, Collections.<InetAddress>emptyList(), ConsistencyLevel.ANY, Keyspace.open(SystemKeyspace.NAME), null, WriteType.SIMPLE)[ CD ]
Line_2 $$ public static void asyncRemoveFromBatchlog(Collection<InetAddress> endpoints, UUID uuid) -->Line_6 $$ logger.trace("Sending legacy batchlog remove request [ FD ]
Line_3 $$ AbstractWriteResponseHandler<IMutation> handler = new WriteResponseHandler(endpoints, Collections.<InetAddress>emptyList(), ConsistencyLevel.ANY, Keyspace.open(SystemKeyspace.NAME), null, WriteType.SIMPLE)-->Line_7 $$ MessagingService.instance().sendRR(mutation.createMessage(MessagingService.Verb.MUTATION), target, handler, false)[ FD ]
Line_2 $$ public static void asyncRemoveFromBatchlog(Collection<InetAddress> endpoints, UUID uuid) -->Line_4 $$ Mutation mutation = getRemoveMutation(uuid)[ FD ]
Line_5 $$ for (InetAddress target : endpoints) -->Line_7 $$ MessagingService.instance().sendRR(mutation.createMessage(MessagingService.Verb.MUTATION), target, handler, false)[ FD ]
Line_5 $$ for (InetAddress target : endpoints) -->Line_6 $$ logger.trace("Sending legacy batchlog remove request [ FD ]
