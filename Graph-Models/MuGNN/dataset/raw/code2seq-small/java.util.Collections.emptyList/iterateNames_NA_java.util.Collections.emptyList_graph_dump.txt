Line_6 $$ ChainIterable<PyElement> chain = new ChainIterable<PyElement>()-->Line_11 $$ chain.add(filterStarImportableNames(sourceFile.iterateNames(), sourceFile))[ FD ]
Line_4 $$ PyFromImportStatement fromImportStatement = (PyFromImportStatement) getParent()-->Line_5 $$ final List<PsiElement> importedFiles = fromImportStatement.resolveImportSourceCandidates()[ FD ]
Line_7 $$ for (PsiElement importedFile : new HashSet<PsiElement>(importedFiles)) -->Line_8 $$ final PsiElement source = PyUtil.turnDirIntoInit(importedFile)[ FD ]
Line_3 $$ if (getParent() instanceof PyFromImportStatement) -->Line_14 $$ return chain[ CD ]
Line_2 $$ public Iterable<PyElement> iterateNames() -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_3 $$ if (getParent() instanceof PyFromImportStatement) -->Line_4 $$ PyFromImportStatement fromImportStatement = (PyFromImportStatement) getParent()[ CD ]
Line_3 $$ if (getParent() instanceof PyFromImportStatement) -->Line_5 $$ final List<PsiElement> importedFiles = fromImportStatement.resolveImportSourceCandidates()[ CD ]
Line_9 $$ if (source instanceof PyFile) -->Line_10 $$ final PyFile sourceFile = (PyFile) source[ CD ]
Line_9 $$ if (source instanceof PyFile) -->Line_11 $$ chain.add(filterStarImportableNames(sourceFile.iterateNames(), sourceFile))[ CD ]
Line_3 $$ if (getParent() instanceof PyFromImportStatement) -->Line_6 $$ ChainIterable<PyElement> chain = new ChainIterable<PyElement>()[ CD ]
Line_10 $$ final PyFile sourceFile = (PyFile) source-->Line_11 $$ chain.add(filterStarImportableNames(sourceFile.iterateNames(), sourceFile))[ FD ]
Line_2 $$ public Iterable<PyElement> iterateNames() -->Line_3 $$ if (getParent() instanceof PyFromImportStatement) [ CD ]
Line_8 $$ final PsiElement source = PyUtil.turnDirIntoInit(importedFile)-->Line_9 $$ if (source instanceof PyFile) [ FD ]
