Line_6 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_16 $$ for (ModuleDescriptor module : filesByModule.keySet()) [ FD ]
Line_21 $$ for (Pair<C, Collection<VirtualFile>> pair : pairs) -->Line_22 $$ result.add(new FacetBasedDetectedFrameworkDescriptionInWizard<F, C>(module, detector, pair.getFirst(), new HashSet<VirtualFile>(pair.getSecond())))[ FD ]
Line_7 $$ for (VirtualFile file : files) -->Line_8 $$ final File ioFile = VfsUtil.virtualToIoFile(file)[ FD ]
Line_15 $$ final FacetType<F, C> facetType = detector.getFacetType()-->Line_17 $$ if (!facetType.isSuitableModuleType(module.getModuleType())) [ FD ]
Line_6 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_11 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_9 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)-->Line_11 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_16 $$ for (ModuleDescriptor module : filesByModule.keySet()) -->Line_17 $$ if (!facetType.isSuitableModuleType(module.getModuleType())) [ FD ]
Line_6 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_20 $$ final List<Pair<C, Collection<VirtualFile>>> pairs = detector.createConfigurations(filesByModule.get(module), Collections.<C>emptyList())[ FD ]
Line_9 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)-->Line_10 $$ if (descriptor != null) [ FD ]
Line_16 $$ for (ModuleDescriptor module : filesByModule.keySet()) -->Line_20 $$ final List<Pair<C, Collection<VirtualFile>>> pairs = detector.createConfigurations(filesByModule.get(module), Collections.<C>emptyList())[ FD ]
Line_14 $$ final List<DetectedFrameworkDescription> result = new ArrayList<DetectedFrameworkDescription>()-->Line_22 $$ result.add(new FacetBasedDetectedFrameworkDescriptionInWizard<F, C>(module, detector, pair.getFirst(), new HashSet<VirtualFile>(pair.getSecond())))[ FD ]
Line_8 $$ final File ioFile = VfsUtil.virtualToIoFile(file)-->Line_9 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)[ FD ]
Line_7 $$ for (VirtualFile file : files) -->Line_11 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_5 $$ final List<ModuleDescriptor> descriptors = getModuleDescriptors()-->Line_9 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)[ FD ]
Line_10 $$ if (descriptor != null) -->Line_11 $$ filesByModule.putValue(descriptor, file)[ CD ]
