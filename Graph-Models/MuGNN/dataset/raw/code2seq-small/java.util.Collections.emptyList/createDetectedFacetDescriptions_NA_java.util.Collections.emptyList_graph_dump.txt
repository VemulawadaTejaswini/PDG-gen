Line_19 $$ for (Pair<C, Collection<VirtualFile>> pair : pairs) -->Line_20 $$ result.add(new FacetBasedDetectedFrameworkDescriptionInWizard<F, C>(module, detector, pair.getFirst(), new HashSet<VirtualFile>(pair.getSecond())))[ FD ]
Line_6 $$ final File ioFile = VfsUtil.virtualToIoFile(file)-->Line_7 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)[ FD ]
Line_14 $$ for (ModuleDescriptor module : filesByModule.keySet()) -->Line_18 $$ final List<Pair<C, Collection<VirtualFile>>> pairs = detector.createConfigurations(filesByModule.get(module), Collections.<C>emptyList())[ FD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_13 $$ final FacetType<F, C> facetType = detector.getFacetType()[ FD ]
Line_12 $$ final List<DetectedFrameworkDescription> result = new ArrayList<DetectedFrameworkDescription>()-->Line_20 $$ result.add(new FacetBasedDetectedFrameworkDescriptionInWizard<F, C>(module, detector, pair.getFirst(), new HashSet<VirtualFile>(pair.getSecond())))[ FD ]
Line_4 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_9 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_7 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)-->Line_8 $$ if (descriptor != null) [ FD ]
Line_5 $$ for (VirtualFile file : files) -->Line_6 $$ final File ioFile = VfsUtil.virtualToIoFile(file)[ FD ]
Line_14 $$ for (ModuleDescriptor module : filesByModule.keySet()) -->Line_15 $$ if (!facetType.isSuitableModuleType(module.getModuleType())) [ FD ]
Line_5 $$ for (VirtualFile file : files) -->Line_9 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_3 $$ final List<ModuleDescriptor> descriptors = getModuleDescriptors()[ CD ]
Line_13 $$ final FacetType<F, C> facetType = detector.getFacetType()-->Line_15 $$ if (!facetType.isSuitableModuleType(module.getModuleType())) [ FD ]
Line_8 $$ if (descriptor != null) -->Line_9 $$ filesByModule.putValue(descriptor, file)[ CD ]
Line_7 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)-->Line_9 $$ filesByModule.putValue(descriptor, file)[ FD ]
Line_3 $$ final List<ModuleDescriptor> descriptors = getModuleDescriptors()-->Line_7 $$ ModuleDescriptor descriptor = findDescriptorByFile(descriptors, ioFile)[ FD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_4 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()[ CD ]
Line_4 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_14 $$ for (ModuleDescriptor module : filesByModule.keySet()) [ FD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_13 $$ final FacetType<F, C> facetType = detector.getFacetType()[ CD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_18 $$ final List<Pair<C, Collection<VirtualFile>>> pairs = detector.createConfigurations(filesByModule.get(module), Collections.<C>emptyList())[ FD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_12 $$ final List<DetectedFrameworkDescription> result = new ArrayList<DetectedFrameworkDescription>()[ CD ]
Line_2 $$ public <F extends Facet, C extends FacetConfiguration> List<? extends DetectedFrameworkDescription> createDetectedFacetDescriptions(@NotNull FacetBasedFrameworkDetector<F, C> detector, @NotNull Collection<VirtualFile> files) -->Line_23 $$ return result[ CD ]
Line_4 $$ MultiMap<ModuleDescriptor, VirtualFile> filesByModule = new MultiMap<ModuleDescriptor, VirtualFile>()-->Line_18 $$ final List<Pair<C, Collection<VirtualFile>>> pairs = detector.createConfigurations(filesByModule.get(module), Collections.<C>emptyList())[ FD ]
