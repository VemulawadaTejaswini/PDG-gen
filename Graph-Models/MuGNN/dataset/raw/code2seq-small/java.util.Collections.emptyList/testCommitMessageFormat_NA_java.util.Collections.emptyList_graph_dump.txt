Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_3 $$ String issueJson = "[ CD ]
Line_11 $$ String changeListComment = TaskUtil.getChangeListComment(localTask)-->Line_16 $$ assertEquals(" 2 1 Sample title", changeListComment)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_15 $$ changeListComment = TaskUtil.getChangeListComment(localTask)[ CD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_4 $$ String projectJson = "[ CD ]
Line_15 $$ changeListComment = TaskUtil.getChangeListComment(localTask)-->Line_16 $$ assertEquals(" 2 1 Sample title", changeListComment)[ FD ]
Line_4 $$ String projectJson = "-->Line_6 $$ GitlabProject project = GSON.fromJson(projectJson, GitlabProject.class)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_8 $$ myRepository.setShouldFormatCommitMessage(true)[ CD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_13 $$ myRepository.setProjects(Collections.<GitlabProject>emptyList())[ CD ]
Line_3 $$ String issueJson = "-->Line_5 $$ GitlabIssue issue = GSON.fromJson(issueJson, GitlabIssue.class)[ FD ]
Line_14 $$ localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))-->Line_15 $$ changeListComment = TaskUtil.getChangeListComment(localTask)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_5 $$ GitlabIssue issue = GSON.fromJson(issueJson, GitlabIssue.class)[ CD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_16 $$ assertEquals(" 2 1 Sample title", changeListComment)[ CD ]
Line_6 $$ GitlabProject project = GSON.fromJson(projectJson, GitlabProject.class)-->Line_7 $$ myRepository.setProjects(Collections.singletonList(project))[ FD ]
Line_11 $$ String changeListComment = TaskUtil.getChangeListComment(localTask)-->Line_12 $$ assertEquals("project-1 2 1 Sample title", changeListComment)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_12 $$ assertEquals("project-1 2 1 Sample title", changeListComment)[ CD ]
Line_11 $$ String changeListComment = TaskUtil.getChangeListComment(localTask)-->Line_15 $$ changeListComment = TaskUtil.getChangeListComment(localTask)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_11 $$ String changeListComment = TaskUtil.getChangeListComment(localTask)[ CD ]
Line_10 $$ LocalTaskImpl localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))-->Line_14 $$ localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_7 $$ myRepository.setProjects(Collections.singletonList(project))[ CD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_9 $$ myRepository.setCommitMessageFormat("[ CD ]
Line_10 $$ LocalTaskImpl localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))-->Line_11 $$ String changeListComment = TaskUtil.getChangeListComment(localTask)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_6 $$ GitlabProject project = GSON.fromJson(projectJson, GitlabProject.class)[ CD ]
Line_10 $$ LocalTaskImpl localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))-->Line_15 $$ changeListComment = TaskUtil.getChangeListComment(localTask)[ FD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_10 $$ LocalTaskImpl localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))[ CD ]
Line_2 $$ public void testCommitMessageFormat() throws Exception -->Line_14 $$ localTask = new LocalTaskImpl(new GitlabTask(myRepository, issue))[ CD ]
