Line_7 $$ for (VirtualFile each : files) -->Line_10 $$ if (!(each.getFileSystem() instanceof LocalFileSystem))[ FD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_34 $$ return Collections.emptyList()[ CD ]
Line_6 $$ Map<VirtualFile, AccessStatus> statuses = getRegisteredFiles(myProject)-->Line_13 $$ statuses.remove(each)[ FD ]
Line_21 $$ UnlockOption unlockOption = askToUnlock(deniedFiles)-->Line_22 $$ if (unlockOption == null)[ FD ]
Line_19 $$ if (deniedFiles.isEmpty())-->Line_20 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_21 $$ UnlockOption unlockOption = askToUnlock(deniedFiles)[ CD ]
Line_7 $$ for (VirtualFile each : files) -->Line_12 $$ if (isProjectFile(each, myProject)) [ FD ]
Line_5 $$ List<VirtualFile> deniedFiles = new SmartList<VirtualFile>()-->Line_17 $$ deniedFiles.add(each)[ FD ]
Line_7 $$ for (VirtualFile each : files) -->Line_16 $$ statuses.put(each, AccessStatus.REQUESTED)[ FD ]
Line_6 $$ Map<VirtualFile, AccessStatus> statuses = getRegisteredFiles(myProject)-->Line_27 $$ statuses.put(eachAllowed, AccessStatus.ALLOWED)[ FD ]
Line_12 $$ if (isProjectFile(each, myProject)) -->Line_13 $$ statuses.remove(each)[ CD ]
Line_7 $$ for (VirtualFile each : files) -->Line_17 $$ deniedFiles.add(each)[ FD ]
Line_26 $$ for (VirtualFile eachAllowed : deniedFiles) -->Line_27 $$ statuses.put(eachAllowed, AccessStatus.ALLOWED)[ FD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_22 $$ if (unlockOption == null)[ CD ]
Line_5 $$ List<VirtualFile> deniedFiles = new SmartList<VirtualFile>()-->Line_19 $$ if (deniedFiles.isEmpty())[ FD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_19 $$ if (deniedFiles.isEmpty())[ CD ]
Line_3 $$ if (allAccessAllowed(myProject))-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_7 $$ for (VirtualFile each : files) -->Line_13 $$ statuses.remove(each)[ FD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_5 $$ List<VirtualFile> deniedFiles = new SmartList<VirtualFile>()[ CD ]
Line_6 $$ Map<VirtualFile, AccessStatus> statuses = getRegisteredFiles(myProject)-->Line_8 $$ if (statuses.get(each) == AccessStatus.ALLOWED)[ FD ]
Line_22 $$ if (unlockOption == null)-->Line_23 $$ return deniedFiles[ CD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_3 $$ if (allAccessAllowed(myProject))[ CD ]
Line_2 $$ public Collection<VirtualFile> requestWriting(VirtualFile... files) -->Line_6 $$ Map<VirtualFile, AccessStatus> statuses = getRegisteredFiles(myProject)[ CD ]
Line_6 $$ Map<VirtualFile, AccessStatus> statuses = getRegisteredFiles(myProject)-->Line_16 $$ statuses.put(each, AccessStatus.REQUESTED)[ FD ]
Line_7 $$ for (VirtualFile each : files) -->Line_8 $$ if (statuses.get(each) == AccessStatus.ALLOWED)[ FD ]
Line_5 $$ List<VirtualFile> deniedFiles = new SmartList<VirtualFile>()-->Line_22 $$ if (unlockOption == null)[ FD ]
Line_5 $$ List<VirtualFile> deniedFiles = new SmartList<VirtualFile>()-->Line_21 $$ UnlockOption unlockOption = askToUnlock(deniedFiles)[ FD ]
