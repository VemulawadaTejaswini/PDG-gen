Line_11 $$ for (PsiClass aClass : possibleClasses) -->Line_12 $$ VirtualFile classFile = aClass.getContainingFile().getVirtualFile()[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_4 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ CD ]
Line_13 $$ for (OrderEntry orderEntry : fileIndex.getOrderEntriesForFile(classFile)) -->Line_14 $$ relevantModules.add(orderEntry.getOwnerModule())[ FD ]
Line_6 $$ if (possibleClasses.length == 0) -->Line_7 $$ return Collections.emptyList()[ CD ]
Line_9 $$ Set<Module> relevantModules = ContainerUtil.newLinkedHashSet()-->Line_14 $$ relevantModules.add(orderEntry.getOwnerModule())[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_3 $$ GlobalSearchScope allScope = GlobalSearchScope.allScope(project)[ CD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_10 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_3 $$ GlobalSearchScope allScope = GlobalSearchScope.allScope(project)-->Line_5 $$ PsiClass[] possibleClasses = facade.findClasses(qualifiedName, allScope)[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_6 $$ if (possibleClasses.length == 0) [ CD ]
Line_4 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_5 $$ PsiClass[] possibleClasses = facade.findClasses(qualifiedName, allScope)[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_9 $$ Set<Module> relevantModules = ContainerUtil.newLinkedHashSet()[ CD ]
Line_12 $$ VirtualFile classFile = aClass.getContainingFile().getVirtualFile()-->Line_13 $$ for (OrderEntry orderEntry : fileIndex.getOrderEntriesForFile(classFile)) [ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_17 $$ return relevantModules[ CD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_4 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_5 $$ PsiClass[] possibleClasses = facade.findClasses(qualifiedName, allScope)[ FD ]
Line_10 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_13 $$ for (OrderEntry orderEntry : fileIndex.getOrderEntriesForFile(classFile)) [ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_3 $$ GlobalSearchScope allScope = GlobalSearchScope.allScope(project)[ FD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_5 $$ PsiClass[] possibleClasses = facade.findClasses(qualifiedName, allScope)[ CD ]
Line_2 $$ public static Collection<Module> findModulesWithClass(@NotNull Project project, @NonNls @NotNull String qualifiedName) -->Line_10 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
