Line_12 $$ for (JavaResolveResult resolveResult : methods) -->Line_13 $$ PsiElement element = resolveResult.getElement()[ FD ]
Line_6 $$ PsiCall call = PsiTreeUtil.getParentOfType(pos, PsiCall.class)-->Line_11 $$ JavaResolveResult[] methods = call instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) call).getMethodExpression().multiResolve(true) : call instanceof PsiNewExpression && type instanceof PsiClassType ? resolveHelper.multiResolveConstructor((PsiClassType) type, call.getArgumentList(), call) : JavaResolveResult.EMPTY_ARRAY[ FD ]
Line_34 $$ for (PsiExpression operand : exp.getOperands()) -->Line_37 $$ result.add(Pair.create(resolved, operand.getType()))[ FD ]
Line_35 $$ PsiModifierListOwner resolved = resolveExpression(operand)-->Line_36 $$ if (resolved != null) [ FD ]
Line_6 $$ PsiCall call = PsiTreeUtil.getParentOfType(pos, PsiCall.class)-->Line_17 $$ if (!resolveHelper.isAccessible(method, call, null))[ FD ]
Line_63 $$ if (pair.getValue() instanceof PsiExpression) -->Line_66 $$ if (method != null) [ CD ]
Line_7 $$ if (!(call instanceof PsiExpression))-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) -->Line_44 $$ PsiElement resolved = resolveExpression(l)[ CD ]
Line_31 $$ if (IN_BINARY_COMPARISON.accepts(pos)) -->Line_32 $$ PsiPolyadicExpression exp = PsiTreeUtil.getParentOfType(pos, PsiPolyadicExpression.class)[ CD ]
Line_13 $$ PsiElement element = resolveResult.getElement()-->Line_52 $$ if (element instanceof PsiMethod) [ FD ]
Line_22 $$ int i = ArrayUtil.indexOf(list.getExpressions(), argument)-->Line_26 $$ if (i >= params.length)[ FD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_31 $$ if (IN_BINARY_COMPARISON.accepts(pos)) [ CD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_11 $$ JavaResolveResult[] methods = call instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) call).getMethodExpression().multiResolve(true) : call instanceof PsiNewExpression && type instanceof PsiClassType ? resolveHelper.multiResolveConstructor((PsiClassType) type, call.getArgumentList(), call) : JavaResolveResult.EMPTY_ARRAY[ CD ]
Line_48 $$ if (IN_RETURN.accepts(pos)) -->Line_49 $$ PsiReturnStatement statement = PsiTreeUtil.getParentOfType(pos, PsiReturnStatement.class)[ CD ]
Line_66 $$ if (method != null) -->Line_67 $$ result.add(new Pair<PsiModifierListOwner, PsiType>(method, method.getReturnType()))[ CD ]
Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) -->Line_42 $$ PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(pos, PsiAssignmentExpression.class)[ CD ]
Line_48 $$ if (IN_RETURN.accepts(pos)) -->Line_61 $$ if (IN_ANNOTATION_INITIALIZER.accepts(pos)) [ CD ]
Line_55 $$ final PsiType interfaceType = ((PsiLambdaExpression) element).getFunctionalInterfaceType()-->Line_58 $$ result.add(Pair.create((PsiModifierListOwner) interfaceMethod, LambdaUtil.getFunctionalInterfaceReturnType(interfaceType)))[ FD ]
Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) -->Line_45 $$ if (resolved != null && PsiTreeUtil.isAncestor(assignment.getRExpression(), pos, false)) [ CD ]
Line_54 $$ if (element instanceof PsiLambdaExpression) -->Line_55 $$ final PsiType interfaceType = ((PsiLambdaExpression) element).getFunctionalInterfaceType()[ CD ]
Line_22 $$ int i = ArrayUtil.indexOf(list.getExpressions(), argument)-->Line_23 $$ if (i == -1)[ FD ]
Line_62 $$ PsiNameValuePair pair = (PsiNameValuePair) pos.getParent().getParent()-->Line_64 $$ PsiReference ref = pair.getReference()[ FD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_37 $$ result.add(Pair.create(resolved, operand.getType()))[ FD ]
Line_61 $$ if (IN_ANNOTATION_INITIALIZER.accepts(pos)) -->Line_62 $$ PsiNameValuePair pair = (PsiNameValuePair) pos.getParent().getParent()[ CD ]
Line_20 $$ argument = argument.getContext()-->Line_21 $$ PsiExpressionList list = (PsiExpressionList) argument.getContext()[ FD ]
Line_45 $$ if (resolved != null && PsiTreeUtil.isAncestor(assignment.getRExpression(), pos, false)) -->Line_46 $$ result.add(Pair.create((PsiModifierListOwner) resolved, l.getType()))[ CD ]
Line_54 $$ if (element instanceof PsiLambdaExpression) -->Line_56 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(interfaceType)[ CD ]
Line_61 $$ if (IN_ANNOTATION_INITIALIZER.accepts(pos)) -->Line_63 $$ if (pair.getValue() instanceof PsiExpression) [ CD ]
Line_35 $$ PsiModifierListOwner resolved = resolveExpression(operand)-->Line_37 $$ result.add(Pair.create(resolved, operand.getType()))[ FD ]
Line_32 $$ PsiPolyadicExpression exp = PsiTreeUtil.getParentOfType(pos, PsiPolyadicExpression.class)-->Line_34 $$ for (PsiExpression operand : exp.getOperands()) [ FD ]
Line_49 $$ PsiReturnStatement statement = PsiTreeUtil.getParentOfType(pos, PsiReturnStatement.class)-->Line_50 $$ PsiExpression l = statement == null ? null : statement.getReturnValue()[ FD ]
Line_19 $$ PsiElement argument = pos-->Line_21 $$ PsiExpressionList list = (PsiExpressionList) argument.getContext()[ FD ]
Line_28 $$ PsiParameter parameter = params[i]-->Line_29 $$ result.add(new Pair<PsiModifierListOwner, PsiType>(parameter, parameter.getType()))[ FD ]
Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) -->Line_43 $$ PsiExpression l = assignment == null ? null : assignment.getLExpression()[ CD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_53 $$ result.add(Pair.create((PsiModifierListOwner) element, ((PsiMethod) element).getReturnType()))[ FD ]
Line_52 $$ if (element instanceof PsiMethod) -->Line_53 $$ result.add(Pair.create((PsiModifierListOwner) element, ((PsiMethod) element).getReturnType()))[ CD ]
Line_6 $$ PsiCall call = PsiTreeUtil.getParentOfType(pos, PsiCall.class)-->Line_10 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(call.getProject()).getResolveHelper()[ FD ]
Line_16 $$ PsiMethod method = (PsiMethod) element-->Line_17 $$ if (!resolveHelper.isAccessible(method, call, null))[ FD ]
Line_31 $$ if (IN_BINARY_COMPARISON.accepts(pos)) -->Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) [ CD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_29 $$ result.add(new Pair<PsiModifierListOwner, PsiType>(parameter, parameter.getType()))[ FD ]
Line_19 $$ PsiElement argument = pos-->Line_22 $$ int i = ArrayUtil.indexOf(list.getExpressions(), argument)[ FD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_7 $$ if (!(call instanceof PsiExpression))[ CD ]
Line_43 $$ PsiExpression l = assignment == null ? null : assignment.getLExpression()-->Line_51 $$ PsiElement element = PsiTreeUtil.getParentOfType(l, PsiMethod.class, PsiLambdaExpression.class)[ FD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_10 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(call.getProject()).getResolveHelper()[ CD ]
Line_42 $$ PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(pos, PsiAssignmentExpression.class)-->Line_45 $$ if (resolved != null && PsiTreeUtil.isAncestor(assignment.getRExpression(), pos, false)) [ FD ]
Line_31 $$ if (IN_BINARY_COMPARISON.accepts(pos)) -->Line_33 $$ if (exp != null && (exp.getOperationTokenType() == JavaTokenType.EQEQ || exp.getOperationTokenType() == JavaTokenType.NE)) [ CD ]
Line_13 $$ PsiElement element = resolveResult.getElement()-->Line_54 $$ if (element instanceof PsiLambdaExpression) [ FD ]
Line_32 $$ PsiPolyadicExpression exp = PsiTreeUtil.getParentOfType(pos, PsiPolyadicExpression.class)-->Line_33 $$ if (exp != null && (exp.getOperationTokenType() == JavaTokenType.EQEQ || exp.getOperationTokenType() == JavaTokenType.NE)) [ FD ]
Line_19 $$ PsiElement argument = pos-->Line_20 $$ argument = argument.getContext()[ FD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_6 $$ PsiCall call = PsiTreeUtil.getParentOfType(pos, PsiCall.class)[ CD ]
Line_63 $$ if (pair.getValue() instanceof PsiExpression) -->Line_64 $$ PsiReference ref = pair.getReference()[ CD ]
Line_21 $$ PsiExpressionList list = (PsiExpressionList) argument.getContext()-->Line_22 $$ int i = ArrayUtil.indexOf(list.getExpressions(), argument)[ FD ]
Line_36 $$ if (resolved != null) -->Line_37 $$ result.add(Pair.create(resolved, operand.getType()))[ CD ]
Line_20 $$ argument = argument.getContext()-->Line_22 $$ int i = ArrayUtil.indexOf(list.getExpressions(), argument)[ FD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_67 $$ result.add(new Pair<PsiModifierListOwner, PsiType>(method, method.getReturnType()))[ FD ]
Line_55 $$ final PsiType interfaceType = ((PsiLambdaExpression) element).getFunctionalInterfaceType()-->Line_56 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(interfaceType)[ FD ]
Line_41 $$ if (IN_ASSIGNMENT.accepts(pos)) -->Line_48 $$ if (IN_RETURN.accepts(pos)) [ CD ]
Line_64 $$ PsiReference ref = pair.getReference()-->Line_65 $$ PsiMethod method = ref == null ? null : (PsiMethod) ref.resolve()[ FD ]
Line_10 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(call.getProject()).getResolveHelper()-->Line_17 $$ if (!resolveHelper.isAccessible(method, call, null))[ FD ]
Line_57 $$ if (interfaceMethod != null) -->Line_58 $$ result.add(Pair.create((PsiModifierListOwner) interfaceMethod, LambdaUtil.getFunctionalInterfaceReturnType(interfaceType)))[ CD ]
Line_43 $$ PsiExpression l = assignment == null ? null : assignment.getLExpression()-->Line_44 $$ PsiElement resolved = resolveExpression(l)[ FD ]
Line_56 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(interfaceType)-->Line_57 $$ if (interfaceMethod != null) [ FD ]
Line_10 $$ PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(call.getProject()).getResolveHelper()-->Line_11 $$ JavaResolveResult[] methods = call instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) call).getMethodExpression().multiResolve(true) : call instanceof PsiNewExpression && type instanceof PsiClassType ? resolveHelper.multiResolveConstructor((PsiClassType) type, call.getArgumentList(), call) : JavaResolveResult.EMPTY_ARRAY[ FD ]
Line_16 $$ PsiMethod method = (PsiMethod) element-->Line_25 $$ PsiParameter[] params = method.getParameterList().getParameters()[ FD ]
Line_62 $$ PsiNameValuePair pair = (PsiNameValuePair) pos.getParent().getParent()-->Line_63 $$ if (pair.getValue() instanceof PsiExpression) [ FD ]
Line_5 $$ if (IN_METHOD_CALL_ARGUMENT.accepts(pos)) -->Line_9 $$ PsiType type = ((PsiExpression) call).getType()[ CD ]
Line_19 $$ PsiElement argument = pos-->Line_20 $$ while (!(argument.getContext() instanceof PsiExpressionList)) argument = argument.getContext()[ FD ]
Line_16 $$ PsiMethod method = (PsiMethod) element-->Line_67 $$ result.add(new Pair<PsiModifierListOwner, PsiType>(method, method.getReturnType()))[ FD ]
Line_34 $$ for (PsiExpression operand : exp.getOperands()) -->Line_35 $$ PsiModifierListOwner resolved = resolveExpression(operand)[ FD ]
Line_42 $$ PsiAssignmentExpression assignment = PsiTreeUtil.getParentOfType(pos, PsiAssignmentExpression.class)-->Line_43 $$ PsiExpression l = assignment == null ? null : assignment.getLExpression()[ FD ]
Line_48 $$ if (IN_RETURN.accepts(pos)) -->Line_52 $$ if (element instanceof PsiMethod) [ CD ]
Line_14 $$ if (!(element instanceof PsiMethod))-->Line_15 $$ return Collections.emptyList()[ CD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_46 $$ result.add(Pair.create((PsiModifierListOwner) resolved, l.getType()))[ FD ]
Line_52 $$ if (element instanceof PsiMethod) -->Line_54 $$ if (element instanceof PsiLambdaExpression) [ CD ]
Line_4 $$ List<Pair<PsiModifierListOwner, PsiType>> result = ContainerUtil.newArrayList()-->Line_58 $$ result.add(Pair.create((PsiModifierListOwner) interfaceMethod, LambdaUtil.getFunctionalInterfaceReturnType(interfaceType)))[ FD ]
Line_48 $$ if (IN_RETURN.accepts(pos)) -->Line_51 $$ PsiElement element = PsiTreeUtil.getParentOfType(l, PsiMethod.class, PsiLambdaExpression.class)[ CD ]
Line_54 $$ if (element instanceof PsiLambdaExpression) -->Line_57 $$ if (interfaceMethod != null) [ CD ]
Line_16 $$ PsiMethod method = (PsiMethod) element-->Line_66 $$ if (method != null) [ FD ]
Line_43 $$ PsiExpression l = assignment == null ? null : assignment.getLExpression()-->Line_46 $$ result.add(Pair.create((PsiModifierListOwner) resolved, l.getType()))[ FD ]
