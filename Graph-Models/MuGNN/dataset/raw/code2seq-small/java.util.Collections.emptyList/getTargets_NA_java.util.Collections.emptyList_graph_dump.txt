Line_5 $$ if (importReference == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_9 $$ if (javaFile == null) -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_21 $$ final ReferenceCollector collector = new ReferenceCollector(importedElements, myImportStatement.isOnDemand(), myImportStatic)-->Line_22 $$ javaFile.accept(collector)[ FD ]
Line_4 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_5 $$ if (importReference == null) [ FD ]
Line_21 $$ final ReferenceCollector collector = new ReferenceCollector(importedElements, myImportStatement.isOnDemand(), myImportStatic)-->Line_23 $$ myClassReferenceListMap = collector.getClassReferenceListMap()[ FD ]
Line_24 $$ if (myClassReferenceListMap.isEmpty()) -->Line_25 $$ return Collections.emptyList()[ CD ]
Line_8 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)-->Line_22 $$ javaFile.accept(collector)[ FD ]
Line_8 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)-->Line_9 $$ if (javaFile == null) [ FD ]
Line_17 $$ for (int i = 0; i < resolveResults.length; i++) -->Line_18 $$ final JavaResolveResult resolveResult = resolveResults[i][ CD ]
Line_18 $$ final JavaResolveResult resolveResult = resolveResults[i]-->Line_19 $$ importedElements[i] = resolveResult.getElement()[ FD ]
Line_13 $$ if (resolveResults.length == 0) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_8 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)[ FD ]
Line_4 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_12 $$ final JavaResolveResult[] resolveResults = importReference.multiResolve(false)[ FD ]
Line_17 $$ for (int i = 0; i < resolveResults.length; i++) -->Line_19 $$ importedElements[i] = resolveResult.getElement()[ CD ]
