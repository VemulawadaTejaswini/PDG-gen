Line_16 $$ for (int i = 0; i < resolveResults.length; i++) -->Line_18 $$ importedElements[i] = resolveResult.getElement()[ CD ]
Line_4 $$ if (importReference == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_26 $$ return new ArrayList<PsiMember>(myClassReferenceListMap.keySet())[ CD ]
Line_3 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_4 $$ if (importReference == null) [ FD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_15 $$ final PsiElement[] importedElements = new PsiElement[resolveResults.length][ CD ]
Line_20 $$ final ReferenceCollector collector = new ReferenceCollector(importedElements, myImportStatement.isOnDemand(), myImportStatic)-->Line_21 $$ javaFile.accept(collector)[ FD ]
Line_3 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_11 $$ final JavaResolveResult[] resolveResults = importReference.multiResolve(false)[ FD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_4 $$ if (importReference == null) [ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_16 $$ for (int i = 0; i < resolveResults.length; i++) [ CD ]
Line_23 $$ if (myClassReferenceListMap.isEmpty()) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_7 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)-->Line_21 $$ javaFile.accept(collector)[ FD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_20 $$ final ReferenceCollector collector = new ReferenceCollector(importedElements, myImportStatement.isOnDemand(), myImportStatic)[ CD ]
Line_20 $$ final ReferenceCollector collector = new ReferenceCollector(importedElements, myImportStatement.isOnDemand(), myImportStatic)-->Line_22 $$ myClassReferenceListMap = collector.getClassReferenceListMap()[ FD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_7 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)[ CD ]
Line_7 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)-->Line_8 $$ if (javaFile == null) [ FD ]
Line_16 $$ for (int i = 0; i < resolveResults.length; i++) -->Line_17 $$ final JavaResolveResult resolveResult = resolveResults[i][ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_3 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()[ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_21 $$ javaFile.accept(collector)[ CD ]
Line_3 $$ final PsiJavaCodeReferenceElement importReference = myImportStatement.getImportReference()-->Line_7 $$ final PsiJavaFile javaFile = PsiTreeUtil.getParentOfType(importReference, PsiJavaFile.class)[ FD ]
Line_17 $$ final JavaResolveResult resolveResult = resolveResults[i]-->Line_18 $$ importedElements[i] = resolveResult.getElement()[ FD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_22 $$ myClassReferenceListMap = collector.getClassReferenceListMap()[ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_11 $$ final JavaResolveResult[] resolveResults = importReference.multiResolve(false)[ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_8 $$ if (javaFile == null) [ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_12 $$ if (resolveResults.length == 0) [ CD ]
Line_12 $$ if (resolveResults.length == 0) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_8 $$ if (javaFile == null) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiMember> getTargets() -->Line_23 $$ if (myClassReferenceListMap.isEmpty()) [ CD ]
