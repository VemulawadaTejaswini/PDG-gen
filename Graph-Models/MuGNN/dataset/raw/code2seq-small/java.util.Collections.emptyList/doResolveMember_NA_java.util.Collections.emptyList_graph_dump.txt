Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_9 $$ if (resolveContext.allowProperties()) [ CD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_21 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_44 $$ if (inherited) [ CD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_35 $$ if (classMember != null) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_56 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ FD ]
Line_72 $$ if (inherited) -->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ CD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_31 $$ if (classMember != null) [ FD ]
Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)-->Line_77 $$ return ResolveResultList.to(classMember)[ FD ]
Line_19 $$ if (first_arg_type instanceof PyClassType) -->Line_20 $$ PyClass derived_class = ((PyClassType) first_arg_type).getPyClass()[ CD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_35 $$ if (classMember != null) [ FD ]
Line_35 $$ if (classMember != null) -->Line_41 $$ list.poke(classMember, rate)[ CD ]
Line_48 $$ type = type.toInstance()-->Line_55 $$ if (type != null) [ FD ]
Line_31 $$ if (classMember != null) -->Line_32 $$ return ResolveResultList.to(classMember)[ CD ]
Line_46 $$ if (type instanceof PyClassType) -->Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)[ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_23 $$ return new PyClassTypeImpl(base_it.next(), true).resolveMember(name, location, direction, resolveContext)[ FD ]
Line_21 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()-->Line_23 $$ return new PyClassTypeImpl(base_it.next(), true).resolveMember(name, location, direction, resolveContext)[ FD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_76 $$ if (classMember != null) [ FD ]
Line_16 $$ PyExpression first_arg = ((PyCallExpression) location).getArgument(0, PyExpression.class)-->Line_17 $$ if (first_arg != null) [ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_6 $$ if (classMember != null) [ FD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_55 $$ if (type != null) -->Line_56 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ CD ]
Line_81 $$ if (type instanceof PyClassType) -->Line_82 $$ final PyClass pyClass = ((PyClassType) type).getPyClass()[ CD ]
Line_10 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())-->Line_12 $$ return resultRef.get()[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_77 $$ return ResolveResultList.to(classMember)[ FD ]
Line_21 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()-->Line_22 $$ if (base_it.hasNext()) [ FD ]
Line_35 $$ if (classMember != null) -->Line_42 $$ return list[ CD ]
Line_48 $$ type = type.toInstance()-->Line_56 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ FD ]
Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_51 $$ if (superMember != null) [ FD ]
Line_16 $$ PyExpression first_arg = ((PyCallExpression) location).getArgument(0, PyExpression.class)-->Line_18 $$ PyType first_arg_type = context.getType(first_arg)[ FD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)[ FD ]
Line_63 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) -->Line_65 $$ if (typeType != null) [ CD ]
Line_56 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)-->Line_57 $$ if (results != null && !results.isEmpty()) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()[ CD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_64 $$ final PyClassLikeType typeType = getMetaClassType(context, true)-->Line_66 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)[ FD ]
Line_19 $$ if (first_arg_type instanceof PyClassType) -->Line_21 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ CD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_10 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())-->Line_11 $$ if (resultRef != null) [ FD ]
Line_47 $$ if (!myIsDefinition) -->Line_48 $$ type = type.toInstance()[ CD ]
Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)-->Line_76 $$ if (classMember != null) [ FD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ FD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_18 $$ PyType first_arg_type = context.getType(first_arg)[ FD ]
Line_81 $$ if (type instanceof PyClassType) -->Line_84 $$ if (superMember != null) [ CD ]
Line_17 $$ if (first_arg != null) -->Line_18 $$ PyType first_arg_type = context.getType(first_arg)[ CD ]
Line_48 $$ type = type.toInstance()-->Line_81 $$ if (type instanceof PyClassType) [ FD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ FD ]
Line_37 $$ int rate = RatedResolveResult.RATE_NORMAL-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_46 $$ if (type instanceof PyClassType) -->Line_51 $$ if (superMember != null) [ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_35 $$ if (classMember != null) [ CD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_66 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)[ FD ]
Line_15 $$ if ("super".equals(getClassQName()) && isBuiltin() && location instanceof PyCallExpression) -->Line_17 $$ if (first_arg != null) [ CD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_32 $$ return ResolveResultList.to(classMember)[ FD ]
Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_55 $$ if (type != null) [ FD ]
Line_65 $$ if (typeType != null) -->Line_67 $$ if (typeMembers != null && !typeMembers.isEmpty()) [ CD ]
Line_11 $$ if (resultRef != null) -->Line_12 $$ return resultRef.get()[ CD ]
Line_19 $$ if (first_arg_type instanceof PyClassType) -->Line_22 $$ if (base_it.hasNext()) [ CD ]
Line_18 $$ PyType first_arg_type = context.getType(first_arg)-->Line_19 $$ if (first_arg_type instanceof PyClassType) [ FD ]
Line_6 $$ if (classMember != null) -->Line_7 $$ return ResolveResultList.to(classMember)[ CD ]
Line_67 $$ if (typeMembers != null && !typeMembers.isEmpty()) -->Line_68 $$ return typeMembers[ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_63 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) [ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)[ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_15 $$ if ("super".equals(getClassQName()) && isBuiltin() && location instanceof PyCallExpression) [ CD ]
Line_15 $$ if ("super".equals(getClassQName()) && isBuiltin() && location instanceof PyCallExpression) -->Line_16 $$ PyExpression first_arg = ((PyCallExpression) location).getArgument(0, PyExpression.class)[ CD ]
Line_22 $$ if (base_it.hasNext()) -->Line_25 $$ return null[ CD ]
Line_81 $$ if (type instanceof PyClassType) -->Line_83 $$ PsiElement superMember = resolveByMembersProviders(new PyClassTypeImpl(pyClass, isDefinition()), name, location, resolveContext.getTypeEvalContext())[ CD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_31 $$ if (classMember != null) [ FD ]
Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_46 $$ if (type instanceof PyClassType) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()[ FD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_77 $$ return ResolveResultList.to(classMember)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_31 $$ if (classMember != null) [ CD ]
Line_63 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) -->Line_64 $$ final PyClassLikeType typeType = getMetaClassType(context, true)[ CD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_76 $$ if (classMember != null) [ FD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_76 $$ if (classMember != null) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_90 $$ return Collections.emptyList()[ CD ]
Line_35 $$ if (classMember != null) -->Line_37 $$ int rate = RatedResolveResult.RATE_NORMAL[ CD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_63 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)[ FD ]
Line_46 $$ if (type instanceof PyClassType) -->Line_47 $$ if (!myIsDefinition) [ CD ]
Line_17 $$ if (first_arg != null) -->Line_19 $$ if (first_arg_type instanceof PyClassType) [ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_83 $$ PsiElement superMember = resolveByMembersProviders(new PyClassTypeImpl(pyClass, isDefinition()), name, location, resolveContext.getTypeEvalContext())[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_76 $$ if (classMember != null) [ CD ]
Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_52 $$ return ResolveResultList.to(superMember)[ FD ]
Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_81 $$ if (type instanceof PyClassType) [ FD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_35 $$ if (classMember != null) [ FD ]
Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)[ FD ]
Line_57 $$ if (results != null && !results.isEmpty()) -->Line_58 $$ return results[ CD ]
Line_36 $$ final ResolveResultList list = new ResolveResultList()-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)[ CD ]
Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_56 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ FD ]
Line_9 $$ if (resolveContext.allowProperties()) -->Line_10 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())[ CD ]
Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_48 $$ type = type.toInstance()[ FD ]
Line_35 $$ if (classMember != null) -->Line_36 $$ final ResolveResultList list = new ResolveResultList()[ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_72 $$ if (inherited) [ CD ]
Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_85 $$ return ResolveResultList.to(superMember)[ FD ]
Line_51 $$ if (superMember != null) -->Line_52 $$ return ResolveResultList.to(superMember)[ CD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_20 $$ PyClass derived_class = ((PyClassType) first_arg_type).getPyClass()-->Line_21 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ FD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_45 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) [ FD ]
Line_22 $$ if (base_it.hasNext()) -->Line_23 $$ return new PyClassTypeImpl(base_it.next(), true).resolveMember(name, location, direction, resolveContext)[ CD ]
Line_84 $$ if (superMember != null) -->Line_85 $$ return ResolveResultList.to(superMember)[ CD ]
Line_9 $$ if (resolveContext.allowProperties()) -->Line_11 $$ if (resultRef != null) [ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)[ FD ]
Line_66 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)-->Line_67 $$ if (typeMembers != null && !typeMembers.isEmpty()) [ FD ]
Line_76 $$ if (classMember != null) -->Line_77 $$ return ResolveResultList.to(classMember)[ CD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_64 $$ final PyClassLikeType typeType = getMetaClassType(context, true)[ FD ]
Line_64 $$ final PyClassLikeType typeType = getMetaClassType(context, true)-->Line_65 $$ if (typeType != null) [ FD ]
Line_50 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_84 $$ if (superMember != null) [ FD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_77 $$ return ResolveResultList.to(classMember)[ FD ]
Line_3 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_80 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_10 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_7 $$ return ResolveResultList.to(classMember)[ FD ]
Line_37 $$ int rate = RatedResolveResult.RATE_NORMAL-->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_55 $$ if (type != null) -->Line_57 $$ if (results != null && !results.isEmpty()) [ CD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)[ FD ]
Line_4 $$ PsiElement classMember = resolveByOverridingMembersProviders(this, name, location)-->Line_32 $$ return ResolveResultList.to(classMember)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_9 $$ if (resolveContext.allowProperties()) [ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_34 $$ classMember = resolveByOverridingAncestorsMembersProviders(this, name, location)[ CD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_6 $$ if (classMember != null) [ CD ]
Line_39 $$ rate += rater.getMemberRate(classMember, this, context)-->Line_41 $$ list.poke(classMember, rate)[ FD ]
Line_30 $$ classMember = resolveClassMember(myClass, myIsDefinition, name, location)-->Line_73 $$ classMember = resolveByMembersProviders(this, name, location, context)[ FD ]
Line_2 $$ private List<? extends RatedResolveResult> doResolveMember(@NotNull String name, @Nullable PyExpression location, @NotNull AccessDirection direction, @NotNull PyResolveContext resolveContext, boolean inherited) -->Line_79 $$ if (inherited) [ CD ]
Line_38 $$ for (PyResolveResultRater rater : Extensions.getExtensions(PyResolveResultRater.EP_NAME)) -->Line_39 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_65 $$ if (typeType != null) -->Line_66 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)[ CD ]
