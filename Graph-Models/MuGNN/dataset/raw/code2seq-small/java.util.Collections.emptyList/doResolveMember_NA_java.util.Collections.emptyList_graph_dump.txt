Line_16 $$ if ("super".equals(getClassQName()) && isBuiltin() && location instanceof PyCallExpression) -->Line_19 $$ if (first_arg != null) [ CD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_67 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) [ FD ]
Line_12 $$ if (resultRef != null) -->Line_13 $$ return resultRef.get()[ CD ]
Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_59 $$ if (type != null) [ FD ]
Line_55 $$ if (superMember != null) -->Line_56 $$ return ResolveResultList.to(superMember)[ CD ]
Line_11 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())-->Line_12 $$ if (resultRef != null) [ FD ]
Line_70 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)-->Line_71 $$ if (typeMembers != null && !typeMembers.isEmpty()) [ FD ]
Line_71 $$ if (typeMembers != null && !typeMembers.isEmpty()) -->Line_72 $$ return typeMembers[ CD ]
Line_11 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())-->Line_13 $$ return resultRef.get()[ FD ]
Line_23 $$ PyClass derived_class = ((PyClassType) first_arg_type).getPyClass()-->Line_24 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ FD ]
Line_67 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) -->Line_69 $$ if (typeType != null) [ CD ]
Line_22 $$ if (first_arg_type instanceof PyClassType) -->Line_23 $$ PyClass derived_class = ((PyClassType) first_arg_type).getPyClass()[ CD ]
Line_52 $$ type = type.toInstance()-->Line_60 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ FD ]
Line_76 $$ if (inherited) -->Line_77 $$ classMember = resolveByMembersProviders(//ask providers after real class introspection as providers have less priority[ CD ]
Line_42 $$ for (PyResolveResultRater rater : Extensions.getExtensions(PyResolveResultRater.EP_NAME)) -->Line_43 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_39 $$ if (classMember != null) -->Line_41 $$ int rate = RatedResolveResult.RATE_NORMAL[ CD ]
Line_68 $$ final PyClassLikeType typeType = getMetaClassType(context, true)-->Line_70 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)[ FD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_77 $$ classMember = resolveByMembersProviders(//ask providers after real class introspection as providers have less priority[ FD ]
Line_24 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()-->Line_26 $$ return new PyClassTypeImpl(base_it.next(), true).resolveMember(name, location, direction, resolveContext)[ FD ]
Line_68 $$ final PyClassLikeType typeType = getMetaClassType(context, true)-->Line_69 $$ if (typeType != null) [ FD ]
Line_41 $$ int rate = RatedResolveResult.RATE_NORMAL-->Line_45 $$ list.poke(classMember, rate)[ FD ]
Line_85 $$ if (type instanceof PyClassType) -->Line_87 $$ PsiElement superMember = resolveByMembersProviders(new PyClassTypeImpl(pyClass, isDefinition()), name, location, resolveContext.getTypeEvalContext())[ CD ]
Line_41 $$ int rate = RatedResolveResult.RATE_NORMAL-->Line_43 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_50 $$ if (type instanceof PyClassType) -->Line_54 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)[ CD ]
Line_19 $$ if (first_arg != null) -->Line_22 $$ if (first_arg_type instanceof PyClassType) [ CD ]
Line_22 $$ if (first_arg_type instanceof PyClassType) -->Line_25 $$ if (base_it.hasNext()) [ CD ]
Line_39 $$ if (classMember != null) -->Line_45 $$ list.poke(classMember, rate)[ CD ]
Line_24 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()-->Line_25 $$ if (base_it.hasNext()) [ FD ]
Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_85 $$ if (type instanceof PyClassType) [ FD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_24 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ FD ]
Line_52 $$ type = type.toInstance()-->Line_59 $$ if (type != null) [ FD ]
Line_50 $$ if (type instanceof PyClassType) -->Line_51 $$ if (!myIsDefinition) [ CD ]
Line_39 $$ if (classMember != null) -->Line_40 $$ final ResolveResultList list = new ResolveResultList()[ CD ]
Line_50 $$ if (type instanceof PyClassType) -->Line_55 $$ if (superMember != null) [ CD ]
Line_10 $$ if (resolveContext.allowProperties()) -->Line_12 $$ if (resultRef != null) [ CD ]
Line_54 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_56 $$ return ResolveResultList.to(superMember)[ FD ]
Line_54 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_55 $$ if (superMember != null) [ FD ]
Line_7 $$ if (classMember != null) -->Line_8 $$ return ResolveResultList.to(classMember)[ CD ]
Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_50 $$ if (type instanceof PyClassType) [ FD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_68 $$ final PyClassLikeType typeType = getMetaClassType(context, true)[ FD ]
Line_52 $$ type = type.toInstance()-->Line_85 $$ if (type instanceof PyClassType) [ FD ]
Line_22 $$ if (first_arg_type instanceof PyClassType) -->Line_24 $$ final Iterator<PyClass> base_it = derived_class.getAncestorClasses(context).iterator()[ CD ]
Line_61 $$ if (results != null && !results.isEmpty()) -->Line_62 $$ return results[ CD ]
Line_39 $$ if (classMember != null) -->Line_46 $$ return list[ CD ]
Line_67 $$ if (inherited && isDefinition() && myClass.isNewStyleClass(context)) -->Line_68 $$ final PyClassLikeType typeType = getMetaClassType(context, true)[ CD ]
Line_59 $$ if (type != null) -->Line_60 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ CD ]
Line_69 $$ if (typeType != null) -->Line_71 $$ if (typeMembers != null && !typeMembers.isEmpty()) [ CD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_84 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) [ FD ]
Line_25 $$ if (base_it.hasNext()) -->Line_26 $$ return new PyClassTypeImpl(base_it.next(), true).resolveMember(name, location, direction, resolveContext)[ CD ]
Line_54 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_89 $$ return ResolveResultList.to(superMember)[ FD ]
Line_43 $$ rate += rater.getMemberRate(classMember, this, context)-->Line_45 $$ list.poke(classMember, rate)[ FD ]
Line_80 $$ if (classMember != null) -->Line_81 $$ return ResolveResultList.to(classMember)[ CD ]
Line_10 $$ if (resolveContext.allowProperties()) -->Line_11 $$ final Ref<ResolveResultList> resultRef = findProperty(name, direction, true, resolveContext.getTypeEvalContext())[ CD ]
Line_40 $$ final ResolveResultList list = new ResolveResultList()-->Line_45 $$ list.poke(classMember, rate)[ FD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) [ FD ]
Line_59 $$ if (type != null) -->Line_61 $$ if (results != null && !results.isEmpty()) [ CD ]
Line_69 $$ if (typeType != null) -->Line_70 $$ List<? extends RatedResolveResult> typeMembers = typeType.resolveMember(name, location, direction, resolveContext)[ CD ]
Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_60 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)[ FD ]
Line_49 $$ for (PyClassLikeType type : myClass.getAncestorTypes(context)) -->Line_52 $$ type = type.toInstance()[ FD ]
Line_85 $$ if (type instanceof PyClassType) -->Line_86 $$ final PyClass pyClass = ((PyClassType) type).getPyClass()[ CD ]
Line_54 $$ PsiElement superMember = resolveClassMember(((PyClassType) type).getPyClass(), myIsDefinition, name, null)-->Line_88 $$ if (superMember != null) [ FD ]
Line_85 $$ if (type instanceof PyClassType) -->Line_88 $$ if (superMember != null) [ CD ]
Line_88 $$ if (superMember != null) -->Line_89 $$ return ResolveResultList.to(superMember)[ CD ]
Line_60 $$ final List<? extends RatedResolveResult> results = type.resolveMember(name, location, direction, resolveContext, false)-->Line_61 $$ if (results != null && !results.isEmpty()) [ FD ]
Line_4 $$ final TypeEvalContext context = resolveContext.getTypeEvalContext()-->Line_43 $$ rate += rater.getMemberRate(classMember, this, context)[ FD ]
Line_35 $$ if (classMember != null) -->Line_36 $$ return ResolveResultList.to(classMember)[ CD ]
Line_51 $$ if (!myIsDefinition) -->Line_52 $$ type = type.toInstance()[ CD ]
