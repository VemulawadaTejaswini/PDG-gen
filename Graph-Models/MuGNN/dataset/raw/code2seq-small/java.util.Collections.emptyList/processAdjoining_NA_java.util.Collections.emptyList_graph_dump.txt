Line_16 $$ LineFragment fragment = fragments.get(end - 1)-->Line_18 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())[ FD ]
Line_17 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_4 $$ int end = fragments.size()-->Line_6 $$ while (start < end) [ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_4 $$ int end = fragments.size()[ FD ]
Line_6 $$ while (start < end) -->Line_7 $$ LineFragment fragment = fragments.get(start)[ CD ]
Line_3 $$ int start = 0-->Line_30 $$ return fragments.subList(start, end)[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_5 $$ if (trim && policy == ComparisonPolicy.IGNORE_WHITESPACES) [ FD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_8 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())[ FD ]
Line_15 $$ while (start < end) -->Line_16 $$ LineFragment fragment = fragments.get(end - 1)[ CD ]
Line_8 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())-->Line_10 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_7 $$ LineFragment fragment = fragments.get(start)[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_3 $$ int start = 0[ CD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_18 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())[ FD ]
Line_3 $$ int start = 0-->Line_6 $$ while (start < end) [ FD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_17 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())[ FD ]
Line_18 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_15 $$ while (start < end) -->Line_17 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())[ CD ]
Line_3 $$ int start = 0-->Line_15 $$ while (start < end) [ FD ]
Line_3 $$ int start = 0-->Line_25 $$ if (start == end)[ FD ]
Line_5 $$ if (trim && policy == ComparisonPolicy.IGNORE_WHITESPACES) -->Line_15 $$ while (start < end) [ CD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_10 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_4 $$ int end = fragments.size()-->Line_22 $$ end--[ FD ]
Line_16 $$ LineFragment fragment = fragments.get(end - 1)-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_9 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())-->Line_10 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_4 $$ int end = fragments.size()-->Line_25 $$ if (start == end)[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_16 $$ LineFragment fragment = fragments.get(end - 1)[ FD ]
Line_6 $$ while (start < end) -->Line_10 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ CD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_9 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_30 $$ return fragments.subList(start, end)[ CD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_5 $$ if (trim && policy == ComparisonPolicy.IGNORE_WHITESPACES) [ CD ]
Line_9 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_4 $$ int end = fragments.size()-->Line_30 $$ return fragments.subList(start, end)[ FD ]
Line_27 $$ if (squash) -->Line_28 $$ return Collections.singletonList(doSquash(fragments.subList(start, end)))[ CD ]
Line_3 $$ int start = 0-->Line_7 $$ LineFragment fragment = fragments.get(start)[ FD ]
Line_25 $$ if (start == end)-->Line_26 $$ return Collections.emptyList()[ CD ]
Line_4 $$ int end = fragments.size()-->Line_28 $$ return Collections.singletonList(doSquash(fragments.subList(start, end)))[ FD ]
Line_16 $$ LineFragment fragment = fragments.get(end - 1)-->Line_17 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())[ FD ]
Line_15 $$ while (start < end) -->Line_18 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())[ CD ]
Line_3 $$ int start = 0-->Line_28 $$ return Collections.singletonList(doSquash(fragments.subList(start, end)))[ FD ]
Line_6 $$ while (start < end) -->Line_8 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())[ CD ]
Line_8 $$ CharSequenceSubSequence sequence1 = new CharSequenceSubSequence(text1, fragment.getStartOffset1(), fragment.getEndOffset1())-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_30 $$ return fragments.subList(start, end)[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_4 $$ int end = fragments.size()[ CD ]
Line_6 $$ while (start < end) -->Line_13 $$ start++[ CD ]
Line_6 $$ while (start < end) -->Line_9 $$ CharSequenceSubSequence sequence2 = new CharSequenceSubSequence(text2, fragment.getStartOffset2(), fragment.getEndOffset2())[ CD ]
Line_4 $$ int end = fragments.size()-->Line_15 $$ while (start < end) [ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_25 $$ if (start == end)[ CD ]
Line_15 $$ while (start < end) -->Line_22 $$ end--[ CD ]
Line_7 $$ LineFragment fragment = fragments.get(start)-->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ FD ]
Line_5 $$ if (trim && policy == ComparisonPolicy.IGNORE_WHITESPACES) -->Line_6 $$ while (start < end) [ CD ]
Line_3 $$ int start = 0-->Line_13 $$ start++[ FD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_27 $$ if (squash) [ CD ]
Line_15 $$ while (start < end) -->Line_19 $$ if ((fragment.getInnerFragments() == null || !fragment.getInnerFragments().isEmpty()) && !StringUtil.equalsIgnoreWhitespaces(sequence1, sequence2)) [ CD ]
Line_2 $$ private static List<LineFragment> processAdjoining(@NotNull List<LineFragment> fragments, @NotNull CharSequence text1, @NotNull CharSequence text2, @NotNull ComparisonPolicy policy, boolean squash, boolean trim) -->Line_28 $$ return Collections.singletonList(doSquash(fragments.subList(start, end)))[ FD ]
