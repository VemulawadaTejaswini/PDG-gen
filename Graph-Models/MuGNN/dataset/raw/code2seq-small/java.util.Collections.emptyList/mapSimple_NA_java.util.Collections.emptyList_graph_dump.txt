Line_11 $$ int cur = 0-->Line_14 $$ cur++[ FD ]
Line_25 $$ for (int i = 0; i < map.length; i++) -->Line_26 $$ if (map[i] == null)[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_25 $$ for (int i = 0; i < map.length; i++) [ CD ]
Line_11 $$ int cur = 0-->Line_12 $$ for (int i = 0; i < args.length; i++, cur++) [ FD ]
Line_21 $$ if (!isAssignableByConversion(params[cur].getType(), type, context))-->Line_22 $$ return partial ? map : null[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_29 $$ return map[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_3 $$ if (args.length > params.length && !partial)[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_18 $$ if (params[cur].isOptional())[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_20 $$ final PsiType type = typeComputer.fun(args[i])[ CD ]
Line_13 $$ while (optionalArgs == 0 && cur < params.length && params[cur].isOptional()) -->Line_14 $$ cur++[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_3 $$ if (args.length > params.length && !partial)[ FD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_21 $$ if (!isAssignableByConversion(params[cur].getType(), type, context))[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_16 $$ if (cur == params.length)[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_6 $$ int optional = getOptionalParamCount(params, false)[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_6 $$ int optional = getOptionalParamCount(params, false)[ FD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_9 $$ if (notOptional > args.length && !partial)[ FD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_9 $$ if (notOptional > args.length && !partial)[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_11 $$ int cur = 0[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_21 $$ if (!isAssignableByConversion(params[cur].getType(), type, context))[ FD ]
Line_18 $$ if (params[cur].isOptional())-->Line_19 $$ optionalArgs--[ CD ]
Line_26 $$ if (map[i] == null)-->Line_27 $$ map[i] = new ArgInfo<Arg>(Collections.<Arg>emptyList(), false, null)[ CD ]
Line_9 $$ if (notOptional > args.length && !partial)-->Line_10 $$ return null[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_12 $$ for (int i = 0; i < args.length; i++, cur++) [ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_8 $$ int optionalArgs = args.length - notOptional[ CD ]
Line_8 $$ int optionalArgs = args.length - notOptional-->Line_19 $$ optionalArgs--[ FD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_5 $$ ArgInfo<Arg>[] map = new ArgInfo[params.length][ CD ]
Line_16 $$ if (cur == params.length)-->Line_17 $$ return partial ? map : null[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_23 $$ map[cur] = new ArgInfo<Arg>(args[i], type)[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_25 $$ for (int i = 0; i < map.length; i++) [ FD ]
Line_3 $$ if (args.length > params.length && !partial)-->Line_4 $$ return null[ CD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_20 $$ final PsiType type = typeComputer.fun(args[i])[ FD ]
Line_11 $$ int cur = 0-->Line_16 $$ if (cur == params.length)[ FD ]
Line_2 $$ private static <Arg> ArgInfo<Arg>[] mapSimple(@NotNull GrClosureParameter[] params, @NotNull Arg[] args, @NotNull Function<Arg, PsiType> typeComputer, @NotNull PsiElement context, boolean partial) -->Line_7 $$ int notOptional = params.length - optional[ CD ]
Line_12 $$ for (int i = 0; i < args.length; i++, cur++) -->Line_13 $$ while (optionalArgs == 0 && cur < params.length && params[cur].isOptional()) [ CD ]
