Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_32 $$ if ((companyId != subscription.getCompanyId()) || (userId != subscription.getUserId()) || (classNameId != subscription.getClassNameId()) || !ArrayUtil.contains(classPKs, subscription.getClassPK())) [ FD ]
Line_67 $$ if (!pagination) -->Line_69 $$ Collections.sort(list)[ CD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_42 $$ query.append(_FINDER_COLUMN_C_U_C_C_COMPANYID_2)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_69 $$ Collections.sort(list)[ FD ]
Line_10 $$ Subscription subscription = fetchByC_U_C_C(companyId, userId, classNameId, classPKs[0])-->Line_32 $$ if ((companyId != subscription.getCompanyId()) || (userId != subscription.getUserId()) || (classNameId != subscription.getClassNameId()) || !ArrayUtil.contains(classPKs, subscription.getClassPK())) [ FD ]
Line_21 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) -->Line_22 $$ pagination = false[ CD ]
Line_63 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(userId)[ FD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_59 $$ Session session = null-->Line_62 $$ Query q = session.createQuery(sql)[ FD ]
Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_3 $$ if (classPKs == null) [ FD ]
Line_23 $$ finderArgs = new Object[] -->Line_25 $$ finderArgs = new Object[] [ FD ]
Line_33 $$ list = null-->Line_69 $$ Collections.sort(list)[ FD ]
Line_63 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_66 $$ qPos.add(classNameId)[ FD ]
Line_25 $$ finderArgs = new Object[] -->Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)[ FD ]
Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)-->Line_69 $$ Collections.sort(list)[ FD ]
Line_4 $$ classPKs = new long[0]-->Line_23 $$ finderArgs = new Object[] [ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_9 $$ if (classPKs.length == 1) -->Line_11 $$ if (subscription == null) [ CD ]
Line_39 $$ if (list == null) -->Line_45 $$ if (classPKs.length > 0) [ CD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_28 $$ if (retrieveFromCache) [ CD ]
Line_45 $$ if (classPKs.length > 0) -->Line_47 $$ query.append(_FINDER_COLUMN_C_U_C_C_CLASSPK_7)[ CD ]
Line_62 $$ Query q = session.createQuery(sql)-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_39 $$ if (list == null) -->Line_44 $$ query.append(_FINDER_COLUMN_C_U_C_C_CLASSNAMEID_2)[ CD ]
Line_23 $$ finderArgs = new Object[] -->Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)[ FD ]
Line_67 $$ if (!pagination) -->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ CD ]
Line_45 $$ if (classPKs.length > 0) -->Line_48 $$ query.append(StringUtil.merge(classPKs))[ CD ]
Line_70 $$ list = Collections.unmodifiableList(list)-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_6 $$ classPKs = ArrayUtil.unique(classPKs)-->Line_32 $$ if ((companyId != subscription.getCompanyId()) || (userId != subscription.getUserId()) || (classNameId != subscription.getClassNameId()) || !ArrayUtil.contains(classPKs, subscription.getClassPK())) [ FD ]
Line_33 $$ list = null-->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ FD ]
Line_3 $$ if (classPKs == null) -->Line_5 $$ if (classPKs.length > 1) [ CD ]
Line_70 $$ list = Collections.unmodifiableList(list)-->Line_74 $$ cacheResult(list)[ FD ]
Line_39 $$ if (list == null) -->Line_42 $$ query.append(_FINDER_COLUMN_C_U_C_C_COMPANYID_2)[ CD ]
Line_6 $$ classPKs = ArrayUtil.unique(classPKs)-->Line_25 $$ finderArgs = new Object[] [ FD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_30 $$ if ((list != null) && !list.isEmpty()) [ FD ]
Line_21 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) -->Line_23 $$ finderArgs = new Object[] [ CD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_83 $$ return list[ CD ]
Line_59 $$ Session session = null-->Line_61 $$ session = openSession()[ FD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_33 $$ list = null[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_25 $$ finderArgs = new Object[] [ FD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_74 $$ cacheResult(list)[ FD ]
Line_6 $$ classPKs = ArrayUtil.unique(classPKs)-->Line_23 $$ finderArgs = new Object[] [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_53 $$ if (orderByComparator != null) [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_19 $$ boolean pagination = true[ CD ]
Line_4 $$ classPKs = new long[0]-->Line_32 $$ if ((companyId != subscription.getCompanyId()) || (userId != subscription.getUserId()) || (classNameId != subscription.getClassNameId()) || !ArrayUtil.contains(classPKs, subscription.getClassPK())) [ FD ]
Line_4 $$ classPKs = new long[0]-->Line_25 $$ finderArgs = new Object[] [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_48 $$ query.append(StringUtil.merge(classPKs))[ FD ]
Line_11 $$ if (subscription == null) -->Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)[ CD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_39 $$ if (list == null) [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_65 $$ qPos.add(userId)[ FD ]
Line_4 $$ classPKs = new long[0]-->Line_6 $$ classPKs = ArrayUtil.unique(classPKs)[ FD ]
Line_6 $$ classPKs = ArrayUtil.unique(classPKs)-->Line_7 $$ Arrays.sort(classPKs)[ FD ]
Line_39 $$ if (list == null) -->Line_40 $$ StringBundler query = new StringBundler()[ CD ]
Line_25 $$ finderArgs = new Object[] -->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)-->Line_74 $$ cacheResult(list)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_30 $$ if ((list != null) && !list.isEmpty()) [ FD ]
Line_11 $$ if (subscription == null) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_39 $$ if (list == null) -->Line_53 $$ if (orderByComparator != null) [ CD ]
Line_10 $$ Subscription subscription = fetchByC_U_C_C(companyId, userId, classNameId, classPKs[0])-->Line_11 $$ if (subscription == null) [ FD ]
Line_63 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_64 $$ qPos.add(companyId)[ FD ]
Line_61 $$ session = openSession()-->Line_62 $$ Query q = session.createQuery(sql)[ FD ]
Line_11 $$ if (subscription == null) -->Line_15 $$ list.add(subscription)[ CD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_44 $$ query.append(_FINDER_COLUMN_C_U_C_C_CLASSNAMEID_2)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_74 $$ cacheResult(list)[ FD ]
Line_39 $$ if (list == null) -->Line_43 $$ query.append(_FINDER_COLUMN_C_U_C_C_USERID_2)[ CD ]
Line_22 $$ pagination = false-->Line_67 $$ if (!pagination) [ FD ]
Line_9 $$ if (classPKs.length == 1) -->Line_10 $$ Subscription subscription = fetchByC_U_C_C(companyId, userId, classNameId, classPKs[0])[ CD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_70 $$ list = Collections.unmodifiableList(list)[ FD ]
Line_33 $$ list = null-->Line_74 $$ cacheResult(list)[ FD ]
Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_25 $$ finderArgs = new Object[] -->Line_77 $$ finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs)[ FD ]
Line_45 $$ if (classPKs.length > 0) -->Line_50 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_6 $$ classPKs = ArrayUtil.unique(classPKs)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_33 $$ list = null[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ FD ]
Line_33 $$ list = null-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_19 $$ boolean pagination = true-->Line_67 $$ if (!pagination) [ FD ]
Line_10 $$ Subscription subscription = fetchByC_U_C_C(companyId, userId, classNameId, classPKs[0])-->Line_15 $$ list.add(subscription)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_54 $$ appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS, orderByComparator)[ FD ]
Line_61 $$ session = openSession()-->Line_80 $$ closeSession(session)[ FD ]
Line_6 $$ classPKs = ArrayUtil.unique(classPKs)-->Line_48 $$ query.append(StringUtil.merge(classPKs))[ FD ]
Line_20 $$ Object[] finderArgs = null-->Line_23 $$ finderArgs = new Object[] [ FD ]
Line_45 $$ if (classPKs.length > 0) -->Line_49 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_70 $$ list = Collections.unmodifiableList(list)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_49 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_20 $$ Object[] finderArgs = null-->Line_25 $$ finderArgs = new Object[] [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_7 $$ Arrays.sort(classPKs)[ FD ]
Line_20 $$ Object[] finderArgs = null-->Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)[ FD ]
Line_62 $$ Query q = session.createQuery(sql)-->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ FD ]
Line_33 $$ list = null-->Line_39 $$ if (list == null) [ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_39 $$ if (list == null) [ CD ]
Line_58 $$ String sql = query.toString()-->Line_62 $$ Query q = session.createQuery(sql)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_23 $$ finderArgs = new Object[] [ FD ]
Line_4 $$ classPKs = new long[0]-->Line_7 $$ Arrays.sort(classPKs)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_43 $$ query.append(_FINDER_COLUMN_C_U_C_C_USERID_2)[ FD ]
Line_20 $$ Object[] finderArgs = null-->Line_77 $$ finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_21 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) [ CD ]
Line_19 $$ boolean pagination = true-->Line_22 $$ pagination = false[ FD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_52 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)-->Line_74 $$ cacheResult(list)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_64 $$ qPos.add(companyId)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_3 $$ if (classPKs == null) [ CD ]
Line_55 $$ if (pagination) -->Line_56 $$ query.append(SubscriptionModelImpl.ORDER_BY_JPQL)[ CD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_20 $$ Object[] finderArgs = null[ CD ]
Line_22 $$ pagination = false-->Line_53 $$ if (orderByComparator != null) [ FD ]
Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_45 $$ if (classPKs.length > 0) -->Line_46 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_62 $$ Query q = session.createQuery(sql)-->Line_63 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_39 $$ if (list == null) -->Line_58 $$ String sql = query.toString()[ CD ]
Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)-->Line_70 $$ list = Collections.unmodifiableList(list)[ FD ]
Line_70 $$ list = Collections.unmodifiableList(list)-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_23 $$ finderArgs = new Object[] -->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_56 $$ query.append(SubscriptionModelImpl.ORDER_BY_JPQL)[ FD ]
Line_67 $$ if (!pagination) -->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ CD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_10 $$ Subscription subscription = fetchByC_U_C_C(companyId, userId, classNameId, classPKs[0])[ FD ]
Line_32 $$ if ((companyId != subscription.getCompanyId()) || (userId != subscription.getUserId()) || (classNameId != subscription.getClassNameId()) || !ArrayUtil.contains(classPKs, subscription.getClassPK())) -->Line_33 $$ list = null[ CD ]
Line_33 $$ list = null-->Line_72 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end)[ FD ]
Line_33 $$ list = null-->Line_70 $$ list = Collections.unmodifiableList(list)[ FD ]
Line_4 $$ classPKs = new long[0]-->Line_48 $$ query.append(StringUtil.merge(classPKs))[ FD ]
Line_19 $$ boolean pagination = true-->Line_53 $$ if (orderByComparator != null) [ FD ]
Line_11 $$ if (subscription == null) -->Line_16 $$ return list[ CD ]
Line_3 $$ if (classPKs == null) -->Line_4 $$ classPKs = new long[0][ CD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_69 $$ Collections.sort(list)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_68 $$ list = (List<Subscription>) QueryUtil.list(q, getDialect(), start, end, false)[ FD ]
Line_20 $$ Object[] finderArgs = null-->Line_75 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, list)[ FD ]
Line_59 $$ Session session = null-->Line_80 $$ closeSession(session)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_9 $$ if (classPKs.length == 1) [ CD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_50 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_66 $$ qPos.add(classNameId)[ FD ]
Line_28 $$ if (retrieveFromCache) -->Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)[ CD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_58 $$ String sql = query.toString()[ FD ]
Line_67 $$ if (!pagination) -->Line_70 $$ list = Collections.unmodifiableList(list)[ CD ]
Line_39 $$ if (list == null) -->Line_41 $$ query.append(_SQL_SELECT_SUBSCRIPTION_WHERE)[ CD ]
Line_53 $$ if (orderByComparator != null) -->Line_54 $$ appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS, orderByComparator)[ CD ]
Line_23 $$ finderArgs = new Object[] -->Line_77 $$ finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs)[ FD ]
Line_28 $$ if (retrieveFromCache) -->Line_30 $$ if ((list != null) && !list.isEmpty()) [ CD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_47 $$ query.append(_FINDER_COLUMN_C_U_C_C_CLASSPK_7)[ FD ]
Line_14 $$ List<Subscription> list = new ArrayList<Subscription>(1)-->Line_15 $$ list.add(subscription)[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_4 $$ classPKs = new long[0][ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_41 $$ query.append(_SQL_SELECT_SUBSCRIPTION_WHERE)[ FD ]
Line_39 $$ if (list == null) -->Line_59 $$ Session session = null[ CD ]
Line_5 $$ if (classPKs.length > 1) -->Line_7 $$ Arrays.sort(classPKs)[ CD ]
Line_21 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS) && (orderByComparator == null)) -->Line_25 $$ finderArgs = new Object[] [ CD ]
Line_39 $$ if (list == null) -->Line_52 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ CD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_48 $$ query.append(StringUtil.merge(classPKs))[ FD ]
Line_2 $$ public List<Subscription> findByC_U_C_C(long companyId, long userId, long classNameId, long[] classPKs, int start, int end, OrderByComparator<Subscription> orderByComparator, boolean retrieveFromCache) -->Line_54 $$ appendOrderByComparator(query, _ORDER_BY_ENTITY_ALIAS, orderByComparator)[ FD ]
Line_40 $$ StringBundler query = new StringBundler()-->Line_46 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_5 $$ if (classPKs.length > 1) -->Line_6 $$ classPKs = ArrayUtil.unique(classPKs)[ CD ]
Line_29 $$ list = (List<Subscription>) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_FIND_BY_C_U_C_C, finderArgs, this)-->Line_39 $$ if (list == null) [ FD ]
Line_53 $$ if (orderByComparator != null) -->Line_55 $$ if (pagination) [ CD ]
