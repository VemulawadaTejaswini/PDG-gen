Line_24 $$ int exitOffset = end-->Line_26 $$ if (!exitPoints.contains(exitOffset)) [ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_13 $$ processGoto(flow, start, end, exitPoints, exitStatements, instruction, classesFilter, findStatement(flow, offset))[ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_3 $$ if (end == start) [ CD ]
Line_7 $$ final Collection<PsiStatement> exitStatements = new THashSet<PsiStatement>()-->Line_13 $$ processGoto(flow, start, end, exitPoints, exitStatements, instruction, classesFilter, findStatement(flow, offset))[ FD ]
Line_23 $$ if (offset >= end - 1) -->Line_24 $$ int exitOffset = end[ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_4 $$ exitPoints.add(end)[ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_10 $$ processGotoStatement(classesFilter, exitStatements, findStatement(flow, offset))[ FD ]
Line_3 $$ if (end == start) -->Line_4 $$ exitPoints.add(end)[ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_10 $$ processGotoStatement(classesFilter, exitStatements, findStatement(flow, offset))[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() [ CD ]
Line_24 $$ int exitOffset = end-->Line_27 $$ exitPoints.add(exitOffset)[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_25 $$ exitOffset = promoteThroughGotoChain(flow, exitOffset)[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_36 $$ return exitStatements[ CD ]
Line_23 $$ if (offset >= end - 1) -->Line_26 $$ if (!exitPoints.contains(exitOffset)) [ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_7 $$ final Collection<PsiStatement> exitStatements = new THashSet<PsiStatement>()[ CD ]
Line_25 $$ exitOffset = promoteThroughGotoChain(flow, exitOffset)-->Line_26 $$ if (!exitPoints.contains(exitOffset)) [ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_23 $$ if (offset >= end - 1) [ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_35 $$ depthFirstSearch(flow, visitor, start, end)[ CD ]
Line_7 $$ final Collection<PsiStatement> exitStatements = new THashSet<PsiStatement>()-->Line_10 $$ processGotoStatement(classesFilter, exitStatements, findStatement(flow, offset))[ FD ]
Line_3 $$ if (end == start) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_20 $$ visitInstruction(instruction, offset, nextOffset)[ CD ]
Line_23 $$ if (offset >= end - 1) -->Line_25 $$ exitOffset = promoteThroughGotoChain(flow, exitOffset)[ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_27 $$ exitPoints.add(exitOffset)[ FD ]
Line_25 $$ exitOffset = promoteThroughGotoChain(flow, exitOffset)-->Line_27 $$ exitPoints.add(exitOffset)[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_13 $$ processGoto(flow, start, end, exitPoints, exitStatements, instruction, classesFilter, findStatement(flow, offset))[ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_35 $$ depthFirstSearch(flow, visitor, start, end)[ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_23 $$ if (offset >= end - 1) [ CD ]
Line_26 $$ if (!exitPoints.contains(exitOffset)) -->Line_27 $$ exitPoints.add(exitOffset)[ CD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_20 $$ visitInstruction(instruction, offset, nextOffset)[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_3 $$ if (end == start) [ FD ]
Line_24 $$ int exitOffset = end-->Line_25 $$ exitOffset = promoteThroughGotoChain(flow, exitOffset)[ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_10 $$ processGotoStatement(classesFilter, exitStatements, findStatement(flow, offset))[ CD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_32 $$ return null[ CD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_26 $$ if (!exitPoints.contains(exitOffset)) [ FD ]
Line_8 $$ InstructionClientVisitor visitor = new InstructionClientVisitor() -->Line_13 $$ processGoto(flow, start, end, exitPoints, exitStatements, instruction, classesFilter, findStatement(flow, offset))[ FD ]
Line_2 $$ public static Collection<PsiStatement> findExitPointsAndStatements(final ControlFlow flow, final int start, final int end, final IntArrayList exitPoints, final Class... classesFilter) -->Line_35 $$ depthFirstSearch(flow, visitor, start, end)[ FD ]
