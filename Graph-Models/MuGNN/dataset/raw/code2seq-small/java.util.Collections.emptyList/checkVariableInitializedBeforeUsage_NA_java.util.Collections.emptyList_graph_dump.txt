Line_74 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) -->Line_75 $$ offset = 0[ CD ]
Line_31 $$ final PsiElement parent = topBlock.getParent()-->Line_37 $$ if (parent instanceof PsiMethod) [ FD ]
Line_15 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_17 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)[ FD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_12 $$ if (topBlock == null)[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_72 $$ final PsiField anotherField = PsiTreeUtil.getTopmostParentOfType(expression, PsiField.class)[ CD ]
Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_47 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_77 $$ block = null[ CD ]
Line_85 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) -->Line_86 $$ return null[ CD ]
Line_105 $$ for (PsiClassInitializer initializer : initializers) -->Line_112 $$ if (shouldCheckInitializerOrder && startOffset < initializer.getTextRange().getStartOffset())[ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_36 $$ final PsiClass aClass[ CD ]
Line_68 $$ aClass = field.getContainingClass()-->Line_102 $$ if (aClass != null) [ FD ]
Line_9 $$ final PsiElement topBlock-->Line_29 $$ if (topBlock == null)[ FD ]
Line_122 $$ if (topBlock == null)-->Line_123 $$ return null[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ CD ]
Line_62 $$ block = classInitializer.getBody()-->Line_107 $$ if (body == block)[ FD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_127 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_29 $$ if (topBlock == null)[ FD ]
Line_59 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_63 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_130 $$ codeBlockProblems = Collections.emptyList()-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_90 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_91 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_130 $$ codeBlockProblems = Collections.emptyList()-->Line_136 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_38 $$ PsiMethod constructor = (PsiMethod) parent-->Line_57 $$ aClass = constructor.getContainingClass()[ FD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_31 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_90 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_95 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ CD ]
Line_35 $$ final PsiCodeBlock block-->Line_62 $$ block = classInitializer.getBody()[ FD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_136 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_31 $$ final PsiElement parent = topBlock.getParent()[ CD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_57 $$ aClass = constructor.getContainingClass()[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_68 $$ aClass = field.getContainingClass()[ CD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_130 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_36 $$ final PsiClass aClass-->Line_68 $$ aClass = field.getContainingClass()[ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_102 $$ if (aClass != null) [ CD ]
Line_57 $$ aClass = constructor.getContainingClass()-->Line_102 $$ if (aClass != null) [ FD ]
Line_35 $$ final PsiCodeBlock block-->Line_107 $$ if (body == block)[ FD ]
Line_15 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_84 $$ PsiCodeBlock body = constructor.getBody()-->Line_107 $$ if (body == block)[ FD ]
Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_136 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_36 $$ final PsiClass aClass-->Line_63 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_31 $$ final PsiElement parent = topBlock.getParent()-->Line_58 $$ if (parent instanceof PsiClassInitializer) [ FD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_15 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null[ CD ]
Line_139 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()-->Line_140 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable))[ FD ]
Line_91 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_95 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ FD ]
Line_4 $$ if (variable instanceof ImplicitVariable)-->Line_5 $$ return null[ CD ]
Line_9 $$ final PsiElement topBlock-->Line_31 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_73 $$ int offset = startOffset-->Line_75 $$ offset = 0[ FD ]
Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_72 $$ final PsiField anotherField = PsiTreeUtil.getTopmostParentOfType(expression, PsiField.class)-->Line_74 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_47 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_95 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ FD ]
Line_36 $$ final PsiClass aClass-->Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_31 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_9 $$ final PsiElement topBlock-->Line_12 $$ if (topBlock == null)[ FD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ CD ]
Line_59 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_60 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_141 $$ if (variable instanceof PsiField) [ CD ]
Line_56 $$ block = constructor.getBody()-->Line_77 $$ block = null[ FD ]
Line_77 $$ block = null-->Line_107 $$ if (body == block)[ FD ]
Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_91 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_38 $$ PsiMethod constructor = (PsiMethod) parent-->Line_56 $$ block = constructor.getBody()[ FD ]
Line_57 $$ aClass = constructor.getContainingClass()-->Line_63 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_35 $$ final PsiCodeBlock block[ CD ]
Line_138 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)-->Line_139 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()[ FD ]
Line_9 $$ final PsiElement topBlock-->Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_39 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))-->Line_40 $$ return null[ CD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_127 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_20 $$ if (variable instanceof PsiField) [ CD ]
Line_105 $$ for (PsiClassInitializer initializer : initializers) -->Line_114 $$ if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_37 $$ if (parent instanceof PsiMethod) [ CD ]
Line_38 $$ PsiMethod constructor = (PsiMethod) parent-->Line_84 $$ PsiCodeBlock body = constructor.getBody()[ FD ]
Line_63 $$ aClass = classInitializer.getContainingClass()-->Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_84 $$ PsiCodeBlock body = constructor.getBody()-->Line_85 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_20 $$ if (variable instanceof PsiField) -->Line_29 $$ if (topBlock == null)[ CD ]
Line_52 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) -->Line_53 $$ return null[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_74 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_56 $$ block = constructor.getBody()-->Line_62 $$ block = classInitializer.getBody()[ FD ]
Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_90 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ FD ]
Line_137 $$ final String name = expression.getElement().getText()-->Line_138 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)[ FD ]
Line_62 $$ block = classInitializer.getBody()-->Line_77 $$ block = null[ FD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_115 $$ if (variableDefinitelyAssignedIn(variable, body))-->Line_116 $$ return null[ CD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_29 $$ if (topBlock == null)[ FD ]
Line_9 $$ final PsiElement topBlock-->Line_127 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_63 $$ aClass = classInitializer.getContainingClass()-->Line_102 $$ if (aClass != null) [ FD ]
Line_12 $$ if (topBlock == null)-->Line_13 $$ return null[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_62 $$ block = classInitializer.getBody()[ CD ]
Line_68 $$ aClass = field.getContainingClass()-->Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) -->Line_70 $$ return null[ CD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_132 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_132 $$ codeBlockProblems = Collections.emptyList()-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_17 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)-->Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_132 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_15 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_16 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) [ FD ]
Line_59 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_62 $$ block = classInitializer.getBody()[ FD ]
Line_90 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_91 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ CD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_16 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) [ CD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_56 $$ block = constructor.getBody()[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_60 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))[ CD ]
Line_9 $$ final PsiElement topBlock-->Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)[ FD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)[ FD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_39 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))[ CD ]
Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_125 $$ if (codeBlockProblems == null) [ FD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ CD ]
Line_9 $$ final PsiElement topBlock-->Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_38 $$ PsiMethod constructor = (PsiMethod) parent[ CD ]
Line_141 $$ if (variable instanceof PsiField) -->Line_142 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createModifierListFix(variable, PsiModifier.FINAL, false, false))[ CD ]
Line_57 $$ aClass = constructor.getContainingClass()-->Line_68 $$ aClass = field.getContainingClass()[ FD ]
Line_114 $$ if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) -->Line_115 $$ if (variableDefinitelyAssignedIn(variable, body))[ CD ]
Line_95 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()-->Line_96 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) [ FD ]
Line_16 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) -->Line_17 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)[ CD ]
Line_60 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))-->Line_61 $$ return null[ CD ]
Line_139 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()-->Line_142 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createModifierListFix(variable, PsiModifier.FINAL, false, false))[ FD ]
Line_9 $$ final PsiElement topBlock-->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_37 $$ if (parent instanceof PsiMethod) -->Line_58 $$ if (parent instanceof PsiClassInitializer) [ CD ]
Line_29 $$ if (topBlock == null)-->Line_30 $$ return null[ CD ]
Line_6 $$ if (!PsiUtil.isAccessedForReading(expression))-->Line_7 $$ return null[ CD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_124 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_125 $$ if (codeBlockProblems == null) -->Line_134 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ CD ]
Line_132 $$ codeBlockProblems = Collections.emptyList()-->Line_136 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_96 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) -->Line_97 $$ return null[ CD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_144 $$ return highlightInfo[ CD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_12 $$ if (topBlock == null)[ FD ]
Line_10 $$ if (variable.hasInitializer()) -->Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)[ CD ]
Line_38 $$ PsiMethod constructor = (PsiMethod) parent-->Line_39 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_138 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)[ CD ]
Line_9 $$ final PsiElement topBlock-->Line_122 $$ if (topBlock == null)[ FD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_63 $$ aClass = classInitializer.getContainingClass()[ CD ]
Line_127 $$ final ControlFlow controlFlow = getControlFlow(topBlock)-->Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)[ FD ]
Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_47 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ CD ]
Line_90 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_96 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) [ CD ]
Line_35 $$ final PsiCodeBlock block-->Line_77 $$ block = null[ FD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_73 $$ int offset = startOffset[ CD ]
Line_58 $$ if (parent instanceof PsiClassInitializer) -->Line_59 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent[ CD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_137 $$ final String name = expression.getElement().getText()[ CD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_139 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()[ CD ]
Line_19 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_122 $$ if (topBlock == null)[ FD ]
Line_130 $$ codeBlockProblems = Collections.emptyList()-->Line_132 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_46 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_52 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ CD ]
Line_36 $$ final PsiClass aClass-->Line_57 $$ aClass = constructor.getContainingClass()[ FD ]
Line_105 $$ for (PsiClassInitializer initializer : initializers) -->Line_106 $$ PsiCodeBlock body = initializer.getBody()[ FD ]
Line_136 $$ if (codeBlockProblems.contains(expression)) -->Line_140 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable))[ CD ]
Line_11 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_122 $$ if (topBlock == null)[ FD ]
Line_128 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_130 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_35 $$ final PsiCodeBlock block-->Line_56 $$ block = constructor.getBody()[ FD ]
Line_56 $$ block = constructor.getBody()-->Line_107 $$ if (body == block)[ FD ]
Line_63 $$ aClass = classInitializer.getContainingClass()-->Line_68 $$ aClass = field.getContainingClass()[ FD ]
Line_84 $$ PsiCodeBlock body = constructor.getBody()-->Line_115 $$ if (variableDefinitelyAssignedIn(variable, body))[ FD ]
Line_57 $$ aClass = constructor.getContainingClass()-->Line_69 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_36 $$ final PsiClass aClass-->Line_102 $$ if (aClass != null) [ FD ]
