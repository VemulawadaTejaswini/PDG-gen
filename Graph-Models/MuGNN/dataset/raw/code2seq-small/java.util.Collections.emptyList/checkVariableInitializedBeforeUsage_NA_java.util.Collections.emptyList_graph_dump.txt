Line_5 $$ if (!PsiUtil.isAccessedForReading(expression))-->Line_6 $$ return null[ CD ]
Line_53 $$ aClass = classInitializer.getContainingClass()-->Line_66 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_118 $$ final String name = expression.getElement().getText()-->Line_119 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)[ FD ]
Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_117 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ CD ]
Line_86 $$ if (aClass != null) -->Line_87 $$ final PsiClassInitializer[] initializers = aClass.getInitializers()[ CD ]
Line_30 $$ final PsiCodeBlock block-->Line_46 $$ block = constructor.getBody()[ FD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_36 $$ if (variable.hasModifierProperty(PsiModifier.STATIC))[ CD ]
Line_119 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)-->Line_120 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_8 $$ final PsiElement topBlock[ CD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_52 $$ block = classInitializer.getBody()[ CD ]
Line_53 $$ aClass = classInitializer.getContainingClass()-->Line_87 $$ final PsiClassInitializer[] initializers = aClass.getInitializers()[ FD ]
Line_56 $$ aClass = field.getContainingClass()-->Line_66 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)[ CD ]
Line_56 $$ aClass = field.getContainingClass()-->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_70 $$ PsiCodeBlock body = constructor.getBody()-->Line_90 $$ if (body == block)[ FD ]
Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_77 $$ if (offset < redirectedConstructor.getTextRange().getStartOffset())[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_80 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) [ FD ]
Line_120 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()-->Line_123 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createModifierListFix(variable, PsiModifier.FINAL, false, false))[ FD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_74 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)[ FD ]
Line_80 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) -->Line_81 $$ return null[ CD ]
Line_49 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_50 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_70 $$ PsiCodeBlock body = constructor.getBody()-->Line_96 $$ if (variableDefinitelyAssignedIn(variable, body))[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_121 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable))[ FD ]
Line_11 $$ if (topBlock == null)-->Line_12 $$ return null[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_34 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_49 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_53 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_11 $$ if (topBlock == null)[ CD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_11 $$ if (topBlock == null)[ FD ]
Line_8 $$ final PsiElement topBlock-->Line_25 $$ if (topBlock == null)[ FD ]
Line_61 $$ int offset = startOffset-->Line_68 $$ if (offset < constructor.getTextRange().getStartOffset())[ FD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_70 $$ PsiCodeBlock body = constructor.getBody()[ FD ]
Line_52 $$ block = classInitializer.getBody()-->Line_92 $$ boolean shouldCheckInitializerOrder = block == null || block.getParent() instanceof PsiClassInitializer[ FD ]
Line_31 $$ final PsiClass aClass-->Line_87 $$ final PsiClassInitializer[] initializers = aClass.getInitializers()[ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_106 $$ if (codeBlockProblems == null) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_3 $$ if (variable instanceof ImplicitVariable)[ CD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_27 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_20 $$ if (!variable.hasModifierProperty(PsiModifier.FINAL))-->Line_21 $$ return null[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_14 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null[ FD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_20 $$ if (!variable.hasModifierProperty(PsiModifier.FINAL))[ CD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_123 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createModifierListFix(variable, PsiModifier.FINAL, false, false))[ FD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_47 $$ aClass = constructor.getContainingClass()[ CD ]
Line_8 $$ final PsiElement topBlock-->Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_113 $$ codeBlockProblems = Collections.emptyList()-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_103 $$ if (topBlock == null)[ CD ]
Line_31 $$ final PsiClass aClass-->Line_56 $$ aClass = field.getContainingClass()[ FD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_125 $$ return highlightInfo[ CD ]
Line_22 $$ if (PsiUtil.findEnclosingConstructorOrInitializer(expression) == null && HighlightUtil.findEnclosingFieldInitializer(expression) == null) -->Line_23 $$ return null[ CD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_48 $$ if (parent instanceof PsiClassInitializer) [ CD ]
Line_108 $$ final ControlFlow controlFlow = getControlFlow(topBlock)-->Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)[ FD ]
Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_36 $$ if (variable.hasModifierProperty(PsiModifier.STATIC))[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_65 $$ block = null[ CD ]
Line_79 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()-->Line_80 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) [ FD ]
Line_8 $$ final PsiElement topBlock-->Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)[ FD ]
Line_27 $$ final PsiElement parent = topBlock.getParent()-->Line_32 $$ if (parent instanceof PsiMethod) [ FD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_19 $$ if (variable instanceof PsiField) [ CD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_22 $$ if (PsiUtil.findEnclosingConstructorOrInitializer(expression) == null && HighlightUtil.findEnclosingFieldInitializer(expression) == null) [ CD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_30 $$ final PsiCodeBlock block[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_50 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_71 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_113 $$ codeBlockProblems = Collections.emptyList()-->Line_117 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_62 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_42 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) -->Line_43 $$ return null[ CD ]
Line_46 $$ block = constructor.getBody()-->Line_65 $$ block = null[ FD ]
Line_30 $$ final PsiCodeBlock block-->Line_92 $$ boolean shouldCheckInitializerOrder = block == null || block.getParent() instanceof PsiClassInitializer[ FD ]
Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)-->Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ FD ]
Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_79 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ FD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_15 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) [ CD ]
Line_60 $$ final PsiField anotherField = PsiTreeUtil.getTopmostParentOfType(expression, PsiField.class)-->Line_62 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_68 $$ if (offset < constructor.getTextRange().getStartOffset())[ FD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_56 $$ aClass = field.getContainingClass()[ FD ]
Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)-->Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_117 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_14 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null[ CD ]
Line_3 $$ if (variable instanceof ImplicitVariable)-->Line_4 $$ return null[ CD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_46 $$ block = constructor.getBody()[ CD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) [ FD ]
Line_8 $$ final PsiElement topBlock-->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_77 $$ if (offset < redirectedConstructor.getTextRange().getStartOffset())[ FD ]
Line_14 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_65 $$ block = null-->Line_92 $$ boolean shouldCheckInitializerOrder = block == null || block.getParent() instanceof PsiClassInitializer[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_3 $$ if (variable instanceof ImplicitVariable)[ FD ]
Line_71 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) -->Line_72 $$ return null[ CD ]
Line_28 $$ if (inInnerClass(expression, ((PsiField) variable).getContainingClass(), containingFile))-->Line_29 $$ return null[ CD ]
Line_8 $$ final PsiElement topBlock-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()-->Line_96 $$ if (variableDefinitelyAssignedIn(variable, body))[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_28 $$ if (inInnerClass(expression, ((PsiField) variable).getContainingClass(), containingFile))[ FD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)[ CD ]
Line_111 $$ codeBlockProblems = Collections.emptyList()-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_49 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent[ CD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_47 $$ aClass = constructor.getContainingClass()[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_60 $$ final PsiField anotherField = PsiTreeUtil.getTopmostParentOfType(expression, PsiField.class)[ CD ]
Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_111 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_56 $$ aClass = field.getContainingClass()-->Line_86 $$ if (aClass != null) [ FD ]
Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_80 $$ if (redirectedBody != null && variableDefinitelyAssignedIn(variable, redirectedBody)) [ CD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_122 $$ if (variable instanceof PsiField) [ CD ]
Line_14 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_15 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) [ FD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_25 $$ if (topBlock == null)[ CD ]
Line_31 $$ final PsiClass aClass-->Line_66 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_66 $$ final PsiMethod[] constructors = aClass.getConstructors()[ FD ]
Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ CD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_32 $$ if (parent instanceof PsiMethod) [ CD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_86 $$ if (aClass != null) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_95 $$ if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_118 $$ final String name = expression.getElement().getText()[ CD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_121 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable))[ CD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_27 $$ final PsiElement parent = topBlock.getParent()[ CD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_34 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))[ FD ]
Line_46 $$ block = constructor.getBody()-->Line_92 $$ boolean shouldCheckInitializerOrder = block == null || block.getParent() instanceof PsiClassInitializer[ FD ]
Line_65 $$ block = null-->Line_90 $$ if (body == block)[ FD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_50 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))[ CD ]
Line_62 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) -->Line_63 $$ offset = 0[ CD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_61 $$ int offset = startOffset[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_5 $$ if (!PsiUtil.isAccessedForReading(expression))[ FD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_53 $$ aClass = classInitializer.getContainingClass()[ CD ]
Line_46 $$ block = constructor.getBody()-->Line_90 $$ if (body == block)[ FD ]
Line_30 $$ final PsiCodeBlock block-->Line_90 $$ if (body == block)[ FD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_25 $$ if (topBlock == null)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_9 $$ if (variable.hasInitializer()) [ CD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_87 $$ final PsiClassInitializer[] initializers = aClass.getInitializers()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_42 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_9 $$ if (variable.hasInitializer()) [ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ CD ]
Line_27 $$ final PsiElement parent = topBlock.getParent()-->Line_48 $$ if (parent instanceof PsiClassInitializer) [ FD ]
Line_106 $$ if (codeBlockProblems == null) -->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ CD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_33 $$ PsiMethod constructor = (PsiMethod) parent[ CD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_42 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ CD ]
Line_96 $$ if (variableDefinitelyAssignedIn(variable, body))-->Line_97 $$ return null[ CD ]
Line_63 $$ offset = 0-->Line_68 $$ if (offset < constructor.getTextRange().getStartOffset())[ FD ]
Line_30 $$ final PsiCodeBlock block-->Line_65 $$ block = null[ FD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_108 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_118 $$ final String name = expression.getElement().getText()[ FD ]
Line_122 $$ if (variable instanceof PsiField) -->Line_123 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createModifierListFix(variable, PsiModifier.FINAL, false, false))[ CD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_31 $$ final PsiClass aClass[ CD ]
Line_30 $$ final PsiCodeBlock block-->Line_52 $$ block = classInitializer.getBody()[ FD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ CD ]
Line_61 $$ int offset = startOffset-->Line_77 $$ if (offset < redirectedConstructor.getTextRange().getStartOffset())[ FD ]
Line_39 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_36 $$ if (variable.hasModifierProperty(PsiModifier.STATIC))-->Line_37 $$ return null[ CD ]
Line_55 $$ final PsiField field = (PsiField) variable-->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()-->Line_90 $$ if (body == block)[ FD ]
Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_77 $$ if (offset < redirectedConstructor.getTextRange().getStartOffset())[ CD ]
Line_9 $$ if (variable.hasInitializer()) -->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ CD ]
Line_56 $$ aClass = field.getContainingClass()-->Line_87 $$ final PsiClassInitializer[] initializers = aClass.getInitializers()[ FD ]
Line_92 $$ boolean shouldCheckInitializerOrder = block == null || block.getParent() instanceof PsiClassInitializer-->Line_93 $$ if (shouldCheckInitializerOrder && startOffset < initializer.getTextRange().getStartOffset())[ FD ]
Line_8 $$ final PsiElement topBlock-->Line_27 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_111 $$ codeBlockProblems = Collections.emptyList()-->Line_113 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_120 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()[ CD ]
Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_79 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ CD ]
Line_32 $$ if (parent instanceof PsiMethod) -->Line_34 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))[ CD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_103 $$ if (topBlock == null)[ FD ]
Line_103 $$ if (topBlock == null)-->Line_104 $$ return null[ CD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_108 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_55 $$ final PsiField field = (PsiField) variable-->Line_62 $$ if (anotherField != null && anotherField.getContainingClass() == aClass && !field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_25 $$ if (topBlock == null)-->Line_26 $$ return null[ CD ]
Line_8 $$ final PsiElement topBlock-->Line_103 $$ if (topBlock == null)[ FD ]
Line_8 $$ final PsiElement topBlock-->Line_108 $$ final ControlFlow controlFlow = getControlFlow(topBlock)[ FD ]
Line_61 $$ int offset = startOffset-->Line_63 $$ offset = 0[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_20 $$ if (!variable.hasModifierProperty(PsiModifier.FINAL))[ FD ]
Line_120 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()-->Line_121 $$ QuickFixAction.registerQuickFixAction(highlightInfo, QUICK_FIX_FACTORY.createAddVariableInitializerFix(variable))[ FD ]
Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)-->Line_25 $$ if (topBlock == null)[ FD ]
Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()-->Line_71 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)-->Line_79 $$ PsiCodeBlock redirectedBody = redirectedConstructor.getBody()[ FD ]
Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)-->Line_40 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)[ FD ]
Line_15 $$ if (scope instanceof PsiCodeBlock && scope.getParent() instanceof PsiSwitchStatement) -->Line_16 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)[ CD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_122 $$ if (variable instanceof PsiField) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_127 $$ return null[ CD ]
Line_55 $$ final PsiField field = (PsiField) variable-->Line_56 $$ aClass = field.getContainingClass()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_22 $$ if (PsiUtil.findEnclosingConstructorOrInitializer(expression) == null && HighlightUtil.findEnclosingFieldInitializer(expression) == null) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ CD ]
Line_95 $$ if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) -->Line_96 $$ if (variableDefinitelyAssignedIn(variable, body))[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_96 $$ if (variableDefinitelyAssignedIn(variable, body))[ FD ]
Line_38 $$ final List<PsiMethod> redirectedConstructors = JavaHighlightUtil.getChainedConstructors(constructor)-->Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_16 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)-->Line_18 $$ topBlock = FileTypeUtils.isInServerPageFile(scope) && scope instanceof PsiFile ? scope : PsiUtil.getTopLevelEnclosingCodeBlock(expression, scope)[ FD ]
Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) -->Line_58 $$ return null[ CD ]
Line_33 $$ PsiMethod constructor = (PsiMethod) parent-->Line_46 $$ block = constructor.getBody()[ FD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_53 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_34 $$ if (!containingFile.getManager().areElementsEquivalent(constructor.getContainingClass(), ((PsiField) variable).getContainingClass()))-->Line_35 $$ return null[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_5 $$ if (!PsiUtil.isAccessedForReading(expression))[ CD ]
Line_31 $$ final PsiClass aClass-->Line_53 $$ aClass = classInitializer.getContainingClass()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_7 $$ int startOffset = expression.getTextRange().getStartOffset()[ FD ]
Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_28 $$ if (inInnerClass(expression, ((PsiField) variable).getContainingClass(), containingFile))[ CD ]
Line_52 $$ block = classInitializer.getBody()-->Line_65 $$ block = null[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_19 $$ if (variable instanceof PsiField) [ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_7 $$ int startOffset = expression.getTextRange().getStartOffset()[ CD ]
Line_31 $$ final PsiClass aClass-->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_47 $$ aClass = constructor.getContainingClass()-->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_66 $$ final PsiMethod[] constructors = aClass.getConstructors()[ CD ]
Line_8 $$ final PsiElement topBlock-->Line_11 $$ if (topBlock == null)[ FD ]
Line_75 $$ for (int j = 0; redirectedConstructors != null && j < redirectedConstructors.size(); j++) -->Line_76 $$ PsiMethod redirectedConstructor = redirectedConstructors.get(j)[ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_111 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_103 $$ if (topBlock == null)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_106 $$ if (codeBlockProblems == null) [ CD ]
Line_88 $$ for (PsiClassInitializer initializer : initializers) -->Line_95 $$ if (initializer.hasModifierProperty(PsiModifier.STATIC) == variable.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_50 $$ if (!containingFile.getManager().areElementsEquivalent(classInitializer.getContainingClass(), ((PsiField) variable).getContainingClass()))-->Line_51 $$ return null[ CD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)[ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_115 $$ uninitializedVarProblems.put(topBlock, codeBlockProblems)[ FD ]
Line_53 $$ aClass = classInitializer.getContainingClass()-->Line_86 $$ if (aClass != null) [ FD ]
Line_70 $$ PsiCodeBlock body = constructor.getBody()-->Line_71 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_14 $$ PsiElement scope = variable instanceof PsiField ? ((PsiField) variable).getContainingClass() : variable.getParent() != null ? variable.getParent().getParent() : null-->Line_16 $$ scope = PsiTreeUtil.getParentOfType(scope, PsiCodeBlock.class)[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)[ FD ]
Line_53 $$ aClass = classInitializer.getContainingClass()-->Line_57 $$ if (aClass == null || isFieldInitializedInOtherFieldInitializer(aClass, field, field.hasModifierProperty(PsiModifier.STATIC))) [ FD ]
Line_10 $$ topBlock = PsiUtil.getVariableCodeBlock(variable, variable)-->Line_27 $$ final PsiElement parent = topBlock.getParent()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_117 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_31 $$ final PsiClass aClass-->Line_47 $$ aClass = constructor.getContainingClass()[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_55 $$ final PsiField field = (PsiField) variable[ CD ]
Line_109 $$ codeBlockProblems = ControlFlowUtil.getReadBeforeWriteLocals(controlFlow)-->Line_113 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_48 $$ if (parent instanceof PsiClassInitializer) -->Line_56 $$ aClass = field.getContainingClass()[ CD ]
Line_63 $$ offset = 0-->Line_77 $$ if (offset < redirectedConstructor.getTextRange().getStartOffset())[ FD ]
Line_52 $$ block = classInitializer.getBody()-->Line_90 $$ if (body == block)[ FD ]
Line_46 $$ block = constructor.getBody()-->Line_52 $$ block = classInitializer.getBody()[ FD ]
Line_105 $$ Collection<PsiReferenceExpression> codeBlockProblems = uninitializedVarProblems.get(topBlock)-->Line_113 $$ codeBlockProblems = Collections.emptyList()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_120 $$ HighlightInfo highlightInfo = HighlightInfo.newHighlightInfo(HighlightInfoType.ERROR).range(expression).descriptionAndTooltip(description).create()[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_60 $$ final PsiField anotherField = PsiTreeUtil.getTopmostParentOfType(expression, PsiField.class)[ FD ]
Line_111 $$ codeBlockProblems = Collections.emptyList()-->Line_117 $$ if (codeBlockProblems.contains(expression)) [ FD ]
Line_19 $$ if (variable instanceof PsiField) -->Line_86 $$ if (aClass != null) [ CD ]
Line_88 $$ for (PsiClassInitializer initializer : initializers) -->Line_93 $$ if (shouldCheckInitializerOrder && startOffset < initializer.getTextRange().getStartOffset())[ FD ]
Line_2 $$ public static HighlightInfo checkVariableInitializedBeforeUsage(@NotNull PsiReferenceExpression expression, @NotNull PsiVariable variable, @NotNull Map<PsiElement, Collection<PsiReferenceExpression>> uninitializedVarProblems, @NotNull PsiFile containingFile) -->Line_117 $$ if (codeBlockProblems.contains(expression)) [ CD ]
Line_117 $$ if (codeBlockProblems.contains(expression)) -->Line_119 $$ String description = JavaErrorMessages.message("variable.not.initialized", name)[ CD ]
Line_49 $$ final PsiClassInitializer classInitializer = (PsiClassInitializer) parent-->Line_52 $$ block = classInitializer.getBody()[ FD ]
Line_88 $$ for (PsiClassInitializer initializer : initializers) -->Line_89 $$ PsiCodeBlock body = initializer.getBody()[ FD ]
Line_41 $$ PsiCodeBlock body = redirectedConstructor.getBody()-->Line_42 $$ if (body != null && variableDefinitelyAssignedIn(variable, body)) [ FD ]
Line_31 $$ final PsiClass aClass-->Line_86 $$ if (aClass != null) [ FD ]
Line_53 $$ aClass = classInitializer.getContainingClass()-->Line_56 $$ aClass = field.getContainingClass()[ FD ]
