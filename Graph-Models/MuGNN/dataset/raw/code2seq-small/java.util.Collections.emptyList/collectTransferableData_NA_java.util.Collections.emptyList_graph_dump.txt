Line_37 $$ startOffsetToUse = firstLineStartOffset-->Line_50 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_36 $$ if (caret == firstCaret) -->Line_41 $$ String prevCaretSelectedText = prevCaret.getSelectedText()[ CD ]
Line_13 $$ final int firstLineStartOffset-->Line_16 $$ firstLineStartOffset = p.first[ FD ]
Line_48 $$ endOffset = caretSelectionEnd-->Line_50 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_36 $$ if (caret == firstCaret) -->Line_39 $$ startOffsetToUse = caretSelectionStart[ CD ]
Line_35 $$ int additionalShift = 0-->Line_45 $$ additionalShift = fillStringLength + 1[ FD ]
Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_16 $$ firstLineStartOffset = p.first[ CD ]
Line_31 $$ for (Caret caret : carets) -->Line_33 $$ int caretSelectionEnd = caret.getSelectionEnd()[ FD ]
Line_30 $$ Caret prevCaret = null-->Line_49 $$ prevCaret = caret[ FD ]
Line_9 $$ RichCopySettings settings = RichCopySettings.getInstance()-->Line_24 $$ EditorColorsScheme schemeToUse = settings.getColorsScheme(editor.getColorsScheme())[ FD ]
Line_10 $$ List<Caret> carets = editor.getCaretModel().getAllCarets()-->Line_11 $$ Caret firstCaret = carets.get(0)[ FD ]
Line_31 $$ for (Caret caret : carets) -->Line_36 $$ if (caret == firstCaret) [ FD ]
Line_28 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_60 $$ SyntaxInfo syntaxInfo = context.finish()[ FD ]
Line_23 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_26 $$ highlighter.setText(text)[ FD ]
Line_53 $$ MarkupIterator markupIterator = new MarkupIterator(text, new CompositeRangeIterator(schemeToUse, new HighlighterRangeIterator(highlighter, startOffsetToUse, endOffset), new MarkupModelRangeIterator(markupModel, schemeToUse, startOffsetToUse, endOffset)), schemeToUse)-->Line_57 $$ markupIterator.dispose()[ FD ]
Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_17 $$ indentSymbolsToStrip = p.second[ CD ]
Line_28 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_44 $$ context.addCharacter(endOffset + fillStringLength)[ FD ]
Line_13 $$ final int firstLineStartOffset-->Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_13 $$ final int firstLineStartOffset-->Line_37 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_16 $$ firstLineStartOffset = p.first-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_32 $$ int caretSelectionStart = caret.getSelectionStart()-->Line_39 $$ startOffsetToUse = caretSelectionStart[ FD ]
Line_31 $$ for (Caret caret : carets) -->Line_49 $$ prevCaret = caret[ FD ]
Line_12 $$ final int indentSymbolsToStrip-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_11 $$ Caret firstCaret = carets.get(0)-->Line_36 $$ if (caret == firstCaret) [ FD ]
Line_20 $$ indentSymbolsToStrip = 0-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_12 $$ final int indentSymbolsToStrip-->Line_20 $$ indentSymbolsToStrip = 0[ FD ]
Line_34 $$ int startOffsetToUse-->Line_50 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_13 $$ final int firstLineStartOffset-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_36 $$ if (caret == firstCaret) -->Line_45 $$ additionalShift = fillStringLength + 1[ CD ]
Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_20 $$ indentSymbolsToStrip = 0[ CD ]
Line_5 $$ if (!RichCopySettings.getInstance().isEnabled()) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ CD ]
Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()-->Line_37 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_28 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_55 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_29 $$ int endOffset = 0-->Line_55 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_15 $$ Pair<Integer, Integer> p = calcIndentSymbolsToStrip(editor.getDocument(), firstCaret.getSelectionStart(), firstCaret.getSelectionEnd())[ CD ]
Line_60 $$ SyntaxInfo syntaxInfo = context.finish()-->Line_61 $$ logSyntaxInfo(syntaxInfo)[ FD ]
Line_17 $$ indentSymbolsToStrip = p.second-->Line_20 $$ indentSymbolsToStrip = 0[ FD ]
Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_25 $$ EditorHighlighter highlighter = HighlighterFactory.createHighlighter(file.getViewProvider().getVirtualFile(), schemeToUse, file.getProject())-->Line_26 $$ highlighter.setText(text)[ FD ]
Line_34 $$ int startOffsetToUse-->Line_39 $$ startOffsetToUse = caretSelectionStart[ FD ]
Line_30 $$ Caret prevCaret = null-->Line_41 $$ String prevCaretSelectedText = prevCaret.getSelectedText()[ FD ]
Line_11 $$ Caret firstCaret = carets.get(0)-->Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_31 $$ for (Caret caret : carets) -->Line_32 $$ int caretSelectionStart = caret.getSelectionStart()[ FD ]
Line_28 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_47 $$ context.reset(endOffset - caretSelectionStart + additionalShift)[ FD ]
Line_24 $$ EditorColorsScheme schemeToUse = settings.getColorsScheme(editor.getColorsScheme())-->Line_25 $$ EditorHighlighter highlighter = HighlighterFactory.createHighlighter(file.getViewProvider().getVirtualFile(), schemeToUse, file.getProject())[ FD ]
Line_34 $$ int startOffsetToUse-->Line_37 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_33 $$ int caretSelectionEnd = caret.getSelectionEnd()-->Line_48 $$ endOffset = caretSelectionEnd[ FD ]
Line_16 $$ firstLineStartOffset = p.first-->Line_37 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_29 $$ int endOffset = 0-->Line_48 $$ endOffset = caretSelectionEnd[ FD ]
Line_48 $$ endOffset = caretSelectionEnd-->Line_55 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_12 $$ final int indentSymbolsToStrip-->Line_17 $$ indentSymbolsToStrip = p.second[ FD ]
Line_17 $$ indentSymbolsToStrip = p.second-->Line_22 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_60 $$ SyntaxInfo syntaxInfo = context.finish()-->Line_62 $$ createResult(syntaxInfo, editor)[ FD ]
Line_39 $$ startOffsetToUse = caretSelectionStart-->Line_50 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_29 $$ int endOffset = 0-->Line_50 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_36 $$ if (caret == firstCaret) -->Line_37 $$ startOffsetToUse = firstLineStartOffset[ CD ]
Line_36 $$ if (caret == firstCaret) -->Line_44 $$ context.addCharacter(endOffset + fillStringLength)[ CD ]
Line_53 $$ MarkupIterator markupIterator = new MarkupIterator(text, new CompositeRangeIterator(schemeToUse, new HighlighterRangeIterator(highlighter, startOffsetToUse, endOffset), new MarkupModelRangeIterator(markupModel, schemeToUse, startOffsetToUse, endOffset)), schemeToUse)-->Line_55 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_10 $$ List<Caret> carets = editor.getCaretModel().getAllCarets()-->Line_14 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) [ FD ]
Line_11 $$ Caret firstCaret = carets.get(0)-->Line_15 $$ Pair<Integer, Integer> p = calcIndentSymbolsToStrip(editor.getDocument(), firstCaret.getSelectionStart(), firstCaret.getSelectionEnd())[ FD ]
Line_16 $$ firstLineStartOffset = p.first-->Line_19 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_37 $$ startOffsetToUse = firstLineStartOffset-->Line_39 $$ startOffsetToUse = caretSelectionStart[ FD ]
