Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_3 $$ final Ref<Boolean> modificationRef = Ref.create(Boolean.FALSE)[ CD ]
Line_10 $$ final PsiElement parent = psiReference.getElement().getParent()-->Line_11 $$ if (parent instanceof PsiAssignmentExpression) [ FD ]
Line_15 $$ if (JavaTokenType.EQ.equals(operation)) -->Line_25 $$ if (JavaTokenType.PLUSEQ.equals(operation)) [ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_10 $$ final PsiElement parent = psiReference.getElement().getParent()[ CD ]
Line_16 $$ final PsiExpression rValue = assignmentExpression.getRExpression()-->Line_17 $$ if (!literalsOnly || allOperandsAreLiterals(rValue)) [ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] [ CD ]
Line_8 $$ if (modificationRef.get())-->Line_9 $$ return null[ CD ]
Line_3 $$ final Ref<Boolean> modificationRef = Ref.create(Boolean.FALSE)-->Line_33 $$ if (modificationRef.get())[ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] [ FD ]
Line_12 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_16 $$ final PsiExpression rValue = assignmentExpression.getRExpression()[ FD ]
Line_11 $$ if (parent instanceof PsiAssignmentExpression) -->Line_14 $$ if (assignmentExpression.getLExpression() == psiReference) [ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_30 $$ return null[ CD ]
Line_15 $$ if (JavaTokenType.EQ.equals(operation)) -->Line_16 $$ final PsiExpression rValue = assignmentExpression.getRExpression()[ CD ]
Line_36 $$ if (initializer != null && (!literalsOnly || allOperandsAreLiterals(initializer))) -->Line_37 $$ list = ContainerUtil.concat(list, Collections.singletonList(initializer))[ CD ]
Line_4 $$ final PsiCodeBlock codeBlock = place == null ? null : getTopmostBlockInSameClass(place)-->Line_18 $$ if (codeBlock != null && PsiTreeUtil.isAncestor(codeBlock, parent, true) && placeOffset < parent.getTextRange().getStartOffset()) [ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_4 $$ final PsiCodeBlock codeBlock = place == null ? null : getTopmostBlockInSameClass(place)[ FD ]
Line_11 $$ if (parent instanceof PsiAssignmentExpression) -->Line_13 $$ final IElementType operation = assignmentExpression.getOperationTokenType()[ CD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_35 $$ PsiExpression initializer = psiVariable.getInitializer()[ CD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_5 $$ final int placeOffset = codeBlock != null ? place.getTextRange().getStartOffset() : 0[ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_5 $$ final int placeOffset = codeBlock != null ? place.getTextRange().getStartOffset() : 0[ CD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_33 $$ if (modificationRef.get())[ CD ]
Line_17 $$ if (!literalsOnly || allOperandsAreLiterals(rValue)) -->Line_21 $$ return rValue[ CD ]
Line_3 $$ final Ref<Boolean> modificationRef = Ref.create(Boolean.FALSE)-->Line_23 $$ modificationRef.set(Boolean.TRUE)[ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_39 $$ return list[ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_11 $$ if (parent instanceof PsiAssignmentExpression) [ CD ]
Line_12 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_14 $$ if (assignmentExpression.getLExpression() == psiReference) [ FD ]
Line_12 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent-->Line_13 $$ final IElementType operation = assignmentExpression.getOperationTokenType()[ FD ]
Line_13 $$ final IElementType operation = assignmentExpression.getOperationTokenType()-->Line_15 $$ if (JavaTokenType.EQ.equals(operation)) [ FD ]
Line_13 $$ final IElementType operation = assignmentExpression.getOperationTokenType()-->Line_25 $$ if (JavaTokenType.PLUSEQ.equals(operation)) [ FD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_37 $$ list = ContainerUtil.concat(list, Collections.singletonList(initializer))[ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_4 $$ final PsiCodeBlock codeBlock = place == null ? null : getTopmostBlockInSameClass(place)[ CD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_36 $$ if (initializer != null && (!literalsOnly || allOperandsAreLiterals(initializer))) [ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_10 $$ final PsiElement parent = psiReference.getElement().getParent()[ FD ]
Line_2 $$ public static Collection<PsiExpression> getVariableAssignmentsInFile(@NotNull PsiVariable psiVariable, final boolean literalsOnly, final PsiElement place) -->Line_35 $$ PsiExpression initializer = psiVariable.getInitializer()[ FD ]
Line_17 $$ if (!literalsOnly || allOperandsAreLiterals(rValue)) -->Line_18 $$ if (codeBlock != null && PsiTreeUtil.isAncestor(codeBlock, parent, true) && placeOffset < parent.getTextRange().getStartOffset()) [ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_8 $$ if (modificationRef.get())[ CD ]
Line_18 $$ if (codeBlock != null && PsiTreeUtil.isAncestor(codeBlock, parent, true) && placeOffset < parent.getTextRange().getStartOffset()) -->Line_19 $$ return null[ CD ]
Line_25 $$ if (JavaTokenType.PLUSEQ.equals(operation)) -->Line_26 $$ modificationRef.set(Boolean.TRUE)[ CD ]
Line_33 $$ if (modificationRef.get())-->Line_34 $$ return Collections.emptyList()[ CD ]
Line_6 $$ List<PsiExpression> list = ContainerUtil.mapNotNull(ReferencesSearch.search(psiVariable, new LocalSearchScope(new PsiElement[] -->Line_14 $$ if (assignmentExpression.getLExpression() == psiReference) [ FD ]
Line_15 $$ if (JavaTokenType.EQ.equals(operation)) -->Line_17 $$ if (!literalsOnly || allOperandsAreLiterals(rValue)) [ CD ]
Line_14 $$ if (assignmentExpression.getLExpression() == psiReference) -->Line_15 $$ if (JavaTokenType.EQ.equals(operation)) [ CD ]
Line_17 $$ if (!literalsOnly || allOperandsAreLiterals(rValue)) -->Line_23 $$ modificationRef.set(Boolean.TRUE)[ CD ]
Line_3 $$ final Ref<Boolean> modificationRef = Ref.create(Boolean.FALSE)-->Line_8 $$ if (modificationRef.get())[ FD ]
Line_11 $$ if (parent instanceof PsiAssignmentExpression) -->Line_12 $$ final PsiAssignmentExpression assignmentExpression = (PsiAssignmentExpression) parent[ CD ]
Line_3 $$ final Ref<Boolean> modificationRef = Ref.create(Boolean.FALSE)-->Line_26 $$ modificationRef.set(Boolean.TRUE)[ FD ]
Line_10 $$ final PsiElement parent = psiReference.getElement().getParent()-->Line_18 $$ if (codeBlock != null && PsiTreeUtil.isAncestor(codeBlock, parent, true) && placeOffset < parent.getTextRange().getStartOffset()) [ FD ]
