Line_10 $$ GlobalSearchScope scope = myElement.getResolveScope()-->Line_19 $$ PsiClass[] classes = PsiShortNamesCache.getInstance(project).getClassesByName(name, scope)[ FD ]
Line_37 $$ if (isAccessible(aClass, myElement)) -->Line_38 $$ classList.add(aClass)[ CD ]
Line_44 $$ List<PsiClass> filtered = filterByContext(classList, myElement)-->Line_46 $$ classList = filtered[ FD ]
Line_32 $$ String qName = aClass.getQualifiedName()-->Line_34 $$ if (qName.indexOf('.') == -1 || !PsiNameHelper.getInstance(project).isQualifiedName(qName))[ FD ]
Line_14 $$ if (!canReferenceClass(myRef)) -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_18 $$ final Project project = myElement.getProject()[ CD ]
Line_44 $$ List<PsiClass> filtered = filterByContext(classList, myElement)-->Line_45 $$ if (!filtered.isEmpty()) [ FD ]
Line_20 $$ if (classes.length == 0)-->Line_21 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_10 $$ GlobalSearchScope scope = myElement.getResolveScope()[ CD ]
Line_32 $$ String qName = aClass.getQualifiedName()-->Line_33 $$ if (qName != null) [ FD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_48 $$ filterAlreadyImportedButUnresolved(classList)[ FD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_28 $$ if (JavaCompletionUtil.isInExcludedPackage(aClass, false))[ FD ]
Line_6 $$ if (element instanceof PsiClass && result.isValidResult())-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_3 $$ if (myRef instanceof PsiJavaReference) [ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_11 $$ if (name == null) [ CD ]
Line_45 $$ if (!filtered.isEmpty()) -->Line_46 $$ classList = filtered[ CD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_46 $$ classList = filtered[ FD ]
Line_24 $$ final PsiFile file = myElement.getContainingFile()-->Line_49 $$ filerByPackageName(classList, file)[ FD ]
Line_43 $$ classList = filterByRequiredMemberName(classList)-->Line_44 $$ List<PsiClass> filtered = filterByContext(classList, myElement)[ FD ]
Line_43 $$ classList = filterByRequiredMemberName(classList)-->Line_46 $$ classList = filtered[ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_24 $$ final PsiFile file = myElement.getContainingFile()[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_23 $$ boolean isAnnotationReference = myElement.getParent() instanceof PsiAnnotation[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_19 $$ PsiClass[] classes = PsiShortNamesCache.getInstance(project).getClassesByName(name, scope)[ CD ]
Line_4 $$ JavaResolveResult result = ((PsiJavaReference) myRef).advancedResolve(true)-->Line_6 $$ if (element instanceof PsiClass && result.isValidResult())[ FD ]
Line_9 $$ String name = getReferenceName(myRef)-->Line_11 $$ if (name == null) [ FD ]
Line_32 $$ String qName = aClass.getQualifiedName()-->Line_36 $$ if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file, qName))) [ FD ]
Line_9 $$ String name = getReferenceName(myRef)-->Line_36 $$ if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file, qName))) [ FD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_43 $$ classList = filterByRequiredMemberName(classList)[ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_14 $$ if (!canReferenceClass(myRef)) [ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_50 $$ return classList[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_44 $$ List<PsiClass> filtered = filterByContext(classList, myElement)[ CD ]
Line_36 $$ if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file, qName))) -->Line_37 $$ if (isAccessible(aClass, myElement)) [ CD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_30 $$ if (referenceHasTypeParameters && !aClass.hasTypeParameters())[ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_49 $$ filerByPackageName(classList, file)[ CD ]
Line_11 $$ if (name == null) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_46 $$ classList = filtered-->Line_49 $$ filerByPackageName(classList, file)[ FD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_38 $$ classList.add(aClass)[ FD ]
Line_18 $$ final Project project = myElement.getProject()-->Line_19 $$ PsiClass[] classes = PsiShortNamesCache.getInstance(project).getClassesByName(name, scope)[ FD ]
Line_4 $$ JavaResolveResult result = ((PsiJavaReference) myRef).advancedResolve(true)-->Line_5 $$ PsiElement element = result.getElement()[ FD ]
Line_18 $$ final Project project = myElement.getProject()-->Line_34 $$ if (qName.indexOf('.') == -1 || !PsiNameHelper.getInstance(project).isQualifiedName(qName))[ FD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_32 $$ String qName = aClass.getQualifiedName()[ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_9 $$ String name = getReferenceName(myRef)[ CD ]
Line_43 $$ classList = filterByRequiredMemberName(classList)-->Line_48 $$ filterAlreadyImportedButUnresolved(classList)[ FD ]
Line_3 $$ if (myRef instanceof PsiJavaReference) -->Line_4 $$ JavaResolveResult result = ((PsiJavaReference) myRef).advancedResolve(true)[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_20 $$ if (classes.length == 0)[ CD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_44 $$ List<PsiClass> filtered = filterByContext(classList, myElement)[ FD ]
Line_24 $$ final PsiFile file = myElement.getContainingFile()-->Line_36 $$ if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file, qName))) [ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_48 $$ filterAlreadyImportedButUnresolved(classList)[ CD ]
Line_3 $$ if (myRef instanceof PsiJavaReference) -->Line_5 $$ PsiElement element = result.getElement()[ CD ]
Line_3 $$ if (myRef instanceof PsiJavaReference) -->Line_6 $$ if (element instanceof PsiClass && result.isValidResult())[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)[ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_17 $$ boolean referenceHasTypeParameters = hasTypeParameters(myRef)[ CD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_37 $$ if (isAccessible(aClass, myElement)) [ FD ]
Line_33 $$ if (qName != null) -->Line_36 $$ if (qName.endsWith(name) && (file == null || ImportFilter.shouldImport(file, qName))) [ CD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_43 $$ classList = filterByRequiredMemberName(classList)[ CD ]
Line_22 $$ List<PsiClass> classList = new ArrayList<PsiClass>(classes.length)-->Line_49 $$ filerByPackageName(classList, file)[ FD ]
Line_33 $$ if (qName != null) -->Line_34 $$ if (qName.indexOf('.') == -1 || !PsiNameHelper.getInstance(project).isQualifiedName(qName))[ CD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_26 $$ if (isAnnotationReference && !aClass.isAnnotationType())[ FD ]
Line_25 $$ for (PsiClass aClass : classes) -->Line_38 $$ classList.add(aClass)[ FD ]
Line_9 $$ String name = getReferenceName(myRef)-->Line_19 $$ PsiClass[] classes = PsiShortNamesCache.getInstance(project).getClassesByName(name, scope)[ FD ]
Line_17 $$ boolean referenceHasTypeParameters = hasTypeParameters(myRef)-->Line_30 $$ if (referenceHasTypeParameters && !aClass.hasTypeParameters())[ FD ]
Line_23 $$ boolean isAnnotationReference = myElement.getParent() instanceof PsiAnnotation-->Line_26 $$ if (isAnnotationReference && !aClass.isAnnotationType())[ FD ]
Line_2 $$ public List<PsiClass> getClassesToImport() -->Line_45 $$ if (!filtered.isEmpty()) [ CD ]
Line_46 $$ classList = filtered-->Line_48 $$ filterAlreadyImportedButUnresolved(classList)[ FD ]
Line_43 $$ classList = filterByRequiredMemberName(classList)-->Line_49 $$ filerByPackageName(classList, file)[ FD ]
