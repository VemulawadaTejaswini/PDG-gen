Line_13 $$ if (FileSystemUtils.isHidden(plugin)) -->Line_14 $$ logger.trace("--- skip hidden plugin file[[ CD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_46 $$ return bundles[ CD ]
Line_20 $$ info = PluginInfo.readFromProperties(plugin)-->Line_25 $$ if (info.isJvm()) [ FD ]
Line_34 $$ final Bundle bundle-->Line_40 $$ bundles.add(bundle)[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_11 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(pluginsDirectory)) [ FD ]
Line_12 $$ for (Path plugin : stream) -->Line_22 $$ throw new IllegalStateException("Could not load plugin descriptor for existing plugin [" + plugin.getFileName() + "]. Was the plugin built before 2.0?", e)[ FD ]
Line_35 $$ if (info.isJvm() && info.isIsolated() == false) -->Line_39 $$ bundle = new Bundle()[ CD ]
Line_24 $$ List<URL> urls = new ArrayList()-->Line_43 $$ bundle.urls.addAll(urls)[ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)-->Line_17 $$ logger.trace("--- adding plugin [[ FD ]
Line_18 $$ final PluginInfo info-->Line_25 $$ if (info.isJvm()) [ FD ]
Line_12 $$ for (Path plugin : stream) -->Line_13 $$ if (FileSystemUtils.isHidden(plugin)) [ FD ]
Line_20 $$ info = PluginInfo.readFromProperties(plugin)-->Line_35 $$ if (info.isJvm() && info.isIsolated() == false) [ FD ]
Line_18 $$ final PluginInfo info-->Line_35 $$ if (info.isJvm() && info.isIsolated() == false) [ FD ]
Line_12 $$ for (Path plugin : stream) -->Line_14 $$ logger.trace("--- skip hidden plugin file[[ FD ]
Line_18 $$ final PluginInfo info-->Line_20 $$ info = PluginInfo.readFromProperties(plugin)[ FD ]
Line_35 $$ if (info.isJvm() && info.isIsolated() == false) -->Line_40 $$ bundles.add(bundle)[ CD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)[ CD ]
Line_8 $$ List<Bundle> bundles = new ArrayList()-->Line_40 $$ bundles.add(bundle)[ FD ]
Line_3 $$ ESLogger logger = Loggers.getLogger(PluginsService.class)-->Line_14 $$ logger.trace("--- skip hidden plugin file[[ FD ]
Line_20 $$ info = PluginInfo.readFromProperties(plugin)-->Line_42 $$ bundle.plugins.add(info)[ FD ]
Line_12 $$ for (Path plugin : stream) -->Line_20 $$ info = PluginInfo.readFromProperties(plugin)[ FD ]
Line_39 $$ bundle = new Bundle()-->Line_40 $$ bundles.add(bundle)[ FD ]
Line_2 $$ static List<Bundle> getPluginBundles(Path pluginsDirectory) throws IOException -->Line_8 $$ List<Bundle> bundles = new ArrayList()[ CD ]
Line_18 $$ final PluginInfo info-->Line_42 $$ bundle.plugins.add(info)[ FD ]
Line_34 $$ final Bundle bundle-->Line_39 $$ bundle = new Bundle()[ FD ]
Line_12 $$ for (Path plugin : stream) -->Line_17 $$ logger.trace("--- adding plugin [[ FD ]
