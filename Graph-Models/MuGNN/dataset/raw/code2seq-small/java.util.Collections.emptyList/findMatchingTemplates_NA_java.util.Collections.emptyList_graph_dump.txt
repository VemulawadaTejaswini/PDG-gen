Line_9 $$ String key = text.subSequence(wordStart, caretOffset).toString()-->Line_10 $$ if (Character.isJavaIdentifierStart(key.charAt(0))) [ FD ]
Line_5 $$ int wordStart = caretOffset - i-->Line_6 $$ if (wordStart < 0) [ FD ]
Line_9 $$ String key = text.subSequence(wordStart, caretOffset).toString()-->Line_15 $$ candidates = settings.collectMatchingCandidates(key, shortcutChar, hasArgument)[ FD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) [ FD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_9 $$ String key = text.subSequence(wordStart, caretOffset).toString()[ CD ]
Line_15 $$ candidates = settings.collectMatchingCandidates(key, shortcutChar, hasArgument)-->Line_16 $$ if (!candidates.isEmpty())[ FD ]
Line_3 $$ List<TemplateImpl> candidates = Collections.emptyList()-->Line_15 $$ candidates = settings.collectMatchingCandidates(key, shortcutChar, hasArgument)[ FD ]
Line_3 $$ List<TemplateImpl> candidates = Collections.emptyList()-->Line_16 $$ if (!candidates.isEmpty())[ FD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_5 $$ int wordStart = caretOffset - i[ CD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) [ CD ]
Line_10 $$ if (Character.isJavaIdentifierStart(key.charAt(0))) -->Line_11 $$ if (wordStart > 0 && Character.isJavaIdentifierPart(text.charAt(wordStart - 1))) [ CD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_16 $$ if (!candidates.isEmpty())[ CD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_10 $$ if (Character.isJavaIdentifierStart(key.charAt(0))) [ CD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_3 $$ List<TemplateImpl> candidates = Collections.emptyList()[ CD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_6 $$ if (wordStart < 0) [ CD ]
Line_5 $$ int wordStart = caretOffset - i-->Line_9 $$ String key = text.subSequence(wordStart, caretOffset).toString()[ FD ]
Line_4 $$ for (int i = settings.getMaxKeyLength(); i >= 1; i--) -->Line_15 $$ candidates = settings.collectMatchingCandidates(key, shortcutChar, hasArgument)[ CD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_11 $$ if (wordStart > 0 && Character.isJavaIdentifierPart(text.charAt(wordStart - 1))) [ FD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_15 $$ candidates = settings.collectMatchingCandidates(key, shortcutChar, hasArgument)[ FD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_9 $$ String key = text.subSequence(wordStart, caretOffset).toString()[ FD ]
Line_2 $$ public static List<TemplateImpl> findMatchingTemplates(CharSequence text, int caretOffset, @Nullable Character shortcutChar, TemplateSettings settings, boolean hasArgument) -->Line_19 $$ return candidates[ CD ]
