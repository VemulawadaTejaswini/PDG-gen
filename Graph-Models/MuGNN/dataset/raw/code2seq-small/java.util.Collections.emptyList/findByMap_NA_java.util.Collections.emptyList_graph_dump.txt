Line_30 $$ if (name.equals(member.getName())) -->Line_31 $$ list.add(member)[ CD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_5 $$ if (checkBases) [ CD ]
Line_29 $$ for (PsiMember member : members) -->Line_30 $$ if (name.equals(member.getName())) [ FD ]
Line_5 $$ if (checkBases) -->Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)[ CD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)[ FD ]
Line_8 $$ if (list == null)-->Line_9 $$ return Collections.emptyList()[ CD ]
Line_5 $$ if (checkBases) -->Line_8 $$ if (list == null)[ CD ]
Line_19 $$ members = aClass.getMethods()-->Line_22 $$ members = aClass.getInnerClasses()[ FD ]
Line_16 $$ PsiMember[] members = null-->Line_19 $$ members = aClass.getMethods()[ FD ]
Line_19 $$ members = aClass.getMethods()-->Line_25 $$ members = aClass.getFields()[ FD ]
Line_16 $$ PsiMember[] members = null-->Line_25 $$ members = aClass.getFields()[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_25 $$ members = aClass.getFields()[ FD ]
Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)-->Line_31 $$ list.add(member)[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_22 $$ members = aClass.getInnerClasses()[ FD ]
Line_3 $$ if (name == null)-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_19 $$ members = aClass.getMethods()[ FD ]
Line_29 $$ for (PsiMember member : members) -->Line_31 $$ list.add(member)[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_3 $$ if (name == null)[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_6 $$ Map<String, List<Pair<PsiMember, PsiSubstitutor>>> allMethodsMap = getMap(aClass, type)[ FD ]
Line_5 $$ if (checkBases) -->Line_16 $$ PsiMember[] members = null[ CD ]
Line_11 $$ for (final Pair<PsiMember, PsiSubstitutor> info : list) -->Line_12 $$ ret.add(info.getFirst())[ FD ]
Line_16 $$ PsiMember[] members = null-->Line_22 $$ members = aClass.getInnerClasses()[ FD ]
Line_5 $$ if (checkBases) -->Line_34 $$ return list[ CD ]
Line_5 $$ if (checkBases) -->Line_6 $$ Map<String, List<Pair<PsiMember, PsiSubstitutor>>> allMethodsMap = getMap(aClass, type)[ CD ]
Line_22 $$ members = aClass.getInnerClasses()-->Line_25 $$ members = aClass.getFields()[ FD ]
Line_5 $$ if (checkBases) -->Line_14 $$ return ret[ CD ]
Line_6 $$ Map<String, List<Pair<PsiMember, PsiSubstitutor>>> allMethodsMap = getMap(aClass, type)-->Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_3 $$ if (name == null)[ CD ]
Line_10 $$ List<PsiMember> ret = new ArrayList<PsiMember>(list.size())-->Line_12 $$ ret.add(info.getFirst())[ FD ]
Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)-->Line_10 $$ List<PsiMember> ret = new ArrayList<PsiMember>(list.size())[ FD ]
Line_2 $$ private static List<PsiMember> findByMap(@NotNull PsiClass aClass, String name, boolean checkBases, @NotNull MemberType type) -->Line_30 $$ if (name.equals(member.getName())) [ FD ]
Line_7 $$ List<Pair<PsiMember, PsiSubstitutor>> list = allMethodsMap.get(name)-->Line_8 $$ if (list == null)[ FD ]
Line_5 $$ if (checkBases) -->Line_10 $$ List<PsiMember> ret = new ArrayList<PsiMember>(list.size())[ CD ]
