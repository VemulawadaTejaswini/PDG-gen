Line_8 $$ manager.runInterruptibly(progress, new Runnable() -->Line_27 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() [ CD ]
Line_4 $$ if (isUpToDate())-->Line_5 $$ return myCachedChildren == null ? Collections.<AbstractTreeNode>emptyList() : myCachedChildren[ CD ]
Line_6 $$ final List<SliceNode> children = new ArrayList<SliceNode>()-->Line_34 $$ node.index = children.size()[ FD ]
Line_6 $$ final List<SliceNode> children = new ArrayList<SliceNode>()-->Line_35 $$ children.add(node)[ FD ]
Line_32 $$ SliceNode node = new SliceNode(myProject, sliceUsage, targetEqualUsages)-->Line_35 $$ children.add(node)[ FD ]
Line_27 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_31 $$ progress.checkCanceled()[ CD ]
Line_27 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_37 $$ return true[ CD ]
Line_27 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_40 $$ getValue().processChildren(processor)[ FD ]
Line_27 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_32 $$ SliceNode node = new SliceNode(myProject, sliceUsage, targetEqualUsages)[ CD ]
Line_8 $$ manager.runInterruptibly(progress, new Runnable() -->Line_40 $$ getValue().processChildren(processor)[ CD ]
Line_7 $$ final SliceManager manager = SliceManager.getInstance(getProject())-->Line_8 $$ manager.runInterruptibly(progress, new Runnable() [ FD ]
