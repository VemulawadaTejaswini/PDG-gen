Line_3 $$ if (isUpToDate())-->Line_4 $$ return myCachedChildren == null ? Collections.<AbstractTreeNode>emptyList() : myCachedChildren[ CD ]
Line_6 $$ final SliceManager manager = SliceManager.getInstance(getProject())-->Line_7 $$ manager.runInterruptibly(progress, new Runnable() [ FD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_15 $$ progress.checkCanceled()[ FD ]
Line_13 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_15 $$ progress.checkCanceled()[ CD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_3 $$ if (isUpToDate())[ CD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_7 $$ manager.runInterruptibly(progress, new Runnable() [ FD ]
Line_7 $$ manager.runInterruptibly(progress, new Runnable() -->Line_13 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() [ CD ]
Line_13 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_16 $$ SliceNode node = new SliceNode(myProject, sliceUsage, targetEqualUsages)[ CD ]
Line_13 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_21 $$ return true[ CD ]
Line_13 $$ Processor<SliceUsage> processor = new Processor<SliceUsage>() -->Line_24 $$ getValue().processChildren(processor)[ FD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_6 $$ final SliceManager manager = SliceManager.getInstance(getProject())[ CD ]
Line_5 $$ final List<SliceNode> children = new ArrayList<SliceNode>()-->Line_18 $$ node.index = children.size()[ FD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_30 $$ return children[ CD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_5 $$ final List<SliceNode> children = new ArrayList<SliceNode>()[ CD ]
Line_5 $$ final List<SliceNode> children = new ArrayList<SliceNode>()-->Line_19 $$ children.add(node)[ FD ]
Line_16 $$ SliceNode node = new SliceNode(myProject, sliceUsage, targetEqualUsages)-->Line_19 $$ children.add(node)[ FD ]
Line_7 $$ manager.runInterruptibly(progress, new Runnable() -->Line_24 $$ getValue().processChildren(processor)[ CD ]
Line_2 $$ protected List<? extends AbstractTreeNode> getChildrenUnderProgress(@NotNull final ProgressIndicator progress) -->Line_7 $$ manager.runInterruptibly(progress, new Runnable() [ CD ]
