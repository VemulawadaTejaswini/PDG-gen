Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_9 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()[ CD ]
Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_22 $$ if (batchEvaluatorClass != null) [ FD ]
Line_25 $$ ObjectReference evaluator = null-->Line_27 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_27 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_32 $$ if (myBatchEvaluatorObject != null) -->Line_33 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ CD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_22 $$ if (batchEvaluatorClass != null) [ CD ]
Line_17 $$ ClassType batchEvaluatorClass = null-->Line_27 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_6 $$ if (isRemote != null && isRemote.booleanValue()) [ CD ]
Line_17 $$ ClassType batchEvaluatorClass = null-->Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())[ FD ]
Line_17 $$ ClassType batchEvaluatorClass = null-->Line_23 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ FD ]
Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_33 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ FD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_17 $$ ClassType batchEvaluatorClass = null[ CD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_14 $$ if (threadReference == null) [ CD ]
Line_9 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()-->Line_10 $$ if (thread == null) [ FD ]
Line_17 $$ ClassType batchEvaluatorClass = null-->Line_33 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ FD ]
Line_2 $$ public boolean hasBatchEvaluator(EvaluationContext evaluationContext) -->Line_3 $$ if (!myBatchEvaluatorChecked) [ CD ]
Line_6 $$ if (isRemote != null && isRemote.booleanValue()) -->Line_7 $$ return false[ CD ]
Line_24 $$ if (constructor != null) -->Line_25 $$ ObjectReference evaluator = null[ CD ]
Line_10 $$ if (thread == null) -->Line_11 $$ return false[ CD ]
Line_2 $$ public boolean hasBatchEvaluator(EvaluationContext evaluationContext) -->Line_9 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()[ FD ]
Line_23 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")-->Line_24 $$ if (constructor != null) [ FD ]
Line_22 $$ if (batchEvaluatorClass != null) -->Line_24 $$ if (constructor != null) [ CD ]
Line_5 $$ final Boolean isRemote = myDebugProcess.getUserData(REMOTE_SESSION_KEY)-->Line_6 $$ if (isRemote != null && isRemote.booleanValue()) [ FD ]
Line_14 $$ if (threadReference == null) -->Line_15 $$ return false[ CD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_13 $$ ThreadReference threadReference = thread.getThreadReference()[ CD ]
Line_24 $$ if (constructor != null) -->Line_32 $$ if (myBatchEvaluatorObject != null) [ CD ]
Line_2 $$ public boolean hasBatchEvaluator(EvaluationContext evaluationContext) -->Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())[ FD ]
Line_2 $$ public boolean hasBatchEvaluator(EvaluationContext evaluationContext) -->Line_38 $$ return myBatchEvaluatorMethod != null[ CD ]
Line_17 $$ ClassType batchEvaluatorClass = null-->Line_22 $$ if (batchEvaluatorClass != null) [ FD ]
Line_22 $$ if (batchEvaluatorClass != null) -->Line_23 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ CD ]
Line_2 $$ public boolean hasBatchEvaluator(EvaluationContext evaluationContext) -->Line_27 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_13 $$ ThreadReference threadReference = thread.getThreadReference()-->Line_14 $$ if (threadReference == null) [ FD ]
Line_19 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_23 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ FD ]
Line_23 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")-->Line_27 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_9 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()-->Line_13 $$ ThreadReference threadReference = thread.getThreadReference()[ FD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_5 $$ final Boolean isRemote = myDebugProcess.getUserData(REMOTE_SESSION_KEY)[ CD ]
Line_3 $$ if (!myBatchEvaluatorChecked) -->Line_10 $$ if (thread == null) [ CD ]
