Line_11 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()-->Line_12 $$ if (thread == null) [ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_24 $$ if (batchEvaluatorClass != null) [ CD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_16 $$ if (threadReference == null) [ CD ]
Line_19 $$ ClassType batchEvaluatorClass = null-->Line_35 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ FD ]
Line_21 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_35 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ FD ]
Line_26 $$ if (constructor != null) -->Line_34 $$ if (myBatchEvaluatorObject != null) [ CD ]
Line_25 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")-->Line_26 $$ if (constructor != null) [ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_6 $$ final Boolean isRemote = myDebugProcess.getUserData(REMOTE_SESSION_KEY)[ CD ]
Line_24 $$ if (batchEvaluatorClass != null) -->Line_26 $$ if (constructor != null) [ CD ]
Line_19 $$ ClassType batchEvaluatorClass = null-->Line_21 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())[ FD ]
Line_6 $$ final Boolean isRemote = myDebugProcess.getUserData(REMOTE_SESSION_KEY)-->Line_7 $$ if (isRemote != null && isRemote.booleanValue()) [ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_12 $$ if (thread == null) [ CD ]
Line_21 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_25 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ FD ]
Line_27 $$ ObjectReference evaluator = null-->Line_29 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_15 $$ ThreadReference threadReference = thread.getThreadReference()[ CD ]
Line_16 $$ if (threadReference == null) -->Line_17 $$ return false[ CD ]
Line_19 $$ ClassType batchEvaluatorClass = null-->Line_24 $$ if (batchEvaluatorClass != null) [ FD ]
Line_25 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")-->Line_29 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_26 $$ if (constructor != null) -->Line_27 $$ ObjectReference evaluator = null[ CD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_7 $$ if (isRemote != null && isRemote.booleanValue()) [ CD ]
Line_11 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()-->Line_15 $$ ThreadReference threadReference = thread.getThreadReference()[ FD ]
Line_24 $$ if (batchEvaluatorClass != null) -->Line_25 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ CD ]
Line_15 $$ ThreadReference threadReference = thread.getThreadReference()-->Line_16 $$ if (threadReference == null) [ FD ]
Line_19 $$ ClassType batchEvaluatorClass = null-->Line_29 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_21 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_29 $$ evaluator = myDebugProcess.newInstance(evaluationContext, batchEvaluatorClass, constructor, Collections.emptyList())[ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_19 $$ ClassType batchEvaluatorClass = null[ CD ]
Line_19 $$ ClassType batchEvaluatorClass = null-->Line_25 $$ Method constructor = batchEvaluatorClass.concreteMethodByName(JVMNameUtil.CONSTRUCTOR_NAME, "()V")[ FD ]
Line_4 $$ if (!myBatchEvaluatorChecked) -->Line_11 $$ ThreadReferenceProxy thread = evaluationContext.getSuspendContext().getThread()[ CD ]
Line_21 $$ batchEvaluatorClass = (ClassType) myDebugProcess.findClass(evaluationContext, BatchEvaluatorServer.class.getName(), evaluationContext.getClassLoader())-->Line_24 $$ if (batchEvaluatorClass != null) [ FD ]
Line_12 $$ if (thread == null) -->Line_13 $$ return false[ CD ]
Line_34 $$ if (myBatchEvaluatorObject != null) -->Line_35 $$ myBatchEvaluatorMethod = batchEvaluatorClass.concreteMethodByName("evaluate", "([Ljava/lang/Object;)[Ljava/lang/Object;")[ CD ]
