Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_5 $$ if (preview && MBMessagePermission.contains(getPermissionChecker(), message, ActionKeys.UPDATE)) [ CD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) -->Line_11 $$ StringBundler sb = new StringBundler(5)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_12 $$ sb.append("Thread is locked for class name ")[ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_8 $$ MBMessagePermission.check(getPermissionChecker(), messageId, ActionKeys.UPDATE)[ FD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.ADD_FILE)) [ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_4 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")[ FD ]
Line_19 $$ inputStreamOVPs = Collections.emptyList()-->Line_25 $$ return mbMessageLocalService.updateMessage(getGuestOrUserId(), messageId, subject, body, inputStreamOVPs, existingFiles, priority, allowPingbacks, serviceContext)[ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) -->Line_12 $$ sb.append("Thread is locked for class name ")[ CD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) [ FD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_15 $$ sb.append(message.getThreadId())[ FD ]
Line_4 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")-->Line_5 $$ if (preview && MBMessagePermission.contains(getPermissionChecker(), message, ActionKeys.UPDATE)) [ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_19 $$ inputStreamOVPs = Collections.emptyList()[ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) [ CD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) [ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) -->Line_15 $$ sb.append(message.getThreadId())[ CD ]
Line_23 $$ priority = thread.getPriority()-->Line_25 $$ return mbMessageLocalService.updateMessage(getGuestOrUserId(), messageId, subject, body, inputStreamOVPs, existingFiles, priority, allowPingbacks, serviceContext)[ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) -->Line_14 $$ sb.append(" and class PK ")[ CD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.ADD_FILE)) [ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_14 $$ sb.append(" and class PK ")[ FD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_22 $$ MBThread thread = mbThreadLocalService.getThread(message.getThreadId())[ FD ]
Line_22 $$ MBThread thread = mbThreadLocalService.getThread(message.getThreadId())-->Line_23 $$ priority = thread.getPriority()[ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_4 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")[ CD ]
Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) -->Line_22 $$ MBThread thread = mbThreadLocalService.getThread(message.getThreadId())[ CD ]
Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) -->Line_23 $$ priority = thread.getPriority()[ CD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_5 $$ if (preview && MBMessagePermission.contains(getPermissionChecker(), message, ActionKeys.UPDATE)) [ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), message.getThreadId())) -->Line_13 $$ sb.append(MBThread.class.getName())[ CD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_16 $$ throw new LockedThreadException(sb.toString())[ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) [ CD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_25 $$ return mbMessageLocalService.updateMessage(getGuestOrUserId(), messageId, subject, body, inputStreamOVPs, existingFiles, priority, allowPingbacks, serviceContext)[ CD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_25 $$ return mbMessageLocalService.updateMessage(getGuestOrUserId(), messageId, subject, body, inputStreamOVPs, existingFiles, priority, allowPingbacks, serviceContext)[ FD ]
Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)-->Line_6 $$ checkReplyToPermission(message.getGroupId(), message.getCategoryId(), message.getParentMessageId())[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_13 $$ sb.append(MBThread.class.getName())[ FD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_23 $$ priority = thread.getPriority()[ FD ]
Line_5 $$ if (preview && MBMessagePermission.contains(getPermissionChecker(), message, ActionKeys.UPDATE)) -->Line_8 $$ MBMessagePermission.check(getPermissionChecker(), messageId, ActionKeys.UPDATE)[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_15 $$ sb.append(message.getThreadId())[ FD ]
Line_5 $$ if (preview && MBMessagePermission.contains(getPermissionChecker(), message, ActionKeys.UPDATE)) -->Line_6 $$ checkReplyToPermission(message.getGroupId(), message.getCategoryId(), message.getParentMessageId())[ CD ]
Line_2 $$ public MBMessage updateMessage(long messageId, String subject, String body, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, List<String> existingFiles, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_3 $$ MBMessage message = mbMessagePersistence.findByPrimaryKey(messageId)[ CD ]
Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), message.getGroupId(), message.getCategoryId(), ActionKeys.ADD_FILE)) -->Line_19 $$ inputStreamOVPs = Collections.emptyList()[ CD ]
