Line_3 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_12 $$ assertNull(stompDecoder.getExpectedContentLength())[ FD ]
Line_3 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_11 $$ assertEquals(0, stompDecoder.getBufferSize())[ FD ]
Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_9 $$ assertEquals(1, messages.size())[ FD ]
Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_7 $$ assertEquals(Collections.<Message<byte[]>>emptyList(), messages)[ FD ]
Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))-->Line_9 $$ assertEquals(1, messages.size())[ FD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_12 $$ assertNull(stompDecoder.getExpectedContentLength())[ CD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_9 $$ assertEquals(1, messages.size())[ CD ]
Line_3 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_5 $$ String chunk2 = " body\0"-->Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))-->Line_10 $$ assertEquals("Message body", new String(messages.get(0).getPayload()))[ FD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_3 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)[ CD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_5 $$ String chunk2 = " body\0"[ CD ]
Line_4 $$ String chunk1 = "SEND\na:alpha\n\nMessage"-->Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))[ FD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_10 $$ assertEquals("Message body", new String(messages.get(0).getPayload()))[ CD ]
Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_10 $$ assertEquals("Message body", new String(messages.get(0).getPayload()))[ FD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_4 $$ String chunk1 = "SEND\na:alpha\n\nMessage"[ CD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))[ CD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_7 $$ assertEquals(Collections.<Message<byte[]>>emptyList(), messages)[ CD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_11 $$ assertEquals(0, stompDecoder.getBufferSize())[ CD ]
Line_3 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_6 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))[ FD ]
Line_2 $$ public void oneMessageInTwoChunks() throws InterruptedException -->Line_8 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ CD ]
