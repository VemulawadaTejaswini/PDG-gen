Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_10 $$ assertEquals(1, messages.size())[ FD ]
Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_11 $$ assertEquals("Message body", new String(messages.get(0).getPayload()))[ FD ]
Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_9 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_4 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_13 $$ assertNull(stompDecoder.getExpectedContentLength())[ FD ]
Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))-->Line_8 $$ assertEquals(Collections.<Message<byte[]>>emptyList(), messages)[ FD ]
Line_4 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_9 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_6 $$ String chunk2 = " body\0"-->Line_9 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))[ FD ]
Line_9 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))-->Line_10 $$ assertEquals(1, messages.size())[ FD ]
Line_9 $$ messages = stompDecoder.decode(toByteBuffer(chunk2))-->Line_11 $$ assertEquals("Message body", new String(messages.get(0).getPayload()))[ FD ]
Line_4 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_12 $$ assertEquals(0, stompDecoder.getBufferSize())[ FD ]
Line_4 $$ BufferingStompDecoder stompDecoder = new BufferingStompDecoder(STOMP_DECODER, 128)-->Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))[ FD ]
Line_5 $$ String chunk1 = "SEND\na:alpha\n\nMessage"-->Line_7 $$ List<Message<byte[]>> messages = stompDecoder.decode(toByteBuffer(chunk1))[ FD ]
