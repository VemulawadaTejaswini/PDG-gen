Line_13 $$ while (it.hasNext()) -->Line_24 $$ myResolvingProcessor.scheduleTask(new MavenProjectsProcessorResolvingTask(each, myProjectsTree, getGeneralSettings(), onCompletion, context))[ CD ]
Line_13 $$ while (it.hasNext()) -->Line_15 $$ Runnable onCompletion = it.hasNext() ? null : new Runnable() [ CD ]
Line_6 $$ LinkedHashSet<MavenProject> toResolve-->Line_8 $$ toResolve = new LinkedHashSet<MavenProject>(myProjectsToResolve)[ FD ]
Line_4 $$ runWhenFullyOpen(new Runnable() -->Line_6 $$ LinkedHashSet<MavenProject> toResolve[ CD ]
Line_4 $$ runWhenFullyOpen(new Runnable() -->Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()[ CD ]
Line_2 $$ private AsyncPromise<List<Module>> scheduleResolve() -->Line_3 $$ final AsyncPromise<List<Module>> result = new AsyncPromise<List<Module>>()[ CD ]
Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()-->Line_13 $$ while (it.hasNext()) [ FD ]
Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()-->Line_15 $$ Runnable onCompletion = it.hasNext() ? null : new Runnable() [ FD ]
Line_4 $$ runWhenFullyOpen(new Runnable() -->Line_11 $$ final ResolveContext context = new ResolveContext()[ CD ]
Line_3 $$ final AsyncPromise<List<Module>> result = new AsyncPromise<List<Module>>()-->Line_18 $$ scheduleImport().processed(result)[ FD ]
Line_15 $$ Runnable onCompletion = it.hasNext() ? null : new Runnable() -->Line_17 $$ if (hasScheduledProjects()) [ CD ]
Line_4 $$ runWhenFullyOpen(new Runnable() -->Line_13 $$ while (it.hasNext()) [ CD ]
Line_2 $$ private AsyncPromise<List<Module>> scheduleResolve() -->Line_28 $$ return result[ CD ]
Line_3 $$ final AsyncPromise<List<Module>> result = new AsyncPromise<List<Module>>()-->Line_20 $$ result.setResult(Collections.<Module>emptyList())[ FD ]
Line_13 $$ while (it.hasNext()) -->Line_14 $$ MavenProject each = it.next()[ CD ]
Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()-->Line_14 $$ MavenProject each = it.next()[ FD ]
Line_6 $$ LinkedHashSet<MavenProject> toResolve-->Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()[ FD ]
Line_2 $$ private AsyncPromise<List<Module>> scheduleResolve() -->Line_4 $$ runWhenFullyOpen(new Runnable() [ CD ]
Line_17 $$ if (hasScheduledProjects()) -->Line_18 $$ scheduleImport().processed(result)[ CD ]
Line_17 $$ if (hasScheduledProjects()) -->Line_20 $$ result.setResult(Collections.<Module>emptyList())[ CD ]
Line_8 $$ toResolve = new LinkedHashSet<MavenProject>(myProjectsToResolve)-->Line_12 $$ Iterator<MavenProject> it = toResolve.iterator()[ FD ]
