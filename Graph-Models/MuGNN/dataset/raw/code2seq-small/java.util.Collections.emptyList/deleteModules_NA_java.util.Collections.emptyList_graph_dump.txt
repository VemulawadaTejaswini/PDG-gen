Line_3 $$ List<Module> deleted = new ArrayList<Module>()-->Line_8 $$ deleted.add(module)[ FD ]
Line_2 $$ public List<Module> deleteModules(final Collection<Module> modules) -->Line_12 $$ if (doRemoveModules(moduleEditors)) [ CD ]
Line_6 $$ ModuleEditor moduleEditor = getModuleEditor(module)-->Line_7 $$ if (moduleEditor != null) [ FD ]
Line_2 $$ public List<Module> deleteModules(final Collection<Module> modules) -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_7 $$ if (moduleEditor != null) -->Line_8 $$ deleted.add(module)[ CD ]
Line_12 $$ if (doRemoveModules(moduleEditors)) -->Line_13 $$ return deleted[ CD ]
Line_5 $$ for (Module module : modules) -->Line_6 $$ ModuleEditor moduleEditor = getModuleEditor(module)[ FD ]
Line_4 $$ List<ModuleEditor> moduleEditors = new ArrayList<ModuleEditor>()-->Line_12 $$ if (doRemoveModules(moduleEditors)) [ FD ]
Line_5 $$ for (Module module : modules) -->Line_8 $$ deleted.add(module)[ FD ]
Line_4 $$ List<ModuleEditor> moduleEditors = new ArrayList<ModuleEditor>()-->Line_9 $$ moduleEditors.add(moduleEditor)[ FD ]
Line_6 $$ ModuleEditor moduleEditor = getModuleEditor(module)-->Line_9 $$ moduleEditors.add(moduleEditor)[ FD ]
Line_7 $$ if (moduleEditor != null) -->Line_9 $$ moduleEditors.add(moduleEditor)[ CD ]
Line_2 $$ public List<Module> deleteModules(final Collection<Module> modules) -->Line_4 $$ List<ModuleEditor> moduleEditors = new ArrayList<ModuleEditor>()[ CD ]
Line_2 $$ public List<Module> deleteModules(final Collection<Module> modules) -->Line_3 $$ List<Module> deleted = new ArrayList<Module>()[ CD ]
