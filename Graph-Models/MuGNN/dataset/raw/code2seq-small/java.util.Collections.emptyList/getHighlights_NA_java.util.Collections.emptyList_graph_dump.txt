Line_2 $$ private List<HighlightInfo> getHighlights() -->Line_6 $$ Set<Pair<Object, TextRange>> existingMarkupTooltips = new HashSet<Pair<Object, TextRange>>()[ CD ]
Line_6 $$ Set<Pair<Object, TextRange>> existingMarkupTooltips = new HashSet<Pair<Object, TextRange>>()-->Line_12 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_READ, existingMarkupTooltips), result)[ FD ]
Line_2 $$ private List<HighlightInfo> getHighlights() -->Line_17 $$ return result[ CD ]
Line_7 $$ for (RangeHighlighter highlighter : myEditor.getMarkupModel().getAllHighlighters()) -->Line_8 $$ existingMarkupTooltips.add(Pair.create(highlighter.getErrorStripeTooltip(), new TextRange(highlighter.getStartOffset(), highlighter.getEndOffset())))[ FD ]
Line_6 $$ Set<Pair<Object, TextRange>> existingMarkupTooltips = new HashSet<Pair<Object, TextRange>>()-->Line_8 $$ existingMarkupTooltips.add(Pair.create(highlighter.getErrorStripeTooltip(), new TextRange(highlighter.getStartOffset(), highlighter.getEndOffset())))[ FD ]
Line_10 $$ List<HighlightInfo> result = new ArrayList<HighlightInfo>(myReadAccessRanges.size() + myWriteAccessRanges.size())-->Line_15 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_WRITE, existingMarkupTooltips), result)[ FD ]
Line_11 $$ for (TextRange range : myReadAccessRanges) -->Line_12 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_READ, existingMarkupTooltips), result)[ FD ]
Line_11 $$ for (TextRange range : myReadAccessRanges) -->Line_15 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_WRITE, existingMarkupTooltips), result)[ FD ]
Line_3 $$ if (myReadAccessRanges.isEmpty() && myWriteAccessRanges.isEmpty()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<HighlightInfo> getHighlights() -->Line_3 $$ if (myReadAccessRanges.isEmpty() && myWriteAccessRanges.isEmpty()) [ CD ]
Line_2 $$ private List<HighlightInfo> getHighlights() -->Line_10 $$ List<HighlightInfo> result = new ArrayList<HighlightInfo>(myReadAccessRanges.size() + myWriteAccessRanges.size())[ CD ]
Line_6 $$ Set<Pair<Object, TextRange>> existingMarkupTooltips = new HashSet<Pair<Object, TextRange>>()-->Line_15 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_WRITE, existingMarkupTooltips), result)[ FD ]
Line_10 $$ List<HighlightInfo> result = new ArrayList<HighlightInfo>(myReadAccessRanges.size() + myWriteAccessRanges.size())-->Line_12 $$ ContainerUtil.addIfNotNull(createHighlightInfo(range, HighlightInfoType.ELEMENT_UNDER_CARET_READ, existingMarkupTooltips), result)[ FD ]
