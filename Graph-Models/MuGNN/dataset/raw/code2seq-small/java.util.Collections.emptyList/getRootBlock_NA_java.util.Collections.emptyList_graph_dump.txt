Line_13 $$ if (builder != null) -->Line_14 $$ final FormattingModel model = builder.createModel(viewProvider.getPsi(dataLanguage), settings)[ CD ]
Line_8 $$ final Language dataLanguage = ((TemplateLanguageFileViewProvider) viewProvider).getTemplateDataLanguage()-->Line_14 $$ final FormattingModel model = builder.createModel(viewProvider.getPsi(dataLanguage), settings)[ FD ]
Line_13 $$ if (builder != null) -->Line_19 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, filterBlocksByRange(childWrappers, node.getTextRange()), settings)[ CD ]
Line_15 $$ List<DataLanguageBlockWrapper> childWrappers = buildChildWrappers(model.getRootBlock())-->Line_19 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, filterBlocksByRange(childWrappers, node.getTextRange()), settings)[ FD ]
Line_3 $$ ASTNode node = element.getNode()-->Line_19 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, filterBlocksByRange(childWrappers, node.getTextRange()), settings)[ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) [ FD ]
Line_3 $$ ASTNode node = element.getNode()-->Line_11 $$ return createDummyBlock(node)[ FD ]
Line_4 $$ if (node == null) -->Line_5 $$ return createDummyBlock(node)[ CD ]
Line_13 $$ if (builder != null) -->Line_16 $$ if (childWrappers.size() == 1) [ CD ]
Line_15 $$ List<DataLanguageBlockWrapper> childWrappers = buildChildWrappers(model.getRootBlock())-->Line_17 $$ childWrappers = buildChildWrappers(childWrappers.get(0).getOriginal())[ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_4 $$ if (node == null) [ CD ]
Line_15 $$ List<DataLanguageBlockWrapper> childWrappers = buildChildWrappers(model.getRootBlock())-->Line_16 $$ if (childWrappers.size() == 1) [ FD ]
Line_3 $$ ASTNode node = element.getNode()-->Line_22 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, Collections.<DataLanguageBlockWrapper>emptyList(), settings)[ FD ]
Line_9 $$ final FormattingModelBuilder builder = LanguageFormatting.INSTANCE.forLanguage(dataLanguage)-->Line_14 $$ final FormattingModel model = builder.createModel(viewProvider.getPsi(dataLanguage), settings)[ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_22 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, Collections.<DataLanguageBlockWrapper>emptyList(), settings)[ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_19 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, filterBlocksByRange(childWrappers, node.getTextRange()), settings)[ FD ]
Line_10 $$ if (builder instanceof DelegatingFormattingModelBuilder && ((DelegatingFormattingModelBuilder) builder).dontFormatMyModel()) -->Line_11 $$ return createDummyBlock(node)[ CD ]
Line_9 $$ final FormattingModelBuilder builder = LanguageFormatting.INSTANCE.forLanguage(dataLanguage)-->Line_13 $$ if (builder != null) [ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_3 $$ ASTNode node = element.getNode()[ CD ]
Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) -->Line_13 $$ if (builder != null) [ CD ]
Line_17 $$ childWrappers = buildChildWrappers(childWrappers.get(0).getOriginal())-->Line_19 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, filterBlocksByRange(childWrappers, node.getTextRange()), settings)[ FD ]
Line_14 $$ final FormattingModel model = builder.createModel(viewProvider.getPsi(dataLanguage), settings)-->Line_15 $$ List<DataLanguageBlockWrapper> childWrappers = buildChildWrappers(model.getRootBlock())[ FD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_3 $$ ASTNode node = element.getNode()[ FD ]
Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) -->Line_9 $$ final FormattingModelBuilder builder = LanguageFormatting.INSTANCE.forLanguage(dataLanguage)[ CD ]
Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) -->Line_8 $$ final Language dataLanguage = ((TemplateLanguageFileViewProvider) viewProvider).getTemplateDataLanguage()[ CD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_22 $$ return createTemplateLanguageBlock(node, Wrap.createWrap(WrapType.NONE, false), null, Collections.<DataLanguageBlockWrapper>emptyList(), settings)[ CD ]
Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) -->Line_10 $$ if (builder instanceof DelegatingFormattingModelBuilder && ((DelegatingFormattingModelBuilder) builder).dontFormatMyModel()) [ CD ]
Line_3 $$ ASTNode node = element.getNode()-->Line_5 $$ return createDummyBlock(node)[ FD ]
Line_8 $$ final Language dataLanguage = ((TemplateLanguageFileViewProvider) viewProvider).getTemplateDataLanguage()-->Line_9 $$ final FormattingModelBuilder builder = LanguageFormatting.INSTANCE.forLanguage(dataLanguage)[ FD ]
Line_16 $$ if (childWrappers.size() == 1) -->Line_17 $$ childWrappers = buildChildWrappers(childWrappers.get(0).getOriginal())[ CD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_7 $$ if (viewProvider instanceof TemplateLanguageFileViewProvider) [ CD ]
Line_13 $$ if (builder != null) -->Line_15 $$ List<DataLanguageBlockWrapper> childWrappers = buildChildWrappers(model.getRootBlock())[ CD ]
Line_2 $$ protected Block getRootBlock(PsiElement element, FileViewProvider viewProvider, CodeStyleSettings settings) -->Line_14 $$ final FormattingModel model = builder.createModel(viewProvider.getPsi(dataLanguage), settings)[ FD ]
Line_3 $$ ASTNode node = element.getNode()-->Line_4 $$ if (node == null) [ FD ]
