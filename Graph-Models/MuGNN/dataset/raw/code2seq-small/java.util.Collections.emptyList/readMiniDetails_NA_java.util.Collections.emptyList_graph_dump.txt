Line_17 $$ String subject = extractSubject(message)-->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ FD ]
Line_16 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)-->Line_17 $$ String subject = extractSubject(message)[ FD ]
Line_19 $$ for (HgRevisionNumber parent : parents) -->Line_20 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ CD ]
Line_13 $$ HgCommandResult result = getLogResult(project, root, version, -1, prepareHashes(hashes), HgChangesetUtil.makeTemplate(templates))-->Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() [ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_10 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() [ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_4 $$ if (factory == null) [ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ FD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_18 $$ List<Hash> parentsHash = new SmartList<Hash>()[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() [ CD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_17 $$ String subject = extractSubject(message)[ CD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ CD ]
Line_9 $$ HgVersion version = hgvcs.getVersion()-->Line_10 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_11 $$ templateList.add("[ CD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_16 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ CD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_20 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_13 $$ HgCommandResult result = getLogResult(project, root, version, -1, prepareHashes(hashes), HgChangesetUtil.makeTemplate(templates))[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_4 $$ if (factory == null) [ CD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ FD ]
Line_18 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ FD ]
Line_4 $$ if (factory == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_13 $$ HgCommandResult result = getLogResult(project, root, version, -1, prepareHashes(hashes), HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_10 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)-->Line_12 $$ String[] templates = ArrayUtil.toStringArray(templateList)[ FD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ FD ]
Line_9 $$ HgVersion version = hgvcs.getVersion()-->Line_13 $$ HgCommandResult result = getLogResult(project, root, version, -1, prepareHashes(hashes), HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_7 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_9 $$ HgVersion version = hgvcs.getVersion()[ FD ]
Line_10 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)-->Line_11 $$ templateList.add("[ FD ]
Line_14 $$ return getCommitRecords(project, result, new HgBaseLogParser<VcsShortCommitDetails>() -->Line_16 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_9 $$ HgVersion version = hgvcs.getVersion()[ CD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_12 $$ String[] templates = ArrayUtil.toStringArray(templateList)[ CD ]
Line_12 $$ String[] templates = ArrayUtil.toStringArray(templateList)-->Line_13 $$ HgCommandResult result = getLogResult(project, root, version, -1, prepareHashes(hashes), HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_22 $$ return factory.createShortDetails(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, author, email, revisionDate.getTime())[ FD ]
Line_2 $$ public static List<? extends VcsShortCommitDetails> readMiniDetails(@NotNull Project project, @NotNull final VirtualFile root, @NotNull List<String> hashes) throws VcsException -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ FD ]
Line_18 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_20 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
