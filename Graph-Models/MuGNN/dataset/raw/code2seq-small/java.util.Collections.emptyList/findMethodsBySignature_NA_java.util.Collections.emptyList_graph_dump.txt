Line_15 $$ substitutor = PsiSubstitutor.EMPTY-->Line_17 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_8 $$ final MethodSignature patternSignature = patternMethod.getSignature(PsiSubstitutor.EMPTY)-->Line_18 $$ if (signature.equals(patternSignature)) [ FD ]
Line_12 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) -->Line_15 $$ substitutor = PsiSubstitutor.EMPTY[ CD ]
Line_11 $$ final PsiSubstitutor substitutor-->Line_13 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ FD ]
Line_12 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) -->Line_13 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ CD ]
Line_9 $$ for (final PsiMethod method : methodsByName) -->Line_17 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_10 $$ final PsiClass superClass = method.getContainingClass()-->Line_13 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ FD ]
Line_11 $$ final PsiSubstitutor substitutor-->Line_17 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_13 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)-->Line_15 $$ substitutor = PsiSubstitutor.EMPTY[ FD ]
Line_10 $$ final PsiClass superClass = method.getContainingClass()-->Line_12 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) [ FD ]
Line_9 $$ for (final PsiMethod method : methodsByName) -->Line_10 $$ final PsiClass superClass = method.getContainingClass()[ FD ]
Line_9 $$ for (final PsiMethod method : methodsByName) -->Line_19 $$ methods.add(method)[ FD ]
Line_5 $$ if (methodsByName.length == 0)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_17 $$ final MethodSignature signature = method.getSignature(substitutor)-->Line_18 $$ if (signature.equals(patternSignature)) [ FD ]
Line_7 $$ final List<PsiMethod> methods = new SmartList<PsiMethod>()-->Line_19 $$ methods.add(method)[ FD ]
Line_13 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)-->Line_17 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_18 $$ if (signature.equals(patternSignature)) -->Line_20 $$ if (stopOnFirst) [ CD ]
Line_18 $$ if (signature.equals(patternSignature)) -->Line_19 $$ methods.add(method)[ CD ]
Line_11 $$ final PsiSubstitutor substitutor-->Line_15 $$ substitutor = PsiSubstitutor.EMPTY[ FD ]
