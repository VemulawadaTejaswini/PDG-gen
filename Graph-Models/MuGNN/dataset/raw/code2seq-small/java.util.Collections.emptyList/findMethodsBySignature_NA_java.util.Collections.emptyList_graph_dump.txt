Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_11 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) [ FD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_3 $$ final PsiMethod[] methodsByName = aClass.findMethodsByName(patternMethod.getName(), checkBases)[ FD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_7 $$ final MethodSignature patternSignature = patternMethod.getSignature(PsiSubstitutor.EMPTY)[ CD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_6 $$ final List<PsiMethod> methods = new SmartList<PsiMethod>()[ CD ]
Line_17 $$ if (signature.equals(patternSignature)) -->Line_19 $$ if (stopOnFirst) [ CD ]
Line_4 $$ if (methodsByName.length == 0)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_8 $$ for (final PsiMethod method : methodsByName) -->Line_18 $$ methods.add(method)[ FD ]
Line_10 $$ final PsiSubstitutor substitutor-->Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ FD ]
Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)-->Line_14 $$ substitutor = PsiSubstitutor.EMPTY[ FD ]
Line_10 $$ final PsiSubstitutor substitutor-->Line_14 $$ substitutor = PsiSubstitutor.EMPTY[ FD ]
Line_14 $$ substitutor = PsiSubstitutor.EMPTY-->Line_16 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_17 $$ if (signature.equals(patternSignature)) -->Line_18 $$ methods.add(method)[ CD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_24 $$ return methods[ CD ]
Line_11 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) -->Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ CD ]
Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)-->Line_16 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_16 $$ final MethodSignature signature = method.getSignature(substitutor)-->Line_17 $$ if (signature.equals(patternSignature)) [ FD ]
Line_8 $$ for (final PsiMethod method : methodsByName) -->Line_16 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_9 $$ final PsiClass superClass = method.getContainingClass()-->Line_11 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) [ FD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_4 $$ if (methodsByName.length == 0)[ CD ]
Line_8 $$ for (final PsiMethod method : methodsByName) -->Line_9 $$ final PsiClass superClass = method.getContainingClass()[ FD ]
Line_7 $$ final MethodSignature patternSignature = patternMethod.getSignature(PsiSubstitutor.EMPTY)-->Line_17 $$ if (signature.equals(patternSignature)) [ FD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ FD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_3 $$ final PsiMethod[] methodsByName = aClass.findMethodsByName(patternMethod.getName(), checkBases)[ CD ]
Line_2 $$ private static List<PsiMethod> findMethodsBySignature(@NotNull PsiClass aClass, @NotNull PsiMethod patternMethod, boolean checkBases, boolean stopOnFirst) -->Line_7 $$ final MethodSignature patternSignature = patternMethod.getSignature(PsiSubstitutor.EMPTY)[ FD ]
Line_10 $$ final PsiSubstitutor substitutor-->Line_16 $$ final MethodSignature signature = method.getSignature(substitutor)[ FD ]
Line_9 $$ final PsiClass superClass = method.getContainingClass()-->Line_12 $$ substitutor = TypeConversionUtil.getSuperClassSubstitutor(superClass, aClass, PsiSubstitutor.EMPTY)[ FD ]
Line_6 $$ final List<PsiMethod> methods = new SmartList<PsiMethod>()-->Line_18 $$ methods.add(method)[ FD ]
Line_11 $$ if (checkBases && !aClass.equals(superClass) && superClass != null) -->Line_14 $$ substitutor = PsiSubstitutor.EMPTY[ CD ]
