Line_29 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)-->Line_30 $$ return target.isEmpty() && file != null ? Collections.singletonList(file) : target[ FD ]
Line_18 $$ final String pathComponent = st.nextToken()-->Line_20 $$ folders.addFirst(pathComponent)[ FD ]
Line_15 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_19 $$ if (st.hasMoreTokens()) [ FD ]
Line_15 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_17 $$ while (st.hasMoreTokens()) [ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_17 $$ while (st.hasMoreTokens()) [ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_10 $$ if (inProjectContent) [ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_16 $$ String fileName = null[ CD ]
Line_15 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_18 $$ final String pathComponent = st.nextToken()[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_29 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_26 $$ if (fileName == null) [ CD ]
Line_16 $$ String fileName = null-->Line_29 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_29 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ CD ]
Line_26 $$ if (fileName == null) -->Line_27 $$ return Collections.emptyList()[ CD ]
Line_10 $$ if (inProjectContent) -->Line_11 $$ return Collections.singletonList(file)[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_30 $$ return target.isEmpty() && file != null ? Collections.singletonList(file) : target[ CD ]
Line_17 $$ while (st.hasMoreTokens()) -->Line_18 $$ final String pathComponent = st.nextToken()[ CD ]
Line_16 $$ String fileName = null-->Line_26 $$ if (fileName == null) [ FD ]
Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()-->Line_9 $$ final boolean inProjectContent = file != null && (index.isInContent(file))[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_9 $$ final boolean inProjectContent = file != null && (index.isInContent(file))[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_15 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)[ CD ]
Line_19 $$ if (st.hasMoreTokens()) -->Line_20 $$ folders.addFirst(pathComponent)[ CD ]
Line_17 $$ while (st.hasMoreTokens()) -->Line_19 $$ if (st.hasMoreTokens()) [ CD ]
