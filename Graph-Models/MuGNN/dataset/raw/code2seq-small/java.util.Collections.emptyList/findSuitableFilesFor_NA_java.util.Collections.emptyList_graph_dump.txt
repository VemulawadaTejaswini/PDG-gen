Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_14 $$ if (st.hasMoreTokens()) -->Line_17 $$ fileName = pathComponent[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_9 $$ final LinkedList<String> folders = new LinkedList<String>()[ CD ]
Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)-->Line_24 $$ return target.isEmpty() && file != null ? Collections.singletonList(file) : target[ FD ]
Line_11 $$ String fileName = null-->Line_20 $$ if (fileName == null) [ FD ]
Line_17 $$ fileName = pathComponent-->Line_20 $$ if (fileName == null) [ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_20 $$ if (fileName == null) [ CD ]
Line_4 $$ final VirtualFile file = getByFullPath(filePath)-->Line_7 $$ return Collections.singletonList(file)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_6 $$ if (inProjectContent) [ CD ]
Line_20 $$ if (fileName == null) -->Line_21 $$ return Collections.emptyList()[ CD ]
Line_10 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_14 $$ if (st.hasMoreTokens()) [ FD ]
Line_14 $$ if (st.hasMoreTokens()) -->Line_15 $$ folders.addFirst(pathComponent)[ CD ]
Line_9 $$ final LinkedList<String> folders = new LinkedList<String>()-->Line_15 $$ folders.addFirst(pathComponent)[ FD ]
Line_12 $$ while (st.hasMoreTokens()) -->Line_13 $$ final String pathComponent = st.nextToken()[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_10 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)[ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_12 $$ while (st.hasMoreTokens()) [ CD ]
Line_12 $$ while (st.hasMoreTokens()) -->Line_14 $$ if (st.hasMoreTokens()) [ CD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_5 $$ final boolean inProjectContent = file != null && (index.isInContent(file))[ CD ]
Line_11 $$ String fileName = null-->Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_24 $$ return target.isEmpty() && file != null ? Collections.singletonList(file) : target[ CD ]
Line_13 $$ final String pathComponent = st.nextToken()-->Line_17 $$ fileName = pathComponent[ FD ]
Line_10 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_13 $$ final String pathComponent = st.nextToken()[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_17 $$ fileName = pathComponent-->Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_11 $$ String fileName = null[ CD ]
Line_11 $$ String fileName = null-->Line_17 $$ fileName = pathComponent[ FD ]
Line_9 $$ final LinkedList<String> folders = new LinkedList<String>()-->Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_4 $$ final VirtualFile file = getByFullPath(filePath)[ CD ]
Line_4 $$ final VirtualFile file = getByFullPath(filePath)-->Line_24 $$ return target.isEmpty() && file != null ? Collections.singletonList(file) : target[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_4 $$ final VirtualFile file = getByFullPath(filePath)[ FD ]
Line_4 $$ final VirtualFile file = getByFullPath(filePath)-->Line_5 $$ final boolean inProjectContent = file != null && (index.isInContent(file))[ FD ]
Line_10 $$ final StringTokenizer st = new StringTokenizer(filePath, "/", false)-->Line_12 $$ while (st.hasMoreTokens()) [ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_6 $$ if (inProjectContent) -->Line_7 $$ return Collections.singletonList(file)[ CD ]
Line_3 $$ final ProjectFileIndex index = ProjectRootManager.getInstance(project).getFileIndex()-->Line_5 $$ final boolean inProjectContent = file != null && (index.isInContent(file))[ FD ]
Line_13 $$ final String pathComponent = st.nextToken()-->Line_15 $$ folders.addFirst(pathComponent)[ FD ]
Line_2 $$ public static List<VirtualFile> findSuitableFilesFor(final String filePath, final Project project) -->Line_23 $$ final List<VirtualFile> target = findFilesClosestToTarget(folders, collectCandidates(project, fileName, true), MIN_PROXIMITY_THRESHOLD)[ CD ]
