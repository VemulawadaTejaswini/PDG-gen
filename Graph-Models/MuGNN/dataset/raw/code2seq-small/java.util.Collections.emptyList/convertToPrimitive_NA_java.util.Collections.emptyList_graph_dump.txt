Line_5 $$ final List<Method> methods = wrapperClass.methodsByName(conversionMethodName, conversionMethodSignature)-->Line_9 $$ return process.invokeMethod(context, value, methods.get(0), Collections.emptyList())[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_5 $$ final List<Method> methods = wrapperClass.methodsByName(conversionMethodName, conversionMethodSignature)[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_9 $$ return process.invokeMethod(context, value, methods.get(0), Collections.emptyList())[ CD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_6 $$ if (methods.size() == 0) [ CD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_9 $$ return process.invokeMethod(context, value, methods.get(0), Collections.emptyList())[ FD ]
Line_3 $$ final DebugProcessImpl process = context.getDebugProcess()-->Line_9 $$ return process.invokeMethod(context, value, methods.get(0), Collections.emptyList())[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_5 $$ final List<Method> methods = wrapperClass.methodsByName(conversionMethodName, conversionMethodSignature)[ CD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_4 $$ final ClassType wrapperClass = (ClassType) value.referenceType()[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_4 $$ final ClassType wrapperClass = (ClassType) value.referenceType()[ CD ]
Line_5 $$ final List<Method> methods = wrapperClass.methodsByName(conversionMethodName, conversionMethodSignature)-->Line_6 $$ if (methods.size() == 0) [ FD ]
Line_4 $$ final ClassType wrapperClass = (ClassType) value.referenceType()-->Line_5 $$ final List<Method> methods = wrapperClass.methodsByName(conversionMethodName, conversionMethodSignature)[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_3 $$ final DebugProcessImpl process = context.getDebugProcess()[ FD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_3 $$ final DebugProcessImpl process = context.getDebugProcess()[ CD ]
Line_2 $$ private static Value convertToPrimitive(EvaluationContextImpl context, ObjectReference value, final String conversionMethodName, String conversionMethodSignature) throws EvaluateException -->Line_7 $$ throw new EvaluateException("Cannot convert to primitive value of type " + value.type() + ": Unable to find method " + conversionMethodName + conversionMethodSignature)[ FD ]
