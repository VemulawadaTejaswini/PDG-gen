Line_3 $$ List<PatchAction> expectedActions = Arrays.asList(new CreateAction(myPatch, "newDir/newFile.txt"), new UpdateAction(myPatch, "Readme.txt", CHECKSUMS.README_TXT), new UpdateZipAction(myPatch, "lib/annotations.jar", Arrays.asList("org/jetbrains/annotations/NewClass.class"), Arrays.asList("org/jetbrains/annotations/Nullable.class"), Arrays.asList("org/jetbrains/annotations/TestOnly.class"), CHECKSUMS.ANNOTATIONS_JAR), new UpdateZipAction(myPatch, "lib/bootstrap.jar", Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("com/intellij/ide/ClassloaderUtil.class"), CHECKSUMS.BOOTSTRAP_JAR), new DeleteAction(myPatch, "bin/idea.bat", CHECKSUMS.IDEA_BAT))-->Line_5 $$ Collections.sort(expectedActions, COMPARATOR)[ FD ]
Line_2 $$ public void testBasics() throws Exception -->Line_4 $$ List<PatchAction> actualActions = new ArrayList<PatchAction>(myPatch.getActions())[ CD ]
Line_2 $$ public void testBasics() throws Exception -->Line_7 $$ assertEquals(expectedActions, actualActions)[ CD ]
Line_2 $$ public void testBasics() throws Exception -->Line_6 $$ Collections.sort(actualActions, COMPARATOR)[ CD ]
Line_4 $$ List<PatchAction> actualActions = new ArrayList<PatchAction>(myPatch.getActions())-->Line_6 $$ Collections.sort(actualActions, COMPARATOR)[ FD ]
Line_4 $$ List<PatchAction> actualActions = new ArrayList<PatchAction>(myPatch.getActions())-->Line_7 $$ assertEquals(expectedActions, actualActions)[ FD ]
Line_2 $$ public void testBasics() throws Exception -->Line_5 $$ Collections.sort(expectedActions, COMPARATOR)[ CD ]
Line_2 $$ public void testBasics() throws Exception -->Line_3 $$ List<PatchAction> expectedActions = Arrays.asList(new CreateAction(myPatch, "newDir/newFile.txt"), new UpdateAction(myPatch, "Readme.txt", CHECKSUMS.README_TXT), new UpdateZipAction(myPatch, "lib/annotations.jar", Arrays.asList("org/jetbrains/annotations/NewClass.class"), Arrays.asList("org/jetbrains/annotations/Nullable.class"), Arrays.asList("org/jetbrains/annotations/TestOnly.class"), CHECKSUMS.ANNOTATIONS_JAR), new UpdateZipAction(myPatch, "lib/bootstrap.jar", Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("com/intellij/ide/ClassloaderUtil.class"), CHECKSUMS.BOOTSTRAP_JAR), new DeleteAction(myPatch, "bin/idea.bat", CHECKSUMS.IDEA_BAT))[ CD ]
Line_3 $$ List<PatchAction> expectedActions = Arrays.asList(new CreateAction(myPatch, "newDir/newFile.txt"), new UpdateAction(myPatch, "Readme.txt", CHECKSUMS.README_TXT), new UpdateZipAction(myPatch, "lib/annotations.jar", Arrays.asList("org/jetbrains/annotations/NewClass.class"), Arrays.asList("org/jetbrains/annotations/Nullable.class"), Arrays.asList("org/jetbrains/annotations/TestOnly.class"), CHECKSUMS.ANNOTATIONS_JAR), new UpdateZipAction(myPatch, "lib/bootstrap.jar", Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("com/intellij/ide/ClassloaderUtil.class"), CHECKSUMS.BOOTSTRAP_JAR), new DeleteAction(myPatch, "bin/idea.bat", CHECKSUMS.IDEA_BAT))-->Line_7 $$ assertEquals(expectedActions, actualActions)[ FD ]
