Line_14 $$ List<Range<Token>> ranges = new ArrayList(size + 1)-->Line_20 $$ ranges.add(range)[ FD ]
Line_15 $$ for (int i = 1; i < size; ++i) -->Line_16 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))[ FD ]
Line_11 $$ if (sortedTokens.isEmpty())-->Line_12 $$ return Collections.emptyList()[ CD ]
Line_15 $$ for (int i = 1; i < size; ++i) -->Line_16 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))[ CD ]
Line_13 $$ int size = sortedTokens.size()-->Line_15 $$ for (int i = 1; i < size; ++i) [ FD ]
Line_9 $$ if (logger.isDebugEnabled())-->Line_10 $$ logger.debug("computing ranges for [ CD ]
Line_19 $$ Range<Token> range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0))-->Line_20 $$ ranges.add(range)[ FD ]
Line_16 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))-->Line_17 $$ ranges.add(range)[ FD ]
Line_15 $$ for (int i = 1; i < size; ++i) -->Line_17 $$ ranges.add(range)[ CD ]
Line_16 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))-->Line_20 $$ ranges.add(range)[ FD ]
Line_14 $$ List<Range<Token>> ranges = new ArrayList(size + 1)-->Line_17 $$ ranges.add(range)[ FD ]
