Line_7 $$ int size = sortedTokens.size()-->Line_9 $$ for (int i = 1; i < size; ++i) [ FD ]
Line_8 $$ List<Range<Token>> ranges = new ArrayList(size + 1)-->Line_14 $$ ranges.add(range)[ FD ]
Line_10 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))-->Line_14 $$ ranges.add(range)[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_10 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))[ FD ]
Line_5 $$ if (sortedTokens.isEmpty())-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_4 $$ logger.debug("computing ranges for [ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_5 $$ if (sortedTokens.isEmpty())[ CD ]
Line_10 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))-->Line_11 $$ ranges.add(range)[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_7 $$ int size = sortedTokens.size()[ CD ]
Line_9 $$ for (int i = 1; i < size; ++i) -->Line_11 $$ ranges.add(range)[ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_5 $$ if (sortedTokens.isEmpty())[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_7 $$ int size = sortedTokens.size()[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_15 $$ return ranges[ CD ]
Line_13 $$ Range<Token> range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0))-->Line_14 $$ ranges.add(range)[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_14 $$ ranges.add(range)[ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_13 $$ Range<Token> range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0))[ CD ]
Line_9 $$ for (int i = 1; i < size; ++i) -->Line_10 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))[ FD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_3 $$ if (logger.isDebugEnabled())[ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_13 $$ Range<Token> range = new Range(sortedTokens.get(size - 1), sortedTokens.get(0))[ FD ]
Line_8 $$ List<Range<Token>> ranges = new ArrayList(size + 1)-->Line_11 $$ ranges.add(range)[ FD ]
Line_3 $$ if (logger.isDebugEnabled())-->Line_4 $$ logger.debug("computing ranges for [ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_8 $$ List<Range<Token>> ranges = new ArrayList(size + 1)[ CD ]
Line_2 $$ public List<Range<Token>> getAllRanges(List<Token> sortedTokens) -->Line_9 $$ for (int i = 1; i < size; ++i) [ CD ]
Line_9 $$ for (int i = 1; i < size; ++i) -->Line_10 $$ Range<Token> range = new Range(sortedTokens.get(i - 1), sortedTokens.get(i))[ CD ]
