Line_8 $$ Collection<Url> urls = getUrls(urlProvider, request)-->Line_9 $$ if (!urls.isEmpty()) [ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_19 $$ return file instanceof LightVirtualFile || !request.getFile().getViewProvider().isPhysical() ? Collections.<Url>emptyList() : Collections.singletonList(Urls.newFromVirtualFile(file))[ FD ]
Line_5 $$ DumbService dumbService = DumbService.getInstance(request.getProject())-->Line_7 $$ if ((!dumbService.isDumb() || DumbService.isDumbAware(urlProvider)) && urlProvider.canHandleElement(request)) [ FD ]
Line_3 $$ boolean isHtmlOrXml = isHtmlOrXmlFile(request.getFile().getViewProvider().getBaseLanguage())-->Line_14 $$ if (!isHtmlOrXml) [ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_3 $$ boolean isHtmlOrXml = isHtmlOrXmlFile(request.getFile().getViewProvider().getBaseLanguage())[ FD ]
Line_6 $$ for (WebBrowserUrlProvider urlProvider : WebBrowserUrlProvider.EP_NAME.getExtensions()) -->Line_7 $$ if ((!dumbService.isDumb() || DumbService.isDumbAware(urlProvider)) && urlProvider.canHandleElement(request)) [ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_4 $$ if (!preferLocalUrl || !isHtmlOrXml) [ CD ]
Line_9 $$ if (!urls.isEmpty()) -->Line_10 $$ return urls[ CD ]
Line_7 $$ if ((!dumbService.isDumb() || DumbService.isDumbAware(urlProvider)) && urlProvider.canHandleElement(request)) -->Line_8 $$ Collection<Url> urls = getUrls(urlProvider, request)[ CD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_8 $$ Collection<Url> urls = getUrls(urlProvider, request)[ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_18 $$ VirtualFile file = request.getVirtualFile()[ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_19 $$ return file instanceof LightVirtualFile || !request.getFile().getViewProvider().isPhysical() ? Collections.<Url>emptyList() : Collections.singletonList(Urls.newFromVirtualFile(file))[ CD ]
Line_14 $$ if (!isHtmlOrXml) -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_6 $$ for (WebBrowserUrlProvider urlProvider : WebBrowserUrlProvider.EP_NAME.getExtensions()) -->Line_8 $$ Collection<Url> urls = getUrls(urlProvider, request)[ FD ]
Line_18 $$ VirtualFile file = request.getVirtualFile()-->Line_19 $$ return file instanceof LightVirtualFile || !request.getFile().getViewProvider().isPhysical() ? Collections.<Url>emptyList() : Collections.singletonList(Urls.newFromVirtualFile(file))[ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_3 $$ boolean isHtmlOrXml = isHtmlOrXmlFile(request.getFile().getViewProvider().getBaseLanguage())[ CD ]
Line_3 $$ boolean isHtmlOrXml = isHtmlOrXmlFile(request.getFile().getViewProvider().getBaseLanguage())-->Line_4 $$ if (!preferLocalUrl || !isHtmlOrXml) [ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_5 $$ DumbService dumbService = DumbService.getInstance(request.getProject())[ FD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_7 $$ if ((!dumbService.isDumb() || DumbService.isDumbAware(urlProvider)) && urlProvider.canHandleElement(request)) [ FD ]
Line_4 $$ if (!preferLocalUrl || !isHtmlOrXml) -->Line_14 $$ if (!isHtmlOrXml) [ CD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_4 $$ if (!preferLocalUrl || !isHtmlOrXml) [ FD ]
Line_4 $$ if (!preferLocalUrl || !isHtmlOrXml) -->Line_5 $$ DumbService dumbService = DumbService.getInstance(request.getProject())[ CD ]
Line_2 $$ public Collection<Url> getUrlsToOpen(@NotNull OpenInBrowserRequest request, boolean preferLocalUrl) throws WebBrowserUrlProvider.BrowserException -->Line_18 $$ VirtualFile file = request.getVirtualFile()[ CD ]
Line_7 $$ if ((!dumbService.isDumb() || DumbService.isDumbAware(urlProvider)) && urlProvider.canHandleElement(request)) -->Line_9 $$ if (!urls.isEmpty()) [ CD ]
