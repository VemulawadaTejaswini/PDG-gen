Line_12 $$ if (operands.length == 2 && (op == JavaTokenType.EQEQ || op == JavaTokenType.NE)) -->Line_13 $$ return visitEqualityComparison(states, operands[0], operands[1], op == JavaTokenType.EQEQ)[ CD ]
Line_9 $$ if (expr instanceof PsiPolyadicExpression) -->Line_11 $$ IElementType op = ((PsiPolyadicExpression) expr).getOperationTokenType()[ CD ]
Line_52 $$ if (expr instanceof PsiNewExpression) -->Line_53 $$ return toContracts(states, NOT_NULL_VALUE)[ CD ]
Line_19 $$ if (expr instanceof PsiConditionalExpression) -->Line_21 $$ return ContainerUtil.concat(visitExpression(antecedentsOf(filterReturning(conditionResults, TRUE_VALUE)), ((PsiConditionalExpression) expr).getThenExpression()), visitExpression(antecedentsOf(filterReturning(conditionResults, FALSE_VALUE)), ((PsiConditionalExpression) expr).getElseExpression()))[ CD ]
Line_23 $$ if (expr instanceof PsiParenthesizedExpression) -->Line_24 $$ return visitExpression(states, ((PsiParenthesizedExpression) expr).getExpression())[ CD ]
Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_45 $$ ValueConstraint paramConstraint = NULL_VALUE[ CD ]
Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_47 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ CD ]
Line_20 $$ List<MethodContract> conditionResults = visitExpression(states, ((PsiConditionalExpression) expr).getCondition())-->Line_21 $$ return ContainerUtil.concat(visitExpression(antecedentsOf(filterReturning(conditionResults, TRUE_VALUE)), ((PsiConditionalExpression) expr).getThenExpression()), visitExpression(antecedentsOf(filterReturning(conditionResults, FALSE_VALUE)), ((PsiConditionalExpression) expr).getElseExpression()))[ FD ]
Line_69 $$ if (state[paramIndex] != ANY_VALUE) -->Line_72 $$ if (textMatches(getParameter(paramIndex).getTypeElement(), PsiKeyword.BOOLEAN)) [ CD ]
Line_19 $$ if (expr instanceof PsiConditionalExpression) -->Line_20 $$ List<MethodContract> conditionResults = visitExpression(states, ((PsiConditionalExpression) expr).getCondition())[ CD ]
Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_47 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_66 $$ if (paramIndex >= 0) -->Line_67 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_26 $$ if (expr instanceof PsiTypeCastExpression) -->Line_27 $$ return visitExpression(states, ((PsiTypeCastExpression) expr).getOperand())[ CD ]
Line_39 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())-->Line_47 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_45 $$ ValueConstraint paramConstraint = NULL_VALUE-->Line_47 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_55 $$ if (expr instanceof PsiMethodCallExpression) -->Line_56 $$ PsiMethod method = ((PsiMethodCallExpression) expr).resolveMethod()[ CD ]
Line_62 $$ if (constraint != null) -->Line_63 $$ return toContracts(states, constraint)[ CD ]
Line_40 $$ if (parameter >= 0) -->Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() [ CD ]
Line_55 $$ if (expr instanceof PsiMethodCallExpression) -->Line_57 $$ if (method != null && NullableNotNullManager.isNotNull(method)) [ CD ]
Line_72 $$ if (textMatches(getParameter(paramIndex).getTypeElement(), PsiKeyword.BOOLEAN)) -->Line_75 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ CD ]
Line_9 $$ if (expr instanceof PsiPolyadicExpression) -->Line_15 $$ if (op == JavaTokenType.ANDAND || op == JavaTokenType.OROR) [ CD ]
Line_30 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_75 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ FD ]
Line_30 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_33 $$ result.add(new MethodContract(contract.arguments, negateConstraint(contract.returnValue)))[ FD ]
Line_10 $$ PsiExpression[] operands = ((PsiPolyadicExpression) expr).getOperands()-->Line_16 $$ return visitLogicalOperation(operands, op == JavaTokenType.ANDAND, states)[ FD ]
Line_38 $$ if (expr instanceof PsiInstanceOfExpression) -->Line_39 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())[ CD ]
Line_9 $$ if (expr instanceof PsiPolyadicExpression) -->Line_12 $$ if (operands.length == 2 && (op == JavaTokenType.EQEQ || op == JavaTokenType.NE)) [ CD ]
Line_38 $$ if (expr instanceof PsiInstanceOfExpression) -->Line_40 $$ if (parameter >= 0) [ CD ]
Line_4 $$ if (states.isEmpty())-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_46 $$ ValueConstraint returnValue = FALSE_VALUE[ CD ]
Line_46 $$ ValueConstraint returnValue = FALSE_VALUE-->Line_47 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_29 $$ if (expr instanceof PsiPrefixExpression && ((PsiPrefixExpression) expr).getOperationTokenType() == JavaTokenType.EXCL) -->Line_36 $$ return result[ CD ]
Line_39 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())-->Line_40 $$ if (parameter >= 0) [ FD ]
Line_9 $$ if (expr instanceof PsiPolyadicExpression) -->Line_10 $$ PsiExpression[] operands = ((PsiPolyadicExpression) expr).getOperands()[ CD ]
Line_29 $$ if (expr instanceof PsiPrefixExpression && ((PsiPrefixExpression) expr).getOperationTokenType() == JavaTokenType.EXCL) -->Line_30 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_15 $$ if (op == JavaTokenType.ANDAND || op == JavaTokenType.OROR) -->Line_16 $$ return visitLogicalOperation(operands, op == JavaTokenType.ANDAND, states)[ CD ]
Line_32 $$ if (contract.returnValue == TRUE_VALUE || contract.returnValue == FALSE_VALUE) -->Line_33 $$ result.add(new MethodContract(contract.arguments, negateConstraint(contract.returnValue)))[ CD ]
Line_41 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_75 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ FD ]
Line_66 $$ if (paramIndex >= 0) -->Line_78 $$ return result[ CD ]
Line_57 $$ if (method != null && NullableNotNullManager.isNotNull(method)) -->Line_58 $$ return toContracts(states, NOT_NULL_VALUE)[ CD ]
