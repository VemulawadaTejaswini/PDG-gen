Line_21 $$ if (expr instanceof PsiParenthesizedExpression) -->Line_22 $$ return visitExpression(states, ((PsiParenthesizedExpression) expr).getExpression())[ CD ]
Line_28 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_69 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ FD ]
Line_30 $$ if (contract.returnValue == TRUE_VALUE || contract.returnValue == FALSE_VALUE) -->Line_31 $$ result.add(new MethodContract(contract.arguments, negateConstraint(contract.returnValue)))[ CD ]
Line_42 $$ ValueConstraint returnValue = FALSE_VALUE-->Line_43 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_62 $$ if (paramIndex >= 0) -->Line_72 $$ return result[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_29 $$ for (MethodContract contract : visitExpression(states, ((PsiPrefixExpression) expr).getOperand())) [ FD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_43 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ CD ]
Line_67 $$ if (textMatches(getParameter(paramIndex).getTypeElement(), PsiKeyword.BOOLEAN)) -->Line_68 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, TRUE_VALUE, TRUE_VALUE))[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_61 $$ int paramIndex = resolveParameter(expr)[ FD ]
Line_67 $$ if (textMatches(getParameter(paramIndex).getTypeElement(), PsiKeyword.BOOLEAN)) -->Line_69 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ CD ]
Line_36 $$ if (expr instanceof PsiInstanceOfExpression) -->Line_38 $$ if (parameter >= 0) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_51 $$ if (expr instanceof PsiMethodCallExpression) [ FD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_69 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, FALSE_VALUE, FALSE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_36 $$ if (expr instanceof PsiInstanceOfExpression) [ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_21 $$ if (expr instanceof PsiParenthesizedExpression) [ FD ]
Line_27 $$ if (expr instanceof PsiPrefixExpression && ((PsiPrefixExpression) expr).getOperationTokenType() == JavaTokenType.EXCL) -->Line_28 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_41 $$ ValueConstraint paramConstraint = NULL_VALUE[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_62 $$ if (paramIndex >= 0) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_27 $$ if (expr instanceof PsiPrefixExpression && ((PsiPrefixExpression) expr).getOperationTokenType() == JavaTokenType.EXCL) [ CD ]
Line_53 $$ if (method != null && NullableNotNullManager.isNotNull(method)) -->Line_54 $$ return toContracts(states, NOT_NULL_VALUE)[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_57 $$ final ValueConstraint constraint = getLiteralConstraint(expr)[ FD ]
Line_62 $$ if (paramIndex >= 0) -->Line_63 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_49 $$ return toContracts(states, NOT_NULL_VALUE)[ FD ]
Line_18 $$ List<MethodContract> conditionResults = visitExpression(states, ((PsiConditionalExpression) expr).getCondition())-->Line_19 $$ return ContainerUtil.concat(visitExpression(antecedentsOf(filterReturning(conditionResults, TRUE_VALUE)), ((PsiConditionalExpression) expr).getThenExpression()), visitExpression(antecedentsOf(filterReturning(conditionResults, FALSE_VALUE)), ((PsiConditionalExpression) expr).getElseExpression()))[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_18 $$ List<MethodContract> conditionResults = visitExpression(states, ((PsiConditionalExpression) expr).getCondition())[ FD ]
Line_28 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_31 $$ result.add(new MethodContract(contract.arguments, negateConstraint(contract.returnValue)))[ FD ]
Line_28 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_68 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, TRUE_VALUE, TRUE_VALUE))[ FD ]
Line_5 $$ if (states.size() > 300)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_36 $$ if (expr instanceof PsiInstanceOfExpression) -->Line_37 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_48 $$ if (expr instanceof PsiNewExpression) [ FD ]
Line_58 $$ if (constraint != null) -->Line_59 $$ return toContracts(states, constraint)[ CD ]
Line_48 $$ if (expr instanceof PsiNewExpression) -->Line_49 $$ return toContracts(states, NOT_NULL_VALUE)[ CD ]
Line_7 $$ if (expr instanceof PsiPolyadicExpression) -->Line_10 $$ if (operands.length == 2 && (op == JavaTokenType.EQEQ || op == JavaTokenType.NE)) [ CD ]
Line_7 $$ if (expr instanceof PsiPolyadicExpression) -->Line_9 $$ IElementType op = ((PsiPolyadicExpression) expr).getOperationTokenType()[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_14 $$ return visitLogicalOperation(operands, op == JavaTokenType.ANDAND, states)[ FD ]
Line_27 $$ if (expr instanceof PsiPrefixExpression && ((PsiPrefixExpression) expr).getOperationTokenType() == JavaTokenType.EXCL) -->Line_34 $$ return result[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_36 $$ if (expr instanceof PsiInstanceOfExpression) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_25 $$ return visitExpression(states, ((PsiTypeCastExpression) expr).getOperand())[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_54 $$ return toContracts(states, NOT_NULL_VALUE)[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_51 $$ if (expr instanceof PsiMethodCallExpression) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_7 $$ if (expr instanceof PsiPolyadicExpression) [ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_48 $$ if (expr instanceof PsiNewExpression) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_58 $$ if (constraint != null) [ CD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_43 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_17 $$ if (expr instanceof PsiConditionalExpression) [ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_5 $$ if (states.size() > 300)[ FD ]
Line_8 $$ PsiExpression[] operands = ((PsiPolyadicExpression) expr).getOperands()-->Line_14 $$ return visitLogicalOperation(operands, op == JavaTokenType.ANDAND, states)[ FD ]
Line_37 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())-->Line_43 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_7 $$ if (expr instanceof PsiPolyadicExpression) -->Line_8 $$ PsiExpression[] operands = ((PsiPolyadicExpression) expr).getOperands()[ CD ]
Line_38 $$ if (parameter >= 0) -->Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_3 $$ if (states.isEmpty())[ CD ]
Line_7 $$ if (expr instanceof PsiPolyadicExpression) -->Line_13 $$ if (op == JavaTokenType.ANDAND || op == JavaTokenType.OROR) [ CD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_68 $$ ContainerUtil.addIfNotNull(result, contractWithConstraint(state, paramIndex, TRUE_VALUE, TRUE_VALUE))[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_21 $$ if (expr instanceof PsiParenthesizedExpression) [ CD ]
Line_17 $$ if (expr instanceof PsiConditionalExpression) -->Line_18 $$ List<MethodContract> conditionResults = visitExpression(states, ((PsiConditionalExpression) expr).getCondition())[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_61 $$ int paramIndex = resolveParameter(expr)[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_17 $$ if (expr instanceof PsiConditionalExpression) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_74 $$ return Collections.emptyList()[ CD ]
Line_51 $$ if (expr instanceof PsiMethodCallExpression) -->Line_53 $$ if (method != null && NullableNotNullManager.isNotNull(method)) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_11 $$ return visitEqualityComparison(states, operands[0], operands[1], op == JavaTokenType.EQEQ)[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_59 $$ return toContracts(states, constraint)[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_7 $$ if (expr instanceof PsiPolyadicExpression) [ CD ]
Line_65 $$ if (state[paramIndex] != ANY_VALUE) -->Line_67 $$ if (textMatches(getParameter(paramIndex).getTypeElement(), PsiKeyword.BOOLEAN)) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_24 $$ if (expr instanceof PsiTypeCastExpression) [ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_3 $$ if (states.isEmpty())[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_5 $$ if (states.size() > 300)[ CD ]
Line_24 $$ if (expr instanceof PsiTypeCastExpression) -->Line_25 $$ return visitExpression(states, ((PsiTypeCastExpression) expr).getOperand())[ CD ]
Line_37 $$ final int parameter = resolveParameter(((PsiInstanceOfExpression) expr).getOperand())-->Line_38 $$ if (parameter >= 0) [ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_22 $$ return visitExpression(states, ((PsiParenthesizedExpression) expr).getExpression())[ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() [ FD ]
Line_3 $$ if (states.isEmpty())-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_13 $$ if (op == JavaTokenType.ANDAND || op == JavaTokenType.OROR) -->Line_14 $$ return visitLogicalOperation(operands, op == JavaTokenType.ANDAND, states)[ CD ]
Line_51 $$ if (expr instanceof PsiMethodCallExpression) -->Line_52 $$ PsiMethod method = ((PsiMethodCallExpression) expr).resolveMethod()[ CD ]
Line_39 $$ return ContainerUtil.mapNotNull(states, new Function<ValueConstraint[], MethodContract>() -->Line_42 $$ ValueConstraint returnValue = FALSE_VALUE[ CD ]
Line_10 $$ if (operands.length == 2 && (op == JavaTokenType.EQEQ || op == JavaTokenType.NE)) -->Line_11 $$ return visitEqualityComparison(states, operands[0], operands[1], op == JavaTokenType.EQEQ)[ CD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_24 $$ if (expr instanceof PsiTypeCastExpression) [ FD ]
Line_2 $$ private List<MethodContract> visitExpression(final List<ValueConstraint[]> states, @Nullable PsiExpression expr) -->Line_57 $$ final ValueConstraint constraint = getLiteralConstraint(expr)[ CD ]
Line_17 $$ if (expr instanceof PsiConditionalExpression) -->Line_19 $$ return ContainerUtil.concat(visitExpression(antecedentsOf(filterReturning(conditionResults, TRUE_VALUE)), ((PsiConditionalExpression) expr).getThenExpression()), visitExpression(antecedentsOf(filterReturning(conditionResults, FALSE_VALUE)), ((PsiConditionalExpression) expr).getElseExpression()))[ CD ]
Line_41 $$ ValueConstraint paramConstraint = NULL_VALUE-->Line_43 $$ return contractWithConstraint(state, parameter, paramConstraint, returnValue)[ FD ]
Line_65 $$ if (state[paramIndex] != ANY_VALUE) -->Line_66 $$ result.add(new MethodContract(state, state[paramIndex]))[ CD ]
Line_28 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_66 $$ result.add(new MethodContract(state, state[paramIndex]))[ FD ]
