Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_37 $$ if (trait instanceof ClsClassImpl) [ FD ]
Line_21 $$ for (GrMethod method : ((GrTypeDefinition) trait).getCodeMethods()) -->Line_23 $$ addCandidate(method, substitutor)[ FD ]
Line_32 $$ GrAccessorMethod setter = field.getSetter()-->Line_34 $$ addCandidate(setter, substitutor)[ FD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_20 $$ if (trait instanceof GrTypeDefinition) [ CD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_30 $$ addCandidate(method, substitutor)[ FD ]
Line_26 $$ for (GrField field : ((GrTypeDefinition) trait).getCodeFields()) -->Line_32 $$ GrAccessorMethod setter = field.getSetter()[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_5 $$ final PsiClassType[] types = myDefinition.getImplementsListTypes()[ CD ]
Line_26 $$ for (GrField field : ((GrTypeDefinition) trait).getCodeFields()) -->Line_29 $$ for (GrAccessorMethod method : field.getGetters()) [ FD ]
Line_20 $$ if (trait instanceof GrTypeDefinition) -->Line_37 $$ if (trait instanceof ClsClassImpl) [ CD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_39 $$ addCandidate(method, substitutor)[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_6 $$ List<PsiClassType.ClassResolveResult> traits = getSuperTraitsByCorrectOrder(types)[ CD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_47 $$ if (existingSignatures.add(impl.getSignature(PsiSubstitutor.EMPTY))) [ FD ]
Line_47 $$ if (existingSignatures.add(impl.getSignature(PsiSubstitutor.EMPTY))) -->Line_48 $$ result.add(impl)[ CD ]
Line_21 $$ for (GrMethod method : ((GrTypeDefinition) trait).getCodeMethods()) -->Line_39 $$ addCandidate(method, substitutor)[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_7 $$ if (traits.isEmpty())[ CD ]
Line_7 $$ if (traits.isEmpty())-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_11 $$ return method.getSignature(PsiSubstitutor.EMPTY)[ CD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_23 $$ addCandidate(method, substitutor)[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_3 $$ if (myDefinition.isInterface() && !myDefinition.isTrait())[ CD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_11 $$ return method.getSignature(PsiSubstitutor.EMPTY)[ FD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_30 $$ addCandidate(method, substitutor)[ FD ]
Line_33 $$ if (setter != null) -->Line_34 $$ addCandidate(setter, substitutor)[ CD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_53 $$ return result[ CD ]
Line_26 $$ for (GrField field : ((GrTypeDefinition) trait).getCodeFields()) -->Line_27 $$ if (!field.isProperty())[ FD ]
Line_5 $$ final PsiClassType[] types = myDefinition.getImplementsListTypes()-->Line_6 $$ List<PsiClassType.ClassResolveResult> traits = getSuperTraitsByCorrectOrder(types)[ FD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_23 $$ addCandidate(method, substitutor)[ FD ]
Line_3 $$ if (myDefinition.isInterface() && !myDefinition.isTrait())-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_34 $$ addCandidate(setter, substitutor)[ FD ]
Line_21 $$ for (GrMethod method : ((GrTypeDefinition) trait).getCodeMethods()) -->Line_22 $$ if (!method.getModifierList().hasExplicitModifier(PsiModifier.ABSTRACT)) [ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_14 $$ List<PsiMethod> result = ContainerUtil.newArrayList()[ CD ]
Line_6 $$ List<PsiClassType.ClassResolveResult> traits = getSuperTraitsByCorrectOrder(types)-->Line_7 $$ if (traits.isEmpty())[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() [ FD ]
Line_22 $$ if (!method.getModifierList().hasExplicitModifier(PsiModifier.ABSTRACT)) -->Line_23 $$ addCandidate(method, substitutor)[ CD ]
Line_32 $$ GrAccessorMethod setter = field.getSetter()-->Line_33 $$ if (setter != null) [ FD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_39 $$ addCandidate(method, substitutor)[ FD ]
Line_18 $$ List<CandidateInfo> concreteTraitMethods = new TraitProcessor<PsiMethod>(trait, resolveResult.getSubstitutor()) -->Line_20 $$ if (trait instanceof GrTypeDefinition) [ FD ]
Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() -->Line_22 $$ if (!method.getModifierList().hasExplicitModifier(PsiModifier.ABSTRACT)) [ FD ]
Line_21 $$ for (GrMethod method : ((GrTypeDefinition) trait).getCodeMethods()) -->Line_30 $$ addCandidate(method, substitutor)[ FD ]
Line_2 $$ public List<PsiMethod> collectMethods(@NotNull Collection<PsiMethod> codeMethods) -->Line_9 $$ Set<MethodSignature> existingSignatures = ContainerUtil.newHashSet(ContainerUtil.map(codeMethods, new Function<PsiMethod, MethodSignature>() [ CD ]
