Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)-->Line_35 $$ final List<ReferenceType> outers = myDebugProcess.getVirtualMachineProxy().classesByName(className)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_6 $$ final Ref<Integer> requiredDepth = new Ref<Integer>(0)[ CD ]
Line_13 $$ final PsiClass topLevelClass = JVMNameUtil.getTopLevelParentClass(psiClass)-->Line_14 $$ if (topLevelClass != null) [ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_4 $$ final Ref<PsiClass> classAtPositionRef = new Ref<PsiClass>(null)[ CD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_3 $$ final Ref<String> baseClassNameRef = new Ref<String>(null)[ CD ]
Line_39 $$ if (nested != null) -->Line_40 $$ result.add(nested)[ CD ]
Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_11 $$ if (className == null) [ CD ]
Line_6 $$ final Ref<Integer> requiredDepth = new Ref<Integer>(0)-->Line_38 $$ final ReferenceType nested = findNested(outer, 0, classAtPositionRef.get(), requiredDepth.get(), position)[ FD ]
Line_3 $$ final Ref<String> baseClassNameRef = new Ref<String>(null)-->Line_28 $$ final String className = baseClassNameRef.get()[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_28 $$ final String className = baseClassNameRef.get()[ CD ]
Line_3 $$ final Ref<String> baseClassNameRef = new Ref<String>(null)-->Line_24 $$ baseClassNameRef.set(className)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_38 $$ final ReferenceType nested = findNested(outer, 0, classAtPositionRef.get(), requiredDepth.get(), position)[ FD ]
Line_4 $$ final Ref<PsiClass> classAtPositionRef = new Ref<PsiClass>(null)-->Line_38 $$ final ReferenceType nested = findNested(outer, 0, classAtPositionRef.get(), requiredDepth.get(), position)[ FD ]
Line_14 $$ if (topLevelClass != null) -->Line_15 $$ final String parentClassName = JVMNameUtil.getNonAnonymousClassName(topLevelClass)[ CD ]
Line_4 $$ final Ref<PsiClass> classAtPositionRef = new Ref<PsiClass>(null)-->Line_9 $$ classAtPositionRef.set(psiClass)[ FD ]
Line_16 $$ if (parentClassName != null) -->Line_17 $$ requiredDepth.set(getNestingDepth(psiClass))[ CD ]
Line_14 $$ if (topLevelClass != null) -->Line_21 $$ LOG.error("Local or anonymous class has no non-local parent")[ CD ]
Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)-->Line_24 $$ baseClassNameRef.set(className)[ FD ]
Line_6 $$ final Ref<Integer> requiredDepth = new Ref<Integer>(0)-->Line_17 $$ requiredDepth.set(getNestingDepth(psiClass))[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_17 $$ requiredDepth.set(getNestingDepth(psiClass))[ FD ]
Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)-->Line_29 $$ if (className == null) [ FD ]
Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)-->Line_11 $$ if (className == null) [ FD ]
Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_9 $$ classAtPositionRef.set(psiClass)[ CD ]
Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)-->Line_33 $$ return myDebugProcess.getVirtualMachineProxy().classesByName(className)[ FD ]
Line_11 $$ if (className == null) -->Line_12 $$ isLocalOrAnonymous.set(Boolean.TRUE)[ CD ]
Line_3 $$ final Ref<String> baseClassNameRef = new Ref<String>(null)-->Line_18 $$ baseClassNameRef.set(parentClassName)[ FD ]
Line_13 $$ final PsiClass topLevelClass = JVMNameUtil.getTopLevelParentClass(psiClass)-->Line_15 $$ final String parentClassName = JVMNameUtil.getNonAnonymousClassName(topLevelClass)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_13 $$ final PsiClass topLevelClass = JVMNameUtil.getTopLevelParentClass(psiClass)[ FD ]
Line_15 $$ final String parentClassName = JVMNameUtil.getNonAnonymousClassName(topLevelClass)-->Line_16 $$ if (parentClassName != null) [ FD ]
Line_29 $$ if (className == null) -->Line_30 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_35 $$ final List<ReferenceType> outers = myDebugProcess.getVirtualMachineProxy().classesByName(className)[ CD ]
Line_14 $$ if (topLevelClass != null) -->Line_16 $$ if (parentClassName != null) [ CD ]
Line_11 $$ if (className == null) -->Line_14 $$ if (topLevelClass != null) [ CD ]
Line_16 $$ if (parentClassName != null) -->Line_18 $$ baseClassNameRef.set(parentClassName)[ CD ]
Line_5 $$ final Ref<Boolean> isLocalOrAnonymous = new Ref<Boolean>(Boolean.FALSE)-->Line_12 $$ isLocalOrAnonymous.set(Boolean.TRUE)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_43 $$ return result[ CD ]
Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_10 $$ String className = JVMNameUtil.getNonAnonymousClassName(psiClass)[ CD ]
Line_11 $$ if (className == null) -->Line_13 $$ final PsiClass topLevelClass = JVMNameUtil.getTopLevelParentClass(psiClass)[ CD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_9 $$ classAtPositionRef.set(psiClass)[ FD ]
Line_32 $$ if (!isLocalOrAnonymous.get()) -->Line_33 $$ return myDebugProcess.getVirtualMachineProxy().classesByName(className)[ CD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_29 $$ if (className == null) [ CD ]
Line_5 $$ final Ref<Boolean> isLocalOrAnonymous = new Ref<Boolean>(Boolean.FALSE)-->Line_32 $$ if (!isLocalOrAnonymous.get()) [ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_5 $$ final Ref<Boolean> isLocalOrAnonymous = new Ref<Boolean>(Boolean.FALSE)[ CD ]
Line_11 $$ if (className == null) -->Line_24 $$ baseClassNameRef.set(className)[ CD ]
Line_15 $$ final String parentClassName = JVMNameUtil.getNonAnonymousClassName(topLevelClass)-->Line_18 $$ baseClassNameRef.set(parentClassName)[ FD ]
Line_2 $$ private List<ReferenceType> getClassReferences(@NotNull final PsiClass psiClass, SourcePosition position) -->Line_32 $$ if (!isLocalOrAnonymous.get()) [ CD ]
