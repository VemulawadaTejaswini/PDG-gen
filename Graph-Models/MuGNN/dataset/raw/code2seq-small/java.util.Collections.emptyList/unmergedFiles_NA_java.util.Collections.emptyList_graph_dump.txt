Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_8 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)[ CD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_4 $$ if (repository == null) [ CD ]
Line_3 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_8 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)[ FD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_9 $$ if (!result.success()) [ CD ]
Line_23 $$ if (unmergedPaths.size() == 0) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_20 $$ String relative = s.line()[ CD ]
Line_23 $$ if (unmergedPaths.size() == 0) -->Line_26 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() [ CD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_20 $$ String relative = s.line()[ FD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_3 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)[ FD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_3 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)[ CD ]
Line_20 $$ String relative = s.line()-->Line_21 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ FD ]
Line_23 $$ if (unmergedPaths.size() == 0) -->Line_31 $$ return sortVirtualFilesByPresentation(findVirtualFilesWithRefresh(files))[ CD ]
Line_4 $$ if (repository == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_15 $$ if (s.isEol()) -->Line_16 $$ s.nextLine()[ CD ]
Line_8 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_9 $$ if (!result.success()) [ FD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) [ CD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_19 $$ s.boundedToken('\t')[ FD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_13 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()[ CD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_21 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ CD ]
Line_3 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_4 $$ if (repository == null) [ FD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_15 $$ if (s.isEol()) [ CD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_23 $$ if (unmergedPaths.size() == 0) [ CD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_15 $$ if (s.isEol()) [ FD ]
Line_26 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() -->Line_31 $$ return sortVirtualFilesByPresentation(findVirtualFilesWithRefresh(files))[ FD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_19 $$ s.boundedToken('\t')[ CD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_12 $$ String output = StringUtil.join(result.getOutput(), "\n")[ CD ]
Line_13 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_23 $$ if (unmergedPaths.size() == 0) [ FD ]
Line_8 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_12 $$ String output = StringUtil.join(result.getOutput(), "\n")[ FD ]
Line_13 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_21 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ FD ]
Line_4 $$ if (repository == null) -->Line_5 $$ LOG.error("Repository not found for root " + root)[ CD ]
Line_26 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() -->Line_28 $$ return new File(root.getPath(), path)[ CD ]
Line_2 $$ private List<VirtualFile> unmergedFiles(final VirtualFile root) throws VcsException -->Line_28 $$ return new File(root.getPath(), path)[ FD ]
Line_8 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_10 $$ throw new VcsException(result.getErrorOutputAsJoinedString())[ FD ]
Line_14 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_16 $$ s.nextLine()[ FD ]
Line_13 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_26 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() [ FD ]
