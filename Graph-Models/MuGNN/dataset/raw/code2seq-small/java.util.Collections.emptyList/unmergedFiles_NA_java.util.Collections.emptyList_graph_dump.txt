Line_10 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_15 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)[ FD ]
Line_11 $$ if (repository == null) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_11 $$ if (repository == null) -->Line_12 $$ LOG.error("Repository not found for root " + root)[ CD ]
Line_33 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() -->Line_40 $$ return sortVirtualFilesByPresentation(findVirtualFilesWithRefresh(files))[ FD ]
Line_15 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_16 $$ if (!result.success()) [ FD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_27 $$ String relative = s.line()[ CD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_23 $$ s.nextLine()[ FD ]
Line_20 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_28 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ FD ]
Line_20 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_30 $$ if (unmergedPaths.size() == 0) [ FD ]
Line_22 $$ if (s.isEol()) -->Line_23 $$ s.nextLine()[ CD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_26 $$ s.boundedToken('\t')[ CD ]
Line_30 $$ if (unmergedPaths.size() == 0) -->Line_33 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() [ CD ]
Line_15 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_17 $$ throw new VcsException(result.getErrorOutputAsJoinedString())[ FD ]
Line_30 $$ if (unmergedPaths.size() == 0) -->Line_40 $$ return sortVirtualFilesByPresentation(findVirtualFilesWithRefresh(files))[ CD ]
Line_30 $$ if (unmergedPaths.size() == 0) -->Line_31 $$ return Collections.emptyList()[ CD ]
Line_33 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() -->Line_37 $$ return new File(root.getPath(), path)[ CD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_26 $$ s.boundedToken('\t')[ FD ]
Line_15 $$ GitCommandResult result = myGit.getUnmergedFiles(repository)-->Line_19 $$ String output = StringUtil.join(result.getOutput(), "\n")[ FD ]
Line_20 $$ HashSet<String> unmergedPaths = ContainerUtil.newHashSet()-->Line_33 $$ List<File> files = ContainerUtil.map(unmergedPaths, new Function<String, File>() [ FD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_22 $$ if (s.isEol()) [ FD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_22 $$ if (s.isEol()) [ CD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_28 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ CD ]
Line_27 $$ String relative = s.line()-->Line_28 $$ unmergedPaths.add(GitUtil.unescapePath(relative))[ FD ]
Line_21 $$ for (StringScanner s = new StringScanner(output); s.hasMoreData(); ) -->Line_27 $$ String relative = s.line()[ FD ]
Line_10 $$ GitRepository repository = myRepositoryManager.getRepositoryForRoot(root)-->Line_11 $$ if (repository == null) [ FD ]
