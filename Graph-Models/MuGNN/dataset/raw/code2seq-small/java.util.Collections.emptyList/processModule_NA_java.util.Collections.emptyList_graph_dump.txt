Line_4 $$ for (String path : extension.getFilesToEnhance()) -->Line_5 $$ roots.add(new File(FileUtil.toSystemDependentName(path)))[ FD ]
Line_3 $$ final Set<File> roots = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_10 $$ if (JpsPathUtil.isUnder(roots, file)) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_49 $$ PersistenceApi api = extension.getPersistenceApi()[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_59 $$ handler.startNotify()[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_47 $$ programParams.add("com.google.appengine.tools.enhancer.Enhance")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_28 $$ classpath.add(PathManager.getJarPathForClass(EnhancerRunner.class))[ CD ]
Line_3 $$ final Set<File> roots = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_5 $$ roots.add(new File(FileUtil.toSystemDependentName(path)))[ FD ]
Line_11 $$ Collection<String> outputs = context.getProjectDescriptor().dataManager.getSourceToOutputMap(target).getOutputs(file.getAbsolutePath())-->Line_12 $$ if (outputs != null) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_27 $$ classpath.add(extension.getToolsApiJarPath())[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_4 $$ for (String path : extension.getFilesToEnhance()) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_22 $$ JpsModule module = extension.getModule()[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_48 $$ programParams.add("-api")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_61 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_61 $$ ProjectBuilderLogger logger = context.getLoggingManager().getProjectBuilderLogger()[ FD ]
Line_4 $$ for (String path : extension.getFilesToEnhance()) -->Line_41 $$ writer.println(FileUtil.toSystemDependentName(path))[ FD ]
Line_19 $$ if (pathsToProcess.isEmpty()) -->Line_20 $$ return false[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_46 $$ programParams.add(argsFile.getAbsolutePath())[ CD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_10 $$ if (JpsPathUtil.isUnder(roots, file)) [ CD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_10 $$ if (JpsPathUtil.isUnder(roots, file)) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_7 $$ final List<String> pathsToProcess = new ArrayList<String>()[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_23 $$ JpsSdk<JpsDummyElement> sdk = JavaBuilderUtil.ensureModuleHasJdk(module, context, NAME)[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_19 $$ if (pathsToProcess.isEmpty()) [ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_50 $$ programParams.add(api.getEnhancerApiName())[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_62 $$ if (logger.isEnabled()) [ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_11 $$ Collection<String> outputs = context.getProjectDescriptor().dataManager.getSourceToOutputMap(target).getOutputs(file.getAbsolutePath())[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_3 $$ final Set<File> roots = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_10 $$ if (JpsPathUtil.isUnder(roots, file)) -->Line_11 $$ Collection<String> outputs = context.getProjectDescriptor().dataManager.getSourceToOutputMap(target).getOutputs(file.getAbsolutePath())[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_55 $$ programParams.add("-v")[ CD ]
Line_7 $$ final List<String> pathsToProcess = new ArrayList<String>()-->Line_13 $$ pathsToProcess.addAll(outputs)[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_27 $$ classpath.add(extension.getToolsApiJarPath())[ FD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_34 $$ classpath.add(file.getAbsolutePath())[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_31 $$ if (removeOrmJars && FileUtil.isAncestor(new File(extension.getOrmLibPath()), file, true)) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() [ CD ]
Line_51 $$ if (api.getEnhancerVersion() == 2) -->Line_52 $$ programParams.add("-enhancerVersion")[ CD ]
Line_7 $$ final List<String> pathsToProcess = new ArrayList<String>()-->Line_63 $$ logger.logCompiledPaths(pathsToProcess, NAME, "Enhancing classes:")[ FD ]
Line_11 $$ Collection<String> outputs = context.getProjectDescriptor().dataManager.getSourceToOutputMap(target).getOutputs(file.getAbsolutePath())-->Line_13 $$ pathsToProcess.addAll(outputs)[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_37 $$ final File argsFile = FileUtil.createTempFile("appEngineEnhanceFiles", ".txt")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_22 $$ JpsModule module = extension.getModule()[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_24 $$ context.processMessage(new ProgressMessage("Enhancing classes in module '" + module.getName() + "'..."))[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_49 $$ PersistenceApi api = extension.getPersistenceApi()[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() [ FD ]
Line_10 $$ if (JpsPathUtil.isUnder(roots, file)) -->Line_12 $$ if (outputs != null) [ CD ]
Line_7 $$ final List<String> pathsToProcess = new ArrayList<String>()-->Line_19 $$ if (pathsToProcess.isEmpty()) [ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_24 $$ context.processMessage(new ProgressMessage("Enhancing classes in module '" + module.getName() + "'..."))[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_51 $$ if (api.getEnhancerVersion() == 2) [ CD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_31 $$ if (removeOrmJars && FileUtil.isAncestor(new File(extension.getOrmLibPath()), file, true)) [ FD ]
Line_62 $$ if (logger.isEnabled()) -->Line_63 $$ logger.logCompiledPaths(pathsToProcess, NAME, "Enhancing classes:")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_29 $$ boolean removeOrmJars = Boolean.parseBoolean(System.getProperty("jps.appengine.enhancer.remove.orm.jars", "true"))[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_56 $$ List<String> commandLine = ExternalProcessUtil.buildJavaCommandLine(JpsJavaSdkType.getJavaExecutable(sdk), EnhancerRunner.class.getName(), Collections.<String>emptyList(), classpath, vmParams, programParams)[ CD ]
Line_12 $$ if (outputs != null) -->Line_13 $$ pathsToProcess.addAll(outputs)[ CD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_11 $$ Collection<String> outputs = context.getProjectDescriptor().dataManager.getSourceToOutputMap(target).getOutputs(file.getAbsolutePath())[ FD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_57 $$ Process process = new ProcessBuilder(commandLine).start()[ CD ]
Line_8 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_16 $$ return true[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_60 $$ handler.waitFor()[ CD ]
Line_51 $$ if (api.getEnhancerVersion() == 2) -->Line_53 $$ programParams.add("v2")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_23 $$ JpsSdk<JpsDummyElement> sdk = JavaBuilderUtil.ensureModuleHasJdk(module, context, NAME)[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_25 $$ List<String> vmParams = Collections.singletonList("-Xmx256m")[ CD ]
Line_2 $$ private static boolean processModule(final CompileContext context, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, JpsAppEngineModuleExtension extension) throws IOException, ProjectBuildException -->Line_65 $$ return true[ CD ]
