Line_35 $$ for (int i = 0; i < cycles.size(); i++) -->Line_36 $$ cyclesString.append(br).append(i + 1).append(". ").append(cycles.get(i))[ CD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_40 $$ message = ProjectBundle.message("module.circular.dependency.warning.short", StringUtil.decapitalize(cycles.get(0)))[ FD ]
Line_30 $$ if (cycles.size() > 1) -->Line_41 $$ description = null[ CD ]
Line_35 $$ for (int i = 0; i < cycles.size(); i++) -->Line_36 $$ cyclesString.append(br).append(i + 1).append(". ").append(cycles.get(i))[ FD ]
Line_34 $$ StringBuilder cyclesString = new StringBuilder()-->Line_36 $$ cyclesString.append(br).append(i + 1).append(". ").append(cycles.get(i))[ FD ]
Line_38 $$ description = ProjectBundle.message("module.circular.dependency.warning.description", cyclesString)-->Line_41 $$ description = null[ FD ]
Line_34 $$ StringBuilder cyclesString = new StringBuilder()-->Line_38 $$ description = ProjectBundle.message("module.circular.dependency.warning.description", cyclesString)[ FD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_36 $$ cyclesString.append(br).append(i + 1).append(". ").append(cycles.get(i))[ FD ]
Line_29 $$ final String description-->Line_41 $$ description = null[ FD ]
Line_28 $$ final String message-->Line_31 $$ message = "Circular dependencies"[ FD ]
Line_5 $$ if (containsModuleWithInheritedSdk()) -->Line_7 $$ Sdk sdk = model.getProjectSdk()[ CD ]
Line_21 $$ String name = sourceSet.getDisplayName()-->Line_22 $$ names.add(names.isEmpty() ? name : StringUtil.decapitalize(name))[ FD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_26 $$ if (!cycles.isEmpty()) [ FD ]
Line_26 $$ if (!cycles.isEmpty()) -->Line_30 $$ if (cycles.size() > 1) [ CD ]
Line_14 $$ Collection<Chunk<ModuleSourceSet>> chunks = GraphAlgorithms.getInstance().computeStronglyConnectedComponents(graph)-->Line_15 $$ List<Chunk<ModuleSourceSet>> sourceSetCycles = removeSingleElementChunks(removeDummyNodes(filterDuplicates(removeSingleElementChunks(chunks))))[ FD ]
Line_19 $$ List<String> names = new ArrayList<String>()-->Line_24 $$ cycles.add(StringUtil.join(names, ", "))[ FD ]
Line_26 $$ if (!cycles.isEmpty()) -->Line_29 $$ final String description[ CD ]
Line_26 $$ if (!cycles.isEmpty()) -->Line_28 $$ final String message[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_9 $$ PlaceInProjectStructureBase place = new PlaceInProjectStructureBase(project, ProjectStructureConfigurable.getInstance(project).createProjectConfigurablePlace(), this)[ FD ]
Line_30 $$ if (cycles.size() > 1) -->Line_38 $$ description = ProjectBundle.message("module.circular.dependency.warning.description", cyclesString)[ CD ]
Line_30 $$ if (cycles.size() > 1) -->Line_34 $$ StringBuilder cyclesString = new StringBuilder()[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_6 $$ ProjectSdksModel model = ProjectStructureConfigurable.getInstance(project).getProjectJdksModel()[ FD ]
Line_30 $$ if (cycles.size() > 1) -->Line_31 $$ message = "Circular dependencies"[ CD ]
Line_9 $$ PlaceInProjectStructureBase place = new PlaceInProjectStructureBase(project, ProjectStructureConfigurable.getInstance(project).createProjectConfigurablePlace(), this)-->Line_10 $$ problemsHolder.registerProblem(ProjectBundle.message("project.roots.project.jdk.problem.message"), null, ProjectStructureProblemType.error("project-sdk-not-defined"), place, null)[ FD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_30 $$ if (cycles.size() > 1) [ FD ]
Line_20 $$ for (ModuleSourceSet sourceSet : sourceSets) -->Line_21 $$ String name = sourceSet.getDisplayName()[ FD ]
Line_8 $$ if (sdk == null) -->Line_10 $$ problemsHolder.registerProblem(ProjectBundle.message("project.roots.project.jdk.problem.message"), null, ProjectStructureProblemType.error("project-sdk-not-defined"), place, null)[ CD ]
Line_5 $$ if (containsModuleWithInheritedSdk()) -->Line_6 $$ ProjectSdksModel model = ProjectStructureConfigurable.getInstance(project).getProjectJdksModel()[ CD ]
Line_4 $$ final Project project = myContext.getProject()-->Line_27 $$ final PlaceInProjectStructureBase place = new PlaceInProjectStructureBase(project, ProjectStructureConfigurable.getInstance(project).createModulesPlace(), this)[ FD ]
Line_30 $$ if (cycles.size() > 1) -->Line_35 $$ for (int i = 0; i < cycles.size(); i++) [ CD ]
Line_19 $$ List<String> names = new ArrayList<String>()-->Line_22 $$ names.add(names.isEmpty() ? name : StringUtil.decapitalize(name))[ FD ]
Line_29 $$ final String description-->Line_38 $$ description = ProjectBundle.message("module.circular.dependency.warning.description", cyclesString)[ FD ]
Line_5 $$ if (containsModuleWithInheritedSdk()) -->Line_8 $$ if (sdk == null) [ CD ]
Line_6 $$ ProjectSdksModel model = ProjectStructureConfigurable.getInstance(project).getProjectJdksModel()-->Line_7 $$ Sdk sdk = model.getProjectSdk()[ FD ]
Line_30 $$ if (cycles.size() > 1) -->Line_40 $$ message = ProjectBundle.message("module.circular.dependency.warning.short", StringUtil.decapitalize(cycles.get(0)))[ CD ]
Line_7 $$ Sdk sdk = model.getProjectSdk()-->Line_8 $$ if (sdk == null) [ FD ]
Line_31 $$ message = "Circular dependencies"-->Line_40 $$ message = ProjectBundle.message("module.circular.dependency.warning.short", StringUtil.decapitalize(cycles.get(0)))[ FD ]
Line_17 $$ for (Chunk<ModuleSourceSet> chunk : sourceSetCycles) -->Line_18 $$ final Set<ModuleSourceSet> sourceSets = chunk.getNodes()[ FD ]
Line_26 $$ if (!cycles.isEmpty()) -->Line_43 $$ problemsHolder.registerProblem(new ProjectStructureProblemDescription(message, description, place, ProjectStructureProblemType.warning("module-circular-dependency"), Collections.<ConfigurationErrorQuickFix>emptyList()))[ CD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_35 $$ for (int i = 0; i < cycles.size(); i++) [ FD ]
Line_16 $$ List<String> cycles = new ArrayList<String>()-->Line_24 $$ cycles.add(StringUtil.join(names, ", "))[ FD ]
Line_13 $$ Graph<ModuleSourceSet> graph = ModuleCompilerUtil.createModuleSourceDependenciesGraph(myContext.getModulesConfigurator())-->Line_14 $$ Collection<Chunk<ModuleSourceSet>> chunks = GraphAlgorithms.getInstance().computeStronglyConnectedComponents(graph)[ FD ]
Line_8 $$ if (sdk == null) -->Line_9 $$ PlaceInProjectStructureBase place = new PlaceInProjectStructureBase(project, ProjectStructureConfigurable.getInstance(project).createProjectConfigurablePlace(), this)[ CD ]
Line_28 $$ final String message-->Line_40 $$ message = ProjectBundle.message("module.circular.dependency.warning.short", StringUtil.decapitalize(cycles.get(0)))[ FD ]
