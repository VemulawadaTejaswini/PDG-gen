Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_3 $$ final PsiImportStatementBase importStatement = PsiTreeUtil.getParentOfType(ref.getElement(), PsiImportStatementBase.class)[ FD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_26 $$ PsiFile file = ref.getContainingFile().getOriginalFile()[ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_25 $$ final String className = ref.getReferenceName()[ CD ]
Line_29 $$ if (importList != null) -->Line_30 $$ final PsiImportStatementBase statement = importList.findSingleImportStatement(className)[ CD ]
Line_21 $$ final PsiElement qualifier = ref.getQualifier()-->Line_22 $$ if (qualifier instanceof PsiQualifiedReference) [ FD ]
Line_10 $$ if (importStatement instanceof PsiImportStaticStatementImpl) -->Line_11 $$ final PsiJavaCodeReferenceElement classRef = ((PsiImportStaticStatementImpl) importStatement).getClassReference()[ CD ]
Line_22 $$ if (qualifier instanceof PsiQualifiedReference) -->Line_23 $$ return Collections.emptyList()[ CD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_15 $$ return Collections.singleton(importFQN)[ FD ]
Line_37 $$ List<String> res = new ArrayList<String>()-->Line_40 $$ res.add(((PsiImportStatement) imp).getQualifiedName() + "." + className)[ FD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_3 $$ final PsiImportStatementBase importStatement = PsiTreeUtil.getParentOfType(ref.getElement(), PsiImportStatementBase.class)[ CD ]
Line_27 $$ if (className != null && file instanceof PsiJavaFile) -->Line_29 $$ if (importList != null) [ CD ]
Line_30 $$ final PsiImportStatementBase statement = importList.findSingleImportStatement(className)-->Line_31 $$ if (statement instanceof PsiImportStatement) [ FD ]
Line_27 $$ if (className != null && file instanceof PsiJavaFile) -->Line_28 $$ final PsiImportList importList = ((PsiJavaFile) file).getImportList()[ CD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_7 $$ if (importFQN != null && !importFQN.endsWith("*")) [ FD ]
Line_12 $$ if (classRef != null) -->Line_14 $$ if (importFQN != null) [ CD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_33 $$ if (importFQN != null) [ FD ]
Line_11 $$ final PsiJavaCodeReferenceElement classRef = ((PsiImportStaticStatementImpl) importStatement).getClassReference()-->Line_12 $$ if (classRef != null) [ FD ]
Line_31 $$ if (statement instanceof PsiImportStatement) -->Line_37 $$ List<String> res = new ArrayList<String>()[ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_4 $$ if (importStatement != null) [ CD ]
Line_3 $$ final PsiImportStatementBase importStatement = PsiTreeUtil.getParentOfType(ref.getElement(), PsiImportStatementBase.class)-->Line_5 $$ if (importStatement instanceof PsiImportStatement) [ FD ]
Line_28 $$ final PsiImportList importList = ((PsiJavaFile) file).getImportList()-->Line_29 $$ if (importList != null) [ FD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_8 $$ return Collections.singleton(importFQN)[ FD ]
Line_4 $$ if (importStatement != null) -->Line_5 $$ if (importStatement instanceof PsiImportStatement) [ CD ]
Line_5 $$ if (importStatement instanceof PsiImportStatement) -->Line_7 $$ if (importFQN != null && !importFQN.endsWith("*")) [ CD ]
Line_31 $$ if (statement instanceof PsiImportStatement) -->Line_32 $$ final String importFQN = ((PsiImportStatement) statement).getQualifiedName()[ CD ]
Line_14 $$ if (importFQN != null) -->Line_15 $$ return Collections.singleton(importFQN)[ CD ]
Line_11 $$ final PsiJavaCodeReferenceElement classRef = ((PsiImportStaticStatementImpl) importStatement).getClassReference()-->Line_13 $$ final String importFQN = classRef.getQualifiedName()[ FD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_22 $$ if (qualifier instanceof PsiQualifiedReference) [ CD ]
Line_38 $$ for (PsiImportStatementBase imp : importList.getAllImportStatements()) -->Line_39 $$ if (imp.isOnDemand() && imp instanceof PsiImportStatement) [ FD ]
Line_7 $$ if (importFQN != null && !importFQN.endsWith("*")) -->Line_8 $$ return Collections.singleton(importFQN)[ CD ]
Line_39 $$ if (imp.isOnDemand() && imp instanceof PsiImportStatement) -->Line_40 $$ res.add(((PsiImportStatement) imp).getQualifiedName() + "." + className)[ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_47 $$ return Collections.emptyList()[ CD ]
Line_28 $$ final PsiImportList importList = ((PsiJavaFile) file).getImportList()-->Line_30 $$ final PsiImportStatementBase statement = importList.findSingleImportStatement(className)[ FD ]
Line_5 $$ if (importStatement instanceof PsiImportStatement) -->Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()[ CD ]
Line_28 $$ final PsiImportList importList = ((PsiJavaFile) file).getImportList()-->Line_38 $$ for (PsiImportStatementBase imp : importList.getAllImportStatements()) [ FD ]
Line_3 $$ final PsiImportStatementBase importStatement = PsiTreeUtil.getParentOfType(ref.getElement(), PsiImportStatementBase.class)-->Line_10 $$ if (importStatement instanceof PsiImportStaticStatementImpl) [ FD ]
Line_10 $$ if (importStatement instanceof PsiImportStaticStatementImpl) -->Line_12 $$ if (classRef != null) [ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_26 $$ PsiFile file = ref.getContainingFile().getOriginalFile()[ FD ]
Line_29 $$ if (importList != null) -->Line_31 $$ if (statement instanceof PsiImportStatement) [ CD ]
Line_31 $$ if (statement instanceof PsiImportStatement) -->Line_33 $$ if (importFQN != null) [ CD ]
Line_5 $$ if (importStatement instanceof PsiImportStatement) -->Line_10 $$ if (importStatement instanceof PsiImportStaticStatementImpl) [ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_25 $$ final String className = ref.getReferenceName()[ FD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_34 $$ return Collections.singleton(importFQN)[ FD ]
Line_4 $$ if (importStatement != null) -->Line_19 $$ return Collections.emptyList()[ CD ]
Line_12 $$ if (classRef != null) -->Line_13 $$ final String importFQN = classRef.getQualifiedName()[ CD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_21 $$ final PsiElement qualifier = ref.getQualifier()[ CD ]
Line_33 $$ if (importFQN != null) -->Line_34 $$ return Collections.singleton(importFQN)[ CD ]
Line_31 $$ if (statement instanceof PsiImportStatement) -->Line_43 $$ return res[ CD ]
Line_6 $$ final String importFQN = ((PsiImportStatement) importStatement).getQualifiedName()-->Line_14 $$ if (importFQN != null) [ FD ]
Line_25 $$ final String className = ref.getReferenceName()-->Line_30 $$ final PsiImportStatementBase statement = importList.findSingleImportStatement(className)[ FD ]
Line_3 $$ final PsiImportStatementBase importStatement = PsiTreeUtil.getParentOfType(ref.getElement(), PsiImportStatementBase.class)-->Line_4 $$ if (importStatement != null) [ FD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_21 $$ final PsiElement qualifier = ref.getQualifier()[ FD ]
Line_2 $$ protected Collection<String> getFqns(@NotNull PsiQualifiedReferenceElement ref) -->Line_27 $$ if (className != null && file instanceof PsiJavaFile) [ CD ]
