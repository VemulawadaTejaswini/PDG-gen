Line_2 $$ public static List<RangeHighlighter> createLineMarker(@NotNull final Editor editor, int line1, int line2, @NotNull final TextDiffType type, final boolean resolved) -->Line_4 $$ if (line1 == 0)[ FD ]
Line_4 $$ if (line1 == 0)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<RangeHighlighter> createLineMarker(@NotNull final Editor editor, int line1, int line2, @NotNull final TextDiffType type, final boolean resolved) -->Line_8 $$ return ContainerUtil.concat(createLineMarker(editor, line1, type, SeparatorPlacement.TOP, false, resolved), createLineMarker(editor, line2 - 1, type, SeparatorPlacement.BOTTOM, false, resolved))[ FD ]
Line_2 $$ public static List<RangeHighlighter> createLineMarker(@NotNull final Editor editor, int line1, int line2, @NotNull final TextDiffType type, final boolean resolved) -->Line_3 $$ if (line1 == line2) [ CD ]
Line_2 $$ public static List<RangeHighlighter> createLineMarker(@NotNull final Editor editor, int line1, int line2, @NotNull final TextDiffType type, final boolean resolved) -->Line_6 $$ return createLineMarker(editor, line1 - 1, type, SeparatorPlacement.BOTTOM, true, resolved)[ FD ]
Line_3 $$ if (line1 == line2) -->Line_6 $$ return createLineMarker(editor, line1 - 1, type, SeparatorPlacement.BOTTOM, true, resolved)[ CD ]
Line_3 $$ if (line1 == line2) -->Line_8 $$ return ContainerUtil.concat(createLineMarker(editor, line1, type, SeparatorPlacement.TOP, false, resolved), createLineMarker(editor, line2 - 1, type, SeparatorPlacement.BOTTOM, false, resolved))[ CD ]
Line_3 $$ if (line1 == line2) -->Line_4 $$ if (line1 == 0)[ CD ]
Line_2 $$ public static List<RangeHighlighter> createLineMarker(@NotNull final Editor editor, int line1, int line2, @NotNull final TextDiffType type, final boolean resolved) -->Line_3 $$ if (line1 == line2) [ FD ]
