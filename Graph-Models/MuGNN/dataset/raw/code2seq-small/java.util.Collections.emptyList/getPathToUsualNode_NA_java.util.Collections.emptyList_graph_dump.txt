Line_5 $$ final List<AbstractTreeNode> pathToSelected = FavoritesTreeUtil.getLogicalPathToSelected(tree)-->Line_6 $$ if (pathToSelected.isEmpty()) [ FD ]
Line_6 $$ if (pathToSelected.isEmpty()) -->Line_9 $$ return pathToSelected.subList(0, pathToSelected.size() - 1)[ CD ]
Line_4 $$ if (parent instanceof ProjectViewNodeWithChildrenList) -->Line_6 $$ if (pathToSelected.isEmpty()) [ CD ]
Line_2 $$ public static List<AbstractTreeNode> getPathToUsualNode(final AbstractTreeNode treeNode, final Tree tree) -->Line_3 $$ final AbstractTreeNode parent = treeNode.getParent()[ CD ]
Line_2 $$ public static List<AbstractTreeNode> getPathToUsualNode(final AbstractTreeNode treeNode, final Tree tree) -->Line_5 $$ final List<AbstractTreeNode> pathToSelected = FavoritesTreeUtil.getLogicalPathToSelected(tree)[ FD ]
Line_2 $$ public static List<AbstractTreeNode> getPathToUsualNode(final AbstractTreeNode treeNode, final Tree tree) -->Line_4 $$ if (parent instanceof ProjectViewNodeWithChildrenList) [ CD ]
Line_5 $$ final List<AbstractTreeNode> pathToSelected = FavoritesTreeUtil.getLogicalPathToSelected(tree)-->Line_9 $$ return pathToSelected.subList(0, pathToSelected.size() - 1)[ FD ]
Line_2 $$ public static List<AbstractTreeNode> getPathToUsualNode(final AbstractTreeNode treeNode, final Tree tree) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_3 $$ final AbstractTreeNode parent = treeNode.getParent()-->Line_4 $$ if (parent instanceof ProjectViewNodeWithChildrenList) [ FD ]
Line_2 $$ public static List<AbstractTreeNode> getPathToUsualNode(final AbstractTreeNode treeNode, final Tree tree) -->Line_3 $$ final AbstractTreeNode parent = treeNode.getParent()[ FD ]
Line_4 $$ if (parent instanceof ProjectViewNodeWithChildrenList) -->Line_5 $$ final List<AbstractTreeNode> pathToSelected = FavoritesTreeUtil.getLogicalPathToSelected(tree)[ CD ]
Line_6 $$ if (pathToSelected.isEmpty()) -->Line_7 $$ return pathToSelected[ CD ]
