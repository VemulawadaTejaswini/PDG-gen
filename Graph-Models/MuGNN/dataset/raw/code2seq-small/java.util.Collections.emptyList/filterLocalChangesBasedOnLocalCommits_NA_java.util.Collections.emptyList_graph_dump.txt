Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_25 $$ final Collection<Change> result = new ArrayList<Change>()[ CD ]
Line_20 $$ final String first = hashes.get(0).getFirst().getValue()-->Line_29 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_9 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_7 $$ final GitRevisionNumber base-->Line_14 $$ if (base == null) [ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_20 $$ final String first = hashes.get(0).getFirst().getValue()[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_26 $$ for (Change change : localChanges) -->Line_27 $$ if (change.getBeforeRevision() != null) [ FD ]
Line_9 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())-->Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_22 $$ for (Pair<SHAHash, Date> hash : hashes) -->Line_23 $$ localHashes.add(hash.getFirst().getValue())[ FD ]
Line_28 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()-->Line_29 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ FD ]
Line_26 $$ for (Change change : localChanges) -->Line_28 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()[ FD ]
Line_7 $$ final GitRevisionNumber base-->Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_18 $$ if (hashes.isEmpty())[ CD ]
Line_27 $$ if (change.getBeforeRevision() != null) -->Line_28 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()[ CD ]
Line_18 $$ if (hashes.isEmpty())-->Line_19 $$ return Collections.emptyList()[ CD ]
Line_9 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())-->Line_14 $$ if (base == null) [ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)[ CD ]
Line_21 $$ final Set<String> localHashes = new HashSet<String>()-->Line_29 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ FD ]
Line_4 $$ if (searcher.getLocal() == null || searcher.getRemote() == null) -->Line_5 $$ return new ArrayList<Change>(localChanges)[ CD ]
Line_29 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) -->Line_30 $$ result.add(change)[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_34 $$ return result[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ CD ]
Line_7 $$ final GitRevisionNumber base-->Line_9 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_14 $$ if (base == null) [ CD ]
Line_14 $$ if (base == null) -->Line_15 $$ return new ArrayList<Change>(localChanges)[ CD ]
Line_27 $$ if (change.getBeforeRevision() != null) -->Line_29 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ CD ]
Line_25 $$ final Collection<Change> result = new ArrayList<Change>()-->Line_30 $$ result.add(change)[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_4 $$ if (searcher.getLocal() == null || searcher.getRemote() == null) [ CD ]
Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)-->Line_9 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_21 $$ final Set<String> localHashes = new HashSet<String>()-->Line_23 $$ localHashes.add(hash.getFirst().getValue())[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_21 $$ final Set<String> localHashes = new HashSet<String>()[ CD ]
Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)-->Line_4 $$ if (searcher.getLocal() == null || searcher.getRemote() == null) [ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_7 $$ final GitRevisionNumber base[ CD ]
Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))-->Line_18 $$ if (hashes.isEmpty())[ FD ]
Line_26 $$ for (Change change : localChanges) -->Line_30 $$ result.add(change)[ FD ]
Line_17 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))-->Line_20 $$ final String first = hashes.get(0).getFirst().getValue()[ FD ]
