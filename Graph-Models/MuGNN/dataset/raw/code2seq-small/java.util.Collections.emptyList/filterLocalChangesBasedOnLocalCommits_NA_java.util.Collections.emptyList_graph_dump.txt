Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_8 $$ final GitRevisionNumber base[ CD ]
Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)-->Line_10 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_33 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) -->Line_34 $$ result.add(change)[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_25 $$ final Set<String> localHashes = new HashSet<String>()[ CD ]
Line_25 $$ final Set<String> localHashes = new HashSet<String>()-->Line_27 $$ localHashes.add(hash.getFirst().getValue())[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_29 $$ final Collection<Change> result = new ArrayList<Change>()[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)[ CD ]
Line_30 $$ for (Change change : localChanges) -->Line_31 $$ if (change.getBeforeRevision() != null) [ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_10 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_15 $$ if (base == null) [ CD ]
Line_31 $$ if (change.getBeforeRevision() != null) -->Line_32 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()[ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_38 $$ return result[ CD ]
Line_30 $$ for (Change change : localChanges) -->Line_32 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()[ FD ]
Line_31 $$ if (change.getBeforeRevision() != null) -->Line_33 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ CD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_19 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_32 $$ final String changeBeforeRevision = change.getBeforeRevision().getRevisionNumber().asString().trim()-->Line_33 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ FD ]
Line_8 $$ final GitRevisionNumber base-->Line_19 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_4 $$ if (searcher.getLocal() == null || searcher.getRemote() == null) [ CD ]
Line_10 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())-->Line_19 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ FD ]
Line_8 $$ final GitRevisionNumber base-->Line_10 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())[ FD ]
Line_29 $$ final Collection<Change> result = new ArrayList<Change>()-->Line_34 $$ result.add(change)[ FD ]
Line_26 $$ for (Pair<SHAHash, Date> hash : hashes) -->Line_27 $$ localHashes.add(hash.getFirst().getValue())[ FD ]
Line_10 $$ base = getMergeBase(myProject, vcsRoot, searcher.getLocal(), searcher.getRemote())-->Line_15 $$ if (base == null) [ FD ]
Line_3 $$ final GitBranchesSearcher searcher = new GitBranchesSearcher(myProject, vcsRoot, true)-->Line_4 $$ if (searcher.getLocal() == null || searcher.getRemote() == null) [ FD ]
Line_25 $$ final Set<String> localHashes = new HashSet<String>()-->Line_33 $$ if (first.equals(changeBeforeRevision) || localHashes.contains(changeBeforeRevision)) [ FD ]
Line_8 $$ final GitRevisionNumber base-->Line_15 $$ if (base == null) [ FD ]
Line_30 $$ for (Change change : localChanges) -->Line_34 $$ result.add(change)[ FD ]
Line_2 $$ public Collection<Change> filterLocalChangesBasedOnLocalCommits(final Collection<Change> localChanges, final VirtualFile vcsRoot) throws VcsException -->Line_19 $$ final List<Pair<SHAHash, Date>> hashes = GitHistoryUtils.onlyHashesHistory(myProject, VcsUtil.getFilePath(vcsRoot), vcsRoot, (base.asString() + "..HEAD"))[ CD ]
