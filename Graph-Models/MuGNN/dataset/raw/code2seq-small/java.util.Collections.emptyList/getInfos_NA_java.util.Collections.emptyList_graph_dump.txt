Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_11 $$ if (containingClass != null) [ CD ]
Line_14 $$ if (methodInfos == null) -->Line_15 $$ return lightMethodInfos == null ? Collections.<GroovyMethodInfo>emptyList() : lightMethodInfos[ CD ]
Line_17 $$ if (lightMethodInfos == null) -->Line_20 $$ return ContainerUtil.concat(lightMethodInfos, methodInfos)[ CD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_5 $$ Object methodKind = GrLightMethodBuilder.getMethodKind(method)[ CD ]
Line_9 $$ List<GroovyMethodInfo> methodInfos = null-->Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)[ FD ]
Line_4 $$ List<GroovyMethodInfo> lightMethodInfos = null-->Line_7 $$ lightMethodInfos = getInfos(LIGHT_METHOD_INFOS, (String) methodKind, method)[ FD ]
Line_4 $$ List<GroovyMethodInfo> lightMethodInfos = null-->Line_17 $$ if (lightMethodInfos == null) [ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_3 $$ ensureInit()[ CD ]
Line_10 $$ PsiClass containingClass = method.getContainingClass()-->Line_11 $$ if (containingClass != null) [ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_7 $$ lightMethodInfos = getInfos(LIGHT_METHOD_INFOS, (String) methodKind, method)[ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_14 $$ if (methodInfos == null) [ CD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_9 $$ List<GroovyMethodInfo> methodInfos = null[ CD ]
Line_4 $$ List<GroovyMethodInfo> lightMethodInfos = null-->Line_20 $$ return ContainerUtil.concat(lightMethodInfos, methodInfos)[ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_5 $$ Object methodKind = GrLightMethodBuilder.getMethodKind(method)[ FD ]
Line_9 $$ List<GroovyMethodInfo> methodInfos = null-->Line_14 $$ if (methodInfos == null) [ FD ]
Line_5 $$ Object methodKind = GrLightMethodBuilder.getMethodKind(method)-->Line_6 $$ if (methodKind instanceof String) [ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_6 $$ if (methodKind instanceof String) [ CD ]
Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)-->Line_14 $$ if (methodInfos == null) [ FD ]
Line_7 $$ lightMethodInfos = getInfos(LIGHT_METHOD_INFOS, (String) methodKind, method)-->Line_20 $$ return ContainerUtil.concat(lightMethodInfos, methodInfos)[ FD ]
Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)-->Line_20 $$ return ContainerUtil.concat(lightMethodInfos, methodInfos)[ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_4 $$ List<GroovyMethodInfo> lightMethodInfos = null[ CD ]
Line_7 $$ lightMethodInfos = getInfos(LIGHT_METHOD_INFOS, (String) methodKind, method)-->Line_17 $$ if (lightMethodInfos == null) [ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_10 $$ PsiClass containingClass = method.getContainingClass()[ CD ]
Line_6 $$ if (methodKind instanceof String) -->Line_7 $$ lightMethodInfos = getInfos(LIGHT_METHOD_INFOS, (String) methodKind, method)[ CD ]
Line_14 $$ if (methodInfos == null) -->Line_17 $$ if (lightMethodInfos == null) [ CD ]
Line_9 $$ List<GroovyMethodInfo> methodInfos = null-->Line_20 $$ return ContainerUtil.concat(lightMethodInfos, methodInfos)[ FD ]
Line_10 $$ PsiClass containingClass = method.getContainingClass()-->Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)[ FD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)[ FD ]
Line_17 $$ if (lightMethodInfos == null) -->Line_18 $$ return methodInfos[ CD ]
Line_2 $$ public static List<GroovyMethodInfo> getInfos(PsiMethod method) -->Line_10 $$ PsiClass containingClass = method.getContainingClass()[ FD ]
Line_11 $$ if (containingClass != null) -->Line_12 $$ methodInfos = getInfos(METHOD_INFOS, containingClass.getQualifiedName(), method)[ CD ]
