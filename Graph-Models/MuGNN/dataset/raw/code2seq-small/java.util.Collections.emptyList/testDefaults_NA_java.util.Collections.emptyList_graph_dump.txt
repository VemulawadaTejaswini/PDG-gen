Line_2 $$ public void testDefaults() throws Exception -->Line_23 $$ assertEquals(1, p.getBuild().getTestResources().size())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_11 $$ MavenModel p = readProject(file)[ FD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_15 $$ assertEquals("project-1", p.getBuild().getFinalName())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_12 $$ assertEquals("jar", p.getPackaging())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_21 $$ assertEquals(1, p.getBuild().getResources().size())[ CD ]
Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")-->Line_6 $$ result.setResult(res)[ FD ]
Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")-->Line_7 $$ VfsUtil.saveText(res, "<project>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "</project>")[ FD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_11 $$ MavenModel p = readProject(file)[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_10 $$ PsiDocumentManager.getInstance(myProject).commitAllDocuments()[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_6 $$ result.setResult(res)[ FD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_22 $$ assertResource(p.getBuild().getResources().get(0), pathFromBasedir("src/main/resources"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_25 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("target"), p.getBuild().getDirectory())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() [ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_24 $$ assertResource(p.getBuild().getTestResources().get(0), pathFromBasedir("src/test/resources"), false, null, Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_17 $$ assertSize(1, p.getBuild().getSources())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_26 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("target/classes"), p.getBuild().getOutputDirectory())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_18 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("src/main/java"), p.getBuild().getSources().get(0))[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_20 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("src/test/java"), p.getBuild().getTestSources().get(0))[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_27 $$ PlatformTestUtil.assertPathsEqual(pathFromBasedir("target/test-classes"), p.getBuild().getTestOutputDirectory())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_13 $$ assertNull(p.getName())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_6 $$ result.setResult(res)[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_14 $$ assertNull(p.getParent())[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_19 $$ assertSize(1, p.getBuild().getTestSources())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_7 $$ VfsUtil.saveText(res, "<project>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "</project>")[ CD ]
Line_2 $$ public void testDefaults() throws Exception -->Line_16 $$ assertEquals(null, p.getBuild().getDefaultGoal())[ CD ]
Line_3 $$ VirtualFile file = new WriteAction<VirtualFile>() -->Line_5 $$ VirtualFile res = myProjectRoot.createChildData(this, "pom.xml")[ CD ]
