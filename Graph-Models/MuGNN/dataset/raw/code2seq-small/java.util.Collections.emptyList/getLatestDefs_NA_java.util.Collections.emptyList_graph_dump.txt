Line_3 $$ final ControlFlow controlFlow = ControlFlowCache.getControlFlow(block)-->Line_4 $$ final Instruction[] instructions = controlFlow.getInstructions()[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_19 $$ final Collection<ReadWriteInstruction> result = getLatestDefs(varName, instructions, instr, acceptTypeAssertions)[ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_3 $$ final ControlFlow controlFlow = ControlFlowCache.getControlFlow(block)[ FD ]
Line_4 $$ final Instruction[] instructions = controlFlow.getInstructions()-->Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)[ FD ]
Line_13 $$ if (anchor instanceof PyTargetExpression) -->Line_14 $$ Collection<Instruction> pred = instructions[instr].allPred()[ CD ]
Line_14 $$ Collection<Instruction> pred = instructions[instr].allPred()-->Line_16 $$ instr = pred.iterator().next().num()[ FD ]
Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)-->Line_10 $$ if (instr < 0) [ FD ]
Line_5 $$ final PyAugAssignmentStatement augAssignment = PyAugAssignmentStatementNavigator.getStatementByTarget(anchor)-->Line_6 $$ if (augAssignment != null) [ FD ]
Line_4 $$ final Instruction[] instructions = controlFlow.getInstructions()-->Line_19 $$ final Collection<ReadWriteInstruction> result = getLatestDefs(varName, instructions, instr, acceptTypeAssertions)[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_4 $$ final Instruction[] instructions = controlFlow.getInstructions()[ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_20 $$ return new ArrayList<ReadWriteInstruction>(result)[ CD ]
Line_7 $$ anchor = augAssignment-->Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)[ FD ]
Line_14 $$ Collection<Instruction> pred = instructions[instr].allPred()-->Line_15 $$ if (!pred.isEmpty()) [ FD ]
Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)-->Line_19 $$ final Collection<ReadWriteInstruction> result = getLatestDefs(varName, instructions, instr, acceptTypeAssertions)[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_10 $$ if (instr < 0) [ CD ]
Line_15 $$ if (!pred.isEmpty()) -->Line_16 $$ instr = pred.iterator().next().num()[ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_6 $$ if (augAssignment != null) [ CD ]
Line_6 $$ if (augAssignment != null) -->Line_7 $$ anchor = augAssignment[ CD ]
Line_16 $$ instr = pred.iterator().next().num()-->Line_19 $$ final Collection<ReadWriteInstruction> result = getLatestDefs(varName, instructions, instr, acceptTypeAssertions)[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_19 $$ final Collection<ReadWriteInstruction> result = getLatestDefs(varName, instructions, instr, acceptTypeAssertions)[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)[ CD ]
Line_7 $$ anchor = augAssignment-->Line_13 $$ if (anchor instanceof PyTargetExpression) [ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_13 $$ if (anchor instanceof PyTargetExpression) [ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_5 $$ final PyAugAssignmentStatement augAssignment = PyAugAssignmentStatementNavigator.getStatementByTarget(anchor)[ FD ]
Line_13 $$ if (anchor instanceof PyTargetExpression) -->Line_15 $$ if (!pred.isEmpty()) [ CD ]
Line_5 $$ final PyAugAssignmentStatement augAssignment = PyAugAssignmentStatementNavigator.getStatementByTarget(anchor)-->Line_7 $$ anchor = augAssignment[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)[ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_3 $$ final ControlFlow controlFlow = ControlFlowCache.getControlFlow(block)[ CD ]
Line_9 $$ int instr = ControlFlowUtil.findInstructionNumberByElement(instructions, anchor)-->Line_16 $$ instr = pred.iterator().next().num()[ FD ]
Line_10 $$ if (instr < 0) -->Line_11 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_5 $$ final PyAugAssignmentStatement augAssignment = PyAugAssignmentStatementNavigator.getStatementByTarget(anchor)[ CD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_13 $$ if (anchor instanceof PyTargetExpression) [ FD ]
Line_2 $$ public static List<ReadWriteInstruction> getLatestDefs(ScopeOwner block, String varName, PsiElement anchor, boolean acceptTypeAssertions) -->Line_7 $$ anchor = augAssignment[ FD ]
