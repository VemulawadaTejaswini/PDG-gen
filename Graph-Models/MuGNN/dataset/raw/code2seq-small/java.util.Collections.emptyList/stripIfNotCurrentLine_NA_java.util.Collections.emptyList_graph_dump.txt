Line_9 $$ Editor activeEditor = getActiveEditor(document)-->Line_21 $$ activeEditor.getCaretModel().runBatchCaretOperation(new Runnable() [ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_19 $$ boolean markAsNeedsStrippingLater = ((DocumentImpl) document).stripTrailingSpaces(activeEditor == null ? null : activeEditor.getProject(), inChangedLinesOnly, isVirtualSpaceEnabled, caretOffsets)[ CD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_15 $$ Caret caret = carets.get(i)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_20 $$ if (activeEditor != null && !ShutDownTracker.isShutdownHookRunning()) [ CD ]
Line_6 $$ if (!(document instanceof DocumentImpl)) -->Line_7 $$ return true[ CD ]
Line_23 $$ for (int i = 0; i < carets.size(); i++) -->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ FD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_12 $$ final List<VisualPosition> visualCarets = new ArrayList<VisualPosition>(carets.size())[ FD ]
Line_15 $$ Caret caret = carets.get(i)-->Line_17 $$ caretOffsets[i] = caret.getOffset()[ FD ]
Line_9 $$ Editor activeEditor = getActiveEditor(document)-->Line_10 $$ boolean isVirtualSpaceEnabled = activeEditor == null || activeEditor.getSettings().isVirtualSpace()[ FD ]
Line_10 $$ boolean isVirtualSpaceEnabled = activeEditor == null || activeEditor.getSettings().isVirtualSpace()-->Line_19 $$ boolean markAsNeedsStrippingLater = ((DocumentImpl) document).stripTrailingSpaces(activeEditor == null ? null : activeEditor.getProject(), inChangedLinesOnly, isVirtualSpaceEnabled, caretOffsets)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_3 $$ if (document instanceof DocumentWindow) [ CD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_9 $$ Editor activeEditor = getActiveEditor(document)[ CD ]
Line_20 $$ if (activeEditor != null && !ShutDownTracker.isShutdownHookRunning()) -->Line_21 $$ activeEditor.getCaretModel().runBatchCaretOperation(new Runnable() [ CD ]
Line_23 $$ for (int i = 0; i < carets.size(); i++) -->Line_25 $$ if (caret.isValid()) [ CD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_9 $$ Editor activeEditor = getActiveEditor(document)[ FD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_16 $$ visualCarets.add(caret.getVisualPosition())[ CD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_15 $$ Caret caret = carets.get(i)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()[ CD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_24 $$ Caret caret = carets.get(i)[ FD ]
Line_25 $$ if (caret.isValid()) -->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ CD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_32 $$ return !markAsNeedsStrippingLater[ CD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_17 $$ caretOffsets[i] = caret.getOffset()[ CD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_23 $$ for (int i = 0; i < carets.size(); i++) [ FD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_23 $$ for (int i = 0; i < carets.size(); i++) [ FD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ FD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_14 $$ for (int i = 0; i < carets.size(); i++) [ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_14 $$ for (int i = 0; i < carets.size(); i++) [ CD ]
Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()-->Line_13 $$ int[] caretOffsets = new int[carets.size()][ FD ]
Line_15 $$ Caret caret = carets.get(i)-->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ FD ]
Line_15 $$ Caret caret = carets.get(i)-->Line_16 $$ visualCarets.add(caret.getVisualPosition())[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_10 $$ boolean isVirtualSpaceEnabled = activeEditor == null || activeEditor.getSettings().isVirtualSpace()[ CD ]
Line_9 $$ Editor activeEditor = getActiveEditor(document)-->Line_11 $$ final List<Caret> carets = activeEditor == null ? Collections.<Caret>emptyList() : activeEditor.getCaretModel().getAllCarets()[ FD ]
Line_23 $$ for (int i = 0; i < carets.size(); i++) -->Line_24 $$ Caret caret = carets.get(i)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_13 $$ int[] caretOffsets = new int[carets.size()][ CD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_24 $$ Caret caret = carets.get(i)[ FD ]
Line_24 $$ Caret caret = carets.get(i)-->Line_25 $$ if (caret.isValid()) [ FD ]
Line_23 $$ for (int i = 0; i < carets.size(); i++) -->Line_24 $$ Caret caret = carets.get(i)[ CD ]
Line_21 $$ activeEditor.getCaretModel().runBatchCaretOperation(new Runnable() -->Line_23 $$ for (int i = 0; i < carets.size(); i++) [ CD ]
Line_12 $$ final List<VisualPosition> visualCarets = new ArrayList<VisualPosition>(carets.size())-->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ FD ]
Line_15 $$ Caret caret = carets.get(i)-->Line_25 $$ if (caret.isValid()) [ FD ]
Line_13 $$ int[] caretOffsets = new int[carets.size()]-->Line_19 $$ boolean markAsNeedsStrippingLater = ((DocumentImpl) document).stripTrailingSpaces(activeEditor == null ? null : activeEditor.getProject(), inChangedLinesOnly, isVirtualSpaceEnabled, caretOffsets)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_3 $$ if (document instanceof DocumentWindow) [ FD ]
Line_12 $$ final List<VisualPosition> visualCarets = new ArrayList<VisualPosition>(carets.size())-->Line_16 $$ visualCarets.add(caret.getVisualPosition())[ FD ]
Line_14 $$ for (int i = 0; i < carets.size(); i++) -->Line_15 $$ Caret caret = carets.get(i)[ CD ]
Line_3 $$ if (document instanceof DocumentWindow) -->Line_4 $$ document = ((DocumentWindow) document).getDelegate()[ CD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_6 $$ if (!(document instanceof DocumentImpl)) [ CD ]
Line_24 $$ Caret caret = carets.get(i)-->Line_26 $$ caret.moveToVisualPosition(visualCarets.get(i))[ FD ]
Line_9 $$ Editor activeEditor = getActiveEditor(document)-->Line_19 $$ boolean markAsNeedsStrippingLater = ((DocumentImpl) document).stripTrailingSpaces(activeEditor == null ? null : activeEditor.getProject(), inChangedLinesOnly, isVirtualSpaceEnabled, caretOffsets)[ FD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_12 $$ final List<VisualPosition> visualCarets = new ArrayList<VisualPosition>(carets.size())[ CD ]
Line_2 $$ public static boolean stripIfNotCurrentLine(@NotNull Document document, boolean inChangedLinesOnly) -->Line_19 $$ boolean markAsNeedsStrippingLater = ((DocumentImpl) document).stripTrailingSpaces(activeEditor == null ? null : activeEditor.getProject(), inChangedLinesOnly, isVirtualSpaceEnabled, caretOffsets)[ FD ]
