Line_14 $$ Path chrootPath = new Path("/c")-->Line_21 $$ chrootFs.removeDefaultAcl(chrootPath)[ FD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.setClass("fs.mockfs.impl", MockFileSystem.class, FileSystem.class)[ FD ]
Line_14 $$ Path chrootPath = new Path("/c")-->Line_23 $$ chrootFs.removeAcl(chrootPath)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_19 $$ chrootFs.removeAclEntries(chrootPath, entries)[ FD ]
Line_14 $$ Path chrootPath = new Path("/c")-->Line_27 $$ chrootFs.getAclStatus(chrootPath)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_20 $$ verify(mockFs).removeAclEntries(rawPath, entries)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_24 $$ verify(mockFs).removeAcl(rawPath)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_26 $$ verify(mockFs).setAcl(rawPath, entries)[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_24 $$ verify(mockFs).removeAcl(rawPath)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_25 $$ chrootFs.setAcl(chrootPath, entries)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_17 $$ chrootFs.modifyAclEntries(chrootPath, entries)[ FD ]
Line_14 $$ Path chrootPath = new Path("/c")-->Line_17 $$ chrootFs.modifyAclEntries(chrootPath, entries)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_23 $$ chrootFs.removeAcl(chrootPath)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_26 $$ verify(mockFs).setAcl(rawPath, entries)[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_18 $$ verify(mockFs).modifyAclEntries(rawPath, entries)[ FD ]
Line_14 $$ Path chrootPath = new Path("/c")-->Line_25 $$ chrootFs.setAcl(chrootPath, entries)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_25 $$ chrootFs.setAcl(chrootPath, entries)[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_22 $$ verify(mockFs).removeDefaultAcl(rawPath)[ FD ]
Line_16 $$ List<AclEntry> entries = Collections.emptyList()-->Line_18 $$ verify(mockFs).modifyAclEntries(rawPath, entries)[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_26 $$ verify(mockFs).setAcl(rawPath, entries)[ FD ]
Line_14 $$ Path chrootPath = new Path("/c")-->Line_19 $$ chrootFs.removeAclEntries(chrootPath, entries)[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_20 $$ verify(mockFs).removeAclEntries(rawPath, entries)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_22 $$ verify(mockFs).removeDefaultAcl(rawPath)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_18 $$ verify(mockFs).modifyAclEntries(rawPath, entries)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_19 $$ chrootFs.removeAclEntries(chrootPath, entries)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_21 $$ chrootFs.removeDefaultAcl(chrootPath)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_27 $$ chrootFs.getAclStatus(chrootPath)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_28 $$ verify(mockFs).getAclStatus(rawPath)[ FD ]
Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()-->Line_20 $$ verify(mockFs).removeAclEntries(rawPath, entries)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_17 $$ chrootFs.modifyAclEntries(chrootPath, entries)[ FD ]
Line_12 $$ ChRootedFileSystem chrootFs = new ChRootedFileSystem(chrootUri, conf)-->Line_13 $$ FileSystem mockFs = ((FilterFileSystem) chrootFs.getRawFileSystem()).getRawFileSystem()[ FD ]
Line_15 $$ Path rawPath = new Path("/a/b/c")-->Line_28 $$ verify(mockFs).getAclStatus(rawPath)[ FD ]
