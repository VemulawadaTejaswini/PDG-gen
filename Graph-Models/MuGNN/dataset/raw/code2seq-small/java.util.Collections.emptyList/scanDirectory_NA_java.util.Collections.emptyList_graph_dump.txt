Line_11 $$ for (final Entry entry : entries) -->Line_13 $$ subDirectoryNames.add(entry.getFileName())[ FD ]
Line_21 $$ for (final String fileName : localFiles.getFileNames()) -->Line_22 $$ cvsFiles.add(CvsFile.createCvsFileForExistingFile(FileObject.createInstance(directoryObject, fileName)))[ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_17 $$ cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject, entry, fileExists))[ CD ]
Line_12 $$ if (entry.isDirectory()) -->Line_16 $$ final boolean fileExists = clientEnvironment.getLocalFileReader().exists(fileObject, clientEnvironment.getCvsFileSystem())[ CD ]
Line_15 $$ final FileObject fileObject = FileObject.createInstance(directoryObject, entry.getFileName())-->Line_16 $$ final boolean fileExists = clientEnvironment.getLocalFileReader().exists(fileObject, clientEnvironment.getCvsFileSystem())[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_6 $$ cvsFiles.add(CvsFile.createCvsDirectory(directoryObject))[ CD ]
Line_7 $$ final Set<String> subDirectoryNames = new HashSet<String>()-->Line_24 $$ final List<DirectoryObject> subDirectories = new ArrayList<DirectoryObject>(subDirectoryNames.size())[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_26 $$ subDirectories.add(DirectoryObject.createInstance(directoryObject, directoryName))[ FD ]
Line_24 $$ final List<DirectoryObject> subDirectories = new ArrayList<DirectoryObject>(subDirectoryNames.size())-->Line_26 $$ subDirectories.add(DirectoryObject.createInstance(directoryObject, directoryName))[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_7 $$ final Set<String> subDirectoryNames = new HashSet<String>()[ CD ]
Line_11 $$ for (final Entry entry : entries) -->Line_18 $$ localFiles.removeFile(entry.getFileName())[ FD ]
Line_11 $$ for (final Entry entry : entries) -->Line_12 $$ if (entry.isDirectory()) [ FD ]
Line_3 $$ if (!clientEnvironment.getLocalFileReader().exists(directoryObject, clientEnvironment.getCvsFileSystem())) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_17 $$ cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject, entry, fileExists))[ FD ]
Line_15 $$ final FileObject fileObject = FileObject.createInstance(directoryObject, entry.getFileName())-->Line_17 $$ cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject, entry, fileExists))[ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_13 $$ subDirectoryNames.add(entry.getFileName())[ CD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_6 $$ cvsFiles.add(CvsFile.createCvsDirectory(directoryObject))[ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_15 $$ final FileObject fileObject = FileObject.createInstance(directoryObject, entry.getFileName())[ CD ]
Line_25 $$ for (final String directoryName : subDirectoryNames) -->Line_26 $$ subDirectories.add(DirectoryObject.createInstance(directoryObject, directoryName))[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_3 $$ if (!clientEnvironment.getLocalFileReader().exists(directoryObject, clientEnvironment.getCvsFileSystem())) [ FD ]
Line_8 $$ final LocalFiles localFiles = new LocalFiles(directoryObject, clientEnvironment)-->Line_18 $$ localFiles.removeFile(entry.getFileName())[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_24 $$ final List<DirectoryObject> subDirectories = new ArrayList<DirectoryObject>(subDirectoryNames.size())[ CD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_3 $$ if (!clientEnvironment.getLocalFileReader().exists(directoryObject, clientEnvironment.getCvsFileSystem())) [ CD ]
Line_11 $$ for (final Entry entry : entries) -->Line_17 $$ cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject, entry, fileExists))[ FD ]
Line_11 $$ for (final Entry entry : entries) -->Line_15 $$ final FileObject fileObject = FileObject.createInstance(directoryObject, entry.getFileName())[ FD ]
Line_7 $$ final Set<String> subDirectoryNames = new HashSet<String>()-->Line_13 $$ subDirectoryNames.add(entry.getFileName())[ FD ]
Line_12 $$ if (entry.isDirectory()) -->Line_18 $$ localFiles.removeFile(entry.getFileName())[ CD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_15 $$ final FileObject fileObject = FileObject.createInstance(directoryObject, entry.getFileName())[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_8 $$ final LocalFiles localFiles = new LocalFiles(directoryObject, clientEnvironment)[ CD ]
Line_16 $$ final boolean fileExists = clientEnvironment.getLocalFileReader().exists(fileObject, clientEnvironment.getCvsFileSystem())-->Line_17 $$ cvsFiles.add(CvsFile.createCvsFileForEntry(fileObject, entry, fileExists))[ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_22 $$ cvsFiles.add(CvsFile.createCvsFileForExistingFile(FileObject.createInstance(directoryObject, fileName)))[ FD ]
Line_8 $$ final LocalFiles localFiles = new LocalFiles(directoryObject, clientEnvironment)-->Line_21 $$ for (final String fileName : localFiles.getFileNames()) [ FD ]
Line_2 $$ private List<DirectoryObject> scanDirectory(DirectoryObject directoryObject, CvsFiles cvsFiles) throws IOException -->Line_28 $$ return subDirectories[ CD ]
