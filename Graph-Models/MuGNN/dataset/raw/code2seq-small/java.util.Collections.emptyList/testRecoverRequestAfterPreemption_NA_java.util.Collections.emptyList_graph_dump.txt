Line_9 $$ Priority priority = Priority.newInstance(20)-->Line_28 $$ Assert.assertNull(app.getResourceRequest(priority, host))[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_19 $$ ask.add(nodeLocalRequest)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_12 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * 1024, 4), 0, host)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_41 $$ List<Container> containers = scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, null).getContainers()[ CD ]
Line_27 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)[ FD ]
Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)-->Line_27 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_9 $$ Priority priority = Priority.newInstance(20)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_34 $$ List<ResourceRequest> requests = rmContainer.getResourceRequests()[ CD ]
Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)-->Line_34 $$ List<ResourceRequest> requests = rmContainer.getResourceRequests()[ FD ]
Line_27 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_37 $$ Assert.assertEquals(1, app.getResourceRequest(priority, request.getResourceName()).getNumContainers())[ FD ]
Line_4 $$ MockClock clock = new MockClock()-->Line_5 $$ scheduler.setClock(clock)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)[ CD ]
Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)-->Line_41 $$ List<Container> containers = scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, null).getContainers()[ FD ]
Line_29 $$ ContainerId containerId1 = ContainerId.newInstance(appAttemptId, 1)-->Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_18 $$ ResourceRequest offRackRequest = createResourceRequest(GB, 1, ResourceRequest.ANY, priority.getPriority(), 1, true)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_32 $$ clock.tick(5)[ CD ]
Line_17 $$ ResourceRequest rackLocalRequest = createResourceRequest(GB, 1, node.getRackName(), priority.getPriority(), 1, true)-->Line_20 $$ ask.add(rackLocalRequest)[ FD ]
Line_36 $$ for (ResourceRequest request : requests) -->Line_37 $$ Assert.assertEquals(1, app.getResourceRequest(priority, request.getResourceName()).getNumContainers())[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_31 $$ scheduler.warnOrKillContainer(rmContainer)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_15 $$ List<ResourceRequest> ask = new ArrayList<ResourceRequest>()[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_4 $$ MockClock clock = new MockClock()[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_24 $$ NodeUpdateSchedulerEvent nodeUpdate = new NodeUpdateSchedulerEvent(node)[ CD ]
Line_11 $$ int GB = 1024-->Line_18 $$ ResourceRequest offRackRequest = createResourceRequest(GB, 1, ResourceRequest.ANY, priority.getPriority(), 1, true)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_39 $$ scheduler.update()[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_40 $$ scheduler.handle(nodeUpdate)[ CD ]
Line_24 $$ NodeUpdateSchedulerEvent nodeUpdate = new NodeUpdateSchedulerEvent(node)-->Line_40 $$ scheduler.handle(nodeUpdate)[ FD ]
Line_9 $$ Priority priority = Priority.newInstance(20)-->Line_16 $$ ResourceRequest nodeLocalRequest = createResourceRequest(GB, 1, host, priority.getPriority(), 1, true)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_21 $$ ask.add(offRackRequest)[ CD ]
Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)-->Line_26 $$ assertEquals(1, scheduler.getSchedulerApp(appAttemptId).getLiveContainers().size())[ FD ]
Line_15 $$ List<ResourceRequest> ask = new ArrayList<ResourceRequest>()-->Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)[ FD ]
Line_12 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * 1024, 4), 0, host)-->Line_17 $$ ResourceRequest rackLocalRequest = createResourceRequest(GB, 1, node.getRackName(), priority.getPriority(), 1, true)[ FD ]
Line_27 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_28 $$ Assert.assertNull(app.getResourceRequest(priority, host))[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_16 $$ ResourceRequest nodeLocalRequest = createResourceRequest(GB, 1, host, priority.getPriority(), 1, true)[ FD ]
Line_15 $$ List<ResourceRequest> ask = new ArrayList<ResourceRequest>()-->Line_20 $$ ask.add(rackLocalRequest)[ FD ]
Line_9 $$ Priority priority = Priority.newInstance(20)-->Line_18 $$ ResourceRequest offRackRequest = createResourceRequest(GB, 1, ResourceRequest.ANY, priority.getPriority(), 1, true)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_33 $$ scheduler.warnOrKillContainer(rmContainer)[ CD ]
Line_11 $$ int GB = 1024-->Line_16 $$ ResourceRequest nodeLocalRequest = createResourceRequest(GB, 1, host, priority.getPriority(), 1, true)[ FD ]
Line_41 $$ List<Container> containers = scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, null).getContainers()-->Line_42 $$ Assert.assertTrue(containers.size() == 1)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_20 $$ ask.add(rackLocalRequest)[ CD ]
Line_15 $$ List<ResourceRequest> ask = new ArrayList<ResourceRequest>()-->Line_21 $$ ask.add(offRackRequest)[ FD ]
Line_18 $$ ResourceRequest offRackRequest = createResourceRequest(GB, 1, ResourceRequest.ANY, priority.getPriority(), 1, true)-->Line_21 $$ ask.add(offRackRequest)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_27 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)[ CD ]
Line_34 $$ List<ResourceRequest> requests = rmContainer.getResourceRequests()-->Line_35 $$ Assert.assertEquals(3, requests.size())[ FD ]
Line_11 $$ int GB = 1024-->Line_17 $$ ResourceRequest rackLocalRequest = createResourceRequest(GB, 1, node.getRackName(), priority.getPriority(), 1, true)[ FD ]
Line_16 $$ ResourceRequest nodeLocalRequest = createResourceRequest(GB, 1, host, priority.getPriority(), 1, true)-->Line_19 $$ ask.add(nodeLocalRequest)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_28 $$ Assert.assertNull(app.getResourceRequest(priority, host))[ CD ]
Line_9 $$ Priority priority = Priority.newInstance(20)-->Line_17 $$ ResourceRequest rackLocalRequest = createResourceRequest(GB, 1, node.getRackName(), priority.getPriority(), 1, true)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_10 $$ String host = "127.0.0.1"[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_3 $$ conf.setLong(FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL, 10)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_8 $$ scheduler.reinitialize(conf, resourceManager.getRMContext())[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_6 $$ scheduler.init(conf)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_23 $$ scheduler.update()[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_7 $$ scheduler.start()[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_16 $$ ResourceRequest nodeLocalRequest = createResourceRequest(GB, 1, host, priority.getPriority(), 1, true)[ CD ]
Line_13 $$ NodeAddedSchedulerEvent nodeEvent = new NodeAddedSchedulerEvent(node)-->Line_14 $$ scheduler.handle(nodeEvent)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_11 $$ int GB = 1024[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_17 $$ ResourceRequest rackLocalRequest = createResourceRequest(GB, 1, node.getRackName(), priority.getPriority(), 1, true)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_29 $$ ContainerId containerId1 = ContainerId.newInstance(appAttemptId, 1)[ CD ]
Line_10 $$ String host = "127.0.0.1"-->Line_12 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * 1024, 4), 0, host)[ FD ]
Line_24 $$ NodeUpdateSchedulerEvent nodeUpdate = new NodeUpdateSchedulerEvent(node)-->Line_25 $$ scheduler.handle(nodeUpdate)[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_28 $$ Assert.assertNull(app.getResourceRequest(priority, host))[ FD ]
Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)-->Line_31 $$ scheduler.warnOrKillContainer(rmContainer)[ FD ]
Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)-->Line_33 $$ scheduler.warnOrKillContainer(rmContainer)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_13 $$ NodeAddedSchedulerEvent nodeEvent = new NodeAddedSchedulerEvent(node)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_35 $$ Assert.assertEquals(3, requests.size())[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_25 $$ scheduler.handle(nodeUpdate)[ CD ]
Line_15 $$ List<ResourceRequest> ask = new ArrayList<ResourceRequest>()-->Line_19 $$ ask.add(nodeLocalRequest)[ FD ]
Line_4 $$ MockClock clock = new MockClock()-->Line_32 $$ clock.tick(5)[ FD ]
Line_22 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest("queueA", "user1", ask)-->Line_29 $$ ContainerId containerId1 = ContainerId.newInstance(appAttemptId, 1)[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_26 $$ assertEquals(1, scheduler.getSchedulerApp(appAttemptId).getLiveContainers().size())[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_30 $$ RMContainer rmContainer = app.getRMContainer(containerId1)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_5 $$ scheduler.setClock(clock)[ CD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_42 $$ Assert.assertTrue(containers.size() == 1)[ CD ]
Line_9 $$ Priority priority = Priority.newInstance(20)-->Line_37 $$ Assert.assertEquals(1, app.getResourceRequest(priority, request.getResourceName()).getNumContainers())[ FD ]
Line_2 $$ public void testRecoverRequestAfterPreemption() throws Exception -->Line_14 $$ scheduler.handle(nodeEvent)[ CD ]
