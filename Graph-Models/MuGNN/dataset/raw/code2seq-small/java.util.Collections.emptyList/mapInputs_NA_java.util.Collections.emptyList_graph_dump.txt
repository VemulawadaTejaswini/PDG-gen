Line_8 $$ if (input.getPath() != null) -->Line_11 $$ result.add(new BindingPredicate(input.inScope(ModelPath.ROOT)))[ CD ]
Line_3 $$ if (inputs.isEmpty()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_3 $$ if (inputs.isEmpty()) [ FD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_6 $$ ArrayList<BindingPredicate> result = new ArrayList<BindingPredicate>(inputs.size())[ FD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_9 $$ result.add(new BindingPredicate(input.withPath(scope.descendant(input.getPath()))))[ FD ]
Line_7 $$ for (ModelReference<?> input : inputs) -->Line_8 $$ if (input.getPath() != null) [ FD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_14 $$ return result[ CD ]
Line_6 $$ ArrayList<BindingPredicate> result = new ArrayList<BindingPredicate>(inputs.size())-->Line_11 $$ result.add(new BindingPredicate(input.inScope(ModelPath.ROOT)))[ FD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_3 $$ if (inputs.isEmpty()) [ CD ]
Line_8 $$ if (input.getPath() != null) -->Line_9 $$ result.add(new BindingPredicate(input.withPath(scope.descendant(input.getPath()))))[ CD ]
Line_2 $$ private List<BindingPredicate> mapInputs(List<? extends ModelReference<?>> inputs, ModelPath scope) -->Line_6 $$ ArrayList<BindingPredicate> result = new ArrayList<BindingPredicate>(inputs.size())[ CD ]
Line_6 $$ ArrayList<BindingPredicate> result = new ArrayList<BindingPredicate>(inputs.size())-->Line_9 $$ result.add(new BindingPredicate(input.withPath(scope.descendant(input.getPath()))))[ FD ]
Line_7 $$ for (ModelReference<?> input : inputs) -->Line_9 $$ result.add(new BindingPredicate(input.withPath(scope.descendant(input.getPath()))))[ FD ]
Line_7 $$ for (ModelReference<?> input : inputs) -->Line_11 $$ result.add(new BindingPredicate(input.inScope(ModelPath.ROOT)))[ FD ]
