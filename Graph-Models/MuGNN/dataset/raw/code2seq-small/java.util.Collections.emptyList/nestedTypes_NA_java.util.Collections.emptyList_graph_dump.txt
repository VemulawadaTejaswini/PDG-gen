Line_18 $$ if (!list.isEmpty()) -->Line_39 $$ nestedTypes = Collections.emptyList()[ CD ]
Line_32 $$ for (final ReferenceType candidate : candidates) -->Line_33 $$ nested2.addAll(nestedTypes(candidate))[ FD ]
Line_5 $$ List<ReferenceType> list = Collections.emptyList()-->Line_7 $$ list = refType.nestedTypes()[ FD ]
Line_18 $$ if (!list.isEmpty()) -->Line_20 $$ final ClassLoaderReference outerLoader = refType.classLoader()[ CD ]
Line_37 $$ nestedTypes = candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<ReferenceType>(candidates)-->Line_41 $$ myNestedClassesCache.put(refType, nestedTypes)[ FD ]
Line_39 $$ nestedTypes = Collections.emptyList()-->Line_41 $$ myNestedClassesCache.put(refType, nestedTypes)[ FD ]
Line_4 $$ if (nestedTypes == null) -->Line_5 $$ List<ReferenceType> list = Collections.emptyList()[ CD ]
Line_19 $$ final Set<ReferenceType> candidates = new HashSet<ReferenceType>()-->Line_35 $$ candidates.removeAll(nested2)[ FD ]
Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)-->Line_39 $$ nestedTypes = Collections.emptyList()[ FD ]
Line_18 $$ if (!list.isEmpty()) -->Line_19 $$ final Set<ReferenceType> candidates = new HashSet<ReferenceType>()[ CD ]
Line_7 $$ list = refType.nestedTypes()-->Line_18 $$ if (!list.isEmpty()) [ FD ]
Line_21 $$ for (ReferenceType nested : list) -->Line_23 $$ if (outerLoader == null ? nested.classLoader() == null : outerLoader.equals(nested.classLoader())) [ FD ]
Line_20 $$ final ClassLoaderReference outerLoader = refType.classLoader()-->Line_23 $$ if (outerLoader == null ? nested.classLoader() == null : outerLoader.equals(nested.classLoader())) [ FD ]
Line_18 $$ if (!list.isEmpty()) -->Line_37 $$ nestedTypes = candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<ReferenceType>(candidates)[ CD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_41 $$ myNestedClassesCache.put(refType, nestedTypes)[ FD ]
Line_4 $$ if (nestedTypes == null) -->Line_18 $$ if (!list.isEmpty()) [ CD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_20 $$ final ClassLoaderReference outerLoader = refType.classLoader()[ FD ]
Line_18 $$ if (!list.isEmpty()) -->Line_29 $$ if (!candidates.isEmpty()) [ CD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_4 $$ if (nestedTypes == null) [ CD ]
Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)-->Line_37 $$ nestedTypes = candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<ReferenceType>(candidates)[ FD ]
Line_19 $$ final Set<ReferenceType> candidates = new HashSet<ReferenceType>()-->Line_29 $$ if (!candidates.isEmpty()) [ FD ]
Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)-->Line_4 $$ if (nestedTypes == null) [ FD ]
Line_23 $$ if (outerLoader == null ? nested.classLoader() == null : outerLoader.equals(nested.classLoader())) -->Line_24 $$ candidates.add(nested)[ CD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_43 $$ return nestedTypes[ CD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)[ FD ]
Line_5 $$ List<ReferenceType> list = Collections.emptyList()-->Line_18 $$ if (!list.isEmpty()) [ FD ]
Line_37 $$ nestedTypes = candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<ReferenceType>(candidates)-->Line_39 $$ nestedTypes = Collections.emptyList()[ FD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_7 $$ list = refType.nestedTypes()[ FD ]
Line_19 $$ final Set<ReferenceType> candidates = new HashSet<ReferenceType>()-->Line_37 $$ nestedTypes = candidates.isEmpty() ? Collections.<ReferenceType>emptyList() : new ArrayList<ReferenceType>(candidates)[ FD ]
Line_4 $$ if (nestedTypes == null) -->Line_41 $$ myNestedClassesCache.put(refType, nestedTypes)[ CD ]
Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)-->Line_41 $$ myNestedClassesCache.put(refType, nestedTypes)[ FD ]
Line_29 $$ if (!candidates.isEmpty()) -->Line_35 $$ candidates.removeAll(nested2)[ CD ]
Line_21 $$ for (ReferenceType nested : list) -->Line_24 $$ candidates.add(nested)[ FD ]
Line_19 $$ final Set<ReferenceType> candidates = new HashSet<ReferenceType>()-->Line_24 $$ candidates.add(nested)[ FD ]
Line_2 $$ public List<ReferenceType> nestedTypes(ReferenceType refType) -->Line_3 $$ List<ReferenceType> nestedTypes = myNestedClassesCache.get(refType)[ CD ]
