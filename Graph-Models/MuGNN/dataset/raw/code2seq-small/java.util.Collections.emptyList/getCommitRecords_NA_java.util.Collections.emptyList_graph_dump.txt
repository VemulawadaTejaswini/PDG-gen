Line_20 $$ List<String> changeSets = StringUtil.split(output, HgChangesetUtil.CHANGESET_SEPARATOR)-->Line_21 $$ return ContainerUtil.mapNotNull(changeSets, converter)[ FD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_9 $$ if (result.getExitValue() != 0) [ FD ]
Line_7 $$ List<String> errors = result.getErrorLines()-->Line_13 $$ VcsNotifier.getInstance(project).notifyError(HgVcsMessages.message("hg4idea.error.log.command.execution"), errors.toString())[ FD ]
Line_7 $$ List<String> errors = result.getErrorLines()-->Line_17 $$ LOG.warn(errors.toString())[ FD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_4 $$ if (result == null) [ CD ]
Line_9 $$ if (result.getExitValue() != 0) -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_8 $$ if (!errors.isEmpty()) -->Line_9 $$ if (result.getExitValue() != 0) [ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_20 $$ List<String> changeSets = StringUtil.split(output, HgChangesetUtil.CHANGESET_SEPARATOR)[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_7 $$ List<String> errors = result.getErrorLines()[ FD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_21 $$ return ContainerUtil.mapNotNull(changeSets, converter)[ FD ]
Line_7 $$ List<String> errors = result.getErrorLines()-->Line_8 $$ if (!errors.isEmpty()) [ FD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_3 $$ final List<CommitInfo> revisions = new LinkedList<CommitInfo>()[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_4 $$ if (result == null) [ FD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_19 $$ String output = result.getRawOutput()[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_21 $$ return ContainerUtil.mapNotNull(changeSets, converter)[ CD ]
Line_19 $$ String output = result.getRawOutput()-->Line_20 $$ List<String> changeSets = StringUtil.split(output, HgChangesetUtil.CHANGESET_SEPARATOR)[ FD ]
Line_9 $$ if (result.getExitValue() != 0) -->Line_10 $$ if (silent) [ CD ]
Line_10 $$ if (silent) -->Line_11 $$ LOG.debug(errors.toString())[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_19 $$ String output = result.getRawOutput()[ FD ]
Line_8 $$ if (!errors.isEmpty()) -->Line_17 $$ LOG.warn(errors.toString())[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_7 $$ List<String> errors = result.getErrorLines()[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_8 $$ if (!errors.isEmpty()) [ CD ]
Line_7 $$ List<String> errors = result.getErrorLines()-->Line_11 $$ LOG.debug(errors.toString())[ FD ]
Line_4 $$ if (result == null) -->Line_5 $$ return revisions[ CD ]
Line_2 $$ public static <CommitInfo> List<CommitInfo> getCommitRecords(@NotNull Project project, @Nullable HgCommandResult result, @NotNull Function<String, CommitInfo> converter, boolean silent) -->Line_13 $$ VcsNotifier.getInstance(project).notifyError(HgVcsMessages.message("hg4idea.error.log.command.execution"), errors.toString())[ FD ]
Line_10 $$ if (silent) -->Line_13 $$ VcsNotifier.getInstance(project).notifyError(HgVcsMessages.message("hg4idea.error.log.command.execution"), errors.toString())[ CD ]
