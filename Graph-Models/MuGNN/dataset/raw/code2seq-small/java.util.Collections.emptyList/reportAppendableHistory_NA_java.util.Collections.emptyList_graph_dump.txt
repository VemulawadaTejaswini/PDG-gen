Line_17 $$ final LogLoader logLoader-->Line_53 $$ logLoader.check()[ FD ]
Line_37 $$ if (indicator != null) -->Line_38 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ CD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()[ FD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_32 $$ logLoader.initSupports15()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_35 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()[ CD ]
Line_17 $$ final LogLoader logLoader-->Line_24 $$ logLoader.preliminary()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_36 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_17 $$ final LogLoader logLoader[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_53 $$ logLoader.check()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_30 $$ logLoader.check()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_40 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() [ CD ]
Line_44 $$ if (!Boolean.TRUE.equals(sessionReported.get())) -->Line_45 $$ partner.reportCreatedEmptySession(historySession)[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_45 $$ partner.reportCreatedEmptySession(historySession)[ FD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_51 $$ logLoader.setConsumer(consumer)[ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_53 $$ logLoader.check()[ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_51 $$ logLoader.setConsumer(consumer)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_37 $$ if (indicator != null) [ CD ]
Line_17 $$ final LogLoader logLoader-->Line_52 $$ logLoader.load()[ FD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_13 $$ peg = ((SvnRevisionNumber) change.getBeforeRevision().getRevisionNumber()).getRevision()[ FD ]
Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()-->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_18 $$ if (path.isNonLocal()) [ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_34 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())[ CD ]
Line_17 $$ final LogLoader logLoader-->Line_51 $$ logLoader.setConsumer(consumer)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_13 $$ peg = ((SvnRevisionNumber) change.getBeforeRevision().getRevisionNumber()).getRevision()[ FD ]
Line_18 $$ if (path.isNonLocal()) -->Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)[ CD ]
Line_40 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_48 $$ partner.acceptRevision(vcsFileRevision)[ FD ]
Line_36 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_38 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)[ CD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ FD ]
Line_5 $$ if (change != null) -->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ CD ]
Line_35 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()-->Line_44 $$ if (!Boolean.TRUE.equals(sessionReported.get())) [ FD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_5 $$ if (change != null) [ FD ]
Line_36 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_37 $$ if (indicator != null) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_38 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ FD ]
Line_44 $$ if (!Boolean.TRUE.equals(sessionReported.get())) -->Line_46 $$ sessionReported.set(true)[ CD ]
Line_17 $$ final LogLoader logLoader-->Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_52 $$ logLoader.load()[ CD ]
Line_35 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()-->Line_46 $$ sessionReported.set(true)[ FD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_52 $$ logLoader.load()[ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_52 $$ logLoader.load()[ FD ]
Line_17 $$ final LogLoader logLoader-->Line_32 $$ logLoader.initSupports15()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_31 $$ if (showMergeSources) [ CD ]
Line_40 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_51 $$ logLoader.setConsumer(consumer)[ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_24 $$ logLoader.preliminary()[ FD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_24 $$ logLoader.preliminary()[ FD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_30 $$ logLoader.check()[ FD ]
Line_5 $$ if (change != null) -->Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()[ CD ]
Line_40 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_44 $$ if (!Boolean.TRUE.equals(sessionReported.get())) [ CD ]
Line_19 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_53 $$ logLoader.check()[ FD ]
Line_18 $$ if (path.isNonLocal()) -->Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_16 $$ final boolean showMergeSources = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()-->Line_9 $$ committedPath = beforeRevision.getFile()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_18 $$ if (path.isNonLocal()) [ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_30 $$ logLoader.check()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)[ FD ]
Line_31 $$ if (showMergeSources) -->Line_32 $$ logLoader.initSupports15()[ CD ]
Line_40 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_48 $$ partner.acceptRevision(vcsFileRevision)[ CD ]
Line_17 $$ final LogLoader logLoader-->Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ FD ]
Line_5 $$ if (change != null) -->Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()[ CD ]
Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) -->Line_9 $$ committedPath = beforeRevision.getFile()[ CD ]
Line_17 $$ final LogLoader logLoader-->Line_30 $$ logLoader.check()[ FD ]
Line_21 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_32 $$ logLoader.initSupports15()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_34 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())[ FD ]
Line_3 $$ FilePath committedPath = path-->Line_9 $$ committedPath = beforeRevision.getFile()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_48 $$ partner.acceptRevision(vcsFileRevision)[ FD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_51 $$ logLoader.setConsumer(consumer)[ CD ]
Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()-->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_3 $$ FilePath committedPath = path[ CD ]
Line_34 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())-->Line_45 $$ partner.reportCreatedEmptySession(historySession)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_5 $$ if (change != null) [ CD ]
