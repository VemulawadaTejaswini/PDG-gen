Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_29 $$ logLoader.check()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_45 $$ partner.acceptRevision(vcsFileRevision)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_12 $$ peg = ((SvnRevisionNumber) change.getBeforeRevision().getRevisionNumber()).getRevision()[ FD ]
Line_5 $$ if (change != null) -->Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()[ CD ]
Line_17 $$ if (path.isNonLocal()) -->Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ CD ]
Line_16 $$ final LogLoader logLoader-->Line_49 $$ logLoader.load()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_50 $$ logLoader.check()[ CD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_50 $$ logLoader.check()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_39 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() [ CD ]
Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_50 $$ logLoader.check()[ FD ]
Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_23 $$ logLoader.preliminary()[ FD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_5 $$ if (change != null) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)[ CD ]
Line_11 $$ if (peg == null && change.getBeforeRevision() != null && change.getBeforeRevision().getRevisionNumber() instanceof SvnRevisionNumber) -->Line_12 $$ peg = ((SvnRevisionNumber) change.getBeforeRevision().getRevisionNumber()).getRevision()[ CD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_12 $$ peg = ((SvnRevisionNumber) change.getBeforeRevision().getRevisionNumber()).getRevision()[ FD ]
Line_17 $$ if (path.isNonLocal()) -->Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)[ CD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()[ FD ]
Line_34 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()-->Line_43 $$ sessionReported.set(true)[ FD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_31 $$ logLoader.initSupports15()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_48 $$ logLoader.setConsumer(consumer)[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_15 $$ final boolean showMergeSources = SvnConfiguration.getInstance(myVcs.getProject()).isShowMergeSourcesInAnnotate()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_49 $$ logLoader.load()[ CD ]
Line_36 $$ if (indicator != null) -->Line_37 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_17 $$ if (path.isNonLocal()) [ FD ]
Line_35 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_37 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_3 $$ FilePath committedPath = path[ CD ]
Line_39 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_45 $$ partner.acceptRevision(vcsFileRevision)[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)[ FD ]
Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_48 $$ logLoader.setConsumer(consumer)[ FD ]
Line_39 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_41 $$ if (!Boolean.TRUE.equals(sessionReported.get())) [ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_36 $$ if (indicator != null) [ CD ]
Line_16 $$ final LogLoader logLoader-->Line_50 $$ logLoader.check()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_29 $$ logLoader.check()[ CD ]
Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()-->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_16 $$ final LogLoader logLoader-->Line_23 $$ logLoader.preliminary()[ FD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_23 $$ logLoader.preliminary()[ FD ]
Line_16 $$ final LogLoader logLoader-->Line_31 $$ logLoader.initSupports15()[ FD ]
Line_5 $$ if (change != null) -->Line_11 $$ if (peg == null && change.getBeforeRevision() != null && change.getBeforeRevision().getRevisionNumber() instanceof SvnRevisionNumber) [ CD ]
Line_41 $$ if (!Boolean.TRUE.equals(sessionReported.get())) -->Line_43 $$ sessionReported.set(true)[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_33 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_5 $$ if (change != null) [ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_35 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_31 $$ logLoader.initSupports15()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_34 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()[ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_33 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())[ FD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_29 $$ logLoader.check()[ FD ]
Line_39 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_48 $$ logLoader.setConsumer(consumer)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_37 $$ indicator.setText(SvnBundle.message("progress.text2.collecting.history", path.getName()))[ FD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()[ FD ]
Line_6 $$ final ContentRevision beforeRevision = change.getBeforeRevision()-->Line_9 $$ committedPath = beforeRevision.getFile()[ FD ]
Line_16 $$ final LogLoader logLoader-->Line_29 $$ logLoader.check()[ FD ]
Line_41 $$ if (!Boolean.TRUE.equals(sessionReported.get())) -->Line_42 $$ partner.reportCreatedEmptySession(historySession)[ CD ]
Line_34 $$ final Ref<Boolean> sessionReported = new Ref<Boolean>()-->Line_41 $$ if (!Boolean.TRUE.equals(sessionReported.get())) [ FD ]
Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) -->Line_9 $$ committedPath = beforeRevision.getFile()[ CD ]
Line_5 $$ if (change != null) -->Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()[ CD ]
Line_39 $$ final Consumer<VcsFileRevision> consumer = new Consumer<VcsFileRevision>() -->Line_45 $$ partner.acceptRevision(vcsFileRevision)[ FD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_49 $$ logLoader.load()[ FD ]
Line_5 $$ if (change != null) -->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ CD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_16 $$ final LogLoader logLoader[ CD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ FD ]
Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)-->Line_49 $$ logLoader.load()[ FD ]
Line_16 $$ final LogLoader logLoader-->Line_20 $$ logLoader = new LocalLoader(myVcs, committedPath, from, to, limit, peg, showMergeSources)[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_42 $$ partner.reportCreatedEmptySession(historySession)[ FD ]
Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)-->Line_48 $$ logLoader.setConsumer(consumer)[ FD ]
Line_3 $$ FilePath committedPath = path-->Line_9 $$ committedPath = beforeRevision.getFile()[ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_30 $$ if (showMergeSources) [ CD ]
Line_35 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_36 $$ if (indicator != null) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_16 $$ final LogLoader logLoader-->Line_18 $$ logLoader = new RepositoryLoader(myVcs, committedPath, from, to, limit, peg, forceBackwards, showMergeSources)[ FD ]
Line_16 $$ final LogLoader logLoader-->Line_48 $$ logLoader.setConsumer(consumer)[ FD ]
Line_7 $$ final ContentRevision afterRevision = change.getAfterRevision()-->Line_8 $$ if (beforeRevision != null && afterRevision != null && !beforeRevision.getFile().equals(afterRevision.getFile()) && afterRevision.getFile().equals(path)) [ FD ]
Line_2 $$ public void reportAppendableHistory(FilePath path, final VcsAppendableHistorySessionPartner partner, @Nullable final SVNRevision from, @Nullable final SVNRevision to, final int limit, SVNRevision peg, final boolean forceBackwards) throws VcsException -->Line_17 $$ if (path.isNonLocal()) [ CD ]
Line_4 $$ Change change = ChangeListManager.getInstance(myVcs.getProject()).getChange(path)-->Line_11 $$ if (peg == null && change.getBeforeRevision() != null && change.getBeforeRevision().getRevisionNumber() instanceof SvnRevisionNumber) [ FD ]
Line_30 $$ if (showMergeSources) -->Line_31 $$ logLoader.initSupports15()[ CD ]
Line_33 $$ final SvnHistorySession historySession = new SvnHistorySession(myVcs, Collections.<VcsFileRevision>emptyList(), committedPath, showMergeSources && Boolean.TRUE.equals(logLoader.mySupport15), null, false, !path.isNonLocal())-->Line_42 $$ partner.reportCreatedEmptySession(historySession)[ FD ]
