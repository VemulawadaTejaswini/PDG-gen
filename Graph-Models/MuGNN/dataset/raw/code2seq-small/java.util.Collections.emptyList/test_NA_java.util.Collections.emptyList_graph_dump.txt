Line_2 $$ public void test() throws Exception -->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_6 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_24 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test2", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_29 $$ assertFalse(classesFilter.matches("com.intellij.package3", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_21 $$ assertFalse(classesFilter.matches("com.intellij.package7", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_32 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_31 $$ assertFalse(classesFilter.matches("com.intellij.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_16 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test2", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_24 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test2", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_27 $$ assertFalse(classesFilter.matches("com.intellij.package3.package4", null))[ FD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_17 $$ assertFalse(classesFilter.matches("com.intellij.package6.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_33 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test2", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_14 $$ assertFalse(classesFilter.matches("com.intellij.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_18 $$ assertFalse(classesFilter.matches("com.intellij.package6.ExcludedTest", null))[ CD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_29 $$ assertFalse(classesFilter.matches("com.intellij.package3", null))[ CD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_28 $$ assertFalse(classesFilter.matches("com.intellij.package3.package5.package4", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_9 $$ assertTrue(classesFilter.matches("com.intellij.package2.ExcludedTest", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_28 $$ assertFalse(classesFilter.matches("com.intellij.package3.package5.package4", null))[ CD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())[ FD ]
Line_2 $$ public void test() throws Exception -->Line_32 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_12 $$ assertFalse(classesFilter.matches("com.intellij.package3", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_9 $$ assertTrue(classesFilter.matches("com.intellij.package2.ExcludedTest", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_23 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_33 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test2", null))[ FD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_30 $$ assertFalse(classesFilter.matches("com.intellij", null))[ FD ]
Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_21 $$ assertFalse(classesFilter.matches("com.intellij.package7", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_10 $$ assertTrue(classesFilter.matches("com.intellij.package3.package4", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_38 $$ assertFalse(classesFilter.matches("com.intellij.package7", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_15 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_30 $$ assertFalse(classesFilter.matches("com.intellij", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_40 $$ checkForAllExcludedDefinedGroup(classesFilter)[ CD ]
Line_2 $$ public void test() throws Exception -->Line_13 $$ assertFalse(classesFilter.matches("com.intellij", null))[ CD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_28 $$ assertFalse(classesFilter.matches("com.intellij.package3.package5.package4", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_37 $$ assertTrue(classesFilter.matches("com.intellij.package7.package5.package8", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_12 $$ assertFalse(classesFilter.matches("com.intellij.package3", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_19 $$ assertFalse(classesFilter.matches("com.intellij.package7.package8", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_25 $$ assertFalse(classesFilter.matches("com.intellij.package2.Test", null))[ FD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_38 $$ assertFalse(classesFilter.matches("com.intellij.package7", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_25 $$ assertFalse(classesFilter.matches("com.intellij.package2.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_37 $$ assertTrue(classesFilter.matches("com.intellij.package7.package5.package8", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_6 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_10 $$ assertTrue(classesFilter.matches("com.intellij.package3.package4", null))[ CD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_34 $$ assertFalse(classesFilter.matches("com.intellij.package6.Test", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_42 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_33 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test2", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_24 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test2", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_16 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test2", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ LOG.info("test")[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_34 $$ assertFalse(classesFilter.matches("com.intellij.package6.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_42 $$ checkForAllExcludedDefinedGroup(classesFilter)[ CD ]
Line_2 $$ public void test() throws Exception -->Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())[ CD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_35 $$ assertTrue(classesFilter.matches("com.intellij.package6.ExcludedTest", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_8 $$ assertFalse(classesFilter.matches("com.intellij.package2.Test", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_15 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_26 $$ assertFalse(classesFilter.matches("com.intellij.package2.ExcludedTest", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_31 $$ assertFalse(classesFilter.matches("com.intellij.Test", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_36 $$ assertTrue(classesFilter.matches("com.intellij.package7.package8", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_40 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"[ CD ]
Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_42 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_8 $$ assertFalse(classesFilter.matches("com.intellij.package2.Test", null))[ FD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))[ FD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_13 $$ assertFalse(classesFilter.matches("com.intellij", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_7 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test2", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_23 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_11 $$ assertTrue(classesFilter.matches("com.intellij.package3.package5.package4", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_35 $$ assertTrue(classesFilter.matches("com.intellij.package6.ExcludedTest", null))[ CD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_26 $$ assertFalse(classesFilter.matches("com.intellij.package2.ExcludedTest", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_36 $$ assertTrue(classesFilter.matches("com.intellij.package7.package8", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_18 $$ assertFalse(classesFilter.matches("com.intellij.package6.ExcludedTest", null))[ FD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_36 $$ assertTrue(classesFilter.matches("com.intellij.package7.package8", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_20 $$ assertFalse(classesFilter.matches("com.intellij.package7.package5.package8", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_23 $$ assertFalse(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_26 $$ assertFalse(classesFilter.matches("com.intellij.package2.ExcludedTest", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ CD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_42 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_31 $$ assertFalse(classesFilter.matches("com.intellij.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_38 $$ assertFalse(classesFilter.matches("com.intellij.package7", null))[ CD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ CD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_35 $$ assertTrue(classesFilter.matches("com.intellij.package6.ExcludedTest", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_7 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test2", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_42 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_4 $$ String filterText = "[Group1]\n" + "com.intellij.package1.*\n" + "com.intellij.package2.ExcludedTest\n" + "com.intellij.package3.*package4\n" + "[Group2]\n" + "com.intellij.package5.*\n" + "com.intellij.package6.ExcludedTest\n" + "com.intellij.package7.*package8"-->Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_37 $$ assertTrue(classesFilter.matches("com.intellij.package7.package5.package8", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_25 $$ assertFalse(classesFilter.matches("com.intellij.package2.Test", null))[ CD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_11 $$ assertTrue(classesFilter.matches("com.intellij.package3.package5.package4", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_20 $$ assertFalse(classesFilter.matches("com.intellij.package7.package5.package8", null))[ FD ]
Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_48 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_47 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_27 $$ assertFalse(classesFilter.matches("com.intellij.package3.package4", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_19 $$ assertFalse(classesFilter.matches("com.intellij.package7.package8", null))[ CD ]
Line_39 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList(GroupBasedTestClassFilter.ALL_EXCLUDE_DEFINED))-->Line_46 $$ assertFalse(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_2 $$ public void test() throws Exception -->Line_30 $$ assertFalse(classesFilter.matches("com.intellij", null))[ CD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_17 $$ assertFalse(classesFilter.matches("com.intellij.package6.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_40 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_29 $$ assertFalse(classesFilter.matches("com.intellij.package3", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_34 $$ assertFalse(classesFilter.matches("com.intellij.package6.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_14 $$ assertFalse(classesFilter.matches("com.intellij.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_45 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_32 $$ assertTrue(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_43 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Arrays.asList("Group1", "Group2"))-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
Line_5 $$ TestClassesFilter classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group1"))-->Line_49 $$ assertFalse(classesFilter.matches("com.intellij.package5.Test", null))[ FD ]
Line_22 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.singletonList("Group2"))-->Line_40 $$ checkForAllExcludedDefinedGroup(classesFilter)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_44 $$ assertTrue(classesFilter.matches("com.intellij.package1.Test", null))[ CD ]
Line_2 $$ public void test() throws Exception -->Line_27 $$ assertFalse(classesFilter.matches("com.intellij.package3.package4", null))[ CD ]
Line_41 $$ classesFilter = GroupBasedTestClassFilter.createOn(getReader(filterText), Collections.<String>emptyList())-->Line_50 $$ assertTrue(classesFilter.matches("com.intellij.package4.Test", null))[ FD ]
