Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_3 $$ mySearchKey.visualLine = visualLine[ FD ]
Line_6 $$ if (i >= 0) -->Line_9 $$ tabs = Collections.emptyList()[ CD ]
Line_4 $$ int i = Collections.binarySearch(myCache, mySearchKey)-->Line_6 $$ if (i >= 0) [ FD ]
Line_4 $$ int i = Collections.binarySearch(myCache, mySearchKey)-->Line_7 $$ tabs = myCache.get(i).getTabData()[ FD ]
Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_4 $$ int i = Collections.binarySearch(myCache, mySearchKey)[ CD ]
Line_7 $$ tabs = myCache.get(i).getTabData()-->Line_9 $$ tabs = Collections.emptyList()[ FD ]
Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_3 $$ mySearchKey.visualLine = visualLine[ CD ]
Line_6 $$ if (i >= 0) -->Line_7 $$ tabs = myCache.get(i).getTabData()[ CD ]
Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_11 $$ return new TabulationDataProvider(tabs)[ CD ]
Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_6 $$ if (i >= 0) [ CD ]
Line_5 $$ List<TabData> tabs-->Line_9 $$ tabs = Collections.emptyList()[ FD ]
Line_5 $$ List<TabData> tabs-->Line_7 $$ tabs = myCache.get(i).getTabData()[ FD ]
Line_2 $$ private TabulationDataProvider getTabulationDataProvider(int visualLine) throws IllegalStateException -->Line_5 $$ List<TabData> tabs[ CD ]
