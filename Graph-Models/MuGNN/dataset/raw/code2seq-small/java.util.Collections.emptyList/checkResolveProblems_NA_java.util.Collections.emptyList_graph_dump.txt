Line_26 $$ if (errorMessage != null) -->Line_27 $$ list.add(holder.createResolveProblem(element, domReference))[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_8 $$ final XmlElement valueElement = DomUtil.getValueElement(element)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_9 $$ if (valueElement != null && !isSoftReference(element)) [ CD ]
Line_17 $$ if (reference != domReference && hasBadResolve(reference)) -->Line_19 $$ list.add(holder.createResolveProblem(element, reference))[ CD ]
Line_13 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_32 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_33 $$ if (errorMessage != null) -->Line_34 $$ list.add(holder.createProblem(element, errorMessage))[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_39 $$ return Collections.emptyList()[ CD ]
Line_18 $$ hasBadResolve = true-->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_10 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_27 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_34 $$ list.add(holder.createProblem(element, errorMessage))[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_4 $$ final Required required = element.getAnnotation(Required.class)[ FD ]
Line_10 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_34 $$ list.add(holder.createProblem(element, errorMessage))[ FD ]
Line_3 $$ if (StringUtil.isEmpty(element.getStringValue())) -->Line_5 $$ if (required != null && !required.nonEmpty())[ CD ]
Line_8 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_3 $$ if (StringUtil.isEmpty(element.getStringValue())) -->Line_4 $$ final Required required = element.getAnnotation(Required.class)[ CD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_3 $$ if (StringUtil.isEmpty(element.getStringValue())) [ FD ]
Line_18 $$ hasBadResolve = true-->Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) [ FD ]
Line_14 $$ boolean hasBadResolve = false-->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_11 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())-->Line_12 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)[ FD ]
Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) -->Line_33 $$ if (errorMessage != null) [ CD ]
Line_12 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)-->Line_27 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_16 $$ for (final PsiReference reference : psiReferences) -->Line_17 $$ if (reference != domReference && hasBadResolve(reference)) [ FD ]
Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) -->Line_24 $$ hasBadResolve = true[ CD ]
Line_4 $$ final Required required = element.getAnnotation(Required.class)-->Line_5 $$ if (required != null && !required.nonEmpty())[ FD ]
Line_12 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)-->Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_13 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)[ FD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_10 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_32 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_16 $$ for (final PsiReference reference : psiReferences) -->Line_19 $$ list.add(holder.createResolveProblem(element, reference))[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_27 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_14 $$ boolean hasBadResolve = false-->Line_18 $$ hasBadResolve = true[ FD ]
Line_5 $$ if (required != null && !required.nonEmpty())-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_33 $$ if (errorMessage != null) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_8 $$ final XmlElement valueElement = DomUtil.getValueElement(element)[ CD ]
Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) -->Line_22 $$ final boolean isResolvingConverter = converter instanceof ResolvingConverter[ CD ]
Line_18 $$ hasBadResolve = true-->Line_24 $$ hasBadResolve = true[ FD ]
Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_26 $$ if (errorMessage != null) [ FD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ CD ]
Line_14 $$ boolean hasBadResolve = false-->Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) [ FD ]
Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) -->Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ CD ]
Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) -->Line_26 $$ if (errorMessage != null) [ CD ]
Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_34 $$ list.add(holder.createProblem(element, errorMessage))[ FD ]
Line_13 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_25 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_11 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_19 $$ list.add(holder.createResolveProblem(element, reference))[ FD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_14 $$ boolean hasBadResolve = false[ CD ]
Line_13 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_9 $$ if (valueElement != null && !isSoftReference(element)) [ FD ]
Line_10 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_19 $$ list.add(holder.createResolveProblem(element, reference))[ FD ]
Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) -->Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) [ CD ]
Line_23 $$ if (!hasBadResolve && (domReference != null || isResolvingConverter && hasBadResolve(domReference = new GenericDomValueReference(element)))) -->Line_27 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_24 $$ hasBadResolve = true-->Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_31 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) -->Line_32 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ CD ]
Line_12 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)-->Line_15 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkResolveProblems(GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_3 $$ if (StringUtil.isEmpty(element.getStringValue())) [ CD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_12 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)[ CD ]
Line_8 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_11 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())[ FD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_13 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)[ CD ]
Line_9 $$ if (valueElement != null && !isSoftReference(element)) -->Line_37 $$ return list[ CD ]
Line_17 $$ if (reference != domReference && hasBadResolve(reference)) -->Line_18 $$ hasBadResolve = true[ CD ]
Line_14 $$ boolean hasBadResolve = false-->Line_24 $$ hasBadResolve = true[ FD ]
