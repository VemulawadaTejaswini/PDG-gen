Line_10 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_6 $$ final Required required = element.getAnnotation(Required.class)-->Line_7 $$ if (required != null && !required.nonEmpty())[ FD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ CD ]
Line_16 $$ boolean hasBadResolve = false-->Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_5 $$ if (StringUtil.isEmpty(element.getStringValue())) -->Line_6 $$ final Required required = element.getAnnotation(Required.class)[ CD ]
Line_15 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_35 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_13 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())-->Line_14 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)[ FD ]
Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) -->Line_36 $$ if (errorMessage != null) [ CD ]
Line_16 $$ boolean hasBadResolve = false-->Line_27 $$ hasBadResolve = true[ FD ]
Line_19 $$ if (reference != domReference && hasBadResolve(reference)) -->Line_20 $$ hasBadResolve = true[ CD ]
Line_5 $$ if (StringUtil.isEmpty(element.getStringValue())) -->Line_7 $$ if (required != null && !required.nonEmpty())[ CD ]
Line_36 $$ if (errorMessage != null) -->Line_37 $$ list.add(holder.createProblem(element, errorMessage))[ CD ]
Line_12 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_37 $$ list.add(holder.createProblem(element, errorMessage))[ FD ]
Line_12 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_21 $$ list.add(holder.createResolveProblem(element, reference))[ FD ]
Line_20 $$ hasBadResolve = true-->Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_15 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_28 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ FD ]
Line_29 $$ if (errorMessage != null) -->Line_30 $$ list.add(holder.createResolveProblem(element, domReference))[ CD ]
Line_14 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)-->Line_30 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) -->Line_35 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))[ CD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_17 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ CD ]
Line_17 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) -->Line_24 $$ final boolean isResolvingConverter = converter instanceof ResolvingConverter[ CD ]
Line_28 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_36 $$ if (errorMessage != null) [ FD ]
Line_15 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)-->Line_17 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ FD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_14 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)[ CD ]
Line_12 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_30 $$ list.add(holder.createResolveProblem(element, domReference))[ FD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_12 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()[ CD ]
Line_14 $$ GenericDomValueReference domReference = ContainerUtil.findInstance(psiReferences, GenericDomValueReference.class)-->Line_17 $$ if (domReference == null || !isDomResolveOK(element, domReference, converter)) [ FD ]
Line_16 $$ boolean hasBadResolve = false-->Line_20 $$ hasBadResolve = true[ FD ]
Line_28 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_29 $$ if (errorMessage != null) [ FD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_40 $$ return list[ CD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_15 $$ final Converter converter = WrappingConverter.getDeepestConverter(element.getConverter(), element)[ CD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_13 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())[ CD ]
Line_11 $$ if (valueElement != null && !isSoftReference(element)) -->Line_16 $$ boolean hasBadResolve = false[ CD ]
Line_20 $$ hasBadResolve = true-->Line_27 $$ hasBadResolve = true[ FD ]
Line_7 $$ if (required != null && !required.nonEmpty())-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_10 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_13 $$ final PsiReference[] psiReferences = myProvider.getReferencesByElement(valueElement, new ProcessingContext())[ FD ]
Line_18 $$ for (final PsiReference reference : psiReferences) -->Line_19 $$ if (reference != domReference && hasBadResolve(reference)) [ FD ]
Line_18 $$ for (final PsiReference reference : psiReferences) -->Line_21 $$ list.add(holder.createResolveProblem(element, reference))[ FD ]
Line_19 $$ if (reference != domReference && hasBadResolve(reference)) -->Line_21 $$ list.add(holder.createResolveProblem(element, reference))[ CD ]
Line_27 $$ hasBadResolve = true-->Line_34 $$ if (!hasBadResolve && psiReferences.length == 0 && element.getValue() == null && !PsiTreeUtil.hasErrorElements(valueElement)) [ FD ]
Line_28 $$ final String errorMessage = converter.getErrorMessage(element.getStringValue(), ConvertContextFactory.createConvertContext(DomManagerImpl.getDomInvocationHandler(element)))-->Line_37 $$ list.add(holder.createProblem(element, errorMessage))[ FD ]
