Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_113 $$ if (lineRange.intersects(range)) [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_69 $$ targets.add(new LambdaSmartStepTarget(expression, getCurrentParamName(), expression.getBody(), myNextLambdaExpressionOrdinal++, null))[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_69 $$ targets.add(new LambdaSmartStepTarget(expression, getCurrentParamName(), expression.getBody(), myNextLambdaExpressionOrdinal++, null))[ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_74 $$ PsiElement element = expression.resolve()[ FD ]
Line_16 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_23 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)[ FD ]
Line_112 $$ TextRange range = expression.getTextRange()-->Line_114 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_76 $$ PsiElement navMethod = element.getNavigationElement()-->Line_77 $$ if (navMethod instanceof PsiMethod) [ FD ]
Line_37 $$ element = parent-->Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_114 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_67 $$ super.visitLambdaExpression(expression)[ CD ]
Line_74 $$ PsiElement element = expression.resolve()-->Line_75 $$ if (element instanceof PsiMethod) [ FD ]
Line_37 $$ element = parent-->Line_76 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_150 $$ if (psiMethod != null) [ FD ]
Line_33 $$ final PsiElement parent = element.getParent()-->Line_37 $$ element = parent[ FD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_25 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_148 $$ super.visitCallExpression(expression)[ FD ]
Line_94 $$ TextRange range = method.getTextRange()-->Line_95 $$ if (lineRange.intersects(range)) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_136 $$ super.visitExpressionList(expressionList)[ FD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_122 $$ final String methodName = psiMethod.getName()[ FD ]
Line_103 $$ TextRange range = statement.getTextRange()-->Line_114 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_125 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_127 $$ myParamNameStack.push(methodName + ": " + paramName + ".")[ CD ]
Line_142 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_143 $$ if (psiMethod != null) [ FD ]
Line_75 $$ if (element instanceof PsiMethod) -->Line_77 $$ if (navMethod instanceof PsiMethod) [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_142 $$ final PsiMethod psiMethod = expression.resolveMethod()[ FD ]
Line_5 $$ final int line = position.getLine()-->Line_23 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_143 $$ if (psiMethod != null) [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_86 $$ if (lineRange.intersects(range)) [ CD ]
Line_16 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_17 $$ if (doc == null)[ FD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_124 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ FD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_150 $$ if (psiMethod != null) [ FD ]
Line_41 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_114 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_28 $$ if (lineRange == null || lineRange.isEmpty()) -->Line_29 $$ return Collections.emptyList()[ CD ]
Line_103 $$ TextRange range = statement.getTextRange()-->Line_113 $$ if (lineRange.intersects(range)) [ FD ]
Line_66 $$ myInsideLambda = true-->Line_68 $$ myInsideLambda = inLambda[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_94 $$ TextRange range = method.getTextRange()[ FD ]
Line_11 $$ final VirtualFile vFile = file.getVirtualFile()-->Line_12 $$ if (vFile == null) [ FD ]
Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_161 $$ sibling.accept(methodCollector)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_106 $$ super.visitStatement(statement)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_54 $$ return myParamNameStack.isEmpty() ? null : myParamNameStack.peek()[ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_116 $$ super.visitExpression(expression)[ CD ]
Line_121 $$ if (psiMethod != null) -->Line_125 $$ for (int idx = 0; idx < expressions.length; idx++) [ CD ]
Line_121 $$ if (psiMethod != null) -->Line_136 $$ super.visitExpressionList(expressionList)[ CD ]
Line_37 $$ element = parent-->Line_156 $$ element.accept(methodCollector)[ FD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_60 $$ targets.add(new MethodSmartStepTarget(psiMethod, getCurrentParamName(), psiMethod.getBody(), true, null))[ FD ]
Line_23 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)-->Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_121 $$ if (psiMethod != null) [ CD ]
Line_94 $$ TextRange range = method.getTextRange()-->Line_113 $$ if (lineRange.intersects(range)) [ FD ]
Line_112 $$ TextRange range = expression.getTextRange()-->Line_113 $$ if (lineRange.intersects(range)) [ FD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_144 $$ myContextStack.push(psiMethod)[ FD ]
Line_142 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_150 $$ if (psiMethod != null) [ FD ]
Line_104 $$ if (lineRange.intersects(range)) -->Line_105 $$ textRange.set(textRange.get().union(range))[ CD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_167 $$ return targets[ CD ]
Line_5 $$ final int line = position.getLine()-->Line_6 $$ if (line < 0) [ FD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_37 $$ element = parent[ FD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_122 $$ final String methodName = psiMethod.getName()[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_112 $$ TextRange range = expression.getTextRange()[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_74 $$ PsiElement element = expression.resolve()[ CD ]
Line_143 $$ if (psiMethod != null) -->Line_144 $$ myContextStack.push(psiMethod)[ CD ]
Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_161 $$ sibling.accept(methodCollector)[ CD ]
Line_103 $$ TextRange range = statement.getTextRange()-->Line_104 $$ if (lineRange.intersects(range)) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_116 $$ super.visitExpression(expression)[ FD ]
Line_74 $$ PsiElement element = expression.resolve()-->Line_156 $$ element.accept(methodCollector)[ FD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_32 $$ do [ CD ]
Line_16 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_19 $$ if (line >= doc.getLineCount()) [ FD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_143 $$ if (psiMethod != null) [ FD ]
Line_142 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_144 $$ myContextStack.push(psiMethod)[ FD ]
Line_125 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_126 $$ final String paramName = (idx < parameters.length && !parameters[idx].isVarArgs()) ? parameters[idx].getName() : "arg" + (idx + 1)[ CD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_75 $$ if (element instanceof PsiMethod) [ FD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_76 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_113 $$ if (lineRange.intersects(range)) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_75 $$ if (element instanceof PsiMethod) [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_94 $$ TextRange range = method.getTextRange()[ CD ]
Line_121 $$ if (psiMethod != null) -->Line_122 $$ final String methodName = psiMethod.getName()[ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_68 $$ myInsideLambda = inLambda[ CD ]
Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_158 $$ if (!lineRange.intersects(sibling.getTextRange())) [ CD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_33 $$ final PsiElement parent = element.getParent()[ FD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_41 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)[ CD ]
Line_77 $$ if (navMethod instanceof PsiMethod) -->Line_78 $$ targets.add(new MethodSmartStepTarget(((PsiMethod) navMethod), null, expression, true, null))[ CD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_34 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_85 $$ TextRange range = field.getTextRange()[ CD ]
Line_37 $$ element = parent-->Line_75 $$ if (element instanceof PsiMethod) [ FD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_28 $$ if (lineRange == null || lineRange.isEmpty()) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_85 $$ TextRange range = field.getTextRange()[ FD ]
Line_94 $$ TextRange range = method.getTextRange()-->Line_105 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_32 $$ do -->Line_37 $$ element = parent[ CD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_95 $$ if (lineRange.intersects(range)) [ FD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_161 $$ sibling.accept(methodCollector)[ FD ]
Line_5 $$ final int line = position.getLine()-->Line_19 $$ if (line >= doc.getLineCount()) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_67 $$ super.visitLambdaExpression(expression)[ FD ]
Line_94 $$ TextRange range = method.getTextRange()-->Line_104 $$ if (lineRange.intersects(range)) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_123 $$ final PsiExpression[] expressions = expressionList.getExpressions()[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_104 $$ if (lineRange.intersects(range)) [ CD ]
Line_32 $$ do -->Line_33 $$ final PsiElement parent = element.getParent()[ CD ]
Line_24 $$ PsiElement element = position.getElementAt()-->Line_156 $$ element.accept(methodCollector)[ FD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_95 $$ if (lineRange.intersects(range)) [ FD ]
Line_75 $$ if (element instanceof PsiMethod) -->Line_76 $$ PsiElement navMethod = element.getNavigationElement()[ CD ]
Line_113 $$ if (lineRange.intersects(range)) -->Line_114 $$ textRange.set(textRange.get().union(range))[ CD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() [ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_103 $$ TextRange range = statement.getTextRange()[ FD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_26 $$ PsiElement body = method != null ? method.getBody() : null-->Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange[ FD ]
Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_158 $$ if (!lineRange.intersects(sibling.getTextRange())) [ FD ]
Line_11 $$ final VirtualFile vFile = file.getVirtualFile()-->Line_16 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ FD ]
Line_33 $$ final PsiElement parent = element.getParent()-->Line_34 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_105 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_74 $$ PsiElement element = expression.resolve()-->Line_157 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_121 $$ if (psiMethod != null) -->Line_124 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ CD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_104 $$ if (lineRange.intersects(range)) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()[ CD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_144 $$ myContextStack.push(psiMethod)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_66 $$ myInsideLambda = true[ CD ]
Line_143 $$ if (psiMethod != null) -->Line_145 $$ targets.add(new MethodSmartStepTarget(psiMethod, null, expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression().getReferenceNameElement() : expression instanceof PsiNewExpression ? ((PsiNewExpression) expression).getClassOrAnonymousClassReference() : expression, myInsideLambda, null))[ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_156 $$ element.accept(methodCollector)[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_142 $$ final PsiMethod psiMethod = expression.resolveMethod()[ CD ]
Line_41 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_163 $$ Range<Integer> lines = new Range<Integer>(doc.getLineNumber(textRange.get().getStartOffset()), doc.getLineNumber(textRange.get().getEndOffset()))[ FD ]
Line_16 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_163 $$ Range<Integer> lines = new Range<Integer>(doc.getLineNumber(textRange.get().getStartOffset()), doc.getLineNumber(textRange.get().getEndOffset()))[ FD ]
Line_150 $$ if (psiMethod != null) -->Line_151 $$ myContextStack.pop()[ CD ]
Line_10 $$ final PsiFile file = position.getFile()-->Line_11 $$ final VirtualFile vFile = file.getVirtualFile()[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_112 $$ TextRange range = expression.getTextRange()[ CD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_121 $$ if (psiMethod != null) [ FD ]
Line_128 $$ final PsiExpression argExpression = expressions[idx]-->Line_130 $$ argExpression.accept(this)[ FD ]
Line_85 $$ TextRange range = field.getTextRange()-->Line_113 $$ if (lineRange.intersects(range)) [ FD ]
Line_17 $$ if (doc == null)-->Line_18 $$ return Collections.emptyList()[ CD ]
Line_32 $$ do -->Line_34 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ CD ]
Line_121 $$ if (psiMethod != null) -->Line_123 $$ final PsiExpression[] expressions = expressionList.getExpressions()[ CD ]
Line_74 $$ PsiElement element = expression.resolve()-->Line_76 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_158 $$ if (!lineRange.intersects(sibling.getTextRange())) [ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_95 $$ if (lineRange.intersects(range)) [ CD ]
Line_37 $$ element = parent-->Line_33 $$ final PsiElement parent = element.getParent()[ FD ]
Line_31 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_156 $$ element.accept(methodCollector)[ CD ]
Line_41 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_105 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_27 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_104 $$ if (lineRange.intersects(range)) [ FD ]
Line_104 $$ if (lineRange.intersects(range)) -->Line_106 $$ super.visitStatement(statement)[ CD ]
Line_125 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_128 $$ final PsiExpression argExpression = expressions[idx][ CD ]
Line_103 $$ TextRange range = statement.getTextRange()-->Line_105 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_143 $$ if (psiMethod != null) [ FD ]
Line_94 $$ TextRange range = method.getTextRange()-->Line_114 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_103 $$ TextRange range = statement.getTextRange()[ CD ]
Line_42 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_65 $$ boolean inLambda = myInsideLambda[ CD ]
Line_120 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_121 $$ if (psiMethod != null) [ FD ]
Line_25 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)-->Line_94 $$ TextRange range = method.getTextRange()[ FD ]
Line_65 $$ boolean inLambda = myInsideLambda-->Line_68 $$ myInsideLambda = inLambda[ FD ]
Line_59 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_124 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ FD ]
Line_25 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)-->Line_26 $$ PsiElement body = method != null ? method.getBody() : null[ FD ]
