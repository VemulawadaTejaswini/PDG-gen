Line_18 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)-->Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange[ FD ]
Line_50 $$ boolean inLambda = myInsideLambda-->Line_53 $$ myInsideLambda = inLambda[ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_28 $$ final PsiElement parent = element.getParent()[ FD ]
Line_32 $$ element = parent-->Line_126 $$ element.accept(methodCollector)[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_19 $$ PsiElement element = position.getElementAt()[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_7 $$ final PsiFile file = position.getFile()[ CD ]
Line_20 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)-->Line_21 $$ PsiElement body = method != null ? method.getBody() : null[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_78 $$ TextRange range = statement.getTextRange()[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_52 $$ super.visitLambdaExpression(expression)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_93 $$ if (psiMethod != null) [ CD ]
Line_32 $$ element = parent-->Line_59 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_97 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_99 $$ myParamNameStack.push(methodName + ": " + paramName + ".")[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_95 $$ final PsiExpression[] expressions = expressionList.getExpressions()[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_131 $$ sibling.accept(methodCollector)[ FD ]
Line_57 $$ PsiElement element = expression.resolve()-->Line_126 $$ element.accept(methodCollector)[ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_96 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ FD ]
Line_72 $$ TextRange range = method.getTextRange()-->Line_87 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_97 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_100 $$ final PsiExpression argExpression = expressions[idx][ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_20 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)[ CD ]
Line_72 $$ TextRange range = method.getTextRange()-->Line_79 $$ if (lineRange.intersects(range)) [ FD ]
Line_15 $$ if (line >= doc.getLineCount()) -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_67 $$ if (lineRange.intersects(range)) -->Line_68 $$ super.visitField(field)[ CD ]
Line_120 $$ if (psiMethod != null) -->Line_121 $$ myContextStack.pop()[ CD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_137 $$ return targets[ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_18 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_52 $$ super.visitLambdaExpression(expression)[ CD ]
Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_133 $$ Range<Integer> lines = new Range<Integer>(doc.getLineNumber(textRange.get().getStartOffset()), doc.getLineNumber(textRange.get().getEndOffset()))[ FD ]
Line_32 $$ element = parent-->Line_28 $$ final PsiElement parent = element.getParent()[ FD ]
Line_32 $$ element = parent-->Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_113 $$ if (psiMethod != null) -->Line_114 $$ myContextStack.push(psiMethod)[ CD ]
Line_78 $$ TextRange range = statement.getTextRange()-->Line_87 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_20 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)-->Line_74 $$ super.visitMethod(method)[ FD ]
Line_20 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)-->Line_72 $$ TextRange range = method.getTextRange()[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_23 $$ if (lineRange == null || lineRange.isEmpty()) [ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_3 $$ final int line = position.getLine()[ CD ]
Line_112 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_120 $$ if (psiMethod != null) [ FD ]
Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_131 $$ sibling.accept(methodCollector)[ FD ]
Line_59 $$ PsiElement navMethod = element.getNavigationElement()-->Line_60 $$ if (navMethod instanceof PsiMethod) [ FD ]
Line_79 $$ if (lineRange.intersects(range)) -->Line_81 $$ super.visitStatement(statement)[ CD ]
Line_27 $$ do -->Line_32 $$ element = parent[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_89 $$ super.visitExpression(expression)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_51 $$ myInsideLambda = true[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_79 $$ if (lineRange.intersects(range)) [ CD ]
Line_3 $$ final int line = position.getLine()-->Line_15 $$ if (line >= doc.getLineCount()) [ FD ]
Line_93 $$ if (psiMethod != null) -->Line_108 $$ super.visitExpressionList(expressionList)[ CD ]
Line_3 $$ final int line = position.getLine()-->Line_18 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_7 $$ final PsiFile file = position.getFile()[ FD ]
Line_35 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_133 $$ Range<Integer> lines = new Range<Integer>(doc.getLineNumber(textRange.get().getStartOffset()), doc.getLineNumber(textRange.get().getEndOffset()))[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_73 $$ if (lineRange.intersects(range)) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_85 $$ TextRange range = expression.getTextRange()[ CD ]
Line_72 $$ TextRange range = method.getTextRange()-->Line_73 $$ if (lineRange.intersects(range)) [ FD ]
Line_93 $$ if (psiMethod != null) -->Line_94 $$ final String methodName = psiMethod.getName()[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_57 $$ PsiElement element = expression.resolve()[ CD ]
Line_57 $$ PsiElement element = expression.resolve()-->Line_58 $$ if (element instanceof PsiMethod) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()[ CD ]
Line_100 $$ final PsiExpression argExpression = expressions[idx]-->Line_102 $$ argExpression.accept(this)[ FD ]
Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_128 $$ if (!lineRange.intersects(sibling.getTextRange())) [ FD ]
Line_8 $$ final VirtualFile vFile = file.getVirtualFile()-->Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ FD ]
Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_131 $$ sibling.accept(methodCollector)[ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_13 $$ if (doc == null)[ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_21 $$ PsiElement body = method != null ? method.getBody() : null[ CD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_29 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_27 $$ do -->Line_29 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ CD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_94 $$ final String methodName = psiMethod.getName()[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_19 $$ PsiElement element = position.getElementAt()[ CD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_79 $$ if (lineRange.intersects(range)) [ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_32 $$ element = parent[ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_58 $$ if (element instanceof PsiMethod) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_78 $$ TextRange range = statement.getTextRange()[ FD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_87 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_72 $$ TextRange range = method.getTextRange()-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_78 $$ TextRange range = statement.getTextRange()-->Line_80 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_112 $$ final PsiMethod psiMethod = expression.resolveMethod()[ FD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_79 $$ if (lineRange.intersects(range)) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_118 $$ super.visitCallExpression(expression)[ FD ]
Line_9 $$ if (vFile == null) -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_34 $$ final List<SmartStepTarget> targets = new OrderedSet<SmartStepTarget>()-->Line_61 $$ targets.add(new MethodSmartStepTarget(((PsiMethod) navMethod), null, expression, true, null))[ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_93 $$ if (psiMethod != null) [ FD ]
Line_27 $$ do -->Line_28 $$ final PsiElement parent = element.getParent()[ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_42 $$ return myParamNameStack.isEmpty() ? null : myParamNameStack.peek()[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_113 $$ if (psiMethod != null) [ CD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_113 $$ if (psiMethod != null) [ FD ]
Line_34 $$ final List<SmartStepTarget> targets = new OrderedSet<SmartStepTarget>()-->Line_54 $$ targets.add(new LambdaSmartStepTarget(expression, getCurrentParamName(), expression.getBody(), myNextLambdaExpressionOrdinal++, null))[ FD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_27 $$ do [ CD ]
Line_32 $$ element = parent-->Line_58 $$ if (element instanceof PsiMethod) [ FD ]
Line_78 $$ TextRange range = statement.getTextRange()-->Line_79 $$ if (lineRange.intersects(range)) [ FD ]
Line_93 $$ if (psiMethod != null) -->Line_96 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ CD ]
Line_78 $$ TextRange range = statement.getTextRange()-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_4 $$ if (line < 0) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_81 $$ super.visitStatement(statement)[ FD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_96 $$ final PsiParameter[] parameters = psiMethod.getParameterList().getParameters()[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_108 $$ super.visitExpressionList(expressionList)[ FD ]
Line_60 $$ if (navMethod instanceof PsiMethod) -->Line_61 $$ targets.add(new MethodSmartStepTarget(((PsiMethod) navMethod), null, expression, true, null))[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_112 $$ final PsiMethod psiMethod = expression.resolveMethod()[ CD ]
Line_112 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_113 $$ if (psiMethod != null) [ FD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_67 $$ if (lineRange.intersects(range)) [ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_59 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ CD ]
Line_28 $$ final PsiElement parent = element.getParent()-->Line_29 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_126 $$ element.accept(methodCollector)[ CD ]
Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_15 $$ if (line >= doc.getLineCount()) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_57 $$ PsiElement element = expression.resolve()[ FD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_23 $$ if (lineRange == null || lineRange.isEmpty()) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_58 $$ if (element instanceof PsiMethod) [ CD ]
Line_72 $$ TextRange range = method.getTextRange()-->Line_80 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)[ CD ]
Line_3 $$ final int line = position.getLine()-->Line_4 $$ if (line < 0) [ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_3 $$ final int line = position.getLine()[ FD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_120 $$ if (psiMethod != null) [ FD ]
Line_28 $$ final PsiElement parent = element.getParent()-->Line_32 $$ element = parent[ FD ]
Line_113 $$ if (psiMethod != null) -->Line_115 $$ targets.add(new MethodSmartStepTarget(psiMethod, null, expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression().getReferenceNameElement() : expression instanceof PsiNewExpression ? ((PsiNewExpression) expression).getClassOrAnonymousClassReference() : expression, myInsideLambda, null))[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_89 $$ super.visitExpression(expression)[ CD ]
Line_35 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_87 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_34 $$ final List<SmartStepTarget> targets = new OrderedSet<SmartStepTarget>()-->Line_115 $$ targets.add(new MethodSmartStepTarget(psiMethod, null, expression instanceof PsiMethodCallExpression ? ((PsiMethodCallExpression) expression).getMethodExpression().getReferenceNameElement() : expression instanceof PsiNewExpression ? ((PsiNewExpression) expression).getClassOrAnonymousClassReference() : expression, myInsideLambda, null))[ FD ]
Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_18 $$ TextRange curLineRange = DocumentUtil.getLineTextRange(doc, line)[ FD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_73 $$ if (lineRange.intersects(range)) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_74 $$ super.visitMethod(method)[ FD ]
Line_97 $$ for (int idx = 0; idx < expressions.length; idx++) -->Line_98 $$ final String paramName = (idx < parameters.length && !parameters[idx].isVarArgs()) ? parameters[idx].getName() : "arg" + (idx + 1)[ CD ]
Line_93 $$ if (psiMethod != null) -->Line_97 $$ for (int idx = 0; idx < expressions.length; idx++) [ CD ]
Line_57 $$ PsiElement element = expression.resolve()-->Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) [ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_4 $$ if (line < 0) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_50 $$ boolean inLambda = myInsideLambda[ CD ]
Line_112 $$ final PsiMethod psiMethod = expression.resolveMethod()-->Line_114 $$ myContextStack.push(psiMethod)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_68 $$ super.visitField(field)[ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_114 $$ myContextStack.push(psiMethod)[ FD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_35 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)[ CD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_94 $$ final String methodName = psiMethod.getName()[ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_126 $$ element.accept(methodCollector)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_66 $$ TextRange range = field.getTextRange()[ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_139 $$ return Collections.emptyList()[ CD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_34 $$ final List<SmartStepTarget> targets = new OrderedSet<SmartStepTarget>()[ CD ]
Line_127 $$ for (PsiElement sibling = element.getNextSibling(); sibling != null; sibling = sibling.getNextSibling()) -->Line_128 $$ if (!lineRange.intersects(sibling.getTextRange())) [ CD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_15 $$ if (line >= doc.getLineCount()) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_72 $$ TextRange range = method.getTextRange()[ FD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_128 $$ if (!lineRange.intersects(sibling.getTextRange())) [ FD ]
Line_19 $$ PsiElement element = position.getElementAt()-->Line_20 $$ PsiParameterListOwner method = DebuggerUtilsEx.getContainingMethod(element)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_86 $$ if (lineRange.intersects(range)) [ CD ]
Line_66 $$ TextRange range = field.getTextRange()-->Line_80 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) [ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_8 $$ final VirtualFile vFile = file.getVirtualFile()[ CD ]
Line_58 $$ if (element instanceof PsiMethod) -->Line_59 $$ PsiElement navMethod = element.getNavigationElement()[ CD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_93 $$ if (psiMethod != null) [ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_113 $$ if (psiMethod != null) [ FD ]
Line_51 $$ myInsideLambda = true-->Line_53 $$ myInsideLambda = inLambda[ FD ]
Line_85 $$ TextRange range = expression.getTextRange()-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_67 $$ if (lineRange.intersects(range)) [ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_54 $$ targets.add(new LambdaSmartStepTarget(expression, getCurrentParamName(), expression.getBody(), myNextLambdaExpressionOrdinal++, null))[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_54 $$ targets.add(new LambdaSmartStepTarget(expression, getCurrentParamName(), expression.getBody(), myNextLambdaExpressionOrdinal++, null))[ CD ]
Line_86 $$ if (lineRange.intersects(range)) -->Line_87 $$ textRange.set(textRange.get().union(range))[ CD ]
Line_73 $$ if (lineRange.intersects(range)) -->Line_74 $$ super.visitMethod(method)[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_72 $$ TextRange range = method.getTextRange()[ CD ]
Line_57 $$ PsiElement element = expression.resolve()-->Line_59 $$ PsiElement navMethod = element.getNavigationElement()[ FD ]
Line_93 $$ if (psiMethod != null) -->Line_95 $$ final PsiExpression[] expressions = expressionList.getExpressions()[ CD ]
Line_23 $$ if (lineRange == null || lineRange.isEmpty()) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_26 $$ if (element != null && !(element instanceof PsiCompiledElement)) -->Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_85 $$ TextRange range = expression.getTextRange()[ FD ]
Line_8 $$ final VirtualFile vFile = file.getVirtualFile()-->Line_9 $$ if (vFile == null) [ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_120 $$ if (psiMethod != null) [ FD ]
Line_58 $$ if (element instanceof PsiMethod) -->Line_60 $$ if (navMethod instanceof PsiMethod) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_67 $$ if (lineRange.intersects(range)) [ CD ]
Line_12 $$ final Document doc = FileDocumentManager.getInstance().getDocument(vFile)-->Line_13 $$ if (doc == null)[ FD ]
Line_34 $$ final List<SmartStepTarget> targets = new OrderedSet<SmartStepTarget>()-->Line_46 $$ targets.add(new MethodSmartStepTarget(psiMethod, getCurrentParamName(), psiMethod.getBody(), true, null))[ FD ]
Line_92 $$ final PsiMethod psiMethod = myContextStack.isEmpty() ? null : myContextStack.peek()-->Line_114 $$ myContextStack.push(psiMethod)[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange[ CD ]
Line_85 $$ TextRange range = expression.getTextRange()-->Line_87 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_45 $$ for (PsiMethod psiMethod : aClass.getMethods()) -->Line_46 $$ targets.add(new MethodSmartStepTarget(psiMethod, getCurrentParamName(), psiMethod.getBody(), true, null))[ FD ]
Line_13 $$ if (doc == null)-->Line_14 $$ return Collections.emptyList()[ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_126 $$ element.accept(methodCollector)[ FD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_53 $$ myInsideLambda = inLambda[ CD ]
Line_21 $$ PsiElement body = method != null ? method.getBody() : null-->Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange[ FD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_73 $$ if (lineRange.intersects(range)) [ FD ]
Line_22 $$ final TextRange lineRange = (body != null) ? curLineRange.intersection(body.getTextRange()) : curLineRange-->Line_86 $$ if (lineRange.intersects(range)) [ FD ]
Line_79 $$ if (lineRange.intersects(range)) -->Line_80 $$ textRange.set(textRange.get().union(range))[ CD ]
Line_7 $$ final PsiFile file = position.getFile()-->Line_8 $$ final VirtualFile vFile = file.getVirtualFile()[ FD ]
Line_35 $$ final Ref<TextRange> textRange = new Ref<TextRange>(lineRange)-->Line_80 $$ textRange.set(textRange.get().union(range))[ FD ]
Line_2 $$ public List<SmartStepTarget> findSmartStepTargets(final SourcePosition position) -->Line_9 $$ if (vFile == null) [ CD ]
Line_36 $$ final PsiElementVisitor methodCollector = new JavaRecursiveElementVisitor() -->Line_66 $$ TextRange range = field.getTextRange()[ FD ]
