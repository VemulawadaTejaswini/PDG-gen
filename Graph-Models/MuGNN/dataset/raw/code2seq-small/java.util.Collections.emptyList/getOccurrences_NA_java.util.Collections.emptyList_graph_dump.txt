Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_26 $$ occurrences.add(element)[ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_12 $$ if (PsiEquivalenceUtil.areElementsEquivalent(element, pattern)) [ FD ]
Line_3 $$ if (context == null) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_23 $$ final int start = text.indexOf(substring)-->Line_24 $$ if (start >= 0) [ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_13 $$ occurrences.add(element)[ FD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_35 $$ context.acceptChildren(visitor)[ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_9 $$ if (element instanceof PyParameter) [ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_32 $$ element.acceptChildren(this)[ FD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() [ CD ]
Line_12 $$ if (PsiEquivalenceUtil.areElementsEquivalent(element, pattern)) -->Line_13 $$ occurrences.add(element)[ CD ]
Line_16 $$ if (element instanceof PyStringLiteralExpression) -->Line_18 $$ if (selection != null) [ CD ]
Line_19 $$ final String substring = selection.getSecond().substring(pattern.getText())-->Line_23 $$ final int start = text.indexOf(substring)[ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_12 $$ if (PsiEquivalenceUtil.areElementsEquivalent(element, pattern)) [ CD ]
Line_21 $$ final String text = element.getText()-->Line_23 $$ final int start = text.indexOf(substring)[ FD ]
Line_18 $$ if (selection != null) -->Line_21 $$ final String text = element.getText()[ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_3 $$ if (context == null) [ CD ]
Line_18 $$ if (selection != null) -->Line_20 $$ final PyStringLiteralExpression expr = (PyStringLiteralExpression) element[ CD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_9 $$ if (element instanceof PyParameter) [ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_6 $$ final List<PsiElement> occurrences = new ArrayList<PsiElement>()[ CD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_21 $$ final String text = element.getText()[ FD ]
Line_17 $$ final Pair<PsiElement, TextRange> selection = pattern.getUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE)-->Line_19 $$ final String substring = selection.getSecond().substring(pattern.getText())[ FD ]
Line_22 $$ if (text != null && expr.getStringNodes().size() == 1) -->Line_23 $$ final int start = text.indexOf(substring)[ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_36 $$ return occurrences[ CD ]
Line_12 $$ if (PsiEquivalenceUtil.areElementsEquivalent(element, pattern)) -->Line_14 $$ return[ CD ]
Line_6 $$ final List<PsiElement> occurrences = new ArrayList<PsiElement>()-->Line_26 $$ occurrences.add(element)[ FD ]
Line_18 $$ if (selection != null) -->Line_19 $$ final String substring = selection.getSecond().substring(pattern.getText())[ CD ]
Line_6 $$ final List<PsiElement> occurrences = new ArrayList<PsiElement>()-->Line_13 $$ occurrences.add(element)[ FD ]
Line_20 $$ final PyStringLiteralExpression expr = (PyStringLiteralExpression) element-->Line_22 $$ if (text != null && expr.getStringNodes().size() == 1) [ FD ]
Line_23 $$ final int start = text.indexOf(substring)-->Line_25 $$ element.putUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE, Pair.create(element, TextRange.from(start, substring.length())))[ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_25 $$ element.putUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE, Pair.create(element, TextRange.from(start, substring.length())))[ FD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_17 $$ final Pair<PsiElement, TextRange> selection = pattern.getUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE)[ FD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_32 $$ element.acceptChildren(this)[ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_35 $$ context.acceptChildren(visitor)[ CD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_16 $$ if (element instanceof PyStringLiteralExpression) [ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_3 $$ if (context == null) [ FD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_19 $$ final String substring = selection.getSecond().substring(pattern.getText())[ FD ]
Line_22 $$ if (text != null && expr.getStringNodes().size() == 1) -->Line_24 $$ if (start >= 0) [ CD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_16 $$ if (element instanceof PyStringLiteralExpression) [ FD ]
Line_18 $$ if (selection != null) -->Line_22 $$ if (text != null && expr.getStringNodes().size() == 1) [ CD ]
Line_9 $$ if (element instanceof PyParameter) -->Line_10 $$ return[ CD ]
Line_2 $$ public static List<PsiElement> getOccurrences(@NotNull final PsiElement pattern, @Nullable final PsiElement context) -->Line_12 $$ if (PsiEquivalenceUtil.areElementsEquivalent(element, pattern)) [ FD ]
Line_16 $$ if (element instanceof PyStringLiteralExpression) -->Line_17 $$ final Pair<PsiElement, TextRange> selection = pattern.getUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE)[ CD ]
Line_24 $$ if (start >= 0) -->Line_27 $$ return[ CD ]
Line_7 $$ final PyElementVisitor visitor = new PyElementVisitor() -->Line_35 $$ context.acceptChildren(visitor)[ FD ]
Line_17 $$ final Pair<PsiElement, TextRange> selection = pattern.getUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE)-->Line_18 $$ if (selection != null) [ FD ]
Line_24 $$ if (start >= 0) -->Line_26 $$ occurrences.add(element)[ CD ]
Line_19 $$ final String substring = selection.getSecond().substring(pattern.getText())-->Line_25 $$ element.putUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE, Pair.create(element, TextRange.from(start, substring.length())))[ FD ]
Line_24 $$ if (start >= 0) -->Line_25 $$ element.putUserData(PyReplaceExpressionUtil.SELECTION_BREAKS_AST_NODE, Pair.create(element, TextRange.from(start, substring.length())))[ CD ]
