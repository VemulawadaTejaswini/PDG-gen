Line_13 $$ int index = part.indexOf('?')-->Line_14 $$ if (index == -1) [ FD ]
Line_4 $$ if (methods == null || methods.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<AuthMethodConfig> parse(final String methods, final Map<String, String> replacements) -->Line_4 $$ if (methods == null || methods.isEmpty()) [ FD ]
Line_9 $$ for (String part : parts) -->Line_18 $$ Map<String, Deque<String>> props = QueryParameterUtils.parseQueryString(part.substring(index + 1), UTF_8)[ FD ]
Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)-->Line_25 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), URLDecoder.decode(val.getFirst(), UTF_8))[ FD ]
Line_20 $$ for (Map.Entry<String, Deque<String>> entry : props.entrySet()) -->Line_25 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), URLDecoder.decode(val.getFirst(), UTF_8))[ FD ]
Line_9 $$ for (String part : parts) -->Line_15 $$ ret.add(createAuthMethodConfig(part, replacements))[ FD ]
Line_9 $$ for (String part : parts) -->Line_17 $$ final String name = part.substring(0, index)[ FD ]
Line_2 $$ public static List<AuthMethodConfig> parse(final String methods, final Map<String, String> replacements) -->Line_15 $$ ret.add(createAuthMethodConfig(part, replacements))[ FD ]
Line_14 $$ if (index == -1) -->Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)[ CD ]
Line_2 $$ public static List<AuthMethodConfig> parse(final String methods, final Map<String, String> replacements) -->Line_8 $$ String[] parts = methods.split(",")[ FD ]
Line_9 $$ for (String part : parts) -->Line_13 $$ int index = part.indexOf('?')[ FD ]
Line_7 $$ final List<AuthMethodConfig> ret = new ArrayList<AuthMethodConfig>()-->Line_15 $$ ret.add(createAuthMethodConfig(part, replacements))[ FD ]
Line_14 $$ if (index == -1) -->Line_18 $$ Map<String, Deque<String>> props = QueryParameterUtils.parseQueryString(part.substring(index + 1), UTF_8)[ CD ]
Line_22 $$ if (val.isEmpty()) -->Line_25 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), URLDecoder.decode(val.getFirst(), UTF_8))[ CD ]
Line_18 $$ Map<String, Deque<String>> props = QueryParameterUtils.parseQueryString(part.substring(index + 1), UTF_8)-->Line_20 $$ for (Map.Entry<String, Deque<String>> entry : props.entrySet()) [ FD ]
Line_22 $$ if (val.isEmpty()) -->Line_23 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), "")[ CD ]
Line_20 $$ for (Map.Entry<String, Deque<String>> entry : props.entrySet()) -->Line_23 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), "")[ FD ]
Line_14 $$ if (index == -1) -->Line_17 $$ final String name = part.substring(0, index)[ CD ]
Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)-->Line_23 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), "")[ FD ]
Line_9 $$ for (String part : parts) -->Line_10 $$ if (part.isEmpty()) [ FD ]
Line_2 $$ public static List<AuthMethodConfig> parse(final String methods, final Map<String, String> replacements) -->Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)[ FD ]
Line_20 $$ for (Map.Entry<String, Deque<String>> entry : props.entrySet()) -->Line_21 $$ Deque<String> val = entry.getValue()[ FD ]
Line_14 $$ if (index == -1) -->Line_15 $$ ret.add(createAuthMethodConfig(part, replacements))[ CD ]
Line_7 $$ final List<AuthMethodConfig> ret = new ArrayList<AuthMethodConfig>()-->Line_28 $$ ret.add(authMethodConfig)[ FD ]
Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)-->Line_28 $$ ret.add(authMethodConfig)[ FD ]
Line_17 $$ final String name = part.substring(0, index)-->Line_19 $$ final AuthMethodConfig authMethodConfig = createAuthMethodConfig(name, replacements)[ FD ]
Line_21 $$ Deque<String> val = entry.getValue()-->Line_25 $$ authMethodConfig.getProperties().put(URLDecoder.decode(entry.getKey(), UTF_8), URLDecoder.decode(val.getFirst(), UTF_8))[ FD ]
Line_21 $$ Deque<String> val = entry.getValue()-->Line_22 $$ if (val.isEmpty()) [ FD ]
Line_14 $$ if (index == -1) -->Line_28 $$ ret.add(authMethodConfig)[ CD ]
Line_13 $$ int index = part.indexOf('?')-->Line_17 $$ final String name = part.substring(0, index)[ FD ]
