Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_13 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ CD ]
Line_10 $$ if (bundle.getBundleId() == 0) -->Line_11 $$ return handleSystemBundle(bundleWiring, path)[ CD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_3 $$ Bundle bundle = bundleWiring.getBundle()[ CD ]
Line_4 $$ if (bundle.equals(_bundle) || bundle.equals(_jspBundle)) -->Line_5 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ CD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_4 $$ if (bundle.equals(_bundle) || bundle.equals(_jspBundle)) [ CD ]
Line_3 $$ Bundle bundle = bundleWiring.getBundle()-->Line_5 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ FD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_10 $$ if (bundle.getBundleId() == 0) [ CD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_11 $$ return handleSystemBundle(bundleWiring, path)[ FD ]
Line_3 $$ Bundle bundle = bundleWiring.getBundle()-->Line_13 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ FD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_13 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ FD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_7 $$ if (!isExportsPackage(bundleWiring, path.replace('/', '.'))) [ CD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_5 $$ return toJavaFileObjects(bundle, bundleWiring.listResources(path, "*.class", options))[ FD ]
Line_3 $$ Bundle bundle = bundleWiring.getBundle()-->Line_10 $$ if (bundle.getBundleId() == 0) [ FD ]
Line_7 $$ if (!isExportsPackage(bundleWiring, path.replace('/', '.'))) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_3 $$ Bundle bundle = bundleWiring.getBundle()[ FD ]
Line_2 $$ public Collection<JavaFileObject> resolveClasses(BundleWiring bundleWiring, String path, int options) -->Line_7 $$ if (!isExportsPackage(bundleWiring, path.replace('/', '.'))) [ FD ]
Line_3 $$ Bundle bundle = bundleWiring.getBundle()-->Line_4 $$ if (bundle.equals(_bundle) || bundle.equals(_jspBundle)) [ FD ]
