Line_47 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) -->Line_48 $$ return null[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_13 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_58 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_28 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) -->Line_29 $$ return null[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_28 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_24 $$ left[parameters.length] = method.getReturnType()[ CD ]
Line_3 $$ if (method.isConstructor()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_32 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) [ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_45 $$ final PsiClassType[] thrownTypes = method.getThrowsList().getReferencedTypes()[ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() [ FD ]
Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_38 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_47 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_31 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) -->Line_32 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) [ CD ]
Line_36 $$ final PsiType returnType = method.getReturnType()-->Line_41 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_3 $$ if (method.isConstructor()) [ FD ]
Line_38 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) -->Line_39 $$ return null[ CD ]
Line_20 $$ for (int i = 0; i < parameters.length; i++) -->Line_21 $$ left[i] = interfaceMethodParameters[i].getType()[ CD ]
Line_53 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) -->Line_54 $$ return null[ CD ]
Line_46 $$ for (PsiClassType thrownType : thrownTypes) -->Line_47 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_57 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())[ FD ]
Line_37 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()-->Line_38 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_58 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_36 $$ final PsiType returnType = method.getReturnType()-->Line_38 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_18 $$ final PsiType[] left = new PsiType[parameters.length + 1][ CD ]
Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_25 $$ right[parameters.length] = interfaceMethod.getReturnType()[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_57 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())[ CD ]
Line_18 $$ final PsiType[] left = new PsiType[parameters.length + 1]-->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_32 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) -->Line_33 $$ return null[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_60 $$ return null[ CD ]
Line_15 $$ if (parameters.length != interfaceMethodParameters.length) -->Line_16 $$ return null[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)[ CD ]
Line_20 $$ for (int i = 0; i < parameters.length; i++) -->Line_22 $$ right[i] = parameters[i].getType()[ CD ]
Line_41 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) -->Line_42 $$ return null[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_20 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_52 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getContextOfType(method, PsiCodeBlock.class)-->Line_53 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) [ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_19 $$ final PsiType[] right = new PsiType[parameters.length + 1][ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() [ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_36 $$ final PsiType returnType = method.getReturnType()[ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_26 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_28 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_31 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) [ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_37 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_41 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_24 $$ left[parameters.length] = method.getReturnType()[ FD ]
Line_37 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()-->Line_41 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_25 $$ right[parameters.length] = interfaceMethod.getReturnType()[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_15 $$ if (parameters.length != interfaceMethodParameters.length) [ CD ]
Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_14 $$ final PsiParameter[] interfaceMethodParameters = interfaceMethod.getParameterList().getParameters()[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_38 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ CD ]
Line_46 $$ for (PsiClassType thrownType : thrownTypes) -->Line_53 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) [ FD ]
Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_37 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()[ FD ]
Line_57 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())-->Line_58 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_3 $$ if (method.isConstructor()) [ CD ]
Line_19 $$ final PsiType[] right = new PsiType[parameters.length + 1]-->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_44 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()[ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_45 $$ final PsiClassType[] thrownTypes = method.getThrowsList().getReferencedTypes()[ FD ]
Line_44 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()-->Line_47 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_26 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_12 $$ if (interfaceMethod != null) [ CD ]
Line_20 $$ for (int i = 0; i < parameters.length; i++) -->Line_31 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_52 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getContextOfType(method, PsiCodeBlock.class)[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_14 $$ final PsiParameter[] interfaceMethodParameters = interfaceMethod.getParameterList().getParameters()[ CD ]
Line_26 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()-->Line_27 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)[ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_28 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ FD ]
Line_11 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_12 $$ if (interfaceMethod != null) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_13 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_12 $$ if (interfaceMethod != null) -->Line_44 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_58 $$ return elementFactory.createType(aClass, substitutor)[ CD ]
Line_12 $$ if (interfaceMethod != null) -->Line_36 $$ final PsiType returnType = method.getReturnType()[ CD ]
