Line_38 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) -->Line_39 $$ return null[ CD ]
Line_3 $$ if (method.isConstructor()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_41 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()[ CD ]
Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_44 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_17 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_44 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) -->Line_45 $$ return null[ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_10 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_43 $$ for (PsiClassType thrownType : thrownTypes) -->Line_44 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_38 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ CD ]
Line_34 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()-->Line_38 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_57 $$ return null[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_55 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() [ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_21 $$ left[parameters.length] = method.getReturnType()[ FD ]
Line_23 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()-->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_33 $$ final PsiType returnType = method.getReturnType()[ FD ]
Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_11 $$ final PsiParameter[] interfaceMethodParameters = interfaceMethod.getParameterList().getParameters()[ FD ]
Line_34 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()-->Line_35 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_3 $$ if (method.isConstructor()) [ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_9 $$ if (interfaceMethod != null) [ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_25 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ FD ]
Line_12 $$ if (parameters.length != interfaceMethodParameters.length) -->Line_13 $$ return null[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_11 $$ final PsiParameter[] interfaceMethodParameters = interfaceMethod.getParameterList().getParameters()[ CD ]
Line_28 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) -->Line_29 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) [ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_23 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_22 $$ right[parameters.length] = interfaceMethod.getReturnType()[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_23 $$ final PsiTypeParameter[] typeParameters = aClass.getTypeParameters()[ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_35 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_10 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_49 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getContextOfType(method, PsiCodeBlock.class)-->Line_50 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) [ FD ]
Line_29 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) -->Line_30 $$ return null[ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)[ FD ]
Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_29 $$ if (!TypeConversionUtil.isAssignable(parameters[i].getType(), substitutor.substitute(interfaceMethodParameters[i].getType()))) [ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_42 $$ final PsiClassType[] thrownTypes = method.getThrowsList().getReferencedTypes()[ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_15 $$ final PsiType[] left = new PsiType[parameters.length + 1][ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_25 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ CD ]
Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_34 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()[ FD ]
Line_41 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()-->Line_44 $$ if (!ExceptionUtil.isHandledBy(thrownType, interfaceThrownTypes, substitutor)) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_33 $$ final PsiType returnType = method.getReturnType()[ CD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_43 $$ for (PsiClassType thrownType : thrownTypes) -->Line_50 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_42 $$ final PsiClassType[] thrownTypes = method.getThrowsList().getReferencedTypes()[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_34 $$ PsiType interfaceMethodReturnType = interfaceMethod.getReturnType()[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_28 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) [ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_49 $$ final PsiCodeBlock codeBlock = PsiTreeUtil.getContextOfType(method, PsiCodeBlock.class)[ FD ]
Line_17 $$ for (int i = 0; i < parameters.length; i++) -->Line_19 $$ right[i] = parameters[i].getType()[ CD ]
Line_25 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) -->Line_26 $$ return null[ CD ]
Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_35 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_35 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) -->Line_36 $$ return null[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_16 $$ final PsiType[] right = new PsiType[parameters.length + 1][ CD ]
Line_16 $$ final PsiType[] right = new PsiType[parameters.length + 1]-->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_50 $$ if (codeBlock == null || !ExceptionUtil.isHandled(thrownType, codeBlock)) -->Line_51 $$ return null[ CD ]
Line_54 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())-->Line_55 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_33 $$ final PsiType returnType = method.getReturnType()-->Line_35 $$ if (returnType != null && !TypeConversionUtil.isAssignable(returnType, substitutor.substitute(interfaceMethodReturnType))) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_54 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())[ CD ]
Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_9 $$ if (interfaceMethod != null) [ FD ]
Line_17 $$ for (int i = 0; i < parameters.length; i++) -->Line_18 $$ left[i] = interfaceMethodParameters[i].getType()[ CD ]
Line_9 $$ if (interfaceMethod != null) -->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ CD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_3 $$ if (method.isConstructor()) [ CD ]
Line_15 $$ final PsiType[] left = new PsiType[parameters.length + 1]-->Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))[ FD ]
Line_2 $$ public static Collection<? extends PsiType> suggestFunctionalInterfaces(@NotNull final PsiMethod method) -->Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() [ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)[ CD ]
Line_17 $$ for (int i = 0; i < parameters.length; i++) -->Line_28 $$ for (int i = 0; i < interfaceMethodParameters.length; i++) [ FD ]
Line_33 $$ final PsiType returnType = method.getReturnType()-->Line_38 $$ if (PsiType.VOID.equals(returnType) && !PsiType.VOID.equals(interfaceMethodReturnType)) [ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_21 $$ left[parameters.length] = method.getReturnType()[ CD ]
Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_41 $$ final PsiClassType[] interfaceThrownTypes = interfaceMethod.getThrowsList().getReferencedTypes()[ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_55 $$ return elementFactory.createType(aClass, substitutor)[ CD ]
Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_55 $$ return elementFactory.createType(aClass, substitutor)[ FD ]
Line_6 $$ return suggestFunctionalInterfaces(method, new NullableFunction<PsiClass, PsiType>() -->Line_54 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(aClass.getProject())[ FD ]
Line_9 $$ if (interfaceMethod != null) -->Line_12 $$ if (parameters.length != interfaceMethodParameters.length) [ CD ]
Line_8 $$ final PsiMethod interfaceMethod = LambdaUtil.getFunctionalInterfaceMethod(aClass)-->Line_22 $$ right[parameters.length] = interfaceMethod.getReturnType()[ FD ]
Line_24 $$ final PsiSubstitutor substitutor = PsiResolveHelper.SERVICE.getInstance(aClass.getProject()).inferTypeArguments(typeParameters, left, right, PsiUtil.getLanguageLevel(method))-->Line_25 $$ if (PsiUtil.isRawSubstitutor(aClass, substitutor)) [ FD ]
