Line_4 $$ final PsiElement parentAnchor-->Line_8 $$ parentAnchor = pyPackage[ FD ]
Line_17 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_22 $$ QualifiedName importedQName = importElement.getImportedQName()[ FD ]
Line_17 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_18 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())[ FD ]
Line_22 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_29 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_8 $$ parentAnchor = pyPackage-->Line_19 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_29 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))-->Line_31 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_6 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()-->Line_8 $$ parentAnchor = pyPackage[ FD ]
Line_12 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)-->Line_17 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) [ FD ]
Line_5 $$ if (pyPackage instanceof PyFile && PyUtil.isPackage(((PyFile) pyPackage))) -->Line_6 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()[ CD ]
Line_28 $$ importedQName = importedQName.removeTail(1)-->Line_25 $$ if (importedQName == null || importedQName.getComponentCount() <= 1) [ FD ]
Line_18 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_31 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_5 $$ if (pyPackage instanceof PyFile && PyUtil.isPackage(((PyFile) pyPackage))) -->Line_7 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) [ CD ]
Line_12 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)-->Line_13 $$ if (scopeOwner == null) [ FD ]
Line_4 $$ final PsiElement parentAnchor-->Line_19 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_17 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_29 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_13 $$ if (scopeOwner == null) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_16 $$ final List<PsiElement> result = new ArrayList<PsiElement>()-->Line_31 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_6 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()-->Line_19 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_28 $$ importedQName = importedQName.removeTail(1)-->Line_29 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_7 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) -->Line_10 $$ return null[ CD ]
Line_22 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_28 $$ importedQName = importedQName.removeTail(1)[ FD ]
Line_18 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_19 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_18 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_29 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_7 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) -->Line_8 $$ parentAnchor = pyPackage[ CD ]
Line_22 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_25 $$ if (importedQName == null || importedQName.getComponentCount() <= 1) [ FD ]
Line_4 $$ final PsiElement parentAnchor-->Line_6 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()[ FD ]
