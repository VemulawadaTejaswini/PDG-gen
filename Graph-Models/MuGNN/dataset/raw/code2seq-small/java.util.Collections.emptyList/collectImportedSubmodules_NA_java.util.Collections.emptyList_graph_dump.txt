Line_16 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_21 $$ QualifiedName importedQName = importElement.getImportedQName()[ FD ]
Line_5 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()-->Line_18 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_16 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_17 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())[ FD ]
Line_7 $$ parentAnchor = pyPackage-->Line_18 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_4 $$ if (pyPackage instanceof PyFile && PyUtil.isPackage(((PyFile) pyPackage))) -->Line_6 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) [ CD ]
Line_16 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) -->Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_6 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) -->Line_7 $$ parentAnchor = pyPackage[ CD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_7 $$ parentAnchor = pyPackage[ FD ]
Line_17 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_12 $$ if (scopeOwner == null) [ CD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_15 $$ final List<PsiElement> result = new ArrayList<PsiElement>()[ CD ]
Line_3 $$ final PsiElement parentAnchor-->Line_7 $$ parentAnchor = pyPackage[ FD ]
Line_12 $$ if (scopeOwner == null) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_11 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)-->Line_16 $$ for (PyImportElement importElement : getVisibleImports(scopeOwner)) [ FD ]
Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))-->Line_29 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_26 $$ importedQName = importedQName.removeTail(1)-->Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_11 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)-->Line_12 $$ if (scopeOwner == null) [ FD ]
Line_21 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_26 $$ importedQName = importedQName.removeTail(1)[ FD ]
Line_22 $$ while (resolvedChild != null && resolvedChild.getParent() != parentAnchor) -->Line_23 $$ if (importedQName == null || importedQName.getComponentCount() <= 1) [ CD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_4 $$ if (pyPackage instanceof PyFile && PyUtil.isPackage(((PyFile) pyPackage))) [ CD ]
Line_22 $$ while (resolvedChild != null && resolvedChild.getParent() != parentAnchor) -->Line_26 $$ importedQName = importedQName.removeTail(1)[ CD ]
Line_17 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_18 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))-->Line_22 $$ while (resolvedChild != null && resolvedChild.getParent() != parentAnchor) [ FD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_11 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)[ FD ]
Line_6 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) -->Line_9 $$ return null[ CD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_31 $$ return result[ CD ]
Line_5 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()-->Line_7 $$ parentAnchor = pyPackage[ FD ]
Line_4 $$ if (pyPackage instanceof PyFile && PyUtil.isPackage(((PyFile) pyPackage))) -->Line_5 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()[ CD ]
Line_3 $$ final PsiElement parentAnchor-->Line_18 $$ if (resolvedChild == null || !PsiTreeUtil.isAncestor(parentAnchor, resolvedChild, true)) [ FD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_6 $$ if (pyPackage instanceof PsiDirectory && PyUtil.isPackage(((PsiDirectory) pyPackage), location)) [ FD ]
Line_21 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ FD ]
Line_3 $$ final PsiElement parentAnchor-->Line_5 $$ parentAnchor = ((PyFile) pyPackage).getContainingDirectory()[ FD ]
Line_26 $$ importedQName = importedQName.removeTail(1)-->Line_23 $$ if (importedQName == null || importedQName.getComponentCount() <= 1) [ FD ]
Line_22 $$ while (resolvedChild != null && resolvedChild.getParent() != parentAnchor) -->Line_27 $$ resolvedChild = PyUtil.turnInitIntoDir(ResolveImportUtil.resolveImportElement(importElement, importedQName))[ CD ]
Line_17 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_29 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_21 $$ QualifiedName importedQName = importElement.getImportedQName()-->Line_23 $$ if (importedQName == null || importedQName.getComponentCount() <= 1) [ FD ]
Line_15 $$ final List<PsiElement> result = new ArrayList<PsiElement>()-->Line_29 $$ ContainerUtil.addIfNotNull(result, resolvedChild)[ FD ]
Line_17 $$ PsiElement resolvedChild = PyUtil.turnInitIntoDir(importElement.resolve())-->Line_22 $$ while (resolvedChild != null && resolvedChild.getParent() != parentAnchor) [ FD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_3 $$ final PsiElement parentAnchor[ CD ]
Line_2 $$ public static List<PsiElement> collectImportedSubmodules(@NotNull PsiFileSystemItem pyPackage, @NotNull PsiElement location) -->Line_11 $$ final ScopeOwner scopeOwner = ScopeUtil.getScopeOwner(location)[ CD ]
