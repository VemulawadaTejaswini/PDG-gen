Line_54 $$ final AppClientXml parser = new AppClientXml(Module.getBootModuleLoader(), extensionRegistry)-->Line_62 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_59 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_69 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_34 $$ final String file = clientArgs.get(0)[ CD ]
Line_46 $$ File realFile = new File(earPath)-->Line_48 $$ throw AppClientLogger.ROOT_LOGGER.cannotFindAppClientFile(realFile.getAbsoluteFile())[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_30 $$ usage()[ CD ]
Line_26 $$ ServerEnvironment serverEnvironment = options.environment-->Line_59 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ FD ]
Line_61 $$ if (!namespace.equals(Namespace.CURRENT)) -->Line_62 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ CD ]
Line_37 $$ final String earPath-->Line_44 $$ earPath = file.substring(0, pos)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() [ CD ]
Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_66 $$ return persister[ CD ]
Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_69 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ FD ]
Line_8 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) -->Line_17 $$ StdioContext.setStdioContextSelector(new SimpleStdioContextSelector(context))[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_50 $$ final Bootstrap bootstrap = Bootstrap.Factory.newInstance()[ CD ]
Line_27 $$ final List<String> clientArgs = options.clientArguments-->Line_35 $$ final List<String> params = clientArgs.subList(1, clientArgs.size())[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_52 $$ configuration.setModuleLoader(Module.getBootModuleLoader())[ CD ]
Line_59 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)-->Line_65 $$ extensionRegistry.setWriterRegistry(persister)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_35 $$ final List<String> params = clientArgs.subList(1, clientArgs.size())[ CD ]
Line_59 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)-->Line_62 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
Line_34 $$ final String file = clientArgs.get(0)-->Line_44 $$ earPath = file.substring(0, pos)[ FD ]
Line_60 $$ for (Namespace namespace : Namespace.domainValues()) -->Line_61 $$ if (!namespace.equals(Namespace.CURRENT)) [ FD ]
Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_65 $$ extensionRegistry.setWriterRegistry(persister)[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_39 $$ if (pos == -1) [ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_70 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ CD ]
Line_40 $$ earPath = file-->Line_44 $$ earPath = file.substring(0, pos)[ FD ]
Line_27 $$ final List<String> clientArgs = options.clientArguments-->Line_28 $$ if (clientArgs.isEmpty()) [ FD ]
Line_34 $$ final String file = clientArgs.get(0)-->Line_43 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_46 $$ File realFile = new File(earPath)[ CD ]
Line_39 $$ if (pos == -1) -->Line_43 $$ deploymentName = file.substring(pos + 1)[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_36 $$ final String deploymentName[ CD ]
Line_36 $$ final String deploymentName-->Line_43 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_39 $$ if (pos == -1) -->Line_40 $$ earPath = file[ CD ]
Line_37 $$ final String earPath-->Line_40 $$ earPath = file[ FD ]
Line_38 $$ int pos = file.lastIndexOf("#")-->Line_44 $$ earPath = file.substring(0, pos)[ FD ]
Line_34 $$ final String file = clientArgs.get(0)-->Line_38 $$ int pos = file.lastIndexOf("#")[ FD ]
Line_21 $$ final ParsedOptions options = determineEnvironment(args, new Properties(WildFlySecurityManager.getSystemPropertiesPrivileged()), WildFlySecurityManager.getSystemEnvironmentPrivileged(), ServerEnvironment.LaunchType.APPCLIENT)-->Line_22 $$ if (options == null) [ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_51 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)[ CD ]
Line_46 $$ File realFile = new File(earPath)-->Line_47 $$ if (!realFile.exists()) [ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_53 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()[ CD ]
Line_39 $$ if (pos == -1) -->Line_44 $$ earPath = file.substring(0, pos)[ CD ]
Line_51 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_53 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()[ FD ]
Line_39 $$ if (pos == -1) -->Line_41 $$ deploymentName = null[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_33 $$ final QName rootElement = new QName(Namespace.CURRENT.getUriString(), "server")[ CD ]
Line_51 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_52 $$ configuration.setModuleLoader(Module.getBootModuleLoader())[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_29 $$ STDERR.println(AppClientLogger.ROOT_LOGGER.appClientNotSpecified())[ CD ]
Line_8 $$ if (java.util.logging.LogManager.getLogManager().getClass().getName().equals("org.jboss.logmanager.LogManager")) -->Line_16 $$ final StdioContext context = StdioContext.create(new NullInputStream(), new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stdout"), org.jboss.logmanager.Level.INFO), new LoggingOutputStream(org.jboss.logmanager.Logger.getLogger("stderr"), org.jboss.logmanager.Level.ERROR))[ CD ]
Line_51 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_69 $$ configuration.setConfigurationPersisterFactory(configurationPersisterFactory)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_54 $$ final AppClientXml parser = new AppClientXml(Module.getBootModuleLoader(), extensionRegistry)[ CD ]
Line_38 $$ int pos = file.lastIndexOf("#")-->Line_39 $$ if (pos == -1) [ FD ]
Line_34 $$ final String file = clientArgs.get(0)-->Line_40 $$ earPath = file[ FD ]
Line_36 $$ final String deploymentName-->Line_41 $$ deploymentName = null[ FD ]
Line_55 $$ final Bootstrap.ConfigurationPersisterFactory configurationPersisterFactory = new Bootstrap.ConfigurationPersisterFactory() -->Line_59 $$ ApplicationClientConfigurationPersister persister = new ApplicationClientConfigurationPersister(earPath, deploymentName, options.hostUrl, options.propertiesFile, params, serverEnvironment.getServerConfigurationFile().getBootFile(), rootElement, parser)[ CD ]
Line_27 $$ final List<String> clientArgs = options.clientArguments-->Line_34 $$ final String file = clientArgs.get(0)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_38 $$ int pos = file.lastIndexOf("#")[ CD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_47 $$ if (!realFile.exists()) [ CD ]
Line_51 $$ final Bootstrap.Configuration configuration = new Bootstrap.Configuration(serverEnvironment)-->Line_70 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ FD ]
Line_41 $$ deploymentName = null-->Line_43 $$ deploymentName = file.substring(pos + 1)[ FD ]
Line_60 $$ for (Namespace namespace : Namespace.domainValues()) -->Line_62 $$ persister.registerAdditionalRootElement(new QName(namespace.getUriString(), "server"), parser)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_31 $$ abort(null)[ CD ]
Line_53 $$ final ExtensionRegistry extensionRegistry = configuration.getExtensionRegistry()-->Line_65 $$ extensionRegistry.setWriterRegistry(persister)[ FD ]
Line_28 $$ if (clientArgs.isEmpty()) -->Line_37 $$ final String earPath[ CD ]
Line_50 $$ final Bootstrap bootstrap = Bootstrap.Factory.newInstance()-->Line_70 $$ bootstrap.bootstrap(configuration, Collections.<ServiceActivator>emptyList()).get()[ FD ]
