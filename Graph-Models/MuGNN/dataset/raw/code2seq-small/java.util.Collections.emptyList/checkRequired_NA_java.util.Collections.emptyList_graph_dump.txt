Line_21 $$ if (DomUtil.hasXml(element)) -->Line_33 $$ return list[ CD ]
Line_25 $$ if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) -->Line_28 $$ if (annotation != null && annotation.value()) [ CD ]
Line_21 $$ if (DomUtil.hasXml(element)) -->Line_23 $$ final DomGenericInfo info = element.getGenericInfo()[ CD ]
Line_9 $$ if (required.value()) -->Line_11 $$ String namespace = element.getXmlElementNamespace()[ CD ]
Line_9 $$ if (required.value()) -->Line_12 $$ if (element instanceof GenericAttributeValue) [ CD ]
Line_8 $$ if (xmlElement == null) -->Line_9 $$ if (required.value()) [ CD ]
Line_5 $$ final Required required = element.getAnnotation(Required.class)-->Line_9 $$ if (required.value()) [ FD ]
Line_7 $$ final XmlElement xmlElement = element.getXmlElement()-->Line_8 $$ if (xmlElement == null) [ FD ]
Line_24 $$ for (final AbstractDomChildrenDescription description : info.getChildrenDescriptions()) -->Line_25 $$ if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) [ FD ]
Line_21 $$ if (DomUtil.hasXml(element)) -->Line_22 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()[ CD ]
Line_23 $$ final DomGenericInfo info = element.getGenericInfo()-->Line_24 $$ for (final AbstractDomChildrenDescription description : info.getChildrenDescriptions()) [ FD ]
Line_10 $$ final String xmlElementName = element.getXmlElementName()-->Line_15 $$ return Collections.singletonList(holder.createProblem(element, HighlightSeverity.ERROR, IdeBundle.message("child.tag.0.should.be.defined", xmlElementName), new AddRequiredSubtagFix(xmlElementName, namespace)))[ FD ]
Line_27 $$ final Required annotation = description.getAnnotation(Required.class)-->Line_28 $$ if (annotation != null && annotation.value()) [ FD ]
Line_26 $$ final DomCollectionChildDescription childDescription = (DomCollectionChildDescription) description-->Line_29 $$ list.add(holder.createProblem(element, childDescription, IdeBundle.message("child.tag.0.should.be.defined", ((DomCollectionChildDescription) description).getXmlElementName())))[ FD ]
Line_5 $$ final Required required = element.getAnnotation(Required.class)-->Line_6 $$ if (required != null) [ FD ]
Line_17 $$ if (element instanceof GenericDomValue) -->Line_18 $$ return ContainerUtil.createMaybeSingletonList(checkRequiredGenericValue((GenericDomValue) element, required, holder))[ CD ]
Line_9 $$ if (required.value()) -->Line_15 $$ return Collections.singletonList(holder.createProblem(element, HighlightSeverity.ERROR, IdeBundle.message("child.tag.0.should.be.defined", xmlElementName), new AddRequiredSubtagFix(xmlElementName, namespace)))[ CD ]
Line_6 $$ if (required != null) -->Line_8 $$ if (xmlElement == null) [ CD ]
Line_24 $$ for (final AbstractDomChildrenDescription description : info.getChildrenDescriptions()) -->Line_27 $$ final Required annotation = description.getAnnotation(Required.class)[ FD ]
Line_25 $$ if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) -->Line_27 $$ final Required annotation = description.getAnnotation(Required.class)[ CD ]
Line_8 $$ if (xmlElement == null) -->Line_17 $$ if (element instanceof GenericDomValue) [ CD ]
Line_28 $$ if (annotation != null && annotation.value()) -->Line_29 $$ list.add(holder.createProblem(element, childDescription, IdeBundle.message("child.tag.0.should.be.defined", ((DomCollectionChildDescription) description).getXmlElementName())))[ CD ]
Line_9 $$ if (required.value()) -->Line_10 $$ final String xmlElementName = element.getXmlElementName()[ CD ]
Line_6 $$ if (required != null) -->Line_7 $$ final XmlElement xmlElement = element.getXmlElement()[ CD ]
Line_12 $$ if (element instanceof GenericAttributeValue) -->Line_13 $$ return Collections.singletonList(holder.createProblem(element, IdeBundle.message("attribute.0.should.be.defined", xmlElementName), new DefineAttributeQuickFix(xmlElementName, namespace)))[ CD ]
Line_5 $$ final Required required = element.getAnnotation(Required.class)-->Line_18 $$ return ContainerUtil.createMaybeSingletonList(checkRequiredGenericValue((GenericDomValue) element, required, holder))[ FD ]
Line_22 $$ final SmartList<DomElementProblemDescriptor> list = new SmartList<DomElementProblemDescriptor>()-->Line_29 $$ list.add(holder.createProblem(element, childDescription, IdeBundle.message("child.tag.0.should.be.defined", ((DomCollectionChildDescription) description).getXmlElementName())))[ FD ]
Line_10 $$ final String xmlElementName = element.getXmlElementName()-->Line_13 $$ return Collections.singletonList(holder.createProblem(element, IdeBundle.message("attribute.0.should.be.defined", xmlElementName), new DefineAttributeQuickFix(xmlElementName, namespace)))[ FD ]
Line_25 $$ if (description instanceof DomCollectionChildDescription && description.getValues(element).isEmpty()) -->Line_26 $$ final DomCollectionChildDescription childDescription = (DomCollectionChildDescription) description[ CD ]
