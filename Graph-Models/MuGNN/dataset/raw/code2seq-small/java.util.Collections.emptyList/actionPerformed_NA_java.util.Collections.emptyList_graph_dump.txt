Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_29 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_28 $$ String workDirectory = dialog.getWorkDirectory()[ CD ]
Line_32 $$ if (mavenHome == null) -->Line_33 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() [ CD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_19 $$ historyService.setCanceledCommand(dialog.getGoals())[ FD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_18 $$ if (!dialog.showAndGet()) [ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_25 $$ if (goals.startsWith("mvn ")) [ CD ]
Line_18 $$ if (!dialog.showAndGet()) -->Line_19 $$ historyService.setCanceledCommand(dialog.getGoals())[ CD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_16 $$ dialog.setGoals(historyService.getCanceledCommand())[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_44 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(project).getSettings().clone()[ CD ]
Line_33 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() -->Line_38 $$ Notifications.Bus.notify(notification, project)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_29 $$ historyService.addCommand(goals, workDirectory)[ CD ]
Line_24 $$ goals = goals.trim()-->Line_25 $$ if (goals.startsWith("mvn ")) [ FD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_11 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) [ FD ]
Line_32 $$ if (mavenHome == null) -->Line_38 $$ Notifications.Bus.notify(notification, project)[ CD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_19 $$ historyService.setCanceledCommand(dialog.getGoals())[ FD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_22 $$ historyService.setCanceledCommand(null)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_18 $$ if (!dialog.showAndGet()) [ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_43 $$ generalSettings.setMavenHome(mavenHome.getPath())[ CD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_13 $$ dialog.setGoals(historyService.getHistory().get(0))[ FD ]
Line_26 $$ goals = goals.substring("mvn ".length()).trim()-->Line_29 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_6 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_8 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)[ FD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_10 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_46 $$ runnerSettings.setSkipTests(false)[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_32 $$ if (mavenHome == null) [ CD ]
Line_12 $$ if (historyService.getHistory().size() > 0) -->Line_13 $$ dialog.setGoals(historyService.getHistory().get(0))[ CD ]
Line_23 $$ String goals = dialog.getGoals()-->Line_29 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_32 $$ if (mavenHome == null) -->Line_39 $$ return[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_47 $$ MavenRunConfigurationType.runConfiguration(project, parameters, generalSettings, runnerSettings, null)[ CD ]
Line_8 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)-->Line_10 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)[ FD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_12 $$ if (historyService.getHistory().size() > 0) [ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_6 $$ String lastWorkingDirectory = historyService.getWorkDirectory()[ CD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_8 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ FD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_28 $$ String workDirectory = dialog.getWorkDirectory()[ FD ]
Line_33 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() -->Line_35 $$ ShowSettingsUtil.getInstance().showSettingsDialog(project, MavenSettings.DISPLAY_NAME)[ CD ]
Line_24 $$ goals = goals.trim()-->Line_41 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_35 $$ ShowSettingsUtil.getInstance().showSettingsDialog(project, MavenSettings.DISPLAY_NAME)[ FD ]
Line_26 $$ goals = goals.substring("mvn ".length()).trim()-->Line_41 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_10 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ CD ]
Line_11 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) -->Line_16 $$ dialog.setGoals(historyService.getCanceledCommand())[ CD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_16 $$ dialog.setGoals(historyService.getCanceledCommand())[ FD ]
Line_24 $$ goals = goals.trim()-->Line_26 $$ goals = goals.substring("mvn ".length()).trim()[ FD ]
Line_7 $$ if (lastWorkingDirectory.length() == 0) -->Line_8 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_24 $$ goals = goals.trim()[ CD ]
Line_31 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())-->Line_43 $$ generalSettings.setMavenHome(mavenHome.getPath())[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_30 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)[ CD ]
Line_23 $$ String goals = dialog.getGoals()-->Line_26 $$ goals = goals.substring("mvn ".length()).trim()[ FD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_38 $$ Notifications.Bus.notify(notification, project)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_22 $$ historyService.setCanceledCommand(null)[ CD ]
Line_25 $$ if (goals.startsWith("mvn ")) -->Line_26 $$ goals = goals.substring("mvn ".length()).trim()[ CD ]
Line_23 $$ String goals = dialog.getGoals()-->Line_24 $$ goals = goals.trim()[ FD ]
Line_30 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_31 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())[ FD ]
Line_6 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_10 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_31 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())[ CD ]
Line_23 $$ String goals = dialog.getGoals()-->Line_25 $$ if (goals.startsWith("mvn ")) [ FD ]
Line_23 $$ String goals = dialog.getGoals()-->Line_41 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_24 $$ goals = goals.trim()-->Line_29 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_47 $$ MavenRunConfigurationType.runConfiguration(project, parameters, generalSettings, runnerSettings, null)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_45 $$ runnerSettings.setMavenProperties(new LinkedHashMap<String, String>())[ CD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())[ FD ]
Line_28 $$ String workDirectory = dialog.getWorkDirectory()-->Line_29 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_23 $$ String goals = dialog.getGoals()[ CD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_7 $$ if (lastWorkingDirectory.length() == 0) [ CD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_30 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)[ FD ]
Line_11 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) -->Line_12 $$ if (historyService.getHistory().size() > 0) [ CD ]
Line_6 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_7 $$ if (lastWorkingDirectory.length() == 0) [ FD ]
Line_2 $$ public void actionPerformed(@NotNull final AnActionEvent e) -->Line_11 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) [ CD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_6 $$ String lastWorkingDirectory = historyService.getWorkDirectory()[ FD ]
Line_4 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_13 $$ dialog.setGoals(historyService.getHistory().get(0))[ FD ]
Line_18 $$ if (!dialog.showAndGet()) -->Line_20 $$ return[ CD ]
Line_31 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())-->Line_32 $$ if (mavenHome == null) [ FD ]
Line_3 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_44 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(project).getSettings().clone()[ FD ]
Line_5 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_23 $$ String goals = dialog.getGoals()[ FD ]
