Line_11 $$ List<Project> result = new SmartList<Project>()-->Line_14 $$ result.add(project)[ FD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_8 $$ if (openProjects.length == 0) [ CD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_4 $$ if (projectManager == null || file == null) [ CD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_13 $$ if (project.isInitialized() && !project.isDisposed() && ProjectRootManager.getInstance(project).getFileIndex().isInContent(file)) [ FD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_17 $$ return result[ CD ]
Line_3 $$ ProjectManager projectManager = ProjectManager.getInstance()-->Line_7 $$ Project[] openProjects = projectManager.getOpenProjects()[ FD ]
Line_13 $$ if (project.isInitialized() && !project.isDisposed() && ProjectRootManager.getInstance(project).getFileIndex().isInContent(file)) -->Line_14 $$ result.add(project)[ CD ]
Line_4 $$ if (projectManager == null || file == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_12 $$ for (Project project : openProjects) -->Line_14 $$ result.add(project)[ FD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_11 $$ List<Project> result = new SmartList<Project>()[ CD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_7 $$ Project[] openProjects = projectManager.getOpenProjects()[ CD ]
Line_12 $$ for (Project project : openProjects) -->Line_13 $$ if (project.isInitialized() && !project.isDisposed() && ProjectRootManager.getInstance(project).getFileIndex().isInContent(file)) [ FD ]
Line_2 $$ public Collection<Project> getProjectsForFile(VirtualFile file) -->Line_3 $$ ProjectManager projectManager = ProjectManager.getInstance()[ CD ]
Line_8 $$ if (openProjects.length == 0) -->Line_9 $$ return Collections.emptyList()[ CD ]
