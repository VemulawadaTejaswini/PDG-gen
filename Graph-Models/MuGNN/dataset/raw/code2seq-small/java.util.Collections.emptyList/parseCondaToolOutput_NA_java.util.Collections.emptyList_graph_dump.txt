Line_2 $$ protected static List<PyPackage> parseCondaToolOutput(@NotNull String s) throws ExecutionException -->Line_3 $$ final String[] lines = StringUtil.splitByLines(s)[ FD ]
Line_2 $$ protected static List<PyPackage> parseCondaToolOutput(@NotNull String s) throws ExecutionException -->Line_24 $$ return packages[ CD ]
Line_2 $$ protected static List<PyPackage> parseCondaToolOutput(@NotNull String s) throws ExecutionException -->Line_3 $$ final String[] lines = StringUtil.splitByLines(s)[ CD ]
Line_16 $$ final String requiresLine = fields.get(3)-->Line_17 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")[ FD ]
Line_15 $$ if (fields.size() >= 4) -->Line_16 $$ final String requiresLine = fields.get(3)[ CD ]
Line_5 $$ for (String line : lines) -->Line_6 $$ if (line.startsWith("#"))[ FD ]
Line_8 $$ final List<String> fields = StringUtil.split(line, "=")-->Line_16 $$ final String requiresLine = fields.get(3)[ FD ]
Line_4 $$ final List<PyPackage> packages = new ArrayList<PyPackage>()-->Line_21 $$ packages.add(new PyPackage(name, version, "", requirements))[ FD ]
Line_17 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")-->Line_18 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ FD ]
Line_20 $$ if (!"Python".equals(name)) -->Line_21 $$ packages.add(new PyPackage(name, version, "", requirements))[ CD ]
Line_8 $$ final List<String> fields = StringUtil.split(line, "=")-->Line_9 $$ if (fields.size() < 3) [ FD ]
Line_15 $$ if (fields.size() >= 4) -->Line_18 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ CD ]
Line_14 $$ final List<PyRequirement> requirements = new ArrayList<PyRequirement>()-->Line_18 $$ requirements.addAll(PyRequirement.parse(requiresSpec))[ FD ]
Line_8 $$ final List<String> fields = StringUtil.split(line, "=")-->Line_12 $$ final String name = fields.get(0)[ FD ]
Line_5 $$ for (String line : lines) -->Line_8 $$ final List<String> fields = StringUtil.split(line, "=")[ FD ]
Line_2 $$ protected static List<PyPackage> parseCondaToolOutput(@NotNull String s) throws ExecutionException -->Line_4 $$ final List<PyPackage> packages = new ArrayList<PyPackage>()[ CD ]
Line_15 $$ if (fields.size() >= 4) -->Line_17 $$ final String requiresSpec = StringUtil.join(StringUtil.split(requiresLine, ":"), "\n")[ CD ]
Line_12 $$ final String name = fields.get(0)-->Line_20 $$ if (!"Python".equals(name)) [ FD ]
Line_8 $$ final List<String> fields = StringUtil.split(line, "=")-->Line_15 $$ if (fields.size() >= 4) [ FD ]
Line_8 $$ final List<String> fields = StringUtil.split(line, "=")-->Line_13 $$ final String version = fields.get(1)[ FD ]
