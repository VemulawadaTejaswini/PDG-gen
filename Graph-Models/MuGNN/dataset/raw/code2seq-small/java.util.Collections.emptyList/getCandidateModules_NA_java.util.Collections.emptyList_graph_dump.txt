Line_11 $$ for (Module m : modules) -->Line_16 $$ candidates.add(m)[ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_8 $$ final Module[] modules = ModuleManager.getInstance(module.getProject()).getModules()[ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_10 $$ final Set<Module> deps = new HashSet<Module>(modules.length)[ CD ]
Line_10 $$ final Set<Module> deps = new HashSet<Module>(modules.length)-->Line_13 $$ deps.clear()[ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_20 $$ return candidates[ CD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_4 $$ final Sdk jdk = manager.getSdk()[ CD ]
Line_12 $$ if (get(m) == getInstance()) -->Line_15 $$ if (deps.contains(module) && getPluginXml(m) != null) [ CD ]
Line_11 $$ for (Module m : modules) -->Line_14 $$ PluginBuildUtil.getDependencies(m, deps)[ FD ]
Line_4 $$ final Sdk jdk = manager.getSdk()-->Line_5 $$ if (IdeaJdk.findIdeaJdk(jdk) == null) [ FD ]
Line_3 $$ final ModuleRootManager manager = ModuleRootManager.getInstance(module)-->Line_4 $$ final Sdk jdk = manager.getSdk()[ FD ]
Line_5 $$ if (IdeaJdk.findIdeaJdk(jdk) == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_11 $$ for (Module m : modules) -->Line_12 $$ if (get(m) == getInstance()) [ FD ]
Line_10 $$ final Set<Module> deps = new HashSet<Module>(modules.length)-->Line_15 $$ if (deps.contains(module) && getPluginXml(m) != null) [ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_5 $$ if (IdeaJdk.findIdeaJdk(jdk) == null) [ CD ]
Line_12 $$ if (get(m) == getInstance()) -->Line_14 $$ PluginBuildUtil.getDependencies(m, deps)[ CD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_3 $$ final ModuleRootManager manager = ModuleRootManager.getInstance(module)[ CD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_15 $$ if (deps.contains(module) && getPluginXml(m) != null) [ FD ]
Line_11 $$ for (Module m : modules) -->Line_15 $$ if (deps.contains(module) && getPluginXml(m) != null) [ FD ]
Line_12 $$ if (get(m) == getInstance()) -->Line_13 $$ deps.clear()[ CD ]
Line_9 $$ final List<Module> candidates = new ArrayList<Module>(modules.length)-->Line_16 $$ candidates.add(m)[ FD ]
Line_10 $$ final Set<Module> deps = new HashSet<Module>(modules.length)-->Line_14 $$ PluginBuildUtil.getDependencies(m, deps)[ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_3 $$ final ModuleRootManager manager = ModuleRootManager.getInstance(module)[ FD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_9 $$ final List<Module> candidates = new ArrayList<Module>(modules.length)[ CD ]
Line_2 $$ public static List<Module> getCandidateModules(Module module) -->Line_8 $$ final Module[] modules = ModuleManager.getInstance(module.getProject()).getModules()[ CD ]
Line_15 $$ if (deps.contains(module) && getPluginXml(m) != null) -->Line_16 $$ candidates.add(m)[ CD ]
