Line_4 $$ final VirtualFile[] files = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY)-->Line_5 $$ if (files == null)[ FD ]
Line_7 $$ List<VirtualFile> result = new ArrayList<VirtualFile>()-->Line_17 $$ result.add(file)[ FD ]
Line_10 $$ for (VirtualFile file : files) -->Line_14 $$ final Collection<? extends Artifact> artifacts = ArtifactBySourceFileFinder.getInstance(project).findArtifacts(file)[ FD ]
Line_9 $$ final CompilerManager compilerManager = CompilerManager.getInstance(project)-->Line_11 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_16 $$ if (!StringUtil.isEmpty(artifact.getOutputPath())) -->Line_17 $$ result.add(file)[ CD ]
Line_11 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_15 $$ for (Artifact artifact : artifacts) -->Line_16 $$ if (!StringUtil.isEmpty(artifact.getOutputPath())) [ FD ]
Line_8 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_11 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_5 $$ if (files == null)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_10 $$ for (VirtualFile file : files) -->Line_11 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_10 $$ for (VirtualFile file : files) -->Line_17 $$ result.add(file)[ FD ]
