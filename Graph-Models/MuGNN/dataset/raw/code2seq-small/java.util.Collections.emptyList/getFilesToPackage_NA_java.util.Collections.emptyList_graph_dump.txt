Line_6 $$ List<VirtualFile> result = new ArrayList<VirtualFile>()-->Line_16 $$ result.add(file)[ FD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_3 $$ final VirtualFile[] files = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY)[ CD ]
Line_4 $$ if (files == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_3 $$ final VirtualFile[] files = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY)[ FD ]
Line_7 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_10 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_9 $$ for (VirtualFile file : files) -->Line_13 $$ final Collection<? extends Artifact> artifacts = ArtifactBySourceFileFinder.getInstance(project).findArtifacts(file)[ FD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_8 $$ final CompilerManager compilerManager = CompilerManager.getInstance(project)[ FD ]
Line_9 $$ for (VirtualFile file : files) -->Line_10 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_8 $$ final CompilerManager compilerManager = CompilerManager.getInstance(project)-->Line_10 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) [ FD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_8 $$ final CompilerManager compilerManager = CompilerManager.getInstance(project)[ CD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_7 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_4 $$ if (files == null)[ CD ]
Line_3 $$ final VirtualFile[] files = e.getData(CommonDataKeys.VIRTUAL_FILE_ARRAY)-->Line_4 $$ if (files == null)[ FD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_13 $$ final Collection<? extends Artifact> artifacts = ArtifactBySourceFileFinder.getInstance(project).findArtifacts(file)[ FD ]
Line_14 $$ for (Artifact artifact : artifacts) -->Line_15 $$ if (!StringUtil.isEmpty(artifact.getOutputPath())) [ FD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_21 $$ return result[ CD ]
Line_15 $$ if (!StringUtil.isEmpty(artifact.getOutputPath())) -->Line_16 $$ result.add(file)[ CD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_6 $$ List<VirtualFile> result = new ArrayList<VirtualFile>()[ CD ]
Line_10 $$ if (file == null || file.isDirectory() || fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.SOURCES) && compilerManager.isCompilableFileType(file.getFileType())) -->Line_11 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<VirtualFile> getFilesToPackage(@NotNull AnActionEvent e, @NotNull Project project) -->Line_7 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_9 $$ for (VirtualFile file : files) -->Line_16 $$ result.add(file)[ FD ]
