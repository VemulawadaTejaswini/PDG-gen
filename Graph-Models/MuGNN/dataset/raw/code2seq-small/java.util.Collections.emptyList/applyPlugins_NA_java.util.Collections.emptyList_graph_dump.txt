Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_21 $$ if (!results.isEmpty()) [ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_55 $$ return element.getUrl().toString().equals(m2RepoUrl)[ FD ]
Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() -->Line_14 $$ return resolveToFoundResult(effectivePluginResolver, request)[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_3 $$ if (requests.isEmpty()) [ CD ]
Line_3 $$ if (requests.isEmpty()) -->Line_5 $$ return[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_7 $$ if (target == null) [ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_68 $$ defineScriptHandlerClassScope(scriptHandler, classLoaderScope, pluginImplsFromOtherLoaders.values())[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_78 $$ target.apply(id.toString())[ FD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_35 $$ scriptHandler.addScriptClassPathDependency(dependencyNotation)[ FD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_45 $$ pluginImplsFromOtherLoaders.put(result, plugin)[ CD ]
Line_59 $$ repositories.maven(new Action<MavenArtifactRepository>() -->Line_62 $$ mavenArtifactRepository.setUrl(m2RepoUrl)[ CD ]
Line_59 $$ repositories.maven(new Action<MavenArtifactRepository>() -->Line_62 $$ mavenArtifactRepository.setUrl(m2RepoUrl)[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_3 $$ if (requests.isEmpty()) [ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_87 $$ target.apply(entry.getValue())[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_10 $$ final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope)[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_4 $$ defineScriptHandlerClassScope(scriptHandler, classLoaderScope, Collections.<PluginImplementation<?>>emptyList())[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_20 $$ final Map<Result, PluginImplementation<?>> pluginImplsFromOtherLoaders = Maps.newLinkedHashMap()[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_35 $$ scriptHandler.addScriptClassPathDependency(dependencyNotation)[ FD ]
Line_26 $$ applyPlugin(result.request, result.found.getPluginId(), new Runnable() -->Line_30 $$ result.found.execute(new PluginResolveContext() [ CD ]
Line_21 $$ if (!results.isEmpty()) -->Line_24 $$ final Set<String> repoUrls = Sets.newLinkedHashSet()[ CD ]
Line_75 $$ applyPlugin(request, id, new Runnable() -->Line_78 $$ target.apply(id.toString())[ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_35 $$ scriptHandler.addScriptClassPathDependency(dependencyNotation)[ CD ]
Line_84 $$ applyPlugin(result.request, result.found.getPluginId(), new Runnable() -->Line_87 $$ target.apply(entry.getValue())[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_7 $$ if (target == null) [ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_10 $$ final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope)[ CD ]
Line_58 $$ if (!repoExists) -->Line_59 $$ repositories.maven(new Action<MavenArtifactRepository>() [ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_40 $$ pluginImpls.put(result, plugin)[ FD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_45 $$ pluginImplsFromOtherLoaders.put(result, plugin)[ FD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_34 $$ repoUrls.add(m2RepoUrl)[ CD ]
Line_21 $$ if (!results.isEmpty()) -->Line_22 $$ final RepositoryHandler repositories = scriptHandler.getRepositories()[ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_33 $$ legacyActualPluginIds.put(result, pluginId)[ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_40 $$ pluginImpls.put(result, plugin)[ CD ]
Line_3 $$ if (requests.isEmpty()) -->Line_4 $$ defineScriptHandlerClassScope(scriptHandler, classLoaderScope, Collections.<PluginImplementation<?>>emptyList())[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_68 $$ defineScriptHandlerClassScope(scriptHandler, classLoaderScope, pluginImplsFromOtherLoaders.values())[ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_62 $$ mavenArtifactRepository.setUrl(m2RepoUrl)[ FD ]
Line_10 $$ final PluginResolver effectivePluginResolver = wrapInNotInClasspathCheck(classLoaderScope)-->Line_14 $$ return resolveToFoundResult(effectivePluginResolver, request)[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_19 $$ final Map<Result, PluginImplementation<?>> pluginImpls = Maps.newLinkedHashMap()[ CD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() [ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() [ CD ]
Line_52 $$ boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() -->Line_55 $$ return element.getUrl().toString().equals(m2RepoUrl)[ FD ]
Line_2 $$ public void applyPlugins(PluginRequests requests, final ScriptHandlerInternal scriptHandler, @Nullable final PluginManagerInternal target, ClassLoaderScope classLoaderScope) -->Line_22 $$ final RepositoryHandler repositories = scriptHandler.getRepositories()[ FD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_34 $$ repoUrls.add(m2RepoUrl)[ FD ]
Line_52 $$ boolean repoExists = any(mavenRepos, new Spec<MavenArtifactRepository>() -->Line_55 $$ return element.getUrl().toString().equals(m2RepoUrl)[ CD ]
Line_30 $$ result.found.execute(new PluginResolveContext() -->Line_33 $$ legacyActualPluginIds.put(result, pluginId)[ FD ]
Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() -->Line_75 $$ applyPlugin(request, id, new Runnable() [ FD ]
Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() -->Line_14 $$ return resolveToFoundResult(effectivePluginResolver, request)[ FD ]
Line_11 $$ List<Result> results = collect(requests, new Transformer<Result, PluginRequest>() -->Line_21 $$ if (!results.isEmpty()) [ FD ]
Line_21 $$ if (!results.isEmpty()) -->Line_23 $$ final List<MavenArtifactRepository> mavenRepos = repositories.withType(MavenArtifactRepository.class)[ CD ]
