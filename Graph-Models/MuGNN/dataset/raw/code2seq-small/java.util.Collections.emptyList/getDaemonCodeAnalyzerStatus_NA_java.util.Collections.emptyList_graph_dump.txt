Line_20 $$ if (myFile instanceof PsiCompiledElement) -->Line_23 $$ return status[ CD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_31 $$ status.reasonWhyDisabled = "Highlighting is disabled for this file"[ CD ]
Line_10 $$ if (myProject != null && myProject.isDisposed()) -->Line_12 $$ status.errorAnalyzingFinished = true[ CD ]
Line_20 $$ if (myFile instanceof PsiCompiledElement) -->Line_22 $$ status.errorAnalyzingFinished = true[ CD ]
Line_10 $$ if (myProject != null && myProject.isDisposed()) -->Line_13 $$ return status[ CD ]
Line_35 $$ FileViewProvider provider = myFile.getViewProvider()-->Line_36 $$ Set<Language> languages = provider.getLanguages()[ FD ]
Line_49 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_52 $$ return status[ CD ]
Line_5 $$ if (myFile == null) -->Line_6 $$ status.reasonWhyDisabled = "No file"[ CD ]
Line_16 $$ if (!myFile.isPhysical()) -->Line_17 $$ status.reasonWhyDisabled = "File is generated"[ CD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_26 $$ if (fileType.isBinary()) [ CD ]
Line_56 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)-->Line_60 $$ TextEditorHighlightingPass tepass = passes.get(i)[ FD ]
Line_38 $$ boolean shouldHighlight = languages.isEmpty()-->Line_44 $$ if (!shouldHighlight) [ FD ]
Line_26 $$ if (fileType.isBinary()) -->Line_27 $$ status.reasonWhyDisabled = "File is binary"[ CD ]
Line_44 $$ if (!shouldHighlight) -->Line_45 $$ status.reasonWhyDisabled = "Highlighting level is None"[ CD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_16 $$ if (!myFile.isPhysical()) [ CD ]
Line_63 $$ ProgressableTextEditorHighlightingPass pass = (ProgressableTextEditorHighlightingPass) tepass-->Line_64 $$ if (pass.getProgress() < 0)[ FD ]
Line_56 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)-->Line_57 $$ status.passStati = passes.isEmpty() ? Collections.<ProgressableTextEditorHighlightingPass>emptyList() : new ArrayList<ProgressableTextEditorHighlightingPass>(passes.size())[ FD ]
Line_5 $$ if (myFile == null) -->Line_7 $$ status.errorAnalyzingFinished = true[ CD ]
Line_42 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING-->Line_44 $$ if (!shouldHighlight) [ FD ]
Line_16 $$ if (!myFile.isPhysical()) -->Line_18 $$ status.errorAnalyzingFinished = true[ CD ]
Line_44 $$ if (!shouldHighlight) -->Line_46 $$ status.errorAnalyzingFinished = true[ CD ]
Line_49 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_51 $$ status.errorAnalyzingFinished = true[ CD ]
Line_26 $$ if (fileType.isBinary()) -->Line_29 $$ return status[ CD ]
Line_10 $$ if (myProject != null && myProject.isDisposed()) -->Line_11 $$ status.reasonWhyDisabled = "Project is disposed"[ CD ]
Line_36 $$ Set<Language> languages = provider.getLanguages()-->Line_38 $$ boolean shouldHighlight = languages.isEmpty()[ FD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_32 $$ status.errorAnalyzingFinished = true[ CD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_25 $$ final FileType fileType = myFile.getFileType()[ CD ]
Line_39 $$ for (Language language : languages) -->Line_40 $$ PsiFile root = provider.getPsi(language)[ FD ]
Line_41 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)-->Line_42 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING[ FD ]
Line_35 $$ FileViewProvider provider = myFile.getViewProvider()-->Line_40 $$ PsiFile root = provider.getPsi(language)[ FD ]
Line_15 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_33 $$ return status[ CD ]
Line_44 $$ if (!shouldHighlight) -->Line_47 $$ return status[ CD ]
Line_37 $$ HighlightingSettingsPerFile levelSettings = HighlightingSettingsPerFile.getInstance(myProject)-->Line_41 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)[ FD ]
Line_63 $$ ProgressableTextEditorHighlightingPass pass = (ProgressableTextEditorHighlightingPass) tepass-->Line_66 $$ status.passStati.add(pass)[ FD ]
Line_49 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_50 $$ status.reasonWhySuspended = StringUtil.defaultIfEmpty(HeavyProcessLatch.INSTANCE.getRunningOperationName(), "Heavy operation is running")[ CD ]
Line_4 $$ DaemonCodeAnalyzerStatus status = new DaemonCodeAnalyzerStatus()-->Line_55 $$ fillDaemonCodeAnalyzerErrorsStatus(status, severityRegistrar)[ FD ]
Line_20 $$ if (myFile instanceof PsiCompiledElement) -->Line_21 $$ status.reasonWhyDisabled = "File is decompiled"[ CD ]
Line_26 $$ if (fileType.isBinary()) -->Line_28 $$ status.errorAnalyzingFinished = true[ CD ]
Line_16 $$ if (!myFile.isPhysical()) -->Line_19 $$ return status[ CD ]
Line_40 $$ PsiFile root = provider.getPsi(language)-->Line_41 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)[ FD ]
Line_5 $$ if (myFile == null) -->Line_8 $$ return status[ CD ]
Line_25 $$ final FileType fileType = myFile.getFileType()-->Line_26 $$ if (fileType.isBinary()) [ FD ]
Line_38 $$ boolean shouldHighlight = languages.isEmpty()-->Line_42 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING[ FD ]
Line_16 $$ if (!myFile.isPhysical()) -->Line_20 $$ if (myFile instanceof PsiCompiledElement) [ CD ]
