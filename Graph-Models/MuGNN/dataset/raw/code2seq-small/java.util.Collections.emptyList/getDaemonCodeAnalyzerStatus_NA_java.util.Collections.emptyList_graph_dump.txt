Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_62 $$ if (pass.getProgress() < 0)[ CD ]
Line_34 $$ FileViewProvider provider = myFile.getViewProvider()-->Line_35 $$ Set<Language> languages = provider.getLanguages()[ FD ]
Line_61 $$ ProgressableTextEditorHighlightingPass pass = (ProgressableTextEditorHighlightingPass) tepass-->Line_62 $$ if (pass.getProgress() < 0)[ FD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_56 $$ status.passStati = passes.isEmpty() ? Collections.<ProgressableTextEditorHighlightingPass>emptyList() : new ArrayList<ProgressableTextEditorHighlightingPass>(passes.size())[ CD ]
Line_43 $$ if (!shouldHighlight) -->Line_45 $$ status.errorAnalyzingFinished = true[ CD ]
Line_37 $$ boolean shouldHighlight = languages.isEmpty()-->Line_41 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING[ FD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_30 $$ status.reasonWhyDisabled = "Highlighting is disabled for this file"[ CD ]
Line_19 $$ if (myFile instanceof PsiCompiledElement) -->Line_20 $$ status.reasonWhyDisabled = "File is decompiled"[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_34 $$ FileViewProvider provider = myFile.getViewProvider()[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_54 $$ fillDaemonCodeAnalyzerErrorsStatus(status, severityRegistrar)[ FD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_15 $$ if (!myFile.isPhysical()) [ CD ]
Line_15 $$ if (!myFile.isPhysical()) -->Line_17 $$ status.errorAnalyzingFinished = true[ CD ]
Line_38 $$ for (Language language : languages) -->Line_39 $$ PsiFile root = provider.getPsi(language)[ FD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_43 $$ if (!shouldHighlight) [ CD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_25 $$ if (fileType.isBinary()) [ CD ]
Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_59 $$ if (!(tepass instanceof ProgressableTextEditorHighlightingPass))[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_3 $$ DaemonCodeAnalyzerStatus status = new DaemonCodeAnalyzerStatus()[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_55 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)[ CD ]
Line_55 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)-->Line_57 $$ for (int i = 0; i < passes.size(); i++) [ FD ]
Line_48 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_51 $$ return status[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_4 $$ if (myFile == null) [ CD ]
Line_15 $$ if (!myFile.isPhysical()) -->Line_18 $$ return status[ CD ]
Line_9 $$ if (myProject != null && myProject.isDisposed()) -->Line_10 $$ status.reasonWhyDisabled = "Project is disposed"[ CD ]
Line_34 $$ FileViewProvider provider = myFile.getViewProvider()-->Line_39 $$ PsiFile root = provider.getPsi(language)[ FD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_9 $$ if (myProject != null && myProject.isDisposed()) [ CD ]
Line_61 $$ ProgressableTextEditorHighlightingPass pass = (ProgressableTextEditorHighlightingPass) tepass-->Line_64 $$ status.passStati.add(pass)[ FD ]
Line_25 $$ if (fileType.isBinary()) -->Line_26 $$ status.reasonWhyDisabled = "File is binary"[ CD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_32 $$ return status[ CD ]
Line_41 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING-->Line_43 $$ if (!shouldHighlight) [ FD ]
Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_58 $$ TextEditorHighlightingPass tepass = passes.get(i)[ CD ]
Line_4 $$ if (myFile == null) -->Line_7 $$ return status[ CD ]
Line_25 $$ if (fileType.isBinary()) -->Line_28 $$ return status[ CD ]
Line_3 $$ DaemonCodeAnalyzerStatus status = new DaemonCodeAnalyzerStatus()-->Line_54 $$ fillDaemonCodeAnalyzerErrorsStatus(status, severityRegistrar)[ FD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_24 $$ final FileType fileType = myFile.getFileType()[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_54 $$ fillDaemonCodeAnalyzerErrorsStatus(status, severityRegistrar)[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) [ CD ]
Line_4 $$ if (myFile == null) -->Line_6 $$ status.errorAnalyzingFinished = true[ CD ]
Line_43 $$ if (!shouldHighlight) -->Line_46 $$ return status[ CD ]
Line_39 $$ PsiFile root = provider.getPsi(language)-->Line_40 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)[ FD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_66 $$ status.errorAnalyzingFinished = myDaemonCodeAnalyzer.isAllAnalysisFinished(myFile)[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_37 $$ boolean shouldHighlight = languages.isEmpty()[ CD ]
Line_9 $$ if (myProject != null && myProject.isDisposed()) -->Line_12 $$ return status[ CD ]
Line_15 $$ if (!myFile.isPhysical()) -->Line_19 $$ if (myFile instanceof PsiCompiledElement) [ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_57 $$ for (int i = 0; i < passes.size(); i++) [ CD ]
Line_36 $$ HighlightingSettingsPerFile levelSettings = HighlightingSettingsPerFile.getInstance(myProject)-->Line_40 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)[ FD ]
Line_40 $$ FileHighlightingSetting level = levelSettings.getHighlightingSettingForRoot(root)-->Line_41 $$ shouldHighlight |= level != FileHighlightingSetting.SKIP_HIGHLIGHTING[ FD ]
Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_61 $$ ProgressableTextEditorHighlightingPass pass = (ProgressableTextEditorHighlightingPass) tepass[ CD ]
Line_24 $$ final FileType fileType = myFile.getFileType()-->Line_25 $$ if (fileType.isBinary()) [ FD ]
Line_25 $$ if (fileType.isBinary()) -->Line_27 $$ status.errorAnalyzingFinished = true[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_36 $$ HighlightingSettingsPerFile levelSettings = HighlightingSettingsPerFile.getInstance(myProject)[ CD ]
Line_55 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)-->Line_56 $$ status.passStati = passes.isEmpty() ? Collections.<ProgressableTextEditorHighlightingPass>emptyList() : new ArrayList<ProgressableTextEditorHighlightingPass>(passes.size())[ FD ]
Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_58 $$ TextEditorHighlightingPass tepass = passes.get(i)[ FD ]
Line_43 $$ if (!shouldHighlight) -->Line_44 $$ status.reasonWhyDisabled = "Highlighting level is None"[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_48 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) [ CD ]
Line_37 $$ boolean shouldHighlight = languages.isEmpty()-->Line_43 $$ if (!shouldHighlight) [ FD ]
Line_48 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_50 $$ status.errorAnalyzingFinished = true[ CD ]
Line_14 $$ if (!myDaemonCodeAnalyzer.isHighlightingAvailable(myFile)) -->Line_31 $$ status.errorAnalyzingFinished = true[ CD ]
Line_15 $$ if (!myFile.isPhysical()) -->Line_16 $$ status.reasonWhyDisabled = "File is generated"[ CD ]
Line_9 $$ if (myProject != null && myProject.isDisposed()) -->Line_11 $$ status.errorAnalyzingFinished = true[ CD ]
Line_4 $$ if (myFile == null) -->Line_5 $$ status.reasonWhyDisabled = "No file"[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_35 $$ Set<Language> languages = provider.getLanguages()[ CD ]
Line_48 $$ if (HeavyProcessLatch.INSTANCE.isRunning()) -->Line_49 $$ status.reasonWhySuspended = StringUtil.defaultIfEmpty(HeavyProcessLatch.INSTANCE.getRunningOperationName(), "Heavy operation is running")[ CD ]
Line_19 $$ if (myFile instanceof PsiCompiledElement) -->Line_21 $$ status.errorAnalyzingFinished = true[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_67 $$ status.reasonWhySuspended = myDaemonCodeAnalyzer.isUpdateByTimerEnabled() ? null : "Highlighting is paused temporarily"[ CD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_53 $$ status.errorCount = errorCount.clone()[ CD ]
Line_57 $$ for (int i = 0; i < passes.size(); i++) -->Line_64 $$ status.passStati.add(pass)[ CD ]
Line_35 $$ Set<Language> languages = provider.getLanguages()-->Line_37 $$ boolean shouldHighlight = languages.isEmpty()[ FD ]
Line_19 $$ if (myFile instanceof PsiCompiledElement) -->Line_22 $$ return status[ CD ]
Line_55 $$ List<TextEditorHighlightingPass> passes = myDaemonCodeAnalyzer.getPassesToShowProgressFor(myDocument)-->Line_58 $$ TextEditorHighlightingPass tepass = passes.get(i)[ FD ]
Line_2 $$ protected DaemonCodeAnalyzerStatus getDaemonCodeAnalyzerStatus(@NotNull SeverityRegistrar severityRegistrar) -->Line_68 $$ return status[ CD ]
