Line_20 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_22 $$ final TextRange range = host.getTextRange()[ CD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_37 $$ ((PsiModificationTrackerImpl) PsiManager.getInstance(project).getModificationTracker()).incCounter()[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_10 $$ Language language = injectable.toLanguage()[ FD ]
Line_12 $$ if (support.isApplicableTo(host) && support.addInjectionInPlace(language, host)) -->Line_13 $$ return[ CD ]
Line_6 $$ if (defaultFunctionalityWorked(host, injectable.getId()))-->Line_7 $$ return[ CD ]
Line_34 $$ if (injectable.getLanguage() != null) -->Line_37 $$ ((PsiModificationTrackerImpl) PsiManager.getInstance(project).getModificationTracker()).incCounter()[ CD ]
Line_34 $$ if (injectable.getLanguage() != null) -->Line_38 $$ DaemonCodeAnalyzer.getInstance(project).restart()[ CD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_30 $$ HintManager.getInstance().showInformationHint(editor, text)[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_35 $$ FileContentUtil.reparseFiles(project, Collections.<VirtualFile>emptyList(), true)[ FD ]
Line_10 $$ Language language = injectable.toLanguage()-->Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) [ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)[ FD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) [ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_21 $$ final SmartPsiElementPointer<PsiLanguageInjectionHost> pointer = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host)[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_38 $$ DaemonCodeAnalyzer.getInstance(project).restart()[ FD ]
Line_21 $$ final SmartPsiElementPointer<PsiLanguageInjectionHost> pointer = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host)-->Line_25 $$ return data.process(pointer.getElement())[ FD ]
Line_10 $$ Language language = injectable.toLanguage()-->Line_18 $$ String text = StringUtil.escapeXml(language.getDisplayName()) + " was temporarily injected."[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)[ CD ]
Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) -->Line_17 $$ final Processor<PsiLanguageInjectionHost> data = host.getUserData(FIX_KEY)[ CD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_17 $$ final Processor<PsiLanguageInjectionHost> data = host.getUserData(FIX_KEY)[ FD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_21 $$ final SmartPsiElementPointer<PsiLanguageInjectionHost> pointer = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host)[ FD ]
Line_20 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, text + "<br>Do you want to insert annotation? " + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SHOW_INTENTION_ACTIONS)), range.getStartOffset(), range.getEndOffset(), new QuestionAction() [ CD ]
Line_22 $$ final TextRange range = host.getTextRange()-->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, text + "<br>Do you want to insert annotation? " + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SHOW_INTENTION_ACTIONS)), range.getStartOffset(), range.getEndOffset(), new QuestionAction() [ FD ]
Line_34 $$ if (injectable.getLanguage() != null) -->Line_35 $$ FileContentUtil.reparseFiles(project, Collections.<VirtualFile>emptyList(), true)[ CD ]
Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) -->Line_19 $$ if (data != null) [ CD ]
Line_18 $$ String text = StringUtil.escapeXml(language.getDisplayName()) + " was temporarily injected."-->Line_30 $$ HintManager.getInstance().showInformationHint(editor, text)[ FD ]
Line_23 $$ HintManager.getInstance().showQuestionHint(editor, text + "<br>Do you want to insert annotation? " + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SHOW_INTENTION_ACTIONS)), range.getStartOffset(), range.getEndOffset(), new QuestionAction() -->Line_25 $$ return data.process(pointer.getElement())[ CD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_22 $$ final TextRange range = host.getTextRange()[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_6 $$ if (defaultFunctionalityWorked(host, injectable.getId()))[ CD ]
Line_19 $$ if (data != null) -->Line_30 $$ HintManager.getInstance().showInformationHint(editor, text)[ CD ]
Line_20 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_21 $$ final SmartPsiElementPointer<PsiLanguageInjectionHost> pointer = SmartPointerManager.getInstance(project).createSmartPsiElementPointer(host)[ CD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_6 $$ if (defaultFunctionalityWorked(host, injectable.getId()))[ FD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_6 $$ if (defaultFunctionalityWorked(host, injectable.getId()))[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) [ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_23 $$ HintManager.getInstance().showQuestionHint(editor, text + "<br>Do you want to insert annotation? " + KeymapUtil.getFirstKeyboardShortcutText(ActionManager.getInstance().getAction(IdeActions.ACTION_SHOW_INTENTION_ACTIONS)), range.getStartOffset(), range.getEndOffset(), new QuestionAction() [ FD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_9 $$ host.putUserData(FIX_KEY, null)[ FD ]
Line_16 $$ if (TemporaryPlacesRegistry.getInstance(project).getLanguageInjectionSupport().addInjectionInPlace(language, host)) -->Line_18 $$ String text = StringUtil.escapeXml(language.getDisplayName()) + " was temporarily injected."[ CD ]
Line_19 $$ if (data != null) -->Line_20 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_4 $$ if (host == null)-->Line_5 $$ return[ CD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_12 $$ if (support.isApplicableTo(host) && support.addInjectionInPlace(language, host)) [ FD ]
Line_17 $$ final Processor<PsiLanguageInjectionHost> data = host.getUserData(FIX_KEY)-->Line_25 $$ return data.process(pointer.getElement())[ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_34 $$ if (injectable.getLanguage() != null) [ FD ]
Line_11 $$ for (LanguageInjectionSupport support : InjectorUtils.getActiveInjectionSupports()) -->Line_12 $$ if (support.isApplicableTo(host) && support.addInjectionInPlace(language, host)) [ FD ]
Line_2 $$ public static void invokeImpl(Project project, Editor editor, final PsiFile file, Injectable injectable) -->Line_4 $$ if (host == null)[ CD ]
Line_10 $$ Language language = injectable.toLanguage()-->Line_12 $$ if (support.isApplicableTo(host) && support.addInjectionInPlace(language, host)) [ FD ]
Line_17 $$ final Processor<PsiLanguageInjectionHost> data = host.getUserData(FIX_KEY)-->Line_19 $$ if (data != null) [ FD ]
Line_3 $$ final PsiLanguageInjectionHost host = findInjectionHost(editor, file)-->Line_4 $$ if (host == null)[ FD ]
