Line_19 $$ if (rangeIter.hasNext()) -->Line_21 $$ idx = current.left[ CD ]
Line_9 $$ return new Iterator<DecoratedKey>() -->Line_30 $$ byte[] bytes = indexSummary.getKey(idx++)[ CD ]
Line_21 $$ idx = current.left-->Line_30 $$ byte[] bytes = indexSummary.getKey(idx++)[ FD ]
Line_3 $$ final List<Pair<Integer, Integer>> indexRanges = getSampleIndexesForRanges(indexSummary, Collections.singletonList(range))-->Line_4 $$ if (indexRanges.isEmpty())[ FD ]
Line_3 $$ final List<Pair<Integer, Integer>> indexRanges = getSampleIndexesForRanges(indexSummary, Collections.singletonList(range))-->Line_9 $$ return new Iterator<DecoratedKey>() [ FD ]
Line_9 $$ return new Iterator<DecoratedKey>() -->Line_18 $$ if (current == null || idx > current.right) [ CD ]
Line_9 $$ return new Iterator<DecoratedKey>() -->Line_31 $$ return decorateKey(ByteBuffer.wrap(bytes))[ CD ]
Line_2 $$ public Iterable<DecoratedKey> getKeySamples(final Range<Token> range) -->Line_6 $$ return new Iterable<DecoratedKey>() [ CD ]
Line_9 $$ return new Iterator<DecoratedKey>() -->Line_26 $$ return true[ CD ]
Line_2 $$ public Iterable<DecoratedKey> getKeySamples(final Range<Token> range) -->Line_3 $$ final List<Pair<Integer, Integer>> indexRanges = getSampleIndexesForRanges(indexSummary, Collections.singletonList(range))[ CD ]
Line_18 $$ if (current == null || idx > current.right) -->Line_19 $$ if (rangeIter.hasNext()) [ CD ]
Line_6 $$ return new Iterable<DecoratedKey>() -->Line_9 $$ return new Iterator<DecoratedKey>() [ CD ]
Line_19 $$ if (rangeIter.hasNext()) -->Line_22 $$ return true[ CD ]
Line_30 $$ byte[] bytes = indexSummary.getKey(idx++)-->Line_31 $$ return decorateKey(ByteBuffer.wrap(bytes))[ FD ]
Line_2 $$ public Iterable<DecoratedKey> getKeySamples(final Range<Token> range) -->Line_4 $$ if (indexRanges.isEmpty())[ CD ]
Line_18 $$ if (current == null || idx > current.right) -->Line_24 $$ return false[ CD ]
Line_19 $$ if (rangeIter.hasNext()) -->Line_20 $$ current = rangeIter.next()[ CD ]
Line_4 $$ if (indexRanges.isEmpty())-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Iterable<DecoratedKey> getKeySamples(final Range<Token> range) -->Line_3 $$ final List<Pair<Integer, Integer>> indexRanges = getSampleIndexesForRanges(indexSummary, Collections.singletonList(range))[ FD ]
