Line_7 $$ if (!(valueObject instanceof PsiClass))-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_9 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_12 $$ final PsiReference[] references = ourProvider.getReferencesByElement(valueElement, new ProcessingContext())[ FD ]
Line_20 $$ if (!problemDescriptors.isEmpty()) -->Line_21 $$ return problemDescriptors[ CD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_27 $$ return Collections.emptyList()[ CD ]
Line_14 $$ if (reference instanceof JavaClassReference) -->Line_16 $$ final String[] value = psiReferenceProvider instanceof JavaClassReferenceProvider ? JavaClassReferenceProvider.EXTEND_CLASS_NAMES.getValue(((JavaClassReferenceProvider) psiReferenceProvider).getOptions()) : null[ CD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_9 $$ final XmlElement valueElement = DomUtil.getValueElement(element)[ FD ]
Line_18 $$ for (String className : value) -->Line_19 $$ final List<DomElementProblemDescriptor> problemDescriptors = checkExtendClass(element, ((PsiClass) valueObject), className, false, false, true, false, true, true, holder)[ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_6 $$ final Object valueObject = element.getValue()[ CD ]
Line_9 $$ final XmlElement valueElement = DomUtil.getValueElement(element)-->Line_10 $$ if (valueElement == null)[ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_3 $$ if (!isPsiClassType(element)) [ CD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_6 $$ final Object valueObject = element.getValue()[ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_3 $$ if (!isPsiClassType(element)) [ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_9 $$ final XmlElement valueElement = DomUtil.getValueElement(element)[ CD ]
Line_10 $$ if (valueElement == null)-->Line_11 $$ return Collections.emptyList()[ CD ]
Line_19 $$ final List<DomElementProblemDescriptor> problemDescriptors = checkExtendClass(element, ((PsiClass) valueObject), className, false, false, true, false, true, true, holder)-->Line_20 $$ if (!problemDescriptors.isEmpty()) [ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_10 $$ if (valueElement == null)[ CD ]
Line_14 $$ if (reference instanceof JavaClassReference) -->Line_17 $$ if (value != null && value.length != 0) [ CD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_7 $$ if (!(valueObject instanceof PsiClass))[ CD ]
Line_3 $$ if (!isPsiClassType(element)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_14 $$ if (reference instanceof JavaClassReference) -->Line_15 $$ final PsiReferenceProvider psiReferenceProvider = ((JavaClassReference) reference).getProvider()[ CD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_19 $$ final List<DomElementProblemDescriptor> problemDescriptors = checkExtendClass(element, ((PsiClass) valueObject), className, false, false, true, false, true, true, holder)[ FD ]
Line_2 $$ public static List<DomElementProblemDescriptor> checkExtendsClassInReferences(final GenericDomValue element, final DomElementAnnotationHolder holder) -->Line_12 $$ final PsiReference[] references = ourProvider.getReferencesByElement(valueElement, new ProcessingContext())[ CD ]
Line_13 $$ for (PsiReference reference : references) -->Line_14 $$ if (reference instanceof JavaClassReference) [ FD ]
