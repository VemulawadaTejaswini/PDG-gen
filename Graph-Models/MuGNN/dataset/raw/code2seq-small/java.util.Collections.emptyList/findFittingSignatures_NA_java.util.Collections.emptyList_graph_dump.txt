Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_6 $$ List<PsiType[]> expectedSignatures = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_7 $$ GroovyResolveResult[] variants = call.getCallVariants(closure)[ FD ]
Line_3 $$ GrCall call = findCall(closure)-->Line_9 $$ expectedSignatures.addAll(inferExpectedSignatures(variant, call, closure))[ FD ]
Line_3 $$ GrCall call = findCall(closure)-->Line_4 $$ if (call == null)[ FD ]
Line_8 $$ for (GroovyResolveResult variant : variants) -->Line_9 $$ expectedSignatures.addAll(inferExpectedSignatures(variant, call, closure))[ FD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_3 $$ GrCall call = findCall(closure)[ CD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_3 $$ GrCall call = findCall(closure)[ FD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_7 $$ GroovyResolveResult[] variants = call.getCallVariants(closure)[ CD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_11 $$ final GrParameter[] parameters = closure.getAllParameters()[ CD ]
Line_4 $$ if (call == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_11 $$ final GrParameter[] parameters = closure.getAllParameters()[ FD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_12 $$ return ContainerUtil.findAll(expectedSignatures, new Condition<PsiType[]>() [ CD ]
Line_6 $$ List<PsiType[]> expectedSignatures = ContainerUtil.newArrayList()-->Line_12 $$ return ContainerUtil.findAll(expectedSignatures, new Condition<PsiType[]>() [ FD ]
Line_12 $$ return ContainerUtil.findAll(expectedSignatures, new Condition<PsiType[]>() -->Line_14 $$ return types.length == parameters.length[ CD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_9 $$ expectedSignatures.addAll(inferExpectedSignatures(variant, call, closure))[ FD ]
Line_3 $$ GrCall call = findCall(closure)-->Line_7 $$ GroovyResolveResult[] variants = call.getCallVariants(closure)[ FD ]
Line_6 $$ List<PsiType[]> expectedSignatures = ContainerUtil.newArrayList()-->Line_9 $$ expectedSignatures.addAll(inferExpectedSignatures(variant, call, closure))[ FD ]
Line_2 $$ public static List<PsiType[]> findFittingSignatures(GrClosableBlock closure) -->Line_4 $$ if (call == null)[ CD ]
