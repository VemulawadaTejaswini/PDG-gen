Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_9 $$ CharSequence subSequence1 = text1.subSequence(fragment.getStartOffset1(), fragment.getEndOffset1())[ FD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_31 $$ int currentStartLine2 = fragment.getStartLine2()[ FD ]
Line_10 $$ CharSequence subSequence2 = text2.subSequence(fragment.getStartOffset2(), fragment.getEndOffset2())-->Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)[ FD ]
Line_30 $$ int currentStartLine1 = fragment.getStartLine1()-->Line_39 $$ currentStartLine1 = currentEndLine1[ FD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_11 $$ if (fragment.getStartLine1() == fragment.getEndLine1() || fragment.getStartLine2() == fragment.getEndLine2()) [ FD ]
Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)-->Line_27 $$ assert lineBlocks.size() != 0[ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_38 $$ fineFragments.add(new LineFragmentImpl(currentStartLine1, currentEndLine1, currentStartLine2, currentEndLine2, offsets.start1 + startOffset1, offsets.end1 + startOffset1, offsets.start2 + startOffset2, offsets.end2 + startOffset2, block.fragments))[ CD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_33 $$ ByWord.LineBlock block = lineBlocks.get(i)[ FD ]
Line_31 $$ int currentStartLine2 = fragment.getStartLine2()-->Line_40 $$ currentStartLine2 = currentEndLine2[ FD ]
Line_9 $$ CharSequence subSequence1 = text1.subSequence(fragment.getStartOffset1(), fragment.getEndOffset1())-->Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)[ FD ]
Line_7 $$ int tooBigChunksCount = 0-->Line_20 $$ if (tooBigChunksCount >= FilesTooBigForDiffException.MAX_BAD_LINES) [ FD ]
Line_6 $$ List<LineFragment> fineFragments = new ArrayList<LineFragment>(lineFragments.size())-->Line_16 $$ fineFragments.add(new LineFragmentImpl(fragment, null))[ FD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_30 $$ int currentStartLine1 = fragment.getStartLine1()[ FD ]
Line_6 $$ List<LineFragment> fineFragments = new ArrayList<LineFragment>(lineFragments.size())-->Line_43 $$ fineFragments.add(new LineFragmentImpl(fragment, null))[ FD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_29 $$ int startOffset2 = fragment.getStartOffset2()[ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_34 $$ Range offsets = block.offsets[ CD ]
Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)-->Line_33 $$ ByWord.LineBlock block = lineBlocks.get(i)[ FD ]
Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)-->Line_37 $$ int currentEndLine2 = i != lineBlocks.size() - 1 ? currentStartLine2 + block.newlines2 : fragment.getEndLine2()[ FD ]
Line_37 $$ int currentEndLine2 = i != lineBlocks.size() - 1 ? currentStartLine2 + block.newlines2 : fragment.getEndLine2()-->Line_40 $$ currentStartLine2 = currentEndLine2[ FD ]
Line_6 $$ List<LineFragment> fineFragments = new ArrayList<LineFragment>(lineFragments.size())-->Line_14 $$ fineFragments.add(new LineFragmentImpl(fragment, Collections.<DiffFragment>emptyList()))[ FD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_28 $$ int startOffset1 = fragment.getStartOffset1()[ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_39 $$ currentStartLine1 = currentEndLine1[ CD ]
Line_6 $$ List<LineFragment> fineFragments = new ArrayList<LineFragment>(lineFragments.size())-->Line_38 $$ fineFragments.add(new LineFragmentImpl(currentStartLine1, currentEndLine1, currentStartLine2, currentEndLine2, offsets.start1 + startOffset1, offsets.end1 + startOffset1, offsets.start2 + startOffset2, offsets.end2 + startOffset2, block.fragments))[ FD ]
Line_5 $$ List<LineFragment> lineFragments = compareLines(text1, text2, policy, indicator)-->Line_6 $$ List<LineFragment> fineFragments = new ArrayList<LineFragment>(lineFragments.size())[ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_33 $$ ByWord.LineBlock block = lineBlocks.get(i)[ CD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_37 $$ int currentEndLine2 = i != lineBlocks.size() - 1 ? currentStartLine2 + block.newlines2 : fragment.getEndLine2()[ FD ]
Line_7 $$ int tooBigChunksCount = 0-->Line_44 $$ tooBigChunksCount++[ FD ]
Line_26 $$ List<ByWord.LineBlock> lineBlocks = ByWord.compareAndSplit(subSequence1, subSequence2, policy, indicator)-->Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) [ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_37 $$ int currentEndLine2 = i != lineBlocks.size() - 1 ? currentStartLine2 + block.newlines2 : fragment.getEndLine2()[ CD ]
Line_8 $$ for (LineFragment fragment : lineFragments) -->Line_10 $$ CharSequence subSequence2 = text2.subSequence(fragment.getStartOffset2(), fragment.getEndOffset2())[ FD ]
Line_32 $$ for (int i = 0; i < lineBlocks.size(); i++) -->Line_40 $$ currentStartLine2 = currentEndLine2[ CD ]
