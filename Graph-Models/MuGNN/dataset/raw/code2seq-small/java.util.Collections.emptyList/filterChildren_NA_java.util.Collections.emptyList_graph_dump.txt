Line_2 $$ private static List<? extends SMTestProxy> filterChildren(@Nullable Filter<? super SMTestProxy> filter, List<? extends SMTestProxy> allChildren) -->Line_3 $$ if (filter == Filter.NO_FILTER || filter == null) [ CD ]
Line_2 $$ private static List<? extends SMTestProxy> filterChildren(@Nullable Filter<? super SMTestProxy> filter, List<? extends SMTestProxy> allChildren) -->Line_8 $$ if (filter.shouldAccept(child)) [ FD ]
Line_6 $$ final List<SMTestProxy> selectedChildren = new ArrayList<SMTestProxy>()-->Line_12 $$ if ((selectedChildren.isEmpty())) [ FD ]
Line_7 $$ for (SMTestProxy child : allChildren) -->Line_8 $$ if (filter.shouldAccept(child)) [ FD ]
Line_2 $$ private static List<? extends SMTestProxy> filterChildren(@Nullable Filter<? super SMTestProxy> filter, List<? extends SMTestProxy> allChildren) -->Line_15 $$ return selectedChildren[ CD ]
Line_8 $$ if (filter.shouldAccept(child)) -->Line_9 $$ selectedChildren.add(child)[ CD ]
Line_7 $$ for (SMTestProxy child : allChildren) -->Line_9 $$ selectedChildren.add(child)[ FD ]
Line_2 $$ private static List<? extends SMTestProxy> filterChildren(@Nullable Filter<? super SMTestProxy> filter, List<? extends SMTestProxy> allChildren) -->Line_6 $$ final List<SMTestProxy> selectedChildren = new ArrayList<SMTestProxy>()[ CD ]
Line_2 $$ private static List<? extends SMTestProxy> filterChildren(@Nullable Filter<? super SMTestProxy> filter, List<? extends SMTestProxy> allChildren) -->Line_12 $$ if ((selectedChildren.isEmpty())) [ CD ]
Line_6 $$ final List<SMTestProxy> selectedChildren = new ArrayList<SMTestProxy>()-->Line_9 $$ selectedChildren.add(child)[ FD ]
Line_12 $$ if ((selectedChildren.isEmpty())) -->Line_13 $$ return Collections.<SMTestProxy>emptyList()[ CD ]
Line_3 $$ if (filter == Filter.NO_FILTER || filter == null) -->Line_4 $$ return allChildren[ CD ]
