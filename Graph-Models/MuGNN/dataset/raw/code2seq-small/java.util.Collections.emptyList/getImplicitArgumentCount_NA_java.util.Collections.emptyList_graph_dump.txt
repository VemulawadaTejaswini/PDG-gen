Line_12 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) -->Line_13 $$ return 1[ CD ]
Line_19 $$ final boolean isConstructorCall = isConstructorName(function.getName()) && (!callReference.isQualified() || !isConstructorName(callReference.getName()))-->Line_21 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_11 $$ final PyDecorator decorator = PsiTreeUtil.getParentOfType(callReference, PyDecorator.class)-->Line_12 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) [ FD ]
Line_18 $$ boolean isByInstance = isQualifiedByInstance(function, qualifiers != null ? qualifiers : Collections.<PyExpression>emptyList(), resolveContext.getTypeEvalContext())-->Line_21 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_16 $$ final List<PyExpression> qualifiers = followed.getQualifiers()-->Line_17 $$ final PyExpression firstQualifier = qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null[ FD ]
Line_15 $$ QualifiedResolveResult followed = callReference.followAssignmentsChain(resolveContext)-->Line_16 $$ final List<PyExpression> qualifiers = followed.getQualifiers()[ FD ]
Line_20 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())-->Line_21 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_17 $$ final PyExpression firstQualifier = qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null-->Line_20 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())[ FD ]
