Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_10 $$ boolean isByInstance = isQualifiedByInstance(function, qualifiers != null ? qualifiers : Collections.<PyExpression>emptyList(), resolveContext.getTypeEvalContext())[ CD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_8 $$ final List<PyExpression> qualifiers = followed.getQualifiers()[ CD ]
Line_9 $$ final PyExpression firstQualifier = qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null-->Line_12 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())[ FD ]
Line_12 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())-->Line_13 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_11 $$ final boolean isConstructorCall = isConstructorName(function.getName()) && (!callReference.isQualified() || !isConstructorName(callReference.getName()))[ CD ]
Line_7 $$ QualifiedResolveResult followed = callReference.followAssignmentsChain(resolveContext)-->Line_8 $$ final List<PyExpression> qualifiers = followed.getQualifiers()[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_3 $$ final PyDecorator decorator = PsiTreeUtil.getParentOfType(callReference, PyDecorator.class)[ CD ]
Line_3 $$ final PyDecorator decorator = PsiTreeUtil.getParentOfType(callReference, PyDecorator.class)-->Line_4 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) [ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_12 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())[ CD ]
Line_8 $$ final List<PyExpression> qualifiers = followed.getQualifiers()-->Line_9 $$ final PyExpression firstQualifier = qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_4 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) [ CD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_10 $$ boolean isByInstance = isQualifiedByInstance(function, qualifiers != null ? qualifiers : Collections.<PyExpression>emptyList(), resolveContext.getTypeEvalContext())[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_7 $$ QualifiedResolveResult followed = callReference.followAssignmentsChain(resolveContext)[ FD ]
Line_4 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) -->Line_5 $$ return 1[ CD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_12 $$ boolean isByClass = firstQualifier != null && isQualifiedByClass(function, firstQualifier, resolveContext.getTypeEvalContext())[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_4 $$ if (decorator != null && PsiTreeUtil.isAncestor(decorator.getCallee(), callReference, false)) [ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_3 $$ final PyDecorator decorator = PsiTreeUtil.getParentOfType(callReference, PyDecorator.class)[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_13 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_11 $$ final boolean isConstructorCall = isConstructorName(function.getName()) && (!callReference.isQualified() || !isConstructorName(callReference.getName()))-->Line_13 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_7 $$ QualifiedResolveResult followed = callReference.followAssignmentsChain(resolveContext)[ CD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_9 $$ final PyExpression firstQualifier = qualifiers != null && !qualifiers.isEmpty() ? qualifiers.get(0) : null[ CD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_11 $$ final boolean isConstructorCall = isConstructorName(function.getName()) && (!callReference.isQualified() || !isConstructorName(callReference.getName()))[ FD ]
Line_10 $$ boolean isByInstance = isQualifiedByInstance(function, qualifiers != null ? qualifiers : Collections.<PyExpression>emptyList(), resolveContext.getTypeEvalContext())-->Line_13 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ FD ]
Line_2 $$ public static int getImplicitArgumentCount(@NotNull final PyReferenceExpression callReference, @NotNull PyFunction function, @NotNull PyResolveContext resolveContext) -->Line_13 $$ return getImplicitArgumentCount(function, function.getModifier(), isConstructorCall, isByInstance, isByClass)[ CD ]
