Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_5 $$ if (provider == null)[ CD ]
Line_8 $$ final Set<VirtualFile> roots = new HashSet<VirtualFile>()-->Line_12 $$ roots.add(root)[ FD ]
Line_9 $$ for (VirtualFile file : files) -->Line_10 $$ final VirtualFile root = vcsManager.getVcsRootFor(file)[ FD ]
Line_4 $$ final VcsOutgoingChangesProvider provider = vcs.getOutgoingChangesProvider()-->Line_17 $$ final Pair<VcsRevisionNumber, List<T>> pair = provider.getOutgoingChanges(root, true)[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_7 $$ final VirtualFile[] files = ChangesUtil.getFilesFromChanges(changes)[ FD ]
Line_10 $$ final VirtualFile root = vcsManager.getVcsRootFor(file)-->Line_11 $$ if (root != null) [ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_4 $$ final VcsOutgoingChangesProvider provider = vcs.getOutgoingChangesProvider()[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_3 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(vcs.getProject())[ CD ]
Line_4 $$ final VcsOutgoingChangesProvider provider = vcs.getOutgoingChangesProvider()-->Line_5 $$ if (provider == null)[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_7 $$ final VirtualFile[] files = ChangesUtil.getFilesFromChanges(changes)[ CD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_20 $$ return result[ CD ]
Line_10 $$ final VirtualFile root = vcsManager.getVcsRootFor(file)-->Line_17 $$ final Pair<VcsRevisionNumber, List<T>> pair = provider.getOutgoingChanges(root, true)[ FD ]
Line_15 $$ final Collection<Pair<VcsRevisionNumber, List<T>>> result = new ArrayList<Pair<VcsRevisionNumber, List<T>>>(roots.size())-->Line_18 $$ result.add(pair)[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_8 $$ final Set<VirtualFile> roots = new HashSet<VirtualFile>()[ CD ]
Line_10 $$ final VirtualFile root = vcsManager.getVcsRootFor(file)-->Line_12 $$ roots.add(root)[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_3 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(vcs.getProject())[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_4 $$ final VcsOutgoingChangesProvider provider = vcs.getOutgoingChangesProvider()[ CD ]
Line_3 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(vcs.getProject())-->Line_10 $$ final VirtualFile root = vcsManager.getVcsRootFor(file)[ FD ]
Line_11 $$ if (root != null) -->Line_12 $$ roots.add(root)[ CD ]
Line_17 $$ final Pair<VcsRevisionNumber, List<T>> pair = provider.getOutgoingChanges(root, true)-->Line_18 $$ result.add(pair)[ FD ]
Line_8 $$ final Set<VirtualFile> roots = new HashSet<VirtualFile>()-->Line_15 $$ final Collection<Pair<VcsRevisionNumber, List<T>>> result = new ArrayList<Pair<VcsRevisionNumber, List<T>>>(roots.size())[ FD ]
Line_2 $$ public static <T extends CommittedChangeList> Collection<Pair<VcsRevisionNumber, List<T>>> getVcsRootsForChanges(final AbstractVcs vcs, final Collection<Change> changes) throws VcsException -->Line_15 $$ final Collection<Pair<VcsRevisionNumber, List<T>>> result = new ArrayList<Pair<VcsRevisionNumber, List<T>>>(roots.size())[ CD ]
Line_5 $$ if (provider == null)-->Line_6 $$ return Collections.emptyList()[ CD ]
