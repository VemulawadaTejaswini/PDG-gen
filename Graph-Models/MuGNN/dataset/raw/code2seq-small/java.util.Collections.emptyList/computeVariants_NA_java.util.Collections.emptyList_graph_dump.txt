Line_5 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_9 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())[ FD ]
Line_20 $$ if (document == null) -->Line_21 $$ return Collections.emptyList()[ CD ]
Line_30 $$ int ordinal = 0-->Line_34 $$ res.add(new ExactJavaBreakpointVariant(XSourcePositionImpl.createByElement(firstElem), lambda, ordinal++))[ FD ]
Line_14 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)-->Line_26 $$ if (startMethod instanceof PsiMethod) [ FD ]
Line_23 $$ List<JavaBreakpointVariant> res = new SmartList<JavaBreakpointVariant>()-->Line_34 $$ res.add(new ExactJavaBreakpointVariant(XSourcePositionImpl.createByElement(firstElem), lambda, ordinal++))[ FD ]
Line_5 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_6 $$ if (file == null) [ FD ]
Line_6 $$ if (file == null) -->Line_7 $$ return Collections.emptyList()[ CD ]
Line_9 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())-->Line_10 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)[ FD ]
Line_11 $$ if (lambdas.isEmpty()) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_9 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())-->Line_14 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)[ FD ]
Line_19 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_20 $$ if (document == null) [ FD ]
Line_5 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_19 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ FD ]
Line_10 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)-->Line_11 $$ if (lambdas.isEmpty()) [ FD ]
