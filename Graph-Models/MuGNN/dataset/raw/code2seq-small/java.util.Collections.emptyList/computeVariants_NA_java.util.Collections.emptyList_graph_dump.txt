Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_9 $$ if (lambdas.isEmpty()) [ CD ]
Line_9 $$ if (lambdas.isEmpty()) -->Line_10 $$ return Collections.emptyList()[ CD ]
Line_12 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)-->Line_13 $$ if (lambdas.contains(startMethod) && lambdas.size() == 1) [ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_7 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())[ FD ]
Line_20 $$ List<JavaBreakpointVariant> res = new SmartList<JavaBreakpointVariant>()-->Line_28 $$ res.add(new ExactJavaBreakpointVariant(XSourcePositionImpl.createByElement(firstElem), lambda, ordinal++))[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_7 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())[ CD ]
Line_12 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)-->Line_22 $$ if (startMethod instanceof PsiMethod) [ FD ]
Line_8 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)-->Line_13 $$ if (lambdas.contains(startMethod) && lambdas.size() == 1) [ FD ]
Line_3 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_16 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ FD ]
Line_13 $$ if (lambdas.contains(startMethod) && lambdas.size() == 1) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_25 $$ int ordinal = 0[ CD ]
Line_4 $$ if (file == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_17 $$ if (document == null) [ CD ]
Line_25 $$ int ordinal = 0-->Line_28 $$ res.add(new ExactJavaBreakpointVariant(XSourcePositionImpl.createByElement(firstElem), lambda, ordinal++))[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_27 $$ PsiElement firstElem = DebuggerUtilsEx.getFirstElementOnTheLine(lambda, document, position.getLine())[ FD ]
Line_20 $$ List<JavaBreakpointVariant> res = new SmartList<JavaBreakpointVariant>()-->Line_23 $$ res.add(new ExactJavaBreakpointVariant(position, startMethod, -1))[ FD ]
Line_3 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_4 $$ if (file == null) [ FD ]
Line_16 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_17 $$ if (document == null) [ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_4 $$ if (file == null) [ CD ]
Line_7 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())-->Line_12 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_21 $$ res.add(new JavaBreakpointVariant(position))[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_13 $$ if (lambdas.contains(startMethod) && lambdas.size() == 1) [ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_30 $$ return res[ CD ]
Line_22 $$ if (startMethod instanceof PsiMethod) -->Line_23 $$ res.add(new ExactJavaBreakpointVariant(position, startMethod, -1))[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_3 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())[ CD ]
Line_27 $$ PsiElement firstElem = DebuggerUtilsEx.getFirstElementOnTheLine(lambda, document, position.getLine())-->Line_28 $$ res.add(new ExactJavaBreakpointVariant(XSourcePositionImpl.createByElement(firstElem), lambda, ordinal++))[ FD ]
Line_26 $$ for (PsiLambdaExpression lambda : lambdas) -->Line_27 $$ PsiElement firstElem = DebuggerUtilsEx.getFirstElementOnTheLine(lambda, document, position.getLine())[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_20 $$ List<JavaBreakpointVariant> res = new SmartList<JavaBreakpointVariant>()[ CD ]
Line_17 $$ if (document == null) -->Line_18 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_12 $$ PsiElement startMethod = DebuggerUtilsEx.getContainingMethod(pos)[ CD ]
Line_16 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_27 $$ PsiElement firstElem = DebuggerUtilsEx.getFirstElementOnTheLine(lambda, document, position.getLine())[ FD ]
Line_8 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)-->Line_9 $$ if (lambdas.isEmpty()) [ FD ]
Line_7 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())-->Line_8 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_3 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_22 $$ if (startMethod instanceof PsiMethod) [ CD ]
Line_20 $$ List<JavaBreakpointVariant> res = new SmartList<JavaBreakpointVariant>()-->Line_21 $$ res.add(new JavaBreakpointVariant(position))[ FD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_8 $$ List<PsiLambdaExpression> lambdas = DebuggerUtilsEx.collectLambdas(pos, true)[ CD ]
Line_2 $$ public List<JavaBreakpointVariant> computeVariants(@NotNull Project project, @NotNull XSourcePosition position) -->Line_16 $$ Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ CD ]
Line_3 $$ PsiFile file = PsiManager.getInstance(project).findFile(position.getFile())-->Line_7 $$ SourcePosition pos = SourcePosition.createFromLine(file, position.getLine())[ FD ]
