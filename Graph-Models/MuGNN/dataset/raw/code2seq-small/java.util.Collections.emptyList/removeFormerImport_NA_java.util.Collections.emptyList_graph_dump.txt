Line_3 $$ if (usageFile instanceof PyFile && addImport) -->Line_12 $$ visitor.optimizeImports()[ CD ]
Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() -->Line_8 $$ super.visitPyElement(node)[ FD ]
Line_3 $$ if (usageFile instanceof PyFile && addImport) -->Line_5 $$ final PyUnresolvedReferencesInspection.Visitor visitor = new PyUnresolvedReferencesInspection.Visitor(null, session, Collections.<String>emptyList())[ CD ]
Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() -->Line_9 $$ node.accept(visitor)[ CD ]
Line_2 $$ private static void removeFormerImport(@NotNull final PsiFile usageFile, boolean addImport) -->Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() [ FD ]
Line_3 $$ if (usageFile instanceof PyFile && addImport) -->Line_4 $$ final LocalInspectionToolSession session = new LocalInspectionToolSession(usageFile, 0, usageFile.getTextLength())[ CD ]
Line_2 $$ private static void removeFormerImport(@NotNull final PsiFile usageFile, boolean addImport) -->Line_3 $$ if (usageFile instanceof PyFile && addImport) [ FD ]
Line_2 $$ private static void removeFormerImport(@NotNull final PsiFile usageFile, boolean addImport) -->Line_3 $$ if (usageFile instanceof PyFile && addImport) [ CD ]
Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() -->Line_8 $$ super.visitPyElement(node)[ CD ]
Line_5 $$ final PyUnresolvedReferencesInspection.Visitor visitor = new PyUnresolvedReferencesInspection.Visitor(null, session, Collections.<String>emptyList())-->Line_9 $$ node.accept(visitor)[ FD ]
Line_3 $$ if (usageFile instanceof PyFile && addImport) -->Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() [ CD ]
Line_5 $$ final PyUnresolvedReferencesInspection.Visitor visitor = new PyUnresolvedReferencesInspection.Visitor(null, session, Collections.<String>emptyList())-->Line_12 $$ visitor.optimizeImports()[ FD ]
Line_2 $$ private static void removeFormerImport(@NotNull final PsiFile usageFile, boolean addImport) -->Line_4 $$ final LocalInspectionToolSession session = new LocalInspectionToolSession(usageFile, 0, usageFile.getTextLength())[ FD ]
Line_6 $$ usageFile.accept(new PyRecursiveElementVisitor() -->Line_9 $$ node.accept(visitor)[ FD ]
