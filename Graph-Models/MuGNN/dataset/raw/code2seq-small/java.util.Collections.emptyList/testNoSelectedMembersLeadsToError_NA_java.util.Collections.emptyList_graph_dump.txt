Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_7 $$ sut.launch()[ CD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_8 $$ sut.okClicked()[ CD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_5 $$ final PyExtractSuperclassPresenterImpl sut = configureByClass("Child")[ CD ]
Line_4 $$ final Capture<String> errorMessageCapture = configureViewToCaptureError()-->Line_9 $$ Assert.assertTrue("No error displayed empty list of selected members", errorMessageCapture.hasCaptured())[ FD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_9 $$ Assert.assertTrue("No error displayed empty list of selected members", errorMessageCapture.hasCaptured())[ CD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_6 $$ myMocksControl.replay()[ CD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_3 $$ EasyMock.expect(myView.getSelectedMemberInfos()).andReturn(Collections.<PyMemberInfo<PyElement>>emptyList()).anyTimes()[ CD ]
Line_5 $$ final PyExtractSuperclassPresenterImpl sut = configureByClass("Child")-->Line_7 $$ sut.launch()[ FD ]
Line_2 $$ public void testNoSelectedMembersLeadsToError() -->Line_4 $$ final Capture<String> errorMessageCapture = configureViewToCaptureError()[ CD ]
Line_5 $$ final PyExtractSuperclassPresenterImpl sut = configureByClass("Child")-->Line_8 $$ sut.okClicked()[ FD ]
