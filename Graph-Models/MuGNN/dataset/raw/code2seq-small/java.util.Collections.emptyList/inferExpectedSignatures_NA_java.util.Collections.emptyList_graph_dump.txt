Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_9 $$ Collection<MethodSignature> abstractSignatures = OverrideImplementExploreUtil.getMethodSignaturesToImplement(aClass)[ CD ]
Line_10 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() -->Line_12 $$ return signature.getParameterTypes()[ CD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_6 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())[ CD ]
Line_9 $$ Collection<MethodSignature> abstractSignatures = OverrideImplementExploreUtil.getMethodSignaturesToImplement(aClass)-->Line_10 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() [ FD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_5 $$ String qname = options[0][ CD ]
Line_6 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())-->Line_7 $$ if (aClass == null)[ FD ]
Line_3 $$ if (options.length != 1)-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_3 $$ if (options.length != 1)[ CD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_6 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())[ FD ]
Line_6 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())-->Line_9 $$ Collection<MethodSignature> abstractSignatures = OverrideImplementExploreUtil.getMethodSignaturesToImplement(aClass)[ FD ]
Line_7 $$ if (aClass == null)-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_10 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() [ CD ]
Line_5 $$ String qname = options[0]-->Line_6 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())[ FD ]
Line_10 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() -->Line_12 $$ return signature.getParameterTypes()[ FD ]
Line_2 $$ public List<PsiType[]> inferExpectedSignatures(@NotNull PsiMethod method, @NotNull PsiSubstitutor substitutor, @NotNull String[] options) -->Line_7 $$ if (aClass == null)[ CD ]
