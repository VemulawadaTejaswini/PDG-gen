Line_7 $$ String qname = options[0]-->Line_8 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())[ FD ]
Line_11 $$ Collection<MethodSignature> abstractSignatures = OverrideImplementExploreUtil.getMethodSignaturesToImplement(aClass)-->Line_12 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() [ FD ]
Line_12 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() -->Line_16 $$ return signature.getParameterTypes()[ FD ]
Line_12 $$ return ContainerUtil.map(abstractSignatures, new Function<MethodSignature, PsiType[]>() -->Line_16 $$ return signature.getParameterTypes()[ CD ]
Line_8 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())-->Line_11 $$ Collection<MethodSignature> abstractSignatures = OverrideImplementExploreUtil.getMethodSignaturesToImplement(aClass)[ FD ]
Line_8 $$ PsiClass aClass = JavaPsiFacade.getInstance(method.getProject()).findClass(qname, method.getResolveScope())-->Line_9 $$ if (aClass == null)[ FD ]
Line_5 $$ if (options.length != 1)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_9 $$ if (aClass == null)-->Line_10 $$ return Collections.emptyList()[ CD ]
