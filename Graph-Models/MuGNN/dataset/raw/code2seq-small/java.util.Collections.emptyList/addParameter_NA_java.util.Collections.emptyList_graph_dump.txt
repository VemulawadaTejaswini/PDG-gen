Line_17 $$ if (parameterName == null) -->Line_18 $$ parameterName = nameValidator.validateName(suggestedNames[0], true)[ CD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_35 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_3 $$ List<GrParameterInfo> parameters = new ArrayList<GrParameterInfo>()[ CD ]
Line_36 $$ final String text-->Line_38 $$ text = "this." + selectedValue.getName() + " = " + finalParameterName[ FD ]
Line_5 $$ for (int i = 0; i < constructorParameters.length; i++) -->Line_23 $$ for (int i = 0; i < exceptionTypes.length; i++) [ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_32 $$ super.performRefactoring(usages)[ CD ]
Line_37 $$ if (StringUtil.equals(selectedValue.getName(), finalParameterName)) -->Line_38 $$ text = "this." + selectedValue.getName() + " = " + finalParameterName[ CD ]
Line_9 $$ final DefaultGroovyVariableNameValidator nameValidator = new DefaultGroovyVariableNameValidator(constructor, Collections.<String>emptyList(), false)-->Line_14 $$ return !nameValidator.validateName(name, false).isEmpty()[ FD ]
Line_9 $$ final DefaultGroovyVariableNameValidator nameValidator = new DefaultGroovyVariableNameValidator(constructor, Collections.<String>emptyList(), false)-->Line_18 $$ parameterName = nameValidator.validateName(suggestedNames[0], true)[ FD ]
Line_44 $$ final GrReferenceExpression ref = (GrReferenceExpression) ((GrAssignmentExpression) statement).getLValue()-->Line_46 $$ PsiUtil.qualifyMemberReference(ref, selectedValue, selectedValue.getName())[ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_32 $$ super.performRefactoring(usages)[ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_34 $$ LOG.assertTrue(block != null)[ CD ]
Line_40 $$ text = selectedValue.getName() + " = " + finalParameterName-->Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)[ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)[ CD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_44 $$ final GrReferenceExpression ref = (GrReferenceExpression) ((GrAssignmentExpression) statement).getLValue()[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_4 $$ GrParameter[] constructorParameters = constructor.getParameters()[ CD ]
Line_3 $$ List<GrParameterInfo> parameters = new ArrayList<GrParameterInfo>()-->Line_6 $$ parameters.add(new GrParameterInfo(constructorParameters[i], i))[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_45 $$ if (!PsiManager.getInstance(project).areElementsEquivalent(ref.resolve(), selectedValue)) [ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_26 $$ final GrChangeInfoImpl grChangeInfo = new GrChangeInfoImpl(constructor, null, null, constructor.getName(), parameters, thrownExceptionInfos, false)[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_17 $$ if (parameterName == null) [ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_21 $$ PsiClassType[] exceptionTypes = constructor.getThrowsList().getReferencedTypes()[ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_43 $$ final GrStatement statement = block.addStatementBefore(assignment, null)[ CD ]
Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)-->Line_43 $$ final GrStatement statement = block.addStatementBefore(assignment, null)[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_10 $$ String parameterName = ContainerUtil.find(suggestedNames, new Condition<String>() [ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_8 $$ final String[] suggestedNames = JavaCodeStyleManager.getInstance(project).suggestVariableName(VariableKind.PARAMETER, selectedValue.getName(), null, null).names[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_33 $$ final GrOpenBlock block = constructor.getBlock()[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_4 $$ GrParameter[] constructorParameters = constructor.getParameters()[ FD ]
Line_10 $$ String parameterName = ContainerUtil.find(suggestedNames, new Condition<String>() -->Line_17 $$ if (parameterName == null) [ FD ]
Line_8 $$ final String[] suggestedNames = JavaCodeStyleManager.getInstance(project).suggestVariableName(VariableKind.PARAMETER, selectedValue.getName(), null, null).names-->Line_10 $$ String parameterName = ContainerUtil.find(suggestedNames, new Condition<String>() [ FD ]
Line_35 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)-->Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)[ FD ]
Line_10 $$ String parameterName = ContainerUtil.find(suggestedNames, new Condition<String>() -->Line_14 $$ return !nameValidator.validateName(name, false).isEmpty()[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_20 $$ parameters.add(new GrParameterInfo(parameterName, "null", "", selectedValue.getTypeGroovy(), -1, false))[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_40 $$ text = selectedValue.getName() + " = " + finalParameterName[ FD ]
Line_33 $$ final GrOpenBlock block = constructor.getBlock()-->Line_43 $$ final GrStatement statement = block.addStatementBefore(assignment, null)[ FD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_45 $$ if (!PsiManager.getInstance(project).areElementsEquivalent(ref.resolve(), selectedValue)) [ CD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_36 $$ final String text[ CD ]
Line_5 $$ for (int i = 0; i < constructorParameters.length; i++) -->Line_6 $$ parameters.add(new GrParameterInfo(constructorParameters[i], i))[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_9 $$ final DefaultGroovyVariableNameValidator nameValidator = new DefaultGroovyVariableNameValidator(constructor, Collections.<String>emptyList(), false)[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_5 $$ for (int i = 0; i < constructorParameters.length; i++) [ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_23 $$ for (int i = 0; i < exceptionTypes.length; i++) [ CD ]
Line_3 $$ List<GrParameterInfo> parameters = new ArrayList<GrParameterInfo>()-->Line_20 $$ parameters.add(new GrParameterInfo(parameterName, "null", "", selectedValue.getTypeGroovy(), -1, false))[ FD ]
Line_44 $$ final GrReferenceExpression ref = (GrReferenceExpression) ((GrAssignmentExpression) statement).getLValue()-->Line_45 $$ if (!PsiManager.getInstance(project).areElementsEquivalent(ref.resolve(), selectedValue)) [ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_38 $$ text = "this." + selectedValue.getName() + " = " + finalParameterName[ FD ]
Line_37 $$ if (StringUtil.equals(selectedValue.getName(), finalParameterName)) -->Line_40 $$ text = selectedValue.getName() + " = " + finalParameterName[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_8 $$ final String[] suggestedNames = JavaCodeStyleManager.getInstance(project).suggestVariableName(VariableKind.PARAMETER, selectedValue.getName(), null, null).names[ CD ]
Line_36 $$ final String text-->Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_20 $$ parameters.add(new GrParameterInfo(parameterName, "null", "", selectedValue.getTypeGroovy(), -1, false))[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_35 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(project)[ FD ]
Line_36 $$ final String text-->Line_40 $$ text = selectedValue.getName() + " = " + finalParameterName[ FD ]
Line_45 $$ if (!PsiManager.getInstance(project).areElementsEquivalent(ref.resolve(), selectedValue)) -->Line_46 $$ PsiUtil.qualifyMemberReference(ref, selectedValue, selectedValue.getName())[ CD ]
Line_38 $$ text = "this." + selectedValue.getName() + " = " + finalParameterName-->Line_40 $$ text = selectedValue.getName() + " = " + finalParameterName[ FD ]
Line_38 $$ text = "this." + selectedValue.getName() + " = " + finalParameterName-->Line_42 $$ final GrStatement assignment = factory.createStatementFromText(text)[ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_37 $$ if (StringUtil.equals(selectedValue.getName(), finalParameterName)) [ FD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_46 $$ PsiUtil.qualifyMemberReference(ref, selectedValue, selectedValue.getName())[ FD ]
Line_10 $$ String parameterName = ContainerUtil.find(suggestedNames, new Condition<String>() -->Line_14 $$ return !nameValidator.validateName(name, false).isEmpty()[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_21 $$ PsiClassType[] exceptionTypes = constructor.getThrowsList().getReferencedTypes()[ CD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_33 $$ final GrOpenBlock block = constructor.getBlock()[ CD ]
Line_2 $$ private static void addParameter(final GrField selectedValue, final GrMethod constructor, final Project project) -->Line_50 $$ processor.run()[ CD ]
Line_28 $$ final GrChangeSignatureProcessor processor = new GrChangeSignatureProcessor(project, grChangeInfo) -->Line_37 $$ if (StringUtil.equals(selectedValue.getName(), finalParameterName)) [ CD ]
