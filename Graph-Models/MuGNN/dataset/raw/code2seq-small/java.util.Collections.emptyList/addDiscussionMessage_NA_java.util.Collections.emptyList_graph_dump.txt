Line_33 $$ long classNameId = classNameLocalService.getClassNameId(className)-->Line_34 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)[ FD ]
Line_35 $$ if (discussion == null) -->Line_36 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ CD ]
Line_27 $$ if (serviceContext.getModifiedDate() == null) -->Line_28 $$ serviceContext.setModifiedDate(now)[ CD ]
Line_18 $$ boolean allowPingbacks = false-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_23 $$ Date now = new Date()-->Line_25 $$ serviceContext.setCreateDate(now)[ FD ]
Line_15 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = Collections.emptyList()-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_23 $$ Date now = new Date()-->Line_28 $$ serviceContext.setModifiedDate(now)[ FD ]
Line_6 $$ long categoryId = MBCategoryConstants.DISCUSSION_CATEGORY_ID-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_10 $$ subject = body.substring(0, pos) + "..."-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_8 $$ if (Validator.isNotNull(body)) -->Line_9 $$ int pos = Math.min(body.length(), 50)[ CD ]
Line_8 $$ if (Validator.isNotNull(body)) -->Line_10 $$ subject = body.substring(0, pos) + "..."[ CD ]
Line_9 $$ int pos = Math.min(body.length(), 50)-->Line_10 $$ subject = body.substring(0, pos) + "..."[ FD ]
Line_16 $$ boolean anonymous = false-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_24 $$ if (serviceContext.getCreateDate() == null) -->Line_25 $$ serviceContext.setCreateDate(now)[ CD ]
Line_34 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)-->Line_35 $$ if (discussion == null) [ FD ]
Line_17 $$ double priority = 0.0-->Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_33 $$ long classNameId = classNameLocalService.getClassNameId(className)-->Line_36 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ FD ]
Line_30 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)-->Line_36 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ FD ]
Line_7 $$ if (Validator.isNull(subject)) -->Line_8 $$ if (Validator.isNotNull(body)) [ CD ]
