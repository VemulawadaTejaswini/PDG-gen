Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_41 $$ list.addAll(getFunctionCompletions(element))[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_6 $$ final PrefixedName prefixedName = element.getQName()[ CD ]
Line_8 $$ final String canonicalText = prefixedName.toString()-->Line_9 $$ final String suffix = canonicalText.substring(canonicalText.indexOf(INTELLIJ_IDEA_RULEZ))[ FD ]
Line_9 $$ final String suffix = canonicalText.substring(canonicalText.indexOf(INTELLIJ_IDEA_RULEZ))-->Line_13 $$ final boolean insidePrefix = suffix.contains(INTELLIJ_IDEA_RULEZ + ":")[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_15 $$ addNameCompletions(contextProvider, element, list)[ FD ]
Line_21 $$ if (namespacePrefix == null && !insidePrefix) -->Line_46 $$ if (principalType == XPathNodeTest.PrincipalType.ELEMENT && prefixedName.getPrefix() == null) [ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_17 $$ if (namespacePrefix == null || insidePrefix) [ CD ]
Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) -->Line_37 $$ if (check) [ CD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_20 $$ final XPathNodeTest.PrincipalType principalType = addContextNames(element, contextProvider, prefixedName, list)[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_42 $$ list.addAll(getVariableCompletions(element))[ FD ]
Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) -->Line_23 $$ list.addAll(getAxisCompletions())[ CD ]
Line_30 $$ if (!check) -->Line_35 $$ check = lp == null || (sibling = lp.getPrevSibling()) != null[ CD ]
Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)-->Line_20 $$ final XPathNodeTest.PrincipalType principalType = addContextNames(element, contextProvider, prefixedName, list)[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_15 $$ addNameCompletions(contextProvider, element, list)[ CD ]
Line_31 $$ XPathLocationPath lp = null-->Line_35 $$ check = lp == null || (sibling = lp.getPrevSibling()) != null[ FD ]
Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)-->Line_15 $$ addNameCompletions(contextProvider, element, list)[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_20 $$ final XPathNodeTest.PrincipalType principalType = addContextNames(element, contextProvider, prefixedName, list)[ CD ]
Line_13 $$ final boolean insidePrefix = suffix.contains(INTELLIJ_IDEA_RULEZ + ":")-->Line_17 $$ if (namespacePrefix == null || insidePrefix) [ FD ]
Line_33 $$ lp = PsiTreeUtil.getParentOfType(lp == null ? element : lp, XPathLocationPath.class, true)-->Line_35 $$ check = lp == null || (sibling = lp.getPrevSibling()) != null[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_9 $$ final String suffix = canonicalText.substring(canonicalText.indexOf(INTELLIJ_IDEA_RULEZ))[ CD ]
Line_29 $$ boolean check = sibling != null-->Line_35 $$ check = lp == null || (sibling = lp.getPrevSibling()) != null[ FD ]
Line_27 $$ sibling = sibling.getPrevSibling()-->Line_35 $$ check = lp == null || (sibling = lp.getPrevSibling()) != null[ FD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_41 $$ list.addAll(getFunctionCompletions(element))[ FD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_18 $$ addNamespaceCompletions(contextProvider.getNamespaceContext(), list, context)[ FD ]
Line_30 $$ if (!check) -->Line_32 $$ do [ CD ]
Line_3 $$ if (!element.isNameTest()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_13 $$ final boolean insidePrefix = suffix.contains(INTELLIJ_IDEA_RULEZ + ":")-->Line_21 $$ if (namespacePrefix == null && !insidePrefix) [ FD ]
Line_30 $$ if (!check) -->Line_31 $$ XPathLocationPath lp = null[ CD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_42 $$ list.addAll(getVariableCompletions(element))[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)[ FD ]
Line_6 $$ final PrefixedName prefixedName = element.getQName()-->Line_46 $$ if (principalType == XPathNodeTest.PrincipalType.ELEMENT && prefixedName.getPrefix() == null) [ FD ]
Line_21 $$ if (namespacePrefix == null && !insidePrefix) -->Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) [ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_16 $$ final String namespacePrefix = prefixedName.getPrefix()[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_3 $$ if (!element.isNameTest()) [ CD ]
Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)-->Line_12 $$ final XmlElement context = contextProvider.getContextElement()[ FD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_23 $$ list.addAll(getAxisCompletions())[ FD ]
Line_37 $$ if (check) -->Line_38 $$ if (sibling instanceof XPathToken && XPathTokenTypes.PATH_OPS.contains(((XPathToken) sibling).getTokenType())) [ CD ]
Line_12 $$ final XmlElement context = contextProvider.getContextElement()-->Line_18 $$ addNamespaceCompletions(contextProvider.getNamespaceContext(), list, context)[ FD ]
Line_10 $$ final XPathAxisSpecifier axisSpecifier = element.getStep().getAxisSpecifier()-->Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) [ FD ]
Line_38 $$ if (sibling instanceof XPathToken && XPathTokenTypes.PATH_OPS.contains(((XPathToken) sibling).getTokenType())) -->Line_41 $$ list.addAll(getFunctionCompletions(element))[ CD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_15 $$ addNameCompletions(contextProvider, element, list)[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_50 $$ return list[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_10 $$ final XPathAxisSpecifier axisSpecifier = element.getStep().getAxisSpecifier()[ FD ]
Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()-->Line_47 $$ list.addAll(getNodeTypeCompletions(element))[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_13 $$ final boolean insidePrefix = suffix.contains(INTELLIJ_IDEA_RULEZ + ":")[ CD ]
Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) -->Line_26 $$ while (sibling instanceof PsiWhiteSpace) [ CD ]
Line_26 $$ while (sibling instanceof PsiWhiteSpace) -->Line_27 $$ sibling = sibling.getPrevSibling()[ CD ]
Line_17 $$ if (namespacePrefix == null || insidePrefix) -->Line_18 $$ addNamespaceCompletions(contextProvider.getNamespaceContext(), list, context)[ CD ]
Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) -->Line_30 $$ if (!check) [ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_21 $$ if (namespacePrefix == null && !insidePrefix) [ CD ]
Line_46 $$ if (principalType == XPathNodeTest.PrincipalType.ELEMENT && prefixedName.getPrefix() == null) -->Line_47 $$ list.addAll(getNodeTypeCompletions(element))[ CD ]
Line_31 $$ XPathLocationPath lp = null-->Line_32 $$ do [ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_10 $$ final XPathAxisSpecifier axisSpecifier = element.getStep().getAxisSpecifier()[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_47 $$ list.addAll(getNodeTypeCompletions(element))[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_3 $$ if (!element.isNameTest()) [ FD ]
Line_6 $$ final PrefixedName prefixedName = element.getQName()-->Line_20 $$ final XPathNodeTest.PrincipalType principalType = addContextNames(element, contextProvider, prefixedName, list)[ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_6 $$ final PrefixedName prefixedName = element.getQName()[ FD ]
Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)-->Line_18 $$ addNamespaceCompletions(contextProvider.getNamespaceContext(), list, context)[ FD ]
Line_6 $$ final PrefixedName prefixedName = element.getQName()-->Line_8 $$ final String canonicalText = prefixedName.toString()[ FD ]
Line_22 $$ if (axisSpecifier == null || axisSpecifier.isDefaultAxis()) -->Line_29 $$ boolean check = sibling != null[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_8 $$ final String canonicalText = prefixedName.toString()[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_12 $$ final XmlElement context = contextProvider.getContextElement()[ CD ]
Line_6 $$ final PrefixedName prefixedName = element.getQName()-->Line_16 $$ final String namespacePrefix = prefixedName.getPrefix()[ FD ]
Line_29 $$ boolean check = sibling != null-->Line_30 $$ if (!check) [ FD ]
Line_31 $$ XPathLocationPath lp = null-->Line_33 $$ lp = PsiTreeUtil.getParentOfType(lp == null ? element : lp, XPathLocationPath.class, true)[ FD ]
Line_38 $$ if (sibling instanceof XPathToken && XPathTokenTypes.PATH_OPS.contains(((XPathToken) sibling).getTokenType())) -->Line_42 $$ list.addAll(getVariableCompletions(element))[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_11 $$ final ContextProvider contextProvider = ContextProvider.getContextProvider(element)[ CD ]
Line_33 $$ lp = PsiTreeUtil.getParentOfType(lp == null ? element : lp, XPathLocationPath.class, true)-->Line_32 $$ do [ FD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_14 $$ final Set<Lookup> list = new HashSet<Lookup>()[ CD ]
Line_2 $$ public static Collection<Lookup> getNodeTestCompletions(final XPathNodeTest element) -->Line_20 $$ final XPathNodeTest.PrincipalType principalType = addContextNames(element, contextProvider, prefixedName, list)[ FD ]
Line_32 $$ do -->Line_33 $$ lp = PsiTreeUtil.getParentOfType(lp == null ? element : lp, XPathLocationPath.class, true)[ CD ]
