Line_12 $$ Arrays.sort(contentRoots, new Comparator<FilePath>() -->Line_14 $$ return SystemInfo.isFileSystemCaseSensitive ? o1.getPath().replace("/", "\\").compareTo(o2.getPath().replace("/", "\\")) : o1.getPath().replace("/", "\\").compareToIgnoreCase(o2.getPath().replace("/", "\\"))[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_8 $$ eventHandler.setUpdatedFiles(updatedFiles)[ FD ]
Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)-->Line_24 $$ Collection<VirtualFile> roots = SvnUtil.crawlWCRoots(myVcs.getProject(), ioRoot, crawler, progressIndicator)[ FD ]
Line_9 $$ boolean totalUpdate = true-->Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)[ FD ]
Line_18 $$ if (progressIndicator != null) -->Line_19 $$ progressIndicator.checkCanceled()[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_27 $$ if (updatedRoots.isEmpty()) [ CD ]
Line_3 $$ if (context.isNull()) -->Line_4 $$ context.set(new SvnUpdateContext(myVcs, contentRoots))[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_11 $$ Collection<VirtualFile> updatedRoots = new HashSet<VirtualFile>()[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_35 $$ return new MyUpdateSessionAdapter(contentRoots, updatedFiles, exceptions)[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_24 $$ Collection<VirtualFile> roots = SvnUtil.crawlWCRoots(myVcs.getProject(), ioRoot, crawler, progressIndicator)[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_3 $$ if (context.isNull()) [ CD ]
Line_7 $$ UpdateEventHandler eventHandler = new UpdateEventHandler(myVcs, progressIndicator, (SvnUpdateContext) context.get())-->Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_19 $$ progressIndicator.checkCanceled()[ FD ]
Line_12 $$ Arrays.sort(contentRoots, new Comparator<FilePath>() -->Line_14 $$ return SystemInfo.isFileSystemCaseSensitive ? o1.getPath().replace("/", "\\").compareTo(o2.getPath().replace("/", "\\")) : o1.getPath().replace("/", "\\").compareToIgnoreCase(o2.getPath().replace("/", "\\"))[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_12 $$ Arrays.sort(contentRoots, new Comparator<FilePath>() [ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_18 $$ if (progressIndicator != null) [ FD ]
Line_27 $$ if (updatedRoots.isEmpty()) -->Line_33 $$ return new UpdateSessionAdapter(Collections.<VcsException>emptyList(), true)[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_7 $$ UpdateEventHandler eventHandler = new UpdateEventHandler(myVcs, progressIndicator, (SvnUpdateContext) context.get())[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_12 $$ Arrays.sort(contentRoots, new Comparator<FilePath>() [ FD ]
Line_27 $$ if (updatedRoots.isEmpty()) -->Line_28 $$ WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable() [ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_4 $$ context.set(new SvnUpdateContext(myVcs, contentRoots))[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_22 $$ if (!((SvnUpdateContext) context.get()).shouldRunFor(ioRoot))[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_9 $$ boolean totalUpdate = true[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_8 $$ eventHandler.setUpdatedFiles(updatedFiles)[ CD ]
Line_6 $$ final ArrayList<VcsException> exceptions = new ArrayList<VcsException>()-->Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)[ FD ]
Line_11 $$ Collection<VirtualFile> updatedRoots = new HashSet<VirtualFile>()-->Line_25 $$ updatedRoots.addAll(roots)[ FD ]
Line_28 $$ WaitForProgressToShow.runOrInvokeLaterAboveProgress(new Runnable() -->Line_30 $$ Messages.showErrorDialog(myVcs.getProject(), SvnBundle.message("message.text.update.no.directories.found"), SvnBundle.message("messate.text.update.error"))[ CD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_3 $$ if (context.isNull()) [ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_7 $$ UpdateEventHandler eventHandler = new UpdateEventHandler(myVcs, progressIndicator, (SvnUpdateContext) context.get())[ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_6 $$ final ArrayList<VcsException> exceptions = new ArrayList<VcsException>()[ CD ]
Line_11 $$ Collection<VirtualFile> updatedRoots = new HashSet<VirtualFile>()-->Line_27 $$ if (updatedRoots.isEmpty()) [ FD ]
Line_2 $$ public UpdateSession updateDirectories(@NotNull final FilePath[] contentRoots, final UpdatedFiles updatedFiles, final ProgressIndicator progressIndicator, @NotNull final Ref<SequentialUpdatesContext> context) throws ProcessCanceledException -->Line_10 $$ AbstractUpdateIntegrateCrawler crawler = createCrawler(eventHandler, totalUpdate, exceptions, updatedFiles)[ CD ]
Line_7 $$ UpdateEventHandler eventHandler = new UpdateEventHandler(myVcs, progressIndicator, (SvnUpdateContext) context.get())-->Line_8 $$ eventHandler.setUpdatedFiles(updatedFiles)[ FD ]
