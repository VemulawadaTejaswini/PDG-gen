Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_19 $$ if (options.getDataCenters().isEmpty() && options.getHosts().isEmpty())[ FD ]
Line_19 $$ if (options.getDataCenters().isEmpty() && options.getHosts().isEmpty())-->Line_22 $$ if (options.getDataCenters().size() == 1 && options.getDataCenters().contains(DatabaseDescriptor.getLocalDataCenter()))[ CD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_22 $$ if (options.getDataCenters().size() == 1 && options.getDataCenters().contains(DatabaseDescriptor.getLocalDataCenter()))[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_3 $$ if (parallelismDegree < 0 || parallelismDegree > RepairParallelism.values().length - 1) [ CD ]
Line_30 $$ for (String table : tableNames) -->Line_31 $$ options.getColumnFamilies().add(table)[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_29 $$ if (tableNames != null) [ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_13 $$ options.getDataCenters().addAll(dataCenters)[ FD ]
Line_7 $$ if (FBUtilities.isWindows() && parallelism != RepairParallelism.PARALLEL) -->Line_9 $$ parallelism = RepairParallelism.PARALLEL[ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_7 $$ if (FBUtilities.isWindows() && parallelism != RepairParallelism.PARALLEL) [ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_20 $$ options.getRanges().addAll(getPrimaryRanges(keyspace))[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_34 $$ return forceRepairAsync(keyspace, options)[ CD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_16 $$ options.getHosts().addAll(hosts)[ FD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_31 $$ options.getColumnFamilies().add(table)[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)[ CD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_23 $$ options.getRanges().addAll(getPrimaryRangesWithinDC(keyspace))[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_15 $$ if (hosts != null) [ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_27 $$ options.getRanges().addAll(getLocalRanges(keyspace))[ FD ]
Line_12 $$ if (dataCenters != null) -->Line_13 $$ options.getDataCenters().addAll(dataCenters)[ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_15 $$ if (hosts != null) [ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_12 $$ if (dataCenters != null) [ FD ]
Line_19 $$ if (options.getDataCenters().isEmpty() && options.getHosts().isEmpty())-->Line_20 $$ options.getRanges().addAll(getPrimaryRanges(keyspace))[ CD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_13 $$ options.getDataCenters().addAll(dataCenters)[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_6 $$ RepairParallelism parallelism = RepairParallelism.values()[parallelismDegree][ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_34 $$ return forceRepairAsync(keyspace, options)[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)[ FD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_34 $$ return forceRepairAsync(keyspace, options)[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_29 $$ if (tableNames != null) [ FD ]
Line_6 $$ RepairParallelism parallelism = RepairParallelism.values()[parallelismDegree]-->Line_9 $$ parallelism = RepairParallelism.PARALLEL[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_16 $$ options.getHosts().addAll(hosts)[ FD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_20 $$ options.getRanges().addAll(getPrimaryRanges(keyspace))[ FD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_23 $$ options.getRanges().addAll(getPrimaryRangesWithinDC(keyspace))[ FD ]
Line_22 $$ if (options.getDataCenters().size() == 1 && options.getDataCenters().contains(DatabaseDescriptor.getLocalDataCenter()))-->Line_23 $$ options.getRanges().addAll(getPrimaryRangesWithinDC(keyspace))[ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_12 $$ if (dataCenters != null) [ CD ]
Line_18 $$ if (primaryRange) -->Line_27 $$ options.getRanges().addAll(getLocalRanges(keyspace))[ CD ]
Line_7 $$ if (FBUtilities.isWindows() && parallelism != RepairParallelism.PARALLEL) -->Line_8 $$ logger.warn("Snapshot-based repair is not yet supported on Windows.  Reverting to parallel repair.")[ CD ]
Line_18 $$ if (primaryRange) -->Line_19 $$ if (options.getDataCenters().isEmpty() && options.getHosts().isEmpty())[ CD ]
Line_2 $$ public int forceRepairAsync(String keyspace, int parallelismDegree, Collection<String> dataCenters, Collection<String> hosts, boolean primaryRange, boolean fullRepair, String... tableNames) -->Line_18 $$ if (primaryRange) [ CD ]
Line_15 $$ if (hosts != null) -->Line_16 $$ options.getHosts().addAll(hosts)[ CD ]
Line_11 $$ RepairOption options = new RepairOption(parallelism, primaryRange, !fullRepair, false, 1, Collections.<Range<Token>>emptyList(), false)-->Line_27 $$ options.getRanges().addAll(getLocalRanges(keyspace))[ FD ]
