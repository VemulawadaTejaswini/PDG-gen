Line_14 $$ final PsiExpression expression = expressions[i]-->Line_43 $$ actions.addAll(getParameterTypeChangeFixes(method, expression, parameterType))[ FD ]
Line_16 $$ if (expressionType instanceof PsiPrimitiveType) -->Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)[ CD ]
Line_23 $$ final PsiType parameterType = substitutor.substitute(formalParamType)-->Line_43 $$ actions.addAll(getParameterTypeChangeFixes(method, expression, parameterType))[ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_15 $$ PsiType expressionType = expression.getType()[ CD ]
Line_29 $$ if (resolved instanceof PsiVariable) -->Line_32 $$ final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper()[ CD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_16 $$ if (expressionType instanceof PsiPrimitiveType) [ CD ]
Line_6 $$ PsiExpression[] expressions = list.getExpressions()-->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_43 $$ actions.addAll(getParameterTypeChangeFixes(method, expression, parameterType))[ CD ]
Line_12 $$ List<IntentionAction> actions = new ArrayList<IntentionAction>()-->Line_43 $$ actions.addAll(getParameterTypeChangeFixes(method, expression, parameterType))[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_13 $$ for (int i = 0; i < expressions.length; i++) [ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_26 $$ final PsiExpression qualifierExpression = methodCall.getMethodExpression().getQualifierExpression()[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_3 $$ final JavaResolveResult result = methodCall.getMethodExpression().advancedResolve(false)[ FD ]
Line_30 $$ final PsiType varType = ((PsiVariable) resolved).getType()-->Line_36 $$ if (!varType.equals(appropriateVarType)) [ FD ]
Line_4 $$ PsiMethod method = (PsiMethod) result.getElement()-->Line_9 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_9 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()-->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_27 $$ if (qualifierExpression instanceof PsiReferenceExpression) [ CD ]
Line_28 $$ final PsiElement resolved = ((PsiReferenceExpression) qualifierExpression).resolve()-->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_5 $$ final PsiSubstitutor substitutor = result.getSubstitutor()[ CD ]
Line_36 $$ if (!varType.equals(appropriateVarType)) -->Line_37 $$ actions.add(new VariableTypeFromCallFix(appropriateVarType, (PsiVariable) resolved))[ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_4 $$ PsiMethod method = (PsiMethod) result.getElement()[ CD ]
Line_31 $$ final PsiClass varClass = PsiUtil.resolveClassInType(varType)-->Line_33 $$ if (varClass != null) [ FD ]
Line_35 $$ final PsiClassType appropriateVarType = JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass, psiSubstitutor)-->Line_36 $$ if (!varType.equals(appropriateVarType)) [ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_21 $$ final PsiParameter parameter = parameters[i][ CD ]
Line_33 $$ if (varClass != null) -->Line_35 $$ final PsiClassType appropriateVarType = JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass, psiSubstitutor)[ CD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_26 $$ final PsiExpression qualifierExpression = methodCall.getMethodExpression().getQualifierExpression()[ CD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_22 $$ final PsiType formalParamType = parameter.getType()[ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_7 $$ if (method == null)[ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_10 $$ if (parameters.length != expressions.length)[ CD ]
Line_14 $$ final PsiExpression expression = expressions[i]-->Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)[ FD ]
Line_15 $$ PsiType expressionType = expression.getType()-->Line_19 $$ if (expressionType == null)[ FD ]
Line_4 $$ PsiMethod method = (PsiMethod) result.getElement()-->Line_7 $$ if (method == null)[ FD ]
Line_29 $$ if (resolved instanceof PsiVariable) -->Line_31 $$ final PsiClass varClass = PsiUtil.resolveClassInType(varType)[ CD ]
Line_21 $$ final PsiParameter parameter = parameters[i]-->Line_22 $$ final PsiType formalParamType = parameter.getType()[ FD ]
Line_26 $$ final PsiExpression qualifierExpression = methodCall.getMethodExpression().getQualifierExpression()-->Line_27 $$ if (qualifierExpression instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_6 $$ PsiExpression[] expressions = list.getExpressions()[ FD ]
Line_12 $$ List<IntentionAction> actions = new ArrayList<IntentionAction>()-->Line_37 $$ actions.add(new VariableTypeFromCallFix(appropriateVarType, (PsiVariable) resolved))[ FD ]
Line_4 $$ PsiMethod method = (PsiMethod) result.getElement()-->Line_43 $$ actions.addAll(getParameterTypeChangeFixes(method, expression, parameterType))[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_12 $$ List<IntentionAction> actions = new ArrayList<IntentionAction>()[ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_3 $$ final JavaResolveResult result = methodCall.getMethodExpression().advancedResolve(false)[ CD ]
Line_28 $$ final PsiElement resolved = ((PsiReferenceExpression) qualifierExpression).resolve()-->Line_29 $$ if (resolved instanceof PsiVariable) [ FD ]
Line_33 $$ if (varClass != null) -->Line_36 $$ if (!varType.equals(appropriateVarType)) [ CD ]
Line_27 $$ if (qualifierExpression instanceof PsiReferenceExpression) -->Line_28 $$ final PsiElement resolved = ((PsiReferenceExpression) qualifierExpression).resolve()[ CD ]
Line_29 $$ if (resolved instanceof PsiVariable) -->Line_30 $$ final PsiType varType = ((PsiVariable) resolved).getType()[ CD ]
Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)-->Line_19 $$ if (expressionType == null)[ FD ]
Line_3 $$ final JavaResolveResult result = methodCall.getMethodExpression().advancedResolve(false)-->Line_4 $$ PsiMethod method = (PsiMethod) result.getElement()[ FD ]
Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)-->Line_24 $$ if (parameterType.isAssignableFrom(expressionType))[ FD ]
Line_14 $$ final PsiExpression expression = expressions[i]-->Line_35 $$ final PsiClassType appropriateVarType = JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass, psiSubstitutor)[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_45 $$ return actions[ CD ]
Line_31 $$ final PsiClass varClass = PsiUtil.resolveClassInType(varType)-->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ FD ]
Line_29 $$ if (resolved instanceof PsiVariable) -->Line_33 $$ if (varClass != null) [ CD ]
Line_32 $$ final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper()-->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_19 $$ if (expressionType == null)[ CD ]
Line_15 $$ PsiType expressionType = expression.getType()-->Line_16 $$ if (expressionType instanceof PsiPrimitiveType) [ FD ]
Line_22 $$ final PsiType formalParamType = parameter.getType()-->Line_23 $$ final PsiType parameterType = substitutor.substitute(formalParamType)[ FD ]
Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)-->Line_35 $$ final PsiClassType appropriateVarType = JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass, psiSubstitutor)[ FD ]
Line_3 $$ final JavaResolveResult result = methodCall.getMethodExpression().advancedResolve(false)-->Line_5 $$ final PsiSubstitutor substitutor = result.getSubstitutor()[ FD ]
Line_14 $$ final PsiExpression expression = expressions[i]-->Line_15 $$ PsiType expressionType = expression.getType()[ FD ]
Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)-->Line_16 $$ if (expressionType instanceof PsiPrimitiveType) [ FD ]
Line_15 $$ PsiType expressionType = expression.getType()-->Line_17 $$ expressionType = ((PsiPrimitiveType) expressionType).getBoxedType(expression)[ FD ]
Line_7 $$ if (method == null)-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_14 $$ final PsiExpression expression = expressions[i]-->Line_32 $$ final PsiResolveHelper resolveHelper = JavaPsiFacade.getInstance(expression.getProject()).getResolveHelper()[ FD ]
Line_27 $$ if (qualifierExpression instanceof PsiReferenceExpression) -->Line_29 $$ if (resolved instanceof PsiVariable) [ CD ]
Line_31 $$ final PsiClass varClass = PsiUtil.resolveClassInType(varType)-->Line_35 $$ final PsiClassType appropriateVarType = JavaPsiFacade.getElementFactory(expression.getProject()).createType(varClass, psiSubstitutor)[ FD ]
Line_5 $$ final PsiSubstitutor substitutor = result.getSubstitutor()-->Line_23 $$ final PsiType parameterType = substitutor.substitute(formalParamType)[ FD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_14 $$ final PsiExpression expression = expressions[i][ CD ]
Line_33 $$ if (varClass != null) -->Line_34 $$ final PsiSubstitutor psiSubstitutor = resolveHelper.inferTypeArguments(varClass.getTypeParameters(), parameters, expressions, PsiSubstitutor.EMPTY, resolved, DefaultParameterTypeInferencePolicy.INSTANCE)[ CD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_23 $$ final PsiType parameterType = substitutor.substitute(formalParamType)[ CD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_9 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_13 $$ for (int i = 0; i < expressions.length; i++) -->Line_24 $$ if (parameterType.isAssignableFrom(expressionType))[ CD ]
Line_15 $$ PsiType expressionType = expression.getType()-->Line_24 $$ if (parameterType.isAssignableFrom(expressionType))[ FD ]
Line_2 $$ public static List<IntentionAction> getQuickFixActions(@NotNull PsiMethodCallExpression methodCall, @NotNull PsiExpressionList list) -->Line_6 $$ PsiExpression[] expressions = list.getExpressions()[ CD ]
Line_23 $$ final PsiType parameterType = substitutor.substitute(formalParamType)-->Line_24 $$ if (parameterType.isAssignableFrom(expressionType))[ FD ]
Line_30 $$ final PsiType varType = ((PsiVariable) resolved).getType()-->Line_31 $$ final PsiClass varClass = PsiUtil.resolveClassInType(varType)[ FD ]
Line_10 $$ if (parameters.length != expressions.length)-->Line_11 $$ return Collections.emptyList()[ CD ]
