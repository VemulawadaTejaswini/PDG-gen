Line_5 $$ if (owner instanceof PyFunction) -->Line_7 $$ final List<PyNamedParameter> namedParameters = ParamHelper.collectNamedParameters(((PyFunction) owner).getParameterList())[ CD ]
Line_8 $$ Set<String> usedParameters = new HashSet<String>()-->Line_14 $$ usedParameters.add(ref.getCanonicalText())[ FD ]
Line_13 $$ if (ref instanceof DocStringParameterReference && ((DocStringParameterReference) ref).getType().equals(myType))-->Line_14 $$ usedParameters.add(ref.getCanonicalText())[ CD ]
Line_4 $$ PyDocStringOwner owner = PsiTreeUtil.getParentOfType(getElement(), PyDocStringOwner.class)-->Line_5 $$ if (owner instanceof PyFunction) [ FD ]
Line_12 $$ for (PsiReference ref : references) -->Line_14 $$ usedParameters.add(ref.getCanonicalText())[ FD ]
Line_5 $$ if (owner instanceof PyFunction) -->Line_9 $$ PyStringLiteralExpression expression = PsiTreeUtil.getParentOfType(getElement(), PyStringLiteralExpression.class, false)[ CD ]
Line_5 $$ if (owner instanceof PyFunction) -->Line_6 $$ List<PyNamedParameter> result = Lists.newArrayList()[ CD ]
Line_6 $$ List<PyNamedParameter> result = Lists.newArrayList()-->Line_19 $$ result.add(param)[ FD ]
Line_17 $$ for (PyNamedParameter param : namedParameters) -->Line_19 $$ result.add(param)[ FD ]
Line_9 $$ PyStringLiteralExpression expression = PsiTreeUtil.getParentOfType(getElement(), PyStringLiteralExpression.class, false)-->Line_10 $$ if (expression != null) [ FD ]
Line_5 $$ if (owner instanceof PyFunction) -->Line_10 $$ if (expression != null) [ CD ]
Line_10 $$ if (expression != null) -->Line_11 $$ PsiReference[] references = expression.getReferences()[ CD ]
Line_18 $$ if (!usedParameters.contains(param.getName()))-->Line_19 $$ result.add(param)[ CD ]
Line_8 $$ Set<String> usedParameters = new HashSet<String>()-->Line_18 $$ if (!usedParameters.contains(param.getName()))[ FD ]
Line_17 $$ for (PyNamedParameter param : namedParameters) -->Line_18 $$ if (!usedParameters.contains(param.getName()))[ FD ]
Line_5 $$ if (owner instanceof PyFunction) -->Line_21 $$ return result[ CD ]
Line_5 $$ if (owner instanceof PyFunction) -->Line_8 $$ Set<String> usedParameters = new HashSet<String>()[ CD ]
Line_9 $$ PyStringLiteralExpression expression = PsiTreeUtil.getParentOfType(getElement(), PyStringLiteralExpression.class, false)-->Line_11 $$ PsiReference[] references = expression.getReferences()[ FD ]
