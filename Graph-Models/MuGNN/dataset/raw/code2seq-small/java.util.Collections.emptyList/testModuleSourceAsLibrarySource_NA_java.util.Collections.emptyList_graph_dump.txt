Line_4 $$ final VirtualFile file = ref.getElement().getContainingFile().getVirtualFile()-->Line_5 $$ assertNotNull(file)[ FD ]
Line_3 $$ final PsiReference ref = configure()-->Line_4 $$ final VirtualFile file = ref.getElement().getContainingFile().getVirtualFile()[ FD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_7 $$ ModuleRootModificationUtil.addModuleLibrary(myModule, "lib", Collections.<String>emptyList(), Collections.singletonList(file.getParent().getUrl()))[ CD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_8 $$ assertInstanceOf(ref.resolve(), PsiClass.class)[ CD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_3 $$ final PsiReference ref = configure()[ CD ]
Line_4 $$ final VirtualFile file = ref.getElement().getContainingFile().getVirtualFile()-->Line_7 $$ ModuleRootModificationUtil.addModuleLibrary(myModule, "lib", Collections.<String>emptyList(), Collections.singletonList(file.getParent().getUrl()))[ FD ]
Line_4 $$ final VirtualFile file = ref.getElement().getContainingFile().getVirtualFile()-->Line_6 $$ createFile(myModule, file.getParent(), "ModuleSourceAsLibrarySourceDep.java", loadFile("class/ModuleSourceAsLibrarySourceDep.java"))[ FD ]
Line_3 $$ final PsiReference ref = configure()-->Line_8 $$ assertInstanceOf(ref.resolve(), PsiClass.class)[ FD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_6 $$ createFile(myModule, file.getParent(), "ModuleSourceAsLibrarySourceDep.java", loadFile("class/ModuleSourceAsLibrarySourceDep.java"))[ CD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_4 $$ final VirtualFile file = ref.getElement().getContainingFile().getVirtualFile()[ CD ]
Line_2 $$ public void testModuleSourceAsLibrarySource() throws Exception -->Line_5 $$ assertNotNull(file)[ CD ]
