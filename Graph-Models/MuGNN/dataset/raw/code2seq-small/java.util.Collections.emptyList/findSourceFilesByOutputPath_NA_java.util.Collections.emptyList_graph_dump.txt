Line_8 $$ final String firstName = i != -1 ? path.substring(0, i) : path-->Line_18 $$ if (firstName.equals(compositeElement.getName())) [ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_4 $$ if (path.isEmpty()) [ CD ]
Line_27 $$ final VirtualFile sourceRoot = ((FileOrDirectoryCopyPackagingElement<?>) element).findFile()-->Line_29 $$ ContainerUtil.addIfNotNull(sourceRoot.findFileByRelativePath(path), result)[ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_9 $$ final String tail = i != -1 ? path.substring(i + 1) : ""[ CD ]
Line_27 $$ final VirtualFile sourceRoot = ((FileOrDirectoryCopyPackagingElement<?>) element).findFile()-->Line_28 $$ if (sourceRoot != null) [ FD ]
Line_11 $$ processElementsWithSubstitutions(parent.getChildren(), context, artifactType, PackagingElementPath.EMPTY, new PackagingElementProcessor<PackagingElement<?>>() -->Line_31 $$ if (element instanceof ModuleOutputPackagingElement) [ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_11 $$ processElementsWithSubstitutions(parent.getChildren(), context, artifactType, PackagingElementPath.EMPTY, new PackagingElementProcessor<PackagingElement<?>>() [ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_7 $$ int i = path.indexOf('/')[ CD ]
Line_9 $$ final String tail = i != -1 ? path.substring(i + 1) : ""-->Line_23 $$ if (firstName.equals(fileCopyElement.getOutputFileName()) && tail.isEmpty()) [ FD ]
Line_22 $$ final FileCopyPackagingElement fileCopyElement = (FileCopyPackagingElement) element-->Line_24 $$ ContainerUtil.addIfNotNull(fileCopyElement.findFile(), result)[ FD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_9 $$ final String tail = i != -1 ? path.substring(i + 1) : ""[ FD ]
Line_10 $$ final List<VirtualFile> result = new SmartList<VirtualFile>()-->Line_29 $$ ContainerUtil.addIfNotNull(sourceRoot.findFileByRelativePath(path), result)[ FD ]
Line_34 $$ final VirtualFile sourceFile = sourceRoot.findFileByRelativePath(path)-->Line_36 $$ result.add(sourceFile)[ FD ]
Line_22 $$ final FileCopyPackagingElement fileCopyElement = (FileCopyPackagingElement) element-->Line_23 $$ if (firstName.equals(fileCopyElement.getOutputFileName()) && tail.isEmpty()) [ FD ]
Line_9 $$ final String tail = i != -1 ? path.substring(i + 1) : ""-->Line_19 $$ result.addAll(findSourceFilesByOutputPath(compositeElement, tail, context, artifactType))[ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_10 $$ final List<VirtualFile> result = new SmartList<VirtualFile>()[ CD ]
Line_26 $$ if (element instanceof DirectoryCopyPackagingElement || element instanceof ExtractedDirectoryPackagingElement) -->Line_28 $$ if (sourceRoot != null) [ CD ]
Line_31 $$ if (element instanceof ModuleOutputPackagingElement) -->Line_32 $$ final CompilerConfiguration compilerConfiguration = CompilerConfiguration.getInstance(context.getProject())[ CD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_8 $$ final String firstName = i != -1 ? path.substring(0, i) : path[ FD ]
Line_11 $$ processElementsWithSubstitutions(parent.getChildren(), context, artifactType, PackagingElementPath.EMPTY, new PackagingElementProcessor<PackagingElement<?>>() -->Line_21 $$ if (element instanceof FileCopyPackagingElement) [ FD ]
Line_23 $$ if (firstName.equals(fileCopyElement.getOutputFileName()) && tail.isEmpty()) -->Line_24 $$ ContainerUtil.addIfNotNull(fileCopyElement.findFile(), result)[ CD ]
Line_7 $$ int i = path.indexOf('/')-->Line_8 $$ final String firstName = i != -1 ? path.substring(0, i) : path[ FD ]
Line_28 $$ if (sourceRoot != null) -->Line_29 $$ ContainerUtil.addIfNotNull(sourceRoot.findFileByRelativePath(path), result)[ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_11 $$ processElementsWithSubstitutions(parent.getChildren(), context, artifactType, PackagingElementPath.EMPTY, new PackagingElementProcessor<PackagingElement<?>>() [ FD ]
Line_8 $$ final String firstName = i != -1 ? path.substring(0, i) : path-->Line_23 $$ if (firstName.equals(fileCopyElement.getOutputFileName()) && tail.isEmpty()) [ FD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_29 $$ ContainerUtil.addIfNotNull(sourceRoot.findFileByRelativePath(path), result)[ FD ]
Line_26 $$ if (element instanceof DirectoryCopyPackagingElement || element instanceof ExtractedDirectoryPackagingElement) -->Line_31 $$ if (element instanceof ModuleOutputPackagingElement) [ CD ]
Line_18 $$ if (firstName.equals(compositeElement.getName())) -->Line_19 $$ result.addAll(findSourceFilesByOutputPath(compositeElement, tail, context, artifactType))[ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_19 $$ result.addAll(findSourceFilesByOutputPath(compositeElement, tail, context, artifactType))[ FD ]
Line_21 $$ if (element instanceof FileCopyPackagingElement) -->Line_23 $$ if (firstName.equals(fileCopyElement.getOutputFileName()) && tail.isEmpty()) [ CD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_4 $$ if (path.isEmpty()) [ FD ]
Line_10 $$ final List<VirtualFile> result = new SmartList<VirtualFile>()-->Line_19 $$ result.addAll(findSourceFilesByOutputPath(compositeElement, tail, context, artifactType))[ FD ]
Line_21 $$ if (element instanceof FileCopyPackagingElement) -->Line_22 $$ final FileCopyPackagingElement fileCopyElement = (FileCopyPackagingElement) element[ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")[ CD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_7 $$ int i = path.indexOf('/')[ FD ]
Line_27 $$ final VirtualFile sourceRoot = ((FileOrDirectoryCopyPackagingElement<?>) element).findFile()-->Line_34 $$ final VirtualFile sourceFile = sourceRoot.findFileByRelativePath(path)[ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_32 $$ final CompilerConfiguration compilerConfiguration = CompilerConfiguration.getInstance(context.getProject())[ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_33 $$ for (VirtualFile sourceRoot : ((ModuleOutputPackagingElement) element).getSourceRoots(context)) [ FD ]
Line_4 $$ if (path.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_34 $$ final VirtualFile sourceFile = sourceRoot.findFileByRelativePath(path)-->Line_35 $$ if (sourceFile != null && compilerConfiguration.isResourceFile(sourceFile)) [ FD ]
Line_17 $$ final CompositePackagingElement<?> compositeElement = (CompositePackagingElement<?>) element-->Line_18 $$ if (firstName.equals(compositeElement.getName())) [ FD ]
Line_35 $$ if (sourceFile != null && compilerConfiguration.isResourceFile(sourceFile)) -->Line_36 $$ result.add(sourceFile)[ CD ]
Line_10 $$ final List<VirtualFile> result = new SmartList<VirtualFile>()-->Line_36 $$ result.add(sourceFile)[ FD ]
Line_17 $$ final CompositePackagingElement<?> compositeElement = (CompositePackagingElement<?>) element-->Line_19 $$ result.addAll(findSourceFilesByOutputPath(compositeElement, tail, context, artifactType))[ FD ]
Line_21 $$ if (element instanceof FileCopyPackagingElement) -->Line_26 $$ if (element instanceof DirectoryCopyPackagingElement || element instanceof ExtractedDirectoryPackagingElement) [ CD ]
Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")-->Line_34 $$ final VirtualFile sourceFile = sourceRoot.findFileByRelativePath(path)[ FD ]
Line_11 $$ processElementsWithSubstitutions(parent.getChildren(), context, artifactType, PackagingElementPath.EMPTY, new PackagingElementProcessor<PackagingElement<?>>() -->Line_40 $$ return true[ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_8 $$ final String firstName = i != -1 ? path.substring(0, i) : path[ CD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_43 $$ return result[ CD ]
Line_32 $$ final CompilerConfiguration compilerConfiguration = CompilerConfiguration.getInstance(context.getProject())-->Line_35 $$ if (sourceFile != null && compilerConfiguration.isResourceFile(sourceFile)) [ FD ]
Line_2 $$ public static List<VirtualFile> findSourceFilesByOutputPath(CompositePackagingElement<?> parent, final String outputPath, final PackagingElementResolvingContext context, final ArtifactType artifactType) -->Line_3 $$ final String path = StringUtil.trimStart(outputPath, "/")[ FD ]
Line_10 $$ final List<VirtualFile> result = new SmartList<VirtualFile>()-->Line_24 $$ ContainerUtil.addIfNotNull(fileCopyElement.findFile(), result)[ FD ]
Line_26 $$ if (element instanceof DirectoryCopyPackagingElement || element instanceof ExtractedDirectoryPackagingElement) -->Line_27 $$ final VirtualFile sourceRoot = ((FileOrDirectoryCopyPackagingElement<?>) element).findFile()[ CD ]
