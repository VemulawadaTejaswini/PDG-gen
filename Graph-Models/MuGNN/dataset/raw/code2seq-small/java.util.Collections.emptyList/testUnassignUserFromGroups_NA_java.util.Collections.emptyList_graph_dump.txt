Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_7 $$ List<Group> groups = user.getGroups()[ CD ]
Line_4 $$ long[] standardGroupIds = addStandardGroups()-->Line_13 $$ MembershipPolicyTestUtil.updateUser(user, null, null, standardGroupIds, null, Collections.<UserGroupRole>emptyList())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_13 $$ MembershipPolicyTestUtil.updateUser(user, null, null, standardGroupIds, null, Collections.<UserGroupRole>emptyList())[ CD ]
Line_7 $$ List<Group> groups = user.getGroups()-->Line_14 $$ groups = user.getGroups()[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_14 $$ groups = user.getGroups()[ CD ]
Line_14 $$ groups = user.getGroups()-->Line_15 $$ Assert.assertEquals(userGroupIds.length - 1, groups.size())[ FD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_10 $$ MembershipPolicyTestUtil.updateUser(user, null, null, userGroupIds, null, Collections.<UserGroupRole>emptyList())[ FD ]
Line_9 $$ long[] userGroupIds = ArrayUtil.append(standardGroupIds, requiredGroupIds, new long[] -->Line_10 $$ MembershipPolicyTestUtil.updateUser(user, null, null, userGroupIds, null, Collections.<UserGroupRole>emptyList())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_9 $$ long[] userGroupIds = ArrayUtil.append(standardGroupIds, requiredGroupIds, new long[] [ CD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_10 $$ MembershipPolicyTestUtil.updateUser(user, null, null, userGroupIds, null, Collections.<UserGroupRole>emptyList())[ CD ]
Line_7 $$ List<Group> groups = user.getGroups()-->Line_15 $$ Assert.assertEquals(userGroupIds.length - 1, groups.size())[ FD ]
Line_11 $$ groups = user.getGroups()-->Line_15 $$ Assert.assertEquals(userGroupIds.length - 1, groups.size())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_12 $$ Assert.assertEquals(userGroupIds.length, groups.size())[ CD ]
Line_11 $$ groups = user.getGroups()-->Line_14 $$ groups = user.getGroups()[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_3 $$ long[] userIds = addUsers()[ CD ]
Line_4 $$ long[] standardGroupIds = addStandardGroups()-->Line_9 $$ long[] userGroupIds = ArrayUtil.append(standardGroupIds, requiredGroupIds, new long[] [ FD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_7 $$ List<Group> groups = user.getGroups()[ FD ]
Line_7 $$ List<Group> groups = user.getGroups()-->Line_11 $$ groups = user.getGroups()[ FD ]
Line_7 $$ List<Group> groups = user.getGroups()-->Line_12 $$ Assert.assertEquals(userGroupIds.length, groups.size())[ FD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_11 $$ groups = user.getGroups()[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_4 $$ long[] standardGroupIds = addStandardGroups()[ CD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_15 $$ Assert.assertEquals(userGroupIds.length - 1, groups.size())[ CD ]
Line_5 $$ long[] requiredGroupIds = addRequiredGroups()-->Line_9 $$ long[] userGroupIds = ArrayUtil.append(standardGroupIds, requiredGroupIds, new long[] [ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_5 $$ long[] requiredGroupIds = addRequiredGroups()[ CD ]
Line_7 $$ List<Group> groups = user.getGroups()-->Line_8 $$ Assert.assertEquals(1, groups.size())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_11 $$ groups = user.getGroups()[ CD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_14 $$ groups = user.getGroups()[ FD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_9 $$ long[] userGroupIds = ArrayUtil.append(standardGroupIds, requiredGroupIds, new long[] [ FD ]
Line_11 $$ groups = user.getGroups()-->Line_12 $$ Assert.assertEquals(userGroupIds.length, groups.size())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])[ CD ]
Line_6 $$ User user = UserLocalServiceUtil.getUser(userIds[0])-->Line_13 $$ MembershipPolicyTestUtil.updateUser(user, null, null, standardGroupIds, null, Collections.<UserGroupRole>emptyList())[ FD ]
Line_2 $$ public void testUnassignUserFromGroups() throws Exception -->Line_8 $$ Assert.assertEquals(1, groups.size())[ CD ]
