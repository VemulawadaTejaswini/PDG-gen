Line_21 $$ if (content == null) -->Line_22 $$ GithubNotifications.showWarning(project, FAILED_TO_CREATE_GIST, "Couldn't read the contents of the file " + file)[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_28 $$ String filename = addPrefix(file.getName(), prefix, false)[ FD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_13 $$ return new String(file.contentsToByteArray(), file.getCharset())[ FD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_22 $$ GithubNotifications.showWarning(project, FAILED_TO_CREATE_GIST, "Couldn't read the contents of the file " + file)[ FD ]
Line_6 $$ String content = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_25 $$ if (StringUtil.isEmptyOrSpaces(content)) [ FD ]
Line_21 $$ if (content == null) -->Line_23 $$ return Collections.emptyList()[ CD ]
Line_10 $$ if (document != null) -->Line_11 $$ return document.getText()[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_21 $$ if (content == null) [ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_4 $$ return getContentFromDirectory(file, project, prefix)[ FD ]
Line_6 $$ String content = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_21 $$ if (content == null) [ FD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_28 $$ String filename = addPrefix(file.getName(), prefix, false)[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_29 $$ return Collections.singletonList(new FileContent(filename, content))[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_6 $$ String content = ApplicationManager.getApplication().runReadAction(new Computable<String>() [ CD ]
Line_3 $$ if (file.isDirectory()) -->Line_4 $$ return getContentFromDirectory(file, project, prefix)[ CD ]
Line_9 $$ Document document = FileDocumentManager.getInstance().getDocument(file)-->Line_10 $$ if (document != null) [ FD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_25 $$ if (StringUtil.isEmptyOrSpaces(content)) [ CD ]
Line_9 $$ Document document = FileDocumentManager.getInstance().getDocument(file)-->Line_11 $$ return document.getText()[ FD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_3 $$ if (file.isDirectory()) [ CD ]
Line_25 $$ if (StringUtil.isEmptyOrSpaces(content)) -->Line_26 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_3 $$ if (file.isDirectory()) [ FD ]
Line_10 $$ if (document != null) -->Line_13 $$ return new String(file.contentsToByteArray(), file.getCharset())[ CD ]
Line_2 $$ private static List<FileContent> getContentFromFile(@NotNull final VirtualFile file, @NotNull Project project, @Nullable String prefix) -->Line_9 $$ Document document = FileDocumentManager.getInstance().getDocument(file)[ FD ]
