Line_10 $$ if (it.next().equals(37))-->Line_11 $$ backBfs = it.backtrace().toList()[ CD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_9 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) [ FD ]
Line_6 $$ backDfs = it.backtrace().toList()-->Line_13 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backDfs)[ FD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_6 $$ backDfs = it.backtrace().toList()[ FD ]
Line_3 $$ List<Integer> backDfs = Collections.emptyList()-->Line_6 $$ backDfs = it.backtrace().toList()[ FD ]
Line_9 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_11 $$ backBfs = it.backtrace().toList()[ FD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) [ CD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_3 $$ List<Integer> backDfs = Collections.emptyList()[ CD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_5 $$ if (it.next().equals(37))[ FD ]
Line_8 $$ List<Integer> backBfs = Collections.emptyList()-->Line_11 $$ backBfs = it.backtrace().toList()[ FD ]
Line_11 $$ backBfs = it.backtrace().toList()-->Line_14 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backBfs)[ FD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_14 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backBfs)[ CD ]
Line_3 $$ List<Integer> backDfs = Collections.emptyList()-->Line_13 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backDfs)[ FD ]
Line_5 $$ if (it.next().equals(37))-->Line_6 $$ backDfs = it.backtrace().toList()[ CD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_9 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) [ CD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_11 $$ backBfs = it.backtrace().toList()[ FD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_8 $$ List<Integer> backBfs = Collections.emptyList()[ CD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_5 $$ if (it.next().equals(37))[ CD ]
Line_9 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_10 $$ if (it.next().equals(37))[ CD ]
Line_9 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.TRACING_BFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_10 $$ if (it.next().equals(37))[ FD ]
Line_2 $$ public void testSimplePreOrderDfsBacktrace() -->Line_13 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backDfs)[ CD ]
Line_4 $$ for (TreeTraversal.TracingIt<Integer> it = numTraverser2(TreeTraversal.PRE_ORDER_DFS).fun(1).typedIterator(); it.hasNext(); ) -->Line_10 $$ if (it.next().equals(37))[ FD ]
Line_8 $$ List<Integer> backBfs = Collections.emptyList()-->Line_14 $$ assertEquals(Arrays.asList(37, 12, 4, 1), backBfs)[ FD ]
