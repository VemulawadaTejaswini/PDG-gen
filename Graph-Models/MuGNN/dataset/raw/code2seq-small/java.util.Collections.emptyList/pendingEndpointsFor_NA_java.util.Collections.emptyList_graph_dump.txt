Line_6 $$ Set<InetAddress> endpoints = new HashSet()-->Line_9 $$ endpoints.addAll(entry.getValue())[ FD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_8 $$ if (entry.getKey().contains(token))[ FD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_3 $$ Map<Range<Token>, Collection<InetAddress>> ranges = getPendingRanges(keyspaceName)[ CD ]
Line_3 $$ Map<Range<Token>, Collection<InetAddress>> ranges = getPendingRanges(keyspaceName)-->Line_4 $$ if (ranges.isEmpty())[ FD ]
Line_7 $$ for (Map.Entry<Range<Token>, Collection<InetAddress>> entry : ranges.entrySet()) -->Line_9 $$ endpoints.addAll(entry.getValue())[ FD ]
Line_7 $$ for (Map.Entry<Range<Token>, Collection<InetAddress>> entry : ranges.entrySet()) -->Line_8 $$ if (entry.getKey().contains(token))[ FD ]
Line_8 $$ if (entry.getKey().contains(token))-->Line_9 $$ endpoints.addAll(entry.getValue())[ CD ]
Line_3 $$ Map<Range<Token>, Collection<InetAddress>> ranges = getPendingRanges(keyspaceName)-->Line_7 $$ for (Map.Entry<Range<Token>, Collection<InetAddress>> entry : ranges.entrySet()) [ FD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_4 $$ if (ranges.isEmpty())[ CD ]
Line_4 $$ if (ranges.isEmpty())-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_3 $$ Map<Range<Token>, Collection<InetAddress>> ranges = getPendingRanges(keyspaceName)[ FD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_11 $$ return endpoints[ CD ]
Line_2 $$ public Collection<InetAddress> pendingEndpointsFor(Token token, String keyspaceName) -->Line_6 $$ Set<InetAddress> endpoints = new HashSet()[ CD ]
