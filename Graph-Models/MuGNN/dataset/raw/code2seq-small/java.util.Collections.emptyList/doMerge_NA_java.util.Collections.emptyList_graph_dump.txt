Line_12 $$ for (GitRepository repository : repositories) -->Line_14 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)[ FD ]
Line_13 $$ GitSimpleEventDetector mergeConflict = new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT)-->Line_16 $$ if (mergeConflict.hasHappened()) [ FD ]
Line_13 $$ GitSimpleEventDetector mergeConflict = new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT)-->Line_14 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)[ FD ]
Line_16 $$ if (mergeConflict.hasHappened()) -->Line_18 $$ refresh(repository)[ CD ]
Line_12 $$ for (GitRepository repository : repositories) -->Line_17 $$ myConflictedRepositories.put(repository, Boolean.TRUE)[ FD ]
Line_16 $$ if (mergeConflict.hasHappened()) -->Line_21 $$ fatalError(getCommonErrorTitle(), result.getErrorOutputAsJoinedString())[ CD ]
Line_14 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)-->Line_21 $$ fatalError(getCommonErrorTitle(), result.getErrorOutputAsJoinedString())[ FD ]
Line_16 $$ if (mergeConflict.hasHappened()) -->Line_22 $$ return false[ CD ]
Line_14 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)-->Line_15 $$ if (!result.success()) [ FD ]
Line_15 $$ if (!result.success()) -->Line_26 $$ markSuccessful(repository)[ CD ]
Line_12 $$ for (GitRepository repository : repositories) -->Line_18 $$ refresh(repository)[ FD ]
Line_16 $$ if (mergeConflict.hasHappened()) -->Line_19 $$ markSuccessful(repository)[ CD ]
Line_15 $$ if (!result.success()) -->Line_25 $$ refresh(repository)[ CD ]
Line_12 $$ for (GitRepository repository : repositories) -->Line_25 $$ refresh(repository)[ FD ]
Line_12 $$ for (GitRepository repository : repositories) -->Line_26 $$ markSuccessful(repository)[ FD ]
Line_12 $$ for (GitRepository repository : repositories) -->Line_19 $$ markSuccessful(repository)[ FD ]
Line_15 $$ if (!result.success()) -->Line_16 $$ if (mergeConflict.hasHappened()) [ CD ]
Line_16 $$ if (mergeConflict.hasHappened()) -->Line_17 $$ myConflictedRepositories.put(repository, Boolean.TRUE)[ CD ]
