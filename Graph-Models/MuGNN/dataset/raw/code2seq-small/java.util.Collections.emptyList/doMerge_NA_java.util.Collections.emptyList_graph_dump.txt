Line_7 $$ if (mergeConflict.hasHappened()) -->Line_8 $$ myConflictedRepositories.put(repository, Boolean.TRUE)[ CD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_8 $$ myConflictedRepositories.put(repository, Boolean.TRUE)[ FD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_16 $$ refresh(repository)[ FD ]
Line_6 $$ if (!result.success()) -->Line_17 $$ markSuccessful(repository)[ CD ]
Line_2 $$ private boolean doMerge(@NotNull Collection<GitRepository> repositories) -->Line_20 $$ return true[ CD ]
Line_5 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)-->Line_12 $$ fatalError(getCommonErrorTitle(), result.getErrorOutputAsJoinedString())[ FD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_17 $$ markSuccessful(repository)[ FD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_5 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)[ FD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_10 $$ markSuccessful(repository)[ FD ]
Line_7 $$ if (mergeConflict.hasHappened()) -->Line_9 $$ refresh(repository)[ CD ]
Line_4 $$ GitSimpleEventDetector mergeConflict = new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT)-->Line_7 $$ if (mergeConflict.hasHappened()) [ FD ]
Line_7 $$ if (mergeConflict.hasHappened()) -->Line_13 $$ return false[ CD ]
Line_7 $$ if (mergeConflict.hasHappened()) -->Line_12 $$ fatalError(getCommonErrorTitle(), result.getErrorOutputAsJoinedString())[ CD ]
Line_7 $$ if (mergeConflict.hasHappened()) -->Line_10 $$ markSuccessful(repository)[ CD ]
Line_6 $$ if (!result.success()) -->Line_16 $$ refresh(repository)[ CD ]
Line_4 $$ GitSimpleEventDetector mergeConflict = new GitSimpleEventDetector(GitSimpleEventDetector.Event.MERGE_CONFLICT)-->Line_5 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)[ FD ]
Line_3 $$ for (GitRepository repository : repositories) -->Line_9 $$ refresh(repository)[ FD ]
Line_6 $$ if (!result.success()) -->Line_7 $$ if (mergeConflict.hasHappened()) [ CD ]
Line_5 $$ GitCommandResult result = myGit.merge(repository, myBranchToMerge, Collections.<String>emptyList(), mergeConflict)-->Line_6 $$ if (!result.success()) [ FD ]
