Line_6 $$ new Task.Modal(project, "Scanning for Roots", true) -->Line_12 $$ final Collection<DetectedLibraryRoot> roots = detector.detectRoots(rootCandidate, indicator)[ FD ]
Line_12 $$ final Collection<DetectedLibraryRoot> roots = detector.detectRoots(rootCandidate, indicator)-->Line_13 $$ if (!roots.isEmpty() && allRootsHaveOneTypeAndEqualToOrAreDirectParentOf(roots, rootCandidate)) [ FD ]
Line_22 $$ final String typeName = detector.getRootTypeName(type)-->Line_50 $$ types.put(StringUtil.capitalizeWords(typeName, true), Pair.create(type, isJarDirectory))[ FD ]
Line_21 $$ for (LibraryRootType type : root.getTypes()) -->Line_22 $$ final String typeName = detector.getRootTypeName(type)[ FD ]
Line_44 $$ if (result.isEmpty() && rootTypesAllowedToBeSelectedByUserIfNothingIsDetected.length > 0) -->Line_59 $$ if (parentComponent != null) [ CD ]
Line_49 $$ if (typeName != null) -->Line_50 $$ types.put(StringUtil.capitalizeWords(typeName, true), Pair.create(type, isJarDirectory))[ CD ]
Line_4 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()-->Line_16 $$ result.add(new OrderRoot(root.getFile(), libraryRootType.getType(), libraryRootType.isJarDirectory()))[ FD ]
Line_34 $$ if (!suggestedRoots.isEmpty()) -->Line_36 $$ if (!dialog.showAndGet()) [ CD ]
Line_4 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()-->Line_41 $$ result.add(new OrderRoot(rootInfo.getDetectedRoot().getFile(), selectedRootType.getType(), selectedRootType.isJarDirectory()))[ FD ]
Line_4 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()-->Line_44 $$ if (result.isEmpty() && rootTypesAllowedToBeSelectedByUserIfNothingIsDetected.length > 0) [ FD ]
Line_21 $$ for (LibraryRootType type : root.getTypes()) -->Line_23 $$ LOG.assertTrue(typeName != null, "Unexpected root type " + type.getType().name() + (type.isJarDirectory() ? " (JAR directory)" : "") + ", detectors: " + detector)[ FD ]
Line_11 $$ for (VirtualFile rootCandidate : rootCandidates) -->Line_13 $$ if (!roots.isEmpty() && allRootsHaveOneTypeAndEqualToOrAreDirectParentOf(roots, rootCandidate)) [ FD ]
Line_21 $$ for (LibraryRootType type : root.getTypes()) -->Line_24 $$ names.put(type, typeName)[ FD ]
Line_11 $$ for (VirtualFile rootCandidate : rootCandidates) -->Line_12 $$ final Collection<DetectedLibraryRoot> roots = detector.detectRoots(rootCandidate, indicator)[ FD ]
Line_44 $$ if (result.isEmpty() && rootTypesAllowedToBeSelectedByUserIfNothingIsDetected.length > 0) -->Line_57 $$ String description = XmlStringUtil.wrapInHtml(ApplicationNamesInfo.getInstance().getProductName() + " cannot determine what kind of files the chosen items contain.<br>" + "Choose the appropriate categories from the list.")[ CD ]
Line_36 $$ if (!dialog.showAndGet()) -->Line_37 $$ return Collections.emptyList()[ CD ]
Line_14 $$ for (DetectedLibraryRoot root : roots) -->Line_21 $$ for (LibraryRootType type : root.getTypes()) [ FD ]
Line_44 $$ if (result.isEmpty() && rootTypesAllowedToBeSelectedByUserIfNothingIsDetected.length > 0) -->Line_54 $$ LOG.assertTrue(!types.isEmpty(), "No allowed root types found for " + detector)[ CD ]
Line_14 $$ for (DetectedLibraryRoot root : roots) -->Line_16 $$ result.add(new OrderRoot(root.getFile(), libraryRootType.getType(), libraryRootType.isJarDirectory()))[ FD ]
Line_15 $$ final LibraryRootType libraryRootType = root.getTypes().get(0)-->Line_16 $$ result.add(new OrderRoot(root.getFile(), libraryRootType.getType(), libraryRootType.isJarDirectory()))[ FD ]
Line_5 $$ final List<SuggestedChildRootInfo> suggestedRoots = new ArrayList<SuggestedChildRootInfo>()-->Line_34 $$ if (!suggestedRoots.isEmpty()) [ FD ]
Line_22 $$ final String typeName = detector.getRootTypeName(type)-->Line_24 $$ names.put(type, typeName)[ FD ]
Line_20 $$ final HashMap<LibraryRootType, String> names = new HashMap<LibraryRootType, String>()-->Line_24 $$ names.put(type, typeName)[ FD ]
Line_22 $$ final String typeName = detector.getRootTypeName(type)-->Line_49 $$ if (typeName != null) [ FD ]
Line_5 $$ final List<SuggestedChildRootInfo> suggestedRoots = new ArrayList<SuggestedChildRootInfo>()-->Line_26 $$ suggestedRoots.add(new SuggestedChildRootInfo(rootCandidate, root, names))[ FD ]
Line_4 $$ final List<OrderRoot> result = new ArrayList<OrderRoot>()-->Line_67 $$ result.add(new OrderRoot(candidate, pair.getFirst(), pair.getSecond()))[ FD ]
Line_21 $$ for (LibraryRootType type : root.getTypes()) -->Line_50 $$ types.put(StringUtil.capitalizeWords(typeName, true), Pair.create(type, isJarDirectory))[ FD ]
Line_14 $$ for (DetectedLibraryRoot root : roots) -->Line_15 $$ final LibraryRootType libraryRootType = root.getTypes().get(0)[ FD ]
