Line_3 $$ String text = (String) args.get("initial")-->Line_12 $$ info.ranges = !isEmpty(ranges) ? ranges : Arrays.asList(TextRange.from(0, text.length()))[ FD ]
Line_17 $$ foldingModel.runBatchFoldingOperation(new Runnable() -->Line_22 $$ if (region != null)[ CD ]
Line_15 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_21 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)[ FD ]
Line_15 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_17 $$ foldingModel.runBatchFoldingOperation(new Runnable() [ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_38 $$ ArrangementEngine engine = ServiceManager.getService(myFixture.getProject(), ArrangementEngine.class)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_39 $$ engine.arrange(myFixture.getEditor(), myFixture.getFile(), info.ranges)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_14 $$ myFixture.configureByText(fileType, info.text)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_11 $$ if (isEmpty(info.ranges)) [ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_15 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()[ CD ]
Line_22 $$ if (region != null)-->Line_23 $$ region.setExpanded(false)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_3 $$ String text = (String) args.get("initial")[ FD ]
Line_21 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)-->Line_23 $$ region.setExpanded(false)[ FD ]
Line_3 $$ String text = (String) args.get("initial")-->Line_7 $$ Info info = parse(text)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_42 $$ assertEquals(info.text, myFixture.getEditor().getDocument().getText())[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_32 $$ List<ArrangementSectionRule> sectionRules = getSectionRules(rules)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_37 $$ settings.setArrangementSettings(arrangementSettings)[ CD ]
Line_8 $$ if (!isEmpty(ranges) && !isEmpty(info.ranges)) -->Line_9 $$ fail("Duplicate ranges set: explicit: " + ranges + ", " + "derived: " + info.ranges + ", text:\n" + text)[ CD ]
Line_15 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_44 $$ FoldRegion foldRegion = foldingModel.getCollapsedRegionAtOffset(it.start)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_4 $$ String expected = (String) args.get("expected")[ FD ]
Line_11 $$ if (isEmpty(info.ranges)) -->Line_12 $$ info.ranges = !isEmpty(ranges) ? ranges : Arrays.asList(TextRange.from(0, text.length()))[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_31 $$ List<?> rules = (List<?>) args.get("rules")[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_35 $$ CommonCodeStyleSettings settings = CodeStyleSettingsManager.getInstance(myFixture.getProject()).getCurrentSettings().getCommonSettings(language)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_4 $$ String expected = (String) args.get("expected")[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_29 $$ if (groupingRules == null)[ CD ]
Line_17 $$ foldingModel.runBatchFoldingOperation(new Runnable() -->Line_21 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)[ CD ]
Line_21 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)-->Line_22 $$ if (region != null)[ FD ]
Line_29 $$ if (groupingRules == null)-->Line_30 $$ groupingRules = Collections.emptyList()[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_3 $$ String text = (String) args.get("initial")[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_8 $$ if (!isEmpty(ranges) && !isEmpty(info.ranges)) [ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_7 $$ Info info = parse(text)[ CD ]
