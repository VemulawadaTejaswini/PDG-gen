Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_6 $$ Info info = parse(text)[ CD ]
Line_14 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_38 $$ FoldRegion foldRegion = foldingModel.getCollapsedRegionAtOffset(it.start)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_30 $$ CommonCodeStyleSettings settings = CodeStyleSettingsManager.getInstance(myFixture.getProject()).getCurrentSettings().getCommonSettings(language)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_34 $$ engine.arrange(myFixture.getEditor(), myFixture.getFile(), info.ranges)[ CD ]
Line_4 $$ String expected = (String) args.get("expected")-->Line_35 $$ info = parse(expected)[ FD ]
Line_7 $$ if (!isEmpty(ranges) && !isEmpty(info.ranges)) -->Line_8 $$ fail("Duplicate ranges set: explicit: " + ranges + ", " + "derived: " + info.ranges + ", text:\n" + text)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_27 $$ List<?> rules = (List<?>) args.get("rules")[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_33 $$ ArrangementEngine engine = ServiceManager.getService(myFixture.getProject(), ArrangementEngine.class)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_4 $$ String expected = (String) args.get("expected")[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_14 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_29 $$ List<StdArrangementRuleAliasToken> aliases = (List<StdArrangementRuleAliasToken>) args.get("aliases")[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_10 $$ if (isEmpty(info.ranges)) [ CD ]
Line_18 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)-->Line_19 $$ if (region != null)[ FD ]
Line_19 $$ if (region != null)-->Line_20 $$ region.setExpanded(false)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_32 $$ settings.setArrangementSettings(arrangementSettings)[ CD ]
Line_18 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)-->Line_20 $$ region.setExpanded(false)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_3 $$ String text = (String) args.get("initial")[ CD ]
Line_3 $$ String text = (String) args.get("initial")-->Line_6 $$ Info info = parse(text)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_28 $$ List<ArrangementSectionRule> sectionRules = getSectionRules(rules)[ CD ]
Line_25 $$ if (groupingRules == null)-->Line_26 $$ groupingRules = Collections.emptyList()[ CD ]
Line_10 $$ if (isEmpty(info.ranges)) -->Line_11 $$ info.ranges = !isEmpty(ranges) ? ranges : Arrays.asList(TextRange.from(0, text.length()))[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_5 $$ List<TextRange> ranges = (List<TextRange>) args.get("ranges")[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_36 $$ assertEquals(info.text, myFixture.getEditor().getDocument().getText())[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_35 $$ info = parse(expected)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_13 $$ myFixture.configureByText(fileType, info.text)[ CD ]
Line_14 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_16 $$ foldingModel.runBatchFoldingOperation(new Runnable() [ FD ]
Line_16 $$ foldingModel.runBatchFoldingOperation(new Runnable() -->Line_18 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)[ CD ]
Line_5 $$ List<TextRange> ranges = (List<TextRange>) args.get("ranges")-->Line_7 $$ if (!isEmpty(ranges) && !isEmpty(info.ranges)) [ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_7 $$ if (!isEmpty(ranges) && !isEmpty(info.ranges)) [ CD ]
Line_14 $$ final FoldingModel foldingModel = myFixture.getEditor().getFoldingModel()-->Line_18 $$ FoldRegion region = foldingModel.addFoldRegion(foldingInfo.start, foldingInfo.end, foldingInfo.placeholder)[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_24 $$ List<ArrangementGroupingRule> groupingRules = (List<ArrangementGroupingRule>) args.get("groups")[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_25 $$ if (groupingRules == null)[ CD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_4 $$ String expected = (String) args.get("expected")[ FD ]
Line_5 $$ List<TextRange> ranges = (List<TextRange>) args.get("ranges")-->Line_11 $$ info.ranges = !isEmpty(ranges) ? ranges : Arrays.asList(TextRange.from(0, text.length()))[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_5 $$ List<TextRange> ranges = (List<TextRange>) args.get("ranges")[ CD ]
Line_3 $$ String text = (String) args.get("initial")-->Line_11 $$ info.ranges = !isEmpty(ranges) ? ranges : Arrays.asList(TextRange.from(0, text.length()))[ FD ]
Line_2 $$ protected void doTest(@NotNull Map<String, ?> args) -->Line_3 $$ String text = (String) args.get("initial")[ FD ]
Line_16 $$ foldingModel.runBatchFoldingOperation(new Runnable() -->Line_19 $$ if (region != null)[ CD ]
