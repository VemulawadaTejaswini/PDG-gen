Line_4 $$ MarkupModel markup = DocumentMarkupModel.forDocument(document, project, true)-->Line_5 $$ return ObjectUtils.notNull(markup.getUserData(MARKERS_IN_EDITOR_DOCUMENT_KEY), Collections.<LineMarkerInfo>emptyList())[ FD ]
Line_2 $$ public static List<LineMarkerInfo> getLineMarkers(@NotNull Document document, @NotNull Project project) -->Line_5 $$ return ObjectUtils.notNull(markup.getUserData(MARKERS_IN_EDITOR_DOCUMENT_KEY), Collections.<LineMarkerInfo>emptyList())[ CD ]
Line_2 $$ public static List<LineMarkerInfo> getLineMarkers(@NotNull Document document, @NotNull Project project) -->Line_4 $$ MarkupModel markup = DocumentMarkupModel.forDocument(document, project, true)[ FD ]
Line_2 $$ public static List<LineMarkerInfo> getLineMarkers(@NotNull Document document, @NotNull Project project) -->Line_4 $$ MarkupModel markup = DocumentMarkupModel.forDocument(document, project, true)[ CD ]
Line_2 $$ public static List<LineMarkerInfo> getLineMarkers(@NotNull Document document, @NotNull Project project) -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
