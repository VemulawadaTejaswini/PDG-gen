Line_2 $$ public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_13 $$ List<ColumnOrSuperColumn> result = getSliceInternal(keyspace, key, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_2 $$ public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_7 $$ logger.trace("get_slice")[ CD ]
Line_2 $$ public List<ColumnOrSuperColumn> get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_3 $$ if (startSessionIfRequested()) [ CD ]
Line_10 $$ ClientState cState = state()-->Line_11 $$ String keyspace = cState.getKeyspace()[ FD ]
Line_11 $$ String keyspace = cState.getKeyspace()-->Line_12 $$ state().hasColumnFamilyAccess(keyspace, column_parent.column_family, Permission.SELECT)[ FD ]
Line_11 $$ String keyspace = cState.getKeyspace()-->Line_13 $$ List<ColumnOrSuperColumn> result = getSliceInternal(keyspace, key, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_10 $$ ClientState cState = state()-->Line_13 $$ List<ColumnOrSuperColumn> result = getSliceInternal(keyspace, key, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ CD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_5 $$ Tracing.instance.begin("get_slice", traceParameters)[ CD ]
Line_4 $$ Map<String, String> traceParameters = ImmutableMap.of("key", ByteBufferUtil.bytesToHex(key), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())-->Line_5 $$ Tracing.instance.begin("get_slice", traceParameters)[ FD ]
