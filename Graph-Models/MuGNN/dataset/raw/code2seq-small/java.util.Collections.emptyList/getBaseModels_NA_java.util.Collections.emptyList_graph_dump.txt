Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_7 $$ List<T> slaveBaseModels = new ArrayList(slavePrimaryKeys.length)[ CD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_16 $$ Collections.sort(slaveBaseModels, obc)[ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_15 $$ if (obc != null) [ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_4 $$ if (slavePrimaryKeys.length == 0) [ CD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_10 $$ slaveBaseModels.add(slaveBasePersistence.findByPrimaryKey(slavePrimaryKey))[ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_18 $$ return ListUtil.subList(slaveBaseModels, start, end)[ CD ]
Line_4 $$ if (slavePrimaryKeys.length == 0) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_15 $$ if (obc != null) -->Line_16 $$ Collections.sort(slaveBaseModels, obc)[ CD ]
Line_7 $$ List<T> slaveBaseModels = new ArrayList(slavePrimaryKeys.length)-->Line_10 $$ slaveBaseModels.add(slaveBasePersistence.findByPrimaryKey(slavePrimaryKey))[ FD ]
Line_7 $$ List<T> slaveBaseModels = new ArrayList(slavePrimaryKeys.length)-->Line_16 $$ Collections.sort(slaveBaseModels, obc)[ FD ]
Line_9 $$ for (long slavePrimaryKey : slavePrimaryKeys) -->Line_10 $$ slaveBaseModels.add(slaveBasePersistence.findByPrimaryKey(slavePrimaryKey))[ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_3 $$ long[] slavePrimaryKeys = getPrimaryKeys(portalCache, mappingSqlQuery, masterPrimaryKey, true)[ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_3 $$ long[] slavePrimaryKeys = getPrimaryKeys(portalCache, mappingSqlQuery, masterPrimaryKey, true)[ CD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_15 $$ if (obc != null) [ CD ]
Line_7 $$ List<T> slaveBaseModels = new ArrayList(slavePrimaryKeys.length)-->Line_18 $$ return ListUtil.subList(slaveBaseModels, start, end)[ FD ]
Line_2 $$ protected static <T extends BaseModel<T>> List<T> getBaseModels(PortalCache<Long, long[]> portalCache, MappingSqlQuery<Long> mappingSqlQuery, long masterPrimaryKey, BasePersistence<T> slaveBasePersistence, int start, int end, OrderByComparator<T> obc) -->Line_18 $$ return ListUtil.subList(slaveBaseModels, start, end)[ FD ]
