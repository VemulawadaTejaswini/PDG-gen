Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_3 $$ final PsiElement element = candidate.getElement()[ FD ]
Line_10 $$ if (importedName != null) -->Line_15 $$ if (importReference != null) [ CD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_11 $$ if (!(matcher.prefixMatches(importedName) || element instanceof PsiMethod && getterMatches(matcher, (PsiMethod) element, importedName) || element instanceof PsiMethod && setterMatches(matcher, (PsiMethod) element, importedName))) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_23 $$ return generateLookupForImportedElement(candidate, GroovyPropertyUtils.getAccessorPrefix((PsiMethod) element) + GroovyPropertyUtils.capitalize(importedName))[ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_20 $$ return generateLookupForImportedElement(candidate, importedName)[ FD ]
Line_3 $$ final PsiElement element = candidate.getElement()-->Line_30 $$ String name = element instanceof PsiNamedElement ? ((PsiNamedElement) element).getName() : element.getText()[ FD ]
Line_30 $$ String name = element instanceof PsiNamedElement ? ((PsiNamedElement) element).getName() : element.getText()-->Line_31 $$ if (name == null || !matcher.prefixMatches(name)) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_31 $$ if (name == null || !matcher.prefixMatches(name)) [ CD ]
Line_14 $$ final GrCodeReferenceElement importReference = ((GrImportStatement) context).getImportReference()-->Line_17 $$ for (GroovyResolveResult r : importReference.multiResolve(false)) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_4 $$ final PsiElement context = candidate.getCurrentFileResolveContext()[ CD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_38 $$ return Arrays.asList(setupLookupBuilder(element, candidate.getSubstitutor(), builder, position))[ FD ]
Line_3 $$ final PsiElement element = candidate.getElement()-->Line_34 $$ if (element instanceof PsiClass) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_31 $$ if (name == null || !matcher.prefixMatches(name)) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_4 $$ final PsiElement context = candidate.getCurrentFileResolveContext()[ FD ]
Line_10 $$ if (importedName != null) -->Line_11 $$ if (!(matcher.prefixMatches(importedName) || element instanceof PsiMethod && getterMatches(matcher, (PsiMethod) element, importedName) || element instanceof PsiMethod && setterMatches(matcher, (PsiMethod) element, importedName))) [ CD ]
Line_17 $$ for (GroovyResolveResult r : importReference.multiResolve(false)) -->Line_18 $$ final PsiElement resolved = r.getElement()[ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_30 $$ String name = element instanceof PsiNamedElement ? ((PsiNamedElement) element).getName() : element.getText()[ CD ]
Line_31 $$ if (name == null || !matcher.prefixMatches(name)) -->Line_32 $$ return Collections.emptyList()[ CD ]
Line_37 $$ LookupElementBuilder builder = LookupElementBuilder.create(element instanceof PsiPackage ? element : candidate, name)-->Line_38 $$ return Arrays.asList(setupLookupBuilder(element, candidate.getSubstitutor(), builder, position))[ FD ]
Line_5 $$ if (context instanceof GrImportStatement && element != null) -->Line_9 $$ final String importedName = ((GrImportStatement) context).getImportedName()[ CD ]
Line_18 $$ final PsiElement resolved = r.getElement()-->Line_19 $$ if (context.getManager().areElementsEquivalent(resolved, element) && (alias || !(element instanceof PsiClass))) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_5 $$ if (context instanceof GrImportStatement && element != null) [ CD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_3 $$ final PsiElement element = candidate.getElement()[ CD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_34 $$ if (element instanceof PsiClass) [ CD ]
Line_3 $$ final PsiElement element = candidate.getElement()-->Line_6 $$ if (element instanceof PsiPackage) [ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_38 $$ return Arrays.asList(setupLookupBuilder(element, candidate.getSubstitutor(), builder, position))[ CD ]
Line_3 $$ final PsiElement element = candidate.getElement()-->Line_38 $$ return Arrays.asList(setupLookupBuilder(element, candidate.getSubstitutor(), builder, position))[ FD ]
Line_15 $$ if (importReference != null) -->Line_16 $$ boolean alias = ((GrImportStatement) context).isAliasedImport()[ CD ]
Line_14 $$ final GrCodeReferenceElement importReference = ((GrImportStatement) context).getImportReference()-->Line_15 $$ if (importReference != null) [ FD ]
Line_5 $$ if (context instanceof GrImportStatement && element != null) -->Line_10 $$ if (importedName != null) [ CD ]
Line_4 $$ final PsiElement context = candidate.getCurrentFileResolveContext()-->Line_19 $$ if (context.getManager().areElementsEquivalent(resolved, element) && (alias || !(element instanceof PsiClass))) [ FD ]
Line_19 $$ if (context.getManager().areElementsEquivalent(resolved, element) && (alias || !(element instanceof PsiClass))) -->Line_20 $$ return generateLookupForImportedElement(candidate, importedName)[ CD ]
Line_19 $$ if (context.getManager().areElementsEquivalent(resolved, element) && (alias || !(element instanceof PsiClass))) -->Line_22 $$ if (resolved instanceof PsiField && element instanceof PsiMethod && GroovyPropertyUtils.isAccessorFor((PsiMethod) element, (PsiField) resolved)) [ CD ]
Line_9 $$ final String importedName = ((GrImportStatement) context).getImportedName()-->Line_23 $$ return generateLookupForImportedElement(candidate, GroovyPropertyUtils.getAccessorPrefix((PsiMethod) element) + GroovyPropertyUtils.capitalize(importedName))[ FD ]
Line_11 $$ if (!(matcher.prefixMatches(importedName) || element instanceof PsiMethod && getterMatches(matcher, (PsiMethod) element, importedName) || element instanceof PsiMethod && setterMatches(matcher, (PsiMethod) element, importedName))) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_9 $$ final String importedName = ((GrImportStatement) context).getImportedName()-->Line_11 $$ if (!(matcher.prefixMatches(importedName) || element instanceof PsiMethod && getterMatches(matcher, (PsiMethod) element, importedName) || element instanceof PsiMethod && setterMatches(matcher, (PsiMethod) element, importedName))) [ FD ]
Line_3 $$ final PsiElement element = candidate.getElement()-->Line_19 $$ if (context.getManager().areElementsEquivalent(resolved, element) && (alias || !(element instanceof PsiClass))) [ FD ]
Line_22 $$ if (resolved instanceof PsiField && element instanceof PsiMethod && GroovyPropertyUtils.isAccessorFor((PsiMethod) element, (PsiField) resolved)) -->Line_23 $$ return generateLookupForImportedElement(candidate, GroovyPropertyUtils.getAccessorPrefix((PsiMethod) element) + GroovyPropertyUtils.capitalize(importedName))[ CD ]
Line_10 $$ if (importedName != null) -->Line_14 $$ final GrCodeReferenceElement importReference = ((GrImportStatement) context).getImportReference()[ CD ]
Line_5 $$ if (context instanceof GrImportStatement && element != null) -->Line_6 $$ if (element instanceof PsiPackage) [ CD ]
Line_30 $$ String name = element instanceof PsiNamedElement ? ((PsiNamedElement) element).getName() : element.getText()-->Line_37 $$ LookupElementBuilder builder = LookupElementBuilder.create(element instanceof PsiPackage ? element : candidate, name)[ FD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_35 $$ return JavaClassNameCompletionContributor.createClassLookupItems((PsiClass) element, afterNew, new GroovyClassNameInsertHandler(), Conditions.<PsiClass>alwaysTrue())[ FD ]
Line_34 $$ if (element instanceof PsiClass) -->Line_35 $$ return JavaClassNameCompletionContributor.createClassLookupItems((PsiClass) element, afterNew, new GroovyClassNameInsertHandler(), Conditions.<PsiClass>alwaysTrue())[ CD ]
Line_6 $$ if (element instanceof PsiPackage) -->Line_7 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<? extends LookupElement> createLookupElements(@NotNull GroovyResolveResult candidate, boolean afterNew, @NotNull PrefixMatcher matcher, @Nullable PsiElement position) -->Line_37 $$ LookupElementBuilder builder = LookupElementBuilder.create(element instanceof PsiPackage ? element : candidate, name)[ CD ]
Line_9 $$ final String importedName = ((GrImportStatement) context).getImportedName()-->Line_10 $$ if (importedName != null) [ FD ]
Line_9 $$ final String importedName = ((GrImportStatement) context).getImportedName()-->Line_20 $$ return generateLookupForImportedElement(candidate, importedName)[ FD ]
