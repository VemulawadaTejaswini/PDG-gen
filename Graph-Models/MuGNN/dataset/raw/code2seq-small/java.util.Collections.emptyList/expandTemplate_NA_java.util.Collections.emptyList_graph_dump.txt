Line_2 $$ private static String expandTemplate(@NotNull String abbreviation, @NotNull PsiFile file, @NotNull Editor editor) throws EmmetException -->Line_3 $$ final CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)[ CD ]
Line_5 $$ TemplateImpl template = callback.getGeneratedTemplate()-->Line_6 $$ return template != null ? template.getTemplateText() : null[ FD ]
Line_2 $$ private static String expandTemplate(@NotNull String abbreviation, @NotNull PsiFile file, @NotNull Editor editor) throws EmmetException -->Line_6 $$ return template != null ? template.getTemplateText() : null[ CD ]
Line_2 $$ private static String expandTemplate(@NotNull String abbreviation, @NotNull PsiFile file, @NotNull Editor editor) throws EmmetException -->Line_4 $$ ZenCodingTemplate.expand(abbreviation, callback, XmlZenCodingGeneratorImpl.INSTANCE, Collections.<ZenCodingFilter>emptyList(), true, Registry.intValue("emmet.segments.limit"))[ CD ]
Line_2 $$ private static String expandTemplate(@NotNull String abbreviation, @NotNull PsiFile file, @NotNull Editor editor) throws EmmetException -->Line_4 $$ ZenCodingTemplate.expand(abbreviation, callback, XmlZenCodingGeneratorImpl.INSTANCE, Collections.<ZenCodingFilter>emptyList(), true, Registry.intValue("emmet.segments.limit"))[ FD ]
Line_2 $$ private static String expandTemplate(@NotNull String abbreviation, @NotNull PsiFile file, @NotNull Editor editor) throws EmmetException -->Line_5 $$ TemplateImpl template = callback.getGeneratedTemplate()[ CD ]
Line_3 $$ final CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_5 $$ TemplateImpl template = callback.getGeneratedTemplate()[ FD ]
Line_3 $$ final CollectCustomTemplateCallback callback = new CollectCustomTemplateCallback(editor, file)-->Line_4 $$ ZenCodingTemplate.expand(abbreviation, callback, XmlZenCodingGeneratorImpl.INSTANCE, Collections.<ZenCodingFilter>emptyList(), true, Registry.intValue("emmet.segments.limit"))[ FD ]
