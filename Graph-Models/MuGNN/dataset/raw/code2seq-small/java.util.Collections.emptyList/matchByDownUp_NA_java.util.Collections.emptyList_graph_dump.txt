Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_13 $$ assert !compiledPattern.getNodes().hasNext()[ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_36 $$ if (handler instanceof TopLevelMatchingHandler)[ CD ]
Line_38 $$ element = element.getParent()-->Line_41 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_15 $$ element = element.getParent()-->Line_19 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_9 $$ if (targetNode == null) -->Line_31 $$ MatchingHandler handler = null[ CD ]
Line_9 $$ if (targetNode == null) -->Line_45 $$ if (!(handler instanceof TopLevelMatchingHandler))[ CD ]
Line_41 $$ element = profile.updateCurrentNode(element)-->Line_38 $$ element = element.getParent()[ FD ]
Line_11 $$ if (targetNode != null) -->Line_24 $$ elementToStartMatching = element[ CD ]
Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_38 $$ element = element.getParent()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_4 $$ final CollectingMatchResultSink sink = new CollectingMatchResultSink()-->Line_52 $$ return sink.getMatches()[ FD ]
Line_40 $$ if (options.isLooseMatching()) -->Line_41 $$ element = profile.updateCurrentNode(element)[ CD ]
Line_15 $$ element = element.getParent()-->Line_20 $$ element = element.getParent()[ FD ]
Line_20 $$ element = element.getParent()-->Line_38 $$ element = element.getParent()[ FD ]
Line_20 $$ element = element.getParent()-->Line_21 $$ if (element == null)[ FD ]
Line_15 $$ element = element.getParent()-->Line_21 $$ if (element == null)[ FD ]
Line_9 $$ if (targetNode == null) -->Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ CD ]
Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_28 $$ if (profile == null)[ FD ]
Line_15 $$ element = element.getParent()-->Line_16 $$ if (element == null) [ FD ]
Line_9 $$ if (targetNode == null) -->Line_11 $$ if (targetNode != null) [ CD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_9 $$ if (targetNode == null) -->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ CD ]
Line_20 $$ element = element.getParent()-->Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_39 $$ targetNode = targetNode.getParent()[ FD ]
Line_8 $$ PsiElement elementToStartMatching = null-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_20 $$ element = element.getParent()-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_33 $$ handler = compiledPattern.getHandler(targetNode)-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_38 $$ element = element.getParent()-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_39 $$ targetNode = targetNode.getParent()[ CD ]
Line_39 $$ targetNode = targetNode.getParent()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_16 $$ if (element == null) -->Line_17 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final CollectingMatchResultSink sink = new CollectingMatchResultSink()-->Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)[ FD ]
Line_19 $$ while (element.getClass() != targetNode.getClass()) -->Line_21 $$ if (element == null)[ CD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_15 $$ element = element.getParent()-->Line_38 $$ element = element.getParent()[ FD ]
Line_20 $$ element = element.getParent()-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_39 $$ targetNode = targetNode.getParent()-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_45 $$ if (!(handler instanceof TopLevelMatchingHandler))-->Line_46 $$ return Collections.emptyList()[ CD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_11 $$ if (targetNode != null) [ FD ]
Line_9 $$ if (targetNode == null) -->Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ CD ]
Line_31 $$ MatchingHandler handler = null-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_39 $$ targetNode = targetNode.getParent()[ FD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_14 $$ compiledPattern.getNodes().rewind()[ FD ]
Line_38 $$ element = element.getParent()-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_9 $$ if (targetNode == null) [ FD ]
Line_15 $$ element = element.getParent()-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_15 $$ element = element.getParent()-->Line_24 $$ elementToStartMatching = element[ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_39 $$ targetNode = targetNode.getParent()[ FD ]
Line_28 $$ if (profile == null)-->Line_29 $$ return Collections.emptyList()[ CD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_20 $$ element = element.getParent()-->Line_41 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_38 $$ element = element.getParent()[ CD ]
Line_24 $$ elementToStartMatching = element-->Line_50 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_11 $$ if (targetNode != null) -->Line_19 $$ while (element.getClass() != targetNode.getClass()) [ CD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()[ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_35 $$ elementToStartMatching = element-->Line_50 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_41 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_15 $$ element = element.getParent()-->Line_41 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_8 $$ PsiElement elementToStartMatching = null-->Line_50 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_11 $$ if (targetNode != null) -->Line_12 $$ compiledPattern.getNodes().advance()[ CD ]
Line_9 $$ if (targetNode == null) -->Line_10 $$ targetNode = compiledPattern.getNodes().current()[ CD ]
Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_39 $$ targetNode = targetNode.getParent()[ FD ]
Line_20 $$ element = element.getParent()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_15 $$ element = element.getParent()-->Line_27 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ FD ]
Line_11 $$ if (targetNode != null) -->Line_15 $$ element = element.getParent()[ CD ]
Line_15 $$ element = element.getParent()-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_12 $$ compiledPattern.getNodes().advance()[ FD ]
Line_5 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_10 $$ targetNode = compiledPattern.getNodes().current()[ FD ]
Line_9 $$ if (targetNode == null) -->Line_28 $$ if (profile == null)[ CD ]
Line_49 $$ final LanguageFileType fileType = (LanguageFileType) matchContext.getOptions().getFileType()-->Line_50 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_20 $$ element = element.getParent()-->Line_24 $$ elementToStartMatching = element[ FD ]
Line_11 $$ if (targetNode != null) -->Line_16 $$ if (element == null) [ CD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_34 $$ handler.setPinnedElement(element)[ CD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_10 $$ targetNode = compiledPattern.getNodes().current()[ FD ]
Line_41 $$ element = profile.updateCurrentNode(element)-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_40 $$ if (options.isLooseMatching()) -->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ CD ]
Line_21 $$ if (element == null)-->Line_22 $$ return Collections.emptyList()[ CD ]
Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_33 $$ handler = compiledPattern.getHandler(targetNode)-->Line_36 $$ if (handler instanceof TopLevelMatchingHandler)[ FD ]
Line_20 $$ element = element.getParent()-->Line_19 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_15 $$ element = element.getParent()-->Line_34 $$ handler.setPinnedElement(element)[ FD ]
Line_19 $$ while (element.getClass() != targetNode.getClass()) -->Line_20 $$ element = element.getParent()[ CD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_19 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_8 $$ PsiElement elementToStartMatching = null-->Line_24 $$ elementToStartMatching = element[ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_40 $$ if (options.isLooseMatching()) [ CD ]
Line_39 $$ targetNode = targetNode.getParent()-->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_31 $$ MatchingHandler handler = null-->Line_36 $$ if (handler instanceof TopLevelMatchingHandler)[ FD ]
Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ CD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_10 $$ targetNode = compiledPattern.getNodes().current()-->Line_42 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_24 $$ elementToStartMatching = element-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_11 $$ if (targetNode != null) -->Line_14 $$ compiledPattern.getNodes().rewind()[ CD ]
Line_30 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_41 $$ element = profile.updateCurrentNode(element)-->Line_35 $$ elementToStartMatching = element[ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_11 $$ if (targetNode != null) [ FD ]
Line_31 $$ MatchingHandler handler = null-->Line_33 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_35 $$ elementToStartMatching = element[ CD ]
Line_41 $$ element = profile.updateCurrentNode(element)-->Line_32 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_7 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_19 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
