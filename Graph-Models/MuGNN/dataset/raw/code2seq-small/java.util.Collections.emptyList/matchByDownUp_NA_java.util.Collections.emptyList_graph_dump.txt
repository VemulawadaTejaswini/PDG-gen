Line_19 $$ element = element.getParent()-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_38 $$ targetNode = targetNode.getParent()[ FD ]
Line_14 $$ element = element.getParent()-->Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ FD ]
Line_19 $$ element = element.getParent()-->Line_37 $$ element = element.getParent()[ FD ]
Line_7 $$ PsiElement elementToStartMatching = null-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_37 $$ element = element.getParent()[ FD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_39 $$ if (options.isLooseMatching()) [ CD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_8 $$ if (targetNode == null) -->Line_9 $$ targetNode = compiledPattern.getNodes().current()[ CD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_35 $$ if (handler instanceof TopLevelMatchingHandler)[ CD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_37 $$ element = element.getParent()-->Line_40 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_40 $$ element = profile.updateCurrentNode(element)-->Line_37 $$ element = element.getParent()[ FD ]
Line_14 $$ element = element.getParent()-->Line_15 $$ if (element == null) [ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_7 $$ PsiElement elementToStartMatching = null[ CD ]
Line_48 $$ final LanguageFileType fileType = (LanguageFileType) matchContext.getOptions().getFileType()-->Line_49 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_23 $$ elementToStartMatching = element-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_18 $$ while (element.getClass() != targetNode.getClass()) -->Line_20 $$ if (element == null)[ CD ]
Line_19 $$ element = element.getParent()-->Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_9 $$ targetNode = compiledPattern.getNodes().current()[ FD ]
Line_14 $$ element = element.getParent()-->Line_19 $$ element = element.getParent()[ FD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_33 $$ handler.setPinnedElement(element)[ CD ]
Line_10 $$ if (targetNode != null) -->Line_11 $$ compiledPattern.getNodes().advance()[ CD ]
Line_19 $$ element = element.getParent()-->Line_40 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_14 $$ element = element.getParent()[ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_44 $$ if (!(handler instanceof TopLevelMatchingHandler))-->Line_45 $$ return Collections.emptyList()[ CD ]
Line_37 $$ element = element.getParent()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_38 $$ targetNode = targetNode.getParent()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_39 $$ if (options.isLooseMatching()) -->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ CD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_49 $$ match(elementToStartMatching, fileType.getLanguage())[ CD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_12 $$ assert !compiledPattern.getNodes().hasNext()[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_5 $$ matchContext.setShouldRecursivelyMatch(false)[ CD ]
Line_10 $$ if (targetNode != null) -->Line_14 $$ element = element.getParent()[ CD ]
Line_14 $$ element = element.getParent()-->Line_40 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_14 $$ element = element.getParent()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_34 $$ elementToStartMatching = element[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_19 $$ element = element.getParent()[ FD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_11 $$ compiledPattern.getNodes().advance()[ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_32 $$ handler = compiledPattern.getHandler(targetNode)-->Line_35 $$ if (handler instanceof TopLevelMatchingHandler)[ FD ]
Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_14 $$ element = element.getParent()-->Line_37 $$ element = element.getParent()[ FD ]
Line_37 $$ element = element.getParent()-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_14 $$ element = element.getParent()-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_8 $$ if (targetNode == null) -->Line_10 $$ if (targetNode != null) [ CD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_38 $$ targetNode = targetNode.getParent()[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)[ FD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_13 $$ compiledPattern.getNodes().rewind()[ FD ]
Line_14 $$ element = element.getParent()-->Line_20 $$ if (element == null)[ FD ]
Line_20 $$ if (element == null)-->Line_21 $$ return Collections.emptyList()[ CD ]
Line_7 $$ PsiElement elementToStartMatching = null-->Line_23 $$ elementToStartMatching = element[ FD ]
Line_14 $$ element = element.getParent()-->Line_23 $$ elementToStartMatching = element[ FD ]
Line_30 $$ MatchingHandler handler = null-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_9 $$ targetNode = compiledPattern.getNodes().current()[ FD ]
Line_23 $$ elementToStartMatching = element-->Line_49 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_34 $$ elementToStartMatching = element[ CD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_10 $$ if (targetNode != null) [ FD ]
Line_10 $$ if (targetNode != null) -->Line_23 $$ elementToStartMatching = element[ CD ]
Line_38 $$ targetNode = targetNode.getParent()-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_40 $$ element = profile.updateCurrentNode(element)-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_15 $$ if (element == null) [ FD ]
Line_10 $$ if (targetNode != null) -->Line_15 $$ if (element == null) [ CD ]
Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ FD ]
Line_8 $$ if (targetNode == null) -->Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_40 $$ element = profile.updateCurrentNode(element)-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_8 $$ if (targetNode == null) [ FD ]
Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_3 $$ final CollectingMatchResultSink sink = new CollectingMatchResultSink()[ CD ]
Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_15 $$ if (element == null) -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_3 $$ final CollectingMatchResultSink sink = new CollectingMatchResultSink()-->Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)[ FD ]
Line_30 $$ MatchingHandler handler = null-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_19 $$ element = element.getParent()-->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_8 $$ if (targetNode == null) [ CD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_38 $$ targetNode = targetNode.getParent()[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_39 $$ if (options.isLooseMatching()) [ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_39 $$ if (options.isLooseMatching()) -->Line_40 $$ element = profile.updateCurrentNode(element)[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_50 $$ matchContext.getSink().matchingFinished()[ CD ]
Line_8 $$ if (targetNode == null) -->Line_27 $$ if (profile == null)[ CD ]
Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_27 $$ if (profile == null)[ FD ]
Line_27 $$ if (profile == null)-->Line_28 $$ return Collections.emptyList()[ CD ]
Line_10 $$ if (targetNode != null) -->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ CD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_3 $$ final CollectingMatchResultSink sink = new CollectingMatchResultSink()-->Line_51 $$ return sink.getMatches()[ FD ]
Line_8 $$ if (targetNode == null) -->Line_44 $$ if (!(handler instanceof TopLevelMatchingHandler))[ CD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ CD ]
Line_34 $$ elementToStartMatching = element-->Line_49 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_19 $$ element = element.getParent()-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_10 $$ if (targetNode != null) [ FD ]
Line_14 $$ element = element.getParent()-->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_19 $$ element = element.getParent()-->Line_23 $$ elementToStartMatching = element[ FD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_37 $$ element = element.getParent()[ CD ]
Line_18 $$ while (element.getClass() != targetNode.getClass()) -->Line_19 $$ element = element.getParent()[ CD ]
Line_37 $$ element = element.getParent()-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_7 $$ PsiElement elementToStartMatching = null-->Line_49 $$ match(elementToStartMatching, fileType.getLanguage())[ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()-->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_30 $$ MatchingHandler handler = null-->Line_35 $$ if (handler instanceof TopLevelMatchingHandler)[ FD ]
Line_8 $$ if (targetNode == null) -->Line_30 $$ MatchingHandler handler = null[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_51 $$ return sink.getMatches()[ CD ]
Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_32 $$ handler = compiledPattern.getHandler(targetNode)[ FD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_18 $$ while (element.getClass() != targetNode.getClass()) [ FD ]
Line_14 $$ element = element.getParent()-->Line_34 $$ elementToStartMatching = element[ FD ]
Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)-->Line_38 $$ targetNode = targetNode.getParent()[ FD ]
Line_26 $$ final StructuralSearchProfile profile = StructuralSearchUtil.getProfileByPsiElement(element)-->Line_40 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_10 $$ if (targetNode != null) -->Line_13 $$ compiledPattern.getNodes().rewind()[ CD ]
Line_38 $$ targetNode = targetNode.getParent()-->Line_41 $$ targetNode = profile.updateCurrentNode(targetNode)[ FD ]
Line_40 $$ element = profile.updateCurrentNode(element)-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_9 $$ targetNode = compiledPattern.getNodes().current()-->Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ FD ]
Line_19 $$ element = element.getParent()-->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ FD ]
Line_32 $$ handler = compiledPattern.getHandler(targetNode)-->Line_33 $$ handler.setPinnedElement(element)[ FD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_23 $$ elementToStartMatching = element[ FD ]
Line_4 $$ final CompiledPattern compiledPattern = prepareMatching(sink, options)-->Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()[ FD ]
Line_19 $$ element = element.getParent()-->Line_20 $$ if (element == null)[ FD ]
Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) -->Line_38 $$ targetNode = targetNode.getParent()[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_6 $$ PsiElement targetNode = compiledPattern.getTargetNode()[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_40 $$ element = profile.updateCurrentNode(element)[ FD ]
Line_8 $$ if (targetNode == null) -->Line_29 $$ targetNode = profile.extendMatchedByDownUp(targetNode)[ CD ]
Line_8 $$ if (targetNode == null) -->Line_31 $$ while (element.getClass() == targetNode.getClass() || compiledPattern.isTypedVar(targetNode) && compiledPattern.getHandler(targetNode).canMatch(targetNode, element)) [ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_48 $$ final LanguageFileType fileType = (LanguageFileType) matchContext.getOptions().getFileType()[ CD ]
Line_2 $$ protected List<MatchResult> matchByDownUp(PsiElement element, final MatchOptions options) -->Line_20 $$ if (element == null)[ FD ]
