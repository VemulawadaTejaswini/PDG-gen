Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_16 $$ cs.handle(addAppEvent)[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_21 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_22 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_22 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_21 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_22 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_7 $$ MockRM rm = new MockRM(conf)-->Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()[ FD ]
Line_7 $$ MockRM rm = new MockRM(conf)-->Line_24 $$ rm.stop()[ FD ]
Line_7 $$ MockRM rm = new MockRM(conf)-->Line_8 $$ rm.start()[ FD ]
Line_13 $$ ApplicationId appId = BuilderUtils.newApplicationId(100, 1)-->Line_14 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class)[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_21 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_15 $$ SchedulerEvent addAppEvent = new AppAddedSchedulerEvent(appId, "default", "user")-->Line_16 $$ cs.handle(addAppEvent)[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_11 $$ RMNode node = MockNodes.newNodeInfo(0, MockNodes.newResource(4 * GB), 1, host)[ FD ]
Line_10 $$ String host = "127.0.0.1"-->Line_23 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_23 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_18 $$ cs.handle(addAttemptEvent)[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_23 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_17 $$ SchedulerEvent addAttemptEvent = new AppAttemptAddedSchedulerEvent(appAttemptId, false)-->Line_18 $$ cs.handle(addAttemptEvent)[ FD ]
Line_9 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_12 $$ cs.handle(new NodeAddedSchedulerEvent(node))[ FD ]
