Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_17 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_9 $$ RMNode node = MockNodes.newNodeInfo(0, MockNodes.newResource(4 * GB), 1, host)[ CD ]
Line_8 $$ String host = "127.0.0.1"-->Line_18 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_5 $$ MockRM rm = new MockRM(conf)-->Line_6 $$ rm.start()[ FD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_17 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_8 $$ String host = "127.0.0.1"[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_10 $$ cs.handle(new NodeAddedSchedulerEvent(node))[ CD ]
Line_8 $$ String host = "127.0.0.1"-->Line_20 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_19 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_16 $$ cs.handle(addAttemptEvent)[ CD ]
Line_15 $$ SchedulerEvent addAttemptEvent = new AppAttemptAddedSchedulerEvent(appAttemptId, false)-->Line_16 $$ cs.handle(addAttemptEvent)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_14 $$ cs.handle(addAppEvent)[ CD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_20 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_10 $$ cs.handle(new NodeAddedSchedulerEvent(node))[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_15 $$ SchedulerEvent addAttemptEvent = new AppAttemptAddedSchedulerEvent(appAttemptId, false)[ CD ]
Line_8 $$ String host = "127.0.0.1"-->Line_17 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_8 $$ String host = "127.0.0.1"-->Line_19 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_16 $$ cs.handle(addAttemptEvent)[ FD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_14 $$ cs.handle(addAppEvent)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_13 $$ SchedulerEvent addAppEvent = new AppAddedSchedulerEvent(appId, "default", "user")[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_19 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_6 $$ rm.start()[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_5 $$ MockRM rm = new MockRM(conf)[ CD ]
Line_5 $$ MockRM rm = new MockRM(conf)-->Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()[ FD ]
Line_8 $$ String host = "127.0.0.1"-->Line_9 $$ RMNode node = MockNodes.newNodeInfo(0, MockNodes.newResource(4 * GB), 1, host)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_20 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ CD ]
Line_5 $$ MockRM rm = new MockRM(conf)-->Line_21 $$ rm.stop()[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_20 $$ Assert.assertFalse(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ CD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_19 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_11 $$ ApplicationId appId = BuilderUtils.newApplicationId(100, 1)-->Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_11 $$ ApplicationId appId = BuilderUtils.newApplicationId(100, 1)[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_21 $$ rm.stop()[ CD ]
Line_13 $$ SchedulerEvent addAppEvent = new AppAddedSchedulerEvent(appId, "default", "user")-->Line_14 $$ cs.handle(addAppEvent)[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_17 $$ cs.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ CD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_4 $$ conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class)[ CD ]
Line_12 $$ ApplicationAttemptId appAttemptId = BuilderUtils.newApplicationAttemptId(appId, 1)-->Line_18 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_7 $$ CapacityScheduler cs = (CapacityScheduler) rm.getResourceScheduler()-->Line_18 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlackListNodes() throws Exception -->Line_18 $$ Assert.assertTrue(cs.getApplicationAttempt(appAttemptId).isBlacklisted(host))[ CD ]
