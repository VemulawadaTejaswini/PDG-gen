Line_5 $$ if (myRange != null) -->Line_6 $$ TextAttributes attributes = new TextAttributes(null, null, myEditor.getColorsScheme().getAttributes(CodeInsightColors.WEAK_WARNING_ATTRIBUTES).getEffectColor(), null, Font.PLAIN)[ CD ]
Line_5 $$ if (myRange != null) -->Line_9 $$ builder.descriptionAndTooltip(SIGNATURE_SHOULD_BE_POSSIBLY_CHANGED)[ CD ]
Line_10 $$ info = builder.createUnconditionally()-->Line_15 $$ Collection<HighlightInfo> infos = info != null ? Collections.singletonList(info) : Collections.<HighlightInfo>emptyList()[ FD ]
Line_10 $$ info = builder.createUnconditionally()-->Line_13 $$ QuickFixAction.registerQuickFixAction(info, new ChangeSignatureDetectorAction(), options, null)[ FD ]
Line_7 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(myRange)-->Line_8 $$ builder.textAttributes(attributes)[ FD ]
Line_5 $$ if (myRange != null) -->Line_8 $$ builder.textAttributes(attributes)[ CD ]
Line_5 $$ if (myRange != null) -->Line_12 $$ options.add(new DismissNewSignatureIntentionAction())[ CD ]
Line_11 $$ final ArrayList<IntentionAction> options = new ArrayList<IntentionAction>()-->Line_12 $$ options.add(new DismissNewSignatureIntentionAction())[ FD ]
Line_4 $$ HighlightInfo info = null-->Line_10 $$ info = builder.createUnconditionally()[ FD ]
Line_7 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(myRange)-->Line_10 $$ info = builder.createUnconditionally()[ FD ]
Line_5 $$ if (myRange != null) -->Line_13 $$ QuickFixAction.registerQuickFixAction(info, new ChangeSignatureDetectorAction(), options, null)[ CD ]
Line_15 $$ Collection<HighlightInfo> infos = info != null ? Collections.singletonList(info) : Collections.<HighlightInfo>emptyList()-->Line_16 $$ UpdateHighlightersUtil.setHighlightersToEditor(myProject, myDocument, 0, myFile.getTextLength(), infos, getColorsScheme(), getId())[ FD ]
Line_5 $$ if (myRange != null) -->Line_11 $$ final ArrayList<IntentionAction> options = new ArrayList<IntentionAction>()[ CD ]
Line_6 $$ TextAttributes attributes = new TextAttributes(null, null, myEditor.getColorsScheme().getAttributes(CodeInsightColors.WEAK_WARNING_ATTRIBUTES).getEffectColor(), null, Font.PLAIN)-->Line_8 $$ builder.textAttributes(attributes)[ FD ]
Line_4 $$ HighlightInfo info = null-->Line_15 $$ Collection<HighlightInfo> infos = info != null ? Collections.singletonList(info) : Collections.<HighlightInfo>emptyList()[ FD ]
Line_4 $$ HighlightInfo info = null-->Line_13 $$ QuickFixAction.registerQuickFixAction(info, new ChangeSignatureDetectorAction(), options, null)[ FD ]
Line_7 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(myRange)-->Line_9 $$ builder.descriptionAndTooltip(SIGNATURE_SHOULD_BE_POSSIBLY_CHANGED)[ FD ]
Line_5 $$ if (myRange != null) -->Line_7 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(HighlightInfoType.INFORMATION).range(myRange)[ CD ]
Line_11 $$ final ArrayList<IntentionAction> options = new ArrayList<IntentionAction>()-->Line_13 $$ QuickFixAction.registerQuickFixAction(info, new ChangeSignatureDetectorAction(), options, null)[ FD ]
Line_5 $$ if (myRange != null) -->Line_10 $$ info = builder.createUnconditionally()[ CD ]
