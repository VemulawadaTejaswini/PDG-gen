Line_9 $$ for (VirtualFile vf : virtualFiles) -->Line_11 $$ correctRoots.add(vf)[ FD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_4 $$ VirtualFile[] virtualFiles = FileChooser.chooseFiles(descriptor, project, null)[ CD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_14 $$ return correctRoots[ CD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_4 $$ VirtualFile[] virtualFiles = FileChooser.chooseFiles(descriptor, project, null)[ FD ]
Line_9 $$ for (VirtualFile vf : virtualFiles) -->Line_10 $$ if (GitUtil.isGitRoot(new File(vf.getPath()))) [ FD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_3 $$ FileChooserDescriptor descriptor = new FileChooserDescriptor(false, true, false, true, false, true)[ CD ]
Line_3 $$ FileChooserDescriptor descriptor = new FileChooserDescriptor(false, true, false, true, false, true)-->Line_4 $$ VirtualFile[] virtualFiles = FileChooser.chooseFiles(descriptor, project, null)[ FD ]
Line_10 $$ if (GitUtil.isGitRoot(new File(vf.getPath()))) -->Line_11 $$ correctRoots.add(vf)[ CD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_5 $$ if (virtualFiles.length == 0) [ CD ]
Line_5 $$ if (virtualFiles.length == 0) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_8 $$ List<VirtualFile> correctRoots = ContainerUtil.newArrayList()-->Line_11 $$ correctRoots.add(vf)[ FD ]
Line_2 $$ private static List<VirtualFile> getGitRootsFromUser(@NotNull Project project) -->Line_8 $$ List<VirtualFile> correctRoots = ContainerUtil.newArrayList()[ CD ]
