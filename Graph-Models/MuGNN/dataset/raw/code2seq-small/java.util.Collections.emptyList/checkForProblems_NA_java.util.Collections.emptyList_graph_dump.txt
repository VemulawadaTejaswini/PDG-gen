Line_5 $$ GenericDomValue element = (GenericDomValue) _element-->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ FD ]
Line_8 $$ final Object valueObject = element.getValue()-->Line_10 $$ if (valueObject instanceof PsiClass) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_6 $$ if (!isPsiClassType(element))[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_9 $$ PsiClass psiClass = null[ CD ]
Line_15 $$ if (psiClass != null) -->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ FD ]
Line_9 $$ PsiClass psiClass = null-->Line_15 $$ if (psiClass != null) [ FD ]
Line_8 $$ final Object valueObject = element.getValue()-->Line_12 $$ if (valueObject instanceof PsiClassType) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_18 $$ return Collections.emptyList()[ CD ]
Line_13 $$ psiClass = ((PsiClassType) valueObject).resolve()-->Line_15 $$ if (psiClass != null) [ FD ]
Line_6 $$ if (!isPsiClassType(element))-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_11 $$ psiClass = (PsiClass) valueObject-->Line_15 $$ if (psiClass != null) [ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_3 $$ if (!(_element instanceof GenericDomValue))[ CD ]
Line_9 $$ PsiClass psiClass = null-->Line_13 $$ psiClass = ((PsiClassType) valueObject).resolve()[ FD ]
Line_3 $$ if (!(_element instanceof GenericDomValue))-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_5 $$ GenericDomValue element = (GenericDomValue) _element-->Line_8 $$ final Object valueObject = element.getValue()[ FD ]
Line_9 $$ PsiClass psiClass = null-->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ FD ]
Line_5 $$ GenericDomValue element = (GenericDomValue) _element-->Line_6 $$ if (!isPsiClassType(element))[ FD ]
Line_13 $$ psiClass = ((PsiClassType) valueObject).resolve()-->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_15 $$ if (psiClass != null) [ CD ]
Line_10 $$ if (valueObject instanceof PsiClass) -->Line_11 $$ psiClass = (PsiClass) valueObject[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_8 $$ final Object valueObject = element.getValue()[ CD ]
Line_12 $$ if (valueObject instanceof PsiClassType) -->Line_13 $$ psiClass = ((PsiClassType) valueObject).resolve()[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_5 $$ GenericDomValue element = (GenericDomValue) _element[ CD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkForProblems(@NotNull final ExtendClass extend, @NotNull final DomElement _element, @NotNull final DomElementAnnotationHolder holder, @NotNull final DomHighlightingHelper helper) -->Line_10 $$ if (valueObject instanceof PsiClass) [ CD ]
Line_9 $$ PsiClass psiClass = null-->Line_11 $$ psiClass = (PsiClass) valueObject[ FD ]
Line_10 $$ if (valueObject instanceof PsiClass) -->Line_12 $$ if (valueObject instanceof PsiClassType) [ CD ]
Line_11 $$ psiClass = (PsiClass) valueObject-->Line_16 $$ return checkExtendClass(element, psiClass, extend.value(), extend.instantiatable(), extend.canBeDecorator(), extend.allowInterface(), extend.allowNonPublic(), extend.allowAbstract(), extend.allowEnum(), holder)[ FD ]
Line_11 $$ psiClass = (PsiClass) valueObject-->Line_13 $$ psiClass = ((PsiClassType) valueObject).resolve()[ FD ]
