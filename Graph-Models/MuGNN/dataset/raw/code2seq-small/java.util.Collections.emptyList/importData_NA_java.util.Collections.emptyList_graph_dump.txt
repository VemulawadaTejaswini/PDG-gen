Line_11 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)-->Line_12 $$ assert projects.size() == 1 || projects.isEmpty()[ FD ]
Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_30 $$ final Set<Map.Entry<Key<?>, Collection<DataNode<?>>>> entries = grouped.entrySet()[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_39 $$ if (indicator != null) [ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_19 $$ ExternalProjectsDataStorage.getInstance(project).saveInclusionSettings(projectNode)[ FD ]
Line_15 $$ ProjectSystemId projectSystemId-->Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_42 $$ indicator.setFraction((double) count++ / size)[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_33 $$ indicator.setIndeterminate(false)[ FD ]
Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_19 $$ ExternalProjectsDataStorage.getInstance(project).saveInclusionSettings(projectNode)[ FD ]
Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_39 $$ if (indicator != null) -->Line_42 $$ indicator.setFraction((double) count++ / size)[ CD ]
Line_39 $$ if (indicator != null) -->Line_41 $$ indicator.setText(message)[ CD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_25 $$ if (projectSystemId != null) [ CD ]
Line_14 $$ final ProjectData projectData-->Line_21 $$ projectData = null[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_32 $$ if (indicator != null) [ FD ]
Line_57 $$ for (Runnable onSuccessImportTask : ContainerUtil.reverse(onSuccessImportTasks)) -->Line_58 $$ onSuccessImportTask.run()[ FD ]
Line_32 $$ if (indicator != null) -->Line_33 $$ indicator.setIndeterminate(false)[ CD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)[ FD ]
Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_22 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))[ FD ]
Line_28 $$ List<Runnable> onSuccessImportTasks = ContainerUtil.newSmartList()-->Line_57 $$ for (Runnable onSuccessImportTask : ContainerUtil.reverse(onSuccessImportTasks)) [ FD ]
Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))-->Line_41 $$ indicator.setText(message)[ FD ]
Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_25 $$ if (projectSystemId != null) [ FD ]
Line_22 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))-->Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)[ CD ]
Line_38 $$ for (Map.Entry<Key<?>, Collection<DataNode<?>>> entry : entries) -->Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_36 $$ int count = 0-->Line_42 $$ indicator.setFraction((double) count++ / size)[ FD ]
Line_6 $$ for (Key<?> key : myServices.getValue().keySet()) -->Line_7 $$ if (!grouped.containsKey(key)) [ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_14 $$ final ProjectData projectData[ CD ]
Line_16 $$ if (projectNode != null) -->Line_17 $$ projectData = projectNode.getData()[ CD ]
Line_3 $$ if (project.isDisposed())-->Line_4 $$ return[ CD ]
Line_37 $$ List<Runnable> postImportTasks = ContainerUtil.newSmartList()-->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_54 $$ dispose(modelsProvider, project, synchronous)[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_3 $$ if (project.isDisposed())[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)[ CD ]
Line_15 $$ ProjectSystemId projectSystemId-->Line_26 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_38 $$ for (Map.Entry<Key<?>, Collection<DataNode<?>>> entry : entries) -->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_6 $$ for (Key<?> key : myServices.getValue().keySet()) -->Line_8 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ FD ]
Line_18 $$ projectSystemId = projectNode.getData().getOwner()-->Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_14 $$ final ProjectData projectData-->Line_17 $$ projectData = projectNode.getData()[ FD ]
Line_11 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)-->Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)[ FD ]
Line_25 $$ if (projectSystemId != null) -->Line_26 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ CD ]
Line_30 $$ final Set<Map.Entry<Key<?>, Collection<DataNode<?>>>> entries = grouped.entrySet()-->Line_35 $$ final int size = entries.size()[ FD ]
Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_17 $$ projectData = projectNode.getData()[ FD ]
Line_18 $$ projectSystemId = projectNode.getData().getOwner()-->Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_17 $$ projectData = projectNode.getData()-->Line_21 $$ projectData = null[ FD ]
Line_18 $$ projectSystemId = projectNode.getData().getOwner()-->Line_25 $$ if (projectSystemId != null) [ FD ]
Line_15 $$ ProjectSystemId projectSystemId-->Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_26 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_26 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_50 $$ if (indicator != null) [ FD ]
Line_21 $$ projectData = null-->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_16 $$ if (projectNode != null) -->Line_22 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))[ CD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_15 $$ ProjectSystemId projectSystemId[ CD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_51 $$ indicator.setIndeterminate(true)[ FD ]
Line_16 $$ if (projectNode != null) -->Line_19 $$ ExternalProjectsDataStorage.getInstance(project).saveInclusionSettings(projectNode)[ CD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_3 $$ if (project.isDisposed())[ CD ]
Line_16 $$ if (projectNode != null) -->Line_18 $$ projectSystemId = projectNode.getData().getOwner()[ CD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_28 $$ List<Runnable> onSuccessImportTasks = ContainerUtil.newSmartList()[ CD ]
Line_28 $$ List<Runnable> onSuccessImportTasks = ContainerUtil.newSmartList()-->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_16 $$ if (projectNode != null) [ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_49 $$ commit(modelsProvider, project, synchronous, "Imported data")[ FD ]
Line_15 $$ ProjectSystemId projectSystemId-->Line_18 $$ projectSystemId = projectNode.getData().getOwner()[ FD ]
Line_31 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_41 $$ indicator.setText(message)[ FD ]
Line_15 $$ ProjectSystemId projectSystemId-->Line_25 $$ if (projectSystemId != null) [ FD ]
Line_50 $$ if (indicator != null) -->Line_51 $$ indicator.setIndeterminate(true)[ CD ]
Line_39 $$ if (indicator != null) -->Line_40 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ CD ]
Line_18 $$ projectSystemId = projectNode.getData().getOwner()-->Line_26 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_13 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_18 $$ projectSystemId = projectNode.getData().getOwner()[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_16 $$ if (projectNode != null) [ CD ]
Line_7 $$ if (!grouped.containsKey(key)) -->Line_8 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ CD ]
Line_16 $$ if (projectNode != null) -->Line_23 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ CD ]
Line_17 $$ projectData = projectNode.getData()-->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_7 $$ if (!grouped.containsKey(key)) [ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_8 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ FD ]
Line_5 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_11 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)[ FD ]
Line_2 $$ public void importData(@NotNull Collection<DataNode<?>> nodes, @NotNull Project project, @NotNull IdeModifiableModelsProvider modelsProvider, boolean synchronous) -->Line_11 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)[ CD ]
Line_46 $$ for (Runnable postImportTask : postImportTasks) -->Line_47 $$ postImportTask.run()[ FD ]
Line_16 $$ if (projectNode != null) -->Line_21 $$ projectData = null[ CD ]
Line_14 $$ final ProjectData projectData-->Line_44 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
