Line_30 $$ List<Runnable> onSuccessImportTasks = ContainerUtil.newSmartList()-->Line_59 $$ for (Runnable onSuccessImportTask : ContainerUtil.reverse(onSuccessImportTasks)) [ FD ]
Line_41 $$ if (indicator != null) -->Line_43 $$ indicator.setText(message)[ CD ]
Line_15 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_19 $$ projectData = projectNode.getData()[ FD ]
Line_6 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_24 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))[ FD ]
Line_34 $$ if (indicator != null) -->Line_35 $$ indicator.setIndeterminate(false)[ CD ]
Line_7 $$ for (Key<?> key : myServices.getValue().keySet()) -->Line_9 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ FD ]
Line_40 $$ for (Map.Entry<Key<?>, Collection<DataNode<?>>> entry : entries) -->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_19 $$ projectData = projectNode.getData()-->Line_23 $$ projectData = null[ FD ]
Line_27 $$ if (projectSystemId != null) -->Line_28 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ CD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_43 $$ indicator.setText(message)[ FD ]
Line_18 $$ if (projectNode != null) -->Line_21 $$ ExternalProjectsDataStorage.getInstance(project).saveInclusionSettings(projectNode)[ CD ]
Line_19 $$ projectData = projectNode.getData()-->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_6 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_12 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)[ FD ]
Line_32 $$ final Set<Map.Entry<Key<?>, Collection<DataNode<?>>>> entries = grouped.entrySet()-->Line_37 $$ final int size = entries.size()[ FD ]
Line_18 $$ if (projectNode != null) -->Line_24 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))[ CD ]
Line_15 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_21 $$ ExternalProjectsDataStorage.getInstance(project).saveInclusionSettings(projectNode)[ FD ]
Line_7 $$ for (Key<?> key : myServices.getValue().keySet()) -->Line_8 $$ if (!grouped.containsKey(key)) [ FD ]
Line_20 $$ projectSystemId = projectNode.getData().getOwner()-->Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_16 $$ final ProjectData projectData-->Line_23 $$ projectData = null[ FD ]
Line_17 $$ ProjectSystemId projectSystemId-->Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_27 $$ if (projectSystemId != null) [ FD ]
Line_30 $$ List<Runnable> onSuccessImportTasks = ContainerUtil.newSmartList()-->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_40 $$ for (Map.Entry<Key<?>, Collection<DataNode<?>>> entry : entries) -->Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_20 $$ projectSystemId = projectNode.getData().getOwner()-->Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_41 $$ if (indicator != null) -->Line_44 $$ indicator.setFraction((double) count++ / size)[ CD ]
Line_15 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_18 $$ if (projectNode != null) [ FD ]
Line_17 $$ ProjectSystemId projectSystemId-->Line_20 $$ projectSystemId = projectNode.getData().getOwner()[ FD ]
Line_16 $$ final ProjectData projectData-->Line_19 $$ projectData = projectNode.getData()[ FD ]
Line_20 $$ projectSystemId = projectNode.getData().getOwner()-->Line_27 $$ if (projectSystemId != null) [ FD ]
Line_17 $$ ProjectSystemId projectSystemId-->Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_53 $$ indicator.setIndeterminate(true)[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_44 $$ indicator.setFraction((double) count++ / size)[ FD ]
Line_6 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_32 $$ final Set<Map.Entry<Key<?>, Collection<DataNode<?>>>> entries = grouped.entrySet()[ FD ]
Line_4 $$ if (project.isDisposed())-->Line_5 $$ return[ CD ]
Line_6 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_9 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_41 $$ if (indicator != null) [ FD ]
Line_15 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)-->Line_20 $$ projectSystemId = projectNode.getData().getOwner()[ FD ]
Line_52 $$ if (indicator != null) -->Line_53 $$ indicator.setIndeterminate(true)[ CD ]
Line_17 $$ ProjectSystemId projectSystemId-->Line_27 $$ if (projectSystemId != null) [ FD ]
Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))-->Line_43 $$ indicator.setText(message)[ FD ]
Line_18 $$ if (projectNode != null) -->Line_19 $$ projectData = projectNode.getData()[ CD ]
Line_59 $$ for (Runnable onSuccessImportTask : ContainerUtil.reverse(onSuccessImportTasks)) -->Line_60 $$ onSuccessImportTask.run()[ FD ]
Line_6 $$ MultiMap<Key<?>, DataNode<?>> grouped = ExternalSystemApiUtil.recursiveGroup(nodes)-->Line_8 $$ if (!grouped.containsKey(key)) [ FD ]
Line_17 $$ ProjectSystemId projectSystemId-->Line_28 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_18 $$ if (projectNode != null) -->Line_23 $$ projectData = null[ CD ]
Line_20 $$ projectSystemId = projectNode.getData().getOwner()-->Line_28 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_35 $$ indicator.setIndeterminate(false)[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_34 $$ if (indicator != null) [ FD ]
Line_16 $$ final ProjectData projectData-->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_48 $$ for (Runnable postImportTask : postImportTasks) -->Line_49 $$ postImportTask.run()[ FD ]
Line_8 $$ if (!grouped.containsKey(key)) -->Line_9 $$ grouped.put(key, Collections.<DataNode<?>>emptyList())[ CD ]
Line_18 $$ if (projectNode != null) -->Line_20 $$ projectSystemId = projectNode.getData().getOwner()[ CD ]
Line_18 $$ if (projectNode != null) -->Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ CD ]
Line_23 $$ projectData = null-->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_33 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_52 $$ if (indicator != null) [ FD ]
Line_38 $$ int count = 0-->Line_44 $$ indicator.setFraction((double) count++ / size)[ FD ]
Line_39 $$ List<Runnable> postImportTasks = ContainerUtil.newSmartList()-->Line_46 $$ doImportData(entry.getKey(), entry.getValue(), projectData, project, modelsProvider, postImportTasks, onSuccessImportTasks)[ FD ]
Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null-->Line_28 $$ ExternalSystemUtil.scheduleExternalViewStructureUpdate(project, projectSystemId)[ FD ]
Line_41 $$ if (indicator != null) -->Line_42 $$ String message = ExternalSystemBundle.message("progress.update.text", projectSystemId != null ? projectSystemId.getReadableName() : "", "Refresh " + getReadableText(entry.getKey()))[ CD ]
Line_24 $$ DataNode<ModuleData> aModuleNode = (DataNode<ModuleData>) ContainerUtil.getFirstItem(grouped.get(ProjectKeys.MODULE))-->Line_25 $$ projectSystemId = aModuleNode != null ? aModuleNode.getData().getOwner() : null[ FD ]
Line_12 $$ final Collection<DataNode<?>> projects = grouped.get(ProjectKeys.PROJECT)-->Line_15 $$ final DataNode<ProjectData> projectNode = (DataNode<ProjectData>) ContainerUtil.getFirstItem(projects)[ FD ]
