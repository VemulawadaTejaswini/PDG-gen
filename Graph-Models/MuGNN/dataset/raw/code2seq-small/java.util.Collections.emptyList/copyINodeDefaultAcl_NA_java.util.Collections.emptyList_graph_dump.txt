Line_20 $$ AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(type).setName(name)-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_20 $$ AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(type).setName(name)-->Line_34 $$ accessEntries.add(builder.build())[ FD ]
Line_31 $$ permission = entry.getPermission()-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_10 $$ List<AclEntry> parentDefaultEntries = scopedEntries.getDefaultEntries()[ CD ]
Line_10 $$ List<AclEntry> parentDefaultEntries = scopedEntries.getDefaultEntries()-->Line_16 $$ boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries)[ FD ]
Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())-->Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) [ FD ]
Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)-->Line_44 $$ child.setPermission(newPerm)[ FD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_18 $$ AclEntryType type = entry.getType()[ FD ]
Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)-->Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_8 $$ List<AclEntry> featureEntries = parent.getAclFeature().getEntries()[ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_36 $$ List<AclEntry> defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.<AclEntry>emptyList()[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())[ CD ]
Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) -->Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)[ CD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_4 $$ AclFeature parentAclFeature = parent.getAclFeature()[ CD ]
Line_36 $$ List<AclEntry> defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.<AclEntry>emptyList()-->Line_39 $$ child.addAclFeature(createAclFeature(accessEntries, defaultEntries))[ FD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_5 $$ if (parentAclFeature == null || !(child.isFile() || child.isDirectory())) [ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_37 $$ final FsPermission newPerm[ CD ]
Line_37 $$ final FsPermission newPerm-->Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)[ FD ]
Line_21 $$ final FsAction permission-->Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())[ FD ]
Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())-->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_39 $$ child.addAclFeature(createAclFeature(accessEntries, defaultEntries))[ FD ]
Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())-->Line_34 $$ accessEntries.add(builder.build())[ FD ]
Line_26 $$ if (type == AclEntryType.MASK) -->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_15 $$ FsPermission childPerm = child.getFsPermission()[ CD ]
Line_22 $$ if (type == AclEntryType.USER && name == null) -->Line_24 $$ if (type == AclEntryType.GROUP && parentDefaultIsMinimal) [ CD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_44 $$ child.setPermission(newPerm)[ FD ]
Line_10 $$ List<AclEntry> parentDefaultEntries = scopedEntries.getDefaultEntries()-->Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())[ FD ]
Line_28 $$ if (type == AclEntryType.OTHER) -->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ CD ]
Line_36 $$ List<AclEntry> defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.<AclEntry>emptyList()-->Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) [ FD ]
Line_21 $$ final FsAction permission-->Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())[ FD ]
Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) -->Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)[ CD ]
Line_21 $$ final FsAction permission-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_9 $$ ScopedAclEntries scopedEntries = new ScopedAclEntries(featureEntries)-->Line_10 $$ List<AclEntry> parentDefaultEntries = scopedEntries.getDefaultEntries()[ FD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_18 $$ AclEntryType type = entry.getType()-->Line_26 $$ if (type == AclEntryType.MASK) [ FD ]
Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())-->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_36 $$ List<AclEntry> defaultEntries = child.isDirectory() ? parentDefaultEntries : Collections.<AclEntry>emptyList()[ CD ]
Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())-->Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)[ FD ]
Line_24 $$ if (type == AclEntryType.GROUP && parentDefaultIsMinimal) -->Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ CD ]
Line_22 $$ if (type == AclEntryType.USER && name == null) -->Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())[ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) [ CD ]
Line_26 $$ if (type == AclEntryType.MASK) -->Line_28 $$ if (type == AclEntryType.OTHER) [ CD ]
Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())-->Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_3 $$ INodeDirectory parent = child.getParent()-->Line_4 $$ AclFeature parentAclFeature = parent.getAclFeature()[ FD ]
Line_28 $$ if (type == AclEntryType.OTHER) -->Line_31 $$ permission = entry.getPermission()[ CD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())-->Line_39 $$ child.addAclFeature(createAclFeature(accessEntries, defaultEntries))[ FD ]
Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_11 $$ if (parentDefaultEntries.isEmpty()) -->Line_12 $$ return[ CD ]
Line_3 $$ INodeDirectory parent = child.getParent()-->Line_8 $$ List<AclEntry> featureEntries = parent.getAclFeature().getEntries()[ FD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_3 $$ INodeDirectory parent = child.getParent()[ CD ]
Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())-->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_11 $$ if (parentDefaultEntries.isEmpty()) [ CD ]
Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_25 $$ permission = entry.getPermission().and(childPerm.getGroupAction())-->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_14 $$ List<AclEntry> accessEntries = Lists.newArrayListWithCapacity(parentDefaultEntries.size())-->Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_9 $$ ScopedAclEntries scopedEntries = new ScopedAclEntries(featureEntries)[ CD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_19 $$ String name = entry.getName()[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_5 $$ if (parentAclFeature == null || !(child.isFile() || child.isDirectory())) [ FD ]
Line_19 $$ String name = entry.getName()-->Line_20 $$ AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(type).setName(name)[ FD ]
Line_21 $$ final FsAction permission-->Line_29 $$ permission = entry.getPermission().and(childPerm.getOtherAction())[ FD ]
Line_24 $$ if (type == AclEntryType.GROUP && parentDefaultIsMinimal) -->Line_26 $$ if (type == AclEntryType.MASK) [ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_15 $$ FsPermission childPerm = child.getFsPermission()[ FD ]
Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)-->Line_44 $$ child.setPermission(newPerm)[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_3 $$ INodeDirectory parent = child.getParent()[ FD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_44 $$ child.setPermission(newPerm)[ CD ]
Line_37 $$ final FsPermission newPerm-->Line_42 $$ newPerm = createFsPermissionForMinimalAcl(accessEntries, childPerm)[ FD ]
Line_18 $$ AclEntryType type = entry.getType()-->Line_28 $$ if (type == AclEntryType.OTHER) [ FD ]
Line_10 $$ List<AclEntry> parentDefaultEntries = scopedEntries.getDefaultEntries()-->Line_11 $$ if (parentDefaultEntries.isEmpty()) [ FD ]
Line_38 $$ if (!AclUtil.isMinimalAcl(accessEntries) || !defaultEntries.isEmpty()) -->Line_39 $$ child.addAclFeature(createAclFeature(accessEntries, defaultEntries))[ CD ]
Line_2 $$ public static void copyINodeDefaultAcl(INode child) -->Line_16 $$ boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries)[ CD ]
Line_17 $$ for (AclEntry entry : parentDefaultEntries) -->Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())[ FD ]
Line_21 $$ final FsAction permission-->Line_27 $$ permission = entry.getPermission().and(childPerm.getGroupAction())[ FD ]
Line_16 $$ boolean parentDefaultIsMinimal = AclUtil.isMinimalAcl(parentDefaultEntries)-->Line_24 $$ if (type == AclEntryType.GROUP && parentDefaultIsMinimal) [ FD ]
Line_18 $$ AclEntryType type = entry.getType()-->Line_20 $$ AclEntry.Builder builder = new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(type).setName(name)[ FD ]
Line_21 $$ final FsAction permission-->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())-->Line_31 $$ permission = entry.getPermission()[ FD ]
Line_23 $$ permission = entry.getPermission().and(childPerm.getUserAction())-->Line_33 $$ builder.setPermission(permission)[ FD ]
Line_15 $$ FsPermission childPerm = child.getFsPermission()-->Line_40 $$ newPerm = createFsPermissionForExtendedAcl(accessEntries, childPerm)[ FD ]
Line_5 $$ if (parentAclFeature == null || !(child.isFile() || child.isDirectory())) -->Line_6 $$ return[ CD ]
Line_37 $$ final FsPermission newPerm-->Line_44 $$ child.setPermission(newPerm)[ FD ]
