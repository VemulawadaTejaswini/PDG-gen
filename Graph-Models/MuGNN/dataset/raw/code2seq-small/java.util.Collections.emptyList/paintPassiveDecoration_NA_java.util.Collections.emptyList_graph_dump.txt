Line_5 $$ final RadRootContainer rootContainer = myEditor.getRootContainer()-->Line_14 $$ Painter.paintButtonGroupLines(rootContainer, group, g)[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_10 $$ final Point point = SwingUtilities.convertPoint(component.getDelegee(), 0, 0, rootContainer.getDelegee())[ FD ]
Line_5 $$ final RadRootContainer rootContainer = myEditor.getRootContainer()-->Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_18 $$ if (myEditor.isShowComponentTags() && FormEditingUtil.isComponentSwitchedInView(component)) [ FD ]
Line_6 $$ final ComponentTree componentTree = DesignerToolWindowManager.getInstance(myEditor).getComponentTree()-->Line_7 $$ final Collection<RadButtonGroup> selectedGroups = componentTree != null ? componentTree.getSelectedElements(RadButtonGroup.class) : Collections.<RadButtonGroup>emptyList()[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_10 $$ final Point point = SwingUtilities.convertPoint(component.getDelegee(), 0, 0, rootContainer.getDelegee())[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)[ FD ]
Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)-->Line_13 $$ paintedGroups.add(group)[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_3 $$ Painter.paintComponentDecoration(myEditor, component, g)[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)[ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ FD ]
Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) -->Line_14 $$ Painter.paintButtonGroupLines(rootContainer, group, g)[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() [ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_16 $$ g.translate(point.x, point.y)[ FD ]
Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)-->Line_14 $$ Painter.paintButtonGroupLines(rootContainer, group, g)[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_3 $$ Painter.paintComponentDecoration(myEditor, component, g)[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_6 $$ final ComponentTree componentTree = DesignerToolWindowManager.getInstance(myEditor).getComponentTree()[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_21 $$ Painter.paintSelectionDecoration(component, g, myEditor.getGlassLayer().isFocusOwner())[ FD ]
Line_22 $$ if (component.hasDragger()) -->Line_23 $$ final Icon icon = getDragIcon()[ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_29 $$ return true[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_4 $$ final Set<RadButtonGroup> paintedGroups = new HashSet<RadButtonGroup>()[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_24 $$ icon.paintIcon(PassiveDecorationLayer.this, g, -icon.getIconWidth(), -icon.getIconHeight())[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_19 $$ Painter.paintComponentTag(component, g)[ FD ]
Line_22 $$ if (component.hasDragger()) -->Line_24 $$ icon.paintIcon(PassiveDecorationLayer.this, g, -icon.getIconWidth(), -icon.getIconHeight())[ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_10 $$ final Point point = SwingUtilities.convertPoint(component.getDelegee(), 0, 0, rootContainer.getDelegee())[ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_5 $$ final RadRootContainer rootContainer = myEditor.getRootContainer()[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() [ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_16 $$ g.translate(point.x, point.y)[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_7 $$ final Collection<RadButtonGroup> selectedGroups = componentTree != null ? componentTree.getSelectedElements(RadButtonGroup.class) : Collections.<RadButtonGroup>emptyList()[ CD ]
Line_4 $$ final Set<RadButtonGroup> paintedGroups = new HashSet<RadButtonGroup>()-->Line_13 $$ paintedGroups.add(group)[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_22 $$ if (component.hasDragger()) [ FD ]
Line_23 $$ final Icon icon = getDragIcon()-->Line_24 $$ icon.paintIcon(PassiveDecorationLayer.this, g, -icon.getIconWidth(), -icon.getIconHeight())[ FD ]
Line_7 $$ final Collection<RadButtonGroup> selectedGroups = componentTree != null ? componentTree.getSelectedElements(RadButtonGroup.class) : Collections.<RadButtonGroup>emptyList()-->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ FD ]
Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) -->Line_13 $$ paintedGroups.add(group)[ CD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_21 $$ Painter.paintSelectionDecoration(component, g, myEditor.getGlassLayer().isFocusOwner())[ FD ]
Line_4 $$ final Set<RadButtonGroup> paintedGroups = new HashSet<RadButtonGroup>()-->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_14 $$ Painter.paintButtonGroupLines(rootContainer, group, g)[ FD ]
Line_8 $$ FormEditingUtil.iterate(component, new FormEditingUtil.ComponentVisitor<RadComponent>() -->Line_22 $$ if (component.hasDragger()) [ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_19 $$ Painter.paintComponentTag(component, g)[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ FD ]
Line_18 $$ if (myEditor.isShowComponentTags() && FormEditingUtil.isComponentSwitchedInView(component)) -->Line_19 $$ Painter.paintComponentTag(component, g)[ CD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_27 $$ g.translate(-point.x, -point.y)[ FD ]
Line_2 $$ protected final void paintPassiveDecoration(final RadComponent component, final Graphics g) -->Line_18 $$ if (myEditor.isShowComponentTags() && FormEditingUtil.isComponentSwitchedInView(component)) [ FD ]
Line_5 $$ final RadRootContainer rootContainer = myEditor.getRootContainer()-->Line_10 $$ final Point point = SwingUtilities.convertPoint(component.getDelegee(), 0, 0, rootContainer.getDelegee())[ FD ]
Line_11 $$ RadButtonGroup group = (RadButtonGroup) FormEditingUtil.findGroupForComponent(rootContainer, component)-->Line_12 $$ if (group != null && !paintedGroups.contains(group) && (component.isSelected() || selectedGroups.contains(group))) [ FD ]
