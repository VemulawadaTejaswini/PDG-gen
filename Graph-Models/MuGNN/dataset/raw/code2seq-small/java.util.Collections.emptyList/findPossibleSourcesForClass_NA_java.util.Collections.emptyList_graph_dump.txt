Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_3 $$ if (boundClassName == null) [ FD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_8 $$ if (containingDirectory == null) [ CD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_7 $$ final File containingDirectory = new File(rd.getRootFile(), relPath).getParentFile()[ FD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_3 $$ if (boundClassName == null) [ CD ]
Line_8 $$ if (containingDirectory == null) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_7 $$ final File containingDirectory = new File(rd.getRootFile(), relPath).getParentFile()-->Line_11 $$ final File[] files = containingDirectory.listFiles(FileFilters.withExtension("java"))[ FD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_11 $$ final File[] files = containingDirectory.listFiles(FileFilters.withExtension("java"))[ CD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_15 $$ return Arrays.asList(files)[ CD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_7 $$ final File containingDirectory = new File(rd.getRootFile(), relPath).getParentFile()[ CD ]
Line_11 $$ final File[] files = containingDirectory.listFiles(FileFilters.withExtension("java"))-->Line_15 $$ return Arrays.asList(files)[ FD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_6 $$ String relPath = suggestRelativePath(rd, boundClassName)[ FD ]
Line_3 $$ if (boundClassName == null) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_12 $$ if (files == null || files.length == 0) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_7 $$ final File containingDirectory = new File(rd.getRootFile(), relPath).getParentFile()-->Line_8 $$ if (containingDirectory == null) [ FD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_12 $$ if (files == null || files.length == 0) [ CD ]
Line_2 $$ private static Collection<File> findPossibleSourcesForClass(JavaSourceRootDescriptor rd, @Nullable final String boundClassName) throws IOException -->Line_6 $$ String relPath = suggestRelativePath(rd, boundClassName)[ CD ]
