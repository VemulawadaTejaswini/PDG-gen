Line_7 $$ if (result == null)-->Line_8 $$ result = new SmartList<DomElementProblemDescriptor>()[ CD ]
Line_6 $$ if (!list.isEmpty()) -->Line_7 $$ if (result == null)[ CD ]
Line_5 $$ final List<DomElementProblemDescriptor> list = checkAnno(element, checker, holder)-->Line_6 $$ if (!list.isEmpty()) [ FD ]
Line_6 $$ if (!list.isEmpty()) -->Line_9 $$ result.addAll(list)[ CD ]
Line_3 $$ List<DomElementProblemDescriptor> result = null-->Line_9 $$ result.addAll(list)[ FD ]
Line_5 $$ final List<DomElementProblemDescriptor> list = checkAnno(element, checker, holder)-->Line_9 $$ result.addAll(list)[ FD ]
Line_3 $$ List<DomElementProblemDescriptor> result = null-->Line_8 $$ result = new SmartList<DomElementProblemDescriptor>()[ FD ]
Line_3 $$ List<DomElementProblemDescriptor> result = null-->Line_7 $$ if (result == null)[ FD ]
Line_8 $$ result = new SmartList<DomElementProblemDescriptor>()-->Line_9 $$ result.addAll(list)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkCustomAnnotations(final DomElement element, final DomElementAnnotationHolder holder) -->Line_5 $$ final List<DomElementProblemDescriptor> list = checkAnno(element, checker, holder)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkCustomAnnotations(final DomElement element, final DomElementAnnotationHolder holder) -->Line_12 $$ return result == null ? Collections.<DomElementProblemDescriptor>emptyList() : result[ CD ]
Line_4 $$ for (final DomCustomAnnotationChecker<?> checker : myCustomCheckers) -->Line_5 $$ final List<DomElementProblemDescriptor> list = checkAnno(element, checker, holder)[ FD ]
Line_2 $$ public List<DomElementProblemDescriptor> checkCustomAnnotations(final DomElement element, final DomElementAnnotationHolder holder) -->Line_3 $$ List<DomElementProblemDescriptor> result = null[ CD ]
