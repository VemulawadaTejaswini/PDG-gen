Line_27 $$ if (usingPreloadedProcess) -->Line_28 $$ LOG.info("Using preloaded build process to compile " + projectPath)[ CD ]
Line_26 $$ final UUID sessionId-->Line_32 $$ sessionId = UUID.randomUUID()[ FD ]
Line_123 $$ if (exitValue != 0) -->Line_125 $$ msg.append("Abnormal build process termination: ")[ CD ]
Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)-->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ FD ]
Line_6 $$ final BuilderMessageHandler handler = new NotifyingMessageHandler(project, messageHandler, isAutomake)-->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ FD ]
Line_77 $$ if (usingPreloadedProcess) -->Line_80 $$ return[ CD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_109 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ FD ]
Line_61 $$ if (onlyCheckUpToDate) -->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ CD ]
Line_119 $$ while (!processHandler.waitFor()) -->Line_120 $$ LOG.info("processHandler.waitFor() returned false for session " + sessionId + ", continue waiting")[ CD ]
Line_32 $$ sessionId = UUID.randomUUID()-->Line_160 $$ handleProcessExecutionFailure(sessionId, e)[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_23 $$ final Pair<RequestFuture<PreloadedProcessMessageHandler>, OSProcessHandler> preloaded = takePreloadedProcess(projectPath)[ FD ]
Line_66 $$ if (!usingPreloadedProcess) -->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ CD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_89 $$ myMessageDispatcher.cancelSession(future.getRequestID())[ FD ]
Line_51 $$ if (IS_UNIT_TEST_MODE) -->Line_52 $$ LOG.info("Scheduling build for " + projectPath + "; CHANGED: " + new HashSet<String>(convertToStringPaths(data.myChanged)) + "; DELETED: " + new HashSet<String>(convertToStringPaths(data.myDeleted)))[ CD ]
Line_26 $$ final UUID sessionId-->Line_29 $$ sessionId = preloadedFuture.getRequestID()[ FD ]
Line_56 $$ projectTaskQueue = data.taskQueue-->Line_147 $$ final Future<Pair<RequestFuture<PreloadedProcessMessageHandler>, OSProcessHandler>> preloadResult = launchPreloadedBuildProcess(project, projectTaskQueue)[ FD ]
Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_123 $$ if (exitValue != 0) -->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ CD ]
Line_58 $$ final CmdlineRemoteProto.Message.ControllerMessage params-->Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)[ FD ]
Line_36 $$ if (!usingPreloadedProcess && (future.isCancelled() || project.isDisposed())) -->Line_40 $$ return[ CD ]
Line_6 $$ final BuilderMessageHandler handler = new NotifyingMessageHandler(project, messageHandler, isAutomake)-->Line_12 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(e.getMessage(), null))[ FD ]
Line_42 $$ final CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings globals = CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.newBuilder().setGlobalOptionsPath(PathManager.getOptionsPath()).build()-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_139 $$ myBuildsInProgress.remove(projectPath)[ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_122 $$ final int exitValue = processHandler.getProcess().exitValue()[ FD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_32 $$ sessionId = UUID.randomUUID()[ FD ]
Line_5 $$ final boolean isAutomake = messageHandler instanceof AutoMakeMessageHandler-->Line_94 $$ if (isAutomake && needRescan) [ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_119 $$ while (!processHandler.waitFor()) [ FD ]
Line_26 $$ final UUID sessionId-->Line_117 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ FD ]
Line_43 $$ CmdlineRemoteProto.Message.ControllerMessage.FSEvent currentFSChanges-->Line_55 $$ currentFSChanges = needRescan ? null : data.createNextEvent()[ FD ]
Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_127 $$ msg.append("\n").append(errorsOnLaunch)[ FD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_140 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
Line_58 $$ final CmdlineRemoteProto.Message.ControllerMessage params-->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_117 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ FD ]
Line_85 $$ CharSequence errorsOnLaunch-->Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_94 $$ if (isAutomake && needRescan) [ CD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_13 $$ handler.sessionTerminated(sessionId)[ FD ]
Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)-->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ FD ]
Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)-->Line_88 $$ if (!paramsSent) [ FD ]
Line_44 $$ final SequentialTaskExecutor projectTaskQueue-->Line_70 $$ projectTaskQueue.submit(new Runnable() [ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_114 $$ Integer debugPort = processHandler.getUserData(COMPILER_PROCESS_DEBUG_PORT)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ CD ]
Line_26 $$ final UUID sessionId-->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_111 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ FD ]
Line_26 $$ final UUID sessionId-->Line_140 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
Line_142 $$ runCommand(new Runnable() -->Line_145 $$ if (!myPreloadedBuilds.containsKey(projectPath)) [ CD ]
Line_58 $$ final CmdlineRemoteProto.Message.ControllerMessage params-->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_47 $$ final ProjectData data = getProjectData(projectPath)-->Line_54 $$ needRescan = data.getAndResetRescanFlag()[ FD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_83 $$ myBuildsInProgress.put(projectPath, future)[ FD ]
Line_36 $$ if (!usingPreloadedProcess && (future.isCancelled() || project.isDisposed())) -->Line_39 $$ ((BasicFuture) future).setDone()[ CD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ FD ]
Line_24 $$ final RequestFuture<PreloadedProcessMessageHandler> preloadedFuture = preloaded != null ? preloaded.first : null-->Line_30 $$ preloadedFuture.getMessageHandler().setDelegateHandler(handler)[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_32 $$ sessionId = UUID.randomUUID()[ FD ]
Line_27 $$ if (usingPreloadedProcess) -->Line_29 $$ sessionId = preloadedFuture.getRequestID()[ CD ]
Line_58 $$ final CmdlineRemoteProto.Message.ControllerMessage params-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_59 $$ if (isRebuild) -->Line_61 $$ if (onlyCheckUpToDate) [ CD ]
Line_99 $$ SwingUtilities.invokeAndWait(new Runnable() -->Line_102 $$ project.save()[ CD ]
Line_32 $$ sessionId = UUID.randomUUID()-->Line_109 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ FD ]
Line_85 $$ CharSequence errorsOnLaunch-->Line_127 $$ msg.append("\n").append(errorsOnLaunch)[ FD ]
Line_123 $$ if (exitValue != 0) -->Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ CD ]
Line_91 $$ processHandler = preloaded.second-->Line_122 $$ final int exitValue = processHandler.getProcess().exitValue()[ FD ]
Line_26 $$ final UUID sessionId-->Line_160 $$ handleProcessExecutionFailure(sessionId, e)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_112 $$ processHandler.startNotify()[ CD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_83 $$ myBuildsInProgress.put(projectPath, future)[ FD ]
Line_85 $$ CharSequence errorsOnLaunch-->Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ FD ]
Line_55 $$ currentFSChanges = needRescan ? null : data.createNextEvent()-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_91 $$ processHandler = preloaded.second-->Line_114 $$ Integer debugPort = processHandler.getUserData(COMPILER_PROCESS_DEBUG_PORT)[ FD ]
Line_59 $$ if (isRebuild) -->Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)[ CD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_160 $$ handleProcessExecutionFailure(sessionId, e)[ FD ]
Line_16 $$ final DelegateFuture<BuilderMessageHandler> _future = new DelegateFuture<BuilderMessageHandler>()-->Line_35 $$ _future.setDelegate(future)[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_145 $$ if (!myPreloadedBuilds.containsKey(projectPath)) [ FD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_36 $$ if (!usingPreloadedProcess && (future.isCancelled() || project.isDisposed())) [ FD ]
Line_42 $$ final CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings globals = CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.newBuilder().setGlobalOptionsPath(PathManager.getOptionsPath()).build()-->Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_148 $$ myPreloadedBuilds.put(projectPath, preloadResult)[ FD ]
Line_147 $$ final Future<Pair<RequestFuture<PreloadedProcessMessageHandler>, OSProcessHandler>> preloadResult = launchPreloadedBuildProcess(project, projectTaskQueue)-->Line_148 $$ myPreloadedBuilds.put(projectPath, preloadResult)[ FD ]
Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)-->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_88 $$ if (!paramsSent) [ CD ]
Line_77 $$ if (usingPreloadedProcess) -->Line_78 $$ future.cancel(false)[ CD ]
Line_32 $$ sessionId = UUID.randomUUID()-->Line_134 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(msg.toString(), null))[ FD ]
Line_58 $$ final CmdlineRemoteProto.Message.ControllerMessage params-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_117 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ FD ]
Line_128 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) -->Line_129 $$ msg.append("\nThe error may be caused by JARs in Java Extensions directory which conflicts with libraries used by the external build process.").append("\nTry adding -Djava.ext.dirs=\"\" argument to 'Build process VM options' in File | Settings | Build, Execution, Deployment | Compiler to fix the problem.")[ CD ]
Line_25 $$ final boolean usingPreloadedProcess = preloadedFuture != null-->Line_36 $$ if (!usingPreloadedProcess && (future.isCancelled() || project.isDisposed())) [ FD ]
Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_132 $$ msg.append("unknown error")[ CD ]
Line_32 $$ sessionId = UUID.randomUUID()-->Line_140 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
Line_70 $$ projectTaskQueue.submit(new Runnable() -->Line_74 $$ Throwable execFailure = null[ CD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_47 $$ final ProjectData data = getProjectData(projectPath)[ FD ]
Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_127 $$ msg.append("\n").append(errorsOnLaunch)[ CD ]
Line_29 $$ sessionId = preloadedFuture.getRequestID()-->Line_160 $$ handleProcessExecutionFailure(sessionId, e)[ FD ]
Line_45 $$ final boolean needRescan-->Line_94 $$ if (isAutomake && needRescan) [ FD ]
Line_43 $$ CmdlineRemoteProto.Message.ControllerMessage.FSEvent currentFSChanges-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_109 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ CD ]
Line_42 $$ final CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings globals = CmdlineRemoteProto.Message.ControllerMessage.GlobalSettings.newBuilder().setGlobalOptionsPath(PathManager.getOptionsPath()).build()-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_91 $$ processHandler = preloaded.second-->Line_111 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ FD ]
Line_55 $$ currentFSChanges = needRescan ? null : data.createNextEvent()-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ FD ]
Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) [ FD ]
Line_44 $$ final SequentialTaskExecutor projectTaskQueue-->Line_147 $$ final Future<Pair<RequestFuture<PreloadedProcessMessageHandler>, OSProcessHandler>> preloadResult = launchPreloadedBuildProcess(project, projectTaskQueue)[ FD ]
Line_25 $$ final boolean usingPreloadedProcess = preloadedFuture != null-->Line_66 $$ if (!usingPreloadedProcess) [ FD ]
Line_91 $$ processHandler = preloaded.second-->Line_119 $$ while (!processHandler.waitFor()) [ FD ]
Line_27 $$ if (usingPreloadedProcess) -->Line_30 $$ preloadedFuture.getMessageHandler().setDelegateHandler(handler)[ CD ]
Line_47 $$ final ProjectData data = getProjectData(projectPath)-->Line_55 $$ currentFSChanges = needRescan ? null : data.createNextEvent()[ FD ]
Line_44 $$ final SequentialTaskExecutor projectTaskQueue-->Line_56 $$ projectTaskQueue = data.taskQueue[ FD ]
Line_61 $$ if (onlyCheckUpToDate) -->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ CD ]
Line_43 $$ CmdlineRemoteProto.Message.ControllerMessage.FSEvent currentFSChanges-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_91 $$ processHandler = preloaded.second[ CD ]
Line_54 $$ needRescan = data.getAndResetRescanFlag()-->Line_94 $$ if (isAutomake && needRescan) [ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_27 $$ if (usingPreloadedProcess) -->Line_32 $$ sessionId = UUID.randomUUID()[ CD ]
Line_56 $$ projectTaskQueue = data.taskQueue-->Line_70 $$ projectTaskQueue.submit(new Runnable() [ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ CD ]
Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)-->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ FD ]
Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)-->Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)[ FD ]
Line_6 $$ final BuilderMessageHandler handler = new NotifyingMessageHandler(project, messageHandler, isAutomake)-->Line_13 $$ handler.sessionTerminated(sessionId)[ FD ]
Line_47 $$ final ProjectData data = getProjectData(projectPath)-->Line_49 $$ data.dropChanges()[ FD ]
Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)-->Line_128 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ FD ]
Line_32 $$ sessionId = UUID.randomUUID()-->Line_117 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_12 $$ handler.handleFailure(sessionId, CmdlineProtoUtil.createFailure(e.getMessage(), null))[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_140 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)-->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ FD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_67 $$ myMessageDispatcher.registerBuildMessageHandler(future, params)[ FD ]
Line_76 $$ if (project.isDisposed()) -->Line_77 $$ if (usingPreloadedProcess) [ CD ]
Line_60 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, Collections.<String>emptyList(), userData, globals, null)-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_112 $$ processHandler.startNotify()[ FD ]
Line_74 $$ Throwable execFailure = null-->Line_140 $$ notifySessionTerminationIfNeeded(sessionId, execFailure)[ FD ]
Line_24 $$ final RequestFuture<PreloadedProcessMessageHandler> preloadedFuture = preloaded != null ? preloaded.first : null-->Line_29 $$ sessionId = preloadedFuture.getRequestID()[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_109 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ FD ]
Line_86 $$ if (usingPreloadedProcess) -->Line_111 $$ processHandler.addProcessListener(new StdOutputCollector((StringBuffer) errorsOnLaunch))[ CD ]
Line_84 $$ final OSProcessHandler processHandler-->Line_91 $$ processHandler = preloaded.second[ FD ]
Line_115 $$ if (debugPort != null) -->Line_117 $$ messageHandler.handleCompileMessage(sessionId, CmdlineProtoUtil.createCompileProgressMessageResponse(message).getCompileMessage())[ CD ]
Line_45 $$ final boolean needRescan-->Line_54 $$ needRescan = data.getAndResetRescanFlag()[ FD ]
Line_91 $$ processHandler = preloaded.second-->Line_112 $$ processHandler.startNotify()[ FD ]
Line_48 $$ if (isRebuild) -->Line_49 $$ data.dropChanges()[ CD ]
Line_26 $$ final UUID sessionId-->Line_109 $$ processHandler = launchBuildProcess(project, myListenPort, sessionId, false)[ FD ]
Line_85 $$ CharSequence errorsOnLaunch-->Line_128 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ FD ]
Line_126 $$ if (errorsOnLaunch != null && errorsOnLaunch.length() > 0) -->Line_128 $$ if (StringUtil.contains(errorsOnLaunch, "java.lang.NoSuchMethodError")) [ CD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_35 $$ _future.setDelegate(future)[ FD ]
Line_6 $$ final BuilderMessageHandler handler = new NotifyingMessageHandler(project, messageHandler, isAutomake)-->Line_30 $$ preloadedFuture.getMessageHandler().setDelegateHandler(handler)[ FD ]
Line_91 $$ processHandler = preloaded.second-->Line_92 $$ errorsOnLaunch = STDERR_OUTPUT.get(processHandler)[ FD ]
Line_62 $$ params = CmdlineProtoUtil.createUpToDateCheckRequest(projectPath, scopes, paths, userData, globals, currentFSChanges)-->Line_87 $$ final boolean paramsSent = myMessageDispatcher.sendBuildParameters(future.getRequestID(), params)[ FD ]
Line_34 $$ final RequestFuture<? extends BuilderMessageHandler> future = usingPreloadedProcess ? preloadedFuture : new RequestFuture<BuilderMessageHandler>(handler, sessionId, new CancelBuildSessionAction<BuilderMessageHandler>())-->Line_78 $$ future.cancel(false)[ FD ]
Line_11 $$ final UUID sessionId = UUID.randomUUID()-->Line_29 $$ sessionId = preloadedFuture.getRequestID()[ FD ]
Line_4 $$ final String projectPath = getProjectPath(project)-->Line_64 $$ params = CmdlineProtoUtil.createBuildRequest(projectPath, scopes, isMake ? Collections.<String>emptyList() : paths, userData, globals, currentFSChanges)[ FD ]
Line_88 $$ if (!paramsSent) -->Line_89 $$ myMessageDispatcher.cancelSession(future.getRequestID())[ CD ]
Line_141 $$ if (isProcessPreloadingEnabled(project)) -->Line_142 $$ runCommand(new Runnable() [ CD ]
