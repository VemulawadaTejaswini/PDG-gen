Line_13 $$ if (myMoveDestination != null && myCreateNewBuilderClass) -->Line_14 $$ myMoveDestination.analyzeModuleConflicts(Collections.<PsiElement>emptyList(), conflicts, refUsages.get())[ CD ]
Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()-->Line_8 $$ conflicts.putValue(null, "Selected class was not found.")[ FD ]
Line_17 $$ if (commonConstructor == null) -->Line_18 $$ conflicts.putValue(null, "Found constructors are not reducible to simple chain")[ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_6 $$ if (builderClass == null) [ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_20 $$ return showConflicts(conflicts, refUsages.get())[ CD ]
Line_7 $$ if (!myCreateNewBuilderClass) -->Line_8 $$ conflicts.putValue(null, "Selected class was not found.")[ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_4 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(myProject)[ CD ]
Line_5 $$ final PsiClass builderClass = psiFacade.findClass(StringUtil.getQualifiedName(myPackageName, myClassName), GlobalSearchScope.projectScope(myProject))-->Line_6 $$ if (builderClass == null) [ FD ]
Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()-->Line_14 $$ myMoveDestination.analyzeModuleConflicts(Collections.<PsiElement>emptyList(), conflicts, refUsages.get())[ FD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_17 $$ if (commonConstructor == null) [ CD ]
Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()-->Line_18 $$ conflicts.putValue(null, "Found constructors are not reducible to simple chain")[ FD ]
Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()-->Line_20 $$ return showConflicts(conflicts, refUsages.get())[ FD ]
Line_4 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(myProject)-->Line_5 $$ final PsiClass builderClass = psiFacade.findClass(StringUtil.getQualifiedName(myPackageName, myClassName), GlobalSearchScope.projectScope(myProject))[ FD ]
Line_16 $$ final PsiMethod commonConstructor = getMostCommonConstructor()-->Line_17 $$ if (commonConstructor == null) [ FD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()[ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_20 $$ return showConflicts(conflicts, refUsages.get())[ FD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_5 $$ final PsiClass builderClass = psiFacade.findClass(StringUtil.getQualifiedName(myPackageName, myClassName), GlobalSearchScope.projectScope(myProject))[ CD ]
Line_10 $$ if (myCreateNewBuilderClass) -->Line_11 $$ conflicts.putValue(builderClass, "Class with chosen name already exist.")[ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_13 $$ if (myMoveDestination != null && myCreateNewBuilderClass) [ CD ]
Line_3 $$ final MultiMap<PsiElement, String> conflicts = new MultiMap<PsiElement, String>()-->Line_11 $$ conflicts.putValue(builderClass, "Class with chosen name already exist.")[ FD ]
Line_6 $$ if (builderClass == null) -->Line_10 $$ if (myCreateNewBuilderClass) [ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_16 $$ final PsiMethod commonConstructor = getMostCommonConstructor()[ CD ]
Line_2 $$ protected boolean preprocessUsages(@NotNull Ref<UsageInfo[]> refUsages) -->Line_14 $$ myMoveDestination.analyzeModuleConflicts(Collections.<PsiElement>emptyList(), conflicts, refUsages.get())[ FD ]
Line_6 $$ if (builderClass == null) -->Line_7 $$ if (!myCreateNewBuilderClass) [ CD ]
Line_5 $$ final PsiClass builderClass = psiFacade.findClass(StringUtil.getQualifiedName(myPackageName, myClassName), GlobalSearchScope.projectScope(myProject))-->Line_11 $$ conflicts.putValue(builderClass, "Class with chosen name already exist.")[ FD ]
