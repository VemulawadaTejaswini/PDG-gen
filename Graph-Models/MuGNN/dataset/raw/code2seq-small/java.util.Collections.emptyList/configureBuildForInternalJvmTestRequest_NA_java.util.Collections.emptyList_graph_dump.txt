Line_13 $$ final TestFilter filter = testTask.getFilter()-->Line_14 $$ filter.includeTest(jvmTestRequest.getClassName(), jvmTestRequest.getMethodName())[ FD ]
Line_10 $$ final Collection<Test> testTasks = project.getTasks().withType(Test.class)-->Line_17 $$ tasksToExecute.addAll(testTasks)[ FD ]
Line_11 $$ for (Test testTask : testTasks) -->Line_13 $$ final TestFilter filter = testTask.getFilter()[ FD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_7 $$ List<Test> tasksToExecute = new ArrayList<Test>()[ CD ]
Line_7 $$ List<Test> tasksToExecute = new ArrayList<Test>()-->Line_17 $$ tasksToExecute.addAll(testTasks)[ FD ]
Line_12 $$ for (InternalJvmTestRequest jvmTestRequest : internalJvmTestRequests) -->Line_14 $$ filter.includeTest(jvmTestRequest.getClassName(), jvmTestRequest.getMethodName())[ FD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_19 $$ return tasksToExecute[ CD ]
Line_4 $$ if (internalJvmTestRequests.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_3 $$ final Collection<InternalJvmTestRequest> internalJvmTestRequests = testExecutionRequest.getInternalJvmTestRequests()[ FD ]
Line_9 $$ for (Project project : allprojects) -->Line_10 $$ final Collection<Test> testTasks = project.getTasks().withType(Test.class)[ FD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_4 $$ if (internalJvmTestRequests.isEmpty()) [ CD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_8 $$ final Set<Project> allprojects = gradle.getRootProject().getAllprojects()[ CD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_8 $$ final Set<Project> allprojects = gradle.getRootProject().getAllprojects()[ FD ]
Line_2 $$ private List<Test> configureBuildForInternalJvmTestRequest(GradleInternal gradle, TestExecutionRequestAction testExecutionRequest) -->Line_3 $$ final Collection<InternalJvmTestRequest> internalJvmTestRequests = testExecutionRequest.getInternalJvmTestRequests()[ CD ]
Line_3 $$ final Collection<InternalJvmTestRequest> internalJvmTestRequests = testExecutionRequest.getInternalJvmTestRequests()-->Line_4 $$ if (internalJvmTestRequests.isEmpty()) [ FD ]
