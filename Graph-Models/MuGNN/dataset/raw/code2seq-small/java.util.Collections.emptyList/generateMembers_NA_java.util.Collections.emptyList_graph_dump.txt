Line_5 $$ equals = createEquals()-->Line_25 $$ if (equals != null) [ FD ]
Line_7 $$ PsiMethod hashCode = null-->Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)[ FD ]
Line_17 $$ text += "public int hashCode() -->Line_18 $$ final PsiMethod trivialHashCode = myFactory.createMethodFromText(text, null)[ FD ]
Line_27 $$ if (hashCode != null) -->Line_30 $$ return Collections.emptyList()[ CD ]
Line_5 $$ equals = createEquals()-->Line_26 $$ return Collections.singletonList(equals)[ FD ]
Line_10 $$ hashCode = createHashCode()-->Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)[ FD ]
Line_2 $$ public Collection<PsiMethod> generateMembers() throws IncorrectOperationException -->Line_3 $$ PsiMethod equals = null[ CD ]
Line_12 $$ if (!mySuperHasHashCode) -->Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)[ CD ]
Line_12 $$ if (!mySuperHasHashCode) -->Line_18 $$ final PsiMethod trivialHashCode = myFactory.createMethodFromText(text, null)[ CD ]
Line_9 $$ if (myHashCodeFields.length > 0) -->Line_12 $$ if (!mySuperHasHashCode) [ CD ]
Line_4 $$ if (myEqualsFields != null && findMethod(myClass, getEqualsSignature(myProject, myClass.getResolveScope())) == null) -->Line_5 $$ equals = createEquals()[ CD ]
Line_10 $$ hashCode = createHashCode()-->Line_24 $$ return Arrays.asList(equals, hashCode)[ FD ]
Line_3 $$ PsiMethod equals = null-->Line_24 $$ return Arrays.asList(equals, hashCode)[ FD ]
Line_5 $$ equals = createEquals()-->Line_24 $$ return Arrays.asList(equals, hashCode)[ FD ]
Line_2 $$ public Collection<PsiMethod> generateMembers() throws IncorrectOperationException -->Line_23 $$ if (hashCode != null && equals != null) [ CD ]
Line_12 $$ if (!mySuperHasHashCode) -->Line_14 $$ if (shouldAddOverrideAnnotation(myClass)) [ CD ]
Line_15 $$ text += "@Override\n"-->Line_18 $$ final PsiMethod trivialHashCode = myFactory.createMethodFromText(text, null)[ FD ]
Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)-->Line_24 $$ return Arrays.asList(equals, hashCode)[ FD ]
Line_9 $$ if (myHashCodeFields.length > 0) -->Line_10 $$ hashCode = createHashCode()[ CD ]
Line_8 $$ if (myHashCodeFields != null && findMethod(myClass, getHashCodeSignature()) == null) -->Line_9 $$ if (myHashCodeFields.length > 0) [ CD ]
Line_2 $$ public Collection<PsiMethod> generateMembers() throws IncorrectOperationException -->Line_8 $$ if (myHashCodeFields != null && findMethod(myClass, getHashCodeSignature()) == null) [ CD ]
Line_3 $$ PsiMethod equals = null-->Line_5 $$ equals = createEquals()[ FD ]
Line_15 $$ text += "@Override\n"-->Line_17 $$ text += "public int hashCode() [ FD ]
Line_7 $$ PsiMethod hashCode = null-->Line_28 $$ return Collections.singletonList(hashCode)[ FD ]
Line_25 $$ if (equals != null) -->Line_26 $$ return Collections.singletonList(equals)[ CD ]
Line_3 $$ PsiMethod equals = null-->Line_26 $$ return Collections.singletonList(equals)[ FD ]
Line_13 $$ String text = ""-->Line_15 $$ text += "@Override\n"[ FD ]
Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)-->Line_27 $$ if (hashCode != null) [ FD ]
Line_10 $$ hashCode = createHashCode()-->Line_28 $$ return Collections.singletonList(hashCode)[ FD ]
Line_7 $$ PsiMethod hashCode = null-->Line_10 $$ hashCode = createHashCode()[ FD ]
Line_10 $$ hashCode = createHashCode()-->Line_27 $$ if (hashCode != null) [ FD ]
Line_27 $$ if (hashCode != null) -->Line_28 $$ return Collections.singletonList(hashCode)[ CD ]
Line_2 $$ public Collection<PsiMethod> generateMembers() throws IncorrectOperationException -->Line_4 $$ if (myEqualsFields != null && findMethod(myClass, getEqualsSignature(myProject, myClass.getResolveScope())) == null) [ CD ]
Line_13 $$ String text = ""-->Line_18 $$ final PsiMethod trivialHashCode = myFactory.createMethodFromText(text, null)[ FD ]
Line_12 $$ if (!mySuperHasHashCode) -->Line_17 $$ text += "public int hashCode() [ CD ]
Line_3 $$ PsiMethod equals = null-->Line_25 $$ if (equals != null) [ FD ]
Line_13 $$ String text = ""-->Line_17 $$ text += "public int hashCode() [ FD ]
Line_25 $$ if (equals != null) -->Line_27 $$ if (hashCode != null) [ CD ]
Line_7 $$ PsiMethod hashCode = null-->Line_24 $$ return Arrays.asList(equals, hashCode)[ FD ]
Line_23 $$ if (hashCode != null && equals != null) -->Line_24 $$ return Arrays.asList(equals, hashCode)[ CD ]
Line_18 $$ final PsiMethod trivialHashCode = myFactory.createMethodFromText(text, null)-->Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)[ FD ]
Line_2 $$ public Collection<PsiMethod> generateMembers() throws IncorrectOperationException -->Line_7 $$ PsiMethod hashCode = null[ CD ]
Line_23 $$ if (hashCode != null && equals != null) -->Line_25 $$ if (equals != null) [ CD ]
Line_19 $$ hashCode = (PsiMethod) myCodeStyleManager.reformat(trivialHashCode)-->Line_28 $$ return Collections.singletonList(hashCode)[ FD ]
Line_12 $$ if (!mySuperHasHashCode) -->Line_13 $$ String text = ""[ CD ]
Line_14 $$ if (shouldAddOverrideAnnotation(myClass)) -->Line_15 $$ text += "@Override\n"[ CD ]
Line_7 $$ PsiMethod hashCode = null-->Line_27 $$ if (hashCode != null) [ FD ]
