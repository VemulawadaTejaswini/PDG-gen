Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_102 $$ if (metaData.getExecutorName() != null) [ FD ]
Line_102 $$ if (metaData.getExecutorName() != null) -->Line_103 $$ final InjectedValue<Executor> executor = new InjectedValue<Executor>()[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_35 $$ final WebInjectionContainer injectionContainer = new WebInjectionContainer(module.getClassLoader(), componentRegistry)[ CD ]
Line_38 $$ jaccContextId = deploymentUnit.getName()-->Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_73 $$ SharedSessionManagerConfig sharedSessionManagerConfig = deploymentUnit.getParent() != null ? deploymentUnit.getParent().getAttachment(UndertowAttachments.SHARED_SESSION_MANAGER_CONFIG) : null[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_105 $$ undertowDeploymentInfoService.addInjectedExecutor(metaData.getExecutorName(), executor)[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_125 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_IDENTIFIER_CODEC_SERVICE_NAME), SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()-->Line_56 $$ metaDataSecurityDomain = metaDataSecurityDomain.trim()[ FD ]
Line_66 $$ final Set<ServiceName> additionalDependencies = new HashSet()-->Line_82 $$ additionalDependencies.addAll(warMetaData.getAdditionalDependencies())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_83 $$ final ServiceName hostServiceName = UndertowService.virtualHostName(serverInstanceName, hostName)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_81 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(Constants.PERMISSION_COLLECTION_ATTRIBUTE_NAME, deploymentUnit.getAttachment(Attachments.MODULE_PERMISSIONS)))[ FD ]
Line_52 $$ if (metaDataSecurityDomain == null) -->Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)[ CD ]
Line_58 $$ final String securityDomain-->Line_62 $$ securityDomain = null[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_109 $$ for (JBossServletMetaData servlet : metaData.getServlets()) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_168 $$ node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_3 $$ ResourceRoot deploymentResourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()[ FD ]
Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()-->Line_52 $$ if (metaDataSecurityDomain == null) [ FD ]
Line_103 $$ final InjectedValue<Executor> executor = new InjectedValue<Executor>()-->Line_112 $$ infoBuilder.addDependency(IOServices.WORKER.append(servlet.getExecutorName()), Executor.class, executor)[ FD ]
Line_118 $$ if (componentRegistryExists) -->Line_121 $$ undertowDeploymentInfoService.getComponentRegistryInjectedValue().setValue(new ImmediateValue(componentRegistry))[ CD ]
Line_84 $$ TldsMetaData tldsMetaData = deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_74 $$ if (!deploymentResourceRoot.isUsePhysicalCodeSource()) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_104 $$ infoBuilder.addDependency(IOServices.WORKER.append(metaData.getExecutorName()), Executor.class, executor)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_133 $$ final boolean isWebappBundle = deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)[ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()[ FD ]
Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)-->Line_150 $$ jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME), PolicyConfiguration.class, jaccService.getParentPolicyInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_28 $$ ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY)[ CD ]
Line_36 $$ String jaccContextId = metaData.getJaccContextID()-->Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)[ FD ]
Line_66 $$ final Set<ServiceName> additionalDependencies = new HashSet()-->Line_70 $$ additionalDependencies.addAll(dependencies)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_87 $$ final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME)[ CD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_128 $$ infoBuilder.addDependency(sessionManagerFactoryServiceName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ CD ]
Line_103 $$ final InjectedValue<Executor> executor = new InjectedValue<Executor>()-->Line_105 $$ undertowDeploymentInfoService.addInjectedExecutor(metaData.getExecutorName(), executor)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ CD ]
Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)-->Line_130 $$ infoBuilder.addDependency(sessionIdentifierCodecServiceName, SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)-->Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_130 $$ infoBuilder.addDependency(sessionIdentifierCodecServiceName, SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_102 $$ if (metaData.getExecutorName() != null) -->Line_106 $$ seenExecutors.add(metaData.getExecutorName())[ CD ]
Line_102 $$ if (metaData.getExecutorName() != null) -->Line_105 $$ undertowDeploymentInfoService.addInjectedExecutor(metaData.getExecutorName(), executor)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_171 $$ processManagement(deploymentUnit, metaData)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_123 $$ if (sharedSessionManagerConfig != null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_119 $$ infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit), ComponentRegistry.class, undertowDeploymentInfoService.getComponentRegistryInjectedValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_52 $$ if (metaDataSecurityDomain == null) [ CD ]
Line_101 $$ final Set<String> seenExecutors = new HashSet<String>()-->Line_106 $$ seenExecutors.add(metaData.getExecutorName())[ FD ]
Line_43 $$ String deploymentName-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_36 $$ String jaccContextId = metaData.getJaccContextID()-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())-->Line_159 $$ UndertowDeploymentService.ContextActivatorImpl activator = new UndertowDeploymentService.ContextActivatorImpl(builder.install())[ FD ]
Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)-->Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_10 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS)[ FD ]
Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))-->Line_128 $$ infoBuilder.addDependency(sessionManagerFactoryServiceName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_169 $$ node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_4 $$ final VirtualFile deploymentRoot = deploymentResourceRoot.getRoot()[ CD ]
Line_36 $$ String jaccContextId = metaData.getJaccContextID()-->Line_38 $$ jaccContextId = deploymentUnit.getName()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_27 $$ boolean componentRegistryExists = true[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_12 $$ final Set<ServiceName> dependentComponents = new HashSet()[ CD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ CD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ FD ]
Line_64 $$ String serverInstanceName = metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName()-->Line_83 $$ final ServiceName hostServiceName = UndertowService.virtualHostName(serverInstanceName, hostName)[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_105 $$ undertowDeploymentInfoService.addInjectedExecutor(metaData.getExecutorName(), executor)[ FD ]
Line_56 $$ metaDataSecurityDomain = metaDataSecurityDomain.trim()-->Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)[ FD ]
Line_23 $$ String servletContainerName = metaData.getServletContainerName()-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_59 $$ if (securityEnabled) [ CD ]
Line_36 $$ String jaccContextId = metaData.getJaccContextID()-->Line_37 $$ if (jaccContextId == null) [ FD ]
Line_95 $$ topLevelName = deploymentUnit.getName()-->Line_97 $$ topLevelName = deploymentUnit.getParent().getName()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_55 $$ if (metaDataSecurityDomain != null) [ CD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_139 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, deploymentServiceName)[ CD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_125 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_IDENTIFIER_CODEC_SERVICE_NAME), SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ CD ]
Line_27 $$ boolean componentRegistryExists = true-->Line_30 $$ componentRegistryExists = false[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_38 $$ jaccContextId = deploymentUnit.getName()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_58 $$ final String securityDomain[ CD ]
Line_58 $$ final String securityDomain-->Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_73 $$ SharedSessionManagerConfig sharedSessionManagerConfig = deploymentUnit.getParent() != null ? deploymentUnit.getParent().getAttachment(UndertowAttachments.SHARED_SESSION_MANAGER_CONFIG) : null[ CD ]
Line_4 $$ final VirtualFile deploymentRoot = deploymentResourceRoot.getRoot()-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_92 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_124 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_MANAGER_SERVICE_NAME), SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_12 $$ final Set<ServiceName> dependentComponents = new HashSet()-->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_64 $$ String serverInstanceName = metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName()-->Line_170 $$ node.get(DeploymentDefinition.SERVER.getName()).set(serverInstanceName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_169 $$ node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_76 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(Constants.CODE_SOURCE_ATTRIBUTE_NAME, deploymentRoot.toURL()))[ FD ]
Line_3 $$ ResourceRoot deploymentResourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_74 $$ if (!deploymentResourceRoot.isUsePhysicalCodeSource()) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_28 $$ ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY)[ FD ]
Line_19 $$ if (!failed.contains(component)) -->Line_20 $$ dependentComponents.add(component)[ CD ]
Line_144 $$ if (jaccService != null) -->Line_147 $$ if (deploymentUnit.getParent() != null) [ CD ]
Line_38 $$ jaccContextId = deploymentUnit.getName()-->Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_147 $$ if (deploymentUnit.getParent() != null) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_81 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(Constants.PERMISSION_COLLECTION_ATTRIBUTE_NAME, deploymentUnit.getAttachment(Attachments.MODULE_PERMISSIONS)))[ CD ]
Line_62 $$ securityDomain = null-->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ FD ]
Line_109 $$ for (JBossServletMetaData servlet : metaData.getServlets()) -->Line_112 $$ infoBuilder.addDependency(IOServices.WORKER.append(servlet.getExecutorName()), Executor.class, executor)[ FD ]
Line_134 $$ final UndertowDeploymentService service = new UndertowDeploymentService(injectionContainer, !isWebappBundle)-->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_10 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_17 $$ final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS)[ CD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_130 $$ infoBuilder.addDependency(sessionIdentifierCodecServiceName, SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ CD ]
Line_133 $$ final boolean isWebappBundle = deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)-->Line_134 $$ final UndertowDeploymentService service = new UndertowDeploymentService(injectionContainer, !isWebappBundle)[ FD ]
Line_92 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) -->Line_93 $$ String topLevelName[ CD ]
Line_17 $$ final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS)-->Line_19 $$ if (!failed.contains(component)) [ FD ]
Line_97 $$ topLevelName = deploymentUnit.getParent().getName()-->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ FD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_6 $$ if (module == null) [ FD ]
Line_92 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) -->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_171 $$ processManagement(deploymentUnit, metaData)[ FD ]
Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())-->Line_163 $$ builder.install()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_84 $$ TldsMetaData tldsMetaData = deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY)[ FD ]
Line_55 $$ if (metaDataSecurityDomain != null) -->Line_56 $$ metaDataSecurityDomain = metaDataSecurityDomain.trim()[ CD ]
Line_58 $$ final String securityDomain-->Line_89 $$ if (securityDomain != null) [ FD ]
Line_83 $$ final ServiceName hostServiceName = UndertowService.virtualHostName(serverInstanceName, hostName)-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_102 $$ if (metaData.getExecutorName() != null) -->Line_104 $$ infoBuilder.addDependency(IOServices.WORKER.append(metaData.getExecutorName()), Executor.class, executor)[ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()[ FD ]
Line_109 $$ for (JBossServletMetaData servlet : metaData.getServlets()) -->Line_110 $$ if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_29 $$ if (componentRegistry == null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_40 $$ if (deploymentUnit.getParent() != null) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_82 $$ additionalDependencies.addAll(warMetaData.getAdditionalDependencies())[ CD ]
Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId-->Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_94 $$ if (deploymentUnit.getParent() == null) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_7 $$ throw new DeploymentUnitProcessingException(UndertowLogger.ROOT_LOGGER.failedToResolveModule(deploymentUnit))[ FD ]
Line_159 $$ UndertowDeploymentService.ContextActivatorImpl activator = new UndertowDeploymentService.ContextActivatorImpl(builder.install())-->Line_160 $$ deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY, activator)[ FD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_161 $$ deploymentUnit.addToAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES, deploymentServiceName)[ FD ]
Line_144 $$ if (jaccService != null) -->Line_154 $$ jaccBuilder.setInitialMode(Mode.PASSIVE).install()[ CD ]
Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()-->Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)[ FD ]
Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)-->Line_55 $$ if (metaDataSecurityDomain != null) [ FD ]
Line_73 $$ SharedSessionManagerConfig sharedSessionManagerConfig = deploymentUnit.getParent() != null ? deploymentUnit.getParent().getAttachment(UndertowAttachments.SHARED_SESSION_MANAGER_CONFIG) : null-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_130 $$ infoBuilder.addDependency(sessionIdentifierCodecServiceName, SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()[ CD ]
Line_18 $$ for (final ServiceName component : components) -->Line_20 $$ dependentComponents.add(component)[ FD ]
Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)-->Line_154 $$ jaccBuilder.setInitialMode(Mode.PASSIVE).install()[ FD ]
Line_94 $$ if (deploymentUnit.getParent() == null) -->Line_97 $$ topLevelName = deploymentUnit.getParent().getName()[ CD ]
Line_109 $$ for (JBossServletMetaData servlet : metaData.getServlets()) -->Line_114 $$ seenExecutors.add(servlet.getExecutorName())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_17 $$ final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS)[ FD ]
Line_62 $$ securityDomain = null-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_67 $$ for (final SetupAction setupAction : setupActions) -->Line_68 $$ Set<ServiceName> dependencies = setupAction.dependencies()[ FD ]
Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)-->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_101 $$ final Set<String> seenExecutors = new HashSet<String>()[ CD ]
Line_73 $$ SharedSessionManagerConfig sharedSessionManagerConfig = deploymentUnit.getParent() != null ? deploymentUnit.getParent().getAttachment(UndertowAttachments.SHARED_SESSION_MANAGER_CONFIG) : null-->Line_123 $$ if (sharedSessionManagerConfig != null) [ FD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_124 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_MANAGER_SERVICE_NAME), SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_64 $$ String serverInstanceName = metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName()[ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_106 $$ seenExecutors.add(metaData.getExecutorName())[ FD ]
Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()-->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_29 $$ if (componentRegistry == null) -->Line_30 $$ componentRegistryExists = false[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_87 $$ final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME)-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_108 $$ if (metaData.getServlets() != null) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_40 $$ if (deploymentUnit.getParent() != null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_24 $$ if (servletContainerName == null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_171 $$ processManagement(deploymentUnit, metaData)[ CD ]
Line_45 $$ deploymentName = deploymentUnit.getName()-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_24 $$ if (servletContainerName == null) -->Line_25 $$ servletContainerName = defaultContainer[ CD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_119 $$ infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit), ComponentRegistry.class, undertowDeploymentInfoService.getComponentRegistryInjectedValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_50 $$ boolean securityEnabled = deploymentUnit.hasAttachment(SecurityAttachments.SECURITY_ENABLED)[ FD ]
Line_110 $$ if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) -->Line_113 $$ undertowDeploymentInfoService.addInjectedExecutor(servlet.getExecutorName(), executor)[ CD ]
Line_103 $$ final InjectedValue<Executor> executor = new InjectedValue<Executor>()-->Line_104 $$ infoBuilder.addDependency(IOServices.WORKER.append(metaData.getExecutorName()), Executor.class, executor)[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_124 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_MANAGER_SERVICE_NAME), SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_134 $$ final UndertowDeploymentService service = new UndertowDeploymentService(injectionContainer, !isWebappBundle)[ CD ]
Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_44 $$ if (deploymentUnit.getParent() == null) -->Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()[ CD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_124 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_MANAGER_SERVICE_NAME), SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ CD ]
Line_167 $$ final ModelNode node = deploymentResourceSupport.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME)-->Line_168 $$ node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName)[ FD ]
Line_62 $$ securityDomain = null-->Line_89 $$ if (securityDomain != null) [ FD ]
Line_89 $$ if (securityDomain != null) -->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ CD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_170 $$ node.get(DeploymentDefinition.SERVER.getName()).set(serverInstanceName)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)[ FD ]
Line_37 $$ if (jaccContextId == null) -->Line_38 $$ jaccContextId = deploymentUnit.getName()[ CD ]
Line_23 $$ String servletContainerName = metaData.getServletContainerName()-->Line_25 $$ servletContainerName = defaultContainer[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_11 $$ ScisMetaData scisMetaData = deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_66 $$ final Set<ServiceName> additionalDependencies = new HashSet()[ CD ]
Line_58 $$ final String securityDomain-->Line_90 $$ infoBuilder.addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())[ FD ]
Line_110 $$ if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) -->Line_114 $$ seenExecutors.add(servlet.getExecutorName())[ CD ]
Line_93 $$ String topLevelName-->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ FD ]
Line_83 $$ final ServiceName hostServiceName = UndertowService.virtualHostName(serverInstanceName, hostName)-->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_10 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS)[ CD ]
Line_101 $$ final Set<String> seenExecutors = new HashSet<String>()-->Line_114 $$ seenExecutors.add(servlet.getExecutorName())[ FD ]
Line_167 $$ final ModelNode node = deploymentResourceSupport.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME)-->Line_170 $$ node.get(DeploymentDefinition.SERVER.getName()).set(serverInstanceName)[ FD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_87 $$ final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME)[ FD ]
Line_123 $$ if (sharedSessionManagerConfig != null) -->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ CD ]
Line_64 $$ String serverInstanceName = metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName()-->Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_145 $$ final ServiceName jaccServiceName = deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME)[ FD ]
Line_69 $$ if (dependencies != null) -->Line_70 $$ additionalDependencies.addAll(dependencies)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_92 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) [ CD ]
Line_18 $$ for (final ServiceName component : components) -->Line_19 $$ if (!failed.contains(component)) [ FD ]
Line_43 $$ String deploymentName-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ FD ]
Line_43 $$ String deploymentName-->Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_132 $$ infoBuilder.install()[ FD ]
Line_147 $$ if (deploymentUnit.getParent() != null) -->Line_150 $$ jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME), PolicyConfiguration.class, jaccService.getParentPolicyInjector())[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_118 $$ if (componentRegistryExists) [ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_64 $$ String serverInstanceName = metaData.getServerInstanceName() == null ? defaultServer : metaData.getServerInstanceName()[ FD ]
Line_43 $$ String deploymentName-->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_11 $$ ScisMetaData scisMetaData = deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_101 $$ final Set<String> seenExecutors = new HashSet<String>()-->Line_110 $$ if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) [ FD ]
Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)-->Line_144 $$ if (jaccService != null) [ FD ]
Line_36 $$ String jaccContextId = metaData.getJaccContextID()-->Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId[ FD ]
Line_109 $$ for (JBossServletMetaData servlet : metaData.getServlets()) -->Line_113 $$ undertowDeploymentInfoService.addInjectedExecutor(servlet.getExecutorName(), executor)[ FD ]
Line_23 $$ String servletContainerName = metaData.getServletContainerName()-->Line_24 $$ if (servletContainerName == null) [ FD ]
Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)-->Line_62 $$ securityDomain = null[ FD ]
Line_58 $$ final String securityDomain-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_144 $$ if (jaccService != null) -->Line_145 $$ final ServiceName jaccServiceName = deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_95 $$ topLevelName = deploymentUnit.getName()[ FD ]
Line_93 $$ String topLevelName-->Line_97 $$ topLevelName = deploymentUnit.getParent().getName()[ FD ]
Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)-->Line_150 $$ jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME), PolicyConfiguration.class, jaccService.getParentPolicyInjector())[ FD ]
Line_110 $$ if (servlet.getExecutorName() != null && !seenExecutors.contains(servlet.getExecutorName())) -->Line_112 $$ infoBuilder.addDependency(IOServices.WORKER.append(servlet.getExecutorName()), Executor.class, executor)[ CD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_25 $$ servletContainerName = defaultContainer-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_108 $$ if (metaData.getServlets() != null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_132 $$ infoBuilder.install()[ CD ]
Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_36 $$ String jaccContextId = metaData.getJaccContextID()[ FD ]
Line_12 $$ final Set<ServiceName> dependentComponents = new HashSet()-->Line_20 $$ dependentComponents.add(component)[ FD ]
Line_59 $$ if (securityEnabled) -->Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_6 $$ if (module == null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_119 $$ infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit), ComponentRegistry.class, undertowDeploymentInfoService.getComponentRegistryInjectedValue())[ FD ]
Line_45 $$ deploymentName = deploymentUnit.getName()-->Line_129 $$ ServiceName sessionIdentifierCodecServiceName = installSessionIdentifierCodec(serviceTarget, deploymentServiceName, deploymentName, metaData)[ FD ]
Line_40 $$ if (deploymentUnit.getParent() != null) -->Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId[ CD ]
Line_38 $$ jaccContextId = deploymentUnit.getName()-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_68 $$ Set<ServiceName> dependencies = setupAction.dependencies()-->Line_69 $$ if (dependencies != null) [ FD ]
Line_94 $$ if (deploymentUnit.getParent() == null) -->Line_95 $$ topLevelName = deploymentUnit.getName()[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_36 $$ String jaccContextId = metaData.getJaccContextID()[ CD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_89 $$ if (securityDomain != null) [ CD ]
Line_103 $$ final InjectedValue<Executor> executor = new InjectedValue<Executor>()-->Line_113 $$ undertowDeploymentInfoService.addInjectedExecutor(servlet.getExecutorName(), executor)[ FD ]
Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()-->Line_55 $$ if (metaDataSecurityDomain != null) [ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_45 $$ deploymentName = deploymentUnit.getName()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_102 $$ if (metaData.getExecutorName() != null) [ CD ]
Line_167 $$ final ModelNode node = deploymentResourceSupport.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME)-->Line_169 $$ node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName)[ FD ]
Line_43 $$ String deploymentName-->Line_45 $$ deploymentName = deploymentUnit.getName()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_3 $$ ResourceRoot deploymentResourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_97 $$ topLevelName = deploymentUnit.getParent().getName()[ FD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ CD ]
Line_142 $$ AbstractSecurityDeployer<WarMetaData> deployer = new WarJACCDeployer()-->Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_44 $$ if (deploymentUnit.getParent() == null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_11 $$ ScisMetaData scisMetaData = deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY)[ CD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_112 $$ infoBuilder.addDependency(IOServices.WORKER.append(servlet.getExecutorName()), Executor.class, executor)[ FD ]
Line_59 $$ if (securityEnabled) -->Line_62 $$ securityDomain = null[ CD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_45 $$ deploymentName = deploymentUnit.getName()-->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_43 $$ String deploymentName[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_133 $$ final boolean isWebappBundle = deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_37 $$ if (jaccContextId == null) [ CD ]
Line_45 $$ deploymentName = deploymentUnit.getName()-->Line_47 $$ deploymentName = deploymentUnit.getParent().getName() + "." + deploymentUnit.getName()[ FD ]
Line_3 $$ ResourceRoot deploymentResourceRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_4 $$ final VirtualFile deploymentRoot = deploymentResourceRoot.getRoot()[ FD ]
Line_53 $$ metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit)-->Line_56 $$ metaDataSecurityDomain = metaDataSecurityDomain.trim()[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_82 $$ additionalDependencies.addAll(warMetaData.getAdditionalDependencies())[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_128 $$ infoBuilder.addDependency(sessionManagerFactoryServiceName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_28 $$ ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY)-->Line_29 $$ if (componentRegistry == null) [ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_128 $$ infoBuilder.addDependency(sessionManagerFactoryServiceName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_139 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, deploymentServiceName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_161 $$ deploymentUnit.addToAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES, deploymentServiceName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_167 $$ final ModelNode node = deploymentResourceSupport.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME)[ CD ]
Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_35 $$ final WebInjectionContainer injectionContainer = new WebInjectionContainer(module.getClassLoader(), componentRegistry)[ FD ]
Line_145 $$ final ServiceName jaccServiceName = deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME)-->Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_5 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_4 $$ final VirtualFile deploymentRoot = deploymentResourceRoot.getRoot()-->Line_76 $$ deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(Constants.CODE_SOURCE_ATTRIBUTE_NAME, deploymentRoot.toURL()))[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_23 $$ String servletContainerName = metaData.getServletContainerName()[ FD ]
Line_92 $$ if (RequestControllerActivationMarker.isRequestControllerEnabled(deploymentUnit)) -->Line_94 $$ if (deploymentUnit.getParent() == null) [ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_127 $$ ServiceName sessionManagerFactoryServiceName = installSessionManagerFactory(serviceTarget, deploymentServiceName, deploymentName, module, metaData, deploymentUnit.getAttachment(UndertowAttachments.SERVLET_CONTAINER_SERVICE))[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_118 $$ if (componentRegistryExists) -->Line_119 $$ infoBuilder.addDependency(ComponentRegistry.serviceName(deploymentUnit), ComponentRegistry.class, undertowDeploymentInfoService.getComponentRegistryInjectedValue())[ CD ]
Line_144 $$ if (jaccService != null) -->Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)[ CD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_113 $$ undertowDeploymentInfoService.addInjectedExecutor(servlet.getExecutorName(), executor)[ FD ]
Line_51 $$ String metaDataSecurityDomain = metaData.getSecurityDomain()-->Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)[ FD ]
Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)-->Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?[ FD ]
Line_9 $$ final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData()-->Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)[ FD ]
Line_85 $$ UndertowDeploymentInfoService undertowDeploymentInfoService = //todo: is this deployment name concept really applicable?-->Line_121 $$ undertowDeploymentInfoService.getComponentRegistryInjectedValue().setValue(new ImmediateValue(componentRegistry))[ FD ]
Line_49 $$ final String pathName = pathNameOfDeployment(deploymentUnit, metaData)-->Line_168 $$ node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set("".equals(pathName) ? "/" : pathName)[ FD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_125 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_IDENTIFIER_CODEC_SERVICE_NAME), SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_83 $$ final ServiceName hostServiceName = UndertowService.virtualHostName(serverInstanceName, hostName)[ FD ]
Line_44 $$ if (deploymentUnit.getParent() == null) -->Line_45 $$ deploymentName = deploymentUnit.getName()[ CD ]
Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)-->Line_104 $$ infoBuilder.addDependency(IOServices.WORKER.append(metaData.getExecutorName()), Executor.class, executor)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_125 $$ infoBuilder.addDependency(deploymentUnit.getParent().getServiceName().append(SharedSessionManagerConfig.SHARED_SESSION_IDENTIFIER_CODEC_SERVICE_NAME), SessionIdentifierCodec.class, undertowDeploymentInfoService.getSessionIdentifierCodecInjector())[ FD ]
Line_68 $$ Set<ServiceName> dependencies = setupAction.dependencies()-->Line_70 $$ additionalDependencies.addAll(dependencies)[ FD ]
Line_87 $$ final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME)-->Line_135 $$ final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service).addDependencies(dependentComponents).addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer()).addDependency(hostServiceName, Host.class, service.getHost()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue())[ FD ]
Line_95 $$ topLevelName = deploymentUnit.getName()-->Line_99 $$ infoBuilder.addDependency(ControlPointService.serviceName(topLevelName, UndertowExtension.SUBSYSTEM_NAME), ControlPoint.class, undertowDeploymentInfoService.getControlPointInjectedValue())[ FD ]
Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)-->Line_146 $$ ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_143 $$ JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit, jaccContextId)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_160 $$ deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY, activator)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_44 $$ if (deploymentUnit.getParent() == null) [ FD ]
Line_93 $$ String topLevelName-->Line_95 $$ topLevelName = deploymentUnit.getName()[ FD ]
Line_60 $$ securityDomain = metaDataSecurityDomain == null ? defaultSecurityDomain : SecurityUtil.unprefixSecurityDomain(metaDataSecurityDomain)-->Line_89 $$ if (securityDomain != null) [ FD ]
Line_65 $$ final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(serverInstanceName, hostName, pathName)-->Line_139 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, deploymentServiceName)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_84 $$ TldsMetaData tldsMetaData = deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY)[ CD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_23 $$ String servletContainerName = metaData.getServletContainerName()[ CD ]
Line_66 $$ final Set<ServiceName> additionalDependencies = new HashSet()-->Line_88 $$ ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService).addDependency(UndertowService.SERVLET_CONTAINER.append(servletContainerName), ServletContainerService.class, undertowDeploymentInfoService.getContainer()).addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService()).addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES)).addDependency(hostServiceName, Host.class, undertowDeploymentInfoService.getHost()).addDependency(SuspendController.SERVICE_NAME, SuspendController.class, undertowDeploymentInfoService.getSuspendControllerInjectedValue()).addDependencies(additionalDependencies)[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_41 $$ jaccContextId = deploymentUnit.getParent().getName() + "!" + jaccContextId[ FD ]
Line_2 $$ private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName) throws DeploymentUnitProcessingException -->Line_50 $$ boolean securityEnabled = deploymentUnit.hasAttachment(SecurityAttachments.SECURITY_ENABLED)[ CD ]
