Line_2 $$ private Message.Request parseLine(String line) -->Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()[ FD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_7 $$ String msgType = iter.next().toUpperCase()[ FD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_32 $$ return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null))[ CD ]
Line_9 $$ Map<String, String> options = new HashMap<String, String>()-->Line_10 $$ options.put(StartupMessage.CQL_VERSION, "3.0.0")[ FD ]
Line_12 $$ String next = iter.next()-->Line_13 $$ if (next.toLowerCase().equals("snappy")) [ FD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_19 $$ if (msgType.equals("QUERY")) [ FD ]
Line_8 $$ if (msgType.equals("STARTUP")) -->Line_10 $$ options.put(StartupMessage.CQL_VERSION, "3.0.0")[ CD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_63 $$ Map<String, String> credentials = readCredentials(iter)[ FD ]
Line_13 $$ if (next.toLowerCase().equals("snappy")) -->Line_14 $$ options.put(StartupMessage.COMPRESSION, "snappy")[ CD ]
Line_23 $$ if (line.matches(".+ !\\d+$")) -->Line_24 $$ int idx = line.lastIndexOf('!')[ CD ]
Line_62 $$ if (msgType.equals("AUTHENTICATE")) -->Line_69 $$ if (msgType.equals("REGISTER")) [ CD ]
Line_11 $$ while (iter.hasNext()) -->Line_12 $$ String next = iter.next()[ CD ]
Line_57 $$ if (msgType.equals("CREDENTIALS")) -->Line_61 $$ return msg[ CD ]
Line_39 $$ List<ByteBuffer> values = new ArrayList<ByteBuffer>()-->Line_49 $$ values.add(bb)[ FD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_36 $$ if (msgType.equals("EXECUTE")) [ FD ]
Line_38 $$ byte[] id = Hex.hexToBytes(iter.next())-->Line_51 $$ return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.forInternalCalls(ConsistencyLevel.ONE, values))[ FD ]
Line_62 $$ if (msgType.equals("AUTHENTICATE")) -->Line_64 $$ if (!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY)) [ CD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_23 $$ if (line.matches(".+ !\\d+$")) [ FD ]
Line_11 $$ while (iter.hasNext()) -->Line_13 $$ if (next.toLowerCase().equals("snappy")) [ CD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_69 $$ if (msgType.equals("REGISTER")) [ FD ]
Line_41 $$ String next = iter.next()-->Line_47 $$ bb = UTF8Type.instance.decompose(next)[ FD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_8 $$ if (msgType.equals("STARTUP")) [ FD ]
Line_57 $$ if (msgType.equals("CREDENTIALS")) -->Line_60 $$ msg.credentials.putAll(readCredentials(iter))[ CD ]
Line_27 $$ pageSize = Integer.parseInt(line.substring(idx + 1, line.length()))-->Line_32 $$ return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null))[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_8 $$ if (msgType.equals("STARTUP")) [ CD ]
Line_22 $$ int pageSize = -1-->Line_32 $$ return new QueryMessage(query, QueryOptions.create(ConsistencyLevel.ONE, Collections.<ByteBuffer>emptyList(), false, pageSize, null, null))[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_24 $$ int idx = line.lastIndexOf('!')[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_34 $$ String query = line.substring(8)[ FD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_11 $$ while (iter.hasNext()) [ FD ]
Line_64 $$ if (!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY)) -->Line_65 $$ System.err.println("[ERROR] Authentication requires both 'username' and 'password'")[ CD ]
Line_33 $$ if (msgType.equals("PREPARE")) -->Line_35 $$ return new PrepareMessage(query)[ CD ]
Line_70 $$ String type = line.substring(9).toUpperCase()-->Line_72 $$ return new RegisterMessage(Collections.singletonList(Enum.valueOf(Event.Type.class, type)))[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_7 $$ String msgType = iter.next().toUpperCase()[ CD ]
Line_23 $$ if (line.matches(".+ !\\d+$")) -->Line_25 $$ query = line.substring(0, idx - 1)[ CD ]
Line_12 $$ String next = iter.next()-->Line_44 $$ int v = Integer.parseInt(next)[ FD ]
Line_39 $$ List<ByteBuffer> values = new ArrayList<ByteBuffer>()-->Line_51 $$ return new ExecuteMessage(MD5Digest.wrap(id), QueryOptions.forInternalCalls(ConsistencyLevel.ONE, values))[ FD ]
Line_20 $$ line = line.substring(6)-->Line_70 $$ String type = line.substring(9).toUpperCase()[ FD ]
Line_8 $$ if (msgType.equals("STARTUP")) -->Line_19 $$ if (msgType.equals("QUERY")) [ CD ]
Line_55 $$ if (msgType.equals("OPTIONS")) -->Line_56 $$ return new OptionsMessage()[ CD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_20 $$ line = line.substring(6)[ CD ]
Line_64 $$ if (!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY)) -->Line_66 $$ return null[ CD ]
Line_21 $$ String query = line-->Line_25 $$ query = line.substring(0, idx - 1)[ FD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_22 $$ int pageSize = -1[ CD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_41 $$ String next = iter.next()[ FD ]
Line_57 $$ if (msgType.equals("CREDENTIALS")) -->Line_58 $$ System.err.println("[WARN] CREDENTIALS command is deprecated, use AUTHENTICATE instead")[ CD ]
Line_20 $$ line = line.substring(6)-->Line_24 $$ int idx = line.lastIndexOf('!')[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_78 $$ return null[ CD ]
Line_12 $$ String next = iter.next()-->Line_47 $$ bb = UTF8Type.instance.decompose(next)[ FD ]
Line_57 $$ if (msgType.equals("CREDENTIALS")) -->Line_59 $$ CredentialsMessage msg = new CredentialsMessage()[ CD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_62 $$ if (msgType.equals("AUTHENTICATE")) [ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_3 $$ Splitter splitter = Splitter.on(' ').trimResults().omitEmptyStrings()[ CD ]
Line_20 $$ line = line.substring(6)-->Line_23 $$ if (line.matches(".+ !\\d+$")) [ FD ]
Line_42 $$ ByteBuffer bb-->Line_49 $$ values.add(bb)[ FD ]
Line_45 $$ bb = Int32Type.instance.decompose(v)-->Line_49 $$ values.add(bb)[ FD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_40 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_70 $$ String type = line.substring(9).toUpperCase()[ FD ]
Line_69 $$ if (msgType.equals("REGISTER")) -->Line_70 $$ String type = line.substring(9).toUpperCase()[ CD ]
Line_41 $$ String next = iter.next()-->Line_44 $$ int v = Integer.parseInt(next)[ FD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_60 $$ msg.credentials.putAll(readCredentials(iter))[ FD ]
Line_33 $$ if (msgType.equals("PREPARE")) -->Line_36 $$ if (msgType.equals("EXECUTE")) [ CD ]
Line_22 $$ int pageSize = -1-->Line_27 $$ pageSize = Integer.parseInt(line.substring(idx + 1, line.length()))[ FD ]
Line_47 $$ bb = UTF8Type.instance.decompose(next)-->Line_49 $$ values.add(bb)[ FD ]
Line_20 $$ line = line.substring(6)-->Line_27 $$ pageSize = Integer.parseInt(line.substring(idx + 1, line.length()))[ FD ]
Line_20 $$ line = line.substring(6)-->Line_34 $$ String query = line.substring(8)[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()[ CD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_5 $$ if (!iter.hasNext())[ FD ]
Line_8 $$ if (msgType.equals("STARTUP")) -->Line_11 $$ while (iter.hasNext()) [ CD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_23 $$ if (line.matches(".+ !\\d+$")) [ CD ]
Line_55 $$ if (msgType.equals("OPTIONS")) -->Line_57 $$ if (msgType.equals("CREDENTIALS")) [ CD ]
Line_40 $$ while (iter.hasNext()) -->Line_42 $$ ByteBuffer bb[ CD ]
Line_62 $$ if (msgType.equals("AUTHENTICATE")) -->Line_68 $$ return new AuthResponse(encodeCredentialsForSasl(credentials))[ CD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_12 $$ String next = iter.next()[ FD ]
Line_57 $$ if (msgType.equals("CREDENTIALS")) -->Line_62 $$ if (msgType.equals("AUTHENTICATE")) [ CD ]
Line_63 $$ Map<String, String> credentials = readCredentials(iter)-->Line_68 $$ return new AuthResponse(encodeCredentialsForSasl(credentials))[ FD ]
Line_44 $$ int v = Integer.parseInt(next)-->Line_45 $$ bb = Int32Type.instance.decompose(v)[ FD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_33 $$ if (msgType.equals("PREPARE")) [ CD ]
Line_5 $$ if (!iter.hasNext())-->Line_6 $$ return null[ CD ]
Line_62 $$ if (msgType.equals("AUTHENTICATE")) -->Line_63 $$ Map<String, String> credentials = readCredentials(iter)[ CD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_27 $$ pageSize = Integer.parseInt(line.substring(idx + 1, line.length()))[ FD ]
Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()-->Line_38 $$ byte[] id = Hex.hexToBytes(iter.next())[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_5 $$ if (!iter.hasNext())[ CD ]
Line_13 $$ if (next.toLowerCase().equals("snappy")) -->Line_15 $$ connection.setCompressor(FrameCompressor.SnappyCompressor.instance)[ CD ]
Line_33 $$ if (msgType.equals("PREPARE")) -->Line_34 $$ String query = line.substring(8)[ CD ]
Line_42 $$ ByteBuffer bb-->Line_47 $$ bb = UTF8Type.instance.decompose(next)[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_25 $$ query = line.substring(0, idx - 1)[ FD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_57 $$ if (msgType.equals("CREDENTIALS")) [ FD ]
Line_63 $$ Map<String, String> credentials = readCredentials(iter)-->Line_64 $$ if (!credentials.containsKey(PasswordAuthenticator.USERNAME_KEY) || !credentials.containsKey(PasswordAuthenticator.PASSWORD_KEY)) [ FD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_55 $$ if (msgType.equals("OPTIONS")) [ FD ]
Line_36 $$ if (msgType.equals("EXECUTE")) -->Line_55 $$ if (msgType.equals("OPTIONS")) [ CD ]
Line_3 $$ Splitter splitter = Splitter.on(' ').trimResults().omitEmptyStrings()-->Line_4 $$ Iterator<String> iter = splitter.split(line).iterator()[ FD ]
Line_20 $$ line = line.substring(6)-->Line_25 $$ query = line.substring(0, idx - 1)[ FD ]
Line_8 $$ if (msgType.equals("STARTUP")) -->Line_18 $$ return new StartupMessage(options)[ CD ]
Line_40 $$ while (iter.hasNext()) -->Line_41 $$ String next = iter.next()[ CD ]
Line_9 $$ Map<String, String> options = new HashMap<String, String>()-->Line_14 $$ options.put(StartupMessage.COMPRESSION, "snappy")[ FD ]
Line_2 $$ private Message.Request parseLine(String line) -->Line_20 $$ line = line.substring(6)[ FD ]
Line_8 $$ if (msgType.equals("STARTUP")) -->Line_9 $$ Map<String, String> options = new HashMap<String, String>()[ CD ]
Line_7 $$ String msgType = iter.next().toUpperCase()-->Line_33 $$ if (msgType.equals("PREPARE")) [ FD ]
Line_19 $$ if (msgType.equals("QUERY")) -->Line_21 $$ String query = line[ CD ]
Line_45 $$ bb = Int32Type.instance.decompose(v)-->Line_47 $$ bb = UTF8Type.instance.decompose(next)[ FD ]
Line_42 $$ ByteBuffer bb-->Line_45 $$ bb = Int32Type.instance.decompose(v)[ FD ]
Line_40 $$ while (iter.hasNext()) -->Line_49 $$ values.add(bb)[ CD ]
