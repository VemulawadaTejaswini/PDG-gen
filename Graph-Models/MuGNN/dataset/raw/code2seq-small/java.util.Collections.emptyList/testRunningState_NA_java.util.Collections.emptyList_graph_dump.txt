Line_7 $$ Map<String, Object> expected = ImmutableMap.<String, Object>builder().put("percentComplete", 0.375f).put("phases", Arrays.<Object>asList(ImmutableMap.<String, Object>builder().put("name", "LoadingFsImage").put("desc", "Loading fsimage").put("status", "COMPLETE").put("percentComplete", 1.0f).put("steps", Collections.<Object>singletonList(ImmutableMap.<String, Object>builder().put("name", "Inodes").put("desc", "inodes").put("count", 100L).put("total", 100L).put("percentComplete", 1.0f).build())).build(), ImmutableMap.<String, Object>builder().put("name", "LoadingEdits").put("desc", "Loading edits").put("status", "RUNNING").put("percentComplete", 0.5f).put("steps", Collections.<Object>singletonList(ImmutableMap.<String, Object>builder().put("count", 100L).put("file", "file").put("size", 1000L).put("total", 200L).put("percentComplete", 0.5f).build())).build(), ImmutableMap.<String, Object>builder().put("name", "SavingCheckpoint").put("desc", "Saving checkpoint").put("status", "PENDING").put("percentComplete", 0.0f).put("steps", Collections.emptyList()).build(), ImmutableMap.<String, Object>builder().put("name", "SafeMode").put("desc", "Safe mode").put("status", "PENDING").put("percentComplete", 0.0f).put("steps", Collections.emptyList()).build())).build()-->Line_8 $$ assertEquals(JSON.toString(expected), filterJson(respBody))[ FD ]
Line_5 $$ String respBody = doGetAndReturnResponseBody()-->Line_6 $$ assertNotNull(respBody)[ FD ]
Line_5 $$ String respBody = doGetAndReturnResponseBody()-->Line_8 $$ assertEquals(JSON.toString(expected), filterJson(respBody))[ FD ]
