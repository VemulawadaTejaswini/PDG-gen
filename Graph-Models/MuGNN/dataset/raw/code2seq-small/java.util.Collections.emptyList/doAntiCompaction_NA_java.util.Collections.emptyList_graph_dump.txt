Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_20 $$ allAntiCompactionResults.addListener(new Runnable() [ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_5 $$ if (!prs.isGlobal) [ CD ]
Line_11 $$ List<ListenableFuture<?>> futures = new ArrayList()-->Line_16 $$ futures.add(CompactionManager.instance.submitAntiCompaction(cfs, successfulRanges, sstables, prs.repairedAt))[ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_11 $$ List<ListenableFuture<?>> futures = new ArrayList()[ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_22 $$ removeParentRepairSession(parentRepairSession)[ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_16 $$ futures.add(CompactionManager.instance.submitAntiCompaction(cfs, successfulRanges, sstables, prs.repairedAt))[ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_19 $$ ListenableFuture<List<Object>> allAntiCompactionResults = Futures.successfulAsList(futures)[ CD ]
Line_13 $$ for (Map.Entry<UUID, ColumnFamilyStore> columnFamilyStoreEntry : prs.columnFamilyStores.entrySet()) -->Line_14 $$ Refs<SSTableReader> sstables = prs.getAndReferenceSSTables(columnFamilyStoreEntry.getKey())[ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_4 $$ ParentRepairSession prs = getParentRepairSession(parentRepairSession)[ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_7 $$ removeParentRepairSession(parentRepairSession)[ FD ]
Line_13 $$ for (Map.Entry<UUID, ColumnFamilyStore> columnFamilyStoreEntry : prs.columnFamilyStores.entrySet()) -->Line_15 $$ ColumnFamilyStore cfs = columnFamilyStoreEntry.getValue()[ FD ]
Line_15 $$ ColumnFamilyStore cfs = columnFamilyStoreEntry.getValue()-->Line_16 $$ futures.add(CompactionManager.instance.submitAntiCompaction(cfs, successfulRanges, sstables, prs.repairedAt))[ FD ]
Line_14 $$ Refs<SSTableReader> sstables = prs.getAndReferenceSSTables(columnFamilyStoreEntry.getKey())-->Line_16 $$ futures.add(CompactionManager.instance.submitAntiCompaction(cfs, successfulRanges, sstables, prs.repairedAt))[ FD ]
Line_5 $$ if (!prs.isGlobal) -->Line_7 $$ removeParentRepairSession(parentRepairSession)[ CD ]
Line_4 $$ ParentRepairSession prs = getParentRepairSession(parentRepairSession)-->Line_14 $$ Refs<SSTableReader> sstables = prs.getAndReferenceSSTables(columnFamilyStoreEntry.getKey())[ FD ]
Line_19 $$ ListenableFuture<List<Object>> allAntiCompactionResults = Futures.successfulAsList(futures)-->Line_20 $$ allAntiCompactionResults.addListener(new Runnable() [ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_12 $$ if (!successfulRanges.isEmpty()) [ FD ]
Line_5 $$ if (!prs.isGlobal) -->Line_8 $$ return Futures.immediateFuture(Collections.emptyList())[ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_12 $$ if (!successfulRanges.isEmpty()) [ CD ]
Line_5 $$ if (!prs.isGlobal) -->Line_6 $$ logger.info("Not a global repair, will not do anticompaction")[ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_4 $$ ParentRepairSession prs = getParentRepairSession(parentRepairSession)[ FD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_25 $$ return allAntiCompactionResults[ CD ]
Line_11 $$ List<ListenableFuture<?>> futures = new ArrayList()-->Line_19 $$ ListenableFuture<List<Object>> allAntiCompactionResults = Futures.successfulAsList(futures)[ FD ]
Line_20 $$ allAntiCompactionResults.addListener(new Runnable() -->Line_22 $$ removeParentRepairSession(parentRepairSession)[ CD ]
Line_2 $$ public ListenableFuture<List<Object>> doAntiCompaction(final UUID parentRepairSession, Collection<Range<Token>> successfulRanges) -->Line_10 $$ assert prs.ranges.containsAll(successfulRanges) : "Trying to perform anticompaction on unknown ranges"[ FD ]
