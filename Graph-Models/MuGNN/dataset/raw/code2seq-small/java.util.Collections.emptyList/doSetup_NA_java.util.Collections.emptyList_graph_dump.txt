Line_7 $$ if (ourProject == null || ourProjectDescriptor == null || !ourProjectDescriptor.equals(descriptor)) -->Line_8 $$ initProject(descriptor)[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_17 $$ connection.subscribe(ProjectTopics.MODULES, new ModuleAdapter() [ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_25 $$ CodeInsightTestFixtureImpl.configureInspections(localInspectionTools, getProject(), Collections.<String>emptyList(), parentDisposable)[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_16 $$ MessageBusConnection connection = ourProject.getMessageBus().connect(parentDisposable)[ CD ]
Line_35 $$ if (manager instanceof FileDocumentManagerImpl) -->Line_38 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_4 $$ IdeaLogger.ourErrorsOccurred = null[ CD ]
Line_16 $$ MessageBusConnection connection = ourProject.getMessageBus().connect(parentDisposable)-->Line_17 $$ connection.subscribe(ProjectTopics.MODULES, new ModuleAdapter() [ FD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_7 $$ if (ourProject == null || ourProjectDescriptor == null || !ourProjectDescriptor.equals(descriptor)) [ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_3 $$ assertNull("Previous test " + ourTestCase + " hasn't called tearDown(). Probably overridden without super call.", ourTestCase)[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_16 $$ MessageBusConnection connection = ourProject.getMessageBus().connect(parentDisposable)[ FD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_26 $$ assertFalse(getPsiManager().isDisposed())[ CD ]
Line_35 $$ if (manager instanceof FileDocumentManagerImpl) -->Line_37 $$ manager.saveAllDocuments()[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_33 $$ CodeStyleSettingsManager.getInstance(getProject()).setTemporarySettings(new CodeStyleSettings())[ CD ]
Line_11 $$ ProjectManagerEx projectManagerEx = ProjectManagerEx.getInstanceEx()-->Line_12 $$ projectManagerEx.openTestProject(ourProject)[ FD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_13 $$ if (reusedProject) [ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_35 $$ if (manager instanceof FileDocumentManagerImpl) [ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_34 $$ final FileDocumentManager manager = FileDocumentManager.getInstance()[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_24 $$ clearUncommittedDocuments(getProject())[ CD ]
Line_35 $$ if (manager instanceof FileDocumentManagerImpl) -->Line_45 $$ assertEmpty("There are unsaved documents", Arrays.asList(unsavedDocuments))[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_5 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_32 $$ assertTrue("open: " + getProject().isOpen() + "; disposed:" + getProject().isDisposed() + "; startup passed:" + passed + "; all open projects: " + Arrays.asList(ProjectManager.getInstance().getOpenProjects()), getProject().isInitialized())[ CD ]
Line_7 $$ if (ourProject == null || ourProjectDescriptor == null || !ourProjectDescriptor.equals(descriptor)) -->Line_9 $$ reusedProject = false[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_12 $$ projectManagerEx.openTestProject(ourProject)[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_6 $$ boolean reusedProject = true[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_7 $$ if (ourProject == null || ourProjectDescriptor == null || !ourProjectDescriptor.equals(descriptor)) [ FD ]
Line_35 $$ if (manager instanceof FileDocumentManagerImpl) -->Line_36 $$ Document[] unsavedDocuments = manager.getUnsavedDocuments()[ CD ]
Line_6 $$ boolean reusedProject = true-->Line_9 $$ reusedProject = false[ FD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_25 $$ CodeInsightTestFixtureImpl.configureInspections(localInspectionTools, getProject(), Collections.<String>emptyList(), parentDisposable)[ FD ]
Line_17 $$ connection.subscribe(ProjectTopics.MODULES, new ModuleAdapter() -->Line_21 $$ fail("Adding modules is not permitted in LightIdeaTestCase.")[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_8 $$ initProject(descriptor)[ FD ]
Line_38 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_42 $$ ((FileDocumentManagerImpl) manager).dropAllUnsavedDocuments()[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_49 $$ ((FileTypeManagerImpl) FileTypeManager.getInstance()).drainReDetectQueue()[ CD ]
Line_13 $$ if (reusedProject) -->Line_14 $$ DumbService.getInstance(ourProject).queueTask(new UnindexedFilesUpdater(ourProject, false))[ CD ]
Line_2 $$ public static void doSetup(@NotNull LightProjectDescriptor descriptor, @NotNull LocalInspectionTool[] localInspectionTools, @NotNull Disposable parentDisposable) throws Exception -->Line_11 $$ ProjectManagerEx projectManagerEx = ProjectManagerEx.getInstanceEx()[ CD ]
