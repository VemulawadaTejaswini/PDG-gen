Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_43 $$ popup.registerAction("shiftPressed", KeyStroke.getKeyStroke("shift pressed SHIFT"), new AbstractAction() [ CD ]
Line_55 $$ popup.registerAction("invoke", KeyStroke.getKeyStroke("shift ENTER"), new AbstractAction() -->Line_57 $$ popup.handleSelect(true)[ CD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_6 $$ List<TaskListItem> items = project == null ? Collections.<TaskListItem>emptyList() : createPopupActionGroup(project, shiftPressed, PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext))[ FD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_7 $$ final String title = withTitle ? "Switch to Task" : null[ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_18 $$ return aValue.getIcon()[ CD ]
Line_14 $$ ActionGroup group = createActionsStep(selectedValues, project, shiftPressed)-->Line_15 $$ return JBPopupFactory.getInstance().createActionsStep(group, DataManager.getInstance().getDataContext(componentRef.get()), false, false, null, null, true)[ FD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_4 $$ final Ref<Boolean> shiftPressed = Ref.create(false)[ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_18 $$ return aValue.getIcon()[ FD ]
Line_31 $$ if (onDispose != null) -->Line_32 $$ Disposer.register(popup, new Disposable() [ CD ]
Line_5 $$ final Ref<JComponent> componentRef = Ref.create()-->Line_38 $$ componentRef.set(popup.getComponent())[ FD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_42 $$ popup.setAdText("Press SHIFT to merge with current context")[ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_14 $$ ActionGroup group = createActionsStep(selectedValues, project, shiftPressed)[ CD ]
Line_32 $$ Disposer.register(popup, new Disposable() -->Line_34 $$ onDispose.run()[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_39 $$ if (items.size() <= 2) [ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_31 $$ if (onDispose != null) [ FD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_5 $$ final Ref<JComponent> componentRef = Ref.create()[ CD ]
Line_4 $$ final Ref<Boolean> shiftPressed = Ref.create(false)-->Line_45 $$ shiftPressed.set(true)[ FD ]
Line_4 $$ final Ref<Boolean> shiftPressed = Ref.create(false)-->Line_14 $$ ActionGroup group = createActionsStep(selectedValues, project, shiftPressed)[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_27 $$ return selectedValues.size() > 1 || selectedValues.get(0).getTask() != null[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_30 $$ final ListPopupImpl popup = (ListPopupImpl) JBPopupFactory.getInstance().createListPopup(step)[ FD ]
Line_10 $$ if (finalChoice) -->Line_11 $$ selectedValues.get(0).select()[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_6 $$ List<TaskListItem> items = project == null ? Collections.<TaskListItem>emptyList() : createPopupActionGroup(project, shiftPressed, PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext))[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_21 $$ return value.getText()[ FD ]
Line_39 $$ if (items.size() <= 2) -->Line_40 $$ return popup[ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_21 $$ return value.getText()[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_60 $$ return popup[ CD ]
Line_49 $$ popup.registerAction("shiftReleased", KeyStroke.getKeyStroke("released SHIFT"), new AbstractAction() -->Line_51 $$ shiftPressed.set(false)[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) [ CD ]
Line_10 $$ if (finalChoice) -->Line_12 $$ return FINAL_CHOICE[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_55 $$ popup.registerAction("invoke", KeyStroke.getKeyStroke("shift ENTER"), new AbstractAction() [ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_10 $$ if (finalChoice) [ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_31 $$ if (onDispose != null) [ CD ]
Line_6 $$ List<TaskListItem> items = project == null ? Collections.<TaskListItem>emptyList() : createPopupActionGroup(project, shiftPressed, PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext))-->Line_39 $$ if (items.size() <= 2) [ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_14 $$ ActionGroup group = createActionsStep(selectedValues, project, shiftPressed)[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_24 $$ return value.getSeparator() == null ? null : new ListSeparator(value.getSeparator())[ FD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_34 $$ onDispose.run()[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_24 $$ return value.getSeparator() == null ? null : new ListSeparator(value.getSeparator())[ CD ]
Line_43 $$ popup.registerAction("shiftPressed", KeyStroke.getKeyStroke("shift pressed SHIFT"), new AbstractAction() -->Line_45 $$ shiftPressed.set(true)[ CD ]
Line_4 $$ final Ref<Boolean> shiftPressed = Ref.create(false)-->Line_51 $$ shiftPressed.set(false)[ FD ]
Line_3 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_14 $$ ActionGroup group = createActionsStep(selectedValues, project, shiftPressed)[ FD ]
Line_49 $$ popup.registerAction("shiftReleased", KeyStroke.getKeyStroke("released SHIFT"), new AbstractAction() -->Line_52 $$ popup.setCaption("Switch to Task")[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_38 $$ componentRef.set(popup.getComponent())[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_6 $$ List<TaskListItem> items = project == null ? Collections.<TaskListItem>emptyList() : createPopupActionGroup(project, shiftPressed, PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext))[ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_11 $$ selectedValues.get(0).select()[ FD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_27 $$ return selectedValues.size() > 1 || selectedValues.get(0).getTask() != null[ CD ]
Line_5 $$ final Ref<JComponent> componentRef = Ref.create()-->Line_15 $$ return JBPopupFactory.getInstance().createActionsStep(group, DataManager.getInstance().getDataContext(componentRef.get()), false, false, null, null, true)[ FD ]
Line_4 $$ final Ref<Boolean> shiftPressed = Ref.create(false)-->Line_6 $$ List<TaskListItem> items = project == null ? Collections.<TaskListItem>emptyList() : createPopupActionGroup(project, shiftPressed, PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext))[ FD ]
Line_43 $$ popup.registerAction("shiftPressed", KeyStroke.getKeyStroke("shift pressed SHIFT"), new AbstractAction() -->Line_46 $$ popup.setCaption("Merge with Current Context")[ CD ]
Line_2 $$ public static ListPopupImpl createPopup(final DataContext dataContext, @Nullable final Runnable onDispose, boolean withTitle) -->Line_49 $$ popup.registerAction("shiftReleased", KeyStroke.getKeyStroke("released SHIFT"), new AbstractAction() [ CD ]
Line_8 $$ ListPopupStep<TaskListItem> step = new MultiSelectionListPopupStep<TaskListItem>(title, items) -->Line_15 $$ return JBPopupFactory.getInstance().createActionsStep(group, DataManager.getInstance().getDataContext(componentRef.get()), false, false, null, null, true)[ CD ]
