Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_9 $$ if (list2.isEmpty()) [ FD ]
Line_14 $$ return new AbstractList<T>() -->Line_19 $$ return list2.get(index - size1)[ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_6 $$ if (list1.isEmpty()) [ FD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_13 $$ final int size = size1 + list2.size()[ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_6 $$ if (list1.isEmpty()) [ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_14 $$ return new AbstractList<T>() [ CD ]
Line_14 $$ return new AbstractList<T>() -->Line_16 $$ if (index < size1) [ FD ]
Line_9 $$ if (list2.isEmpty()) -->Line_10 $$ return (List<T>) list1[ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_12 $$ final int size1 = list1.size()[ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_19 $$ return list2.get(index - size1)[ FD ]
Line_14 $$ return new AbstractList<T>() -->Line_17 $$ return list1.get(index)[ FD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_12 $$ final int size1 = list1.size()[ FD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_9 $$ if (list2.isEmpty()) [ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_3 $$ if (list1.isEmpty() && list2.isEmpty()) [ FD ]
Line_14 $$ return new AbstractList<T>() -->Line_16 $$ if (index < size1) [ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_3 $$ if (list1.isEmpty() && list2.isEmpty()) [ CD ]
Line_16 $$ if (index < size1) -->Line_17 $$ return list1.get(index)[ CD ]
Line_3 $$ if (list1.isEmpty() && list2.isEmpty()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_12 $$ final int size1 = list1.size()-->Line_16 $$ if (index < size1) [ FD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_13 $$ final int size = size1 + list2.size()[ FD ]
Line_6 $$ if (list1.isEmpty()) -->Line_7 $$ return (List<T>) list2[ CD ]
Line_2 $$ public static <T> List<T> concat(@NotNull final List<? extends T> list1, @NotNull final List<? extends T> list2) -->Line_17 $$ return list1.get(index)[ FD ]
Line_14 $$ return new AbstractList<T>() -->Line_22 $$ return size[ CD ]
