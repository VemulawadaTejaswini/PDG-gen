Line_2 $$ private static List<PsiElement> getTopLevelRegExpChars(String regExpText, Project project) -->Line_5 $$ final PsiElement[] children = file.getChildren()[ CD ]
Line_4 $$ List<PsiElement> result = null-->Line_13 $$ result.add(grandGrandChild)[ FD ]
Line_2 $$ private static List<PsiElement> getTopLevelRegExpChars(String regExpText, Project project) -->Line_16 $$ return result != null ? result : Collections.<PsiElement>emptyList()[ CD ]
Line_2 $$ private static List<PsiElement> getTopLevelRegExpChars(String regExpText, Project project) -->Line_4 $$ List<PsiElement> result = null[ CD ]
Line_4 $$ List<PsiElement> result = null-->Line_11 $$ if (result == null)[ FD ]
Line_2 $$ private static List<PsiElement> getTopLevelRegExpChars(String regExpText, Project project) -->Line_3 $$ PsiFile file = PsiFileFactory.getInstance(project).createFileFromText("A.regexp", regExpText)[ FD ]
Line_8 $$ if (grandChildren.length != 1)-->Line_9 $$ return Collections.emptyList()[ CD ]
Line_12 $$ result = new ArrayList<PsiElement>()-->Line_13 $$ result.add(grandGrandChild)[ FD ]
Line_10 $$ for (PsiElement grandGrandChild : grandChildren[0].getChildren()) -->Line_13 $$ result.add(grandGrandChild)[ FD ]
Line_3 $$ PsiFile file = PsiFileFactory.getInstance(project).createFileFromText("A.regexp", regExpText)-->Line_5 $$ final PsiElement[] children = file.getChildren()[ FD ]
Line_6 $$ for (PsiElement child : children) -->Line_7 $$ PsiElement[] grandChildren = child.getChildren()[ FD ]
Line_2 $$ private static List<PsiElement> getTopLevelRegExpChars(String regExpText, Project project) -->Line_3 $$ PsiFile file = PsiFileFactory.getInstance(project).createFileFromText("A.regexp", regExpText)[ CD ]
Line_4 $$ List<PsiElement> result = null-->Line_12 $$ result = new ArrayList<PsiElement>()[ FD ]
Line_11 $$ if (result == null)-->Line_12 $$ result = new ArrayList<PsiElement>()[ CD ]
