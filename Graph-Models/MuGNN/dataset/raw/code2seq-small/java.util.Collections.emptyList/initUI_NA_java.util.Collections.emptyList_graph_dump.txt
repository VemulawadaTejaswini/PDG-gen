Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_2 $$ private void initUI() -->Line_95 $$ myRepositoryChangesBrowser.getDiffAction().registerCustomShortcutSet(myRepositoryChangesBrowser.getDiffAction().getShortcutSet(), myRevisionsList)[ CD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_78 $$ flatModel.fireTableDataChanged()[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_63 $$ listCellRenderer.customizeCellRenderer(table, table.getValueAt(row, column), table.isRowSelected(row))[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_60 $$ int column = table.columnAtPoint(e.getPoint())[ FD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_84 $$ myRevisionsList.repaint()[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_24 $$ mySplitter.doLayout()[ CD ]
Line_58 $$ JTable table = (JTable) e.getSource()-->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_38 $$ super.valueChanged(e)[ FD ]
Line_2 $$ private void initUI() -->Line_53 $$ myRevisionsList.setShowGrid(false)[ CD ]
Line_13 $$ final Collection<String> notMerged = myMergeChecker.getNotMergedPaths(svnChangeList)-->Line_16 $$ if (!notMerged.contains(path)) [ FD ]
Line_10 $$ if (!changeLists.isEmpty()) -->Line_11 $$ final List<SvnChangeList> svnChangeLists = ContainerUtil.findAll(changeLists, SvnChangeList.class)[ CD ]
Line_2 $$ private void initUI() -->Line_100 $$ myPanel.add(mySplitter, BorderLayout.CENTER)[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_39 $$ selectionListener.valueChanged(e)[ CD ]
Line_43 $$ new TableViewSpeedSearch<CommittedChangeList>(myRevisionsList) -->Line_47 $$ return element.getComment()[ FD ]
Line_7 $$ final List<CommittedChangeList> changeLists = myRevisionsList.getSelectedObjects()-->Line_11 $$ final List<SvnChangeList> svnChangeLists = ContainerUtil.findAll(changeLists, SvnChangeList.class)[ FD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_59 $$ int row = table.rowAtPoint(e.getPoint())[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_38 $$ super.valueChanged(e)[ FD ]
Line_2 $$ private void initUI() -->Line_93 $$ flatModel.fireTableDataChanged()[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_63 $$ listCellRenderer.customizeCellRenderer(table, table.getValueAt(row, column), table.isRowSelected(row))[ FD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_10 $$ if (!changeLists.isEmpty()) [ CD ]
Line_61 $$ if (row == -1 || column == -1)-->Line_62 $$ return null[ CD ]
Line_7 $$ final List<CommittedChangeList> changeLists = myRevisionsList.getSelectedObjects()-->Line_10 $$ if (!changeLists.isEmpty()) [ FD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_38 $$ super.valueChanged(e)[ CD ]
Line_12 $$ for (SvnChangeList svnChangeList : svnChangeLists) -->Line_17 $$ myAlreadyMerged.add(svnChangeList.getByPath(path))[ FD ]
Line_58 $$ JTable table = (JTable) e.getSource()-->Line_60 $$ int column = table.columnAtPoint(e.getPoint())[ FD ]
Line_13 $$ final Collection<String> notMerged = myMergeChecker.getNotMergedPaths(svnChangeList)-->Line_14 $$ if (!ContainerUtil.isEmpty(notMerged)) [ FD ]
Line_2 $$ private void initUI() -->Line_67 $$ mouseListener.installOn(myRevisionsList)[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_60 $$ int column = table.columnAtPoint(e.getPoint())[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_59 $$ int row = table.rowAtPoint(e.getPoint())[ FD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_60 $$ int column = table.columnAtPoint(e.getPoint())[ FD ]
Line_2 $$ private void initUI() -->Line_98 $$ mySplitter.setDividerWidth(2)[ CD ]
Line_2 $$ private void initUI() -->Line_51 $$ myRevisionsList.setModelAndUpdateColumns(flatModel)[ CD ]
Line_58 $$ JTable table = (JTable) e.getSource()-->Line_59 $$ int row = table.rowAtPoint(e.getPoint())[ FD ]
Line_60 $$ int column = table.columnAtPoint(e.getPoint())-->Line_63 $$ listCellRenderer.customizeCellRenderer(table, table.getValueAt(row, column), table.isRowSelected(row))[ FD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_60 $$ int column = table.columnAtPoint(e.getPoint())[ FD ]
Line_12 $$ for (SvnChangeList svnChangeList : svnChangeLists) -->Line_15 $$ for (String path : svnChangeList.getAffectedPaths()) [ FD ]
Line_12 $$ for (SvnChangeList svnChangeList : svnChangeLists) -->Line_13 $$ final Collection<String> notMerged = myMergeChecker.getNotMergedPaths(svnChangeList)[ FD ]
Line_2 $$ private void initUI() -->Line_92 $$ flatModel.setItems(myListsEngine.getCurrent())[ CD ]
Line_2 $$ private void initUI() -->Line_42 $$ myRevisionsList.getExpandableItemsHandler().setEnabled(false)[ CD ]
Line_2 $$ private void initUI() -->Line_91 $$ mySplitter.setFirstComponent(byRevisions.getComponent())[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_58 $$ JTable table = (JTable) e.getSource()[ FD ]
Line_43 $$ new TableViewSpeedSearch<CommittedChangeList>(myRevisionsList) -->Line_47 $$ return element.getComment()[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_7 $$ final List<CommittedChangeList> changeLists = myRevisionsList.getSelectedObjects()[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_8 $$ myRepositoryChangesBrowser.setChangesToDisplay(Collections.<Change>emptyList())[ CD ]
Line_2 $$ private void initUI() -->Line_52 $$ myRevisionsList.setTableHeader(null)[ CD ]
Line_11 $$ final List<SvnChangeList> svnChangeLists = ContainerUtil.findAll(changeLists, SvnChangeList.class)-->Line_22 $$ myRepositoryChangesBrowser.setChangesToDisplay(CommittedChangesTreeBrowser.collectChanges(svnChangeLists, false))[ FD ]
Line_59 $$ int row = table.rowAtPoint(e.getPoint())-->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_58 $$ JTable table = (JTable) e.getSource()[ FD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_39 $$ selectionListener.valueChanged(e)[ FD ]
Line_16 $$ if (!notMerged.contains(path)) -->Line_17 $$ myAlreadyMerged.add(svnChangeList.getByPath(path))[ CD ]
Line_2 $$ private void initUI() -->Line_99 $$ addRevisionListListeners()[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_33 $$ return listCellRenderer[ CD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_77 $$ flatModel.setItems(committedChangeLists)[ FD ]
Line_59 $$ int row = table.rowAtPoint(e.getPoint())-->Line_63 $$ listCellRenderer.customizeCellRenderer(table, table.getValueAt(row, column), table.isRowSelected(row))[ FD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_58 $$ JTable table = (JTable) e.getSource()-->Line_63 $$ listCellRenderer.customizeCellRenderer(table, table.getValueAt(row, column), table.isRowSelected(row))[ FD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_77 $$ flatModel.setItems(committedChangeLists)[ CD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_72 $$ return myRevisionsList[ CD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_61 $$ if (row == -1 || column == -1)[ CD ]
Line_15 $$ for (String path : svnChangeList.getAffectedPaths()) -->Line_17 $$ myAlreadyMerged.add(svnChangeList.getByPath(path))[ FD ]
Line_60 $$ int column = table.columnAtPoint(e.getPoint())-->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_59 $$ int row = table.rowAtPoint(e.getPoint())[ FD ]
Line_54 $$ final AbstractBaseTagMouseListener mouseListener = new AbstractBaseTagMouseListener() -->Line_58 $$ JTable table = (JTable) e.getSource()[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_25 $$ myRepositoryChangesBrowser.repaint()[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_58 $$ JTable table = (JTable) e.getSource()[ FD ]
Line_10 $$ if (!changeLists.isEmpty()) -->Line_22 $$ myRepositoryChangesBrowser.setChangesToDisplay(CommittedChangesTreeBrowser.collectChanges(svnChangeLists, false))[ CD ]
Line_2 $$ private void initUI() -->Line_96 $$ setChangesDecorator()[ CD ]
Line_2 $$ private void initUI() -->Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() [ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_64 $$ return listCellRenderer.myRenderer.getFragmentTagAt(e.getPoint().x - table.getCellRect(row, column, false).x)[ FD ]
Line_68 $$ final PagedListWithActions.InnerComponentManager<CommittedChangeList> listsManager = new PagedListWithActions.InnerComponentManager<CommittedChangeList>() -->Line_83 $$ myRevisionsList.revalidate()[ CD ]
Line_29 $$ myRevisionsList = new TableView<CommittedChangeList>() -->Line_39 $$ selectionListener.valueChanged(e)[ FD ]
Line_15 $$ for (String path : svnChangeList.getAffectedPaths()) -->Line_16 $$ if (!notMerged.contains(path)) [ FD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_9 $$ myAlreadyMerged.clear()[ CD ]
Line_2 $$ private void initUI() -->Line_97 $$ mySplitter.setSecondComponent(myRepositoryChangesBrowser)[ CD ]
Line_3 $$ final ListSelectionListener selectionListener = new ListSelectionListener() -->Line_59 $$ int row = table.rowAtPoint(e.getPoint())[ FD ]
