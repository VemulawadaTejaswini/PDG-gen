Line_15 $$ File backup = getTempFile("backup")-->Line_16 $$ PatchFileCreator.apply(preparationResult, new HashMap<String, ValidationResult.Option>(), backup, TEST_UI)[ FD ]
Line_13 $$ PatchFileCreator.PreparationResult preparationResult = PatchFileCreator.prepareAndValidate(myFile, myOlderDir, TEST_UI)-->Line_16 $$ PatchFileCreator.apply(preparationResult, new HashMap<String, ValidationResult.Option>(), backup, TEST_UI)[ FD ]
Line_6 $$ Patch patch = PatchFileCreator.create(myPatchSpec, myFile, TEST_UI)-->Line_14 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_7 $$ RandomAccessFile raf = new RandomAccessFile(new File(myOlderDir, "bin/idea.bat"), "rw")-->Line_19 $$ raf.close()[ FD ]
Line_7 $$ RandomAccessFile raf = new RandomAccessFile(new File(myOlderDir, "bin/idea.bat"), "rw")-->Line_11 $$ raf.seek(0)[ FD ]
Line_4 $$ if (!UtilsTest.mIsWindows)-->Line_5 $$ return[ CD ]
Line_14 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_17 $$ assertEquals(original, patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI))[ FD ]
Line_7 $$ RandomAccessFile raf = new RandomAccessFile(new File(myOlderDir, "bin/idea.bat"), "rw")-->Line_12 $$ raf.write(b)[ FD ]
Line_6 $$ Patch patch = PatchFileCreator.create(myPatchSpec, myFile, TEST_UI)-->Line_17 $$ assertEquals(original, patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI))[ FD ]
