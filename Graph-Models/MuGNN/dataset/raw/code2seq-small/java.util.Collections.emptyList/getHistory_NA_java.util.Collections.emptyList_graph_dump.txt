Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_7 $$ logCommand.setIncludeRemoved(true)[ CD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_4 $$ int limit = vcsConfiguration.LIMIT_HISTORY ? vcsConfiguration.MAXIMUM_HISTORY_ROWS : -1[ CD ]
Line_5 $$ final HgLogCommand logCommand = new HgLogCommand(project)-->Line_9 $$ return logCommand.execute(new HgFile(vcsRoot, filePath), limit, false)[ FD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_3 $$ VcsConfiguration vcsConfiguration = VcsConfiguration.getInstance(project)[ FD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_6 $$ logCommand.setFollowCopies(!filePath.isDirectory())[ FD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_6 $$ logCommand.setFollowCopies(!filePath.isDirectory())[ CD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_3 $$ VcsConfiguration vcsConfiguration = VcsConfiguration.getInstance(project)[ CD ]
Line_4 $$ int limit = vcsConfiguration.LIMIT_HISTORY ? vcsConfiguration.MAXIMUM_HISTORY_ROWS : -1-->Line_9 $$ return logCommand.execute(new HgFile(vcsRoot, filePath), limit, false)[ FD ]
Line_2 $$ private static List<HgFileRevision> getHistory(FilePath filePath, VirtualFile vcsRoot, Project project) -->Line_5 $$ final HgLogCommand logCommand = new HgLogCommand(project)[ CD ]
Line_5 $$ final HgLogCommand logCommand = new HgLogCommand(project)-->Line_6 $$ logCommand.setFollowCopies(!filePath.isDirectory())[ FD ]
Line_5 $$ final HgLogCommand logCommand = new HgLogCommand(project)-->Line_7 $$ logCommand.setIncludeRemoved(true)[ FD ]
