Line_2 $$ private void doStep(int nodeIndex) -->Line_16 $$ addUnderdoneEdge(nodeIndex, downCommitId)[ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_9 $$ fixUnderdoneEdge(upNodeIndex, nodeIndex, commit.getId())[ FD ]
Line_7 $$ int edgeIndex = myNodeToEdgeIndex[nodeIndex]-->Line_21 $$ myNodeToEdgeIndex[nodeIndex + 1] = edgeIndex[ FD ]
Line_4 $$ List<Integer> upNodes = upAdjacentNodes.remove(commit.getId())-->Line_6 $$ upNodes = Collections.emptyList()[ FD ]
Line_3 $$ GraphCommit<CommitId> commit = myCommits.get(nodeIndex)-->Line_15 $$ for (CommitId downCommitId : commit.getParents()) [ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_21 $$ myNodeToEdgeIndex[nodeIndex + 1] = edgeIndex[ CD ]
Line_5 $$ if (upNodes == null)-->Line_6 $$ upNodes = Collections.emptyList()[ CD ]
Line_7 $$ int edgeIndex = myNodeToEdgeIndex[nodeIndex]-->Line_18 $$ edgeIndex++[ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_3 $$ GraphCommit<CommitId> commit = myCommits.get(nodeIndex)[ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_4 $$ List<Integer> upNodes = upAdjacentNodes.remove(commit.getId())[ CD ]
Line_15 $$ for (CommitId downCommitId : commit.getParents()) -->Line_16 $$ addUnderdoneEdge(nodeIndex, downCommitId)[ FD ]
Line_4 $$ List<Integer> upNodes = upAdjacentNodes.remove(commit.getId())-->Line_5 $$ if (upNodes == null)[ FD ]
Line_3 $$ GraphCommit<CommitId> commit = myCommits.get(nodeIndex)-->Line_9 $$ fixUnderdoneEdge(upNodeIndex, nodeIndex, commit.getId())[ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_7 $$ int edgeIndex = myNodeToEdgeIndex[nodeIndex][ CD ]
Line_8 $$ for (Integer upNodeIndex : upNodes) -->Line_9 $$ fixUnderdoneEdge(upNodeIndex, nodeIndex, commit.getId())[ FD ]
Line_3 $$ GraphCommit<CommitId> commit = myCommits.get(nodeIndex)-->Line_4 $$ List<Integer> upNodes = upAdjacentNodes.remove(commit.getId())[ FD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_3 $$ GraphCommit<CommitId> commit = myCommits.get(nodeIndex)[ CD ]
Line_2 $$ private void doStep(int nodeIndex) -->Line_5 $$ if (upNodes == null)[ CD ]
Line_7 $$ int edgeIndex = myNodeToEdgeIndex[nodeIndex]-->Line_11 $$ edgeIndex++[ FD ]
Line_8 $$ for (Integer upNodeIndex : upNodes) -->Line_10 $$ myLongEdges[edgeIndex] = upNodeIndex[ FD ]
