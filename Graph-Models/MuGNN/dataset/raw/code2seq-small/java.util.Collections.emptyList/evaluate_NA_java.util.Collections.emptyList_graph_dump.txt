Line_13 $$ List<Object> arguments-->Line_15 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_4 $$ Object obj = myClassTypeEvaluator.evaluate(context)[ CD ]
Line_13 $$ List<Object> arguments-->Line_20 $$ arguments = Collections.emptyList()[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_28 $$ return objRef[ CD ]
Line_14 $$ if (myParamsEvaluators != null) -->Line_20 $$ arguments = Collections.emptyList()[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()[ FD ]
Line_15 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_20 $$ arguments = Collections.emptyList()[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_22 $$ ObjectReference objRef[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_9 $$ Method method = DebuggerUtils.findMethod(classType, JVMNameUtil.CONSTRUCTOR_NAME, myConstructorSignature.getName(debugProcess))[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_13 $$ List<Object> arguments[ CD ]
Line_22 $$ ObjectReference objRef-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_14 $$ if (myParamsEvaluators != null) -->Line_15 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)[ CD ]
Line_13 $$ List<Object> arguments-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_15 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_17 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_4 $$ Object obj = myClassTypeEvaluator.evaluate(context)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_17 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_13 $$ List<Object> arguments-->Line_17 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()[ CD ]
Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_11 $$ throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.constructor", myConstructorSignature.getDisplayName(debugProcess)))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_8 $$ ClassType classType = (ClassType) obj[ CD ]
Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_9 $$ Method method = DebuggerUtils.findMethod(classType, JVMNameUtil.CONSTRUCTOR_NAME, myConstructorSignature.getName(debugProcess))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_5 $$ if (!(obj instanceof ClassType)) [ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_10 $$ if (method == null) [ CD ]
Line_20 $$ arguments = Collections.emptyList()-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_8 $$ ClassType classType = (ClassType) obj-->Line_9 $$ Method method = DebuggerUtils.findMethod(classType, JVMNameUtil.CONSTRUCTOR_NAME, myConstructorSignature.getName(debugProcess))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_14 $$ if (myParamsEvaluators != null) [ CD ]
Line_8 $$ ClassType classType = (ClassType) obj-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_15 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_9 $$ Method method = DebuggerUtils.findMethod(classType, JVMNameUtil.CONSTRUCTOR_NAME, myConstructorSignature.getName(debugProcess))-->Line_24 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_9 $$ Method method = DebuggerUtils.findMethod(classType, JVMNameUtil.CONSTRUCTOR_NAME, myConstructorSignature.getName(debugProcess))-->Line_10 $$ if (method == null) [ FD ]
Line_16 $$ for (Evaluator evaluator : myParamsEvaluators) -->Line_17 $$ arguments.add(evaluator.evaluate(context))[ FD ]
