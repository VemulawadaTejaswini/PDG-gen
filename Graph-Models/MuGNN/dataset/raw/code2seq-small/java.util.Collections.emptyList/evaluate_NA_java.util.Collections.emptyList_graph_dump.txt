Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_19 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_4 $$ Object obj = myClassTypeEvaluator.evaluate(context)[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_24 $$ ObjectReference objRef[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_8 $$ ClassType classType = (ClassType) obj[ CD ]
Line_18 $$ for (Evaluator evaluator : myParamsEvaluators) -->Line_19 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_4 $$ Object obj = myClassTypeEvaluator.evaluate(context)[ FD ]
Line_17 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_24 $$ ObjectReference objRef-->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_16 $$ if (myParamsEvaluators != null) -->Line_17 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)[ CD ]
Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_12 $$ throw EvaluateExceptionUtil.createEvaluateException(DebuggerBundle.message("evaluation.error.cannot.resolve.constructor", myConstructorSignature.getDisplayName(debugProcess)))[ FD ]
Line_17 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_19 $$ arguments.add(evaluator.evaluate(context))[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_11 $$ if (method == null) [ CD ]
Line_22 $$ arguments = Collections.emptyList()-->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_30 $$ return objRef[ CD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_5 $$ if (!(obj instanceof ClassType)) [ CD ]
Line_8 $$ ClassType classType = (ClassType) obj-->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()[ FD ]
Line_17 $$ arguments = new ArrayList<Object>(myParamsEvaluators.length)-->Line_22 $$ arguments = Collections.emptyList()[ FD ]
Line_2 $$ public Object evaluate(EvaluationContextImpl context) throws EvaluateException -->Line_16 $$ if (myParamsEvaluators != null) [ CD ]
Line_3 $$ DebugProcessImpl debugProcess = context.getDebugProcess()-->Line_26 $$ objRef = debugProcess.newInstance(context, classType, method, arguments)[ FD ]
Line_16 $$ if (myParamsEvaluators != null) -->Line_22 $$ arguments = Collections.emptyList()[ CD ]
