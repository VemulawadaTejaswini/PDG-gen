Line_3 $$ if (!hasMavenInstallation())-->Line_4 $$ return[ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_6 $$ PsiDocumentManager.getInstance(myProject).commitAllDocuments()[ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_5 $$ VfsUtil.saveText(createProjectSubFile("src/main/java/A.java"), "public class A [ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_12 $$ assertFalse(new File(getProjectPath(), "target").exists())[ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_14 $$ assertTrue(new File(getProjectPath(), "target").exists())[ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_7 $$ new WriteAction<Object>() [ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_3 $$ if (!hasMavenInstallation())[ CD ]
Line_2 $$ public void testExternalExecutor() throws Exception -->Line_13 $$ execute(new MavenRunnerParameters(true, getProjectPath(), Arrays.asList("compile"), Collections.<String>emptyList()))[ CD ]
Line_7 $$ new WriteAction<Object>() -->Line_9 $$ createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>")[ CD ]
