Line_3 $$ final AntDomProject project = context.getInvocationElement().getParentOfType(AntDomProject.class, false)-->Line_4 $$ if (project == null) [ FD ]
Line_12 $$ if (s == null) -->Line_17 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_12 $$ if (s == null) [ CD ]
Line_7 $$ final AntDomTarget contextTarget = context.getInvocationElement().getParentOfType(AntDomTarget.class, false)-->Line_8 $$ if (contextTarget == null) [ FD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_4 $$ if (project == null) [ CD ]
Line_11 $$ final List<String> refs-->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ FD ]
Line_13 $$ refs = Collections.emptyList()-->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ FD ]
Line_12 $$ if (s == null) -->Line_13 $$ refs = Collections.emptyList()[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_3 $$ final AntDomProject project = context.getInvocationElement().getParentOfType(AntDomProject.class, false)[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ CD ]
Line_7 $$ final AntDomTarget contextTarget = context.getInvocationElement().getParentOfType(AntDomTarget.class, false)-->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ FD ]
Line_11 $$ final List<String> refs-->Line_15 $$ refs = new ArrayList<String>()[ FD ]
Line_18 $$ final String ref = tokenizer.nextToken()-->Line_19 $$ refs.add(ref.trim())[ FD ]
Line_15 $$ refs = new ArrayList<String>()-->Line_19 $$ refs.add(ref.trim())[ FD ]
Line_13 $$ refs = Collections.emptyList()-->Line_15 $$ refs = new ArrayList<String>()[ FD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_23 $$ result.setRefsString(s)[ FD ]
Line_12 $$ if (s == null) -->Line_15 $$ refs = new ArrayList<String>()[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_23 $$ result.setRefsString(s)[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_7 $$ final AntDomTarget contextTarget = context.getInvocationElement().getParentOfType(AntDomTarget.class, false)[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_3 $$ final AntDomProject project = context.getInvocationElement().getParentOfType(AntDomProject.class, false)[ FD ]
Line_11 $$ final List<String> refs-->Line_13 $$ refs = Collections.emptyList()[ FD ]
Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(s, ",", false)-->Line_17 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_17 $$ while (tokenizer.hasMoreTokens()) -->Line_19 $$ refs.add(ref.trim())[ CD ]
Line_4 $$ if (project == null) -->Line_5 $$ return null[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_11 $$ final List<String> refs[ CD ]
Line_8 $$ if (contextTarget == null) -->Line_9 $$ return null[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_7 $$ final AntDomTarget contextTarget = context.getInvocationElement().getParentOfType(AntDomTarget.class, false)[ FD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_8 $$ if (contextTarget == null) [ CD ]
Line_12 $$ if (s == null) -->Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(s, ",", false)[ CD ]
Line_17 $$ while (tokenizer.hasMoreTokens()) -->Line_18 $$ final String ref = tokenizer.nextToken()[ CD ]
Line_11 $$ final List<String> refs-->Line_19 $$ refs.add(ref.trim())[ FD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_24 $$ return result[ CD ]
Line_2 $$ public TargetResolver.Result fromString(@Nullable @NonNls String s, ConvertContext context) -->Line_12 $$ if (s == null) [ FD ]
Line_15 $$ refs = new ArrayList<String>()-->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ FD ]
Line_13 $$ refs = Collections.emptyList()-->Line_19 $$ refs.add(ref.trim())[ FD ]
Line_16 $$ final StringTokenizer tokenizer = new StringTokenizer(s, ",", false)-->Line_18 $$ final String ref = tokenizer.nextToken()[ FD ]
Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)-->Line_23 $$ result.setRefsString(s)[ FD ]
Line_3 $$ final AntDomProject project = context.getInvocationElement().getParentOfType(AntDomProject.class, false)-->Line_22 $$ final TargetResolver.Result result = TargetResolver.resolve(project.getContextAntProject(), contextTarget, refs)[ FD ]
