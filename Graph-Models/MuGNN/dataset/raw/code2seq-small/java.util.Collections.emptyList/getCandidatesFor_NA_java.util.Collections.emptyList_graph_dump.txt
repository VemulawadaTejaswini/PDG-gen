Line_64 $$ candidates = Sets.union(candidates, l1overlapping)-->Line_66 $$ if (candidates.size() < 2)[ FD ]
Line_86 $$ Set<SSTableReader> candidates = Sets.union(Collections.singleton(sstable), overlapping(sstable, getLevel(level + 1)))-->Line_89 $$ if (Sets.intersection(candidates, compacting).isEmpty())[ FD ]
Line_62 $$ if (!overlapping(candidates, compactingL0).isEmpty())-->Line_63 $$ return Collections.emptyList()[ CD ]
Line_14 $$ PartitionPosition firstCompactingKey = null-->Line_17 $$ firstCompactingKey = candidate.first[ FD ]
Line_11 $$ if (level == 0) -->Line_36 $$ Iterables.addAll(remaining, Iterables.filter(getLevel(0), Predicates.not(suspectP)))[ CD ]
Line_43 $$ for (SSTableReader newCandidate : overlappedL0) -->Line_45 $$ candidates.add(newCandidate)[ FD ]
Line_35 $$ Set<SSTableReader> remaining = new HashSet()-->Line_40 $$ Sets.SetView<SSTableReader> overlappedL0 = Sets.union(Collections.singleton(sstable), overlapping(sstable, remaining))[ FD ]
Line_10 $$ final Set<SSTableReader> compacting = cfs.getTracker().getCompacting()-->Line_60 $$ if (Sets.intersection(l1overlapping, compacting).size() > 0)[ FD ]
Line_11 $$ if (level == 0) -->Line_12 $$ Set<SSTableReader> compactingL0 = getCompacting(0)[ CD ]
Line_11 $$ if (level == 0) -->Line_35 $$ Set<SSTableReader> remaining = new HashSet()[ CD ]
Line_18 $$ if (lastCompactingKey == null || candidate.last.compareTo(lastCompactingKey) > 0)-->Line_19 $$ lastCompactingKey = candidate.last[ CD ]
Line_16 $$ if (firstCompactingKey == null || candidate.first.compareTo(firstCompactingKey) < 0)-->Line_17 $$ firstCompactingKey = candidate.first[ CD ]
Line_43 $$ for (SSTableReader newCandidate : overlappedL0) -->Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)[ FD ]
Line_13 $$ PartitionPosition lastCompactingKey = null-->Line_18 $$ if (lastCompactingKey == null || candidate.last.compareTo(lastCompactingKey) > 0)[ FD ]
Line_19 $$ lastCompactingKey = candidate.last-->Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)[ FD ]
Line_35 $$ Set<SSTableReader> remaining = new HashSet()-->Line_37 $$ for (SSTableReader sstable : ageSortedSSTables(remaining)) [ FD ]
Line_75 $$ for (int i = 0; i < getLevel(level).size(); i++) -->Line_78 $$ start = i[ FD ]
Line_66 $$ if (candidates.size() < 2)-->Line_69 $$ return candidates[ CD ]
Line_11 $$ if (level == 0) -->Line_66 $$ if (candidates.size() < 2)[ CD ]
Line_77 $$ if (sstable.first.compareTo(lastCompactedKeys[level]) > 0) -->Line_78 $$ start = i[ CD ]
Line_17 $$ firstCompactingKey = candidate.first-->Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)[ FD ]
Line_35 $$ Set<SSTableReader> remaining = new HashSet()-->Line_36 $$ Iterables.addAll(remaining, Iterables.filter(getLevel(0), Predicates.not(suspectP)))[ FD ]
Line_35 $$ Set<SSTableReader> remaining = new HashSet()-->Line_46 $$ remaining.remove(newCandidate)[ FD ]
Line_66 $$ if (candidates.size() < 2)-->Line_67 $$ return Collections.emptyList()[ CD ]
Line_37 $$ for (SSTableReader sstable : ageSortedSSTables(remaining)) -->Line_86 $$ Set<SSTableReader> candidates = Sets.union(Collections.singleton(sstable), overlapping(sstable, getLevel(level + 1)))[ FD ]
Line_64 $$ candidates = Sets.union(candidates, l1overlapping)-->Line_89 $$ if (Sets.intersection(candidates, compacting).isEmpty())[ FD ]
Line_37 $$ for (SSTableReader sstable : ageSortedSSTables(remaining)) -->Line_38 $$ if (candidates.contains(sstable))[ FD ]
Line_14 $$ PartitionPosition firstCompactingKey = null-->Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)[ FD ]
Line_75 $$ for (int i = 0; i < getLevel(level).size(); i++) -->Line_76 $$ SSTableReader sstable = getLevel(level).get(i)[ CD ]
Line_13 $$ PartitionPosition lastCompactingKey = null-->Line_19 $$ lastCompactingKey = candidate.last[ FD ]
Line_75 $$ for (int i = 0; i < getLevel(level).size(); i++) -->Line_76 $$ SSTableReader sstable = getLevel(level).get(i)[ FD ]
Line_12 $$ Set<SSTableReader> compactingL0 = getCompacting(0)-->Line_41 $$ if (!Sets.intersection(overlappedL0, compactingL0).isEmpty())[ FD ]
Line_12 $$ Set<SSTableReader> compactingL0 = getCompacting(0)-->Line_62 $$ if (!overlapping(candidates, compactingL0).isEmpty())[ FD ]
Line_64 $$ candidates = Sets.union(candidates, l1overlapping)-->Line_87 $$ if (Iterables.any(candidates, suspectP))[ FD ]
Line_85 $$ SSTableReader sstable = getLevel(level).get((start + i) % getLevel(level).size())-->Line_86 $$ Set<SSTableReader> candidates = Sets.union(Collections.singleton(sstable), overlapping(sstable, getLevel(level + 1)))[ FD ]
Line_14 $$ PartitionPosition firstCompactingKey = null-->Line_16 $$ if (firstCompactingKey == null || candidate.first.compareTo(firstCompactingKey) < 0)[ FD ]
Line_13 $$ PartitionPosition lastCompactingKey = null-->Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)[ FD ]
Line_76 $$ SSTableReader sstable = getLevel(level).get(i)-->Line_86 $$ Set<SSTableReader> candidates = Sets.union(Collections.singleton(sstable), overlapping(sstable, getLevel(level + 1)))[ FD ]
Line_75 $$ for (int i = 0; i < getLevel(level).size(); i++) -->Line_77 $$ if (sstable.first.compareTo(lastCompactedKeys[level]) > 0) [ CD ]
Line_43 $$ for (SSTableReader newCandidate : overlappedL0) -->Line_46 $$ remaining.remove(newCandidate)[ FD ]
Line_86 $$ Set<SSTableReader> candidates = Sets.union(Collections.singleton(sstable), overlapping(sstable, getLevel(level + 1)))-->Line_87 $$ if (Iterables.any(candidates, suspectP))[ FD ]
Line_10 $$ final Set<SSTableReader> compacting = cfs.getTracker().getCompacting()-->Line_89 $$ if (Sets.intersection(candidates, compacting).isEmpty())[ FD ]
Line_60 $$ if (Sets.intersection(l1overlapping, compacting).size() > 0)-->Line_61 $$ return Collections.emptyList()[ CD ]
Line_11 $$ if (level == 0) -->Line_14 $$ PartitionPosition firstCompactingKey = null[ CD ]
Line_11 $$ if (level == 0) -->Line_13 $$ PartitionPosition lastCompactingKey = null[ CD ]
Line_44 $$ if (firstCompactingKey == null || lastCompactingKey == null || overlapping(firstCompactingKey.getToken(), lastCompactingKey.getToken(), Arrays.asList(newCandidate)).size() == 0)-->Line_45 $$ candidates.add(newCandidate)[ CD ]
Line_89 $$ if (Sets.intersection(candidates, compacting).isEmpty())-->Line_90 $$ return candidates[ CD ]
Line_37 $$ for (SSTableReader sstable : ageSortedSSTables(remaining)) -->Line_40 $$ Sets.SetView<SSTableReader> overlappedL0 = Sets.union(Collections.singleton(sstable), overlapping(sstable, remaining))[ FD ]
Line_40 $$ Sets.SetView<SSTableReader> overlappedL0 = Sets.union(Collections.singleton(sstable), overlapping(sstable, remaining))-->Line_41 $$ if (!Sets.intersection(overlappedL0, compactingL0).isEmpty())[ FD ]
