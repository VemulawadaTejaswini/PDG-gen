Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_5 $$ request.getGlobalProfileManager().loadSettingsProfiles(mySettings)[ CD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())[ CD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_7 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ CD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_9 $$ MavenProject project = null-->Line_16 $$ Map managedVersions = project.getManagedVersionMap()[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_18 $$ project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class), null, null))[ FD ]
Line_9 $$ MavenProject project = null-->Line_13 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_9 $$ MavenProject project = null[ CD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_6 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()[ CD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_25 $$ return new MavenExecutionResult(project, exceptions)[ CD ]
Line_19 $$ ArtifactResolver resolver = getComponent(ArtifactResolver.class)-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_7 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_9 $$ MavenProject project = null-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_9 $$ MavenProject project = null-->Line_18 $$ project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class), null, null))[ FD ]
Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_6 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_13 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_21 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_16 $$ Map managedVersions = project.getManagedVersionMap()-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_4 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()-->Line_13 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_15 $$ Artifact projectArtifact = project.getArtifact()-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_11 $$ MavenProjectBuilder builder = getComponent(MavenProjectBuilder.class)-->Line_13 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_17 $$ ArtifactMetadataSource metadataSource = getComponent(ArtifactMetadataSource.class)-->Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_4 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()[ CD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_14 $$ findExtensions(project)[ FD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_12 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_20 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)-->Line_21 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_6 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()-->Line_7 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_15 $$ Artifact projectArtifact = project.getArtifact()[ FD ]
Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_5 $$ request.getGlobalProfileManager().loadSettingsProfiles(mySettings)[ FD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_8 $$ List<Exception> exceptions = new ArrayList<Exception>()[ CD ]
Line_9 $$ MavenProject project = null-->Line_15 $$ Artifact projectArtifact = project.getArtifact()[ FD ]
Line_4 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()-->Line_12 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_9 $$ MavenProject project = null-->Line_21 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_4 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()[ FD ]
Line_11 $$ MavenProjectBuilder builder = getComponent(MavenProjectBuilder.class)-->Line_12 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_9 $$ MavenProject project = null-->Line_12 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_12 $$ project = builder.build(new File(file.getPath()), config)-->Line_16 $$ Map managedVersions = project.getManagedVersionMap()[ FD ]
Line_9 $$ MavenProject project = null-->Line_14 $$ findExtensions(project)[ FD ]
Line_2 $$ public MavenExecutionResult resolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, List<ResolutionListener> listeners) -->Line_3 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())[ FD ]
