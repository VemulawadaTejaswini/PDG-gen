Line_20 $$ inputStreamOVPs = Collections.emptyList()-->Line_25 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) [ FD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_16 $$ sb.append(parentMessage.getThreadId())[ FD ]
Line_8 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) -->Line_9 $$ MBMessagePermission.check(getPermissionChecker(), parentMessageId, ActionKeys.UPDATE)[ CD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_5 $$ checkReplyToPermission(parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessageId)[ FD ]
Line_12 $$ StringBundler sb = new StringBundler(4)-->Line_16 $$ sb.append(parentMessage.getThreadId())[ FD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_19 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.ADD_FILE)) [ FD ]
Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_12 $$ StringBundler sb = new StringBundler(4)[ CD ]
Line_12 $$ StringBundler sb = new StringBundler(4)-->Line_13 $$ sb.append("Thread is locked for class name ")[ FD ]
Line_12 $$ StringBundler sb = new StringBundler(4)-->Line_17 $$ throw new LockedThreadException(sb.toString())[ FD ]
Line_19 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.ADD_FILE)) -->Line_20 $$ inputStreamOVPs = Collections.emptyList()[ CD ]
Line_12 $$ StringBundler sb = new StringBundler(4)-->Line_14 $$ sb.append(MBThread.class.getName())[ FD ]
Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_15 $$ sb.append(" and class PK ")[ CD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_22 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) [ FD ]
Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_13 $$ sb.append("Thread is locked for class name ")[ CD ]
Line_12 $$ StringBundler sb = new StringBundler(4)-->Line_15 $$ sb.append(" and class PK ")[ FD ]
Line_4 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_25 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_16 $$ sb.append(parentMessage.getThreadId())[ CD ]
Line_22 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) -->Line_23 $$ priority = MBThreadConstants.PRIORITY_NOT_GIVEN[ CD ]
Line_11 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_14 $$ sb.append(MBThread.class.getName())[ CD ]
Line_6 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")-->Line_8 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) [ FD ]
Line_23 $$ priority = MBThreadConstants.PRIORITY_NOT_GIVEN-->Line_25 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
