Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_24 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_7 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) [ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_15 $$ sb.append(parentMessage.getThreadId())[ CD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.ADD_FILE)) [ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_6 $$ int workFlowAction = serviceContext.getWorkflowAction()[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_13 $$ sb.append(MBThread.class.getName())[ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_24 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ CD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) [ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_4 $$ checkReplyToPermission(parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessageId)[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.ADD_FILE)) [ CD ]
Line_19 $$ inputStreamOVPs = Collections.emptyList()-->Line_24 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_14 $$ sb.append(" and class PK ")[ FD ]
Line_7 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) -->Line_8 $$ MBMessagePermission.check(getPermissionChecker(), parentMessageId, ActionKeys.UPDATE)[ CD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_4 $$ checkReplyToPermission(parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessageId)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_16 $$ throw new LockedThreadException(sb.toString())[ FD ]
Line_5 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")-->Line_7 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) [ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_5 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")[ FD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_24 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_6 $$ int workFlowAction = serviceContext.getWorkflowAction()[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_7 $$ if ((workFlowAction == WorkflowConstants.STATUS_DRAFT) && !preview && !serviceContext.isSignedIn()) [ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)[ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) [ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_5 $$ boolean preview = ParamUtil.getBoolean(serviceContext, "preview")[ CD ]
Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) -->Line_22 $$ priority = MBThreadConstants.PRIORITY_NOT_GIVEN[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_12 $$ sb.append("Thread is locked for class name ")[ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_14 $$ sb.append(" and class PK ")[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) [ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_22 $$ priority = MBThreadConstants.PRIORITY_NOT_GIVEN[ FD ]
Line_22 $$ priority = MBThreadConstants.PRIORITY_NOT_GIVEN-->Line_24 $$ return mbMessageLocalService.addMessage(getGuestOrUserId(), null, parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessage.getThreadId(), parentMessageId, subject, body, format, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_15 $$ sb.append(parentMessage.getThreadId())[ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_11 $$ StringBundler sb = new StringBundler(4)[ CD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_12 $$ sb.append("Thread is locked for class name ")[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_4 $$ checkReplyToPermission(parentMessage.getGroupId(), parentMessage.getCategoryId(), parentMessageId)[ FD ]
Line_10 $$ if (LockManagerUtil.isLocked(MBThread.class.getName(), parentMessage.getThreadId())) -->Line_13 $$ sb.append(MBThread.class.getName())[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(4)-->Line_15 $$ sb.append(parentMessage.getThreadId())[ FD ]
Line_3 $$ MBMessage parentMessage = mbMessagePersistence.findByPrimaryKey(parentMessageId)-->Line_21 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.UPDATE_THREAD_PRIORITY)) [ FD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_19 $$ inputStreamOVPs = Collections.emptyList()[ FD ]
Line_18 $$ if (!MBCategoryPermission.contains(getPermissionChecker(), parentMessage.getGroupId(), parentMessage.getCategoryId(), ActionKeys.ADD_FILE)) -->Line_19 $$ inputStreamOVPs = Collections.emptyList()[ CD ]
Line_2 $$ public MBMessage addMessage(long parentMessageId, String subject, String body, String format, List<ObjectValuePair<String, InputStream>> inputStreamOVPs, boolean anonymous, double priority, boolean allowPingbacks, ServiceContext serviceContext) throws PortalException -->Line_8 $$ MBMessagePermission.check(getPermissionChecker(), parentMessageId, ActionKeys.UPDATE)[ FD ]
