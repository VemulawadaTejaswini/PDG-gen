Line_37 $$ if (success == false) -->Line_38 $$ indexService.close("plugins_failed", true)[ CD ]
Line_14 $$ final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, Collections.emptyList(), indexNameMatcher)-->Line_19 $$ logger.debug("creating Index [[ FD ]
Line_28 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_33 $$ indices = newMapBuilder(indices).put(index.name(), indexService).immutableMap()[ FD ]
Line_12 $$ final String indexName = indexMetaData.getIndex()-->Line_13 $$ indexNameExpressionResolver.matchesIndex(indexName, indexExpression, clusterService.state())[ FD ]
Line_22 $$ for (IndexEventListener listener : builtInListeners) -->Line_23 $$ indexModule.addIndexEventListener(listener)[ FD ]
Line_22 $$ for (IndexEventListener listener : builtInListeners) -->Line_32 $$ listener.afterIndexCreated(indexService)[ FD ]
Line_20 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_28 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)[ FD ]
Line_28 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_32 $$ listener.afterIndexCreated(indexService)[ FD ]
Line_15 $$ Index index = new Index(indexMetaData.getIndex())-->Line_16 $$ if (indices.containsKey(index.name())) [ FD ]
Line_20 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_26 $$ final IndexEventListener listener = indexModule.freeze()[ FD ]
Line_28 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_31 $$ assert indexService.getIndexEventListener() == listener[ FD ]
Line_28 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_38 $$ indexService.close("plugins_failed", true)[ FD ]
Line_34 $$ success = true-->Line_37 $$ if (success == false) [ FD ]
Line_20 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_23 $$ indexModule.addIndexEventListener(listener)[ FD ]
Line_15 $$ Index index = new Index(indexMetaData.getIndex())-->Line_27 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_29 $$ boolean success = false-->Line_37 $$ if (success == false) [ FD ]
Line_29 $$ boolean success = false-->Line_34 $$ success = true[ FD ]
Line_22 $$ for (IndexEventListener listener : builtInListeners) -->Line_27 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_20 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_25 $$ indexModule.addIndexEventListener(oldShardsStats)[ FD ]
Line_14 $$ final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, Collections.emptyList(), indexNameMatcher)-->Line_27 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_20 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_21 $$ pluginsService.onIndexModule(indexModule)[ FD ]
Line_15 $$ Index index = new Index(indexMetaData.getIndex())-->Line_33 $$ indices = newMapBuilder(indices).put(index.name(), indexService).immutableMap()[ FD ]
