Line_16 $$ for (IndexEventListener listener : builtInListeners) -->Line_17 $$ indexModule.addIndexEventListener(listener)[ FD ]
Line_16 $$ for (IndexEventListener listener : builtInListeners) -->Line_26 $$ listener.afterIndexCreated(indexService)[ FD ]
Line_9 $$ Index index = new Index(indexMetaData.getIndex())-->Line_27 $$ indices = newMapBuilder(indices).put(index.name(), indexService).immutableMap()[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_13 $$ logger.debug("creating Index [[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_6 $$ final String indexName = indexMetaData.getIndex()[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_23 $$ boolean success = false[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_10 $$ if (indices.containsKey(index.name())) [ CD ]
Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_15 $$ pluginsService.onIndexModule(indexModule)[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_7 $$ final Predicate<String> indexNameMatcher = ( indexExpression) -> indexNameExpressionResolver.matchesIndex(indexName, indexExpression, clusterService.state())[ CD ]
Line_9 $$ Index index = new Index(indexMetaData.getIndex())-->Line_21 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_6 $$ final String indexName = indexMetaData.getIndex()-->Line_7 $$ indexNameExpressionResolver.matchesIndex(indexName, indexExpression, clusterService.state())[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_9 $$ Index index = new Index(indexMetaData.getIndex())[ CD ]
Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_19 $$ indexModule.addIndexEventListener(oldShardsStats)[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_6 $$ final String indexName = indexMetaData.getIndex()[ CD ]
Line_9 $$ Index index = new Index(indexMetaData.getIndex())-->Line_10 $$ if (indices.containsKey(index.name())) [ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_21 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_8 $$ final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, Collections.emptyList(), indexNameMatcher)[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_4 $$ throw new IllegalStateException("Can't create an index [" + indexMetaData.getIndex() + "], node is closed")[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_9 $$ Index index = new Index(indexMetaData.getIndex())[ FD ]
Line_8 $$ final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, Collections.emptyList(), indexNameMatcher)-->Line_21 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_23 $$ boolean success = false-->Line_28 $$ success = true[ FD ]
Line_28 $$ success = true-->Line_31 $$ if (success == false) [ FD ]
Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_17 $$ indexModule.addIndexEventListener(listener)[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_20 $$ final IndexEventListener listener = indexModule.freeze()[ CD ]
Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_26 $$ listener.afterIndexCreated(indexService)[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)[ CD ]
Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_32 $$ indexService.close("plugins_failed", true)[ FD ]
Line_8 $$ final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, Collections.emptyList(), indexNameMatcher)-->Line_13 $$ logger.debug("creating Index [[ FD ]
Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)[ FD ]
Line_14 $$ final IndexModule indexModule = new IndexModule(idxSettings, indexStoreConfig, analysisRegistry)-->Line_20 $$ final IndexEventListener listener = indexModule.freeze()[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_13 $$ logger.debug("creating Index [[ FD ]
Line_16 $$ for (IndexEventListener listener : builtInListeners) -->Line_21 $$ listener.beforeIndexCreated(index, idxSettings.getSettings())[ FD ]
Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_25 $$ assert indexService.getIndexEventListener() == listener[ FD ]
Line_23 $$ boolean success = false-->Line_31 $$ if (success == false) [ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_15 $$ pluginsService.onIndexModule(indexModule)[ CD ]
Line_31 $$ if (success == false) -->Line_32 $$ indexService.close("plugins_failed", true)[ CD ]
Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)-->Line_27 $$ indices = newMapBuilder(indices).put(index.name(), indexService).immutableMap()[ FD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_19 $$ indexModule.addIndexEventListener(oldShardsStats)[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_22 $$ final IndexService indexService = indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, mapperRegistry)[ CD ]
Line_2 $$ public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException -->Line_3 $$ if (!lifecycle.started()) [ CD ]
