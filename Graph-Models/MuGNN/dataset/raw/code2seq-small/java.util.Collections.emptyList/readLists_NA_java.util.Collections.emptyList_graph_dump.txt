Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_4 $$ final long lastExisting = getLastRevision(vcs, root).getNumber()[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_31 $$ return result[ CD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_24 $$ final CommittedChangeList list = readListByProvider(bytes, provider, location)[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_3 $$ final String root = normalizeLocation(location)[ CD ]
Line_3 $$ final String root = normalizeLocation(location)-->Line_4 $$ final long lastExisting = getLastRevision(vcs, root).getNumber()[ FD ]
Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_12 $$ return connection.prepareStatement("SELECT * FROM " + SqliteTables.REVISION.TABLE_NAME + " WHERE " + SqliteTables.REVISION.NUMBER_INT + ">=? AND " + SqliteTables.REVISION.NUMBER_INT + "<=? ORDER BY " + SqliteTables.REVISION.NUMBER_INT + " DESC")[ FD ]
Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_20 $$ final ResultSet set = statement.executeQuery()[ FD ]
Line_21 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_25 $$ result.add(list)[ CD ]
Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_18 $$ statement.setLong(2, operatingLast)[ FD ]
Line_21 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_24 $$ final CommittedChangeList list = readListByProvider(bytes, provider, location)[ CD ]
Line_23 $$ final byte[] bytes = set.getBytes(SqliteTables.REVISION.RAW_DATA)-->Line_24 $$ final CommittedChangeList list = readListByProvider(bytes, provider, location)[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_19 $$ final CachingCommittedChangesProvider provider = (CachingCommittedChangesProvider) vcs.getCommittedChangesProvider()[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_3 $$ final String root = normalizeLocation(location)[ FD ]
Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_17 $$ statement.setLong(1, operatingFirst)[ FD ]
Line_6 $$ if (lastExisting == -1 || firstExisting == -1)-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_9 $$ final long operatingLast = lastRev == -1 ? lastExisting : lastRev-->Line_18 $$ statement.setLong(2, operatingLast)[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() [ CD ]
Line_21 $$ SqliteUtil.readSelectResults(set, new ThrowableRunnable<SQLException>() -->Line_23 $$ final byte[] bytes = set.getBytes(SqliteTables.REVISION.RAW_DATA)[ CD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_4 $$ final long lastExisting = getLastRevision(vcs, root).getNumber()[ CD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_9 $$ final long operatingLast = lastRev == -1 ? lastExisting : lastRev[ CD ]
Line_24 $$ final CommittedChangeList list = readListByProvider(bytes, provider, location)-->Line_25 $$ result.add(list)[ FD ]
Line_3 $$ final String root = normalizeLocation(location)-->Line_5 $$ final long firstExisting = getFirstRevision(vcs, root).getNumber()[ FD ]
Line_8 $$ final long operatingFirst = oldRev == -1 ? firstExisting : oldRev-->Line_17 $$ statement.setLong(1, operatingFirst)[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_6 $$ if (lastExisting == -1 || firstExisting == -1)[ CD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_5 $$ final long firstExisting = getFirstRevision(vcs, root).getNumber()[ FD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_5 $$ final long firstExisting = getFirstRevision(vcs, root).getNumber()[ CD ]
Line_2 $$ public List<CommittedChangeList> readLists(final AbstractVcs vcs, final RepositoryLocation location, final long lastRev, final long oldRev) throws VcsException -->Line_8 $$ final long operatingFirst = oldRev == -1 ? firstExisting : oldRev[ CD ]
Line_10 $$ final PreparedStatement statement = myConnection.getOrCreatePreparedStatement(SqliteTables.PREPARED_SELECT_REVISIONS, new ThrowableConvertor<Connection, PreparedStatement, SQLException>() -->Line_12 $$ return connection.prepareStatement("SELECT * FROM " + SqliteTables.REVISION.TABLE_NAME + " WHERE " + SqliteTables.REVISION.NUMBER_INT + ">=? AND " + SqliteTables.REVISION.NUMBER_INT + "<=? ORDER BY " + SqliteTables.REVISION.NUMBER_INT + " DESC")[ CD ]
