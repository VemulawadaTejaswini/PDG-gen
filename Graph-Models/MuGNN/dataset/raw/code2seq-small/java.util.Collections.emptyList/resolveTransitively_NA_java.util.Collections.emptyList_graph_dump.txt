Line_7 $$ for (MavenArtifactInfo each : artifacts) -->Line_8 $$ toResolve.add(createArtifact(each))[ FD ]
Line_6 $$ Set<Artifact> toResolve = new LinkedHashSet<Artifact>()-->Line_11 $$ Set<Artifact> res = getComponent(ArtifactResolver.class).resolveTransitively(toResolve, project, Collections.EMPTY_MAP, myLocalRepository, convertRepositories(remoteRepositories), getComponent(ArtifactMetadataSource.class)).getArtifacts()[ FD ]
Line_10 $$ Artifact project = getComponent(ArtifactFactory.class).createBuildArtifact("temp", "temp", "666", "pom")-->Line_11 $$ Set<Artifact> res = getComponent(ArtifactResolver.class).resolveTransitively(toResolve, project, Collections.EMPTY_MAP, myLocalRepository, convertRepositories(remoteRepositories), getComponent(ArtifactMetadataSource.class)).getArtifacts()[ FD ]
Line_6 $$ Set<Artifact> toResolve = new LinkedHashSet<Artifact>()-->Line_8 $$ toResolve.add(createArtifact(each))[ FD ]
Line_11 $$ Set<Artifact> res = getComponent(ArtifactResolver.class).resolveTransitively(toResolve, project, Collections.EMPTY_MAP, myLocalRepository, convertRepositories(remoteRepositories), getComponent(ArtifactMetadataSource.class)).getArtifacts()-->Line_12 $$ return MavenModelConverter.convertArtifacts(res, new THashMap<Artifact, MavenArtifact>(), getLocalRepositoryFile())[ FD ]
