Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_6 $$ EasyMock.expect(command.getHelp(false)).andReturn(new Help("some_text")).anyTimes()[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_9 $$ options.add(new Option(Pair.create(1, new Argument(new Help("option argument"), argument)), new Help(""), Collections.<String>emptyList(), Collections.singletonList("--available-option")))[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_15 $$ return Collections.singletonList(command)[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_13 $$ EasyMock.expect(command.getArgumentsInfo()).andReturn(argumentInfo).anyTimes()[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_3 $$ final Command command = EasyMock.createMock(Command.class)[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_14 $$ EasyMock.replay(command)[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_10 $$ options.add(new Option(null, new Help(""), Collections.<String>emptyList(), Collections.singletonList("--option-no-argument")))[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_11 $$ EasyMock.expect(command.getOptions()).andReturn(options).anyTimes()[ CD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_11 $$ EasyMock.expect(command.getOptions()).andReturn(options).anyTimes()[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_6 $$ EasyMock.expect(command.getHelp(false)).andReturn(new Help("some_text")).anyTimes()[ CD ]
Line_7 $$ final List<Option> options = new ArrayList<Option>()-->Line_10 $$ options.add(new Option(null, new Help(""), Collections.<String>emptyList(), Collections.singletonList("--option-no-argument")))[ FD ]
Line_7 $$ final List<Option> options = new ArrayList<Option>()-->Line_9 $$ options.add(new Option(Pair.create(1, new Argument(new Help("option argument"), argument)), new Help(""), Collections.<String>emptyList(), Collections.singletonList("--available-option")))[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_8 $$ final Pair<List<String>, Boolean> argument = Pair.create(Collections.singletonList("available_argument"), true)[ CD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_13 $$ EasyMock.expect(command.getArgumentsInfo()).andReturn(argumentInfo).anyTimes()[ FD ]
Line_7 $$ final List<Option> options = new ArrayList<Option>()-->Line_11 $$ EasyMock.expect(command.getOptions()).andReturn(options).anyTimes()[ FD ]
Line_12 $$ final ArgumentsInfo argumentInfo = new KnownArgumentsInfo(Collections.singletonList(new Argument(new Help("positional_argument"), Pair.create(Collections.singletonList("positional_argument"), true))), 1, 1)-->Line_13 $$ EasyMock.expect(command.getArgumentsInfo()).andReturn(argumentInfo).anyTimes()[ FD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_4 $$ EasyMock.expect(command.getName()).andReturn("command").anyTimes()[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_4 $$ EasyMock.expect(command.getName()).andReturn("command").anyTimes()[ CD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_5 $$ EasyMock.expect(command.getHelp(true)).andReturn(new Help("some_text")).anyTimes()[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_12 $$ final ArgumentsInfo argumentInfo = new KnownArgumentsInfo(Collections.singletonList(new Argument(new Help("positional_argument"), Pair.create(Collections.singletonList("positional_argument"), true))), 1, 1)[ CD ]
Line_2 $$ static List<Command> createCommands() -->Line_5 $$ EasyMock.expect(command.getHelp(true)).andReturn(new Help("some_text")).anyTimes()[ CD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_14 $$ EasyMock.replay(command)[ FD ]
Line_3 $$ final Command command = EasyMock.createMock(Command.class)-->Line_15 $$ return Collections.singletonList(command)[ FD ]
Line_2 $$ static List<Command> createCommands() -->Line_7 $$ final List<Option> options = new ArrayList<Option>()[ CD ]
