Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_3 $$ Attribute attribute = entry.getAttribute(attributeName)[ CD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_8 $$ for (Element element : entry.getChildren()) [ FD ]
Line_15 $$ List<Element> children = entryChild == null ? Collections.<Element>emptyList() : entryChild.getChildren()-->Line_20 $$ return Binding.deserializeList(binding, context, children)[ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_23 $$ return null[ CD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_3 $$ Attribute attribute = entry.getAttribute(attributeName)[ FD ]
Line_8 $$ for (Element element : entry.getChildren()) -->Line_9 $$ if (binding.isBoundTo(element)) [ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_10 $$ return binding.deserialize(context, element)[ FD ]
Line_9 $$ if (binding.isBoundTo(element)) -->Line_10 $$ return binding.deserialize(context, element)[ CD ]
Line_3 $$ Attribute attribute = entry.getAttribute(attributeName)-->Line_4 $$ if (attribute != null) [ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_5 $$ return XmlSerializerImpl.convert(attribute.getValue(), valueClass)[ FD ]
Line_6 $$ if (myMapAnnotation != null && !myMapAnnotation.surroundKeyWithTag()) -->Line_16 $$ if (children.isEmpty()) [ CD ]
Line_4 $$ if (attribute != null) -->Line_6 $$ if (myMapAnnotation != null && !myMapAnnotation.surroundKeyWithTag()) [ CD ]
Line_6 $$ if (myMapAnnotation != null && !myMapAnnotation.surroundKeyWithTag()) -->Line_14 $$ Element entryChild = entry.getChild(attributeName)[ CD ]
Line_3 $$ Attribute attribute = entry.getAttribute(attributeName)-->Line_5 $$ return XmlSerializerImpl.convert(attribute.getValue(), valueClass)[ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_14 $$ Element entryChild = entry.getChild(attributeName)[ FD ]
Line_16 $$ if (children.isEmpty()) -->Line_20 $$ return Binding.deserializeList(binding, context, children)[ CD ]
Line_6 $$ if (myMapAnnotation != null && !myMapAnnotation.surroundKeyWithTag()) -->Line_15 $$ List<Element> children = entryChild == null ? Collections.<Element>emptyList() : entryChild.getChildren()[ CD ]
Line_15 $$ List<Element> children = entryChild == null ? Collections.<Element>emptyList() : entryChild.getChildren()-->Line_16 $$ if (children.isEmpty()) [ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_9 $$ if (binding.isBoundTo(element)) [ FD ]
Line_16 $$ if (children.isEmpty()) -->Line_17 $$ return null[ CD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_20 $$ return Binding.deserializeList(binding, context, children)[ FD ]
Line_2 $$ private Object deserializeKeyOrValue(@NotNull Element entry, @NotNull String attributeName, Object context, @Nullable Binding binding, @NotNull Class<?> valueClass) -->Line_4 $$ if (attribute != null) [ CD ]
Line_4 $$ if (attribute != null) -->Line_5 $$ return XmlSerializerImpl.convert(attribute.getValue(), valueClass)[ CD ]
Line_8 $$ for (Element element : entry.getChildren()) -->Line_10 $$ return binding.deserialize(context, element)[ FD ]
Line_14 $$ Element entryChild = entry.getChild(attributeName)-->Line_15 $$ List<Element> children = entryChild == null ? Collections.<Element>emptyList() : entryChild.getChildren()[ FD ]
