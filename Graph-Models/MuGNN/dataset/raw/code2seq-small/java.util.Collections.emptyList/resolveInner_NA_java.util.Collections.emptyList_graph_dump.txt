Line_6 $$ final String referencedName = myElement.getReferencedName()-->Line_7 $$ if (referencedName == null)[ FD ]
Line_5 $$ ResolveResultList ret = new ResolveResultList()-->Line_34 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) [ FD ]
Line_5 $$ ResolveResultList ret = new ResolveResultList()-->Line_30 $$ ret.addAll(membersOfQualifier)[ FD ]
Line_7 $$ if (referencedName == null)-->Line_8 $$ return ret[ CD ]
Line_10 $$ if (qualifier == null) -->Line_11 $$ return ret[ CD ]
Line_9 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_25 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_9 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_10 $$ if (qualifier == null) [ FD ]
Line_6 $$ final String referencedName = myElement.getReferencedName()-->Line_34 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) [ FD ]
Line_9 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_38 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) [ FD ]
Line_38 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) -->Line_39 $$ addImplicitResolveResults(referencedName, ret)[ CD ]
Line_25 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)-->Line_30 $$ ret.addAll(membersOfQualifier)[ FD ]
Line_25 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)-->Line_26 $$ if (membersOfQualifier == null) [ FD ]
Line_9 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_17 $$ if (isOtherClassQualifying(qualifier, (PyClassType) qualifierType))[ FD ]
Line_9 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_43 $$ addDocReference(ret, qualifier, qualifierType)[ FD ]
Line_6 $$ final String referencedName = myElement.getReferencedName()-->Line_39 $$ addImplicitResolveResults(referencedName, ret)[ FD ]
Line_34 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) -->Line_35 $$ return ret[ CD ]
Line_5 $$ ResolveResultList ret = new ResolveResultList()-->Line_7 $$ if (referencedName == null)[ FD ]
Line_5 $$ ResolveResultList ret = new ResolveResultList()-->Line_39 $$ addImplicitResolveResults(referencedName, ret)[ FD ]
Line_6 $$ final String referencedName = myElement.getReferencedName()-->Line_25 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_5 $$ ResolveResultList ret = new ResolveResultList()-->Line_43 $$ addDocReference(ret, qualifier, qualifierType)[ FD ]
Line_17 $$ if (isOtherClassQualifying(qualifier, (PyClassType) qualifierType))-->Line_18 $$ return Collections.emptyList()[ CD ]
