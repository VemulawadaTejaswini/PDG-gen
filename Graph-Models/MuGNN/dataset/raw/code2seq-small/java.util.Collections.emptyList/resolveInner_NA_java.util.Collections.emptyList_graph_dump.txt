Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_12 $$ if (PyUtil.isClassPrivateName(referencedName) && qualifierType instanceof PyClassType) [ CD ]
Line_16 $$ if (qualifierType != null) -->Line_17 $$ qualifierType.assertValid("qualifier: " + qualifier)[ CD ]
Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)-->Line_17 $$ qualifierType.assertValid("qualifier: " + qualifier)[ FD ]
Line_13 $$ if (isOtherClassQualifying(qualifier, (PyClassType) qualifierType))-->Line_14 $$ return Collections.emptyList()[ CD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_3 $$ ResolveResultList ret = new ResolveResultList()[ CD ]
Line_18 $$ AccessDirection ctx = AccessDirection.of(myElement)-->Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)-->Line_30 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) [ FD ]
Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)-->Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_34 $$ addDocReference(ret, qualifier, qualifierType)[ FD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_34 $$ addDocReference(ret, qualifier, qualifierType)[ FD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_33 $$ if ("__doc__".equals(referencedName)) [ FD ]
Line_16 $$ if (qualifierType != null) -->Line_23 $$ ret.addAll(membersOfQualifier)[ CD ]
Line_30 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) -->Line_31 $$ addImplicitResolveResults(referencedName, ret)[ CD ]
Line_20 $$ if (membersOfQualifier == null) -->Line_21 $$ return ret[ CD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_23 $$ ret.addAll(membersOfQualifier)[ FD ]
Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)-->Line_34 $$ addDocReference(ret, qualifier, qualifierType)[ FD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_13 $$ if (isOtherClassQualifying(qualifier, (PyClassType) qualifierType))[ FD ]
Line_16 $$ if (qualifierType != null) -->Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ CD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_7 $$ final PyExpression qualifier = myElement.getQualifier()[ CD ]
Line_33 $$ if ("__doc__".equals(referencedName)) -->Line_34 $$ addDocReference(ret, qualifier, qualifierType)[ CD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_12 $$ if (PyUtil.isClassPrivateName(referencedName) && qualifierType instanceof PyClassType) [ FD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_31 $$ addImplicitResolveResults(referencedName, ret)[ FD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_5 $$ if (referencedName == null)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_30 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) [ CD ]
Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)-->Line_20 $$ if (membersOfQualifier == null) [ FD ]
Line_16 $$ if (qualifierType != null) -->Line_20 $$ if (membersOfQualifier == null) [ CD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_33 $$ if ("__doc__".equals(referencedName)) [ CD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_5 $$ if (referencedName == null)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_16 $$ if (qualifierType != null) [ CD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_25 $$ if (qualifier instanceof PyQualifiedExpression && ret.isEmpty()) [ CD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_8 $$ if (qualifier == null) [ CD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)[ CD ]
Line_12 $$ if (PyUtil.isClassPrivateName(referencedName) && qualifierType instanceof PyClassType) -->Line_13 $$ if (isOtherClassQualifying(qualifier, (PyClassType) qualifierType))[ CD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_25 $$ if (qualifier instanceof PyQualifiedExpression && ret.isEmpty()) [ FD ]
Line_5 $$ if (referencedName == null)-->Line_6 $$ return ret[ CD ]
Line_19 $$ final List<? extends RatedResolveResult> membersOfQualifier = qualifierType.resolveMember(referencedName, qualifier, ctx, myContext)-->Line_23 $$ ret.addAll(membersOfQualifier)[ FD ]
Line_8 $$ if (qualifier == null) -->Line_9 $$ return ret[ CD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_26 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) [ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_5 $$ if (referencedName == null)[ CD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_4 $$ final String referencedName = myElement.getReferencedName()[ CD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_8 $$ if (qualifier == null) [ FD ]
Line_11 $$ PyType qualifierType = myContext.getTypeEvalContext().getType(qualifier)-->Line_16 $$ if (qualifierType != null) [ FD ]
Line_3 $$ ResolveResultList ret = new ResolveResultList()-->Line_31 $$ addImplicitResolveResults(referencedName, ret)[ FD ]
Line_2 $$ protected List<RatedResolveResult> resolveInner() -->Line_36 $$ return ret[ CD ]
Line_7 $$ final PyExpression qualifier = myElement.getQualifier()-->Line_30 $$ if ((PyTypeChecker.isUnknown(qualifierType) || (qualifierType instanceof PyStructuralType && ((PyStructuralType) qualifierType).isInferredFromUsages())) && myContext.allowImplicits() && canQualifyAnImplicitName(qualifier)) [ FD ]
Line_25 $$ if (qualifier instanceof PyQualifiedExpression && ret.isEmpty()) -->Line_26 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) [ CD ]
Line_16 $$ if (qualifierType != null) -->Line_18 $$ AccessDirection ctx = AccessDirection.of(myElement)[ CD ]
Line_26 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) -->Line_27 $$ return ret[ CD ]
Line_4 $$ final String referencedName = myElement.getReferencedName()-->Line_26 $$ if (addAssignedAttributes(ret, referencedName, (PyQualifiedExpression) qualifier)) [ FD ]
