Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_18 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_27 $$ assertEquals("Incorrect number of containers allocated", 0, app.getLiveContainers().size())[ FD ]
Line_12 $$ NodeUpdateSchedulerEvent updateEvent = new NodeUpdateSchedulerEvent(node)-->Line_33 $$ scheduler.handle(updateEvent)[ FD ]
Line_8 $$ final int GB = 1024-->Line_31 $$ createSchedulingRequest(GB, "root.default", "user", 1)[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_30 $$ assertFalse(app.isBlacklisted(host))[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_18 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)[ FD ]
Line_8 $$ final int GB = 1024-->Line_14 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_24 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_11 $$ NodeAddedSchedulerEvent nodeEvent = new NodeAddedSchedulerEvent(node)-->Line_13 $$ scheduler.handle(nodeEvent)[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_19 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_19 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_30 $$ assertFalse(app.isBlacklisted(host))[ FD ]
Line_10 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * GB, 16), 0, host)-->Line_21 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_10 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * GB, 16), 0, host)[ FD ]
Line_14 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_20 $$ assertFalse(scheduler.getSchedulerApp(appAttemptId).isBlacklisted(host))[ FD ]
Line_9 $$ String host = "127.0.0.1"-->Line_20 $$ assertFalse(scheduler.getSchedulerApp(appAttemptId).isBlacklisted(host))[ FD ]
Line_8 $$ final int GB = 1024-->Line_21 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))[ FD ]
Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_34 $$ assertEquals("Incorrect number of containers allocated", 1, app.getLiveContainers().size())[ FD ]
Line_12 $$ NodeUpdateSchedulerEvent updateEvent = new NodeUpdateSchedulerEvent(node)-->Line_26 $$ scheduler.handle(updateEvent)[ FD ]
Line_15 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_24 $$ assertTrue(app.isBlacklisted(host))[ FD ]
