Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_15 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_17 $$ assertFalse(scheduler.getSchedulerApp(appAttemptId).isBlacklisted(host))[ FD ]
Line_18 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))-->Line_24 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_18 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_3 $$ scheduler.init(conf)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_17 $$ assertFalse(scheduler.getSchedulerApp(appAttemptId).isBlacklisted(host))[ CD ]
Line_7 $$ String host = "127.0.0.1"-->Line_17 $$ assertFalse(scheduler.getSchedulerApp(appAttemptId).isBlacklisted(host))[ FD ]
Line_7 $$ String host = "127.0.0.1"-->Line_16 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_23 $$ assertEquals("Incorrect number of containers allocated", 0, app.getLiveContainers().size())[ FD ]
Line_6 $$ final int GB = 1024-->Line_26 $$ createSchedulingRequest(GB, "root.default", "user", 1)[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_14 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_16 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_10 $$ NodeUpdateSchedulerEvent updateEvent = new NodeUpdateSchedulerEvent(node)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_6 $$ final int GB = 1024[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_9 $$ NodeAddedSchedulerEvent nodeEvent = new NodeAddedSchedulerEvent(node)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_25 $$ assertFalse(app.isBlacklisted(host))[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_23 $$ assertEquals("Incorrect number of containers allocated", 0, app.getLiveContainers().size())[ CD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_24 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_9 $$ NodeAddedSchedulerEvent nodeEvent = new NodeAddedSchedulerEvent(node)-->Line_11 $$ scheduler.handle(nodeEvent)[ FD ]
Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_25 $$ assertFalse(app.isBlacklisted(host))[ FD ]
Line_7 $$ String host = "127.0.0.1"-->Line_15 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_6 $$ final int GB = 1024-->Line_18 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))[ FD ]
Line_8 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * GB, 16), 0, host)-->Line_18 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)[ FD ]
Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)-->Line_19 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_7 $$ String host = "127.0.0.1"-->Line_19 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_7 $$ String host = "127.0.0.1"-->Line_20 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_11 $$ scheduler.handle(nodeEvent)[ CD ]
Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_20 $$ assertTrue(app.isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_20 $$ assertTrue(app.isBlacklisted(host))[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_14 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ CD ]
Line_7 $$ String host = "127.0.0.1"-->Line_24 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_5 $$ scheduler.reinitialize(conf, resourceManager.getRMContext())[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_4 $$ scheduler.start()[ CD ]
Line_7 $$ String host = "127.0.0.1"-->Line_8 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * GB, 16), 0, host)[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_26 $$ createSchedulingRequest(GB, "root.default", "user", 1)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_8 $$ RMNode node = MockNodes.newNodeInfo(1, Resources.createResource(16 * GB, 16), 0, host)[ CD ]
Line_13 $$ FSAppAttempt app = scheduler.getSchedulerApp(appAttemptId)-->Line_29 $$ assertEquals("Incorrect number of containers allocated", 1, app.getLiveContainers().size())[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_22 $$ scheduler.handle(updateEvent)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_29 $$ assertEquals("Incorrect number of containers allocated", 1, app.getLiveContainers().size())[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_21 $$ scheduler.update()[ CD ]
Line_18 $$ List<ResourceRequest> update = Arrays.asList(createResourceRequest(GB, node.getHostName(), 1, 0, true))-->Line_19 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_7 $$ String host = "127.0.0.1"-->Line_14 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_16 $$ scheduler.allocate(appAttemptId, Collections.<ResourceRequest>emptyList(), Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ CD ]
Line_10 $$ NodeUpdateSchedulerEvent updateEvent = new NodeUpdateSchedulerEvent(node)-->Line_28 $$ scheduler.handle(updateEvent)[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_28 $$ scheduler.handle(updateEvent)[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_15 $$ assertTrue(app.isBlacklisted(host))[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_19 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), Collections.singletonList(host), null)[ CD ]
Line_7 $$ String host = "127.0.0.1"-->Line_25 $$ assertFalse(app.isBlacklisted(host))[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_24 $$ scheduler.allocate(appAttemptId, update, Collections.<ContainerId>emptyList(), null, Collections.singletonList(host))[ CD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_7 $$ String host = "127.0.0.1"[ CD ]
Line_6 $$ final int GB = 1024-->Line_12 $$ ApplicationAttemptId appAttemptId = createSchedulingRequest(GB, "root.default", "user", 1)[ FD ]
Line_10 $$ NodeUpdateSchedulerEvent updateEvent = new NodeUpdateSchedulerEvent(node)-->Line_22 $$ scheduler.handle(updateEvent)[ FD ]
Line_2 $$ public void testBlacklistNodes() throws Exception -->Line_27 $$ scheduler.update()[ CD ]
