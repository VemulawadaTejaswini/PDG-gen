Line_17 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_19 $$ candidates.addAll(findPossibleSourcesForClass(rd, className))[ FD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_3 $$ final List<JavaSourceRootDescriptor> targetRoots = context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(target, context)[ CD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_4 $$ if (targetRoots.isEmpty()) [ CD ]
Line_11 $$ for (JavaSourceRootDescriptor rd : targetRoots) -->Line_19 $$ candidates.addAll(findPossibleSourcesForClass(rd, className))[ FD ]
Line_4 $$ if (targetRoots.isEmpty()) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_7 $$ final String className = FormsParsing.readBoundClassName(form)[ FD ]
Line_11 $$ for (JavaSourceRootDescriptor rd : targetRoots) -->Line_12 $$ final File boundSource = findSourceForClass(rd, className)[ FD ]
Line_3 $$ final List<JavaSourceRootDescriptor> targetRoots = context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(target, context)-->Line_4 $$ if (targetRoots.isEmpty()) [ FD ]
Line_7 $$ final String className = FormsParsing.readBoundClassName(form)-->Line_19 $$ candidates.addAll(findPossibleSourcesForClass(rd, className))[ FD ]
Line_8 $$ if (className == null) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_12 $$ final File boundSource = findSourceForClass(rd, className)-->Line_14 $$ return Collections.singleton(boundSource)[ FD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_3 $$ final List<JavaSourceRootDescriptor> targetRoots = context.getProjectDescriptor().getBuildRootIndex().getTargetRoots(target, context)[ FD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_8 $$ if (className == null) [ CD ]
Line_7 $$ final String className = FormsParsing.readBoundClassName(form)-->Line_8 $$ if (className == null) [ FD ]
Line_12 $$ final File boundSource = findSourceForClass(rd, className)-->Line_13 $$ if (boundSource != null) [ FD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_17 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_7 $$ final String className = FormsParsing.readBoundClassName(form)[ CD ]
Line_2 $$ private static Collection<File> findBoundSourceCandidates(CompileContext context, final ModuleBuildTarget target, File form) throws IOException -->Line_21 $$ return candidates[ CD ]
Line_7 $$ final String className = FormsParsing.readBoundClassName(form)-->Line_12 $$ final File boundSource = findSourceForClass(rd, className)[ FD ]
Line_13 $$ if (boundSource != null) -->Line_14 $$ return Collections.singleton(boundSource)[ CD ]
