Line_2 $$ private void testSerializeSubset(ColumnsCheck input) throws IOException -->Line_3 $$ testSerializeSubset(input.columns, input.columns, input.definitions)[ CD ]
Line_6 $$ for (List<ColumnDefinition> defs : removeGroups) -->Line_7 $$ Collections.sort(defs)[ FD ]
Line_2 $$ private void testSerializeSubset(ColumnsCheck input) throws IOException -->Line_4 $$ testSerializeSubset(input.columns, Columns.NONE, Collections.emptyList())[ CD ]
Line_2 $$ private void testSerializeSubset(ColumnsCheck input) throws IOException -->Line_5 $$ List<List<ColumnDefinition>> removeGroups = shuffleAndGroup(Lists.newArrayList(input.definitions))[ CD ]
Line_6 $$ for (List<ColumnDefinition> defs : removeGroups) -->Line_8 $$ ColumnsCheck subset = input.remove(defs)[ FD ]
Line_2 $$ private void testSerializeSubset(ColumnsCheck input) throws IOException -->Line_8 $$ ColumnsCheck subset = input.remove(defs)[ FD ]
