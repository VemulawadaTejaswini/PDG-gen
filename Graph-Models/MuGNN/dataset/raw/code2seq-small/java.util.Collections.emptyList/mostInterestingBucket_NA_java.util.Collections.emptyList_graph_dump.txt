Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_3 $$ final List<Pair<List<SSTableReader>, Double>> prunedBucketsAndHotness = new ArrayList(buckets.size())[ FD ]
Line_3 $$ final List<Pair<List<SSTableReader>, Double>> prunedBucketsAndHotness = new ArrayList(buckets.size())-->Line_7 $$ prunedBucketsAndHotness.add(bucketAndHotness)[ FD ]
Line_5 $$ Pair<List<SSTableReader>, Double> bucketAndHotness = trimToThresholdWithHotness(bucket, maxThreshold)-->Line_7 $$ prunedBucketsAndHotness.add(bucketAndHotness)[ FD ]
Line_9 $$ if (prunedBucketsAndHotness.isEmpty())-->Line_10 $$ return Collections.emptyList()[ CD ]
Line_4 $$ for (List<SSTableReader> bucket : buckets) -->Line_5 $$ Pair<List<SSTableReader>, Double> bucketAndHotness = trimToThresholdWithHotness(bucket, maxThreshold)[ FD ]
Line_3 $$ final List<Pair<List<SSTableReader>, Double>> prunedBucketsAndHotness = new ArrayList(buckets.size())-->Line_9 $$ if (prunedBucketsAndHotness.isEmpty())[ FD ]
Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_9 $$ if (prunedBucketsAndHotness.isEmpty())[ CD ]
Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_11 $$ Pair<List<SSTableReader>, Double> hottest = Collections.max(prunedBucketsAndHotness, bucketsByHotnessComparator)[ CD ]
Line_3 $$ final List<Pair<List<SSTableReader>, Double>> prunedBucketsAndHotness = new ArrayList(buckets.size())-->Line_11 $$ Pair<List<SSTableReader>, Double> hottest = Collections.max(prunedBucketsAndHotness, bucketsByHotnessComparator)[ FD ]
Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_5 $$ Pair<List<SSTableReader>, Double> bucketAndHotness = trimToThresholdWithHotness(bucket, maxThreshold)[ FD ]
Line_6 $$ if (bucketAndHotness != null && bucketAndHotness.left.size() >= minThreshold)-->Line_7 $$ prunedBucketsAndHotness.add(bucketAndHotness)[ CD ]
Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_3 $$ final List<Pair<List<SSTableReader>, Double>> prunedBucketsAndHotness = new ArrayList(buckets.size())[ CD ]
Line_2 $$ public static List<SSTableReader> mostInterestingBucket(List<List<SSTableReader>> buckets, int minThreshold, int maxThreshold) -->Line_12 $$ return hottest.left[ CD ]
