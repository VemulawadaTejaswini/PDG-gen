Line_5 $$ if (entries.size() == 1) -->Line_6 $$ OrderEntry entry = entries.get(0)[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_17 $$ int lastIndex = index + 1[ CD ]
Line_17 $$ int lastIndex = index + 1-->Line_19 $$ lastIndex++[ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_18 $$ while (lastIndex < entries.size() && entries.get(lastIndex).getOwnerModule() == ownerModule) [ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_13 $$ int firstIndex = index[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_21 $$ return ContainerUtil.newArrayList(entries.subList(firstIndex, lastIndex))[ CD ]
Line_10 $$ if (index < 0) -->Line_11 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_9 $$ int index = Collections.binarySearch(entries, new FakeOrderEntry(ownerModule), RootIndex.BY_OWNER_MODULE)[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_10 $$ if (index < 0) [ CD ]
Line_5 $$ if (entries.size() == 1) -->Line_7 $$ return entry.getOwnerModule() == ownerModule ? ContainerUtil.newArrayList(entries) : Collections.<OrderEntry>emptyList()[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_5 $$ if (entries.size() == 1) [ CD ]
Line_13 $$ int firstIndex = index-->Line_21 $$ return ContainerUtil.newArrayList(entries.subList(firstIndex, lastIndex))[ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_18 $$ while (lastIndex < entries.size() && entries.get(lastIndex).getOwnerModule() == ownerModule) [ CD ]
Line_17 $$ int lastIndex = index + 1-->Line_18 $$ while (lastIndex < entries.size() && entries.get(lastIndex).getOwnerModule() == ownerModule) [ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_21 $$ return ContainerUtil.newArrayList(entries.subList(firstIndex, lastIndex))[ FD ]
Line_13 $$ int firstIndex = index-->Line_15 $$ firstIndex--[ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_6 $$ OrderEntry entry = entries.get(0)[ FD ]
Line_6 $$ OrderEntry entry = entries.get(0)-->Line_7 $$ return entry.getOwnerModule() == ownerModule ? ContainerUtil.newArrayList(entries) : Collections.<OrderEntry>emptyList()[ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_5 $$ if (entries.size() == 1) [ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_14 $$ while (firstIndex - 1 >= 0 && entries.get(firstIndex - 1).getOwnerModule() == ownerModule) [ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_7 $$ return entry.getOwnerModule() == ownerModule ? ContainerUtil.newArrayList(entries) : Collections.<OrderEntry>emptyList()[ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_3 $$ if (entries.size() == 0)[ FD ]
Line_14 $$ while (firstIndex - 1 >= 0 && entries.get(firstIndex - 1).getOwnerModule() == ownerModule) -->Line_15 $$ firstIndex--[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_9 $$ int index = Collections.binarySearch(entries, new FakeOrderEntry(ownerModule), RootIndex.BY_OWNER_MODULE)[ FD ]
Line_18 $$ while (lastIndex < entries.size() && entries.get(lastIndex).getOwnerModule() == ownerModule) -->Line_19 $$ lastIndex++[ CD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_3 $$ if (entries.size() == 0)[ CD ]
Line_17 $$ int lastIndex = index + 1-->Line_21 $$ return ContainerUtil.newArrayList(entries.subList(firstIndex, lastIndex))[ FD ]
Line_9 $$ int index = Collections.binarySearch(entries, new FakeOrderEntry(ownerModule), RootIndex.BY_OWNER_MODULE)-->Line_10 $$ if (index < 0) [ FD ]
Line_2 $$ private static List<OrderEntry> findAllOrderEntriesWithOwnerModule(@NotNull Module ownerModule, @NotNull List<OrderEntry> entries) -->Line_14 $$ while (firstIndex - 1 >= 0 && entries.get(firstIndex - 1).getOwnerModule() == ownerModule) [ FD ]
Line_3 $$ if (entries.size() == 0)-->Line_4 $$ return Collections.emptyList()[ CD ]
