Line_34 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_39 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ FD ]
Line_10 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_96 $$ result.add(unusedImport)[ FD ]
Line_61 $$ PsiElement importedElement-->Line_78 $$ importedElement = element.getContainingFile()[ FD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_47 $$ if (PsiTreeUtil.getParentOfType(importStatement, PyTryExceptStatement.class) != null) [ FD ]
Line_30 $$ QualifiedName packageQName = null-->Line_39 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ FD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_15 $$ if (importShouldBeSkippedByExtPoint(unusedImport)) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_19 $$ unusedImports.removeAll(unusedImportToSkip)[ CD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_82 $$ if (importedElement == null) [ CD ]
Line_33 $$ if (packageQName == null) -->Line_34 $$ final PsiFile file = unusedImport.getContainingFile()[ CD ]
Line_50 $$ if (PsiTreeUtil.getParentOfType(unusedImport, PyIfStatement.class) != null) -->Line_51 $$ boolean isUsed = false[ CD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_62 $$ if (unusedImport instanceof PyImportElement) [ FD ]
Line_33 $$ if (packageQName == null) -->Line_35 $$ if (file instanceof PyFile) [ CD ]
Line_3 $$ if (myAllImports.isEmpty()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_50 $$ if (PsiTreeUtil.getParentOfType(unusedImport, PyIfStatement.class) != null) [ FD ]
Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_96 $$ result.add(unusedImport)[ CD ]
Line_66 $$ if (importElement.getImportedQName() != null) -->Line_67 $$ if (areAllImportsUnused(importStatement, unusedImports)) [ CD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_44 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ FD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_64 $$ final PsiElement element = importElement.resolve()[ CD ]
Line_67 $$ if (areAllImportsUnused(importStatement, unusedImports)) -->Line_68 $$ result.add(importStatement)[ CD ]
Line_63 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_64 $$ final PsiElement element = importElement.resolve()[ FD ]
Line_20 $$ Set<String> usedImportNames = new HashSet<String>()-->Line_24 $$ usedImportNames.add(e.getName())[ FD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_61 $$ PsiElement importedElement[ CD ]
Line_36 $$ dunderAll = ((PyFile) file).getDunderAll()-->Line_75 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_16 $$ unusedImportToSkip.add(unusedImport)[ FD ]
Line_78 $$ importedElement = element.getContainingFile()-->Line_81 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ FD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_81 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_30 $$ QualifiedName packageQName = null[ CD ]
Line_31 $$ List<String> dunderAll = null-->Line_75 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_64 $$ final PsiElement element = importElement.resolve()-->Line_78 $$ importedElement = element.getContainingFile()[ FD ]
Line_28 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()-->Line_93 $$ unusedStatements.add(importStatement)[ FD ]
Line_30 $$ QualifiedName packageQName = null-->Line_33 $$ if (packageQName == null) [ FD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_3 $$ if (myAllImports.isEmpty()) [ CD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_34 $$ final PsiFile file = unusedImport.getContainingFile()[ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_12 $$ unusedImports.removeAll(myUsedImports)[ CD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ FD ]
Line_6 $$ final NameDefiner first = myAllImports.iterator().next()-->Line_7 $$ if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) [ FD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)[ FD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_62 $$ if (unusedImport instanceof PyImportElement) [ CD ]
Line_10 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_70 $$ result.add(importElement)[ FD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_67 $$ if (areAllImportsUnused(importStatement, unusedImports)) [ FD ]
Line_20 $$ Set<String> usedImportNames = new HashSet<String>()-->Line_53 $$ if (usedImportNames.contains(e.getName())) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_31 $$ List<String> dunderAll = null[ CD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_47 $$ if (PsiTreeUtil.getParentOfType(importStatement, PyTryExceptStatement.class) != null) [ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_29 $$ final PyUnresolvedReferencesInspection suppressableInspection = new PyUnresolvedReferencesInspection()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_20 $$ Set<String> usedImportNames = new HashSet<String>()[ CD ]
Line_15 $$ if (importShouldBeSkippedByExtPoint(unusedImport)) -->Line_16 $$ unusedImportToSkip.add(unusedImport)[ CD ]
Line_53 $$ if (usedImportNames.contains(e.getName())) -->Line_54 $$ isUsed = true[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_6 $$ final NameDefiner first = myAllImports.iterator().next()[ CD ]
Line_13 $$ final Set<PyImportedNameDefiner> unusedImportToSkip = new HashSet<PyImportedNameDefiner>()-->Line_16 $$ unusedImportToSkip.add(unusedImport)[ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_28 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()[ CD ]
Line_28 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()-->Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) [ FD ]
Line_23 $$ for (PyElement e : ((NameDefiner) usedImport).iterateNames()) -->Line_24 $$ usedImportNames.add(e.getName())[ FD ]
Line_78 $$ importedElement = element.getContainingFile()-->Line_82 $$ if (importedElement == null) [ FD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_93 $$ unusedStatements.add(importStatement)[ FD ]
Line_11 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_12 $$ unusedImports.removeAll(myUsedImports)[ FD ]
Line_13 $$ final Set<PyImportedNameDefiner> unusedImportToSkip = new HashSet<PyImportedNameDefiner>()-->Line_19 $$ unusedImports.removeAll(unusedImportToSkip)[ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_100 $$ return result[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_10 $$ List<PsiElement> result = new ArrayList<PsiElement>()[ CD ]
Line_11 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_19 $$ unusedImports.removeAll(unusedImportToSkip)[ FD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ CD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_78 $$ importedElement = element.getContainingFile()[ CD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_63 $$ final PyImportElement importElement = (PyImportElement) unusedImport[ CD ]
Line_61 $$ PsiElement importedElement-->Line_82 $$ if (importedElement == null) [ FD ]
Line_86 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) -->Line_87 $$ final QualifiedName importedQName = QualifiedNameFinder.findShortestImportableQName((PsiFileSystemItem) importedElement)[ CD ]
Line_51 $$ boolean isUsed = false-->Line_54 $$ isUsed = true[ FD ]
Line_39 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)-->Line_88 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_61 $$ PsiElement importedElement-->Line_81 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ FD ]
Line_38 $$ if (file != null && PyUtil.isPackage(file)) -->Line_39 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ CD ]
Line_10 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_68 $$ result.add(importStatement)[ FD ]
Line_30 $$ QualifiedName packageQName = null-->Line_88 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_13 $$ final Set<PyImportedNameDefiner> unusedImportToSkip = new HashSet<PyImportedNameDefiner>()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_11 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)[ CD ]
Line_50 $$ if (PsiTreeUtil.getParentOfType(unusedImport, PyIfStatement.class) != null) -->Line_57 $$ if (isUsed) [ CD ]
Line_31 $$ List<String> dunderAll = null-->Line_36 $$ dunderAll = ((PyFile) file).getDunderAll()[ FD ]
Line_63 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_70 $$ result.add(importElement)[ FD ]
Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_94 $$ result.add(importStatement)[ CD ]
Line_7 $$ if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_29 $$ final PyUnresolvedReferencesInspection suppressableInspection = new PyUnresolvedReferencesInspection()-->Line_44 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ FD ]
Line_11 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_67 $$ if (areAllImportsUnused(importStatement, unusedImports)) [ FD ]
Line_33 $$ if (packageQName == null) -->Line_38 $$ if (file != null && PyUtil.isPackage(file)) [ CD ]
Line_10 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_94 $$ result.add(importStatement)[ FD ]
Line_21 $$ for (PsiElement usedImport : myUsedImports) -->Line_22 $$ if (usedImport instanceof NameDefiner) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_7 $$ if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) [ CD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_52 $$ for (PyElement e : unusedImport.iterateNames()) [ FD ]
Line_87 $$ final QualifiedName importedQName = QualifiedNameFinder.findShortestImportableQName((PsiFileSystemItem) importedElement)-->Line_88 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_64 $$ final PsiElement element = importElement.resolve()-->Line_65 $$ if (element == null) [ FD ]
Line_81 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()-->Line_82 $$ if (importedElement == null) [ FD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_94 $$ result.add(importStatement)[ FD ]
Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_93 $$ unusedStatements.add(importStatement)[ CD ]
Line_86 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) -->Line_88 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ CD ]
Line_63 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_66 $$ if (importElement.getImportedQName() != null) [ FD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_75 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ CD ]
Line_42 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_68 $$ result.add(importStatement)[ FD ]
Line_23 $$ for (PyElement e : ((NameDefiner) usedImport).iterateNames()) -->Line_53 $$ if (usedImportNames.contains(e.getName())) [ FD ]
Line_65 $$ if (element == null) -->Line_66 $$ if (importElement.getImportedQName() != null) [ CD ]
Line_62 $$ if (unusedImport instanceof PyImportElement) -->Line_65 $$ if (element == null) [ CD ]
Line_34 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_38 $$ if (file != null && PyUtil.isPackage(file)) [ FD ]
Line_35 $$ if (file instanceof PyFile) -->Line_36 $$ dunderAll = ((PyFile) file).getDunderAll()[ CD ]
Line_34 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_35 $$ if (file instanceof PyFile) [ FD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_44 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ CD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_86 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) [ CD ]
Line_67 $$ if (areAllImportsUnused(importStatement, unusedImports)) -->Line_70 $$ result.add(importElement)[ CD ]
Line_43 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_50 $$ if (PsiTreeUtil.getParentOfType(unusedImport, PyIfStatement.class) != null) [ CD ]
Line_14 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_96 $$ result.add(unusedImport)[ FD ]
Line_63 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_75 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_11 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_92 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ FD ]
