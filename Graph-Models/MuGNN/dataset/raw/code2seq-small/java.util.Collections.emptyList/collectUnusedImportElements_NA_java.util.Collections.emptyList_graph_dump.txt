Line_23 $$ Set<String> usedImportNames = new HashSet<String>()-->Line_59 $$ if (usedImportNames.contains(e.getName())) [ FD ]
Line_67 $$ PsiElement importedElement-->Line_89 $$ if (importedElement == null) [ FD ]
Line_67 $$ PsiElement importedElement-->Line_88 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ FD ]
Line_70 $$ final PsiElement element = importElement.resolve()-->Line_71 $$ if (element == null) [ FD ]
Line_34 $$ List<String> dunderAll = null-->Line_82 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_101 $$ result.add(importStatement)[ FD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_38 $$ final PsiFile file = unusedImport.getContainingFile()[ FD ]
Line_71 $$ if (element == null) -->Line_72 $$ if (importElement.getImportedQName() != null) [ CD ]
Line_11 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_101 $$ result.add(importStatement)[ FD ]
Line_8 $$ if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_23 $$ Set<String> usedImportNames = new HashSet<String>()-->Line_27 $$ usedImportNames.add(e.getName())[ FD ]
Line_33 $$ QualifiedName packageQName = null-->Line_43 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ FD ]
Line_11 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_75 $$ result.add(importStatement)[ FD ]
Line_31 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()-->Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) [ FD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_89 $$ if (importedElement == null) [ CD ]
Line_43 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)-->Line_95 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_58 $$ for (PyElement e : unusedImport.iterateNames()) [ FD ]
Line_69 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_70 $$ final PsiElement element = importElement.resolve()[ FD ]
Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_100 $$ unusedStatements.add(importStatement)[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_32 $$ final PyUnresolvedReferencesInspection suppressableInspection = new PyUnresolvedReferencesInspection()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_33 $$ QualifiedName packageQName = null[ CD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_69 $$ final PyImportElement importElement = (PyImportElement) unusedImport[ CD ]
Line_37 $$ if (packageQName == null) -->Line_38 $$ final PsiFile file = unusedImport.getContainingFile()[ CD ]
Line_38 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_39 $$ if (file instanceof PyFile) [ FD ]
Line_70 $$ final PsiElement element = importElement.resolve()-->Line_85 $$ importedElement = element.getContainingFile()[ FD ]
Line_88 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()-->Line_89 $$ if (importedElement == null) [ FD ]
Line_26 $$ for (PyElement e : ((NameDefiner) usedImport).iterateNames()) -->Line_27 $$ usedImportNames.add(e.getName())[ FD ]
Line_38 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_42 $$ if (file != null && PyUtil.isPackage(file)) [ FD ]
Line_12 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ FD ]
Line_11 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_103 $$ result.add(unusedImport)[ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_22 $$ unusedImports.removeAll(unusedImportToSkip)[ CD ]
Line_3 $$ if (myAllImports.isEmpty()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_85 $$ importedElement = element.getContainingFile()[ CD ]
Line_69 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_72 $$ if (importElement.getImportedQName() != null) [ FD ]
Line_24 $$ for (PsiElement usedImport : myUsedImports) -->Line_25 $$ if (usedImport instanceof NameDefiner) [ FD ]
Line_69 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_82 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_8 $$ if (first.getContainingFile() instanceof PyExpressionCodeFragment || PydevConsoleRunner.isInPydevConsole(first)) [ CD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_17 $$ if (importShouldBeSkippedByExtPoint(unusedImport)) [ FD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)[ FD ]
Line_42 $$ if (file != null && PyUtil.isPackage(file)) -->Line_43 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ CD ]
Line_33 $$ QualifiedName packageQName = null-->Line_37 $$ if (packageQName == null) [ FD ]
Line_32 $$ final PyUnresolvedReferencesInspection suppressableInspection = new PyUnresolvedReferencesInspection()-->Line_48 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ FD ]
Line_38 $$ final PsiFile file = unusedImport.getContainingFile()-->Line_43 $$ packageQName = QualifiedNameFinder.findShortestImportableQName(file)[ FD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_75 $$ result.add(importStatement)[ FD ]
Line_26 $$ for (PyElement e : ((NameDefiner) usedImport).iterateNames()) -->Line_59 $$ if (usedImportNames.contains(e.getName())) [ FD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_100 $$ unusedStatements.add(importStatement)[ FD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_82 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ CD ]
Line_31 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()-->Line_100 $$ unusedStatements.add(importStatement)[ FD ]
Line_11 $$ List<PsiElement> result = new ArrayList<PsiElement>()-->Line_77 $$ result.add(importElement)[ FD ]
Line_67 $$ PsiElement importedElement-->Line_85 $$ importedElement = element.getContainingFile()[ FD ]
Line_59 $$ if (usedImportNames.contains(e.getName())) -->Line_60 $$ isUsed = true[ CD ]
Line_12 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_13 $$ unusedImports.removeAll(myUsedImports)[ FD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_68 $$ if (unusedImport instanceof PyImportElement) [ FD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_71 $$ if (element == null) [ CD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_48 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ FD ]
Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_67 $$ PsiElement importedElement[ CD ]
Line_37 $$ if (packageQName == null) -->Line_42 $$ if (file != null && PyUtil.isPackage(file)) [ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_12 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_34 $$ List<String> dunderAll = null[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_31 $$ Set<PyImportStatementBase> unusedStatements = new HashSet<PyImportStatementBase>()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_11 $$ List<PsiElement> result = new ArrayList<PsiElement>()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_3 $$ if (myAllImports.isEmpty()) [ CD ]
Line_37 $$ if (packageQName == null) -->Line_39 $$ if (file instanceof PyFile) [ CD ]
Line_57 $$ boolean isUsed = false-->Line_60 $$ isUsed = true[ FD ]
Line_93 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) -->Line_94 $$ final QualifiedName importedQName = QualifiedNameFinder.findShortestImportableQName((PsiFileSystemItem) importedElement)[ CD ]
Line_12 $$ Set<PyImportedNameDefiner> unusedImports = new HashSet<PyImportedNameDefiner>(myAllImports)-->Line_22 $$ unusedImports.removeAll(unusedImportToSkip)[ FD ]
Line_16 $$ for (final PyImportedNameDefiner unusedImport : unusedImports) -->Line_103 $$ result.add(unusedImport)[ FD ]
Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ CD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_70 $$ final PsiElement element = importElement.resolve()[ CD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) [ FD ]
Line_46 $$ PyImportStatementBase importStatement = PsiTreeUtil.getParentOfType(unusedImport, PyImportStatementBase.class)-->Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) [ FD ]
Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_101 $$ result.add(importStatement)[ CD ]
Line_93 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) -->Line_95 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ CD ]
Line_85 $$ importedElement = element.getContainingFile()-->Line_89 $$ if (importedElement == null) [ FD ]
Line_40 $$ dunderAll = ((PyFile) file).getDunderAll()-->Line_82 $$ if (dunderAll != null && dunderAll.contains(importElement.getVisibleName())) [ FD ]
Line_34 $$ List<String> dunderAll = null-->Line_40 $$ dunderAll = ((PyFile) file).getDunderAll()[ FD ]
Line_94 $$ final QualifiedName importedQName = QualifiedNameFinder.findShortestImportableQName((PsiFileSystemItem) importedElement)-->Line_95 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_99 $$ if (unusedImport instanceof PyStarImportElement || areAllImportsUnused(importStatement, unusedImports)) -->Line_103 $$ result.add(unusedImport)[ CD ]
Line_68 $$ if (unusedImport instanceof PyImportElement) -->Line_88 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ CD ]
Line_33 $$ QualifiedName packageQName = null-->Line_95 $$ if (importedQName != null && importedQName.matchesPrefix(packageQName)) [ FD ]
Line_39 $$ if (file instanceof PyFile) -->Line_40 $$ dunderAll = ((PyFile) file).getDunderAll()[ CD ]
Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_48 $$ if (suppressableInspection.isSuppressedFor(importStatement)) [ CD ]
Line_85 $$ importedElement = element.getContainingFile()-->Line_88 $$ importedElement = ((PyFromImportStatement) importStatement).resolveImportSource()[ FD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_107 $$ return result[ CD ]
Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_93 $$ if (packageQName != null && importedElement instanceof PsiFileSystemItem) [ CD ]
Line_69 $$ final PyImportElement importElement = (PyImportElement) unusedImport-->Line_77 $$ result.add(importElement)[ FD ]
Line_47 $$ if (importStatement != null && !unusedStatements.contains(importStatement) && !myUsedImports.contains(importStatement)) -->Line_68 $$ if (unusedImport instanceof PyImportElement) [ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_23 $$ Set<String> usedImportNames = new HashSet<String>()[ CD ]
Line_2 $$ private List<PsiElement> collectUnusedImportElements() -->Line_13 $$ unusedImports.removeAll(myUsedImports)[ CD ]
