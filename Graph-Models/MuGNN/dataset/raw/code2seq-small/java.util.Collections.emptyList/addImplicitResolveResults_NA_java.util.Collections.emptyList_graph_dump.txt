Line_8 $$ if (containingFile instanceof PyFile) -->Line_11 $$ imports = Collections.emptyList()[ CD ]
Line_3 $$ final Project project = myElement.getProject()-->Line_4 $$ final GlobalSearchScope scope = PyProjectScopeBuilder.excludeSdkTestsScope(project)[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_3 $$ final Project project = myElement.getProject()[ CD ]
Line_6 $$ final PsiFile containingFile = myElement.getContainingFile()-->Line_8 $$ if (containingFile instanceof PyFile) [ FD ]
Line_7 $$ final List<QualifiedName> imports-->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ FD ]
Line_14 $$ if (!(function instanceof PyFunction)) -->Line_15 $$ FileBasedIndex.getInstance().scheduleRebuild(StubUpdatingIndex.INDEX_ID, new Throwable("found non-function object " + function + " in function list"))[ CD ]
Line_9 $$ imports = collectImports((PyFile) containingFile)-->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_23 $$ final Collection attributes = PyInstanceAttributeIndex.find(referencedName, project, scope)[ CD ]
Line_3 $$ final Project project = myElement.getProject()-->Line_5 $$ final Collection functions = PyFunctionNameIndex.find(referencedName, project, scope)[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_8 $$ if (containingFile instanceof PyFile) [ CD ]
Line_8 $$ if (containingFile instanceof PyFile) -->Line_9 $$ imports = collectImports((PyFile) containingFile)[ CD ]
Line_18 $$ PyFunction pyFunction = (PyFunction) function-->Line_19 $$ if (pyFunction.getContainingClass() != null) [ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_6 $$ final PsiFile containingFile = myElement.getContainingFile()[ CD ]
Line_11 $$ imports = Collections.emptyList()-->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ FD ]
Line_3 $$ final Project project = myElement.getProject()-->Line_23 $$ final Collection attributes = PyInstanceAttributeIndex.find(referencedName, project, scope)[ FD ]
Line_19 $$ if (pyFunction.getContainingClass() != null) -->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ CD ]
Line_18 $$ PyFunction pyFunction = (PyFunction) function-->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_23 $$ final Collection attributes = PyInstanceAttributeIndex.find(referencedName, project, scope)[ FD ]
Line_9 $$ imports = collectImports((PyFile) containingFile)-->Line_29 $$ ret.add(new ImplicitResolveResult((PyTargetExpression) attribute, getImplicitResultRate((PyTargetExpression) attribute, imports)))[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_5 $$ final Collection functions = PyFunctionNameIndex.find(referencedName, project, scope)[ FD ]
Line_4 $$ final GlobalSearchScope scope = PyProjectScopeBuilder.excludeSdkTestsScope(project)-->Line_23 $$ final Collection attributes = PyInstanceAttributeIndex.find(referencedName, project, scope)[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_4 $$ final GlobalSearchScope scope = PyProjectScopeBuilder.excludeSdkTestsScope(project)[ CD ]
Line_7 $$ final List<QualifiedName> imports-->Line_11 $$ imports = Collections.emptyList()[ FD ]
Line_11 $$ imports = Collections.emptyList()-->Line_29 $$ ret.add(new ImplicitResolveResult((PyTargetExpression) attribute, getImplicitResultRate((PyTargetExpression) attribute, imports)))[ FD ]
Line_7 $$ final List<QualifiedName> imports-->Line_9 $$ imports = collectImports((PyFile) containingFile)[ FD ]
Line_25 $$ if (!(attribute instanceof PyTargetExpression)) -->Line_26 $$ FileBasedIndex.getInstance().scheduleRebuild(StubUpdatingIndex.INDEX_ID, new Throwable("found non-target expression object " + attribute + " in target expression list"))[ CD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_20 $$ ret.add(new ImplicitResolveResult(pyFunction, getImplicitResultRate(pyFunction, imports)))[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_5 $$ final Collection functions = PyFunctionNameIndex.find(referencedName, project, scope)[ CD ]
Line_9 $$ imports = collectImports((PyFile) containingFile)-->Line_11 $$ imports = Collections.emptyList()[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_29 $$ ret.add(new ImplicitResolveResult((PyTargetExpression) attribute, getImplicitResultRate((PyTargetExpression) attribute, imports)))[ FD ]
Line_4 $$ final GlobalSearchScope scope = PyProjectScopeBuilder.excludeSdkTestsScope(project)-->Line_5 $$ final Collection functions = PyFunctionNameIndex.find(referencedName, project, scope)[ FD ]
Line_7 $$ final List<QualifiedName> imports-->Line_29 $$ ret.add(new ImplicitResolveResult((PyTargetExpression) attribute, getImplicitResultRate((PyTargetExpression) attribute, imports)))[ FD ]
Line_2 $$ private void addImplicitResolveResults(String referencedName, ResolveResultList ret) -->Line_7 $$ final List<QualifiedName> imports[ CD ]
