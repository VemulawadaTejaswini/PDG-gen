Line_40 $$ myNotificationArea.addLinkHandler(key, new Runnable() -->Line_44 $$ final Sdk sdk = getSelectedSdk()[ CD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_24 $$ application.invokeLater(new Runnable() [ CD ]
Line_36 $$ final String key = "id" + fix.hashCode()-->Line_40 $$ myNotificationArea.addLinkHandler(key, new Runnable() [ FD ]
Line_28 $$ if (selectedSdk == getSelectedSdk()) -->Line_29 $$ myNotificationArea.hide()[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_31 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)[ FD ]
Line_3 $$ if (selectedSdk == null) -->Line_5 $$ return[ CD ]
Line_45 $$ if (sdk != null) -->Line_48 $$ updatePackages(PyPackageManagers.getInstance().getManagementService(myProject, sdk))[ CD ]
Line_7 $$ final Application application = ApplicationManager.getApplication()-->Line_8 $$ application.executeOnPooledThread(new Runnable() [ FD ]
Line_3 $$ if (selectedSdk == null) -->Line_4 $$ myNotificationArea.hide()[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_3 $$ if (selectedSdk == null) [ CD ]
Line_12 $$ PyExecutionException exception = null-->Line_19 $$ exception = e[ FD ]
Line_32 $$ if (!invalid) -->Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())[ CD ]
Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_38 $$ builder.append(link)[ FD ]
Line_44 $$ final Sdk sdk = getSelectedSdk()-->Line_48 $$ updatePackages(PyPackageManagers.getInstance().getManagementService(myProject, sdk))[ FD ]
Line_7 $$ final Application application = ApplicationManager.getApplication()-->Line_24 $$ application.invokeLater(new Runnable() [ FD ]
Line_44 $$ final Sdk sdk = getSelectedSdk()-->Line_46 $$ fix.run(sdk)[ FD ]
Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_54 $$ myNotificationArea.showWarning(builder.toString())[ FD ]
Line_24 $$ application.invokeLater(new Runnable() -->Line_28 $$ if (selectedSdk == getSelectedSdk()) [ CD ]
Line_40 $$ myNotificationArea.addLinkHandler(key, new Runnable() -->Line_45 $$ if (sdk != null) [ CD ]
Line_44 $$ final Sdk sdk = getSelectedSdk()-->Line_45 $$ if (sdk != null) [ FD ]
Line_23 $$ final PyExecutionException problem = exception-->Line_30 $$ if (problem != null) [ FD ]
Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_39 $$ builder.append(" ")[ FD ]
Line_36 $$ final String key = "id" + fix.hashCode()-->Line_47 $$ myNotificationArea.removeLinkHandler(key)[ FD ]
Line_30 $$ if (problem != null) -->Line_31 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)[ CD ]
Line_35 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_37 $$ final String link = "<a href=\"" + key + "\">" + fix.getName() + "</a>"[ FD ]
Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())-->Line_34 $$ builder.append(". ")[ FD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_8 $$ application.executeOnPooledThread(new Runnable() [ CD ]
Line_45 $$ if (sdk != null) -->Line_49 $$ updateNotifications(sdk)[ CD ]
Line_45 $$ if (sdk != null) -->Line_47 $$ myNotificationArea.removeLinkHandler(key)[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_7 $$ final Application application = ApplicationManager.getApplication()[ CD ]
Line_32 $$ if (!invalid) -->Line_34 $$ builder.append(". ")[ CD ]
Line_35 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_46 $$ fix.run(sdk)[ FD ]
Line_23 $$ final PyExecutionException problem = exception-->Line_33 $$ final StringBuilder builder = new StringBuilder(problem.getMessage())[ FD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_23 $$ final PyExecutionException problem = exception[ CD ]
Line_45 $$ if (sdk != null) -->Line_46 $$ fix.run(sdk)[ CD ]
Line_23 $$ final PyExecutionException problem = exception-->Line_35 $$ for (final PyExecutionFix fix : problem.getFixes()) [ FD ]
Line_28 $$ if (selectedSdk == getSelectedSdk()) -->Line_30 $$ if (problem != null) [ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_3 $$ if (selectedSdk == null) [ FD ]
Line_35 $$ for (final PyExecutionFix fix : problem.getFixes()) -->Line_36 $$ final String key = "id" + fix.hashCode()[ FD ]
Line_37 $$ final String link = "<a href=\"" + key + "\">" + fix.getName() + "</a>"-->Line_38 $$ builder.append(link)[ FD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_14 $$ myHasManagement = PyPackageManager.getInstance(selectedSdk).hasManagement(false)[ FD ]
Line_8 $$ application.executeOnPooledThread(new Runnable() -->Line_12 $$ PyExecutionException exception = null[ CD ]
Line_2 $$ public void updateNotifications(@Nullable final Sdk selectedSdk) -->Line_28 $$ if (selectedSdk == getSelectedSdk()) [ FD ]
Line_31 $$ final boolean invalid = PythonSdkType.isInvalid(selectedSdk)-->Line_32 $$ if (!invalid) [ FD ]
Line_30 $$ if (problem != null) -->Line_32 $$ if (!invalid) [ CD ]
Line_44 $$ final Sdk sdk = getSelectedSdk()-->Line_49 $$ updateNotifications(sdk)[ FD ]
Line_32 $$ if (!invalid) -->Line_54 $$ myNotificationArea.showWarning(builder.toString())[ CD ]
Line_30 $$ if (problem != null) -->Line_56 $$ myInstallButton.setEnabled(!invalid && installEnabled())[ CD ]
