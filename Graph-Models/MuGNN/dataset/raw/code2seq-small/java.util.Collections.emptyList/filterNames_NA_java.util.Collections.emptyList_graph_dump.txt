Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_4 $$ if (pattern == null)[ FD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_7 $$ processNamesByPattern(base, names, pattern, ProgressIndicatorProvider.getGlobalProgressIndicator(), new Consumer<MatchResult>() [ CD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_3 $$ pattern = convertToMatchingPattern(base, pattern)[ FD ]
Line_6 $$ final List<String> filtered = new ArrayList<String>()-->Line_10 $$ filtered.add(result.elementName)[ FD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_6 $$ final List<String> filtered = new ArrayList<String>()[ CD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_4 $$ if (pattern == null)[ CD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_3 $$ pattern = convertToMatchingPattern(base, pattern)[ CD ]
Line_2 $$ public List<String> filterNames(@NotNull ChooseByNameBase base, @NotNull String[] names, @NotNull String pattern) -->Line_7 $$ processNamesByPattern(base, names, pattern, ProgressIndicatorProvider.getGlobalProgressIndicator(), new Consumer<MatchResult>() [ FD ]
Line_4 $$ if (pattern == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
