Line_2 $$ public List<TypeConstraint> calculateTypeConstraints(@NotNull GrExpression expression) -->Line_11 $$ return addExpectedConstructorParameters(list, list.getInitializers(), expression)[ FD ]
Line_6 $$ if (!list.isMap()) -->Line_7 $$ final PsiType listType = list.getType()[ CD ]
Line_5 $$ final GrListOrMap list = (GrListOrMap) parent-->Line_6 $$ if (!list.isMap()) [ FD ]
Line_5 $$ final GrListOrMap list = (GrListOrMap) parent-->Line_7 $$ final PsiType listType = list.getType()[ FD ]
Line_2 $$ public List<TypeConstraint> calculateTypeConstraints(@NotNull GrExpression expression) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_3 $$ final PsiElement parent = expression.getParent()-->Line_4 $$ if (parent instanceof GrListOrMap) [ FD ]
Line_4 $$ if (parent instanceof GrListOrMap) -->Line_6 $$ if (!list.isMap()) [ CD ]
Line_6 $$ if (!list.isMap()) -->Line_8 $$ if (!(listType instanceof GrTupleType)) [ CD ]
Line_6 $$ if (!list.isMap()) -->Line_11 $$ return addExpectedConstructorParameters(list, list.getInitializers(), expression)[ CD ]
Line_2 $$ public List<TypeConstraint> calculateTypeConstraints(@NotNull GrExpression expression) -->Line_4 $$ if (parent instanceof GrListOrMap) [ CD ]
Line_4 $$ if (parent instanceof GrListOrMap) -->Line_5 $$ final GrListOrMap list = (GrListOrMap) parent[ CD ]
Line_2 $$ public List<TypeConstraint> calculateTypeConstraints(@NotNull GrExpression expression) -->Line_3 $$ final PsiElement parent = expression.getParent()[ CD ]
Line_2 $$ public List<TypeConstraint> calculateTypeConstraints(@NotNull GrExpression expression) -->Line_3 $$ final PsiElement parent = expression.getParent()[ FD ]
Line_8 $$ if (!(listType instanceof GrTupleType)) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_5 $$ final GrListOrMap list = (GrListOrMap) parent-->Line_11 $$ return addExpectedConstructorParameters(list, list.getInitializers(), expression)[ FD ]
