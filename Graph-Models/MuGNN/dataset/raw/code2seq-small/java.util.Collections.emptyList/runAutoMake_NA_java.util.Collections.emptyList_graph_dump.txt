Line_7 $$ final List<TargetTypeBuildScope> scopes = CmdlineProtoUtil.createAllModulesScopes(false)-->Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)[ FD ]
Line_10 $$ if (future != null) -->Line_11 $$ myAutomakeFutures.put(future, project)[ CD ]
Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)-->Line_15 $$ myAutomakeFutures.remove(future)[ FD ]
Line_3 $$ final Project project = getCurrentContextProject()-->Line_4 $$ if (project == null || !canStartAutoMake(project)) [ FD ]
Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)-->Line_10 $$ if (future != null) [ FD ]
Line_3 $$ final Project project = getCurrentContextProject()-->Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)[ FD ]
Line_2 $$ private void runAutoMake() -->Line_3 $$ final Project project = getCurrentContextProject()[ CD ]
Line_4 $$ if (project == null || !canStartAutoMake(project)) -->Line_5 $$ return[ CD ]
Line_2 $$ private void runAutoMake() -->Line_7 $$ final List<TargetTypeBuildScope> scopes = CmdlineProtoUtil.createAllModulesScopes(false)[ CD ]
Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)-->Line_11 $$ myAutomakeFutures.put(future, project)[ FD ]
Line_16 $$ if (handler.unprocessedFSChangesDetected()) -->Line_17 $$ scheduleAutoMake()[ CD ]
Line_2 $$ private void runAutoMake() -->Line_10 $$ if (future != null) [ CD ]
Line_2 $$ private void runAutoMake() -->Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)[ CD ]
Line_2 $$ private void runAutoMake() -->Line_4 $$ if (project == null || !canStartAutoMake(project)) [ CD ]
Line_2 $$ private void runAutoMake() -->Line_8 $$ final AutoMakeMessageHandler handler = new AutoMakeMessageHandler(project)[ CD ]
Line_3 $$ final Project project = getCurrentContextProject()-->Line_11 $$ myAutomakeFutures.put(future, project)[ FD ]
Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)-->Line_13 $$ future.waitFor()[ FD ]
Line_8 $$ final AutoMakeMessageHandler handler = new AutoMakeMessageHandler(project)-->Line_9 $$ final TaskFuture future = scheduleBuild(project, false, true, false, scopes, Collections.<String>emptyList(), Collections.<String, String>emptyMap(), handler)[ FD ]
Line_8 $$ final AutoMakeMessageHandler handler = new AutoMakeMessageHandler(project)-->Line_16 $$ if (handler.unprocessedFSChangesDetected()) [ FD ]
