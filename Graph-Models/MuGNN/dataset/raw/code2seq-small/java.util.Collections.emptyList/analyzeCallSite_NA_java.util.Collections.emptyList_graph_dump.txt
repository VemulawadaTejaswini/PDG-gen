Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_8 $$ for (List<PyParameter> parameters : PyUtil.getOverloadedParametersSet(callable, context)) [ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_10 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_8 $$ for (List<PyParameter> parameters : PyUtil.getOverloadedParametersSet(callable, context)) -->Line_10 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_5 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_7 $$ final List<PyExpression> arguments = getArguments(callSite, callable)[ FD ]
Line_3 $$ if (callSite != null) -->Line_15 $$ return results[ CD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_3 $$ if (callSite != null) [ CD ]
Line_5 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_8 $$ for (List<PyParameter> parameters : PyUtil.getOverloadedParametersSet(callable, context)) [ FD ]
Line_7 $$ final List<PyExpression> arguments = getArguments(callSite, callable)-->Line_11 $$ final Map<PyExpression, PyNamedParameter> mapping = PyCallExpressionHelper.mapArguments(arguments, explicitParameters)[ FD ]
Line_5 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_6 $$ final PyExpression receiver = getReceiver(callSite, callable)[ FD ]
Line_3 $$ if (callSite != null) -->Line_4 $$ final List<AnalyzeCallResults> results = new ArrayList<AnalyzeCallResults>()[ CD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_6 $$ final PyExpression receiver = getReceiver(callSite, callable)[ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_3 $$ if (callSite != null) [ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_9 $$ final PyResolveContext resolveContext = PyResolveContext.noImplicits().withTypeEvalContext(context)[ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_5 $$ for (PyCallable callable : resolveCallee(callSite, context)) [ FD ]
Line_10 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)-->Line_11 $$ final Map<PyExpression, PyNamedParameter> mapping = PyCallExpressionHelper.mapArguments(arguments, explicitParameters)[ FD ]
Line_5 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_10 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_9 $$ final PyResolveContext resolveContext = PyResolveContext.noImplicits().withTypeEvalContext(context)-->Line_10 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_7 $$ final List<PyExpression> arguments = getArguments(callSite, callable)[ FD ]
Line_2 $$ public static List<AnalyzeCallResults> analyzeCallSite(@Nullable PyCallSiteExpression callSite, @NotNull TypeEvalContext context) -->Line_17 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final List<AnalyzeCallResults> results = new ArrayList<AnalyzeCallResults>()-->Line_12 $$ results.add(new AnalyzeCallResults(callable, receiver, mapping))[ FD ]
