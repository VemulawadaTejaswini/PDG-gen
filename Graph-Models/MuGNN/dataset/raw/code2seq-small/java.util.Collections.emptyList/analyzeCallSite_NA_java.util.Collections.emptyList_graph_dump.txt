Line_9 $$ for (List<PyParameter> parameters : PyUtil.getOverloadedParametersSet(callable, context)) -->Line_11 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_10 $$ final PyResolveContext resolveContext = PyResolveContext.noImplicits().withTypeEvalContext(context)-->Line_11 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_6 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_11 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)[ FD ]
Line_5 $$ final List<AnalyzeCallResults> results = new ArrayList<AnalyzeCallResults>()-->Line_13 $$ results.add(new AnalyzeCallResults(callable, receiver, mapping))[ FD ]
Line_4 $$ if (callSite != null) -->Line_5 $$ final List<AnalyzeCallResults> results = new ArrayList<AnalyzeCallResults>()[ CD ]
Line_6 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_9 $$ for (List<PyParameter> parameters : PyUtil.getOverloadedParametersSet(callable, context)) [ FD ]
Line_6 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_8 $$ final List<PyExpression> arguments = getArguments(callSite, callable)[ FD ]
Line_8 $$ final List<PyExpression> arguments = getArguments(callSite, callable)-->Line_12 $$ final Map<PyExpression, PyNamedParameter> mapping = PyCallExpressionHelper.mapArguments(arguments, explicitParameters)[ FD ]
Line_11 $$ final List<PyParameter> explicitParameters = filterExplicitParameters(parameters, callable, callSite, resolveContext)-->Line_12 $$ final Map<PyExpression, PyNamedParameter> mapping = PyCallExpressionHelper.mapArguments(arguments, explicitParameters)[ FD ]
Line_4 $$ if (callSite != null) -->Line_16 $$ return results[ CD ]
Line_6 $$ for (PyCallable callable : resolveCallee(callSite, context)) -->Line_7 $$ final PyExpression receiver = getReceiver(callSite, callable)[ FD ]
