Line_2 $$ public void testBeforeTest() throws Exception -->Line_4 $$ int minNumDataNodes = randomIntBetween(0, 3)[ CD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())[ CD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_5 $$ int maxNumDataNodes = randomIntBetween(minNumDataNodes, 4)[ CD ]
Line_33 $$ Iterator<Client> iterator1 = cluster1.iterator()-->Line_36 $$ Client other = iterator1.next()[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_32 $$ assertArrayEquals(cluster0.getNodeNames(), cluster1.getNodeNames())[ FD ]
Line_33 $$ Iterator<Client> iterator1 = cluster1.iterator()-->Line_35 $$ assertTrue(iterator1.hasNext())[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_16 $$ int jvmOrdinal = randomIntBetween(0, 10)[ CD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_26 $$ cluster0.beforeTest(random, random.nextDouble())[ FD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_32 $$ assertArrayEquals(cluster0.getNodeNames(), cluster1.getNodeNames())[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_3 $$ long clusterSeed = randomLong()[ CD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_18 $$ Path baseDir = createTempDir()[ CD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_39 $$ assertArrayEquals(cluster0.getNodeNames(), cluster1.getNodeNames())[ FD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_40 $$ cluster0.afterTest()[ FD ]
Line_36 $$ Client other = iterator1.next()-->Line_37 $$ assertSettings(client.settings(), other.settings(), false)[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_39 $$ assertArrayEquals(cluster0.getNodeNames(), cluster1.getNodeNames())[ FD ]
Line_25 $$ Random random = new Random(seed)-->Line_26 $$ cluster0.beforeTest(random, random.nextDouble())[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_41 $$ cluster1.afterTest()[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_14 $$ int numClientNodes = randomIntBetween(0, 2)[ CD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_21 $$ assertClusters(cluster0, cluster1, false)[ CD ]
Line_4 $$ int minNumDataNodes = randomIntBetween(0, 3)-->Line_5 $$ int maxNumDataNodes = randomIntBetween(minNumDataNodes, 4)[ FD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_21 $$ assertClusters(cluster0, cluster1, false)[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_30 $$ cluster1.beforeTest(random, random.nextDouble())[ FD ]
Line_25 $$ Random random = new Random(seed)-->Line_30 $$ cluster1.beforeTest(random, random.nextDouble())[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_43 $$ IOUtils.close(cluster0, cluster1)[ FD ]
Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_43 $$ IOUtils.close(cluster0, cluster1)[ FD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_21 $$ assertClusters(cluster0, cluster1, false)[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_17 $$ String nodePrefix = "foobar"[ CD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_15 $$ boolean enableHttpPipelining = randomBoolean()[ CD ]
Line_20 $$ InternalTestCluster cluster1 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName2, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())-->Line_33 $$ Iterator<Client> iterator1 = cluster1.iterator()[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_19 $$ InternalTestCluster cluster0 = new InternalTestCluster("local", clusterSeed, baseDir, minNumDataNodes, maxNumDataNodes, clusterName1, nodeConfigurationSource, numClientNodes, enableHttpPipelining, nodePrefix, Collections.emptyList())[ CD ]
Line_34 $$ for (Client client : cluster0) -->Line_37 $$ assertSettings(client.settings(), other.settings(), false)[ FD ]
Line_2 $$ public void testBeforeTest() throws Exception -->Line_22 $$ long seed = randomLong()[ CD ]
