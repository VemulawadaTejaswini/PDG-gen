Line_24 $$ if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) -->Line_25 $$ if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) [ CD ]
Line_47 $$ if (object instanceof VirtualFile) -->Line_50 $$ addPsiElementNode(psiFile, project, result, favoritesConfig)[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_47 $$ if (object instanceof VirtualFile) [ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_67 $$ if (object instanceof LibraryGroupElement[]) [ FD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_35 $$ addPsiElementNode((PsiElement) object, project, result, favoritesConfig)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_67 $$ if (object instanceof LibraryGroupElement[]) [ CD ]
Line_42 $$ element = psiManager.findDirectory(vFile)-->Line_43 $$ addPsiElementNode(element, project, result, favoritesConfig)[ FD ]
Line_60 $$ object = new Module[] -->Line_67 $$ if (object instanceof LibraryGroupElement[]) [ FD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_43 $$ addPsiElementNode(element, project, result, favoritesConfig)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_13 $$ final PsiManager psiManager = PsiManager.getInstance(project)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_35 $$ addPsiElementNode((PsiElement) object, project, result, favoritesConfig)[ FD ]
Line_22 $$ if (object instanceof PsiElement) -->Line_23 $$ Module containingModule = null[ CD ]
Line_8 $$ if (treeNode != null) -->Line_10 $$ return result[ CD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_9 $$ result.add(treeNode)[ FD ]
Line_7 $$ final AbstractTreeNode treeNode = provider.createNode(project, object, favoritesConfig)-->Line_9 $$ result.add(treeNode)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_38 $$ if (object instanceof VirtualFile[]) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_43 $$ addPsiElementNode(element, project, result, favoritesConfig)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_60 $$ object = new Module[] [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_22 $$ if (object instanceof PsiElement) [ FD ]
Line_14 $$ final String currentViewId = ProjectView.getInstance(project).getCurrentViewId()-->Line_24 $$ if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_73 $$ if (object instanceof NamedLibraryElement[]) [ CD ]
Line_28 $$ abstractTreeNode = abstractTreeNode.getParent()-->Line_30 $$ if (abstractTreeNode != null) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_13 $$ final PsiManager psiManager = PsiManager.getInstance(project)[ CD ]
Line_13 $$ final PsiManager psiManager = PsiManager.getInstance(project)-->Line_40 $$ PsiElement element = psiManager.findFile(vFile)[ FD ]
Line_40 $$ PsiElement element = psiManager.findFile(vFile)-->Line_42 $$ element = psiManager.findDirectory(vFile)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_59 $$ if (object instanceof Module)[ FD ]
Line_25 $$ if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) -->Line_27 $$ while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) [ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_3 $$ if (project == null)[ FD ]
Line_61 $$ if (object instanceof Module[]) -->Line_65 $$ return result[ CD ]
Line_73 $$ if (object instanceof NamedLibraryElement[]) -->Line_77 $$ return result[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_79 $$ return result[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_61 $$ if (object instanceof Module[]) [ CD ]
Line_17 $$ for (PsiElement psiElement : (PsiElement[]) object) -->Line_18 $$ addPsiElementNode(psiElement, project, result, favoritesConfig)[ FD ]
Line_27 $$ while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) -->Line_28 $$ abstractTreeNode = abstractTreeNode.getParent()[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_14 $$ final String currentViewId = ProjectView.getInstance(project).getCurrentViewId()[ FD ]
Line_16 $$ if (object instanceof PsiElement[]) -->Line_20 $$ return result[ CD ]
Line_22 $$ if (object instanceof PsiElement) -->Line_36 $$ return result[ CD ]
Line_14 $$ final String currentViewId = ProjectView.getInstance(project).getCurrentViewId()-->Line_15 $$ AbstractProjectViewPane pane = ProjectView.getInstance(project).getProjectViewPaneById(currentViewId)[ FD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_75 $$ result.add(new NamedLibraryElementNode(project, namedLibrary, favoritesConfig))[ FD ]
Line_59 $$ if (object instanceof Module)-->Line_60 $$ object = new Module[] [ CD ]
Line_39 $$ for (VirtualFile vFile : (VirtualFile[]) object) -->Line_49 $$ final PsiFile psiFile = psiManager.findFile(vFile)[ FD ]
Line_3 $$ if (project == null)-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_53 $$ if (object instanceof ModuleGroup[]) [ CD ]
Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())-->Line_31 $$ containingModule = ((AbstractModuleNode) abstractTreeNode.getParent()).getValue()[ FD ]
Line_60 $$ object = new Module[] -->Line_61 $$ if (object instanceof Module[]) [ FD ]
Line_47 $$ if (object instanceof VirtualFile) -->Line_51 $$ return result[ CD ]
Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())-->Line_27 $$ while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()[ CD ]
Line_15 $$ AbstractProjectViewPane pane = ProjectView.getInstance(project).getProjectViewPaneById(currentViewId)-->Line_25 $$ if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_22 $$ if (object instanceof PsiElement) [ CD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_50 $$ addPsiElementNode(psiFile, project, result, favoritesConfig)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_53 $$ if (object instanceof ModuleGroup[]) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_24 $$ if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_15 $$ AbstractProjectViewPane pane = ProjectView.getInstance(project).getProjectViewPaneById(currentViewId)[ FD ]
Line_8 $$ if (treeNode != null) -->Line_9 $$ result.add(treeNode)[ CD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_55 $$ result.add(new ProjectViewModuleGroupNode(project, moduleGroup, favoritesConfig))[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_16 $$ if (object instanceof PsiElement[]) [ CD ]
Line_67 $$ if (object instanceof LibraryGroupElement[]) -->Line_71 $$ return result[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_7 $$ final AbstractTreeNode treeNode = provider.createNode(project, object, favoritesConfig)[ FD ]
Line_22 $$ if (object instanceof PsiElement) -->Line_24 $$ if (inProjectView && ProjectView.getInstance(project).isShowModules(currentViewId)) [ CD ]
Line_41 $$ if (element == null)-->Line_42 $$ element = psiManager.findDirectory(vFile)[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_47 $$ if (object instanceof VirtualFile) [ FD ]
Line_30 $$ if (abstractTreeNode != null) -->Line_31 $$ containingModule = ((AbstractModuleNode) abstractTreeNode.getParent()).getValue()[ CD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_69 $$ result.add(new LibraryGroupNode(project, libraryGroup, favoritesConfig))[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_3 $$ if (project == null)[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_73 $$ if (object instanceof NamedLibraryElement[]) [ FD ]
Line_25 $$ if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) -->Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())[ CD ]
Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())-->Line_28 $$ abstractTreeNode = abstractTreeNode.getParent()[ FD ]
Line_28 $$ abstractTreeNode = abstractTreeNode.getParent()-->Line_31 $$ containingModule = ((AbstractModuleNode) abstractTreeNode.getParent()).getValue()[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_50 $$ addPsiElementNode(psiFile, project, result, favoritesConfig)[ FD ]
Line_15 $$ AbstractProjectViewPane pane = ProjectView.getInstance(project).getProjectViewPaneById(currentViewId)-->Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_61 $$ if (object instanceof Module[]) [ FD ]
Line_6 $$ for (FavoriteNodeProvider provider : Extensions.getExtensions(FavoriteNodeProvider.EP_NAME, project)) -->Line_7 $$ final AbstractTreeNode treeNode = provider.createNode(project, object, favoritesConfig)[ FD ]
Line_7 $$ final AbstractTreeNode treeNode = provider.createNode(project, object, favoritesConfig)-->Line_8 $$ if (treeNode != null) [ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_59 $$ if (object instanceof Module)[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_15 $$ AbstractProjectViewPane pane = ProjectView.getInstance(project).getProjectViewPaneById(currentViewId)[ CD ]
Line_22 $$ if (object instanceof PsiElement) -->Line_35 $$ addPsiElementNode((PsiElement) object, project, result, favoritesConfig)[ CD ]
Line_53 $$ if (object instanceof ModuleGroup[]) -->Line_57 $$ return result[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_14 $$ final String currentViewId = ProjectView.getInstance(project).getCurrentViewId()[ CD ]
Line_47 $$ if (object instanceof VirtualFile) -->Line_49 $$ final PsiFile psiFile = psiManager.findFile(vFile)[ CD ]
Line_60 $$ object = new Module[] -->Line_73 $$ if (object instanceof NamedLibraryElement[]) [ FD ]
Line_39 $$ for (VirtualFile vFile : (VirtualFile[]) object) -->Line_40 $$ PsiElement element = psiManager.findFile(vFile)[ FD ]
Line_49 $$ final PsiFile psiFile = psiManager.findFile(vFile)-->Line_50 $$ addPsiElementNode(psiFile, project, result, favoritesConfig)[ FD ]
Line_40 $$ PsiElement element = psiManager.findFile(vFile)-->Line_41 $$ if (element == null)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_6 $$ for (FavoriteNodeProvider provider : Extensions.getExtensions(FavoriteNodeProvider.EP_NAME, project)) [ FD ]
Line_26 $$ AbstractTreeNode abstractTreeNode = ((AbstractTreeNode) pane.getSelectedDescriptor().getElement())-->Line_30 $$ if (abstractTreeNode != null) [ FD ]
Line_13 $$ final PsiManager psiManager = PsiManager.getInstance(project)-->Line_42 $$ element = psiManager.findDirectory(vFile)[ FD ]
Line_13 $$ final PsiManager psiManager = PsiManager.getInstance(project)-->Line_49 $$ final PsiFile psiFile = psiManager.findFile(vFile)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_16 $$ if (object instanceof PsiElement[]) [ FD ]
Line_28 $$ abstractTreeNode = abstractTreeNode.getParent()-->Line_27 $$ while (abstractTreeNode != null && !(abstractTreeNode.getParent() instanceof AbstractModuleNode)) [ FD ]
Line_38 $$ if (object instanceof VirtualFile[]) -->Line_45 $$ return result[ CD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_18 $$ addPsiElementNode(psiElement, project, result, favoritesConfig)[ FD ]
Line_39 $$ for (VirtualFile vFile : (VirtualFile[]) object) -->Line_42 $$ element = psiManager.findDirectory(vFile)[ FD ]
Line_23 $$ Module containingModule = null-->Line_31 $$ containingModule = ((AbstractModuleNode) abstractTreeNode.getParent()).getValue()[ FD ]
Line_5 $$ ArrayList<AbstractTreeNode> result = new ArrayList<AbstractTreeNode>()-->Line_63 $$ result.add(new ProjectViewModuleNode(project, module1, favoritesConfig))[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_18 $$ addPsiElementNode(psiElement, project, result, favoritesConfig)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> createNodes(Project project, Module moduleContext, Object object, boolean inProjectView, ViewSettings favoritesConfig) -->Line_38 $$ if (object instanceof VirtualFile[]) [ CD ]
Line_40 $$ PsiElement element = psiManager.findFile(vFile)-->Line_43 $$ addPsiElementNode(element, project, result, favoritesConfig)[ FD ]
Line_25 $$ if (pane != null && pane.getSelectedDescriptor() != null && pane.getSelectedDescriptor().getElement() instanceof AbstractTreeNode) -->Line_30 $$ if (abstractTreeNode != null) [ CD ]
