Line_16 $$ singleList = cached-->Line_26 $$ if (singleList != null) [ FD ]
Line_14 $$ if (cached != null && cached != Collections.<T>emptyList()) -->Line_22 $$ result.addAll(cached)[ CD ]
Line_3 $$ final SemCacheChunk chunk = obtainChunk(element)-->Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))[ FD ]
Line_8 $$ final List<SemKey> inheritors = key.getInheritors()-->Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))[ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_3 $$ final SemCacheChunk chunk = obtainChunk(element)[ FD ]
Line_20 $$ result = new LinkedHashSet<T>(singleList)-->Line_25 $$ if (result == null) [ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_8 $$ final List<SemKey> inheritors = key.getInheritors()[ FD ]
Line_16 $$ singleList = cached-->Line_15 $$ if (singleList == null) [ FD ]
Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))-->Line_22 $$ result.addAll(cached)[ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_4 $$ if (chunk == null)[ CD ]
Line_7 $$ LinkedHashSet<T> result = null-->Line_20 $$ result = new LinkedHashSet<T>(singleList)[ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_31 $$ return new ArrayList<T>(result)[ CD ]
Line_4 $$ if (chunk == null)-->Line_5 $$ return null[ CD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_6 $$ List<T> singleList = null[ CD ]
Line_14 $$ if (cached != null && cached != Collections.<T>emptyList()) -->Line_15 $$ if (singleList == null) [ CD ]
Line_3 $$ final SemCacheChunk chunk = obtainChunk(element)-->Line_4 $$ if (chunk == null)[ FD ]
Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))-->Line_16 $$ singleList = cached[ FD ]
Line_25 $$ if (result == null) -->Line_29 $$ return Collections.emptyList()[ CD ]
Line_7 $$ LinkedHashSet<T> result = null-->Line_22 $$ result.addAll(cached)[ FD ]
Line_7 $$ LinkedHashSet<T> result = null-->Line_19 $$ if (result == null) [ FD ]
Line_9 $$ for (int i = 0; i < inheritors.size(); i++) -->Line_11 $$ if (cached == null && paranoid) [ CD ]
Line_20 $$ result = new LinkedHashSet<T>(singleList)-->Line_22 $$ result.addAll(cached)[ FD ]
Line_14 $$ if (cached != null && cached != Collections.<T>emptyList()) -->Line_19 $$ if (result == null) [ CD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_3 $$ final SemCacheChunk chunk = obtainChunk(element)[ CD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_11 $$ if (cached == null && paranoid) [ FD ]
Line_9 $$ for (int i = 0; i < inheritors.size(); i++) -->Line_14 $$ if (cached != null && cached != Collections.<T>emptyList()) [ CD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_25 $$ if (result == null) [ CD ]
Line_9 $$ for (int i = 0; i < inheritors.size(); i++) -->Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))[ CD ]
Line_7 $$ LinkedHashSet<T> result = null-->Line_25 $$ if (result == null) [ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_7 $$ LinkedHashSet<T> result = null[ CD ]
Line_6 $$ List<T> singleList = null-->Line_15 $$ if (singleList == null) [ FD ]
Line_6 $$ List<T> singleList = null-->Line_26 $$ if (singleList != null) [ FD ]
Line_6 $$ List<T> singleList = null-->Line_16 $$ singleList = cached[ FD ]
Line_25 $$ if (result == null) -->Line_26 $$ if (singleList != null) [ CD ]
Line_19 $$ if (result == null) -->Line_20 $$ result = new LinkedHashSet<T>(singleList)[ CD ]
Line_11 $$ if (cached == null && paranoid) -->Line_12 $$ return null[ CD ]
Line_20 $$ result = new LinkedHashSet<T>(singleList)-->Line_19 $$ if (result == null) [ FD ]
Line_26 $$ if (singleList != null) -->Line_27 $$ return singleList[ CD ]
Line_15 $$ if (singleList == null) -->Line_16 $$ singleList = cached[ CD ]
Line_8 $$ final List<SemKey> inheritors = key.getInheritors()-->Line_9 $$ for (int i = 0; i < inheritors.size(); i++) [ FD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_9 $$ for (int i = 0; i < inheritors.size(); i++) [ CD ]
Line_2 $$ private <T extends SemElement> List<T> _getCachedSemElements(SemKey<T> key, boolean paranoid, final PsiElement element) -->Line_8 $$ final List<SemKey> inheritors = key.getInheritors()[ CD ]
Line_9 $$ for (int i = 0; i < inheritors.size(); i++) -->Line_10 $$ List<T> cached = (List<T>) chunk.getSemElements(inheritors.get(i))[ FD ]
