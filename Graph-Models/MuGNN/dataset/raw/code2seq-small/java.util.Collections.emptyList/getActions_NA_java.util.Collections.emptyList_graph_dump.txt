Line_44 $$ for (MavenId each : downloadResult.unresolvedSources) -->Line_49 $$ message.append("<br>").append(each.getDisplayString())[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_34 $$ manager.scheduleArtifactsDownloading(mavenProjects, artifacts, true, false, result)[ CD ]
Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) -->Line_42 $$ message.append("<html>Sources not found for:")[ CD ]
Line_5 $$ Collection<MavenProject> projects = getMavenProjects(psiFile)-->Line_6 $$ if (projects.isEmpty())[ FD ]
Line_41 $$ final StringBuilder message = new StringBuilder()-->Line_51 $$ message.append("</html>")[ FD ]
Line_41 $$ final StringBuilder message = new StringBuilder()-->Line_42 $$ message.append("<html>Sources not found for:")[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_31 $$ if (artifacts.isEmpty())[ CD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_26 $$ if (mavenProjects.isEmpty()) [ CD ]
Line_33 $$ final AsyncResult<MavenArtifactDownloader.DownloadResult> result = new AsyncResult<MavenArtifactDownloader.DownloadResult>()-->Line_34 $$ manager.scheduleArtifactsDownloading(mavenProjects, artifacts, true, false, result)[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_30 $$ Collection<MavenArtifact> artifacts = findArtifacts(mavenProjects, orderEntries)[ CD ]
Line_33 $$ final AsyncResult<MavenArtifactDownloader.DownloadResult> result = new AsyncResult<MavenArtifactDownloader.DownloadResult>()-->Line_36 $$ result.doWhenDone(new Consumer<MavenArtifactDownloader.DownloadResult>() [ FD ]
Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) -->Line_43 $$ int count = 0[ CD ]
Line_41 $$ final StringBuilder message = new StringBuilder()-->Line_56 $$ Notifications.Bus.notify(new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Cannot download sources", message.toString(), NotificationType.WARNING), psiFile.getProject())[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_67 $$ return resultWrapper[ CD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_19 $$ return ProjectBundle.message("maven.action.download.sources.busy.text")[ CD ]
Line_35 $$ final ActionCallback resultWrapper = new ActionCallback()-->Line_63 $$ resultWrapper.setDone()[ FD ]
Line_31 $$ if (artifacts.isEmpty())-->Line_32 $$ return ActionCallback.REJECTED[ CD ]
Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) -->Line_51 $$ message.append("</html>")[ CD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_33 $$ final AsyncResult<MavenArtifactDownloader.DownloadResult> result = new AsyncResult<MavenArtifactDownloader.DownloadResult>()[ CD ]
Line_45 $$ if (count++ > 5) -->Line_46 $$ message.append("<br>and more...")[ CD ]
Line_43 $$ int count = 0-->Line_45 $$ if (count++ > 5) [ FD ]
Line_36 $$ result.doWhenDone(new Consumer<MavenArtifactDownloader.DownloadResult>() -->Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) [ CD ]
Line_36 $$ result.doWhenDone(new Consumer<MavenArtifactDownloader.DownloadResult>() -->Line_60 $$ if (downloadResult.resolvedSources.isEmpty()) [ CD ]
Line_8 $$ if (findArtifacts(projects, orderEntries).isEmpty())-->Line_9 $$ return Collections.emptyList()[ CD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_30 $$ Collection<MavenArtifact> artifacts = findArtifacts(mavenProjects, orderEntries)[ FD ]
Line_26 $$ if (mavenProjects.isEmpty()) -->Line_27 $$ return ActionCallback.REJECTED[ CD ]
Line_5 $$ Collection<MavenProject> projects = getMavenProjects(psiFile)-->Line_8 $$ if (findArtifacts(projects, orderEntries).isEmpty())[ FD ]
Line_41 $$ final StringBuilder message = new StringBuilder()-->Line_46 $$ message.append("<br>and more...")[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_14 $$ return ProjectBundle.message("maven.action.download.sources")[ CD ]
Line_52 $$ SwingUtilities.invokeLater(new Runnable() -->Line_56 $$ Notifications.Bus.notify(new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Cannot download sources", message.toString(), NotificationType.WARNING), psiFile.getProject())[ CD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_36 $$ result.doWhenDone(new Consumer<MavenArtifactDownloader.DownloadResult>() [ CD ]
Line_29 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(psiFile.getProject())-->Line_34 $$ manager.scheduleArtifactsDownloading(mavenProjects, artifacts, true, false, result)[ FD ]
Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) -->Line_52 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_30 $$ Collection<MavenArtifact> artifacts = findArtifacts(mavenProjects, orderEntries)-->Line_34 $$ manager.scheduleArtifactsDownloading(mavenProjects, artifacts, true, false, result)[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_29 $$ MavenProjectsManager manager = MavenProjectsManager.getInstance(psiFile.getProject())[ CD ]
Line_41 $$ final StringBuilder message = new StringBuilder()-->Line_49 $$ message.append("<br>").append(each.getDisplayString())[ FD ]
Line_10 $$ return Collections.<AttachSourcesAction>singleton(new AttachSourcesAction() -->Line_35 $$ final ActionCallback resultWrapper = new ActionCallback()[ CD ]
Line_40 $$ if (!downloadResult.unresolvedSources.isEmpty()) -->Line_41 $$ final StringBuilder message = new StringBuilder()[ CD ]
Line_60 $$ if (downloadResult.resolvedSources.isEmpty()) -->Line_61 $$ resultWrapper.setRejected()[ CD ]
Line_35 $$ final ActionCallback resultWrapper = new ActionCallback()-->Line_61 $$ resultWrapper.setRejected()[ FD ]
Line_60 $$ if (downloadResult.resolvedSources.isEmpty()) -->Line_63 $$ resultWrapper.setDone()[ CD ]
Line_6 $$ if (projects.isEmpty())-->Line_7 $$ return Collections.emptyList()[ CD ]
Line_30 $$ Collection<MavenArtifact> artifacts = findArtifacts(mavenProjects, orderEntries)-->Line_31 $$ if (artifacts.isEmpty())[ FD ]
