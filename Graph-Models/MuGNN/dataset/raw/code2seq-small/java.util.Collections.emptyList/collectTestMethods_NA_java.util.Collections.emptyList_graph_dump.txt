Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_5 $$ return psiClass.findMethodsByName(methodName, true)[ FD ]
Line_3 $$ final PsiMethod[] methods = ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>() -->Line_8 $$ calculateDependencies(methods, classes, searchScope, psiClass)[ FD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_8 $$ calculateDependencies(methods, classes, searchScope, psiClass)[ FD ]
Line_3 $$ final PsiMethod[] methods = ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>() -->Line_5 $$ return psiClass.findMethodsByName(methodName, true)[ CD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_3 $$ final PsiMethod[] methods = ApplicationManager.getApplication().runReadAction(new Computable<PsiMethod[]>() [ CD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_10 $$ if (psiMethods == null) [ CD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_9 $$ Map<PsiMethod, List<String>> psiMethods = classes.get(psiClass)[ CD ]
Line_10 $$ if (psiMethods == null) -->Line_12 $$ classes.put(psiClass, psiMethods)[ CD ]
Line_15 $$ if (!psiMethods.containsKey(method)) -->Line_16 $$ psiMethods.put(method, Collections.<String>emptyList())[ CD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_8 $$ calculateDependencies(methods, classes, searchScope, psiClass)[ CD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_12 $$ classes.put(psiClass, psiMethods)[ FD ]
Line_2 $$ public static void collectTestMethods(Map<PsiClass, Map<PsiMethod, List<String>>> classes, final PsiClass psiClass, final String methodName, final GlobalSearchScope searchScope) -->Line_9 $$ Map<PsiMethod, List<String>> psiMethods = classes.get(psiClass)[ FD ]
