Line_56 $$ elements = new ArrayList<Exprent>(len)-->Line_58 $$ elements.add(parseAnnotationElement(data, pool))[ FD ]
Line_15 $$ String value-->Line_36 $$ value = long.class.getName()[ FD ]
Line_33 $$ value = int.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_30 $$ value = float.class.getName()-->Line_33 $$ value = int.class.getName()[ FD ]
Line_18 $$ value = type.value-->Line_21 $$ value = byte.class.getName()[ FD ]
Line_55 $$ if (len > 0) -->Line_57 $$ for (int i = 0; i < len; i++) [ CD ]
Line_61 $$ VarType newType-->Line_63 $$ newType = new VarType(CodeConstants.TYPE_OBJECT, 1, "java/lang/Object")[ FD ]
Line_18 $$ value = type.value-->Line_24 $$ value = char.class.getName()[ FD ]
Line_18 $$ value = type.value-->Line_36 $$ value = long.class.getName()[ FD ]
Line_33 $$ value = int.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_24 $$ value = char.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_56 $$ elements = new ArrayList<Exprent>(len)-->Line_70 $$ newExpr.setLstArrayElements(elements)[ FD ]
Line_53 $$ List<Exprent> elements = Collections.emptyList()-->Line_56 $$ elements = new ArrayList<Exprent>(len)[ FD ]
Line_33 $$ value = int.class.getName()-->Line_36 $$ value = long.class.getName()[ FD ]
Line_62 $$ if (elements.isEmpty()) -->Line_63 $$ newType = new VarType(CodeConstants.TYPE_OBJECT, 1, "java/lang/Object")[ CD ]
Line_30 $$ value = float.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_13 $$ String descriptor = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()-->Line_14 $$ VarType type = FieldDescriptor.parseDescriptor(descriptor).type[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_55 $$ if (len > 0) -->Line_56 $$ elements = new ArrayList<Exprent>(len)[ CD ]
Line_18 $$ value = type.value-->Line_45 $$ value = void.class.getName()[ FD ]
Line_27 $$ value = double.class.getName()-->Line_33 $$ value = int.class.getName()[ FD ]
Line_53 $$ List<Exprent> elements = Collections.emptyList()-->Line_65 $$ VarType elementType = elements.get(0).getExprType()[ FD ]
Line_15 $$ String value-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_68 $$ NewExprent newExpr = new NewExprent(newType, Collections.<Exprent>emptyList(), null)-->Line_69 $$ newExpr.setDirectArrayInit(true)[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_3 $$ int tag = data.readUnsignedByte()[ FD ]
Line_30 $$ value = float.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_36 $$ value = long.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_56 $$ elements = new ArrayList<Exprent>(len)-->Line_62 $$ if (elements.isEmpty()) [ FD ]
Line_24 $$ value = char.class.getName()-->Line_27 $$ value = double.class.getName()[ FD ]
Line_62 $$ if (elements.isEmpty()) -->Line_65 $$ VarType elementType = elements.get(0).getExprType()[ CD ]
Line_24 $$ value = char.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_30 $$ value = float.class.getName()-->Line_36 $$ value = long.class.getName()[ FD ]
Line_33 $$ value = int.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_68 $$ NewExprent newExpr = new NewExprent(newType, Collections.<Exprent>emptyList(), null)-->Line_70 $$ newExpr.setLstArrayElements(elements)[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_7 $$ String className = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()[ FD ]
Line_24 $$ value = char.class.getName()-->Line_36 $$ value = long.class.getName()[ FD ]
Line_24 $$ value = char.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_63 $$ newType = new VarType(CodeConstants.TYPE_OBJECT, 1, "java/lang/Object")-->Line_66 $$ newType = new VarType(elementType.type, 1, elementType.value)[ FD ]
Line_24 $$ value = char.class.getName()-->Line_30 $$ value = float.class.getName()[ FD ]
Line_36 $$ value = long.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_27 $$ value = double.class.getName()-->Line_30 $$ value = float.class.getName()[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_76 $$ PrimitiveConstant cn = pool.getPrimitiveConstant(data.readUnsignedShort())[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_74 $$ return parseAnnotation(data, pool)[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_30 $$ value = float.class.getName()[ FD ]
Line_15 $$ String value-->Line_33 $$ value = int.class.getName()[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_13 $$ String descriptor = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_33 $$ value = int.class.getName()[ FD ]
Line_27 $$ value = double.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_61 $$ VarType newType-->Line_66 $$ newType = new VarType(elementType.type, 1, elementType.value)[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_8 $$ String constName = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()[ FD ]
Line_15 $$ String value-->Line_39 $$ value = short.class.getName()[ FD ]
Line_15 $$ String value-->Line_21 $$ value = byte.class.getName()[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_27 $$ value = double.class.getName()[ FD ]
Line_39 $$ value = short.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_24 $$ value = char.class.getName()[ FD ]
Line_42 $$ value = boolean.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_53 $$ List<Exprent> elements = Collections.emptyList()-->Line_70 $$ newExpr.setLstArrayElements(elements)[ FD ]
Line_53 $$ List<Exprent> elements = Collections.emptyList()-->Line_62 $$ if (elements.isEmpty()) [ FD ]
Line_21 $$ value = byte.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_3 $$ int tag = data.readUnsignedByte()[ CD ]
Line_21 $$ value = byte.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_18 $$ value = type.value-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_24 $$ value = char.class.getName()-->Line_33 $$ value = int.class.getName()[ FD ]
Line_54 $$ int len = data.readUnsignedShort()-->Line_55 $$ if (len > 0) [ FD ]
Line_53 $$ List<Exprent> elements = Collections.emptyList()-->Line_58 $$ elements.add(parseAnnotationElement(data, pool))[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_58 $$ elements.add(parseAnnotationElement(data, pool))[ FD ]
Line_7 $$ String className = pool.getPrimitiveConstant(data.readUnsignedShort()).getString()-->Line_9 $$ FieldDescriptor descr = FieldDescriptor.parseDescriptor(className)[ FD ]
Line_15 $$ String value-->Line_27 $$ value = double.class.getName()[ FD ]
Line_18 $$ value = type.value-->Line_39 $$ value = short.class.getName()[ FD ]
Line_27 $$ value = double.class.getName()-->Line_42 $$ value = boolean.class.getName()[ FD ]
Line_2 $$ public static Exprent parseAnnotationElement(DataInputStream data, ConstantPool pool) throws IOException -->Line_54 $$ int len = data.readUnsignedShort()[ FD ]
Line_30 $$ value = float.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_39 $$ value = short.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
Line_15 $$ String value-->Line_24 $$ value = char.class.getName()[ FD ]
Line_15 $$ String value-->Line_18 $$ value = type.value[ FD ]
Line_27 $$ value = double.class.getName()-->Line_36 $$ value = long.class.getName()[ FD ]
Line_62 $$ if (elements.isEmpty()) -->Line_66 $$ newType = new VarType(elementType.type, 1, elementType.value)[ CD ]
Line_18 $$ value = type.value-->Line_27 $$ value = double.class.getName()[ FD ]
Line_57 $$ for (int i = 0; i < len; i++) -->Line_58 $$ elements.add(parseAnnotationElement(data, pool))[ CD ]
Line_54 $$ int len = data.readUnsignedShort()-->Line_57 $$ for (int i = 0; i < len; i++) [ FD ]
Line_18 $$ value = type.value-->Line_30 $$ value = float.class.getName()[ FD ]
Line_56 $$ elements = new ArrayList<Exprent>(len)-->Line_65 $$ VarType elementType = elements.get(0).getExprType()[ FD ]
Line_15 $$ String value-->Line_45 $$ value = void.class.getName()[ FD ]
Line_21 $$ value = byte.class.getName()-->Line_36 $$ value = long.class.getName()[ FD ]
Line_15 $$ String value-->Line_30 $$ value = float.class.getName()[ FD ]
Line_36 $$ value = long.class.getName()-->Line_39 $$ value = short.class.getName()[ FD ]
Line_18 $$ value = type.value-->Line_33 $$ value = int.class.getName()[ FD ]
Line_27 $$ value = double.class.getName()-->Line_45 $$ value = void.class.getName()[ FD ]
