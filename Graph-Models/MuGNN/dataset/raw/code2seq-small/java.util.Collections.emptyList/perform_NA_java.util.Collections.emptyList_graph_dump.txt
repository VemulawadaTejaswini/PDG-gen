Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_7 $$ ExternalSystemApiUtil.getSettings(project, projectSystemId).unlinkExternalProject(projectData.getLinkedExternalProjectPath())[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_18 $$ if (!orphanModules.isEmpty()) [ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_4 $$ final ProjectNode projectNode = ExternalSystemDataKeys.SELECTED_PROJECT_NODE.getData(e.getDataContext())[ CD ]
Line_14 $$ if (projectData.getLinkedExternalProjectPath().equals(path)) -->Line_15 $$ orphanModules.add(module)[ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_3 $$ e.getPresentation().setText(ExternalSystemBundle.message("action.detach.external.project.text", projectSystemId.getReadableName()))[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_3 $$ e.getPresentation().setText(ExternalSystemBundle.message("action.detach.external.project.text", projectSystemId.getReadableName()))[ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_4 $$ final ProjectNode projectNode = ExternalSystemDataKeys.SELECTED_PROJECT_NODE.getData(e.getDataContext())[ FD ]
Line_18 $$ if (!orphanModules.isEmpty()) -->Line_20 $$ ProjectDataManager.getInstance().removeData(ProjectKeys.MODULE, orphanModules, Collections.<DataNode<ModuleData>>emptyList(), projectData, project, false)[ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_20 $$ ProjectDataManager.getInstance().removeData(ProjectKeys.MODULE, orphanModules, Collections.<DataNode<ModuleData>>emptyList(), projectData, project, false)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_13 $$ String path = ExternalSystemApiUtil.getExternalRootProjectPath(module)[ FD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_15 $$ orphanModules.add(module)[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_11 $$ if (!ExternalSystemApiUtil.isExternalSystemAwareModule(projectSystemId, module))[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_8 $$ ExternalProjectsManager.getInstance(project).forgetExternalProjectData(projectSystemId, projectData.getLinkedExternalProjectPath())[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_9 $$ List<Module> orphanModules = ContainerUtilRt.newArrayList()[ CD ]
Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) -->Line_11 $$ if (!ExternalSystemApiUtil.isExternalSystemAwareModule(projectSystemId, module))[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_6 $$ ExternalSystemApiUtil.getLocalSettings(project, projectSystemId).forgetExternalProjects(Collections.singleton(projectData.getLinkedExternalProjectPath()))[ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_10 $$ for (Module module : ModuleManager.getInstance(project).getModules()) [ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_7 $$ ExternalSystemApiUtil.getSettings(project, projectSystemId).unlinkExternalProject(projectData.getLinkedExternalProjectPath())[ CD ]
Line_4 $$ final ProjectNode projectNode = ExternalSystemDataKeys.SELECTED_PROJECT_NODE.getData(e.getDataContext())-->Line_19 $$ projectNode.getGroup().remove(projectNode)[ FD ]
Line_9 $$ List<Module> orphanModules = ContainerUtilRt.newArrayList()-->Line_18 $$ if (!orphanModules.isEmpty()) [ FD ]
Line_18 $$ if (!orphanModules.isEmpty()) -->Line_19 $$ projectNode.getGroup().remove(projectNode)[ CD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_8 $$ ExternalProjectsManager.getInstance(project).forgetExternalProjectData(projectSystemId, projectData.getLinkedExternalProjectPath())[ CD ]
Line_9 $$ List<Module> orphanModules = ContainerUtilRt.newArrayList()-->Line_15 $$ orphanModules.add(module)[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_6 $$ ExternalSystemApiUtil.getLocalSettings(project, projectSystemId).forgetExternalProjects(Collections.singleton(projectData.getLinkedExternalProjectPath()))[ FD ]
Line_9 $$ List<Module> orphanModules = ContainerUtilRt.newArrayList()-->Line_20 $$ ProjectDataManager.getInstance().removeData(ProjectKeys.MODULE, orphanModules, Collections.<DataNode<ModuleData>>emptyList(), projectData, project, false)[ FD ]
Line_2 $$ public void perform(@NotNull final Project project, @NotNull ProjectSystemId projectSystemId, @NotNull ProjectData projectData, @NotNull AnActionEvent e) -->Line_14 $$ if (projectData.getLinkedExternalProjectPath().equals(path)) [ FD ]
Line_13 $$ String path = ExternalSystemApiUtil.getExternalRootProjectPath(module)-->Line_14 $$ if (projectData.getLinkedExternalProjectPath().equals(path)) [ FD ]
