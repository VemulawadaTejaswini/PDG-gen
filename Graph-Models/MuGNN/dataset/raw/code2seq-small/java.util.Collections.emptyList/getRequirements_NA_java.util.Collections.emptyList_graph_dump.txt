Line_8 $$ final List<String> lines = new ArrayList<String>()-->Line_14 $$ lines.add(((PyStringLiteralExpression) e).getStringValue())[ FD ]
Line_19 $$ if (!lines.isEmpty()) -->Line_20 $$ return PyRequirement.parse(StringUtil.join(lines, "\n"))[ CD ]
Line_10 $$ final PyListLiteralExpression installRequires = PyPackageUtil.findSetupPyRequires(module, name)-->Line_12 $$ for (PyExpression e : installRequires.getElements()) [ FD ]
Line_13 $$ if (e instanceof PyStringLiteralExpression) -->Line_14 $$ lines.add(((PyStringLiteralExpression) e).getStringValue())[ CD ]
Line_8 $$ final List<String> lines = new ArrayList<String>()-->Line_19 $$ if (!lines.isEmpty()) [ FD ]
Line_22 $$ if (PyPackageUtil.findSetupPy(module) != null) -->Line_23 $$ return Collections.emptyList()[ CD ]
Line_5 $$ if (requirements != null) -->Line_6 $$ return requirements[ CD ]
Line_8 $$ final List<String> lines = new ArrayList<String>()-->Line_20 $$ return PyRequirement.parse(StringUtil.join(lines, "\n"))[ FD ]
Line_4 $$ List<PyRequirement> requirements = PySdkUtil.getRequirementsFromTxt(module)-->Line_5 $$ if (requirements != null) [ FD ]
Line_9 $$ for (String name : PyPackageUtil.SETUP_PY_REQUIRES_KWARGS_NAMES) -->Line_10 $$ final PyListLiteralExpression installRequires = PyPackageUtil.findSetupPyRequires(module, name)[ FD ]
Line_10 $$ final PyListLiteralExpression installRequires = PyPackageUtil.findSetupPyRequires(module, name)-->Line_11 $$ if (installRequires != null) [ FD ]
Line_12 $$ for (PyExpression e : installRequires.getElements()) -->Line_13 $$ if (e instanceof PyStringLiteralExpression) [ FD ]
