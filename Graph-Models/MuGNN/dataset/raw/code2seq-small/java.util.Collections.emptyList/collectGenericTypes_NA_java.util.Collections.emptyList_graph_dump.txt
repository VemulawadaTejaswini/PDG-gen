Line_18 $$ final PsiElement resolved = tryResolving(indexExpr, context)-->Line_19 $$ final PyGenericType genericType = getGenericType(resolved, context)[ FD ]
Line_11 $$ if (isGeneric) -->Line_26 $$ return results[ CD ]
Line_15 $$ if (expr instanceof PySubscriptionExpression) -->Line_17 $$ if (indexExpr != null) [ CD ]
Line_16 $$ final PyExpression indexExpr = ((PySubscriptionExpression) expr).getIndexExpression()-->Line_17 $$ if (indexExpr != null) [ FD ]
Line_6 $$ if (GENERIC_CLASSES.contains(ancestor.getQualifiedName())) -->Line_7 $$ isGeneric = true[ CD ]
Line_15 $$ if (expr instanceof PySubscriptionExpression) -->Line_16 $$ final PyExpression indexExpr = ((PySubscriptionExpression) expr).getIndexExpression()[ CD ]
Line_11 $$ if (isGeneric) -->Line_12 $$ final ArrayList<PyGenericType> results = new ArrayList<PyGenericType>()[ CD ]
Line_17 $$ if (indexExpr != null) -->Line_18 $$ final PsiElement resolved = tryResolving(indexExpr, context)[ CD ]
Line_19 $$ final PyGenericType genericType = getGenericType(resolved, context)-->Line_20 $$ if (genericType != null) [ FD ]
Line_20 $$ if (genericType != null) -->Line_21 $$ results.add(genericType)[ CD ]
Line_16 $$ final PyExpression indexExpr = ((PySubscriptionExpression) expr).getIndexExpression()-->Line_18 $$ final PsiElement resolved = tryResolving(indexExpr, context)[ FD ]
Line_17 $$ if (indexExpr != null) -->Line_20 $$ if (genericType != null) [ CD ]
Line_5 $$ for (PyClass ancestor : cls.getAncestorClasses(context)) -->Line_6 $$ if (GENERIC_CLASSES.contains(ancestor.getQualifiedName())) [ FD ]
Line_12 $$ final ArrayList<PyGenericType> results = new ArrayList<PyGenericType>()-->Line_21 $$ results.add(genericType)[ FD ]
Line_17 $$ if (indexExpr != null) -->Line_19 $$ final PyGenericType genericType = getGenericType(resolved, context)[ CD ]
Line_4 $$ boolean isGeneric = false-->Line_7 $$ isGeneric = true[ FD ]
Line_19 $$ final PyGenericType genericType = getGenericType(resolved, context)-->Line_21 $$ results.add(genericType)[ FD ]
