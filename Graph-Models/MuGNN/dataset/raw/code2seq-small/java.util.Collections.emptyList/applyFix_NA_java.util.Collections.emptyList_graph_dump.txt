Line_10 $$ if (element == null)-->Line_11 $$ return[ CD ]
Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) -->Line_8 $$ if (exceptions.isEmpty()) [ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) [ CD ]
Line_8 $$ if (exceptions.isEmpty()) -->Line_9 $$ final PyElement element = myNode.getElement()[ CD ]
Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) -->Line_7 $$ super.finished(exceptions)[ CD ]
Line_8 $$ if (exceptions.isEmpty()) -->Line_10 $$ if (element == null)[ CD ]
Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) -->Line_8 $$ if (exceptions.isEmpty()) [ CD ]
Line_9 $$ final PyElement element = myNode.getElement()-->Line_10 $$ if (element == null)[ FD ]
Line_8 $$ if (exceptions.isEmpty()) -->Line_12 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ CD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_12 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() [ FD ]
Line_12 $$ CommandProcessor.getInstance().executeCommand(project, new Runnable() -->Line_16 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_9 $$ final PyElement element = myNode.getElement()-->Line_20 $$ AddImportHelper.addImportStatement(element.getContainingFile(), myPackageName, myAsName, AddImportHelper.ImportPriority.THIRD_PARTY, element)[ FD ]
Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) -->Line_28 $$ ui.install(Collections.singletonList(new PyRequirement(myPackageName)), Collections.<String>emptyList())[ FD ]
Line_3 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(project, mySdk, new UIListener(myModule) -->Line_7 $$ super.finished(exceptions)[ FD ]
Line_2 $$ public void applyFix(@NotNull final Project project, @NotNull final ProblemDescriptor descriptor) -->Line_28 $$ ui.install(Collections.singletonList(new PyRequirement(myPackageName)), Collections.<String>emptyList())[ CD ]
Line_16 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_20 $$ AddImportHelper.addImportStatement(element.getContainingFile(), myPackageName, myAsName, AddImportHelper.ImportPriority.THIRD_PARTY, element)[ CD ]
