Line_2 $$ public void webSocketScope() -->Line_21 $$ this.protocolHandler.handleMessageFromClient(this.session, textMessage, testChannel)[ CD ]
Line_3 $$ Runnable runnable = Mockito.mock(Runnable.class)-->Line_25 $$ verify(runnable, times(1)).run()[ FD ]
Line_2 $$ public void webSocketScope() -->Line_23 $$ this.protocolHandler.afterSessionEnded(this.session, CloseStatus.BAD_DATA, testChannel)[ CD ]
Line_4 $$ SimpAttributes simpAttributes = new SimpAttributes(this.session.getId(), this.session.getAttributes())-->Line_5 $$ simpAttributes.setAttribute("name", "value")[ FD ]
Line_4 $$ SimpAttributes simpAttributes = new SimpAttributes(this.session.getId(), this.session.getAttributes())-->Line_6 $$ simpAttributes.registerDestructionCallback("name", runnable)[ FD ]
Line_2 $$ public void webSocketScope() -->Line_19 $$ Message<byte[]> message = MessageBuilder.createMessage(EMPTY_PAYLOAD, headers.getMessageHeaders())[ CD ]
Line_2 $$ public void webSocketScope() -->Line_3 $$ Runnable runnable = Mockito.mock(Runnable.class)[ CD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_9 $$ SimpAttributes simpAttributes = SimpAttributesContextHolder.currentAttributes()[ CD ]
Line_2 $$ public void webSocketScope() -->Line_7 $$ MessageChannel testChannel = new MessageChannel() [ CD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_23 $$ this.protocolHandler.afterSessionEnded(this.session, CloseStatus.BAD_DATA, testChannel)[ FD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_11 $$ return true[ CD ]
Line_3 $$ Runnable runnable = Mockito.mock(Runnable.class)-->Line_6 $$ simpAttributes.registerDestructionCallback("name", runnable)[ FD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_10 $$ assertThat(simpAttributes.getAttribute("name"), is("value"))[ CD ]
Line_2 $$ public void webSocketScope() -->Line_25 $$ verify(runnable, times(1)).run()[ CD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_20 $$ TextMessage textMessage = new TextMessage(new StompEncoder().encode(message))[ FD ]
Line_2 $$ public void webSocketScope() -->Line_22 $$ assertEquals(Collections.<WebSocketMessage<?>>emptyList(), session.getSentMessages())[ CD ]
Line_2 $$ public void webSocketScope() -->Line_17 $$ this.protocolHandler.afterSessionStarted(this.session, this.channel)[ CD ]
Line_9 $$ SimpAttributes simpAttributes = SimpAttributesContextHolder.currentAttributes()-->Line_10 $$ assertThat(simpAttributes.getAttribute("name"), is("value"))[ FD ]
Line_2 $$ public void webSocketScope() -->Line_18 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.CONNECT)[ CD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_21 $$ this.protocolHandler.handleMessageFromClient(this.session, textMessage, testChannel)[ FD ]
Line_4 $$ SimpAttributes simpAttributes = new SimpAttributes(this.session.getId(), this.session.getAttributes())-->Line_10 $$ assertThat(simpAttributes.getAttribute("name"), is("value"))[ FD ]
Line_7 $$ MessageChannel testChannel = new MessageChannel() -->Line_14 $$ return false[ CD ]
Line_2 $$ public void webSocketScope() -->Line_4 $$ SimpAttributes simpAttributes = new SimpAttributes(this.session.getId(), this.session.getAttributes())[ CD ]
Line_2 $$ public void webSocketScope() -->Line_6 $$ simpAttributes.registerDestructionCallback("name", runnable)[ CD ]
Line_2 $$ public void webSocketScope() -->Line_24 $$ assertEquals(Collections.<WebSocketMessage<?>>emptyList(), this.session.getSentMessages())[ CD ]
Line_2 $$ public void webSocketScope() -->Line_5 $$ simpAttributes.setAttribute("name", "value")[ CD ]
