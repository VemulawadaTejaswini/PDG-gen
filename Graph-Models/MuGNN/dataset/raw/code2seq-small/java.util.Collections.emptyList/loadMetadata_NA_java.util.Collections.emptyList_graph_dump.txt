Line_10 $$ HgVersion version = hgvcs.getVersion()-->Line_11 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)[ FD ]
Line_13 $$ String[] templates = ArrayUtil.toStringArray(templateList)-->Line_14 $$ HgCommandResult result = getLogResult(project, root, version, limit, parameters, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_5 $$ if (factory == null) [ FD ]
Line_8 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_10 $$ HgVersion version = hgvcs.getVersion()[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_21 $$ List<Hash> parentsHash = new SmartList<Hash>()[ CD ]
Line_19 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)-->Line_20 $$ String subject = extractSubject(message)[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ FD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ FD ]
Line_11 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)-->Line_12 $$ templateList.add("[ FD ]
Line_11 $$ List<String> templateList = HgBaseLogParser.constructDefaultTemplate(version)-->Line_13 $$ String[] templates = ArrayUtil.toStringArray(templateList)[ FD ]
Line_10 $$ HgVersion version = hgvcs.getVersion()-->Line_14 $$ HgCommandResult result = getLogResult(project, root, version, limit, parameters, HgChangesetUtil.makeTemplate(templates))[ FD ]
Line_14 $$ HgCommandResult result = getLogResult(project, root, version, limit, parameters, HgChangesetUtil.makeTemplate(templates))-->Line_28 $$ return getCommitRecords(project, result, baseParser)[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_19 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ FD ]
Line_5 $$ if (factory == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_20 $$ String subject = extractSubject(message)[ CD ]
Line_21 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ FD ]
Line_20 $$ String subject = extractSubject(message)-->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ FD ]
Line_22 $$ for (HgRevisionNumber parent : parents) -->Line_23 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_4 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_23 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_21 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_23 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ CD ]
Line_19 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)-->Line_25 $$ return factory.createCommitMetadata(factory.createHash(changeset), parentsHash, revisionDate.getTime(), root, subject, author, email, message, author, email, revisionDate.getTime())[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_28 $$ return getCommitRecords(project, result, baseParser)[ FD ]
Line_15 $$ HgBaseLogParser<VcsCommitMetadata> baseParser = new HgBaseLogParser<VcsCommitMetadata>() -->Line_19 $$ String message = parseAdditionalStringAttribute(attributes, MESSAGE_INDEX)[ CD ]
