Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_9 $$ final Change s1Change = assertMovedChange(tree.myS1File)[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_11 $$ rollbackIMpl(Collections.singletonList(change), Collections.<Change>emptyList())[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_8 $$ final Change change = assertMovedChange(tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_10 $$ final Change s2Change = assertMovedChange(tree.myS2File)[ CD ]
Line_8 $$ final Change change = assertMovedChange(tree.mySourceDir)-->Line_11 $$ rollbackIMpl(Collections.singletonList(change), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_7 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_6 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackMoveDir() throws Exception -->Line_5 $$ VcsTestUtil.moveFileInCommand(myProject, tree.mySourceDir, tree.myTargetDir)[ CD ]
