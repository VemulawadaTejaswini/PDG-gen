Line_3 $$ List<Message<byte[]>> result = Collections.<Message<byte[]>>emptyList()-->Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)[ FD ]
Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)-->Line_13 $$ if (result.isEmpty()) [ FD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_7 $$ if (webSocketMessage instanceof BinaryMessage) [ FD ]
Line_4 $$ ByteBuffer byteBuffer-->Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)[ FD ]
Line_5 $$ if (webSocketMessage instanceof TextMessage) -->Line_7 $$ if (webSocketMessage instanceof BinaryMessage) [ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_13 $$ if (result.isEmpty()) [ CD ]
Line_7 $$ if (webSocketMessage instanceof BinaryMessage) -->Line_8 $$ byteBuffer = ((BinaryMessage) webSocketMessage).getPayload()[ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_3 $$ List<Message<byte[]>> result = Collections.<Message<byte[]>>emptyList()[ CD ]
Line_7 $$ if (webSocketMessage instanceof BinaryMessage) -->Line_10 $$ return result[ CD ]
Line_5 $$ if (webSocketMessage instanceof TextMessage) -->Line_6 $$ byteBuffer = ByteBuffer.wrap(((TextMessage) webSocketMessage).asBytes())[ CD ]
Line_4 $$ ByteBuffer byteBuffer-->Line_6 $$ byteBuffer = ByteBuffer.wrap(((TextMessage) webSocketMessage).asBytes())[ FD ]
Line_6 $$ byteBuffer = ByteBuffer.wrap(((TextMessage) webSocketMessage).asBytes())-->Line_8 $$ byteBuffer = ((BinaryMessage) webSocketMessage).getPayload()[ FD ]
Line_13 $$ if (result.isEmpty()) -->Line_14 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)[ CD ]
Line_4 $$ ByteBuffer byteBuffer-->Line_8 $$ byteBuffer = ((BinaryMessage) webSocketMessage).getPayload()[ FD ]
Line_14 $$ if (logger.isTraceEnabled()) -->Line_15 $$ logger.trace("Incomplete STOMP frame content received, bufferSize=" + this.bufferingDecoder.getBufferSize() + ", bufferSizeLimit=" + this.bufferingDecoder.getBufferSizeLimit() + ".")[ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_18 $$ return result[ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_5 $$ if (webSocketMessage instanceof TextMessage) [ CD ]
Line_8 $$ byteBuffer = ((BinaryMessage) webSocketMessage).getPayload()-->Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)[ FD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_4 $$ ByteBuffer byteBuffer[ CD ]
Line_2 $$ public List<Message<byte[]>> decode(WebSocketMessage<?> webSocketMessage) -->Line_5 $$ if (webSocketMessage instanceof TextMessage) [ FD ]
Line_3 $$ List<Message<byte[]>> result = Collections.<Message<byte[]>>emptyList()-->Line_13 $$ if (result.isEmpty()) [ FD ]
Line_6 $$ byteBuffer = ByteBuffer.wrap(((TextMessage) webSocketMessage).asBytes())-->Line_12 $$ result = this.bufferingDecoder.decode(byteBuffer)[ FD ]
