Line_2 $$ public void testValidationWithOptionalFiles() throws Exception -->Line_4 $$ assertEquals(new HashSet<ValidationResult>(Arrays.asList(new ValidationResult(ValidationResult.Kind.ERROR, "lib/annotations.jar", ValidationResult.Action.UPDATE, ValidationResult.MODIFIED_MESSAGE, ValidationResult.Option.IGNORE))), new HashSet<ValidationResult>(myPatch.validate(myOlderDir, TEST_UI)))[ CD ]
Line_2 $$ public void testValidationWithOptionalFiles() throws Exception -->Line_5 $$ PatchSpec spec = new PatchSpec().setOldFolder(myOlderDir.getAbsolutePath()).setNewFolder(myNewerDir.getAbsolutePath()).setOptionalFiles(Arrays.asList("lib/annotations.jar"))[ CD ]
Line_2 $$ public void testValidationWithOptionalFiles() throws Exception -->Line_7 $$ FileUtil.delete(new File(myOlderDir, "lib/annotations.jar"))[ CD ]
Line_2 $$ public void testValidationWithOptionalFiles() throws Exception -->Line_8 $$ assertEquals(Collections.<ValidationResult>emptyList(), myPatch.validate(myOlderDir, TEST_UI))[ CD ]
Line_2 $$ public void testValidationWithOptionalFiles() throws Exception -->Line_3 $$ FileUtil.writeToFile(new File(myOlderDir, "lib/annotations.jar"), "changed".getBytes())[ CD ]
