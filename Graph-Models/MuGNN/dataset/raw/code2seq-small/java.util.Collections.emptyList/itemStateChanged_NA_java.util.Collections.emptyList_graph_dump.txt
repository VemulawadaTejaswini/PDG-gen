Line_12 $$ if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) -->Line_26 $$ if (createRemote) [ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_30 $$ if (fork.getRemoteName() == null) [ FD ]
Line_17 $$ createRemote = true-->Line_23 $$ createRemote = GithubNotifications.showYesNoDialog(project, "Can't Find Remote", "Configure remote for '" + fork.getPath().getUser() + "'?", ourDoNotAskOption)[ FD ]
Line_30 $$ if (fork.getRemoteName() == null) -->Line_33 $$ myPanel.setDiffEnabled(true)[ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_11 $$ myPanel.setSelectedBranch(fork.getDefaultBranch())[ FD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_11 $$ myPanel.setSelectedBranch(fork.getDefaultBranch())[ CD ]
Line_12 $$ if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) -->Line_14 $$ boolean createRemote = false[ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_8 $$ if (fork == null)[ FD ]
Line_2 $$ public void itemStateChanged(ItemEvent e) -->Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) [ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_13 $$ fork.setProposedToCreateRemote(true)[ FD ]
Line_26 $$ if (createRemote) -->Line_27 $$ myWorker.configureRemote(fork)[ CD ]
Line_3 $$ if (e.getStateChange() == ItemEvent.DESELECTED) -->Line_4 $$ myPanel.setBranches(Collections.<BranchInfo>emptyList())[ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_34 $$ myWorker.launchFetchRemote(fork)[ FD ]
Line_30 $$ if (fork.getRemoteName() == null) -->Line_34 $$ myWorker.launchFetchRemote(fork)[ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_23 $$ createRemote = GithubNotifications.showYesNoDialog(project, "Can't Find Remote", "Configure remote for '" + fork.getPath().getUser() + "'?", ourDoNotAskOption)[ FD ]
Line_2 $$ public void itemStateChanged(ItemEvent e) -->Line_3 $$ if (e.getStateChange() == ItemEvent.DESELECTED) [ CD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()[ CD ]
Line_14 $$ boolean createRemote = false-->Line_23 $$ createRemote = GithubNotifications.showYesNoDialog(project, "Can't Find Remote", "Configure remote for '" + fork.getPath().getUser() + "'?", ourDoNotAskOption)[ FD ]
Line_14 $$ boolean createRemote = false-->Line_17 $$ createRemote = true[ FD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_10 $$ myPanel.setBranches(fork.getBranches())[ CD ]
Line_30 $$ if (fork.getRemoteName() == null) -->Line_31 $$ myPanel.setDiffEnabled(false)[ CD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_30 $$ if (fork.getRemoteName() == null) [ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_12 $$ if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) [ FD ]
Line_17 $$ createRemote = true-->Line_20 $$ createRemote = false[ FD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_8 $$ if (fork == null)[ CD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_10 $$ myPanel.setBranches(fork.getBranches())[ FD ]
Line_8 $$ if (fork == null)-->Line_9 $$ return[ CD ]
Line_2 $$ public void itemStateChanged(ItemEvent e) -->Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()[ FD ]
Line_20 $$ createRemote = false-->Line_23 $$ createRemote = GithubNotifications.showYesNoDialog(project, "Can't Find Remote", "Configure remote for '" + fork.getPath().getUser() + "'?", ourDoNotAskOption)[ FD ]
Line_14 $$ boolean createRemote = false-->Line_20 $$ createRemote = false[ FD ]
Line_12 $$ if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) -->Line_13 $$ fork.setProposedToCreateRemote(true)[ CD ]
Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) -->Line_12 $$ if (fork.getRemoteName() == null && !fork.isProposedToCreateRemote()) [ CD ]
Line_2 $$ public void itemStateChanged(ItemEvent e) -->Line_6 $$ if (e.getStateChange() == ItemEvent.SELECTED) [ FD ]
Line_2 $$ public void itemStateChanged(ItemEvent e) -->Line_3 $$ if (e.getStateChange() == ItemEvent.DESELECTED) [ FD ]
Line_7 $$ final ForkInfo fork = (ForkInfo) e.getItem()-->Line_27 $$ myWorker.configureRemote(fork)[ FD ]
