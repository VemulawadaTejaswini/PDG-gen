Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_11 $$ List<HgRevisionNumber> parents = vcsRevisionNumber.getParents()-->Line_12 $$ HgRevisionNumber firstParent = parents.isEmpty() ? null : parents.get(0)[ FD ]
Line_12 $$ HgRevisionNumber firstParent = parents.isEmpty() ? null : parents.get(0)-->Line_28 $$ changes.add(createChange(project, root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_17 $$ final Collection<Change> changes = new ArrayList<Change>()-->Line_22 $$ changes.add(createChange(project, root, null, null, file, vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_8 $$ List<VcsFullCommitDetails> vcsFullCommitDetailsList = new ArrayList<VcsFullCommitDetails>()-->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()[ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_4 $$ if (factory == null) [ FD ]
Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_27 $$ for (Map.Entry<String, String> copiedFile : revision.getCopiedFiles().entrySet()) [ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() -->Line_32 $$ return changes[ CD ]
Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_21 $$ for (String file : revision.getAddedFiles()) [ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_36 $$ return vcsFullCommitDetailsList[ CD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_7 $$ List<HgFileRevision> hgRevisions = getCommitRecords(project, result, new HgFileRevisionLogParser(project, getOriginalHgFile(project, root), version), silent)[ FD ]
Line_17 $$ final Collection<Change> changes = new ArrayList<Change>()-->Line_28 $$ changes.add(createChange(project, root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_27 $$ for (Map.Entry<String, String> copiedFile : revision.getCopiedFiles().entrySet()) -->Line_28 $$ changes.add(createChange(project, root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_12 $$ HgRevisionNumber firstParent = parents.isEmpty() ? null : parents.get(0)-->Line_25 $$ changes.add(createChange(project, root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED))[ FD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_11 $$ List<HgRevisionNumber> parents = vcsRevisionNumber.getParents()[ FD ]
Line_17 $$ final Collection<Change> changes = new ArrayList<Change>()-->Line_25 $$ changes.add(createChange(project, root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED))[ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_15 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)[ CD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_7 $$ List<HgFileRevision> hgRevisions = getCommitRecords(project, result, new HgFileRevisionLogParser(project, getOriginalHgFile(project, root), version), silent)[ CD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_25 $$ changes.add(createChange(project, root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED))[ FD ]
Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_18 $$ for (String file : revision.getModifiedFiles()) [ FD ]
Line_4 $$ if (factory == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_22 $$ changes.add(createChange(project, root, null, null, file, vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_3 $$ final VcsLogObjectsFactory factory = getObjectsFactoryWithDisposeCheck(project)-->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_8 $$ List<VcsFullCommitDetails> vcsFullCommitDetailsList = new ArrayList<VcsFullCommitDetails>()[ CD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_25 $$ changes.add(createChange(project, root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED))[ FD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_19 $$ changes.add(createChange(project, root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED))[ FD ]
Line_14 $$ for (HgRevisionNumber parent : parents) -->Line_15 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_12 $$ HgRevisionNumber firstParent = parents.isEmpty() ? null : parents.get(0)-->Line_19 $$ changes.add(createChange(project, root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED))[ FD ]
Line_18 $$ for (String file : revision.getModifiedFiles()) -->Line_25 $$ changes.add(createChange(project, root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED))[ FD ]
Line_13 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_15 $$ parentsHash.add(factory.createHash(parent.getChangeset()))[ FD ]
Line_18 $$ for (String file : revision.getModifiedFiles()) -->Line_19 $$ changes.add(createChange(project, root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED))[ FD ]
Line_13 $$ List<Hash> parentsHash = new SmartList<Hash>()-->Line_30 $$ vcsFullCommitDetailsList.add(factory.createFullDetails(factory.createHash(vcsRevisionNumber.getChangeset()), parentsHash, revision.getRevisionDate().getTime(), root, vcsRevisionNumber.getSubject(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), vcsRevisionNumber.getCommitMessage(), vcsRevisionNumber.getAuthor(), vcsRevisionNumber.getEmail(), revision.getRevisionDate().getTime(), new ThrowableComputable<Collection<Change>, Exception>() [ FD ]
Line_9 $$ for (HgFileRevision revision : hgRevisions) -->Line_24 $$ for (String file : revision.getDeletedFiles()) [ FD ]
Line_17 $$ final Collection<Change> changes = new ArrayList<Change>()-->Line_19 $$ changes.add(createChange(project, root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED))[ FD ]
Line_18 $$ for (String file : revision.getModifiedFiles()) -->Line_22 $$ changes.add(createChange(project, root, null, null, file, vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_4 $$ if (factory == null) [ CD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_19 $$ changes.add(createChange(project, root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED))[ FD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_22 $$ changes.add(createChange(project, root, null, null, file, vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_2 $$ public static List<? extends VcsFullCommitDetails> createFullCommitsFromResult(@NotNull Project project, @NotNull VirtualFile root, @Nullable HgCommandResult result, @NotNull HgVersion version, boolean silent) -->Line_28 $$ changes.add(createChange(project, root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED))[ FD ]
Line_10 $$ HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber()-->Line_28 $$ changes.add(createChange(project, root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED))[ FD ]
