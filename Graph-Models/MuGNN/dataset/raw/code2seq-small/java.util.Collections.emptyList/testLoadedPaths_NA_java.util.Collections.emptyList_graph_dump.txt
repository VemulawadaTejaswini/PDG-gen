Line_11 $$ Builder builder = new Builder()-->Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_24 $$ File file = new File(newBootstrapClassPath)-->Line_25 $$ URI uri = file.toURI()[ FD ]
Line_25 $$ URI uri = file.toURI()-->Line_26 $$ Assert.assertEquals(urls[0], uri.toURL())[ FD ]
Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_18 $$ Assert.assertEquals(newRuntimeClassPath, processConfig.getRuntimeClassPath())[ FD ]
Line_21 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_22 $$ URL[] urls = urlClassLoader.getURLs()[ FD ]
Line_8 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_46 $$ loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_19 $$ ClassLoader classLoader = processConfig.getReactClassLoader()-->Line_20 $$ Assert.assertSame(URLClassLoader.class, classLoader.getClass())[ FD ]
Line_27 $$ file = new File(newRuntimeClassPath)-->Line_28 $$ uri = file.toURI()[ FD ]
Line_6 $$ String newBootstrapClassPath = "newBootstrapClassPath"-->Line_17 $$ Assert.assertEquals(newBootstrapClassPath, processConfig.getBootstrapClassPath())[ FD ]
Line_32 $$ Map<Object, Object> handlers = ReflectionTestUtil.getFieldValue(URL.class, "handlers")-->Line_51 $$ handlers.clear()[ FD ]
Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_17 $$ Assert.assertEquals(newBootstrapClassPath, processConfig.getBootstrapClassPath())[ FD ]
Line_11 $$ Builder builder = new Builder()-->Line_13 $$ builder.setBootstrapClassPath("oldBootstrapClassPath")[ FD ]
Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_19 $$ ClassLoader classLoader = processConfig.getReactClassLoader()[ FD ]
Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_16 $$ Assert.assertSame(arguments, processConfig.getArguments())[ FD ]
Line_10 $$ List<String> arguments = Collections.emptyList()-->Line_16 $$ Assert.assertSame(arguments, processConfig.getArguments())[ FD ]
Line_24 $$ File file = new File(newBootstrapClassPath)-->Line_27 $$ file = new File(newRuntimeClassPath)[ FD ]
Line_7 $$ String newRuntimeClassPath = "newRuntimeClassPath"-->Line_18 $$ Assert.assertEquals(newRuntimeClassPath, processConfig.getRuntimeClassPath())[ FD ]
Line_10 $$ List<String> arguments = Collections.emptyList()-->Line_12 $$ builder.setArguments(arguments)[ FD ]
Line_11 $$ Builder builder = new Builder()-->Line_14 $$ builder.setRuntimeClassPath("oldRuntimeClassPath")[ FD ]
Line_25 $$ URI uri = file.toURI()-->Line_29 $$ Assert.assertEquals(urls[1], uri.toURL())[ FD ]
Line_24 $$ File file = new File(newBootstrapClassPath)-->Line_28 $$ uri = file.toURI()[ FD ]
Line_8 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_9 $$ Assert.assertSame(inputPaths, loadedPaths.getInputPaths())[ FD ]
Line_25 $$ URI uri = file.toURI()-->Line_28 $$ uri = file.toURI()[ FD ]
Line_11 $$ Builder builder = new Builder()-->Line_46 $$ loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_28 $$ uri = file.toURI()-->Line_29 $$ Assert.assertEquals(urls[1], uri.toURL())[ FD ]
Line_33 $$ handlers.put("file", new URLStreamHandler() -->Line_37 $$ ReflectionUtil.throwException(malformedURLException)[ CD ]
Line_11 $$ Builder builder = new Builder()-->Line_12 $$ builder.setArguments(arguments)[ FD ]
Line_8 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_15 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_32 $$ Map<Object, Object> handlers = ReflectionTestUtil.getFieldValue(URL.class, "handlers")-->Line_33 $$ handlers.put("file", new URLStreamHandler() [ FD ]
