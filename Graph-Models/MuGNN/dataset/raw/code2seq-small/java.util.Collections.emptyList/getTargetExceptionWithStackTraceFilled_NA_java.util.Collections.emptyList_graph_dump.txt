Line_9 $$ if (methods.size() > 0) -->Line_11 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ CD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_22 $$ process.printToConsole("\tat ")[ FD ]
Line_21 $$ for (Value stackElement : traceArray.getValues()) -->Line_23 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, stackElement))[ FD ]
Line_4 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_11 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_8 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")-->Line_11 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_9 $$ if (methods.size() > 0) -->Line_14 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null[ CD ]
Line_4 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_14 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null[ FD ]
Line_16 $$ final ArrayReference traceArray = (ArrayReference) trace-->Line_17 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()[ FD ]
Line_15 $$ if (trace instanceof ArrayReference) -->Line_18 $$ if (componentType instanceof ClassType) [ CD ]
Line_17 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()-->Line_18 $$ if (componentType instanceof ClassType) [ FD ]
Line_9 $$ if (methods.size() > 0) -->Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()[ CD ]
Line_4 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_7 $$ final ReferenceType refType = exceptionObj.referenceType()[ FD ]
Line_16 $$ final ArrayReference traceArray = (ArrayReference) trace-->Line_21 $$ for (Value stackElement : traceArray.getValues()) [ FD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_24 $$ process.printToConsole("\n")[ FD ]
Line_14 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null-->Line_15 $$ if (trace instanceof ArrayReference) [ FD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_19 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ FD ]
Line_7 $$ final ReferenceType refType = exceptionObj.referenceType()-->Line_8 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")[ FD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_20 $$ process.printToConsole("\n")[ FD ]
Line_18 $$ if (componentType instanceof ClassType) -->Line_20 $$ process.printToConsole("\n")[ CD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_11 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_15 $$ if (trace instanceof ArrayReference) -->Line_16 $$ final ArrayReference traceArray = (ArrayReference) trace[ CD ]
Line_8 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")-->Line_9 $$ if (methods.size() > 0) [ FD ]
Line_4 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_19 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ FD ]
Line_15 $$ if (trace instanceof ArrayReference) -->Line_17 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()[ CD ]
Line_9 $$ if (methods.size() > 0) -->Line_15 $$ if (trace instanceof ArrayReference) [ CD ]
Line_18 $$ if (componentType instanceof ClassType) -->Line_19 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ CD ]
Line_10 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_23 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, stackElement))[ FD ]
