Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_17 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ FD ]
Line_6 $$ final ReferenceType refType = exceptionObj.referenceType()-->Line_11 $$ final Field traceField = refType.fieldByName("stackTrace")[ FD ]
Line_6 $$ final ReferenceType refType = exceptionObj.referenceType()-->Line_7 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")[ FD ]
Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_10 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()[ FD ]
Line_14 $$ final ArrayReference traceArray = (ArrayReference) trace-->Line_15 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()[ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_17 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ FD ]
Line_13 $$ if (trace instanceof ArrayReference) -->Line_15 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()[ CD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()[ FD ]
Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_22 $$ process.printToConsole("\n")[ FD ]
Line_8 $$ if (methods.size() > 0) -->Line_12 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null[ CD ]
Line_13 $$ if (trace instanceof ArrayReference) -->Line_16 $$ if (componentType instanceof ClassType) [ CD ]
Line_14 $$ final ArrayReference traceArray = (ArrayReference) trace-->Line_19 $$ for (Value stackElement : traceArray.getValues()) [ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_10 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_15 $$ final Type componentType = ((ArrayType) traceArray.referenceType()).componentType()-->Line_16 $$ if (componentType instanceof ClassType) [ FD ]
Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_17 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_33 $$ return exceptionObj[ CD ]
Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_12 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null[ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_21 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, stackElement))[ FD ]
Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_20 $$ process.printToConsole("\tat ")[ FD ]
Line_8 $$ if (methods.size() > 0) -->Line_11 $$ final Field traceField = refType.fieldByName("stackTrace")[ CD ]
Line_13 $$ if (trace instanceof ArrayReference) -->Line_14 $$ final ArrayReference traceArray = (ArrayReference) trace[ CD ]
Line_16 $$ if (componentType instanceof ClassType) -->Line_18 $$ process.printToConsole("\n")[ CD ]
Line_16 $$ if (componentType instanceof ClassType) -->Line_17 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, exceptionObj))[ CD ]
Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_18 $$ process.printToConsole("\n")[ FD ]
Line_19 $$ for (Value stackElement : traceArray.getValues()) -->Line_21 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, stackElement))[ FD ]
Line_7 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")-->Line_10 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_8 $$ if (methods.size() > 0) -->Line_13 $$ if (trace instanceof ArrayReference) [ CD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()[ CD ]
Line_12 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null-->Line_13 $$ if (trace instanceof ArrayReference) [ FD ]
Line_7 $$ final List<Method> methods = refType.methodsByName("getStackTrace", "()[Ljava/lang/StackTraceElement;")-->Line_8 $$ if (methods.size() > 0) [ FD ]
Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()-->Line_21 $$ process.printToConsole(DebuggerUtils.getValueAsString(evaluationContext, stackElement))[ FD ]
Line_11 $$ final Field traceField = refType.fieldByName("stackTrace")-->Line_12 $$ final Value trace = traceField != null ? exceptionObj.getValue(traceField) : null[ FD ]
Line_8 $$ if (methods.size() > 0) -->Line_10 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ CD ]
Line_8 $$ if (methods.size() > 0) -->Line_9 $$ final DebugProcessImpl process = evaluationContext.getDebugProcess()[ CD ]
Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_6 $$ final ReferenceType refType = exceptionObj.referenceType()[ FD ]
Line_3 $$ final ObjectReference exceptionObj = ex.getExceptionFromTargetVM()-->Line_10 $$ process.invokeMethod(evaluationContext, exceptionObj, methods.get(0), Collections.emptyList())[ FD ]
Line_2 $$ private static ObjectReference getTargetExceptionWithStackTraceFilled(final EvaluationContextImpl evaluationContext, EvaluateException ex) -->Line_4 $$ if (exceptionObj != null && evaluationContext != null) [ CD ]
