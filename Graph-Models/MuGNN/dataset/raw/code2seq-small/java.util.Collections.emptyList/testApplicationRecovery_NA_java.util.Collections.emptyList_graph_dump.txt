Line_24 $$ String modUser = "modify_user1"-->Line_39 $$ acls.put(ApplicationAccessType.MODIFY_APP, modUser)[ FD ]
Line_30 $$ Map<String, LocalResource> localResources = Collections.emptyMap()-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_49 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_81 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_40 $$ acls.put(ApplicationAccessType.VIEW_APP, viewUser)[ FD ]
Line_37 $$ ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_92 $$ cm = createContainerManager(context)-->Line_94 $$ cm.start()[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_93 $$ cm.init(conf)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_46 $$ assertNotNull(app)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_96 $$ cm.stop()[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_96 $$ cm.stop()[ FD ]
Line_9 $$ NMStateStoreService stateStore = new NMMemoryStateStoreService()-->Line_11 $$ stateStore.start()[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_48 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_68 $$ finishedApps.add(appId)[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_74 $$ cm = createContainerManager(context)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_62 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_6 $$ conf.set(YarnConfiguration.NM_ADDRESS, "localhost:1234")[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_31 $$ Map<String, String> containerEnv = Collections.emptyMap()-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_94 $$ cm.start()[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_95 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_91 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_95 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_55 $$ cm = createContainerManager(context)[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_56 $$ cm.init(conf)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_56 $$ cm.init(conf)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_44 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_5 $$ conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED, true)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_82 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_57 $$ cm.start()[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_64 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_95 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_55 $$ cm = createContainerManager(context)[ FD ]
Line_35 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_36 $$ containerCreds.writeTokenStorageToStream(dob)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_50 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_82 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_55 $$ cm = createContainerManager(context)[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_50 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_65 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_63 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_83 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_82 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_70 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_74 $$ cm = createContainerManager(context)[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_69 $$ cm.handle(new CMgrCompletedAppsEvent(finishedApps, CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_58 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_76 $$ cm.start()[ FD ]
Line_92 $$ cm = createContainerManager(context)-->Line_93 $$ cm.init(conf)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_95 $$ assertTrue(context.getApplications().isEmpty())[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_51 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_70 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_80 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_78 $$ app = context.getApplications().get(appId)-->Line_88 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_75 $$ cm.init(conf)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_60 $$ assertNotNull(app)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_42 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_64 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_82 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_91 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_28 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1)-->Line_29 $$ ContainerId cid = ContainerId.newInstance(attemptId, 1)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_65 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_69 $$ cm.handle(new CMgrCompletedAppsEvent(finishedApps, CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER))[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_93 $$ cm.init(conf)[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_94 $$ cm.start()[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_10 $$ stateStore.init(conf)[ FD ]
Line_42 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)-->Line_43 $$ assertTrue(startResponse.getFailedRequests().isEmpty())[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_82 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_38 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_40 $$ acls.put(ApplicationAccessType.VIEW_APP, viewUser)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_76 $$ cm.start()[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_59 $$ app = context.getApplications().get(appId)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_74 $$ cm = createContainerManager(context)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_74 $$ cm = createContainerManager(context)[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_56 $$ cm.init(conf)[ FD ]
Line_24 $$ String modUser = "modify_user1"-->Line_62 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_34 $$ Credentials containerCreds = new Credentials()-->Line_36 $$ containerCreds.writeTokenStorageToStream(dob)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_78 $$ app = context.getApplications().get(appId)-->Line_80 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_63 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_78 $$ app = context.getApplications().get(appId)-->Line_87 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_75 $$ cm.init(conf)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_75 $$ cm.init(conf)[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_63 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_81 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_32 $$ List<String> containerCmds = Collections.emptyList()-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_63 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)-->Line_42 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_84 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_38 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_39 $$ acls.put(ApplicationAccessType.MODIFY_APP, modUser)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_49 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_78 $$ app = context.getApplications().get(appId)-->Line_79 $$ assertNotNull(app)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_48 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_45 $$ Application app = context.getApplications().get(appId)[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_96 $$ cm.stop()[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_91 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_83 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_24 $$ String modUser = "modify_user1"-->Line_48 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_62 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_79 $$ assertNotNull(app)[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_81 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_80 $$ waitForAppState(app, ApplicationState.APPLICATION_RESOURCES_CLEANINGUP)[ FD ]
Line_38 $$ Map<ApplicationAccessType, String> acls = new HashMap<ApplicationAccessType, String>()-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_91 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_65 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_74 $$ cm = createContainerManager(context)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_64 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_87 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_88 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_55 $$ cm = createContainerManager(context)-->Line_76 $$ cm.start()[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_59 $$ app = context.getApplications().get(appId)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_45 $$ Application app = context.getApplications().get(appId)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_84 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_91 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
Line_35 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_37 $$ ByteBuffer containerTokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength())[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_94 $$ cm.start()[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_47 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_61 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_92 $$ cm = createContainerManager(context)-->Line_96 $$ cm.stop()[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_75 $$ cm.init(conf)[ FD ]
Line_24 $$ String modUser = "modify_user1"-->Line_81 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_25 $$ String viewUser = "view_user1"-->Line_64 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_88 $$ app.handle(new ApplicationEvent(app.getAppId(), ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED))[ FD ]
Line_33 $$ Map<String, ByteBuffer> serviceData = Collections.emptyMap()-->Line_41 $$ ContainerLaunchContext clc = ContainerLaunchContext.newInstance(localResources, containerEnv, containerCmds, serviceData, containerTokens, acls)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_51 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_50 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_26 $$ String enemyUser = "enemy_user"-->Line_84 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_42 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_81 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_49 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_57 $$ cm.start()[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_58 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_77 $$ assertEquals(1, context.getApplications().size())[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_93 $$ cm.init(conf)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_78 $$ app = context.getApplications().get(appId)[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_14 $$ cm.init(conf)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_20 $$ context.getContainerTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_61 $$ waitForAppState(app, ApplicationState.INITING)[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_7 $$ conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true)[ FD ]
Line_74 $$ cm = createContainerManager(context)-->Line_93 $$ cm.init(conf)[ FD ]
Line_26 $$ String enemyUser = "enemy_user"-->Line_65 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_29 $$ ContainerId cid = ContainerId.newInstance(attemptId, 1)-->Line_42 $$ StartContainersResponse startResponse = startContainer(context, cm, cid, clc)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_28 $$ ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1)[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_59 $$ app = context.getApplications().get(appId)[ FD ]
Line_12 $$ Context context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_21 $$ context.getNMTokenSecretManager().setMasterKey(masterKey)[ FD ]
Line_27 $$ ApplicationId appId = ApplicationId.newInstance(0, 1)-->Line_59 $$ app = context.getApplications().get(appId)[ FD ]
Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_83 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_8 $$ conf.set(YarnConfiguration.YARN_ADMIN_ACL, "yarn_admin_user")[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_92 $$ cm = createContainerManager(context)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_87 $$ assertEquals(app.getApplicationState(), ApplicationState.FINISHED)[ FD ]
Line_9 $$ NMStateStoreService stateStore = new NMMemoryStateStoreService()-->Line_10 $$ stateStore.init(conf)[ FD ]
Line_59 $$ app = context.getApplications().get(appId)-->Line_60 $$ assertNotNull(app)[ FD ]
Line_26 $$ String enemyUser = "enemy_user"-->Line_51 $$ assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser), ApplicationAccessType.VIEW_APP, appUser, appId))[ FD ]
Line_45 $$ Application app = context.getApplications().get(appId)-->Line_79 $$ assertNotNull(app)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_62 $$ assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser), ApplicationAccessType.MODIFY_APP, appUser, appId))[ FD ]
Line_13 $$ ContainerManagerImpl cm = createContainerManager(context)-->Line_15 $$ cm.start()[ FD ]
Line_4 $$ YarnConfiguration conf = new YarnConfiguration()-->Line_14 $$ cm.init(conf)[ FD ]
Line_54 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)-->Line_73 $$ context = new NMContext(new NMContainerTokenSecretManager(conf), new NMTokenSecretManagerInNM(), null, new ApplicationACLsManager(conf), stateStore)[ FD ]
