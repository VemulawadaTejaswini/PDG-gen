Line_7 $$ for (ValidationResult each : preparationResult.validationResults) -->Line_13 $$ assertTrue(each.toString(), each.kind != ValidationResult.Kind.ERROR)[ FD ]
Line_17 $$ Map<String, Long> patched = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_19 $$ assertEquals(patched, target)[ FD ]
Line_17 $$ Map<String, Long> patched = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_23 $$ assertNotEquals(original, patched)[ FD ]
Line_5 $$ File backup = getTempFile("backup")-->Line_24 $$ PatchFileCreator.revert(preparationResult, appliedActions, backup, TEST_UI)[ FD ]
Line_8 $$ if (patch.isStrict()) -->Line_9 $$ assertFalse(each.options.contains(ValidationResult.Option.NONE))[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_5 $$ File backup = getTempFile("backup")[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_8 $$ if (patch.isStrict()) [ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_3 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
Line_16 $$ List<PatchAction> appliedActions = PatchFileCreator.apply(preparationResult, options, backup, TEST_UI).appliedActions-->Line_24 $$ PatchFileCreator.revert(preparationResult, appliedActions, backup, TEST_UI)[ FD ]
Line_25 $$ Map<String, Long> reverted = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_26 $$ assertEquals(original, reverted)[ FD ]
Line_8 $$ if (patch.isStrict()) -->Line_10 $$ assertTrue(each.options.size() > 0)[ CD ]
Line_4 $$ Map<String, Long> target = patch.digestFiles(myNewerDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_19 $$ assertEquals(patched, target)[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_16 $$ List<PatchAction> appliedActions = PatchFileCreator.apply(preparationResult, options, backup, TEST_UI).appliedActions[ FD ]
Line_5 $$ File backup = getTempFile("backup")-->Line_16 $$ List<PatchAction> appliedActions = PatchFileCreator.apply(preparationResult, options, backup, TEST_UI).appliedActions[ FD ]
Line_18 $$ if (patch.isStrict()) -->Line_19 $$ assertEquals(patched, target)[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_24 $$ PatchFileCreator.revert(preparationResult, appliedActions, backup, TEST_UI)[ CD ]
Line_3 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_26 $$ assertEquals(original, reverted)[ FD ]
Line_8 $$ if (patch.isStrict()) -->Line_11 $$ options.put(each.path, each.options.get(0))[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_24 $$ PatchFileCreator.revert(preparationResult, appliedActions, backup, TEST_UI)[ FD ]
Line_6 $$ HashMap<String, ValidationResult.Option> options = new HashMap<String, ValidationResult.Option>()-->Line_11 $$ options.put(each.path, each.options.get(0))[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_17 $$ Map<String, Long> patched = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_18 $$ if (patch.isStrict()) [ CD ]
Line_6 $$ HashMap<String, ValidationResult.Option> options = new HashMap<String, ValidationResult.Option>()-->Line_16 $$ List<PatchAction> appliedActions = PatchFileCreator.apply(preparationResult, options, backup, TEST_UI).appliedActions[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_23 $$ assertNotEquals(original, patched)[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_16 $$ List<PatchAction> appliedActions = PatchFileCreator.apply(preparationResult, options, backup, TEST_UI).appliedActions[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_17 $$ Map<String, Long> patched = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_4 $$ Map<String, Long> target = patch.digestFiles(myNewerDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_3 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_25 $$ Map<String, Long> reverted = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_6 $$ HashMap<String, ValidationResult.Option> options = new HashMap<String, ValidationResult.Option>()[ CD ]
Line_18 $$ if (patch.isStrict()) -->Line_21 $$ assertAppliedCorrectly()[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_18 $$ if (patch.isStrict()) [ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_26 $$ assertEquals(original, reverted)[ CD ]
Line_3 $$ Map<String, Long> original = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)-->Line_23 $$ assertNotEquals(original, patched)[ FD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_4 $$ Map<String, Long> target = patch.digestFiles(myNewerDir, Collections.<String>emptyList(), false, TEST_UI)[ FD ]
Line_8 $$ if (patch.isStrict()) -->Line_13 $$ assertTrue(each.toString(), each.kind != ValidationResult.Kind.ERROR)[ CD ]
Line_2 $$ private void assertAppliedAndRevertedCorrectly(Patch patch, PatchFileCreator.PreparationResult preparationResult) throws IOException, OperationCancelledException -->Line_25 $$ Map<String, Long> reverted = patch.digestFiles(myOlderDir, Collections.<String>emptyList(), false, TEST_UI)[ CD ]
