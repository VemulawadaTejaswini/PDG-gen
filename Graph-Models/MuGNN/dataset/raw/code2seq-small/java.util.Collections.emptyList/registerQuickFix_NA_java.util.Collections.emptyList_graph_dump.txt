Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_4 $$ int index = reference.getIndex()[ FD ]
Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)-->Line_70 $$ directory.checkCreateFile(newFileName)[ FD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ FD ]
Line_36 $$ if (context == null && ApplicationManager.getApplication().isUnitTestMode()) -->Line_37 $$ context = defaultContexts.iterator().next()[ CD ]
Line_14 $$ if (index > 0) -->Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()[ CD ]
Line_13 $$ PsiFile containingFile = element == null ? null : element.getContainingFile()-->Line_21 $$ Module module = containingFile == null ? null : ModuleUtilCore.findModuleForPsiElement(containingFile)[ FD ]
Line_58 $$ if (!reference.isLast()) -->Line_74 $$ isdirectory = false[ CD ]
Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)-->Line_46 $$ if (directory == null)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_77 $$ return Collections.singletonList(action)[ CD ]
Line_52 $$ final RenameFileReferenceIntentionAction renameRefAction = new RenameFileReferenceIntentionAction(existingElementName, reference)-->Line_54 $$ return Arrays.asList(renameRefAction, renameFileFix)[ FD ]
Line_50 $$ if (psiElement != null) -->Line_53 $$ final RenameFileFix renameFileFix = new RenameFileFix(newFileName)[ CD ]
Line_12 $$ PsiElement element = reference.getElement()-->Line_13 $$ PsiFile containingFile = element == null ? null : element.getContainingFile()[ FD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_37 $$ context = defaultContexts.iterator().next()[ FD ]
Line_3 $$ final FileReferenceSet fileReferenceSet = reference.getFileReferenceSet()-->Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()[ FD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_29 $$ if (module != null && module == getModuleForContext(defaultContext)) [ FD ]
Line_29 $$ if (module != null && module == getModuleForContext(defaultContext)) -->Line_30 $$ context = defaultContext[ CD ]
Line_37 $$ context = defaultContexts.iterator().next()-->Line_40 $$ if (context == null)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_58 $$ if (!reference.isLast()) [ FD ]
Line_17 $$ final Collection<PsiFileSystemItem> defaultContexts = fileReferenceSet.getDefaultContexts()-->Line_18 $$ if (defaultContexts.isEmpty()) [ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_40 $$ if (context == null)[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_58 $$ if (!reference.isLast()) [ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_13 $$ PsiFile containingFile = element == null ? null : element.getContainingFile()[ CD ]
Line_30 $$ context = defaultContext-->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ FD ]
Line_58 $$ if (!reference.isLast()) -->Line_67 $$ if (ft instanceof UnknownFileType)[ CD ]
Line_37 $$ context = defaultContexts.iterator().next()-->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ FD ]
Line_26 $$ if (context == null) -->Line_27 $$ context = defaultContext[ CD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_30 $$ context = defaultContext[ FD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_26 $$ if (context == null) [ FD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_25 $$ if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) [ FD ]
Line_50 $$ if (psiElement != null) -->Line_51 $$ final String existingElementName = ((PsiNamedElement) psiElement).getName()[ CD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_27 $$ context = defaultContext[ FD ]
Line_27 $$ context = defaultContext-->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ FD ]
Line_17 $$ final Collection<PsiFileSystemItem> defaultContexts = fileReferenceSet.getDefaultContexts()-->Line_37 $$ context = defaultContexts.iterator().next()[ FD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_40 $$ if (context == null)[ FD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_24 $$ final VirtualFile virtualFile = defaultContext.getVirtualFile()[ FD ]
Line_30 $$ context = defaultContext-->Line_37 $$ context = defaultContexts.iterator().next()[ FD ]
Line_57 $$ final boolean isdirectory-->Line_74 $$ isdirectory = false[ FD ]
Line_3 $$ final FileReferenceSet fileReferenceSet = reference.getFileReferenceSet()-->Line_48 $$ if (fileReferenceSet.isCaseSensitive()) [ FD ]
Line_53 $$ final RenameFileFix renameFileFix = new RenameFileFix(newFileName)-->Line_54 $$ return Arrays.asList(renameRefAction, renameFileFix)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_49 $$ final PsiElement psiElement = containingFile == null ? null : reference.innerSingleResolve(false, containingFile)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_4 $$ int index = reference.getIndex()[ CD ]
Line_7 $$ final String newFileName = reference.getFileNameToCreate()-->Line_8 $$ if (newFileName.isEmpty() || newFileName.indexOf('\\') != -1 || newFileName.indexOf('*') != -1 || newFileName.indexOf('?') != -1 || SystemInfo.isWindows && newFileName.indexOf(':') != -1) [ FD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_40 $$ if (context == null)[ FD ]
Line_37 $$ context = defaultContexts.iterator().next()-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_58 $$ if (!reference.isLast()) -->Line_64 $$ isdirectory = true[ CD ]
Line_3 $$ final FileReferenceSet fileReferenceSet = reference.getFileReferenceSet()-->Line_17 $$ final Collection<PsiFileSystemItem> defaultContexts = fileReferenceSet.getDefaultContexts()[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_5 $$ if (index < 0)[ CD ]
Line_14 $$ if (index > 0) -->Line_17 $$ final Collection<PsiFileSystemItem> defaultContexts = fileReferenceSet.getDefaultContexts()[ CD ]
Line_57 $$ final boolean isdirectory-->Line_64 $$ isdirectory = true[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_7 $$ final String newFileName = reference.getFileNameToCreate()[ FD ]
Line_18 $$ if (defaultContexts.isEmpty()) -->Line_19 $$ return Collections.emptyList()[ CD ]
Line_4 $$ int index = reference.getIndex()-->Line_5 $$ if (index < 0)[ FD ]
Line_27 $$ context = defaultContext-->Line_40 $$ if (context == null)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_12 $$ PsiElement element = reference.getElement()[ FD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_48 $$ if (fileReferenceSet.isCaseSensitive()) [ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_3 $$ final FileReferenceSet fileReferenceSet = reference.getFileReferenceSet()[ CD ]
Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)-->Line_60 $$ directory.checkCreateSubdirectory(newFileName)[ FD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_26 $$ if (context == null) [ FD ]
Line_48 $$ if (fileReferenceSet.isCaseSensitive()) -->Line_49 $$ final PsiElement psiElement = containingFile == null ? null : reference.innerSingleResolve(false, containingFile)[ CD ]
Line_24 $$ final VirtualFile virtualFile = defaultContext.getVirtualFile()-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_11 $$ PsiFileSystemItem context = null[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_46 $$ if (directory == null)[ CD ]
Line_27 $$ context = defaultContext-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_24 $$ final VirtualFile virtualFile = defaultContext.getVirtualFile()-->Line_25 $$ if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) [ FD ]
Line_5 $$ if (index < 0)-->Line_6 $$ return Collections.emptyList()[ CD ]
Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()-->Line_27 $$ context = defaultContext[ FD ]
Line_58 $$ if (!reference.isLast()) -->Line_66 $$ FileType ft = FileTypeManager.getInstance().getFileTypeByFileName(newFileName)[ CD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_23 $$ if (defaultContext != null) [ FD ]
Line_25 $$ if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) -->Line_26 $$ if (context == null) [ CD ]
Line_40 $$ if (context == null)-->Line_41 $$ return Collections.emptyList()[ CD ]
Line_66 $$ FileType ft = FileTypeManager.getInstance().getFileTypeByFileName(newFileName)-->Line_67 $$ if (ft instanceof UnknownFileType)[ FD ]
Line_46 $$ if (directory == null)-->Line_47 $$ return Collections.emptyList()[ CD ]
Line_7 $$ final String newFileName = reference.getFileNameToCreate()-->Line_66 $$ FileType ft = FileTypeManager.getInstance().getFileTypeByFileName(newFileName)[ FD ]
Line_7 $$ final String newFileName = reference.getFileNameToCreate()-->Line_70 $$ directory.checkCreateFile(newFileName)[ FD ]
Line_22 $$ for (PsiFileSystemItem defaultContext : defaultContexts) -->Line_30 $$ context = defaultContext[ FD ]
Line_13 $$ PsiFile containingFile = element == null ? null : element.getContainingFile()-->Line_49 $$ final PsiElement psiElement = containingFile == null ? null : reference.innerSingleResolve(false, containingFile)[ FD ]
Line_30 $$ context = defaultContext-->Line_40 $$ if (context == null)[ FD ]
Line_24 $$ final VirtualFile virtualFile = defaultContext.getVirtualFile()-->Line_43 $$ if (virtualFile == null || !virtualFile.isValid())[ FD ]
Line_7 $$ final String newFileName = reference.getFileNameToCreate()-->Line_60 $$ directory.checkCreateSubdirectory(newFileName)[ FD ]
Line_27 $$ context = defaultContext-->Line_37 $$ context = defaultContexts.iterator().next()[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_57 $$ final boolean isdirectory[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_43 $$ if (virtualFile == null || !virtualFile.isValid())[ CD ]
Line_14 $$ if (index > 0) -->Line_21 $$ Module module = containingFile == null ? null : ModuleUtilCore.findModuleForPsiElement(containingFile)[ CD ]
Line_8 $$ if (newFileName.isEmpty() || newFileName.indexOf('\\') != -1 || newFileName.indexOf('*') != -1 || newFileName.indexOf('?') != -1 || SystemInfo.isWindows && newFileName.indexOf(':') != -1) -->Line_9 $$ return Collections.emptyList()[ CD ]
Line_76 $$ final CreateFileFix action = new MyCreateFileFix(isdirectory, newFileName, directory, reference)-->Line_77 $$ return Collections.singletonList(action)[ FD ]
Line_4 $$ int index = reference.getIndex()-->Line_14 $$ if (index > 0) [ FD ]
Line_48 $$ if (fileReferenceSet.isCaseSensitive()) -->Line_50 $$ if (psiElement != null) [ CD ]
Line_50 $$ if (psiElement != null) -->Line_54 $$ return Arrays.asList(renameRefAction, renameFileFix)[ CD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_49 $$ final PsiElement psiElement = containingFile == null ? null : reference.innerSingleResolve(false, containingFile)-->Line_50 $$ if (psiElement != null) [ FD ]
Line_67 $$ if (ft instanceof UnknownFileType)-->Line_68 $$ return Collections.emptyList()[ CD ]
Line_14 $$ if (index > 0) -->Line_36 $$ if (context == null && ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_43 $$ if (virtualFile == null || !virtualFile.isValid())-->Line_44 $$ return Collections.emptyList()[ CD ]
Line_50 $$ if (psiElement != null) -->Line_52 $$ final RenameFileReferenceIntentionAction renameRefAction = new RenameFileReferenceIntentionAction(existingElementName, reference)[ CD ]
Line_64 $$ isdirectory = true-->Line_74 $$ isdirectory = false[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_76 $$ final CreateFileFix action = new MyCreateFileFix(isdirectory, newFileName, directory, reference)[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ CD ]
Line_25 $$ if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) -->Line_29 $$ if (module != null && module == getModuleForContext(defaultContext)) [ CD ]
Line_14 $$ if (index > 0) -->Line_18 $$ if (defaultContexts.isEmpty()) [ CD ]
Line_23 $$ if (defaultContext != null) -->Line_25 $$ if (virtualFile != null && defaultContext.isDirectory() && virtualFile.isInLocalFileSystem()) [ CD ]
Line_23 $$ if (defaultContext != null) -->Line_24 $$ final VirtualFile virtualFile = defaultContext.getVirtualFile()[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_12 $$ PsiElement element = reference.getElement()[ CD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_37 $$ context = defaultContexts.iterator().next()[ FD ]
Line_30 $$ context = defaultContext-->Line_45 $$ final PsiDirectory directory = context.getManager().findDirectory(virtualFile)[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_14 $$ if (index > 0) [ CD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_42 $$ final VirtualFile virtualFile = context.getVirtualFile()[ FD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_27 $$ context = defaultContext[ FD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_15 $$ context = fileReferenceSet.getReference(index - 1).resolve()[ FD ]
Line_27 $$ context = defaultContext-->Line_30 $$ context = defaultContext[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_3 $$ final FileReferenceSet fileReferenceSet = reference.getFileReferenceSet()[ FD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_7 $$ final String newFileName = reference.getFileNameToCreate()[ CD ]
Line_2 $$ public static List<? extends LocalQuickFix> registerQuickFix(@NotNull FileReference reference) -->Line_8 $$ if (newFileName.isEmpty() || newFileName.indexOf('\\') != -1 || newFileName.indexOf('*') != -1 || newFileName.indexOf('?') != -1 || SystemInfo.isWindows && newFileName.indexOf(':') != -1) [ CD ]
Line_11 $$ PsiFileSystemItem context = null-->Line_30 $$ context = defaultContext[ FD ]
