Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_7 $$ if (myFile == null)[ CD ]
Line_3 $$ if (myProject.isDisposed())-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_3 $$ if (myProject.isDisposed())[ CD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_15 $$ return passRegistrar.instantiatePasses(myFile, myEditor, passesToIgnore)[ FD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_15 $$ return passRegistrar.instantiatePasses(myFile, myEditor, passesToIgnore)[ CD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_14 $$ TextEditorHighlightingPassRegistrarEx passRegistrar = TextEditorHighlightingPassRegistrarEx.getInstanceEx(myProject)[ CD ]
Line_7 $$ if (myFile == null)-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_14 $$ TextEditorHighlightingPassRegistrarEx passRegistrar = TextEditorHighlightingPassRegistrarEx.getInstanceEx(myProject)-->Line_15 $$ return passRegistrar.instantiatePasses(myFile, myEditor, passesToIgnore)[ FD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_5 $$ PsiDocumentManager.getInstance(myProject).commitAllDocuments()[ CD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_9 $$ if (myCompiled) [ CD ]
Line_11 $$ if (!DaemonCodeAnalyzer.getInstance(myProject).isHighlightingAvailable(myFile)) -->Line_12 $$ return Collections.emptyList()[ CD ]
Line_2 $$ List<TextEditorHighlightingPass> getPasses(@NotNull int[] passesToIgnore) -->Line_6 $$ renewFile()[ CD ]
Line_9 $$ if (myCompiled) -->Line_11 $$ if (!DaemonCodeAnalyzer.getInstance(myProject).isHighlightingAvailable(myFile)) [ CD ]
