Line_19 $$ if (SwiftUtils.isRootDir(path)) -->Line_20 $$ return Collections.emptyList()[ CD ]
Line_4 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_26 $$ files.add(stat)[ FD ]
Line_43 $$ for (SwiftObjectFileStatus status : fileStatusList) -->Line_45 $$ files.add(new SwiftFileStatus(status.getBytes(), status.getBytes() == 0, 1, getBlocksize(), status.getLast_modified().getTime(), getCorrectSwiftPath(new Path(status.getName()))))[ FD ]
Line_23 $$ if (stat.isDirectory()) -->Line_27 $$ return files[ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_36 $$ if (fileStatusList.isEmpty()) [ CD ]
Line_5 $$ final Path correctSwiftPath = getCorrectSwiftPath(path)-->Line_37 $$ SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest)[ FD ]
Line_9 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ LOG.debug("" + "File/Directory not found " + path)[ CD ]
Line_12 $$ if (SwiftUtils.isRootDir(path)) -->Line_13 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_5 $$ final Path correctSwiftPath = getCorrectSwiftPath(path)[ CD ]
Line_44 $$ if (status.getName() != null) -->Line_45 $$ files.add(new SwiftFileStatus(status.getBytes(), status.getBytes() == 0, 1, getBlocksize(), status.getLast_modified().getTime(), getCorrectSwiftPath(new Path(status.getName()))))[ CD ]
Line_3 $$ final byte[] bytes-->Line_7 $$ bytes = swiftRestClient.listDeepObjectsInDirectory(path, listDeep)[ FD ]
Line_23 $$ if (stat.isDirectory()) -->Line_26 $$ files.add(stat)[ CD ]
Line_19 $$ if (SwiftUtils.isRootDir(path)) -->Line_23 $$ if (stat.isDirectory()) [ CD ]
Line_22 $$ FileStatus stat = getObjectMetadata(correctSwiftPath, newest)-->Line_23 $$ if (stat.isDirectory()) [ FD ]
Line_35 $$ final List<SwiftObjectFileStatus> fileStatusList = JSONUtil.toObject(new String(bytes), collectionType)-->Line_36 $$ if (fileStatusList.isEmpty()) [ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_34 $$ final CollectionType collectionType = JSONUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, SwiftObjectFileStatus.class)[ CD ]
Line_34 $$ final CollectionType collectionType = JSONUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, SwiftObjectFileStatus.class)-->Line_35 $$ final List<SwiftObjectFileStatus> fileStatusList = JSONUtil.toObject(new String(bytes), collectionType)[ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_19 $$ if (SwiftUtils.isRootDir(path)) [ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_35 $$ final List<SwiftObjectFileStatus> fileStatusList = JSONUtil.toObject(new String(bytes), collectionType)[ CD ]
Line_22 $$ FileStatus stat = getObjectMetadata(correctSwiftPath, newest)-->Line_26 $$ files.add(stat)[ FD ]
Line_5 $$ final Path correctSwiftPath = getCorrectSwiftPath(path)-->Line_22 $$ FileStatus stat = getObjectMetadata(correctSwiftPath, newest)[ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_48 $$ return files[ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_22 $$ FileStatus stat = getObjectMetadata(correctSwiftPath, newest)[ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_37 $$ SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest)[ FD ]
Line_4 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_45 $$ files.add(new SwiftFileStatus(status.getBytes(), status.getBytes() == 0, 1, getBlocksize(), status.getLast_modified().getTime(), getCorrectSwiftPath(new Path(status.getName()))))[ FD ]
Line_37 $$ SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest)-->Line_39 $$ files.add(objectMetadata)[ FD ]
Line_43 $$ for (SwiftObjectFileStatus status : fileStatusList) -->Line_44 $$ if (status.getName() != null) [ FD ]
Line_38 $$ if (objectMetadata.isFile()) -->Line_39 $$ files.add(objectMetadata)[ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_7 $$ bytes = swiftRestClient.listDeepObjectsInDirectory(path, listDeep)[ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_4 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()[ CD ]
Line_36 $$ if (fileStatusList.isEmpty()) -->Line_41 $$ return files[ CD ]
Line_19 $$ if (SwiftUtils.isRootDir(path)) -->Line_22 $$ FileStatus stat = getObjectMetadata(correctSwiftPath, newest)[ CD ]
Line_36 $$ if (fileStatusList.isEmpty()) -->Line_37 $$ SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest)[ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_5 $$ final Path correctSwiftPath = getCorrectSwiftPath(path)[ FD ]
Line_37 $$ SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest)-->Line_38 $$ if (objectMetadata.isFile()) [ FD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_12 $$ if (SwiftUtils.isRootDir(path)) [ FD ]
Line_23 $$ if (stat.isDirectory()) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_18 $$ if (e.getStatusCode() == HttpStatus.SC_NO_CONTENT) -->Line_19 $$ if (SwiftUtils.isRootDir(path)) [ CD ]
Line_2 $$ private List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException -->Line_3 $$ final byte[] bytes[ CD ]
Line_4 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_39 $$ files.add(objectMetadata)[ FD ]
Line_36 $$ if (fileStatusList.isEmpty()) -->Line_38 $$ if (objectMetadata.isFile()) [ CD ]
