Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_8 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_5 $$ final String editedText = "s1 edited"-->Line_6 $$ VcsTestUtil.editFileInCommand(myProject, tree.myS1File, editedText)[ FD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_12 $$ final Change s2Change = assertMovedChange(tree.myS2File)[ CD ]
Line_10 $$ final Change dirChange = assertRenamedChange(tree.mySourceDir)-->Line_13 $$ rollbackIMpl(Arrays.asList(dirChange, s1Change, s2Change), Collections.<Change>emptyList())[ FD ]
Line_11 $$ final Change s1Change = assertMovedChange(tree.myS1File)-->Line_13 $$ rollbackIMpl(Arrays.asList(dirChange, s1Change, s2Change), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_13 $$ rollbackIMpl(Arrays.asList(dirChange, s1Change, s2Change), Collections.<Change>emptyList())[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_5 $$ final String editedText = "s1 edited"[ CD ]
Line_12 $$ final Change s2Change = assertMovedChange(tree.myS2File)-->Line_13 $$ rollbackIMpl(Arrays.asList(dirChange, s1Change, s2Change), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_6 $$ VcsTestUtil.editFileInCommand(myProject, tree.myS1File, editedText)[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_7 $$ VcsTestUtil.renameFileInCommand(myProject, tree.mySourceDir, "renamed")[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_9 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_11 $$ final Change s1Change = assertMovedChange(tree.myS1File)[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testListAllChangesForRevert() throws Exception -->Line_10 $$ final Change dirChange = assertRenamedChange(tree.mySourceDir)[ CD ]
