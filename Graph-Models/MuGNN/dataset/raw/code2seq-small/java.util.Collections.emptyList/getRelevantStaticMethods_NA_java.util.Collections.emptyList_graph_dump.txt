Line_11 $$ final MethodIncompleteSignature methodInvocation = indexValue.getMethodIncompleteSignature()-->Line_18 $$ myCachedResolveResults.put(methodInvocation, method)[ FD ]
Line_12 $$ final PsiMethod method-->Line_26 $$ if (method.hasModifierProperty(PsiModifier.PUBLIC)) [ FD ]
Line_29 $$ if (myCompletionContext.getResolveScope().contains(method.getContainingFile().getVirtualFile())) -->Line_30 $$ relevantMethods.add(new ContextRelevantStaticMethod(method, null))[ CD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_3 $$ if (resultQualifiedClassName == null || ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(resultQualifiedClassName) || myCompletionContext.getTarget().getClassQName().equals(resultQualifiedClassName)) [ FD ]
Line_11 $$ final MethodIncompleteSignature methodInvocation = indexValue.getMethodIncompleteSignature()-->Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) [ FD ]
Line_23 $$ if (method == null) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_12 $$ final PsiMethod method-->Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) [ FD ]
Line_32 $$ if (occurrences >= minOccurrence) -->Line_33 $$ return relevantMethods[ CD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) [ FD ]
Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) -->Line_16 $$ final PsiMethod[] methods = myCompletionContext.resolveNotDeprecated(methodInvocation)[ CD ]
Line_12 $$ final PsiMethod method-->Line_18 $$ myCachedResolveResults.put(methodInvocation, method)[ FD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_19 $$ if (method == null) [ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))[ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_18 $$ myCachedResolveResults.put(methodInvocation, method)[ FD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_32 $$ if (occurrences >= minOccurrence) [ FD ]
Line_16 $$ final PsiMethod[] methods = myCompletionContext.resolveNotDeprecated(methodInvocation)-->Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))[ FD ]
Line_7 $$ if (!indexValues.isEmpty()) -->Line_8 $$ int occurrences = 0[ CD ]
Line_6 $$ final TreeSet<UsageIndexValue> indexValues = myIndexReader.getMethods(resultQualifiedClassName)-->Line_10 $$ for (final UsageIndexValue indexValue : extractStaticMethods(indexValues)) [ FD ]
Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) -->Line_18 $$ myCachedResolveResults.put(methodInvocation, method)[ CD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) [ FD ]
Line_12 $$ final PsiMethod method-->Line_29 $$ if (myCompletionContext.getResolveScope().contains(method.getContainingFile().getVirtualFile())) [ FD ]
Line_3 $$ if (resultQualifiedClassName == null || ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(resultQualifiedClassName) || myCompletionContext.getTarget().getClassQName().equals(resultQualifiedClassName)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_29 $$ if (myCompletionContext.getResolveScope().contains(method.getContainingFile().getVirtualFile())) [ FD ]
Line_19 $$ if (method == null) -->Line_20 $$ return Collections.emptyList()[ CD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_23 $$ if (method == null) [ FD ]
Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) -->Line_32 $$ if (occurrences >= minOccurrence) [ CD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_39 $$ return Collections.emptyList()[ CD ]
Line_28 $$ occurrences += indexValue.getOccurrences()-->Line_32 $$ if (occurrences >= minOccurrence) [ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_26 $$ if (method.hasModifierProperty(PsiModifier.PUBLIC)) [ FD ]
Line_12 $$ final PsiMethod method-->Line_23 $$ if (method == null) [ FD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_23 $$ if (method == null) [ FD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_6 $$ final TreeSet<UsageIndexValue> indexValues = myIndexReader.getMethods(resultQualifiedClassName)[ CD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_6 $$ final TreeSet<UsageIndexValue> indexValues = myIndexReader.getMethods(resultQualifiedClassName)[ FD ]
Line_10 $$ for (final UsageIndexValue indexValue : extractStaticMethods(indexValues)) -->Line_11 $$ final MethodIncompleteSignature methodInvocation = indexValue.getMethodIncompleteSignature()[ FD ]
Line_11 $$ final MethodIncompleteSignature methodInvocation = indexValue.getMethodIncompleteSignature()-->Line_16 $$ final PsiMethod[] methods = myCompletionContext.resolveNotDeprecated(methodInvocation)[ FD ]
Line_26 $$ if (method.hasModifierProperty(PsiModifier.PUBLIC)) -->Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) [ CD ]
Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) -->Line_14 $$ method = myCachedResolveResults.get(methodInvocation)[ CD ]
Line_11 $$ final MethodIncompleteSignature methodInvocation = indexValue.getMethodIncompleteSignature()-->Line_14 $$ method = myCachedResolveResults.get(methodInvocation)[ FD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_18 $$ myCachedResolveResults.put(methodInvocation, method)[ FD ]
Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) -->Line_28 $$ occurrences += indexValue.getOccurrences()[ CD ]
Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) -->Line_29 $$ if (myCompletionContext.getResolveScope().contains(method.getContainingFile().getVirtualFile())) [ CD ]
Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) -->Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))[ CD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_7 $$ if (!indexValues.isEmpty()) [ CD ]
Line_12 $$ final PsiMethod method-->Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))[ FD ]
Line_7 $$ if (!indexValues.isEmpty()) -->Line_9 $$ final List<ContextRelevantStaticMethod> relevantMethods = new ArrayList<ContextRelevantStaticMethod>()[ CD ]
Line_12 $$ final PsiMethod method-->Line_14 $$ method = myCachedResolveResults.get(methodInvocation)[ FD ]
Line_12 $$ final PsiMethod method-->Line_19 $$ if (method == null) [ FD ]
Line_10 $$ for (final UsageIndexValue indexValue : extractStaticMethods(indexValues)) -->Line_28 $$ occurrences += indexValue.getOccurrences()[ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_19 $$ if (method == null) [ FD ]
Line_8 $$ int occurrences = 0-->Line_28 $$ occurrences += indexValue.getOccurrences()[ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_27 $$ if (isMethodValid(method, myCompletionContext, resultQualifiedClassName)) [ FD ]
Line_6 $$ final TreeSet<UsageIndexValue> indexValues = myIndexReader.getMethods(resultQualifiedClassName)-->Line_7 $$ if (!indexValues.isEmpty()) [ FD ]
Line_13 $$ if (myCachedResolveResults.containsKey(methodInvocation)) -->Line_19 $$ if (method == null) [ CD ]
Line_17 $$ method = MethodChainsSearchUtil.getMethodWithMinNotPrimitiveParameters(methods, Collections.singleton(myCompletionContext.getTarget().getClassQName()))-->Line_26 $$ if (method.hasModifierProperty(PsiModifier.PUBLIC)) [ FD ]
Line_9 $$ final List<ContextRelevantStaticMethod> relevantMethods = new ArrayList<ContextRelevantStaticMethod>()-->Line_30 $$ relevantMethods.add(new ContextRelevantStaticMethod(method, null))[ FD ]
Line_2 $$ public List<ContextRelevantStaticMethod> getRelevantStaticMethods(final String resultQualifiedClassName, final int minOccurrence) -->Line_3 $$ if (resultQualifiedClassName == null || ChainCompletionStringUtil.isPrimitiveOrArrayOfPrimitives(resultQualifiedClassName) || myCompletionContext.getTarget().getClassQName().equals(resultQualifiedClassName)) [ CD ]
Line_8 $$ int occurrences = 0-->Line_32 $$ if (occurrences >= minOccurrence) [ FD ]
Line_14 $$ method = myCachedResolveResults.get(methodInvocation)-->Line_29 $$ if (myCompletionContext.getResolveScope().contains(method.getContainingFile().getVirtualFile())) [ FD ]
