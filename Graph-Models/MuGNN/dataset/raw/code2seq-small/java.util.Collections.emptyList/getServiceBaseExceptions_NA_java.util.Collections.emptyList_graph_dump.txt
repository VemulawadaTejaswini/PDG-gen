Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_22 $$ exceptions.add(exception)[ FD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_11 $$ exceptions = ListUtil.copy(exceptions)[ FD ]
Line_35 $$ if (!exceptions.isEmpty()) -->Line_38 $$ return Collections.emptyList()[ CD ]
Line_14 $$ String exception = methodException.getValue()-->Line_15 $$ if (exception.equals(PortalException.class.getName())) [ FD ]
Line_19 $$ exception = "SystemException"-->Line_15 $$ if (exception.equals(PortalException.class.getName())) [ FD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_3 $$ boolean foundMethod = false[ CD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_8 $$ JavaParameter parameter = parameters[i][ CD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_35 $$ if (!exceptions.isEmpty()) [ CD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_25 $$ Collections.sort(exceptions)[ FD ]
Line_4 $$ for (JavaMethod method : methods) -->Line_6 $$ if (method.getName().equals(methodName) && (parameters.length == args.size())) [ FD ]
Line_14 $$ String exception = methodException.getValue()-->Line_16 $$ exception = "PortalException"[ FD ]
Line_11 $$ exceptions = ListUtil.copy(exceptions)-->Line_21 $$ if (!exceptions.contains(exception)) [ FD ]
Line_4 $$ for (JavaMethod method : methods) -->Line_5 $$ JavaParameter[] parameters = method.getParameters()[ FD ]
Line_11 $$ exceptions = ListUtil.copy(exceptions)-->Line_35 $$ if (!exceptions.isEmpty()) [ FD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_35 $$ if (!exceptions.isEmpty()) [ FD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_10 $$ if (getParameterType(parameter).equals(arg)) [ CD ]
Line_16 $$ exception = "PortalException"-->Line_15 $$ if (exception.equals(PortalException.class.getName())) [ FD ]
Line_19 $$ exception = "SystemException"-->Line_18 $$ if (exception.equals(SystemException.class.getName())) [ FD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_9 $$ String arg = args.get(i)[ FD ]
Line_13 $$ for (Type methodException : methodExceptions) -->Line_14 $$ String exception = methodException.getValue()[ FD ]
Line_35 $$ if (!exceptions.isEmpty()) -->Line_36 $$ return exceptions[ CD ]
Line_18 $$ if (exception.equals(SystemException.class.getName())) -->Line_19 $$ exception = "SystemException"[ CD ]
Line_10 $$ if (getParameterType(parameter).equals(arg)) -->Line_25 $$ Collections.sort(exceptions)[ CD ]
Line_10 $$ if (getParameterType(parameter).equals(arg)) -->Line_11 $$ exceptions = ListUtil.copy(exceptions)[ CD ]
Line_14 $$ String exception = methodException.getValue()-->Line_18 $$ if (exception.equals(SystemException.class.getName())) [ FD ]
Line_11 $$ exceptions = ListUtil.copy(exceptions)-->Line_25 $$ Collections.sort(exceptions)[ FD ]
Line_16 $$ exception = "PortalException"-->Line_18 $$ if (exception.equals(SystemException.class.getName())) [ FD ]
Line_15 $$ if (exception.equals(PortalException.class.getName())) -->Line_16 $$ exception = "PortalException"[ CD ]
Line_4 $$ for (JavaMethod method : methods) -->Line_12 $$ Type[] methodExceptions = method.getExceptions()[ FD ]
Line_14 $$ String exception = methodException.getValue()-->Line_21 $$ if (!exceptions.contains(exception)) [ FD ]
Line_16 $$ exception = "PortalException"-->Line_22 $$ exceptions.add(exception)[ FD ]
Line_3 $$ boolean foundMethod = false-->Line_26 $$ foundMethod = true[ FD ]
Line_19 $$ exception = "SystemException"-->Line_21 $$ if (!exceptions.contains(exception)) [ FD ]
Line_16 $$ exception = "PortalException"-->Line_21 $$ if (!exceptions.contains(exception)) [ FD ]
Line_14 $$ String exception = methodException.getValue()-->Line_22 $$ exceptions.add(exception)[ FD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_9 $$ String arg = args.get(i)[ CD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_6 $$ if (method.getName().equals(methodName) && (parameters.length == args.size())) [ FD ]
Line_16 $$ exception = "PortalException"-->Line_19 $$ exception = "SystemException"[ FD ]
Line_7 $$ for (int i = 0; i < parameters.length; i++) -->Line_9 $$ String arg = args.get(i)[ FD ]
Line_21 $$ if (!exceptions.contains(exception)) -->Line_22 $$ exceptions.add(exception)[ CD ]
Line_14 $$ String exception = methodException.getValue()-->Line_19 $$ exception = "SystemException"[ FD ]
Line_19 $$ exception = "SystemException"-->Line_22 $$ exceptions.add(exception)[ FD ]
Line_8 $$ JavaParameter parameter = parameters[i]-->Line_10 $$ if (getParameterType(parameter).equals(arg)) [ FD ]
Line_10 $$ if (getParameterType(parameter).equals(arg)) -->Line_26 $$ foundMethod = true[ CD ]
Line_10 $$ if (getParameterType(parameter).equals(arg)) -->Line_12 $$ Type[] methodExceptions = method.getExceptions()[ CD ]
Line_6 $$ if (method.getName().equals(methodName) && (parameters.length == args.size())) -->Line_7 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_9 $$ String arg = args.get(i)-->Line_10 $$ if (getParameterType(parameter).equals(arg)) [ FD ]
Line_2 $$ public List<String> getServiceBaseExceptions(List<JavaMethod> methods, String methodName, List<String> args, List<String> exceptions) -->Line_21 $$ if (!exceptions.contains(exception)) [ FD ]
Line_11 $$ exceptions = ListUtil.copy(exceptions)-->Line_22 $$ exceptions.add(exception)[ FD ]
