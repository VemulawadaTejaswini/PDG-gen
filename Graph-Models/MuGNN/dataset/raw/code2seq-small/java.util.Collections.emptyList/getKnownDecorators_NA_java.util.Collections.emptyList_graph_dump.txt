Line_32 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) -->Line_33 $$ result.add(knownDecorator)[ CD ]
Line_18 $$ for (PyDecorator decorator : decoratorList.getDecorators()) -->Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)[ FD ]
Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_31 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ FD ]
Line_12 $$ final PyDecoratorList decoratorList = element.getDecoratorList()-->Line_13 $$ if (decoratorList == null) [ FD ]
Line_19 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()-->Line_23 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())[ FD ]
Line_16 $$ final List<KnownDecorator> result = new ArrayList<KnownDecorator>()-->Line_37 $$ result.add(knownDecorator)[ FD ]
Line_23 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_33 $$ result.add(knownDecorator)[ FD ]
Line_28 $$ resolved = ((PyFunction) resolved).getContainingClass()-->Line_30 $$ if (resolved != null && resolved.getQualifiedName() != null) [ FD ]
Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_28 $$ resolved = ((PyFunction) resolved).getContainingClass()[ FD ]
Line_30 $$ if (resolved != null && resolved.getQualifiedName() != null) -->Line_32 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ CD ]
Line_23 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_37 $$ result.add(knownDecorator)[ FD ]
Line_23 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_32 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ FD ]
Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_27 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) [ FD ]
Line_25 $$ if (allowResolve) -->Line_30 $$ if (resolved != null && resolved.getQualifiedName() != null) [ CD ]
Line_24 $$ if (knownDecorator != null) -->Line_25 $$ if (allowResolve) [ CD ]
Line_27 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) -->Line_28 $$ resolved = ((PyFunction) resolved).getContainingClass()[ CD ]
Line_28 $$ resolved = ((PyFunction) resolved).getContainingClass()-->Line_31 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ FD ]
Line_16 $$ final List<KnownDecorator> result = new ArrayList<KnownDecorator>()-->Line_33 $$ result.add(knownDecorator)[ FD ]
Line_31 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())-->Line_32 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ FD ]
Line_25 $$ if (allowResolve) -->Line_37 $$ result.add(knownDecorator)[ CD ]
Line_30 $$ if (resolved != null && resolved.getQualifiedName() != null) -->Line_31 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ CD ]
Line_18 $$ for (PyDecorator decorator : decoratorList.getDecorators()) -->Line_19 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()[ FD ]
Line_25 $$ if (allowResolve) -->Line_27 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) [ CD ]
Line_23 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_24 $$ if (knownDecorator != null) [ FD ]
Line_19 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()-->Line_20 $$ if (qualifiedName == null) [ FD ]
Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_30 $$ if (resolved != null && resolved.getQualifiedName() != null) [ FD ]
Line_12 $$ final PyDecoratorList decoratorList = element.getDecoratorList()-->Line_18 $$ for (PyDecorator decorator : decoratorList.getDecorators()) [ FD ]
Line_13 $$ if (decoratorList == null) -->Line_14 $$ return Collections.emptyList()[ CD ]
Line_25 $$ if (allowResolve) -->Line_26 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)[ CD ]
