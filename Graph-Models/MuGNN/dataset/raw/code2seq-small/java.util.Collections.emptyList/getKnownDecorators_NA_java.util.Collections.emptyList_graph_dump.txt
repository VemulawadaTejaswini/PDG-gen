Line_21 $$ if (resolved != null && resolved.getQualifiedName() != null) -->Line_23 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ CD ]
Line_14 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_15 $$ if (knownDecorator != null) [ FD ]
Line_16 $$ if (allowResolve) -->Line_18 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) [ CD ]
Line_19 $$ resolved = ((PyFunction) resolved).getContainingClass()-->Line_22 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ FD ]
Line_18 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) -->Line_19 $$ resolved = ((PyFunction) resolved).getContainingClass()[ CD ]
Line_16 $$ if (allowResolve) -->Line_21 $$ if (resolved != null && resolved.getQualifiedName() != null) [ CD ]
Line_19 $$ resolved = ((PyFunction) resolved).getContainingClass()-->Line_21 $$ if (resolved != null && resolved.getQualifiedName() != null) [ FD ]
Line_22 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())-->Line_23 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ FD ]
Line_16 $$ if (allowResolve) -->Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)[ CD ]
Line_3 $$ final PyDecoratorList decoratorList = element.getDecoratorList()-->Line_4 $$ if (decoratorList == null) [ FD ]
Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_22 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ FD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_7 $$ final List<KnownDecorator> result = new ArrayList<KnownDecorator>()[ CD ]
Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_18 $$ if (resolved instanceof PyFunction && PyNames.INIT.equals(resolved.getName())) [ FD ]
Line_16 $$ if (allowResolve) -->Line_28 $$ result.add(knownDecorator)[ CD ]
Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_19 $$ resolved = ((PyFunction) resolved).getContainingClass()[ FD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_3 $$ final PyDecoratorList decoratorList = element.getDecoratorList()[ FD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_32 $$ return result[ CD ]
Line_9 $$ for (PyDecorator decorator : decoratorList.getDecorators()) -->Line_10 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()[ FD ]
Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)-->Line_21 $$ if (resolved != null && resolved.getQualifiedName() != null) [ FD ]
Line_7 $$ final List<KnownDecorator> result = new ArrayList<KnownDecorator>()-->Line_24 $$ result.add(knownDecorator)[ FD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_8 $$ final boolean allowResolve = context.maySwitchToAST((PsiElement) element)[ FD ]
Line_9 $$ for (PyDecorator decorator : decoratorList.getDecorators()) -->Line_17 $$ PyQualifiedNameOwner resolved = as(resolveDecorator(decorator), PyQualifiedNameOwner.class)[ FD ]
Line_14 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_28 $$ result.add(knownDecorator)[ FD ]
Line_23 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) -->Line_24 $$ result.add(knownDecorator)[ CD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_4 $$ if (decoratorList == null) [ CD ]
Line_4 $$ if (decoratorList == null) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_8 $$ final boolean allowResolve = context.maySwitchToAST((PsiElement) element)[ CD ]
Line_2 $$ public static List<KnownDecorator> getKnownDecorators(@NotNull PyDecoratable element, @NotNull TypeEvalContext context) -->Line_3 $$ final PyDecoratorList decoratorList = element.getDecoratorList()[ CD ]
Line_21 $$ if (resolved != null && resolved.getQualifiedName() != null) -->Line_22 $$ final QualifiedName resolvedName = QualifiedName.fromDottedString(resolved.getQualifiedName())[ CD ]
Line_3 $$ final PyDecoratorList decoratorList = element.getDecoratorList()-->Line_9 $$ for (PyDecorator decorator : decoratorList.getDecorators()) [ FD ]
Line_10 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()-->Line_14 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())[ FD ]
Line_15 $$ if (knownDecorator != null) -->Line_16 $$ if (allowResolve) [ CD ]
Line_14 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_23 $$ if (resolvedName.equals(knownDecorator.getQualifiedName())) [ FD ]
Line_10 $$ final QualifiedName qualifiedName = decorator.getQualifiedName()-->Line_11 $$ if (qualifiedName == null) [ FD ]
Line_7 $$ final List<KnownDecorator> result = new ArrayList<KnownDecorator>()-->Line_28 $$ result.add(knownDecorator)[ FD ]
Line_14 $$ final KnownDecorator knownDecorator = ourByShortName.get(qualifiedName.getLastComponent())-->Line_24 $$ result.add(knownDecorator)[ FD ]
