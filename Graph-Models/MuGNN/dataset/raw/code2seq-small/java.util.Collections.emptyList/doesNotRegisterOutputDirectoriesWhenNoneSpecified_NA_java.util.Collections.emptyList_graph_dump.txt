Line_2 $$ public void doesNotRegisterOutputDirectoriesWhenNoneSpecified() -->Line_6 $$ assertThat(task.getOutputs().getFiles().getFiles(), isEmpty())[ CD ]
Line_2 $$ public void doesNotRegisterOutputDirectoriesWhenNoneSpecified() -->Line_3 $$ TaskWithOutputDirs task = expectTaskCreated(TaskWithOutputDirs.class, new Object[] [ CD ]
Line_2 $$ public void doesNotRegisterOutputDirectoriesWhenNoneSpecified() -->Line_5 $$ task = expectTaskCreated(TaskWithOutputDirs.class, Collections.<File>emptyList())[ CD ]
Line_5 $$ task = expectTaskCreated(TaskWithOutputDirs.class, Collections.<File>emptyList())-->Line_6 $$ assertThat(task.getOutputs().getFiles().getFiles(), isEmpty())[ FD ]
Line_3 $$ TaskWithOutputDirs task = expectTaskCreated(TaskWithOutputDirs.class, new Object[] -->Line_5 $$ task = expectTaskCreated(TaskWithOutputDirs.class, Collections.<File>emptyList())[ FD ]
Line_2 $$ public void doesNotRegisterOutputDirectoriesWhenNoneSpecified() -->Line_4 $$ assertThat(task.getOutputs().getFiles().getFiles(), isEmpty())[ CD ]
Line_3 $$ TaskWithOutputDirs task = expectTaskCreated(TaskWithOutputDirs.class, new Object[] -->Line_4 $$ assertThat(task.getOutputs().getFiles().getFiles(), isEmpty())[ FD ]
Line_3 $$ TaskWithOutputDirs task = expectTaskCreated(TaskWithOutputDirs.class, new Object[] -->Line_6 $$ assertThat(task.getOutputs().getFiles().getFiles(), isEmpty())[ FD ]
