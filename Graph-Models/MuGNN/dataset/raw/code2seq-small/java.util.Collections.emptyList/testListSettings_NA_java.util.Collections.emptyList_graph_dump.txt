Line_9 $$ value = listSetting.get(builder.build())-->Line_11 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_13 $$ for (int i = 0; i < input.size(); i++) -->Line_14 $$ builder.put("foo.bar." + i, input.get(i))[ FD ]
Line_2 $$ public void testListSettings() -->Line_17 $$ assertEquals(input.size(), value.size())[ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_32 $$ assertEquals(1, ref.get().size())[ FD ]
Line_3 $$ Setting<List<String>> listSetting = Setting.listSetting("foo.bar", Arrays.asList("foo,bar"), ( s) -> s.toString(), true, Setting.Scope.CLUSTER)-->Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)[ FD ]
Line_2 $$ public void testListSettings() -->Line_9 $$ value = listSetting.get(builder.build())[ CD ]
Line_2 $$ public void testListSettings() -->Line_39 $$ for (int i = 0; i < intValues.size(); i++) [ CD ]
Line_2 $$ public void testListSettings() -->Line_21 $$ assertTrue(settingUpdater.hasChanged(builder.build(), Settings.EMPTY))[ CD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_10 $$ assertEquals(input.size(), value.size())[ FD ]
Line_2 $$ public void testListSettings() -->Line_23 $$ assertEquals(input.size(), ref.get().size())[ CD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_16 $$ value = listSetting.get(builder.build())[ FD ]
Line_2 $$ public void testListSettings() -->Line_12 $$ builder = Settings.builder()[ CD ]
Line_2 $$ public void testListSettings() -->Line_18 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_24 $$ assertArrayEquals(ref.get().toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_2 $$ public void testListSettings() -->Line_28 $$ settingUpdater.apply(Settings.builder().put("foo.bar", "1,2,3").build(), Settings.builder().putArray("foo.bar", "123").build())[ CD ]
Line_2 $$ public void testListSettings() -->Line_25 $$ settingUpdater.apply(Settings.builder().putArray("foo.bar", "123").build(), builder.build())[ CD ]
Line_2 $$ public void testListSettings() -->Line_5 $$ assertEquals(1, value.size())[ CD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_21 $$ assertTrue(settingUpdater.hasChanged(builder.build(), Settings.EMPTY))[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_17 $$ assertEquals(input.size(), value.size())[ FD ]
Line_9 $$ value = listSetting.get(builder.build())-->Line_18 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_2 $$ public void testListSettings() -->Line_29 $$ assertEquals(3, ref.get().size())[ CD ]
Line_2 $$ public void testListSettings() -->Line_13 $$ for (int i = 0; i < input.size(); i++) [ CD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_11 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_5 $$ assertEquals(1, value.size())[ FD ]
Line_2 $$ public void testListSettings() -->Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()[ CD ]
Line_13 $$ for (int i = 0; i < input.size(); i++) -->Line_40 $$ assertEquals(i, intValues.get(i).intValue())[ FD ]
Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)-->Line_25 $$ settingUpdater.apply(Settings.builder().putArray("foo.bar", "123").build(), builder.build())[ FD ]
Line_9 $$ value = listSetting.get(builder.build())-->Line_10 $$ assertEquals(input.size(), value.size())[ FD ]
Line_2 $$ public void testListSettings() -->Line_35 $$ List<Integer> defaultValue = otherSettings.get(Settings.EMPTY)[ CD ]
Line_2 $$ public void testListSettings() -->Line_10 $$ assertEquals(input.size(), value.size())[ CD ]
Line_37 $$ List<Integer> intValues = otherSettings.get(Settings.builder().put("foo.bar", "0,1,2,3").build())-->Line_40 $$ assertEquals(i, intValues.get(i).intValue())[ FD ]
Line_9 $$ value = listSetting.get(builder.build())-->Line_17 $$ assertEquals(input.size(), value.size())[ FD ]
Line_2 $$ public void testListSettings() -->Line_34 $$ Setting<List<Integer>> otherSettings = Setting.listSetting("foo.bar", Collections.emptyList(), Integer::<>parseInt, true, Setting.Scope.CLUSTER)[ CD ]
Line_34 $$ Setting<List<Integer>> otherSettings = Setting.listSetting("foo.bar", Collections.emptyList(), Integer::<>parseInt, true, Setting.Scope.CLUSTER)-->Line_35 $$ List<Integer> defaultValue = otherSettings.get(Settings.EMPTY)[ FD ]
Line_2 $$ public void testListSettings() -->Line_3 $$ Setting<List<String>> listSetting = Setting.listSetting("foo.bar", Arrays.asList("foo,bar"), ( s) -> s.toString(), true, Setting.Scope.CLUSTER)[ CD ]
Line_2 $$ public void testListSettings() -->Line_31 $$ settingUpdater.apply(Settings.EMPTY, Settings.builder().put("foo.bar", "1,2,3").build())[ CD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_14 $$ builder.put("foo.bar." + i, input.get(i))[ FD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_24 $$ assertArrayEquals(ref.get().toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_12 $$ builder = Settings.builder()-->Line_25 $$ settingUpdater.apply(Settings.builder().putArray("foo.bar", "123").build(), builder.build())[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_6 $$ assertEquals("foo,bar", value.get(0))[ FD ]
Line_2 $$ public void testListSettings() -->Line_33 $$ assertEquals("foo,bar", ref.get().get(0))[ CD ]
Line_35 $$ List<Integer> defaultValue = otherSettings.get(Settings.EMPTY)-->Line_36 $$ assertEquals(0, defaultValue.size())[ FD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_16 $$ value = listSetting.get(builder.build())[ FD ]
Line_3 $$ Setting<List<String>> listSetting = Setting.listSetting("foo.bar", Arrays.asList("foo,bar"), ( s) -> s.toString(), true, Setting.Scope.CLUSTER)-->Line_9 $$ value = listSetting.get(builder.build())[ FD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_22 $$ settingUpdater.apply(builder.build(), Settings.EMPTY)[ FD ]
Line_2 $$ public void testListSettings() -->Line_36 $$ assertEquals(0, defaultValue.size())[ CD ]
Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)-->Line_31 $$ settingUpdater.apply(Settings.EMPTY, Settings.builder().put("foo.bar", "1,2,3").build())[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_10 $$ assertEquals(input.size(), value.size())[ FD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_14 $$ builder.put("foo.bar." + i, input.get(i))[ FD ]
Line_2 $$ public void testListSettings() -->Line_32 $$ assertEquals(1, ref.get().size())[ CD ]
Line_16 $$ value = listSetting.get(builder.build())-->Line_18 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_2 $$ public void testListSettings() -->Line_38 $$ assertEquals(4, intValues.size())[ CD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_23 $$ assertEquals(input.size(), ref.get().size())[ FD ]
Line_16 $$ value = listSetting.get(builder.build())-->Line_17 $$ assertEquals(input.size(), value.size())[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_11 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_9 $$ value = listSetting.get(builder.build())-->Line_16 $$ value = listSetting.get(builder.build())[ FD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_27 $$ assertArrayEquals(ref.get().toArray(new String[0]), new String[] [ FD ]
Line_2 $$ public void testListSettings() -->Line_6 $$ assertEquals("foo,bar", value.get(0))[ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_30 $$ assertArrayEquals(ref.get().toArray(new String[0]), new String[] [ FD ]
Line_2 $$ public void testListSettings() -->Line_27 $$ assertArrayEquals(ref.get().toArray(new String[0]), new String[] [ CD ]
Line_12 $$ builder = Settings.builder()-->Line_21 $$ assertTrue(settingUpdater.hasChanged(builder.build(), Settings.EMPTY))[ FD ]
Line_2 $$ public void testListSettings() -->Line_26 $$ assertEquals(1, ref.get().size())[ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_33 $$ assertEquals("foo,bar", ref.get().get(0))[ FD ]
Line_2 $$ public void testListSettings() -->Line_37 $$ List<Integer> intValues = otherSettings.get(Settings.builder().put("foo.bar", "0,1,2,3").build())[ CD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_18 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)-->Line_21 $$ assertTrue(settingUpdater.hasChanged(builder.build(), Settings.EMPTY))[ FD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_13 $$ for (int i = 0; i < input.size(); i++) [ FD ]
Line_2 $$ public void testListSettings() -->Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))[ CD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_12 $$ builder = Settings.builder()[ FD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_9 $$ value = listSetting.get(builder.build())[ FD ]
Line_2 $$ public void testListSettings() -->Line_16 $$ value = listSetting.get(builder.build())[ CD ]
Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)-->Line_18 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ FD ]
Line_13 $$ for (int i = 0; i < input.size(); i++) -->Line_14 $$ builder.put("foo.bar." + i, input.get(i))[ CD ]
Line_2 $$ public void testListSettings() -->Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)[ CD ]
Line_37 $$ List<Integer> intValues = otherSettings.get(Settings.builder().put("foo.bar", "0,1,2,3").build())-->Line_39 $$ for (int i = 0; i < intValues.size(); i++) [ FD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_23 $$ assertEquals(input.size(), ref.get().size())[ FD ]
Line_34 $$ Setting<List<Integer>> otherSettings = Setting.listSetting("foo.bar", Collections.emptyList(), Integer::<>parseInt, true, Setting.Scope.CLUSTER)-->Line_37 $$ List<Integer> intValues = otherSettings.get(Settings.builder().put("foo.bar", "0,1,2,3").build())[ FD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))[ FD ]
Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")-->Line_17 $$ assertEquals(input.size(), value.size())[ FD ]
Line_12 $$ builder = Settings.builder()-->Line_14 $$ builder.put("foo.bar." + i, input.get(i))[ FD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_9 $$ value = listSetting.get(builder.build())[ FD ]
Line_3 $$ Setting<List<String>> listSetting = Setting.listSetting("foo.bar", Arrays.asList("foo,bar"), ( s) -> s.toString(), true, Setting.Scope.CLUSTER)-->Line_4 $$ List<String> value = listSetting.get(Settings.EMPTY)[ FD ]
Line_12 $$ builder = Settings.builder()-->Line_16 $$ value = listSetting.get(builder.build())[ FD ]
Line_2 $$ public void testListSettings() -->Line_22 $$ settingUpdater.apply(builder.build(), Settings.EMPTY)[ CD ]
Line_13 $$ for (int i = 0; i < input.size(); i++) -->Line_39 $$ for (int i = 0; i < intValues.size(); i++) [ FD ]
Line_2 $$ public void testListSettings() -->Line_7 $$ List<String> input = Arrays.asList("test", "test1, test2", "test", ",,,,")[ CD ]
Line_39 $$ for (int i = 0; i < intValues.size(); i++) -->Line_40 $$ assertEquals(i, intValues.get(i).intValue())[ FD ]
Line_39 $$ for (int i = 0; i < intValues.size(); i++) -->Line_40 $$ assertEquals(i, intValues.get(i).intValue())[ CD ]
Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)-->Line_28 $$ settingUpdater.apply(Settings.builder().put("foo.bar", "1,2,3").build(), Settings.builder().putArray("foo.bar", "123").build())[ FD ]
Line_12 $$ builder = Settings.builder()-->Line_22 $$ settingUpdater.apply(builder.build(), Settings.EMPTY)[ FD ]
Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)-->Line_22 $$ settingUpdater.apply(builder.build(), Settings.EMPTY)[ FD ]
Line_2 $$ public void testListSettings() -->Line_24 $$ assertArrayEquals(ref.get().toArray(new String[0]), input.toArray(new String[0]))[ CD ]
Line_3 $$ Setting<List<String>> listSetting = Setting.listSetting("foo.bar", Arrays.asList("foo,bar"), ( s) -> s.toString(), true, Setting.Scope.CLUSTER)-->Line_16 $$ value = listSetting.get(builder.build())[ FD ]
Line_2 $$ public void testListSettings() -->Line_30 $$ assertArrayEquals(ref.get().toArray(new String[0]), new String[] [ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_26 $$ assertEquals(1, ref.get().size())[ FD ]
Line_8 $$ Settings.Builder builder = Settings.builder().putArray("foo.bar", input.toArray(new String[0]))-->Line_25 $$ settingUpdater.apply(Settings.builder().putArray("foo.bar", "123").build(), builder.build())[ FD ]
Line_2 $$ public void testListSettings() -->Line_20 $$ AbstractScopedSettings.SettingUpdater settingUpdater = listSetting.newUpdater(ref::<>set, logger)[ CD ]
Line_19 $$ AtomicReference<List<String>> ref = new AtomicReference()-->Line_29 $$ assertEquals(3, ref.get().size())[ FD ]
Line_2 $$ public void testListSettings() -->Line_11 $$ assertArrayEquals(value.toArray(new String[0]), input.toArray(new String[0]))[ CD ]
Line_37 $$ List<Integer> intValues = otherSettings.get(Settings.builder().put("foo.bar", "0,1,2,3").build())-->Line_38 $$ assertEquals(4, intValues.size())[ FD ]
