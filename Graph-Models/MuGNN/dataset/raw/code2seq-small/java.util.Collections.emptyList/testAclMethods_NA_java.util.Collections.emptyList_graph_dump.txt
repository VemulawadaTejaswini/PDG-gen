Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_16 $$ viewFs.removeAclEntries(viewFsPath1, entries)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_19 $$ verify(mockFs2).removeAclEntries(mockFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_3 $$ Configuration conf = ViewFileSystemTestSetup.createConfig()[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_17 $$ verify(mockFs1).removeAclEntries(mockFsPath1, entries)[ CD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_35 $$ verify(mockFs2).getAclStatus(mockFsPath2)[ FD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_13 $$ verify(mockFs1).modifyAclEntries(mockFsPath1, entries)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_14 $$ viewFs.modifyAclEntries(viewFsPath2, entries)[ FD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_17 $$ verify(mockFs1).removeAclEntries(mockFsPath1, entries)[ FD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_19 $$ verify(mockFs2).removeAclEntries(mockFsPath2, entries)[ FD ]
Line_3 $$ Configuration conf = ViewFileSystemTestSetup.createConfig()-->Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_24 $$ viewFs.removeAcl(viewFsPath1)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_28 $$ viewFs.setAcl(viewFsPath1, entries)[ FD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_24 $$ viewFs.removeAcl(viewFsPath1)[ FD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_13 $$ verify(mockFs1).modifyAclEntries(mockFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_15 $$ verify(mockFs2).modifyAclEntries(mockFsPath2, entries)[ CD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_29 $$ verify(mockFs1).setAcl(mockFsPath1, entries)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_12 $$ viewFs.modifyAclEntries(viewFsPath1, entries)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_14 $$ viewFs.modifyAclEntries(viewFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_11 $$ List<AclEntry> entries = Collections.emptyList()[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_21 $$ verify(mockFs1).removeDefaultAcl(mockFsPath1)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_14 $$ viewFs.modifyAclEntries(viewFsPath2, entries)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_22 $$ viewFs.removeDefaultAcl(viewFsPath2)[ CD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_21 $$ verify(mockFs1).removeDefaultAcl(mockFsPath1)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))[ CD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_31 $$ verify(mockFs2).setAcl(mockFsPath2, entries)[ FD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_14 $$ viewFs.modifyAclEntries(viewFsPath2, entries)[ FD ]
Line_3 $$ Configuration conf = ViewFileSystemTestSetup.createConfig()-->Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_22 $$ viewFs.removeDefaultAcl(viewFsPath2)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_16 $$ viewFs.removeAclEntries(viewFsPath1, entries)[ FD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_23 $$ verify(mockFs2).removeDefaultAcl(mockFsPath2)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_30 $$ viewFs.setAcl(viewFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_34 $$ viewFs.getAclStatus(viewFsPath2)[ CD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_34 $$ viewFs.getAclStatus(viewFsPath2)[ FD ]
Line_3 $$ Configuration conf = ViewFileSystemTestSetup.createConfig()-->Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")[ CD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_18 $$ viewFs.removeAclEntries(viewFsPath2, entries)[ FD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_32 $$ viewFs.getAclStatus(viewFsPath1)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_18 $$ viewFs.removeAclEntries(viewFsPath2, entries)[ FD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_12 $$ viewFs.modifyAclEntries(viewFsPath1, entries)[ FD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_22 $$ viewFs.removeDefaultAcl(viewFsPath2)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_13 $$ verify(mockFs1).modifyAclEntries(mockFsPath1, entries)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_34 $$ viewFs.getAclStatus(viewFsPath2)[ FD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_25 $$ verify(mockFs1).removeAcl(mockFsPath1)[ FD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_28 $$ viewFs.setAcl(viewFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_20 $$ viewFs.removeDefaultAcl(viewFsPath1)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_35 $$ verify(mockFs2).getAclStatus(mockFsPath2)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_29 $$ verify(mockFs1).setAcl(mockFsPath1, entries)[ CD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_30 $$ viewFs.setAcl(viewFsPath2, entries)[ FD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_25 $$ verify(mockFs1).removeAcl(mockFsPath1)[ FD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_27 $$ verify(mockFs2).removeAcl(mockFsPath2)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_16 $$ viewFs.removeAclEntries(viewFsPath1, entries)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_28 $$ viewFs.setAcl(viewFsPath1, entries)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_13 $$ verify(mockFs1).modifyAclEntries(mockFsPath1, entries)[ CD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_15 $$ verify(mockFs2).modifyAclEntries(mockFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_27 $$ verify(mockFs2).removeAcl(mockFsPath2)[ CD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_32 $$ viewFs.getAclStatus(viewFsPath1)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_20 $$ viewFs.removeDefaultAcl(viewFsPath1)[ FD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_26 $$ viewFs.removeAcl(viewFsPath2)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_12 $$ viewFs.modifyAclEntries(viewFsPath1, entries)[ CD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_20 $$ viewFs.removeDefaultAcl(viewFsPath1)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_33 $$ verify(mockFs1).getAclStatus(mockFsPath1)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_23 $$ verify(mockFs2).removeDefaultAcl(mockFsPath2)[ CD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_29 $$ verify(mockFs1).setAcl(mockFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_24 $$ viewFs.removeAcl(viewFsPath1)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_31 $$ verify(mockFs2).setAcl(mockFsPath2, entries)[ CD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_19 $$ verify(mockFs2).removeAclEntries(mockFsPath2, entries)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_12 $$ viewFs.modifyAclEntries(viewFsPath1, entries)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_17 $$ verify(mockFs1).removeAclEntries(mockFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_19 $$ verify(mockFs2).removeAclEntries(mockFsPath2, entries)[ CD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_28 $$ viewFs.setAcl(viewFsPath1, entries)[ FD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_15 $$ verify(mockFs2).modifyAclEntries(mockFsPath2, entries)[ FD ]
Line_9 $$ Path viewFsPath2 = new Path("/mounts/mockfs2/d/e/f")-->Line_18 $$ viewFs.removeAclEntries(viewFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_18 $$ viewFs.removeAclEntries(viewFsPath2, entries)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_25 $$ verify(mockFs1).removeAcl(mockFsPath1)[ CD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_15 $$ verify(mockFs2).modifyAclEntries(mockFsPath2, entries)[ FD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_33 $$ verify(mockFs1).getAclStatus(mockFsPath1)[ FD ]
Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")-->Line_33 $$ verify(mockFs1).getAclStatus(mockFsPath1)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))[ CD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_31 $$ verify(mockFs2).setAcl(mockFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_30 $$ viewFs.setAcl(viewFsPath2, entries)[ CD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_26 $$ viewFs.removeAcl(viewFsPath2)[ CD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_30 $$ viewFs.setAcl(viewFsPath2, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_8 $$ Path mockFsPath1 = new Path("/a/b/c")[ CD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_31 $$ verify(mockFs2).setAcl(mockFsPath2, entries)[ FD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_21 $$ verify(mockFs1).removeDefaultAcl(mockFsPath1)[ FD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_23 $$ verify(mockFs2).removeDefaultAcl(mockFsPath2)[ FD ]
Line_7 $$ Path viewFsPath1 = new Path("/mounts/mockfs1/a/b/c")-->Line_16 $$ viewFs.removeAclEntries(viewFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_32 $$ viewFs.getAclStatus(viewFsPath1)[ CD ]
Line_5 $$ FileSystem mockFs2 = setupMockFileSystem(conf, new URI("mockfs2:/"))-->Line_35 $$ verify(mockFs2).getAclStatus(mockFsPath2)[ FD ]
Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")-->Line_27 $$ verify(mockFs2).removeAcl(mockFsPath2)[ FD ]
Line_4 $$ FileSystem mockFs1 = setupMockFileSystem(conf, new URI("mockfs1:/"))-->Line_17 $$ verify(mockFs1).removeAclEntries(mockFsPath1, entries)[ FD ]
Line_6 $$ FileSystem viewFs = FileSystem.get(FsConstants.VIEWFS_URI, conf)-->Line_26 $$ viewFs.removeAcl(viewFsPath2)[ FD ]
Line_11 $$ List<AclEntry> entries = Collections.emptyList()-->Line_29 $$ verify(mockFs1).setAcl(mockFsPath1, entries)[ FD ]
Line_2 $$ public void testAclMethods() throws Exception -->Line_10 $$ Path mockFsPath2 = new Path("/d/e/f")[ CD ]
