Line_10 $$ if (results != null) -->Line_12 $$ if (element instanceof PyFile) [ CD ]
Line_5 $$ if (sdk != null) -->Line_17 $$ if (directory != null) [ CD ]
Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)-->Line_23 $$ if (fileSkeleton instanceof PyFile) [ FD ]
Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)-->Line_9 $$ final List<PsiElement> results = cache.get(cacheQName)[ FD ]
Line_16 $$ final VirtualFile directory = getUserSkeletonsDirectory()-->Line_17 $$ if (directory != null) [ FD ]
Line_5 $$ if (sdk != null) -->Line_9 $$ final List<PsiElement> results = cache.get(cacheQName)[ CD ]
Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)-->Line_28 $$ cache.put(cacheQName, Collections.<PsiElement>emptyList())[ FD ]
Line_16 $$ final VirtualFile directory = getUserSkeletonsDirectory()-->Line_18 $$ final PsiDirectory psiDirectory = PsiManager.getInstance(project).findDirectory(directory)[ FD ]
Line_9 $$ final List<PsiElement> results = cache.get(cacheQName)-->Line_11 $$ final PsiElement element = results.isEmpty() ? null : results.get(0)[ FD ]
Line_21 $$ fileSkeleton = PyUtil.getPackageElement((PsiDirectory) fileSkeleton, foothold)-->Line_23 $$ if (fileSkeleton instanceof PyFile) [ FD ]
Line_8 $$ final QualifiedName cacheQName = QualifiedName.fromDottedString(USER_SKELETONS_DIR + "." + qName)-->Line_9 $$ final List<PsiElement> results = cache.get(cacheQName)[ FD ]
Line_5 $$ if (sdk != null) -->Line_10 $$ if (results != null) [ CD ]
Line_17 $$ if (directory != null) -->Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)[ CD ]
Line_17 $$ if (directory != null) -->Line_20 $$ if (fileSkeleton instanceof PsiDirectory) [ CD ]
Line_5 $$ if (sdk != null) -->Line_28 $$ cache.put(cacheQName, Collections.<PsiElement>emptyList())[ CD ]
Line_17 $$ if (directory != null) -->Line_18 $$ final PsiDirectory psiDirectory = PsiManager.getInstance(project).findDirectory(directory)[ CD ]
Line_5 $$ if (sdk != null) -->Line_8 $$ final QualifiedName cacheQName = QualifiedName.fromDottedString(USER_SKELETONS_DIR + "." + qName)[ CD ]
Line_8 $$ final QualifiedName cacheQName = QualifiedName.fromDottedString(USER_SKELETONS_DIR + "." + qName)-->Line_24 $$ cache.put(cacheQName, Collections.singletonList(fileSkeleton))[ FD ]
Line_23 $$ if (fileSkeleton instanceof PyFile) -->Line_24 $$ cache.put(cacheQName, Collections.singletonList(fileSkeleton))[ CD ]
Line_10 $$ if (results != null) -->Line_11 $$ final PsiElement element = results.isEmpty() ? null : results.get(0)[ CD ]
Line_4 $$ final Sdk sdk = PythonSdkType.getSdk(foothold)-->Line_5 $$ if (sdk != null) [ FD ]
Line_8 $$ final QualifiedName cacheQName = QualifiedName.fromDottedString(USER_SKELETONS_DIR + "." + qName)-->Line_28 $$ cache.put(cacheQName, Collections.<PsiElement>emptyList())[ FD ]
Line_5 $$ if (sdk != null) -->Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)[ CD ]
Line_18 $$ final PsiDirectory psiDirectory = PsiManager.getInstance(project).findDirectory(directory)-->Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)[ FD ]
Line_5 $$ if (sdk != null) -->Line_16 $$ final VirtualFile directory = getUserSkeletonsDirectory()[ CD ]
Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)-->Line_24 $$ cache.put(cacheQName, Collections.singletonList(fileSkeleton))[ FD ]
Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)-->Line_24 $$ cache.put(cacheQName, Collections.singletonList(fileSkeleton))[ FD ]
Line_6 $$ final Project project = foothold.getProject()-->Line_18 $$ final PsiDirectory psiDirectory = PsiManager.getInstance(project).findDirectory(directory)[ FD ]
Line_4 $$ final Sdk sdk = PythonSdkType.getSdk(foothold)-->Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)[ FD ]
Line_6 $$ final Project project = foothold.getProject()-->Line_7 $$ final PythonSdkPathCache cache = PythonSdkPathCache.getInstance(project, sdk)[ FD ]
Line_17 $$ if (directory != null) -->Line_23 $$ if (fileSkeleton instanceof PyFile) [ CD ]
Line_20 $$ if (fileSkeleton instanceof PsiDirectory) -->Line_21 $$ fileSkeleton = PyUtil.getPackageElement((PsiDirectory) fileSkeleton, foothold)[ CD ]
Line_23 $$ if (fileSkeleton instanceof PyFile) -->Line_25 $$ return (PyFile) fileSkeleton[ CD ]
Line_11 $$ final PsiElement element = results.isEmpty() ? null : results.get(0)-->Line_12 $$ if (element instanceof PyFile) [ FD ]
Line_21 $$ fileSkeleton = PyUtil.getPackageElement((PsiDirectory) fileSkeleton, foothold)-->Line_24 $$ cache.put(cacheQName, Collections.singletonList(fileSkeleton))[ FD ]
Line_9 $$ final List<PsiElement> results = cache.get(cacheQName)-->Line_10 $$ if (results != null) [ FD ]
Line_5 $$ if (sdk != null) -->Line_6 $$ final Project project = foothold.getProject()[ CD ]
Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)-->Line_21 $$ fileSkeleton = PyUtil.getPackageElement((PsiDirectory) fileSkeleton, foothold)[ FD ]
Line_12 $$ if (element instanceof PyFile) -->Line_13 $$ return (PyFile) element[ CD ]
Line_19 $$ PsiElement fileSkeleton = new QualifiedNameResolverImpl(qName).resolveModuleAt(psiDirectory)-->Line_20 $$ if (fileSkeleton instanceof PsiDirectory) [ FD ]
