Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_38 $$ parser.notifyFinished(process.exitValue())[ FD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_7 $$ classpath.add(ClasspathBootstrap.getResourcePath(UrlClassLoader.class))[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_22 $$ String grapeRoot = System.getProperty(GroovycOutputParser.GRAPE_ROOT)[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_13 $$ vmParams.add("-Xmx" + System.getProperty("groovyc.heap.size", settings.heapSize) + "m")[ CD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_36 $$ handler.startNotify()[ FD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ FD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_10 $$ classpath.addAll(compilationClassPath)[ FD ]
Line_4 $$ if (myOptimizeClassLoading) -->Line_10 $$ classpath.addAll(compilationClassPath)[ CD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_20 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_CONFIG_SCRIPT + "=" + configScript)[ FD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_30 $$ return SharedThreadPool.getInstance().executeOnPooledThread(task)[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_15 $$ if ("false".equals(System.getProperty(GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY))) [ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_18 $$ String configScript = settings.configScript[ CD ]
Line_4 $$ if (myOptimizeClassLoading) -->Line_5 $$ classpath.addAll(GroovyBuilder.getGroovyRtRoots())[ CD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_33 $$ parser.notifyTextAvailable(text, outputType)[ CD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_6 $$ classpath.add(ClasspathBootstrap.getResourcePath(Function.class))[ FD ]
Line_19 $$ if (StringUtil.isNotEmpty(configScript)) -->Line_20 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_CONFIG_SCRIPT + "=" + configScript)[ CD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_33 $$ parser.notifyTextAvailable(text, outputType)[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_39 $$ return null[ CD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_5 $$ classpath.addAll(GroovyBuilder.getGroovyRtRoots())[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_38 $$ parser.notifyFinished(process.exitValue())[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_23 $$ if (grapeRoot != null) [ CD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_10 $$ classpath.addAll(compilationClassPath)[ FD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_24 $$ vmParams.add("-D" + GroovycOutputParser.GRAPE_ROOT + "=" + grapeRoot)[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_37 $$ handler.waitFor()[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_4 $$ if (myOptimizeClassLoading) [ CD ]
Line_4 $$ if (myOptimizeClassLoading) -->Line_8 $$ classpath.add(ClasspathBootstrap.getResourceFile(THashMap.class).getPath())[ CD ]
Line_3 $$ List<String> classpath = new ArrayList<String>()-->Line_8 $$ classpath.add(ClasspathBootstrap.getResourceFile(THashMap.class).getPath())[ FD ]
Line_22 $$ String grapeRoot = System.getProperty(GroovycOutputParser.GRAPE_ROOT)-->Line_23 $$ if (grapeRoot != null) [ FD ]
Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))-->Line_27 $$ final Process process = Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd))[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_3 $$ List<String> classpath = new ArrayList<String>()[ CD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_14 $$ vmParams.add("-Dfile.encoding=" + System.getProperty("file.encoding"))[ FD ]
Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))-->Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) [ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_27 $$ final Process process = Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd))[ CD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_13 $$ vmParams.add("-Xmx" + System.getProperty("groovyc.heap.size", settings.heapSize) + "m")[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_33 $$ parser.notifyTextAvailable(text, outputType)[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()[ CD ]
Line_18 $$ String configScript = settings.configScript-->Line_19 $$ if (StringUtil.isNotEmpty(configScript)) [ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) [ CD ]
Line_4 $$ if (myOptimizeClassLoading) -->Line_7 $$ classpath.add(ClasspathBootstrap.getResourcePath(UrlClassLoader.class))[ CD ]
Line_12 $$ List<String> vmParams = ContainerUtilRt.newArrayList()-->Line_16 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY + "=false")[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_36 $$ handler.startNotify()[ CD ]
Line_15 $$ if ("false".equals(System.getProperty(GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY))) -->Line_16 $$ vmParams.add("-D" + GroovyRtConstants.GROOVYC_ASM_RESOLVING_ONLY + "=false")[ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_19 $$ if (StringUtil.isNotEmpty(configScript)) [ CD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_26 $$ final List<String> cmd = ExternalProcessUtil.buildJavaCommandLine(getJavaExecutable(myChunk), "org.jetbrains.groovy.compiler.rt.GroovycRunner", Collections.<String>emptyList(), classpath, vmParams, getProgramParams(tempFile, settings, forStubs))[ FD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_37 $$ handler.waitFor()[ FD ]
Line_27 $$ final Process process = Runtime.getRuntime().exec(ArrayUtil.toStringArray(cmd))-->Line_38 $$ parser.notifyFinished(process.exitValue())[ FD ]
Line_2 $$ public GroovycContinuation runGroovyc(Collection<String> compilationClassPath, boolean forStubs, JpsGroovySettings settings, File tempFile, final GroovycOutputParser parser) throws Exception -->Line_14 $$ vmParams.add("-Dfile.encoding=" + System.getProperty("file.encoding"))[ CD ]
Line_28 $$ ProcessHandler handler = new BaseOSProcessHandler(process, StringUtil.join(cmd, " "), null) -->Line_30 $$ return SharedThreadPool.getInstance().executeOnPooledThread(task)[ FD ]
Line_23 $$ if (grapeRoot != null) -->Line_24 $$ vmParams.add("-D" + GroovycOutputParser.GRAPE_ROOT + "=" + grapeRoot)[ CD ]
Line_4 $$ if (myOptimizeClassLoading) -->Line_6 $$ classpath.add(ClasspathBootstrap.getResourcePath(Function.class))[ CD ]
