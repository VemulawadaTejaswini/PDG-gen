Line_10 $$ List<String> aspectNames = null-->Line_15 $$ aspectNames = new LinkedList<String>()[ FD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_33 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)[ CD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_34 $$ if (this.beanFactory.isSingleton(beanName)) [ CD ]
Line_15 $$ aspectNames = new LinkedList<String>()-->Line_51 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_60 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)-->Line_61 $$ if (cachedAdvisors != null) [ FD ]
Line_17 $$ for (String beanName : beanNames) -->Line_37 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_13 $$ if (aspectNames == null) -->Line_51 $$ this.aspectBeanNames = aspectNames[ CD ]
Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_37 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)[ CD ]
Line_13 $$ if (aspectNames == null) -->Line_52 $$ return advisors[ CD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_39 $$ advisors.addAll(classAdvisors)[ CD ]
Line_17 $$ for (String beanName : beanNames) -->Line_46 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_10 $$ List<String> aspectNames = null-->Line_51 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_30 $$ AspectMetadata amd = new AspectMetadata(beanType, beanName)-->Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) [ FD ]
Line_13 $$ if (aspectNames == null) -->Line_15 $$ aspectNames = new LinkedList<String>()[ CD ]
Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_33 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)[ FD ]
Line_28 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) [ CD ]
Line_17 $$ for (String beanName : beanNames) -->Line_34 $$ if (this.beanFactory.isSingleton(beanName)) [ FD ]
Line_34 $$ if (this.beanFactory.isSingleton(beanName)) -->Line_35 $$ this.advisorsCache.put(beanName, classAdvisors)[ CD ]
Line_28 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_29 $$ aspectNames.add(beanName)[ CD ]
Line_15 $$ aspectNames = new LinkedList<String>()-->Line_55 $$ if (aspectNames.isEmpty()) [ FD ]
Line_28 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_30 $$ AspectMetadata amd = new AspectMetadata(beanType, beanName)[ CD ]
Line_33 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)-->Line_35 $$ this.advisorsCache.put(beanName, classAdvisors)[ FD ]
Line_12 $$ aspectNames = this.aspectBeanNames-->Line_51 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_17 $$ for (String beanName : beanNames) -->Line_29 $$ aspectNames.add(beanName)[ FD ]
Line_59 $$ for (String aspectName : aspectNames) -->Line_60 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)[ FD ]
Line_12 $$ aspectNames = this.aspectBeanNames-->Line_29 $$ aspectNames.add(beanName)[ FD ]
Line_12 $$ aspectNames = this.aspectBeanNames-->Line_13 $$ if (aspectNames == null) [ FD ]
Line_14 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_62 $$ advisors.addAll(cachedAdvisors)[ FD ]
Line_13 $$ if (aspectNames == null) -->Line_16 $$ String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false)[ CD ]
Line_55 $$ if (aspectNames.isEmpty()) -->Line_56 $$ return Collections.emptyList()[ CD ]
Line_61 $$ if (cachedAdvisors != null) -->Line_65 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ CD ]
Line_33 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)-->Line_39 $$ advisors.addAll(classAdvisors)[ FD ]
Line_14 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_39 $$ advisors.addAll(classAdvisors)[ FD ]
Line_10 $$ List<String> aspectNames = null-->Line_13 $$ if (aspectNames == null) [ FD ]
Line_60 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)-->Line_62 $$ advisors.addAll(cachedAdvisors)[ FD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_46 $$ this.aspectFactoryCache.put(beanName, factory)[ CD ]
Line_10 $$ List<String> aspectNames = null-->Line_55 $$ if (aspectNames.isEmpty()) [ FD ]
Line_31 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_47 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ CD ]
Line_17 $$ for (String beanName : beanNames) -->Line_35 $$ this.advisorsCache.put(beanName, classAdvisors)[ FD ]
Line_10 $$ List<String> aspectNames = null-->Line_12 $$ aspectNames = this.aspectBeanNames[ FD ]
Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_47 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_14 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_65 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_59 $$ for (String aspectName : aspectNames) -->Line_64 $$ MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)[ FD ]
Line_13 $$ if (aspectNames == null) -->Line_14 $$ List<Advisor> advisors = new LinkedList<Advisor>()[ CD ]
Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_46 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_61 $$ if (cachedAdvisors != null) -->Line_62 $$ advisors.addAll(cachedAdvisors)[ CD ]
Line_61 $$ if (cachedAdvisors != null) -->Line_64 $$ MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)[ CD ]
Line_12 $$ aspectNames = this.aspectBeanNames-->Line_15 $$ aspectNames = new LinkedList<String>()[ FD ]
Line_10 $$ List<String> aspectNames = null-->Line_29 $$ aspectNames.add(beanName)[ FD ]
Line_14 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_47 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_34 $$ if (this.beanFactory.isSingleton(beanName)) -->Line_37 $$ this.aspectFactoryCache.put(beanName, factory)[ CD ]
Line_32 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_65 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_15 $$ aspectNames = new LinkedList<String>()-->Line_29 $$ aspectNames.add(beanName)[ FD ]
Line_17 $$ for (String beanName : beanNames) -->Line_18 $$ if (!isEligibleBean(beanName)) [ FD ]
Line_12 $$ aspectNames = this.aspectBeanNames-->Line_55 $$ if (aspectNames.isEmpty()) [ FD ]
