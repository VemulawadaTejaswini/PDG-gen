Line_3 $$ List<String> aspectNames = null-->Line_44 $$ if (aspectNames.isEmpty()) [ FD ]
Line_18 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_19 $$ aspectNames.add(beanName)[ CD ]
Line_50 $$ if (cachedAdvisors != null) -->Line_53 $$ MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)[ CD ]
Line_6 $$ if (aspectNames == null) -->Line_7 $$ List<Advisor> advisors = new LinkedList<Advisor>()[ CD ]
Line_23 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)-->Line_25 $$ this.advisorsCache.put(beanName, classAdvisors)[ FD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)[ CD ]
Line_2 $$ public List<Advisor> buildAspectJAdvisors() -->Line_44 $$ if (aspectNames.isEmpty()) [ CD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_35 $$ this.aspectFactoryCache.put(beanName, factory)[ CD ]
Line_3 $$ List<String> aspectNames = null-->Line_40 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_2 $$ public List<Advisor> buildAspectJAdvisors() -->Line_3 $$ List<String> aspectNames = null[ CD ]
Line_5 $$ aspectNames = this.aspectBeanNames-->Line_44 $$ if (aspectNames.isEmpty()) [ FD ]
Line_6 $$ if (aspectNames == null) -->Line_9 $$ String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Object.class, true, false)[ CD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_36 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ CD ]
Line_3 $$ List<String> aspectNames = null-->Line_8 $$ aspectNames = new LinkedList<String>()[ FD ]
Line_7 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_29 $$ advisors.addAll(classAdvisors)[ FD ]
Line_8 $$ aspectNames = new LinkedList<String>()-->Line_44 $$ if (aspectNames.isEmpty()) [ FD ]
Line_49 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)-->Line_51 $$ advisors.addAll(cachedAdvisors)[ FD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_24 $$ if (this.beanFactory.isSingleton(beanName)) [ CD ]
Line_8 $$ aspectNames = new LinkedList<String>()-->Line_19 $$ aspectNames.add(beanName)[ FD ]
Line_6 $$ if (aspectNames == null) -->Line_40 $$ this.aspectBeanNames = aspectNames[ CD ]
Line_10 $$ for (String beanName : beanNames) -->Line_11 $$ if (!isEligibleBean(beanName)) [ FD ]
Line_10 $$ for (String beanName : beanNames) -->Line_31 $$ if (this.beanFactory.isSingleton(beanName)) [ FD ]
Line_48 $$ for (String aspectName : aspectNames) -->Line_53 $$ MetadataAwareAspectInstanceFactory factory = this.aspectFactoryCache.get(aspectName)[ FD ]
Line_48 $$ for (String aspectName : aspectNames) -->Line_49 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)[ FD ]
Line_10 $$ for (String beanName : beanNames) -->Line_25 $$ this.advisorsCache.put(beanName, classAdvisors)[ FD ]
Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_54 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_2 $$ public List<Advisor> buildAspectJAdvisors() -->Line_57 $$ return advisors[ CD ]
Line_10 $$ for (String beanName : beanNames) -->Line_24 $$ if (this.beanFactory.isSingleton(beanName)) [ FD ]
Line_23 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)-->Line_29 $$ advisors.addAll(classAdvisors)[ FD ]
Line_10 $$ for (String beanName : beanNames) -->Line_14 $$ Class<?> beanType = this.beanFactory.getType(beanName)[ FD ]
Line_14 $$ Class<?> beanType = this.beanFactory.getType(beanName)-->Line_18 $$ if (this.advisorFactory.isAspect(beanType)) [ FD ]
Line_44 $$ if (aspectNames.isEmpty()) -->Line_45 $$ return Collections.emptyList()[ CD ]
Line_5 $$ aspectNames = this.aspectBeanNames-->Line_8 $$ aspectNames = new LinkedList<String>()[ FD ]
Line_5 $$ aspectNames = this.aspectBeanNames-->Line_40 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_23 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)[ FD ]
Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_36 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_49 $$ List<Advisor> cachedAdvisors = this.advisorsCache.get(aspectName)-->Line_50 $$ if (cachedAdvisors != null) [ FD ]
Line_8 $$ aspectNames = new LinkedList<String>()-->Line_40 $$ this.aspectBeanNames = aspectNames[ FD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_29 $$ advisors.addAll(classAdvisors)[ CD ]
Line_3 $$ List<String> aspectNames = null-->Line_19 $$ aspectNames.add(beanName)[ FD ]
Line_14 $$ Class<?> beanType = this.beanFactory.getType(beanName)-->Line_15 $$ if (beanType == null) [ FD ]
Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_35 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_6 $$ if (aspectNames == null) -->Line_41 $$ return advisors[ CD ]
Line_3 $$ List<String> aspectNames = null-->Line_5 $$ aspectNames = this.aspectBeanNames[ FD ]
Line_7 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_36 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_18 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) [ CD ]
Line_50 $$ if (cachedAdvisors != null) -->Line_51 $$ advisors.addAll(cachedAdvisors)[ CD ]
Line_6 $$ if (aspectNames == null) -->Line_8 $$ aspectNames = new LinkedList<String>()[ CD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_23 $$ List<Advisor> classAdvisors = this.advisorFactory.getAdvisors(factory)[ CD ]
Line_3 $$ List<String> aspectNames = null-->Line_6 $$ if (aspectNames == null) [ FD ]
Line_20 $$ AspectMetadata amd = new AspectMetadata(beanType, beanName)-->Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) [ FD ]
Line_21 $$ if (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) -->Line_31 $$ if (this.beanFactory.isSingleton(beanName)) [ CD ]
Line_10 $$ for (String beanName : beanNames) -->Line_19 $$ aspectNames.add(beanName)[ FD ]
Line_22 $$ MetadataAwareAspectInstanceFactory factory = new BeanFactoryAspectInstanceFactory(this.beanFactory, beanName)-->Line_27 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_18 $$ if (this.advisorFactory.isAspect(beanType)) -->Line_20 $$ AspectMetadata amd = new AspectMetadata(beanType, beanName)[ CD ]
Line_24 $$ if (this.beanFactory.isSingleton(beanName)) -->Line_27 $$ this.aspectFactoryCache.put(beanName, factory)[ CD ]
Line_50 $$ if (cachedAdvisors != null) -->Line_54 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ CD ]
Line_7 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_51 $$ advisors.addAll(cachedAdvisors)[ FD ]
Line_7 $$ List<Advisor> advisors = new LinkedList<Advisor>()-->Line_54 $$ advisors.addAll(this.advisorFactory.getAdvisors(factory))[ FD ]
Line_5 $$ aspectNames = this.aspectBeanNames-->Line_6 $$ if (aspectNames == null) [ FD ]
Line_24 $$ if (this.beanFactory.isSingleton(beanName)) -->Line_25 $$ this.advisorsCache.put(beanName, classAdvisors)[ CD ]
Line_5 $$ aspectNames = this.aspectBeanNames-->Line_19 $$ aspectNames.add(beanName)[ FD ]
Line_10 $$ for (String beanName : beanNames) -->Line_27 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
Line_10 $$ for (String beanName : beanNames) -->Line_35 $$ this.aspectFactoryCache.put(beanName, factory)[ FD ]
