Line_9 $$ if (dateFrom == null) -->Line_11 $$ calendar.set(1970, Calendar.MARCH, 2)[ CD ]
Line_6 $$ final CvsChangeListsBuilder builder = new CvsChangeListsBuilder(module, connectionSettings, myProject, rootFile)-->Line_18 $$ builder.add(logInformationWrapper)[ FD ]
Line_24 $$ if (executionResult.hasErrors()) -->Line_27 $$ final List<CvsChangeList> versions = builder.getVersions()[ CD ]
Line_6 $$ final CvsChangeListsBuilder builder = new CvsChangeListsBuilder(module, connectionSettings, myProject, rootFile)-->Line_27 $$ final List<CvsChangeList> versions = builder.getVersions()[ FD ]
Line_24 $$ if (executionResult.hasErrors()) -->Line_28 $$ settings.filterChanges(versions)[ CD ]
Line_14 $$ final LoadHistoryOperation operation = new LoadHistoryOperation(connectionSettings, module, dateFrom, dateTo, new Consumer<LogInformationWrapper>() -->Line_18 $$ builder.add(logInformationWrapper)[ CD ]
Line_8 $$ Date dateFrom = settings.getDateAfterFilter()-->Line_9 $$ if (dateFrom == null) [ FD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_14 $$ final LoadHistoryOperation operation = new LoadHistoryOperation(connectionSettings, module, dateFrom, dateTo, new Consumer<LogInformationWrapper>() [ CD ]
Line_10 $$ final Calendar calendar = Calendar.getInstance()-->Line_12 $$ dateFrom = calendar.getTime()[ FD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_7 $$ final Date dateTo = settings.getDateBeforeFilter()[ CD ]
Line_3 $$ if (connectionSettings.isOffline()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_8 $$ Date dateFrom = settings.getDateAfterFilter()[ CD ]
Line_9 $$ if (dateFrom == null) -->Line_10 $$ final Calendar calendar = Calendar.getInstance()[ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_7 $$ final Date dateTo = settings.getDateBeforeFilter()[ FD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_22 $$ if (executionResult.isCanceled()) [ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_6 $$ final CvsChangeListsBuilder builder = new CvsChangeListsBuilder(module, connectionSettings, myProject, rootFile)[ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_21 $$ final CvsResult executionResult = operation.run(myProject)[ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_8 $$ Date dateFrom = settings.getDateAfterFilter()[ FD ]
Line_14 $$ final LoadHistoryOperation operation = new LoadHistoryOperation(connectionSettings, module, dateFrom, dateTo, new Consumer<LogInformationWrapper>() -->Line_21 $$ final CvsResult executionResult = operation.run(myProject)[ FD ]
Line_10 $$ final Calendar calendar = Calendar.getInstance()-->Line_11 $$ calendar.set(1970, Calendar.MARCH, 2)[ FD ]
Line_14 $$ final LoadHistoryOperation operation = new LoadHistoryOperation(connectionSettings, module, dateFrom, dateTo, new Consumer<LogInformationWrapper>() -->Line_18 $$ builder.add(logInformationWrapper)[ FD ]
Line_24 $$ if (executionResult.hasErrors()) -->Line_29 $$ return versions[ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_3 $$ if (connectionSettings.isOffline()) [ CD ]
Line_9 $$ if (dateFrom == null) -->Line_12 $$ dateFrom = calendar.getTime()[ CD ]
Line_22 $$ if (executionResult.isCanceled()) -->Line_24 $$ if (executionResult.hasErrors()) [ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_3 $$ if (connectionSettings.isOffline()) [ FD ]
Line_8 $$ Date dateFrom = settings.getDateAfterFilter()-->Line_12 $$ dateFrom = calendar.getTime()[ FD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_9 $$ if (dateFrom == null) [ CD ]
Line_2 $$ private List<CvsChangeList> loadCommittedChanges(final ChangeBrowserSettings settings, final String module, CvsEnvironment connectionSettings, final VirtualFile rootFile) throws VcsException -->Line_28 $$ settings.filterChanges(versions)[ FD ]
