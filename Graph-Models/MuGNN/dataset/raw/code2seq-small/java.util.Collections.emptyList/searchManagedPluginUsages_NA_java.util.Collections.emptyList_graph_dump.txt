Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_8 $$ if (model == null)[ CD ]
Line_8 $$ if (model == null)-->Line_9 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_10 $$ return searchManagedPluginUsages(model, groupId, artifactId)[ CD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_4 $$ if (artifactId == null)[ CD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_3 $$ String artifactId = plugin.getArtifactId().getStringValue()[ FD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_7 $$ MavenDomProjectModel model = plugin.getParentOfType(MavenDomProjectModel.class, false)[ FD ]
Line_7 $$ MavenDomProjectModel model = plugin.getParentOfType(MavenDomProjectModel.class, false)-->Line_8 $$ if (model == null)[ FD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_6 $$ String groupId = plugin.getGroupId().getStringValue()[ FD ]
Line_3 $$ String artifactId = plugin.getArtifactId().getStringValue()-->Line_10 $$ return searchManagedPluginUsages(model, groupId, artifactId)[ FD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_6 $$ String groupId = plugin.getGroupId().getStringValue()[ CD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_7 $$ MavenDomProjectModel model = plugin.getParentOfType(MavenDomProjectModel.class, false)[ CD ]
Line_3 $$ String artifactId = plugin.getArtifactId().getStringValue()-->Line_4 $$ if (artifactId == null)[ FD ]
Line_2 $$ public static Collection<MavenDomPlugin> searchManagedPluginUsages(@NotNull final MavenDomPlugin plugin) -->Line_3 $$ String artifactId = plugin.getArtifactId().getStringValue()[ CD ]
Line_6 $$ String groupId = plugin.getGroupId().getStringValue()-->Line_10 $$ return searchManagedPluginUsages(model, groupId, artifactId)[ FD ]
Line_4 $$ if (artifactId == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_7 $$ MavenDomProjectModel model = plugin.getParentOfType(MavenDomProjectModel.class, false)-->Line_10 $$ return searchManagedPluginUsages(model, groupId, artifactId)[ FD ]
