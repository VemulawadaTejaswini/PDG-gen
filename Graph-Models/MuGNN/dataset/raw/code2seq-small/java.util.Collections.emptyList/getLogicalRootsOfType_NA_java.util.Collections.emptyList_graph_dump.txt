Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_11 $$ return new ArrayList<T>((Collection<T>) collection)[ CD ]
Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> map = roots.get(module)-->Line_5 $$ if (map == null) [ FD ]
Line_5 $$ if (map == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_9 $$ if (collection == null)-->Line_10 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_9 $$ if (collection == null)[ CD ]
Line_8 $$ Collection<LogicalRoot> collection = map.get(type)-->Line_9 $$ if (collection == null)[ FD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> map = roots.get(module)[ FD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_8 $$ Collection<LogicalRoot> collection = map.get(type)[ CD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_8 $$ Collection<LogicalRoot> collection = map.get(type)[ FD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_5 $$ if (map == null) [ CD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_3 $$ final Map<Module, MultiValuesMap<LogicalRootType, LogicalRoot>> roots = getRoots(myModuleManager)[ CD ]
Line_3 $$ final Map<Module, MultiValuesMap<LogicalRootType, LogicalRoot>> roots = getRoots(myModuleManager)-->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> map = roots.get(module)[ FD ]
Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> map = roots.get(module)-->Line_8 $$ Collection<LogicalRoot> collection = map.get(type)[ FD ]
Line_2 $$ public <T extends LogicalRoot> List<T> getLogicalRootsOfType(@NotNull final Module module, @NotNull final LogicalRootType<T> type) -->Line_4 $$ final MultiValuesMap<LogicalRootType, LogicalRoot> map = roots.get(module)[ CD ]
