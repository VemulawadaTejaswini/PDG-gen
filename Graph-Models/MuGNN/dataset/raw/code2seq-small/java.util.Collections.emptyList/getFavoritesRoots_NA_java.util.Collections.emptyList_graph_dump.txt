Line_2 $$ public static Collection<AbstractTreeNode> getFavoritesRoots(Project project, String listName, final FavoritesListNode listNode) -->Line_3 $$ final Collection<TreeItem<Pair<AbstractUrl, String>>> pairs = FavoritesManager.getInstance(project).getFavoritesListRootUrls(listName)[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> getFavoritesRoots(Project project, String listName, final FavoritesListNode listNode) -->Line_4 $$ if (pairs.isEmpty())[ CD ]
Line_3 $$ final Collection<TreeItem<Pair<AbstractUrl, String>>> pairs = FavoritesManager.getInstance(project).getFavoritesListRootUrls(listName)-->Line_6 $$ return createFavoriteRoots(project, pairs, listNode)[ FD ]
Line_4 $$ if (pairs.isEmpty())-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> getFavoritesRoots(Project project, String listName, final FavoritesListNode listNode) -->Line_6 $$ return createFavoriteRoots(project, pairs, listNode)[ CD ]
Line_2 $$ public static Collection<AbstractTreeNode> getFavoritesRoots(Project project, String listName, final FavoritesListNode listNode) -->Line_3 $$ final Collection<TreeItem<Pair<AbstractUrl, String>>> pairs = FavoritesManager.getInstance(project).getFavoritesListRootUrls(listName)[ CD ]
Line_3 $$ final Collection<TreeItem<Pair<AbstractUrl, String>>> pairs = FavoritesManager.getInstance(project).getFavoritesListRootUrls(listName)-->Line_4 $$ if (pairs.isEmpty())[ FD ]
Line_2 $$ public static Collection<AbstractTreeNode> getFavoritesRoots(Project project, String listName, final FavoritesListNode listNode) -->Line_6 $$ return createFavoriteRoots(project, pairs, listNode)[ FD ]
