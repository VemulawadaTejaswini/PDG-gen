Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_3 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) [ CD ]
Line_7 $$ if (document == null || line >= document.getLineCount()) -->Line_8 $$ return Collections.emptyList()[ CD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_25 $$ if (!onlyOnTheLine || getFirstElementOnTheLine(expression, document, line) != null) [ CD ]
Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) -->Line_37 $$ if (!intersects(lineRange, sibling)) [ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_19 $$ final List<PsiLambdaExpression> lambdas = new ArrayList<PsiLambdaExpression>(3)[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_4 $$ PsiFile file = position.getFile()[ FD ]
Line_5 $$ final int line = position.getLine()-->Line_11 $$ final TextRange lineRange = DocumentUtil.getLineTextRange(document, line)[ FD ]
Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) -->Line_37 $$ if (!intersects(lineRange, sibling)) [ CD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_25 $$ if (!onlyOnTheLine || getFirstElementOnTheLine(expression, document, line) != null) [ FD ]
Line_12 $$ do -->Line_14 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ CD ]
Line_13 $$ PsiElement parent = element.getParent()-->Line_14 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_12 $$ do -->Line_13 $$ PsiElement parent = element.getParent()[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_12 $$ do [ CD ]
Line_33 $$ if (method instanceof PsiLambdaExpression) -->Line_34 $$ lambdas.add((PsiLambdaExpression) method)[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_6 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ CD ]
Line_19 $$ final List<PsiLambdaExpression> lambdas = new ArrayList<PsiLambdaExpression>(3)-->Line_26 $$ lambdas.add(expression)[ FD ]
Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) -->Line_40 $$ sibling.accept(lambdaCollector)[ FD ]
Line_11 $$ final TextRange lineRange = DocumentUtil.getLineTextRange(document, line)-->Line_14 $$ if (parent == null || (parent.getTextOffset() < lineRange.getStartOffset())) [ FD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_24 $$ super.visitLambdaExpression(expression)[ FD ]
Line_5 $$ final int line = position.getLine()-->Line_25 $$ if (!onlyOnTheLine || getFirstElementOnTheLine(expression, document, line) != null) [ FD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_26 $$ lambdas.add(expression)[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_10 $$ PsiElement element = position.getElementAt()[ CD ]
Line_10 $$ PsiElement element = position.getElementAt()-->Line_13 $$ PsiElement parent = element.getParent()[ FD ]
Line_12 $$ do -->Line_17 $$ element = parent[ CD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_30 $$ element.accept(lambdaCollector)[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_4 $$ PsiFile file = position.getFile()[ CD ]
Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) -->Line_40 $$ sibling.accept(lambdaCollector)[ CD ]
Line_17 $$ element = parent-->Line_30 $$ element.accept(lambdaCollector)[ FD ]
Line_6 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_11 $$ final TextRange lineRange = DocumentUtil.getLineTextRange(document, line)[ FD ]
Line_10 $$ PsiElement element = position.getElementAt()-->Line_30 $$ element.accept(lambdaCollector)[ FD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_40 $$ sibling.accept(lambdaCollector)[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_30 $$ element.accept(lambdaCollector)[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_42 $$ return lambdas[ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_7 $$ if (document == null || line >= document.getLineCount()) [ CD ]
Line_4 $$ PsiFile file = position.getFile()-->Line_6 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_5 $$ final int line = position.getLine()[ CD ]
Line_19 $$ final List<PsiLambdaExpression> lambdas = new ArrayList<PsiLambdaExpression>(3)-->Line_34 $$ lambdas.add((PsiLambdaExpression) method)[ FD ]
Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() -->Line_24 $$ super.visitLambdaExpression(expression)[ CD ]
Line_17 $$ element = parent-->Line_13 $$ PsiElement parent = element.getParent()[ FD ]
Line_25 $$ if (!onlyOnTheLine || getFirstElementOnTheLine(expression, document, line) != null) -->Line_26 $$ lambdas.add(expression)[ CD ]
Line_10 $$ PsiElement element = position.getElementAt()-->Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) [ FD ]
Line_6 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_7 $$ if (document == null || line >= document.getLineCount()) [ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_20 $$ final PsiElementVisitor lambdaCollector = new JavaRecursiveElementVisitor() [ CD ]
Line_10 $$ PsiElement element = position.getElementAt()-->Line_17 $$ element = parent[ FD ]
Line_13 $$ PsiElement parent = element.getParent()-->Line_17 $$ element = parent[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_11 $$ final TextRange lineRange = DocumentUtil.getLineTextRange(document, line)[ CD ]
Line_6 $$ final Document document = PsiDocumentManager.getInstance(file.getProject()).getDocument(file)-->Line_25 $$ if (!onlyOnTheLine || getFirstElementOnTheLine(expression, document, line) != null) [ FD ]
Line_17 $$ element = parent-->Line_36 $$ for (PsiElement sibling = getNextElement(element); sibling != null; sibling = getNextElement(sibling)) [ FD ]
Line_11 $$ final TextRange lineRange = DocumentUtil.getLineTextRange(document, line)-->Line_37 $$ if (!intersects(lineRange, sibling)) [ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_33 $$ if (method instanceof PsiLambdaExpression) [ CD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_10 $$ PsiElement element = position.getElementAt()[ FD ]
Line_2 $$ public static List<PsiLambdaExpression> collectLambdas(@NotNull SourcePosition position, final boolean onlyOnTheLine) -->Line_5 $$ final int line = position.getLine()[ FD ]
