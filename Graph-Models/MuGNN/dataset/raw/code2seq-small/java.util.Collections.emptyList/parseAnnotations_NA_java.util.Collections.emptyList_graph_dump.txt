Line_5 $$ List<AnnotationExprent> annotations = new ArrayList<AnnotationExprent>(len)-->Line_7 $$ annotations.add(parseAnnotation(data, pool))[ FD ]
Line_2 $$ public static List<AnnotationExprent> parseAnnotations(ConstantPool pool, DataInputStream data) throws IOException -->Line_3 $$ int len = data.readUnsignedShort()[ CD ]
Line_3 $$ int len = data.readUnsignedShort()-->Line_6 $$ for (int i = 0; i < len; i++) [ FD ]
Line_4 $$ if (len > 0) -->Line_6 $$ for (int i = 0; i < len; i++) [ CD ]
Line_2 $$ public static List<AnnotationExprent> parseAnnotations(ConstantPool pool, DataInputStream data) throws IOException -->Line_3 $$ int len = data.readUnsignedShort()[ FD ]
Line_2 $$ public static List<AnnotationExprent> parseAnnotations(ConstantPool pool, DataInputStream data) throws IOException -->Line_7 $$ annotations.add(parseAnnotation(data, pool))[ FD ]
Line_6 $$ for (int i = 0; i < len; i++) -->Line_7 $$ annotations.add(parseAnnotation(data, pool))[ CD ]
Line_4 $$ if (len > 0) -->Line_5 $$ List<AnnotationExprent> annotations = new ArrayList<AnnotationExprent>(len)[ CD ]
Line_4 $$ if (len > 0) -->Line_9 $$ return annotations[ CD ]
Line_3 $$ int len = data.readUnsignedShort()-->Line_4 $$ if (len > 0) [ FD ]
Line_4 $$ if (len > 0) -->Line_11 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<AnnotationExprent> parseAnnotations(ConstantPool pool, DataInputStream data) throws IOException -->Line_4 $$ if (len > 0) [ CD ]
