Line_4 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_8 $$ words = Collections.singletonList(trimmed)[ FD ]
Line_6 $$ String trimmed = name.trim()-->Line_7 $$ if (StringUtil.isNotEmpty(trimmed)) [ FD ]
Line_13 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() -->Line_17 $$ return new IdIndexEntry(word, caseSensitively)[ CD ]
Line_8 $$ words = Collections.singletonList(trimmed)-->Line_11 $$ if (words.isEmpty())[ FD ]
Line_4 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_13 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() [ FD ]
Line_4 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_11 $$ if (words.isEmpty())[ FD ]
Line_7 $$ if (StringUtil.isNotEmpty(trimmed)) -->Line_8 $$ words = Collections.singletonList(trimmed)[ CD ]
Line_5 $$ if (words.isEmpty()) -->Line_6 $$ String trimmed = name.trim()[ CD ]
Line_8 $$ words = Collections.singletonList(trimmed)-->Line_13 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() [ FD ]
Line_11 $$ if (words.isEmpty())-->Line_12 $$ return Collections.emptyList()[ CD ]
Line_6 $$ String trimmed = name.trim()-->Line_8 $$ words = Collections.singletonList(trimmed)[ FD ]
Line_4 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_5 $$ if (words.isEmpty()) [ FD ]
Line_5 $$ if (words.isEmpty()) -->Line_7 $$ if (StringUtil.isNotEmpty(trimmed)) [ CD ]
