Line_12 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() -->Line_14 $$ return new IdIndexEntry(word, caseSensitively)[ CD ]
Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_7 $$ words = Collections.singletonList(trimmed)[ FD ]
Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_12 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() [ FD ]
Line_10 $$ if (words.isEmpty())-->Line_11 $$ return Collections.emptyList()[ CD ]
Line_7 $$ words = Collections.singletonList(trimmed)-->Line_12 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() [ FD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_10 $$ if (words.isEmpty())[ CD ]
Line_4 $$ if (words.isEmpty()) -->Line_6 $$ if (StringUtil.isNotEmpty(trimmed)) [ CD ]
Line_4 $$ if (words.isEmpty()) -->Line_5 $$ String trimmed = name.trim()[ CD ]
Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_4 $$ if (words.isEmpty()) [ FD ]
Line_5 $$ String trimmed = name.trim()-->Line_7 $$ words = Collections.singletonList(trimmed)[ FD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_5 $$ String trimmed = name.trim()[ FD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)[ FD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_4 $$ if (words.isEmpty()) [ CD ]
Line_7 $$ words = Collections.singletonList(trimmed)-->Line_10 $$ if (words.isEmpty())[ FD ]
Line_5 $$ String trimmed = name.trim()-->Line_6 $$ if (StringUtil.isNotEmpty(trimmed)) [ FD ]
Line_6 $$ if (StringUtil.isNotEmpty(trimmed)) -->Line_7 $$ words = Collections.singletonList(trimmed)[ CD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)[ CD ]
Line_3 $$ List<String> words = StringUtil.getWordsInStringLongestFirst(name)-->Line_10 $$ if (words.isEmpty())[ FD ]
Line_2 $$ private static List<IdIndexEntry> getWordEntries(@NotNull String name, final boolean caseSensitively) -->Line_12 $$ return ContainerUtil.map2List(words, new Function<String, IdIndexEntry>() [ CD ]
