Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_3 $$ final List<String> mergedToBranches = getMergedToBranches(unmergedBranch)[ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_12 $$ return myUiHandler.showBranchIsNotFullyMergedDialog(myProject, history, unmergedBranch, mergedToBranches, baseBranch)[ FD ]
Line_6 $$ if (repositories.contains(repository)) -->Line_7 $$ history.put(repository, getUnmergedCommits(repository, unmergedBranch, baseBranch))[ CD ]
Line_4 $$ final Map<GitRepository, List<GitCommit>> history = new HashMap<GitRepository, List<GitCommit>>()-->Line_12 $$ return myUiHandler.showBranchIsNotFullyMergedDialog(myProject, history, unmergedBranch, mergedToBranches, baseBranch)[ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_12 $$ return myUiHandler.showBranchIsNotFullyMergedDialog(myProject, history, unmergedBranch, mergedToBranches, baseBranch)[ CD ]
Line_5 $$ for (GitRepository repository : getRepositories()) -->Line_9 $$ history.put(repository, Collections.<GitCommit>emptyList())[ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_7 $$ history.put(repository, getUnmergedCommits(repository, unmergedBranch, baseBranch))[ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_4 $$ final Map<GitRepository, List<GitCommit>> history = new HashMap<GitRepository, List<GitCommit>>()[ CD ]
Line_4 $$ final Map<GitRepository, List<GitCommit>> history = new HashMap<GitRepository, List<GitCommit>>()-->Line_9 $$ history.put(repository, Collections.<GitCommit>emptyList())[ FD ]
Line_6 $$ if (repositories.contains(repository)) -->Line_9 $$ history.put(repository, Collections.<GitCommit>emptyList())[ CD ]
Line_3 $$ final List<String> mergedToBranches = getMergedToBranches(unmergedBranch)-->Line_12 $$ return myUiHandler.showBranchIsNotFullyMergedDialog(myProject, history, unmergedBranch, mergedToBranches, baseBranch)[ FD ]
Line_4 $$ final Map<GitRepository, List<GitCommit>> history = new HashMap<GitRepository, List<GitCommit>>()-->Line_7 $$ history.put(repository, getUnmergedCommits(repository, unmergedBranch, baseBranch))[ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_6 $$ if (repositories.contains(repository)) [ FD ]
Line_2 $$ private boolean showNotFullyMergedDialog(@NotNull final String unmergedBranch, @NotNull final String baseBranch, @NotNull Collection<GitRepository> repositories) -->Line_3 $$ final List<String> mergedToBranches = getMergedToBranches(unmergedBranch)[ CD ]
Line_5 $$ for (GitRepository repository : getRepositories()) -->Line_7 $$ history.put(repository, getUnmergedCommits(repository, unmergedBranch, baseBranch))[ FD ]
Line_5 $$ for (GitRepository repository : getRepositories()) -->Line_6 $$ if (repositories.contains(repository)) [ FD ]
