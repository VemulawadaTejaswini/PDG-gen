Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_32 $$ assertEquals(ev, Event.deserialize(buf, version))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_14 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.TABLE, "ks", "table"))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_10 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, "ks"))[ FD ]
Line_20 $$ if (version >= 4) -->Line_24 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.FUNCTION, "ks", "func", moreTypes))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_13 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.TABLE, "ks", "table"))[ FD ]
Line_20 $$ if (version >= 4) -->Line_21 $$ List<String> moreTypes = Arrays.asList("text", "bigint")[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_6 $$ events.add(TopologyChange.movedNode(FBUtilities.getBroadcastAddress(), 42))[ FD ]
Line_30 $$ ByteBuf buf = Unpooled.buffer(ev.serializedSize(version))-->Line_31 $$ ev.serialize(buf, version)[ FD ]
Line_15 $$ if (version >= 3) -->Line_16 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.TYPE, "ks", "type"))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_30 $$ ByteBuf buf = Unpooled.buffer(ev.serializedSize(version))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_31 $$ ev.serialize(buf, version)[ FD ]
Line_15 $$ if (version >= 3) -->Line_18 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.TYPE, "ks", "type"))[ CD ]
Line_29 $$ for (Event ev : events) -->Line_31 $$ ev.serialize(buf, version)[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_22 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.FUNCTION, "ks", "func", Collections.<String>emptyList()))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_25 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.AGGREGATE, "ks", "aggr", Collections.<String>emptyList()))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_4 $$ events.add(TopologyChange.newNode(FBUtilities.getBroadcastAddress(), 42))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_11 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, "ks"))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_11 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, "ks"))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_26 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.AGGREGATE, "ks", "aggr", moreTypes))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_20 $$ if (version >= 4) [ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_24 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.FUNCTION, "ks", "func", moreTypes))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_15 $$ if (version >= 3) [ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_12 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.TABLE, "ks", "table"))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_7 $$ events.add(StatusChange.nodeUp(FBUtilities.getBroadcastAddress(), 42))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_8 $$ events.add(StatusChange.nodeDown(FBUtilities.getBroadcastAddress(), 42))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_9 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, "ks"))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_15 $$ if (version >= 3) [ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_7 $$ events.add(StatusChange.nodeUp(FBUtilities.getBroadcastAddress(), 42))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_4 $$ events.add(TopologyChange.newNode(FBUtilities.getBroadcastAddress(), 42))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_23 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.FUNCTION, "ks", "func", moreTypes))[ FD ]
Line_20 $$ if (version >= 4) -->Line_22 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.FUNCTION, "ks", "func", Collections.<String>emptyList()))[ CD ]
Line_20 $$ if (version >= 4) -->Line_26 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.AGGREGATE, "ks", "aggr", moreTypes))[ CD ]
Line_29 $$ for (Event ev : events) -->Line_30 $$ ByteBuf buf = Unpooled.buffer(ev.serializedSize(version))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_20 $$ if (version >= 4) [ CD ]
Line_20 $$ if (version >= 4) -->Line_25 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.AGGREGATE, "ks", "aggr", Collections.<String>emptyList()))[ CD ]
Line_20 $$ if (version >= 4) -->Line_27 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.AGGREGATE, "ks", "aggr", moreTypes))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_5 $$ events.add(TopologyChange.removedNode(FBUtilities.getBroadcastAddress(), 42))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_6 $$ events.add(TopologyChange.movedNode(FBUtilities.getBroadcastAddress(), 42))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_5 $$ events.add(TopologyChange.removedNode(FBUtilities.getBroadcastAddress(), 42))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_18 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.TYPE, "ks", "type"))[ FD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_16 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.TYPE, "ks", "type"))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_10 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, "ks"))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_8 $$ events.add(StatusChange.nodeDown(FBUtilities.getBroadcastAddress(), 42))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_3 $$ List<Event> events = new ArrayList()[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_17 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.TYPE, "ks", "type"))[ FD ]
Line_20 $$ if (version >= 4) -->Line_23 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.FUNCTION, "ks", "func", moreTypes))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_13 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.TABLE, "ks", "table"))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_27 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.AGGREGATE, "ks", "aggr", moreTypes))[ FD ]
Line_15 $$ if (version >= 3) -->Line_17 $$ events.add(new SchemaChange(SchemaChange.Change.UPDATED, SchemaChange.Target.TYPE, "ks", "type"))[ CD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_9 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, "ks"))[ CD ]
Line_3 $$ List<Event> events = new ArrayList()-->Line_12 $$ events.add(new SchemaChange(SchemaChange.Change.CREATED, SchemaChange.Target.TABLE, "ks", "table"))[ FD ]
Line_30 $$ ByteBuf buf = Unpooled.buffer(ev.serializedSize(version))-->Line_32 $$ assertEquals(ev, Event.deserialize(buf, version))[ FD ]
Line_29 $$ for (Event ev : events) -->Line_32 $$ assertEquals(ev, Event.deserialize(buf, version))[ FD ]
Line_2 $$ public void eventSerDeserTest(int version) throws Exception -->Line_14 $$ events.add(new SchemaChange(SchemaChange.Change.DROPPED, SchemaChange.Target.TABLE, "ks", "table"))[ CD ]
