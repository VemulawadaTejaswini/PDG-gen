Line_6 $$ final VirtualFile innerFile = createFileInCommand(inner, "inInner.txt", "kdfjsdisdjiuewjfew wefn w")-->Line_19 $$ assertMovedChange(innerFile)[ FD ]
Line_8 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_9 $$ final File was = new File(deepUnverioned.getPath())[ FD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_18 $$ assertMovedChange(inner)[ CD ]
Line_5 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_18 $$ assertMovedChange(inner)[ FD ]
Line_5 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_8 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")[ FD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_15 $$ final Change change = assertRenamedChange(tree.mySourceDir)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_13 $$ myDirtyScopeManager.markEverythingDirty()[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_12 $$ VcsTestUtil.renameFileInCommand(myProject, tree.mySourceDir, "newName")[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_11 $$ runAndVerifyStatusSorted("? root" + File.separator + "source" + File.separator + "inner" + File.separator + deepUnverioned.getName())[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_19 $$ assertMovedChange(innerFile)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_3 $$ final SubTree tree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_7 $$ disableSilentOperation(VcsConfiguration.StandardConfirmation.ADD)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_16 $$ final Change s1Change = assertMovedChange(tree.myS1File)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_9 $$ final File was = new File(deepUnverioned.getPath())[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_10 $$ checkin()[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_14 $$ myChangeListManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_23 $$ Assert.assertTrue(was.exists())[ CD ]
Line_9 $$ final File was = new File(deepUnverioned.getPath())-->Line_23 $$ Assert.assertTrue(was.exists())[ FD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_6 $$ final VirtualFile innerFile = createFileInCommand(inner, "inInner.txt", "kdfjsdisdjiuewjfew wefn w")[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_4 $$ checkin()[ CD ]
Line_8 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_20 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(deepUnverioned.getPath()), was))[ FD ]
Line_9 $$ final File was = new File(deepUnverioned.getPath())-->Line_21 $$ Assert.assertTrue(!was.exists())[ FD ]
Line_9 $$ final File was = new File(deepUnverioned.getPath())-->Line_20 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(deepUnverioned.getPath()), was))[ FD ]
Line_8 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_11 $$ runAndVerifyStatusSorted("? root" + File.separator + "source" + File.separator + "inner" + File.separator + deepUnverioned.getName())[ FD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_17 $$ final Change s2Change = assertMovedChange(tree.myS2File)[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_8 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_22 $$ rollbackIMpl(Arrays.asList(change), Collections.<Change>emptyList())[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_21 $$ Assert.assertTrue(!was.exists())[ CD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_5 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")[ CD ]
Line_15 $$ final Change change = assertRenamedChange(tree.mySourceDir)-->Line_22 $$ rollbackIMpl(Arrays.asList(change), Collections.<Change>emptyList())[ FD ]
Line_2 $$ public void testRollbackWithDeepUnversioned() throws Exception -->Line_20 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(deepUnverioned.getPath()), was))[ CD ]
Line_5 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_6 $$ final VirtualFile innerFile = createFileInCommand(inner, "inInner.txt", "kdfjsdisdjiuewjfew wefn w")[ FD ]
