Line_8 $$ final VirtualFile innerFile = createFileInCommand(inner, "inInner.txt", "kdfjsdisdjiuewjfew wefn w")-->Line_21 $$ assertMovedChange(innerFile)[ FD ]
Line_10 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_22 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(deepUnverioned.getPath()), was))[ FD ]
Line_7 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_10 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")[ FD ]
Line_11 $$ final File was = new File(deepUnverioned.getPath())-->Line_25 $$ Assert.assertTrue(was.exists())[ FD ]
Line_7 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_8 $$ final VirtualFile innerFile = createFileInCommand(inner, "inInner.txt", "kdfjsdisdjiuewjfew wefn w")[ FD ]
Line_11 $$ final File was = new File(deepUnverioned.getPath())-->Line_23 $$ Assert.assertTrue(!was.exists())[ FD ]
Line_7 $$ final VirtualFile inner = createDirInCommand(tree.mySourceDir, "inner")-->Line_20 $$ assertMovedChange(inner)[ FD ]
Line_17 $$ final Change change = assertRenamedChange(tree.mySourceDir)-->Line_24 $$ rollbackIMpl(Arrays.asList(change), Collections.<Change>emptyList())[ FD ]
Line_10 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_13 $$ runAndVerifyStatusSorted("? root" + File.separator + "source" + File.separator + "inner" + File.separator + deepUnverioned.getName())[ FD ]
Line_10 $$ final VirtualFile deepUnverioned = createFileInCommand(inner, "deepUnverioned.txt", "deepUnverioned")-->Line_11 $$ final File was = new File(deepUnverioned.getPath())[ FD ]
Line_11 $$ final File was = new File(deepUnverioned.getPath())-->Line_22 $$ Assert.assertTrue(!FileUtil.filesEqual(new File(deepUnverioned.getPath()), was))[ FD ]
