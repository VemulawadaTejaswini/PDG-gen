Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_10 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, command, "-p", path)[ CD ]
Line_3 $$ final Sdk sdk = getSdk()-->Line_4 $$ final String condaExecutable = PyCondaPackageService.getCondaExecutable(sdk.getHomeDirectory())[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_3 $$ final Sdk sdk = getSdk()[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_16 $$ if (indicator != null) [ CD ]
Line_19 $$ result = handler.runProcess()-->Line_21 $$ if (result.isCancelled()) [ FD ]
Line_16 $$ if (indicator != null) -->Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)[ CD ]
Line_15 $$ final ProcessOutput result-->Line_21 $$ if (result.isCancelled()) [ FD ]
Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)-->Line_19 $$ result = handler.runProcess()[ FD ]
Line_4 $$ final String condaExecutable = PyCondaPackageService.getCondaExecutable(sdk.getHomeDirectory())-->Line_10 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, command, "-p", path)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_8 $$ if (path == null)[ CD ]
Line_14 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_7 $$ final String path = getCondaDirectory()[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_21 $$ if (result.isCancelled()) [ CD ]
Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)-->Line_21 $$ if (result.isCancelled()) [ FD ]
Line_19 $$ result = handler.runProcess()-->Line_24 $$ final int exitCode = result.getExitCode()[ FD ]
Line_24 $$ final int exitCode = result.getExitCode()-->Line_25 $$ if (exitCode != 0) [ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_12 $$ final GeneralCommandLine commandLine = new GeneralCommandLine(parameters)[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_29 $$ return result[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_15 $$ final ProcessOutput result[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_13 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(commandLine)[ CD ]
Line_16 $$ if (indicator != null) -->Line_19 $$ result = handler.runProcess()[ CD ]
Line_4 $$ final String condaExecutable = PyCondaPackageService.getCondaExecutable(sdk.getHomeDirectory())-->Line_5 $$ if (condaExecutable == null)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_5 $$ if (condaExecutable == null)[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_14 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_7 $$ final String path = getCondaDirectory()-->Line_10 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, command, "-p", path)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_11 $$ parameters.addAll(arguments)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_11 $$ parameters.addAll(arguments)[ CD ]
Line_10 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, command, "-p", path)-->Line_11 $$ parameters.addAll(arguments)[ FD ]
Line_13 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(commandLine)-->Line_19 $$ result = handler.runProcess()[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_10 $$ final ArrayList<String> parameters = Lists.newArrayList(condaExecutable, command, "-p", path)[ FD ]
Line_25 $$ if (exitCode != 0) -->Line_26 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ CD ]
Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)-->Line_24 $$ final int exitCode = result.getExitCode()[ FD ]
Line_19 $$ result = handler.runProcess()-->Line_26 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ FD ]
Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)-->Line_26 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ FD ]
Line_14 $$ final ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_16 $$ if (indicator != null) [ FD ]
Line_15 $$ final ProcessOutput result-->Line_26 $$ final String message = StringUtil.isEmptyOrSpaces(result.getStdout()) && StringUtil.isEmptyOrSpaces(result.getStderr()) ? "Permission denied" : "Non-zero exit code"[ FD ]
Line_7 $$ final String path = getCondaDirectory()-->Line_8 $$ if (path == null)[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_24 $$ final int exitCode = result.getExitCode()[ CD ]
Line_15 $$ final ProcessOutput result-->Line_24 $$ final int exitCode = result.getExitCode()[ FD ]
Line_13 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(commandLine)-->Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_3 $$ final Sdk sdk = getSdk()-->Line_9 $$ throw new PyExecutionException("Empty conda name for " + sdk.getHomePath(), command, arguments)[ FD ]
Line_15 $$ final ProcessOutput result-->Line_17 $$ result = handler.runProcessWithProgressIndicator(indicator)[ FD ]
Line_15 $$ final ProcessOutput result-->Line_19 $$ result = handler.runProcess()[ FD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_4 $$ final String condaExecutable = PyCondaPackageService.getCondaExecutable(sdk.getHomeDirectory())[ CD ]
Line_2 $$ private ProcessOutput getCondaOutput(@NotNull final String command, List<String> arguments) throws ExecutionException -->Line_25 $$ if (exitCode != 0) [ CD ]
