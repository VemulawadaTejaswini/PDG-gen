Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_6 $$ Row.Builder updateBuilder = createBuilder(c1, now2, BB1, BB1, BB1)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_12 $$ Assert.assertEquals(expectedDeletion, builder.deletionTime)[ CD ]
Line_8 $$ Row.Deletion expectedDeletion = new Row.Deletion(new DeletionTime(secondToTs(now3), now3), false)-->Line_12 $$ Assert.assertEquals(expectedDeletion, builder.deletionTime)[ FD ]
Line_7 $$ int now3 = now2 + 1-->Line_8 $$ Row.Deletion expectedDeletion = new Row.Deletion(new DeletionTime(secondToTs(now3), now3), false)[ FD ]
Line_6 $$ Row.Builder updateBuilder = createBuilder(c1, now2, BB1, BB1, BB1)-->Line_11 $$ Rows.merge(existingBuilder.build(), updateBuilder.build(), builder, now3 + 1)[ FD ]
Line_10 $$ RowBuilder builder = new RowBuilder()-->Line_11 $$ Rows.merge(existingBuilder.build(), updateBuilder.build(), builder, now3 + 1)[ FD ]
Line_4 $$ Row.Builder existingBuilder = createBuilder(c1, now1, null, null, null)-->Line_11 $$ Rows.merge(existingBuilder.build(), updateBuilder.build(), builder, now3 + 1)[ FD ]
Line_6 $$ Row.Builder updateBuilder = createBuilder(c1, now2, BB1, BB1, BB1)-->Line_9 $$ updateBuilder.addRowDeletion(expectedDeletion)[ FD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_8 $$ Row.Deletion expectedDeletion = new Row.Deletion(new DeletionTime(secondToTs(now3), now3), false)[ CD ]
Line_3 $$ int now1 = FBUtilities.nowInSeconds()-->Line_4 $$ Row.Builder existingBuilder = createBuilder(c1, now1, null, null, null)[ FD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_15 $$ Assert.assertEquals(Collections.emptyList(), builder.cells)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_9 $$ updateBuilder.addRowDeletion(expectedDeletion)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_3 $$ int now1 = FBUtilities.nowInSeconds()[ CD ]
Line_8 $$ Row.Deletion expectedDeletion = new Row.Deletion(new DeletionTime(secondToTs(now3), now3), false)-->Line_9 $$ updateBuilder.addRowDeletion(expectedDeletion)[ FD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_4 $$ Row.Builder existingBuilder = createBuilder(c1, now1, null, null, null)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_7 $$ int now3 = now2 + 1[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_11 $$ Rows.merge(existingBuilder.build(), updateBuilder.build(), builder, now3 + 1)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_14 $$ Assert.assertEquals(Collections.emptyList(), builder.complexDeletions)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_13 $$ Assert.assertEquals(LivenessInfo.EMPTY, builder.livenessInfo)[ CD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_10 $$ RowBuilder builder = new RowBuilder()[ CD ]
Line_5 $$ int now2 = now1 + 1-->Line_6 $$ Row.Builder updateBuilder = createBuilder(c1, now2, BB1, BB1, BB1)[ FD ]
Line_2 $$ public void mergeRowDeletionSupercedesLiveness() -->Line_5 $$ int now2 = now1 + 1[ CD ]
