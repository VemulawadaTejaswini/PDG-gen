Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_8 $$ ModuleRootModificationUtil.addModuleLibrary(myModule, "lib", Collections.singletonList(file.getParent().getUrl()), Collections.<String>emptyList())[ CD ]
Line_5 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_8 $$ ModuleRootModificationUtil.addModuleLibrary(myModule, "lib", Collections.singletonList(file.getParent().getUrl()), Collections.<String>emptyList())[ FD ]
Line_3 $$ final PsiReference ref = configure()-->Line_13 $$ assertInstanceOf(ref.resolve(), PsiClass.class)[ FD ]
Line_4 $$ PsiFile psiFile = ref.getElement().getContainingFile()-->Line_5 $$ final VirtualFile file = psiFile.getVirtualFile()[ FD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_3 $$ final PsiReference ref = configure()[ CD ]
Line_4 $$ PsiFile psiFile = ref.getElement().getContainingFile()-->Line_9 $$ DependenciesBuilder.analyzeFileDependencies(psiFile, new DependenciesBuilder.DependencyProcessor() [ FD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_13 $$ assertInstanceOf(ref.resolve(), PsiClass.class)[ CD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_4 $$ PsiFile psiFile = ref.getElement().getContainingFile()[ CD ]
Line_5 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_7 $$ createFile(myModule, file.getParent(), "ModuleSourceAsLibraryClassesDep.java", loadFile("class/ModuleSourceAsLibraryClassesDep.java"))[ FD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_7 $$ createFile(myModule, file.getParent(), "ModuleSourceAsLibraryClassesDep.java", loadFile("class/ModuleSourceAsLibraryClassesDep.java"))[ CD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_9 $$ DependenciesBuilder.analyzeFileDependencies(psiFile, new DependenciesBuilder.DependencyProcessor() [ CD ]
Line_5 $$ final VirtualFile file = psiFile.getVirtualFile()-->Line_6 $$ assertNotNull(file)[ FD ]
Line_3 $$ final PsiReference ref = configure()-->Line_4 $$ PsiFile psiFile = ref.getElement().getContainingFile()[ FD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_5 $$ final VirtualFile file = psiFile.getVirtualFile()[ CD ]
Line_2 $$ public void testModuleSourceAsLibraryClasses() throws Exception -->Line_6 $$ assertNotNull(file)[ CD ]
