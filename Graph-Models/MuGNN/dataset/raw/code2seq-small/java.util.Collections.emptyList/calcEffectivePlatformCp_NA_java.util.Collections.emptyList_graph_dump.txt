Line_3 $$ if (ourDefaultRtJar == null || !(compilingTool instanceof JavacCompilerTool)) -->Line_4 $$ return platformCp[ CD ]
Line_16 $$ boolean isTargetPlatformSameAsBuildRuntime = false-->Line_19 $$ isTargetPlatformSameAsBuildRuntime = true[ FD ]
Line_8 $$ if ("-profile".equalsIgnoreCase(option)) -->Line_9 $$ profileFeatureRequested = true[ CD ]
Line_18 $$ if (FileUtil.filesEqual(file, ourDefaultRtJar)) -->Line_19 $$ isTargetPlatformSameAsBuildRuntime = true[ CD ]
Line_6 $$ boolean profileFeatureRequested = false-->Line_13 $$ if (!profileFeatureRequested) [ FD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_3 $$ if (ourDefaultRtJar == null || !(compilingTool instanceof JavacCompilerTool)) [ CD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_23 $$ if (!isTargetPlatformSameAsBuildRuntime) [ CD ]
Line_23 $$ if (!isTargetPlatformSameAsBuildRuntime) -->Line_24 $$ return null[ CD ]
Line_6 $$ boolean profileFeatureRequested = false-->Line_9 $$ profileFeatureRequested = true[ FD ]
Line_17 $$ for (File file : platformCp) -->Line_18 $$ if (FileUtil.filesEqual(file, ourDefaultRtJar)) [ FD ]
Line_19 $$ isTargetPlatformSameAsBuildRuntime = true-->Line_23 $$ if (!isTargetPlatformSameAsBuildRuntime) [ FD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_6 $$ boolean profileFeatureRequested = false[ CD ]
Line_16 $$ boolean isTargetPlatformSameAsBuildRuntime = false-->Line_23 $$ if (!isTargetPlatformSameAsBuildRuntime) [ FD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_26 $$ return Collections.emptyList()[ CD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_16 $$ boolean isTargetPlatformSameAsBuildRuntime = false[ CD ]
Line_13 $$ if (!profileFeatureRequested) -->Line_14 $$ return platformCp[ CD ]
Line_9 $$ profileFeatureRequested = true-->Line_13 $$ if (!profileFeatureRequested) [ FD ]
Line_2 $$ private static Collection<File> calcEffectivePlatformCp(Collection<File> platformCp, List<String> options, JavaCompilingTool compilingTool) -->Line_13 $$ if (!profileFeatureRequested) [ CD ]
Line_7 $$ for (String option : options) -->Line_8 $$ if ("-profile".equalsIgnoreCase(option)) [ FD ]
