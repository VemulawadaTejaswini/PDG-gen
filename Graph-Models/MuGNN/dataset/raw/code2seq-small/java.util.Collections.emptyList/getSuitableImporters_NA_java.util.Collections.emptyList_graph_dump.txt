Line_8 $$ result = new ArrayList<MavenImporter>()-->Line_11 $$ result.add(importer)[ FD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_34 $$ final ModuleType finalModuleType = moduleType[ CD ]
Line_18 $$ if (moduleTypes.size() <= 1) -->Line_19 $$ return result[ CD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_12 $$ moduleTypes.add(importer.getModuleType())[ FD ]
Line_35 $$ return ContainerUtil.filter(result, new Condition<MavenImporter>() -->Line_38 $$ return importer.getModuleType() == finalModuleType[ CD ]
Line_6 $$ if (importer.isApplicable(p)) -->Line_11 $$ result.add(importer)[ CD ]
Line_35 $$ return ContainerUtil.filter(result, new Condition<MavenImporter>() -->Line_38 $$ return importer.getModuleType() == finalModuleType[ FD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_6 $$ if (importer.isApplicable(p)) [ FD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_6 $$ if (importer.isApplicable(p)) [ FD ]
Line_9 $$ moduleTypes = new THashSet<ModuleType>()-->Line_18 $$ if (moduleTypes.size() <= 1) [ FD ]
Line_4 $$ Set<ModuleType> moduleTypes = null-->Line_12 $$ moduleTypes.add(importer.getModuleType())[ FD ]
Line_4 $$ Set<ModuleType> moduleTypes = null-->Line_18 $$ if (moduleTypes.size() <= 1) [ FD ]
Line_25 $$ List<String> supportedPackagings = new ArrayList<String>()-->Line_27 $$ supportedPackagings.clear()[ FD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_30 $$ moduleType = importer.getModuleType()[ FD ]
Line_3 $$ List<MavenImporter> result = null-->Line_7 $$ if (result == null) [ FD ]
Line_9 $$ moduleTypes = new THashSet<ModuleType>()-->Line_12 $$ moduleTypes.add(importer.getModuleType())[ FD ]
Line_15 $$ if (result == null) -->Line_16 $$ return Collections.emptyList()[ CD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_11 $$ result.add(importer)[ FD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_4 $$ Set<ModuleType> moduleTypes = null[ CD ]
Line_29 $$ if (supportedPackagings.contains(p.getPackaging())) -->Line_30 $$ moduleType = importer.getModuleType()[ CD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_3 $$ List<MavenImporter> result = null[ CD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_38 $$ return importer.getModuleType() == finalModuleType[ FD ]
Line_6 $$ if (importer.isApplicable(p)) -->Line_7 $$ if (result == null) [ CD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_18 $$ if (moduleTypes.size() <= 1) [ CD ]
Line_8 $$ result = new ArrayList<MavenImporter>()-->Line_35 $$ return ContainerUtil.filter(result, new Condition<MavenImporter>() [ FD ]
Line_4 $$ Set<ModuleType> moduleTypes = null-->Line_9 $$ moduleTypes = new THashSet<ModuleType>()[ FD ]
Line_3 $$ List<MavenImporter> result = null-->Line_15 $$ if (result == null) [ FD ]
Line_8 $$ result = new ArrayList<MavenImporter>()-->Line_15 $$ if (result == null) [ FD ]
Line_6 $$ if (importer.isApplicable(p)) -->Line_12 $$ moduleTypes.add(importer.getModuleType())[ CD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_35 $$ return ContainerUtil.filter(result, new Condition<MavenImporter>() [ CD ]
Line_3 $$ List<MavenImporter> result = null-->Line_8 $$ result = new ArrayList<MavenImporter>()[ FD ]
Line_3 $$ List<MavenImporter> result = null-->Line_11 $$ result.add(importer)[ FD ]
Line_25 $$ List<String> supportedPackagings = new ArrayList<String>()-->Line_28 $$ importer.getSupportedPackagings(supportedPackagings)[ FD ]
Line_3 $$ List<MavenImporter> result = null-->Line_35 $$ return ContainerUtil.filter(result, new Condition<MavenImporter>() [ FD ]
Line_25 $$ List<String> supportedPackagings = new ArrayList<String>()-->Line_29 $$ if (supportedPackagings.contains(p.getPackaging())) [ FD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_25 $$ List<String> supportedPackagings = new ArrayList<String>()[ CD ]
Line_5 $$ for (MavenImporter importer : EXTENSION_POINT_NAME.getExtensions()) -->Line_28 $$ importer.getSupportedPackagings(supportedPackagings)[ FD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_29 $$ if (supportedPackagings.contains(p.getPackaging())) [ FD ]
Line_7 $$ if (result == null) -->Line_8 $$ result = new ArrayList<MavenImporter>()[ CD ]
Line_7 $$ if (result == null) -->Line_9 $$ moduleTypes = new THashSet<ModuleType>()[ CD ]
Line_2 $$ public static List<MavenImporter> getSuitableImporters(MavenProject p) -->Line_15 $$ if (result == null) [ CD ]
