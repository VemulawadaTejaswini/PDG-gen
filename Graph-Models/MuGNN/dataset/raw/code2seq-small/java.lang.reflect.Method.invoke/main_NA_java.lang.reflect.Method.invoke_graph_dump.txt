Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_9 $$ startMethod.invoke(null, mainClass, methodName, args)[ CD ]
Line_4 $$ ClassLoader newClassLoader = BootstrapClassLoaderUtil.initClassLoader(updatePlugins)-->Line_6 $$ Class<?> klass = Class.forName(PLUGIN_MANAGER, true, newClassLoader)[ FD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_6 $$ Class<?> klass = Class.forName(PLUGIN_MANAGER, true, newClassLoader)[ CD ]
Line_3 $$ boolean updatePlugins = !Main.isCommandLine()-->Line_4 $$ ClassLoader newClassLoader = BootstrapClassLoaderUtil.initClassLoader(updatePlugins)[ FD ]
Line_6 $$ Class<?> klass = Class.forName(PLUGIN_MANAGER, true, newClassLoader)-->Line_7 $$ Method startMethod = klass.getDeclaredMethod("start", String.class, String.class, String[].class)[ FD ]
Line_7 $$ Method startMethod = klass.getDeclaredMethod("start", String.class, String.class, String[].class)-->Line_8 $$ startMethod.setAccessible(true)[ FD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_3 $$ boolean updatePlugins = !Main.isCommandLine()[ CD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_9 $$ startMethod.invoke(null, mainClass, methodName, args)[ FD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_8 $$ startMethod.setAccessible(true)[ CD ]
Line_7 $$ Method startMethod = klass.getDeclaredMethod("start", String.class, String.class, String[].class)-->Line_9 $$ startMethod.invoke(null, mainClass, methodName, args)[ FD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_4 $$ ClassLoader newClassLoader = BootstrapClassLoaderUtil.initClassLoader(updatePlugins)[ CD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_5 $$ WindowsCommandLineProcessor.ourMirrorClass = Class.forName(WindowsCommandLineProcessor.class.getName(), true, newClassLoader)[ CD ]
Line_4 $$ ClassLoader newClassLoader = BootstrapClassLoaderUtil.initClassLoader(updatePlugins)-->Line_5 $$ WindowsCommandLineProcessor.ourMirrorClass = Class.forName(WindowsCommandLineProcessor.class.getName(), true, newClassLoader)[ FD ]
Line_2 $$ public static void main(String[] args, String mainClass, String methodName) throws Exception -->Line_7 $$ Method startMethod = klass.getDeclaredMethod("start", String.class, String.class, String[].class)[ CD ]
