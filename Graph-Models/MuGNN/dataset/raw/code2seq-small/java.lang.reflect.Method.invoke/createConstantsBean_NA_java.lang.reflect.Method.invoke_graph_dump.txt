Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)-->Line_17 $$ return constantsBeanClass.newInstance()[ FD ]
Line_5 $$ Class<?> constantsBeanClass = null-->Line_12 $$ if (constantsBeanClass == null) [ FD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_3 $$ ClassLoader classLoader = constantsClass.getClassLoader()[ FD ]
Line_12 $$ if (constantsBeanClass == null) -->Line_14 $$ byte[] classData = generateConstantsBeanClassData(constantsClass)[ CD ]
Line_5 $$ Class<?> constantsBeanClass = null-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_5 $$ Class<?> constantsBeanClass = null-->Line_17 $$ return constantsBeanClass.newInstance()[ FD ]
Line_5 $$ Class<?> constantsBeanClass = null-->Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)[ FD ]
Line_12 $$ if (constantsBeanClass == null) -->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ CD ]
Line_4 $$ String constantsBeanClassName = constantsClass.getName() + "Bean"-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_3 $$ ClassLoader classLoader = constantsClass.getClassLoader()[ CD ]
Line_4 $$ String constantsBeanClassName = constantsClass.getName() + "Bean"-->Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)[ FD ]
Line_13 $$ Method defineClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "defineClass", String.class, byte[].class, int.class, int.class)-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)-->Line_17 $$ return constantsBeanClass.newInstance()[ FD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_5 $$ Class<?> constantsBeanClass = null[ CD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_4 $$ String constantsBeanClassName = constantsClass.getName() + "Bean"[ CD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_4 $$ String constantsBeanClassName = constantsClass.getName() + "Bean"[ FD ]
Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_3 $$ ClassLoader classLoader = constantsClass.getClassLoader()-->Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)[ FD ]
Line_14 $$ byte[] classData = generateConstantsBeanClassData(constantsClass)-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_8 $$ constantsBeanClass = classLoader.loadClass(constantsBeanClassName)-->Line_12 $$ if (constantsBeanClass == null) [ FD ]
Line_2 $$ protected static Object createConstantsBean(Class<?> constantsClass) -->Line_14 $$ byte[] classData = generateConstantsBeanClassData(constantsClass)[ FD ]
Line_3 $$ ClassLoader classLoader = constantsClass.getClassLoader()-->Line_15 $$ constantsBeanClass = (Class<?>) defineClassMethod.invoke(classLoader, constantsBeanClassName, classData, 0, classData.length)[ FD ]
Line_12 $$ if (constantsBeanClass == null) -->Line_13 $$ Method defineClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "defineClass", String.class, byte[].class, int.class, int.class)[ CD ]
