Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_27 $$ T result[ CD ]
Line_4 $$ Set<String> missing = new TreeSet<String>()-->Line_17 $$ missing.add(keyName)[ FD ]
Line_10 $$ Object value-->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ FD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_4 $$ Set<String> missing = new TreeSet<String>()[ CD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_6 $$ for (int i = 0; i < params.length; i++) [ CD ]
Line_16 $$ if (!optional && value == null) -->Line_17 $$ missing.add(keyName)[ CD ]
Line_3 $$ Map<String, Object> mutableValues = new HashMap<String, Object>(values)-->Line_35 $$ ConfigureUtil.configureByMap(mutableValues, result)[ FD ]
Line_3 $$ Map<String, Object> mutableValues = new HashMap<String, Object>(values)-->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ FD ]
Line_3 $$ Map<String, Object> mutableValues = new HashMap<String, Object>(values)-->Line_12 $$ value = get(mutableValues, keyName)[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_10 $$ Object value[ CD ]
Line_7 $$ String keyName = keyNames[i]-->Line_19 $$ mutableValues.remove(keyName)[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_8 $$ boolean optional = this.optional[i][ CD ]
Line_27 $$ T result-->Line_35 $$ ConfigureUtil.configureByMap(mutableValues, result)[ FD ]
Line_9 $$ Class<?> type = convertMethod.getParameterTypes()[i]-->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_9 $$ Class<?> type = convertMethod.getParameterTypes()[i][ CD ]
Line_11 $$ if (type.equals(String.class)) -->Line_12 $$ value = get(mutableValues, keyName)[ CD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_36 $$ return result[ CD ]
Line_10 $$ Object value-->Line_12 $$ value = get(mutableValues, keyName)[ FD ]
Line_10 $$ Object value-->Line_20 $$ params[i] = value[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_19 $$ mutableValues.remove(keyName)[ CD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_35 $$ ConfigureUtil.configureByMap(mutableValues, result)[ CD ]
Line_14 $$ value = type.cast(mutableValues.get(keyName))-->Line_20 $$ params[i] = value[ FD ]
Line_12 $$ value = get(mutableValues, keyName)-->Line_20 $$ params[i] = value[ FD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_22 $$ if (!missing.isEmpty()) [ CD ]
Line_4 $$ Set<String> missing = new TreeSet<String>()-->Line_22 $$ if (!missing.isEmpty()) [ FD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_5 $$ Object[] params = new Object[convertMethod.getParameterTypes().length][ CD ]
Line_27 $$ T result-->Line_29 $$ result = (T) convertMethod.invoke(this, params)[ FD ]
Line_7 $$ String keyName = keyNames[i]-->Line_17 $$ missing.add(keyName)[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_20 $$ params[i] = value[ CD ]
Line_8 $$ boolean optional = this.optional[i]-->Line_16 $$ if (!optional && value == null) [ FD ]
Line_2 $$ public T parseType(Map values) throws UnsupportedNotationException -->Line_3 $$ Map<String, Object> mutableValues = new HashMap<String, Object>(values)[ CD ]
Line_12 $$ value = get(mutableValues, keyName)-->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ FD ]
Line_3 $$ Map<String, Object> mutableValues = new HashMap<String, Object>(values)-->Line_19 $$ mutableValues.remove(keyName)[ FD ]
Line_7 $$ String keyName = keyNames[i]-->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ FD ]
Line_7 $$ String keyName = keyNames[i]-->Line_12 $$ value = get(mutableValues, keyName)[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_16 $$ if (!optional && value == null) [ CD ]
Line_5 $$ Object[] params = new Object[convertMethod.getParameterTypes().length]-->Line_29 $$ result = (T) convertMethod.invoke(this, params)[ FD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_7 $$ String keyName = keyNames[i][ CD ]
Line_6 $$ for (int i = 0; i < params.length; i++) -->Line_11 $$ if (type.equals(String.class)) [ CD ]
Line_29 $$ result = (T) convertMethod.invoke(this, params)-->Line_35 $$ ConfigureUtil.configureByMap(mutableValues, result)[ FD ]
Line_11 $$ if (type.equals(String.class)) -->Line_14 $$ value = type.cast(mutableValues.get(keyName))[ CD ]
Line_9 $$ Class<?> type = convertMethod.getParameterTypes()[i]-->Line_11 $$ if (type.equals(String.class)) [ FD ]
