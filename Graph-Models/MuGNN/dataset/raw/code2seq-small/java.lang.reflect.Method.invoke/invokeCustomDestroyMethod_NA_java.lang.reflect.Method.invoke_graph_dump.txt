Line_28 $$ AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() -->Line_33 $$ return null[ CD ]
Line_19 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_23 $$ ReflectionUtils.makeAccessible(destroyMethod)[ CD ]
Line_18 $$ if (System.getSecurityManager() != null) -->Line_40 $$ ReflectionUtils.makeAccessible(destroyMethod)[ CD ]
Line_18 $$ if (System.getSecurityManager() != null) -->Line_41 $$ destroyMethod.invoke(bean, args)[ CD ]
Line_45 $$ if (logger.isDebugEnabled()) -->Line_46 $$ logger.warn(msg, ex.getTargetException())[ CD ]
Line_19 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() -->Line_24 $$ return null[ CD ]
Line_18 $$ if (System.getSecurityManager() != null) -->Line_19 $$ AccessController.doPrivileged(new PrivilegedAction<Object>() [ CD ]
Line_11 $$ if (paramTypes.length == 1) -->Line_12 $$ args[0] = Boolean.TRUE[ CD ]
Line_10 $$ final Object[] args = new Object[paramTypes.length]-->Line_32 $$ destroyMethod.invoke(bean, args)[ FD ]
Line_10 $$ final Object[] args = new Object[paramTypes.length]-->Line_41 $$ destroyMethod.invoke(bean, args)[ FD ]
Line_45 $$ if (logger.isDebugEnabled()) -->Line_48 $$ logger.warn(msg + ": " + ex.getTargetException())[ CD ]
Line_14 $$ if (logger.isDebugEnabled()) -->Line_15 $$ logger.debug("Invoking destroy method '" + this.destroyMethodName + "' on bean with name '" + this.beanName + "'")[ CD ]
Line_28 $$ AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() -->Line_32 $$ destroyMethod.invoke(bean, args)[ CD ]
