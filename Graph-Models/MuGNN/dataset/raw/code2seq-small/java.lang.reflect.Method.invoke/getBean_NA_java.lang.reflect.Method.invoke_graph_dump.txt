Line_14 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)-->Line_15 $$ if (callerClassLoader == classLoader) [ FD ]
Line_22 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_26 $$ return method.invoke(bean, arguments)[ FD ]
Line_16 $$ String callerClassName = callerClass.getName()-->Line_17 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) [ FD ]
Line_12 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_14 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)[ CD ]
Line_4 $$ Class<?> beanClass = bean.getClass()-->Line_5 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) [ FD ]
Line_15 $$ if (callerClassLoader == classLoader) -->Line_16 $$ String callerClassName = callerClass.getName()[ CD ]
Line_5 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) -->Line_6 $$ return bean[ CD ]
Line_12 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_13 $$ Class<?> callerClass = Reflection.getCallerClass(5)[ CD ]
Line_15 $$ if (callerClassLoader == classLoader) -->Line_17 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) [ CD ]
Line_8 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean, classLoader)-->Line_30 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ FD ]
Line_22 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_30 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ FD ]
Line_13 $$ Class<?> callerClass = Reflection.getCallerClass(5)-->Line_16 $$ String callerClassName = callerClass.getName()[ FD ]
Line_22 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_26 $$ return method.invoke(bean, arguments)[ CD ]
Line_9 $$ if (interfaces.length == 0) -->Line_10 $$ return bean[ CD ]
Line_13 $$ Class<?> callerClass = Reflection.getCallerClass(5)-->Line_14 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)[ FD ]
Line_17 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) -->Line_18 $$ return bean[ CD ]
Line_12 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_15 $$ if (callerClassLoader == classLoader) [ CD ]
