Line_14 $$ if (callerClassLoader == classLoader) -->Line_16 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) [ CD ]
Line_15 $$ String callerClassName = callerClass.getName()-->Line_16 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) [ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_7 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean, classLoader)[ FD ]
Line_11 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_13 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)[ CD ]
Line_8 $$ if (interfaces.length == 0) -->Line_9 $$ return bean[ CD ]
Line_14 $$ if (callerClassLoader == classLoader) -->Line_15 $$ String callerClassName = callerClass.getName()[ CD ]
Line_21 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_27 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ FD ]
Line_12 $$ Class<?> callerClass = Reflection.getCallerClass(5)-->Line_13 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)[ FD ]
Line_4 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) -->Line_5 $$ return bean[ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_7 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean, classLoader)[ CD ]
Line_11 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_14 $$ if (callerClassLoader == classLoader) [ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_23 $$ return method.invoke(bean, arguments)[ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_3 $$ Class<?> beanClass = bean.getClass()[ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_3 $$ Class<?> beanClass = bean.getClass()[ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_11 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) [ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_27 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ CD ]
Line_11 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) -->Line_12 $$ Class<?> callerClass = Reflection.getCallerClass(5)[ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_14 $$ if (callerClassLoader == classLoader) [ FD ]
Line_7 $$ Class<?>[] interfaces = ReflectionUtil.getInterfaces(bean, classLoader)-->Line_27 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ FD ]
Line_21 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_23 $$ return method.invoke(bean, arguments)[ CD ]
Line_3 $$ Class<?> beanClass = bean.getClass()-->Line_4 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) [ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_21 $$ InvocationHandler invocationHandler = new InvocationHandler() [ CD ]
Line_13 $$ ClassLoader callerClassLoader = ClassLoaderUtil.getClassLoader(callerClass)-->Line_14 $$ if (callerClassLoader == classLoader) [ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_11 $$ if (classLoader == ClassLoaderUtil.getPortalClassLoader()) [ FD ]
Line_21 $$ InvocationHandler invocationHandler = new InvocationHandler() -->Line_23 $$ return method.invoke(bean, arguments)[ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_27 $$ return ProxyUtil.newProxyInstance(classLoader, interfaces, invocationHandler)[ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_8 $$ if (interfaces.length == 0) [ CD ]
Line_12 $$ Class<?> callerClass = Reflection.getCallerClass(5)-->Line_15 $$ String callerClassName = callerClass.getName()[ FD ]
Line_16 $$ if (!callerClassName.equals(BeanReferenceAnnotationBeanPostProcessor.class.getName())) -->Line_17 $$ return bean[ CD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_4 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) [ FD ]
Line_2 $$ public Object getBean(final Object bean, ClassLoader classLoader) -->Line_4 $$ if (ProxyUtil.isProxyClass(beanClass) && (ProxyUtil.getInvocationHandler(bean) instanceof PACLInvocationHandler)) [ CD ]
