Line_15 $$ timer = delayQueue.peek()-->Line_36 $$ timer = getTimer.invoke(timer)[ FD ]
Line_11 $$ timerQueue = sharedInstance.invoke(null)-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_22 $$ exceptions.add(e)[ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_26 $$ if (firstTimerF != null) [ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_38 $$ exceptions.add(e)[ FD ]
Line_3 $$ Field firstTimerF-->Line_12 $$ if (firstTimerF == null) [ FD ]
Line_5 $$ Object timer-->Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_5 $$ Object timer[ CD ]
Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")-->Line_34 $$ getTimer.setAccessible(true)[ FD ]
Line_3 $$ Field firstTimerF-->Line_27 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_30 $$ if (timer instanceof Delayed) -->Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ CD ]
Line_19 $$ timer = firstTimerF.get(timerQueue)-->Line_25 $$ if (timer != null) [ FD ]
Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")-->Line_9 $$ sharedInstance.setAccessible(true)[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_25 $$ if (timer != null) [ CD ]
Line_3 $$ Field firstTimerF-->Line_26 $$ if (firstTimerF != null) [ FD ]
Line_7 $$ Class<?> TimerQueueC = Class.forName("javax.swing.TimerQueue")-->Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")[ FD ]
Line_3 $$ Field firstTimerF-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_19 $$ timer = firstTimerF.get(timerQueue)-->Line_30 $$ if (timer instanceof Delayed) [ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_12 $$ if (firstTimerF == null) [ FD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_4 $$ Object timerQueue-->Line_27 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_30 $$ if (timer instanceof Delayed) -->Line_32 $$ text = "(delayed for " + delay + "ms)"[ CD ]
Line_15 $$ timer = delayQueue.peek()-->Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_32 $$ text = "(delayed for " + delay + "ms)"-->Line_43 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_25 $$ if (timer != null) -->Line_44 $$ exceptions.add(new AssertionFailedError("Not disposed Timer: " + text + "; queue:" + timerQueue))[ CD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_4 $$ Object timerQueue[ CD ]
Line_15 $$ timer = delayQueue.peek()-->Line_25 $$ if (timer != null) [ FD ]
Line_15 $$ timer = delayQueue.peek()-->Line_30 $$ if (timer instanceof Delayed) [ FD ]
Line_29 $$ String text = ""-->Line_32 $$ text = "(delayed for " + delay + "ms)"[ FD ]
Line_5 $$ Object timer-->Line_30 $$ if (timer instanceof Delayed) [ FD ]
Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")-->Line_36 $$ timer = getTimer.invoke(timer)[ FD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_3 $$ Field firstTimerF[ CD ]
Line_2 $$ protected static void checkAllTimersAreDisposed(@NotNull List<Throwable> exceptions) -->Line_44 $$ exceptions.add(new AssertionFailedError("Not disposed Timer: " + text + "; queue:" + timerQueue))[ FD ]
Line_5 $$ Object timer-->Line_36 $$ timer = getTimer.invoke(timer)[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_15 $$ timer = delayQueue.peek()[ CD ]
Line_7 $$ Class<?> TimerQueueC = Class.forName("javax.swing.TimerQueue")-->Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")[ FD ]
Line_15 $$ timer = delayQueue.peek()-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_5 $$ Object timer-->Line_25 $$ if (timer != null) [ FD ]
Line_29 $$ String text = ""-->Line_43 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_42 $$ Timer t = (Timer) timer-->Line_43 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ FD ]
Line_25 $$ if (timer != null) -->Line_42 $$ Timer t = (Timer) timer[ CD ]
Line_4 $$ Object timerQueue-->Line_11 $$ timerQueue = sharedInstance.invoke(null)[ FD ]
Line_25 $$ if (timer != null) -->Line_29 $$ String text = ""[ CD ]
Line_19 $$ timer = firstTimerF.get(timerQueue)-->Line_33 $$ Method getTimer = ReflectionUtil.getDeclaredMethod(timer.getClass(), "getTimer")[ FD ]
Line_11 $$ timerQueue = sharedInstance.invoke(null)-->Line_27 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_5 $$ Object timer-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_30 $$ if (timer instanceof Delayed) -->Line_31 $$ long delay = ((Delayed) timer).getDelay(TimeUnit.MILLISECONDS)[ CD ]
Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")-->Line_27 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ FD ]
Line_12 $$ if (firstTimerF == null) -->Line_19 $$ timer = firstTimerF.get(timerQueue)[ CD ]
Line_30 $$ if (timer instanceof Delayed) -->Line_34 $$ getTimer.setAccessible(true)[ CD ]
Line_5 $$ Object timer-->Line_15 $$ timer = delayQueue.peek()[ FD ]
Line_25 $$ if (timer != null) -->Line_43 $$ text = "Timer (listeners: " + Arrays.asList(t.getActionListeners()) + ") " + text[ CD ]
Line_26 $$ if (firstTimerF != null) -->Line_27 $$ ReflectionUtil.resetField(timerQueue, firstTimerF)[ CD ]
Line_8 $$ Method sharedInstance = TimerQueueC.getDeclaredMethod("sharedInstance")-->Line_11 $$ timerQueue = sharedInstance.invoke(null)[ FD ]
Line_19 $$ timer = firstTimerF.get(timerQueue)-->Line_36 $$ timer = getTimer.invoke(timer)[ FD ]
Line_25 $$ if (timer != null) -->Line_30 $$ if (timer instanceof Delayed) [ CD ]
Line_4 $$ Object timerQueue-->Line_19 $$ timer = firstTimerF.get(timerQueue)[ FD ]
Line_3 $$ Field firstTimerF-->Line_10 $$ firstTimerF = ReflectionUtil.getDeclaredField(TimerQueueC, "firstTimer")[ FD ]
Line_25 $$ if (timer != null) -->Line_26 $$ if (firstTimerF != null) [ CD ]
