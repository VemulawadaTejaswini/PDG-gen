Line_2 $$ private String calcClassName(File scriptFile) -->Line_4 $$ if (loader != null) [ CD ]
Line_7 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.UriScriptSource", true, loader)-->Line_10 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.FileScriptSource", true, loader)[ FD ]
Line_7 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.UriScriptSource", true, loader)-->Line_16 $$ final Object source = fileScriptSource.getConstructor(String.class, File.class).newInstance("script", scriptFile)[ FD ]
Line_2 $$ private String calcClassName(File scriptFile) -->Line_3 $$ final ClassLoader loader = getGradleClassLoader(myModule)[ CD ]
Line_16 $$ final Object source = fileScriptSource.getConstructor(String.class, File.class).newInstance("script", scriptFile)-->Line_17 $$ return (String) fileScriptSource.getMethod("getClassName").invoke(source)[ FD ]
Line_3 $$ final ClassLoader loader = getGradleClassLoader(myModule)-->Line_7 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.UriScriptSource", true, loader)[ FD ]
Line_7 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.UriScriptSource", true, loader)-->Line_17 $$ return (String) fileScriptSource.getMethod("getClassName").invoke(source)[ FD ]
Line_2 $$ private String calcClassName(File scriptFile) -->Line_22 $$ return null[ CD ]
Line_5 $$ Class<?> fileScriptSource-->Line_16 $$ final Object source = fileScriptSource.getConstructor(String.class, File.class).newInstance("script", scriptFile)[ FD ]
Line_3 $$ final ClassLoader loader = getGradleClassLoader(myModule)-->Line_4 $$ if (loader != null) [ FD ]
Line_5 $$ Class<?> fileScriptSource-->Line_17 $$ return (String) fileScriptSource.getMethod("getClassName").invoke(source)[ FD ]
Line_5 $$ Class<?> fileScriptSource-->Line_7 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.UriScriptSource", true, loader)[ FD ]
Line_10 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.FileScriptSource", true, loader)-->Line_16 $$ final Object source = fileScriptSource.getConstructor(String.class, File.class).newInstance("script", scriptFile)[ FD ]
Line_5 $$ Class<?> fileScriptSource-->Line_10 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.FileScriptSource", true, loader)[ FD ]
Line_10 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.FileScriptSource", true, loader)-->Line_17 $$ return (String) fileScriptSource.getMethod("getClassName").invoke(source)[ FD ]
Line_2 $$ private String calcClassName(File scriptFile) -->Line_16 $$ final Object source = fileScriptSource.getConstructor(String.class, File.class).newInstance("script", scriptFile)[ FD ]
Line_3 $$ final ClassLoader loader = getGradleClassLoader(myModule)-->Line_10 $$ fileScriptSource = Class.forName("org.gradle.groovy.scripts.FileScriptSource", true, loader)[ FD ]
Line_4 $$ if (loader != null) -->Line_5 $$ Class<?> fileScriptSource[ CD ]
