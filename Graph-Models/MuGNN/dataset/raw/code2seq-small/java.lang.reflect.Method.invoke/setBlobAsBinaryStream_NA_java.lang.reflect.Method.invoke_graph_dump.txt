Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_9 $$ Method methodToInvoke = lob.getClass().getMethod("getBinaryOutputStream", (Class[]) null)[ FD ]
Line_4 $$ if (binaryStream != null) -->Line_14 $$ ps.setBlob(paramIndex, blob)[ CD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_10 $$ OutputStream out = (OutputStream) methodToInvoke.invoke(lob, (Object[]) null)[ FD ]
Line_4 $$ if (binaryStream != null) -->Line_15 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_16 $$ logger.debug("Set binary stream for Oracle BLOB with length " + blob.length())[ FD ]
Line_10 $$ OutputStream out = (OutputStream) methodToInvoke.invoke(lob, (Object[]) null)-->Line_11 $$ FileCopyUtils.copy(binaryStream, out)[ FD ]
Line_4 $$ if (binaryStream != null) -->Line_20 $$ logger.debug("Set Oracle BLOB to null")[ CD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_11 $$ FileCopyUtils.copy(binaryStream, out)[ CD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_14 $$ ps.setBlob(paramIndex, blob)[ FD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_9 $$ Method methodToInvoke = lob.getClass().getMethod("getBinaryOutputStream", (Class[]) null)[ CD ]
Line_15 $$ if (logger.isDebugEnabled()) -->Line_16 $$ logger.debug("Set binary stream for Oracle BLOB with length " + blob.length())[ CD ]
Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() -->Line_10 $$ OutputStream out = (OutputStream) methodToInvoke.invoke(lob, (Object[]) null)[ CD ]
Line_9 $$ Method methodToInvoke = lob.getClass().getMethod("getBinaryOutputStream", (Class[]) null)-->Line_10 $$ OutputStream out = (OutputStream) methodToInvoke.invoke(lob, (Object[]) null)[ FD ]
Line_4 $$ if (binaryStream != null) -->Line_19 $$ ps.setBlob(paramIndex, (Blob) null)[ CD ]
Line_4 $$ if (binaryStream != null) -->Line_5 $$ Blob blob = (Blob) createLob(ps, false, new LobCallback() [ CD ]
