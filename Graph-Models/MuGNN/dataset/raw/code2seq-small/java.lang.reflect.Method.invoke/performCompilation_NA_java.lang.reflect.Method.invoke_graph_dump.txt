Line_5 $$ Constructor<?> constructor = mainClass.getConstructor(PrintWriter.class, PrintWriter.class, Map.class, Map.class)-->Line_13 $$ Object main = constructor.newInstance(new PrintWriter(out), new PrintWriter(err), customDefaultOptions, outputs)[ FD ]
Line_6 $$ Method compileMethod = mainClass.getMethod("compile", String[].class)-->Line_14 $$ return (Boolean) compileMethod.invoke(main, new Object[] [ FD ]
Line_2 $$ private boolean performCompilation(List<String> args, StringWriter out, StringWriter err, Map<String, List<String>> outputs, CompileContext context, ModuleChunk chunk) -->Line_13 $$ Object main = constructor.newInstance(new PrintWriter(out), new PrintWriter(err), customDefaultOptions, outputs)[ FD ]
Line_2 $$ private boolean performCompilation(List<String> args, StringWriter out, StringWriter err, Map<String, List<String>> outputs, CompileContext context, ModuleChunk chunk) -->Line_14 $$ return (Boolean) compileMethod.invoke(main, new Object[] [ FD ]
Line_13 $$ Object main = constructor.newInstance(new PrintWriter(out), new PrintWriter(err), customDefaultOptions, outputs)-->Line_14 $$ return (Boolean) compileMethod.invoke(main, new Object[] [ FD ]
Line_4 $$ Class<?> mainClass = Class.forName(GreclipseMain.class.getName(), true, myGreclipseLoader)-->Line_5 $$ Constructor<?> constructor = mainClass.getConstructor(PrintWriter.class, PrintWriter.class, Map.class, Map.class)[ FD ]
Line_2 $$ private boolean performCompilation(List<String> args, StringWriter out, StringWriter err, Map<String, List<String>> outputs, CompileContext context, ModuleChunk chunk) -->Line_16 $$ context.processMessage(new CompilerMessage(getPresentableName(), e))[ FD ]
Line_7 $$ HashMap<String, Object> customDefaultOptions = ContainerUtil.newHashMap()-->Line_13 $$ Object main = constructor.newInstance(new PrintWriter(out), new PrintWriter(err), customDefaultOptions, outputs)[ FD ]
Line_4 $$ Class<?> mainClass = Class.forName(GreclipseMain.class.getName(), true, myGreclipseLoader)-->Line_6 $$ Method compileMethod = mainClass.getMethod("compile", String[].class)[ FD ]
