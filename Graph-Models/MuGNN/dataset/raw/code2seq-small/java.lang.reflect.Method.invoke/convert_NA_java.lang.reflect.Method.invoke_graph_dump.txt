Line_6 $$ Class<?> sourceClass = sourceType.getType()-->Line_8 $$ Member member = getValidatedMember(targetClass, sourceClass)[ FD ]
Line_7 $$ Class<?> targetClass = targetType.getType()-->Line_27 $$ throw new IllegalStateException(String.format("No to%3$s() method exists on %1$s, " + "and no static valueOf/of/from(%1$s) method or %3$s(%1$s) constructor exists on %2$s.", sourceClass.getName(), targetClass.getName(), targetClass.getSimpleName()))[ FD ]
Line_18 $$ if (member instanceof Constructor) -->Line_19 $$ Constructor<?> ctor = (Constructor<?>) member[ CD ]
Line_7 $$ Class<?> targetClass = targetType.getType()-->Line_8 $$ Member member = getValidatedMember(targetClass, sourceClass)[ FD ]
Line_11 $$ Method method = (Method) member-->Line_16 $$ return method.invoke(null, source)[ FD ]
Line_8 $$ Member member = getValidatedMember(targetClass, sourceClass)-->Line_18 $$ if (member instanceof Constructor) [ FD ]
Line_10 $$ if (member instanceof Method) -->Line_13 $$ if (!Modifier.isStatic(method.getModifiers())) [ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_7 $$ Class<?> targetClass = targetType.getType()[ CD ]
Line_8 $$ Member member = getValidatedMember(targetClass, sourceClass)-->Line_10 $$ if (member instanceof Method) [ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_16 $$ return method.invoke(null, source)[ FD ]
Line_13 $$ if (!Modifier.isStatic(method.getModifiers())) -->Line_14 $$ return method.invoke(source)[ CD ]
Line_19 $$ Constructor<?> ctor = (Constructor<?>) member-->Line_20 $$ return ctor.newInstance(source)[ FD ]
Line_3 $$ if (source == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_6 $$ Class<?> sourceClass = sourceType.getType()[ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (source == null) [ FD ]
Line_11 $$ Method method = (Method) member-->Line_13 $$ if (!Modifier.isStatic(method.getModifiers())) [ FD ]
Line_11 $$ Method method = (Method) member-->Line_12 $$ ReflectionUtils.makeAccessible(method)[ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_3 $$ if (source == null) [ CD ]
Line_10 $$ if (member instanceof Method) -->Line_12 $$ ReflectionUtils.makeAccessible(method)[ CD ]
Line_13 $$ if (!Modifier.isStatic(method.getModifiers())) -->Line_16 $$ return method.invoke(null, source)[ CD ]
Line_18 $$ if (member instanceof Constructor) -->Line_20 $$ return ctor.newInstance(source)[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_7 $$ Class<?> targetClass = targetType.getType()[ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_14 $$ return method.invoke(source)[ FD ]
Line_11 $$ Method method = (Method) member-->Line_14 $$ return method.invoke(source)[ FD ]
Line_6 $$ Class<?> sourceClass = sourceType.getType()-->Line_27 $$ throw new IllegalStateException(String.format("No to%3$s() method exists on %1$s, " + "and no static valueOf/of/from(%1$s) method or %3$s(%1$s) constructor exists on %2$s.", sourceClass.getName(), targetClass.getName(), targetClass.getSimpleName()))[ FD ]
Line_10 $$ if (member instanceof Method) -->Line_11 $$ Method method = (Method) member[ CD ]
Line_10 $$ if (member instanceof Method) -->Line_18 $$ if (member instanceof Constructor) [ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_6 $$ Class<?> sourceClass = sourceType.getType()[ CD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_20 $$ return ctor.newInstance(source)[ FD ]
Line_2 $$ public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) -->Line_8 $$ Member member = getValidatedMember(targetClass, sourceClass)[ CD ]
