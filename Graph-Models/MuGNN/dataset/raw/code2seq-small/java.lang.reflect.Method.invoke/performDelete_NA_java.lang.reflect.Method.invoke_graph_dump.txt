Line_15 $$ final File file = (File) ourPathToFileMethod.invoke(fileObject)-->Line_16 $$ if (file == null) [ FD ]
Line_2 $$ private boolean performDelete(@NotNull final Object fileObject) -->Line_15 $$ final File file = (File) ourPathToFileMethod.invoke(fileObject)[ FD ]
Line_3 $$ Boolean result = doIOOperation(new RepeatableIOOperation<Boolean, RuntimeException>() -->Line_29 $$ return lastAttempt ? Boolean.FALSE : null[ CD ]
Line_16 $$ if (file == null) -->Line_17 $$ return Boolean.FALSE[ CD ]
Line_9 $$ final Throwable cause = e.getCause()-->Line_13 $$ if (ourAccessDeniedExceptionClass.isInstance(cause)) [ FD ]
Line_2 $$ private boolean performDelete(@NotNull final Object fileObject) -->Line_32 $$ return Boolean.TRUE.equals(result)[ CD ]
Line_3 $$ Boolean result = doIOOperation(new RepeatableIOOperation<Boolean, RuntimeException>() -->Line_32 $$ return Boolean.TRUE.equals(result)[ FD ]
Line_19 $$ if (file.delete() || !file.exists()) -->Line_20 $$ return Boolean.TRUE[ CD ]
Line_10 $$ if (!(cause instanceof IOException)) -->Line_11 $$ return Boolean.FALSE[ CD ]
Line_15 $$ final File file = (File) ourPathToFileMethod.invoke(fileObject)-->Line_19 $$ if (file.delete() || !file.exists()) [ FD ]
Line_2 $$ private boolean performDelete(@NotNull final Object fileObject) -->Line_6 $$ ourFilesDeleteIfExistsMethod.invoke(null, fileObject)[ FD ]
Line_2 $$ private boolean performDelete(@NotNull final Object fileObject) -->Line_3 $$ Boolean result = doIOOperation(new RepeatableIOOperation<Boolean, RuntimeException>() [ CD ]
