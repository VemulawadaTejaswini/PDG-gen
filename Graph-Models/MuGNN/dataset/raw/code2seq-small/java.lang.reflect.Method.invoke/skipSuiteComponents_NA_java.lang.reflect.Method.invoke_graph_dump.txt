Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])-->Line_20 $$ while (tests.hasMoreElements()) [ FD ]
Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])-->Line_21 $$ final Test t = (Test) tests.nextElement()[ FD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_11 $$ allNames.remove(displayName)[ FD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_17 $$ final Test test = (Test) getChildrenMethod.invoke(child, new Object[0])[ FD ]
Line_8 $$ for (Iterator suiteIterator = tests.iterator(); suiteIterator.hasNext(); ) -->Line_9 $$ final String displayName = describeChild((Runner) suiteIterator.next()).getDisplayName()[ FD ]
Line_5 $$ final Method getChildrenMethod = Suite.class.getDeclaredMethod("getChildren", new Class[0])-->Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])[ FD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_25 $$ allNames.remove(testDescription)[ FD ]
Line_14 $$ if (child instanceof SuiteMethod) -->Line_15 $$ final Method getChildrenMethod = JUnit38ClassRunner.class.getDeclaredMethod("getTest", new Class[0])[ CD ]
Line_4 $$ if (child instanceof Suite) -->Line_6 $$ getChildrenMethod.setAccessible(true)[ CD ]
Line_22 $$ if (t instanceof TestSuite) -->Line_24 $$ if (allNames.contains(testDescription)) [ CD ]
Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])-->Line_8 $$ for (Iterator suiteIterator = tests.iterator(); suiteIterator.hasNext(); ) [ FD ]
Line_14 $$ if (child instanceof SuiteMethod) -->Line_16 $$ getChildrenMethod.setAccessible(true)[ CD ]
Line_5 $$ final Method getChildrenMethod = Suite.class.getDeclaredMethod("getChildren", new Class[0])-->Line_17 $$ final Test test = (Test) getChildrenMethod.invoke(child, new Object[0])[ FD ]
Line_14 $$ if (child instanceof SuiteMethod) -->Line_18 $$ if (test instanceof TestSuite) [ CD ]
Line_20 $$ while (tests.hasMoreElements()) -->Line_22 $$ if (t instanceof TestSuite) [ CD ]
Line_4 $$ if (child instanceof Suite) -->Line_8 $$ for (Iterator suiteIterator = tests.iterator(); suiteIterator.hasNext(); ) [ CD ]
Line_5 $$ final Method getChildrenMethod = Suite.class.getDeclaredMethod("getChildren", new Class[0])-->Line_16 $$ getChildrenMethod.setAccessible(true)[ FD ]
Line_4 $$ if (child instanceof Suite) -->Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])[ CD ]
Line_18 $$ if (test instanceof TestSuite) -->Line_19 $$ final Enumeration tests = ((TestSuite) test).tests()[ CD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_4 $$ if (child instanceof Suite) [ FD ]
Line_4 $$ if (child instanceof Suite) -->Line_5 $$ final Method getChildrenMethod = Suite.class.getDeclaredMethod("getChildren", new Class[0])[ CD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_14 $$ if (child instanceof SuiteMethod) [ FD ]
Line_20 $$ while (tests.hasMoreElements()) -->Line_21 $$ final Test t = (Test) tests.nextElement()[ CD ]
Line_8 $$ for (Iterator suiteIterator = tests.iterator(); suiteIterator.hasNext(); ) -->Line_9 $$ final String displayName = describeChild((Runner) suiteIterator.next()).getDisplayName()[ CD ]
Line_9 $$ final String displayName = describeChild((Runner) suiteIterator.next()).getDisplayName()-->Line_11 $$ allNames.remove(displayName)[ FD ]
Line_10 $$ if (allNames.contains(displayName)) -->Line_11 $$ allNames.remove(displayName)[ CD ]
Line_9 $$ final String displayName = describeChild((Runner) suiteIterator.next()).getDisplayName()-->Line_10 $$ if (allNames.contains(displayName)) [ FD ]
Line_4 $$ if (child instanceof Suite) -->Line_14 $$ if (child instanceof SuiteMethod) [ CD ]
Line_14 $$ if (child instanceof SuiteMethod) -->Line_17 $$ final Test test = (Test) getChildrenMethod.invoke(child, new Object[0])[ CD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_24 $$ if (allNames.contains(testDescription)) [ FD ]
Line_17 $$ final Test test = (Test) getChildrenMethod.invoke(child, new Object[0])-->Line_18 $$ if (test instanceof TestSuite) [ FD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_7 $$ final List tests = (List) getChildrenMethod.invoke(child, new Object[0])[ FD ]
Line_8 $$ for (Iterator suiteIterator = tests.iterator(); suiteIterator.hasNext(); ) -->Line_10 $$ if (allNames.contains(displayName)) [ CD ]
Line_24 $$ if (allNames.contains(testDescription)) -->Line_25 $$ allNames.remove(testDescription)[ CD ]
Line_23 $$ final String testDescription = ((TestSuite) t).getName()-->Line_24 $$ if (allNames.contains(testDescription)) [ FD ]
Line_23 $$ final String testDescription = ((TestSuite) t).getName()-->Line_25 $$ allNames.remove(testDescription)[ FD ]
Line_22 $$ if (t instanceof TestSuite) -->Line_23 $$ final String testDescription = ((TestSuite) t).getName()[ CD ]
Line_18 $$ if (test instanceof TestSuite) -->Line_20 $$ while (tests.hasMoreElements()) [ CD ]
Line_2 $$ private void skipSuiteComponents(Set allNames, Object child) -->Line_10 $$ if (allNames.contains(displayName)) [ FD ]
Line_21 $$ final Test t = (Test) tests.nextElement()-->Line_22 $$ if (t instanceof TestSuite) [ FD ]
Line_5 $$ final Method getChildrenMethod = Suite.class.getDeclaredMethod("getChildren", new Class[0])-->Line_6 $$ getChildrenMethod.setAccessible(true)[ FD ]
