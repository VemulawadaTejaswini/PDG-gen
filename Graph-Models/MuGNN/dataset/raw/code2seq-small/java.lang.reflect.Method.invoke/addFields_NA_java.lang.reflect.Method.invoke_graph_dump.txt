Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ FD ]
Line_12 $$ if (returnValue instanceof List<?>) -->Line_14 $$ Element listEl = parentEl.addElement(memberName)[ CD ]
Line_6 $$ if (method.getName().startsWith("get") && !method.getName().equals("getClass")) -->Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)[ CD ]
Line_5 $$ Method method = methods[i]-->Line_11 $$ Object returnValue = method.invoke(obj, new Object[] [ FD ]
Line_12 $$ if (returnValue instanceof List<?>) -->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ CD ]
Line_4 $$ for (int i = 0; i < methods.length; i++) -->Line_5 $$ Method method = methods[i][ CD ]
Line_6 $$ if (method.getName().startsWith("get") && !method.getName().equals("getClass")) -->Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)[ CD ]
Line_12 $$ if (returnValue instanceof List<?>) -->Line_13 $$ List<Object> list = (List<Object>) returnValue[ CD ]
Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_14 $$ Element listEl = parentEl.addElement(memberName)[ FD ]
Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)-->Line_14 $$ Element listEl = parentEl.addElement(memberName)[ FD ]
Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)-->Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)[ FD ]
Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_4 $$ for (int i = 0; i < methods.length; i++) [ CD ]
Line_5 $$ Method method = methods[i]-->Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)[ FD ]
Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)-->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ FD ]
Line_5 $$ Method method = methods[i]-->Line_6 $$ if (method.getName().startsWith("get") && !method.getName().equals("getClass")) [ FD ]
Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)-->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ FD ]
Line_22 $$ if (_log.isWarnEnabled()) -->Line_23 $$ _log.warn(e.getMessage())[ CD ]
Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_3 $$ Method[] methods = obj.getClass().getMethods()[ FD ]
Line_15 $$ for (int j = 0; j < list.size(); j++) -->Line_16 $$ addBean(list.get(j), listEl)[ FD ]
Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_11 $$ Object returnValue = method.invoke(obj, new Object[] [ FD ]
Line_15 $$ for (int j = 0; j < list.size(); j++) -->Line_16 $$ addBean(list.get(j), listEl)[ CD ]
Line_11 $$ Object returnValue = method.invoke(obj, new Object[] -->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ FD ]
Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)-->Line_19 $$ DocUtil.add(parentEl, memberName, returnValue.toString())[ FD ]
Line_6 $$ if (method.getName().startsWith("get") && !method.getName().equals("getClass")) -->Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)[ CD ]
Line_13 $$ List<Object> list = (List<Object>) returnValue-->Line_15 $$ for (int j = 0; j < list.size(); j++) [ FD ]
Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)-->Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)[ FD ]
Line_2 $$ public static void addFields(Object obj, Element parentEl) -->Line_3 $$ Method[] methods = obj.getClass().getMethods()[ CD ]
Line_11 $$ Object returnValue = method.invoke(obj, new Object[] -->Line_12 $$ if (returnValue instanceof List<?>) [ FD ]
Line_13 $$ List<Object> list = (List<Object>) returnValue-->Line_16 $$ addBean(list.get(j), listEl)[ FD ]
Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)-->Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)[ FD ]
Line_7 $$ String memberName = StringUtil.replace(method.getName(), "get", StringPool.BLANK)-->Line_14 $$ Element listEl = parentEl.addElement(memberName)[ FD ]
Line_12 $$ if (returnValue instanceof List<?>) -->Line_15 $$ for (int j = 0; j < list.size(); j++) [ CD ]
Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)-->Line_8 $$ memberName = TextFormatter.format(memberName, TextFormatter.I)[ FD ]
Line_14 $$ Element listEl = parentEl.addElement(memberName)-->Line_16 $$ addBean(list.get(j), listEl)[ FD ]
Line_4 $$ for (int i = 0; i < methods.length; i++) -->Line_6 $$ if (method.getName().startsWith("get") && !method.getName().equals("getClass")) [ CD ]
Line_9 $$ memberName = TextFormatter.format(memberName, TextFormatter.K)-->Line_14 $$ Element listEl = parentEl.addElement(memberName)[ FD ]
