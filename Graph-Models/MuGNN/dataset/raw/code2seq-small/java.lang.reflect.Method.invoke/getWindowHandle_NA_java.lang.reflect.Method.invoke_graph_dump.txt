Line_2 $$ public static long getWindowHandle() -->Line_3 $$ if (IS_MAC) [ CD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_10 $$ if (Gdx.app.getClass().getName().equals("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")) [ CD ]
Line_10 $$ if (Gdx.app.getClass().getName().equals("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")) -->Line_11 $$ Class canvasClass = Class.forName("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")[ CD ]
Line_10 $$ if (Gdx.app.getClass().getName().equals("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")) -->Line_12 $$ Object canvas = canvasClass.getDeclaredMethod("getCanvas").invoke(Gdx.app)[ CD ]
Line_11 $$ Class canvasClass = Class.forName("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")-->Line_12 $$ Object canvas = canvasClass.getDeclaredMethod("getCanvas").invoke(Gdx.app)[ FD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_15 $$ Class displayClass = Class.forName("org.lwjgl.opengl.Display")[ CD ]
Line_18 $$ Object display = getImplementation.invoke(null, (Object[]) null)-->Line_19 $$ Field field = display.getClass().getDeclaredField(IS_WINDOWS ? "hwnd" : "parent_window")[ FD ]
Line_7 $$ if (Gdx.graphics.getType() == GraphicsType.JGLFW)-->Line_8 $$ return (Long) Gdx.graphics.getClass().getDeclaredMethod("getWindow").invoke(null)[ CD ]
Line_10 $$ if (Gdx.app.getClass().getName().equals("com.badlogic.gdx.backends.lwjgl.LwjglCanvas")) -->Line_13 $$ return (Long) invokeMethod(invokeMethod(SwingUtilities.windowForComponent((Component) canvas), "getPeer"), "getHWnd")[ CD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_17 $$ getImplementation.setAccessible(true)[ CD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_20 $$ field.setAccessible(true)[ CD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_21 $$ return (Long) field.get(display)[ CD ]
Line_3 $$ if (IS_MAC) -->Line_4 $$ return 0[ CD ]
Line_16 $$ Method getImplementation = displayClass.getDeclaredMethod("getImplementation", new Class[0])-->Line_17 $$ getImplementation.setAccessible(true)[ FD ]
Line_16 $$ Method getImplementation = displayClass.getDeclaredMethod("getImplementation", new Class[0])-->Line_18 $$ Object display = getImplementation.invoke(null, (Object[]) null)[ FD ]
Line_2 $$ public static long getWindowHandle() -->Line_26 $$ return 0[ CD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_18 $$ Object display = getImplementation.invoke(null, (Object[]) null)[ CD ]
Line_19 $$ Field field = display.getClass().getDeclaredField(IS_WINDOWS ? "hwnd" : "parent_window")-->Line_21 $$ return (Long) field.get(display)[ FD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_16 $$ Method getImplementation = displayClass.getDeclaredMethod("getImplementation", new Class[0])[ CD ]
Line_15 $$ Class displayClass = Class.forName("org.lwjgl.opengl.Display")-->Line_16 $$ Method getImplementation = displayClass.getDeclaredMethod("getImplementation", new Class[0])[ FD ]
Line_9 $$ if (Gdx.graphics.getType() == GraphicsType.LWJGL) -->Line_19 $$ Field field = display.getClass().getDeclaredField(IS_WINDOWS ? "hwnd" : "parent_window")[ CD ]
Line_18 $$ Object display = getImplementation.invoke(null, (Object[]) null)-->Line_21 $$ return (Long) field.get(display)[ FD ]
Line_19 $$ Field field = display.getClass().getDeclaredField(IS_WINDOWS ? "hwnd" : "parent_window")-->Line_20 $$ field.setAccessible(true)[ FD ]
