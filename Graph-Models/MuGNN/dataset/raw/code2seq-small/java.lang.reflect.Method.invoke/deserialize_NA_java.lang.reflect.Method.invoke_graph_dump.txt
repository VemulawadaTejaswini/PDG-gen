Line_2 $$ public static Model deserialize(Slice slice) -->Line_13 $$ byte[] hyperparameterBytes = slice.getBytes(HYPERPARAMETERS_OFFSET, hyperparameterLength)[ CD ]
Line_14 $$ int dataLengthOffset = HYPERPARAMETERS_OFFSET + hyperparameterLength-->Line_15 $$ long dataLength = slice.getLong(dataLengthOffset)[ FD ]
Line_6 $$ HashCode expectedHash = HashCode.fromBytes(modelHashBytes)-->Line_8 $$ checkArgument(actualHash.equals(expectedHash), "model hash does not match data")[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_14 $$ int dataLengthOffset = HYPERPARAMETERS_OFFSET + hyperparameterLength[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_15 $$ long dataLength = slice.getLong(dataLengthOffset)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_8 $$ checkArgument(actualHash.equals(expectedHash), "model hash does not match data")[ CD ]
Line_12 $$ int hyperparameterLength = slice.getInt(HYPERPARAMETER_LENGTH_OFFSET)-->Line_13 $$ byte[] hyperparameterBytes = slice.getBytes(HYPERPARAMETERS_OFFSET, hyperparameterLength)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_12 $$ int hyperparameterLength = slice.getInt(HYPERPARAMETER_LENGTH_OFFSET)[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_5 $$ byte[] modelHashBytes = slice.getBytes(HASH_OFFSET, 32)[ CD ]
Line_7 $$ HashCode actualHash = Hashing.sha256().hashBytes(slice.getBytes(ALGORITHM_OFFSET, slice.length() - ALGORITHM_OFFSET))-->Line_8 $$ checkArgument(actualHash.equals(expectedHash), "model hash does not match data")[ FD ]
Line_3 $$ int version = slice.getInt(VERSION_OFFSET)-->Line_4 $$ checkArgument(version == CURRENT_FORMAT_VERSION, format("Unsupported version: %d", version))[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_3 $$ int version = slice.getInt(VERSION_OFFSET)[ CD ]
Line_10 $$ Class<? extends Model> algorithm = MODEL_SERIALIZATION_IDS.inverse().get(id)-->Line_19 $$ Method deserialize = algorithm.getMethod("deserialize", byte[].class)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_17 $$ byte[] data = slice.getBytes(dataOffset, (int) dataLength)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_5 $$ byte[] modelHashBytes = slice.getBytes(HASH_OFFSET, 32)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_7 $$ HashCode actualHash = Hashing.sha256().hashBytes(slice.getBytes(ALGORITHM_OFFSET, slice.length() - ALGORITHM_OFFSET))[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_10 $$ Class<? extends Model> algorithm = MODEL_SERIALIZATION_IDS.inverse().get(id)[ CD ]
Line_10 $$ Class<? extends Model> algorithm = MODEL_SERIALIZATION_IDS.inverse().get(id)-->Line_11 $$ requireNonNull(algorithm, format("Unsupported algorith %d", id))[ FD ]
Line_9 $$ int id = slice.getInt(ALGORITHM_OFFSET)-->Line_10 $$ Class<? extends Model> algorithm = MODEL_SERIALIZATION_IDS.inverse().get(id)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_6 $$ HashCode expectedHash = HashCode.fromBytes(modelHashBytes)[ CD ]
Line_16 $$ int dataOffset = dataLengthOffset + SIZE_OF_LONG-->Line_17 $$ byte[] data = slice.getBytes(dataOffset, (int) dataLength)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_11 $$ requireNonNull(algorithm, format("Unsupported algorith %d", id))[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_9 $$ int id = slice.getInt(ALGORITHM_OFFSET)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_15 $$ long dataLength = slice.getLong(dataLengthOffset)[ CD ]
Line_19 $$ Method deserialize = algorithm.getMethod("deserialize", byte[].class)-->Line_20 $$ return (Model) deserialize.invoke(null, new Object[] [ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_7 $$ HashCode actualHash = Hashing.sha256().hashBytes(slice.getBytes(ALGORITHM_OFFSET, slice.length() - ALGORITHM_OFFSET))[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_4 $$ checkArgument(version == CURRENT_FORMAT_VERSION, format("Unsupported version: %d", version))[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_12 $$ int hyperparameterLength = slice.getInt(HYPERPARAMETER_LENGTH_OFFSET)[ FD ]
Line_5 $$ byte[] modelHashBytes = slice.getBytes(HASH_OFFSET, 32)-->Line_6 $$ HashCode expectedHash = HashCode.fromBytes(modelHashBytes)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_13 $$ byte[] hyperparameterBytes = slice.getBytes(HYPERPARAMETERS_OFFSET, hyperparameterLength)[ FD ]
Line_9 $$ int id = slice.getInt(ALGORITHM_OFFSET)-->Line_11 $$ requireNonNull(algorithm, format("Unsupported algorith %d", id))[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_16 $$ int dataOffset = dataLengthOffset + SIZE_OF_LONG[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_3 $$ int version = slice.getInt(VERSION_OFFSET)[ FD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_9 $$ int id = slice.getInt(ALGORITHM_OFFSET)[ CD ]
Line_2 $$ public static Model deserialize(Slice slice) -->Line_17 $$ byte[] data = slice.getBytes(dataOffset, (int) dataLength)[ CD ]
