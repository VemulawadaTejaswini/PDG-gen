Line_14 $$ List<Object> params = new ArrayList<Object>(4)-->Line_16 $$ params.add(response)[ FD ]
Line_8 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_9 $$ if (method == null) [ FD ]
Line_17 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_18 $$ HttpSession session = request.getSession(false)[ CD ]
Line_26 $$ Object command = newCommandObject(paramTypes[paramTypes.length - 1])-->Line_28 $$ bind(request, command)[ FD ]
Line_14 $$ List<Object> params = new ArrayList<Object>(4)-->Line_30 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))[ FD ]
Line_18 $$ HttpSession session = request.getSession(false)-->Line_22 $$ params.add(session)[ FD ]
Line_17 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_22 $$ params.add(session)[ CD ]
Line_14 $$ List<Object> params = new ArrayList<Object>(4)-->Line_15 $$ params.add(request)[ FD ]
Line_14 $$ List<Object> params = new ArrayList<Object>(4)-->Line_22 $$ params.add(session)[ FD ]
Line_26 $$ Object command = newCommandObject(paramTypes[paramTypes.length - 1])-->Line_27 $$ params.add(command)[ FD ]
Line_30 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))-->Line_31 $$ return massageReturnValueIfNecessary(returnValue)[ FD ]
Line_8 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_30 $$ Object returnValue = method.invoke(this.delegate, params.toArray(new Object[params.size()]))[ FD ]
Line_18 $$ HttpSession session = request.getSession(false)-->Line_19 $$ if (session == null) [ FD ]
Line_17 $$ if (paramTypes.length >= 3 && HttpSession.class == paramTypes[2]) -->Line_19 $$ if (session == null) [ CD ]
Line_14 $$ List<Object> params = new ArrayList<Object>(4)-->Line_27 $$ params.add(command)[ FD ]
Line_8 $$ Method method = this.handlerMethodMap.get(methodName)-->Line_13 $$ Class<?>[] paramTypes = method.getParameterTypes()[ FD ]
