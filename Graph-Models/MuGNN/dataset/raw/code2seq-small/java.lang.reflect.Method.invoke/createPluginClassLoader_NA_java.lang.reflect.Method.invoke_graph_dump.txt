Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_21 $$ File pluginRoot = pluginDescriptor.getPath()[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_30 $$ return new PluginClassLoader(urls, parentLoaders, pluginId, pluginDescriptor.getVersion(), pluginRoot)[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_3 $$ if (pluginDescriptor.getUseIdeaClassLoader()) [ FD ]
Line_25 $$ final List<URL> urls = new ArrayList<URL>(classPath.length)-->Line_28 $$ urls.add(file.toURI().toURL())[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_20 $$ PluginId pluginId = pluginDescriptor.getPluginId()[ CD ]
Line_22 $$ if (isUnitTestMode())-->Line_23 $$ return null[ CD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_21 $$ File pluginRoot = pluginDescriptor.getPath()[ CD ]
Line_7 $$ for (File aClassPath : classPath) -->Line_27 $$ final File file = aClassPath.getCanonicalFile()[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_20 $$ PluginId pluginId = pluginDescriptor.getPluginId()[ FD ]
Line_5 $$ final ClassLoader loader = PluginManagerCore.class.getClassLoader()-->Line_6 $$ final Method addUrlMethod = getAddUrlMethod(loader)[ FD ]
Line_8 $$ final File file = aClassPath.getCanonicalFile()-->Line_9 $$ addUrlMethod.invoke(loader, file.toURI().toURL())[ FD ]
Line_6 $$ final Method addUrlMethod = getAddUrlMethod(loader)-->Line_9 $$ addUrlMethod.invoke(loader, file.toURI().toURL())[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_3 $$ if (pluginDescriptor.getUseIdeaClassLoader()) [ CD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_36 $$ return null[ CD ]
Line_8 $$ final File file = aClassPath.getCanonicalFile()-->Line_28 $$ urls.add(file.toURI().toURL())[ FD ]
Line_7 $$ for (File aClassPath : classPath) -->Line_8 $$ final File file = aClassPath.getCanonicalFile()[ FD ]
Line_5 $$ final ClassLoader loader = PluginManagerCore.class.getClassLoader()-->Line_9 $$ addUrlMethod.invoke(loader, file.toURI().toURL())[ FD ]
Line_2 $$ private static ClassLoader createPluginClassLoader(@NotNull File[] classPath, @NotNull ClassLoader[] parentLoaders, @NotNull IdeaPluginDescriptor pluginDescriptor) -->Line_22 $$ if (isUnitTestMode())[ CD ]
