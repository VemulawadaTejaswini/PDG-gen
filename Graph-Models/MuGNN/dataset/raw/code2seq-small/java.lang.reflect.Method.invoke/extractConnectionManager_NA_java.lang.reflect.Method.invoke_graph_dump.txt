Line_28 $$ Class<?> type = method.getReturnType()-->Line_29 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) [ FD ]
Line_16 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) -->Line_18 $$ return (ConnectionManager) field.get(connectionFactory)[ CD ]
Line_27 $$ for (Method method : methods) -->Line_28 $$ Class<?> type = method.getReturnType()[ FD ]
Line_9 $$ Class<?> clz = connectionFactory.getClass()-->Line_10 $$ while (!Object.class.equals(clz)) [ FD ]
Line_9 $$ Class<?> clz = connectionFactory.getClass()-->Line_37 $$ clz = clz.getSuperclass()[ FD ]
Line_14 $$ for (Field field : fields) -->Line_17 $$ field.setAccessible(true)[ FD ]
Line_27 $$ for (Method method : methods) -->Line_31 $$ return (ConnectionManager) method.invoke(connectionFactory, new Object[] [ FD ]
Line_27 $$ for (Method method : methods) -->Line_30 $$ method.setAccessible(true)[ FD ]
Line_14 $$ for (Field field : fields) -->Line_15 $$ Class<?> fieldType = field.getType()[ FD ]
Line_37 $$ clz = clz.getSuperclass()-->Line_26 $$ Method[] methods = clz.getDeclaredMethods()[ FD ]
Line_10 $$ while (!Object.class.equals(clz)) -->Line_37 $$ clz = clz.getSuperclass()[ CD ]
Line_15 $$ Class<?> fieldType = field.getType()-->Line_16 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) [ FD ]
Line_29 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) -->Line_31 $$ return (ConnectionManager) method.invoke(connectionFactory, new Object[] [ CD ]
Line_37 $$ clz = clz.getSuperclass()-->Line_10 $$ while (!Object.class.equals(clz)) [ FD ]
Line_29 $$ if (type.equals(javax.resource.spi.ConnectionManager.class) || type.equals(ConnectionManager.class)) -->Line_30 $$ method.setAccessible(true)[ CD ]
Line_14 $$ for (Field field : fields) -->Line_18 $$ return (ConnectionManager) field.get(connectionFactory)[ FD ]
Line_9 $$ Class<?> clz = connectionFactory.getClass()-->Line_12 $$ Field[] fields = clz.getDeclaredFields()[ FD ]
Line_9 $$ Class<?> clz = connectionFactory.getClass()-->Line_26 $$ Method[] methods = clz.getDeclaredMethods()[ FD ]
Line_37 $$ clz = clz.getSuperclass()-->Line_12 $$ Field[] fields = clz.getDeclaredFields()[ FD ]
Line_16 $$ if (fieldType.equals(javax.resource.spi.ConnectionManager.class) || fieldType.equals(ConnectionManager.class)) -->Line_17 $$ field.setAccessible(true)[ CD ]
