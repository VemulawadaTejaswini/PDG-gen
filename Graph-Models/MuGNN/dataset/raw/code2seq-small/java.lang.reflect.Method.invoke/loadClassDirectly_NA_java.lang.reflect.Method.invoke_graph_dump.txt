Line_2 $$ protected static Class<?> loadClassDirectly(ClassLoader classLoader, String className) throws Exception -->Line_8 $$ clazz = (Class<?>) findClassMethod.invoke(classLoader, className)[ FD ]
Line_6 $$ if (clazz == null) -->Line_8 $$ clazz = (Class<?>) findClassMethod.invoke(classLoader, className)[ CD ]
Line_2 $$ protected static Class<?> loadClassDirectly(ClassLoader classLoader, String className) throws Exception -->Line_5 $$ Class<?> clazz = (Class<?>) findLoadedClassMethod.invoke(classLoader, className)[ FD ]
Line_2 $$ protected static Class<?> loadClassDirectly(ClassLoader classLoader, String className) throws Exception -->Line_11 $$ resolveClassMethod.invoke(classLoader, clazz)[ FD ]
Line_5 $$ Class<?> clazz = (Class<?>) findLoadedClassMethod.invoke(classLoader, className)-->Line_11 $$ resolveClassMethod.invoke(classLoader, clazz)[ FD ]
Line_6 $$ if (clazz == null) -->Line_7 $$ Method findClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "findClass", String.class)[ CD ]
Line_4 $$ Method findLoadedClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "findLoadedClass", String.class)-->Line_5 $$ Class<?> clazz = (Class<?>) findLoadedClassMethod.invoke(classLoader, className)[ FD ]
Line_10 $$ Method resolveClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "resolveClass", Class.class)-->Line_11 $$ resolveClassMethod.invoke(classLoader, clazz)[ FD ]
Line_8 $$ clazz = (Class<?>) findClassMethod.invoke(classLoader, className)-->Line_11 $$ resolveClassMethod.invoke(classLoader, clazz)[ FD ]
Line_7 $$ Method findClassMethod = ReflectionUtil.getDeclaredMethod(ClassLoader.class, "findClass", String.class)-->Line_8 $$ clazz = (Class<?>) findClassMethod.invoke(classLoader, className)[ FD ]
Line_5 $$ Class<?> clazz = (Class<?>) findLoadedClassMethod.invoke(classLoader, className)-->Line_8 $$ clazz = (Class<?>) findClassMethod.invoke(classLoader, className)[ FD ]
Line_5 $$ Class<?> clazz = (Class<?>) findLoadedClassMethod.invoke(classLoader, className)-->Line_6 $$ if (clazz == null) [ FD ]
