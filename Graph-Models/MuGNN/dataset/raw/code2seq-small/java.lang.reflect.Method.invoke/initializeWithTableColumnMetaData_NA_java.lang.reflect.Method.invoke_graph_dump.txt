Line_11 $$ if (nativeJdbcExtractor != null) -->Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ CD ]
Line_24 $$ if (!isOracleCon) -->Line_26 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ CD ]
Line_31 $$ Boolean originalValueForIncludeSynonyms-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_22 $$ isOracleCon = false-->Line_24 $$ if (!isOracleCon) [ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_33 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)[ FD ]
Line_30 $$ Method setIncludeSynonyms-->Line_38 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_4 $$ if (!this.includeSynonyms) -->Line_7 $$ return[ CD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_38 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_33 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)-->Line_34 $$ ReflectionUtils.makeAccessible(getIncludeSynonyms)[ FD ]
Line_14 $$ boolean isOracleCon-->Line_24 $$ if (!isOracleCon) [ FD ]
Line_17 $$ isOracleCon = oracleConClass.isInstance(con)-->Line_22 $$ isOracleCon = false[ FD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_17 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_38 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_30 $$ Method setIncludeSynonyms-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_16 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")[ FD ]
Line_14 $$ boolean isOracleCon-->Line_22 $$ isOracleCon = false[ FD ]
Line_35 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_38 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_35 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_33 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)[ FD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_35 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_14 $$ boolean isOracleCon-->Line_17 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_33 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)-->Line_35 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_37 $$ ReflectionUtils.makeAccessible(setIncludeSynonyms)[ FD ]
Line_10 $$ NativeJdbcExtractor nativeJdbcExtractor = getNativeJdbcExtractor()-->Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ FD ]
Line_31 $$ Boolean originalValueForIncludeSynonyms-->Line_35 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_30 $$ Method setIncludeSynonyms-->Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_17 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_30 $$ Method setIncludeSynonyms-->Line_37 $$ ReflectionUtils.makeAccessible(setIncludeSynonyms)[ FD ]
Line_24 $$ if (!isOracleCon) -->Line_27 $$ return[ CD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_36 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_10 $$ NativeJdbcExtractor nativeJdbcExtractor = getNativeJdbcExtractor()-->Line_11 $$ if (nativeJdbcExtractor != null) [ FD ]
Line_16 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")-->Line_17 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_4 $$ if (!this.includeSynonyms) -->Line_5 $$ logger.debug("Defaulting to no synonyms in table metadata lookup")[ CD ]
Line_19 $$ if (logger.isInfoEnabled()) -->Line_20 $$ logger.info("Couldn't find Oracle JDBC API: " + ex)[ CD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_16 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")[ FD ]
Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_44 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_9 $$ Connection con = databaseMetaData.getConnection()-->Line_12 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ FD ]
Line_24 $$ if (!isOracleCon) -->Line_25 $$ logger.warn("Unable to include synonyms in table metadata lookup. Connection used for " + "DatabaseMetaData is not recognized as an Oracle connection: " + con)[ CD ]
Line_4 $$ if (!this.includeSynonyms) -->Line_6 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ CD ]
Line_17 $$ isOracleCon = oracleConClass.isInstance(con)-->Line_24 $$ if (!isOracleCon) [ FD ]
