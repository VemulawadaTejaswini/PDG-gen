Line_28 $$ for (Method method : methods) -->Line_32 $$ b.append(" ").append(method.getName()).append("() [ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_34 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_4 $$ int numValidAnnotations = 0[ CD ]
Line_74 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_78 $$ for (int i = 0; i < length; i++) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_82 $$ b.append("f")[ FD ]
Line_55 $$ if (returnType.equals(Class[].class)) -->Line_60 $$ if (returnType.equals(Class.class)) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_104 $$ b.append(type.getCanonicalName())[ FD ]
Line_47 $$ if (returnType.equals(String[].class)) -->Line_52 $$ if (returnType.equals(String.class)) [ CD ]
Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_67 $$ for (int i = 0; i < length; i++) [ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_109 $$ return (numValidAnnotations > 0) ? b.toString() : "null"[ CD ]
Line_28 $$ for (Method method : methods) -->Line_29 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_106 $$ b.append("}, ")[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_5 $$ final Class<?>[] ignoredAnnotations = [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_90 $$ b.append("f")[ FD ]
Line_78 $$ for (int i = 0; i < length; i++) -->Line_79 $$ Object n = Array.get(invokeResult, i)[ CD ]
Line_52 $$ if (returnType.equals(String.class)) -->Line_55 $$ if (returnType.equals(Class[].class)) [ CD ]
Line_63 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_71 $$ if (returnType.isEnum()) [ CD ]
Line_71 $$ if (returnType.isEnum()) -->Line_74 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) [ CD ]
Line_60 $$ if (returnType.equals(Class.class)) -->Line_63 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) [ CD ]
Line_68 $$ Object e = Array.get(invokeResult, i)-->Line_69 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ FD ]
Line_33 $$ if (returnType.isArray()) -->Line_34 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_109 $$ return (numValidAnnotations > 0) ? b.toString() : "null"[ FD ]
Line_4 $$ int numValidAnnotations = 0-->Line_23 $$ numValidAnnotations++[ FD ]
Line_67 $$ for (int i = 0; i < length; i++) -->Line_68 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_63 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_67 $$ for (int i = 0; i < length; i++) [ CD ]
Line_13 $$ ignoredType = ignoredAnnotations[i].equals(type)-->Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) [ FD ]
Line_2 $$ private String getAnnotations(Annotation[] annotations) -->Line_111 $$ return "null"[ CD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_86 $$ if (returnType.isPrimitive()) [ FD ]
Line_89 $$ if (returnType.equals(float.class)) -->Line_90 $$ b.append("f")[ CD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_74 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) [ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_50 $$ b.append(" \"").append(s).append("\",")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_30 $$ b.append(" @Override public")[ FD ]
Line_8 $$ for (Annotation annotation : annotations) -->Line_9 $$ Class<?> type = annotation.annotationType()[ FD ]
Line_66 $$ int length = Array.getLength(invokeResult)-->Line_78 $$ for (int i = 0; i < length; i++) [ FD ]
Line_79 $$ Object n = Array.get(invokeResult, i)-->Line_80 $$ b.append(" ").append(n.toString())[ FD ]
Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_79 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_67 $$ for (int i = 0; i < length; i++) -->Line_79 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_39 $$ invokeResult = method.invoke(annotation)-->Line_66 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_86 $$ if (returnType.isPrimitive()) -->Line_93 $$ logger.log(Type.ERROR, "Return type not supported (or not yet implemented).")[ CD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_47 $$ if (returnType.equals(String[].class)) [ FD ]
Line_66 $$ int length = Array.getLength(invokeResult)-->Line_67 $$ for (int i = 0; i < length; i++) [ FD ]
Line_78 $$ for (int i = 0; i < length; i++) -->Line_84 $$ b.append(",")[ CD ]
Line_74 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_77 $$ int length = Array.getLength(invokeResult)[ CD ]
Line_74 $$ if (returnType.isArray() && returnType.getComponentType().isPrimitive()) -->Line_86 $$ if (returnType.isPrimitive()) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_108 $$ b.append("}")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_97 $$ b.append(" }")[ FD ]
Line_39 $$ invokeResult = method.invoke(annotation)-->Line_68 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_2 $$ private String getAnnotations(Annotation[] annotations) -->Line_3 $$ if (annotations != null && annotations.length > 0) [ CD ]
Line_39 $$ invokeResult = method.invoke(annotation)-->Line_79 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_52 $$ if (returnType.equals(String.class)) [ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_71 $$ if (returnType.isEnum()) [ FD ]
Line_67 $$ for (int i = 0; i < length; i++) -->Line_68 $$ Object e = Array.get(invokeResult, i)[ CD ]
Line_39 $$ invokeResult = method.invoke(annotation)-->Line_77 $$ int length = Array.getLength(invokeResult)[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_34 $$ b.append(" new ").append(returnType.getCanonicalName()).append(" [ FD ]
Line_67 $$ for (int i = 0; i < length; i++) -->Line_78 $$ for (int i = 0; i < length; i++) [ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_63 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) [ FD ]
Line_96 $$ if (returnType.isArray()) -->Line_97 $$ b.append(" }")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_80 $$ b.append(" ").append(n.toString())[ FD ]
Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_68 $$ Object e = Array.get(invokeResult, i)[ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_55 $$ if (returnType.equals(Class[].class)) [ FD ]
Line_63 $$ if (returnType.isArray() && returnType.getComponentType().isEnum()) -->Line_66 $$ int length = Array.getLength(invokeResult)[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_32 $$ b.append(" ").append(method.getName()).append("() [ FD ]
Line_67 $$ for (int i = 0; i < length; i++) -->Line_69 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_69 $$ b.append(" ").append(enumTypeName).append(".").append(e.toString()).append(",")[ FD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_104 $$ b.append(type.getCanonicalName())[ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_96 $$ if (returnType.isArray()) [ FD ]
Line_28 $$ for (Method method : methods) -->Line_39 $$ invokeResult = method.invoke(annotation)[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_105 $$ b.append(".class; }")[ FD ]
Line_81 $$ if (primitiveType.equals(float.class)) -->Line_82 $$ b.append("f")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_58 $$ b.append(" ").append(c.getCanonicalName()).append(".class,")[ FD ]
Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_78 $$ for (int i = 0; i < length; i++) [ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_60 $$ if (returnType.equals(Class.class)) [ FD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_33 $$ if (returnType.isArray()) [ FD ]
Line_78 $$ for (int i = 0; i < length; i++) -->Line_80 $$ b.append(" ").append(n.toString())[ CD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_89 $$ if (returnType.equals(float.class)) [ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_7 $$ b.append("new java.lang.annotation.Annotation[] [ CD ]
Line_78 $$ for (int i = 0; i < length; i++) -->Line_79 $$ Object n = Array.get(invokeResult, i)[ FD ]
Line_8 $$ for (Annotation annotation : annotations) -->Line_39 $$ invokeResult = method.invoke(annotation)[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_6 $$ StringBuilder b = new StringBuilder()[ CD ]
Line_9 $$ Class<?> type = annotation.annotationType()-->Line_13 $$ ignoredType = ignoredAnnotations[i].equals(type)[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_31 $$ b.append(" ").append(returnType.getCanonicalName())[ FD ]
Line_3 $$ if (annotations != null && annotations.length > 0) -->Line_108 $$ b.append("}")[ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_100 $$ b.append("}")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_99 $$ b.append("; ")[ FD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_7 $$ b.append("new java.lang.annotation.Annotation[] [ FD ]
Line_12 $$ for (int i = 0; !ignoredType && i < ignoredAnnotations.length; i++) -->Line_13 $$ ignoredType = ignoredAnnotations[i].equals(type)[ CD ]
Line_78 $$ for (int i = 0; i < length; i++) -->Line_81 $$ if (primitiveType.equals(float.class)) [ CD ]
Line_6 $$ StringBuilder b = new StringBuilder()-->Line_84 $$ b.append(",")[ FD ]
Line_86 $$ if (returnType.isPrimitive()) -->Line_89 $$ if (returnType.equals(float.class)) [ CD ]
Line_29 $$ Class<?> returnType = method.getReturnType()-->Line_31 $$ b.append(" ").append(returnType.getCanonicalName())[ FD ]
