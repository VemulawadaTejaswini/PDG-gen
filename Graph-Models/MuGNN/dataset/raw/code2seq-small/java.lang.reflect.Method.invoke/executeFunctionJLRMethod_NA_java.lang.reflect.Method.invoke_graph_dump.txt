Line_26 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)-->Line_30 $$ Object result = method.invoke(method.getClass(), functionArgs)[ FD ]
Line_11 $$ Object[] functionArgs = getArguments(state)-->Line_30 $$ Object result = method.invoke(method.getClass(), functionArgs)[ FD ]
Line_22 $$ TypeConverter converter = state.getEvaluationContext().getTypeConverter()-->Line_23 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ FD ]
Line_31 $$ if (!argumentConversionOccurred) -->Line_33 $$ this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType())[ CD ]
Line_30 $$ Object result = method.invoke(method.getClass(), functionArgs)-->Line_35 $$ return new TypedValue(result, new TypeDescriptor(new MethodParameter(method, -1)).narrow(result))[ FD ]
Line_11 $$ Object[] functionArgs = getArguments(state)-->Line_23 $$ argumentConversionOccurred = ReflectionHelper.convertAllArguments(converter, functionArgs, method)[ FD ]
Line_11 $$ Object[] functionArgs = getArguments(state)-->Line_26 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)[ FD ]
Line_31 $$ if (!argumentConversionOccurred) -->Line_32 $$ this.method = method[ CD ]
Line_25 $$ if (method.isVarArgs()) -->Line_26 $$ functionArgs = ReflectionHelper.setupArgumentsForVarargsInvocation(method.getParameterTypes(), functionArgs)[ CD ]
