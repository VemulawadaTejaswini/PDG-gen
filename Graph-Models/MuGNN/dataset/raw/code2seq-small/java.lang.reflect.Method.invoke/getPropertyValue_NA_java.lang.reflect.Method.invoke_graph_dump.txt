Line_5 $$ if (propertyValue == null) -->Line_10 $$ if (method != null) [ CD ]
Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))-->Line_12 $$ propertyValue = method.invoke(componentInstance)[ FD ]
Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))-->Line_7 $$ if (method == null) [ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))[ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_4 $$ Object propertyValue = ReflectionUtil.getField(componentInstanceClass, componentInstance, null, propertyName)[ CD ]
Line_3 $$ final Class<? extends Object> componentInstanceClass = componentInstance.getClass()-->Line_4 $$ Object propertyValue = ReflectionUtil.getField(componentInstanceClass, componentInstance, null, propertyName)[ FD ]
Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))-->Line_10 $$ if (method != null) [ FD ]
Line_3 $$ final Class<? extends Object> componentInstanceClass = componentInstance.getClass()-->Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))[ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))[ FD ]
Line_4 $$ Object propertyValue = ReflectionUtil.getField(componentInstanceClass, componentInstance, null, propertyName)-->Line_12 $$ propertyValue = method.invoke(componentInstance)[ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_12 $$ propertyValue = method.invoke(componentInstance)[ FD ]
Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))-->Line_10 $$ if (method != null) [ FD ]
Line_4 $$ Object propertyValue = ReflectionUtil.getField(componentInstanceClass, componentInstance, null, propertyName)-->Line_5 $$ if (propertyValue == null) [ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_3 $$ final Class<? extends Object> componentInstanceClass = componentInstance.getClass()[ CD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_3 $$ final Class<? extends Object> componentInstanceClass = componentInstance.getClass()[ FD ]
Line_5 $$ if (propertyValue == null) -->Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))[ CD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_4 $$ Object propertyValue = ReflectionUtil.getField(componentInstanceClass, componentInstance, null, propertyName)[ FD ]
Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))-->Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))[ FD ]
Line_6 $$ Method method = ReflectionUtil.getMethod(componentInstanceClass, "get" + StringUtil.capitalize(propertyName))-->Line_12 $$ propertyValue = method.invoke(componentInstance)[ FD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_17 $$ return propertyValue[ CD ]
Line_5 $$ if (propertyValue == null) -->Line_7 $$ if (method == null) [ CD ]
Line_2 $$ private static Object getPropertyValue(Object componentInstance, String propertyName) -->Line_5 $$ if (propertyValue == null) [ CD ]
Line_7 $$ if (method == null) -->Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))[ CD ]
Line_3 $$ final Class<? extends Object> componentInstanceClass = componentInstance.getClass()-->Line_8 $$ method = ReflectionUtil.getMethod(componentInstanceClass, "is" + StringUtil.capitalize(propertyName))[ FD ]
