Line_3 $$ Class<?> clazz = Class.forName("net.htmlparser.jericho.LoggerFactory")-->Line_4 $$ Method method = ReflectionUtil.getDeclaredMethod(clazz, "getDefaultLoggerProvider")[ FD ]
Line_2 $$ public static void install() throws Exception -->Line_5 $$ LoggerProvider loggerProvider = (LoggerProvider) method.invoke(null)[ CD ]
Line_6 $$ CachedLoggerProvider cachedLoggerProvider = new CachedLoggerProvider(loggerProvider)-->Line_7 $$ Config.LoggerProvider = cachedLoggerProvider[ FD ]
Line_2 $$ public static void install() throws Exception -->Line_4 $$ Method method = ReflectionUtil.getDeclaredMethod(clazz, "getDefaultLoggerProvider")[ CD ]
Line_2 $$ public static void install() throws Exception -->Line_3 $$ Class<?> clazz = Class.forName("net.htmlparser.jericho.LoggerFactory")[ CD ]
Line_2 $$ public static void install() throws Exception -->Line_7 $$ Config.LoggerProvider = cachedLoggerProvider[ CD ]
Line_4 $$ Method method = ReflectionUtil.getDeclaredMethod(clazz, "getDefaultLoggerProvider")-->Line_5 $$ LoggerProvider loggerProvider = (LoggerProvider) method.invoke(null)[ FD ]
Line_2 $$ public static void install() throws Exception -->Line_6 $$ CachedLoggerProvider cachedLoggerProvider = new CachedLoggerProvider(loggerProvider)[ CD ]
