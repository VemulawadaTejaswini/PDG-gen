Line_38 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)-->Line_39 $$ if (result == null) [ FD ]
Line_11 $$ final int close = cmd.lastIndexOf(")")-->Line_12 $$ if (close == -1) [ FD ]
Line_47 $$ if (s != null) -->Line_48 $$ context.message(s, getLine())[ CD ]
Line_7 $$ if (open == -1) -->Line_9 $$ return ActionCallback.DONE[ CD ]
Line_39 $$ if (result == null) -->Line_40 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object, but was null", getLine())[ CD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_57 $$ cmdResult.setRejected()[ CD ]
Line_30 $$ Method m = methodClass.getFirst()-->Line_31 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) [ FD ]
Line_5 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_16 $$ final String methodName = cmd.substring(0, open)[ FD ]
Line_19 $$ Class[] types = noArgs ? new Class[1] : new Class[args.length + 1]-->Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)[ FD ]
Line_4 $$ final ActionCallback cmdResult = new ActionCallback()-->Line_50 $$ cmdResult.setDone()[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_56 $$ context.error(s, getLine())[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_47 $$ if (s != null) [ CD ]
Line_31 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) -->Line_32 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object", getLine())[ CD ]
Line_11 $$ final int close = cmd.lastIndexOf(")")-->Line_17 $$ String[] args = cmd.substring(open + 1, close).split(",")[ FD ]
Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_26 $$ if (methodClass == null) [ FD ]
Line_26 $$ if (methodClass == null) -->Line_27 $$ context.error("No method \"" + methodName + "\" found in facade classes: " + context.getCallClasses(), getLine())[ CD ]
Line_35 $$ Object[] actualArgs = noArgs ? new Object[1] : new Object[args.length + 1]-->Line_37 $$ System.arraycopy(args, 0, actualArgs, 1, actualArgs.length - 1)[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_48 $$ context.message(s, getLine())[ FD ]
Line_38 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)-->Line_43 $$ result.doWhenDone(new Consumer<String>() [ FD ]
Line_4 $$ final ActionCallback cmdResult = new ActionCallback()-->Line_57 $$ cmdResult.setRejected()[ FD ]
Line_26 $$ if (methodClass == null) -->Line_28 $$ return ActionCallback.REJECTED[ CD ]
Line_17 $$ String[] args = cmd.substring(open + 1, close).split(",")-->Line_37 $$ System.arraycopy(args, 0, actualArgs, 1, actualArgs.length - 1)[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_50 $$ cmdResult.setDone()[ CD ]
Line_39 $$ if (result == null) -->Line_41 $$ return ActionCallback.REJECTED[ CD ]
Line_21 $$ for (int i = 1; i < types.length; i++) -->Line_22 $$ types[i] = String.class[ CD ]
Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_40 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object, but was null", getLine())[ FD ]
Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_32 $$ context.error("Method " + methodClass.getSecond() + ":" + methodName + " must return AsyncResult object", getLine())[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_56 $$ context.error(s, getLine())[ CD ]
Line_6 $$ final int open = cmd.indexOf("(")-->Line_7 $$ if (open == -1) [ FD ]
Line_5 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_6 $$ final int open = cmd.indexOf("(")[ FD ]
Line_30 $$ Method m = methodClass.getFirst()-->Line_38 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)[ FD ]
Line_6 $$ final int open = cmd.indexOf("(")-->Line_16 $$ final String methodName = cmd.substring(0, open)[ FD ]
Line_43 $$ result.doWhenDone(new Consumer<String>() -->Line_47 $$ if (s != null) [ FD ]
Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)-->Line_30 $$ Method m = methodClass.getFirst()[ FD ]
Line_5 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_17 $$ String[] args = cmd.substring(open + 1, close).split(",")[ FD ]
Line_31 $$ if (!m.getReturnType().isAssignableFrom(AsyncResult.class)) -->Line_33 $$ return ActionCallback.REJECTED[ CD ]
Line_35 $$ Object[] actualArgs = noArgs ? new Object[1] : new Object[args.length + 1]-->Line_38 $$ AsyncResult result = (AsyncResult<String>) m.invoke(null, actualArgs)[ FD ]
Line_5 $$ final String cmd = getText().substring(PREFIX.length()).trim()-->Line_11 $$ final int close = cmd.lastIndexOf(")")[ FD ]
Line_16 $$ final String methodName = cmd.substring(0, open)-->Line_25 $$ Pair<Method, Class> methodClass = findMethod(context, methodName, types)[ FD ]
Line_7 $$ if (open == -1) -->Line_8 $$ context.error("( expected", getLine())[ CD ]
Line_12 $$ if (close == -1) -->Line_14 $$ return ActionCallback.DONE[ CD ]
Line_12 $$ if (close == -1) -->Line_13 $$ context.error(") expected", getLine())[ CD ]
