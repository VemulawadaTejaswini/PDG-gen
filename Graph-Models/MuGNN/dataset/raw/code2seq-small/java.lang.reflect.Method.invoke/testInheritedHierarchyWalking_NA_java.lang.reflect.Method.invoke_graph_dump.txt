Line_9 $$ while ((clazz = queue.poll()) != null) -->Line_10 $$ actualClassHierarchy.add(clazz)[ CD ]
Line_8 $$ Class<?> clazz = null-->Line_9 $$ while ((clazz = queue.poll()) != null) [ FD ]
Line_6 $$ Queue<Class<?>> queue = new LinkedList()-->Line_7 $$ queue.offer(TestClass.class)[ FD ]
Line_6 $$ Queue<Class<?>> queue = new LinkedList()-->Line_9 $$ while ((clazz = queue.poll()) != null) [ FD ]
Line_5 $$ List<Class<?>> actualClassHierarchy = new ArrayList()-->Line_10 $$ actualClassHierarchy.add(clazz)[ FD ]
Line_9 $$ while ((clazz = queue.poll()) != null) -->Line_10 $$ actualClassHierarchy.add(clazz)[ FD ]
Line_9 $$ while ((clazz = queue.poll()) != null) -->Line_11 $$ _QUEUE_SUPER_TYPES_METHOD.invoke(null, queue, clazz)[ FD ]
Line_4 $$ List<Class<?>> expectedClassHierarchy = Arrays.asList(TestClass.class, SuperClass.class, TestInterface2.class, TestInterface1.class, OriginClass.class, SuperInterface2.class, SuperInterface1.class, OriginInterface2.class, OriginInterface1.class)-->Line_13 $$ Assert.assertEquals(expectedClassHierarchy, actualClassHierarchy)[ FD ]
Line_6 $$ Queue<Class<?>> queue = new LinkedList()-->Line_11 $$ _QUEUE_SUPER_TYPES_METHOD.invoke(null, queue, clazz)[ FD ]
Line_8 $$ Class<?> clazz = null-->Line_11 $$ _QUEUE_SUPER_TYPES_METHOD.invoke(null, queue, clazz)[ FD ]
Line_5 $$ List<Class<?>> actualClassHierarchy = new ArrayList()-->Line_13 $$ Assert.assertEquals(expectedClassHierarchy, actualClassHierarchy)[ FD ]
Line_8 $$ Class<?> clazz = null-->Line_10 $$ actualClassHierarchy.add(clazz)[ FD ]
Line_9 $$ while ((clazz = queue.poll()) != null) -->Line_11 $$ _QUEUE_SUPER_TYPES_METHOD.invoke(null, queue, clazz)[ CD ]
