Line_7 $$ String urlString = url.toExternalForm()-->Line_8 $$ String newURLString = StringUtil.replace(urlString, "://", "://mirrors/")[ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_33 $$ _addURLMethod.invoke(urlClassLoader, uri.toURL())[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_19 $$ Path path = Paths.get(libPath, name)[ FD ]
Line_14 $$ if (_log.isDebugEnabled()) -->Line_15 $$ _log.debug("Unable to resolve \"mirrors\"")[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_20 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_23 $$ try (InputStream inputStream = url.openStream()) [ FD ]
Line_23 $$ try (InputStream inputStream = url.openStream()) -->Line_24 $$ Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_9 $$ url = new URL(newURLString)[ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_4 $$ if (PortalRunMode.isTestMode() && (protocol.equals(Http.HTTP) || protocol.equals(Http.HTTPS))) [ CD ]
Line_30 $$ if (_log.isInfoEnabled()) -->Line_31 $$ _log.info("Installing " + path + " to " + urlClassLoader)[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_19 $$ Path path = Paths.get(libPath, name)[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_26 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_30 $$ if (_log.isInfoEnabled()) [ CD ]
Line_19 $$ Path path = Paths.get(libPath, name)-->Line_24 $$ Files.copy(inputStream, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_3 $$ String protocol = url.getProtocol()[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_7 $$ String urlString = url.toExternalForm()[ FD ]
Line_9 $$ url = new URL(newURLString)-->Line_23 $$ try (InputStream inputStream = url.openStream()) [ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_33 $$ _addURLMethod.invoke(urlClassLoader, uri.toURL())[ FD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_34 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_29 $$ URI uri = path.toUri()[ CD ]
Line_3 $$ String protocol = url.getProtocol()-->Line_4 $$ if (PortalRunMode.isTestMode() && (protocol.equals(Http.HTTP) || protocol.equals(Http.HTTPS))) [ FD ]
Line_20 $$ if (_log.isInfoEnabled()) -->Line_21 $$ _log.info("Downloading " + url + " to " + path)[ CD ]
Line_2 $$ public static void downloadAndInstallJar(URL url, String libPath, String name, URLClassLoader urlClassLoader) throws Exception -->Line_3 $$ String protocol = url.getProtocol()[ FD ]
Line_26 $$ if (_log.isInfoEnabled()) -->Line_27 $$ _log.info("Downloaded " + url + " to " + path)[ CD ]
Line_10 $$ if (_log.isDebugEnabled()) -->Line_11 $$ _log.debug("Swapping URL from " + urlString + " to " + newURLString)[ CD ]
Line_19 $$ Path path = Paths.get(libPath, name)-->Line_29 $$ URI uri = path.toUri()[ FD ]
Line_34 $$ if (_log.isInfoEnabled()) -->Line_35 $$ _log.info("Installed " + path + " to " + urlClassLoader)[ CD ]
Line_29 $$ URI uri = path.toUri()-->Line_33 $$ _addURLMethod.invoke(urlClassLoader, uri.toURL())[ FD ]
