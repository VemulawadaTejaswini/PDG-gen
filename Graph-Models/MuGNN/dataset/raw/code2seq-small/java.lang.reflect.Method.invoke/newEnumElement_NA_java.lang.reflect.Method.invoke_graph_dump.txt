Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_8 $$ System.arraycopy(constructorParameterTypes, 0, parameterTypes, 2, constructorParameterTypes.length)[ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_29 $$ parameters[0] = name[ FD ]
Line_3 $$ Class<?>[] parameterTypes = null-->Line_5 $$ parameterTypes = new Class<?>[constructorParameterTypes.length + 2][ FD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_6 $$ parameterTypes[0] = String.class[ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) [ CD ]
Line_21 $$ Object[] parameters = null-->Line_23 $$ parameters = new Object[constructorParameters.length + 2][ FD ]
Line_16 $$ Method acquireConstructorAccessorMethod = ReflectionUtil.getDeclaredMethod(Constructor.class, "acquireConstructorAccessor")-->Line_17 $$ acquireConstructorAccessorMethod.invoke(constructor)[ FD ]
Line_10 $$ parameterTypes = new Class<?>[2]-->Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)[ FD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_12 $$ parameterTypes[1] = int.class[ CD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_10 $$ parameterTypes = new Class<?>[2][ CD ]
Line_19 $$ Object constructorAccessor = constructorAccessorField.get(constructor)-->Line_32 $$ return (T) newInstanceMethod.invoke(constructorAccessor, new Object[] [ FD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_7 $$ parameterTypes[1] = int.class[ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_25 $$ parameters[1] = ordinal[ FD ]
Line_18 $$ Field constructorAccessorField = ReflectionUtil.getDeclaredField(Constructor.class, "constructorAccessor")-->Line_19 $$ Object constructorAccessor = constructorAccessorField.get(constructor)[ FD ]
Line_3 $$ Class<?>[] parameterTypes = null-->Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)[ FD ]
Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)-->Line_17 $$ acquireConstructorAccessorMethod.invoke(constructor)[ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_29 $$ parameters[0] = name[ CD ]
Line_5 $$ parameterTypes = new Class<?>[constructorParameterTypes.length + 2]-->Line_8 $$ System.arraycopy(constructorParameterTypes, 0, parameterTypes, 2, constructorParameterTypes.length)[ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_30 $$ parameters[1] = ordinal[ CD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_11 $$ parameterTypes[0] = String.class[ CD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_26 $$ System.arraycopy(constructorParameters, 0, parameters, 2, constructorParameters.length)[ CD ]
Line_21 $$ Object[] parameters = null-->Line_28 $$ parameters = new Object[2][ FD ]
Line_5 $$ parameterTypes = new Class<?>[constructorParameterTypes.length + 2]-->Line_10 $$ parameterTypes = new Class<?>[2][ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_23 $$ parameters = new Object[constructorParameters.length + 2][ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_3 $$ Class<?>[] parameterTypes = null[ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)[ FD ]
Line_5 $$ parameterTypes = new Class<?>[constructorParameterTypes.length + 2]-->Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)[ FD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_24 $$ parameters[0] = name[ FD ]
Line_20 $$ Method newInstanceMethod = ReflectionUtil.getDeclaredMethod(constructorAccessor.getClass(), "newInstance", Object[].class)-->Line_32 $$ return (T) newInstanceMethod.invoke(constructorAccessor, new Object[] [ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_28 $$ parameters = new Object[2][ CD ]
Line_23 $$ parameters = new Object[constructorParameters.length + 2]-->Line_26 $$ System.arraycopy(constructorParameters, 0, parameters, 2, constructorParameters.length)[ FD ]
Line_3 $$ Class<?>[] parameterTypes = null-->Line_8 $$ System.arraycopy(constructorParameterTypes, 0, parameterTypes, 2, constructorParameterTypes.length)[ FD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_30 $$ parameters[1] = ordinal[ FD ]
Line_3 $$ Class<?>[] parameterTypes = null-->Line_10 $$ parameterTypes = new Class<?>[2][ FD ]
Line_21 $$ Object[] parameters = null-->Line_26 $$ System.arraycopy(constructorParameters, 0, parameters, 2, constructorParameters.length)[ FD ]
Line_15 $$ Constructor<T> constructor = enumClass.getDeclaredConstructor(parameterTypes)-->Line_19 $$ Object constructorAccessor = constructorAccessorField.get(constructor)[ FD ]
Line_19 $$ Object constructorAccessor = constructorAccessorField.get(constructor)-->Line_20 $$ Method newInstanceMethod = ReflectionUtil.getDeclaredMethod(constructorAccessor.getClass(), "newInstance", Object[].class)[ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_25 $$ parameters[1] = ordinal[ CD ]
Line_23 $$ parameters = new Object[constructorParameters.length + 2]-->Line_28 $$ parameters = new Object[2][ FD ]
Line_22 $$ if ((constructorParameters != null) && (constructorParameters.length != 0)) -->Line_24 $$ parameters[0] = name[ CD ]
Line_4 $$ if ((constructorParameterTypes != null) && (constructorParameterTypes.length != 0)) -->Line_5 $$ parameterTypes = new Class<?>[constructorParameterTypes.length + 2][ CD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_26 $$ System.arraycopy(constructorParameters, 0, parameters, 2, constructorParameters.length)[ FD ]
Line_2 $$ public static <T extends Enum<T>> T newEnumElement(Class<T> enumClass, Class<?>[] constructorParameterTypes, String name, int ordinal, Object... constructorParameters) -->Line_8 $$ System.arraycopy(constructorParameterTypes, 0, parameterTypes, 2, constructorParameterTypes.length)[ FD ]
