Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_24 $$ m.getName()[ FD ]
Line_6 $$ if (arg.startsWith("min="))-->Line_7 $$ minTreeSize = Integer.parseInt(arg.substring(4))[ CD ]
Line_10 $$ if (arg.startsWith("count="))-->Line_11 $$ perThreadTrees = Integer.parseInt(arg.substring(6))[ CD ]
Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_26 $$ log(m.getName())[ FD ]
Line_2 $$ public static void main(String[] args) throws ExecutionException, InterruptedException, InvocationTargetException, IllegalAccessException -->Line_15 $$ List<Method> methods = new ArrayList()[ CD ]
Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_27 $$ m.invoke(test)[ FD ]
Line_3 $$ for (String arg : args) -->Line_9 $$ maxTreeSize = Integer.parseInt(arg.substring(4))[ FD ]
Line_3 $$ for (String arg : args) -->Line_11 $$ perThreadTrees = Integer.parseInt(arg.substring(6))[ FD ]
Line_3 $$ for (String arg : args) -->Line_6 $$ if (arg.startsWith("min="))[ FD ]
Line_2 $$ public static void main(String[] args) throws ExecutionException, InterruptedException, InvocationTargetException, IllegalAccessException -->Line_22 $$ LongBTreeTest test = new LongBTreeTest()[ CD ]
Line_3 $$ for (String arg : args) -->Line_5 $$ System.setProperty("cassandra.btree.fanfactor", arg.substring(4))[ FD ]
Line_15 $$ List<Method> methods = new ArrayList()-->Line_20 $$ methods.add(m)[ FD ]
Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_20 $$ methods.add(m)[ FD ]
Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_19 $$ for (Annotation annotation : m.getAnnotations()) if (annotation.annotationType() == Test.class)[ FD ]
Line_2 $$ public static void main(String[] args) throws ExecutionException, InterruptedException, InvocationTargetException, IllegalAccessException -->Line_24 $$ log(Lists.transform(methods, ( m) -> m.getName()).toString())[ CD ]
Line_22 $$ LongBTreeTest test = new LongBTreeTest()-->Line_27 $$ m.invoke(test)[ FD ]
Line_4 $$ if (arg.startsWith("fan="))-->Line_5 $$ System.setProperty("cassandra.btree.fanfactor", arg.substring(4))[ CD ]
Line_2 $$ public static void main(String[] args) throws ExecutionException, InterruptedException, InvocationTargetException, IllegalAccessException -->Line_23 $$ Collections.sort(methods, ( a,  b) -> a.getName().compareTo(b.getName()))[ CD ]
Line_3 $$ for (String arg : args) -->Line_10 $$ if (arg.startsWith("count="))[ FD ]
Line_4 $$ if (arg.startsWith("fan="))-->Line_6 $$ if (arg.startsWith("min="))[ CD ]
Line_6 $$ if (arg.startsWith("min="))-->Line_8 $$ if (arg.startsWith("max="))[ CD ]
Line_2 $$ public static void main(String[] args) throws ExecutionException, InterruptedException, InvocationTargetException, IllegalAccessException -->Line_29 $$ log("success")[ CD ]
Line_10 $$ if (arg.startsWith("count="))-->Line_13 $$ exit()[ CD ]
Line_15 $$ List<Method> methods = new ArrayList()-->Line_23 $$ Collections.sort(methods, ( a,  b) -> a.getName().compareTo(b.getName()))[ FD ]
Line_8 $$ if (arg.startsWith("max="))-->Line_10 $$ if (arg.startsWith("count="))[ CD ]
Line_3 $$ for (String arg : args) -->Line_7 $$ minTreeSize = Integer.parseInt(arg.substring(4))[ FD ]
Line_3 $$ for (String arg : args) -->Line_4 $$ if (arg.startsWith("fan="))[ FD ]
Line_3 $$ for (String arg : args) -->Line_8 $$ if (arg.startsWith("max="))[ FD ]
Line_15 $$ List<Method> methods = new ArrayList()-->Line_24 $$ log(Lists.transform(methods, ( m) -> m.getName()).toString())[ FD ]
Line_19 $$ if (annotation.annotationType() == Test.class)-->Line_20 $$ methods.add(m)[ CD ]
Line_8 $$ if (arg.startsWith("max="))-->Line_9 $$ maxTreeSize = Integer.parseInt(arg.substring(4))[ CD ]
Line_16 $$ for (Method m : LongBTreeTest.class.getDeclaredMethods()) -->Line_17 $$ if (m.getParameters().length > 0)[ FD ]
