Line_15 $$ OptionMap combined = builder.getMap()-->Line_17 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ FD ]
Line_11 $$ if (cipherSuites != null) -->Line_13 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ CD ]
Line_8 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_9 $$ builder.addAll(socketOptions)[ FD ]
Line_8 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_10 $$ builder.set(Options.USE_DIRECT_BUFFERS, true)[ FD ]
Line_16 $$ XnioSsl xnioSsl = new UndertowXnioSsl(worker.getXnio(), combined, sslContext)-->Line_17 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ FD ]
Line_4 $$ SSLContext sslContext = securityRealm.getValue().getSSLContext()-->Line_12 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())[ FD ]
Line_8 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_15 $$ OptionMap combined = builder.getMap()[ FD ]
Line_4 $$ SSLContext sslContext = securityRealm.getValue().getSSLContext()-->Line_5 $$ if (sslContext == null) [ FD ]
Line_8 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_13 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ FD ]
Line_11 $$ if (cipherSuites != null) -->Line_12 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())[ CD ]
Line_12 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())-->Line_13 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ FD ]
