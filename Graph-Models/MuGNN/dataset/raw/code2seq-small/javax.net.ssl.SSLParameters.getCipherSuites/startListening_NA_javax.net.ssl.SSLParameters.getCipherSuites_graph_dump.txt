Line_7 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_8 $$ builder.addAll(socketOptions)[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_15 $$ XnioSsl xnioSsl = new UndertowXnioSsl(worker.getXnio(), combined, sslContext)[ FD ]
Line_15 $$ XnioSsl xnioSsl = new UndertowXnioSsl(worker.getXnio(), combined, sslContext)-->Line_16 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ FD ]
Line_14 $$ OptionMap combined = builder.getMap()-->Line_16 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ FD ]
Line_10 $$ if (cipherSuites != null) -->Line_11 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())[ CD ]
Line_7 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_14 $$ OptionMap combined = builder.getMap()[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_8 $$ builder.addAll(socketOptions)[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_16 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_17 $$ sslServer.resumeAccepts()[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_7 $$ Builder builder = OptionMap.builder().addAll(commonOptions)[ CD ]
Line_7 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_9 $$ builder.set(Options.USE_DIRECT_BUFFERS, true)[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_10 $$ if (cipherSuites != null) [ CD ]
Line_3 $$ SSLContext sslContext = securityRealm.getValue().getSSLContext()-->Line_11 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())[ FD ]
Line_7 $$ Builder builder = OptionMap.builder().addAll(commonOptions)-->Line_12 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ FD ]
Line_3 $$ SSLContext sslContext = securityRealm.getValue().getSSLContext()-->Line_4 $$ if (sslContext == null) [ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_14 $$ OptionMap combined = builder.getMap()[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_18 $$ UndertowLogger.ROOT_LOGGER.listenerStarted("HTTPS", getName(), NetworkUtils.formatIPAddressForURI(socketAddress.getAddress()), socketAddress.getPort())[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_18 $$ UndertowLogger.ROOT_LOGGER.listenerStarted("HTTPS", getName(), NetworkUtils.formatIPAddressForURI(socketAddress.getAddress()), socketAddress.getPort())[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_9 $$ builder.set(Options.USE_DIRECT_BUFFERS, true)[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_16 $$ sslServer = xnioSsl.createSslConnectionServer(worker, socketAddress, (ChannelListener) acceptListener, combined)[ CD ]
Line_11 $$ String[] cipherList = CipherSuiteSelector.fromString(cipherSuites).evaluate(sslContext.getSupportedSSLParameters().getCipherSuites())-->Line_12 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ FD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_3 $$ SSLContext sslContext = securityRealm.getValue().getSSLContext()[ CD ]
Line_10 $$ if (cipherSuites != null) -->Line_12 $$ builder.setSequence((Option<Sequence<String>>) HttpsListenerResourceDefinition.ENABLED_CIPHER_SUITES.getOption(), cipherList)[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_15 $$ XnioSsl xnioSsl = new UndertowXnioSsl(worker.getXnio(), combined, sslContext)[ CD ]
Line_2 $$ protected void startListening(XnioWorker worker, InetSocketAddress socketAddress, ChannelListener<AcceptingChannel<StreamConnection>> acceptListener) throws IOException -->Line_4 $$ if (sslContext == null) [ CD ]
