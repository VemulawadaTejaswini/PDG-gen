Line_12 $$ left = ((Symbol) stack.pop())-->Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)[ FD ]
Line_9 $$ while (!shift_under_error()) -->Line_10 $$ if (debug)[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_30 $$ return true[ CD ]
Line_3 $$ Symbol error_token-->Line_28 $$ stack.push(error_token)[ FD ]
Line_14 $$ if (stack.empty()) -->Line_15 $$ if (debug)[ CD ]
Line_21 $$ if (debug) -->Line_23 $$ debug_message("# Shifting on error to state #" + (act - 1))[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, error_sym())[ CD ]
Line_3 $$ Symbol error_token-->Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)[ FD ]
Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, error_sym())-->Line_26 $$ error_token.parse_state = act - 1[ FD ]
Line_5 $$ if (debug)-->Line_6 $$ debug_message("# Finding recovery state on stack")[ CD ]
Line_10 $$ if (debug)-->Line_11 $$ debug_message("# Pop stack by one, state was # " + ((Symbol) stack.peek()).parse_state)[ CD ]
Line_8 $$ Symbol left = right-->Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)[ FD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_9 $$ while (!shift_under_error()) [ CD ]
Line_21 $$ if (debug) -->Line_22 $$ debug_message("# Recover state found (#" + ((Symbol) stack.peek()).parse_state + ")")[ CD ]
Line_4 $$ int act-->Line_26 $$ error_token.parse_state = act - 1[ FD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_27 $$ error_token.used_by_parser = true[ CD ]
Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)-->Line_28 $$ stack.push(error_token)[ FD ]
Line_8 $$ Symbol left = right-->Line_12 $$ left = ((Symbol) stack.pop())[ FD ]
Line_7 $$ Symbol right = ((Symbol) stack.peek())-->Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)[ FD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_7 $$ Symbol right = ((Symbol) stack.peek())[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_21 $$ if (debug) [ CD ]
Line_4 $$ int act-->Line_20 $$ act = get_action(((Symbol) stack.peek()).parse_state, error_sym())[ FD ]
Line_14 $$ if (stack.empty()) -->Line_17 $$ return false[ CD ]
Line_15 $$ if (debug)-->Line_16 $$ debug_message("# No recovery state found on stack")[ CD ]
Line_9 $$ while (!shift_under_error()) -->Line_12 $$ left = ((Symbol) stack.pop())[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_25 $$ error_token = getSymbolFactory().newSymbol("ERROR", error_sym(), left, right)[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_8 $$ Symbol left = right[ CD ]
Line_9 $$ while (!shift_under_error()) -->Line_14 $$ if (stack.empty()) [ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_3 $$ Symbol error_token[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_5 $$ if (debug)[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_4 $$ int act[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_28 $$ stack.push(error_token)[ CD ]
Line_2 $$ protected boolean find_recovery_config(boolean debug) -->Line_26 $$ error_token.parse_state = act - 1[ CD ]
