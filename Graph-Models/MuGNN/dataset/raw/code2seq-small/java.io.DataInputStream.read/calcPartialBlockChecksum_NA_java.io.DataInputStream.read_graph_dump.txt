Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_3 $$ final int bytesPerCRC = checksum.getBytesPerChecksum()[ FD ]
Line_16 $$ if (partialLength > 0) -->Line_25 $$ byte[] partialCrc = new byte[csize][ CD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_13 $$ digester.update(buffer, 0, toDigest)[ CD ]
Line_16 $$ if (partialLength > 0) -->Line_18 $$ final InputStream blockIn = datanode.data.getBlockInputStream(block, requestLength - partialLength)[ CD ]
Line_16 $$ if (partialLength > 0) -->Line_27 $$ digester.update(partialCrc)[ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_18 $$ final InputStream blockIn = datanode.data.getBlockInputStream(block, requestLength - partialLength)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_16 $$ if (partialLength > 0) [ CD ]
Line_15 $$ int partialLength = (int) (requestLength % bytesPerCRC)-->Line_20 $$ IOUtils.readFully(blockIn, buf, 0, partialLength)[ FD ]
Line_25 $$ byte[] partialCrc = new byte[csize]-->Line_26 $$ checksum.writeValue(partialCrc, 0, true)[ FD ]
Line_18 $$ final InputStream blockIn = datanode.data.getBlockInputStream(block, requestLength - partialLength)-->Line_20 $$ IOUtils.readFully(blockIn, buf, 0, partialLength)[ FD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))[ FD ]
Line_18 $$ final InputStream blockIn = datanode.data.getBlockInputStream(block, requestLength - partialLength)-->Line_22 $$ IOUtils.closeStream(blockIn)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_6 $$ MessageDigest digester = MD5Hash.getDigester()[ CD ]
Line_16 $$ if (partialLength > 0) -->Line_26 $$ checksum.writeValue(partialCrc, 0, true)[ CD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))[ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_26 $$ checksum.writeValue(partialCrc, 0, true)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_3 $$ final int bytesPerCRC = checksum.getBytesPerChecksum()[ CD ]
Line_7 $$ long remaining = requestLength / bytesPerCRC * csize-->Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))[ FD ]
Line_6 $$ MessageDigest digester = MD5Hash.getDigester()-->Line_13 $$ digester.update(buffer, 0, toDigest)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_24 $$ checksum.update(buf, 0, partialLength)[ FD ]
Line_17 $$ byte[] buf = new byte[partialLength]-->Line_20 $$ IOUtils.readFully(blockIn, buf, 0, partialLength)[ FD ]
Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))-->Line_13 $$ digester.update(buffer, 0, toDigest)[ FD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_10 $$ if (toDigest < 0) [ FD ]
Line_7 $$ long remaining = requestLength / bytesPerCRC * csize-->Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) [ FD ]
Line_5 $$ final byte[] buffer = new byte[4 * 1024]-->Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))[ FD ]
Line_6 $$ MessageDigest digester = MD5Hash.getDigester()-->Line_27 $$ digester.update(partialCrc)[ FD ]
Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))-->Line_10 $$ if (toDigest < 0) [ FD ]
Line_5 $$ final byte[] buffer = new byte[4 * 1024]-->Line_13 $$ digester.update(buffer, 0, toDigest)[ FD ]
Line_9 $$ toDigest = checksumIn.read(buffer, 0, (int) Math.min(remaining, buffer.length))-->Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) [ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_7 $$ long remaining = requestLength / bytesPerCRC * csize[ CD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_10 $$ if (toDigest < 0) [ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_15 $$ int partialLength = (int) (requestLength % bytesPerCRC)[ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_5 $$ final byte[] buffer = new byte[4 * 1024][ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_4 $$ final int csize = checksum.getChecksumSize()[ FD ]
Line_17 $$ byte[] buf = new byte[partialLength]-->Line_24 $$ checksum.update(buf, 0, partialLength)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) [ CD ]
Line_8 $$ for (int toDigest = 0; remaining > 0; remaining -= toDigest) -->Line_13 $$ digester.update(buffer, 0, toDigest)[ FD ]
Line_15 $$ int partialLength = (int) (requestLength % bytesPerCRC)-->Line_16 $$ if (partialLength > 0) [ FD ]
Line_6 $$ MessageDigest digester = MD5Hash.getDigester()-->Line_29 $$ return new MD5Hash(digester.digest())[ FD ]
Line_25 $$ byte[] partialCrc = new byte[csize]-->Line_27 $$ digester.update(partialCrc)[ FD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_29 $$ return new MD5Hash(digester.digest())[ CD ]
Line_16 $$ if (partialLength > 0) -->Line_24 $$ checksum.update(buf, 0, partialLength)[ CD ]
Line_2 $$ private MD5Hash calcPartialBlockChecksum(ExtendedBlock block, long requestLength, DataChecksum checksum, DataInputStream checksumIn) throws IOException -->Line_4 $$ final int csize = checksum.getChecksumSize()[ CD ]
Line_15 $$ int partialLength = (int) (requestLength % bytesPerCRC)-->Line_24 $$ checksum.update(buf, 0, partialLength)[ FD ]
Line_16 $$ if (partialLength > 0) -->Line_17 $$ byte[] buf = new byte[partialLength][ CD ]
