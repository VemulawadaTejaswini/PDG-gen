Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_20 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_28 $$ userTransactionManagementTask.run()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_4 $$ final short invocationId = input.readShort()[ CD ]
Line_14 $$ final UserTransactionManagementTask userTransactionManagementTask-->Line_17 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)[ FD ]
Line_14 $$ final UserTransactionManagementTask userTransactionManagementTask-->Line_26 $$ this.executorService.submit(userTransactionManagementTask)[ FD ]
Line_30 $$ if (transactionID instanceof XidTransactionID) -->Line_31 $$ final XidTransactionID xidTransactionID = (XidTransactionID) transactionID[ CD ]
Line_6 $$ final byte[] transactionIDBytes = new byte[transactionIDBytesLength]-->Line_7 $$ input.read(transactionIDBytes)[ FD ]
Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_17 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_28 $$ userTransactionManagementTask.run()[ FD ]
Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_13 $$ if (transactionID instanceof UserTransactionID) -->Line_30 $$ if (transactionID instanceof XidTransactionID) [ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_8 $$ final TransactionID transactionID = TransactionID.createTransactionID(transactionIDBytes)[ CD ]
Line_8 $$ final TransactionID transactionID = TransactionID.createTransactionID(transactionIDBytes)-->Line_13 $$ if (transactionID instanceof UserTransactionID) [ FD ]
Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_17 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_20 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_9 $$ boolean onePhaseCommit = false[ CD ]
Line_8 $$ final TransactionID transactionID = TransactionID.createTransactionID(transactionIDBytes)-->Line_30 $$ if (transactionID instanceof XidTransactionID) [ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_5 $$ final int transactionIDBytesLength = PackedInteger.readPackedInteger(input)[ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_10 $$ if (this.txRequestType == TransactionRequestType.COMMIT) [ CD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_7 $$ input.read(transactionIDBytes)[ FD ]
Line_14 $$ final UserTransactionManagementTask userTransactionManagementTask-->Line_20 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)[ FD ]
Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_6 $$ final byte[] transactionIDBytes = new byte[transactionIDBytesLength][ CD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_5 $$ final int transactionIDBytesLength = PackedInteger.readPackedInteger(input)[ FD ]
Line_13 $$ if (transactionID instanceof UserTransactionID) -->Line_25 $$ if (this.executorService != null) [ CD ]
Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_20 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_26 $$ this.executorService.submit(userTransactionManagementTask)[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_25 $$ if (this.executorService != null) -->Line_26 $$ this.executorService.submit(userTransactionManagementTask)[ CD ]
Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_17 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_26 $$ this.executorService.submit(userTransactionManagementTask)[ FD ]
Line_30 $$ if (transactionID instanceof XidTransactionID) -->Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask[ CD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_4 $$ final short invocationId = input.readShort()[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_13 $$ if (transactionID instanceof UserTransactionID) [ CD ]
Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_7 $$ input.read(transactionIDBytes)[ CD ]
Line_6 $$ final byte[] transactionIDBytes = new byte[transactionIDBytesLength]-->Line_8 $$ final TransactionID transactionID = TransactionID.createTransactionID(transactionIDBytes)[ FD ]
Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_35 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)[ FD ]
Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_11 $$ onePhaseCommit = input.readBoolean()[ FD ]
Line_14 $$ final UserTransactionManagementTask userTransactionManagementTask-->Line_28 $$ userTransactionManagementTask.run()[ FD ]
Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_52 $$ if (this.executorService != null) -->Line_55 $$ xidTransactionManagementTask.run()[ CD ]
Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_41 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_9 $$ boolean onePhaseCommit = false-->Line_11 $$ onePhaseCommit = input.readBoolean()[ FD ]
Line_30 $$ if (transactionID instanceof XidTransactionID) -->Line_52 $$ if (this.executorService != null) [ CD ]
Line_13 $$ if (transactionID instanceof UserTransactionID) -->Line_14 $$ final UserTransactionManagementTask userTransactionManagementTask[ CD ]
Line_2 $$ public void processMessage(final ChannelAssociation channelAssociation, final InputStream inputStream) throws IOException -->Line_3 $$ final DataInputStream input = new DataInputStream(inputStream)[ CD ]
Line_25 $$ if (this.executorService != null) -->Line_28 $$ userTransactionManagementTask.run()[ CD ]
Line_52 $$ if (this.executorService != null) -->Line_53 $$ this.executorService.submit(xidTransactionManagementTask)[ CD ]
Line_44 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_55 $$ xidTransactionManagementTask.run()[ FD ]
Line_10 $$ if (this.txRequestType == TransactionRequestType.COMMIT) -->Line_11 $$ onePhaseCommit = input.readBoolean()[ CD ]
Line_38 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_32 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_47 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
