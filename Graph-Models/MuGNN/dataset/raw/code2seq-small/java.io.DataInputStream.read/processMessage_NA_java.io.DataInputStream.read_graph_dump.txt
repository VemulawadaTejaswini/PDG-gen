Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_39 $$ if (transactionID instanceof XidTransactionID) -->Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask[ CD ]
Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_4 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_17 $$ onePhaseCommit = input.readBoolean()[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_25 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_37 $$ userTransactionManagementTask.run()[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_16 $$ if (this.txRequestType == TransactionRequestType.COMMIT) -->Line_17 $$ onePhaseCommit = input.readBoolean()[ CD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
Line_12 $$ final TransactionID transactionID = TransactionID.createTransactionID(transactionIDBytes)-->Line_39 $$ if (transactionID instanceof XidTransactionID) [ FD ]
Line_25 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_28 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)[ FD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_4 $$ final DataInputStream input = new DataInputStream(inputStream)-->Line_11 $$ input.read(transactionIDBytes)[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)[ FD ]
Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_25 $$ userTransactionManagementTask = new UserTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_35 $$ this.executorService.submit(userTransactionManagementTask)[ FD ]
Line_28 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_35 $$ this.executorService.submit(userTransactionManagementTask)[ FD ]
Line_54 $$ xidTransactionManagementTask = new XidTransactionForgetTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
Line_28 $$ userTransactionManagementTask = new UserTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, (UserTransactionID) transactionID, channelAssociation, invocationId)-->Line_37 $$ userTransactionManagementTask.run()[ FD ]
Line_45 $$ xidTransactionManagementTask = new XidTransactionCommitTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId, onePhaseCommit)-->Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_48 $$ xidTransactionManagementTask = new XidTransactionPrepareTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_64 $$ this.executorService.submit(xidTransactionManagementTask)[ FD ]
Line_42 $$ final XidTransactionManagementTask xidTransactionManagementTask-->Line_51 $$ xidTransactionManagementTask = new XidTransactionRollbackTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)[ FD ]
Line_57 $$ xidTransactionManagementTask = new XidTransactionBeforeCompletionTask(this, this.transactionsRepository, this.marshallerFactory, xidTransactionID, channelAssociation, invocationId)-->Line_66 $$ xidTransactionManagementTask.run()[ FD ]
