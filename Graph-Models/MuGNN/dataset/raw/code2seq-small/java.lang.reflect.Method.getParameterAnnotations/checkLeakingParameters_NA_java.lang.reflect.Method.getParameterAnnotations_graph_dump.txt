Line_7 $$ final MethodNode node = new MethodNode(Opcodes.ASM5, access, name, desc, signature, exceptions)-->Line_13 $$ map.put(method, LeakingParameters.build(classReader.getClassName(), node, false).parameters)[ FD ]
Line_3 $$ final HashMap<Method, boolean[]> map = new HashMap<Method, boolean[]>()-->Line_31 $$ assertEquals(method.toString() + " #" + i, isLeaking, map.get(method)[i])[ FD ]
Line_27 $$ if (parameterAnnotation.annotationType() == ExpectLeaking.class) -->Line_28 $$ isLeaking = true[ CD ]
Line_28 $$ isLeaking = true-->Line_31 $$ assertEquals(method.toString() + " #" + i, isLeaking, map.get(method)[i])[ FD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_5 $$ classReader.accept(new ClassVisitor(Opcodes.ASM5) [ CD ]
Line_26 $$ for (Annotation parameterAnnotation : parameterAnnotations) -->Line_27 $$ if (parameterAnnotation.annotationType() == ExpectLeaking.class) [ FD ]
Line_9 $$ return new MethodVisitor(Opcodes.ASM5, node) -->Line_11 $$ super.visitEnd()[ CD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_4 $$ final ClassReader classReader = new ClassReader(jClass.getResourceAsStream("/" + jClass.getName().replace('.', '/') + ".class"))[ CD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_20 $$ for (java.lang.reflect.Method jMethod : jClass.getDeclaredMethods()) [ FD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_3 $$ final HashMap<Method, boolean[]> map = new HashMap<Method, boolean[]>()[ CD ]
Line_4 $$ final ClassReader classReader = new ClassReader(jClass.getResourceAsStream("/" + jClass.getName().replace('.', '/') + ".class"))-->Line_13 $$ map.put(method, LeakingParameters.build(classReader.getClassName(), node, false).parameters)[ FD ]
Line_5 $$ classReader.accept(new ClassVisitor(Opcodes.ASM5) -->Line_9 $$ return new MethodVisitor(Opcodes.ASM5, node) [ CD ]
Line_8 $$ final Method method = new Method(classReader.getClassName(), name, desc)-->Line_31 $$ assertEquals(method.toString() + " #" + i, isLeaking, map.get(method)[i])[ FD ]
Line_24 $$ boolean isLeaking = false-->Line_28 $$ isLeaking = true[ FD ]
Line_4 $$ final ClassReader classReader = new ClassReader(jClass.getResourceAsStream("/" + jClass.getName().replace('.', '/') + ".class"))-->Line_8 $$ final Method method = new Method(classReader.getClassName(), name, desc)[ FD ]
Line_5 $$ classReader.accept(new ClassVisitor(Opcodes.ASM5) -->Line_7 $$ final MethodNode node = new MethodNode(Opcodes.ASM5, access, name, desc, signature, exceptions)[ CD ]
Line_24 $$ boolean isLeaking = false-->Line_31 $$ assertEquals(method.toString() + " #" + i, isLeaking, map.get(method)[i])[ FD ]
Line_23 $$ for (int i = 0; i < annotations.length; i++) -->Line_25 $$ Annotation[] parameterAnnotations = annotations[i][ CD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_4 $$ final ClassReader classReader = new ClassReader(jClass.getResourceAsStream("/" + jClass.getName().replace('.', '/') + ".class"))[ FD ]
Line_8 $$ final Method method = new Method(classReader.getClassName(), name, desc)-->Line_13 $$ map.put(method, LeakingParameters.build(classReader.getClassName(), node, false).parameters)[ FD ]
Line_5 $$ classReader.accept(new ClassVisitor(Opcodes.ASM5) -->Line_8 $$ final Method method = new Method(classReader.getClassName(), name, desc)[ CD ]
Line_23 $$ for (int i = 0; i < annotations.length; i++) -->Line_24 $$ boolean isLeaking = false[ CD ]
Line_4 $$ final ClassReader classReader = new ClassReader(jClass.getResourceAsStream("/" + jClass.getName().replace('.', '/') + ".class"))-->Line_5 $$ classReader.accept(new ClassVisitor(Opcodes.ASM5) [ FD ]
Line_3 $$ final HashMap<Method, boolean[]> map = new HashMap<Method, boolean[]>()-->Line_13 $$ map.put(method, LeakingParameters.build(classReader.getClassName(), node, false).parameters)[ FD ]
Line_2 $$ private static void checkLeakingParameters(Class<?> jClass) throws IOException -->Line_21 $$ Method method = new Method(Type.getType(jClass).getInternalName(), jMethod.getName(), Type.getMethodDescriptor(jMethod))[ FD ]
Line_23 $$ for (int i = 0; i < annotations.length; i++) -->Line_31 $$ assertEquals(method.toString() + " #" + i, isLeaking, map.get(method)[i])[ CD ]
