Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_30 $$ String actualContractValue = AnnotationUtil.getStringAttributeValue(actualContract, null)[ CD ]
Line_24 $$ PsiAnnotation actualContract = myBytecodeAnalysisService.findInferredAnnotation(psiMethod, ORG_JETBRAINS_ANNOTATIONS_CONTRACT)-->Line_30 $$ String actualContractValue = AnnotationUtil.getStringAttributeValue(actualContract, null)[ FD ]
Line_23 $$ ExpectContract expectedContract = javaMethod.getAnnotation(ExpectContract.class)-->Line_25 $$ String expectedText = expectedContract == null ? "null" : expectedContract.toString()[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_20 $$ ExpectNotNull expectedAnnotation = javaMethod.getAnnotation(ExpectNotNull.class)[ FD ]
Line_2 $$ private void checkAnnotations(Class<?> javaClass) -->Line_3 $$ PsiClass psiClass = myJavaPsiFacade.findClass(javaClass.getName(), GlobalSearchScope.moduleWithLibrariesScope(myModule))[ CD ]
Line_13 $$ if (parameterAnnotation.annotationType() == ExpectNotNull.class) -->Line_14 $$ assertNotNull(javaMethod.toString() + " " + i, inferredAnnotation)[ CD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_14 $$ assertNotNull(javaMethod.toString() + " " + i, inferredAnnotation)[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_34 $$ assertEquals(javaMethod.toString(), expectedPureValue, actualPureValue)[ FD ]
Line_24 $$ PsiAnnotation actualContract = myBytecodeAnalysisService.findInferredAnnotation(psiMethod, ORG_JETBRAINS_ANNOTATIONS_CONTRACT)-->Line_33 $$ boolean actualPureValue = getPureAttribute(actualContract)[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_27 $$ assertEquals(javaMethod.toString() + ":" + expectedText + " <> " + inferredText, expectedContract == null, actualContract == null)[ FD ]
Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_29 $$ String expectedContractValue = expectedContract.value()[ CD ]
Line_8 $$ for (int i = 0; i < annotations.length; i++) -->Line_11 $$ PsiAnnotation inferredAnnotation = myBytecodeAnalysisService.findInferredAnnotation(psiParameter, AnnotationUtil.NOT_NULL)[ CD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_23 $$ ExpectContract expectedContract = javaMethod.getAnnotation(ExpectContract.class)[ FD ]
Line_6 $$ PsiMethod psiMethod = psiClass.findMethodsByName(javaMethod.getName(), false)[0]-->Line_24 $$ PsiAnnotation actualContract = myBytecodeAnalysisService.findInferredAnnotation(psiMethod, ORG_JETBRAINS_ANNOTATIONS_CONTRACT)[ FD ]
Line_24 $$ PsiAnnotation actualContract = myBytecodeAnalysisService.findInferredAnnotation(psiMethod, ORG_JETBRAINS_ANNOTATIONS_CONTRACT)-->Line_26 $$ String inferredText = actualContract == null ? "null" : actualContract.getText()[ FD ]
Line_3 $$ PsiClass psiClass = myJavaPsiFacade.findClass(javaClass.getName(), GlobalSearchScope.moduleWithLibrariesScope(myModule))-->Line_4 $$ assertNotNull(psiClass)[ FD ]
Line_8 $$ for (int i = 0; i < annotations.length; i++) -->Line_9 $$ Annotation[] parameterAnnotations = annotations[i][ CD ]
Line_2 $$ private void checkAnnotations(Class<?> javaClass) -->Line_3 $$ PsiClass psiClass = myJavaPsiFacade.findClass(javaClass.getName(), GlobalSearchScope.moduleWithLibrariesScope(myModule))[ FD ]
Line_30 $$ String actualContractValue = AnnotationUtil.getStringAttributeValue(actualContract, null)-->Line_31 $$ assertEquals(javaMethod.toString(), expectedContractValue, actualContractValue)[ FD ]
Line_11 $$ PsiAnnotation inferredAnnotation = myBytecodeAnalysisService.findInferredAnnotation(psiParameter, AnnotationUtil.NOT_NULL)-->Line_14 $$ assertNotNull(javaMethod.toString() + " " + i, inferredAnnotation)[ FD ]
Line_29 $$ String expectedContractValue = expectedContract.value()-->Line_31 $$ assertEquals(javaMethod.toString(), expectedContractValue, actualContractValue)[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_6 $$ PsiMethod psiMethod = psiClass.findMethodsByName(javaMethod.getName(), false)[0][ FD ]
Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_32 $$ boolean expectedPureValue = expectedContract.pure()[ CD ]
Line_33 $$ boolean actualPureValue = getPureAttribute(actualContract)-->Line_34 $$ assertEquals(javaMethod.toString(), expectedPureValue, actualPureValue)[ FD ]
Line_6 $$ PsiMethod psiMethod = psiClass.findMethodsByName(javaMethod.getName(), false)[0]-->Line_21 $$ PsiAnnotation actualAnnotation = myBytecodeAnalysisService.findInferredAnnotation(psiMethod, AnnotationUtil.NOT_NULL)[ FD ]
Line_10 $$ PsiParameter psiParameter = psiMethod.getParameterList().getParameters()[i]-->Line_11 $$ PsiAnnotation inferredAnnotation = myBytecodeAnalysisService.findInferredAnnotation(psiParameter, AnnotationUtil.NOT_NULL)[ FD ]
Line_12 $$ for (Annotation parameterAnnotation : parameterAnnotations) -->Line_13 $$ if (parameterAnnotation.annotationType() == ExpectNotNull.class) [ FD ]
Line_2 $$ private void checkAnnotations(Class<?> javaClass) -->Line_4 $$ assertNotNull(psiClass)[ CD ]
Line_8 $$ for (int i = 0; i < annotations.length; i++) -->Line_10 $$ PsiParameter psiParameter = psiMethod.getParameterList().getParameters()[i][ CD ]
Line_23 $$ ExpectContract expectedContract = javaMethod.getAnnotation(ExpectContract.class)-->Line_32 $$ boolean expectedPureValue = expectedContract.pure()[ FD ]
Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_33 $$ boolean actualPureValue = getPureAttribute(actualContract)[ CD ]
Line_23 $$ ExpectContract expectedContract = javaMethod.getAnnotation(ExpectContract.class)-->Line_29 $$ String expectedContractValue = expectedContract.value()[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_22 $$ assertEquals(javaMethod.toString(), expectedAnnotation == null, actualAnnotation == null)[ FD ]
Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_31 $$ assertEquals(javaMethod.toString(), expectedContractValue, actualContractValue)[ CD ]
Line_2 $$ private void checkAnnotations(Class<?> javaClass) -->Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) [ FD ]
Line_6 $$ PsiMethod psiMethod = psiClass.findMethodsByName(javaMethod.getName(), false)[0]-->Line_10 $$ PsiParameter psiParameter = psiMethod.getParameterList().getParameters()[i][ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_31 $$ assertEquals(javaMethod.toString(), expectedContractValue, actualContractValue)[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_18 $$ assertNull(javaMethod.toString() + " " + i, inferredAnnotation)[ FD ]
Line_3 $$ PsiClass psiClass = myJavaPsiFacade.findClass(javaClass.getName(), GlobalSearchScope.moduleWithLibrariesScope(myModule))-->Line_6 $$ PsiMethod psiMethod = psiClass.findMethodsByName(javaMethod.getName(), false)[0][ FD ]
Line_11 $$ PsiAnnotation inferredAnnotation = myBytecodeAnalysisService.findInferredAnnotation(psiParameter, AnnotationUtil.NOT_NULL)-->Line_18 $$ assertNull(javaMethod.toString() + " " + i, inferredAnnotation)[ FD ]
Line_5 $$ for (java.lang.reflect.Method javaMethod : javaClass.getDeclaredMethods()) -->Line_7 $$ Annotation[][] annotations = javaMethod.getParameterAnnotations()[ FD ]
Line_8 $$ for (int i = 0; i < annotations.length; i++) -->Line_18 $$ assertNull(javaMethod.toString() + " " + i, inferredAnnotation)[ CD ]
Line_32 $$ boolean expectedPureValue = expectedContract.pure()-->Line_34 $$ assertEquals(javaMethod.toString(), expectedPureValue, actualPureValue)[ FD ]
Line_28 $$ if (expectedContract != null && actualContract != null) -->Line_34 $$ assertEquals(javaMethod.toString(), expectedPureValue, actualPureValue)[ CD ]
