Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_8 $$ Annotation[][] parameterAnnotations = method.getParameterAnnotations()[ CD ]
Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) -->Line_11 $$ dependencies.add(Dependency.get(key))[ CD ]
Line_4 $$ Errors errors = new Errors(method)-->Line_15 $$ Key<T> key = getKey(errors, returnType, method, method.getAnnotations())[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_7 $$ List<TypeLiteral<?>> parameterTypes = typeLiteral.getParameterTypes(method)[ CD ]
Line_4 $$ Errors errors = new Errors(method)-->Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])[ FD ]
Line_14 $$ TypeLiteral<T> returnType = (TypeLiteral<T>) typeLiteral.getReturnType(method)-->Line_15 $$ Key<T> key = getKey(errors, returnType, method, method.getAnnotations())[ FD ]
Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) -->Line_12 $$ parameterProviders.add(binder.getProvider(key))[ CD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_15 $$ Key<T> key = getKey(errors, returnType, method, method.getAnnotations())[ CD ]
Line_3 $$ binder = binder.withSource(method)-->Line_12 $$ parameterProviders.add(binder.getProvider(key))[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_5 $$ Set<Dependency<?>> dependencies = new HashSet()[ CD ]
Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) -->Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])[ FD ]
Line_7 $$ List<TypeLiteral<?>> parameterTypes = typeLiteral.getParameterTypes(method)-->Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])[ FD ]
Line_3 $$ binder = binder.withSource(method)-->Line_18 $$ binder.addError(message)[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_14 $$ TypeLiteral<T> returnType = (TypeLiteral<T>) typeLiteral.getReturnType(method)[ FD ]
Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) -->Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])[ CD ]
Line_7 $$ List<TypeLiteral<?>> parameterTypes = typeLiteral.getParameterTypes(method)-->Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) [ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_4 $$ Errors errors = new Errors(method)[ CD ]
Line_4 $$ Errors errors = new Errors(method)-->Line_16 $$ Class<? extends Annotation> scopeAnnotation = Annotations.findScopeAnnotation(errors, method.getAnnotations())[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_6 $$ List<Provider<?>> parameterProviders = new ArrayList()[ CD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_3 $$ binder = binder.withSource(method)[ CD ]
Line_4 $$ Errors errors = new Errors(method)-->Line_17 $$ for (Message message : errors.getMessages()) [ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_18 $$ binder.addError(message)[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_3 $$ binder = binder.withSource(method)[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_12 $$ parameterProviders.add(binder.getProvider(key))[ FD ]
Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])-->Line_12 $$ parameterProviders.add(binder.getProvider(key))[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_14 $$ TypeLiteral<T> returnType = (TypeLiteral<T>) typeLiteral.getReturnType(method)[ CD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])[ FD ]
Line_17 $$ for (Message message : errors.getMessages()) -->Line_18 $$ binder.addError(message)[ FD ]
Line_10 $$ Key<?> key = getKey(errors, parameterTypes.get(i), method, parameterAnnotations[i])-->Line_11 $$ dependencies.add(Dependency.get(key))[ FD ]
Line_5 $$ Set<Dependency<?>> dependencies = new HashSet()-->Line_20 $$ return new ProviderMethod(key, method, delegate, unmodifiableSet(dependencies), parameterProviders, scopeAnnotation)[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_9 $$ for (int i = 0; i < parameterTypes.size(); i++) [ CD ]
Line_5 $$ Set<Dependency<?>> dependencies = new HashSet()-->Line_11 $$ dependencies.add(Dependency.get(key))[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_15 $$ Key<T> key = getKey(errors, returnType, method, method.getAnnotations())[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_16 $$ Class<? extends Annotation> scopeAnnotation = Annotations.findScopeAnnotation(errors, method.getAnnotations())[ FD ]
Line_6 $$ List<Provider<?>> parameterProviders = new ArrayList()-->Line_12 $$ parameterProviders.add(binder.getProvider(key))[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_20 $$ return new ProviderMethod(key, method, delegate, unmodifiableSet(dependencies), parameterProviders, scopeAnnotation)[ CD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_7 $$ List<TypeLiteral<?>> parameterTypes = typeLiteral.getParameterTypes(method)[ FD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_16 $$ Class<? extends Annotation> scopeAnnotation = Annotations.findScopeAnnotation(errors, method.getAnnotations())[ CD ]
Line_2 $$ <T> ProviderMethod<T> createProviderMethod(Binder binder, final Method method) -->Line_8 $$ Annotation[][] parameterAnnotations = method.getParameterAnnotations()[ FD ]
