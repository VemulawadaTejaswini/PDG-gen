Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() -->Line_36 $$ if (renderer == r && r != null) [ CD ]
Line_10 $$ ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e)-->Line_11 $$ if (lineRenderer == null) [ FD ]
Line_8 $$ toolTip = renderer.getTooltipText()-->Line_16 $$ if (!Comparing.equal(toolTip, myLastGutterToolTip)) [ FD ]
Line_11 $$ if (lineRenderer == null) -->Line_12 $$ TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint())[ CD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_24 $$ final Ref<Point> t = new Ref<Point>(e.getPoint())[ CD ]
Line_14 $$ final int line = getLineNumAtPoint(e.getPoint())-->Line_15 $$ toolTip = provider.getToolTip(line, myEditor)[ FD ]
Line_26 $$ List<GutterMark> row = myLineToGutterRenderers.get(line)-->Line_28 $$ if (row != null) [ FD ]
Line_28 $$ if (row != null) -->Line_30 $$ final int[] currentPos = [ CD ]
Line_5 $$ final GutterIconRenderer renderer = getGutterRenderer(e)-->Line_7 $$ if (renderer != null) [ FD ]
Line_8 $$ toolTip = renderer.getTooltipText()-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() -->Line_37 $$ currentPos[0] = x[ FD ]
Line_27 $$ Balloon.Position ballPosition = Balloon.Position.atRight-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_27 $$ Balloon.Position ballPosition = Balloon.Position.atRight[ CD ]
Line_36 $$ if (renderer == r && r != null) -->Line_37 $$ currentPos[0] = x[ CD ]
Line_13 $$ if (provider != null) -->Line_16 $$ if (!Comparing.equal(toolTip, myLastGutterToolTip)) [ CD ]
Line_12 $$ TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint())-->Line_13 $$ if (provider != null) [ FD ]
Line_4 $$ String toolTip = null-->Line_8 $$ toolTip = renderer.getTooltipText()[ FD ]
Line_28 $$ if (row != null) -->Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() [ CD ]
Line_24 $$ final Ref<Point> t = new Ref<Point>(e.getPoint())-->Line_39 $$ t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2))[ FD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_52 $$ controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false)[ CD ]
Line_6 $$ TooltipController controller = TooltipController.getInstance()-->Line_17 $$ controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, true)[ FD ]
Line_5 $$ final GutterIconRenderer renderer = getGutterRenderer(e)-->Line_8 $$ toolTip = renderer.getTooltipText()[ FD ]
Line_36 $$ if (renderer == r && r != null) -->Line_38 $$ Icon icon = scaleIcon(r.getIcon())[ CD ]
Line_14 $$ final int line = getLineNumAtPoint(e.getPoint())-->Line_26 $$ List<GutterMark> row = myLineToGutterRenderers.get(line)[ FD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ CD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_25 $$ int line = EditorUtil.yPositionToLogicalLine(myEditor, e)[ CD ]
Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() -->Line_38 $$ Icon icon = scaleIcon(r.getIcon())[ FD ]
Line_6 $$ TooltipController controller = TooltipController.getInstance()-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_7 $$ if (renderer != null) -->Line_10 $$ ActiveGutterRenderer lineRenderer = getActiveRendererByMouseEvent(e)[ CD ]
Line_13 $$ if (provider != null) -->Line_14 $$ final int line = getLineNumAtPoint(e.getPoint())[ CD ]
Line_29 $$ final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>()-->Line_45 $$ if (xPos.size() > 1 && posIndex == 0) [ FD ]
Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() -->Line_35 $$ xPos.put(x, r)[ FD ]
Line_12 $$ TextAnnotationGutterProvider provider = getProviderAtPoint(e.getPoint())-->Line_15 $$ toolTip = provider.getToolTip(line, myEditor)[ FD ]
Line_6 $$ TooltipController controller = TooltipController.getInstance()-->Line_52 $$ controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, false)[ FD ]
Line_8 $$ toolTip = renderer.getTooltipText()-->Line_15 $$ toolTip = provider.getToolTip(line, myEditor)[ FD ]
Line_4 $$ String toolTip = null-->Line_16 $$ if (!Comparing.equal(toolTip, myLastGutterToolTip)) [ FD ]
Line_26 $$ List<GutterMark> row = myLineToGutterRenderers.get(line)-->Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() [ FD ]
Line_15 $$ toolTip = provider.getToolTip(line, myEditor)-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_24 $$ final Ref<Point> t = new Ref<Point>(e.getPoint())-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_14 $$ final int line = getLineNumAtPoint(e.getPoint())-->Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() [ FD ]
Line_15 $$ toolTip = provider.getToolTip(line, myEditor)-->Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) [ FD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_26 $$ List<GutterMark> row = myLineToGutterRenderers.get(line)[ CD ]
Line_36 $$ if (renderer == r && r != null) -->Line_39 $$ t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2))[ CD ]
Line_28 $$ if (row != null) -->Line_29 $$ final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>()[ CD ]
Line_31 $$ processIconsRow(line, row, new LineGutterIconRendererProcessor() -->Line_35 $$ xPos.put(x, r)[ CD ]
Line_4 $$ String toolTip = null-->Line_50 $$ controller.showTooltipByMouseMove(myEditor, showPoint, ((EditorMarkupModel) myEditor.getMarkupModel()).getErrorStripTooltipRendererProvider().calcTooltipRenderer(toolTip), false, GUTTER_TOOLTIP_GROUP, new HintHint(this, t.get()).setAwtTooltip(true).setPreferredPosition(ballPosition))[ FD ]
Line_11 $$ if (lineRenderer == null) -->Line_13 $$ if (provider != null) [ CD ]
Line_7 $$ if (renderer != null) -->Line_8 $$ toolTip = renderer.getTooltipText()[ CD ]
Line_4 $$ String toolTip = null-->Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) [ FD ]
Line_28 $$ if (row != null) -->Line_44 $$ int posIndex = xx.indexOf(currentPos[0])[ CD ]
Line_24 $$ final Ref<Point> t = new Ref<Point>(e.getPoint())-->Line_49 $$ RelativePoint showPoint = new RelativePoint(this, t.get())[ FD ]
Line_38 $$ Icon icon = scaleIcon(r.getIcon())-->Line_39 $$ t.set(new Point(x + icon.getIconWidth() / 2, y + icon.getIconHeight() / 2))[ FD ]
Line_29 $$ final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>()-->Line_35 $$ xPos.put(x, r)[ FD ]
Line_8 $$ toolTip = renderer.getTooltipText()-->Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) [ FD ]
Line_23 $$ if (toolTip != null && !toolTip.isEmpty()) -->Line_28 $$ if (row != null) [ CD ]
Line_4 $$ String toolTip = null-->Line_15 $$ toolTip = provider.getToolTip(line, myEditor)[ FD ]
Line_15 $$ toolTip = provider.getToolTip(line, myEditor)-->Line_16 $$ if (!Comparing.equal(toolTip, myLastGutterToolTip)) [ FD ]
Line_16 $$ if (!Comparing.equal(toolTip, myLastGutterToolTip)) -->Line_17 $$ controller.cancelTooltip(GUTTER_TOOLTIP_GROUP, e, true)[ CD ]
Line_29 $$ final TreeMap<Integer, GutterMark> xPos = new TreeMap<Integer, GutterMark>()-->Line_43 $$ List<Integer> xx = new ArrayList<Integer>(xPos.keySet())[ FD ]
Line_7 $$ if (renderer != null) -->Line_11 $$ if (lineRenderer == null) [ CD ]
Line_28 $$ if (row != null) -->Line_45 $$ if (xPos.size() > 1 && posIndex == 0) [ CD ]
Line_13 $$ if (provider != null) -->Line_15 $$ toolTip = provider.getToolTip(line, myEditor)[ CD ]
