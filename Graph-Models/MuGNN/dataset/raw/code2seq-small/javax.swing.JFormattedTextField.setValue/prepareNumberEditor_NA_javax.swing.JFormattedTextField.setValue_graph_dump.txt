Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_22 $$ return valueField[ CD ]
Line_3 $$ final NumberFormat formatter = NumberFormat.getIntegerInstance()-->Line_4 $$ formatter.setParseIntegerOnly(true)[ FD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_7 $$ valueField.setValue(value)[ FD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_10 $$ UIUtil.fixFormattedField(valueField)[ FD ]
Line_6 $$ Object value = ReflectionUtil.getField(getClass(), this, null, fieldName)-->Line_7 $$ valueField.setValue(value)[ FD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_15 $$ valueField.commitEdit()[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_6 $$ Object value = ReflectionUtil.getField(getClass(), this, null, fieldName)[ CD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_9 $$ valueField.setMinimumSize(valueField.getPreferredSize())[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_7 $$ valueField.setValue(value)[ CD ]
Line_16 $$ final Number number = (Number) valueField.getValue()-->Line_17 $$ ReflectionUtil.setField(BaseInspection.this.getClass(), BaseInspection.this, int.class, fieldName, number.intValue())[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_12 $$ document.addDocumentListener(new DocumentAdapter() [ CD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_8 $$ valueField.setColumns(2)[ CD ]
Line_11 $$ final Document document = valueField.getDocument()-->Line_12 $$ document.addDocumentListener(new DocumentAdapter() [ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_17 $$ ReflectionUtil.setField(BaseInspection.this.getClass(), BaseInspection.this, int.class, fieldName, number.intValue())[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_9 $$ valueField.setMinimumSize(valueField.getPreferredSize())[ CD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)[ CD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_11 $$ final Document document = valueField.getDocument()[ CD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_10 $$ UIUtil.fixFormattedField(valueField)[ CD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_8 $$ valueField.setColumns(2)[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_3 $$ final NumberFormat formatter = NumberFormat.getIntegerInstance()[ CD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_16 $$ final Number number = (Number) valueField.getValue()[ FD ]
Line_5 $$ final JFormattedTextField valueField = new JFormattedTextField(formatter)-->Line_11 $$ final Document document = valueField.getDocument()[ FD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_4 $$ formatter.setParseIntegerOnly(true)[ CD ]
Line_2 $$ protected JFormattedTextField prepareNumberEditor(@NonNls final String fieldName) -->Line_6 $$ Object value = ReflectionUtil.getField(getClass(), this, null, fieldName)[ FD ]
