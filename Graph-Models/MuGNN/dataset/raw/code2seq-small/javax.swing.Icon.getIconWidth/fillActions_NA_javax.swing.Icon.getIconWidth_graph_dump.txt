Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_9 $$ consumer.consume(new LookupElementAction(icon, "Import statically") [ FD ]
Line_3 $$ final StaticallyImportable item = element.as(StaticallyImportable.CLASS_CONDITION_KEY)-->Line_11 $$ item.setShouldBeImported(!item.willBeImported())[ FD ]
Line_7 $$ final Icon checkIcon = PlatformIcons.CHECK_ICON-->Line_8 $$ final Icon icon = item.willBeImported() ? checkIcon : new EmptyIcon(checkIcon.getIconWidth(), checkIcon.getIconHeight())[ FD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_7 $$ final Icon checkIcon = PlatformIcons.CHECK_ICON[ CD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_8 $$ final Icon icon = item.willBeImported() ? checkIcon : new EmptyIcon(checkIcon.getIconWidth(), checkIcon.getIconHeight())[ CD ]
Line_3 $$ final StaticallyImportable item = element.as(StaticallyImportable.CLASS_CONDITION_KEY)-->Line_4 $$ if (item == null || !item.canBeImported()) [ FD ]
Line_9 $$ consumer.consume(new LookupElementAction(icon, "Import statically") -->Line_12 $$ return new Result.ChooseItem(element)[ CD ]
Line_3 $$ final StaticallyImportable item = element.as(StaticallyImportable.CLASS_CONDITION_KEY)-->Line_8 $$ final Icon icon = item.willBeImported() ? checkIcon : new EmptyIcon(checkIcon.getIconWidth(), checkIcon.getIconHeight())[ FD ]
Line_4 $$ if (item == null || !item.canBeImported()) -->Line_5 $$ return[ CD ]
Line_9 $$ consumer.consume(new LookupElementAction(icon, "Import statically") -->Line_11 $$ item.setShouldBeImported(!item.willBeImported())[ CD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_3 $$ final StaticallyImportable item = element.as(StaticallyImportable.CLASS_CONDITION_KEY)[ FD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_3 $$ final StaticallyImportable item = element.as(StaticallyImportable.CLASS_CONDITION_KEY)[ CD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_4 $$ if (item == null || !item.canBeImported()) [ CD ]
Line_2 $$ public void fillActions(final LookupElement element, Lookup lookup, Consumer<LookupElementAction> consumer) -->Line_9 $$ consumer.consume(new LookupElementAction(icon, "Import statically") [ CD ]
