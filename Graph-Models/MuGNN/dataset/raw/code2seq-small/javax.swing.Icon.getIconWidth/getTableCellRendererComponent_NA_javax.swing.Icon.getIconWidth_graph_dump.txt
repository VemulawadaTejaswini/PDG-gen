Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)-->Line_59 $$ indent += icon.getIconWidth() + indents.second[ FD ]
Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_30 $$ if (column == 0) -->Line_35 $$ if (property.isImportant()) [ CD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_12 $$ renderer.setIpad(new Insets(0, 5, 0, 0))[ FD ]
Line_30 $$ if (column == 0) -->Line_41 $$ if (property.isDeprecated()) [ CD ]
Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ FD ]
Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_70 $$ component.putClientProperty("JComponent.sizeVariant", UIUtil.isUnderAquaLookAndFeel() ? "small" : null)[ FD ]
Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)-->Line_54 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ FD ]
Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_4 $$ Property property = (Property) value-->Line_65 $$ PropertyRenderer valueRenderer = property.getRenderer()[ FD ]
Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_18 $$ boolean isDefault = true-->Line_32 $$ if (!selected && !isDefault) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_9 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_11 $$ if (property instanceof GroupProperty) [ CD ]
Line_46 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))-->Line_47 $$ int style = ((template.getStyle() & SimpleTextAttributes.STYLE_WAVED) != 0 ? SimpleTextAttributes.STYLE_WAVED : 0) | ((template.getStyle() & SimpleTextAttributes.STYLE_UNDERLINE) != 0 ? SimpleTextAttributes.STYLE_UNDERLINE : 0)[ FD ]
Line_3 $$ column = table.convertColumnIndexToModel(column)-->Line_9 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ FD ]
Line_4 $$ Property property = (Property) value-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_30 $$ if (column == 0) -->Line_56 $$ if (hasChildren) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)[ CD ]
Line_21 $$ if (!property.showAsDefault(container)) -->Line_22 $$ isDefault = false[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_6 $$ Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_38 $$ if (property.isExpert()) -->Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ CD ]
Line_4 $$ Property property = (Property) value-->Line_41 $$ if (property.isDeprecated()) [ FD ]
Line_6 $$ Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)[ FD ]
Line_4 $$ Property property = (Property) value-->Line_14 $$ renderer.append(property.getName())[ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_45 $$ if (errorInfo != null) -->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ CD ]
Line_22 $$ isDefault = false-->Line_32 $$ if (!selected && !isDefault) [ FD ]
Line_11 $$ if (property instanceof GroupProperty) -->Line_13 $$ if (column == 0) [ CD ]
Line_30 $$ if (column == 0) -->Line_38 $$ if (property.isExpert()) [ CD ]
Line_46 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_4 $$ Property property = (Property) value-->Line_54 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_14 $$ renderer.append(property.getName())[ FD ]
Line_4 $$ Property property = (Property) value-->Line_21 $$ if (!property.showAsDefault(container)) [ FD ]
Line_69 $$ if (component instanceof JCheckBox) -->Line_70 $$ component.putClientProperty("JComponent.sizeVariant", UIUtil.isUnderAquaLookAndFeel() ? "small" : null)[ CD ]
Line_11 $$ if (property instanceof GroupProperty) -->Line_12 $$ renderer.setIpad(new Insets(0, 5, 0, 0))[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_30 $$ if (column == 0) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_9 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ CD ]
Line_11 $$ if (property instanceof GroupProperty) -->Line_16 $$ return renderer[ CD ]
Line_20 $$ for (PropertiesContainer container : myContainers) -->Line_21 $$ if (!property.showAsDefault(container)) [ FD ]
Line_30 $$ if (column == 0) -->Line_44 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_35 $$ if (property.isImportant()) -->Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ CD ]
Line_3 $$ column = table.convertColumnIndexToModel(column)-->Line_13 $$ if (column == 0) [ FD ]
Line_30 $$ if (column == 0) -->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_44 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)[ FD ]
Line_65 $$ PropertyRenderer valueRenderer = property.getRenderer()-->Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_29 $$ renderer.clear()[ FD ]
Line_13 $$ if (column == 0) -->Line_14 $$ renderer.append(property.getName())[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_29 $$ renderer.clear()[ CD ]
Line_30 $$ if (column == 0) -->Line_52 $$ boolean hasChildren = !getChildren(property).isEmpty()[ CD ]
Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_69 $$ if (component instanceof JCheckBox) [ FD ]
Line_4 $$ Property property = (Property) value-->Line_11 $$ if (property instanceof GroupProperty) [ FD ]
Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_4 $$ Property property = (Property) value-->Line_38 $$ if (property.isExpert()) [ FD ]
Line_30 $$ if (column == 0) -->Line_61 $$ renderer.setIpad(new Insets(0, indent, 0, 0))[ CD ]
Line_4 $$ Property property = (Property) value-->Line_52 $$ boolean hasChildren = !getChildren(property).isEmpty()[ FD ]
Line_30 $$ if (column == 0) -->Line_45 $$ if (errorInfo != null) [ CD ]
Line_55 $$ int indent = indents.first-->Line_59 $$ indent += icon.getIconWidth() + indents.second[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_18 $$ boolean isDefault = true[ CD ]
Line_56 $$ if (hasChildren) -->Line_59 $$ indent += icon.getIconWidth() + indents.second[ CD ]
Line_45 $$ if (errorInfo != null) -->Line_47 $$ int style = ((template.getStyle() & SimpleTextAttributes.STYLE_WAVED) != 0 ? SimpleTextAttributes.STYLE_WAVED : 0) | ((template.getStyle() & SimpleTextAttributes.STYLE_UNDERLINE) != 0 ? SimpleTextAttributes.STYLE_UNDERLINE : 0)[ CD ]
Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_67 $$ component.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_39 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_30 $$ if (column == 0) -->Line_55 $$ int indent = indents.first[ CD ]
Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ FD ]
Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_30 $$ if (column == 0) -->Line_62 $$ return renderer[ CD ]
Line_4 $$ Property property = (Property) value-->Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_30 $$ if (column == 0) [ CD ]
Line_41 $$ if (property.isDeprecated()) -->Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ CD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_61 $$ renderer.setIpad(new Insets(0, indent, 0, 0))[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_5 $$ Color background = table.getBackground()[ CD ]
Line_18 $$ boolean isDefault = true-->Line_22 $$ isDefault = false[ FD ]
Line_30 $$ if (column == 0) -->Line_54 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_3 $$ column = table.convertColumnIndexToModel(column)[ FD ]
Line_30 $$ if (column == 0) -->Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES[ CD ]
Line_32 $$ if (!selected && !isDefault) -->Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_10 $$ renderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ CD ]
Line_30 $$ if (column == 0) -->Line_32 $$ if (!selected && !isDefault) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_68 $$ component.setFont(table.getFont())[ FD ]
Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_5 $$ Color background = table.getBackground()[ FD ]
Line_4 $$ Property property = (Property) value-->Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_4 $$ Property property = (Property) value[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ FD ]
Line_45 $$ if (errorInfo != null) -->Line_46 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))[ CD ]
Line_44 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)-->Line_45 $$ if (errorInfo != null) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_3 $$ column = table.convertColumnIndexToModel(column)[ CD ]
Line_44 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)-->Line_46 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))[ FD ]
Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_32 $$ if (!selected && !isDefault) [ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_57 $$ renderer.setIconTextGap(indents.second)[ FD ]
Line_56 $$ if (hasChildren) -->Line_57 $$ renderer.setIconTextGap(indents.second)[ CD ]
Line_30 $$ if (column == 0) -->Line_53 $$ renderer.setIcon(hasChildren ? icon : null)[ CD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_75 $$ renderer.append(MessageFormat.format("Error getting value: [ FD ]
Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_67 $$ component.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_53 $$ renderer.setIcon(hasChildren ? icon : null)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_13 $$ if (column == 0) [ FD ]
Line_36 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(JTable table, Object value, boolean selected, boolean cellHasFocus, int row, int column) -->Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)[ FD ]
Line_7 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_10 $$ renderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_31 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)[ FD ]
Line_66 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_68 $$ component.setFont(table.getFont())[ FD ]
Line_33 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_50 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_42 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)-->Line_48 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_4 $$ Property property = (Property) value-->Line_35 $$ if (property.isImportant()) [ FD ]
Line_3 $$ column = table.convertColumnIndexToModel(column)-->Line_30 $$ if (column == 0) [ FD ]
Line_30 $$ if (column == 0) -->Line_51 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ CD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_10 $$ renderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_8 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_9 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ FD ]
