Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()-->Line_16 $$ if (icon.getIconWidth() < 16)[ FD ]
Line_16 $$ if (icon.getIconWidth() < 16)-->Line_17 $$ icon = IconUtil.toSize(icon, 16, 16)[ CD ]
Line_19 $$ if (!gutterAction.isAvailable(project, editor, psiFile))-->Line_20 $$ return[ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_26 $$ descriptors.add(descriptor)[ FD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_9 $$ AnAction child = children[i][ CD ]
Line_6 $$ if (action instanceof ActionGroup) -->Line_8 $$ for (int i = 0; i < children.length; i++) [ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_15 $$ icon = renderer.getIcon()[ FD ]
Line_18 $$ final IntentionAction gutterAction = new GutterIntentionAction(action, order, icon)-->Line_23 $$ return gutterAction.getText()[ FD ]
Line_3 $$ if (action == null) -->Line_4 $$ return[ CD ]
Line_21 $$ HighlightInfo.IntentionActionDescriptor descriptor = new HighlightInfo.IntentionActionDescriptor(gutterAction, Collections.<IntentionAction>emptyList(), null, icon) -->Line_26 $$ descriptors.add(descriptor)[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_26 $$ descriptors.add(descriptor)[ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_6 $$ if (action instanceof ActionGroup) [ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_10 $$ addActions(project, editor, psiFile, child, descriptors, renderer, i + order)[ FD ]
Line_14 $$ if (icon == null)-->Line_15 $$ icon = renderer.getIcon()[ CD ]
Line_8 $$ for (int i = 0; i < children.length; i++) -->Line_10 $$ addActions(project, editor, psiFile, child, descriptors, renderer, i + order)[ CD ]
Line_21 $$ HighlightInfo.IntentionActionDescriptor descriptor = new HighlightInfo.IntentionActionDescriptor(gutterAction, Collections.<IntentionAction>emptyList(), null, icon) -->Line_23 $$ return gutterAction.getText()[ CD ]
Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()-->Line_15 $$ icon = renderer.getIcon()[ FD ]
Line_15 $$ icon = renderer.getIcon()-->Line_17 $$ icon = IconUtil.toSize(icon, 16, 16)[ FD ]
Line_9 $$ AnAction child = children[i]-->Line_10 $$ addActions(project, editor, psiFile, child, descriptors, renderer, i + order)[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_16 $$ if (icon.getIconWidth() < 16)[ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_19 $$ if (!gutterAction.isAvailable(project, editor, psiFile))[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_3 $$ if (action == null) [ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_18 $$ final IntentionAction gutterAction = new GutterIntentionAction(action, order, icon)[ CD ]
Line_15 $$ icon = renderer.getIcon()-->Line_16 $$ if (icon.getIconWidth() < 16)[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_3 $$ if (action == null) [ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_19 $$ if (!gutterAction.isAvailable(project, editor, psiFile))[ CD ]
Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()-->Line_17 $$ icon = IconUtil.toSize(icon, 16, 16)[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_21 $$ HighlightInfo.IntentionActionDescriptor descriptor = new HighlightInfo.IntentionActionDescriptor(gutterAction, Collections.<IntentionAction>emptyList(), null, icon) [ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_14 $$ if (icon == null)[ CD ]
Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()-->Line_14 $$ if (icon == null)[ FD ]
Line_18 $$ final IntentionAction gutterAction = new GutterIntentionAction(action, order, icon)-->Line_19 $$ if (!gutterAction.isAvailable(project, editor, psiFile))[ FD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_13 $$ Icon icon = action.getTemplatePresentation().getIcon()[ CD ]
Line_6 $$ if (action instanceof ActionGroup) -->Line_7 $$ AnAction[] children = ((ActionGroup) action).getChildren(null)[ CD ]
Line_2 $$ private static void addActions(@NotNull Project project, @NotNull Editor editor, @NotNull PsiFile psiFile, @Nullable AnAction action, @NotNull List<HighlightInfo.IntentionActionDescriptor> descriptors, @NotNull GutterIconRenderer renderer, int order) -->Line_6 $$ if (action instanceof ActionGroup) [ CD ]
