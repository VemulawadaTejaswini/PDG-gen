Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_39 $$ return defineClass(name, buffer, 0, buffer.length)[ FD ]
Line_34 $$ byte[] buffer = new byte[1024]-->Line_36 $$ baos.write(buffer, 0, i)[ FD ]
Line_16 $$ final String packageName = name.substring(0, lastIdx)-->Line_23 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_7 $$ if (name.startsWith("javax.")) [ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_24 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_10 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")[ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_3 $$ Class<?> loaded = findLoadedClass(name)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_15 $$ if (lastIdx != -1) [ CD ]
Line_34 $$ byte[] buffer = new byte[1024]-->Line_38 $$ buffer = baos.toByteArray()[ FD ]
Line_23 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)-->Line_24 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ FD ]
Line_10 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_11 $$ if (resource == null) [ FD ]
Line_19 $$ if (pkg == null) -->Line_20 $$ Manifest manifest = readManifestFile()[ CD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_38 $$ buffer = baos.toByteArray()[ FD ]
Line_23 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)-->Line_25 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_18 $$ Package pkg = findLoadedPackage(packageName)-->Line_19 $$ if (pkg == null) [ FD ]
Line_20 $$ Manifest manifest = readManifestFile()-->Line_21 $$ if (manifest != null) [ FD ]
Line_38 $$ buffer = baos.toByteArray()-->Line_39 $$ return defineClass(name, buffer, 0, buffer.length)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_8 $$ return Class.forName(name, resolve, delegate)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_3 $$ Class<?> loaded = findLoadedClass(name)[ CD ]
Line_35 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) -->Line_36 $$ baos.write(buffer, 0, i)[ FD ]
Line_4 $$ if (loaded != null) -->Line_5 $$ return loaded[ CD ]
Line_21 $$ if (manifest != null) -->Line_27 $$ definePackage(packageName, null, null, null, null, null, null, null)[ CD ]
Line_10 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_35 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) [ FD ]
Line_34 $$ byte[] buffer = new byte[1024]-->Line_35 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) [ FD ]
Line_7 $$ if (name.startsWith("javax.")) -->Line_8 $$ return Class.forName(name, resolve, delegate)[ CD ]
Line_24 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null-->Line_25 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_16 $$ final String packageName = name.substring(0, lastIdx)-->Line_27 $$ definePackage(packageName, null, null, null, null, null, null, null)[ FD ]
Line_32 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_36 $$ baos.write(buffer, 0, i)[ FD ]
Line_19 $$ if (pkg == null) -->Line_21 $$ if (manifest != null) [ CD ]
Line_22 $$ final Attributes mainAttribute = manifest.getMainAttributes()-->Line_24 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ FD ]
Line_34 $$ byte[] buffer = new byte[1024]-->Line_39 $$ return defineClass(name, buffer, 0, buffer.length)[ FD ]
Line_14 $$ final int lastIdx = name.lastIndexOf('.')-->Line_15 $$ if (lastIdx != -1) [ FD ]
Line_21 $$ if (manifest != null) -->Line_24 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ CD ]
Line_21 $$ if (manifest != null) -->Line_23 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)[ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_7 $$ if (name.startsWith("javax.")) [ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_16 $$ final String packageName = name.substring(0, lastIdx)[ FD ]
Line_21 $$ if (manifest != null) -->Line_25 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ CD ]
Line_3 $$ Class<?> loaded = findLoadedClass(name)-->Line_4 $$ if (loaded != null) [ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_10 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")[ FD ]
Line_14 $$ final int lastIdx = name.lastIndexOf('.')-->Line_16 $$ final String packageName = name.substring(0, lastIdx)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_4 $$ if (loaded != null) [ CD ]
Line_10 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_44 $$ resource.close()[ FD ]
Line_16 $$ final String packageName = name.substring(0, lastIdx)-->Line_18 $$ Package pkg = findLoadedPackage(packageName)[ FD ]
Line_20 $$ Manifest manifest = readManifestFile()-->Line_23 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)[ FD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_14 $$ final int lastIdx = name.lastIndexOf('.')[ CD ]
Line_16 $$ final String packageName = name.substring(0, lastIdx)-->Line_25 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_15 $$ if (lastIdx != -1) -->Line_16 $$ final String packageName = name.substring(0, lastIdx)[ CD ]
Line_21 $$ if (manifest != null) -->Line_22 $$ final Attributes mainAttribute = manifest.getMainAttributes()[ CD ]
Line_20 $$ Manifest manifest = readManifestFile()-->Line_22 $$ final Attributes mainAttribute = manifest.getMainAttributes()[ FD ]
Line_22 $$ final Attributes mainAttribute = manifest.getMainAttributes()-->Line_25 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_35 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) -->Line_36 $$ baos.write(buffer, 0, i)[ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_11 $$ if (resource == null) [ CD ]
Line_2 $$ protected Class<?> findClass(String name, boolean exportsOnly, boolean resolve) throws ClassNotFoundException -->Line_14 $$ final int lastIdx = name.lastIndexOf('.')[ FD ]
