Line_12 $$ String methodName = method.getName()-->Line_15 $$ if (isGetGetter(methodName, parameterTypes)) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_6 $$ if (isObjectHashCode(method)) [ CD ]
Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)-->Line_29 $$ return decode(method.getReturnType(), future.get())[ FD ]
Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))-->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ FD ]
Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))-->Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)[ FD ]
Line_14 $$ ProcessCallable<Serializable> processCallable = null-->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ FD ]
Line_9 $$ if (isObjectToString(method)) -->Line_10 $$ return _objectName.toString()[ CD ]
Line_17 $$ if (isIsGetter(methodName, parameterTypes)) -->Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))[ CD ]
Line_17 $$ if (isIsGetter(methodName, parameterTypes)) -->Line_19 $$ if (isSetter(methodName, parameterTypes)) [ CD ]
Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))-->Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))[ FD ]
Line_12 $$ String methodName = method.getName()-->Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))[ FD ]
Line_23 $$ for (int i = 0; i < parameterTypes.length; i++) -->Line_24 $$ parameterTypeNames[i] = parameterTypes[i].getName()[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_3 $$ if (isObjectEquals(method)) [ CD ]
Line_19 $$ if (isSetter(methodName, parameterTypes)) -->Line_22 $$ String[] parameterTypeNames = new String[parameterTypes.length][ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))[ FD ]
Line_14 $$ ProcessCallable<Serializable> processCallable = null-->Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)[ FD ]
Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))-->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ FD ]
Line_14 $$ ProcessCallable<Serializable> processCallable = null-->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_14 $$ ProcessCallable<Serializable> processCallable = null[ CD ]
Line_12 $$ String methodName = method.getName()-->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_9 $$ if (isObjectToString(method)) [ CD ]
Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))-->Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)[ FD ]
Line_3 $$ if (isObjectEquals(method)) -->Line_4 $$ return JMXProxyUtil.equals(_objectName, args[0])[ CD ]
Line_12 $$ String methodName = method.getName()-->Line_17 $$ if (isIsGetter(methodName, parameterTypes)) [ FD ]
Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)-->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ FD ]
Line_13 $$ Class<?>[] parameterTypes = method.getParameterTypes()-->Line_19 $$ if (isSetter(methodName, parameterTypes)) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_29 $$ return decode(method.getReturnType(), future.get())[ FD ]
Line_13 $$ Class<?>[] parameterTypes = method.getParameterTypes()-->Line_15 $$ if (isGetGetter(methodName, parameterTypes)) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_29 $$ return decode(method.getReturnType(), future.get())[ CD ]
Line_14 $$ ProcessCallable<Serializable> processCallable = null-->Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ CD ]
Line_19 $$ if (isSetter(methodName, parameterTypes)) -->Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ FD ]
Line_14 $$ ProcessCallable<Serializable> processCallable = null-->Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))[ FD ]
Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))-->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_3 $$ if (isObjectEquals(method)) [ FD ]
Line_13 $$ Class<?>[] parameterTypes = method.getParameterTypes()-->Line_17 $$ if (isIsGetter(methodName, parameterTypes)) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_6 $$ if (isObjectHashCode(method)) [ FD ]
Line_19 $$ if (isSetter(methodName, parameterTypes)) -->Line_23 $$ for (int i = 0; i < parameterTypes.length; i++) [ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))[ FD ]
Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))-->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ FD ]
Line_15 $$ if (isGetGetter(methodName, parameterTypes)) -->Line_17 $$ if (isIsGetter(methodName, parameterTypes)) [ CD ]
Line_12 $$ String methodName = method.getName()-->Line_19 $$ if (isSetter(methodName, parameterTypes)) [ FD ]
Line_6 $$ if (isObjectHashCode(method)) -->Line_7 $$ return _objectName.hashCode()[ CD ]
Line_19 $$ if (isSetter(methodName, parameterTypes)) -->Line_20 $$ processCallable = new SetAttributeProcessCallable(_objectName, methodName.substring(3), (Serializable) args[0], isOptional(method))[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_13 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_15 $$ if (isGetGetter(methodName, parameterTypes)) [ CD ]
Line_15 $$ if (isGetGetter(methodName, parameterTypes)) -->Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_9 $$ if (isObjectToString(method)) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_12 $$ String methodName = method.getName()[ FD ]
Line_12 $$ String methodName = method.getName()-->Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_13 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_12 $$ String methodName = method.getName()[ CD ]
Line_16 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(3), isOptional(method))-->Line_28 $$ Future<? extends Serializable> future = _processCallableExecutor.execute(processCallable)[ FD ]
Line_18 $$ processCallable = new GetAttributeProcessCallable(_objectName, methodName.substring(2), isOptional(method))-->Line_26 $$ processCallable = new OperationProcessCallable(_objectName, methodName, args, parameterTypeNames)[ FD ]
