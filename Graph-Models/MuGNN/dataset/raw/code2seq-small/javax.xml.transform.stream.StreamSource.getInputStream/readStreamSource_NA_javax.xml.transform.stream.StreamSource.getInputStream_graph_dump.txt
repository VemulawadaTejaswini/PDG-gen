Line_2 $$ public void readStreamSource() throws Exception -->Line_5 $$ StreamSource result = (StreamSource) converter.read(StreamSource.class, inputMessage)[ CD ]
Line_2 $$ public void readStreamSource() throws Exception -->Line_6 $$ String s = FileCopyUtils.copyToString(new InputStreamReader(result.getInputStream()))[ CD ]
Line_5 $$ StreamSource result = (StreamSource) converter.read(StreamSource.class, inputMessage)-->Line_6 $$ String s = FileCopyUtils.copyToString(new InputStreamReader(result.getInputStream()))[ FD ]
Line_2 $$ public void readStreamSource() throws Exception -->Line_7 $$ assertXMLEqual("Invalid result", BODY, s)[ CD ]
Line_3 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8"))-->Line_4 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "xml"))[ FD ]
Line_6 $$ String s = FileCopyUtils.copyToString(new InputStreamReader(result.getInputStream()))-->Line_7 $$ assertXMLEqual("Invalid result", BODY, s)[ FD ]
Line_2 $$ public void readStreamSource() throws Exception -->Line_3 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8"))[ CD ]
Line_2 $$ public void readStreamSource() throws Exception -->Line_4 $$ inputMessage.getHeaders().setContentType(new MediaType("application", "xml"))[ CD ]
Line_3 $$ MockHttpInputMessage inputMessage = new MockHttpInputMessage(BODY.getBytes("UTF-8"))-->Line_5 $$ StreamSource result = (StreamSource) converter.read(StreamSource.class, inputMessage)[ FD ]
