Line_8 $$ buffer = new byte[1024]-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_25 $$ if (readIntoBuffer == buffer.length) -->Line_26 $$ baos.write(buffer)[ CD ]
Line_8 $$ buffer = new byte[1024]-->Line_26 $$ baos.write(buffer)[ FD ]
Line_24 $$ readIntoBuffer += read-->Line_19 $$ if (readIntoBuffer > 0) [ FD ]
Line_18 $$ if (read < 0) -->Line_19 $$ if (readIntoBuffer > 0) [ CD ]
Line_12 $$ baos = new ByteArrayOutputStream(available)-->Line_26 $$ baos.write(buffer)[ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_28 $$ if (readIntoBuffer > buffer.length) [ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_19 $$ if (readIntoBuffer > 0) [ FD ]
Line_15 $$ int read-->Line_24 $$ readIntoBuffer += read[ FD ]
Line_27 $$ readIntoBuffer = 0-->Line_28 $$ if (readIntoBuffer > buffer.length) [ FD ]
Line_27 $$ readIntoBuffer = 0-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_27 $$ readIntoBuffer = 0[ FD ]
Line_6 $$ final ByteArrayOutputStream baos-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_6 $$ final ByteArrayOutputStream baos-->Line_26 $$ baos.write(buffer)[ FD ]
Line_16 $$ while (true) -->Line_18 $$ if (read < 0) [ CD ]
Line_25 $$ if (readIntoBuffer == buffer.length) -->Line_27 $$ readIntoBuffer = 0[ CD ]
Line_11 $$ buffer = new byte[available]-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_7 $$ if (available < 0) -->Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)[ CD ]
Line_11 $$ buffer = new byte[available]-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_24 $$ readIntoBuffer += read[ FD ]
Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)-->Line_22 $$ return baos.toByteArray()[ FD ]
Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_5 $$ final byte[] buffer-->Line_8 $$ buffer = new byte[1024][ FD ]
Line_5 $$ final byte[] buffer-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_6 $$ final ByteArrayOutputStream baos-->Line_22 $$ return baos.toByteArray()[ FD ]
Line_18 $$ if (read < 0) -->Line_24 $$ readIntoBuffer += read[ CD ]
Line_24 $$ readIntoBuffer += read-->Line_28 $$ if (readIntoBuffer > buffer.length) [ FD ]
Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)-->Line_18 $$ if (read < 0) [ FD ]
Line_15 $$ int read-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)-->Line_24 $$ readIntoBuffer += read[ FD ]
Line_2 $$ private static byte[] readAllWithBuffer(FSDataInputStream fsdis, boolean close) throws IOException -->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_24 $$ readIntoBuffer += read-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_2 $$ private static byte[] readAllWithBuffer(FSDataInputStream fsdis, boolean close) throws IOException -->Line_4 $$ final int available = fsdis.available()[ FD ]
Line_24 $$ readIntoBuffer += read-->Line_27 $$ readIntoBuffer = 0[ FD ]
Line_25 $$ if (readIntoBuffer == buffer.length) -->Line_28 $$ if (readIntoBuffer > buffer.length) [ CD ]
Line_27 $$ readIntoBuffer = 0-->Line_25 $$ if (readIntoBuffer == buffer.length) [ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_7 $$ if (available < 0) -->Line_12 $$ baos = new ByteArrayOutputStream(available)[ CD ]
Line_11 $$ buffer = new byte[available]-->Line_26 $$ baos.write(buffer)[ FD ]
Line_8 $$ buffer = new byte[1024]-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_18 $$ if (read < 0) -->Line_25 $$ if (readIntoBuffer == buffer.length) [ CD ]
Line_5 $$ final byte[] buffer-->Line_26 $$ baos.write(buffer)[ FD ]
Line_2 $$ private static byte[] readAllWithBuffer(FSDataInputStream fsdis, boolean close) throws IOException -->Line_35 $$ fsdis.close()[ FD ]
Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)-->Line_12 $$ baos = new ByteArrayOutputStream(available)[ FD ]
Line_14 $$ int readIntoBuffer = 0-->Line_25 $$ if (readIntoBuffer == buffer.length) [ FD ]
Line_4 $$ final int available = fsdis.available()-->Line_7 $$ if (available < 0) [ FD ]
Line_18 $$ if (read < 0) -->Line_22 $$ return baos.toByteArray()[ CD ]
Line_16 $$ while (true) -->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ CD ]
Line_7 $$ if (available < 0) -->Line_8 $$ buffer = new byte[1024][ CD ]
Line_6 $$ final ByteArrayOutputStream baos-->Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)[ FD ]
Line_24 $$ readIntoBuffer += read-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_6 $$ final ByteArrayOutputStream baos-->Line_12 $$ baos = new ByteArrayOutputStream(available)[ FD ]
Line_12 $$ baos = new ByteArrayOutputStream(available)-->Line_22 $$ return baos.toByteArray()[ FD ]
Line_24 $$ readIntoBuffer += read-->Line_25 $$ if (readIntoBuffer == buffer.length) [ FD ]
Line_27 $$ readIntoBuffer = 0-->Line_19 $$ if (readIntoBuffer > 0) [ FD ]
Line_15 $$ int read-->Line_18 $$ if (read < 0) [ FD ]
Line_9 $$ baos = new ByteArrayOutputStream(buffer.length * 2)-->Line_26 $$ baos.write(buffer)[ FD ]
Line_19 $$ if (readIntoBuffer > 0) -->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ CD ]
Line_8 $$ buffer = new byte[1024]-->Line_11 $$ buffer = new byte[available][ FD ]
Line_7 $$ if (available < 0) -->Line_11 $$ buffer = new byte[available][ CD ]
Line_5 $$ final byte[] buffer-->Line_11 $$ buffer = new byte[available][ FD ]
Line_12 $$ baos = new ByteArrayOutputStream(available)-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_27 $$ readIntoBuffer = 0-->Line_17 $$ read = fsdis.read(buffer, readIntoBuffer, buffer.length - readIntoBuffer)[ FD ]
Line_5 $$ final byte[] buffer-->Line_20 $$ baos.write(buffer, 0, readIntoBuffer)[ FD ]
Line_34 $$ if (close) -->Line_35 $$ fsdis.close()[ CD ]
