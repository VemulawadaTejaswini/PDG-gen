Line_10 $$ if (type.isAllowed(b)) -->Line_13 $$ bos.write('%')[ CD ]
Line_15 $$ char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16))-->Line_17 $$ bos.write(hex2)[ FD ]
Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)-->Line_11 $$ bos.write(b)[ FD ]
Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)-->Line_20 $$ return bos.toByteArray()[ FD ]
Line_10 $$ if (type.isAllowed(b)) -->Line_14 $$ char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16))[ CD ]
Line_7 $$ if (b < 0) -->Line_8 $$ b += 256[ CD ]
Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)-->Line_13 $$ bos.write('%')[ FD ]
Line_14 $$ char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16))-->Line_16 $$ bos.write(hex1)[ FD ]
Line_6 $$ for (byte b : source) -->Line_8 $$ b += 256[ FD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ FD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_3 $$ Assert.notNull(source, "Source must not be null")[ CD ]
Line_8 $$ b += 256-->Line_11 $$ bos.write(b)[ FD ]
Line_10 $$ if (type.isAllowed(b)) -->Line_17 $$ bos.write(hex2)[ CD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_4 $$ Assert.notNull(type, "Type must not be null")[ CD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_10 $$ if (type.isAllowed(b)) [ FD ]
Line_10 $$ if (type.isAllowed(b)) -->Line_11 $$ bos.write(b)[ CD ]
Line_10 $$ if (type.isAllowed(b)) -->Line_16 $$ bos.write(hex1)[ CD ]
Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)-->Line_16 $$ bos.write(hex1)[ FD ]
Line_6 $$ for (byte b : source) -->Line_10 $$ if (type.isAllowed(b)) [ FD ]
Line_8 $$ b += 256-->Line_10 $$ if (type.isAllowed(b)) [ FD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_4 $$ Assert.notNull(type, "Type must not be null")[ FD ]
Line_6 $$ for (byte b : source) -->Line_7 $$ if (b < 0) [ FD ]
Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)-->Line_17 $$ bos.write(hex2)[ FD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_20 $$ return bos.toByteArray()[ CD ]
Line_10 $$ if (type.isAllowed(b)) -->Line_15 $$ char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16))[ CD ]
Line_6 $$ for (byte b : source) -->Line_11 $$ bos.write(b)[ FD ]
Line_2 $$ private static byte[] encodeBytes(byte[] source, Type type) -->Line_5 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream(source.length)[ CD ]
