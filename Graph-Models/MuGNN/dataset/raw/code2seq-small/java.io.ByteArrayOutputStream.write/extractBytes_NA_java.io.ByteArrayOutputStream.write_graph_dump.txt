Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_35 $$ return outputStream.toByteArray()[ CD ]
Line_12 $$ long skipped = inputStream.skip(start)-->Line_13 $$ if (skipped != start) [ FD ]
Line_5 $$ int size = Math.min(length, data.length)-->Line_7 $$ System.arraycopy(data, (int) start, result, 0, size)[ FD ]
Line_18 $$ while (true) -->Line_28 $$ if (bytesRead >= length) [ CD ]
Line_10 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(length)-->Line_23 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
Line_17 $$ int bytesRead = 0-->Line_27 $$ bytesRead += amountRead[ FD ]
Line_6 $$ byte[] result = new byte[size]-->Line_7 $$ System.arraycopy(data, (int) start, result, 0, size)[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) [ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_10 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(length)[ CD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) -->Line_7 $$ System.arraycopy(data, (int) start, result, 0, size)[ CD ]
Line_27 $$ bytesRead += amountRead-->Line_28 $$ if (bytesRead >= length) [ FD ]
Line_18 $$ while (true) -->Line_19 $$ int amountRead = inputStream.read(buffer)[ CD ]
Line_18 $$ while (true) -->Line_23 $$ outputStream.write(buffer, 0, amountRead)[ CD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_28 $$ if (bytesRead >= length) [ FD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) -->Line_5 $$ int size = Math.min(length, data.length)[ CD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) -->Line_8 $$ return result[ CD ]
Line_16 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_23 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
Line_10 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream(length)-->Line_35 $$ return outputStream.toByteArray()[ FD ]
Line_19 $$ int amountRead = inputStream.read(buffer)-->Line_20 $$ if (amountRead == -1) [ FD ]
Line_18 $$ while (true) -->Line_24 $$ if (amountRead < buffer.length) [ CD ]
Line_19 $$ int amountRead = inputStream.read(buffer)-->Line_27 $$ bytesRead += amountRead[ FD ]
Line_4 $$ byte[] data = ((BinaryStream) inputStream).getBytes()-->Line_7 $$ System.arraycopy(data, (int) start, result, 0, size)[ FD ]
Line_17 $$ int bytesRead = 0-->Line_28 $$ if (bytesRead >= length) [ FD ]
Line_19 $$ int amountRead = inputStream.read(buffer)-->Line_24 $$ if (amountRead < buffer.length) [ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) [ CD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_12 $$ long skipped = inputStream.skip(start)[ FD ]
Line_18 $$ while (true) -->Line_20 $$ if (amountRead == -1) [ CD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_13 $$ if (skipped != start) [ FD ]
Line_19 $$ int amountRead = inputStream.read(buffer)-->Line_23 $$ outputStream.write(buffer, 0, amountRead)[ FD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) -->Line_4 $$ byte[] data = ((BinaryStream) inputStream).getBytes()[ CD ]
Line_16 $$ byte[] buffer = new byte[BUFFER_SIZE]-->Line_19 $$ int amountRead = inputStream.read(buffer)[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_19 $$ int amountRead = inputStream.read(buffer)[ FD ]
Line_2 $$ public static byte[] extractBytes(InputStream inputStream, long start, int length) -->Line_5 $$ int size = Math.min(length, data.length)[ FD ]
Line_3 $$ if (BinaryStream.class.isInstance(inputStream) && Integer.MAX_VALUE > start) -->Line_6 $$ byte[] result = new byte[size][ CD ]
Line_18 $$ while (true) -->Line_27 $$ bytesRead += amountRead[ CD ]
