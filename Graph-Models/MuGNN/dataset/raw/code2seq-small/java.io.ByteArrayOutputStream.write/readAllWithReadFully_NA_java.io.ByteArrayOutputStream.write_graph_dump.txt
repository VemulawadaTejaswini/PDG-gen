Line_14 $$ if (remainder > 0) -->Line_17 $$ baos.write(buffer, 0, remainder)[ CD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_6 $$ final int remainder = totalLength % buffer.length[ CD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_26 $$ assertEquals(totalLength, result.length)[ FD ]
Line_16 $$ position += remainder-->Line_20 $$ fsdis.readFully(position, buffer, 0, 1)[ FD ]
Line_16 $$ position += remainder-->Line_24 $$ assertEquals(totalLength, position)[ FD ]
Line_7 $$ int position = 0-->Line_20 $$ fsdis.readFully(position, buffer, 0, 1)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_7 $$ int position = 0-->Line_10 $$ fsdis.readFully(position, buffer)[ FD ]
Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_12 $$ baos.write(buffer)[ FD ]
Line_7 $$ int position = 0-->Line_24 $$ assertEquals(totalLength, position)[ FD ]
Line_11 $$ position += buffer.length-->Line_24 $$ assertEquals(totalLength, position)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_4 $$ final byte[] buffer = new byte[17][ CD ]
Line_4 $$ final byte[] buffer = new byte[17]-->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ FD ]
Line_7 $$ int position = 0-->Line_16 $$ position += remainder[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_10 $$ fsdis.readFully(position, buffer)[ FD ]
Line_7 $$ int position = 0-->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_7 $$ int position = 0[ CD ]
Line_11 $$ position += buffer.length-->Line_16 $$ position += remainder[ FD ]
Line_11 $$ position += buffer.length-->Line_10 $$ fsdis.readFully(position, buffer)[ FD ]
Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_25 $$ final byte[] result = baos.toByteArray()[ FD ]
Line_14 $$ if (remainder > 0) -->Line_16 $$ position += remainder[ CD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_30 $$ fsdis.close()[ FD ]
Line_5 $$ final int times = totalLength / buffer.length-->Line_9 $$ for (int i = 0; i < times; i++) [ FD ]
Line_9 $$ for (int i = 0; i < times; i++) -->Line_10 $$ fsdis.readFully(position, buffer)[ CD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_24 $$ assertEquals(totalLength, position)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_20 $$ fsdis.readFully(position, buffer, 0, 1)[ FD ]
Line_4 $$ final byte[] buffer = new byte[17]-->Line_12 $$ baos.write(buffer)[ FD ]
Line_6 $$ final int remainder = totalLength % buffer.length-->Line_14 $$ if (remainder > 0) [ FD ]
Line_7 $$ int position = 0-->Line_11 $$ position += buffer.length[ FD ]
Line_11 $$ position += buffer.length-->Line_20 $$ fsdis.readFully(position, buffer, 0, 1)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ FD ]
Line_4 $$ final byte[] buffer = new byte[17]-->Line_10 $$ fsdis.readFully(position, buffer)[ FD ]
Line_4 $$ final byte[] buffer = new byte[17]-->Line_20 $$ fsdis.readFully(position, buffer, 0, 1)[ FD ]
Line_6 $$ final int remainder = totalLength % buffer.length-->Line_16 $$ position += remainder[ FD ]
Line_4 $$ final byte[] buffer = new byte[17]-->Line_17 $$ baos.write(buffer, 0, remainder)[ FD ]
Line_9 $$ for (int i = 0; i < times; i++) -->Line_11 $$ position += buffer.length[ CD ]
Line_6 $$ final int remainder = totalLength % buffer.length-->Line_17 $$ baos.write(buffer, 0, remainder)[ FD ]
Line_14 $$ if (remainder > 0) -->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ CD ]
Line_9 $$ for (int i = 0; i < times; i++) -->Line_12 $$ baos.write(buffer)[ CD ]
Line_6 $$ final int remainder = totalLength % buffer.length-->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ FD ]
Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_17 $$ baos.write(buffer, 0, remainder)[ FD ]
Line_29 $$ if (close) -->Line_30 $$ fsdis.close()[ CD ]
Line_11 $$ position += buffer.length-->Line_15 $$ fsdis.readFully(position, buffer, 0, remainder)[ FD ]
Line_2 $$ private static byte[] readAllWithReadFully(int totalLength, FSDataInputStream fsdis, boolean close) throws IOException -->Line_5 $$ final int times = totalLength / buffer.length[ CD ]
