Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_19 $$ fsdis2.readFully(buffer, 0, toGo)[ FD ]
Line_22 $$ if (i < times) -->Line_24 $$ expectedPosition = (i + 1) * buffer.length[ CD ]
Line_22 $$ if (i < times) -->Line_31 $$ expectedPosition = totalLength[ CD ]
Line_22 $$ if (i < times) -->Line_26 $$ if (remainder > 0) [ CD ]
Line_24 $$ expectedPosition = (i + 1) * buffer.length-->Line_31 $$ expectedPosition = totalLength[ FD ]
Line_11 $$ long expectedPosition-->Line_31 $$ expectedPosition = totalLength[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_5 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream(totalLength)[ CD ]
Line_5 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream(totalLength)-->Line_43 $$ return baos.toByteArray()[ FD ]
Line_12 $$ int toGo-->Line_36 $$ baos.write(buffer, 0, toGo)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ FD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_22 $$ if (i < times) [ FD ]
Line_7 $$ final byte[] buffer = new byte[17]-->Line_19 $$ fsdis2.readFully(buffer, 0, toGo)[ FD ]
Line_12 $$ int toGo-->Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)[ FD ]
Line_11 $$ long expectedPosition-->Line_24 $$ expectedPosition = (i + 1) * buffer.length[ FD ]
Line_26 $$ if (remainder > 0) -->Line_29 $$ assertEquals(0, skipped)[ CD ]
Line_31 $$ expectedPosition = totalLength-->Line_34 $$ assertEquals(expectedPosition, fsdis2.getPos())[ FD ]
Line_15 $$ if (i % 2 == 0) -->Line_16 $$ fsdis1.readFully(buffer, 0, toGo)[ CD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_19 $$ fsdis2.readFully(buffer, 0, toGo)[ FD ]
Line_22 $$ if (i < times) -->Line_23 $$ assertEquals(buffer.length, skipped)[ CD ]
Line_9 $$ final int remainder = totalLength % buffer.length-->Line_27 $$ assertEquals(remainder, skipped)[ FD ]
Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)-->Line_27 $$ assertEquals(remainder, skipped)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_46 $$ fsdis1.close()[ FD ]
Line_9 $$ final int remainder = totalLength % buffer.length-->Line_26 $$ if (remainder > 0) [ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_3 $$ assertEquals(0, fsdis1.skip(-1))[ CD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_4 $$ assertEquals(0, fsdis1.skip(0))[ CD ]
Line_15 $$ if (i % 2 == 0) -->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ CD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_34 $$ assertEquals(expectedPosition, fsdis2.getPos())[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_33 $$ assertEquals(expectedPosition, fsdis1.getPos())[ FD ]
Line_10 $$ long skipped-->Line_23 $$ assertEquals(buffer.length, skipped)[ FD ]
Line_10 $$ long skipped-->Line_27 $$ assertEquals(remainder, skipped)[ FD ]
Line_11 $$ long expectedPosition-->Line_34 $$ assertEquals(expectedPosition, fsdis2.getPos())[ FD ]
Line_8 $$ final int times = totalLength / buffer.length-->Line_13 $$ for (int i = 0; i <= times; i++) [ FD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_31 $$ expectedPosition = totalLength[ FD ]
Line_24 $$ expectedPosition = (i + 1) * buffer.length-->Line_34 $$ assertEquals(expectedPosition, fsdis2.getPos())[ FD ]
Line_7 $$ final byte[] buffer = new byte[17]-->Line_36 $$ baos.write(buffer, 0, toGo)[ FD ]
Line_12 $$ int toGo-->Line_35 $$ if (toGo > 0) [ FD ]
Line_45 $$ if (close) -->Line_46 $$ fsdis1.close()[ CD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_16 $$ fsdis1.readFully(buffer, 0, toGo)[ FD ]
Line_11 $$ long expectedPosition-->Line_33 $$ assertEquals(expectedPosition, fsdis1.getPos())[ FD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_33 $$ assertEquals(expectedPosition, fsdis1.getPos())[ CD ]
Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)-->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ FD ]
Line_12 $$ int toGo-->Line_19 $$ fsdis2.readFully(buffer, 0, toGo)[ FD ]
Line_15 $$ if (i % 2 == 0) -->Line_19 $$ fsdis2.readFully(buffer, 0, toGo)[ CD ]
Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)-->Line_27 $$ assertEquals(remainder, skipped)[ FD ]
Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)-->Line_23 $$ assertEquals(buffer.length, skipped)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_3 $$ assertEquals(0, fsdis1.skip(-1))[ FD ]
Line_26 $$ if (remainder > 0) -->Line_27 $$ assertEquals(remainder, skipped)[ CD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_16 $$ fsdis1.readFully(buffer, 0, toGo)[ FD ]
Line_10 $$ long skipped-->Line_29 $$ assertEquals(0, skipped)[ FD ]
Line_45 $$ if (close) -->Line_47 $$ fsdis2.close()[ CD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_42 $$ assertEquals(0, fsdis1.skip(Long.MAX_VALUE))[ FD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_36 $$ baos.write(buffer, 0, toGo)[ FD ]
Line_10 $$ long skipped-->Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)[ FD ]
Line_5 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream(totalLength)-->Line_36 $$ baos.write(buffer, 0, toGo)[ FD ]
Line_24 $$ expectedPosition = (i + 1) * buffer.length-->Line_33 $$ assertEquals(expectedPosition, fsdis1.getPos())[ FD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_47 $$ fsdis2.close()[ FD ]
Line_35 $$ if (toGo > 0) -->Line_36 $$ baos.write(buffer, 0, toGo)[ CD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_4 $$ assertEquals(0, fsdis1.skip(0))[ FD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_35 $$ if (toGo > 0) [ CD ]
Line_15 $$ if (i % 2 == 0) -->Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)[ CD ]
Line_12 $$ int toGo-->Line_16 $$ fsdis1.readFully(buffer, 0, toGo)[ FD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_15 $$ if (i % 2 == 0) [ CD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_22 $$ if (i < times) [ CD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_34 $$ assertEquals(expectedPosition, fsdis2.getPos())[ CD ]
Line_8 $$ final int times = totalLength / buffer.length-->Line_22 $$ if (i < times) [ FD ]
Line_13 $$ for (int i = 0; i <= times; i++) -->Line_14 $$ toGo = (i < times) ? buffer.length : remainder[ CD ]
Line_10 $$ long skipped-->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ FD ]
Line_12 $$ int toGo-->Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)[ FD ]
Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)-->Line_29 $$ assertEquals(0, skipped)[ FD ]
Line_14 $$ toGo = (i < times) ? buffer.length : remainder-->Line_35 $$ if (toGo > 0) [ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_41 $$ assertEquals(0, fsdis1.skip(1))[ FD ]
Line_7 $$ final byte[] buffer = new byte[17]-->Line_16 $$ fsdis1.readFully(buffer, 0, toGo)[ FD ]
Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)-->Line_29 $$ assertEquals(0, skipped)[ FD ]
Line_12 $$ int toGo-->Line_14 $$ toGo = (i < times) ? buffer.length : remainder[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_40 $$ assertEquals(0, fsdis1.skip(0))[ FD ]
Line_20 $$ skipped = skipUntilZero(fsdis1, toGo)-->Line_23 $$ assertEquals(buffer.length, skipped)[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_39 $$ assertEquals(0, fsdis1.skip(-1))[ FD ]
Line_31 $$ expectedPosition = totalLength-->Line_33 $$ assertEquals(expectedPosition, fsdis1.getPos())[ FD ]
Line_2 $$ private static byte[] readAllWithSkip(final int totalLength, final FSDataInputStream fsdis1, final FSDataInputStream fsdis2, final boolean close) throws IOException -->Line_17 $$ skipped = skipUntilZero(fsdis2, toGo)[ FD ]
