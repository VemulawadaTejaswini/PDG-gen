Line_8 $$ GZIPInputStream gzi = new GZIPInputStream(new ByteArrayInputStream(buffer, 0, buffer.length))-->Line_17 $$ gzi.close()[ FD ]
Line_9 $$ byte[] outbuf = new byte[length]-->Line_13 $$ bos.write(outbuf, 0, len)[ FD ]
Line_11 $$ int len-->Line_13 $$ bos.write(outbuf, 0, len)[ FD ]
Line_6 $$ byte[] buffer = new byte[length]-->Line_7 $$ in.readFully(buffer)[ FD ]
Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_15 $$ byte[] decompressed = bos.toByteArray()[ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_16 $$ bos.close()[ CD ]
Line_9 $$ byte[] outbuf = new byte[length]-->Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) [ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_11 $$ int len[ CD ]
Line_11 $$ int len-->Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) [ FD ]
Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) -->Line_13 $$ bos.write(outbuf, 0, len)[ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_6 $$ byte[] buffer = new byte[length][ CD ]
Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) -->Line_13 $$ bos.write(outbuf, 0, len)[ CD ]
Line_3 $$ int length = in.readInt()-->Line_4 $$ if (length == -1)[ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_8 $$ GZIPInputStream gzi = new GZIPInputStream(new ByteArrayInputStream(buffer, 0, buffer.length))[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_18 $$ return decompressed[ CD ]
Line_4 $$ if (length == -1)-->Line_5 $$ return null[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) [ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_13 $$ bos.write(outbuf, 0, len)[ FD ]
Line_8 $$ GZIPInputStream gzi = new GZIPInputStream(new ByteArrayInputStream(buffer, 0, buffer.length))-->Line_12 $$ while ((len = gzi.read(outbuf, 0, outbuf.length)) != -1) [ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_15 $$ byte[] decompressed = bos.toByteArray()[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_3 $$ int length = in.readInt()[ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_7 $$ in.readFully(buffer)[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_9 $$ byte[] outbuf = new byte[length][ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_4 $$ if (length == -1)[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_3 $$ int length = in.readInt()[ CD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_7 $$ in.readFully(buffer)[ FD ]
Line_2 $$ public static byte[] readCompressedByteArray(DataInput in) throws IOException -->Line_17 $$ gzi.close()[ CD ]
Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_16 $$ bos.close()[ FD ]
