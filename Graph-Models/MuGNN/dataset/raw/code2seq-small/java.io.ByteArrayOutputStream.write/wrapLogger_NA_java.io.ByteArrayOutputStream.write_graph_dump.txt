Line_50 $$ if (Thread.currentThread().getId() == asyncAppenderThreadId)-->Line_51 $$ original.println("Was in async appender")[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_140 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_206 $$ return original.format(format, args)[ FD ]
Line_3 $$ final String encoding = System.getProperty(encodingProperty)-->Line_30 $$ if (encoding != null)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_37 $$ logger.info(statement)[ FD ]
Line_31 $$ statement = new String(baos.toByteArray(), encoding)-->Line_35 $$ logger.error(statement)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_76 $$ super.write(buf, off, len)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_70 $$ super.write(b)[ FD ]
Line_24 $$ if (baos.size() == 2) -->Line_26 $$ if (bytes[0] == 0xD && bytes[1] == 0xA)[ CD ]
Line_205 $$ if (isAsyncAppender())-->Line_206 $$ return original.format(format, args)[ CD ]
Line_199 $$ if (isAsyncAppender())-->Line_202 $$ return super.printf(l, format, args)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_140 $$ original.println(v)[ FD ]
Line_193 $$ if (isAsyncAppender())-->Line_196 $$ return super.printf(format, args)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_232 $$ return super.append(c)[ FD ]
Line_229 $$ if (isAsyncAppender())-->Line_232 $$ return super.append(c)[ CD ]
Line_19 $$ if (baos.size() == 1) -->Line_20 $$ byte[] bytes = baos.toByteArray()[ CD ]
Line_139 $$ if (isAsyncAppender())-->Line_142 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_158 $$ original.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_3 $$ final String encoding = System.getProperty(encodingProperty)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_48 $$ if (asyncAppenderThreadId == Long.MIN_VALUE)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_104 $$ original.print(f)[ FD ]
Line_133 $$ if (isAsyncAppender())-->Line_134 $$ original.println()[ CD ]
Line_79 $$ if (isAsyncAppender())-->Line_80 $$ original.print(b)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_211 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_98 $$ original.print(l)[ FD ]
Line_109 $$ if (isAsyncAppender())-->Line_110 $$ original.print(d)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_218 $$ return original.append(csq)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_56 $$ original.flush()[ FD ]
Line_163 $$ if (isAsyncAppender())-->Line_166 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_127 $$ if (isAsyncAppender())[ CD ]
Line_103 $$ if (isAsyncAppender())-->Line_106 $$ super.print(f)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_124 $$ super.print(s)[ FD ]
Line_163 $$ if (isAsyncAppender())-->Line_164 $$ original.println(v)[ CD ]
Line_169 $$ if (isAsyncAppender())-->Line_172 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_223 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_121 $$ if (isAsyncAppender())[ CD ]
Line_48 $$ if (asyncAppenderThreadId == Long.MIN_VALUE)-->Line_49 $$ asyncAppenderThreadId = Thread.currentThread().getName().equals("AsyncAppender-Worker-ASYNC") ? Thread.currentThread().getId() : asyncAppenderThreadId[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_122 $$ original.print(s)[ FD ]
Line_127 $$ if (isAsyncAppender())-->Line_128 $$ original.print(obj)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_202 $$ return super.printf(l, format, args)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_82 $$ super.print(b)[ FD ]
Line_211 $$ if (isAsyncAppender())-->Line_212 $$ return original.format(l, format, args)[ CD ]
Line_34 $$ if (error)-->Line_35 $$ logger.error(statement)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_80 $$ original.print(b)[ FD ]
Line_217 $$ if (isAsyncAppender())-->Line_218 $$ return original.append(csq)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_35 $$ logger.error(statement)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_178 $$ super.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_230 $$ return original.append(c)[ FD ]
Line_121 $$ if (isAsyncAppender())-->Line_122 $$ original.print(s)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_86 $$ original.print(c)[ FD ]
Line_17 $$ if (baos.size() == 0)-->Line_18 $$ return[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_152 $$ original.println(v)[ FD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_13 $$ write(b, 0, b.length)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_212 $$ return original.format(l, format, args)[ FD ]
Line_34 $$ if (error)-->Line_37 $$ logger.info(statement)[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_70 $$ super.write(b)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_218 $$ return original.append(csq)[ FD ]
Line_187 $$ if (isAsyncAppender())-->Line_188 $$ original.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_229 $$ if (isAsyncAppender())[ CD ]
Line_79 $$ if (isAsyncAppender())-->Line_82 $$ super.print(b)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_45 $$ return new PrintStream(os, true) [ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_68 $$ original.write(b)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_142 $$ super.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_146 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_146 $$ original.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_86 $$ original.print(c)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_194 $$ return original.printf(format, args)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_224 $$ return original.append(csq, start, end)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_190 $$ super.println(v)[ FD ]
Line_109 $$ if (isAsyncAppender())-->Line_112 $$ super.print(d)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_214 $$ return super.format(l, format, args)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_110 $$ original.print(d)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_166 $$ super.println(v)[ FD ]
Line_223 $$ if (isAsyncAppender())-->Line_224 $$ return original.append(csq, start, end)[ CD ]
Line_97 $$ if (isAsyncAppender())-->Line_100 $$ super.print(l)[ CD ]
Line_205 $$ if (isAsyncAppender())-->Line_208 $$ return super.format(format, args)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_230 $$ return original.append(c)[ FD ]
Line_121 $$ if (isAsyncAppender())-->Line_124 $$ super.print(s)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_196 $$ return super.printf(format, args)[ FD ]
Line_33 $$ statement = new String(baos.toByteArray())-->Line_35 $$ logger.error(statement)[ FD ]
Line_133 $$ if (isAsyncAppender())-->Line_136 $$ super.println()[ CD ]
Line_55 $$ if (isAsyncAppender())-->Line_56 $$ original.flush()[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_51 $$ original.println("Was in async appender")[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_164 $$ original.println(v)[ FD ]
Line_29 $$ String statement-->Line_35 $$ logger.error(statement)[ FD ]
Line_91 $$ if (isAsyncAppender())-->Line_92 $$ original.print(i)[ CD ]
Line_103 $$ if (isAsyncAppender())-->Line_104 $$ original.print(f)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_151 $$ if (isAsyncAppender())[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_7 $$ baos.write(b)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_100 $$ super.print(l)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_133 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_3 $$ final String encoding = System.getProperty(encodingProperty)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_182 $$ original.println(v)[ FD ]
Line_67 $$ if (isAsyncAppender())-->Line_70 $$ super.write(b)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_92 $$ original.print(i)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_92 $$ original.print(i)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_118 $$ super.print(s)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_184 $$ super.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_62 $$ original.close()[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_188 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_104 $$ original.print(f)[ FD ]
Line_33 $$ statement = new String(baos.toByteArray())-->Line_37 $$ logger.info(statement)[ FD ]
Line_73 $$ if (isAsyncAppender())-->Line_76 $$ super.write(buf, off, len)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_152 $$ original.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_134 $$ original.println()[ FD ]
Line_61 $$ if (isAsyncAppender())-->Line_64 $$ super.flush()[ CD ]
Line_91 $$ if (isAsyncAppender())-->Line_94 $$ super.print(i)[ CD ]
Line_29 $$ String statement-->Line_31 $$ statement = new String(baos.toByteArray(), encoding)[ FD ]
Line_29 $$ String statement-->Line_33 $$ statement = new String(baos.toByteArray())[ FD ]
Line_175 $$ if (isAsyncAppender())-->Line_178 $$ super.println(v)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_122 $$ original.print(s)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_115 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_85 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_220 $$ return super.append(csq)[ FD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_10 $$ baos.write(b, offset, length)[ FD ]
Line_31 $$ statement = new String(baos.toByteArray(), encoding)-->Line_33 $$ statement = new String(baos.toByteArray())[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_163 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_97 $$ if (isAsyncAppender())[ CD ]
Line_61 $$ if (isAsyncAppender())-->Line_62 $$ original.close()[ CD ]
Line_157 $$ if (isAsyncAppender())-->Line_160 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_194 $$ return original.printf(format, args)[ FD ]
Line_217 $$ if (isAsyncAppender())-->Line_220 $$ return super.append(csq)[ CD ]
Line_157 $$ if (isAsyncAppender())-->Line_158 $$ original.println(v)[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_7 $$ baos.write(b)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_112 $$ super.print(d)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_128 $$ original.print(obj)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_139 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_67 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_80 $$ original.print(b)[ FD ]
Line_151 $$ if (isAsyncAppender())-->Line_154 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_182 $$ original.println(v)[ FD ]
Line_199 $$ if (isAsyncAppender())-->Line_200 $$ return original.printf(l, format, args)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_193 $$ if (isAsyncAppender())[ CD ]
Line_19 $$ if (baos.size() == 1) -->Line_21 $$ if (bytes[0] == 0xA)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_200 $$ return original.printf(l, format, args)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_208 $$ return super.format(format, args)[ FD ]
Line_211 $$ if (isAsyncAppender())-->Line_214 $$ return super.format(l, format, args)[ CD ]
Line_73 $$ if (isAsyncAppender())-->Line_74 $$ original.write(buf, off, len)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_94 $$ super.print(i)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_73 $$ if (isAsyncAppender())[ CD ]
Line_145 $$ if (isAsyncAppender())-->Line_148 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_157 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_200 $$ return original.printf(l, format, args)[ FD ]
Line_115 $$ if (isAsyncAppender())-->Line_118 $$ super.print(s)[ CD ]
Line_139 $$ if (isAsyncAppender())-->Line_140 $$ original.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_170 $$ original.println(v)[ FD ]
Line_67 $$ if (isAsyncAppender())-->Line_68 $$ original.write(b)[ CD ]
Line_223 $$ if (isAsyncAppender())-->Line_226 $$ return super.append(csq, start, end)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_224 $$ return original.append(csq, start, end)[ FD ]
Line_43 $$ if (encoding != null)-->Line_44 $$ return new PrintStream(os, true, encoding)[ CD ]
Line_127 $$ if (isAsyncAppender())-->Line_130 $$ super.print(obj)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_74 $$ original.write(buf, off, len)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_61 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_170 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_175 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_212 $$ return original.format(l, format, args)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_116 $$ original.println(s)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_79 $$ if (isAsyncAppender())[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_10 $$ baos.write(b, offset, length)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_43 $$ if (encoding != null)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_217 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_176 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_226 $$ return super.append(csq, start, end)[ FD ]
Line_193 $$ if (isAsyncAppender())-->Line_194 $$ return original.printf(format, args)[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_68 $$ original.write(b)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_128 $$ original.print(obj)[ FD ]
Line_181 $$ if (isAsyncAppender())-->Line_184 $$ super.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_106 $$ super.print(f)[ FD ]
Line_31 $$ statement = new String(baos.toByteArray(), encoding)-->Line_37 $$ logger.info(statement)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_103 $$ if (isAsyncAppender())[ CD ]
Line_169 $$ if (isAsyncAppender())-->Line_170 $$ original.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_148 $$ super.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_4 $$ OutputStream os = new OutputStream() [ CD ]
Line_97 $$ if (isAsyncAppender())-->Line_98 $$ original.print(l)[ CD ]
Line_85 $$ if (isAsyncAppender())-->Line_86 $$ original.print(c)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_109 $$ if (isAsyncAppender())[ CD ]
Line_187 $$ if (isAsyncAppender())-->Line_190 $$ super.println(v)[ CD ]
Line_3 $$ final String encoding = System.getProperty(encodingProperty)-->Line_43 $$ if (encoding != null)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_158 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_110 $$ original.print(d)[ FD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_82 $$ super.print(b)[ FD ]
Line_55 $$ if (isAsyncAppender())-->Line_58 $$ super.flush()[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_164 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_181 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_145 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_199 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_160 $$ super.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_187 $$ if (isAsyncAppender())[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_68 $$ original.write(b)[ FD ]
Line_229 $$ if (isAsyncAppender())-->Line_230 $$ return original.append(c)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_50 $$ if (Thread.currentThread().getId() == asyncAppenderThreadId)[ CD ]
Line_30 $$ if (encoding != null)-->Line_31 $$ statement = new String(baos.toByteArray(), encoding)[ CD ]
Line_49 $$ asyncAppenderThreadId = Thread.currentThread().getName().equals("AsyncAppender-Worker-ASYNC") ? Thread.currentThread().getId() : asyncAppenderThreadId-->Line_50 $$ if (Thread.currentThread().getId() == asyncAppenderThreadId)[ FD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_80 $$ original.print(b)[ FD ]
Line_24 $$ if (baos.size() == 2) -->Line_25 $$ byte[] bytes = baos.toByteArray()[ CD ]
Line_145 $$ if (isAsyncAppender())-->Line_146 $$ original.println(v)[ CD ]
Line_151 $$ if (isAsyncAppender())-->Line_152 $$ original.println(v)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_116 $$ original.println(s)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_55 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_169 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_91 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_154 $$ super.println(v)[ FD ]
Line_21 $$ if (bytes[0] == 0xA)-->Line_22 $$ return[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_130 $$ super.print(obj)[ FD ]
Line_30 $$ if (encoding != null)-->Line_33 $$ statement = new String(baos.toByteArray())[ CD ]
Line_115 $$ if (isAsyncAppender())-->Line_116 $$ original.println(s)[ CD ]
Line_29 $$ String statement-->Line_37 $$ logger.info(statement)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_88 $$ super.print(c)[ FD ]
Line_181 $$ if (isAsyncAppender())-->Line_182 $$ original.println(v)[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_206 $$ return original.format(format, args)[ FD ]
Line_175 $$ if (isAsyncAppender())-->Line_176 $$ original.println(v)[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_188 $$ original.println(v)[ FD ]
Line_45 $$ return new PrintStream(os, true) -->Line_205 $$ if (isAsyncAppender())[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_52 $$ return Thread.currentThread().getId() == asyncAppenderThreadId[ CD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_176 $$ original.println(v)[ FD ]
Line_85 $$ if (isAsyncAppender())-->Line_88 $$ super.print(c)[ CD ]
Line_4 $$ OutputStream os = new OutputStream() -->Line_13 $$ write(b, 0, b.length)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_74 $$ original.write(buf, off, len)[ FD ]
Line_26 $$ if (bytes[0] == 0xD && bytes[1] == 0xA)-->Line_27 $$ return[ CD ]
Line_45 $$ return new PrintStream(os, true) -->Line_172 $$ super.println(v)[ FD ]
Line_2 $$ private static PrintStream wrapLogger(final Logger logger, final PrintStream original, String encodingProperty, boolean error) throws Exception -->Line_98 $$ original.print(l)[ FD ]
