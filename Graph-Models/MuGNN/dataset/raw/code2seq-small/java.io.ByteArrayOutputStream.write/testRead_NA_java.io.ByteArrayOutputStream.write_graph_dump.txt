Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_9 $$ buf = bytesOut.toByteArray()[ CD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_12 $$ BlockDecompressorStream blockDecompressorStream = new BlockDecompressorStream(bytesIn, new FakeDecompressor(), 1024)[ CD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_8 $$ blockCompressorStream.close()[ CD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_4 $$ if (bufLen > 0) [ CD ]
Line_7 $$ BlockCompressorStream blockCompressorStream = new BlockCompressorStream(bytesOut, new FakeCompressor(), 1024, 0)-->Line_8 $$ blockCompressorStream.close()[ FD ]
Line_12 $$ BlockDecompressorStream blockDecompressorStream = new BlockDecompressorStream(bytesIn, new FakeDecompressor(), 1024)-->Line_14 $$ assertEquals("return value is not -1", -1, blockDecompressorStream.read())[ FD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_5 $$ bytesOut.write(ByteBuffer.allocate(bufLen).putInt(1024).array(), 0, bufLen)[ FD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_10 $$ assertEquals("empty file compressed output size is not " + (bufLen + 4), bufLen + 4, buf.length)[ CD ]
Line_12 $$ BlockDecompressorStream blockDecompressorStream = new BlockDecompressorStream(bytesIn, new FakeDecompressor(), 1024)-->Line_18 $$ blockDecompressorStream.close()[ FD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_7 $$ BlockCompressorStream blockCompressorStream = new BlockCompressorStream(bytesOut, new FakeCompressor(), 1024, 0)[ CD ]
Line_2 $$ private void testRead(int bufLen) throws IOException -->Line_4 $$ if (bufLen > 0) [ FD ]
Line_4 $$ if (bufLen > 0) -->Line_5 $$ bytesOut.write(ByteBuffer.allocate(bufLen).putInt(1024).array(), 0, bufLen)[ CD ]
