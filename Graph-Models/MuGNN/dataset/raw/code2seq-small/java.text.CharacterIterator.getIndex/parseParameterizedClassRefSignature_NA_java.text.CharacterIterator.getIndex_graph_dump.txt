Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_18 $$ signature.previous()[ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_21 $$ canonicalText.append('$')[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_52 $$ canonicalText.setCharAt(index - 1, '$')[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_9 $$ if (signature.getIndex() > 0) [ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_13 $$ if (standAlone$) [ CD ]
Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_19 $$ standAlone$ = !StringUtil.isJavaIdentifierPart(next)[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_7 $$ switch(signature.current()) [ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_11 $$ signature.next()[ CD ]
Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_17 $$ char next = signature.next()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_45 $$ if (signature.current() == CharacterIterator.DONE) [ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_14 $$ canonicalText.append('$')[ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_10 $$ char previous = signature.previous()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_43 $$ signature.next()[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_57 $$ return canonicalText.toString()[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_34 $$ processTypeArgument(signature, canonicalText)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_32 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_5 $$ signature.next()[ FD ]
Line_48 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_49 $$ final char c = canonicalText.charAt(index)[ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_31 $$ canonicalText.append('<')[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_56 $$ signature.next()[ CD ]
Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) -->Line_20 $$ if (standAlone$) [ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_34 $$ processTypeArgument(signature, canonicalText)[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_28 $$ canonicalText.append('.')[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_4 $$ StringBuilder canonicalText = new StringBuilder()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) [ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_36 $$ canonicalText.append('>')[ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_48 $$ for (int index = 0; index < canonicalText.length(); index++) [ FD ]
Line_13 $$ if (standAlone$) -->Line_16 $$ if (signature.getIndex() + 1 < signature.getEndIndex()) [ CD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_49 $$ final char c = canonicalText.charAt(index)[ FD ]
Line_33 $$ do -->Line_34 $$ processTypeArgument(signature, canonicalText)[ CD ]
Line_12 $$ boolean standAlone$ = !StringUtil.isJavaIdentifierPart(previous)-->Line_19 $$ standAlone$ = !StringUtil.isJavaIdentifierPart(next)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_33 $$ do [ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_41 $$ canonicalText.append(signature.current())[ FD ]
Line_9 $$ if (signature.getIndex() > 0) -->Line_12 $$ boolean standAlone$ = !StringUtil.isJavaIdentifierPart(previous)[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_57 $$ return canonicalText.toString()[ CD ]
Line_51 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') -->Line_52 $$ canonicalText.setCharAt(index - 1, '$')[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_10 $$ char previous = signature.previous()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_11 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) [ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_3 $$ assert signature.current() == 'L'[ FD ]
Line_50 $$ if ('0' <= c && c <= '1') -->Line_51 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') [ CD ]
Line_17 $$ char next = signature.next()-->Line_19 $$ standAlone$ = !StringUtil.isJavaIdentifierPart(next)[ FD ]
Line_48 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_50 $$ if ('0' <= c && c <= '1') [ CD ]
Line_20 $$ if (standAlone$) -->Line_21 $$ canonicalText.append('$')[ CD ]
Line_6 $$ while (signature.current() != ';' && signature.current() != CharacterIterator.DONE) -->Line_43 $$ signature.next()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_17 $$ char next = signature.next()[ FD ]
Line_13 $$ if (standAlone$) -->Line_14 $$ canonicalText.append('$')[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_45 $$ if (signature.current() == CharacterIterator.DONE) [ FD ]
Line_4 $$ StringBuilder canonicalText = new StringBuilder()-->Line_51 $$ if (index > 0 && canonicalText.charAt(index - 1) == '.') [ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_56 $$ signature.next()[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_5 $$ signature.next()[ CD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_41 $$ canonicalText.append(signature.current())[ FD ]
Line_48 $$ for (int index = 0; index < canonicalText.length(); index++) -->Line_49 $$ final char c = canonicalText.charAt(index)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_18 $$ signature.previous()[ FD ]
Line_10 $$ char previous = signature.previous()-->Line_12 $$ boolean standAlone$ = !StringUtil.isJavaIdentifierPart(previous)[ FD ]
Line_2 $$ private static String parseParameterizedClassRefSignature(CharacterIterator signature) throws ClsFormatException -->Line_48 $$ for (int index = 0; index < canonicalText.length(); index++) [ CD ]
