Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_3 $$ int length = randomIntBetween(10, PAGE_SIZE * randomIntBetween(2, 5))[ CD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)[ CD ]
Line_9 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) -->Line_10 $$ slice.writeTo(channel)[ FD ]
Line_5 $$ int sliceOffset = randomIntBetween(1, length / 2)-->Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)[ FD ]
Line_8 $$ Path tFile = createTempFile()-->Line_9 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) [ FD ]
Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)-->Line_11 $$ assertEquals(slice.length(), channel.position())[ FD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_6 $$ int sliceLength = length - sliceOffset[ CD ]
Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)-->Line_13 $$ assertArrayEquals(slice.toBytes(), Files.readAllBytes(tFile))[ FD ]
Line_8 $$ Path tFile = createTempFile()-->Line_13 $$ assertArrayEquals(slice.toBytes(), Files.readAllBytes(tFile))[ FD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_5 $$ int sliceOffset = randomIntBetween(1, length / 2)[ CD ]
Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)-->Line_10 $$ slice.writeTo(channel)[ FD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)[ CD ]
Line_3 $$ int length = randomIntBetween(10, PAGE_SIZE * randomIntBetween(2, 5))-->Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)[ FD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_13 $$ assertArrayEquals(slice.toBytes(), Files.readAllBytes(tFile))[ CD ]
Line_9 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) -->Line_11 $$ assertEquals(slice.length(), channel.position())[ FD ]
Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)-->Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)[ FD ]
Line_6 $$ int sliceLength = length - sliceOffset-->Line_7 $$ BytesReference slice = pbr.slice(sliceOffset, sliceLength)[ FD ]
Line_2 $$ public void testSliceWriteToChannel() throws IOException -->Line_8 $$ Path tFile = createTempFile()[ CD ]
