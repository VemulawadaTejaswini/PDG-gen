Line_5 $$ Path tFile = createTempFile()-->Line_10 $$ assertArrayEquals(pbr.toBytes(), Files.readAllBytes(tFile))[ FD ]
Line_3 $$ int length = randomIntBetween(10, PAGE_SIZE * 4)-->Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)[ FD ]
Line_6 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) -->Line_8 $$ assertEquals(pbr.length(), channel.position())[ FD ]
Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)-->Line_10 $$ assertArrayEquals(pbr.toBytes(), Files.readAllBytes(tFile))[ FD ]
Line_5 $$ Path tFile = createTempFile()-->Line_6 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) [ FD ]
Line_2 $$ public void testWriteToChannel() throws IOException -->Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)[ CD ]
Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)-->Line_7 $$ pbr.writeTo(channel)[ FD ]
Line_2 $$ public void testWriteToChannel() throws IOException -->Line_10 $$ assertArrayEquals(pbr.toBytes(), Files.readAllBytes(tFile))[ CD ]
Line_4 $$ BytesReference pbr = getRandomizedPagedBytesReference(length)-->Line_8 $$ assertEquals(pbr.length(), channel.position())[ FD ]
Line_6 $$ try (FileChannel channel = FileChannel.open(tFile, StandardOpenOption.WRITE)) -->Line_7 $$ pbr.writeTo(channel)[ FD ]
Line_2 $$ public void testWriteToChannel() throws IOException -->Line_5 $$ Path tFile = createTempFile()[ CD ]
Line_2 $$ public void testWriteToChannel() throws IOException -->Line_3 $$ int length = randomIntBetween(10, PAGE_SIZE * 4)[ CD ]
