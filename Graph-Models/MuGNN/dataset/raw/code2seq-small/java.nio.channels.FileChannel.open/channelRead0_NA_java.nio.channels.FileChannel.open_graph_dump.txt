Line_4 $$ BasicFileAttributes basicFileAttributes = null-->Line_11 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_16 $$ FileChannel fileChannel = null[ CD ]
Line_6 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_11 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ FD ]
Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_4 $$ BasicFileAttributes basicFileAttributes = null[ CD ]
Line_19 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_20 $$ FileHelperUtil.delete(path)[ CD ]
Line_6 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_4 $$ BasicFileAttributes basicFileAttributes = null-->Line_6 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_8 $$ channelHandlerContext.writeAndFlush(new FileResponse(path, FileResponse.FILE_NOT_FOUND, -1, false))[ FD ]
Line_17 $$ if (basicFileAttributes.isDirectory()) -->Line_22 $$ if (fileRequest.isDeleteAfterFetch()) [ CD ]
Line_4 $$ BasicFileAttributes basicFileAttributes = null-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_11 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()-->Line_12 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) [ FD ]
Line_3 $$ Path path = fileRequest.getPath()-->Line_25 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_11 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_17 $$ if (basicFileAttributes.isDirectory()) -->Line_19 $$ if (fileRequest.isDeleteAfterFetch()) [ CD ]
Line_16 $$ FileChannel fileChannel = null-->Line_25 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_16 $$ FileChannel fileChannel = null-->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_16 $$ FileChannel fileChannel = null-->Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_4 $$ BasicFileAttributes basicFileAttributes = null-->Line_17 $$ if (basicFileAttributes.isDirectory()) [ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_19 $$ if (fileRequest.isDeleteAfterFetch()) [ FD ]
Line_17 $$ if (basicFileAttributes.isDirectory()) -->Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_13 $$ channelHandlerContext.writeAndFlush(new FileResponse(path, FileResponse.FILE_NOT_MODIFIED, -1, false))[ FD ]
Line_3 $$ Path path = fileRequest.getPath()-->Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_12 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) -->Line_14 $$ return[ CD ]
Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_16 $$ FileChannel fileChannel = null-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_12 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) [ FD ]
Line_12 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) -->Line_13 $$ channelHandlerContext.writeAndFlush(new FileResponse(path, FileResponse.FILE_NOT_MODIFIED, -1, false))[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_11 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ CD ]
Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_25 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_25 $$ fileChannel = FileChannel.open(path)-->Line_28 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_3 $$ Path path = fileRequest.getPath()[ CD ]
Line_22 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_25 $$ fileChannel = FileChannel.open(path)[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_17 $$ if (basicFileAttributes.isDirectory()) [ CD ]
Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_25 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_12 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) [ CD ]
Line_6 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_17 $$ if (basicFileAttributes.isDirectory()) [ FD ]
Line_3 $$ Path path = fileRequest.getPath()-->Line_18 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_22 $$ if (fileRequest.isDeleteAfterFetch()) [ FD ]
Line_22 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ CD ]
Line_16 $$ FileChannel fileChannel = null-->Line_23 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_3 $$ Path path = fileRequest.getPath()-->Line_6 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)[ FD ]
Line_25 $$ fileChannel = FileChannel.open(path)-->Line_27 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_3 $$ Path path = fileRequest.getPath()-->Line_20 $$ FileHelperUtil.delete(path)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, FileRequest fileRequest) throws IOException -->Line_3 $$ Path path = fileRequest.getPath()[ FD ]
