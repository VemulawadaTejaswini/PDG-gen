Line_17 $$ FileChannel fileChannel = null-->Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_26 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_26 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_18 $$ if (basicFileAttributes.isDirectory()) -->Line_20 $$ if (fileRequest.isDeleteAfterFetch()) [ CD ]
Line_26 $$ fileChannel = FileChannel.open(path)-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_7 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_7 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_18 $$ if (basicFileAttributes.isDirectory()) [ FD ]
Line_18 $$ if (basicFileAttributes.isDirectory()) -->Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ CD ]
Line_17 $$ FileChannel fileChannel = null-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_4 $$ Path path = fileRequest.getPath()-->Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_5 $$ BasicFileAttributes basicFileAttributes = null-->Line_18 $$ if (basicFileAttributes.isDirectory()) [ FD ]
Line_12 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_4 $$ Path path = fileRequest.getPath()-->Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_4 $$ Path path = fileRequest.getPath()-->Line_21 $$ FileHelperUtil.delete(path)[ FD ]
Line_23 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_26 $$ fileChannel = FileChannel.open(path)[ CD ]
Line_17 $$ FileChannel fileChannel = null-->Line_26 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_5 $$ BasicFileAttributes basicFileAttributes = null-->Line_7 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)[ FD ]
Line_5 $$ BasicFileAttributes basicFileAttributes = null-->Line_12 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ FD ]
Line_4 $$ Path path = fileRequest.getPath()-->Line_7 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)[ FD ]
Line_13 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) -->Line_14 $$ channelHandlerContext.writeAndFlush(new FileResponse(path, FileResponse.FILE_NOT_MODIFIED, -1, false))[ CD ]
Line_13 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) -->Line_15 $$ return[ CD ]
Line_17 $$ FileChannel fileChannel = null-->Line_29 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_17 $$ FileChannel fileChannel = null-->Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_5 $$ BasicFileAttributes basicFileAttributes = null-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_4 $$ Path path = fileRequest.getPath()-->Line_26 $$ fileChannel = FileChannel.open(path)[ FD ]
Line_18 $$ if (basicFileAttributes.isDirectory()) -->Line_23 $$ if (fileRequest.isDeleteAfterFetch()) [ CD ]
Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ FD ]
Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_28 $$ channelHandlerContext.write(new FileResponse(path, fileChannel.size(), fileTime.toMillis(), basicFileAttributes.isDirectory()))[ FD ]
Line_7 $$ basicFileAttributes = Files.readAttributes(path, BasicFileAttributes.class)-->Line_12 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()[ FD ]
Line_20 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_21 $$ FileHelperUtil.delete(path)[ CD ]
Line_23 $$ if (fileRequest.isDeleteAfterFetch()) -->Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)[ CD ]
Line_19 $$ fileChannel = FileChannel.open(FileHelperUtil.zip(path, FileHelperUtil.TEMP_DIR_PATH, _compressionLevel), StandardOpenOption.DELETE_ON_CLOSE)-->Line_29 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_24 $$ fileChannel = FileChannel.open(path, StandardOpenOption.DELETE_ON_CLOSE)-->Line_29 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
Line_12 $$ FileTime fileTime = basicFileAttributes.lastModifiedTime()-->Line_13 $$ if (fileTime.toMillis() <= fileRequest.getLastModifiedTime()) [ FD ]
Line_26 $$ fileChannel = FileChannel.open(path)-->Line_29 $$ channelHandlerContext.writeAndFlush(new DefaultFileRegion(fileChannel, 0, fileChannel.size()))[ FD ]
