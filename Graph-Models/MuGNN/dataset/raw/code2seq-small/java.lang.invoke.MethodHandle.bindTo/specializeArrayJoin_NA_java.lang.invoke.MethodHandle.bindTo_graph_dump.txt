Line_3 $$ Type type = types.get("T")-->Line_9 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(castFunction.getMethodHandle()).bindTo(type), true)[ FD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_5 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(null).bindTo(type), true)[ FD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_9 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(castFunction.getMethodHandle()).bindTo(type), true)[ FD ]
Line_8 $$ ScalarFunctionImplementation castFunction = functionRegistry.getScalarFunctionImplementation(internalOperator(CAST.name(), VARCHAR_TYPE_SIGNATURE, ImmutableList.of(type.getTypeSignature())))-->Line_9 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(castFunction.getMethodHandle()).bindTo(type), true)[ FD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_3 $$ Type type = types.get("T")[ FD ]
Line_3 $$ Type type = types.get("T")-->Line_4 $$ if (type instanceof UnknownType) [ FD ]
Line_3 $$ Type type = types.get("T")-->Line_11 $$ throw new PrestoException(INVALID_FUNCTION_ARGUMENT, format("Input type %s not supported", type), e)[ FD ]
Line_4 $$ if (type instanceof UnknownType) -->Line_5 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(null).bindTo(type), true)[ CD ]
Line_3 $$ Type type = types.get("T")-->Line_8 $$ ScalarFunctionImplementation castFunction = functionRegistry.getScalarFunctionImplementation(internalOperator(CAST.name(), VARCHAR_TYPE_SIGNATURE, ImmutableList.of(type.getTypeSignature())))[ FD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_8 $$ ScalarFunctionImplementation castFunction = functionRegistry.getScalarFunctionImplementation(internalOperator(CAST.name(), VARCHAR_TYPE_SIGNATURE, ImmutableList.of(type.getTypeSignature())))[ FD ]
Line_3 $$ Type type = types.get("T")-->Line_5 $$ return new ScalarFunctionImplementation(false, nullableArguments, methodHandle.bindTo(null).bindTo(type), true)[ FD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_4 $$ if (type instanceof UnknownType) [ CD ]
Line_2 $$ private static ScalarFunctionImplementation specializeArrayJoin(Map<String, Type> types, FunctionRegistry functionRegistry, List<Boolean> nullableArguments, Signature signature, MethodHandle methodHandle) -->Line_3 $$ Type type = types.get("T")[ CD ]
