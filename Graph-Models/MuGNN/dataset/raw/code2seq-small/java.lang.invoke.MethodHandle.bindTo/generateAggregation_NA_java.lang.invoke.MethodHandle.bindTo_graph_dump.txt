Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_20 $$ stateInterface = SliceState.class[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ CD ]
Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION-->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_8 $$ AccumulatorStateSerializer<?> stateSerializer[ CD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_20 $$ stateInterface = SliceState.class[ FD ]
Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION-->Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION[ FD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_20 $$ stateInterface = SliceState.class[ FD ]
Line_5 $$ MethodHandle inputFunction-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_14 $$ if (type.getJavaType() == double.class) [ CD ]
Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION-->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ FD ]
Line_14 $$ if (type.getJavaType() == double.class) -->Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION[ CD ]
Line_12 $$ inputFunction = LONG_INPUT_FUNCTION-->Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_40 $$ AggregationMetadata metadata = new AggregationMetadata(generateAggregationName(getSignature().getName(), type, inputTypes), inputParameterMetadata, inputFunction, inputParameterMetadata, inputFunction, null, outputFunction, stateInterface, stateSerializer, stateFactory, type, false)[ CD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())[ CD ]
Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION-->Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION[ FD ]
Line_25 $$ stateInterface = NullableBooleanState.class-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ CD ]
Line_19 $$ if (type.getJavaType() == Slice.class) -->Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION[ CD ]
Line_5 $$ MethodHandle inputFunction-->Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_9 $$ if (type.getJavaType() == long.class) [ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_39 $$ List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type)[ FD ]
Line_14 $$ if (type.getJavaType() == double.class) -->Line_15 $$ stateInterface = NullableDoubleState.class[ CD ]
Line_14 $$ if (type.getJavaType() == double.class) -->Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION[ CD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_24 $$ if (type.getJavaType() == boolean.class) [ FD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_25 $$ stateInterface = NullableBooleanState.class[ CD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_10 $$ stateInterface = NullableLongState.class[ FD ]
Line_20 $$ stateInterface = SliceState.class-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ CD ]
Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_5 $$ MethodHandle inputFunction-->Line_12 $$ inputFunction = LONG_INPUT_FUNCTION[ FD ]
Line_20 $$ stateInterface = SliceState.class-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_25 $$ stateInterface = NullableBooleanState.class-->Line_30 $$ stateInterface = BlockState.class[ FD ]
Line_5 $$ MethodHandle inputFunction-->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_5 $$ MethodHandle inputFunction[ CD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_4 $$ List<Type> inputTypes = ImmutableList.of(type)-->Line_40 $$ AggregationMetadata metadata = new AggregationMetadata(generateAggregationName(getSignature().getName(), type, inputTypes), inputParameterMetadata, inputFunction, inputParameterMetadata, inputFunction, null, outputFunction, stateInterface, stateSerializer, stateFactory, type, false)[ FD ]
Line_5 $$ MethodHandle inputFunction-->Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION[ FD ]
Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_15 $$ stateInterface = NullableDoubleState.class[ FD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ CD ]
Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ FD ]
Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION-->Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION[ FD ]
Line_6 $$ MethodHandle outputFunction-->Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION[ FD ]
Line_12 $$ inputFunction = LONG_INPUT_FUNCTION-->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_12 $$ inputFunction = LONG_INPUT_FUNCTION-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_14 $$ if (type.getJavaType() == double.class) -->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ CD ]
Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION-->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ FD ]
Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION-->Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ CD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_20 $$ stateInterface = SliceState.class-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_19 $$ if (type.getJavaType() == Slice.class) [ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_30 $$ stateInterface = BlockState.class[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_12 $$ inputFunction = LONG_INPUT_FUNCTION-->Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION[ FD ]
Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION-->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ FD ]
Line_6 $$ MethodHandle outputFunction-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_14 $$ if (type.getJavaType() == double.class) [ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_41 $$ GenericAccumulatorFactoryBinder factory = new AccumulatorCompiler().generateAccumulatorFactoryBinder(metadata, classLoader)[ CD ]
Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION-->Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION[ FD ]
Line_6 $$ MethodHandle outputFunction-->Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION[ FD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_42 $$ return new InternalAggregationFunction(getSignature().getName(), inputTypes, intermediateType, type, true, false, factory)[ CD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_30 $$ stateInterface = BlockState.class[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_30 $$ stateInterface = BlockState.class[ FD ]
Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_4 $$ List<Type> inputTypes = ImmutableList.of(type)[ FD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_19 $$ if (type.getJavaType() == Slice.class) -->Line_20 $$ stateInterface = SliceState.class[ CD ]
Line_19 $$ if (type.getJavaType() == Slice.class) -->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ CD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ CD ]
Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_14 $$ if (type.getJavaType() == double.class) -->Line_19 $$ if (type.getJavaType() == Slice.class) [ CD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ CD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_20 $$ stateInterface = SliceState.class-->Line_25 $$ stateInterface = NullableBooleanState.class[ FD ]
Line_25 $$ stateInterface = NullableBooleanState.class-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ FD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION[ CD ]
Line_5 $$ MethodHandle inputFunction-->Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION[ FD ]
Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_4 $$ List<Type> inputTypes = ImmutableList.of(type)[ CD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_25 $$ stateInterface = NullableBooleanState.class[ FD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_22 $$ inputFunction = SLICE_INPUT_FUNCTION-->Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION[ FD ]
Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION-->Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION[ FD ]
Line_12 $$ inputFunction = LONG_INPUT_FUNCTION-->Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION-->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ FD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_10 $$ stateInterface = NullableLongState.class[ CD ]
Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_26 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION-->Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION[ FD ]
Line_31 $$ stateSerializer = new BlockStateSerializer(type)-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_40 $$ AggregationMetadata metadata = new AggregationMetadata(generateAggregationName(getSignature().getName(), type, inputTypes), inputParameterMetadata, inputFunction, inputParameterMetadata, inputFunction, null, outputFunction, stateInterface, stateSerializer, stateFactory, type, false)-->Line_41 $$ GenericAccumulatorFactoryBinder factory = new AccumulatorCompiler().generateAccumulatorFactoryBinder(metadata, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ CD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_6 $$ MethodHandle outputFunction[ CD ]
Line_9 $$ if (type.getJavaType() == long.class) -->Line_12 $$ inputFunction = LONG_INPUT_FUNCTION[ CD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_39 $$ List<ParameterMetadata> inputParameterMetadata = createInputParameterMetadata(type)[ CD ]
Line_6 $$ MethodHandle outputFunction-->Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION[ FD ]
Line_7 $$ Class<? extends AccumulatorState> stateInterface-->Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_9 $$ if (type.getJavaType() == long.class) [ CD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_7 $$ Class<? extends AccumulatorState> stateInterface[ CD ]
Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_25 $$ stateInterface = NullableBooleanState.class[ FD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_25 $$ stateInterface = NullableBooleanState.class[ FD ]
Line_19 $$ if (type.getJavaType() == Slice.class) -->Line_23 $$ outputFunction = SLICE_OUTPUT_FUNCTION[ CD ]
Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ FD ]
Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ FD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_20 $$ stateInterface = SliceState.class-->Line_30 $$ stateInterface = BlockState.class[ FD ]
Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION-->Line_36 $$ outputFunction = outputFunction.bindTo(type)[ FD ]
Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_38 $$ Type intermediateType = stateSerializer.getSerializedType()[ FD ]
Line_6 $$ MethodHandle outputFunction-->Line_18 $$ outputFunction = DOUBLE_OUTPUT_FUNCTION[ FD ]
Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_15 $$ stateInterface = NullableDoubleState.class-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_19 $$ if (type.getJavaType() == Slice.class) -->Line_24 $$ if (type.getJavaType() == boolean.class) [ CD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_31 $$ stateSerializer = new BlockStateSerializer(type)[ CD ]
Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION-->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ FD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_6 $$ MethodHandle outputFunction-->Line_33 $$ outputFunction = BLOCK_OUTPUT_FUNCTION[ FD ]
Line_10 $$ stateInterface = NullableLongState.class-->Line_15 $$ stateInterface = NullableDoubleState.class[ FD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_30 $$ stateInterface = BlockState.class-->Line_37 $$ AccumulatorStateFactory<?> stateFactory = compiler.generateStateFactory(stateInterface, classLoader)[ FD ]
Line_8 $$ AccumulatorStateSerializer<?> stateSerializer-->Line_21 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_30 $$ stateInterface = BlockState.class[ CD ]
Line_3 $$ DynamicClassLoader classLoader = new DynamicClassLoader(AbstractMinMaxAggregationFunction.class.getClassLoader())-->Line_41 $$ GenericAccumulatorFactoryBinder factory = new AccumulatorCompiler().generateAccumulatorFactoryBinder(metadata, classLoader)[ FD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION[ CD ]
Line_13 $$ outputFunction = LONG_OUTPUT_FUNCTION-->Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION[ FD ]
Line_11 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)-->Line_16 $$ stateSerializer = compiler.generateStateSerializer(stateInterface, classLoader)[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_27 $$ inputFunction = BOOLEAN_INPUT_FUNCTION-->Line_32 $$ inputFunction = BLOCK_INPUT_FUNCTION[ FD ]
Line_2 $$ protected InternalAggregationFunction generateAggregation(Type type, MethodHandle compareMethodHandle) -->Line_40 $$ AggregationMetadata metadata = new AggregationMetadata(generateAggregationName(getSignature().getName(), type, inputTypes), inputParameterMetadata, inputFunction, inputParameterMetadata, inputFunction, null, outputFunction, stateInterface, stateSerializer, stateFactory, type, false)[ FD ]
Line_17 $$ inputFunction = DOUBLE_INPUT_FUNCTION-->Line_35 $$ inputFunction = inputFunction.bindTo(compareMethodHandle)[ FD ]
Line_24 $$ if (type.getJavaType() == boolean.class) -->Line_28 $$ outputFunction = BOOLEAN_OUTPUT_FUNCTION[ CD ]
