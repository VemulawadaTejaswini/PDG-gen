Line_6 $$ for (int row = firstVisibleRow; row <= lastVisibleRow; row++) -->Line_8 $$ final Rectangle bounds = tr.getRowBounds(row)[ FD ]
Line_10 $$ if (color != null) -->Line_12 $$ g.fillRect(0, bounds.y, tr.getWidth(), bounds.height)[ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_6 $$ for (int row = firstVisibleRow; row <= lastVisibleRow; row++) [ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) [ FD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_5 $$ final int lastVisibleRow = tr.getClosestRowForLocation(rect.x, rect.y + rect.height)[ FD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_5 $$ final int lastVisibleRow = tr.getClosestRowForLocation(rect.x, rect.y + rect.height)[ CD ]
Line_9 $$ Color color = UIUtil.getTreeSelectionBackground(tr.hasFocus())-->Line_11 $$ g.setColor(color)[ FD ]
Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) -->Line_8 $$ final Rectangle bounds = tr.getRowBounds(row)[ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_12 $$ g.fillRect(0, bounds.y, tr.getWidth(), bounds.height)[ FD ]
Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) -->Line_9 $$ Color color = UIUtil.getTreeSelectionBackground(tr.hasFocus())[ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_3 $$ final Rectangle rect = tr.getVisibleRect()[ FD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_3 $$ final Rectangle rect = tr.getVisibleRect()[ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_8 $$ final Rectangle bounds = tr.getRowBounds(row)[ FD ]
Line_6 $$ for (int row = firstVisibleRow; row <= lastVisibleRow; row++) -->Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) [ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_4 $$ final int firstVisibleRow = tr.getClosestRowForLocation(rect.x, rect.y)[ FD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_11 $$ g.setColor(color)[ FD ]
Line_10 $$ if (color != null) -->Line_11 $$ g.setColor(color)[ CD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_4 $$ final int firstVisibleRow = tr.getClosestRowForLocation(rect.x, rect.y)[ CD ]
Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) -->Line_10 $$ if (color != null) [ CD ]
Line_6 $$ for (int row = firstVisibleRow; row <= lastVisibleRow; row++) -->Line_7 $$ if (tr.getSelectionModel().isRowSelected(row) && myWideSelectionCondition.value(row)) [ FD ]
Line_9 $$ Color color = UIUtil.getTreeSelectionBackground(tr.hasFocus())-->Line_10 $$ if (color != null) [ FD ]
Line_5 $$ final int lastVisibleRow = tr.getClosestRowForLocation(rect.x, rect.y + rect.height)-->Line_6 $$ for (int row = firstVisibleRow; row <= lastVisibleRow; row++) [ FD ]
Line_2 $$ protected void paintSelectedRows(Graphics g, JTree tr) -->Line_9 $$ Color color = UIUtil.getTreeSelectionBackground(tr.hasFocus())[ FD ]
