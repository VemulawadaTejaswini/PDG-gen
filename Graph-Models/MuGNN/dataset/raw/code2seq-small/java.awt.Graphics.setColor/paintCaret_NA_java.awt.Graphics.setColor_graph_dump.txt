Line_35 $$ if (startVisualColumn < targetVisualColumn && endVisualColumn > targetVisualColumn || startVisualColumn == targetVisualColumn && !isRtl || endVisualColumn == targetVisualColumn && isRtl) -->Line_37 $$ fragment.draw(g, startX, y + myView.getAscent(), targetVisualColumn - startVisualColumn - (isRtl ? 1 : 0), targetVisualColumn - startVisualColumn + (isRtl ? 0 : 1))[ CD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_37 $$ fragment.draw(g, startX, y + myView.getAscent(), targetVisualColumn - startVisualColumn - (isRtl ? 1 : 0), targetVisualColumn - startVisualColumn + (isRtl ? 0 : 1))[ FD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_3 $$ EditorImpl.CaretRectangle[] locations = myEditor.getCaretLocations(true)[ CD ]
Line_30 $$ if (myDocument.getTextLength() > 0 && caret != null) -->Line_31 $$ int targetVisualColumn = caret.getVisualPosition().column[ CD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_36 $$ g.setColor(ColorUtil.isDark(caretColor) ? CARET_LIGHT : CARET_DARK)[ FD ]
Line_16 $$ Caret caret = location.myCaret-->Line_31 $$ int targetVisualColumn = caret.getVisualPosition().column[ FD ]
Line_10 $$ if (caretColor == null)-->Line_11 $$ caretColor = new JBColor(CARET_DARK, CARET_LIGHT)[ CD ]
Line_8 $$ EditorSettings settings = myEditor.getSettings()-->Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) [ FD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_28 $$ int startX = Math.max(0, isRtl ? x - width : x)[ CD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_8 $$ EditorSettings settings = myEditor.getSettings()[ CD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_29 $$ g.fillRect(startX, y, width, lineHeight - 1)[ CD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_23 $$ if (myDocument.getTextLength() > 0 && caret != null && !myView.getTextLayoutCache().getLineLayout(caret.getLogicalPosition().line).isLtr()) [ CD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ CD ]
Line_27 $$ int width = location.myWidth-->Line_29 $$ g.fillRect(startX, y, width, lineHeight - 1)[ FD ]
Line_15 $$ int y = location.myPoint.y-->Line_29 $$ g.fillRect(startX, y, width, lineHeight - 1)[ FD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_20 $$ if (x > 0 && lineWidth > 1)[ CD ]
Line_9 $$ Color caretColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR)-->Line_12 $$ g.setColor(caretColor)[ FD ]
Line_14 $$ int x = location.myPoint.x-->Line_21 $$ x--[ FD ]
Line_9 $$ Color caretColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR)-->Line_11 $$ caretColor = new JBColor(CARET_DARK, CARET_LIGHT)[ FD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_19 $$ int lineWidth = JBUI.scale(settings.getLineCursorWidth())[ CD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)[ FD ]
Line_20 $$ if (x > 0 && lineWidth > 1)-->Line_21 $$ x--[ CD ]
Line_32 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, caret.getVisualLineStart(), false)) -->Line_33 $$ int startVisualColumn = fragment.getStartVisualColumn()[ FD ]
Line_32 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, caret.getVisualLineStart(), false)) -->Line_37 $$ fragment.draw(g, startX, y + myView.getAscent(), targetVisualColumn - startVisualColumn - (isRtl ? 1 : 0), targetVisualColumn - startVisualColumn + (isRtl ? 0 : 1))[ FD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_27 $$ int width = location.myWidth[ CD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_24 $$ g.fillPolygon(new int[] [ FD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_4 $$ if (locations == null)[ CD ]
Line_4 $$ if (locations == null)-->Line_5 $$ return[ CD ]
Line_35 $$ if (startVisualColumn < targetVisualColumn && endVisualColumn > targetVisualColumn || startVisualColumn == targetVisualColumn && !isRtl || endVisualColumn == targetVisualColumn && isRtl) -->Line_36 $$ g.setColor(ColorUtil.isDark(caretColor) ? CARET_LIGHT : CARET_DARK)[ CD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_12 $$ g.setColor(caretColor)[ FD ]
Line_14 $$ int x = location.myPoint.x-->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ FD ]
Line_28 $$ int startX = Math.max(0, isRtl ? x - width : x)-->Line_29 $$ g.fillRect(startX, y, width, lineHeight - 1)[ FD ]
Line_16 $$ Caret caret = location.myCaret-->Line_23 $$ if (myDocument.getTextLength() > 0 && caret != null && !myView.getTextLayoutCache().getLineLayout(caret.getLogicalPosition().line).isLtr()) [ FD ]
Line_8 $$ EditorSettings settings = myEditor.getSettings()-->Line_19 $$ int lineWidth = JBUI.scale(settings.getLineCursorWidth())[ FD ]
Line_9 $$ Color caretColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR)-->Line_10 $$ if (caretColor == null)[ FD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)[ CD ]
Line_9 $$ Color caretColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR)-->Line_36 $$ g.setColor(ColorUtil.isDark(caretColor) ? CARET_LIGHT : CARET_DARK)[ FD ]
Line_28 $$ int startX = Math.max(0, isRtl ? x - width : x)-->Line_37 $$ fragment.draw(g, startX, y + myView.getAscent(), targetVisualColumn - startVisualColumn - (isRtl ? 1 : 0), targetVisualColumn - startVisualColumn + (isRtl ? 0 : 1))[ FD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_29 $$ g.fillRect(startX, y, width, lineHeight - 1)[ FD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_12 $$ g.setColor(caretColor)[ CD ]
Line_18 $$ if (myEditor.isInsertMode() != settings.isBlockCursor()) -->Line_30 $$ if (myDocument.getTextLength() > 0 && caret != null) [ CD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_9 $$ Color caretColor = myEditor.getColorsScheme().getColor(EditorColors.CARET_COLOR)[ CD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_10 $$ if (caretColor == null)[ CD ]
Line_19 $$ int lineWidth = JBUI.scale(settings.getLineCursorWidth())-->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ FD ]
Line_3 $$ EditorImpl.CaretRectangle[] locations = myEditor.getCaretLocations(true)-->Line_4 $$ if (locations == null)[ FD ]
Line_23 $$ if (myDocument.getTextLength() > 0 && caret != null && !myView.getTextLayoutCache().getLineLayout(caret.getLogicalPosition().line).isLtr()) -->Line_24 $$ g.fillPolygon(new int[] [ CD ]
Line_15 $$ int y = location.myPoint.y-->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ FD ]
Line_32 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, caret.getVisualLineStart(), false)) -->Line_34 $$ int endVisualColumn = fragment.getEndVisualColumn()[ FD ]
Line_7 $$ int lineHeight = myView.getLineHeight()-->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ FD ]
Line_6 $$ Graphics2D g = IdeBackgroundUtil.getOriginalGraphics(g_)-->Line_22 $$ g.fillRect(x, y, lineWidth, lineHeight)[ FD ]
Line_11 $$ caretColor = new JBColor(CARET_DARK, CARET_LIGHT)-->Line_12 $$ g.setColor(caretColor)[ FD ]
Line_11 $$ caretColor = new JBColor(CARET_DARK, CARET_LIGHT)-->Line_36 $$ g.setColor(ColorUtil.isDark(caretColor) ? CARET_LIGHT : CARET_DARK)[ FD ]
Line_17 $$ boolean isRtl = location.myIsRtl-->Line_35 $$ if (startVisualColumn < targetVisualColumn && endVisualColumn > targetVisualColumn || startVisualColumn == targetVisualColumn && !isRtl || endVisualColumn == targetVisualColumn && isRtl) [ FD ]
Line_2 $$ private void paintCaret(Graphics2D g_) -->Line_7 $$ int lineHeight = myView.getLineHeight()[ CD ]
Line_16 $$ Caret caret = location.myCaret-->Line_32 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, caret.getVisualLineStart(), false)) [ FD ]
