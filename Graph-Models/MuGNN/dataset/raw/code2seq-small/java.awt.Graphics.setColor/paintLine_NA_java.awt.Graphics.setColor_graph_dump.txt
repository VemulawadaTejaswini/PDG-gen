Line_7 $$ if (hasArrow) -->Line_8 $$ Pair<Integer, Integer> rotate1 = rotate(x1, y1, startArrowX, startArrowY, Math.sqrt(ARROW_ANGLE_COS2), Math.sqrt(1 - ARROW_ANGLE_COS2), ARROW_LENGTH * getRowHeight())[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_5 $$ setStroke(isUsual || hasArrow, isSelected, length)[ FD ]
Line_7 $$ if (hasArrow) -->Line_9 $$ Pair<Integer, Integer> rotate2 = rotate(x1, y1, startArrowX, startArrowY, Math.sqrt(ARROW_ANGLE_COS2), -Math.sqrt(1 - ARROW_ANGLE_COS2), ARROW_LENGTH * getRowHeight())[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_6 $$ g2.drawLine(x1, y1, x2, y2)[ FD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_8 $$ Pair<Integer, Integer> rotate1 = rotate(x1, y1, startArrowX, startArrowY, Math.sqrt(ARROW_ANGLE_COS2), Math.sqrt(1 - ARROW_ANGLE_COS2), ARROW_LENGTH * getRowHeight())[ FD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_9 $$ Pair<Integer, Integer> rotate2 = rotate(x1, y1, startArrowX, startArrowY, Math.sqrt(ARROW_ANGLE_COS2), -Math.sqrt(1 - ARROW_ANGLE_COS2), ARROW_LENGTH * getRowHeight())[ FD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_3 $$ g2.setColor(color)[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_3 $$ g2.setColor(color)[ FD ]
Line_4 $$ int length = (x1 == x2) ? getRowHeight() : (int) Math.ceil(Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)))-->Line_5 $$ setStroke(isUsual || hasArrow, isSelected, length)[ FD ]
Line_7 $$ if (hasArrow) -->Line_11 $$ g2.drawLine(startArrowX, startArrowY, rotate2.first, rotate2.second)[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_5 $$ setStroke(isUsual || hasArrow, isSelected, length)[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_7 $$ if (hasArrow) [ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_11 $$ g2.drawLine(startArrowX, startArrowY, rotate2.first, rotate2.second)[ FD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_4 $$ int length = (x1 == x2) ? getRowHeight() : (int) Math.ceil(Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)))[ CD ]
Line_7 $$ if (hasArrow) -->Line_10 $$ g2.drawLine(startArrowX, startArrowY, rotate1.first, rotate1.second)[ CD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_10 $$ g2.drawLine(startArrowX, startArrowY, rotate1.first, rotate1.second)[ FD ]
Line_2 $$ private void paintLine(Color color, boolean hasArrow, int x1, int y1, int x2, int y2, int startArrowX, int startArrowY, boolean isUsual, boolean isSelected) -->Line_6 $$ g2.drawLine(x1, y1, x2, y2)[ CD ]
