Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_11 $$ int endShift = clip.x + clip.width[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_17 $$ if (lineSeparatorRenderer != null) [ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_4 $$ LineSeparatorRenderer lineSeparatorRenderer = marker.getLineSeparatorRenderer()[ CD ]
Line_9 $$ int visualLine = myView.logicalToVisualPosition(new LogicalPosition(line + (marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? 0 : 1), 0), false).line-->Line_10 $$ int y = myView.visualLineToY(visualLine) - 1[ FD ]
Line_4 $$ LineSeparatorRenderer lineSeparatorRenderer = marker.getLineSeparatorRenderer()-->Line_17 $$ if (lineSeparatorRenderer != null) [ FD ]
Line_14 $$ endShift = Math.min(endShift, settings.getRightMargin(myEditor.getProject()) * myView.getPlainSpaceWidth())-->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ FD ]
Line_5 $$ if (separatorColor == null && lineSeparatorRenderer == null) -->Line_6 $$ return[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_3 $$ Color separatorColor = marker.getLineSeparatorColor()[ CD ]
Line_14 $$ endShift = Math.min(endShift, settings.getRightMargin(myEditor.getProject()) * myView.getPlainSpaceWidth())-->Line_20 $$ UIUtil.drawLine(g, 0, y, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_10 $$ int y = myView.visualLineToY(visualLine) - 1[ CD ]
Line_13 $$ if (settings.isRightMarginShown() && myEditor.getColorsScheme().getColor(EditorColors.RIGHT_MARGIN_COLOR) != null) -->Line_14 $$ endShift = Math.min(endShift, settings.getRightMargin(myEditor.getProject()) * myView.getPlainSpaceWidth())[ CD ]
Line_10 $$ int y = myView.visualLineToY(visualLine) - 1-->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_12 $$ EditorSettings settings = myEditor.getSettings()[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_16 $$ g.setColor(separatorColor)[ FD ]
Line_10 $$ int y = myView.visualLineToY(visualLine) - 1-->Line_20 $$ UIUtil.drawLine(g, 0, y, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_16 $$ g.setColor(separatorColor)[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_5 $$ if (separatorColor == null && lineSeparatorRenderer == null) [ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_9 $$ int visualLine = myView.logicalToVisualPosition(new LogicalPosition(line + (marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? 0 : 1), 0), false).line[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_3 $$ Color separatorColor = marker.getLineSeparatorColor()[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_4 $$ LineSeparatorRenderer lineSeparatorRenderer = marker.getLineSeparatorRenderer()[ FD ]
Line_12 $$ EditorSettings settings = myEditor.getSettings()-->Line_14 $$ endShift = Math.min(endShift, settings.getRightMargin(myEditor.getProject()) * myView.getPlainSpaceWidth())[ FD ]
Line_12 $$ EditorSettings settings = myEditor.getSettings()-->Line_13 $$ if (settings.isRightMarginShown() && myEditor.getColorsScheme().getColor(EditorColors.RIGHT_MARGIN_COLOR) != null) [ FD ]
Line_3 $$ Color separatorColor = marker.getLineSeparatorColor()-->Line_16 $$ g.setColor(separatorColor)[ FD ]
Line_11 $$ int endShift = clip.x + clip.width-->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_8 $$ int line = myDocument.getLineNumber(marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? marker.getStartOffset() : marker.getEndOffset())[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_20 $$ UIUtil.drawLine(g, 0, y, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ FD ]
Line_17 $$ if (lineSeparatorRenderer != null) -->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ CD ]
Line_11 $$ int endShift = clip.x + clip.width-->Line_14 $$ endShift = Math.min(endShift, settings.getRightMargin(myEditor.getProject()) * myView.getPlainSpaceWidth())[ FD ]
Line_17 $$ if (lineSeparatorRenderer != null) -->Line_20 $$ UIUtil.drawLine(g, 0, y, endShift, y)[ CD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_9 $$ int visualLine = myView.logicalToVisualPosition(new LogicalPosition(line + (marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? 0 : 1), 0), false).line[ CD ]
Line_11 $$ int endShift = clip.x + clip.width-->Line_20 $$ UIUtil.drawLine(g, 0, y, endShift, y)[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_8 $$ int line = myDocument.getLineNumber(marker.getLineSeparatorPlacement() == SeparatorPlacement.TOP ? marker.getStartOffset() : marker.getEndOffset())[ FD ]
Line_2 $$ private void paintLineMarkerSeparator(RangeHighlighter marker, Rectangle clip, Graphics g) -->Line_13 $$ if (settings.isRightMarginShown() && myEditor.getColorsScheme().getColor(EditorColors.RIGHT_MARGIN_COLOR) != null) [ CD ]
Line_4 $$ LineSeparatorRenderer lineSeparatorRenderer = marker.getLineSeparatorRenderer()-->Line_18 $$ lineSeparatorRenderer.drawLine(g, 0, endShift, y)[ FD ]
