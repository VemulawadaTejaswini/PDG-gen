Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_82 $$ copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated)[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_21 $$ height += paddingY * 2[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_15 $$ width -= settings.paddingX[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_30 $$ page.imageHeight = height[ FD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_60 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_62 $$ plot(canvas, rectX - i, rectY + iw - 1 - j, image.getRGB(j, 0))[ FD ]
Line_46 $$ int ih = image.getHeight()-->Line_86 $$ copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated)[ FD ]
Line_101 $$ if (settings.debug) -->Line_102 $$ g.setColor(Color.magenta)[ CD ]
Line_32 $$ while (true) -->Line_34 $$ if (!outputFile.exists())[ CD ]
Line_43 $$ for (Rect rect : page.outputRects) -->Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_57 $$ plot(canvas, rectX + ih - 1 + j, rectY - i, image.getRGB(iw - 1, ih - 1))[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_115 $$ param.setCompressionQuality(settings.jpegQuality)[ CD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_87 $$ copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated)[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_74 $$ for (int j = 1; j <= amountY; j++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_62 $$ plot(canvas, rectX - i, rectY + iw - 1 - j, image.getRGB(j, 0))[ FD ]
Line_48 $$ if (settings.duplicatePadding) -->Line_51 $$ if (rect.rotated) [ CD ]
Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)-->Line_34 $$ if (!outputFile.exists())[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_67 $$ for (int j = 0; j < ih; j++) [ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ FD ]
Line_15 $$ width -= settings.paddingX-->Line_29 $$ page.imageWidth = width[ FD ]
Line_67 $$ for (int j = 0; j < ih; j++) -->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ CD ]
Line_9 $$ int paddingX = settings.paddingX-->Line_18 $$ page.x = paddingX[ FD ]
Line_67 $$ for (int j = 0; j < ih; j++) -->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ FD ]
Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)-->Line_129 $$ ios.close()[ FD ]
Line_49 $$ int amountX = settings.paddingX / 2-->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_83 $$ copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated)[ FD ]
Line_111 $$ Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg")-->Line_112 $$ ImageWriter writer = writers.next()[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ FD ]
Line_24 $$ width = MathUtils.nextPowerOfTwo(width)-->Line_27 $$ width = Math.max(settings.minWidth, width)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_117 $$ writer.setOutput(ios)[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ FD ]
Line_112 $$ ImageWriter writer = writers.next()-->Line_118 $$ writer.write(null, new IIOImage(canvas, null, null), param)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_120 $$ if (settings.premultiplyAlpha)[ CD ]
Line_8 $$ int width = page.width, height = page.height-->Line_29 $$ page.imageWidth = width[ FD ]
Line_105 $$ ImageOutputStream ios = null-->Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)[ FD ]
Line_16 $$ height -= settings.paddingY-->Line_28 $$ height = Math.max(settings.minHeight, height)[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_54 $$ plot(canvas, rectX - j, rectY + iw - 1 + i, image.getRGB(0, 0))[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_91 $$ copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_112 $$ ImageWriter writer = writers.next()[ CD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_110 $$ canvas = newImage[ FD ]
Line_17 $$ if (settings.edgePadding) -->Line_21 $$ height += paddingY * 2[ CD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_109 $$ newImage.getGraphics().drawImage(canvas, 0, 0, null)[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_109 $$ newImage.getGraphics().drawImage(canvas, 0, 0, null)[ FD ]
Line_27 $$ width = Math.max(settings.minWidth, width)-->Line_29 $$ page.imageWidth = width[ FD ]
Line_9 $$ int paddingX = settings.paddingX-->Line_12 $$ paddingX /= 2[ FD ]
Line_81 $$ for (int i = 1; i <= amountY; i++) -->Line_83 $$ copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated)[ CD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_63 $$ plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.getRGB(j, ih - 1))[ FD ]
Line_9 $$ int paddingX = settings.paddingX-->Line_20 $$ width += paddingX * 2[ FD ]
Line_25 $$ height = MathUtils.nextPowerOfTwo(height)-->Line_30 $$ page.imageHeight = height[ FD ]
Line_105 $$ ImageOutputStream ios = null-->Line_117 $$ writer.setOutput(ios)[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_63 $$ plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.getRGB(j, ih - 1))[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_77 $$ plot(canvas, rectX + iw - 1 + i, rectY - j, image.getRGB(iw - 1, 0))[ FD ]
Line_2 $$ private void writeImages(File outputDir, String scaledPackFileName, Array<Page> pages) -->Line_5 $$ String imageName = packFileNoExt.getName()[ CD ]
Line_12 $$ paddingX /= 2-->Line_20 $$ width += paddingX * 2[ FD ]
Line_20 $$ width += paddingX * 2-->Line_29 $$ page.imageWidth = width[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_87 $$ copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated)[ FD ]
Line_66 $$ for (int i = 1; i <= amountX; i++) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_86 $$ copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated)[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_54 $$ plot(canvas, rectX - j, rectY + iw - 1 + i, image.getRGB(0, 0))[ CD ]
Line_50 $$ int amountY = settings.paddingY / 2-->Line_74 $$ for (int j = 1; j <= amountY; j++) [ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_108 $$ BufferedImage newImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_3BYTE_BGR)[ CD ]
Line_20 $$ width += paddingX * 2-->Line_24 $$ width = MathUtils.nextPowerOfTwo(width)[ FD ]
Line_31 $$ File outputFile-->Line_34 $$ if (!outputFile.exists())[ FD ]
Line_10 $$ int paddingY = settings.paddingY-->Line_21 $$ height += paddingY * 2[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_28 $$ height = Math.max(settings.minHeight, height)[ FD ]
Line_17 $$ if (settings.edgePadding) -->Line_20 $$ width += paddingX * 2[ CD ]
Line_48 $$ if (settings.duplicatePadding) -->Line_49 $$ int amountX = settings.paddingX / 2[ CD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_94 $$ g.drawRect(rectX, rectY, rect.width - settings.paddingX - 1, rect.height - settings.paddingY - 1)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_110 $$ canvas = newImage[ CD ]
Line_31 $$ File outputFile-->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ FD ]
Line_16 $$ height -= settings.paddingY-->Line_30 $$ page.imageHeight = height[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ FD ]
Line_12 $$ paddingX /= 2-->Line_18 $$ page.x = paddingX[ FD ]
Line_92 $$ if (settings.debug) -->Line_93 $$ g.setColor(Color.magenta)[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_75 $$ plot(canvas, rectX - i, rectY - j, image.getRGB(0, 0))[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_61 $$ for (int j = 0; j < iw; j++) [ FD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_108 $$ BufferedImage newImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_3BYTE_BGR)[ FD ]
Line_31 $$ File outputFile-->Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)[ FD ]
Line_50 $$ int amountY = settings.paddingY / 2-->Line_53 $$ for (int j = 1; j <= amountY; j++) [ FD ]
Line_23 $$ if (settings.pot) -->Line_25 $$ height = MathUtils.nextPowerOfTwo(height)[ CD ]
Line_66 $$ for (int i = 1; i <= amountX; i++) -->Line_73 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_74 $$ for (int j = 1; j <= amountY; j++) -->Line_78 $$ plot(canvas, rectX + iw - 1 + i, rectY + ih - 1 + j, image.getRGB(iw - 1, ih - 1))[ CD ]
Line_8 $$ int width = page.width, height = page.height-->Line_25 $$ height = MathUtils.nextPowerOfTwo(height)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)[ CD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_86 $$ copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated)[ FD ]
Line_60 $$ for (int i = 1; i <= amountY; i++) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_108 $$ BufferedImage newImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_3BYTE_BGR)-->Line_109 $$ newImage.getGraphics().drawImage(canvas, 0, 0, null)[ FD ]
Line_73 $$ for (int i = 1; i <= amountX; i++) -->Line_74 $$ for (int j = 1; j <= amountY; j++) [ CD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ CD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ FD ]
Line_51 $$ if (rect.rotated) -->Line_81 $$ for (int i = 1; i <= amountY; i++) [ CD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_83 $$ copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated)[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_54 $$ plot(canvas, rectX - j, rectY + iw - 1 + i, image.getRGB(0, 0))[ FD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_99 $$ g = (Graphics2D) canvas.getGraphics()[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_74 $$ for (int j = 1; j <= amountY; j++) [ FD ]
Line_13 $$ paddingY /= 2-->Line_21 $$ height += paddingY * 2[ FD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_66 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_97 $$ if (settings.bleed && !settings.premultiplyAlpha && !(settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg"))) -->Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)[ CD ]
Line_81 $$ for (int i = 1; i <= amountY; i++) -->Line_82 $$ copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated)[ CD ]
Line_92 $$ if (settings.debug) -->Line_94 $$ g.drawRect(rectX, rectY, rect.width - settings.paddingX - 1, rect.height - settings.paddingY - 1)[ CD ]
Line_51 $$ if (rect.rotated) -->Line_60 $$ for (int i = 1; i <= amountY; i++) [ CD ]
Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()-->Line_93 $$ g.setColor(Color.magenta)[ FD ]
Line_17 $$ if (settings.edgePadding) -->Line_19 $$ page.y = paddingY[ CD ]
Line_32 $$ while (true) -->Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)[ CD ]
Line_99 $$ g = (Graphics2D) canvas.getGraphics()-->Line_103 $$ g.drawRect(0, 0, width - 1, height - 1)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_114 $$ param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT)[ CD ]
Line_74 $$ for (int j = 1; j <= amountY; j++) -->Line_75 $$ plot(canvas, rectX - i, rectY - j, image.getRGB(0, 0))[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_86 $$ copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated)[ FD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_109 $$ newImage.getGraphics().drawImage(canvas, 0, 0, null)[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_63 $$ plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.getRGB(j, ih - 1))[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_108 $$ BufferedImage newImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_3BYTE_BGR)[ FD ]
Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)-->Line_117 $$ writer.setOutput(ios)[ FD ]
Line_108 $$ BufferedImage newImage = new BufferedImage(canvas.getWidth(), canvas.getHeight(), BufferedImage.TYPE_3BYTE_BGR)-->Line_110 $$ canvas = newImage[ FD ]
Line_50 $$ int amountY = settings.paddingY / 2-->Line_60 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_99 $$ g = (Graphics2D) canvas.getGraphics()[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_42 $$ System.out.println("Writing " + canvas.getWidth() + "x" + canvas.getHeight() + ": " + outputFile)[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_55 $$ plot(canvas, rectX + ih - 1 + j, rectY + iw - 1 + i, image.getRGB(0, ih - 1))[ FD ]
Line_67 $$ for (int j = 0; j < ih; j++) -->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ FD ]
Line_10 $$ int paddingY = settings.paddingY-->Line_13 $$ paddingY /= 2[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_62 $$ plot(canvas, rectX - i, rectY + iw - 1 - j, image.getRGB(j, 0))[ FD ]
Line_85 $$ for (int i = 1; i <= amountX; i++) -->Line_87 $$ copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated)[ CD ]
Line_46 $$ int ih = image.getHeight()-->Line_91 $$ copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated)[ FD ]
Line_60 $$ for (int i = 1; i <= amountY; i++) -->Line_61 $$ for (int j = 0; j < iw; j++) [ CD ]
Line_110 $$ canvas = newImage-->Line_121 $$ canvas.getColorModel().coerceData(canvas.getRaster(), true)[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_20 $$ width += paddingX * 2[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_91 $$ copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated)[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)[ FD ]
Line_10 $$ int paddingY = settings.paddingY-->Line_19 $$ page.y = paddingY[ FD ]
Line_6 $$ int fileIndex = 0-->Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)[ FD ]
Line_51 $$ if (rect.rotated) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ CD ]
Line_3 $$ File packFileNoExt = new File(outputDir, scaledPackFileName)-->Line_5 $$ String imageName = packFileNoExt.getName()[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_78 $$ plot(canvas, rectX + iw - 1 + i, rectY + ih - 1 + j, image.getRGB(iw - 1, ih - 1))[ FD ]
Line_81 $$ for (int i = 1; i <= amountY; i++) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_15 $$ width -= settings.paddingX-->Line_20 $$ width += paddingX * 2[ FD ]
Line_3 $$ File packFileNoExt = new File(outputDir, scaledPackFileName)-->Line_4 $$ File packDir = packFileNoExt.getParentFile()[ FD ]
Line_101 $$ if (settings.debug) -->Line_103 $$ g.drawRect(0, 0, width - 1, height - 1)[ CD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_56 $$ plot(canvas, rectX - j, rectY - i, image.getRGB(iw - 1, 0))[ CD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_68 $$ plot(canvas, rectX + j, rectY - i, image.getRGB(iw - 1, j))[ FD ]
Line_74 $$ for (int j = 1; j <= amountY; j++) -->Line_76 $$ plot(canvas, rectX - i, rectY + ih - 1 + j, image.getRGB(0, ih - 1))[ CD ]
Line_99 $$ g = (Graphics2D) canvas.getGraphics()-->Line_102 $$ g.setColor(Color.magenta)[ FD ]
Line_113 $$ ImageWriteParam param = writer.getDefaultWriteParam()-->Line_115 $$ param.setCompressionQuality(settings.jpegQuality)[ FD ]
Line_48 $$ if (settings.duplicatePadding) -->Line_50 $$ int amountY = settings.paddingY / 2[ CD ]
Line_105 $$ ImageOutputStream ios = null-->Line_127 $$ if (ios != null) [ FD ]
Line_60 $$ for (int i = 1; i <= amountY; i++) -->Line_66 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_113 $$ ImageWriteParam param = writer.getDefaultWriteParam()-->Line_118 $$ writer.write(null, new IIOImage(canvas, null, null), param)[ FD ]
Line_74 $$ for (int j = 1; j <= amountY; j++) -->Line_77 $$ plot(canvas, rectX + iw - 1 + i, rectY - j, image.getRGB(iw - 1, 0))[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_56 $$ plot(canvas, rectX - j, rectY - i, image.getRGB(iw - 1, 0))[ FD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_87 $$ copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated)[ FD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_82 $$ copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated)[ FD ]
Line_51 $$ if (rect.rotated) -->Line_73 $$ for (int i = 1; i <= amountX; i++) [ CD ]
Line_11 $$ if (settings.duplicatePadding) -->Line_13 $$ paddingY /= 2[ CD ]
Line_66 $$ for (int i = 1; i <= amountX; i++) -->Line_67 $$ for (int j = 0; j < ih; j++) [ CD ]
Line_15 $$ width -= settings.paddingX-->Line_27 $$ width = Math.max(settings.minWidth, width)[ FD ]
Line_60 $$ for (int i = 1; i <= amountY; i++) -->Line_73 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_20 $$ width += paddingX * 2-->Line_27 $$ width = Math.max(settings.minWidth, width)[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_57 $$ plot(canvas, rectX + ih - 1 + j, rectY - i, image.getRGB(iw - 1, ih - 1))[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_121 $$ canvas.getColorModel().coerceData(canvas.getRaster(), true)[ FD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_121 $$ canvas.getColorModel().coerceData(canvas.getRaster(), true)[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ FD ]
Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()-->Line_103 $$ g.drawRect(0, 0, width - 1, height - 1)[ FD ]
Line_98 $$ canvas = new ColorBleedEffect().processImage(canvas, 2)-->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_67 $$ for (int j = 0; j < ih; j++) [ FD ]
Line_97 $$ if (settings.bleed && !settings.premultiplyAlpha && !(settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg"))) -->Line_99 $$ g = (Graphics2D) canvas.getGraphics()[ CD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_113 $$ ImageWriteParam param = writer.getDefaultWriteParam()[ CD ]
Line_45 $$ int iw = image.getWidth()-->Line_82 $$ copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated)[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_57 $$ plot(canvas, rectX + ih - 1 + j, rectY - i, image.getRGB(iw - 1, ih - 1))[ CD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_77 $$ plot(canvas, rectX + iw - 1 + i, rectY - j, image.getRGB(iw - 1, 0))[ FD ]
Line_67 $$ for (int j = 0; j < ih; j++) -->Line_69 $$ plot(canvas, rectX + j, rectY + iw - 1 + i, image.getRGB(0, j))[ CD ]
Line_49 $$ int amountX = settings.paddingX / 2-->Line_73 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_75 $$ plot(canvas, rectX - i, rectY - j, image.getRGB(0, 0))[ FD ]
Line_2 $$ private void writeImages(File outputDir, String scaledPackFileName, Array<Page> pages) -->Line_4 $$ File packDir = packFileNoExt.getParentFile()[ CD ]
Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)-->Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)[ FD ]
Line_28 $$ height = Math.max(settings.minHeight, height)-->Line_30 $$ page.imageHeight = height[ FD ]
Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)-->Line_127 $$ if (ios != null) [ FD ]
Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()-->Line_102 $$ g.setColor(Color.magenta)[ FD ]
Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)-->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ FD ]
Line_15 $$ width -= settings.paddingX-->Line_24 $$ width = MathUtils.nextPowerOfTwo(width)[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_76 $$ plot(canvas, rectX - i, rectY + ih - 1 + j, image.getRGB(0, ih - 1))[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_63 $$ plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.getRGB(j, ih - 1))[ FD ]
Line_31 $$ File outputFile-->Line_116 $$ ios = ImageIO.createImageOutputStream(outputFile)[ FD ]
Line_73 $$ for (int i = 1; i <= amountX; i++) -->Line_81 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_21 $$ height += paddingY * 2-->Line_28 $$ height = Math.max(settings.minHeight, height)[ FD ]
Line_50 $$ int amountY = settings.paddingY / 2-->Line_81 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_46 $$ int ih = image.getHeight()[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_83 $$ copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated)[ FD ]
Line_112 $$ ImageWriter writer = writers.next()-->Line_113 $$ ImageWriteParam param = writer.getDefaultWriteParam()[ FD ]
Line_43 $$ for (Rect rect : page.outputRects) -->Line_51 $$ if (rect.rotated) [ FD ]
Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()-->Line_94 $$ g.drawRect(rectX, rectY, rect.width - settings.paddingX - 1, rect.height - settings.paddingY - 1)[ FD ]
Line_120 $$ if (settings.premultiplyAlpha)-->Line_121 $$ canvas.getColorModel().coerceData(canvas.getRaster(), true)[ CD ]
Line_66 $$ for (int i = 1; i <= amountX; i++) -->Line_81 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_33 $$ outputFile = new File(packDir, imageName + (fileIndex++ == 0 ? "" : fileIndex) + "." + settings.outputFormat)-->Line_38 $$ page.imageName = outputFile.getName()[ FD ]
Line_45 $$ int iw = image.getWidth()-->Line_91 $$ copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated)[ FD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_53 $$ for (int j = 1; j <= amountY; j++) [ CD ]
Line_23 $$ if (settings.pot) -->Line_24 $$ width = MathUtils.nextPowerOfTwo(width)[ CD ]
Line_25 $$ height = MathUtils.nextPowerOfTwo(height)-->Line_28 $$ height = Math.max(settings.minHeight, height)[ FD ]
Line_49 $$ int amountX = settings.paddingX / 2-->Line_52 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_51 $$ if (rect.rotated) -->Line_66 $$ for (int i = 1; i <= amountX; i++) [ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_110 $$ canvas = newImage[ FD ]
Line_112 $$ ImageWriter writer = writers.next()-->Line_117 $$ writer.setOutput(ios)[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_118 $$ writer.write(null, new IIOImage(canvas, null, null), param)[ CD ]
Line_41 $$ if (!settings.silent)-->Line_42 $$ System.out.println("Writing " + canvas.getWidth() + "x" + canvas.getHeight() + ": " + outputFile)[ CD ]
Line_47 $$ int rectX = page.x + rect.x, rectY = page.y + page.height - rect.y - rect.height-->Line_91 $$ copy(image, 0, 0, iw, ih, canvas, rectX, rectY, rect.rotated)[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_63 $$ plot(canvas, rectX + ih - 1 + i, rectY + iw - 1 - j, image.getRGB(j, ih - 1))[ CD ]
Line_67 $$ for (int j = 0; j < ih; j++) -->Line_74 $$ for (int j = 1; j <= amountY; j++) [ FD ]
Line_46 $$ int ih = image.getHeight()-->Line_87 $$ copy(image, iw - 1, 0, 1, ih, canvas, rectX + iw - 1 + i, rectY, rect.rotated)[ FD ]
Line_2 $$ private void writeImages(File outputDir, String scaledPackFileName, Array<Page> pages) -->Line_3 $$ File packFileNoExt = new File(outputDir, scaledPackFileName)[ CD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_45 $$ int iw = image.getWidth()[ FD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_73 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_16 $$ height -= settings.paddingY-->Line_25 $$ height = MathUtils.nextPowerOfTwo(height)[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_24 $$ width = MathUtils.nextPowerOfTwo(width)[ FD ]
Line_60 $$ for (int i = 1; i <= amountY; i++) -->Line_81 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_55 $$ plot(canvas, rectX + ih - 1 + j, rectY + iw - 1 + i, image.getRGB(0, ih - 1))[ FD ]
Line_17 $$ if (settings.edgePadding) -->Line_18 $$ page.x = paddingX[ CD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_76 $$ plot(canvas, rectX - i, rectY + ih - 1 + j, image.getRGB(0, ih - 1))[ FD ]
Line_21 $$ height += paddingY * 2-->Line_30 $$ page.imageHeight = height[ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_82 $$ copy(image, 0, 0, iw, 1, canvas, rectX, rectY - i, rect.rotated)[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_62 $$ plot(canvas, rectX - i, rectY + iw - 1 - j, image.getRGB(j, 0))[ FD ]
Line_49 $$ int amountX = settings.paddingX / 2-->Line_66 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_16 $$ height -= settings.paddingY[ FD ]
Line_51 $$ if (rect.rotated) -->Line_52 $$ for (int i = 1; i <= amountX; i++) [ CD ]
Line_13 $$ paddingY /= 2-->Line_19 $$ page.y = paddingY[ FD ]
Line_45 $$ int iw = image.getWidth()-->Line_83 $$ copy(image, 0, ih - 1, iw, 1, canvas, rectX, rectY + ih - 1 + i, rect.rotated)[ FD ]
Line_8 $$ int width = page.width, height = page.height-->Line_27 $$ width = Math.max(settings.minWidth, width)[ FD ]
Line_53 $$ for (int j = 1; j <= amountY; j++) -->Line_55 $$ plot(canvas, rectX + ih - 1 + j, rectY + iw - 1 + i, image.getRGB(0, ih - 1))[ CD ]
Line_16 $$ height -= settings.paddingY-->Line_21 $$ height += paddingY * 2[ FD ]
Line_45 $$ int iw = image.getWidth()-->Line_61 $$ for (int j = 0; j < iw; j++) [ FD ]
Line_110 $$ canvas = newImage-->Line_122 $$ ImageIO.write(canvas, "png", outputFile)[ FD ]
Line_73 $$ for (int i = 1; i <= amountX; i++) -->Line_85 $$ for (int i = 1; i <= amountX; i++) [ FD ]
Line_44 $$ BufferedImage image = rect.getImage(imageProcessor)-->Line_56 $$ plot(canvas, rectX - j, rectY - i, image.getRGB(iw - 1, 0))[ FD ]
Line_61 $$ for (int j = 0; j < iw; j++) -->Line_62 $$ plot(canvas, rectX - i, rectY + iw - 1 - j, image.getRGB(j, 0))[ CD ]
Line_85 $$ for (int i = 1; i <= amountX; i++) -->Line_86 $$ copy(image, 0, 0, 1, ih, canvas, rectX - i, rectY, rect.rotated)[ CD ]
Line_24 $$ width = MathUtils.nextPowerOfTwo(width)-->Line_29 $$ page.imageWidth = width[ FD ]
Line_46 $$ int ih = image.getHeight()-->Line_67 $$ for (int j = 0; j < ih; j++) [ FD ]
Line_2 $$ private void writeImages(File outputDir, String scaledPackFileName, Array<Page> pages) -->Line_6 $$ int fileIndex = 0[ CD ]
Line_52 $$ for (int i = 1; i <= amountX; i++) -->Line_81 $$ for (int i = 1; i <= amountY; i++) [ FD ]
Line_113 $$ ImageWriteParam param = writer.getDefaultWriteParam()-->Line_114 $$ param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT)[ FD ]
Line_105 $$ ImageOutputStream ios = null-->Line_129 $$ ios.close()[ FD ]
Line_11 $$ if (settings.duplicatePadding) -->Line_12 $$ paddingX /= 2[ CD ]
Line_31 $$ File outputFile-->Line_38 $$ page.imageName = outputFile.getName()[ FD ]
Line_107 $$ if (settings.outputFormat.equalsIgnoreCase("jpg") || settings.outputFormat.equalsIgnoreCase("jpeg")) -->Line_111 $$ Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName("jpg")[ CD ]
Line_40 $$ Graphics2D g = (Graphics2D) canvas.getGraphics()-->Line_99 $$ g = (Graphics2D) canvas.getGraphics()[ FD ]
Line_39 $$ BufferedImage canvas = new BufferedImage(width, height, getBufferedImageType(settings.format))-->Line_78 $$ plot(canvas, rectX + iw - 1 + i, rectY + ih - 1 + j, image.getRGB(iw - 1, ih - 1))[ FD ]
Line_21 $$ height += paddingY * 2-->Line_25 $$ height = MathUtils.nextPowerOfTwo(height)[ FD ]
