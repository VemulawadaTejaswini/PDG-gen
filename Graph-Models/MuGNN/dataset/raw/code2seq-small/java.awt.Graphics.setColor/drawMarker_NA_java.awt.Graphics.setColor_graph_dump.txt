Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_4 $$ if (height > 2) [ CD ]
Line_3 $$ Color color = myDiffType.getColor(editor)-->Line_13 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y + height - 1, color, false, myResolved)[ FD ]
Line_4 $$ if (height > 2) -->Line_13 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y + height - 1, color, false, myResolved)[ CD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_4 $$ if (height > 2) [ FD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_13 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y + height - 1, color, false, myResolved)[ FD ]
Line_3 $$ Color color = myDiffType.getColor(editor)-->Line_8 $$ g2.setColor(color)[ FD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_15 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, true, myResolved)[ FD ]
Line_4 $$ if (height > 2) -->Line_10 $$ if (!myResolved)[ CD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_3 $$ Color color = myDiffType.getColor(editor)[ FD ]
Line_5 $$ if (ignoredOutline) -->Line_6 $$ g2.setColor(myDiffType.getIgnoredColor(editor))[ CD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_6 $$ g2.setColor(myDiffType.getIgnoredColor(editor))[ FD ]
Line_5 $$ if (ignoredOutline) -->Line_8 $$ g2.setColor(color)[ CD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_8 $$ g2.setColor(color)[ FD ]
Line_10 $$ if (!myResolved)-->Line_11 $$ g2.fillRect(x1, y, x2 - x1, height)[ CD ]
Line_4 $$ if (height > 2) -->Line_12 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, false, myResolved)[ CD ]
Line_3 $$ Color color = myDiffType.getColor(editor)-->Line_15 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, true, myResolved)[ FD ]
Line_3 $$ Color color = myDiffType.getColor(editor)-->Line_12 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, false, myResolved)[ FD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_12 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, false, myResolved)[ FD ]
Line_4 $$ if (height > 2) -->Line_15 $$ DiffDrawUtil.drawChunkBorderLine(g2, x1, x2, y - 1, color, true, myResolved)[ CD ]
Line_4 $$ if (height > 2) -->Line_5 $$ if (ignoredOutline) [ CD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_11 $$ g2.fillRect(x1, y, x2 - x1, height)[ FD ]
Line_2 $$ private void drawMarker(Editor editor, Graphics2D g2, int x1, int x2, int y, int height, boolean ignoredOutline) -->Line_3 $$ Color color = myDiffType.getColor(editor)[ CD ]
