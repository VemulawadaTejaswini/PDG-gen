Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_18 $$ byte[] row = new byte[glyphRowBytes][ CD ]
Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_36 $$ Effect effect = (Effect) iter.next()[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_16 $$ int glyphRowBytes = width * 4, fontRowBytes = g.width * 4[ CD ]
Line_71 $$ if (other.equals(hash)) -->Line_73 $$ glyph.setTexture(dupe.texture, dupe.u, dupe.v, dupe.u2, dupe.v2)[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_48 $$ width = Math.min(width, texture.getWidth())[ CD ]
Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_58 $$ String hash = ""-->Line_63 $$ hash = bigInt.toString(16)[ FD ]
Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_70 $$ String other = hashes.get(i)[ FD ]
Line_7 $$ int format-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) -->Line_41 $$ scratchGraphics.setFont(unicodeFont.getFont())[ CD ]
Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_71 $$ if (other.equals(hash)) [ CD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_26 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ CD ]
Line_17 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_26 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_52 $$ for (int y = 0; y < height; y++) -->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_60 $$ MessageDigest md = MessageDigest.getInstance("SHA-256")-->Line_62 $$ BigInteger bigInt = new BigInteger(1, md.digest())[ FD ]
Line_63 $$ hash = bigInt.toString(16)-->Line_71 $$ if (other.equals(hash)) [ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_21 $$ glyphPixels.position((height - padBottom) * glyphRowBytes)[ FD ]
Line_32 $$ format = GL11.GL_RGBA-->Line_56 $$ format = GL12.GL_BGRA[ FD ]
Line_50 $$ WritableRaster raster = scratchImage.getRaster()-->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_49 $$ height = Math.min(height, texture.getHeight())-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_21 $$ glyphPixels.position((height - padBottom) * glyphRowBytes)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_87 $$ return true[ CD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_23 $$ glyphPixels.position(padTop * glyphRowBytes)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_15 $$ int padXBytes = padLeftBytes + unicodeFont.getPaddingRight() * 4[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_84 $$ float u2 = (pageX + width) / (float) texture.getWidth()[ CD ]
Line_32 $$ format = GL11.GL_RGBA-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_19 $$ glyphPixels.position(0)[ FD ]
Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) -->Line_40 $$ scratchGraphics.setColor(java.awt.Color.white)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_45 $$ ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_4 $$ scratchGraphics.fillRect(0, 0, MAX_GLYPH_SIZE, MAX_GLYPH_SIZE)[ CD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_31 $$ glyphPixels.flip()[ FD ]
Line_17 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_25 $$ fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4)[ FD ]
Line_43 $$ if (unicodeFont.getRenderType() == RenderType.Java) -->Line_44 $$ scratchGraphics.setColor(java.awt.Color.white)[ CD ]
Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_45 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_30 $$ glyphPixels.position(height * glyphRowBytes)[ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_20 $$ glyphPixels.put(row)[ FD ]
Line_58 $$ String hash = ""-->Line_71 $$ if (other.equals(hash)) [ FD ]
Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) -->Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) [ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_32 $$ format = GL11.GL_RGBA[ CD ]
Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_72 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) -->Line_42 $$ scratchGraphics.drawString("" + (char) glyph.getCodePoint(), 0, unicodeFont.getAscent())[ CD ]
Line_36 $$ Effect effect = (Effect) iter.next()-->Line_37 $$ if (effect instanceof ColorEffect)[ FD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_52 $$ for (int y = 0; y < height; y++) [ FD ]
Line_71 $$ if (other.equals(hash)) -->Line_74 $$ return false[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) [ CD ]
Line_52 $$ for (int y = 0; y < height; y++) -->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ CD ]
Line_56 $$ format = GL12.GL_BGRA-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) -->Line_43 $$ if (unicodeFont.getRenderType() == RenderType.Java) [ CD ]
Line_48 $$ width = Math.min(width, texture.getWidth())-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_13 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()-->Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_3 $$ scratchGraphics.setComposite(AlphaComposite.Clear)[ CD ]
Line_58 $$ String hash = ""-->Line_78 $$ hashes.add(hash)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_7 $$ int format[ CD ]
Line_7 $$ int format-->Line_32 $$ format = GL11.GL_RGBA[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_11 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_83 $$ float v = pageY / (float) texture.getHeight()[ CD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_54 $$ scratchIntBuffer.put(row)[ FD ]
Line_84 $$ float u2 = (pageX + width) / (float) texture.getWidth()-->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ FD ]
Line_13 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()-->Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)[ FD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_25 $$ fontPixels.position(((g.srcY + y) * fontWidth + g.srcX) * 4)[ CD ]
Line_52 $$ for (int y = 0; y < height; y++) -->Line_54 $$ scratchIntBuffer.put(row)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_24 $$ for (int y = 0, n = g.height; y < n; y++) [ CD ]
Line_82 $$ float u = pageX / (float) texture.getWidth()-->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_70 $$ String other = hashes.get(i)-->Line_71 $$ if (other.equals(hash)) [ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_5 $$ scratchGraphics.setComposite(AlphaComposite.SrcOver)[ CD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_27 $$ glyphPixels.put(row)[ CD ]
Line_62 $$ BigInteger bigInt = new BigInteger(1, md.digest())-->Line_63 $$ hash = bigInt.toString(16)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_73 $$ glyph.setTexture(dupe.texture, dupe.u, dupe.v, dupe.u2, dupe.v2)[ FD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_27 $$ glyphPixels.put(row)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_34 $$ if (unicodeFont.getRenderType() == RenderType.Native) [ CD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ FD ]
Line_63 $$ hash = bigInt.toString(16)-->Line_78 $$ hashes.add(hash)[ FD ]
Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_37 $$ if (effect instanceof ColorEffect)[ CD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_7 $$ int format-->Line_56 $$ format = GL12.GL_BGRA[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_56 $$ format = GL12.GL_BGRA[ CD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_26 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_31 $$ glyphPixels.flip()[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_52 $$ for (int y = 0; y < height; y++) [ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ CD ]
Line_11 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()-->Line_12 $$ int fontWidth = fontPixmap.getWidth()[ FD ]
Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_70 $$ String other = hashes.get(i)[ CD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_27 $$ glyphPixels.put(row)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_58 $$ String hash = ""[ CD ]
Line_43 $$ if (unicodeFont.getRenderType() == RenderType.Java) -->Line_45 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_17 $$ ByteBuffer fontPixels = fontPixmap.getPixels()[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_30 $$ glyphPixels.position(height * glyphRowBytes)[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_19 $$ glyphPixels.position(0)[ CD ]
Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) [ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_14 $$ int padLeftBytes = unicodeFont.getPaddingLeft() * 4[ CD ]
Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_70 $$ String other = hashes.get(i)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_46 $$ glyph.setShape(null)[ FD ]
Line_24 $$ for (int y = 0, n = g.height; y < n; y++) -->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_43 $$ if (unicodeFont.getRenderType() == RenderType.Java) -->Line_46 $$ glyph.setShape(null)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_45 $$ ((Effect) iter.next()).draw(scratchImage, scratchGraphics, unicodeFont, glyph)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_42 $$ scratchGraphics.drawString("" + (char) glyph.getCodePoint(), 0, unicodeFont.getAscent())[ FD ]
Line_35 $$ for (Iterator iter = unicodeFont.getEffects().iterator(); iter.hasNext(); ) -->Line_36 $$ Effect effect = (Effect) iter.next()[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_81 $$ Gdx.gl.glTexSubImage2D(texture.glTarget, 0, pageX, pageY, width, height, format, GL11.GL_UNSIGNED_BYTE, glyphPixels)[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_82 $$ float u = pageX / (float) texture.getWidth()[ CD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_20 $$ glyphPixels.put(row)[ FD ]
Line_48 $$ width = Math.min(width, texture.getWidth())-->Line_53 $$ raster.getDataElements(0, y, width, 1, row)[ FD ]
Line_20 $$ for (int i = 0; i < padTop; i++) glyphPixels.put(row)-->Line_72 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_71 $$ if (other.equals(hash)) -->Line_72 $$ Glyph dupe = pageGlyphs.get(i)[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_13 $$ int padTop = unicodeFont.getPaddingTop(), padBottom = unicodeFont.getPaddingBottom()[ CD ]
Line_69 $$ for (int i = 0, n = hashes.size(); i < n; i++) -->Line_72 $$ Glyph dupe = pageGlyphs.get(i)[ FD ]
Line_22 $$ for (int i = 0; i < padBottom; i++) glyphPixels.put(row)-->Line_70 $$ String other = hashes.get(i)[ FD ]
Line_11 $$ Pixmap fontPixmap = unicodeFont.bitmapFont.getRegions().get(g.page).getTexture().getTextureData().consumePixmap()-->Line_17 $$ ByteBuffer fontPixels = fontPixmap.getPixels()[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_29 $$ fontPixels.position(0)[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_52 $$ for (int y = 0; y < height; y++) [ CD ]
Line_9 $$ BitmapFontData data = unicodeFont.bitmapFont.getData()-->Line_10 $$ BitmapFont.Glyph g = data.getGlyph((char) glyph.getCodePoint())[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_23 $$ glyphPixels.position(padTop * glyphRowBytes)[ CD ]
Line_14 $$ int padLeftBytes = unicodeFont.getPaddingLeft() * 4-->Line_26 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_83 $$ float v = pageY / (float) texture.getHeight()-->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_85 $$ float v2 = (pageY + height) / (float) texture.getHeight()-->Line_86 $$ glyph.setTexture(texture, u, v, u2, v2)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_49 $$ height = Math.min(height, texture.getHeight())[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_10 $$ BitmapFont.Glyph g = data.getGlyph((char) glyph.getCodePoint())[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_12 $$ int fontWidth = fontPixmap.getWidth()[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_10 $$ BitmapFont.Glyph g = data.getGlyph((char) glyph.getCodePoint())[ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_61 $$ md.update(glyphPixels)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_85 $$ float v2 = (pageY + height) / (float) texture.getHeight()[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_67 $$ scratchIntBuffer.clear()[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_50 $$ WritableRaster raster = scratchImage.getRaster()[ CD ]
Line_60 $$ MessageDigest md = MessageDigest.getInstance("SHA-256")-->Line_61 $$ md.update(glyphPixels)[ FD ]
Line_17 $$ ByteBuffer fontPixels = fontPixmap.getPixels()-->Line_29 $$ fontPixels.position(0)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_48 $$ width = Math.min(width, texture.getWidth())[ FD ]
Line_49 $$ height = Math.min(height, texture.getHeight())-->Line_52 $$ for (int y = 0; y < height; y++) [ FD ]
Line_6 $$ ByteBuffer glyphPixels = scratchByteBuffer-->Line_22 $$ glyphPixels.put(row)[ FD ]
Line_18 $$ byte[] row = new byte[glyphRowBytes]-->Line_22 $$ glyphPixels.put(row)[ FD ]
Line_37 $$ if (effect instanceof ColorEffect)-->Line_38 $$ scratchGraphics.setColor(((ColorEffect) effect).getColor())[ CD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_66 $$ scratchByteBuffer.clear()[ CD ]
Line_16 $$ int glyphRowBytes = width * 4, fontRowBytes = g.width * 4-->Line_26 $$ fontPixels.get(row, padLeftBytes, fontRowBytes)[ FD ]
Line_2 $$ private boolean renderGlyph(Glyph glyph, int pageX, int pageY, int width, int height) -->Line_79 $$ pageGlyphs.add(glyph)[ FD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_9 $$ BitmapFontData data = unicodeFont.bitmapFont.getData()[ CD ]
Line_8 $$ if (unicodeFont.getRenderType() == RenderType.FreeType && unicodeFont.bitmapFont != null) -->Line_49 $$ height = Math.min(height, texture.getHeight())[ CD ]
