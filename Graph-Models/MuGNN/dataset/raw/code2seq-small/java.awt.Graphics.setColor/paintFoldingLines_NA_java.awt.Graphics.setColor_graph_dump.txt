Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) [ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_5 $$ if (myPaintBackground) [ CD ]
Line_17 $$ if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y) -->Line_18 $$ int lineX = anchorX + width / 2[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_6 $$ g.setColor(getOutlineColor(false))[ FD ]
Line_16 $$ int endY = myEditor.visibleLineToY(foldEnd) + myEditor.getLineHeight() - myEditor.getDescent()-->Line_20 $$ UIUtil.drawLine(g, lineX, startY, lineX, endY)[ FD ]
Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) -->Line_15 $$ int startY = myEditor.visibleLineToY(foldStart + 1) - myEditor.getDescent()[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_3 $$ if (!isFoldingOutlineShown())[ CD ]
Line_17 $$ if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y) -->Line_20 $$ UIUtil.drawLine(g, lineX, startY, lineX, endY)[ CD ]
Line_15 $$ int startY = myEditor.visibleLineToY(foldStart + 1) - myEditor.getDescent()-->Line_20 $$ UIUtil.drawLine(g, lineX, startY, lineX, endY)[ FD ]
Line_14 $$ int foldEnd = myEditor.offsetToVisualLine(getEndOffset(myActiveFoldRegion))-->Line_16 $$ int endY = myEditor.visibleLineToY(foldEnd) + myEditor.getLineHeight() - myEditor.getDescent()[ FD ]
Line_5 $$ if (myPaintBackground) -->Line_8 $$ UIUtil.drawLine(g, x, clip.y, x, clip.y + clip.height)[ CD ]
Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) -->Line_16 $$ int endY = myEditor.visibleLineToY(foldEnd) + myEditor.getLineHeight() - myEditor.getDescent()[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_19 $$ g.setColor(getOutlineColor(true))[ FD ]
Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) -->Line_17 $$ if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y) [ CD ]
Line_5 $$ if (myPaintBackground) -->Line_6 $$ g.setColor(getOutlineColor(false))[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_20 $$ UIUtil.drawLine(g, lineX, startY, lineX, endY)[ FD ]
Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) -->Line_14 $$ int foldEnd = myEditor.offsetToVisualLine(getEndOffset(myActiveFoldRegion))[ CD ]
Line_18 $$ int lineX = anchorX + width / 2-->Line_20 $$ UIUtil.drawLine(g, lineX, startY, lineX, endY)[ FD ]
Line_12 $$ if (myActiveFoldRegion != null && myActiveFoldRegion.isExpanded() && myActiveFoldRegion.isValid()) -->Line_13 $$ int foldStart = myEditor.offsetToVisualLine(myActiveFoldRegion.getStartOffset())[ CD ]
Line_17 $$ if (startY <= clip.y + clip.height && endY + 1 + myEditor.getDescent() >= clip.y) -->Line_19 $$ g.setColor(getOutlineColor(true))[ CD ]
Line_5 $$ if (myPaintBackground) -->Line_7 $$ int x = getWhitespaceSeparatorOffset()[ CD ]
Line_7 $$ int x = getWhitespaceSeparatorOffset()-->Line_8 $$ UIUtil.drawLine(g, x, clip.y, x, clip.y + clip.height)[ FD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_11 $$ final int width = getFoldingAnchorWidth()[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_10 $$ final int anchorX = getFoldingAreaOffset()[ CD ]
Line_3 $$ if (!isFoldingOutlineShown())-->Line_4 $$ return[ CD ]
Line_2 $$ private void paintFoldingLines(final Graphics2D g, final Rectangle clip) -->Line_8 $$ UIUtil.drawLine(g, x, clip.y, x, clip.y + clip.height)[ FD ]
