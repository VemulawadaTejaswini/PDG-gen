Line_4 $$ if (length == 0)-->Line_5 $$ return[ CD ]
Line_6 $$ final int width = ((EditorEx) myEditor).getGutterComponentEx().getWidth()-->Line_17 $$ drawCurved(gr, x1, y, TornLineParams.ourLight, points, width, false, 0)[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_13 $$ int i = getLastPointInBeforeGutter(width, points)[ FD ]
Line_8 $$ final Graphics gr = g.create()-->Line_15 $$ drawCurved(gr, x1, y, TornLineParams.ourDark, points, width, false, 0)[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_17 $$ drawCurved(gr, x1, y, TornLineParams.ourLight, points, width, false, 0)[ FD ]
Line_8 $$ final Graphics gr = g.create()-->Line_11 $$ gr.setColor(getColor())[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_15 $$ drawCurved(gr, x1, y, TornLineParams.ourDark, points, width, false, 0)[ FD ]
Line_6 $$ final int width = ((EditorEx) myEditor).getGutterComponentEx().getWidth()-->Line_15 $$ drawCurved(gr, x1, y, TornLineParams.ourDark, points, width, false, 0)[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_8 $$ final Graphics gr = g.create()[ CD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_17 $$ drawCurved(gr, x1, y, TornLineParams.ourLight, points, width, false, 0)[ FD ]
Line_8 $$ final Graphics gr = g.create()-->Line_19 $$ gr.dispose()[ FD ]
Line_8 $$ final Graphics gr = g.create()-->Line_16 $$ gr.setColor(getColor().darker())[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_6 $$ final int width = ((EditorEx) myEditor).getGutterComponentEx().getWidth()[ CD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_15 $$ drawCurved(gr, x1, y, TornLineParams.ourDark, points, width, false, 0)[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_7 $$ myShoeneLine.ensureLastX(length + width)[ CD ]
Line_3 $$ final int length = x2 - x1-->Line_4 $$ if (length == 0)[ FD ]
Line_14 $$ points = points.subList(i, points.size())-->Line_15 $$ drawCurved(gr, x1, y, TornLineParams.ourDark, points, width, false, 0)[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_4 $$ if (length == 0)[ CD ]
Line_8 $$ final Graphics gr = g.create()-->Line_17 $$ drawCurved(gr, x1, y, TornLineParams.ourLight, points, width, false, 0)[ FD ]
Line_14 $$ points = points.subList(i, points.size())-->Line_17 $$ drawCurved(gr, x1, y, TornLineParams.ourLight, points, width, false, 0)[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_3 $$ final int length = x2 - x1[ CD ]
Line_6 $$ final int width = ((EditorEx) myEditor).getGutterComponentEx().getWidth()-->Line_13 $$ int i = getLastPointInBeforeGutter(width, points)[ FD ]
Line_13 $$ int i = getLastPointInBeforeGutter(width, points)-->Line_14 $$ points = points.subList(i, points.size())[ FD ]
Line_2 $$ public void drawLine(Graphics g, int x1, int x2, int y) -->Line_8 $$ final Graphics gr = g.create()[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_14 $$ points = points.subList(i, points.size())[ FD ]
