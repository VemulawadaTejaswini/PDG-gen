Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)[ FD ]
Line_24 $$ int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line-->Line_32 $$ g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)))[ FD ]
Line_15 $$ int startLineNumber = clip.y / lineHeight-->Line_19 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) [ CD ]
Line_4 $$ int w = getAnnotationsAreaWidthEx()-->Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_17 $$ int lastLine = myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(), 0)).line[ CD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_11 $$ g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN))[ FD ]
Line_27 $$ final Color bg = gutterProvider.getBgColor(logLine, myEditor)-->Line_28 $$ if (bg != null) [ FD ]
Line_3 $$ int x = getAnnotationsAreaOffset()-->Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)[ FD ]
Line_25 $$ String s = gutterProvider.getLineText(logLine, myEditor)-->Line_35 $$ g.drawString(s, x, (j + 1) * lineHeight - myEditor.getDescent())[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_38 $$ x += annotationSize[ CD ]
Line_18 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)-->Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) [ FD ]
Line_28 $$ if (bg != null) -->Line_29 $$ g.setColor(bg)[ CD ]
Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)-->Line_27 $$ final Color bg = gutterProvider.getBgColor(logLine, myEditor)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_14 $$ int lineHeight = myEditor.getLineHeight()[ CD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_19 $$ if (startLineNumber >= endLineNumber) [ CD ]
Line_16 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_19 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_27 $$ final Color bg = gutterProvider.getBgColor(logLine, myEditor)-->Line_29 $$ g.setColor(bg)[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_33 $$ g.setFont(myEditor.getColorsScheme().getFont(style))[ FD ]
Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)-->Line_42 $$ g.setTransform(old)[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_3 $$ int x = getAnnotationsAreaOffset()[ CD ]
Line_4 $$ int w = getAnnotationsAreaWidthEx()-->Line_5 $$ if (w == 0)[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)[ CD ]
Line_16 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) [ FD ]
Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)-->Line_32 $$ g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)))[ FD ]
Line_24 $$ int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line-->Line_25 $$ String s = gutterProvider.getLineText(logLine, myEditor)[ FD ]
Line_26 $$ final EditorFontType style = gutterProvider.getStyle(logLine, myEditor)-->Line_33 $$ g.setFont(myEditor.getColorsScheme().getFont(style))[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_22 $$ int annotationSize = myTextAnnotationGutterSizes.get(i)[ FD ]
Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)-->Line_25 $$ String s = gutterProvider.getLineText(logLine, myEditor)[ FD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_34 $$ if (s != null) [ CD ]
Line_25 $$ String s = gutterProvider.getLineText(logLine, myEditor)-->Line_34 $$ if (s != null) [ FD ]
Line_3 $$ int x = getAnnotationsAreaOffset()-->Line_30 $$ g.fillRect(x, j * lineHeight, annotationSize, lineHeight)[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_32 $$ g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)))[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_35 $$ g.drawString(s, x, (j + 1) * lineHeight - myEditor.getDescent())[ FD ]
Line_24 $$ int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line-->Line_26 $$ final EditorFontType style = gutterProvider.getStyle(logLine, myEditor)[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_29 $$ g.setColor(bg)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_18 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)[ CD ]
Line_18 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)-->Line_19 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_33 $$ g.setFont(myEditor.getColorsScheme().getFont(style))[ CD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_4 $$ int w = getAnnotationsAreaWidthEx()[ CD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_5 $$ if (w == 0)[ CD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_25 $$ String s = gutterProvider.getLineText(logLine, myEditor)[ CD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_27 $$ final Color bg = gutterProvider.getBgColor(logLine, myEditor)[ CD ]
Line_3 $$ int x = getAnnotationsAreaOffset()-->Line_35 $$ g.drawString(s, x, (j + 1) * lineHeight - myEditor.getDescent())[ FD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_42 $$ g.setTransform(old)[ FD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_26 $$ final EditorFontType style = gutterProvider.getStyle(logLine, myEditor)[ CD ]
Line_22 $$ int annotationSize = myTextAnnotationGutterSizes.get(i)-->Line_30 $$ g.fillRect(x, j * lineHeight, annotationSize, lineHeight)[ FD ]
Line_14 $$ int lineHeight = myEditor.getLineHeight()-->Line_30 $$ g.fillRect(x, j * lineHeight, annotationSize, lineHeight)[ FD ]
Line_28 $$ if (bg != null) -->Line_30 $$ g.fillRect(x, j * lineHeight, annotationSize, lineHeight)[ CD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_10 $$ g.setColor(color != null ? color : JBColor.blue)[ FD ]
Line_5 $$ if (w == 0)-->Line_6 $$ return[ CD ]
Line_2 $$ private void paintAnnotations(Graphics2D g, Rectangle clip) -->Line_30 $$ g.fillRect(x, j * lineHeight, annotationSize, lineHeight)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_22 $$ int annotationSize = myTextAnnotationGutterSizes.get(i)[ CD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)[ FD ]
Line_41 $$ if (old != null)-->Line_42 $$ g.setTransform(old)[ CD ]
Line_3 $$ int x = getAnnotationsAreaOffset()-->Line_38 $$ x += annotationSize[ FD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_28 $$ if (bg != null) [ CD ]
Line_22 $$ int annotationSize = myTextAnnotationGutterSizes.get(i)-->Line_38 $$ x += annotationSize[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_15 $$ int startLineNumber = clip.y / lineHeight[ CD ]
Line_16 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_18 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)[ CD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_24 $$ int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line[ CD ]
Line_23 $$ for (int j = startLineNumber; j < endLineNumber; j++) -->Line_32 $$ g.setColor(myEditor.getColorsScheme().getColor(gutterProvider.getColor(logLine, myEditor)))[ CD ]
Line_24 $$ int logLine = myEditor.visualToLogicalPosition(new VisualPosition(j, 0)).line-->Line_27 $$ final Color bg = gutterProvider.getBgColor(logLine, myEditor)[ FD ]
Line_7 $$ AffineTransform old = setMirrorTransformIfNeeded(g, x, w)-->Line_41 $$ if (old != null)[ FD ]
Line_12 $$ for (int i = 0; i < myTextAnnotationGutters.size(); i++) -->Line_16 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1[ CD ]
Line_13 $$ TextAnnotationGutterProvider gutterProvider = myTextAnnotationGutters.get(i)-->Line_26 $$ final EditorFontType style = gutterProvider.getStyle(logLine, myEditor)[ FD ]
Line_34 $$ if (s != null) -->Line_35 $$ g.drawString(s, x, (j + 1) * lineHeight - myEditor.getDescent())[ CD ]
