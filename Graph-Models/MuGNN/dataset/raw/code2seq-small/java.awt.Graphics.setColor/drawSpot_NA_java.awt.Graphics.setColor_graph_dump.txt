Line_6 $$ paintWidth = myMinMarkHeight-->Line_14 $$ paintWidth = getErrorIconWidth()[ FD ]
Line_3 $$ int paintWidth-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_5 $$ if (thinErrorStripeMark) -->Line_8 $$ if (yEnd - yStart < 6) [ CD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_10 $$ yEnd += yEnd - yStart - 1[ FD ]
Line_3 $$ int paintWidth-->Line_14 $$ paintWidth = getErrorIconWidth()[ FD ]
Line_8 $$ if (yEnd - yStart < 6) -->Line_10 $$ yEnd += yEnd - yStart - 1[ CD ]
Line_8 $$ if (yEnd - yStart < 6) -->Line_9 $$ yStart -= 1[ CD ]
Line_4 $$ int x-->Line_13 $$ x = isMirrored() ? 0 : myMinMarkHeight + getThinGap()[ FD ]
Line_6 $$ paintWidth = myMinMarkHeight-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_14 $$ paintWidth = getErrorIconWidth()-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_3 $$ int paintWidth[ CD ]
Line_7 $$ x = isMirrored() ? getThickness() - paintWidth : 0-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_16 $$ g.setColor(color)[ CD ]
Line_5 $$ if (thinErrorStripeMark) -->Line_14 $$ paintWidth = getErrorIconWidth()[ CD ]
Line_5 $$ if (thinErrorStripeMark) -->Line_6 $$ paintWidth = myMinMarkHeight[ CD ]
Line_3 $$ int paintWidth-->Line_6 $$ paintWidth = myMinMarkHeight[ FD ]
Line_13 $$ x = isMirrored() ? 0 : myMinMarkHeight + getThinGap()-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_4 $$ int x[ CD ]
Line_4 $$ int x-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_5 $$ if (thinErrorStripeMark) -->Line_13 $$ x = isMirrored() ? 0 : myMinMarkHeight + getThinGap()[ CD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_5 $$ if (thinErrorStripeMark) [ CD ]
Line_4 $$ int x-->Line_7 $$ x = isMirrored() ? getThickness() - paintWidth : 0[ FD ]
Line_7 $$ x = isMirrored() ? getThickness() - paintWidth : 0-->Line_13 $$ x = isMirrored() ? 0 : myMinMarkHeight + getThinGap()[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_16 $$ g.setColor(color)[ FD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ CD ]
Line_2 $$ private void drawSpot(@NotNull Graphics g, boolean thinErrorStripeMark, int yStart, int yEnd, @NotNull Color color) -->Line_9 $$ yStart -= 1[ FD ]
Line_9 $$ yStart -= 1-->Line_17 $$ g.fillRect(x, yStart, paintWidth, yEnd - yStart)[ FD ]
Line_5 $$ if (thinErrorStripeMark) -->Line_7 $$ x = isMirrored() ? getThickness() - paintWidth : 0[ CD ]
