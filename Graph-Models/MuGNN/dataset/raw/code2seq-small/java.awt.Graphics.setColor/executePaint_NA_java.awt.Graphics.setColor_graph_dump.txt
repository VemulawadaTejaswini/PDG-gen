Line_43 $$ GraphicsConfig cfg = new GraphicsConfig(g)-->Line_44 $$ cfg.setAntialiasing(true)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_4 $$ int selectedInset = -8[ CD ]
Line_7 $$ boolean hasIntersections = false-->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ FD ]
Line_45 $$ if (myShowspots) -->Line_47 $$ g.fill(myArea)[ CD ]
Line_55 $$ if (selected != null) -->Line_57 $$ g.setColor(ColorUtil.toAlpha(bg, 180))[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_45 $$ if (myShowspots) [ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_46 $$ g.setColor(fillColor)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_61 $$ cfg.restore()[ CD ]
Line_43 $$ GraphicsConfig cfg = new GraphicsConfig(g)-->Line_61 $$ cfg.restore()[ FD ]
Line_6 $$ Area selected = null-->Line_50 $$ if (each != selected) [ FD ]
Line_20 $$ eachShape = new Rectangle(eachBaseRec.x + inset, eachBaseRec.y + inset, eachBaseRec.width - inset - inset, eachBaseRec.height - inset - inset)-->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_48 $$ g.setColor(Color.lightGray)[ FD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_11 $$ RelativeRectangle eachSimpleRec = each.getRectangle()[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_3 $$ int inset = -1[ CD ]
Line_56 $$ Color bg = Color.darkGray-->Line_57 $$ g.setColor(ColorUtil.toAlpha(bg, 180))[ FD ]
Line_22 $$ if (!hasIntersections) -->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ CD ]
Line_16 $$ Rectangle eachShape-->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ FD ]
Line_11 $$ RelativeRectangle eachSimpleRec = each.getRectangle()-->Line_12 $$ if (eachSimpleRec == null)[ FD ]
Line_55 $$ if (selected != null) -->Line_56 $$ Color bg = Color.darkGray[ CD ]
Line_32 $$ if (!hasIntersections && myShowspots) -->Line_34 $$ g.fillRect(clip.x, clip.y, clip.width, clip.height)[ CD ]
Line_28 $$ selected = eachArea-->Line_39 $$ if (each != selected) [ FD ]
Line_32 $$ if (!hasIntersections && myShowspots) -->Line_33 $$ g.setColor(fillColor)[ CD ]
Line_45 $$ if (myShowspots) -->Line_46 $$ g.setColor(fillColor)[ CD ]
Line_6 $$ Area selected = null-->Line_55 $$ if (selected != null) [ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_55 $$ if (selected != null) [ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_47 $$ g.fill(myArea)[ FD ]
Line_45 $$ if (myShowspots) -->Line_48 $$ g.setColor(Color.lightGray)[ CD ]
Line_27 $$ if (isSelected) -->Line_28 $$ selected = eachArea[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_43 $$ GraphicsConfig cfg = new GraphicsConfig(g)[ CD ]
Line_6 $$ Area selected = null-->Line_40 $$ each.subtract(selected)[ FD ]
Line_16 $$ Rectangle eachShape-->Line_18 $$ eachShape = new Rectangle(eachBaseRec.x + selectedInset, eachBaseRec.y + selectedInset, eachBaseRec.width - selectedInset - selectedInset, eachBaseRec.height - selectedInset - selectedInset)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_32 $$ if (!hasIntersections && myShowspots) [ CD ]
Line_25 $$ Area eachArea = new Area(new RoundRectangle2D.Double(eachShape.x, eachShape.y, eachShape.width, eachShape.height, 6, 6))-->Line_26 $$ shapes.add(eachArea)[ FD ]
Line_18 $$ eachShape = new Rectangle(eachBaseRec.x + selectedInset, eachBaseRec.y + selectedInset, eachBaseRec.width - selectedInset - selectedInset, eachBaseRec.height - selectedInset - selectedInset)-->Line_20 $$ eachShape = new Rectangle(eachBaseRec.x + inset, eachBaseRec.y + inset, eachBaseRec.width - inset - inset, eachBaseRec.height - inset - inset)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_8 $$ Rectangle clip = g.getClipBounds()[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_31 $$ Color fillColor = new Color(0f, 0f, 0f, 0.25f)[ CD ]
Line_28 $$ selected = eachArea-->Line_55 $$ if (selected != null) [ FD ]
Line_39 $$ if (each != selected) -->Line_40 $$ each.subtract(selected)[ CD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_40 $$ each.subtract(selected)[ FD ]
Line_55 $$ if (selected != null) -->Line_59 $$ g.draw(selected)[ CD ]
Line_32 $$ if (!hasIntersections && myShowspots) -->Line_35 $$ return[ CD ]
Line_17 $$ if (isSelected) -->Line_18 $$ eachShape = new Rectangle(eachBaseRec.x + selectedInset, eachBaseRec.y + selectedInset, eachBaseRec.width - selectedInset - selectedInset, eachBaseRec.height - selectedInset - selectedInset)[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_8 $$ Rectangle clip = g.getClipBounds()[ CD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_39 $$ if (each != selected) [ FD ]
Line_28 $$ selected = eachArea-->Line_50 $$ if (each != selected) [ FD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_50 $$ if (each != selected) [ FD ]
Line_17 $$ if (isSelected) -->Line_20 $$ eachShape = new Rectangle(eachBaseRec.x + inset, eachBaseRec.y + inset, eachBaseRec.width - inset - inset, eachBaseRec.height - inset - inset)[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_44 $$ cfg.setAntialiasing(true)[ CD ]
Line_5 $$ Set<Area> shapes = new HashSet<Area>()-->Line_26 $$ shapes.add(eachArea)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_6 $$ Area selected = null[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_59 $$ g.draw(selected)[ FD ]
Line_18 $$ eachShape = new Rectangle(eachBaseRec.x + selectedInset, eachBaseRec.y + selectedInset, eachBaseRec.width - selectedInset - selectedInset, eachBaseRec.height - selectedInset - selectedInset)-->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_33 $$ g.setColor(fillColor)[ FD ]
Line_25 $$ Area eachArea = new Area(new RoundRectangle2D.Double(eachShape.x, eachShape.y, eachShape.width, eachShape.height, 6, 6))-->Line_28 $$ selected = eachArea[ FD ]
Line_6 $$ Area selected = null-->Line_59 $$ g.draw(selected)[ FD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_51 $$ g.draw(each)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_7 $$ boolean hasIntersections = false[ CD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_58 $$ g.setStroke(new BasicStroke(3))[ FD ]
Line_6 $$ Area selected = null-->Line_28 $$ selected = eachArea[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_57 $$ g.setColor(ColorUtil.toAlpha(bg, 180))[ FD ]
Line_7 $$ boolean hasIntersections = false-->Line_32 $$ if (!hasIntersections && myShowspots) [ FD ]
Line_11 $$ RelativeRectangle eachSimpleRec = each.getRectangle()-->Line_15 $$ Rectangle eachBaseRec = eachSimpleRec.getRectangleOn(myRoot)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_5 $$ Set<Area> shapes = new HashSet<Area>()[ CD ]
Line_7 $$ boolean hasIntersections = false-->Line_22 $$ if (!hasIntersections) [ FD ]
Line_50 $$ if (each != selected) -->Line_51 $$ g.draw(each)[ CD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_14 $$ boolean isSelected = each.equals(mySelection)[ FD ]
Line_28 $$ selected = eachArea-->Line_59 $$ g.draw(selected)[ FD ]
Line_31 $$ Color fillColor = new Color(0f, 0f, 0f, 0.25f)-->Line_46 $$ g.setColor(fillColor)[ FD ]
Line_6 $$ Area selected = null-->Line_39 $$ if (each != selected) [ FD ]
Line_31 $$ Color fillColor = new Color(0f, 0f, 0f, 0.25f)-->Line_33 $$ g.setColor(fillColor)[ FD ]
Line_10 $$ for (SwitchTarget each : myTargets) -->Line_38 $$ myArea.subtract(each)[ FD ]
Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)-->Line_32 $$ if (!hasIntersections && myShowspots) [ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_51 $$ g.draw(each)[ FD ]
Line_2 $$ public void executePaint(Component component, Graphics2D g) -->Line_34 $$ g.fillRect(clip.x, clip.y, clip.width, clip.height)[ FD ]
Line_55 $$ if (selected != null) -->Line_58 $$ g.setStroke(new BasicStroke(3))[ CD ]
Line_28 $$ selected = eachArea-->Line_40 $$ each.subtract(selected)[ FD ]
Line_16 $$ Rectangle eachShape-->Line_20 $$ eachShape = new Rectangle(eachBaseRec.x + inset, eachBaseRec.y + inset, eachBaseRec.width - inset - inset, eachBaseRec.height - inset - inset)[ FD ]
Line_8 $$ Rectangle clip = g.getClipBounds()-->Line_23 $$ hasIntersections = clip.contains(eachShape) || clip.intersects(eachShape)[ FD ]
