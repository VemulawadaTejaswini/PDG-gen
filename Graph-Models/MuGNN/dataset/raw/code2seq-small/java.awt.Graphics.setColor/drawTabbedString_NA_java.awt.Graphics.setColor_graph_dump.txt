Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_53 $$ if (myOffset + length > start) [ FD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_46 $$ if (i > start) [ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_38 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_32 $$ double xStart = position.getX()[ CD ]
Line_48 $$ x += drawStringToGraphics(g, s, x, y)-->Line_50 $$ x = nextTabStop(g, x)[ FD ]
Line_46 $$ if (i > start) -->Line_47 $$ String s = new String(text, start, i - start)[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_33 $$ double x = position.getX()[ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_16 $$ return getTextSegmentWidth(text, start, count, x, g)[ FD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_22 $$ drawTabbedString(g, text, breakOffset - myOffset, position, clip, colNumber, backColor, underscoredColor)[ CD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_44 $$ if (text[i] != '\t')[ CD ]
Line_50 $$ x = nextTabStop(g, x)-->Line_48 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_40 $$ g.setColor(savedColor)[ FD ]
Line_55 $$ x += drawStringToGraphics(g, s, x, y)-->Line_64 $$ position.setLocation(x, position.getY())[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_4 $$ if (myOffset + length >= mySegmentEnd) [ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_22 $$ drawTabbedString(g, text, breakOffset - myOffset, position, clip, colNumber, backColor, underscoredColor)[ FD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_46 $$ if (i > start) [ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_64 $$ position.setLocation(x, position.getY())[ FD ]
Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) -->Line_60 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ CD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_51 $$ start = i + 1[ FD ]
Line_8 $$ if (length <= 0) -->Line_9 $$ return false[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_50 $$ x = nextTabStop(g, x)[ FD ]
Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) -->Line_61 $$ UIUtil.drawLine(g, (int) position.getX(), (int) y + 1, (int) (xStart + w), (int) (y + 1))[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_22 $$ drawTabbedString(g, text, breakOffset - myOffset, position, clip, colNumber, backColor, underscoredColor)[ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_46 $$ if (i > start) [ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_36 $$ Color savedColor = g.getColor()[ FD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_46 $$ if (i > start) [ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_28 $$ drawTabbedString(g, text, startOffset + length - myOffset, position, clip, colNumber, backColor, underscoredColor)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_8 $$ if (length <= 0) [ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_62 $$ g.setColor(savedColor)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_35 $$ if (backColor != null && myPerformActualDrawing) [ CD ]
Line_48 $$ x += drawStringToGraphics(g, s, x, y)-->Line_64 $$ position.setLocation(x, position.getY())[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_66 $$ return ret[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_61 $$ UIUtil.drawLine(g, (int) position.getX(), (int) y + 1, (int) (xStart + w), (int) (y + 1))[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_12 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() [ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_39 $$ g.fill(new Area(new Rectangle2D.Double(position.getX(), y - getLineHeight(g) + getDescent(g), w, getLineHeight(g))))[ FD ]
Line_13 $$ if (position.getX() + w > clip.getWidth()) -->Line_28 $$ drawTabbedString(g, text, startOffset + length - myOffset, position, clip, colNumber, backColor, underscoredColor)[ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_16 $$ return getTextSegmentWidth(text, start, count, x, g)[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_16 $$ return getTextSegmentWidth(text, start, count, x, g)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_37 $$ setBackgroundColor(g, backColor)[ FD ]
Line_4 $$ if (myOffset + length >= mySegmentEnd) -->Line_5 $$ ret = false[ CD ]
Line_11 $$ if (myPrintSettings.WRAP) -->Line_12 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_58 $$ Color savedColor = g.getColor()[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_59 $$ setForegroundColor(g, underscoredColor)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_38 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) [ FD ]
Line_24 $$ if (position.getY() > clip.getY() + clip.getHeight() - getLineHeight(g)) -->Line_25 $$ return false[ CD ]
Line_6 $$ length = mySegmentEnd - myOffset-->Line_38 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) [ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_8 $$ if (length <= 0) [ CD ]
Line_13 $$ if (position.getX() + w > clip.getWidth()) -->Line_29 $$ return ret[ CD ]
Line_6 $$ length = mySegmentEnd - myOffset-->Line_8 $$ if (length <= 0) [ FD ]
Line_35 $$ if (backColor != null && myPerformActualDrawing) -->Line_36 $$ Color savedColor = g.getColor()[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_13 $$ if (position.getX() + w > clip.getWidth()) [ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_50 $$ x = nextTabStop(g, x)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) [ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_64 $$ position.setLocation(x, position.getY())[ FD ]
Line_6 $$ length = mySegmentEnd - myOffset-->Line_12 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_51 $$ start = i + 1-->Line_53 $$ if (myOffset + length > start) [ FD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_23 $$ position.setLocation(0, position.getY() + getLineHeight(g))[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_32 $$ double xStart = position.getX()[ FD ]
Line_13 $$ if (position.getX() + w > clip.getWidth()) -->Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() [ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_6 $$ length = mySegmentEnd - myOffset[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_11 $$ if (myPrintSettings.WRAP) [ CD ]
Line_50 $$ x = nextTabStop(g, x)-->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_35 $$ if (backColor != null && myPerformActualDrawing) -->Line_40 $$ g.setColor(savedColor)[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_28 $$ drawTabbedString(g, text, startOffset + length - myOffset, position, clip, colNumber, backColor, underscoredColor)[ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_35 $$ if (backColor != null && myPerformActualDrawing) -->Line_38 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_48 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_53 $$ if (myOffset + length > start) -->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ CD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_21 $$ int breakOffset = breakOffsets.get(i)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_33 $$ double x = position.getX()[ FD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_50 $$ x = nextTabStop(g, x)[ CD ]
Line_13 $$ if (position.getX() + w > clip.getWidth()) -->Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) [ CD ]
Line_4 $$ if (myOffset + length >= mySegmentEnd) -->Line_6 $$ length = mySegmentEnd - myOffset[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_64 $$ position.setLocation(x, position.getY())[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_34 $$ double y = getLineHeight(g) - getDescent(g) + position.getY()[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_60 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_35 $$ if (backColor != null && myPerformActualDrawing) -->Line_39 $$ g.fill(new Area(new Rectangle2D.Double(position.getX(), y - getLineHeight(g) + getDescent(g), w, getLineHeight(g))))[ CD ]
Line_47 $$ String s = new String(text, start, i - start)-->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_47 $$ String s = new String(text, start, i - start)-->Line_48 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_48 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_48 $$ x += drawStringToGraphics(g, s, x, y)-->Line_55 $$ x += drawStringToGraphics(g, s, x, y)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_3 $$ boolean ret = true[ CD ]
Line_35 $$ if (backColor != null && myPerformActualDrawing) -->Line_37 $$ setBackgroundColor(g, backColor)[ CD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_24 $$ if (position.getY() > clip.getY() + clip.getHeight() - getLineHeight(g)) [ CD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_21 $$ int breakOffset = breakOffsets.get(i)[ CD ]
Line_46 $$ if (i > start) -->Line_48 $$ x += drawStringToGraphics(g, s, x, y)[ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_60 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) [ FD ]
Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) -->Line_58 $$ Color savedColor = g.getColor()[ CD ]
Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) -->Line_62 $$ g.setColor(savedColor)[ CD ]
Line_50 $$ x = nextTabStop(g, x)-->Line_64 $$ position.setLocation(x, position.getY())[ FD ]
Line_11 $$ if (myPrintSettings.WRAP) -->Line_13 $$ if (position.getX() + w > clip.getWidth()) [ CD ]
Line_3 $$ boolean ret = true-->Line_5 $$ ret = false[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_24 $$ if (position.getY() > clip.getY() + clip.getHeight() - getLineHeight(g)) [ FD ]
Line_57 $$ if (underscoredColor != null && myPerformActualDrawing) -->Line_59 $$ setForegroundColor(g, underscoredColor)[ CD ]
Line_6 $$ length = mySegmentEnd - myOffset-->Line_60 $$ double w = getTextSegmentWidth(text, myOffset, length, position.getX(), g)[ FD ]
Line_20 $$ for (int i = 0; i < breakOffsets.size(); i++) -->Line_51 $$ start = i + 1[ FD ]
Line_43 $$ for (int i = myOffset; i < myOffset + length; i++) -->Line_51 $$ start = i + 1[ CD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_53 $$ if (myOffset + length > start) [ CD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_21 $$ int breakOffset = breakOffsets.get(i)[ FD ]
Line_2 $$ private boolean drawTabbedString(final Graphics2D g, char[] text, int length, Point2D position, Rectangle2D clip, int colNumber, Color backColor, Color underscoredColor) -->Line_23 $$ position.setLocation(0, position.getY() + getLineHeight(g))[ FD ]
Line_51 $$ start = i + 1-->Line_46 $$ if (i > start) [ FD ]
Line_14 $$ IntArrayList breakOffsets = LineWrapper.calcBreakOffsets(text, myOffset, myOffset + length, colNumber, position.getX(), clip.getWidth(), new LineWrapper.WidthProvider() -->Line_51 $$ start = i + 1[ FD ]
