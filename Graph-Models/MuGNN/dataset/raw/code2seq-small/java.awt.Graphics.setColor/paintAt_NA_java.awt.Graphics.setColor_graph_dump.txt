Line_19 $$ caretColor = new JBColor(Gray._0, Gray._255)-->Line_43 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_17 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_18 $$ if (caretColor == null)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_43 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_26 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)[ CD ]
Line_11 $$ if (UIUtil.isRetina()) -->Line_14 $$ g.fillRect(x, y, JBUI.scale(mySettings.getLineCursorWidth()), lineHeight)[ CD ]
Line_28 $$ if (folding == null || folding.isExpanded()) -->Line_33 $$ if (visual.line == foldingPosition.line) [ CD ]
Line_17 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_20 $$ g.setColor(caretColor)[ FD ]
Line_26 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_27 $$ final char ch[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_4 $$ Rectangle viewRectangle = getScrollingModel().getVisibleArea()[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_8 $$ g.setColor(myScheme.getColor(EditorColors.CARET_COLOR))[ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_18 $$ if (caretColor == null)[ CD ]
Line_27 $$ final char ch-->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_29 $$ ch = chars.charAt(offset)-->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_5 $$ if (x - viewRectangle.x < 0) -->Line_6 $$ return[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_3 $$ int lineHeight = getLineHeight()[ CD ]
Line_24 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) [ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_17 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)[ CD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_44 $$ g.drawChars(new char[] [ CD ]
Line_23 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_36 $$ ch = chars.charAt(offset)[ FD ]
Line_40 $$ TextAttributes attributes = state.getMergedAttributes()-->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_18 $$ if (caretColor == null)-->Line_19 $$ caretColor = new JBColor(Gray._0, Gray._255)[ CD ]
Line_11 $$ if (UIUtil.isRetina()) -->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ CD ]
Line_36 $$ ch = chars.charAt(offset)-->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_28 $$ if (folding == null || folding.isExpanded()) -->Line_29 $$ ch = chars.charAt(offset)[ CD ]
Line_39 $$ IterationState state = new IterationState(EditorImpl.this, offset, offset + 1, true)-->Line_40 $$ TextAttributes attributes = state.getMergedAttributes()[ FD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_40 $$ TextAttributes attributes = state.getMergedAttributes()[ CD ]
Line_17 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_43 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ FD ]
Line_3 $$ int lineHeight = getLineHeight()-->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)-->Line_42 $$ g.setFont(info.getFont())[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_11 $$ if (UIUtil.isRetina()) [ CD ]
Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)-->Line_36 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_21 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ FD ]
Line_26 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_32 $$ VisualPosition foldingPosition = offsetToVisualPosition(folding.getStartOffset())[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_20 $$ g.setColor(caretColor)[ CD ]
Line_33 $$ if (visual.line == foldingPosition.line) -->Line_36 $$ ch = chars.charAt(offset)[ CD ]
Line_19 $$ caretColor = new JBColor(Gray._0, Gray._255)-->Line_20 $$ g.setColor(caretColor)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_21 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ CD ]
Line_24 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_36 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_42 $$ g.setFont(info.getFont())[ FD ]
Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)-->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_23 $$ final int offset = logicalPositionToOffset(startPosition)[ CD ]
Line_29 $$ ch = chars.charAt(offset)-->Line_36 $$ ch = chars.charAt(offset)[ FD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_42 $$ g.setFont(info.getFont())[ CD ]
Line_23 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_29 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)[ FD ]
Line_23 $$ final int offset = logicalPositionToOffset(startPosition)-->Line_26 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)[ FD ]
Line_17 $$ Color caretColor = myScheme.getColor(EditorColors.CARET_COLOR)-->Line_19 $$ caretColor = new JBColor(Gray._0, Gray._255)[ FD ]
Line_27 $$ final char ch-->Line_29 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_20 $$ g.setColor(caretColor)[ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) [ CD ]
Line_29 $$ ch = chars.charAt(offset)-->Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_31 $$ VisualPosition visual = caret == null ? getCaretModel().getVisualPosition() : caret.getVisualPosition()[ FD ]
Line_22 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()-->Line_23 $$ final int offset = logicalPositionToOffset(startPosition)[ FD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_41 $$ FontInfo info = EditorUtil.fontForChar(ch, attributes.getFontType(), EditorImpl.this)[ CD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_28 $$ if (folding == null || folding.isExpanded()) [ CD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_39 $$ IterationState state = new IterationState(EditorImpl.this, offset, offset + 1, true)[ CD ]
Line_25 $$ if (chars.length() > offset && myDocument.getTextLength() > offset) -->Line_43 $$ g.setColor(ColorUtil.isDark(caretColor) ? CURSOR_FOREGROUND_LIGHT : CURSOR_FOREGROUND_DARK)[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_22 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()[ FD ]
Line_28 $$ if (folding == null || folding.isExpanded()) -->Line_31 $$ VisualPosition visual = caret == null ? getCaretModel().getVisualPosition() : caret.getVisualPosition()[ CD ]
Line_3 $$ int lineHeight = getLineHeight()-->Line_14 $$ g.fillRect(x, y, JBUI.scale(mySettings.getLineCursorWidth()), lineHeight)[ FD ]
Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)-->Line_21 $$ originalG.fillRect(x, y, width, lineHeight - 1)[ FD ]
Line_33 $$ if (visual.line == foldingPosition.line) -->Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)[ CD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_44 $$ g.drawChars(new char[] [ FD ]
Line_28 $$ if (folding == null || folding.isExpanded()) -->Line_32 $$ VisualPosition foldingPosition = offsetToVisualPosition(folding.getStartOffset())[ CD ]
Line_27 $$ final char ch-->Line_34 $$ ch = folding.getPlaceholderText().charAt(visual.column - foldingPosition.column)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_5 $$ if (x - viewRectangle.x < 0) [ CD ]
Line_27 $$ final char ch-->Line_36 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_10 $$ if (!paintBlockCaret()) [ CD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_22 $$ final LogicalPosition startPosition = caret == null ? getCaretModel().getLogicalPosition() : caret.getLogicalPosition()[ CD ]
Line_26 $$ FoldRegion folding = myFoldingModel.getCollapsedRegionAtOffset(offset)-->Line_28 $$ if (folding == null || folding.isExpanded()) [ FD ]
Line_10 $$ if (!paintBlockCaret()) -->Line_24 $$ CharSequence chars = myDocument.getImmutableCharSequence()[ CD ]
Line_24 $$ CharSequence chars = myDocument.getImmutableCharSequence()-->Line_29 $$ ch = chars.charAt(offset)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_14 $$ g.fillRect(x, y, JBUI.scale(mySettings.getLineCursorWidth()), lineHeight)[ FD ]
Line_9 $$ Graphics2D originalG = IdeBackgroundUtil.getOriginalGraphics(g)-->Line_12 $$ originalG.fillRect(x, y, mySettings.getLineCursorWidth(), lineHeight)[ FD ]
Line_2 $$ void paintAt(@NotNull Graphics g, int x, int y, int width, Caret caret) -->Line_8 $$ g.setColor(myScheme.getColor(EditorColors.CARET_COLOR))[ FD ]
