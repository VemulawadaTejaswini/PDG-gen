Line_2 $$ public void test1() throws Exception -->Line_8 $$ assertEquals("type 'help' for a list of commands", in.readLine())[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_9 $$ out.println("set a b")[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_16 $$ assertEmptyLine(in)[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_18 $$ out.flush()[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_20 $$ assertEmptyLine(in)[ CD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_10 $$ out.flush()[ FD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_15 $$ assertReply("b", in.readLine())[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_3 $$ final Socket socket = new Socket(managementClient.getWebUri().getHost(), 2020)[ CD ]
Line_3 $$ final Socket socket = new Socket(managementClient.getWebUri().getHost(), 2020)-->Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_17 $$ out.println("list")[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)[ CD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_13 $$ out.println("get a")[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_10 $$ out.flush()[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_14 $$ out.flush()[ CD ]
Line_2 $$ public void test1() throws Exception -->Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))[ CD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_12 $$ assertEmptyLine(in)[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_15 $$ assertReply("b", in.readLine())[ CD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_16 $$ assertEmptyLine(in)[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_19 $$ assertReply("a = b", in.readLine())[ CD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_18 $$ out.flush()[ FD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_9 $$ out.println("set a b")[ FD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_7 $$ assertEmptyLine(in)[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_7 $$ assertEmptyLine(in)[ CD ]
Line_3 $$ final Socket socket = new Socket(managementClient.getWebUri().getHost(), 2020)-->Line_4 $$ final OutputStream sockOut = socket.getOutputStream()[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_12 $$ assertEmptyLine(in)[ CD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_19 $$ assertReply("a = b", in.readLine())[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_4 $$ final OutputStream sockOut = socket.getOutputStream()[ CD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_8 $$ assertEquals("type 'help' for a list of commands", in.readLine())[ FD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_20 $$ assertEmptyLine(in)[ FD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_17 $$ out.println("list")[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_13 $$ out.println("get a")[ CD ]
Line_5 $$ final DataInputStream in = new DataInputStream(new TelnetInputStream(socket.getInputStream(), sockOut))-->Line_11 $$ assertReply("set a to b", in.readLine())[ FD ]
Line_6 $$ final PrintStream out = new TelnetPrintStream(sockOut)-->Line_14 $$ out.flush()[ FD ]
Line_2 $$ public void test1() throws Exception -->Line_11 $$ assertReply("set a to b", in.readLine())[ CD ]
