Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_36 $$ verifySizes(commitLog)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_37 $$ commitLog.shutdownBlocking()[ FD ]
Line_34 $$ cells += t.cells-->Line_48 $$ System.out.format("Test failed. Cells %d expected %d, hash %d expected %d.\n", repl.cells, cells, repl.hash, hash)[ FD ]
Line_40 $$ Replayer repl = new Replayer(commitLog)-->Line_42 $$ repl.recover(files)[ FD ]
Line_8 $$ if (discardedRun) -->Line_12 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ CD ]
Line_30 $$ int cells = 0-->Line_34 $$ cells += t.cells[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_8 $$ if (discardedRun) [ CD ]
Line_23 $$ scheduled = startThreads(commitLog, threads)-->Line_27 $$ scheduled.shutdown()[ FD ]
Line_23 $$ scheduled = startThreads(commitLog, threads)-->Line_28 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_39 $$ System.out.flush()[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_18 $$ verifySizes(commitLog)[ FD ]
Line_13 $$ for (CommitlogExecutor t : threads) -->Line_14 $$ t.join()[ FD ]
Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()-->Line_23 $$ scheduled = startThreads(commitLog, threads)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_27 $$ scheduled.shutdown()[ CD ]
Line_8 $$ if (discardedRun) -->Line_9 $$ Thread.sleep(runTimeMs / 3)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_30 $$ int cells = 0[ CD ]
Line_41 $$ File[] files = new File(location).listFiles()-->Line_42 $$ repl.recover(files)[ FD ]
Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()-->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ FD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_27 $$ scheduled.shutdown()[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_22 $$ verifySizes(commitLog)[ FD ]
Line_8 $$ if (discardedRun) -->Line_20 $$ threads.clear()[ CD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_28 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_23 $$ scheduled = startThreads(commitLog, threads)[ FD ]
Line_33 $$ hash += t.hash-->Line_48 $$ System.out.format("Test failed. Cells %d expected %d, hash %d expected %d.\n", repl.cells, cells, repl.hash, hash)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_45 $$ if (hash == repl.hash && cells == repl.cells)[ CD ]
Line_8 $$ if (discardedRun) -->Line_21 $$ System.out.format("Discarded at %s\n", discardedPos)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_37 $$ commitLog.shutdownBlocking()[ CD ]
Line_13 $$ for (CommitlogExecutor t : threads) -->Line_32 $$ t.join()[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_42 $$ repl.recover(files)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_40 $$ Replayer repl = new Replayer(commitLog)[ CD ]
Line_8 $$ if (discardedRun) -->Line_22 $$ verifySizes(commitLog)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_19 $$ commitLog.discardCompletedSegments(Schema.instance.getCFMetaData("Keyspace1", "Standard1").cfId, discardedPos)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_36 $$ verifySizes(commitLog)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_3 $$ System.out.format("\nTesting commit log size %.0fmb, compressor %s, sync %s%s%s\n", mb(DatabaseDescriptor.getCommitLogSegmentSize()), commitLog.compressor != null ? commitLog.compressor.getClass().getSimpleName() : "none", commitLog.executor.getClass().getSimpleName(), randomSize ? " random size" : "", discardedRun ? " with discarded run" : "")[ CD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_11 $$ scheduled.shutdown()[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_28 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_41 $$ File[] files = new File(location).listFiles()[ CD ]
Line_45 $$ if (hash == repl.hash && cells == repl.cells)-->Line_46 $$ System.out.println("Test success.")[ CD ]
Line_29 $$ int hash = 0-->Line_48 $$ System.out.format("Test failed. Cells %d expected %d, hash %d expected %d.\n", repl.cells, cells, repl.hash, hash)[ FD ]
Line_30 $$ int cells = 0-->Line_48 $$ System.out.format("Test failed. Cells %d expected %d, hash %d expected %d.\n", repl.cells, cells, repl.hash, hash)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()[ CD ]
Line_8 $$ if (discardedRun) -->Line_23 $$ scheduled = startThreads(commitLog, threads)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_25 $$ Thread.sleep(runTimeMs)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_29 $$ int hash = 0[ CD ]
Line_45 $$ if (hash == repl.hash && cells == repl.cells)-->Line_48 $$ System.out.format("Test failed. Cells %d expected %d, hash %d expected %d.\n", repl.cells, cells, repl.hash, hash)[ CD ]
Line_8 $$ if (discardedRun) -->Line_18 $$ verifySizes(commitLog)[ CD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_4 $$ commitLog.allocator.enableReserveSegmentCreation()[ CD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_23 $$ scheduled = startThreads(commitLog, threads)[ FD ]
Line_2 $$ public void testLog(CommitLog commitLog) throws IOException, InterruptedException -->Line_38 $$ System.out.print("Stopped. Replaying... ")[ CD ]
Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()-->Line_20 $$ threads.clear()[ FD ]
Line_29 $$ int hash = 0-->Line_33 $$ hash += t.hash[ FD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_12 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ FD ]
Line_8 $$ if (discardedRun) -->Line_11 $$ scheduled.shutdown()[ CD ]
Line_43 $$ if (!f.delete())-->Line_44 $$ Assert.fail("Failed to delete " + f)[ CD ]
Line_8 $$ if (discardedRun) -->Line_19 $$ commitLog.discardCompletedSegments(Schema.instance.getCFMetaData("Keyspace1", "Standard1").cfId, discardedPos)[ CD ]
