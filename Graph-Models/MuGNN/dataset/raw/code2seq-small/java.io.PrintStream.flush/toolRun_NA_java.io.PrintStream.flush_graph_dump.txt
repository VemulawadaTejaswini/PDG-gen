Line_8 $$ String output = null-->Line_19 $$ output = bs.toString()[ FD ]
Line_15 $$ ret = tool.run(cmds)-->Line_28 $$ assertEquals(retcode, ret)[ FD ]
Line_8 $$ String output = null-->Line_25 $$ if (output != null) [ FD ]
Line_3 $$ String[] cmds = StringUtils.split(cmd, ' ')-->Line_15 $$ ret = tool.run(cmds)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_9 $$ int ret = 0[ CD ]
Line_8 $$ String output = null-->Line_26 $$ System.out.println(output)[ FD ]
Line_19 $$ output = bs.toString()-->Line_26 $$ System.out.println(output)[ FD ]
Line_6 $$ PrintStream origOut = System.out-->Line_21 $$ System.setOut(origOut)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_7 $$ PrintStream origErr = System.err[ CD ]
Line_19 $$ output = bs.toString()-->Line_25 $$ if (output != null) [ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_3 $$ String[] cmds = StringUtils.split(cmd, ' ')[ CD ]
Line_9 $$ int ret = 0-->Line_28 $$ assertEquals(retcode, ret)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_5 $$ System.err.flush()[ CD ]
Line_7 $$ PrintStream origErr = System.err-->Line_22 $$ System.setErr(origErr)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_15 $$ ret = tool.run(cmds)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_29 $$ if (contain != null) [ CD ]
Line_12 $$ PrintStream out = new PrintStream(bs)-->Line_13 $$ System.setOut(out)[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_25 $$ if (output != null) [ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_29 $$ if (contain != null) [ FD ]
Line_19 $$ output = bs.toString()-->Line_30 $$ assertTrue(output.contains(contain))[ FD ]
Line_12 $$ PrintStream out = new PrintStream(bs)-->Line_18 $$ out.close()[ FD ]
Line_29 $$ if (contain != null) -->Line_30 $$ assertTrue(output.contains(contain))[ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_28 $$ assertEquals(retcode, ret)[ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_4 $$ System.out.flush()[ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_28 $$ assertEquals(retcode, ret)[ FD ]
Line_8 $$ String output = null-->Line_30 $$ assertTrue(output.contains(contain))[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_30 $$ assertTrue(output.contains(contain))[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_6 $$ PrintStream origOut = System.out[ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_8 $$ String output = null[ CD ]
Line_12 $$ PrintStream out = new PrintStream(bs)-->Line_14 $$ System.setErr(out)[ FD ]
Line_11 $$ ByteArrayOutputStream bs = new ByteArrayOutputStream(1024)-->Line_19 $$ output = bs.toString()[ FD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_3 $$ String[] cmds = StringUtils.split(cmd, ' ')[ FD ]
Line_9 $$ int ret = 0-->Line_15 $$ ret = tool.run(cmds)[ FD ]
Line_25 $$ if (output != null) -->Line_26 $$ System.out.println(output)[ CD ]
Line_2 $$ private void toolRun(Tool tool, String cmd, int retcode, String contain) throws Exception -->Line_24 $$ System.out.println("Output for command: " + cmd + " retcode: " + ret)[ CD ]
