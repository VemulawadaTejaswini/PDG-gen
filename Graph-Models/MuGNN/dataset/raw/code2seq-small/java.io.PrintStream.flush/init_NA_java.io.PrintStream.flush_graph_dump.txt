Line_45 $$ if (INSTANCE.node != null) -->Line_46 $$ logger = Loggers.getLogger(Bootstrap.class, INSTANCE.node.settings().get("name"))[ CD ]
Line_12 $$ foreground = false-->Line_14 $$ Environment environment = initialSettings(foreground)[ FD ]
Line_15 $$ Settings settings = environment.settings()-->Line_35 $$ INSTANCE.setup(true, settings, environment)[ FD ]
Line_48 $$ if (e instanceof CreationException) -->Line_51 $$ new StartupError(e).printStackTrace(ps)[ CD ]
Line_48 $$ if (e instanceof CreationException) -->Line_55 $$ logger.error("Exception", e)[ CD ]
Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)-->Line_46 $$ logger = Loggers.getLogger(Bootstrap.class, INSTANCE.node.settings().get("name"))[ FD ]
Line_50 $$ PrintStream ps = new PrintStream(os, false, "UTF-8")-->Line_52 $$ ps.flush()[ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_16 $$ setupLogging(settings, environment)[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_3 $$ initLoggerPrefix()[ CD ]
Line_14 $$ Environment environment = initialSettings(foreground)-->Line_18 $$ if (environment.pidFile() != null) [ FD ]
Line_10 $$ boolean foreground = !"false".equals(System.getProperty("es.foreground", System.getProperty("es-foreground")))-->Line_30 $$ if (!foreground) [ FD ]
Line_37 $$ if (!foreground) -->Line_38 $$ closeSysError()[ CD ]
Line_48 $$ if (e instanceof CreationException) -->Line_49 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()[ CD ]
Line_57 $$ if (foreground) -->Line_58 $$ Loggers.enableConsoleLogging()[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_5 $$ CliTool.ExitStatus status = bootstrapCLIParser.execute(args)[ CD ]
Line_14 $$ Environment environment = initialSettings(foreground)-->Line_15 $$ Settings settings = environment.settings()[ FD ]
Line_10 $$ boolean foreground = !"false".equals(System.getProperty("es.foreground", System.getProperty("es-foreground")))-->Line_37 $$ if (!foreground) [ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_18 $$ if (environment.pidFile() != null) [ CD ]
Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)-->Line_27 $$ logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line")[ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_14 $$ Environment environment = initialSettings(foreground)[ CD ]
Line_48 $$ if (e instanceof CreationException) -->Line_52 $$ ps.flush()[ CD ]
Line_5 $$ CliTool.ExitStatus status = bootstrapCLIParser.execute(args)-->Line_6 $$ if (CliTool.ExitStatus.OK != status) [ FD ]
Line_12 $$ foreground = false-->Line_37 $$ if (!foreground) [ FD ]
Line_14 $$ Environment environment = initialSettings(foreground)-->Line_19 $$ PidFile.create(environment.pidFile(), true)[ FD ]
Line_12 $$ foreground = false-->Line_30 $$ if (!foreground) [ FD ]
Line_46 $$ logger = Loggers.getLogger(Bootstrap.class, INSTANCE.node.settings().get("name"))-->Line_53 $$ logger.error("Guice Exception: [ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_4 $$ BootstrapCLIParser bootstrapCLIParser = new BootstrapCLIParser()[ CD ]
Line_48 $$ if (e instanceof CreationException) -->Line_50 $$ PrintStream ps = new PrintStream(os, false, "UTF-8")[ CD ]
Line_10 $$ boolean foreground = !"false".equals(System.getProperty("es.foreground", System.getProperty("es-foreground")))-->Line_14 $$ Environment environment = initialSettings(foreground)[ FD ]
Line_4 $$ BootstrapCLIParser bootstrapCLIParser = new BootstrapCLIParser()-->Line_5 $$ CliTool.ExitStatus status = bootstrapCLIParser.execute(args)[ FD ]
Line_5 $$ CliTool.ExitStatus status = bootstrapCLIParser.execute(args)-->Line_7 $$ exit(status.status())[ FD ]
Line_30 $$ if (!foreground) -->Line_31 $$ Loggers.disableConsoleLogging()[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_5 $$ CliTool.ExitStatus status = bootstrapCLIParser.execute(args)[ FD ]
Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)-->Line_23 $$ logger.info("max_open_files [[ FD ]
Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)-->Line_55 $$ logger.error("Exception", e)[ FD ]
Line_14 $$ Environment environment = initialSettings(foreground)-->Line_35 $$ INSTANCE.setup(true, settings, environment)[ FD ]
Line_30 $$ if (!foreground) -->Line_32 $$ closeSystOut()[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_15 $$ Settings settings = environment.settings()[ CD ]
Line_18 $$ if (environment.pidFile() != null) -->Line_19 $$ PidFile.create(environment.pidFile(), true)[ CD ]
Line_10 $$ boolean foreground = !"false".equals(System.getProperty("es.foreground", System.getProperty("es-foreground")))-->Line_12 $$ foreground = false[ FD ]
Line_21 $$ if (System.getProperty("es.max-open-files", "false").equals("true")) -->Line_23 $$ logger.info("max_open_files [[ CD ]
Line_48 $$ if (e instanceof CreationException) -->Line_53 $$ logger.error("Guice Exception: [ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_10 $$ boolean foreground = !"false".equals(System.getProperty("es.foreground", System.getProperty("es-foreground")))[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_21 $$ if (System.getProperty("es.max-open-files", "false").equals("true")) [ CD ]
Line_15 $$ Settings settings = environment.settings()-->Line_16 $$ setupLogging(settings, environment)[ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_11 $$ if (System.getProperty("wrapper.service", "XXX").equalsIgnoreCase("true")) [ CD ]
Line_41 $$ if (foreground) -->Line_42 $$ Loggers.disableConsoleLogging()[ CD ]
Line_49 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_53 $$ logger.error("Guice Exception: [ FD ]
Line_21 $$ if (System.getProperty("es.max-open-files", "false").equals("true")) -->Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)[ CD ]
Line_6 $$ if (CliTool.ExitStatus.OK != status) -->Line_7 $$ exit(status.status())[ CD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_25 $$ if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) [ CD ]
Line_22 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)-->Line_53 $$ logger.error("Guice Exception: [ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_6 $$ if (CliTool.ExitStatus.OK != status) [ CD ]
Line_46 $$ logger = Loggers.getLogger(Bootstrap.class, INSTANCE.node.settings().get("name"))-->Line_55 $$ logger.error("Exception", e)[ FD ]
Line_2 $$ static void init(String[] args) throws Throwable -->Line_17 $$ checkForCustomConfFile()[ CD ]
Line_50 $$ PrintStream ps = new PrintStream(os, false, "UTF-8")-->Line_51 $$ new StartupError(e).printStackTrace(ps)[ FD ]
Line_25 $$ if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) -->Line_26 $$ ESLogger logger = Loggers.getLogger(Bootstrap.class)[ CD ]
Line_25 $$ if (JvmInfo.jvmInfo().getVmName().toLowerCase(Locale.ROOT).contains("client")) -->Line_27 $$ logger.warn("jvm uses the client vm, make sure to run `java` with the server vm for best performance by adding `-server` to the command line")[ CD ]
Line_11 $$ if (System.getProperty("wrapper.service", "XXX").equalsIgnoreCase("true")) -->Line_12 $$ foreground = false[ CD ]
Line_14 $$ Environment environment = initialSettings(foreground)-->Line_16 $$ setupLogging(settings, environment)[ FD ]
