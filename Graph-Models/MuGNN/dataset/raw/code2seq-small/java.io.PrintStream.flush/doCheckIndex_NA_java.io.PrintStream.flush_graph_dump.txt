Line_2 $$ private void doCheckIndex() throws IOException -->Line_55 $$ if (logger.isDebugEnabled()) [ CD ]
Line_40 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_45 $$ if (logger.isDebugEnabled()) [ CD ]
Line_20 $$ corrupt = exc-->Line_24 $$ if (corrupt != null) [ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_33 $$ out.flush()[ FD ]
Line_13 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_16 $$ out.println("checksum passed: " + entry.getKey())[ FD ]
Line_32 $$ CheckIndex.Status status = checkIndex.checkIndex()-->Line_44 $$ checkIndex.exorciseIndex(status)[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())[ CD ]
Line_4 $$ if (!Lucene.indexExists(store.directory())) -->Line_5 $$ return[ CD ]
Line_40 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_44 $$ checkIndex.exorciseIndex(status)[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_4 $$ if (!Lucene.indexExists(store.directory())) [ CD ]
Line_34 $$ if (!status.clean) -->Line_39 $$ logger.warn("check index [failure]\n[ CD ]
Line_41 $$ if (logger.isDebugEnabled()) -->Line_42 $$ logger.debug("fixing index, writing new segments file ...")[ CD ]
Line_55 $$ if (logger.isDebugEnabled()) -->Line_56 $$ logger.debug("check index [success]\n[ CD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_23 $$ out.flush()[ CD ]
Line_13 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_18 $$ out.println("checksum failed: " + entry.getKey())[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_3 $$ long timeNS = System.nanoTime()[ CD ]
Line_40 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_41 $$ if (logger.isDebugEnabled()) [ CD ]
Line_12 $$ MetadataSnapshot metadata = store.getMetadata()-->Line_13 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) [ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_23 $$ out.flush()[ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_19 $$ exc.printStackTrace(out)[ FD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_12 $$ MetadataSnapshot metadata = store.getMetadata()[ CD ]
Line_45 $$ if (logger.isDebugEnabled()) -->Line_46 $$ logger.debug("index fixed, wrote new segments file \"[ CD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_24 $$ if (corrupt != null) [ CD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_31 $$ checkIndex.setInfoStream(out)[ FD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_56 $$ logger.debug("check index [success]\n[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_58 $$ recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - timeNS)))[ CD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_25 $$ logger.warn("check index [failure]\n[ FD ]
Line_24 $$ if (corrupt != null) -->Line_25 $$ logger.warn("check index [failure]\n[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) [ CD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_18 $$ out.println("checksum failed: " + entry.getKey())[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()[ CD ]
Line_34 $$ if (!status.clean) -->Line_35 $$ if (state == IndexShardState.CLOSED) [ CD ]
Line_13 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_15 $$ Store.checkIntegrity(entry.getValue(), store.directory())[ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_16 $$ out.println("checksum passed: " + entry.getKey())[ FD ]
Line_34 $$ if (!status.clean) -->Line_40 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) [ CD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_39 $$ logger.warn("check index [failure]\n[ FD ]
