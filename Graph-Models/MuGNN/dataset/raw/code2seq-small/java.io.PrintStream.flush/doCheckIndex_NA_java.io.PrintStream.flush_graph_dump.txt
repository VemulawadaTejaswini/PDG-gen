Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_29 $$ checkIndex.setInfoStream(out)[ FD ]
Line_11 $$ MetadataSnapshot metadata = store.getMetadata()-->Line_12 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) [ FD ]
Line_12 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_17 $$ out.println("checksum failed: " + entry.getKey())[ FD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_10 $$ IOException corrupt = null[ CD ]
Line_37 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_38 $$ if (logger.isDebugEnabled()) [ CD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_17 $$ out.println("checksum failed: " + entry.getKey())[ FD ]
Line_42 $$ if (logger.isDebugEnabled()) -->Line_43 $$ logger.debug("index fixed, wrote new segments file \"[ CD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_11 $$ MetadataSnapshot metadata = store.getMetadata()[ CD ]
Line_51 $$ if (logger.isDebugEnabled()) -->Line_52 $$ logger.debug("check index [success]\n[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_54 $$ recoveryState.getVerifyIndex().checkIndexTime(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - timeNS)))[ CD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_24 $$ logger.warn("check index [failure]\n[ FD ]
Line_23 $$ if (corrupt != null) -->Line_24 $$ logger.warn("check index [failure]\n[ CD ]
Line_37 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_41 $$ checkIndex.exorciseIndex(status)[ CD ]
Line_33 $$ if (state == IndexShardState.CLOSED) -->Line_34 $$ return[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())[ CD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_22 $$ out.flush()[ CD ]
Line_4 $$ if (!Lucene.indexExists(store.directory())) -->Line_5 $$ return[ CD ]
Line_19 $$ corrupt = exc-->Line_23 $$ if (corrupt != null) [ FD ]
Line_32 $$ if (!status.clean) -->Line_36 $$ logger.warn("check index [failure]\n[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_3 $$ long timeNS = System.nanoTime()[ CD ]
Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) -->Line_23 $$ if (corrupt != null) [ CD ]
Line_32 $$ if (!status.clean) -->Line_33 $$ if (state == IndexShardState.CLOSED) [ CD ]
Line_10 $$ IOException corrupt = null-->Line_19 $$ corrupt = exc[ FD ]
Line_12 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_14 $$ Store.checkIntegrity(entry.getValue(), store.directory())[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_9 $$ if ("checksum".equalsIgnoreCase(checkIndexOnStartup)) [ CD ]
Line_28 $$ try (CheckIndex checkIndex = new CheckIndex(store.directory())) -->Line_30 $$ CheckIndex.Status status = checkIndex.checkIndex()[ FD ]
Line_28 $$ try (CheckIndex checkIndex = new CheckIndex(store.directory())) -->Line_41 $$ checkIndex.exorciseIndex(status)[ FD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_36 $$ logger.warn("check index [failure]\n[ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_22 $$ out.flush()[ FD ]
Line_38 $$ if (logger.isDebugEnabled()) -->Line_39 $$ logger.debug("fixing index, writing new segments file ...")[ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_51 $$ if (logger.isDebugEnabled()) [ CD ]
Line_28 $$ try (CheckIndex checkIndex = new CheckIndex(store.directory())) -->Line_29 $$ checkIndex.setInfoStream(out)[ FD ]
Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()-->Line_52 $$ logger.debug("check index [success]\n[ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_31 $$ out.flush()[ FD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_4 $$ if (!Lucene.indexExists(store.directory())) [ CD ]
Line_2 $$ private void doCheckIndex() throws IOException -->Line_7 $$ BytesStreamOutput os = new BytesStreamOutput()[ CD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_15 $$ out.println("checksum passed: " + entry.getKey())[ FD ]
Line_32 $$ if (!status.clean) -->Line_37 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) [ CD ]
Line_30 $$ CheckIndex.Status status = checkIndex.checkIndex()-->Line_41 $$ checkIndex.exorciseIndex(status)[ FD ]
Line_37 $$ if ("fix".equalsIgnoreCase(checkIndexOnStartup)) -->Line_42 $$ if (logger.isDebugEnabled()) [ CD ]
Line_12 $$ for (Map.Entry<String, StoreFileMetaData> entry : metadata.asMap().entrySet()) -->Line_15 $$ out.println("checksum passed: " + entry.getKey())[ FD ]
Line_8 $$ PrintStream out = new PrintStream(os, false, StandardCharsets.UTF_8.name())-->Line_18 $$ exc.printStackTrace(out)[ FD ]
Line_10 $$ IOException corrupt = null-->Line_23 $$ if (corrupt != null) [ FD ]
