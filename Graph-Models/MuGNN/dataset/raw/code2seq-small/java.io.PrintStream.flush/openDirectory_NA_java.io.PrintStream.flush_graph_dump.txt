Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_25 $$ if (t != Packet.SSH_FXP_STATUS)[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_27 $$ int errorCode = tr.readUINT32()[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_17 $$ if (t == Packet.SSH_FXP_HANDLE) [ CD ]
Line_13 $$ int t = tr.readByte()-->Line_17 $$ if (t == Packet.SSH_FXP_HANDLE) [ FD ]
Line_4 $$ TypesWriter tw = new TypesWriter()-->Line_5 $$ tw.writeString(path, charsetName)[ FD ]
Line_17 $$ if (t == Packet.SSH_FXP_HANDLE) -->Line_18 $$ if (debug != null) [ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_11 $$ byte[] resp = receiveMessage(34000)[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_12 $$ TypesReader tr = new TypesReader(resp)[ CD ]
Line_18 $$ if (debug != null) -->Line_20 $$ debug.flush()[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_15 $$ if (rep_id != req_id)[ CD ]
Line_14 $$ int rep_id = tr.readUINT32()-->Line_15 $$ if (rep_id != req_id)[ FD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_28 $$ String errorMessage = tr.readString()[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_10 $$ sendMessage(Packet.SSH_FXP_OPENDIR, req_id, tw.getBytes())[ CD ]
Line_12 $$ TypesReader tr = new TypesReader(resp)-->Line_28 $$ String errorMessage = tr.readString()[ FD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_5 $$ tw.writeString(path, charsetName)[ CD ]
Line_18 $$ if (debug != null) -->Line_19 $$ debug.println("Got SSH_FXP_HANDLE.")[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_5 $$ tw.writeString(path, charsetName)[ FD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_3 $$ int req_id = generateNextRequestID()[ CD ]
Line_4 $$ TypesWriter tw = new TypesWriter()-->Line_10 $$ sendMessage(Packet.SSH_FXP_OPENDIR, req_id, tw.getBytes())[ FD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_14 $$ int rep_id = tr.readUINT32()[ CD ]
Line_12 $$ TypesReader tr = new TypesReader(resp)-->Line_14 $$ int rep_id = tr.readUINT32()[ FD ]
Line_17 $$ if (t == Packet.SSH_FXP_HANDLE) -->Line_22 $$ byte[] handle = tr.readByteString()[ CD ]
Line_12 $$ TypesReader tr = new TypesReader(resp)-->Line_27 $$ int errorCode = tr.readUINT32()[ FD ]
Line_3 $$ int req_id = generateNextRequestID()-->Line_15 $$ if (rep_id != req_id)[ FD ]
Line_12 $$ TypesReader tr = new TypesReader(resp)-->Line_22 $$ byte[] handle = tr.readByteString()[ FD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_4 $$ TypesWriter tw = new TypesWriter()[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_6 $$ if (debug != null) [ CD ]
Line_17 $$ if (t == Packet.SSH_FXP_HANDLE) -->Line_23 $$ return handle[ CD ]
Line_12 $$ TypesReader tr = new TypesReader(resp)-->Line_13 $$ int t = tr.readByte()[ FD ]
Line_3 $$ int req_id = generateNextRequestID()-->Line_10 $$ sendMessage(Packet.SSH_FXP_OPENDIR, req_id, tw.getBytes())[ FD ]
Line_13 $$ int t = tr.readByte()-->Line_25 $$ if (t != Packet.SSH_FXP_STATUS)[ FD ]
Line_6 $$ if (debug != null) -->Line_8 $$ debug.flush()[ CD ]
Line_2 $$ private final byte[] openDirectory(String path) throws IOException -->Line_13 $$ int t = tr.readByte()[ CD ]
Line_6 $$ if (debug != null) -->Line_7 $$ debug.println("Sending SSH_FXP_OPENDIR...")[ CD ]
