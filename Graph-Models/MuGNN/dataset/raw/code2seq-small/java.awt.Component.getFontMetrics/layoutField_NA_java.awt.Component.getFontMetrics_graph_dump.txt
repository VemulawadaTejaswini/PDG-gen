Line_19 $$ off = caret-->Line_21 $$ off = caret - width + 4[ FD ]
Line_6 $$ if (start > text.length()) -->Line_7 $$ setInteger(component, "start", start = text.length(), 0)[ CD ]
Line_9 $$ int end = getInteger(component, "end", 0)-->Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_11 $$ setInteger(component, "end", end = text.length(), 0)[ FD ]
Line_19 $$ off = caret-->Line_20 $$ if (off < caret - width + 4) [ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ CD ]
Line_20 $$ if (off < caret - width + 4) -->Line_21 $$ off = caret - width + 4[ CD ]
Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))-->Line_24 $$ if (off != offset) [ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_14 $$ int off = offset[ CD ]
Line_14 $$ int off = offset-->Line_19 $$ off = caret[ FD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ FD ]
Line_9 $$ int end = getInteger(component, "end", 0)-->Line_10 $$ if (end > text.length()) [ FD ]
Line_19 $$ off = caret-->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_5 $$ int start = getInteger(component, "start", 0)[ FD ]
Line_21 $$ off = caret - width + 4-->Line_25 $$ setInteger(component, "offset", off, 0)[ FD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_10 $$ if (end > text.length()) [ FD ]
Line_14 $$ int off = offset-->Line_24 $$ if (off != offset) [ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_3 $$ int width = getRectangle(component, "bounds").width - left - dw[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_9 $$ int end = getInteger(component, "end", 0)[ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_24 $$ if (off != offset) [ CD ]
Line_19 $$ off = caret-->Line_25 $$ setInteger(component, "offset", off, 0)[ FD ]
Line_18 $$ if (off > caret) -->Line_19 $$ off = caret[ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_25 $$ setInteger(component, "offset", off, 0)[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_4 $$ String text = getString(component, "text", "")[ CD ]
Line_9 $$ int end = getInteger(component, "end", 0)-->Line_11 $$ setInteger(component, "end", end = text.length(), 0)[ FD ]
Line_5 $$ int start = getInteger(component, "start", 0)-->Line_6 $$ if (start > text.length()) [ FD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_11 $$ setInteger(component, "end", end = text.length(), 0)[ FD ]
Line_19 $$ off = caret-->Line_24 $$ if (off != offset) [ FD ]
Line_14 $$ int off = offset-->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_3 $$ int width = getRectangle(component, "bounds").width - left - dw[ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_15 $$ FontMetrics fm = getFontMetrics(getFont())[ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_13 $$ int offset = getInteger(component, "offset", 0)[ CD ]
Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))-->Line_25 $$ setInteger(component, "offset", off, 0)[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))[ CD ]
Line_14 $$ int off = offset-->Line_25 $$ setInteger(component, "offset", off, 0)[ FD ]
Line_14 $$ int off = offset-->Line_20 $$ if (off < caret - width + 4) [ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_4 $$ String text = getString(component, "text", "")[ FD ]
Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))-->Line_18 $$ if (off > caret) [ FD ]
Line_21 $$ off = caret - width + 4-->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_7 $$ setInteger(component, "start", start = text.length(), 0)[ FD ]
Line_11 $$ setInteger(component, "end", end = text.length(), 0)-->Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_6 $$ if (start > text.length()) [ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_10 $$ if (end > text.length()) [ CD ]
Line_14 $$ int off = offset-->Line_21 $$ off = caret - width + 4[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_9 $$ int end = getInteger(component, "end", 0)[ FD ]
Line_14 $$ int off = offset-->Line_18 $$ if (off > caret) [ FD ]
Line_15 $$ FontMetrics fm = getFontMetrics(getFont())-->Line_23 $$ off = Math.max(0, Math.min(off, (hidden ? (fm.charWidth('*') * text.length()) : fm.stringWidth(text)) - width + 4))[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_5 $$ int start = getInteger(component, "start", 0)[ CD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_7 $$ setInteger(component, "start", start = text.length(), 0)[ FD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_13 $$ int offset = getInteger(component, "offset", 0)[ FD ]
Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))-->Line_19 $$ off = caret[ FD ]
Line_13 $$ int offset = getInteger(component, "offset", 0)-->Line_24 $$ if (off != offset) [ FD ]
Line_24 $$ if (off != offset) -->Line_25 $$ setInteger(component, "offset", off, 0)[ CD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_6 $$ if (start > text.length()) [ FD ]
Line_5 $$ int start = getInteger(component, "start", 0)-->Line_7 $$ setInteger(component, "start", start = text.length(), 0)[ FD ]
Line_15 $$ FontMetrics fm = getFontMetrics(getFont())-->Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))[ FD ]
Line_21 $$ off = caret - width + 4-->Line_24 $$ if (off != offset) [ FD ]
Line_18 $$ if (off > caret) -->Line_20 $$ if (off < caret - width + 4) [ CD ]
Line_2 $$ private void layoutField(Object component, int dw, boolean hidden, int left) -->Line_18 $$ if (off > caret) [ CD ]
Line_10 $$ if (end > text.length()) -->Line_11 $$ setInteger(component, "end", end = text.length(), 0)[ CD ]
Line_4 $$ String text = getString(component, "text", "")-->Line_16 $$ int caret = hidden ? (fm.charWidth('*') * end) : fm.stringWidth(text.substring(0, end))[ FD ]
