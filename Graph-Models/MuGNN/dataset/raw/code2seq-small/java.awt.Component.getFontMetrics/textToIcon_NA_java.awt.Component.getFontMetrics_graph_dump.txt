Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_3 $$ final Font font = JBFont.create(JBUI.Fonts.label().deriveFont(fontSize))[ CD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_6 $$ final int height = metrics.getHeight()[ CD ]
Line_7 $$ return new Icon() -->Line_12 $$ g.setFont(font)[ FD ]
Line_3 $$ final Font font = JBFont.create(JBUI.Fonts.label().deriveFont(fontSize))-->Line_4 $$ FontMetrics metrics = component.getFontMetrics(font)[ FD ]
Line_3 $$ final Font font = JBFont.create(JBUI.Fonts.label().deriveFont(fontSize))-->Line_12 $$ g.setFont(font)[ FD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_13 $$ UIUtil.drawStringWithHighlighting(g, text, x + JBUI.scale(2), y + height - JBUI.scale(1), JBColor.foreground(), JBColor.background())[ FD ]
Line_7 $$ return new Icon() -->Line_11 $$ GraphicsUtil.setupAntialiasing(g)[ FD ]
Line_7 $$ return new Icon() -->Line_15 $$ g.dispose()[ FD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_5 $$ final int width = metrics.stringWidth(text) + JBUI.scale(4)[ FD ]
Line_7 $$ return new Icon() -->Line_19 $$ return width[ CD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_4 $$ FontMetrics metrics = component.getFontMetrics(font)[ FD ]
Line_9 $$ g = g.create()-->Line_15 $$ g.dispose()[ FD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_4 $$ FontMetrics metrics = component.getFontMetrics(font)[ CD ]
Line_7 $$ return new Icon() -->Line_22 $$ return height[ CD ]
Line_9 $$ g = g.create()-->Line_11 $$ GraphicsUtil.setupAntialiasing(g)[ FD ]
Line_4 $$ FontMetrics metrics = component.getFontMetrics(font)-->Line_6 $$ final int height = metrics.getHeight()[ FD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_5 $$ final int width = metrics.stringWidth(text) + JBUI.scale(4)[ CD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_7 $$ return new Icon() [ CD ]
Line_4 $$ FontMetrics metrics = component.getFontMetrics(font)-->Line_5 $$ final int width = metrics.stringWidth(text) + JBUI.scale(4)[ FD ]
Line_7 $$ return new Icon() -->Line_9 $$ g = g.create()[ FD ]
Line_7 $$ return new Icon() -->Line_9 $$ g = g.create()[ CD ]
Line_9 $$ g = g.create()-->Line_13 $$ UIUtil.drawStringWithHighlighting(g, text, x + JBUI.scale(2), y + height - JBUI.scale(1), JBColor.foreground(), JBColor.background())[ FD ]
Line_9 $$ g = g.create()-->Line_12 $$ g.setFont(font)[ FD ]
Line_7 $$ return new Icon() -->Line_13 $$ UIUtil.drawStringWithHighlighting(g, text, x + JBUI.scale(2), y + height - JBUI.scale(1), JBColor.foreground(), JBColor.background())[ FD ]
Line_2 $$ public static Icon textToIcon(@NotNull final String text, @NotNull final Component component, final float fontSize) -->Line_3 $$ final Font font = JBFont.create(JBUI.Fonts.label().deriveFont(fontSize))[ FD ]
