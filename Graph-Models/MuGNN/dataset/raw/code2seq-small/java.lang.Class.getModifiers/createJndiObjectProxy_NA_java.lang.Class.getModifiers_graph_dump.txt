Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()[ CD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_6 $$ targetSource.setExpectedType(jof.getExpectedType())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()[ CD ]
Line_26 $$ if (jof.exposeAccessContext) -->Line_27 $$ proxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()))[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_6 $$ targetSource.setExpectedType(jof.getExpectedType())[ CD ]
Line_12 $$ if (jof.proxyInterfaces != null) -->Line_15 $$ Class<?> targetClass = targetSource.getTargetClass()[ CD ]
Line_20 $$ for (Class<?> ifc : ifcs) -->Line_22 $$ proxyFactory.addInterface(ifc)[ FD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_4 $$ targetSource.setJndiTemplate(jof.getJndiTemplate())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_9 $$ targetSource.setCache(jof.cache)[ CD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_15 $$ Class<?> targetClass = targetSource.getTargetClass()[ FD ]
Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()-->Line_29 $$ proxyFactory.setTargetSource(targetSource)[ FD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_5 $$ targetSource.setJndiName(jof.getJndiName())[ FD ]
Line_20 $$ for (Class<?> ifc : ifcs) -->Line_21 $$ if (Modifier.isPublic(ifc.getModifiers())) [ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_7 $$ targetSource.setResourceRef(jof.isResourceRef())[ FD ]
Line_21 $$ if (Modifier.isPublic(ifc.getModifiers())) -->Line_22 $$ proxyFactory.addInterface(ifc)[ CD ]
Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()-->Line_22 $$ proxyFactory.addInterface(ifc)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_12 $$ if (jof.proxyInterfaces != null) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_4 $$ targetSource.setJndiTemplate(jof.getJndiTemplate())[ CD ]
Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()-->Line_30 $$ return proxyFactory.getProxy(jof.beanClassLoader)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_5 $$ targetSource.setJndiName(jof.getJndiName())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_6 $$ targetSource.setExpectedType(jof.getExpectedType())[ FD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_8 $$ targetSource.setLookupOnStartup(jof.lookupOnStartup)[ FD ]
Line_15 $$ Class<?> targetClass = targetSource.getTargetClass()-->Line_19 $$ Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_30 $$ return proxyFactory.getProxy(jof.beanClassLoader)[ CD ]
Line_12 $$ if (jof.proxyInterfaces != null) -->Line_19 $$ Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader)[ CD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_9 $$ targetSource.setCache(jof.cache)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_27 $$ proxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()))[ FD ]
Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()-->Line_27 $$ proxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()))[ FD ]
Line_12 $$ if (jof.proxyInterfaces != null) -->Line_16 $$ if (targetClass == null) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_5 $$ targetSource.setJndiName(jof.getJndiName())[ CD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_7 $$ targetSource.setResourceRef(jof.isResourceRef())[ FD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_10 $$ targetSource.afterPropertiesSet()[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_26 $$ if (jof.exposeAccessContext) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_29 $$ proxyFactory.setTargetSource(targetSource)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_4 $$ targetSource.setJndiTemplate(jof.getJndiTemplate())[ FD ]
Line_12 $$ if (jof.proxyInterfaces != null) -->Line_13 $$ proxyFactory.setInterfaces(jof.proxyInterfaces)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_26 $$ if (jof.exposeAccessContext) [ FD ]
Line_3 $$ JndiObjectTargetSource targetSource = new JndiObjectTargetSource()-->Line_29 $$ proxyFactory.setTargetSource(targetSource)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_10 $$ targetSource.afterPropertiesSet()[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_7 $$ targetSource.setResourceRef(jof.isResourceRef())[ CD ]
Line_15 $$ Class<?> targetClass = targetSource.getTargetClass()-->Line_16 $$ if (targetClass == null) [ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_8 $$ targetSource.setLookupOnStartup(jof.lookupOnStartup)[ CD ]
Line_11 $$ ProxyFactory proxyFactory = new ProxyFactory()-->Line_13 $$ proxyFactory.setInterfaces(jof.proxyInterfaces)[ FD ]
