Line_2 $$ private <T> void validateType(Class<T> type) -->Line_6 $$ if (type.getEnclosingClass() != null && !Modifier.isStatic(type.getModifiers())) [ FD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_6 $$ if (type.getEnclosingClass() != null && !Modifier.isStatic(type.getModifiers())) [ CD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_3 $$ if (type.isInterface() || type.isAnnotation() || type.isEnum()) [ FD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_9 $$ if (Modifier.isAbstract(type.getModifiers())) [ FD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_7 $$ throw new IllegalArgumentException(String.format("Class %s is a non-static inner class.", type.getName()))[ FD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_3 $$ if (type.isInterface() || type.isAnnotation() || type.isEnum()) [ CD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_9 $$ if (Modifier.isAbstract(type.getModifiers())) [ CD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_4 $$ throw new IllegalArgumentException(String.format("Type %s is not a class.", type.getName()))[ FD ]
Line_2 $$ private <T> void validateType(Class<T> type) -->Line_10 $$ throw new IllegalArgumentException(String.format("Class %s is an abstract class.", type.getName()))[ FD ]
