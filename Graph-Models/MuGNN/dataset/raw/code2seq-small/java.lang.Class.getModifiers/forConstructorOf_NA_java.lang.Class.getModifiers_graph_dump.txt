Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_13 $$ errors.tooManyConstructors(rawType)[ FD ]
Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_25 $$ if (Modifier.isPrivate(noArgConstructor.getModifiers()) && !Modifier.isPrivate(rawType.getModifiers())) [ FD ]
Line_5 $$ Constructor<?> injectableConstructor = null-->Line_20 $$ if (injectableConstructor != null) [ FD ]
Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_6 $$ for (Constructor<?> constructor : rawType.getConstructors()) [ FD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_32 $$ errors.missingConstructor(rawType)[ FD ]
Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_32 $$ errors.missingConstructor(rawType)[ FD ]
Line_15 $$ injectableConstructor = constructor-->Line_16 $$ checkForMisplacedBindingAnnotations(injectableConstructor, errors)[ FD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_3 $$ Class<?> rawType = getRawType(type.getType())[ CD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_27 $$ throw new ConfigurationException(errors.getMessages())[ FD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_5 $$ Constructor<?> injectableConstructor = null[ CD ]
Line_5 $$ Constructor<?> injectableConstructor = null-->Line_15 $$ injectableConstructor = constructor[ FD ]
Line_8 $$ if (inject != null) -->Line_9 $$ if (inject.optional()) [ CD ]
Line_8 $$ if (inject != null) -->Line_12 $$ if (injectableConstructor != null) [ CD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_13 $$ errors.tooManyConstructors(rawType)[ FD ]
Line_12 $$ if (injectableConstructor != null) -->Line_13 $$ errors.tooManyConstructors(rawType)[ CD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_29 $$ checkForMisplacedBindingAnnotations(noArgConstructor, errors)[ FD ]
Line_9 $$ if (inject.optional()) -->Line_10 $$ errors.optionalConstructor(constructor)[ CD ]
Line_6 $$ for (Constructor<?> constructor : rawType.getConstructors()) -->Line_10 $$ errors.optionalConstructor(constructor)[ FD ]
Line_6 $$ for (Constructor<?> constructor : rawType.getConstructors()) -->Line_15 $$ injectableConstructor = constructor[ FD ]
Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_26 $$ errors.missingConstructor(rawType)[ FD ]
Line_7 $$ Inject inject = constructor.getAnnotation(Inject.class)-->Line_9 $$ if (inject.optional()) [ FD ]
Line_5 $$ Constructor<?> injectableConstructor = null-->Line_12 $$ if (injectableConstructor != null) [ FD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_20 $$ if (injectableConstructor != null) [ CD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_4 $$ Errors errors = new Errors(rawType)[ CD ]
Line_20 $$ if (injectableConstructor != null) -->Line_21 $$ return new InjectionPoint(type, injectableConstructor)[ CD ]
Line_3 $$ Class<?> rawType = getRawType(type.getType())-->Line_24 $$ Constructor<?> noArgConstructor = rawType.getConstructor()[ FD ]
Line_8 $$ if (inject != null) -->Line_16 $$ checkForMisplacedBindingAnnotations(injectableConstructor, errors)[ CD ]
Line_5 $$ Constructor<?> injectableConstructor = null-->Line_16 $$ checkForMisplacedBindingAnnotations(injectableConstructor, errors)[ FD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_19 $$ errors.throwConfigurationExceptionIfErrorsExist()[ FD ]
Line_7 $$ Inject inject = constructor.getAnnotation(Inject.class)-->Line_8 $$ if (inject != null) [ FD ]
Line_24 $$ Constructor<?> noArgConstructor = rawType.getConstructor()-->Line_29 $$ checkForMisplacedBindingAnnotations(noArgConstructor, errors)[ FD ]
Line_24 $$ Constructor<?> noArgConstructor = rawType.getConstructor()-->Line_25 $$ if (Modifier.isPrivate(noArgConstructor.getModifiers()) && !Modifier.isPrivate(rawType.getModifiers())) [ FD ]
Line_6 $$ for (Constructor<?> constructor : rawType.getConstructors()) -->Line_7 $$ Inject inject = constructor.getAnnotation(Inject.class)[ FD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_3 $$ Class<?> rawType = getRawType(type.getType())[ FD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_33 $$ throw new ConfigurationException(errors.getMessages())[ FD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_10 $$ errors.optionalConstructor(constructor)[ FD ]
Line_8 $$ if (inject != null) -->Line_15 $$ injectableConstructor = constructor[ CD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_16 $$ checkForMisplacedBindingAnnotations(injectableConstructor, errors)[ FD ]
Line_15 $$ injectableConstructor = constructor-->Line_20 $$ if (injectableConstructor != null) [ FD ]
Line_25 $$ if (Modifier.isPrivate(noArgConstructor.getModifiers()) && !Modifier.isPrivate(rawType.getModifiers())) -->Line_26 $$ errors.missingConstructor(rawType)[ CD ]
Line_2 $$ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) -->Line_19 $$ errors.throwConfigurationExceptionIfErrorsExist()[ CD ]
Line_4 $$ Errors errors = new Errors(rawType)-->Line_26 $$ errors.missingConstructor(rawType)[ FD ]
