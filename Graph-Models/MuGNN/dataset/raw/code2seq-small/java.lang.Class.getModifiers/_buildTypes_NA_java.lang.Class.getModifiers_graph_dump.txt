Line_22 $$ if (propertiesList != null) -->Line_23 $$ map.put("properties", propertiesList)[ CD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_7 $$ types.add(map)[ CD ]
Line_14 $$ modelType = classLoader.loadClass(modelImplClassName)-->Line_18 $$ if (modelType.isInterface() || Modifier.isAbstract(modelType.getModifiers())) [ FD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_18 $$ if (modelType.isInterface() || Modifier.isAbstract(modelType.getModifiers())) [ CD ]
Line_12 $$ ClassLoader classLoader = clazz.getClassLoader()-->Line_14 $$ modelType = classLoader.loadClass(modelImplClassName)[ FD ]
Line_14 $$ modelType = classLoader.loadClass(modelImplClassName)-->Line_21 $$ List<Map<String, String>> propertiesList = _buildPropertiesList(modelType)[ FD ]
Line_8 $$ Class<?> modelType = type-->Line_18 $$ if (modelType.isInterface() || Modifier.isAbstract(modelType.getModifiers())) [ FD ]
Line_6 $$ Map<String, Object> map = new LinkedHashMap()-->Line_25 $$ map.put("type", type.getName())[ FD ]
Line_18 $$ if (modelType.isInterface() || Modifier.isAbstract(modelType.getModifiers())) -->Line_19 $$ map.put("interface", Boolean.TRUE)[ CD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_5 $$ Class<?> type = _types.get(i)[ FD ]
Line_5 $$ Class<?> type = _types.get(i)-->Line_9 $$ if (type.isInterface()) [ FD ]
Line_6 $$ Map<String, Object> map = new LinkedHashMap()-->Line_23 $$ map.put("properties", propertiesList)[ FD ]
Line_6 $$ Map<String, Object> map = new LinkedHashMap()-->Line_19 $$ map.put("interface", Boolean.TRUE)[ FD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_9 $$ if (type.isInterface()) [ CD ]
Line_5 $$ Class<?> type = _types.get(i)-->Line_25 $$ map.put("type", type.getName())[ FD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_5 $$ Class<?> type = _types.get(i)[ CD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_6 $$ Map<String, Object> map = new LinkedHashMap()[ CD ]
Line_21 $$ List<Map<String, String>> propertiesList = _buildPropertiesList(modelType)-->Line_22 $$ if (propertiesList != null) [ FD ]
Line_5 $$ Class<?> type = _types.get(i)-->Line_13 $$ String modelImplClassName = _jsonWebServiceNaming.convertModelClassToImplClassName(type)[ FD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_25 $$ map.put("type", type.getName())[ CD ]
Line_3 $$ List<Map<String, Object>> types = new ArrayList()-->Line_7 $$ types.add(map)[ FD ]
Line_8 $$ Class<?> modelType = type-->Line_14 $$ modelType = classLoader.loadClass(modelImplClassName)[ FD ]
Line_13 $$ String modelImplClassName = _jsonWebServiceNaming.convertModelClassToImplClassName(type)-->Line_14 $$ modelType = classLoader.loadClass(modelImplClassName)[ FD ]
Line_8 $$ Class<?> modelType = type-->Line_21 $$ List<Map<String, String>> propertiesList = _buildPropertiesList(modelType)[ FD ]
Line_11 $$ Class<?> clazz = getClass()-->Line_12 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_21 $$ List<Map<String, String>> propertiesList = _buildPropertiesList(modelType)-->Line_23 $$ map.put("properties", propertiesList)[ FD ]
Line_2 $$ private List<Map<String, Object>> _buildTypes() -->Line_3 $$ List<Map<String, Object>> types = new ArrayList()[ CD ]
Line_6 $$ Map<String, Object> map = new LinkedHashMap()-->Line_7 $$ types.add(map)[ FD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_21 $$ List<Map<String, String>> propertiesList = _buildPropertiesList(modelType)[ CD ]
Line_2 $$ private List<Map<String, Object>> _buildTypes() -->Line_27 $$ return types[ CD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_8 $$ Class<?> modelType = type[ CD ]
Line_4 $$ for (int i = 0; i < _types.size(); i++) -->Line_22 $$ if (propertiesList != null) [ CD ]
Line_2 $$ private List<Map<String, Object>> _buildTypes() -->Line_4 $$ for (int i = 0; i < _types.size(); i++) [ CD ]
