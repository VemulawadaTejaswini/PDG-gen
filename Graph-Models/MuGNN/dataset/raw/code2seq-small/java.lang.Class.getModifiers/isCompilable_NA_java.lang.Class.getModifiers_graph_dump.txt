Line_12 $$ ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_16 $$ Method method = executor.getMethod()[ FD ]
Line_2 $$ public boolean isCompilable() -->Line_4 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) [ CD ]
Line_2 $$ public boolean isCompilable() -->Line_12 $$ ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) executorToCheck.get()[ CD ]
Line_7 $$ for (SpelNodeImpl child : this.children) -->Line_8 $$ if (!child.isCompilable()) [ FD ]
Line_2 $$ public boolean isCompilable() -->Line_18 $$ if (!Modifier.isPublic(clazz.getModifiers()) && executor.getPublicDeclaringClass() == null) [ CD ]
Line_2 $$ public boolean isCompilable() -->Line_21 $$ return true[ CD ]
Line_2 $$ public boolean isCompilable() -->Line_17 $$ Class<?> clazz = method.getDeclaringClass()[ CD ]
Line_18 $$ if (!Modifier.isPublic(clazz.getModifiers()) && executor.getPublicDeclaringClass() == null) -->Line_19 $$ return false[ CD ]
Line_8 $$ if (!child.isCompilable()) -->Line_9 $$ return false[ CD ]
Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_4 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) [ FD ]
Line_12 $$ ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_18 $$ if (!Modifier.isPublic(clazz.getModifiers()) && executor.getPublicDeclaringClass() == null) [ FD ]
Line_12 $$ ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_13 $$ if (executor.didArgumentConversionOccur()) [ FD ]
Line_4 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) -->Line_5 $$ return false[ CD ]
Line_2 $$ public boolean isCompilable() -->Line_16 $$ Method method = executor.getMethod()[ CD ]
Line_16 $$ Method method = executor.getMethod()-->Line_17 $$ Class<?> clazz = method.getDeclaringClass()[ FD ]
Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_12 $$ ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) executorToCheck.get()[ FD ]
Line_13 $$ if (executor.didArgumentConversionOccur()) -->Line_14 $$ return false[ CD ]
Line_2 $$ public boolean isCompilable() -->Line_3 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor[ CD ]
Line_17 $$ Class<?> clazz = method.getDeclaringClass()-->Line_18 $$ if (!Modifier.isPublic(clazz.getModifiers()) && executor.getPublicDeclaringClass() == null) [ FD ]
Line_2 $$ public boolean isCompilable() -->Line_13 $$ if (executor.didArgumentConversionOccur()) [ CD ]
