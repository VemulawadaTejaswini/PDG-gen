Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_20 $$ pf.addInterface(AopInfrastructureBean.class)[ FD ]
Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_16 $$ pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()))[ FD ]
Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_9 $$ pf.copyFrom(this)[ FD ]
Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_10 $$ pf.setTargetSource(this.scopedTargetSource)[ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_21 $$ this.proxy = pf.getProxy(cbf.getBeanClassLoader())[ CD ]
Line_15 $$ if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) -->Line_16 $$ pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()))[ CD ]
Line_6 $$ ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory-->Line_16 $$ pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()))[ FD ]
Line_6 $$ ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory-->Line_21 $$ this.proxy = pf.getProxy(cbf.getBeanClassLoader())[ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_6 $$ ConfigurableBeanFactory cbf = (ConfigurableBeanFactory) beanFactory[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_3 $$ if (!(beanFactory instanceof ConfigurableBeanFactory)) [ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_7 $$ this.scopedTargetSource.setBeanFactory(beanFactory)[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_20 $$ pf.addInterface(AopInfrastructureBean.class)[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_19 $$ pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject))[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_11 $$ Class<?> beanType = beanFactory.getType(this.targetBeanName)[ FD ]
Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_21 $$ this.proxy = pf.getProxy(cbf.getBeanClassLoader())[ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_15 $$ if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) [ CD ]
Line_11 $$ Class<?> beanType = beanFactory.getType(this.targetBeanName)-->Line_12 $$ if (beanType == null) [ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_11 $$ Class<?> beanType = beanFactory.getType(this.targetBeanName)[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_12 $$ if (beanType == null) [ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_7 $$ this.scopedTargetSource.setBeanFactory(beanFactory)[ FD ]
Line_8 $$ ProxyFactory pf = new ProxyFactory()-->Line_19 $$ pf.addAdvice(new DelegatingIntroductionInterceptor(scopedObject))[ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_18 $$ ScopedObject scopedObject = new DefaultScopedObject(cbf, this.scopedTargetSource.getTargetBeanName())[ CD ]
Line_11 $$ Class<?> beanType = beanFactory.getType(this.targetBeanName)-->Line_16 $$ pf.setInterfaces(ClassUtils.getAllInterfacesForClass(beanType, cbf.getBeanClassLoader()))[ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_9 $$ pf.copyFrom(this)[ CD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_8 $$ ProxyFactory pf = new ProxyFactory()[ CD ]
Line_11 $$ Class<?> beanType = beanFactory.getType(this.targetBeanName)-->Line_15 $$ if (!isProxyTargetClass() || beanType.isInterface() || Modifier.isPrivate(beanType.getModifiers())) [ FD ]
Line_2 $$ public void setBeanFactory(BeanFactory beanFactory) -->Line_10 $$ pf.setTargetSource(this.scopedTargetSource)[ CD ]
