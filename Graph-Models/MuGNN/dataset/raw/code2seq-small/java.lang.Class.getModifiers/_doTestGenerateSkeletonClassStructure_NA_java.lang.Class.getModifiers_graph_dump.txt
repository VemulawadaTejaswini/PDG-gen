Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_27 $$ Assert.assertEquals(skeletonClass.getName(), logger.getName())[ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_4 $$ Assert.assertEquals(Modifier.PUBLIC, skeletonClass.getModifiers())[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_5 $$ Assert.assertArrayEquals(new Class<?>[] [ CD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_15 $$ sb.append(StringPool.COMMA_AND_SPACE)[ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_37 $$ _assertDeclaredMethod(skeletonClass, "_sendResponse", new Class<?>[] [ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_40 $$ Assert.assertEquals(6, declaredMethods.length)[ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_6 $$ _assertDeclaredField(skeletonClass, "PROXY_METHOD_SIGNATURES", Modifier.PUBLIC | Modifier.STATIC | Modifier.FINAL, String[].class)[ FD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_10 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ FD ]
Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) -->Line_12 $$ sb.append(i)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_37 $$ _assertDeclaredMethod(skeletonClass, "_sendResponse", new Class<?>[] [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_35 $$ _assertDeclaredMethod(skeletonClass, "_getProxyMethodSignatures", new Class<?>[0], Modifier.STATIC | Modifier.PRIVATE, String[].class)[ CD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_20 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ FD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_22 $$ Assert.assertEquals(sb.toString(), proxyMethodsMappingField.get(null))[ FD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_13 $$ sb.append(" -> ")[ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_29 $$ Constructor<?>[] constructors = skeletonClass.getConstructors()[ FD ]
Line_31 $$ Constructor<?> constructor = constructors[0]-->Line_32 $$ Assert.assertArrayEquals(new Class<?>[] [ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_35 $$ _assertDeclaredMethod(skeletonClass, "_getProxyMethodSignatures", new Class<?>[0], Modifier.STATIC | Modifier.PRIVATE, String[].class)[ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_36 $$ _assertDeclaredMethod(skeletonClass, "_getProxyMethodsMapping", new Class<?>[] [ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_34 $$ _assertDeclaredMethod(skeletonClass, "doDispatch", new Class<?>[] [ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_4 $$ Assert.assertEquals(Modifier.PUBLIC, skeletonClass.getModifiers())[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_30 $$ Assert.assertEquals(1, constructors.length)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_31 $$ Constructor<?> constructor = constructors[0][ CD ]
Line_21 $$ Field proxyMethodsMappingField = _assertDeclaredField(skeletonClass, "_PROXY_METHODS_MAPPING", Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL, String.class)-->Line_22 $$ Assert.assertEquals(sb.toString(), proxyMethodsMappingField.get(null))[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_21 $$ Field proxyMethodsMappingField = _assertDeclaredField(skeletonClass, "_PROXY_METHODS_MAPPING", Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL, String.class)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_17 $$ if (proxyMethodSignatures.length > 0) [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_33 $$ _assertDeclaredMethod(skeletonClass, "dispatch", new Class<?>[] [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_26 $$ Logger logger = jdk14LogImpl.getWrappedLogger()[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_32 $$ Assert.assertArrayEquals(new Class<?>[] [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_7 $$ String[] proxyMethodSignatures = IntrabandProxyUtil.getProxyMethodSignatures(skeletonClass)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)[ CD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_14 $$ sb.append(proxyMethodSignatures[i])[ FD ]
Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) -->Line_14 $$ sb.append(proxyMethodSignatures[i])[ CD ]
Line_26 $$ Logger logger = jdk14LogImpl.getWrappedLogger()-->Line_27 $$ Assert.assertEquals(skeletonClass.getName(), logger.getName())[ FD ]
Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) -->Line_13 $$ sb.append(" -> ")[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_25 $$ Jdk14LogImpl jdk14LogImpl = (Jdk14LogImpl) logWrapper.getWrappedLog()[ CD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_18 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_20 $$ sb.append(StringPool.CLOSE_CURLY_BRACE)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_28 $$ _assertDeclaredField(skeletonClass, "_targetLocator", Modifier.PRIVATE | Modifier.FINAL, TargetLocator.class)[ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_28 $$ _assertDeclaredField(skeletonClass, "_targetLocator", Modifier.PRIVATE | Modifier.FINAL, TargetLocator.class)[ FD ]
Line_24 $$ LogWrapper logWrapper = (LogWrapper) logField.get(null)-->Line_25 $$ Jdk14LogImpl jdk14LogImpl = (Jdk14LogImpl) logWrapper.getWrappedLog()[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_36 $$ _assertDeclaredMethod(skeletonClass, "_getProxyMethodsMapping", new Class<?>[] [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_29 $$ Constructor<?>[] constructors = skeletonClass.getConstructors()[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_10 $$ sb.append(StringPool.OPEN_CURLY_BRACE)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_39 $$ Method[] declaredMethods = skeletonClass.getDeclaredMethods()[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)[ FD ]
Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) -->Line_12 $$ sb.append(i)[ FD ]
Line_17 $$ if (proxyMethodSignatures.length > 0) -->Line_18 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_38 $$ _assertDeclaredMethod(skeletonClass, "_unknownMethodIndex", new Class<?>[] [ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_23 $$ Field logField = _assertDeclaredField(skeletonClass, "_log", Modifier.FINAL | Modifier.PRIVATE | Modifier.STATIC, Log.class)[ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_23 $$ Field logField = _assertDeclaredField(skeletonClass, "_log", Modifier.FINAL | Modifier.PRIVATE | Modifier.STATIC, Log.class)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_24 $$ LogWrapper logWrapper = (LogWrapper) logField.get(null)[ CD ]
Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) -->Line_15 $$ sb.append(StringPool.COMMA_AND_SPACE)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_8 $$ Assert.assertArrayEquals(_buildProxyMethodSignatures(clazz), proxyMethodSignatures)[ FD ]
Line_23 $$ Field logField = _assertDeclaredField(skeletonClass, "_log", Modifier.FINAL | Modifier.PRIVATE | Modifier.STATIC, Log.class)-->Line_24 $$ LogWrapper logWrapper = (LogWrapper) logField.get(null)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)[ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_39 $$ Method[] declaredMethods = skeletonClass.getDeclaredMethods()[ FD ]
Line_25 $$ Jdk14LogImpl jdk14LogImpl = (Jdk14LogImpl) logWrapper.getWrappedLog()-->Line_26 $$ Logger logger = jdk14LogImpl.getWrappedLogger()[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_6 $$ _assertDeclaredField(skeletonClass, "PROXY_METHOD_SIGNATURES", Modifier.PUBLIC | Modifier.STATIC | Modifier.FINAL, String[].class)[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_27 $$ Assert.assertEquals(skeletonClass.getName(), logger.getName())[ CD ]
Line_9 $$ StringBundler sb = new StringBundler(proxyMethodSignatures.length * 4 + 1)-->Line_12 $$ sb.append(i)[ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_7 $$ String[] proxyMethodSignatures = IntrabandProxyUtil.getProxyMethodSignatures(skeletonClass)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_34 $$ _assertDeclaredMethod(skeletonClass, "doDispatch", new Class<?>[] [ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_5 $$ Assert.assertArrayEquals(new Class<?>[] [ FD ]
Line_7 $$ String[] proxyMethodSignatures = IntrabandProxyUtil.getProxyMethodSignatures(skeletonClass)-->Line_8 $$ Assert.assertArrayEquals(_buildProxyMethodSignatures(clazz), proxyMethodSignatures)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_38 $$ _assertDeclaredMethod(skeletonClass, "_unknownMethodIndex", new Class<?>[] [ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_11 $$ for (int i = 0; i < proxyMethodSignatures.length; i++) [ CD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_33 $$ _assertDeclaredMethod(skeletonClass, "dispatch", new Class<?>[] [ FD ]
Line_3 $$ Class<?> skeletonClass = IntrabandProxyUtil.generateSkeletonClass(_classLoader, clazz)-->Line_21 $$ Field proxyMethodsMappingField = _assertDeclaredField(skeletonClass, "_PROXY_METHODS_MAPPING", Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL, String.class)[ FD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_22 $$ Assert.assertEquals(sb.toString(), proxyMethodsMappingField.get(null))[ CD ]
Line_2 $$ private void _doTestGenerateSkeletonClassStructure(Class<?> clazz) throws Exception -->Line_8 $$ Assert.assertArrayEquals(_buildProxyMethodSignatures(clazz), proxyMethodSignatures)[ CD ]
