Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_6 $$ if (typeClass.getTypeParameters().length > 0) [ FD ]
Line_3 $$ if (!typeClass.isInterface() && !Modifier.isAbstract(typeClass.getModifiers())) -->Line_4 $$ extractionContext.add("Must be defined as an interface or an abstract class.")[ CD ]
Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_3 $$ if (!typeClass.isInterface() && !Modifier.isAbstract(typeClass.getModifiers())) [ FD ]
Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_3 $$ if (!typeClass.isInterface() && !Modifier.isAbstract(typeClass.getModifiers())) [ CD ]
Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_6 $$ if (typeClass.getTypeParameters().length > 0) [ CD ]
Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_4 $$ extractionContext.add("Must be defined as an interface or an abstract class.")[ FD ]
Line_2 $$ private void validateManagedType(ModelSchemaExtractionContext<?> extractionContext, Class<?> typeClass) -->Line_7 $$ extractionContext.add("Cannot be a parameterized type.")[ FD ]
Line_6 $$ if (typeClass.getTypeParameters().length > 0) -->Line_7 $$ extractionContext.add("Cannot be a parameterized type.")[ CD ]
