Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_4 $$ if ((testCaseClass.getModifiers() & Modifier.PUBLIC) == 0) [ FD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_60 $$ System.err.println("Failed to load test: " + testCaseClass.getName())[ FD ]
Line_12 $$ if (suiteMethod != null && !isPerformanceTestsRun()) -->Line_13 $$ return (Test) suiteMethod.invoke(null, ArrayUtil.EMPTY_CLASS_ARRAY)[ CD ]
Line_38 $$ if (method == null) -->Line_42 $$ if (methodBomb == null) [ CD ]
Line_41 $$ Bombed methodBomb = method.getAnnotation(Bombed.class)-->Line_44 $$ if (PlatformTestUtil.bombExplodes(methodBomb)) [ FD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_52 $$ super.addTest(test)[ FD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_33 $$ if ("warning".equals(name))[ CD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_38 $$ if (method == null) [ CD ]
Line_33 $$ if ("warning".equals(name))-->Line_34 $$ return[ CD ]
Line_17 $$ boolean runEverything = isIncludingPerformanceTestsRun() || (isPerformanceTest(testCaseClass) && isPerformanceTestsRun())-->Line_18 $$ if (!runEverything) [ FD ]
Line_7 $$ Bombed classBomb = testCaseClass.getAnnotation(Bombed.class)-->Line_8 $$ if (classBomb != null && PlatformTestUtil.bombExplodes(classBomb)) [ FD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_55 $$ return safeFindMethod(testCase.getClass(), testCase.getName())[ CD ]
Line_16 $$ JUnit4TestAdapter adapter = new JUnit4TestAdapter(testCaseClass)-->Line_20 $$ adapter.filter(isPerformanceTestsRun() ? PERFORMANCE_ONLY : NO_PERFORMANCE)[ FD ]
Line_42 $$ if (methodBomb == null) -->Line_44 $$ if (PlatformTestUtil.bombExplodes(methodBomb)) [ CD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_32 $$ String name = ((TestCase) test).getName()[ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_30 $$ doAddTest(test)[ FD ]
Line_41 $$ Bombed methodBomb = method.getAnnotation(Bombed.class)-->Line_42 $$ if (methodBomb == null) [ FD ]
Line_38 $$ if (method == null) -->Line_41 $$ Bombed methodBomb = method.getAnnotation(Bombed.class)[ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_51 $$ testsCount[0]++[ CD ]
Line_42 $$ if (methodBomb == null) -->Line_43 $$ doAddTest(test)[ CD ]
Line_32 $$ String name = ((TestCase) test).getName()-->Line_33 $$ if ("warning".equals(name))[ FD ]
Line_8 $$ if (classBomb != null && PlatformTestUtil.bombExplodes(classBomb)) -->Line_9 $$ return new ExplodedBomb(testCaseClass.getName(), classBomb)[ CD ]
Line_37 $$ Method method = findTestMethod((TestCase) test)-->Line_38 $$ if (method == null) [ FD ]
Line_15 $$ if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) -->Line_18 $$ if (!runEverything) [ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_29 $$ if (!(test instanceof TestCase)) [ CD ]
Line_37 $$ Method method = findTestMethod((TestCase) test)-->Line_41 $$ Bombed methodBomb = method.getAnnotation(Bombed.class)[ FD ]
Line_4 $$ if ((testCaseClass.getModifiers() & Modifier.PUBLIC) == 0) -->Line_5 $$ return null[ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_52 $$ super.addTest(test)[ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_55 $$ return safeFindMethod(testCase.getClass(), testCase.getName())[ FD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_35 $$ if (!isIncludingPerformanceTestsRun() && (isPerformanceTestsRun() ^ (hasPerformance(name) || isPerformanceTest(testCaseClass))))[ CD ]
Line_15 $$ if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) -->Line_17 $$ boolean runEverything = isIncludingPerformanceTestsRun() || (isPerformanceTest(testCaseClass) && isPerformanceTestsRun())[ CD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_37 $$ Method method = findTestMethod((TestCase) test)[ CD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_43 $$ doAddTest(test)[ FD ]
Line_15 $$ if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) -->Line_24 $$ return adapter[ CD ]
Line_29 $$ if (!(test instanceof TestCase)) -->Line_30 $$ doAddTest(test)[ CD ]
Line_11 $$ Method suiteMethod = safeFindMethod(testCaseClass, "suite")-->Line_13 $$ return (Test) suiteMethod.invoke(null, ArrayUtil.EMPTY_CLASS_ARRAY)[ FD ]
Line_27 $$ TestSuite suite = new TestSuite(testCaseClass) -->Line_39 $$ doAddTest(test)[ FD ]
Line_32 $$ String name = ((TestCase) test).getName()-->Line_35 $$ if (!isIncludingPerformanceTestsRun() && (isPerformanceTestsRun() ^ (hasPerformance(name) || isPerformanceTest(testCaseClass))))[ FD ]
Line_38 $$ if (method == null) -->Line_39 $$ doAddTest(test)[ CD ]
Line_15 $$ if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) -->Line_16 $$ JUnit4TestAdapter adapter = new JUnit4TestAdapter(testCaseClass)[ CD ]
Line_37 $$ Method method = findTestMethod((TestCase) test)-->Line_45 $$ doAddTest(new ExplodedBomb(method.getDeclaringClass().getName() + "." + method.getName(), methodBomb))[ FD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_11 $$ Method suiteMethod = safeFindMethod(testCaseClass, "suite")[ FD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_9 $$ return new ExplodedBomb(testCaseClass.getName(), classBomb)[ FD ]
Line_35 $$ if (!isIncludingPerformanceTestsRun() && (isPerformanceTestsRun() ^ (hasPerformance(name) || isPerformanceTest(testCaseClass))))-->Line_36 $$ return[ CD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_35 $$ if (!isIncludingPerformanceTestsRun() && (isPerformanceTestsRun() ^ (hasPerformance(name) || isPerformanceTest(testCaseClass))))[ FD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_17 $$ boolean runEverything = isIncludingPerformanceTestsRun() || (isPerformanceTest(testCaseClass) && isPerformanceTestsRun())[ FD ]
Line_44 $$ if (PlatformTestUtil.bombExplodes(methodBomb)) -->Line_45 $$ doAddTest(new ExplodedBomb(method.getDeclaringClass().getName() + "." + method.getName(), methodBomb))[ CD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_7 $$ Bombed classBomb = testCaseClass.getAnnotation(Bombed.class)[ FD ]
Line_2 $$ private static Test getTest(@NotNull final Class<?> testCaseClass) -->Line_15 $$ if (TestRunnerUtil.isJUnit4TestClass(testCaseClass)) [ FD ]
