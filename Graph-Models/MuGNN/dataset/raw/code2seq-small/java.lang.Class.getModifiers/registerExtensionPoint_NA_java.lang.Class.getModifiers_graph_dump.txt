Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_3 $$ final String name = extensionPointName.getName()[ FD ]
Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_5 $$ ExtensionPoint.Kind kind = aClass.isInterface() || (aClass.getModifiers() & Modifier.ABSTRACT) != 0 ? ExtensionPoint.Kind.INTERFACE : ExtensionPoint.Kind.BEAN_CLASS[ FD ]
Line_4 $$ if (!area.hasExtensionPoint(name)) -->Line_6 $$ area.registerExtensionPoint(name, aClass.getName(), kind)[ CD ]
Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_4 $$ if (!area.hasExtensionPoint(name)) [ CD ]
Line_3 $$ final String name = extensionPointName.getName()-->Line_6 $$ area.registerExtensionPoint(name, aClass.getName(), kind)[ FD ]
Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_3 $$ final String name = extensionPointName.getName()[ CD ]
Line_5 $$ ExtensionPoint.Kind kind = aClass.isInterface() || (aClass.getModifiers() & Modifier.ABSTRACT) != 0 ? ExtensionPoint.Kind.INTERFACE : ExtensionPoint.Kind.BEAN_CLASS-->Line_6 $$ area.registerExtensionPoint(name, aClass.getName(), kind)[ FD ]
Line_3 $$ final String name = extensionPointName.getName()-->Line_4 $$ if (!area.hasExtensionPoint(name)) [ FD ]
Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_4 $$ if (!area.hasExtensionPoint(name)) [ FD ]
Line_4 $$ if (!area.hasExtensionPoint(name)) -->Line_5 $$ ExtensionPoint.Kind kind = aClass.isInterface() || (aClass.getModifiers() & Modifier.ABSTRACT) != 0 ? ExtensionPoint.Kind.INTERFACE : ExtensionPoint.Kind.BEAN_CLASS[ CD ]
Line_2 $$ protected <T> void registerExtensionPoint(final ExtensionsArea area, final ExtensionPointName<T> extensionPointName, final Class<? extends T> aClass) -->Line_6 $$ area.registerExtensionPoint(name, aClass.getName(), kind)[ FD ]
