Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_15 $$ int size = ClassLayout.parseClass(clazz).instanceSize()[ CD ]
Line_15 $$ int size = ClassLayout.parseClass(clazz).instanceSize()-->Line_18 $$ size += deepInstanceSize(field.getType())[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_4 $$ throw new IllegalArgumentException(String.format("Cannot determine size of %s because it contains an array", clazz.getSimpleName()))[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_13 $$ throw new IllegalArgumentException(String.format("Cannot determine size of a subclass. %s extends from %s", clazz.getSimpleName(), clazz.getSuperclass().getSimpleName()))[ FD ]
Line_17 $$ if (!field.getType().isPrimitive()) -->Line_18 $$ size += deepInstanceSize(field.getType())[ CD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_7 $$ throw new IllegalArgumentException(String.format("%s is an interface", clazz.getSimpleName()))[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_3 $$ if (clazz.isArray()) [ CD ]
Line_16 $$ for (Field field : clazz.getDeclaredFields()) -->Line_17 $$ if (!field.getType().isPrimitive()) [ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_12 $$ if (!clazz.getSuperclass().equals(Object.class)) [ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_6 $$ if (clazz.isInterface()) [ CD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_9 $$ if (Modifier.isAbstract(clazz.getModifiers())) [ CD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_15 $$ int size = ClassLayout.parseClass(clazz).instanceSize()[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_6 $$ if (clazz.isInterface()) [ FD ]
Line_16 $$ for (Field field : clazz.getDeclaredFields()) -->Line_18 $$ size += deepInstanceSize(field.getType())[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_12 $$ if (!clazz.getSuperclass().equals(Object.class)) [ CD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_3 $$ if (clazz.isArray()) [ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_10 $$ throw new IllegalArgumentException(String.format("%s is abstract", clazz.getSimpleName()))[ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_16 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_21 $$ return size[ CD ]
Line_2 $$ private static int deepInstanceSize(Class<?> clazz) -->Line_9 $$ if (Modifier.isAbstract(clazz.getModifiers())) [ FD ]
