Line_10 $$ Class<?> clazz = loadClass(className)-->Line_11 $$ if (clazz == null || TestCase.class == clazz || !isJUnitClass(clazz)) [ FD ]
Line_10 $$ Class<?> clazz = loadClass(className)-->Line_16 $$ if ((clazz.getModifiers() & Modifier.ABSTRACT) == 0) [ FD ]
Line_14 $$ if (determineLookupStrategy(clazz) == TestDataLookupStrategy.ULTIMATE)-->Line_15 $$ return TestDataLookupStrategy.ULTIMATE[ CD ]
Line_8 $$ for (StackTraceElement stackTraceElement : stackTrace) -->Line_9 $$ String className = stackTraceElement.getClassName()[ FD ]
Line_5 $$ Class<?> testClass = null-->Line_17 $$ testClass = clazz[ FD ]
Line_10 $$ Class<?> clazz = loadClass(className)-->Line_17 $$ testClass = clazz[ FD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_22 $$ Class<?> classToUse = testClass == null ? abstractTestClass : testClass[ CD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_23 $$ return classToUse == null ? null : determineLookupStrategy(classToUse)[ CD ]
Line_3 $$ if (isLocatedInCommunity())-->Line_4 $$ return TestDataLookupStrategy.COMMUNITY[ CD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_7 $$ StackTraceElement[] stackTrace = new Exception().getStackTrace()[ CD ]
Line_10 $$ Class<?> clazz = loadClass(className)-->Line_19 $$ abstractTestClass = clazz[ FD ]
Line_9 $$ String className = stackTraceElement.getClassName()-->Line_10 $$ Class<?> clazz = loadClass(className)[ FD ]
Line_16 $$ if ((clazz.getModifiers() & Modifier.ABSTRACT) == 0) -->Line_19 $$ abstractTestClass = clazz[ CD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_3 $$ if (isLocatedInCommunity())[ CD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_6 $$ Class<?> abstractTestClass = null[ CD ]
Line_16 $$ if ((clazz.getModifiers() & Modifier.ABSTRACT) == 0) -->Line_17 $$ testClass = clazz[ CD ]
Line_2 $$ private static TestDataLookupStrategy guessTestDataLookupStrategyOnClassLocation() -->Line_5 $$ Class<?> testClass = null[ CD ]
Line_6 $$ Class<?> abstractTestClass = null-->Line_19 $$ abstractTestClass = clazz[ FD ]
Line_10 $$ Class<?> clazz = loadClass(className)-->Line_14 $$ if (determineLookupStrategy(clazz) == TestDataLookupStrategy.ULTIMATE)[ FD ]
Line_22 $$ Class<?> classToUse = testClass == null ? abstractTestClass : testClass-->Line_23 $$ return classToUse == null ? null : determineLookupStrategy(classToUse)[ FD ]
