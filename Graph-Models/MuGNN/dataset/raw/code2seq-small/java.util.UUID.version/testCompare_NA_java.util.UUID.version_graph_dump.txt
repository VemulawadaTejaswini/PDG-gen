Line_3 $$ int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)))-->Line_8 $$ logJdkUUIDCompareToVariance(u1, u2, c)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_4 $$ expC = sign(expC)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_5 $$ assertEquals("Expected " + describeCompare(u1, u2, expC) + ", got " + describeCompare(u1, u2, c), expC, c)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_8 $$ logJdkUUIDCompareToVariance(u1, u2, c)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_6 $$ if (((u1 != null) && (u1.version() == 1)) && ((u2 != null) && (u2.version() == 1)))[ FD ]
Line_3 $$ int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)))-->Line_7 $$ assertEquals(c, sign(TimeUUIDType.instance.compare(bytebuffer(u1), bytebuffer(u2))))[ FD ]
Line_4 $$ expC = sign(expC)-->Line_5 $$ assertEquals("Expected " + describeCompare(u1, u2, expC) + ", got " + describeCompare(u1, u2, c), expC, c)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_6 $$ if (((u1 != null) && (u1.version() == 1)) && ((u2 != null) && (u2.version() == 1)))[ CD ]
Line_6 $$ if (((u1 != null) && (u1.version() == 1)) && ((u2 != null) && (u2.version() == 1)))-->Line_7 $$ assertEquals(c, sign(TimeUUIDType.instance.compare(bytebuffer(u1), bytebuffer(u2))))[ CD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_4 $$ expC = sign(expC)[ CD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_3 $$ int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)))[ CD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_8 $$ logJdkUUIDCompareToVariance(u1, u2, c)[ CD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_3 $$ int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)))[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_5 $$ assertEquals("Expected " + describeCompare(u1, u2, expC) + ", got " + describeCompare(u1, u2, c), expC, c)[ CD ]
Line_3 $$ int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)))-->Line_5 $$ assertEquals("Expected " + describeCompare(u1, u2, expC) + ", got " + describeCompare(u1, u2, c), expC, c)[ FD ]
Line_2 $$ public void testCompare(UUID u1, UUID u2, int expC) -->Line_7 $$ assertEquals(c, sign(TimeUUIDType.instance.compare(bytebuffer(u1), bytebuffer(u2))))[ FD ]
