Line_9 $$ try (DataInputBuffer in = new DataInputBuffer(row.getBytes("data"), false)) -->Line_12 $$ mutations.add(Mutation.serializer.deserialize(in, version))[ FD ]
Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")-->Line_16 $$ logger.error("Failed to convert mutation [ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_3 $$ UUID id = row.getUUID("id")[ CD ]
Line_6 $$ if (id.version() != 1)-->Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)[ CD ]
Line_11 $$ List<Mutation> mutations = new ArrayList(numMutations)-->Line_12 $$ mutations.add(Mutation.serializer.deserialize(in, version))[ FD ]
Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")-->Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_9 $$ try (DataInputBuffer in = new DataInputBuffer(row.getBytes("data"), false)) [ FD ]
Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")-->Line_13 $$ BatchlogManager.store(Batch.createLocal(id, TimeUnit.MILLISECONDS.toMicros(timestamp), mutations))[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)[ FD ]
Line_3 $$ UUID id = row.getUUID("id")-->Line_6 $$ if (id.version() != 1)[ FD ]
Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)-->Line_13 $$ BatchlogManager.store(Batch.createLocal(id, TimeUnit.MILLISECONDS.toMicros(timestamp), mutations))[ FD ]
Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")-->Line_8 $$ logger.trace("Converting mutation at [ FD ]
Line_3 $$ UUID id = row.getUUID("id")-->Line_13 $$ BatchlogManager.store(Batch.createLocal(id, TimeUnit.MILLISECONDS.toMicros(timestamp), mutations))[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_5 $$ int version = row.has("version") ? row.getInt("version") : MessagingService.VERSION_12[ CD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")[ CD ]
Line_3 $$ UUID id = row.getUUID("id")-->Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)[ FD ]
Line_3 $$ UUID id = row.getUUID("id")-->Line_4 $$ long timestamp = id.version() == 1 ? UUIDGen.unixTimestamp(id) : row.getLong("written_at")[ FD ]
Line_9 $$ try (DataInputBuffer in = new DataInputBuffer(row.getBytes("data"), false)) -->Line_10 $$ int numMutations = in.readInt()[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_6 $$ if (id.version() != 1)[ CD ]
Line_7 $$ id = UUIDGen.getTimeUUID(timestamp, counter)-->Line_16 $$ logger.error("Failed to convert mutation [ FD ]
Line_5 $$ int version = row.has("version") ? row.getInt("version") : MessagingService.VERSION_12-->Line_12 $$ mutations.add(Mutation.serializer.deserialize(in, version))[ FD ]
Line_3 $$ UUID id = row.getUUID("id")-->Line_16 $$ logger.error("Failed to convert mutation [ FD ]
Line_10 $$ int numMutations = in.readInt()-->Line_12 $$ for (int i = 0; i < numMutations; i++) mutations.add(Mutation.serializer.deserialize(in, version))[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_5 $$ int version = row.has("version") ? row.getInt("version") : MessagingService.VERSION_12[ FD ]
Line_11 $$ List<Mutation> mutations = new ArrayList(numMutations)-->Line_13 $$ BatchlogManager.store(Batch.createLocal(id, TimeUnit.MILLISECONDS.toMicros(timestamp), mutations))[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_3 $$ UUID id = row.getUUID("id")[ FD ]
Line_2 $$ private static boolean apply(UntypedResultSet.Row row, long counter) -->Line_8 $$ logger.trace("Converting mutation at [ CD ]
