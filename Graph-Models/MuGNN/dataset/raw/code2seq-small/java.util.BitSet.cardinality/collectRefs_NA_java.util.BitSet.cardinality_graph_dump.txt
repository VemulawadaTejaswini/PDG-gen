Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_15 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_48 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ CD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_47 $$ Instruction[] flow = block.getControlFlow()[ CD ]
Line_27 $$ if (element instanceof GrAnonymousClassDefinition) -->Line_28 $$ final BitSet prev = writes.get(instruction.num())[ CD ]
Line_39 $$ GrOpenBlock block = method.getBlock()-->Line_40 $$ if (block != null) [ FD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_15 $$ final BitSet prev = writes.get(instruction.num())[ CD ]
Line_46 $$ GrOpenBlock block = initializer.getBlock()-->Line_47 $$ Instruction[] flow = block.getControlFlow()[ FD ]
Line_40 $$ if (block != null) -->Line_42 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ CD ]
Line_47 $$ Instruction[] flow = block.getControlFlow()-->Line_48 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_21 $$ if (element instanceof GrClosableBlock) [ CD ]
Line_32 $$ GrExpression initializer = field.getInitializerGroovy()-->Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)[ FD ]
Line_21 $$ if (element instanceof GrClosableBlock) -->Line_27 $$ if (element instanceof GrAnonymousClassDefinition) [ CD ]
Line_32 $$ GrExpression initializer = field.getInitializerGroovy()-->Line_33 $$ if (initializer != null) [ FD ]
Line_18 $$ if (writeInstructionNumber == -1 && prev.cardinality() == 0) -->Line_19 $$ toInline.add(new ClosureUsage(ref))[ CD ]
Line_3 $$ for (Instruction instruction : flow) -->Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) [ FD ]
Line_27 $$ if (element instanceof GrAnonymousClassDefinition) -->Line_29 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ CD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_12 $$ final GrReferenceExpression ref = (GrReferenceExpression) element[ CD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_10 $$ if (!(element instanceof GrReferenceExpression))[ CD ]
Line_3 $$ for (Instruction instruction : flow) -->Line_15 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_13 $$ if (ref.isQualified() || ref.resolve() != variable)[ CD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_8 $$ if (element instanceof GrVariable && element != variable)[ CD ]
Line_39 $$ GrOpenBlock block = method.getBlock()-->Line_41 $$ Instruction[] flow = block.getControlFlow()[ FD ]
Line_3 $$ for (Instruction instruction : flow) -->Line_22 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_46 $$ GrOpenBlock block = initializer.getBlock()[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_33 $$ if (initializer != null) [ CD ]
Line_15 $$ final BitSet prev = writes.get(instruction.num())-->Line_23 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ FD ]
Line_32 $$ GrExpression initializer = field.getInitializerGroovy()-->Line_46 $$ GrOpenBlock block = initializer.getBlock()[ FD ]
Line_16 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) -->Line_17 $$ toInline.add(new UsageInfo(ref))[ CD ]
Line_3 $$ for (Instruction instruction : flow) -->Line_4 $$ final PsiElement element = instruction.getElement()[ FD ]
Line_41 $$ Instruction[] flow = block.getControlFlow()-->Line_48 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_16 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) -->Line_18 $$ if (writeInstructionNumber == -1 && prev.cardinality() == 0) [ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_28 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
Line_21 $$ if (element instanceof GrClosableBlock) -->Line_23 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ CD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)[ FD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_35 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_42 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_39 $$ GrOpenBlock block = method.getBlock()[ FD ]
Line_41 $$ Instruction[] flow = block.getControlFlow()-->Line_42 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_48 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_19 $$ toInline.add(new ClosureUsage(ref))[ FD ]
Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)-->Line_35 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_23 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) -->Line_24 $$ final Instruction[] closureFlow = ((GrClosableBlock) element).getControlFlow()[ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_25 $$ collectRefs(variable, closureFlow, ControlFlowUtils.inferWriteAccessMap(closureFlow, variable), -1, toInline)[ FD ]
Line_33 $$ if (initializer != null) -->Line_35 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_23 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_40 $$ if (block != null) [ CD ]
Line_40 $$ if (block != null) -->Line_41 $$ Instruction[] flow = block.getControlFlow()[ CD ]
Line_15 $$ final BitSet prev = writes.get(instruction.num())-->Line_18 $$ if (writeInstructionNumber == -1 && prev.cardinality() == 0) [ FD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_29 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ FD ]
Line_33 $$ if (initializer != null) -->Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)[ CD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_6 $$ if (((ReadWriteVariableInstruction) instruction).isWrite())[ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_22 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
Line_39 $$ GrOpenBlock block = method.getBlock()-->Line_47 $$ Instruction[] flow = block.getControlFlow()[ FD ]
Line_29 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) -->Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() [ CD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_32 $$ GrExpression initializer = field.getInitializerGroovy()[ FD ]
Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)-->Line_48 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_15 $$ final BitSet prev = writes.get(instruction.num())-->Line_16 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) [ FD ]
Line_23 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) -->Line_25 $$ collectRefs(variable, closureFlow, ControlFlowUtils.inferWriteAccessMap(closureFlow, variable), -1, toInline)[ CD ]
Line_4 $$ final PsiElement element = instruction.getElement()-->Line_27 $$ if (element instanceof GrAnonymousClassDefinition) [ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_32 $$ GrExpression initializer = field.getInitializerGroovy()[ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_16 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) [ FD ]
Line_34 $$ Instruction[] flow = new ControlFlowBuilder(field.getProject()).buildControlFlow(initializer)-->Line_42 $$ collectRefs(variable, flow, ControlFlowUtils.inferWriteAccessMap(flow, variable), -1, toInline)[ FD ]
Line_4 $$ final PsiElement element = instruction.getElement()-->Line_21 $$ if (element instanceof GrClosableBlock) [ FD ]
Line_12 $$ final GrReferenceExpression ref = (GrReferenceExpression) element-->Line_13 $$ if (ref.isQualified() || ref.resolve() != variable)[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_46 $$ GrOpenBlock block = initializer.getBlock()[ CD ]
Line_2 $$ private static void collectRefs(final GrVariable variable, Instruction[] flow, final ArrayList<BitSet> writes, final int writeInstructionNumber, final ArrayList<UsageInfo> toInline) -->Line_17 $$ toInline.add(new UsageInfo(ref))[ FD ]
Line_24 $$ final Instruction[] closureFlow = ((GrClosableBlock) element).getControlFlow()-->Line_25 $$ collectRefs(variable, closureFlow, ControlFlowUtils.inferWriteAccessMap(closureFlow, variable), -1, toInline)[ FD ]
Line_30 $$ ((GrAnonymousClassDefinition) element).acceptChildren(new GroovyRecursiveElementVisitor() -->Line_39 $$ GrOpenBlock block = method.getBlock()[ CD ]
Line_5 $$ if (instruction instanceof ReadWriteVariableInstruction) -->Line_16 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber)) [ CD ]
Line_21 $$ if (element instanceof GrClosableBlock) -->Line_22 $$ final BitSet prev = writes.get(instruction.num())[ CD ]
Line_15 $$ final BitSet prev = writes.get(instruction.num())-->Line_29 $$ if (writeInstructionNumber >= 0 && prev.cardinality() == 1 && prev.get(writeInstructionNumber) || writeInstructionNumber == -1 && prev.cardinality() == 0) [ FD ]
Line_3 $$ for (Instruction instruction : flow) -->Line_28 $$ final BitSet prev = writes.get(instruction.num())[ FD ]
