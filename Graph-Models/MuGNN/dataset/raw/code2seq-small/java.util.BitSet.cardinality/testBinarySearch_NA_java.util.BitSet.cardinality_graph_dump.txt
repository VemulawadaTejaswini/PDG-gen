Line_9 $$ double value-->Line_14 $$ value = Double.NaN[ FD ]
Line_2 $$ public void testBinarySearch() throws Exception -->Line_3 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_24 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) -->Line_26 $$ if ((array[i] >= lookForValue - tolerance) && (array[i] <= lookForValue + tolerance)) [ CD ]
Line_31 $$ if (bitSet.cardinality() == 0) -->Line_32 $$ assertThat(foundIndex, is(-1))[ CD ]
Line_24 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) -->Line_25 $$ bitSet.set(i)[ CD ]
Line_11 $$ value = Math.random() * 10-->Line_14 $$ value = Double.NaN[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_23 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_14 $$ value = Double.NaN-->Line_15 $$ array[i] = value[ FD ]
Line_11 $$ value = Math.random() * 10-->Line_18 $$ lookForValue = value[ FD ]
Line_6 $$ double lookForValue = randomFreq(0.9) ? -1 : Double.NaN-->Line_24 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) [ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_6 $$ double lookForValue = randomFreq(0.9) ? -1 : Double.NaN[ CD ]
Line_10 $$ if (randomFreq(0.9)) -->Line_11 $$ value = Math.random() * 10[ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_8 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_10 $$ if (randomFreq(0.9)) -->Line_15 $$ array[i] = value[ CD ]
Line_14 $$ value = Double.NaN-->Line_18 $$ lookForValue = value[ FD ]
Line_11 $$ value = Math.random() * 10-->Line_12 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ FD ]
Line_9 $$ double value-->Line_15 $$ array[i] = value[ FD ]
Line_6 $$ double lookForValue = randomFreq(0.9) ? -1 : Double.NaN-->Line_18 $$ lookForValue = value[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_21 $$ Arrays.sort(array)[ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_4 $$ int index = Math.min(randomInt(0, 10), 9)[ CD ]
Line_31 $$ if (bitSet.cardinality() == 0) -->Line_34 $$ assertThat(bitSet.get(foundIndex), is(true))[ CD ]
Line_23 $$ for (int i = 0; i < array.length; i++) -->Line_27 $$ bitSet.set(i)[ FD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_27 $$ bitSet.set(i)[ FD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_10 $$ if (randomFreq(0.9)) [ CD ]
Line_7 $$ double[] array = new double[10]-->Line_30 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_5 $$ double tolerance = Math.random() * 0.01-->Line_30 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_17 $$ if (i == index && lookForValue < 0) [ CD ]
Line_7 $$ double[] array = new double[10]-->Line_21 $$ Arrays.sort(array)[ FD ]
Line_6 $$ double lookForValue = randomFreq(0.9) ? -1 : Double.NaN-->Line_30 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_5 $$ double tolerance = Math.random() * 0.01[ CD ]
Line_10 $$ if (randomFreq(0.9)) -->Line_14 $$ value = Double.NaN[ CD ]
Line_23 $$ for (int i = 0; i < array.length; i++) -->Line_24 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) [ CD ]
Line_14 $$ value = Double.NaN-->Line_12 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ FD ]
Line_17 $$ if (i == index && lookForValue < 0) -->Line_18 $$ lookForValue = value[ CD ]
Line_11 $$ value = Math.random() * 10-->Line_15 $$ array[i] = value[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_30 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ CD ]
Line_9 $$ double value-->Line_12 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ FD ]
Line_18 $$ lookForValue = value-->Line_30 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_9 $$ double value[ CD ]
Line_9 $$ double value-->Line_11 $$ value = Math.random() * 10[ FD ]
Line_18 $$ lookForValue = value-->Line_24 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) [ FD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_25 $$ bitSet.set(i)[ FD ]
Line_10 $$ if (randomFreq(0.9)) -->Line_12 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ CD ]
Line_8 $$ for (int i = 0; i < array.length; i++) -->Line_23 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_23 $$ for (int i = 0; i < array.length; i++) -->Line_25 $$ bitSet.set(i)[ FD ]
Line_9 $$ double value-->Line_18 $$ lookForValue = value[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_31 $$ if (bitSet.cardinality() == 0) [ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_7 $$ double[] array = new double[10][ CD ]
Line_26 $$ if ((array[i] >= lookForValue - tolerance) && (array[i] <= lookForValue + tolerance)) -->Line_27 $$ bitSet.set(i)[ CD ]
