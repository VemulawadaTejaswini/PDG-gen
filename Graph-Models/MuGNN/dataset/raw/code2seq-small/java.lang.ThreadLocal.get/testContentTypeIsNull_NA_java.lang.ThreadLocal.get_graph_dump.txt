Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_100 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ CD ]
Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_27 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_2)))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_94 $$ sb.append("], distributedRequestAttributes=")[ CD ]
Line_79 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_81 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_128 $$ sb.append(entry.getKey())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_50 $$ Assert.assertEquals(_PARAMETER_VALUE_4, parameter2[1])[ CD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_124 $$ sb.append(", originalSessionAttributes=")[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_115 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_7 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_9 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_1, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_1))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_121 $$ sb.append(", headerMap=")[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_49 $$ Assert.assertEquals(_PARAMETER_VALUE_3, parameter2[0])[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_117 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_73 $$ Assert.assertEquals(_REMOTE_HOST, populatedHttpServletRequest.getRemoteHost())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_23 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_4))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_123 $$ sb.append(", multipartParameterMap=null")[ CD ]
Line_79 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_80 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_88 $$ sb.append("[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_59 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_1))[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_131 $$ sb.append(", ")[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_123 $$ sb.append(", multipartParameterMap=null")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_86 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_2, mockHttpSession.getAttribute(_SESSION_ATTRIBUTE_NAME_2))[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_139 $$ sb.append("}")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_38 $$ Assert.assertTrue(headers.isEmpty())[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_137 $$ sb.append(", serverPort=")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_115 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_7 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_8 $$ Assert.assertEquals(2, originalSessionAttributes.size())[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_35 $$ Assert.assertEquals(_HEADER_VALUE_3, headers.get(0))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_114 $$ sb.append("}")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_54 $$ Assert.assertEquals(_PARAMETER_VALUE_3, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_2))[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_100 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_117 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_47 $$ String[] parameter2 = parameterMap.get(_PARAMETER_NAME_2)-->Line_66 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_93 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_110 $$ sb.append(", serverName=")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_90 $$ sb.append(CookieUtil.toString(cookie))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_55 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_3))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_21 $$ Assert.assertEquals(_HEADER_VALUE_3, populatedHttpServletRequest.getHeader(_HEADER_NAME_2))[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_76 $$ Assert.assertEquals(_SERVER_NAME, populatedHttpServletRequest.getServerName())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_133 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_36 $$ Assert.assertEquals(_HEADER_VALUE_4, headers.get(1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_70 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_21 $$ Assert.assertEquals(_HEADER_VALUE_3, populatedHttpServletRequest.getHeader(_HEADER_NAME_2))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_137 $$ sb.append(", serverPort=")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_60 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_2))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_8 $$ Assert.assertEquals(2, originalSessionAttributes.size())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_55 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_3))[ CD ]
Line_89 $$ for (Cookie cookie : cookies) -->Line_90 $$ sb.append(CookieUtil.toString(cookie))[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_97 $$ sb.append(spiAgentRequest.headerMap)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_120 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_75 $$ Assert.assertEquals(_REMOTE_USER, populatedHttpServletRequest.getRemoteUser())[ FD ]
Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_26 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_1)))[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_134 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_136 $$ sb.append(_SERVER_NAME)[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_91 $$ sb.append(", ")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_97 $$ sb.append(spiAgentRequest.headerMap)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_71 $$ Assert.assertEquals(0, parameter3.length)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_82 $$ Assert.assertEquals(2, attributeNames.size())[ CD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_134 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ FD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_7 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()-->Line_10 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_2, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_2))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_93 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_58 $$ Assert.assertEquals(3, parameterNames.size())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_76 $$ Assert.assertEquals(_SERVER_NAME, populatedHttpServletRequest.getServerName())[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()[ FD ]
Line_102 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_103 $$ sb.append(entry.getKey())[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_117 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_139 $$ sb.append("}")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_126 $$ sb.append(", parameterMap=[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_117 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_94 $$ sb.append("], distributedRequestAttributes=")[ FD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_96 $$ sb.append(", headerMap=")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_123 $$ sb.append(", multipartParameterMap=null")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_137 $$ sb.append(", serverPort=")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_3 $$ String threadLocalValue = "threadLocalValue"[ CD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_104 $$ sb.append("=")[ FD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)[ FD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_20 $$ Assert.assertEquals(_HEADER_VALUE_1, populatedHttpServletRequest.getHeader(_HEADER_NAME_1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_80 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_111 $$ sb.append(_SERVER_NAME)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_101 $$ sb.append(", parameterMap=[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_7 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()[ CD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_40 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_79 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_86 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_2, mockHttpSession.getAttribute(_SESSION_ATTRIBUTE_NAME_2))[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_73 $$ Assert.assertEquals(_REMOTE_HOST, populatedHttpServletRequest.getRemoteHost())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_36 $$ Assert.assertEquals(_HEADER_VALUE_4, headers.get(1))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_9 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_1, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_1))[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_105 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_55 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_3))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_129 $$ sb.append("=")[ FD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_42 $$ Assert.assertEquals(3, parameterMap.size())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_28 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_3)))[ CD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_7 $$ Map<String, Serializable> originalSessionAttributes = spiAgentRequest.getOriginalSessionAttributes()[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_17 $$ Assert.assertEquals(2, cookies.length)[ CD ]
Line_81 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_83 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_65 $$ Assert.assertEquals(_PARAMETER_VALUE_2, parameter1[1])[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_109 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_130 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_53 $$ Assert.assertEquals(_PARAMETER_VALUE_1, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_56 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_4))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_58 $$ Assert.assertEquals(3, parameterNames.size())[ CD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_102 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) [ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_100 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_119 $$ sb.append("[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_110 $$ sb.append(", serverName=")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_84 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_2))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_135 $$ sb.append(", serverName=")[ CD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_126 $$ sb.append(", parameterMap=[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_23 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_4))[ CD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_38 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_115 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_53 $$ Assert.assertEquals(_PARAMETER_VALUE_1, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_1))[ CD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_34 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_124 $$ sb.append(", originalSessionAttributes=")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_12 $$ Assert.assertNull(populatedHttpServletRequest.getCookies())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_116 $$ _mockHttpServletRequest.setCookies((Cookie[]) null)[ CD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))[ FD ]
Line_79 $$ MockHttpSession mockHttpSession = new MockHttpSession()-->Line_85 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_1, mockHttpSession.getAttribute(_SESSION_ATTRIBUTE_NAME_1))[ FD ]
Line_43 $$ String[] parameter1 = parameterMap.get(_PARAMETER_NAME_1)-->Line_62 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_134 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_138 $$ sb.append(_SERVER_PORT)[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_16 $$ Cookie[] cookies = populatedHttpServletRequest.getCookies()[ FD ]
Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_25 $$ Assert.assertEquals(3, headerNames.size())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))[ FD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_127 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) [ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_111 $$ sb.append(_SERVER_NAME)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_83 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_1))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_52 $$ Assert.assertEquals(0, parameter3.length)[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_23 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_4))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))[ CD ]
Line_3 $$ String threadLocalValue = "threadLocalValue"-->Line_78 $$ Assert.assertEquals(threadLocalValue, _threadLocal.get())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_114 $$ sb.append("}")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_100 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_121 $$ sb.append(", headerMap=")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_99 $$ sb.append(", originalSessionAttributes=")[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_88 $$ sb.append("[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_140 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_47 $$ String[] parameter2 = parameterMap.get(_PARAMETER_NAME_2)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_75 $$ Assert.assertEquals(_REMOTE_USER, populatedHttpServletRequest.getRemoteUser())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_121 $$ sb.append(", headerMap=")[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_36 $$ Assert.assertEquals(_HEADER_VALUE_4, headers.get(1))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_133 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_10 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_2, originalSessionAttributes.get(_SESSION_ATTRIBUTE_NAME_2))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_43 $$ String[] parameter1 = parameterMap.get(_PARAMETER_NAME_1)[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_69 $$ Assert.assertEquals(_PARAMETER_VALUE_4, parameter2[1])[ CD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_80 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_46 $$ Assert.assertEquals(_PARAMETER_VALUE_2, parameter1[1])[ CD ]
Line_102 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_128 $$ sb.append(entry.getKey())[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_32 $$ Assert.assertEquals(_HEADER_VALUE_2, headers.get(1))[ FD ]
Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_59 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_1))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_131 $$ sb.append(", ")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_22 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_3))[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_129 $$ sb.append("=")[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_74 $$ Assert.assertEquals(_REMOTE_PORT, populatedHttpServletRequest.getRemotePort())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_62 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_77 $$ Assert.assertEquals(_SERVER_PORT, populatedHttpServletRequest.getServerPort())[ CD ]
Line_102 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_105 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_53 $$ Assert.assertEquals(_PARAMETER_VALUE_1, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_1))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_44 $$ Assert.assertEquals(2, parameter1.length)[ CD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_117 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_61 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_3))[ CD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_38 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_102 $$ for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) -->Line_130 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_64 $$ Assert.assertEquals(_PARAMETER_VALUE_1, parameter1[0])[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_18 $$ Assert.assertTrue(CookieUtil.equals(_cookie1, cookies[0]))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_26 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_1)))[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_68 $$ Assert.assertEquals(_PARAMETER_VALUE_3, parameter2[0])[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_98 $$ sb.append(", multipartParameterMap=null")[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_16 $$ Cookie[] cookies = populatedHttpServletRequest.getCookies()[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_54 $$ Assert.assertEquals(_PARAMETER_VALUE_3, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_2))[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ Assert.assertEquals(_REMOTE_ADDR, populatedHttpServletRequest.getRemoteAddr())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_56 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_4))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_56 $$ Assert.assertNull(populatedHttpServletRequest.getParameter(_PARAMETER_NAME_4))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_112 $$ sb.append(", serverPort=")[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_133 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_122 $$ sb.append(spiAgentRequest.headerMap)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_40 $$ Assert.assertTrue(headers.isEmpty())[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_106 $$ sb.append(", ")[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_136 $$ sb.append(_SERVER_NAME)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_4 $$ _threadLocal.set(threadLocalValue)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_51 $$ String[] parameter3 = parameterMap.get(_PARAMETER_NAME_3)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_48 $$ Assert.assertEquals(2, parameter2.length)[ CD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_43 $$ String[] parameter1 = parameterMap.get(_PARAMETER_NAME_1)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_95 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_73 $$ Assert.assertEquals(_REMOTE_HOST, populatedHttpServletRequest.getRemoteHost())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_81 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_35 $$ Assert.assertEquals(_HEADER_VALUE_3, headers.get(0))[ CD ]
Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_61 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_3))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_32 $$ Assert.assertEquals(_HEADER_VALUE_2, headers.get(1))[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_20 $$ Assert.assertEquals(_HEADER_VALUE_1, populatedHttpServletRequest.getHeader(_HEADER_NAME_1))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_138 $$ sb.append(_SERVER_PORT)[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_119 $$ sb.append("[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_124 $$ sb.append(", originalSessionAttributes=")[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_22 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_3))[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_101 $$ sb.append(", parameterMap=[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_78 $$ Assert.assertEquals(threadLocalValue, _threadLocal.get())[ CD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_80 $$ spiAgentRequest.populateSessionAttributes(mockHttpSession)[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_112 $$ sb.append(", serverPort=")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_67 $$ Assert.assertEquals(2, parameter2.length)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_96 $$ sb.append(", headerMap=")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_13 $$ _mockHttpServletRequest.setCookies(_cookie1, _cookie2)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_139 $$ sb.append("}")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_108 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_20 $$ Assert.assertEquals(_HEADER_VALUE_1, populatedHttpServletRequest.getHeader(_HEADER_NAME_1))[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_120 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_122 $$ sb.append(spiAgentRequest.headerMap)[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_70 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_77 $$ Assert.assertEquals(_SERVER_PORT, populatedHttpServletRequest.getServerPort())[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_138 $$ sb.append(_SERVER_PORT)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_63 $$ Assert.assertEquals(2, parameter1.length)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_16 $$ Cookie[] cookies = populatedHttpServletRequest.getCookies()[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_34 $$ Assert.assertEquals(2, headers.size())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_66 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_103 $$ sb.append(entry.getKey())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_42 $$ Assert.assertEquals(3, parameterMap.size())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_74 $$ Assert.assertEquals(_REMOTE_PORT, populatedHttpServletRequest.getRemotePort())[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_108 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_72 $$ Assert.assertEquals(_REMOTE_ADDR, populatedHttpServletRequest.getRemoteAddr())[ FD ]
Line_5 $$ SPIAgentRequest spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ FD ]
Line_51 $$ String[] parameter3 = parameterMap.get(_PARAMETER_NAME_3)-->Line_70 $$ parameter3 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_3)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_79 $$ MockHttpSession mockHttpSession = new MockHttpSession()[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_95 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())[ CD ]
Line_14 $$ spiAgentRequest = new SPIAgentRequest(_mockHttpServletRequest)-->Line_115 $$ Assert.assertEquals(sb.toString(), spiAgentRequest.toString())[ FD ]
Line_57 $$ List<String> parameterNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getParameterNames())-->Line_60 $$ Assert.assertTrue(parameterNames.contains(_PARAMETER_NAME_2))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_136 $$ sb.append(_SERVER_NAME)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_45 $$ Assert.assertEquals(_PARAMETER_VALUE_1, parameter1[0])[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_98 $$ sb.append(", multipartParameterMap=null")[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_85 $$ Assert.assertEquals(_SESSION_ATTRIBUTE_VALUE_1, mockHttpSession.getAttribute(_SESSION_ATTRIBUTE_NAME_1))[ CD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_38 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_47 $$ String[] parameter2 = parameterMap.get(_PARAMETER_NAME_2)[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_75 $$ Assert.assertEquals(_REMOTE_USER, populatedHttpServletRequest.getRemoteUser())[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_130 $$ sb.append(Arrays.toString(entry.getValue()))[ FD ]
Line_3 $$ String threadLocalValue = "threadLocalValue"-->Line_4 $$ _threadLocal.set(threadLocalValue)[ FD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_12 $$ Assert.assertNull(populatedHttpServletRequest.getCookies())[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_34 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_22 $$ Assert.assertNull(populatedHttpServletRequest.getHeader(_HEADER_NAME_3))[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_30 $$ Assert.assertEquals(2, headers.size())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_25 $$ Assert.assertEquals(3, headerNames.size())[ CD ]
Line_81 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_84 $$ Assert.assertTrue(attributeNames.contains(_SESSION_ATTRIBUTE_NAME_2))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_6 $$ _threadLocal.remove()[ CD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_122 $$ sb.append(spiAgentRequest.headerMap)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)[ CD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_135 $$ sb.append(", serverName=")[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_119 $$ sb.append("[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_125 $$ sb.append(spiAgentRequest.getOriginalSessionAttributes())[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_62 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_30 $$ Assert.assertEquals(2, headers.size())[ CD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_109 $$ sb.append("}, regularParameterMap=null, requestBodyFile=null")[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ FD ]
Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)-->Line_120 $$ sb.append(spiAgentRequest.distributedRequestAttributes)[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_66 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_99 $$ sb.append(", originalSessionAttributes=")[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_54 $$ Assert.assertEquals(_PARAMETER_VALUE_3, populatedHttpServletRequest.getParameter(_PARAMETER_NAME_2))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_27 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_2)))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_72 $$ Assert.assertEquals(_REMOTE_ADDR, populatedHttpServletRequest.getRemoteAddr())[ CD ]
Line_41 $$ Map<String, String[]> parameterMap = populatedHttpServletRequest.getParameterMap()-->Line_51 $$ String[] parameter3 = parameterMap.get(_PARAMETER_NAME_3)[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_126 $$ sb.append(", parameterMap=[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_128 $$ sb.append(entry.getKey())[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_66 $$ parameter2 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_2)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_118 $$ sb = new StringBundler(13 + parameterMap.size() * 4)[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_19 $$ Assert.assertTrue(CookieUtil.equals(_cookie2, cookies[1]))[ CD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_62 $$ parameter1 = populatedHttpServletRequest.getParameterValues(_PARAMETER_NAME_1)[ FD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_31 $$ Assert.assertEquals(_HEADER_VALUE_1, headers.get(0))[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_113 $$ sb.append(_SERVER_PORT)[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_76 $$ Assert.assertEquals(_SERVER_NAME, populatedHttpServletRequest.getServerName())[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_31 $$ Assert.assertEquals(_HEADER_VALUE_1, headers.get(0))[ CD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ CD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))[ FD ]
Line_81 $$ List<String> attributeNames = ListUtil.fromEnumeration(mockHttpSession.getAttributeNames())-->Line_82 $$ Assert.assertEquals(2, attributeNames.size())[ FD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_35 $$ Assert.assertEquals(_HEADER_VALUE_3, headers.get(0))[ FD ]
Line_37 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_3))-->Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))[ FD ]
Line_11 $$ HttpServletRequest populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_77 $$ Assert.assertEquals(_SERVER_PORT, populatedHttpServletRequest.getServerPort())[ FD ]
Line_33 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_2))-->Line_40 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_24 $$ List<String> headerNames = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaderNames())-->Line_28 $$ Assert.assertTrue(headerNames.contains(StringUtil.toLowerCase(_HEADER_NAME_3)))[ FD ]
Line_2 $$ public void testContentTypeIsNull() throws Exception -->Line_113 $$ sb.append(_SERVER_PORT)[ CD ]
Line_29 $$ List<String> headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_1))-->Line_40 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_21 $$ Assert.assertEquals(_HEADER_VALUE_3, populatedHttpServletRequest.getHeader(_HEADER_NAME_2))[ FD ]
Line_39 $$ headers = ListUtil.fromEnumeration(populatedHttpServletRequest.getHeaders(_HEADER_NAME_4))-->Line_40 $$ Assert.assertTrue(headers.isEmpty())[ FD ]
Line_15 $$ populatedHttpServletRequest = spiAgentRequest.populateRequest(new MockHttpServletRequest())-->Line_74 $$ Assert.assertEquals(_REMOTE_PORT, populatedHttpServletRequest.getRemotePort())[ FD ]
Line_87 $$ StringBundler sb = new StringBundler(13 + cookies.length * 2 + parameterMap.size() * 4)-->Line_135 $$ sb.append(", serverName=")[ FD ]
