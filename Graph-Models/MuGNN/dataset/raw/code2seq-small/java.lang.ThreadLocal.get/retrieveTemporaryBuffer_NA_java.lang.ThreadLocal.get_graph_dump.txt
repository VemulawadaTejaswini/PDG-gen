Line_2 $$ protected static byte[] retrieveTemporaryBuffer(int minSize) -->Line_5 $$ bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))][ FD ]
Line_3 $$ byte[] bytes = tempBuffer.get()-->Line_6 $$ tempBuffer.set(bytes)[ FD ]
Line_4 $$ if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE)) -->Line_6 $$ tempBuffer.set(bytes)[ CD ]
Line_4 $$ if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE)) -->Line_5 $$ bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))][ CD ]
Line_5 $$ bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))]-->Line_6 $$ tempBuffer.set(bytes)[ FD ]
Line_2 $$ protected static byte[] retrieveTemporaryBuffer(int minSize) -->Line_8 $$ return bytes[ CD ]
Line_3 $$ byte[] bytes = tempBuffer.get()-->Line_5 $$ bytes = new byte[Math.min(MAX_BUFFER_SIZE, 2 * Integer.highestOneBit(minSize))][ FD ]
Line_2 $$ protected static byte[] retrieveTemporaryBuffer(int minSize) -->Line_4 $$ if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE)) [ FD ]
Line_2 $$ protected static byte[] retrieveTemporaryBuffer(int minSize) -->Line_3 $$ byte[] bytes = tempBuffer.get()[ CD ]
Line_2 $$ protected static byte[] retrieveTemporaryBuffer(int minSize) -->Line_4 $$ if (bytes.length < Math.min(minSize, MAX_BUFFER_SIZE)) [ CD ]
