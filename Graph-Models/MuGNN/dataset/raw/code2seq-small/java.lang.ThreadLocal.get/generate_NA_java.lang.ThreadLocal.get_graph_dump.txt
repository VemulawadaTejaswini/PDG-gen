Line_2 $$ public Serializable generate(AccessCallback callback) -->Line_3 $$ GenerationState local = null[ CD ]
Line_12 $$ if (generationState.lastSourceValue == null || !generationState.value.lt(generationState.upperLimitValue)) -->Line_16 $$ while (generationState.value.lt(1)) [ CD ]
Line_6 $$ if (local != null && local.value.lt(local.upperLimitValue)) -->Line_7 $$ return local.value.makeValueThenIncrement()[ CD ]
Line_12 $$ if (generationState.lastSourceValue == null || !generationState.value.lt(generationState.upperLimitValue)) -->Line_14 $$ generationState.upperLimitValue = generationState.lastSourceValue.copy().add(incrementSize)[ CD ]
Line_12 $$ if (generationState.lastSourceValue == null || !generationState.value.lt(generationState.upperLimitValue)) -->Line_13 $$ generationState.lastSourceValue = callback.getNextValue()[ CD ]
Line_12 $$ if (generationState.lastSourceValue == null || !generationState.value.lt(generationState.upperLimitValue)) -->Line_15 $$ generationState.value = generationState.lastSourceValue.copy()[ CD ]
Line_4 $$ if (callback.getTenantIdentifier() == null) -->Line_6 $$ if (local != null && local.value.lt(local.upperLimitValue)) [ CD ]
Line_2 $$ public Serializable generate(AccessCallback callback) -->Line_11 $$ final GenerationState generationState = locateGenerationState(callback.getTenantIdentifier())[ FD ]
Line_2 $$ public Serializable generate(AccessCallback callback) -->Line_4 $$ if (callback.getTenantIdentifier() == null) [ CD ]
Line_3 $$ GenerationState local = null-->Line_5 $$ local = localAssignedIds.get()[ FD ]
Line_2 $$ public Serializable generate(AccessCallback callback) -->Line_13 $$ generationState.lastSourceValue = callback.getNextValue()[ FD ]
Line_4 $$ if (callback.getTenantIdentifier() == null) -->Line_5 $$ local = localAssignedIds.get()[ CD ]
Line_16 $$ while (generationState.value.lt(1)) -->Line_17 $$ generationState.value.increment()[ CD ]
Line_2 $$ public Serializable generate(AccessCallback callback) -->Line_4 $$ if (callback.getTenantIdentifier() == null) [ FD ]
