Line_31 $$ for (final Iterator<AntDomElement> it = typedef.getAntChildrenIterator(); it.hasNext(); ) -->Line_33 $$ if (child instanceof AntFilesProvider) [ CD ]
Line_9 $$ final List<URL> urls = new ArrayList<URL>()-->Line_14 $$ urls.add(toLocalURL(file))[ FD ]
Line_20 $$ final HashSet<AntFilesProvider> processed = new HashSet<AntFilesProvider>()-->Line_34 $$ for (File cpFile : ((AntFilesProvider) child).getFiles(processed)) [ FD ]
Line_2 $$ public static List<URL> collectUrls(AntDomClasspathElement typedef) -->Line_21 $$ final AntDomElement referencedPath = typedef.getClasspathRef().getValue()[ FD ]
Line_4 $$ if (!ourIsBuildingClasspathForCustomTagLoading.get()) -->Line_6 $$ cleanupNeeded = true[ CD ]
Line_2 $$ public static List<URL> collectUrls(AntDomClasspathElement typedef) -->Line_10 $$ final List<File> cpFiles = typedef.getClasspath().getValue()[ FD ]
Line_2 $$ public static List<URL> collectUrls(AntDomClasspathElement typedef) -->Line_4 $$ if (!ourIsBuildingClasspathForCustomTagLoading.get()) [ CD ]
Line_4 $$ if (!ourIsBuildingClasspathForCustomTagLoading.get()) -->Line_5 $$ ourIsBuildingClasspathForCustomTagLoading.set(Boolean.TRUE)[ CD ]
Line_9 $$ final List<URL> urls = new ArrayList<URL>()-->Line_25 $$ urls.add(toLocalURL(cpFile))[ FD ]
Line_9 $$ final List<URL> urls = new ArrayList<URL>()-->Line_36 $$ urls.add(toLocalURL(cpFile))[ FD ]
Line_34 $$ for (File cpFile : ((AntFilesProvider) child).getFiles(processed)) -->Line_36 $$ urls.add(toLocalURL(cpFile))[ FD ]
Line_23 $$ for (File cpFile : ((AntFilesProvider) referencedPath).getFiles(processed)) -->Line_25 $$ urls.add(toLocalURL(cpFile))[ FD ]
Line_32 $$ AntDomElement child = it.next()-->Line_33 $$ if (child instanceof AntFilesProvider) [ FD ]
Line_2 $$ public static List<URL> collectUrls(AntDomClasspathElement typedef) -->Line_31 $$ for (final Iterator<AntDomElement> it = typedef.getAntChildrenIterator(); it.hasNext(); ) [ FD ]
Line_3 $$ boolean cleanupNeeded = false-->Line_6 $$ cleanupNeeded = true[ FD ]
Line_2 $$ public static List<URL> collectUrls(AntDomClasspathElement typedef) -->Line_3 $$ boolean cleanupNeeded = false[ CD ]
Line_31 $$ for (final Iterator<AntDomElement> it = typedef.getAntChildrenIterator(); it.hasNext(); ) -->Line_32 $$ AntDomElement child = it.next()[ FD ]
Line_45 $$ if (cleanupNeeded) -->Line_46 $$ ourIsBuildingClasspathForCustomTagLoading.remove()[ CD ]
Line_31 $$ for (final Iterator<AntDomElement> it = typedef.getAntChildrenIterator(); it.hasNext(); ) -->Line_32 $$ AntDomElement child = it.next()[ CD ]
Line_10 $$ final List<File> cpFiles = typedef.getClasspath().getValue()-->Line_11 $$ if (cpFiles != null) [ FD ]
Line_21 $$ final AntDomElement referencedPath = typedef.getClasspathRef().getValue()-->Line_22 $$ if (referencedPath instanceof AntFilesProvider) [ FD ]
Line_20 $$ final HashSet<AntFilesProvider> processed = new HashSet<AntFilesProvider>()-->Line_23 $$ for (File cpFile : ((AntFilesProvider) referencedPath).getFiles(processed)) [ FD ]
Line_12 $$ for (File file : cpFiles) -->Line_14 $$ urls.add(toLocalURL(file))[ FD ]
Line_23 $$ for (File cpFile : ((AntFilesProvider) referencedPath).getFiles(processed)) -->Line_36 $$ urls.add(toLocalURL(cpFile))[ FD ]
