Line_2 $$ public void testSerialization() throws Exception -->Line_35 $$ ThreadLocalDistributor newThreadLocalDistributor = new ThreadLocalDistributor()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_20 $$ Serializable[] threadLocalValues = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocalValues")[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_30 $$ Assert.assertEquals(0, objectInputStream.readInt())[ CD ]
Line_29 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_34 $$ objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_38 $$ Assert.assertEquals(testValue, TestClass._threadLocal.get())[ CD ]
Line_12 $$ logRecord = logRecords.get(1)-->Line_14 $$ logRecord = logRecords.get(2)[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_12 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_36 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ CD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_33 $$ unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)[ CD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_4 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ FD ]
Line_34 $$ objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_36 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_17 $$ String testValue = "testValue"[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_4 $$ threadLocalDistributor.setClassLoader(getClassLoader())[ CD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_20 $$ Serializable[] threadLocalValues = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocalValues")[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_7 $$ threadLocalDistributor.afterPropertiesSet()[ FD ]
Line_23 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_27 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_14 $$ logRecord = logRecords.get(2)-->Line_15 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_20 $$ Serializable[] threadLocalValues = ReflectionTestUtil.getFieldValue(threadLocalDistributor, "_threadLocalValues")-->Line_31 $$ Assert.assertArrayEquals(threadLocalValues, (Serializable[]) objectInputStream.readObject())[ FD ]
Line_17 $$ String testValue = "testValue"-->Line_18 $$ TestClass._threadLocal.set(testValue)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ThreadLocalDistributor.class.getName(), Level.WARNING)) -->Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_27 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_34 $$ objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)[ CD ]
Line_17 $$ String testValue = "testValue"-->Line_38 $$ Assert.assertEquals(testValue, TestClass._threadLocal.get())[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_22 $$ Assert.assertSame(testValue, threadLocalValues[0])[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_29 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)[ CD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ logRecord = logRecords.get(2)[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ logRecord = logRecords.get(2)[ FD ]
Line_29 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_30 $$ Assert.assertEquals(0, objectInputStream.readInt())[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()[ CD ]
Line_17 $$ String testValue = "testValue"-->Line_22 $$ Assert.assertSame(testValue, threadLocalValues[0])[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_25 $$ threadLocalDistributor.writeExternal(objectOutputStream)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertEquals(3, logRecords.size())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("_nonStatic is not a static ThreadLocal", logRecord.getMessage())[ FD ]
Line_12 $$ logRecord = logRecords.get(1)-->Line_15 $$ Assert.assertEquals("_object is not of type ThreadLocal", logRecord.getMessage())[ FD ]
Line_29 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_31 $$ Assert.assertArrayEquals(threadLocalValues, (Serializable[]) objectInputStream.readObject())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_13 $$ Assert.assertEquals("_nullValue is not initialized", logRecord.getMessage())[ FD ]
Line_29 $$ ObjectInputStream objectInputStream = new ObjectInputStream(unsyncByteArrayInputStream)-->Line_36 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_35 $$ ThreadLocalDistributor newThreadLocalDistributor = new ThreadLocalDistributor()-->Line_36 $$ newThreadLocalDistributor.readExternal(objectInputStream)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_21 $$ Assert.assertEquals(1, threadLocalValues.length)[ CD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_19 $$ threadLocalDistributor.capture()[ FD ]
Line_24 $$ try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(unsyncByteArrayOutputStream)) -->Line_25 $$ threadLocalDistributor.writeExternal(objectOutputStream)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_37 $$ newThreadLocalDistributor.restore()[ CD ]
Line_28 $$ UnsyncByteArrayInputStream unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)-->Line_33 $$ unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)[ FD ]
Line_35 $$ ThreadLocalDistributor newThreadLocalDistributor = new ThreadLocalDistributor()-->Line_37 $$ newThreadLocalDistributor.restore()[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_28 $$ UnsyncByteArrayInputStream unsyncByteArrayInputStream = new UnsyncByteArrayInputStream(data)[ CD ]
Line_3 $$ ThreadLocalDistributor threadLocalDistributor = new ThreadLocalDistributor()-->Line_5 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_18 $$ TestClass._threadLocal.set(testValue)[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_19 $$ threadLocalDistributor.capture()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_32 $$ TestClass._threadLocal.remove()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_23 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_5 $$ threadLocalDistributor.setThreadLocalSources(_keyValuePairs)[ CD ]
Line_12 $$ logRecord = logRecords.get(1)-->Line_13 $$ Assert.assertEquals("_nullValue is not initialized", logRecord.getMessage())[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_31 $$ Assert.assertArrayEquals(threadLocalValues, (Serializable[]) objectInputStream.readObject())[ CD ]
