Line_6 $$ if (!needsFileContentLoading(indexId)) -->Line_7 $$ return[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_26 $$ indexUnsavedDocuments(indexId, project, filter, restrictedFile)[ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_15 $$ if (myReentrancyGuard.get().booleanValue()) [ CD ]
Line_12 $$ if (ActionUtil.isDumbMode(project)) -->Line_13 $$ handleDumbMode(project)[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_4 $$ myContentlessIndicesUpdateQueue.ensureUpToDate()[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_3 $$ ProgressManager.checkCanceled()[ CD ]
Line_15 $$ if (myReentrancyGuard.get().booleanValue()) -->Line_16 $$ return[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_6 $$ if (!needsFileContentLoading(indexId)) [ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_12 $$ if (ActionUtil.isDumbMode(project)) [ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_28 $$ scheduleRebuild(indexId, e)[ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_22 $$ if (ourRebuildStatus.get(indexId).get() != OK) [ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_32 $$ scheduleRebuild(indexId, e)[ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_9 $$ if (filter == GlobalSearchScope.EMPTY_SCOPE) [ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_6 $$ if (!needsFileContentLoading(indexId)) [ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_18 $$ myReentrancyGuard.set(Boolean.TRUE)[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_12 $$ if (ActionUtil.isDumbMode(project)) [ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_13 $$ handleDumbMode(project)[ FD ]
Line_31 $$ if (cause instanceof StorageException || cause instanceof IOException) -->Line_32 $$ scheduleRebuild(indexId, e)[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_25 $$ forceUpdate(project, filter, restrictedFile)[ FD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_5 $$ ApplicationManager.getApplication().assertReadAccessAllowed()[ CD ]
Line_9 $$ if (filter == GlobalSearchScope.EMPTY_SCOPE) -->Line_10 $$ return[ CD ]
Line_2 $$ protected <K> void ensureUpToDate(@NotNull final ID<K, ?> indexId, @Nullable Project project, @Nullable GlobalSearchScope filter, @Nullable VirtualFile restrictedFile) -->Line_9 $$ if (filter == GlobalSearchScope.EMPTY_SCOPE) [ FD ]
