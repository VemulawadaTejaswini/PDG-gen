Line_14 $$ while (charsWritten < len) -->Line_16 $$ for (int i = 0; i < bytesWritten; i += 2) [ CD ]
Line_16 $$ for (int i = 0; i < bytesWritten; i += 2) -->Line_18 $$ buff[i] = (byte) ((aChar >>> 8) & 0xFF)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_14 $$ while (charsWritten < len) [ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_12 $$ int charsWritten = 0[ CD ]
Line_3 $$ if (s == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_21 $$ stream.write(buff, 0, bytesWritten)[ FD ]
Line_7 $$ final int len = s.length()-->Line_8 $$ stream.writeInt(len)[ FD ]
Line_15 $$ final int bytesWritten = Math.min((len - charsWritten) * 2, buff.length)-->Line_16 $$ for (int i = 0; i < bytesWritten; i += 2) [ FD ]
Line_7 $$ final int len = s.length()-->Line_9 $$ if (len == 0) [ FD ]
Line_7 $$ final int len = s.length()-->Line_14 $$ while (charsWritten < len) [ FD ]
Line_3 $$ if (s == null) -->Line_4 $$ stream.writeInt(-1)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_17 $$ char aChar = s.charAt(charsWritten++)[ FD ]
Line_9 $$ if (len == 0) -->Line_10 $$ return[ CD ]
Line_12 $$ int charsWritten = 0-->Line_17 $$ char aChar = s.charAt(charsWritten++)[ FD ]
Line_13 $$ final byte[] buff = myBuffer.get()-->Line_21 $$ stream.write(buff, 0, bytesWritten)[ FD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_3 $$ if (s == null) [ FD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_9 $$ if (len == 0) [ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_4 $$ stream.writeInt(-1)[ FD ]
Line_14 $$ while (charsWritten < len) -->Line_21 $$ stream.write(buff, 0, bytesWritten)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_8 $$ stream.writeInt(len)[ FD ]
Line_15 $$ final int bytesWritten = Math.min((len - charsWritten) * 2, buff.length)-->Line_21 $$ stream.write(buff, 0, bytesWritten)[ FD ]
Line_12 $$ int charsWritten = 0-->Line_14 $$ while (charsWritten < len) [ FD ]
Line_16 $$ for (int i = 0; i < bytesWritten; i += 2) -->Line_19 $$ buff[i + 1] = (byte) ((aChar) & 0xFF)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_7 $$ final int len = s.length()[ FD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_3 $$ if (s == null) [ CD ]
Line_14 $$ while (charsWritten < len) -->Line_15 $$ final int bytesWritten = Math.min((len - charsWritten) * 2, buff.length)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_8 $$ stream.writeInt(len)[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_7 $$ final int len = s.length()[ CD ]
Line_2 $$ public static void writeString(String s, DataOutput stream) throws IOException -->Line_13 $$ final byte[] buff = myBuffer.get()[ CD ]
Line_16 $$ for (int i = 0; i < bytesWritten; i += 2) -->Line_17 $$ char aChar = s.charAt(charsWritten++)[ CD ]
