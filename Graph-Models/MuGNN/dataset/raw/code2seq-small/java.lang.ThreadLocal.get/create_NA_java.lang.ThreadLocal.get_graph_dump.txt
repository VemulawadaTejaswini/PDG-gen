Line_7 $$ Map cache2 = null-->Line_8 $$ cache2 = (Map) source.cache.get(loader)[ FD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_17 $$ if (gen == null) [ FD ]
Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)-->Line_43 $$ return firstInstance(gen)[ FD ]
Line_4 $$ Class gen = null-->Line_15 $$ gen = (Class) SoftReference.dereference(ref)[ FD ]
Line_18 $$ Object save = CURRENT.get()-->Line_39 $$ CURRENT.set(save)[ FD ]
Line_24 $$ gen = loader.loadClass(getClassName())-->Line_28 $$ if (gen == null) [ FD ]
Line_6 $$ ClassLoader loader = getClassLoader()-->Line_31 $$ getClassNameCache(loader).add(className)[ FD ]
Line_28 $$ if (gen == null) -->Line_31 $$ getClassNameCache(loader).add(className)[ CD ]
Line_7 $$ Map cache2 = null-->Line_12 $$ source.cache.put(loader, cache2)[ FD ]
Line_2 $$ protected Object create(Object key) -->Line_14 $$ Reference ref = (Reference) cache2.get(key)[ FD ]
Line_6 $$ ClassLoader loader = getClassLoader()-->Line_8 $$ cache2 = (Map) source.cache.get(loader)[ FD ]
Line_4 $$ Class gen = null-->Line_43 $$ return firstInstance(gen)[ FD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_9 $$ if (cache2 == null) [ FD ]
Line_4 $$ Class gen = null-->Line_24 $$ gen = loader.loadClass(getClassName())[ FD ]
Line_24 $$ gen = loader.loadClass(getClassName())-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_4 $$ Class gen = null-->Line_28 $$ if (gen == null) [ FD ]
Line_4 $$ Class gen = null-->Line_37 $$ return firstInstance(gen)[ FD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_10 $$ cache2 = new HashMap()[ FD ]
Line_10 $$ cache2 = new HashMap()-->Line_12 $$ source.cache.put(loader, cache2)[ FD ]
Line_9 $$ if (cache2 == null) -->Line_11 $$ cache2.put(NAME_KEY, new HashSet())[ CD ]
Line_6 $$ ClassLoader loader = getClassLoader()-->Line_24 $$ gen = loader.loadClass(getClassName())[ FD ]
Line_28 $$ if (gen == null) -->Line_29 $$ byte[] b = strategy.generate(this)[ CD ]
Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)-->Line_37 $$ return firstInstance(gen)[ FD ]
Line_7 $$ Map cache2 = null-->Line_10 $$ cache2 = new HashMap()[ FD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_43 $$ return firstInstance(gen)[ FD ]
Line_4 $$ Class gen = null-->Line_17 $$ if (gen == null) [ FD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_11 $$ cache2.put(NAME_KEY, new HashSet())[ FD ]
Line_7 $$ Map cache2 = null-->Line_9 $$ if (cache2 == null) [ FD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_35 $$ cache2.put(key, new WeakReference(gen))[ FD ]
Line_34 $$ if (useCache) -->Line_35 $$ cache2.put(key, new WeakReference(gen))[ CD ]
Line_10 $$ cache2 = new HashMap()-->Line_14 $$ Reference ref = (Reference) cache2.get(key)[ FD ]
Line_2 $$ protected Object create(Object key) -->Line_21 $$ this.key = key[ FD ]
Line_30 $$ String className = ClassNameReader.getClassName(new ClassReader(b))-->Line_31 $$ getClassNameCache(loader).add(className)[ FD ]
Line_24 $$ gen = loader.loadClass(getClassName())-->Line_43 $$ return firstInstance(gen)[ FD ]
Line_24 $$ gen = loader.loadClass(getClassName())-->Line_37 $$ return firstInstance(gen)[ FD ]
Line_7 $$ Map cache2 = null-->Line_35 $$ cache2.put(key, new WeakReference(gen))[ FD ]
Line_28 $$ if (gen == null) -->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ CD ]
Line_14 $$ Reference ref = (Reference) cache2.get(key)-->Line_15 $$ gen = (Class) SoftReference.dereference(ref)[ FD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_14 $$ Reference ref = (Reference) cache2.get(key)[ FD ]
Line_9 $$ if (cache2 == null) -->Line_13 $$ if (useCache) [ CD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_24 $$ gen = loader.loadClass(getClassName())[ FD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_28 $$ if (gen == null) [ FD ]
Line_4 $$ Class gen = null-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_6 $$ ClassLoader loader = getClassLoader()-->Line_12 $$ source.cache.put(loader, cache2)[ FD ]
Line_30 $$ String className = ClassNameReader.getClassName(new ClassReader(b))-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_17 $$ if (gen == null) -->Line_18 $$ Object save = CURRENT.get()[ CD ]
Line_29 $$ byte[] b = strategy.generate(this)-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_37 $$ return firstInstance(gen)[ FD ]
Line_6 $$ ClassLoader loader = getClassLoader()-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_17 $$ if (gen == null) -->Line_19 $$ CURRENT.set(this)[ CD ]
Line_2 $$ protected Object create(Object key) -->Line_35 $$ cache2.put(key, new WeakReference(gen))[ FD ]
Line_9 $$ if (cache2 == null) -->Line_12 $$ source.cache.put(loader, cache2)[ CD ]
Line_13 $$ if (useCache) -->Line_14 $$ Reference ref = (Reference) cache2.get(key)[ CD ]
Line_10 $$ cache2 = new HashMap()-->Line_35 $$ cache2.put(key, new WeakReference(gen))[ FD ]
Line_9 $$ if (cache2 == null) -->Line_10 $$ cache2 = new HashMap()[ CD ]
Line_7 $$ Map cache2 = null-->Line_14 $$ Reference ref = (Reference) cache2.get(key)[ FD ]
Line_10 $$ cache2 = new HashMap()-->Line_11 $$ cache2.put(NAME_KEY, new HashSet())[ FD ]
Line_13 $$ if (useCache) -->Line_15 $$ gen = (Class) SoftReference.dereference(ref)[ CD ]
Line_15 $$ gen = (Class) SoftReference.dereference(ref)-->Line_32 $$ gen = ReflectUtils.defineClass(className, b, loader)[ FD ]
Line_28 $$ if (gen == null) -->Line_30 $$ String className = ClassNameReader.getClassName(new ClassReader(b))[ CD ]
Line_8 $$ cache2 = (Map) source.cache.get(loader)-->Line_12 $$ source.cache.put(loader, cache2)[ FD ]
Line_7 $$ Map cache2 = null-->Line_11 $$ cache2.put(NAME_KEY, new HashSet())[ FD ]
