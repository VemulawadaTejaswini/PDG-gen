Line_2 $$ private <T> Icon deferImpl(Icon base, T param, @NotNull Function<T, Icon> evaluator, final boolean autoUpdatable) -->Line_19 $$ myIconsCache.put(param, result)[ FD ]
Line_2 $$ private <T> Icon deferImpl(Icon base, T param, @NotNull Function<T, Icon> evaluator, final boolean autoUpdatable) -->Line_4 $$ return evaluator.fun(param)[ FD ]
Line_2 $$ private <T> Icon deferImpl(Icon base, T param, @NotNull Function<T, Icon> evaluator, final boolean autoUpdatable) -->Line_7 $$ Icon result = myIconsCache.get(param)[ FD ]
Line_7 $$ Icon result = myIconsCache.get(param)-->Line_19 $$ myIconsCache.put(param, result)[ FD ]
Line_13 $$ if (started == myLastClearTimestamp) -->Line_14 $$ myIconsCache.put(key, autoUpdatable ? source : r)[ CD ]
Line_3 $$ if (myEvaluationIsInProgress.get().booleanValue()) -->Line_4 $$ return evaluator.fun(param)[ CD ]
Line_8 $$ if (result == null) -->Line_19 $$ myIconsCache.put(param, result)[ CD ]
Line_9 $$ final long started = myLastClearTimestamp-->Line_13 $$ if (started == myLastClearTimestamp) [ FD ]
Line_8 $$ if (result == null) -->Line_9 $$ final long started = myLastClearTimestamp[ CD ]
Line_10 $$ result = new DeferredIconImpl<T>(base, param, evaluator, new DeferredIconImpl.IconListener<T>() -->Line_14 $$ myIconsCache.put(key, autoUpdatable ? source : r)[ FD ]
Line_7 $$ Icon result = myIconsCache.get(param)-->Line_10 $$ result = new DeferredIconImpl<T>(base, param, evaluator, new DeferredIconImpl.IconListener<T>() [ FD ]
Line_7 $$ Icon result = myIconsCache.get(param)-->Line_8 $$ if (result == null) [ FD ]
Line_2 $$ private <T> Icon deferImpl(Icon base, T param, @NotNull Function<T, Icon> evaluator, final boolean autoUpdatable) -->Line_3 $$ if (myEvaluationIsInProgress.get().booleanValue()) [ CD ]
Line_10 $$ result = new DeferredIconImpl<T>(base, param, evaluator, new DeferredIconImpl.IconListener<T>() -->Line_19 $$ myIconsCache.put(param, result)[ FD ]
Line_8 $$ if (result == null) -->Line_10 $$ result = new DeferredIconImpl<T>(base, param, evaluator, new DeferredIconImpl.IconListener<T>() [ CD ]
