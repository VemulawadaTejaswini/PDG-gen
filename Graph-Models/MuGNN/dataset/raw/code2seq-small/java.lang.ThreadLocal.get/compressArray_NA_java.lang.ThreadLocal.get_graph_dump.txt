Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_3 $$ Deflater def = deflater.get()[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_4 $$ def.reset()[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_5 $$ def.setInput(input, inputOffset, inputLength)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_6 $$ def.finish()[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_10 $$ assert def.finished()[ FD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_7 $$ if (def.needsInput())[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_9 $$ int len = def.deflate(output, outputOffset, maxOutputLength)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_5 $$ def.setInput(input, inputOffset, inputLength)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_9 $$ int len = def.deflate(output, outputOffset, maxOutputLength)[ FD ]
Line_3 $$ Deflater def = deflater.get()-->Line_7 $$ if (def.needsInput())[ FD ]
Line_7 $$ if (def.needsInput())-->Line_8 $$ return 0[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_5 $$ def.setInput(input, inputOffset, inputLength)[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_9 $$ int len = def.deflate(output, outputOffset, maxOutputLength)[ CD ]
Line_3 $$ Deflater def = deflater.get()-->Line_4 $$ def.reset()[ FD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_11 $$ return len[ CD ]
Line_2 $$ public int compressArray(byte[] input, int inputOffset, int inputLength, byte[] output, int outputOffset, int maxOutputLength) -->Line_6 $$ def.finish()[ CD ]
