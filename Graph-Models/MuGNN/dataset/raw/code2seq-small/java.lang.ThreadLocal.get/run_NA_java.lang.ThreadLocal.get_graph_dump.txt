Line_36 $$ if (fileUsableSpace < 100 * 1024) -->Line_40 $$ restart(timeout)[ CD ]
Line_42 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() -->Line_45 $$ restart(timeout)[ CD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_9 $$ while (fileUsableSpace == 0) [ CD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_27 $$ ourFreeSpaceCalculation.set(future)[ FD ]
Line_3 $$ if (!reported.get()) -->Line_5 $$ if (future == null) [ CD ]
Line_35 $$ String message = IdeBundle.message("low.disk.space.message", productName)-->Line_42 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() [ FD ]
Line_8 $$ long fileUsableSpace = file.getUsableSpace()-->Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) [ FD ]
Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_5 $$ if (future == null) [ FD ]
Line_36 $$ if (fileUsableSpace < 100 * 1024) -->Line_42 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() [ CD ]
Line_3 $$ if (!reported.get()) -->Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()[ CD ]
Line_5 $$ if (future == null) -->Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() [ CD ]
Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_27 $$ ourFreeSpaceCalculation.set(future)[ FD ]
Line_9 $$ while (fileUsableSpace == 0) -->Line_11 $$ fileUsableSpace = file.getUsableSpace()[ CD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_8 $$ long fileUsableSpace = file.getUsableSpace()[ CD ]
Line_32 $$ SwingUtilities.invokeLater(new Runnable() -->Line_34 $$ String productName = ApplicationNamesInfo.getInstance().getFullProductName()[ CD ]
Line_42 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() -->Line_44 $$ reported.compareAndSet(true, false)[ CD ]
Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_31 $$ reported.compareAndSet(false, true)[ CD ]
Line_35 $$ String message = IdeBundle.message("low.disk.space.message", productName)-->Line_38 $$ Messages.showErrorDialog(message, "Fatal Configuration Problem")[ FD ]
Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_52 $$ restart(timeout)[ CD ]
Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_22 $$ final long fileUsableSpace = future.get()[ FD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_13 $$ return fileUsableSpace[ CD ]
Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_17 $$ if (!future.isDone() || future.isCancelled()) [ FD ]
Line_26 $$ if (!notificationsComponentIsLoaded()) -->Line_28 $$ JobScheduler.getScheduler().schedule(this, 1, TimeUnit.SECONDS)[ CD ]
Line_32 $$ SwingUtilities.invokeLater(new Runnable() -->Line_35 $$ String message = IdeBundle.message("low.disk.space.message", productName)[ CD ]
Line_8 $$ long fileUsableSpace = file.getUsableSpace()-->Line_36 $$ if (fileUsableSpace < 100 * 1024) [ FD ]
Line_11 $$ fileUsableSpace = file.getUsableSpace()-->Line_9 $$ while (fileUsableSpace == 0) [ FD ]
Line_17 $$ if (!future.isDone() || future.isCancelled()) -->Line_19 $$ return[ CD ]
Line_2 $$ public void run() -->Line_3 $$ if (!reported.get()) [ CD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_22 $$ final long fileUsableSpace = future.get()[ FD ]
Line_11 $$ fileUsableSpace = file.getUsableSpace()-->Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) [ FD ]
Line_9 $$ while (fileUsableSpace == 0) -->Line_10 $$ TimeoutUtil.sleep(5000)[ CD ]
Line_32 $$ SwingUtilities.invokeLater(new Runnable() -->Line_36 $$ if (fileUsableSpace < 100 * 1024) [ CD ]
Line_8 $$ long fileUsableSpace = file.getUsableSpace()-->Line_11 $$ fileUsableSpace = file.getUsableSpace()[ FD ]
Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_26 $$ if (!notificationsComponentIsLoaded()) [ CD ]
Line_11 $$ fileUsableSpace = file.getUsableSpace()-->Line_36 $$ if (fileUsableSpace < 100 * 1024) [ FD ]
Line_25 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_32 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_36 $$ if (fileUsableSpace < 100 * 1024) -->Line_39 $$ reported.compareAndSet(true, false)[ CD ]
Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_17 $$ if (!future.isDone() || future.isCancelled()) [ FD ]
Line_17 $$ if (!future.isDone() || future.isCancelled()) -->Line_18 $$ JobScheduler.getScheduler().schedule(this, 1, TimeUnit.SECONDS)[ CD ]
Line_4 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_6 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() [ FD ]
Line_26 $$ if (!notificationsComponentIsLoaded()) -->Line_29 $$ return[ CD ]
Line_8 $$ long fileUsableSpace = file.getUsableSpace()-->Line_9 $$ while (fileUsableSpace == 0) [ FD ]
Line_26 $$ if (!notificationsComponentIsLoaded()) -->Line_27 $$ ourFreeSpaceCalculation.set(future)[ CD ]
Line_3 $$ if (!reported.get()) -->Line_17 $$ if (!future.isDone() || future.isCancelled()) [ CD ]
Line_36 $$ if (fileUsableSpace < 100 * 1024) -->Line_38 $$ Messages.showErrorDialog(message, "Fatal Configuration Problem")[ CD ]
Line_34 $$ String productName = ApplicationNamesInfo.getInstance().getFullProductName()-->Line_35 $$ String message = IdeBundle.message("low.disk.space.message", productName)[ FD ]
Line_36 $$ if (fileUsableSpace < 100 * 1024) -->Line_37 $$ LOG.warn(message + " (" + fileUsableSpace + ")")[ CD ]
