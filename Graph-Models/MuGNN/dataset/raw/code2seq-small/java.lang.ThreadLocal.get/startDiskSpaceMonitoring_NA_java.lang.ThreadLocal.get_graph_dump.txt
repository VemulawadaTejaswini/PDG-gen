Line_18 $$ long fileUsableSpace = file.getUsableSpace()-->Line_19 $$ while (fileUsableSpace == 0) [ FD ]
Line_8 $$ final ThreadLocal<Future<Long>> ourFreeSpaceCalculation = new ThreadLocal<Future<Long>>()-->Line_34 $$ ourFreeSpaceCalculation.set(null)[ FD ]
Line_36 $$ if (!notificationsComponentIsLoaded()) -->Line_37 $$ ourFreeSpaceCalculation.set(future)[ CD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_27 $$ if (!future.isDone() || future.isCancelled()) [ FD ]
Line_52 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() -->Line_54 $$ reported.compareAndSet(true, false)[ CD ]
Line_18 $$ long fileUsableSpace = file.getUsableSpace()-->Line_21 $$ fileUsableSpace = file.getUsableSpace()[ FD ]
Line_70 $$ return ApplicationManager.getApplication().runReadAction(new Computable<NotificationsConfiguration>() -->Line_72 $$ return NotificationsConfiguration.getNotificationsConfiguration()[ CD ]
Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() [ FD ]
Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_41 $$ reported.compareAndSet(false, true)[ CD ]
Line_6 $$ final File file = new File(PathManager.getSystemPath())-->Line_21 $$ fileUsableSpace = file.getUsableSpace()[ FD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_23 $$ return fileUsableSpace[ CD ]
Line_52 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() -->Line_55 $$ restart(timeout)[ CD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_19 $$ while (fileUsableSpace == 0) [ CD ]
Line_7 $$ final AtomicBoolean reported = new AtomicBoolean()-->Line_41 $$ reported.compareAndSet(false, true)[ FD ]
Line_13 $$ if (!reported.get()) -->Line_15 $$ if (future == null) [ CD ]
Line_42 $$ SwingUtilities.invokeLater(new Runnable() -->Line_44 $$ String productName = ApplicationNamesInfo.getInstance().getFullProductName()[ CD ]
Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_15 $$ if (future == null) [ FD ]
Line_9 $$ JobScheduler.getScheduler().schedule(new Runnable() -->Line_77 $$ JobScheduler.getScheduler().schedule(this, timeout, TimeUnit.SECONDS)[ CD ]
Line_6 $$ final File file = new File(PathManager.getSystemPath())-->Line_18 $$ long fileUsableSpace = file.getUsableSpace()[ FD ]
Line_13 $$ if (!reported.get()) -->Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()[ CD ]
Line_36 $$ if (!notificationsComponentIsLoaded()) -->Line_39 $$ return[ CD ]
Line_42 $$ SwingUtilities.invokeLater(new Runnable() -->Line_46 $$ if (fileUsableSpace < 100 * 1024) [ CD ]
Line_3 $$ if (SystemProperties.getBooleanProperty("idea.no.system.path.space.monitoring", false)) -->Line_4 $$ return[ CD ]
Line_42 $$ SwingUtilities.invokeLater(new Runnable() -->Line_45 $$ String message = IdeBundle.message("low.disk.space.message", productName)[ CD ]
Line_8 $$ final ThreadLocal<Future<Long>> ourFreeSpaceCalculation = new ThreadLocal<Future<Long>>()-->Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()[ FD ]
Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_62 $$ restart(timeout)[ CD ]
Line_18 $$ long fileUsableSpace = file.getUsableSpace()-->Line_46 $$ if (fileUsableSpace < 100 * 1024) [ FD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_32 $$ final long fileUsableSpace = future.get()[ FD ]
Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_42 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_36 $$ if (!notificationsComponentIsLoaded()) -->Line_38 $$ JobScheduler.getScheduler().schedule(this, 1, TimeUnit.SECONDS)[ CD ]
Line_2 $$ private static void startDiskSpaceMonitoring() -->Line_7 $$ final AtomicBoolean reported = new AtomicBoolean()[ CD ]
Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) -->Line_36 $$ if (!notificationsComponentIsLoaded()) [ CD ]
Line_2 $$ private static void startDiskSpaceMonitoring() -->Line_8 $$ final ThreadLocal<Future<Long>> ourFreeSpaceCalculation = new ThreadLocal<Future<Long>>()[ CD ]
Line_6 $$ final File file = new File(PathManager.getSystemPath())-->Line_52 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() [ FD ]
Line_45 $$ String message = IdeBundle.message("low.disk.space.message", productName)-->Line_48 $$ Messages.showErrorDialog(message, "Fatal Configuration Problem")[ FD ]
Line_9 $$ JobScheduler.getScheduler().schedule(new Runnable() -->Line_70 $$ return ApplicationManager.getApplication().runReadAction(new Computable<NotificationsConfiguration>() [ CD ]
Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_27 $$ if (!future.isDone() || future.isCancelled()) [ FD ]
Line_21 $$ fileUsableSpace = file.getUsableSpace()-->Line_19 $$ while (fileUsableSpace == 0) [ FD ]
Line_27 $$ if (!future.isDone() || future.isCancelled()) -->Line_28 $$ JobScheduler.getScheduler().schedule(this, 1, TimeUnit.SECONDS)[ CD ]
Line_21 $$ fileUsableSpace = file.getUsableSpace()-->Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) [ FD ]
Line_19 $$ while (fileUsableSpace == 0) -->Line_21 $$ fileUsableSpace = file.getUsableSpace()[ CD ]
Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_32 $$ final long fileUsableSpace = future.get()[ FD ]
Line_15 $$ if (future == null) -->Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() [ CD ]
Line_7 $$ final AtomicBoolean reported = new AtomicBoolean()-->Line_54 $$ reported.compareAndSet(true, false)[ FD ]
Line_2 $$ private static void startDiskSpaceMonitoring() -->Line_3 $$ if (SystemProperties.getBooleanProperty("idea.no.system.path.space.monitoring", false)) [ CD ]
Line_46 $$ if (fileUsableSpace < 100 * 1024) -->Line_48 $$ Messages.showErrorDialog(message, "Fatal Configuration Problem")[ CD ]
Line_21 $$ fileUsableSpace = file.getUsableSpace()-->Line_46 $$ if (fileUsableSpace < 100 * 1024) [ FD ]
Line_7 $$ final AtomicBoolean reported = new AtomicBoolean()-->Line_49 $$ reported.compareAndSet(true, false)[ FD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_37 $$ ourFreeSpaceCalculation.set(future)[ FD ]
Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() -->Line_18 $$ long fileUsableSpace = file.getUsableSpace()[ CD ]
Line_46 $$ if (fileUsableSpace < 100 * 1024) -->Line_49 $$ reported.compareAndSet(true, false)[ CD ]
Line_46 $$ if (fileUsableSpace < 100 * 1024) -->Line_50 $$ restart(timeout)[ CD ]
Line_7 $$ final AtomicBoolean reported = new AtomicBoolean()-->Line_13 $$ if (!reported.get()) [ FD ]
Line_19 $$ while (fileUsableSpace == 0) -->Line_20 $$ TimeoutUtil.sleep(5000)[ CD ]
Line_2 $$ private static void startDiskSpaceMonitoring() -->Line_6 $$ final File file = new File(PathManager.getSystemPath())[ CD ]
Line_46 $$ if (fileUsableSpace < 100 * 1024) -->Line_52 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() [ CD ]
Line_9 $$ JobScheduler.getScheduler().schedule(new Runnable() -->Line_77 $$ JobScheduler.getScheduler().schedule(this, timeout, TimeUnit.SECONDS)[ FD ]
Line_8 $$ final ThreadLocal<Future<Long>> ourFreeSpaceCalculation = new ThreadLocal<Future<Long>>()-->Line_16 $$ ourFreeSpaceCalculation.set(future = ApplicationManager.getApplication().executeOnPooledThread(new Callable<Long>() [ FD ]
Line_8 $$ final ThreadLocal<Future<Long>> ourFreeSpaceCalculation = new ThreadLocal<Future<Long>>()-->Line_37 $$ ourFreeSpaceCalculation.set(future)[ FD ]
Line_27 $$ if (!future.isDone() || future.isCancelled()) -->Line_29 $$ return[ CD ]
Line_9 $$ JobScheduler.getScheduler().schedule(new Runnable() -->Line_13 $$ if (!reported.get()) [ CD ]
Line_44 $$ String productName = ApplicationNamesInfo.getInstance().getFullProductName()-->Line_45 $$ String message = IdeBundle.message("low.disk.space.message", productName)[ FD ]
Line_2 $$ private static void startDiskSpaceMonitoring() -->Line_9 $$ JobScheduler.getScheduler().schedule(new Runnable() [ CD ]
Line_46 $$ if (fileUsableSpace < 100 * 1024) -->Line_47 $$ LOG.warn(message + " (" + fileUsableSpace + ")")[ CD ]
Line_14 $$ Future<Long> future = ourFreeSpaceCalculation.get()-->Line_37 $$ ourFreeSpaceCalculation.set(future)[ FD ]
Line_45 $$ String message = IdeBundle.message("low.disk.space.message", productName)-->Line_52 $$ GROUP.createNotification(message, file.getPath(), NotificationType.ERROR, null).whenExpired(new Runnable() [ FD ]
Line_18 $$ long fileUsableSpace = file.getUsableSpace()-->Line_35 $$ if (fileUsableSpace < LOW_DISK_SPACE_THRESHOLD) [ FD ]
Line_13 $$ if (!reported.get()) -->Line_27 $$ if (!future.isDone() || future.isCancelled()) [ CD ]
