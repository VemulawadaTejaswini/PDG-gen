Line_19 $$ if (rs.next()) -->Line_20 $$ String type = rs.getString("type_")[ CD ]
Line_24 $$ long parentKaleoInstanceTokenId = rs.getLong("kaleoInstanceTokenId")-->Line_26 $$ return getKaleoInstanceTokenId(parentKaleoInstanceTokenId)[ FD ]
Line_2 $$ protected long getKaleoInstanceTokenId(long kaleoInstanceTokenId) throws Exception -->Line_17 $$ ps.setLong(1, kaleoInstanceTokenId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append("KaleoInstanceToken where KaleoInstanceTokenId = ?)")[ FD ]
Line_4 $$ ResultSet rs = null-->Line_20 $$ String type = rs.getString("type_")[ FD ]
Line_4 $$ ResultSet rs = null-->Line_24 $$ long parentKaleoInstanceTokenId = rs.getLong("kaleoInstanceTokenId")[ FD ]
Line_18 $$ rs = ps.executeQuery()-->Line_24 $$ long parentKaleoInstanceTokenId = rs.getLong("kaleoInstanceTokenId")[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_17 $$ ps.setLong(1, kaleoInstanceTokenId)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_8 $$ sb.append("KaleoInstanceToken.kaleoInstanceTokenId ")[ FD ]
Line_2 $$ protected long getKaleoInstanceTokenId(long kaleoInstanceTokenId) throws Exception -->Line_25 $$ _kaleoInstanceTokenIds.add(kaleoInstanceTokenId)[ FD ]
Line_16 $$ ps = connection.prepareStatement(sql)-->Line_31 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_9 $$ sb.append("from KaleoNode inner join KaleoInstanceToken on ")[ FD ]
Line_15 $$ String sql = sb.toString()-->Line_16 $$ ps = connection.prepareStatement(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_13 $$ sb.append("(select parentKaleoInstanceTokenId from ")[ FD ]
Line_18 $$ rs = ps.executeQuery()-->Line_31 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_19 $$ if (rs.next()) -->Line_21 $$ if (!type.equals(NodeType.TASK.toString())) [ CD ]
Line_19 $$ if (rs.next()) -->Line_28 $$ return kaleoInstanceTokenId[ CD ]
Line_21 $$ if (!type.equals(NodeType.TASK.toString())) -->Line_22 $$ return kaleoInstanceTokenId[ CD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_7 $$ sb.append("select KaleoNode.type_, ")[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_31 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_2 $$ protected long getKaleoInstanceTokenId(long kaleoInstanceTokenId) throws Exception -->Line_3 $$ PreparedStatement ps = null[ CD ]
Line_19 $$ if (rs.next()) -->Line_24 $$ long parentKaleoInstanceTokenId = rs.getLong("kaleoInstanceTokenId")[ CD ]
Line_4 $$ ResultSet rs = null-->Line_31 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_12 $$ sb.append("where KaleoInstanceToken.kaleoInstanceTokenId = ")[ FD ]
Line_16 $$ ps = connection.prepareStatement(sql)-->Line_17 $$ ps.setLong(1, kaleoInstanceTokenId)[ FD ]
Line_2 $$ protected long getKaleoInstanceTokenId(long kaleoInstanceTokenId) throws Exception -->Line_4 $$ ResultSet rs = null[ CD ]
Line_18 $$ rs = ps.executeQuery()-->Line_20 $$ String type = rs.getString("type_")[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_18 $$ rs = ps.executeQuery()[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_16 $$ ps = connection.prepareStatement(sql)[ FD ]
Line_16 $$ ps = connection.prepareStatement(sql)-->Line_18 $$ rs = ps.executeQuery()[ FD ]
Line_4 $$ ResultSet rs = null-->Line_19 $$ if (rs.next()) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_11 $$ sb.append("KaleoInstanceToken.currentKaleoNodeId) ")[ FD ]
Line_19 $$ if (rs.next()) -->Line_25 $$ _kaleoInstanceTokenIds.add(kaleoInstanceTokenId)[ CD ]
Line_19 $$ if (rs.next()) -->Line_26 $$ return getKaleoInstanceTokenId(parentKaleoInstanceTokenId)[ CD ]
Line_20 $$ String type = rs.getString("type_")-->Line_21 $$ if (!type.equals(NodeType.TASK.toString())) [ FD ]
Line_18 $$ rs = ps.executeQuery()-->Line_19 $$ if (rs.next()) [ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_10 $$ sb.append("(KaleoNode.kaleoNodeId = ")[ FD ]
Line_4 $$ ResultSet rs = null-->Line_18 $$ rs = ps.executeQuery()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler()-->Line_15 $$ String sql = sb.toString()[ FD ]
