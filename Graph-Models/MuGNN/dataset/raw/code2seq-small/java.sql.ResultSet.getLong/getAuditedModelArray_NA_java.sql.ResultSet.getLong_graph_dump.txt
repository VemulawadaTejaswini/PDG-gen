Line_11 $$ long userId = 0-->Line_17 $$ userId = rs.getLong("userId")[ FD ]
Line_9 $$ if (rs.next()) -->Line_12 $$ String userName = null[ CD ]
Line_8 $$ rs = ps.executeQuery()-->Line_17 $$ userId = rs.getLong("userId")[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_29 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_6 $$ ps = con.prepareStatement("select companyId, userId, createDate, modifiedDate from " + tableName + " where " + pkColumnName + " = ?")-->Line_8 $$ rs = ps.executeQuery()[ FD ]
Line_4 $$ ResultSet rs = null-->Line_17 $$ userId = rs.getLong("userId")[ FD ]
Line_4 $$ ResultSet rs = null-->Line_10 $$ long companyId = rs.getLong("companyId")[ FD ]
Line_8 $$ rs = ps.executeQuery()-->Line_29 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_24 $$ if (_log.isDebugEnabled()) -->Line_25 $$ _log.debug("Unable to find " + tableName + " " + primKey)[ CD ]
Line_12 $$ String userName = null-->Line_15 $$ userName = "Anonymous"[ FD ]
Line_13 $$ if (allowAnonymousUser) -->Line_17 $$ userId = rs.getLong("userId")[ CD ]
Line_4 $$ ResultSet rs = null-->Line_20 $$ Timestamp createDate = rs.getTimestamp("createDate")[ FD ]
Line_13 $$ if (allowAnonymousUser) -->Line_18 $$ userName = getUserName(con, userId)[ CD ]
Line_11 $$ long userId = 0-->Line_18 $$ userName = getUserName(con, userId)[ FD ]
Line_4 $$ ResultSet rs = null-->Line_21 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ FD ]
Line_9 $$ if (rs.next()) -->Line_22 $$ return new Object[] [ CD ]
Line_8 $$ rs = ps.executeQuery()-->Line_9 $$ if (rs.next()) [ FD ]
Line_13 $$ if (allowAnonymousUser) -->Line_15 $$ userName = "Anonymous"[ CD ]
Line_3 $$ PreparedStatement ps = null-->Line_6 $$ ps = con.prepareStatement("select companyId, userId, createDate, modifiedDate from " + tableName + " where " + pkColumnName + " = ?")[ FD ]
Line_6 $$ ps = con.prepareStatement("select companyId, userId, createDate, modifiedDate from " + tableName + " where " + pkColumnName + " = ?")-->Line_7 $$ ps.setLong(1, primKey)[ FD ]
Line_9 $$ if (rs.next()) -->Line_21 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ CD ]
Line_13 $$ if (allowAnonymousUser) -->Line_14 $$ userId = previousUserId[ CD ]
Line_3 $$ PreparedStatement ps = null-->Line_8 $$ rs = ps.executeQuery()[ FD ]
Line_8 $$ rs = ps.executeQuery()-->Line_10 $$ long companyId = rs.getLong("companyId")[ FD ]
Line_3 $$ PreparedStatement ps = null-->Line_7 $$ ps.setLong(1, primKey)[ FD ]
Line_4 $$ ResultSet rs = null-->Line_8 $$ rs = ps.executeQuery()[ FD ]
Line_9 $$ if (rs.next()) -->Line_20 $$ Timestamp createDate = rs.getTimestamp("createDate")[ CD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_6 $$ ps = con.prepareStatement("select companyId, userId, createDate, modifiedDate from " + tableName + " where " + pkColumnName + " = ?")[ FD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_7 $$ ps.setLong(1, primKey)[ FD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_3 $$ PreparedStatement ps = null[ CD ]
Line_9 $$ if (rs.next()) -->Line_13 $$ if (allowAnonymousUser) [ CD ]
Line_4 $$ ResultSet rs = null-->Line_29 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_8 $$ rs = ps.executeQuery()-->Line_20 $$ Timestamp createDate = rs.getTimestamp("createDate")[ FD ]
Line_6 $$ ps = con.prepareStatement("select companyId, userId, createDate, modifiedDate from " + tableName + " where " + pkColumnName + " = ?")-->Line_29 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_12 $$ String userName = null-->Line_18 $$ userName = getUserName(con, userId)[ FD ]
Line_14 $$ userId = previousUserId-->Line_18 $$ userName = getUserName(con, userId)[ FD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_18 $$ userName = getUserName(con, userId)[ FD ]
Line_14 $$ userId = previousUserId-->Line_17 $$ userId = rs.getLong("userId")[ FD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_4 $$ ResultSet rs = null[ CD ]
Line_9 $$ if (rs.next()) -->Line_11 $$ long userId = 0[ CD ]
Line_2 $$ protected Object[] getAuditedModelArray(Connection con, String tableName, String pkColumnName, long primKey, boolean allowAnonymousUser, long previousUserId) throws Exception -->Line_14 $$ userId = previousUserId[ FD ]
Line_17 $$ userId = rs.getLong("userId")-->Line_18 $$ userName = getUserName(con, userId)[ FD ]
Line_4 $$ ResultSet rs = null-->Line_9 $$ if (rs.next()) [ FD ]
Line_8 $$ rs = ps.executeQuery()-->Line_21 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ FD ]
Line_11 $$ long userId = 0-->Line_14 $$ userId = previousUserId[ FD ]
Line_9 $$ if (rs.next()) -->Line_10 $$ long companyId = rs.getLong("companyId")[ CD ]
Line_15 $$ userName = "Anonymous"-->Line_18 $$ userName = getUserName(con, userId)[ FD ]
