Line_8 $$ String minColumn = minColumn(temporalColumnId)-->Line_21 $$ long rangeStart = resultSet.getLong(minColumn)[ FD ]
Line_11 $$ try (Connection connection = dbi.open().getConnection()) -->Line_15 $$ try (PreparedStatement statement = connection.prepareStatement(sql)) [ FD ]
Line_12 $$ for (List<ShardMetadata> shards : partition(allShards, 1000)) -->Line_13 $$ String args = Joiner.on(",").join(nCopies(shards.size(), "?"))[ FD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_32 $$ if (resultSet.wasNull()) [ FD ]
Line_31 $$ long shardId = resultSet.getLong("shard_id")-->Line_36 $$ ShardMetadata shard = shardsById.get(shardId)[ FD ]
Line_36 $$ ShardMetadata shard = shardsById.get(shardId)-->Line_38 $$ temporalShards.add(shard.withTimeRange(rangeStart, rangeEnd))[ FD ]
Line_20 $$ while (resultSet.next()) -->Line_22 $$ if (resultSet.wasNull()) [ CD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_21 $$ long rangeStart = resultSet.getLong(minColumn)[ FD ]
Line_16 $$ for (int i = 0; i < shards.size(); i++) -->Line_17 $$ statement.setLong(i + 1, shards.get(i).getShardId())[ CD ]
Line_10 $$ ImmutableSet.Builder<ShardMetadata> temporalShards = ImmutableSet.builder()-->Line_38 $$ temporalShards.add(shard.withTimeRange(rangeStart, rangeEnd))[ FD ]
Line_26 $$ long rangeEnd = resultSet.getLong(maxColumn)-->Line_38 $$ temporalShards.add(shard.withTimeRange(rangeStart, rangeEnd))[ FD ]
Line_10 $$ ImmutableSet.Builder<ShardMetadata> temporalShards = ImmutableSet.builder()-->Line_47 $$ return temporalShards.build()[ FD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_31 $$ long shardId = resultSet.getLong("shard_id")[ FD ]
Line_12 $$ for (List<ShardMetadata> shards : partition(allShards, 1000)) -->Line_17 $$ statement.setLong(i + 1, shards.get(i).getShardId())[ FD ]
Line_21 $$ long rangeStart = resultSet.getLong(minColumn)-->Line_38 $$ temporalShards.add(shard.withTimeRange(rangeStart, rangeEnd))[ FD ]
Line_20 $$ while (resultSet.next()) -->Line_21 $$ long rangeStart = resultSet.getLong(minColumn)[ CD ]
Line_20 $$ while (resultSet.next()) -->Line_32 $$ if (resultSet.wasNull()) [ CD ]
Line_20 $$ while (resultSet.next()) -->Line_31 $$ long shardId = resultSet.getLong("shard_id")[ CD ]
Line_14 $$ String sql = format("SELECT shard_id, %s, %s FROM %s WHERE shard_id IN (%s)", minColumn, maxColumn, shardIndexTable(tableId), args)-->Line_15 $$ try (PreparedStatement statement = connection.prepareStatement(sql)) [ FD ]
Line_8 $$ String minColumn = minColumn(temporalColumnId)-->Line_14 $$ String sql = format("SELECT shard_id, %s, %s FROM %s WHERE shard_id IN (%s)", minColumn, maxColumn, shardIndexTable(tableId), args)[ FD ]
Line_13 $$ String args = Joiner.on(",").join(nCopies(shards.size(), "?"))-->Line_14 $$ String sql = format("SELECT shard_id, %s, %s FROM %s WHERE shard_id IN (%s)", minColumn, maxColumn, shardIndexTable(tableId), args)[ FD ]
Line_20 $$ while (resultSet.next()) -->Line_36 $$ ShardMetadata shard = shardsById.get(shardId)[ CD ]
Line_36 $$ ShardMetadata shard = shardsById.get(shardId)-->Line_37 $$ if (shard != null) [ FD ]
Line_20 $$ while (resultSet.next()) -->Line_27 $$ if (resultSet.wasNull()) [ CD ]
Line_12 $$ for (List<ShardMetadata> shards : partition(allShards, 1000)) -->Line_16 $$ for (int i = 0; i < shards.size(); i++) [ FD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_20 $$ while (resultSet.next()) [ FD ]
Line_9 $$ String maxColumn = maxColumn(temporalColumnId)-->Line_26 $$ long rangeEnd = resultSet.getLong(maxColumn)[ FD ]
Line_15 $$ try (PreparedStatement statement = connection.prepareStatement(sql)) -->Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) [ FD ]
Line_37 $$ if (shard != null) -->Line_38 $$ temporalShards.add(shard.withTimeRange(rangeStart, rangeEnd))[ CD ]
Line_9 $$ String maxColumn = maxColumn(temporalColumnId)-->Line_14 $$ String sql = format("SELECT shard_id, %s, %s FROM %s WHERE shard_id IN (%s)", minColumn, maxColumn, shardIndexTable(tableId), args)[ FD ]
Line_7 $$ Map<Long, ShardMetadata> shardsById = uniqueIndex(allShards, ShardMetadata::<>getShardId)-->Line_36 $$ ShardMetadata shard = shardsById.get(shardId)[ FD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_26 $$ long rangeEnd = resultSet.getLong(maxColumn)[ FD ]
Line_20 $$ while (resultSet.next()) -->Line_37 $$ if (shard != null) [ CD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_22 $$ if (resultSet.wasNull()) [ FD ]
Line_16 $$ for (int i = 0; i < shards.size(); i++) -->Line_17 $$ statement.setLong(i + 1, shards.get(i).getShardId())[ FD ]
Line_20 $$ while (resultSet.next()) -->Line_26 $$ long rangeEnd = resultSet.getLong(maxColumn)[ CD ]
Line_19 $$ try (ResultSet resultSet = statement.executeQuery()) -->Line_27 $$ if (resultSet.wasNull()) [ FD ]
Line_15 $$ try (PreparedStatement statement = connection.prepareStatement(sql)) -->Line_17 $$ statement.setLong(i + 1, shards.get(i).getShardId())[ FD ]
