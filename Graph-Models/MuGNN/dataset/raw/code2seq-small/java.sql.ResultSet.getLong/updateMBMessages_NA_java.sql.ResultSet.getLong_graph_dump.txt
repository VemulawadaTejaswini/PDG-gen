Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_17 $$ String sql = sb.toString()[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_3 $$ Connection con = null[ CD ]
Line_17 $$ String sql = sb.toString()-->Line_18 $$ ps = con.prepareStatement(sql)[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_23 $$ Timestamp createDate = rs.getTimestamp("createDate")[ FD ]
Line_5 $$ ResultSet rs = null-->Line_20 $$ while (rs.next()) [ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_13 $$ sb.append(companyId)[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_4 $$ PreparedStatement ps = null-->Line_18 $$ ps = con.prepareStatement(sql)[ FD ]
Line_31 $$ String frequency = "instant"-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_4 $$ PreparedStatement ps = null-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_23 $$ Timestamp createDate = rs.getTimestamp("createDate")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_5 $$ ResultSet rs = null[ CD ]
Line_18 $$ ps = con.prepareStatement(sql)-->Line_19 $$ rs = ps.executeQuery()[ FD ]
Line_5 $$ ResultSet rs = null-->Line_26 $$ long classPK = rs.getLong("classPK")[ FD ]
Line_7 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_18 $$ ps = con.prepareStatement(sql)[ FD ]
Line_20 $$ while (rs.next()) -->Line_25 $$ long classNameId = rs.getLong("classNameId")[ CD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_9 $$ sb.append("select userId, MIN(userName) as userName, ")[ FD ]
Line_5 $$ ResultSet rs = null-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_27 $$ if (hasSubscription(companyId, userId, classNameId, classPK)) [ FD ]
Line_21 $$ long userId = rs.getLong("userId")-->Line_27 $$ if (hasSubscription(companyId, userId, classNameId, classPK)) [ FD ]
Line_20 $$ while (rs.next()) -->Line_26 $$ long classPK = rs.getLong("classPK")[ CD ]
Line_24 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_26 $$ long classPK = rs.getLong("classPK")-->Line_27 $$ if (hasSubscription(companyId, userId, classNameId, classPK)) [ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_10 $$ sb.append("classNameId, classPK, MIN(createDate) as createDate, ")[ FD ]
Line_5 $$ ResultSet rs = null-->Line_21 $$ long userId = rs.getLong("userId")[ FD ]
Line_25 $$ long classNameId = rs.getLong("classNameId")-->Line_27 $$ if (hasSubscription(companyId, userId, classNameId, classPK)) [ FD ]
Line_20 $$ while (rs.next()) -->Line_27 $$ if (hasSubscription(companyId, userId, classNameId, classPK)) [ CD ]
Line_3 $$ Connection con = null-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_24 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ FD ]
Line_7 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_3 $$ Connection con = null-->Line_18 $$ ps = con.prepareStatement(sql)[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_13 $$ sb.append(companyId)[ FD ]
Line_30 $$ long subscriptionId = increment()-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_21 $$ long userId = rs.getLong("userId")[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_12 $$ sb.append("where (companyId = ")[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_16 $$ sb.append("group by userId, classNameId, classPK")[ FD ]
Line_20 $$ while (rs.next()) -->Line_30 $$ long subscriptionId = increment()[ CD ]
Line_19 $$ rs = ps.executeQuery()-->Line_20 $$ while (rs.next()) [ FD ]
Line_20 $$ while (rs.next()) -->Line_23 $$ Timestamp createDate = rs.getTimestamp("createDate")[ CD ]
Line_5 $$ ResultSet rs = null-->Line_25 $$ long classNameId = rs.getLong("classNameId")[ FD ]
Line_3 $$ Connection con = null-->Line_7 $$ con = DataAccess.getUpgradeOptimizedConnection()[ FD ]
Line_20 $$ while (rs.next()) -->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ CD ]
Line_20 $$ while (rs.next()) -->Line_24 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ CD ]
Line_26 $$ long classPK = rs.getLong("classPK")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_2 $$ protected void updateMBMessages(long companyId) throws Exception -->Line_4 $$ PreparedStatement ps = null[ CD ]
Line_25 $$ long classNameId = rs.getLong("classNameId")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_25 $$ long classNameId = rs.getLong("classNameId")[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_22 $$ String userName = rs.getString("userName")[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_14 $$ sb.append(") and ")[ FD ]
Line_5 $$ ResultSet rs = null-->Line_23 $$ Timestamp createDate = rs.getTimestamp("createDate")[ FD ]
Line_19 $$ rs = ps.executeQuery()-->Line_26 $$ long classPK = rs.getLong("classPK")[ FD ]
Line_4 $$ PreparedStatement ps = null-->Line_19 $$ rs = ps.executeQuery()[ FD ]
Line_5 $$ ResultSet rs = null-->Line_22 $$ String userName = rs.getString("userName")[ FD ]
Line_5 $$ ResultSet rs = null-->Line_19 $$ rs = ps.executeQuery()[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_15 $$ sb.append("(classNameId != 0) and (parentMessageId != 0) ")[ FD ]
Line_20 $$ while (rs.next()) -->Line_21 $$ long userId = rs.getLong("userId")[ CD ]
Line_5 $$ ResultSet rs = null-->Line_24 $$ Timestamp modifiedDate = rs.getTimestamp("modifiedDate")[ FD ]
Line_20 $$ while (rs.next()) -->Line_31 $$ String frequency = "instant"[ CD ]
Line_22 $$ String userName = rs.getString("userName")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_18 $$ ps = con.prepareStatement(sql)-->Line_35 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_20 $$ while (rs.next()) -->Line_22 $$ String userName = rs.getString("userName")[ CD ]
Line_21 $$ long userId = rs.getLong("userId")-->Line_32 $$ addSubscription(subscriptionId, companyId, userId, userName, createDate, modifiedDate, classNameId, classPK, frequency)[ FD ]
Line_8 $$ StringBundler sb = new StringBundler(8)-->Line_11 $$ sb.append("MIN(modifiedDate) as modifiedDate from MBMessage ")[ FD ]
