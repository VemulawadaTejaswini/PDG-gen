Line_5 $$ ImmutableList.Builder<UUID> shardUuidList = ImmutableList.builder()-->Line_15 $$ shardUuidList.add(shardUuid)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_31 $$ String deleteFromShardIndex = "DELETE FROM " + shardIndexTable(tableId) + where[ CD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_26 $$ dao.insertDeletedShards(shardUuids)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_22 $$ if (shardIds.size() != shardUuids.size()) [ CD ]
Line_30 $$ String deleteFromShards = "DELETE FROM shards " + where-->Line_36 $$ for (String sql : asList(deleteFromShards, deleteFromShardIndex)) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_37 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(sql)) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_9 $$ bindUuids(statement, shardUuids)[ FD ]
Line_10 $$ try (ResultSet rs = statement.executeQuery()) -->Line_14 $$ for (Integer nodeId : intArrayFromBytes(rs.getBytes("node_ids"))) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_25 $$ ShardManagerDao dao = handle.attach(ShardManagerDao.class)[ CD ]
Line_13 $$ UUID shardUuid = uuidFromBytes(rs.getBytes("shard_uuid"))-->Line_15 $$ shardUuidList.add(shardUuid)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_31 $$ String deleteFromShardIndex = "DELETE FROM " + shardIndexTable(tableId) + where[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_6 $$ ImmutableList.Builder<Integer> nodeIdList = ImmutableList.builder()[ CD ]
Line_25 $$ ShardManagerDao dao = handle.attach(ShardManagerDao.class)-->Line_27 $$ dao.insertDeletedShardNodes(shardUuidList.build(), nodeIdList.build())[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_25 $$ ShardManagerDao dao = handle.attach(ShardManagerDao.class)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_7 $$ String selectShardNodes = format("SELECT shard_id, shard_uuid, node_ids FROM %s WHERE shard_uuid IN (%s) FOR UPDATE", shardIndexTable(tableId), args)[ FD ]
Line_10 $$ try (ResultSet rs = statement.executeQuery()) -->Line_13 $$ UUID shardUuid = uuidFromBytes(rs.getBytes("shard_uuid"))[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_26 $$ dao.insertDeletedShards(shardUuids)[ CD ]
Line_10 $$ try (ResultSet rs = statement.executeQuery()) -->Line_11 $$ while (rs.next()) [ FD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_33 $$ bindLongs(statement, shardIds)[ FD ]
Line_21 $$ Set<Long> shardIds = shardIdSet.build()-->Line_38 $$ bindLongs(statement, shardIds)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_22 $$ if (shardIds.size() != shardUuids.size()) [ FD ]
Line_7 $$ String selectShardNodes = format("SELECT shard_id, shard_uuid, node_ids FROM %s WHERE shard_uuid IN (%s) FOR UPDATE", shardIndexTable(tableId), args)-->Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) [ FD ]
Line_10 $$ try (ResultSet rs = statement.executeQuery()) -->Line_12 $$ shardIdSet.add(rs.getLong("shard_id"))[ FD ]
Line_4 $$ ImmutableSet.Builder<Long> shardIdSet = ImmutableSet.builder()-->Line_12 $$ shardIdSet.add(rs.getLong("shard_id"))[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_3 $$ String args = Joiner.on(",").join(nCopies(shardUuids.size(), "?"))[ CD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_34 $$ statement.executeUpdate()[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_27 $$ dao.insertDeletedShardNodes(shardUuidList.build(), nodeIdList.build())[ CD ]
Line_29 $$ String deleteFromShardNodes = "DELETE FROM shard_nodes " + where-->Line_32 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(deleteFromShardNodes)) [ FD ]
Line_11 $$ while (rs.next()) -->Line_12 $$ shardIdSet.add(rs.getLong("shard_id"))[ CD ]
Line_25 $$ ShardManagerDao dao = handle.attach(ShardManagerDao.class)-->Line_26 $$ dao.insertDeletedShards(shardUuids)[ FD ]
Line_21 $$ Set<Long> shardIds = shardIdSet.build()-->Line_33 $$ bindLongs(statement, shardIds)[ FD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_38 $$ bindLongs(statement, shardIds)[ FD ]
Line_6 $$ ImmutableList.Builder<Integer> nodeIdList = ImmutableList.builder()-->Line_27 $$ dao.insertDeletedShardNodes(shardUuidList.build(), nodeIdList.build())[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_32 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(deleteFromShardNodes)) [ FD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_39 $$ if (statement.executeUpdate() != shardIds.size()) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_28 $$ String where = " WHERE shard_id IN (" + args + ")"[ CD ]
Line_4 $$ ImmutableSet.Builder<Long> shardIdSet = ImmutableSet.builder()-->Line_21 $$ Set<Long> shardIds = shardIdSet.build()[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_3 $$ String args = Joiner.on(",").join(nCopies(shardUuids.size(), "?"))[ FD ]
Line_14 $$ for (Integer nodeId : intArrayFromBytes(rs.getBytes("node_ids"))) -->Line_16 $$ nodeIdList.add(nodeId)[ FD ]
Line_21 $$ Set<Long> shardIds = shardIdSet.build()-->Line_39 $$ if (statement.executeUpdate() != shardIds.size()) [ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_7 $$ String selectShardNodes = format("SELECT shard_id, shard_uuid, node_ids FROM %s WHERE shard_uuid IN (%s) FOR UPDATE", shardIndexTable(tableId), args)[ CD ]
Line_21 $$ Set<Long> shardIds = shardIdSet.build()-->Line_22 $$ if (shardIds.size() != shardUuids.size()) [ FD ]
Line_31 $$ String deleteFromShardIndex = "DELETE FROM " + shardIndexTable(tableId) + where-->Line_36 $$ for (String sql : asList(deleteFromShards, deleteFromShardIndex)) [ FD ]
Line_6 $$ ImmutableList.Builder<Integer> nodeIdList = ImmutableList.builder()-->Line_16 $$ nodeIdList.add(nodeId)[ FD ]
Line_36 $$ for (String sql : asList(deleteFromShards, deleteFromShardIndex)) -->Line_37 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(sql)) [ FD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_10 $$ try (ResultSet rs = statement.executeQuery()) [ FD ]
Line_8 $$ try (PreparedStatement statement = handle.getConnection().prepareStatement(selectShardNodes)) -->Line_9 $$ bindUuids(statement, shardUuids)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_5 $$ ImmutableList.Builder<UUID> shardUuidList = ImmutableList.builder()[ CD ]
Line_11 $$ while (rs.next()) -->Line_13 $$ UUID shardUuid = uuidFromBytes(rs.getBytes("shard_uuid"))[ CD ]
Line_5 $$ ImmutableList.Builder<UUID> shardUuidList = ImmutableList.builder()-->Line_27 $$ dao.insertDeletedShardNodes(shardUuidList.build(), nodeIdList.build())[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_21 $$ Set<Long> shardIds = shardIdSet.build()[ CD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_30 $$ String deleteFromShards = "DELETE FROM shards " + where[ CD ]
Line_3 $$ String args = Joiner.on(",").join(nCopies(shardUuids.size(), "?"))-->Line_7 $$ String selectShardNodes = format("SELECT shard_id, shard_uuid, node_ids FROM %s WHERE shard_uuid IN (%s) FOR UPDATE", shardIndexTable(tableId), args)[ FD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_4 $$ ImmutableSet.Builder<Long> shardIdSet = ImmutableSet.builder()[ CD ]
Line_2 $$ private static void deleteShardsAndIndex(long tableId, Set<UUID> shardUuids, Handle handle) throws SQLException -->Line_29 $$ String deleteFromShardNodes = "DELETE FROM shard_nodes " + where[ CD ]
