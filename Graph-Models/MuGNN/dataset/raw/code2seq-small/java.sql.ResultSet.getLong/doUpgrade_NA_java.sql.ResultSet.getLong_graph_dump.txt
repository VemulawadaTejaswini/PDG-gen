Line_6 $$ ResultSet rs = null-->Line_10 $$ rs = ps.executeQuery()[ FD ]
Line_19 $$ if (underlineCount == _UNDERLINE_COUNT) -->Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)[ CD ]
Line_6 $$ ResultSet rs = null-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_11 $$ while (rs.next()) -->Line_14 $$ String newTypeSettings = typeSettings[ CD ]
Line_15 $$ Matcher matcher = _pattern.matcher(typeSettings)-->Line_20 $$ String newNestedColumnIds = "_" + matcher.group(1) + "_" + matcher.group(2)[ FD ]
Line_8 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_9 $$ ps = con.prepareStatement(_GET_LAYOUT)[ FD ]
Line_15 $$ Matcher matcher = _pattern.matcher(typeSettings)-->Line_16 $$ while (matcher.find()) [ FD ]
Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)-->Line_25 $$ updateLayout(plid, newTypeSettings)[ FD ]
Line_10 $$ rs = ps.executeQuery()-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_16 $$ while (matcher.find()) -->Line_18 $$ int underlineCount = StringUtil.count(nestedColumnIds, StringPool.UNDERLINE)[ CD ]
Line_14 $$ String newTypeSettings = typeSettings-->Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)[ FD ]
Line_17 $$ String nestedColumnIds = matcher.group()-->Line_18 $$ int underlineCount = StringUtil.count(nestedColumnIds, StringPool.UNDERLINE)[ FD ]
Line_6 $$ ResultSet rs = null-->Line_11 $$ while (rs.next()) [ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_10 $$ rs = ps.executeQuery()[ FD ]
Line_11 $$ while (rs.next()) -->Line_16 $$ while (matcher.find()) [ CD ]
Line_14 $$ String newTypeSettings = typeSettings-->Line_25 $$ updateLayout(plid, newTypeSettings)[ FD ]
Line_11 $$ while (rs.next()) -->Line_13 $$ String typeSettings = rs.getString("typeSettings")[ CD ]
Line_18 $$ int underlineCount = StringUtil.count(nestedColumnIds, StringPool.UNDERLINE)-->Line_19 $$ if (underlineCount == _UNDERLINE_COUNT) [ FD ]
Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)-->Line_24 $$ if (!newTypeSettings.equals(typeSettings)) [ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_10 $$ rs = ps.executeQuery()-->Line_12 $$ long plid = rs.getLong("plid")[ FD ]
Line_15 $$ Matcher matcher = _pattern.matcher(typeSettings)-->Line_17 $$ String nestedColumnIds = matcher.group()[ FD ]
Line_6 $$ ResultSet rs = null-->Line_12 $$ long plid = rs.getLong("plid")[ FD ]
Line_11 $$ while (rs.next()) -->Line_24 $$ if (!newTypeSettings.equals(typeSettings)) [ CD ]
Line_9 $$ ps = con.prepareStatement(_GET_LAYOUT)-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_8 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_14 $$ String newTypeSettings = typeSettings-->Line_24 $$ if (!newTypeSettings.equals(typeSettings)) [ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_9 $$ ps = con.prepareStatement(_GET_LAYOUT)[ FD ]
Line_4 $$ Connection con = null-->Line_29 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_16 $$ while (matcher.find()) -->Line_17 $$ String nestedColumnIds = matcher.group()[ CD ]
Line_4 $$ Connection con = null-->Line_8 $$ con = DataAccess.getUpgradeOptimizedConnection()[ FD ]
Line_11 $$ while (rs.next()) -->Line_15 $$ Matcher matcher = _pattern.matcher(typeSettings)[ CD ]
Line_16 $$ while (matcher.find()) -->Line_19 $$ if (underlineCount == _UNDERLINE_COUNT) [ CD ]
Line_20 $$ String newNestedColumnIds = "_" + matcher.group(1) + "_" + matcher.group(2)-->Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)[ FD ]
Line_9 $$ ps = con.prepareStatement(_GET_LAYOUT)-->Line_10 $$ rs = ps.executeQuery()[ FD ]
Line_19 $$ if (underlineCount == _UNDERLINE_COUNT) -->Line_20 $$ String newNestedColumnIds = "_" + matcher.group(1) + "_" + matcher.group(2)[ CD ]
Line_13 $$ String typeSettings = rs.getString("typeSettings")-->Line_24 $$ if (!newTypeSettings.equals(typeSettings)) [ FD ]
Line_24 $$ if (!newTypeSettings.equals(typeSettings)) -->Line_25 $$ updateLayout(plid, newTypeSettings)[ CD ]
Line_12 $$ long plid = rs.getLong("plid")-->Line_25 $$ updateLayout(plid, newTypeSettings)[ FD ]
Line_10 $$ rs = ps.executeQuery()-->Line_13 $$ String typeSettings = rs.getString("typeSettings")[ FD ]
Line_17 $$ String nestedColumnIds = matcher.group()-->Line_21 $$ newTypeSettings = StringUtil.replace(newTypeSettings, nestedColumnIds, newNestedColumnIds)[ FD ]
Line_10 $$ rs = ps.executeQuery()-->Line_11 $$ while (rs.next()) [ FD ]
Line_13 $$ String typeSettings = rs.getString("typeSettings")-->Line_15 $$ Matcher matcher = _pattern.matcher(typeSettings)[ FD ]
Line_4 $$ Connection con = null-->Line_9 $$ ps = con.prepareStatement(_GET_LAYOUT)[ FD ]
Line_6 $$ ResultSet rs = null-->Line_13 $$ String typeSettings = rs.getString("typeSettings")[ FD ]
Line_11 $$ while (rs.next()) -->Line_12 $$ long plid = rs.getLong("plid")[ CD ]
