Line_18 $$ split = new DBInputSplit(i * chunkSize, count)-->Line_20 $$ split = new DBInputSplit(i * chunkSize, (i * chunkSize) + chunkSize)[ FD ]
Line_18 $$ split = new DBInputSplit(i * chunkSize, count)-->Line_21 $$ splits.add(split)[ FD ]
Line_7 $$ results = statement.executeQuery(getCountQuery())-->Line_8 $$ results.next()[ FD ]
Line_4 $$ Statement statement = null-->Line_7 $$ results = statement.executeQuery(getCountQuery())[ FD ]
Line_3 $$ ResultSet results = null-->Line_30 $$ results.close()[ FD ]
Line_6 $$ statement = connection.createStatement()-->Line_7 $$ results = statement.executeQuery(getCountQuery())[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_10 $$ int chunks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)[ FD ]
Line_10 $$ int chunks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)-->Line_15 $$ for (int i = 0; i < chunks; i++) [ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_3 $$ ResultSet results = null[ CD ]
Line_15 $$ for (int i = 0; i < chunks; i++) -->Line_16 $$ DBInputSplit split[ CD ]
Line_35 $$ if (statement != null) -->Line_36 $$ statement.close()[ CD ]
Line_7 $$ results = statement.executeQuery(getCountQuery())-->Line_9 $$ long count = results.getLong(1)[ FD ]
Line_3 $$ ResultSet results = null-->Line_8 $$ results.next()[ FD ]
Line_4 $$ Statement statement = null-->Line_35 $$ if (statement != null) [ FD ]
Line_3 $$ ResultSet results = null-->Line_9 $$ long count = results.getLong(1)[ FD ]
Line_6 $$ statement = connection.createStatement()-->Line_36 $$ statement.close()[ FD ]
Line_17 $$ if ((i + 1) == chunks)-->Line_18 $$ split = new DBInputSplit(i * chunkSize, count)[ CD ]
Line_3 $$ ResultSet results = null-->Line_12 $$ results.close()[ FD ]
Line_16 $$ DBInputSplit split-->Line_18 $$ split = new DBInputSplit(i * chunkSize, count)[ FD ]
Line_15 $$ for (int i = 0; i < chunks; i++) -->Line_17 $$ if ((i + 1) == chunks)[ CD ]
Line_3 $$ ResultSet results = null-->Line_7 $$ results = statement.executeQuery(getCountQuery())[ FD ]
Line_6 $$ statement = connection.createStatement()-->Line_13 $$ statement.close()[ FD ]
Line_7 $$ results = statement.executeQuery(getCountQuery())-->Line_12 $$ results.close()[ FD ]
Line_29 $$ if (results != null) -->Line_30 $$ results.close()[ CD ]
Line_16 $$ DBInputSplit split-->Line_20 $$ split = new DBInputSplit(i * chunkSize, (i * chunkSize) + chunkSize)[ FD ]
Line_15 $$ for (int i = 0; i < chunks; i++) -->Line_21 $$ splits.add(split)[ CD ]
Line_4 $$ Statement statement = null-->Line_36 $$ statement.close()[ FD ]
Line_4 $$ Statement statement = null-->Line_13 $$ statement.close()[ FD ]
Line_10 $$ int chunks = job.getConfiguration().getInt(MRJobConfig.NUM_MAPS, 1)-->Line_17 $$ if ((i + 1) == chunks)[ FD ]
Line_17 $$ if ((i + 1) == chunks)-->Line_20 $$ split = new DBInputSplit(i * chunkSize, (i * chunkSize) + chunkSize)[ CD ]
Line_4 $$ Statement statement = null-->Line_6 $$ statement = connection.createStatement()[ FD ]
Line_2 $$ public List<InputSplit> getSplits(JobContext job) throws IOException -->Line_4 $$ Statement statement = null[ CD ]
Line_6 $$ statement = connection.createStatement()-->Line_35 $$ if (statement != null) [ FD ]
Line_7 $$ results = statement.executeQuery(getCountQuery())-->Line_29 $$ if (results != null) [ FD ]
Line_3 $$ ResultSet results = null-->Line_29 $$ if (results != null) [ FD ]
Line_16 $$ DBInputSplit split-->Line_21 $$ splits.add(split)[ FD ]
Line_7 $$ results = statement.executeQuery(getCountQuery())-->Line_30 $$ results.close()[ FD ]
Line_20 $$ split = new DBInputSplit(i * chunkSize, (i * chunkSize) + chunkSize)-->Line_21 $$ splits.add(split)[ FD ]
Line_14 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_21 $$ splits.add(split)[ FD ]
