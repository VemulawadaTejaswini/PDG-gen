Line_2 $$ protected void verifyRecurrence() throws Exception -->Line_4 $$ jsonSerializer.registerDefaultSerializers()[ CD ]
Line_6 $$ ResultSet rs = null-->Line_10 $$ while (rs.next()) [ FD ]
Line_10 $$ while (rs.next()) -->Line_12 $$ String recurrence = rs.getString("recurrence")[ CD ]
Line_10 $$ while (rs.next()) -->Line_18 $$ updateEvent(eventId, newRecurrence)[ CD ]
Line_3 $$ JSONSerializer jsonSerializer = new JSONSerializer()-->Line_4 $$ jsonSerializer.registerDefaultSerializers()[ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_8 $$ ps = connection.prepareStatement("select eventId, recurrence from CalEvent where (CAST_TEXT(" + "recurrence) != '') and recurrence not like " + "'%serializable%'")[ FD ]
Line_9 $$ rs = ps.executeQuery()-->Line_11 $$ long eventId = rs.getLong("eventId")[ FD ]
Line_10 $$ while (rs.next()) -->Line_14 $$ if (Validator.isNotNull(recurrence)) [ CD ]
Line_6 $$ ResultSet rs = null-->Line_12 $$ String recurrence = rs.getString("recurrence")[ FD ]
Line_14 $$ if (Validator.isNotNull(recurrence)) -->Line_15 $$ recurrenceObj = (TZSRecurrence) jsonSerializer.fromJSON(recurrence)[ CD ]
Line_6 $$ ResultSet rs = null-->Line_11 $$ long eventId = rs.getLong("eventId")[ FD ]
Line_12 $$ String recurrence = rs.getString("recurrence")-->Line_14 $$ if (Validator.isNotNull(recurrence)) [ FD ]
Line_8 $$ ps = connection.prepareStatement("select eventId, recurrence from CalEvent where (CAST_TEXT(" + "recurrence) != '') and recurrence not like " + "'%serializable%'")-->Line_9 $$ rs = ps.executeQuery()[ FD ]
Line_10 $$ while (rs.next()) -->Line_17 $$ String newRecurrence = JSONFactoryUtil.serialize(recurrenceObj)[ CD ]
Line_11 $$ long eventId = rs.getLong("eventId")-->Line_18 $$ updateEvent(eventId, newRecurrence)[ FD ]
Line_10 $$ while (rs.next()) -->Line_13 $$ TZSRecurrence recurrenceObj = null[ CD ]
Line_2 $$ protected void verifyRecurrence() throws Exception -->Line_5 $$ PreparedStatement ps = null[ CD ]
Line_6 $$ ResultSet rs = null-->Line_21 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_21 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_13 $$ TZSRecurrence recurrenceObj = null-->Line_17 $$ String newRecurrence = JSONFactoryUtil.serialize(recurrenceObj)[ FD ]
Line_9 $$ rs = ps.executeQuery()-->Line_10 $$ while (rs.next()) [ FD ]
Line_2 $$ protected void verifyRecurrence() throws Exception -->Line_6 $$ ResultSet rs = null[ CD ]
Line_2 $$ protected void verifyRecurrence() throws Exception -->Line_3 $$ JSONSerializer jsonSerializer = new JSONSerializer()[ CD ]
Line_8 $$ ps = connection.prepareStatement("select eventId, recurrence from CalEvent where (CAST_TEXT(" + "recurrence) != '') and recurrence not like " + "'%serializable%'")-->Line_21 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_9 $$ rs = ps.executeQuery()-->Line_12 $$ String recurrence = rs.getString("recurrence")[ FD ]
Line_15 $$ recurrenceObj = (TZSRecurrence) jsonSerializer.fromJSON(recurrence)-->Line_17 $$ String newRecurrence = JSONFactoryUtil.serialize(recurrenceObj)[ FD ]
Line_13 $$ TZSRecurrence recurrenceObj = null-->Line_15 $$ recurrenceObj = (TZSRecurrence) jsonSerializer.fromJSON(recurrence)[ FD ]
Line_17 $$ String newRecurrence = JSONFactoryUtil.serialize(recurrenceObj)-->Line_18 $$ updateEvent(eventId, newRecurrence)[ FD ]
Line_6 $$ ResultSet rs = null-->Line_9 $$ rs = ps.executeQuery()[ FD ]
Line_5 $$ PreparedStatement ps = null-->Line_9 $$ rs = ps.executeQuery()[ FD ]
Line_3 $$ JSONSerializer jsonSerializer = new JSONSerializer()-->Line_15 $$ recurrenceObj = (TZSRecurrence) jsonSerializer.fromJSON(recurrence)[ FD ]
Line_12 $$ String recurrence = rs.getString("recurrence")-->Line_15 $$ recurrenceObj = (TZSRecurrence) jsonSerializer.fromJSON(recurrence)[ FD ]
Line_9 $$ rs = ps.executeQuery()-->Line_21 $$ DataAccess.cleanUp(ps, rs)[ FD ]
Line_10 $$ while (rs.next()) -->Line_11 $$ long eventId = rs.getLong("eventId")[ CD ]
