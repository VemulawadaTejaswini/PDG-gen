Line_4 $$ IntegerSplitter splitter = new IntegerSplitter()-->Line_12 $$ splits = splitter.split(configuration, result, "column1")[ FD ]
Line_6 $$ List<InputSplit> splits = splitter.split(configuration, result, "column")-->Line_13 $$ assertSplits(new String[] [ FD ]
Line_4 $$ IntegerSplitter splitter = new IntegerSplitter()-->Line_6 $$ List<InputSplit> splits = splitter.split(configuration, result, "column")[ FD ]
Line_6 $$ List<InputSplit> splits = splitter.split(configuration, result, "column")-->Line_7 $$ assertSplits(new String[] [ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_9 $$ when(result.getString(2)).thenReturn("result2")[ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_8 $$ when(result.getString(1)).thenReturn("result1")[ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_6 $$ List<InputSplit> splits = splitter.split(configuration, result, "column")[ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_11 $$ when(result.getLong(2)).thenReturn(19L)[ FD ]
Line_6 $$ List<InputSplit> splits = splitter.split(configuration, result, "column")-->Line_12 $$ splits = splitter.split(configuration, result, "column1")[ FD ]
Line_12 $$ splits = splitter.split(configuration, result, "column1")-->Line_13 $$ assertSplits(new String[] [ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_10 $$ when(result.getLong(1)).thenReturn(8L)[ FD ]
Line_5 $$ ResultSet result = mock(ResultSet.class)-->Line_12 $$ splits = splitter.split(configuration, result, "column1")[ FD ]
