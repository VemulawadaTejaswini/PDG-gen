Line_7 $$ PreparedStatement ps = null-->Line_27 $$ ps = con.prepareStatement(sb.toString())[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_22 $$ sb.append(") and (tempJournalArticle.version is null) and ")[ FD ]
Line_7 $$ PreparedStatement ps = null-->Line_28 $$ rs = ps.executeQuery()[ FD ]
Line_28 $$ rs = ps.executeQuery()-->Line_29 $$ while (rs.next()) [ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_26 $$ sb.append(")")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_27 $$ ps = con.prepareStatement(sb.toString())[ FD ]
Line_8 $$ ResultSet rs = null-->Line_33 $$ int status = rs.getInt("status")[ FD ]
Line_10 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_27 $$ ps = con.prepareStatement(sb.toString())[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_14 $$ sb.append("(JournalArticle.groupId = tempJournalArticle.groupId) ")[ FD ]
Line_2 $$ protected void verifyArticleExpirationDate() throws Exception -->Line_6 $$ Connection con = null[ CD ]
Line_29 $$ while (rs.next()) -->Line_32 $$ Timestamp expirationDate = rs.getTimestamp("expirationDate")[ CD ]
Line_28 $$ rs = ps.executeQuery()-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_24 $$ sb.append("(JournalArticle.status = ")[ FD ]
Line_28 $$ rs = ps.executeQuery()-->Line_30 $$ long groupId = rs.getLong("groupId")[ FD ]
Line_8 $$ ResultSet rs = null-->Line_28 $$ rs = ps.executeQuery()[ FD ]
Line_8 $$ ResultSet rs = null-->Line_30 $$ long groupId = rs.getLong("groupId")[ FD ]
Line_27 $$ ps = con.prepareStatement(sb.toString())-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_28 $$ rs = ps.executeQuery()-->Line_32 $$ Timestamp expirationDate = rs.getTimestamp("expirationDate")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_23 $$ sb.append("(JournalArticle.expirationDate is not null) and ")[ FD ]
Line_29 $$ while (rs.next()) -->Line_31 $$ long articleId = rs.getLong("articleId")[ CD ]
Line_8 $$ ResultSet rs = null-->Line_31 $$ long articleId = rs.getLong("articleId")[ FD ]
Line_30 $$ long groupId = rs.getLong("groupId")-->Line_34 $$ updateExpirationDate(groupId, articleId, expirationDate, status)[ FD ]
Line_28 $$ rs = ps.executeQuery()-->Line_33 $$ int status = rs.getInt("status")[ FD ]
Line_6 $$ Connection con = null-->Line_10 $$ con = DataAccess.getUpgradeOptimizedConnection()[ FD ]
Line_27 $$ ps = con.prepareStatement(sb.toString())-->Line_28 $$ rs = ps.executeQuery()[ FD ]
Line_2 $$ protected void verifyArticleExpirationDate() throws Exception -->Line_3 $$ if (!JournalServiceConfigurationValues.JOURNAL_ARTICLE_EXPIRE_ALL_VERSIONS) [ CD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_21 $$ sb.append(JournalArticleConstants.CLASSNAME_ID_DEFAULT)[ FD ]
Line_29 $$ while (rs.next()) -->Line_30 $$ long groupId = rs.getLong("groupId")[ CD ]
Line_6 $$ Connection con = null-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_8 $$ ResultSet rs = null-->Line_29 $$ while (rs.next()) [ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_13 $$ sb.append("join JournalArticle tempJournalArticle on ")[ FD ]
Line_32 $$ Timestamp expirationDate = rs.getTimestamp("expirationDate")-->Line_34 $$ updateExpirationDate(groupId, articleId, expirationDate, status)[ FD ]
Line_7 $$ PreparedStatement ps = null-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_8 $$ ResultSet rs = null-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_2 $$ protected void verifyArticleExpirationDate() throws Exception -->Line_8 $$ ResultSet rs = null[ CD ]
Line_3 $$ if (!JournalServiceConfigurationValues.JOURNAL_ARTICLE_EXPIRE_ALL_VERSIONS) -->Line_4 $$ return[ CD ]
Line_29 $$ while (rs.next()) -->Line_33 $$ int status = rs.getInt("status")[ CD ]
Line_29 $$ while (rs.next()) -->Line_34 $$ updateExpirationDate(groupId, articleId, expirationDate, status)[ CD ]
Line_10 $$ con = DataAccess.getUpgradeOptimizedConnection()-->Line_37 $$ DataAccess.cleanUp(con, ps, rs)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_20 $$ sb.append("(JournalArticle.classNameId = ")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_15 $$ sb.append("and (JournalArticle.articleId = ")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_19 $$ sb.append("tempJournalArticle.status) where ")[ FD ]
Line_33 $$ int status = rs.getInt("status")-->Line_34 $$ updateExpirationDate(groupId, articleId, expirationDate, status)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_16 $$ sb.append("tempJournalArticle.articleId) and ")[ FD ]
Line_31 $$ long articleId = rs.getLong("articleId")-->Line_34 $$ updateExpirationDate(groupId, articleId, expirationDate, status)[ FD ]
Line_28 $$ rs = ps.executeQuery()-->Line_31 $$ long articleId = rs.getLong("articleId")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_25 $$ sb.append(WorkflowConstants.STATUS_APPROVED)[ FD ]
Line_8 $$ ResultSet rs = null-->Line_32 $$ Timestamp expirationDate = rs.getTimestamp("expirationDate")[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_18 $$ sb.append("and (JournalArticle.status = ")[ FD ]
Line_6 $$ Connection con = null-->Line_27 $$ ps = con.prepareStatement(sb.toString())[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_17 $$ sb.append("(JournalArticle.version < tempJournalArticle.version) ")[ FD ]
Line_2 $$ protected void verifyArticleExpirationDate() throws Exception -->Line_7 $$ PreparedStatement ps = null[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(15)-->Line_12 $$ sb.append("select JournalArticle.* from JournalArticle left ")[ FD ]
