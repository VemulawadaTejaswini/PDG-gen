Line_10 $$ String elementName = startElement.getName().getLocalPart()-->Line_23 $$ if (elementName.equals("preference")) [ FD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_3 $$ String name = null[ CD ]
Line_9 $$ StartElement startElement = xmlEvent.asStartElement()-->Line_10 $$ String elementName = startElement.getName().getLocalPart()[ FD ]
Line_6 $$ while (xmlEventReader.hasNext()) -->Line_8 $$ if (xmlEvent.isStartElement()) [ CD ]
Line_8 $$ if (xmlEvent.isStartElement()) -->Line_11 $$ if (elementName.equals("name")) [ CD ]
Line_6 $$ while (xmlEventReader.hasNext()) -->Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()[ CD ]
Line_13 $$ if (elementName.equals("value")) -->Line_16 $$ if (elementName.equals("read-only")) [ CD ]
Line_16 $$ if (elementName.equals("read-only")) -->Line_17 $$ String value = StAXReaderUtil.read(xmlEventReader)[ CD ]
Line_10 $$ String elementName = startElement.getName().getLocalPart()-->Line_13 $$ if (elementName.equals("value")) [ FD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_6 $$ while (xmlEventReader.hasNext()) [ CD ]
Line_11 $$ if (elementName.equals("name")) -->Line_13 $$ if (elementName.equals("value")) [ CD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_5 $$ boolean readOnly = false[ CD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_6 $$ while (xmlEventReader.hasNext()) [ FD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_4 $$ List<String> values = new ArrayList()[ CD ]
Line_8 $$ if (xmlEvent.isStartElement()) -->Line_9 $$ StartElement startElement = xmlEvent.asStartElement()[ CD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_12 $$ name = StAXReaderUtil.read(xmlEventReader)[ FD ]
Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()-->Line_8 $$ if (xmlEvent.isStartElement()) [ FD ]
Line_16 $$ if (elementName.equals("read-only")) -->Line_18 $$ readOnly = GetterUtil.getBoolean(value)[ CD ]
Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()-->Line_21 $$ EndElement endElement = xmlEvent.asEndElement()[ FD ]
Line_20 $$ if (xmlEvent.isEndElement()) -->Line_22 $$ String elementName = endElement.getName().getLocalPart()[ CD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_14 $$ String value = StAXReaderUtil.read(xmlEventReader)[ FD ]
Line_8 $$ if (xmlEvent.isStartElement()) -->Line_20 $$ if (xmlEvent.isEndElement()) [ CD ]
Line_14 $$ String value = StAXReaderUtil.read(xmlEventReader)-->Line_15 $$ values.add(value)[ FD ]
Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()-->Line_20 $$ if (xmlEvent.isEndElement()) [ FD ]
Line_20 $$ if (xmlEvent.isEndElement()) -->Line_21 $$ EndElement endElement = xmlEvent.asEndElement()[ CD ]
Line_5 $$ boolean readOnly = false-->Line_18 $$ readOnly = GetterUtil.getBoolean(value)[ FD ]
Line_4 $$ List<String> values = new ArrayList()-->Line_28 $$ return new Preference(name, values.toArray(new String[values.size()]), readOnly)[ FD ]
Line_8 $$ if (xmlEvent.isStartElement()) -->Line_10 $$ String elementName = startElement.getName().getLocalPart()[ CD ]
Line_10 $$ String elementName = startElement.getName().getLocalPart()-->Line_11 $$ if (elementName.equals("name")) [ FD ]
Line_13 $$ if (elementName.equals("value")) -->Line_15 $$ values.add(value)[ CD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_28 $$ return new Preference(name, values.toArray(new String[values.size()]), readOnly)[ CD ]
Line_3 $$ String name = null-->Line_12 $$ name = StAXReaderUtil.read(xmlEventReader)[ FD ]
Line_14 $$ String value = StAXReaderUtil.read(xmlEventReader)-->Line_18 $$ readOnly = GetterUtil.getBoolean(value)[ FD ]
Line_21 $$ EndElement endElement = xmlEvent.asEndElement()-->Line_22 $$ String elementName = endElement.getName().getLocalPart()[ FD ]
Line_4 $$ List<String> values = new ArrayList()-->Line_15 $$ values.add(value)[ FD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()[ FD ]
Line_2 $$ protected static Preference readPreference(XMLEventReader xmlEventReader) throws XMLStreamException -->Line_17 $$ String value = StAXReaderUtil.read(xmlEventReader)[ FD ]
Line_20 $$ if (xmlEvent.isEndElement()) -->Line_23 $$ if (elementName.equals("preference")) [ CD ]
Line_11 $$ if (elementName.equals("name")) -->Line_12 $$ name = StAXReaderUtil.read(xmlEventReader)[ CD ]
Line_13 $$ if (elementName.equals("value")) -->Line_14 $$ String value = StAXReaderUtil.read(xmlEventReader)[ CD ]
Line_10 $$ String elementName = startElement.getName().getLocalPart()-->Line_16 $$ if (elementName.equals("read-only")) [ FD ]
Line_7 $$ XMLEvent xmlEvent = xmlEventReader.nextEvent()-->Line_9 $$ StartElement startElement = xmlEvent.asStartElement()[ FD ]
