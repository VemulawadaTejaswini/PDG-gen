Line_33 $$ if (!scopeHighlighting) -->Line_34 $$ myAlarm.addRequest(runnable, 300)[ CD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_27 $$ if (color == null)[ CD ]
Line_26 $$ Color color = attributes.getBackgroundColor()-->Line_27 $$ if (color == null)[ FD ]
Line_19 $$ final int startLine = myEditor.offsetToLogicalPosition(lBrace.getStartOffset()).line-->Line_30 $$ lineMarkFragment(startLine, endLine, color)[ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_8 $$ if (rBrace != null && !scopeHighlighting) [ FD ]
Line_39 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) -->Line_40 $$ removeLineMarkers()[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_18 $$ if (lBrace != null && rBrace != null) [ CD ]
Line_18 $$ if (lBrace != null && rBrace != null) -->Line_43 $$ if (!scopeHighlighting) [ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_11 $$ if (lBrace != null && !scopeHighlighting) [ FD ]
Line_21 $$ if (endLine - startLine > 0) -->Line_33 $$ if (!scopeHighlighting) [ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_3 $$ if (!matched && fileType == FileTypes.PLAIN_TEXT) [ CD ]
Line_27 $$ if (color == null)-->Line_28 $$ return[ CD ]
Line_43 $$ if (!scopeHighlighting) -->Line_44 $$ showScopeHint(lBrace.getStartOffset(), lBrace.getEndOffset())[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_33 $$ if (!scopeHighlighting) [ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_19 $$ final int startLine = myEditor.offsetToLogicalPosition(lBrace.getStartOffset()).line[ FD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_30 $$ lineMarkFragment(startLine, endLine, color)[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_15 $$ if (fileEditorManager == null || !myEditor.equals(fileEditorManager.getSelectedTextEditor())) [ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_11 $$ if (lBrace != null && !scopeHighlighting) [ CD ]
Line_18 $$ if (lBrace != null && rBrace != null) -->Line_47 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) [ CD ]
Line_18 $$ if (lBrace != null && rBrace != null) -->Line_21 $$ if (endLine - startLine > 0) [ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_6 $$ EditorColorsScheme scheme = myEditor.getColorsScheme()[ CD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_24 $$ if (myProject.isDisposed() || myEditor.isDisposed())[ CD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_26 $$ Color color = attributes.getBackgroundColor()[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_9 $$ highlightBrace(rBrace, matched)[ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_8 $$ if (rBrace != null && !scopeHighlighting) [ CD ]
Line_26 $$ Color color = attributes.getBackgroundColor()-->Line_29 $$ color = ColorUtil.isDark(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()) ? ColorUtil.shift(color, 1.5d) : color.darker()[ FD ]
Line_47 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) -->Line_48 $$ removeLineMarkers()[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_3 $$ if (!matched && fileType == FileTypes.PLAIN_TEXT) [ FD ]
Line_7 $$ final TextAttributes attributes = matched ? scheme.getAttributes(CodeInsightColors.MATCHED_BRACE_ATTRIBUTES) : scheme.getAttributes(CodeInsightColors.UNMATCHED_BRACE_ATTRIBUTES)-->Line_26 $$ Color color = attributes.getBackgroundColor()[ FD ]
Line_33 $$ if (!scopeHighlighting) -->Line_36 $$ runnable.run()[ CD ]
Line_3 $$ if (!matched && fileType == FileTypes.PLAIN_TEXT) -->Line_4 $$ return[ CD ]
Line_20 $$ final int endLine = myEditor.offsetToLogicalPosition(rBrace.getEndOffset()).line-->Line_30 $$ lineMarkFragment(startLine, endLine, color)[ FD ]
Line_8 $$ if (rBrace != null && !scopeHighlighting) -->Line_9 $$ highlightBrace(rBrace, matched)[ CD ]
Line_6 $$ EditorColorsScheme scheme = myEditor.getColorsScheme()-->Line_7 $$ final TextAttributes attributes = matched ? scheme.getAttributes(CodeInsightColors.MATCHED_BRACE_ATTRIBUTES) : scheme.getAttributes(CodeInsightColors.UNMATCHED_BRACE_ATTRIBUTES)[ FD ]
Line_14 $$ FileEditorManager fileEditorManager = FileEditorManager.getInstance(myProject)-->Line_15 $$ if (fileEditorManager == null || !myEditor.equals(fileEditorManager.getSelectedTextEditor())) [ FD ]
Line_11 $$ if (lBrace != null && !scopeHighlighting) -->Line_12 $$ highlightBrace(lBrace, matched)[ CD ]
Line_21 $$ if (endLine - startLine > 0) -->Line_22 $$ final Runnable runnable = new Runnable() [ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_7 $$ final TextAttributes attributes = matched ? scheme.getAttributes(CodeInsightColors.MATCHED_BRACE_ATTRIBUTES) : scheme.getAttributes(CodeInsightColors.UNMATCHED_BRACE_ATTRIBUTES)[ CD ]
Line_24 $$ if (myProject.isDisposed() || myEditor.isDisposed())-->Line_25 $$ return[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_44 $$ showScopeHint(lBrace.getStartOffset(), lBrace.getEndOffset())[ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_20 $$ final int endLine = myEditor.offsetToLogicalPosition(rBrace.getEndOffset()).line[ FD ]
Line_26 $$ Color color = attributes.getBackgroundColor()-->Line_30 $$ lineMarkFragment(startLine, endLine, color)[ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_12 $$ highlightBrace(lBrace, matched)[ FD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_29 $$ color = ColorUtil.isDark(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()) ? ColorUtil.shift(color, 1.5d) : color.darker()[ CD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_43 $$ if (!scopeHighlighting) [ FD ]
Line_15 $$ if (fileEditorManager == null || !myEditor.equals(fileEditorManager.getSelectedTextEditor())) -->Line_16 $$ return[ CD ]
Line_18 $$ if (lBrace != null && rBrace != null) -->Line_19 $$ final int startLine = myEditor.offsetToLogicalPosition(lBrace.getStartOffset()).line[ CD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_36 $$ runnable.run()[ FD ]
Line_2 $$ private void highlightBraces(@Nullable TextRange lBrace, @Nullable TextRange rBrace, boolean matched, boolean scopeHighlighting, @NotNull FileType fileType) -->Line_14 $$ FileEditorManager fileEditorManager = FileEditorManager.getInstance(myProject)[ CD ]
Line_21 $$ if (endLine - startLine > 0) -->Line_39 $$ if (!myCodeInsightSettings.HIGHLIGHT_SCOPE) [ CD ]
Line_29 $$ color = ColorUtil.isDark(EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground()) ? ColorUtil.shift(color, 1.5d) : color.darker()-->Line_30 $$ lineMarkFragment(startLine, endLine, color)[ FD ]
Line_18 $$ if (lBrace != null && rBrace != null) -->Line_20 $$ final int endLine = myEditor.offsetToLogicalPosition(rBrace.getEndOffset()).line[ CD ]
Line_22 $$ final Runnable runnable = new Runnable() -->Line_34 $$ myAlarm.addRequest(runnable, 300)[ FD ]
