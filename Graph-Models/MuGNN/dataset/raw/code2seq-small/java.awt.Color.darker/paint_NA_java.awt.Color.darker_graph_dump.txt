Line_16 $$ int i = 0-->Line_25 $$ points = points.subList(i, points.size())[ FD ]
Line_30 $$ final int finalX = width + editorWidth-->Line_32 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_5 $$ final Graphics gr = g.create()-->Line_38 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ FD ]
Line_16 $$ int i = 0-->Line_17 $$ for (; i < points.size(); i++) [ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_26 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ CD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_31 $$ for (; j > 0; j--) [ CD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_41 $$ myOffsetsConsumer.consume(points.get(0).getSecond())[ CD ]
Line_29 $$ int j = points.size() - 1-->Line_32 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_5 $$ final Graphics gr = g.create()-->Line_44 $$ gr.dispose()[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_35 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ CD ]
Line_5 $$ final Graphics gr = g.create()-->Line_27 $$ gr.setColor(getColor().darker())[ FD ]
Line_31 $$ for (; j > 0; j--) -->Line_32 $$ if (points.get(j).getFirst() >= finalX)[ CD ]
Line_5 $$ final Graphics gr = g.create()-->Line_28 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_16 $$ int i = 0[ CD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_26 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_17 $$ for (; i < points.size(); i++) [ CD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_28 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_29 $$ int j = points.size() - 1[ CD ]
Line_29 $$ int j = points.size() - 1-->Line_31 $$ for (; j > 0; j--) [ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_38 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ CD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_30 $$ final int finalX = width + editorWidth[ CD ]
Line_5 $$ final Graphics gr = g.create()-->Line_39 $$ gr.setColor(getColor().darker())[ FD ]
Line_5 $$ final Graphics gr = g.create()-->Line_8 $$ gr.setColor(getColor())[ FD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_41 $$ myOffsetsConsumer.consume(points.get(0).getSecond())[ FD ]
Line_16 $$ int i = 0-->Line_18 $$ Couple<Integer> integerIntegerPair = points.get(i)[ FD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_29 $$ int j = points.size() - 1[ FD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_38 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ FD ]
Line_17 $$ for (; i < points.size(); i++) -->Line_18 $$ Couple<Integer> integerIntegerPair = points.get(i)[ CD ]
Line_5 $$ final Graphics gr = g.create()-->Line_26 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_27 $$ gr.setColor(getColor().darker())[ CD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_28 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ CD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_32 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_40 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ FD ]
Line_10 $$ final int width = ((EditorEx) editor).getGutterComponentEx().getWidth()-->Line_26 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_40 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ CD ]
Line_10 $$ final int width = ((EditorEx) editor).getGutterComponentEx().getWidth()-->Line_28 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_5 $$ final Graphics gr = g.create()-->Line_40 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ FD ]
Line_11 $$ final int editorWidth = editor.getScrollingModel().getVisibleArea().width-->Line_19 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_25 $$ points = points.subList(i, points.size())[ CD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_39 $$ gr.setColor(getColor().darker())[ CD ]
Line_25 $$ points = points.subList(i, points.size())-->Line_35 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ FD ]
Line_13 $$ if (((EditorImpl) editor).isMirrored()) -->Line_37 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()[ CD ]
Line_17 $$ for (; i < points.size(); i++) -->Line_19 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ CD ]
Line_18 $$ Couple<Integer> integerIntegerPair = points.get(i)-->Line_19 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ FD ]
Line_29 $$ int j = points.size() - 1-->Line_35 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ FD ]
