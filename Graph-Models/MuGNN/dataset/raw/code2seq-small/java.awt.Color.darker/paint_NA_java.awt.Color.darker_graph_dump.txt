Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_23 $$ gr.setColor(getColor().darker())[ CD ]
Line_2 $$ public void paint(Editor editor, Graphics g, Rectangle r) -->Line_9 $$ final int editorWidth = editor.getScrollingModel().getVisibleArea().width[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_34 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ FD ]
Line_13 $$ int i = 0-->Line_15 $$ Couple<Integer> integerIntegerPair = points.get(i)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_26 $$ final int finalX = width + editorWidth[ CD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_35 $$ gr.setColor(getColor().darker())[ CD ]
Line_14 $$ for (; i < points.size(); i++) -->Line_15 $$ Couple<Integer> integerIntegerPair = points.get(i)[ CD ]
Line_27 $$ for (; j > 0; j--) -->Line_28 $$ if (points.get(j).getFirst() >= finalX)[ CD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_22 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_22 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_22 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ CD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_24 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_34 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ CD ]
Line_25 $$ int j = points.size() - 1-->Line_28 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_14 $$ for (; i < points.size(); i++) [ CD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_20 $$ i = i == 0 ? 0 : i - 1[ CD ]
Line_3 $$ final Graphics gr = g.create()-->Line_24 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_21 $$ points = points.subList(i, points.size())[ FD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_24 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_8 $$ final int width = ((EditorEx) editor).getGutterComponentEx().getWidth()-->Line_22 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_27 $$ for (; j > 0; j--) [ CD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_36 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_25 $$ int j = points.size() - 1[ CD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_31 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ CD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_36 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ FD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_37 $$ myOffsetsConsumer.consume(points.get(0).getSecond())[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_14 $$ for (; i < points.size(); i++) [ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_40 $$ gr.dispose()[ FD ]
Line_13 $$ int i = 0-->Line_20 $$ i = i == 0 ? 0 : i - 1[ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_23 $$ gr.setColor(getColor().darker())[ FD ]
Line_20 $$ i = i == 0 ? 0 : i - 1-->Line_21 $$ points = points.subList(i, points.size())[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_31 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_35 $$ gr.setColor(getColor().darker())[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_37 $$ myOffsetsConsumer.consume(points.get(0).getSecond())[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()[ CD ]
Line_13 $$ int i = 0-->Line_14 $$ for (; i < points.size(); i++) [ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_25 $$ int j = points.size() - 1[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_24 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ CD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_33 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()[ CD ]
Line_15 $$ Couple<Integer> integerIntegerPair = points.get(i)-->Line_16 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ FD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_31 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ FD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_22 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, width + editorWidth, true, width)[ FD ]
Line_8 $$ final int width = ((EditorEx) editor).getGutterComponentEx().getWidth()-->Line_24 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, width + editorWidth, true, width)[ FD ]
Line_25 $$ int j = points.size() - 1-->Line_27 $$ for (; j > 0; j--) [ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_6 $$ gr.setColor(getColor())[ FD ]
Line_14 $$ for (; i < points.size(); i++) -->Line_16 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ CD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_34 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_37 $$ myOffsetsConsumer.consume(points.get(0).getSecond())[ CD ]
Line_2 $$ public void paint(Editor editor, Graphics g, Rectangle r) -->Line_3 $$ final Graphics gr = g.create()[ CD ]
Line_13 $$ int i = 0-->Line_21 $$ points = points.subList(i, points.size())[ FD ]
Line_26 $$ final int finalX = width + editorWidth-->Line_28 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_36 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ FD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_28 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_25 $$ int j = points.size() - 1[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_13 $$ int i = 0[ CD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_36 $$ drawCurved(gr, 0, r.y, TornLineParams.ourLight, points, 0, false, 0)[ CD ]
Line_12 $$ List<Couple<Integer>> points = myShoeneLine.getPoints()-->Line_15 $$ Couple<Integer> integerIntegerPair = points.get(i)[ FD ]
Line_11 $$ if (((EditorImpl) editor).isMirrored()) -->Line_21 $$ points = points.subList(i, points.size())[ CD ]
Line_21 $$ points = points.subList(i, points.size())-->Line_28 $$ if (points.get(j).getFirst() >= finalX)[ FD ]
Line_3 $$ final Graphics gr = g.create()-->Line_34 $$ drawCurved(gr, 0, r.y, TornLineParams.ourDark, points, 0, false, 0)[ FD ]
Line_2 $$ public void paint(Editor editor, Graphics g, Rectangle r) -->Line_3 $$ final Graphics gr = g.create()[ FD ]
Line_9 $$ final int editorWidth = editor.getScrollingModel().getVisibleArea().width-->Line_16 $$ if (integerIntegerPair.getFirst() - width >= editorWidth) [ FD ]
Line_25 $$ int j = points.size() - 1-->Line_31 $$ myOffsetsConsumer.consume(points.get(j).getSecond())[ FD ]
