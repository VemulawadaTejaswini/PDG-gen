Line_7 $$ TypeMirror mirror-->Line_60 $$ return mirror.toString()[ FD ]
Line_13 $$ mirror = elem.asType()-->Line_56 $$ return mirror.toString()[ FD ]
Line_13 $$ mirror = elem.asType()-->Line_60 $$ return mirror.toString()[ FD ]
Line_13 $$ mirror = elem.asType()-->Line_21 $$ switch(mirror.getKind()) [ FD ]
Line_7 $$ TypeMirror mirror-->Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()[ FD ]
Line_2 $$ private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) -->Line_15 $$ if (name == null || !name.equals(propertyName)) [ FD ]
Line_18 $$ if (explicitTargetEntity != null) -->Line_19 $$ return explicitTargetEntity[ CD ]
Line_9 $$ if (ElementKind.METHOD.equals(elem.getKind())) -->Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()[ CD ]
Line_9 $$ if (ElementKind.METHOD.equals(elem.getKind())) -->Line_13 $$ mirror = elem.asType()[ CD ]
Line_2 $$ private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) -->Line_4 $$ if (!expectedElementKind.equals(elem.getKind())) [ FD ]
Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()-->Line_56 $$ return mirror.toString()[ FD ]
Line_3 $$ for (Element elem : element.getEnclosedElements()) -->Line_4 $$ if (!expectedElementKind.equals(elem.getKind())) [ FD ]
Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()-->Line_13 $$ mirror = elem.asType()[ FD ]
Line_8 $$ String name = elem.getSimpleName().toString()-->Line_10 $$ name = StringUtil.getPropertyName(name)[ FD ]
Line_7 $$ TypeMirror mirror-->Line_21 $$ switch(mirror.getKind()) [ FD ]
Line_2 $$ private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) -->Line_68 $$ return null[ CD ]
Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()-->Line_60 $$ return mirror.toString()[ FD ]
Line_3 $$ for (Element elem : element.getEnclosedElements()) -->Line_13 $$ mirror = elem.asType()[ FD ]
Line_8 $$ String name = elem.getSimpleName().toString()-->Line_15 $$ if (name == null || !name.equals(propertyName)) [ FD ]
Line_7 $$ TypeMirror mirror-->Line_13 $$ mirror = elem.asType()[ FD ]
Line_11 $$ mirror = ((ExecutableElement) elem).getReturnType()-->Line_21 $$ switch(mirror.getKind()) [ FD ]
Line_3 $$ for (Element elem : element.getEnclosedElements()) -->Line_8 $$ String name = elem.getSimpleName().toString()[ FD ]
Line_7 $$ TypeMirror mirror-->Line_56 $$ return mirror.toString()[ FD ]
Line_9 $$ if (ElementKind.METHOD.equals(elem.getKind())) -->Line_10 $$ name = StringUtil.getPropertyName(name)[ CD ]
Line_3 $$ for (Element elem : element.getEnclosedElements()) -->Line_9 $$ if (ElementKind.METHOD.equals(elem.getKind())) [ FD ]
Line_10 $$ name = StringUtil.getPropertyName(name)-->Line_15 $$ if (name == null || !name.equals(propertyName)) [ FD ]
Line_2 $$ private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) -->Line_67 $$ context.logMessage(Diagnostic.Kind.WARNING, "Unable to determine type for property " + propertyName + " of class " + getQualifiedName() + " using access type " + accessTypeInfo.getDefaultAccessType())[ CD ]
Line_2 $$ private String getType(String propertyName, String explicitTargetEntity, ElementKind expectedElementKind) -->Line_18 $$ if (explicitTargetEntity != null) [ FD ]
