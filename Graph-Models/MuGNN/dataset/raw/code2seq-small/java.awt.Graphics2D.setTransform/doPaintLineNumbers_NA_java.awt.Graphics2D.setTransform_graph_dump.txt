Line_28 $$ if (myEditor.isInDistractionFreeMode()) -->Line_29 $$ Color fgColor = myTextFgColors.get(i)[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_8 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1[ CD ]
Line_25 $$ if (logLine >= 0) -->Line_28 $$ if (myEditor.isInDistractionFreeMode()) [ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_38 $$ g.setTransform(old)[ FD ]
Line_3 $$ if (!isLineNumbersShown()) -->Line_4 $$ return[ CD ]
Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) -->Line_20 $$ LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(new VisualPosition(i, 0))[ CD ]
Line_17 $$ AffineTransform old = setMirrorTransformIfNeeded(g, getLineNumberAreaOffset(), getLineNumberAreaWidth())-->Line_37 $$ if (old != null)[ FD ]
Line_26 $$ String s = String.valueOf(logLine + 1)-->Line_32 $$ int textOffset = isMirrored() ? offset - getLineNumberAreaWidth() - 1 : offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s)[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_9 $$ int lastLine = myEditor.logicalToVisualPosition(new LogicalPosition(endLineNumber(), 0)).line[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_11 $$ if (startLineNumber >= endLineNumber) [ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_10 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)[ CD ]
Line_10 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)-->Line_11 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_28 $$ if (myEditor.isInDistractionFreeMode()) -->Line_30 $$ g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue)[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_6 $$ int lineHeight = myEditor.getLineHeight()[ CD ]
Line_11 $$ if (startLineNumber >= endLineNumber) -->Line_12 $$ return[ CD ]
Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) -->Line_24 $$ int logLine = convertor.execute(logicalPosition.line)[ CD ]
Line_7 $$ int startLineNumber = clip.y / lineHeight-->Line_11 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_10 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)-->Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) [ FD ]
Line_25 $$ if (logLine >= 0) -->Line_33 $$ g.drawString(s, textOffset, startY - myEditor.getDescent())[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_30 $$ g.setColor(fgColor != null ? fgColor : color != null ? color : JBColor.blue)[ FD ]
Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) -->Line_25 $$ if (logLine >= 0) [ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_7 $$ int startLineNumber = clip.y / lineHeight[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_17 $$ AffineTransform old = setMirrorTransformIfNeeded(g, getLineNumberAreaOffset(), getLineNumberAreaWidth())[ FD ]
Line_24 $$ int logLine = convertor.execute(logicalPosition.line)-->Line_25 $$ if (logLine >= 0) [ FD ]
Line_26 $$ String s = String.valueOf(logLine + 1)-->Line_33 $$ g.drawString(s, textOffset, startY - myEditor.getDescent())[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_14 $$ Color color = myEditor.getColorsScheme().getColor(EditorColors.LINE_NUMBERS_COLOR)[ CD ]
Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) -->Line_21 $$ if (EditorUtil.getSoftWrapCountAfterLineStart(myEditor, logicalPosition) > 0) [ CD ]
Line_8 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_10 $$ endLineNumber = Math.min(endLineNumber, lastLine + 1)[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_17 $$ AffineTransform old = setMirrorTransformIfNeeded(g, getLineNumberAreaOffset(), getLineNumberAreaWidth())[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_15 $$ g.setColor(color != null ? color : JBColor.blue)[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_33 $$ g.drawString(s, textOffset, startY - myEditor.getDescent())[ FD ]
Line_25 $$ if (logLine >= 0) -->Line_27 $$ int startY = (i + 1) * lineHeight[ CD ]
Line_37 $$ if (old != null)-->Line_38 $$ g.setTransform(old)[ CD ]
Line_25 $$ if (logLine >= 0) -->Line_32 $$ int textOffset = isMirrored() ? offset - getLineNumberAreaWidth() - 1 : offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s)[ CD ]
Line_20 $$ LogicalPosition logicalPosition = myEditor.visualToLogicalPosition(new VisualPosition(i, 0))-->Line_21 $$ if (EditorUtil.getSoftWrapCountAfterLineStart(myEditor, logicalPosition) > 0) [ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_3 $$ if (!isLineNumbersShown()) [ CD ]
Line_17 $$ AffineTransform old = setMirrorTransformIfNeeded(g, getLineNumberAreaOffset(), getLineNumberAreaWidth())-->Line_38 $$ g.setTransform(old)[ FD ]
Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) -->Line_29 $$ Color fgColor = myTextFgColors.get(i)[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_24 $$ int logLine = convertor.execute(logicalPosition.line)[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_16 $$ g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN))[ CD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_15 $$ g.setColor(color != null ? color : JBColor.blue)[ FD ]
Line_2 $$ private void doPaintLineNumbers(Graphics2D g, Rectangle clip, int offset, @NotNull TIntFunction convertor) -->Line_16 $$ g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN))[ FD ]
Line_8 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_19 $$ for (int i = startLineNumber; i < endLineNumber; i++) [ FD ]
Line_32 $$ int textOffset = isMirrored() ? offset - getLineNumberAreaWidth() - 1 : offset - myEditor.getFontMetrics(Font.PLAIN).stringWidth(s)-->Line_33 $$ g.drawString(s, textOffset, startY - myEditor.getDescent())[ FD ]
Line_8 $$ int endLineNumber = (clip.y + clip.height) / lineHeight + 1-->Line_11 $$ if (startLineNumber >= endLineNumber) [ FD ]
Line_25 $$ if (logLine >= 0) -->Line_26 $$ String s = String.valueOf(logLine + 1)[ CD ]
