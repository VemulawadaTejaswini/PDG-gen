Line_2 $$ protected void paintChildren(Graphics g) -->Line_12 $$ super.paintChildren(g)[ FD ]
Line_3 $$ if (myState.isInProgress()) -->Line_7 $$ newTransform.concatenate(AffineTransform.getTranslateInstance(0, getHeight() - super.getPreferredSize().height))[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_5 $$ AffineTransform oldTransform = g2.getTransform()[ FD ]
Line_6 $$ AffineTransform newTransform = oldTransform != null ? new AffineTransform(oldTransform) : new AffineTransform()-->Line_7 $$ newTransform.concatenate(AffineTransform.getTranslateInstance(0, getHeight() - super.getPreferredSize().height))[ FD ]
Line_3 $$ if (myState.isInProgress()) -->Line_6 $$ AffineTransform newTransform = oldTransform != null ? new AffineTransform(oldTransform) : new AffineTransform()[ CD ]
Line_3 $$ if (myState.isInProgress()) -->Line_9 $$ super.paintChildren(g2)[ CD ]
Line_2 $$ protected void paintChildren(Graphics g) -->Line_3 $$ if (myState.isInProgress()) [ CD ]
Line_5 $$ AffineTransform oldTransform = g2.getTransform()-->Line_10 $$ g2.setTransform(oldTransform)[ FD ]
Line_3 $$ if (myState.isInProgress()) -->Line_8 $$ g2.setTransform(newTransform)[ CD ]
Line_3 $$ if (myState.isInProgress()) -->Line_10 $$ g2.setTransform(oldTransform)[ CD ]
Line_3 $$ if (myState.isInProgress()) -->Line_11 $$ if (myState != State.COLLAPSED) [ CD ]
Line_11 $$ if (myState != State.COLLAPSED) -->Line_12 $$ super.paintChildren(g)[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_8 $$ g2.setTransform(newTransform)[ FD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_9 $$ super.paintChildren(g2)[ FD ]
Line_3 $$ if (myState.isInProgress()) -->Line_4 $$ Graphics2D g2 = (Graphics2D) g[ CD ]
Line_3 $$ if (myState.isInProgress()) -->Line_5 $$ AffineTransform oldTransform = g2.getTransform()[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_10 $$ g2.setTransform(oldTransform)[ FD ]
Line_6 $$ AffineTransform newTransform = oldTransform != null ? new AffineTransform(oldTransform) : new AffineTransform()-->Line_8 $$ g2.setTransform(newTransform)[ FD ]
