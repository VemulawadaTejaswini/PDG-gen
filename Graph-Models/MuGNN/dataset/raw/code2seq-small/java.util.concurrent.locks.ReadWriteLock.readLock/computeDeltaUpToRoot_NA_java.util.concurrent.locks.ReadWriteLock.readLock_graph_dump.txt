Line_38 $$ if (node.isValid()) -->Line_41 $$ allDeltasAreNull &= nodeDelta == 0[ CD ]
Line_21 $$ while (node != treeRoot) -->Line_32 $$ path = (path << 1) | (parent.getLeft() == node ? 0 : 1)[ CD ]
Line_3 $$ while (true) -->Line_8 $$ if (modCount(packedOffsets) == treeModCount) [ CD ]
Line_37 $$ while (true) -->Line_50 $$ if (node == null)[ CD ]
Line_18 $$ boolean allDeltasAreNull = true-->Line_53 $$ assert deltaUp == 0 || !allDeltasAreNull[ FD ]
Line_17 $$ int deltaUp = 0-->Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta[ FD ]
Line_19 $$ int height = 0-->Line_34 $$ height++[ FD ]
Line_14 $$ IntervalNode<E> treeRoot = myIntervalTree.getRoot()-->Line_21 $$ while (node != treeRoot) [ FD ]
Line_39 $$ int nodeDelta = node.delta-->Line_41 $$ allDeltasAreNull &= nodeDelta == 0[ FD ]
Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_33 $$ node = parent-->Line_28 $$ IntervalNode<E> parent = node.getParent()[ FD ]
Line_33 $$ node = parent-->Line_38 $$ if (node.isValid()) [ FD ]
Line_33 $$ node = parent-->Line_21 $$ while (node != treeRoot) [ FD ]
Line_37 $$ while (true) -->Line_38 $$ if (node.isValid()) [ CD ]
Line_13 $$ IntervalNode<E> node = this-->Line_28 $$ IntervalNode<E> parent = node.getParent()[ FD ]
Line_6 $$ int treeModCount = myIntervalTree.modCount-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_15 $$ if (treeRoot == null)-->Line_16 $$ return delta[ CD ]
Line_50 $$ if (node == null)-->Line_51 $$ return deltaUp[ CD ]
Line_33 $$ node = parent-->Line_46 $$ if (node == this)[ FD ]
Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) -->Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta[ CD ]
Line_28 $$ IntervalNode<E> parent = node.getParent()-->Line_29 $$ if (parent == null) [ FD ]
Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)-->Line_41 $$ allDeltasAreNull &= nodeDelta == 0[ FD ]
Line_22 $$ long nodePackedOffsets = node.cachedDeltaUpToRoot-->Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)[ FD ]
Line_28 $$ IntervalNode<E> parent = node.getParent()-->Line_33 $$ node = parent[ FD ]
Line_40 $$ deltaUp += nodeDelta-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_14 $$ IntervalNode<E> treeRoot = myIntervalTree.getRoot()-->Line_15 $$ if (treeRoot == null)[ FD ]
Line_8 $$ if (modCount(packedOffsets) == treeModCount) -->Line_9 $$ return deltaUpToRoot(packedOffsets)[ CD ]
Line_13 $$ IntervalNode<E> node = this-->Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()[ FD ]
Line_40 $$ deltaUp += nodeDelta-->Line_50 $$ if (node == null)[ FD ]
Line_18 $$ boolean allDeltasAreNull = true-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_21 $$ while (node != treeRoot) -->Line_28 $$ IntervalNode<E> parent = node.getParent()[ CD ]
Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)-->Line_53 $$ assert deltaUp == 0 || !allDeltasAreNull[ FD ]
Line_13 $$ IntervalNode<E> node = this-->Line_33 $$ node = parent[ FD ]
Line_17 $$ int deltaUp = 0-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_21 $$ while (node != treeRoot) -->Line_22 $$ long nodePackedOffsets = node.cachedDeltaUpToRoot[ CD ]
Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta-->Line_50 $$ if (node == null)[ FD ]
Line_4 $$ if (!isValid())-->Line_5 $$ return 0[ CD ]
Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()-->Line_38 $$ if (node.isValid()) [ FD ]
Line_38 $$ if (node.isValid()) -->Line_40 $$ deltaUp += nodeDelta[ CD ]
Line_37 $$ while (true) -->Line_49 $$ path >>= 1[ CD ]
Line_17 $$ int deltaUp = 0-->Line_50 $$ if (node == null)[ FD ]
Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_28 $$ IntervalNode<E> parent = node.getParent()-->Line_32 $$ path = (path << 1) | (parent.getLeft() == node ? 0 : 1)[ FD ]
Line_22 $$ long nodePackedOffsets = node.cachedDeltaUpToRoot-->Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) [ FD ]
Line_33 $$ node = parent-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_17 $$ int deltaUp = 0-->Line_40 $$ deltaUp += nodeDelta[ FD ]
Line_3 $$ while (true) -->Line_4 $$ if (!isValid())[ CD ]
Line_32 $$ path = (path << 1) | (parent.getLeft() == node ? 0 : 1)-->Line_49 $$ path >>= 1[ FD ]
Line_7 $$ long packedOffsets = cachedDeltaUpToRoot-->Line_8 $$ if (modCount(packedOffsets) == treeModCount) [ FD ]
Line_41 $$ allDeltasAreNull &= nodeDelta == 0-->Line_53 $$ assert deltaUp == 0 || !allDeltasAreNull[ FD ]
Line_6 $$ int treeModCount = myIntervalTree.modCount-->Line_8 $$ if (modCount(packedOffsets) == treeModCount) [ FD ]
Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) -->Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)[ CD ]
Line_37 $$ while (true) -->Line_46 $$ if (node == this)[ CD ]
Line_13 $$ IntervalNode<E> node = this-->Line_38 $$ if (node.isValid()) [ FD ]
Line_38 $$ if (node.isValid()) -->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ CD ]
Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()-->Line_46 $$ if (node == this)[ FD ]
Line_21 $$ while (node != treeRoot) -->Line_29 $$ if (parent == null) [ CD ]
Line_21 $$ while (node != treeRoot) -->Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) [ CD ]
Line_13 $$ IntervalNode<E> node = this-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_41 $$ allDeltasAreNull &= nodeDelta == 0-->Line_42 $$ if (!node.tryToSetCachedValues(deltaUp, allDeltasAreNull, treeModCount)) [ FD ]
Line_13 $$ IntervalNode<E> node = this-->Line_21 $$ while (node != treeRoot) [ FD ]
Line_7 $$ long packedOffsets = cachedDeltaUpToRoot-->Line_9 $$ return deltaUpToRoot(packedOffsets)[ FD ]
Line_21 $$ while (node != treeRoot) -->Line_34 $$ height++[ CD ]
Line_3 $$ while (true) -->Line_6 $$ int treeModCount = myIntervalTree.modCount[ CD ]
Line_21 $$ while (node != treeRoot) -->Line_33 $$ node = parent[ CD ]
Line_39 $$ int nodeDelta = node.delta-->Line_40 $$ deltaUp += nodeDelta[ FD ]
Line_13 $$ IntervalNode<E> node = this-->Line_46 $$ if (node == this)[ FD ]
Line_13 $$ IntervalNode<E> node = this-->Line_50 $$ if (node == null)[ FD ]
Line_20 $$ long path = 0-->Line_32 $$ path = (path << 1) | (parent.getLeft() == node ? 0 : 1)[ FD ]
Line_18 $$ boolean allDeltasAreNull = true-->Line_25 $$ allDeltasAreNull = allDeltasUpAreNull(nodePackedOffsets)[ FD ]
Line_18 $$ boolean allDeltasAreNull = true-->Line_41 $$ allDeltasAreNull &= nodeDelta == 0[ FD ]
Line_13 $$ IntervalNode<E> node = this-->Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) [ FD ]
Line_29 $$ if (parent == null) -->Line_30 $$ return deltaUp[ CD ]
Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()-->Line_50 $$ if (node == null)[ FD ]
Line_33 $$ node = parent-->Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()[ FD ]
Line_38 $$ if (node.isValid()) -->Line_39 $$ int nodeDelta = node.delta[ CD ]
Line_3 $$ while (true) -->Line_7 $$ long packedOffsets = cachedDeltaUpToRoot[ CD ]
Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta-->Line_40 $$ deltaUp += nodeDelta[ FD ]
Line_33 $$ node = parent-->Line_50 $$ if (node == null)[ FD ]
Line_33 $$ node = parent-->Line_23 $$ if (node.isValid() && modCount(nodePackedOffsets) == treeModCount) [ FD ]
Line_20 $$ long path = 0-->Line_49 $$ path >>= 1[ FD ]
Line_37 $$ while (true) -->Line_48 $$ node = (path & 1) == 0 ? node.getLeft() : node.getRight()[ CD ]
Line_22 $$ long nodePackedOffsets = node.cachedDeltaUpToRoot-->Line_24 $$ deltaUp = deltaUpToRoot(nodePackedOffsets) - node.delta[ FD ]
