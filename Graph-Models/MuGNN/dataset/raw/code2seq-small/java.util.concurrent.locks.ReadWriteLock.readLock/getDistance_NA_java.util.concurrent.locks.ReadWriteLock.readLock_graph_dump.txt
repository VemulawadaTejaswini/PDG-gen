Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_6 $$ Node n1 = node1, n2 = node2[ CD ]
Line_17 $$ n2 = n2.getParent()-->Line_33 $$ if (n2 == null) [ FD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_3 $$ if (node1 == node2) [ FD ]
Line_12 $$ n1 = n1.getParent()-->Line_22 $$ n1 = n1.getParent()[ FD ]
Line_22 $$ n1 = n1.getParent()-->Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) [ FD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_22 $$ n1 = n1.getParent()[ FD ]
Line_17 $$ n2 = n2.getParent()-->Line_23 $$ n2 = n2.getParent()[ FD ]
Line_29 $$ if (n1 == null) -->Line_31 $$ return Integer.MAX_VALUE[ CD ]
Line_11 $$ while (n1 != null && level1 > level2) -->Line_13 $$ level1--[ CD ]
Line_16 $$ while (n2 != null && level2 > level1) -->Line_17 $$ n2 = n2.getParent()[ CD ]
Line_16 $$ while (n2 != null && level2 > level1) -->Line_18 $$ level2--[ CD ]
Line_12 $$ n1 = n1.getParent()-->Line_29 $$ if (n1 == null) [ FD ]
Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) -->Line_23 $$ n2 = n2.getParent()[ CD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_29 $$ if (n1 == null) [ FD ]
Line_17 $$ n2 = n2.getParent()-->Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) [ FD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_12 $$ n1 = n1.getParent()[ FD ]
Line_11 $$ while (n1 != null && level1 > level2) -->Line_12 $$ n1 = n1.getParent()[ CD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_30 $$ LOG.warn("The cluster does not contain node: " + NodeBase.getPath(node1))[ FD ]
Line_7 $$ int dis = 0-->Line_24 $$ dis += 2[ FD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_37 $$ return dis + 2[ CD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_29 $$ if (n1 == null) [ CD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_10 $$ int level1 = node1.getLevel(), level2 = node2.getLevel()[ FD ]
Line_10 $$ int level1 = node1.getLevel(), level2 = node2.getLevel()-->Line_18 $$ level2--[ FD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_17 $$ n2 = n2.getParent()[ FD ]
Line_23 $$ n2 = n2.getParent()-->Line_33 $$ if (n2 == null) [ FD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_33 $$ if (n2 == null) [ FD ]
Line_7 $$ int dis = 0-->Line_19 $$ dis++[ FD ]
Line_29 $$ if (n1 == null) -->Line_30 $$ LOG.warn("The cluster does not contain node: " + NodeBase.getPath(node1))[ CD ]
Line_3 $$ if (node1 == node2) -->Line_4 $$ return 0[ CD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_33 $$ if (n2 == null) [ CD ]
Line_7 $$ int dis = 0-->Line_14 $$ dis++[ FD ]
Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) -->Line_24 $$ dis += 2[ CD ]
Line_12 $$ n1 = n1.getParent()-->Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) [ FD ]
Line_22 $$ n1 = n1.getParent()-->Line_29 $$ if (n1 == null) [ FD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_7 $$ int dis = 0[ CD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_34 $$ LOG.warn("The cluster does not contain node: " + NodeBase.getPath(node2))[ FD ]
Line_23 $$ n2 = n2.getParent()-->Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) [ FD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_8 $$ netlock.readLock().lock()[ CD ]
Line_10 $$ int level1 = node1.getLevel(), level2 = node2.getLevel()-->Line_13 $$ level1--[ FD ]
Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) -->Line_22 $$ n1 = n1.getParent()[ CD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_23 $$ n2 = n2.getParent()[ FD ]
Line_33 $$ if (n2 == null) -->Line_35 $$ return Integer.MAX_VALUE[ CD ]
Line_11 $$ while (n1 != null && level1 > level2) -->Line_14 $$ dis++[ CD ]
Line_33 $$ if (n2 == null) -->Line_34 $$ LOG.warn("The cluster does not contain node: " + NodeBase.getPath(node2))[ CD ]
Line_6 $$ Node n1 = node1, n2 = node2-->Line_21 $$ while (n1 != null && n2 != null && n1.getParent() != n2.getParent()) [ FD ]
Line_2 $$ public int getDistance(Node node1, Node node2) -->Line_3 $$ if (node1 == node2) [ CD ]
Line_16 $$ while (n2 != null && level2 > level1) -->Line_19 $$ dis++[ CD ]
