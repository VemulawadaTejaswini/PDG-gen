Line_17 $$ if (nodeChannels != null) -->Line_18 $$ return[ CD ]
Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])-->Line_29 $$ nodeChannels.close()[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_3 $$ if (!lifecycle.started()) [ CD ]
Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])-->Line_26 $$ connectToChannels(nodeChannels, node)[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_26 $$ connectToChannels(nodeChannels, node)[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_36 $$ logger.debug("connected to node [[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_34 $$ connectedNodes.put(node, nodeChannels)[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_26 $$ connectToChannels(nodeChannels, node)[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_34 $$ connectedNodes.put(node, nodeChannels)[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_29 $$ nodeChannels.close()[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_6 $$ if (node == null) [ CD ]
Line_22 $$ nodeChannels = connectToChannelsLight(node)-->Line_26 $$ connectToChannels(nodeChannels, node)[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_45 $$ connectionLock.release(node.id())[ FD ]
Line_22 $$ nodeChannels = connectToChannelsLight(node)-->Line_29 $$ nodeChannels.close()[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_11 $$ connectionLock.acquire(node.id())[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)[ FD ]
Line_35 $$ if (logger.isDebugEnabled()) -->Line_36 $$ logger.debug("connected to node [[ CD ]
Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])-->Line_33 $$ nodeChannels.start()[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_22 $$ nodeChannels = connectToChannelsLight(node)[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_38 $$ transportServiceAdapter.raiseNodeConnected(node)[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_28 $$ logger.trace("failed to connect to [[ FD ]
Line_22 $$ nodeChannels = connectToChannelsLight(node)-->Line_34 $$ connectedNodes.put(node, nodeChannels)[ FD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_17 $$ if (nodeChannels != null) [ FD ]
Line_22 $$ nodeChannels = connectToChannelsLight(node)-->Line_33 $$ nodeChannels.start()[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_22 $$ nodeChannels = connectToChannelsLight(node)[ FD ]
Line_21 $$ if (light) -->Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])[ CD ]
Line_22 $$ nodeChannels = connectToChannelsLight(node)-->Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_9 $$ globalLock.readLock().lock()[ CD ]
Line_16 $$ NodeChannels nodeChannels = connectedNodes.get(node)-->Line_33 $$ nodeChannels.start()[ FD ]
Line_2 $$ public void connectToNode(DiscoveryNode node, boolean light) -->Line_6 $$ if (node == null) [ FD ]
Line_21 $$ if (light) -->Line_22 $$ nodeChannels = connectToChannelsLight(node)[ CD ]
Line_24 $$ nodeChannels = new NodeChannels(new Channel[connectionsPerNodeRecovery], new Channel[connectionsPerNodeBulk], new Channel[connectionsPerNodeReg], new Channel[connectionsPerNodeState], new Channel[connectionsPerNodePing])-->Line_34 $$ connectedNodes.put(node, nodeChannels)[ FD ]
