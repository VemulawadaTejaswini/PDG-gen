Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_8 $$ scope = NodeBase.normalize(scope)[ FD ]
Line_17 $$ Node n = getNode(scope)-->Line_19 $$ if (n instanceof InnerNode) [ FD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_3 $$ boolean isExcluded = false[ CD ]
Line_19 $$ if (n instanceof InnerNode) -->Line_20 $$ scopeNodeCount = ((InnerNode) n).getNumOfLeaves()[ CD ]
Line_12 $$ for (Node node : excludedNodes) -->Line_13 $$ if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR).startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) [ FD ]
Line_4 $$ if (scope.startsWith("~")) -->Line_5 $$ isExcluded = true[ CD ]
Line_4 $$ if (scope.startsWith("~")) -->Line_6 $$ scope = scope.substring(1)[ CD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_4 $$ if (scope.startsWith("~")) [ CD ]
Line_18 $$ int scopeNodeCount = 1-->Line_20 $$ scopeNodeCount = ((InnerNode) n).getNumOfLeaves()[ FD ]
Line_8 $$ scope = NodeBase.normalize(scope)-->Line_17 $$ Node n = getNode(scope)[ FD ]
Line_13 $$ if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR).startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) -->Line_14 $$ count++[ CD ]
Line_6 $$ scope = scope.substring(1)-->Line_17 $$ Node n = getNode(scope)[ FD ]
Line_6 $$ scope = scope.substring(1)-->Line_8 $$ scope = NodeBase.normalize(scope)[ FD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_9 $$ int count = 0[ CD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_8 $$ scope = NodeBase.normalize(scope)[ CD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_10 $$ netlock.readLock().lock()[ CD ]
Line_9 $$ int count = 0-->Line_14 $$ count++[ FD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_17 $$ Node n = getNode(scope)[ FD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_4 $$ if (scope.startsWith("~")) [ FD ]
Line_3 $$ boolean isExcluded = false-->Line_5 $$ isExcluded = true[ FD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_6 $$ scope = scope.substring(1)[ FD ]
Line_22 $$ if (isExcluded) -->Line_23 $$ return clusterMap.getNumOfLeaves() - scopeNodeCount - excludedNodes.size() + count[ CD ]
Line_2 $$ public int countNumOfAvailableNodes(String scope, Collection<Node> excludedNodes) -->Line_23 $$ return clusterMap.getNumOfLeaves() - scopeNodeCount - excludedNodes.size() + count[ FD ]
Line_22 $$ if (isExcluded) -->Line_25 $$ return scopeNodeCount - count[ CD ]
