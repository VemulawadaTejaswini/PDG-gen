Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_41 $$ return sb.toString()[ FD ]
Line_17 $$ if (!bootstrapTokens.isEmpty()) -->Line_19 $$ sb.append(System.getProperty("line.separator"))[ CD ]
Line_25 $$ if (!leavingEndpoints.isEmpty()) -->Line_27 $$ sb.append(System.getProperty("line.separator"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(printPendingRanges())[ FD ]
Line_7 $$ if (!eps.isEmpty()) -->Line_8 $$ sb.append("Normal Tokens:")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append(ep)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.append("Leaving Endpoints:")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_9 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_8 $$ sb.append("Normal Tokens:")[ FD ]
Line_20 $$ for (Map.Entry<Token, InetAddress> entry : bootstrapTokens.entrySet()) -->Line_21 $$ sb.append(entry.getValue()).append(':').append(entry.getKey())[ FD ]
Line_10 $$ for (InetAddress ep : eps) -->Line_29 $$ sb.append(ep)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append("Bootstrapping Tokens:")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(tokenToEndpointMap.inverse().get(ep))[ FD ]
Line_33 $$ if (!pendingRanges.isEmpty()) -->Line_36 $$ sb.append(printPendingRanges())[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_25 $$ if (!leavingEndpoints.isEmpty()) -->Line_26 $$ sb.append("Leaving Endpoints:")[ CD ]
Line_10 $$ for (InetAddress ep : eps) -->Line_11 $$ sb.append(ep)[ FD ]
Line_10 $$ for (InetAddress ep : eps) -->Line_13 $$ sb.append(tokenToEndpointMap.inverse().get(ep))[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(':')[ FD ]
Line_7 $$ if (!eps.isEmpty()) -->Line_9 $$ sb.append(System.getProperty("line.separator"))[ CD ]
Line_2 $$ public String toString() -->Line_4 $$ lock.readLock().lock()[ CD ]
Line_33 $$ if (!pendingRanges.isEmpty()) -->Line_35 $$ sb.append(System.getProperty("line.separator"))[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(System.getProperty("line.separator"))[ FD ]
Line_33 $$ if (!pendingRanges.isEmpty()) -->Line_34 $$ sb.append("Pending Ranges:")[ CD ]
Line_2 $$ public String toString() -->Line_41 $$ return sb.toString()[ CD ]
Line_2 $$ public String toString() -->Line_3 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_6 $$ Set<InetAddress> eps = tokenToEndpointMap.inverse().keySet()-->Line_7 $$ if (!eps.isEmpty()) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(entry.getValue()).append(':').append(entry.getKey())[ FD ]
Line_17 $$ if (!bootstrapTokens.isEmpty()) -->Line_18 $$ sb.append("Bootstrapping Tokens:")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(ep)[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ sb.append("Pending Ranges:")[ FD ]
