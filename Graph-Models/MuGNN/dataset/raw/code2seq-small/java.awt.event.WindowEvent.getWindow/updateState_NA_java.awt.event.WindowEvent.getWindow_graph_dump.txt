Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_6 $$ final Window eventWindow = windowEvent.getWindow()[ FD ]
Line_22 $$ Timer timer = new Timer(Registry.intValue("application.deactivation.timeout"), new ActionListener() -->Line_24 $$ if (state.equals(State.DEACTIVATING)) [ CD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_6 $$ final Window eventWindow = windowEvent.getWindow()[ CD ]
Line_8 $$ if (state.isInactive()) -->Line_10 $$ return setActive(application, window)[ CD ]
Line_22 $$ Timer timer = new Timer(Registry.intValue("application.deactivation.timeout"), new ActionListener() -->Line_34 $$ timer.setRepeats(false)[ FD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_7 $$ if (windowEvent.getID() == WindowEvent.WINDOW_ACTIVATED || windowEvent.getID() == WindowEvent.WINDOW_GAINED_FOCUS) [ FD ]
Line_7 $$ if (windowEvent.getID() == WindowEvent.WINDOW_ACTIVATED || windowEvent.getID() == WindowEvent.WINDOW_GAINED_FOCUS) -->Line_8 $$ if (state.isInactive()) [ CD ]
Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_17 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).applicationDeactivated(ideFrame)[ FD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_13 $$ requestToDeactivateTime.getAndSet(System.currentTimeMillis())[ CD ]
Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_16 $$ if (ideFrame != null) [ FD ]
Line_16 $$ if (ideFrame != null) -->Line_17 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).applicationDeactivated(ideFrame)[ CD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_38 $$ return false[ CD ]
Line_4 $$ if (!(application instanceof ApplicationImpl))-->Line_5 $$ return false[ CD ]
Line_24 $$ if (state.equals(State.DEACTIVATING)) -->Line_26 $$ LOG.debug("The app is in the deactivated state")[ CD ]
Line_24 $$ if (state.equals(State.DEACTIVATING)) -->Line_27 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())[ CD ]
Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_29 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).delayedApplicationDeactivated(ideFrame)[ FD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_7 $$ if (windowEvent.getID() == WindowEvent.WINDOW_ACTIVATED || windowEvent.getID() == WindowEvent.WINDOW_GAINED_FOCUS) [ CD ]
Line_7 $$ if (windowEvent.getID() == WindowEvent.WINDOW_ACTIVATED || windowEvent.getID() == WindowEvent.WINDOW_GAINED_FOCUS) -->Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) [ CD ]
Line_3 $$ final Application application = ApplicationManager.getApplication()-->Line_29 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).delayedApplicationDeactivated(ideFrame)[ FD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_4 $$ if (!(application instanceof ApplicationImpl))[ CD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_21 $$ LOG.debug("The app is in the deactivating state")[ CD ]
Line_24 $$ if (state.equals(State.DEACTIVATING)) -->Line_28 $$ if (ideFrame != null) [ CD ]
Line_8 $$ if (state.isInactive()) -->Line_9 $$ Window window = windowEvent.getWindow()[ CD ]
Line_14 $$ if (state.isActive()) -->Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())[ CD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_27 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())[ FD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_35 $$ timer.start()[ CD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_9 $$ Window window = windowEvent.getWindow()[ FD ]
Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_28 $$ if (ideFrame != null) [ FD ]
Line_14 $$ if (state.isActive()) -->Line_16 $$ if (ideFrame != null) [ CD ]
Line_3 $$ final Application application = ApplicationManager.getApplication()-->Line_17 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).applicationDeactivated(ideFrame)[ FD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_14 $$ if (state.isActive()) [ CD ]
Line_22 $$ Timer timer = new Timer(Registry.intValue("application.deactivation.timeout"), new ActionListener() -->Line_35 $$ timer.start()[ FD ]
Line_27 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_29 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).delayedApplicationDeactivated(ideFrame)[ FD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_34 $$ timer.setRepeats(false)[ CD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_22 $$ Timer timer = new Timer(Registry.intValue("application.deactivation.timeout"), new ActionListener() [ CD ]
Line_9 $$ Window window = windowEvent.getWindow()-->Line_10 $$ return setActive(application, window)[ FD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_3 $$ final Application application = ApplicationManager.getApplication()[ CD ]
Line_28 $$ if (ideFrame != null) -->Line_29 $$ application.getMessageBus().syncPublisher(ApplicationActivationListener.TOPIC).delayedApplicationDeactivated(ideFrame)[ CD ]
Line_27 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())-->Line_28 $$ if (ideFrame != null) [ FD ]
Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) -->Line_36 $$ return true[ CD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_15 $$ IdeFrame ideFrame = getIdeFrameFromWindow(windowEvent.getWindow())[ FD ]
Line_3 $$ final Application application = ApplicationManager.getApplication()-->Line_10 $$ return setActive(application, window)[ FD ]
Line_2 $$ public static boolean updateState(final WindowEvent windowEvent) -->Line_12 $$ if (windowEvent.getID() == WindowEvent.WINDOW_DEACTIVATED && windowEvent.getOppositeWindow() == null) [ FD ]
