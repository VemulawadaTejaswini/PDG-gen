Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()-->Line_13 $$ myDimensionServiceKey = dialogWrapper.getDimensionKey()[ FD ]
Line_54 $$ final Ref<IdeFocusManager> focusManager = new Ref<IdeFocusManager>(null)-->Line_58 $$ focusManager.get().doWhenFocusSettlesDown(new Runnable() [ FD ]
Line_14 $$ if (myDimensionServiceKey != null) -->Line_18 $$ if (size != null) [ CD ]
Line_6 $$ Point location = null-->Line_28 $$ location = dialogWrapper.getInitialLocation()[ FD ]
Line_86 $$ if (SystemInfo.isMac && myProject != null && Registry.is("ide.mac.fix.dialog.showing") && !dialogWrapper.isModalProgress()) -->Line_87 $$ final IdeFrame frame = WindowManager.getInstance().getIdeFrame(myProject.get())[ CD ]
Line_2 $$ public void show() -->Line_80 $$ if (Registry.is("actionSystem.fixLostTyping")) [ CD ]
Line_7 $$ if (isAutoAdjustable) -->Line_9 $$ Dimension packedSize = getSize()[ CD ]
Line_36 $$ final Rectangle bounds = getBounds()-->Line_37 $$ ScreenUtil.fitToScreen(bounds)[ FD ]
Line_54 $$ final Ref<IdeFocusManager> focusManager = new Ref<IdeFocusManager>(null)-->Line_60 $$ disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get())[ FD ]
Line_6 $$ Point location = null-->Line_20 $$ _setSizeForLocation(myInitialSize.width, myInitialSize.height, location)[ FD ]
Line_80 $$ if (Registry.is("actionSystem.fixLostTyping")) -->Line_81 $$ final IdeEventQueue queue = IdeEventQueue.getInstance()[ CD ]
Line_2 $$ public void show() -->Line_92 $$ if (app != null && !app.isLoaded() && Splash.BOUNDS != null) [ CD ]
Line_2 $$ public void show() -->Line_7 $$ if (isAutoAdjustable) [ CD ]
Line_2 $$ public void show() -->Line_5 $$ boolean isAutoAdjustable = dialogWrapper.isAutoAdjustable()[ CD ]
Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()-->Line_28 $$ location = dialogWrapper.getInitialLocation()[ FD ]
Line_71 $$ Window window = e.getWindow()-->Line_72 $$ if (window instanceof Dialog) [ FD ]
Line_86 $$ if (SystemInfo.isMac && myProject != null && Registry.is("ide.mac.fix.dialog.showing") && !dialogWrapper.isModalProgress()) -->Line_88 $$ AppIcon.getInstance().requestFocus(frame)[ CD ]
Line_28 $$ location = dialogWrapper.getInitialLocation()-->Line_31 $$ setLocation(location)[ FD ]
Line_2 $$ public void show() -->Line_6 $$ Point location = null[ CD ]
Line_58 $$ focusManager.get().doWhenFocusSettlesDown(new Runnable() -->Line_60 $$ disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get())[ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_71 $$ Window window = e.getWindow()[ CD ]
Line_54 $$ final Ref<IdeFocusManager> focusManager = new Ref<IdeFocusManager>(null)-->Line_57 $$ focusManager.set(getFocusManager())[ FD ]
Line_2 $$ public void show() -->Line_90 $$ setBackground(UIUtil.getPanelBackground())[ CD ]
Line_14 $$ if (myDimensionServiceKey != null) -->Line_17 $$ Dimension size = DimensionService.getInstance().getSize(myDimensionServiceKey, projectGuess)[ CD ]
Line_92 $$ if (app != null && !app.isLoaded() && Splash.BOUNDS != null) -->Line_95 $$ setLocation(loc)[ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_53 $$ if (!isModal()) [ CD ]
Line_54 $$ final Ref<IdeFocusManager> focusManager = new Ref<IdeFocusManager>(null)-->Line_64 $$ disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get())[ FD ]
Line_69 $$ if (!SystemInfo.isMacOSLion)-->Line_70 $$ return[ CD ]
Line_73 $$ ID _native = MacUtil.findWindowForTitle(((Dialog) window).getTitle())-->Line_75 $$ Foundation.invoke(_native, "setCollectionBehavior:", 1 << 8)[ FD ]
Line_53 $$ if (!isModal()) -->Line_55 $$ Project project = getProject()[ CD ]
Line_56 $$ if (project != null && !project.isDisposed()) -->Line_64 $$ disposeFocusTrackbackIfNoChildWindowFocused(focusManager.get())[ CD ]
Line_2 $$ public void show() -->Line_97 $$ super.show()[ CD ]
Line_53 $$ if (!isModal()) -->Line_54 $$ final Ref<IdeFocusManager> focusManager = new Ref<IdeFocusManager>(null)[ CD ]
Line_2 $$ public void show() -->Line_86 $$ if (SystemInfo.isMac && myProject != null && Registry.is("ide.mac.fix.dialog.showing") && !dialogWrapper.isModalProgress()) [ CD ]
Line_2 $$ public void show() -->Line_27 $$ if (location == null) [ CD ]
Line_7 $$ if (isAutoAdjustable) -->Line_14 $$ if (myDimensionServiceKey != null) [ CD ]
Line_6 $$ Point location = null-->Line_31 $$ setLocation(location)[ FD ]
Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)-->Line_30 $$ if (location != null) [ FD ]
Line_2 $$ public void show() -->Line_35 $$ if (isAutoAdjustable) [ CD ]
Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()-->Line_5 $$ boolean isAutoAdjustable = dialogWrapper.isAutoAdjustable()[ FD ]
Line_6 $$ Point location = null-->Line_27 $$ if (location == null) [ FD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_71 $$ Window window = e.getWindow()[ FD ]
Line_43 $$ if (wrapper != null && myFocusTrackback != null) -->Line_45 $$ myFocusTrackback.registerFocusComponent(new FocusTrackback.ComponentQuery() [ CD ]
Line_53 $$ if (!isModal()) -->Line_56 $$ if (project != null && !project.isDisposed()) [ CD ]
Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)-->Line_20 $$ _setSizeForLocation(myInitialSize.width, myInitialSize.height, location)[ FD ]
Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)-->Line_31 $$ setLocation(location)[ FD ]
Line_7 $$ if (isAutoAdjustable) -->Line_13 $$ myDimensionServiceKey = dialogWrapper.getDimensionKey()[ CD ]
Line_30 $$ if (location != null) -->Line_31 $$ setLocation(location)[ CD ]
Line_18 $$ if (size != null) -->Line_20 $$ _setSizeForLocation(myInitialSize.width, myInitialSize.height, location)[ CD ]
Line_43 $$ if (wrapper != null && myFocusTrackback != null) -->Line_44 $$ myFocusTrackback.cleanParentWindow()[ CD ]
Line_15 $$ final Project projectGuess = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(this))-->Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)[ FD ]
Line_35 $$ if (isAutoAdjustable) -->Line_37 $$ ScreenUtil.fitToScreen(bounds)[ CD ]
Line_28 $$ location = dialogWrapper.getInitialLocation()-->Line_30 $$ if (location != null) [ FD ]
Line_73 $$ ID _native = MacUtil.findWindowForTitle(((Dialog) window).getTitle())-->Line_74 $$ if (_native != null && _native.intValue() > 0) [ FD ]
Line_35 $$ if (isAutoAdjustable) -->Line_38 $$ setBounds(bounds)[ CD ]
Line_7 $$ if (isAutoAdjustable) -->Line_12 $$ setSize((int) (getWidth() * dialogWrapper.getHorizontalStretch()), (int) (getHeight() * dialogWrapper.getVerticalStretch()))[ CD ]
Line_7 $$ if (isAutoAdjustable) -->Line_11 $$ setSize(Math.max(packedSize.width, minSize.width), Math.max(packedSize.height, minSize.height))[ CD ]
Line_23 $$ if (myInitialSize == null) -->Line_24 $$ myInitialSize = getSize()[ CD ]
Line_6 $$ Point location = null-->Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)[ FD ]
Line_14 $$ if (myDimensionServiceKey != null) -->Line_15 $$ final Project projectGuess = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(this))[ CD ]
Line_80 $$ if (Registry.is("actionSystem.fixLostTyping")) -->Line_82 $$ if (queue != null) [ CD ]
Line_72 $$ if (window instanceof Dialog) -->Line_74 $$ if (_native != null && _native.intValue() > 0) [ CD ]
Line_15 $$ final Project projectGuess = CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(this))-->Line_17 $$ Dimension size = DimensionService.getInstance().getSize(myDimensionServiceKey, projectGuess)[ FD ]
Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()-->Line_86 $$ if (SystemInfo.isMac && myProject != null && Registry.is("ide.mac.fix.dialog.showing") && !dialogWrapper.isModalProgress()) [ FD ]
Line_7 $$ if (isAutoAdjustable) -->Line_23 $$ if (myInitialSize == null) [ CD ]
Line_72 $$ if (window instanceof Dialog) -->Line_73 $$ ID _native = MacUtil.findWindowForTitle(((Dialog) window).getTitle())[ CD ]
Line_55 $$ Project project = getProject()-->Line_56 $$ if (project != null && !project.isDisposed()) [ FD ]
Line_2 $$ public void show() -->Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()[ CD ]
Line_6 $$ Point location = null-->Line_30 $$ if (location != null) [ FD ]
Line_7 $$ if (isAutoAdjustable) -->Line_8 $$ pack()[ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_43 $$ if (wrapper != null && myFocusTrackback != null) [ CD ]
Line_92 $$ if (app != null && !app.isLoaded() && Splash.BOUNDS != null) -->Line_94 $$ loc.y = Splash.BOUNDS.y + Splash.BOUNDS.height[ CD ]
Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)-->Line_27 $$ if (location == null) [ FD ]
Line_35 $$ if (isAutoAdjustable) -->Line_36 $$ final Rectangle bounds = getBounds()[ CD ]
Line_56 $$ if (project != null && !project.isDisposed()) -->Line_58 $$ focusManager.get().doWhenFocusSettlesDown(new Runnable() [ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_72 $$ if (window instanceof Dialog) [ CD ]
Line_92 $$ if (app != null && !app.isLoaded() && Splash.BOUNDS != null) -->Line_93 $$ final Point loc = getLocation()[ CD ]
Line_7 $$ if (isAutoAdjustable) -->Line_10 $$ Dimension minSize = getMinimumSize()[ CD ]
Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)-->Line_28 $$ location = dialogWrapper.getInitialLocation()[ FD ]
Line_30 $$ if (location != null) -->Line_33 $$ setLocationRelativeTo(getOwner())[ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_42 $$ final DialogWrapper wrapper = getDialogWrapper()[ CD ]
Line_56 $$ if (project != null && !project.isDisposed()) -->Line_57 $$ focusManager.set(getFocusManager())[ CD ]
Line_42 $$ final DialogWrapper wrapper = getDialogWrapper()-->Line_47 $$ return wrapper.getPreferredFocusedComponent()[ FD ]
Line_4 $$ final DialogWrapper dialogWrapper = getDialogWrapper()-->Line_12 $$ setSize((int) (getWidth() * dialogWrapper.getHorizontalStretch()), (int) (getHeight() * dialogWrapper.getVerticalStretch()))[ FD ]
Line_2 $$ public void show() -->Line_91 $$ final ApplicationEx app = ApplicationManagerEx.getApplicationEx()[ CD ]
Line_45 $$ myFocusTrackback.registerFocusComponent(new FocusTrackback.ComponentQuery() -->Line_47 $$ return wrapper.getPreferredFocusedComponent()[ CD ]
Line_14 $$ if (myDimensionServiceKey != null) -->Line_16 $$ location = DimensionService.getInstance().getLocation(myDimensionServiceKey, projectGuess)[ CD ]
Line_36 $$ final Rectangle bounds = getBounds()-->Line_38 $$ setBounds(bounds)[ FD ]
Line_17 $$ Dimension size = DimensionService.getInstance().getSize(myDimensionServiceKey, projectGuess)-->Line_18 $$ if (size != null) [ FD ]
Line_74 $$ if (_native != null && _native.intValue() > 0) -->Line_75 $$ Foundation.invoke(_native, "setCollectionBehavior:", 1 << 8)[ CD ]
Line_2 $$ public void show() -->Line_30 $$ if (location != null) [ CD ]
Line_40 $$ addWindowListener(new WindowAdapter() -->Line_69 $$ if (!SystemInfo.isMacOSLion)[ CD ]
Line_2 $$ public void show() -->Line_40 $$ addWindowListener(new WindowAdapter() [ CD ]
Line_82 $$ if (queue != null) -->Line_83 $$ queue.getKeyEventDispatcher().resetState()[ CD ]
Line_27 $$ if (location == null) -->Line_28 $$ location = dialogWrapper.getInitialLocation()[ CD ]
