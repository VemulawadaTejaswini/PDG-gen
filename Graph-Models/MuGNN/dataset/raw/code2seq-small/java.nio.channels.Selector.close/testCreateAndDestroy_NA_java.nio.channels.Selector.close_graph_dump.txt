Line_22 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_28 $$ wakeUpThread.join()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_10 $$ wakeUpThread.interrupt()[ FD ]
Line_8 $$ Selector selector = _selectorIntraband.selector-->Line_13 $$ selector.close()[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_12 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_33 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ Selector selector = _selectorIntraband.selector-->Line_25 $$ selector = _selectorIntraband.selector[ FD ]
Line_8 $$ Selector selector = _selectorIntraband.selector-->Line_30 $$ selector.close()[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SelectorIntraband.class.getName(), Level.INFO)) -->Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_28 $$ wakeUpThread.join()[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_17 $$ String pollingThreadName = pollingThread.getName()[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_11 $$ wakeUpThread.join()[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_23 $$ wakeUpThread.start()[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_29 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_24 $$ pollingThread = _selectorIntraband.pollingThread-->Line_29 $$ while (pollingThread.getState() != Thread.State.BLOCKED) [ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_27 $$ wakeUpThread.interrupt()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_33 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ String pollingThreadName = pollingThread.getName()-->Line_19 $$ Assert.assertEquals(pollingThreadName.concat(" exiting gracefully on selector closure"), logRecord.getMessage())[ FD ]
Line_25 $$ selector = _selectorIntraband.selector-->Line_30 $$ selector.close()[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_22 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))[ FD ]
Line_24 $$ pollingThread = _selectorIntraband.pollingThread-->Line_32 $$ pollingThread.join()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_18 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals(pollingThreadName.concat(" exiting gracefully on selector closure"), logRecord.getMessage())[ FD ]
Line_22 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_27 $$ wakeUpThread.interrupt()[ FD ]
Line_5 $$ Thread wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_6 $$ wakeUpThread.start()[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_24 $$ pollingThread = _selectorIntraband.pollingThread[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_15 $$ pollingThread.join()[ FD ]
Line_7 $$ Thread pollingThread = _selectorIntraband.pollingThread-->Line_32 $$ pollingThread.join()[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(SelectorIntraband.class.getName(), Level.INFO)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_22 $$ wakeUpThread = new Thread(new WakeUpRunnable(_selectorIntraband))-->Line_23 $$ wakeUpThread.start()[ FD ]
