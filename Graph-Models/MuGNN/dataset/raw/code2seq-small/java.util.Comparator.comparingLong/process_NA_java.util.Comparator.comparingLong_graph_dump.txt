Line_16 $$ long maxSize = round(averageSize * 1.01)-->Line_17 $$ if (nodeSize <= maxSize) [ FD ]
Line_10 $$ String currentNode = nodeManager.getCurrentNode().getNodeIdentifier()-->Line_14 $$ long nodeSize = nodes.get(currentNode)[ FD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_11 $$ if (!nodes.containsKey(currentNode)) [ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_31 $$ if (target == null) [ CD ]
Line_2 $$ void process() -->Line_5 $$ Set<String> activeNodes = nodeManager.getNodes(ACTIVE).stream().map(Node::<>getNodeIdentifier).collect(toSet())[ CD ]
Line_2 $$ void process() -->Line_16 $$ long maxSize = round(averageSize * 1.01)[ CD ]
Line_14 $$ long nodeSize = nodes.get(currentNode)-->Line_17 $$ if (nodeSize <= maxSize) [ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ FD ]
Line_41 $$ File file = storageService.getStorageFile(shardUuid)-->Line_42 $$ if (file.exists() && !file.delete()) [ FD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_27 $$ if (!backupStore.get().shardExists(shardUuid)) [ FD ]
Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_7 $$ if (nodes.isEmpty()) [ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_24 $$ ShardMetadata shard = queue.remove()[ CD ]
Line_11 $$ if (!nodes.containsKey(currentNode)) -->Line_12 $$ return[ CD ]
Line_24 $$ ShardMetadata shard = queue.remove()-->Line_39 $$ shardManager.assignShard(shard.getTableId(), shardUuid, target)[ FD ]
Line_27 $$ if (!backupStore.get().shardExists(shardUuid)) -->Line_28 $$ log.warn("No backup for shard: %s", shardUuid)[ CD ]
Line_2 $$ void process() -->Line_14 $$ long nodeSize = nodes.get(currentNode)[ CD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_7 $$ if (nodes.isEmpty()) [ FD ]
Line_10 $$ String currentNode = nodeManager.getCurrentNode().getNodeIdentifier()-->Line_11 $$ if (!nodes.containsKey(currentNode)) [ FD ]
Line_2 $$ void process() -->Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))[ CD ]
Line_10 $$ String currentNode = nodeManager.getCurrentNode().getNodeIdentifier()-->Line_21 $$ List<ShardMetadata> shards = shardManager.getNodeShards(currentNode).stream().sorted(comparingLong(ShardMetadata::<>getCompressedSize).reversed()).collect(toList())[ FD ]
Line_14 $$ long nodeSize = nodes.get(currentNode)-->Line_38 $$ nodeSize -= shardSize[ FD ]
Line_2 $$ void process() -->Line_15 $$ long averageSize = round(nodes.values().stream().mapToLong(Long::<>longValue).average().getAsDouble())[ CD ]
Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)-->Line_31 $$ if (target == null) [ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_34 $$ long targetSize = nodes.get(target)[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_37 $$ nodes.put(target, targetSize + shardSize)[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_25 $$ long shardSize = shard.getCompressedSize()[ CD ]
Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))-->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ FD ]
Line_17 $$ if (nodeSize <= maxSize) -->Line_18 $$ return[ CD ]
Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))-->Line_34 $$ long targetSize = nodes.get(target)[ FD ]
Line_22 $$ Queue<ShardMetadata> queue = new ArrayDeque(shards)-->Line_24 $$ ShardMetadata shard = queue.remove()[ FD ]
Line_24 $$ ShardMetadata shard = queue.remove()-->Line_40 $$ shardManager.unassignShard(shard.getTableId(), shardUuid, currentNode)[ FD ]
Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))-->Line_37 $$ nodes.put(target, targetSize + shardSize)[ FD ]
Line_2 $$ void process() -->Line_21 $$ List<ShardMetadata> shards = shardManager.getNodeShards(currentNode).stream().sorted(comparingLong(ShardMetadata::<>getCompressedSize).reversed()).collect(toList())[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_41 $$ File file = storageService.getStorageFile(shardUuid)[ CD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_14 $$ long nodeSize = nodes.get(currentNode)[ FD ]
Line_31 $$ if (target == null) -->Line_32 $$ return[ CD ]
Line_2 $$ void process() -->Line_17 $$ if (nodeSize <= maxSize) [ CD ]
Line_24 $$ ShardMetadata shard = queue.remove()-->Line_26 $$ UUID shardUuid = shard.getShardUuid()[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_15 $$ long averageSize = round(nodes.values().stream().mapToLong(Long::<>longValue).average().getAsDouble())[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_40 $$ shardManager.unassignShard(shard.getTableId(), shardUuid, currentNode)[ CD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_34 $$ long targetSize = nodes.get(target)[ FD ]
Line_2 $$ void process() -->Line_11 $$ if (!nodes.containsKey(currentNode)) [ CD ]
Line_22 $$ Queue<ShardMetadata> queue = new ArrayDeque(shards)-->Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) [ FD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_40 $$ shardManager.unassignShard(shard.getTableId(), shardUuid, currentNode)[ FD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_39 $$ shardManager.assignShard(shard.getTableId(), shardUuid, target)[ FD ]
Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)-->Line_37 $$ nodes.put(target, targetSize + shardSize)[ FD ]
Line_14 $$ long nodeSize = nodes.get(currentNode)-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))[ FD ]
Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()-->Line_11 $$ if (!nodes.containsKey(currentNode)) [ FD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_14 $$ long nodeSize = nodes.get(currentNode)[ FD ]
Line_25 $$ long shardSize = shard.getCompressedSize()-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_39 $$ shardManager.assignShard(shard.getTableId(), shardUuid, target)[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_27 $$ if (!backupStore.get().shardExists(shardUuid)) [ CD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_28 $$ log.warn("No backup for shard: %s", shardUuid)[ FD ]
Line_2 $$ void process() -->Line_22 $$ Queue<ShardMetadata> queue = new ArrayDeque(shards)[ CD ]
Line_2 $$ void process() -->Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) [ CD ]
Line_7 $$ if (nodes.isEmpty()) -->Line_8 $$ return[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_26 $$ UUID shardUuid = shard.getShardUuid()[ CD ]
Line_10 $$ String currentNode = nodeManager.getCurrentNode().getNodeIdentifier()-->Line_40 $$ shardManager.unassignShard(shard.getTableId(), shardUuid, currentNode)[ FD ]
Line_24 $$ ShardMetadata shard = queue.remove()-->Line_25 $$ long shardSize = shard.getCompressedSize()[ FD ]
Line_42 $$ if (file.exists() && !file.delete()) -->Line_43 $$ log.warn("Failed to delete shard file: %s", file)[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_34 $$ long targetSize = nodes.get(target)[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_37 $$ nodes.put(target, targetSize + shardSize)[ CD ]
Line_2 $$ void process() -->Line_10 $$ String currentNode = nodeManager.getCurrentNode().getNodeIdentifier()[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ CD ]
Line_38 $$ nodeSize -= shardSize-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_15 $$ long averageSize = round(nodes.values().stream().mapToLong(Long::<>longValue).average().getAsDouble())-->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ FD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_37 $$ nodes.put(target, targetSize + shardSize)[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_42 $$ if (file.exists() && !file.delete()) [ CD ]
Line_34 $$ long targetSize = nodes.get(target)-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_41 $$ File file = storageService.getStorageFile(shardUuid)[ FD ]
Line_2 $$ void process() -->Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))[ CD ]
Line_2 $$ void process() -->Line_7 $$ if (nodes.isEmpty()) [ CD ]
Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)-->Line_39 $$ shardManager.assignShard(shard.getTableId(), shardUuid, target)[ FD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_20 $$ nodes = new HashMap(filterValues(nodes,  size -> size <= averageSize))[ FD ]
Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)-->Line_34 $$ long targetSize = nodes.get(target)[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_38 $$ nodeSize -= shardSize[ CD ]
Line_25 $$ long shardSize = shard.getCompressedSize()-->Line_38 $$ nodeSize -= shardSize[ FD ]
Line_26 $$ UUID shardUuid = shard.getShardUuid()-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_15 $$ long averageSize = round(nodes.values().stream().mapToLong(Long::<>longValue).average().getAsDouble())-->Line_35 $$ log.info("Moving shard %s to node %s (shard: %s, node: %s, average: %s, target: %s)", shardUuid, target, shardSize, nodeSize, averageSize, targetSize)[ FD ]
Line_41 $$ File file = storageService.getStorageFile(shardUuid)-->Line_43 $$ log.warn("Failed to delete shard file: %s", file)[ FD ]
Line_2 $$ void process() -->Line_4 $$ Map<String, Long> nodes = shardManager.getNodeBytes()[ CD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_36 $$ shardsEjected.update(1)[ CD ]
Line_6 $$ nodes = new HashMap(filterKeys(nodes, activeNodes::<>contains))-->Line_15 $$ long averageSize = round(nodes.values().stream().mapToLong(Long::<>longValue).average().getAsDouble())[ FD ]
Line_25 $$ long shardSize = shard.getCompressedSize()-->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ FD ]
Line_23 $$ while ((nodeSize > maxSize) && !queue.isEmpty()) -->Line_30 $$ String target = pickTargetNode(nodes, shardSize, averageSize)[ CD ]
Line_2 $$ void process() -->Line_3 $$ checkState(backupStore.isPresent(), "backup store must be present")[ CD ]
