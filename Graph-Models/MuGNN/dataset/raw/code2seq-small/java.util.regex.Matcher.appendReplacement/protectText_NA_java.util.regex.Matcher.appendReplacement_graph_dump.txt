Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_3 $$ Pattern pattern = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_10 $$ _protectedMap.put(hash, matcher.group(2))[ FD ]
Line_3 $$ Pattern pattern = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL)-->Line_4 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_6 $$ while (matcher.find()) -->Line_8 $$ String hash = DigesterUtil.digest(protectedText)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_6 $$ while (matcher.find()) [ FD ]
Line_7 $$ String protectedText = matcher.group()-->Line_8 $$ String hash = DigesterUtil.digest(protectedText)[ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_7 $$ String protectedText = matcher.group()[ FD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_6 $$ while (matcher.find()) [ CD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ return sb.toString()[ FD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_12 $$ matcher.appendTail(sb)[ CD ]
Line_8 $$ String hash = DigesterUtil.digest(protectedText)-->Line_10 $$ _protectedMap.put(hash, matcher.group(2))[ FD ]
Line_6 $$ while (matcher.find()) -->Line_9 $$ matcher.appendReplacement(sb, "$1" + hash + "$3")[ CD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_9 $$ matcher.appendReplacement(sb, "$1" + hash + "$3")[ FD ]
Line_5 $$ StringBuffer sb = new StringBuffer()-->Line_12 $$ matcher.appendTail(sb)[ FD ]
Line_6 $$ while (matcher.find()) -->Line_7 $$ String protectedText = matcher.group()[ CD ]
Line_6 $$ while (matcher.find()) -->Line_10 $$ _protectedMap.put(hash, matcher.group(2))[ CD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_3 $$ Pattern pattern = Pattern.compile(markupRegex, Pattern.MULTILINE | Pattern.DOTALL)[ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_12 $$ matcher.appendTail(sb)[ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(content)-->Line_9 $$ matcher.appendReplacement(sb, "$1" + hash + "$3")[ FD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_13 $$ return sb.toString()[ CD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_4 $$ Matcher matcher = pattern.matcher(content)[ FD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_4 $$ Matcher matcher = pattern.matcher(content)[ CD ]
Line_2 $$ protected String protectText(String content, String markupRegex) -->Line_5 $$ StringBuffer sb = new StringBuffer()[ CD ]
