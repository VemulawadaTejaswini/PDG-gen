Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_3 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)[ CD ]
Line_27 $$ if (interactive) -->Line_34 $$ PsiFile psiFile = PsiManager.getInstance(project).findFile(file)[ CD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_23 $$ String name = template.getSegmentName(i)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_24 $$ String value = "\"" + properties.getProperty(name, "") + "\""[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_14 $$ while (matcher.find()) [ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_11 $$ Pattern pattern = Pattern.compile("\\$\\[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_3 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)[ FD ]
Line_5 $$ Properties allProperties = manager.getDefaultProperties()-->Line_7 $$ allProperties.putAll(properties)[ FD ]
Line_13 $$ StringBuffer builder = new StringBuffer()-->Line_17 $$ matcher.appendTail(builder)[ FD ]
Line_3 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_5 $$ Properties allProperties = manager.getDefaultProperties()[ FD ]
Line_10 $$ String text = fileTemplate.getText(allProperties)-->Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)[ FD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_21 $$ if (i == template.getEndSegmentNumber())[ FD ]
Line_6 $$ if (!interactive) -->Line_7 $$ allProperties.putAll(properties)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_9 $$ allProperties.putAll(conditions)[ CD ]
Line_5 $$ Properties allProperties = manager.getDefaultProperties()-->Line_10 $$ String text = fileTemplate.getText(allProperties)[ FD ]
Line_23 $$ String name = template.getSegmentName(i)-->Line_24 $$ String value = "\"" + properties.getProperty(name, "") + "\""[ FD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)[ CD ]
Line_27 $$ if (interactive) -->Line_30 $$ editor.getDocument().setText("")[ CD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_21 $$ if (i == template.getEndSegmentNumber())[ CD ]
Line_3 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_4 $$ FileTemplate fileTemplate = manager.getJ2eeTemplate(templateName)[ FD ]
Line_35 $$ if (psiFile != null) -->Line_36 $$ new ReformatCodeProcessor(project, psiFile, null, false).run()[ CD ]
Line_27 $$ if (interactive) -->Line_35 $$ if (psiFile != null) [ CD ]
Line_27 $$ if (interactive) -->Line_28 $$ OpenFileDescriptor descriptor = new OpenFileDescriptor(project, file)[ CD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_25 $$ template.addVariable(name, value, value, true)[ FD ]
Line_18 $$ text = builder.toString()-->Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)[ FD ]
Line_23 $$ String name = template.getSegmentName(i)-->Line_25 $$ template.addVariable(name, value, value, true)[ FD ]
Line_34 $$ PsiFile psiFile = PsiManager.getInstance(project).findFile(file)-->Line_35 $$ if (psiFile != null) [ FD ]
Line_13 $$ StringBuffer builder = new StringBuffer()-->Line_18 $$ text = builder.toString()[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_13 $$ StringBuffer builder = new StringBuffer()[ CD ]
Line_12 $$ Matcher matcher = pattern.matcher(text)-->Line_17 $$ matcher.appendTail(builder)[ FD ]
Line_10 $$ String text = fileTemplate.getText(allProperties)-->Line_18 $$ text = builder.toString()[ FD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_33 $$ VfsUtil.saveText(file, template.getTemplateText())[ FD ]
Line_11 $$ Pattern pattern = Pattern.compile("\\$\\-->Line_12 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_12 $$ Matcher matcher = pattern.matcher(text)-->Line_15 $$ matcher.appendReplacement(builder, "\\$" + matcher.group(1).toUpperCase() + "\\$")[ FD ]
Line_27 $$ if (interactive) -->Line_29 $$ Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_7 $$ allProperties.putAll(properties)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_6 $$ if (!interactive) [ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_18 $$ text = builder.toString()[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) [ CD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_21 $$ if (i == template.getEndSegmentNumber())[ FD ]
Line_27 $$ if (interactive) -->Line_33 $$ VfsUtil.saveText(file, template.getTemplateText())[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_33 $$ VfsUtil.saveText(file, template.getTemplateText())[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_34 $$ PsiFile psiFile = PsiManager.getInstance(project).findFile(file)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_31 $$ TemplateManager.getInstance(project).startTemplate(editor, template)[ FD ]
Line_10 $$ String text = fileTemplate.getText(allProperties)-->Line_12 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_13 $$ StringBuffer builder = new StringBuffer()-->Line_15 $$ matcher.appendReplacement(builder, "\\$" + matcher.group(1).toUpperCase() + "\\$")[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_6 $$ if (!interactive) [ CD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_24 $$ String value = "\"" + properties.getProperty(name, "") + "\""[ CD ]
Line_5 $$ Properties allProperties = manager.getDefaultProperties()-->Line_9 $$ allProperties.putAll(conditions)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)[ FD ]
Line_27 $$ if (interactive) -->Line_31 $$ TemplateManager.getInstance(project).startTemplate(editor, template)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_10 $$ String text = fileTemplate.getText(allProperties)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_4 $$ FileTemplate fileTemplate = manager.getJ2eeTemplate(templateName)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_5 $$ Properties allProperties = manager.getDefaultProperties()[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_9 $$ allProperties.putAll(conditions)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_4 $$ FileTemplate fileTemplate = manager.getJ2eeTemplate(templateName)[ FD ]
Line_12 $$ Matcher matcher = pattern.matcher(text)-->Line_14 $$ while (matcher.find()) [ FD ]
Line_29 $$ Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)-->Line_30 $$ editor.getDocument().setText("")[ FD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_31 $$ TemplateManager.getInstance(project).startTemplate(editor, template)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_12 $$ Matcher matcher = pattern.matcher(text)[ CD ]
Line_19 $$ TemplateImpl template = (TemplateImpl) TemplateManager.getInstance(project).createTemplate("", "", text)-->Line_23 $$ String name = template.getSegmentName(i)[ FD ]
Line_14 $$ while (matcher.find()) -->Line_15 $$ matcher.appendReplacement(builder, "\\$" + matcher.group(1).toUpperCase() + "\\$")[ CD ]
Line_4 $$ FileTemplate fileTemplate = manager.getJ2eeTemplate(templateName)-->Line_10 $$ String text = fileTemplate.getText(allProperties)[ FD ]
Line_24 $$ String value = "\"" + properties.getProperty(name, "") + "\""-->Line_25 $$ template.addVariable(name, value, value, true)[ FD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_27 $$ if (interactive) [ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_17 $$ matcher.appendTail(builder)[ CD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_25 $$ template.addVariable(name, value, value, true)[ CD ]
Line_28 $$ OpenFileDescriptor descriptor = new OpenFileDescriptor(project, file)-->Line_29 $$ Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ FD ]
Line_20 $$ for (int i = 0; i < template.getSegmentsCount(); i++) -->Line_23 $$ String name = template.getSegmentName(i)[ CD ]
Line_2 $$ private static void runOrApplyFileTemplate(Project project, VirtualFile file, String templateName, Properties properties, Properties conditions, boolean interactive) throws IOException -->Line_29 $$ Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)[ FD ]
Line_29 $$ Editor editor = FileEditorManager.getInstance(project).openTextEditor(descriptor, true)-->Line_31 $$ TemplateManager.getInstance(project).startTemplate(editor, template)[ FD ]
