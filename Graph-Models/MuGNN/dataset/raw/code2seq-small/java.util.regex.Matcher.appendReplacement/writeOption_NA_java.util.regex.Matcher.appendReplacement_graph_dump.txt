Line_10 $$ Matcher m = option.pattern.matcher(content)-->Line_13 $$ m.appendReplacement(b, Matcher.quoteReplacement(optionValue))[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_23 $$ FileUtil.setReadOnlyAttribute(file.getPath(), false)[ FD ]
Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue-->Line_27 $$ FileUtil.writeToFile(file, content)[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_22 $$ if (file.exists()) [ FD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_25 $$ FileUtil.ensureExists(file.getParentFile())[ FD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_9 $$ if (!StringUtil.isEmptyOrSpaces(content)) [ FD ]
Line_11 $$ if (m.find()) -->Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue[ CD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_10 $$ Matcher m = option.pattern.matcher(content)[ FD ]
Line_12 $$ StringBuffer b = new StringBuffer()-->Line_13 $$ m.appendReplacement(b, Matcher.quoteReplacement(optionValue))[ FD ]
Line_10 $$ Matcher m = option.pattern.matcher(content)-->Line_14 $$ m.appendTail(b)[ FD ]
Line_22 $$ if (file.exists()) -->Line_23 $$ FileUtil.setReadOnlyAttribute(file.getPath(), false)[ CD ]
Line_9 $$ if (!StringUtil.isEmptyOrSpaces(content)) -->Line_11 $$ if (m.find()) [ CD ]
Line_10 $$ Matcher m = option.pattern.matcher(content)-->Line_11 $$ if (m.find()) [ FD ]
Line_11 $$ if (m.find()) -->Line_15 $$ content = b.toString()[ CD ]
Line_15 $$ content = b.toString()-->Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue[ FD ]
Line_2 $$ private static void writeOption(MemoryKind option, int value) -->Line_3 $$ File file = getWriteFile()[ CD ]
Line_22 $$ if (file.exists()) -->Line_25 $$ FileUtil.ensureExists(file.getParentFile())[ CD ]
Line_8 $$ String optionValue = option.option + value + "m"-->Line_13 $$ m.appendReplacement(b, Matcher.quoteReplacement(optionValue))[ FD ]
Line_8 $$ String optionValue = option.option + value + "m"-->Line_20 $$ content = optionValue[ FD ]
Line_12 $$ StringBuffer b = new StringBuffer()-->Line_15 $$ content = b.toString()[ FD ]
Line_11 $$ if (m.find()) -->Line_13 $$ m.appendReplacement(b, Matcher.quoteReplacement(optionValue))[ CD ]
Line_2 $$ private static void writeOption(MemoryKind option, int value) -->Line_4 $$ if (file == null)[ CD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_15 $$ content = b.toString()[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_27 $$ FileUtil.writeToFile(file, content)[ FD ]
Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue-->Line_20 $$ content = optionValue[ FD ]
Line_12 $$ StringBuffer b = new StringBuffer()-->Line_14 $$ m.appendTail(b)[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()[ FD ]
Line_4 $$ if (file == null)-->Line_5 $$ return[ CD ]
Line_9 $$ if (!StringUtil.isEmptyOrSpaces(content)) -->Line_20 $$ content = optionValue[ CD ]
Line_15 $$ content = b.toString()-->Line_27 $$ FileUtil.writeToFile(file, content)[ FD ]
Line_3 $$ File file = getWriteFile()-->Line_4 $$ if (file == null)[ FD ]
Line_8 $$ String optionValue = option.option + value + "m"-->Line_17 $$ content = StringUtil.trimTrailing(content) + SystemProperties.getLineSeparator() + optionValue[ FD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_20 $$ content = optionValue[ FD ]
Line_15 $$ content = b.toString()-->Line_20 $$ content = optionValue[ FD ]
Line_11 $$ if (m.find()) -->Line_14 $$ m.appendTail(b)[ CD ]
Line_20 $$ content = optionValue-->Line_27 $$ FileUtil.writeToFile(file, content)[ FD ]
Line_7 $$ String content = file.exists() ? FileUtil.loadFile(file) : read()-->Line_27 $$ FileUtil.writeToFile(file, content)[ FD ]
Line_9 $$ if (!StringUtil.isEmptyOrSpaces(content)) -->Line_10 $$ Matcher m = option.pattern.matcher(content)[ CD ]
Line_11 $$ if (m.find()) -->Line_12 $$ StringBuffer b = new StringBuffer()[ CD ]
