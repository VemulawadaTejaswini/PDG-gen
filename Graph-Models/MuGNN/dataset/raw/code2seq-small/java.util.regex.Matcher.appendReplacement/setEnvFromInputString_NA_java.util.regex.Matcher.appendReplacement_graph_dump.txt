Line_2 $$ public static void setEnvFromInputString(Map<String, String> env, String envString, String classPathSeparator) -->Line_3 $$ if (envString != null && envString.length() > 0) [ FD ]
Line_21 $$ replace = ""-->Line_22 $$ m.appendReplacement(sb, Matcher.quoteReplacement(replace))[ FD ]
Line_10 $$ StringBuffer sb = new StringBuffer()-->Line_24 $$ m.appendTail(sb)[ FD ]
Line_3 $$ if (envString != null && envString.length() > 0) -->Line_5 $$ Pattern p = Pattern.compile(Shell.getEnvironmentVariableRegex())[ CD ]
Line_18 $$ replace = System.getenv(var)-->Line_21 $$ replace = ""[ FD ]
Line_11 $$ while (m.find()) -->Line_12 $$ String var = m.group(1)[ CD ]
Line_12 $$ String var = m.group(1)-->Line_18 $$ replace = System.getenv(var)[ FD ]
Line_9 $$ Matcher m = p.matcher(parts[1])-->Line_22 $$ m.appendReplacement(sb, Matcher.quoteReplacement(replace))[ FD ]
Line_9 $$ Matcher m = p.matcher(parts[1])-->Line_12 $$ String var = m.group(1)[ FD ]
Line_2 $$ public static void setEnvFromInputString(Map<String, String> env, String envString, String classPathSeparator) -->Line_4 $$ String[] childEnvs = envString.split(",")[ FD ]
Line_18 $$ replace = System.getenv(var)-->Line_22 $$ m.appendReplacement(sb, Matcher.quoteReplacement(replace))[ FD ]
Line_10 $$ StringBuffer sb = new StringBuffer()-->Line_22 $$ m.appendReplacement(sb, Matcher.quoteReplacement(replace))[ FD ]
Line_5 $$ Pattern p = Pattern.compile(Shell.getEnvironmentVariableRegex())-->Line_9 $$ Matcher m = p.matcher(parts[1])[ FD ]
Line_9 $$ Matcher m = p.matcher(parts[1])-->Line_24 $$ m.appendTail(sb)[ FD ]
Line_9 $$ Matcher m = p.matcher(parts[1])-->Line_11 $$ while (m.find()) [ FD ]
Line_2 $$ public static void setEnvFromInputString(Map<String, String> env, String envString, String classPathSeparator) -->Line_25 $$ addToEnvironment(env, parts[0], sb.toString(), classPathSeparator)[ FD ]
Line_2 $$ public static void setEnvFromInputString(Map<String, String> env, String envString, String classPathSeparator) -->Line_3 $$ if (envString != null && envString.length() > 0) [ CD ]
Line_3 $$ if (envString != null && envString.length() > 0) -->Line_4 $$ String[] childEnvs = envString.split(",")[ CD ]
Line_10 $$ StringBuffer sb = new StringBuffer()-->Line_25 $$ addToEnvironment(env, parts[0], sb.toString(), classPathSeparator)[ FD ]
Line_11 $$ while (m.find()) -->Line_22 $$ m.appendReplacement(sb, Matcher.quoteReplacement(replace))[ CD ]
