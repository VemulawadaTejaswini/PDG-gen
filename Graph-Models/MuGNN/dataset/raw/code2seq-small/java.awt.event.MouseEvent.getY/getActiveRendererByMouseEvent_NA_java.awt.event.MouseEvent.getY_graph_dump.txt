Line_12 $$ int lastVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())))-->Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() [ FD ]
Line_22 $$ int endY = startY + rectangle.height-->Line_24 $$ endY += myEditor.getLineHeight()[ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_9 $$ final ActiveGutterRenderer[] gutterRenderer = [ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_18 $$ Rectangle rectangle = getLineRendererRectangle(highlighter)[ CD ]
Line_11 $$ int firstVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())))-->Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() [ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() [ CD ]
Line_3 $$ if (findFoldingAnchorAt(e.getX(), e.getY()) != null) -->Line_4 $$ return null[ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_15 $$ LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer()[ CD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_11 $$ int firstVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y - myEditor.getLineHeight())))[ CD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_3 $$ if (findFoldingAnchorAt(e.getX(), e.getY()) != null) [ FD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_18 $$ Rectangle rectangle = getLineRendererRectangle(highlighter)[ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_6 $$ if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset()) [ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_16 $$ if (renderer == null || gutterRenderer[0] != null)[ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_15 $$ LineMarkerRenderer renderer = highlighter.getLineMarkerRenderer()[ FD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_21 $$ int startY = rectangle.y[ CD ]
Line_23 $$ if (startY == endY) -->Line_24 $$ endY += myEditor.getLineHeight()[ CD ]
Line_18 $$ Rectangle rectangle = getLineRendererRectangle(highlighter)-->Line_19 $$ if (rectangle == null)[ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_6 $$ if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset()) [ FD ]
Line_26 $$ if (startY < e.getY() && e.getY() <= endY) -->Line_27 $$ if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer) renderer).canDoAction(e)) [ CD ]
Line_16 $$ if (renderer == null || gutterRenderer[0] != null)-->Line_17 $$ return[ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_23 $$ if (startY == endY) [ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_26 $$ if (startY < e.getY() && e.getY() <= endY) [ CD ]
Line_27 $$ if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer) renderer).canDoAction(e)) -->Line_28 $$ gutterRenderer[0] = (ActiveGutterRenderer) renderer[ CD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_33 $$ return gutterRenderer[0][ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_19 $$ if (rectangle == null)[ CD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_3 $$ if (findFoldingAnchorAt(e.getX(), e.getY()) != null) [ CD ]
Line_19 $$ if (rectangle == null)-->Line_20 $$ return[ CD ]
Line_13 $$ processRangeHighlighters(firstVisibleOffset, lastVisibleOffset, new RangeHighlighterProcessor() -->Line_22 $$ int endY = startY + rectangle.height[ CD ]
Line_22 $$ int endY = startY + rectangle.height-->Line_23 $$ if (startY == endY) [ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_12 $$ int lastVisibleOffset = myEditor.logicalPositionToOffset(myEditor.xyToLogicalPosition(new Point(0, clip.y + clip.height + myEditor.getLineHeight())))[ CD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_10 $$ Rectangle clip = myEditor.getScrollingModel().getVisibleArea()[ CD ]
Line_21 $$ int startY = rectangle.y-->Line_23 $$ if (startY == endY) [ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_27 $$ if (renderer instanceof ActiveGutterRenderer && ((ActiveGutterRenderer) renderer).canDoAction(e)) [ FD ]
Line_2 $$ private ActiveGutterRenderer getActiveRendererByMouseEvent(final MouseEvent e) -->Line_26 $$ if (startY < e.getY() && e.getY() <= endY) [ FD ]
Line_6 $$ if (e.isConsumed() || e.getX() > getWhitespaceSeparatorOffset()) -->Line_7 $$ return null[ CD ]
