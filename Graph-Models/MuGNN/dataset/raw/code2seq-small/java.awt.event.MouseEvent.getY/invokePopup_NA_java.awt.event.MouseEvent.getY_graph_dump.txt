Line_2 $$ private void invokePopup(MouseEvent e) -->Line_58 $$ e.consume()[ FD ]
Line_28 $$ if (renderer != null) -->Line_58 $$ e.consume()[ CD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_32 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, actionGroup)[ FD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_23 $$ JPopupMenu menu = actionManager.createActionPopupMenu("", actionGroup).getComponent()[ FD ]
Line_28 $$ if (renderer != null) -->Line_29 $$ ActionGroup actionGroup = renderer.getPopupMenuActions()[ CD ]
Line_14 $$ if (!addActions.contains(action)) -->Line_15 $$ addActions.add(action)[ CD ]
Line_41 $$ if (checkDumbAware(rightButtonAction)) -->Line_42 $$ performAction(rightButtonAction, e, "ICON_NAVIGATION_SECONDARY_BUTTON", myEditor.getDataContext())[ CD ]
Line_40 $$ if (rightButtonAction != null) -->Line_41 $$ if (checkDumbAware(rightButtonAction)) [ CD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_9 $$ int line = EditorUtil.yPositionToLogicalLine(myEditor, p)[ CD ]
Line_50 $$ ActionGroup group = myCustomGutterPopupGroup-->Line_54 $$ if (group != null) [ FD ]
Line_27 $$ GutterIconRenderer renderer = getGutterRenderer(e)-->Line_29 $$ ActionGroup actionGroup = renderer.getPopupMenuActions()[ FD ]
Line_11 $$ final List<AnAction> list = gutterProvider.getPopupActions(line, myEditor)-->Line_12 $$ if (list != null) [ FD ]
Line_27 $$ GutterIconRenderer renderer = getGutterRenderer(e)-->Line_28 $$ if (renderer != null) [ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_33 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ FD ]
Line_32 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, actionGroup)-->Line_56 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ FD ]
Line_52 $$ group = (ActionGroup) CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER)-->Line_55 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group)[ FD ]
Line_10 $$ for (TextAnnotationGutterProvider gutterProvider : myTextAnnotationGutters) -->Line_11 $$ final List<AnAction> list = gutterProvider.getPopupActions(line, myEditor)[ FD ]
Line_7 $$ final List<AnAction> addActions = new ArrayList<AnAction>()-->Line_15 $$ addActions.add(action)[ FD ]
Line_30 $$ if (actionGroup != null) -->Line_31 $$ if (checkDumbAware(actionGroup)) [ CD ]
Line_50 $$ ActionGroup group = myCustomGutterPopupGroup-->Line_55 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group)[ FD ]
Line_20 $$ for (AnAction addAction : addActions) -->Line_21 $$ actionGroup.add(addAction)[ FD ]
Line_39 $$ AnAction rightButtonAction = renderer.getRightButtonClickAction()-->Line_41 $$ if (checkDumbAware(rightButtonAction)) [ FD ]
Line_13 $$ for (AnAction action : list) -->Line_14 $$ if (!addActions.contains(action)) [ FD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_7 $$ final List<AnAction> addActions = new ArrayList<AnAction>()[ CD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_24 $$ menu.show(this, e.getX(), e.getY())[ CD ]
Line_31 $$ if (checkDumbAware(actionGroup)) -->Line_33 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ CD ]
Line_30 $$ if (actionGroup != null) -->Line_40 $$ if (rightButtonAction != null) [ CD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_56 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_8 $$ final Point p = e.getPoint()[ FD ]
Line_8 $$ final Point p = e.getPoint()-->Line_9 $$ int line = EditorUtil.yPositionToLogicalLine(myEditor, p)[ FD ]
Line_28 $$ if (renderer != null) -->Line_30 $$ if (actionGroup != null) [ CD ]
Line_30 $$ if (actionGroup != null) -->Line_39 $$ AnAction rightButtonAction = renderer.getRightButtonClickAction()[ CD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_46 $$ e.consume()[ FD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_8 $$ final Point p = e.getPoint()[ CD ]
Line_32 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, actionGroup)-->Line_33 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ FD ]
Line_23 $$ JPopupMenu menu = actionManager.createActionPopupMenu("", actionGroup).getComponent()-->Line_24 $$ menu.show(this, e.getX(), e.getY())[ FD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_6 $$ actionGroup.add(new CloseAnnotationsAction())[ CD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)[ CD ]
Line_40 $$ if (rightButtonAction != null) -->Line_46 $$ e.consume()[ CD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_6 $$ actionGroup.add(new CloseAnnotationsAction())[ FD ]
Line_28 $$ if (renderer != null) -->Line_50 $$ ActionGroup group = myCustomGutterPopupGroup[ CD ]
Line_52 $$ group = (ActionGroup) CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER)-->Line_54 $$ if (group != null) [ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) [ FD ]
Line_13 $$ for (AnAction action : list) -->Line_15 $$ addActions.add(action)[ FD ]
Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()-->Line_23 $$ JPopupMenu menu = actionManager.createActionPopupMenu("", actionGroup).getComponent()[ FD ]
Line_31 $$ if (checkDumbAware(actionGroup)) -->Line_32 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, actionGroup)[ CD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_28 $$ if (renderer != null) [ CD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_21 $$ actionGroup.add(addAction)[ FD ]
Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()-->Line_32 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, actionGroup)[ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()[ CD ]
Line_30 $$ if (actionGroup != null) -->Line_37 $$ e.consume()[ CD ]
Line_41 $$ if (checkDumbAware(rightButtonAction)) -->Line_44 $$ notifyNotDumbAware()[ CD ]
Line_51 $$ if (group == null && myShowDefaultGutterPopup) -->Line_52 $$ group = (ActionGroup) CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER)[ CD ]
Line_31 $$ if (checkDumbAware(actionGroup)) -->Line_35 $$ notifyNotDumbAware()[ CD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_30 $$ if (actionGroup != null) [ FD ]
Line_39 $$ AnAction rightButtonAction = renderer.getRightButtonClickAction()-->Line_40 $$ if (rightButtonAction != null) [ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_24 $$ menu.show(this, e.getX(), e.getY())[ FD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_23 $$ JPopupMenu menu = actionManager.createActionPopupMenu("", actionGroup).getComponent()[ CD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_42 $$ performAction(rightButtonAction, e, "ICON_NAVIGATION_SECONDARY_BUTTON", myEditor.getDataContext())[ FD ]
Line_7 $$ final List<AnAction> addActions = new ArrayList<AnAction>()-->Line_14 $$ if (!addActions.contains(action)) [ FD ]
Line_3 $$ final ActionManager actionManager = ActionManager.getInstance()-->Line_55 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group)[ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_25 $$ e.consume()[ FD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_37 $$ e.consume()[ FD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_25 $$ e.consume()[ CD ]
Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) -->Line_27 $$ GutterIconRenderer renderer = getGutterRenderer(e)[ CD ]
Line_27 $$ GutterIconRenderer renderer = getGutterRenderer(e)-->Line_39 $$ AnAction rightButtonAction = renderer.getRightButtonClickAction()[ FD ]
Line_5 $$ DefaultActionGroup actionGroup = new DefaultActionGroup(EditorBundle.message("editor.annotations.action.group.name"), true)-->Line_31 $$ if (checkDumbAware(actionGroup)) [ FD ]
Line_39 $$ AnAction rightButtonAction = renderer.getRightButtonClickAction()-->Line_42 $$ performAction(rightButtonAction, e, "ICON_NAVIGATION_SECONDARY_BUTTON", myEditor.getDataContext())[ FD ]
Line_28 $$ if (renderer != null) -->Line_51 $$ if (group == null && myShowDefaultGutterPopup) [ CD ]
Line_50 $$ ActionGroup group = myCustomGutterPopupGroup-->Line_52 $$ group = (ActionGroup) CustomActionsSchema.getInstance().getCorrectedAction(IdeActions.GROUP_EDITOR_GUTTER)[ FD ]
Line_54 $$ if (group != null) -->Line_55 $$ ActionPopupMenu popupMenu = actionManager.createActionPopupMenu(ActionPlaces.UNKNOWN, group)[ CD ]
Line_54 $$ if (group != null) -->Line_56 $$ popupMenu.getComponent().show(this, e.getX(), e.getY())[ CD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_27 $$ GutterIconRenderer renderer = getGutterRenderer(e)[ FD ]
Line_9 $$ int line = EditorUtil.yPositionToLogicalLine(myEditor, p)-->Line_11 $$ final List<AnAction> list = gutterProvider.getPopupActions(line, myEditor)[ FD ]
Line_28 $$ if (renderer != null) -->Line_54 $$ if (group != null) [ CD ]
Line_2 $$ private void invokePopup(MouseEvent e) -->Line_4 $$ if (myEditor.getMouseEventArea(e) == EditorMouseEventArea.ANNOTATIONS_AREA) [ CD ]
