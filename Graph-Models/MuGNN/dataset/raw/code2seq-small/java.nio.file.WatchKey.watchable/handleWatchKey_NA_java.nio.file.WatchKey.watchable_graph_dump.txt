Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() [ CD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_15 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()[ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_8 $$ if (kind.type() == Path.class) [ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_9 $$ WatchEvent<Path> ev = Cast.uncheckedCast(event)[ FD ]
Line_10 $$ file = watchedPath.resolve(ev.context()).toFile()-->Line_12 $$ return toEvent(kind, file)[ FD ]
Line_3 $$ final Path watchedPath = (Path) watchKey.watchable()-->Line_10 $$ file = watchedPath.resolve(ev.context()).toFile()[ FD ]
Line_9 $$ WatchEvent<Path> ev = Cast.uncheckedCast(event)-->Line_10 $$ file = watchedPath.resolve(ev.context()).toFile()[ FD ]
Line_17 $$ if (watchEvents.isEmpty()) -->Line_20 $$ return CollectionUtils.collect(watchEvents, watchEventTransformer)[ CD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_3 $$ final Path watchedPath = (Path) watchKey.watchable()[ CD ]
Line_8 $$ if (kind.type() == Path.class) -->Line_9 $$ WatchEvent<Path> ev = Cast.uncheckedCast(event)[ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_12 $$ return toEvent(kind, file)[ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_6 $$ WatchEvent.Kind kind = event.kind()[ CD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_16 $$ watchKey.reset()[ CD ]
Line_7 $$ File file = null-->Line_10 $$ file = watchedPath.resolve(ev.context()).toFile()[ FD ]
Line_6 $$ WatchEvent.Kind kind = event.kind()-->Line_8 $$ if (kind.type() == Path.class) [ FD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_16 $$ watchKey.reset()[ FD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_17 $$ if (watchEvents.isEmpty()) [ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_7 $$ File file = null[ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_6 $$ WatchEvent.Kind kind = event.kind()[ FD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_15 $$ List<WatchEvent<?>> watchEvents = watchKey.pollEvents()[ FD ]
Line_8 $$ if (kind.type() == Path.class) -->Line_10 $$ file = watchedPath.resolve(ev.context()).toFile()[ CD ]
Line_4 $$ Transformer<FileWatcherEvent, WatchEvent<?>> watchEventTransformer = new Transformer<FileWatcherEvent, WatchEvent<?>>() -->Line_20 $$ return CollectionUtils.collect(watchEvents, watchEventTransformer)[ FD ]
Line_7 $$ File file = null-->Line_12 $$ return toEvent(kind, file)[ FD ]
Line_6 $$ WatchEvent.Kind kind = event.kind()-->Line_12 $$ return toEvent(kind, file)[ FD ]
Line_2 $$ private List<FileWatcherEvent> handleWatchKey(WatchKey watchKey) -->Line_3 $$ final Path watchedPath = (Path) watchKey.watchable()[ FD ]
Line_3 $$ final Path watchedPath = (Path) watchKey.watchable()-->Line_18 $$ return Collections.singletonList(FileWatcherEvent.delete(watchedPath.toFile()))[ FD ]
Line_17 $$ if (watchEvents.isEmpty()) -->Line_18 $$ return Collections.singletonList(FileWatcherEvent.delete(watchedPath.toFile()))[ CD ]
