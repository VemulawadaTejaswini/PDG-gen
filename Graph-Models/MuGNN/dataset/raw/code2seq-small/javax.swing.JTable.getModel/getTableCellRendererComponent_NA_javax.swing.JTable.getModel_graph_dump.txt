Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)[ FD ]
Line_19 $$ if (v.asColor(null) != null) -->Line_21 $$ if (v.isBoolean()) [ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_8 $$ Color bg = isSelected ? table.getSelectionBackground() : table.getBackground()[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_9 $$ if (v != null) [ CD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_27 $$ myLabel.setText(v.asString())[ FD ]
Line_19 $$ if (v.asColor(null) != null) -->Line_20 $$ myLabel.setIcon(createColoredIcon(v.asColor(null)))[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_4 $$ myLabel.setIcon(null)[ CD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_21 $$ if (v.isBoolean()) [ FD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_6 $$ myLabel.setHorizontalAlignment(SwingConstants.LEFT)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_35 $$ return myLabel[ CD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_23 $$ box.setSelected(v.asBoolean())[ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_16 $$ myLabel.setText(v.getKey())[ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_12 $$ myLabel.setIcon(v.isRestartRequired() ? RESTART_ICON : null)[ FD ]
Line_9 $$ if (v != null) -->Line_32 $$ myLabel.setForeground(fg)[ CD ]
Line_9 $$ if (v != null) -->Line_31 $$ myLabel.setFont(myLabel.getFont().deriveFont(v.isChangedFromDefault() ? Font.BOLD : Font.PLAIN))[ CD ]
Line_21 $$ if (v.isBoolean()) -->Line_23 $$ box.setSelected(v.asBoolean())[ CD ]
Line_21 $$ if (v.isBoolean()) -->Line_25 $$ return box[ CD ]
Line_21 $$ if (v.isBoolean()) -->Line_27 $$ myLabel.setText(v.asString())[ CD ]
Line_9 $$ if (v != null) -->Line_33 $$ myLabel.setBackground(bg)[ CD ]
Line_8 $$ Color bg = isSelected ? table.getSelectionBackground() : table.getBackground()-->Line_24 $$ box.setBackground(bg)[ FD ]
Line_8 $$ Color bg = isSelected ? table.getSelectionBackground() : table.getBackground()-->Line_33 $$ myLabel.setBackground(bg)[ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_19 $$ if (v.asColor(null) != null) [ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_31 $$ myLabel.setFont(myLabel.getFont().deriveFont(v.isChangedFromDefault() ? Font.BOLD : Font.PLAIN))[ FD ]
Line_7 $$ Color fg = isSelected ? table.getSelectionForeground() : v.isChangedFromDefault() ? JBColor.blue : table.getForeground()-->Line_32 $$ myLabel.setForeground(fg)[ FD ]
Line_22 $$ final JCheckBox box = new JCheckBox()-->Line_23 $$ box.setSelected(v.asBoolean())[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_7 $$ Color fg = isSelected ? table.getSelectionForeground() : v.isChangedFromDefault() ? JBColor.blue : table.getForeground()[ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_9 $$ if (v != null) [ FD ]
Line_21 $$ if (v.isBoolean()) -->Line_22 $$ final JCheckBox box = new JCheckBox()[ CD ]
Line_9 $$ if (v != null) -->Line_30 $$ myLabel.setOpaque(true)[ CD ]
Line_22 $$ final JCheckBox box = new JCheckBox()-->Line_24 $$ box.setBackground(bg)[ FD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_20 $$ myLabel.setIcon(createColoredIcon(v.asColor(null)))[ FD ]
Line_21 $$ if (v.isBoolean()) -->Line_24 $$ box.setBackground(bg)[ CD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_5 $$ myLabel.setText(null)[ CD ]
Line_3 $$ final RegistryValue v = ((MyTableModel) table.getModel()).getRegistryValue(row)-->Line_7 $$ Color fg = isSelected ? table.getSelectionForeground() : v.isChangedFromDefault() ? JBColor.blue : table.getForeground()[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_8 $$ Color bg = isSelected ? table.getSelectionBackground() : table.getBackground()[ FD ]
Line_2 $$ public Component getTableCellRendererComponent(@NotNull JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) -->Line_7 $$ Color fg = isSelected ? table.getSelectionForeground() : v.isChangedFromDefault() ? JBColor.blue : table.getForeground()[ CD ]
