Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_38 $$ DataEncryptionKeyFactory keyFactory = datanode.getDataEncryptionKeyFactoryForBlock(block)[ FD ]
Line_14 $$ if (!dataXceiverServer.balanceThrottler.acquire()) -->Line_16 $$ LOG.warn(msg)[ CD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_24 $$ BlockReceiver blockReceiver = null[ CD ]
Line_26 $$ DataOutputStream replyOut = new DataOutputStream(getOutputStream())-->Line_55 $$ blockReceiver.receiveBlock(null, null, replyOut, null, dataXceiverServer.balanceThrottler, null, true)[ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_50 $$ throw new IOException("Copy block " + block + " from " + proxySock.getRemoteSocketAddress() + " failed")[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_4 $$ block.setNumBytes(dataXceiverServer.estimateBlockSize)[ CD ]
Line_60 $$ errMsg = "opReplaceBlock " + block + " received exception " + ioe-->Line_61 $$ LOG.info(errMsg)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_22 $$ Status opStatus = SUCCESS[ CD ]
Line_14 $$ if (!dataXceiverServer.balanceThrottler.acquire()) -->Line_17 $$ sendResponse(ERROR, msg)[ CD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_4 $$ block.setNumBytes(dataXceiverServer.estimateBlockSize)[ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_48 $$ throw new IOException("Copy block " + block + " from " + proxySock.getRemoteSocketAddress() + " failed due to access token error")[ FD ]
Line_45 $$ BlockOpResponseProto copyResponse = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(proxyReply))-->Line_47 $$ if (copyResponse.getStatus() == ERROR_ACCESS_TOKEN) [ FD ]
Line_32 $$ InetSocketAddress proxyAddr = NetUtils.createSocketAddr(dnAddr)-->Line_34 $$ NetUtils.connect(proxySock, proxyAddr, dnConf.socketTimeout)[ FD ]
Line_43 $$ proxyReply = new DataInputStream(new BufferedInputStream(unbufProxyIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_66 $$ proxyReply.readChar()[ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_36 $$ OutputStream unbufProxyOut = NetUtils.getOutputStream(proxySock, dnConf.socketWriteTimeout)[ FD ]
Line_36 $$ OutputStream unbufProxyOut = NetUtils.getOutputStream(proxySock, dnConf.socketWriteTimeout)-->Line_40 $$ unbufProxyOut = saslStreams.out[ FD ]
Line_23 $$ String errMsg = null-->Line_61 $$ LOG.info(errMsg)[ FD ]
Line_22 $$ Status opStatus = SUCCESS-->Line_72 $$ sendResponse(opStatus, errMsg)[ FD ]
Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())-->Line_55 $$ blockReceiver.receiveBlock(null, null, replyOut, null, dataXceiverServer.balanceThrottler, null, true)[ FD ]
Line_22 $$ Status opStatus = SUCCESS-->Line_64 $$ if (opStatus == SUCCESS) [ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
Line_21 $$ DataOutputStream proxyOut = null-->Line_76 $$ IOUtils.closeStream(proxyOut)[ FD ]
Line_26 $$ DataOutputStream replyOut = new DataOutputStream(getOutputStream())-->Line_79 $$ IOUtils.closeStream(replyOut)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_23 $$ String errMsg = null[ CD ]
Line_43 $$ proxyReply = new DataInputStream(new BufferedInputStream(unbufProxyIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_45 $$ BlockOpResponseProto copyResponse = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(proxyReply))[ FD ]
Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())-->Line_56 $$ datanode.notifyNamenodeReceivedBlock(block, delHint, blockReceiver.getStorageUuid())[ FD ]
Line_59 $$ opStatus = ERROR-->Line_64 $$ if (opStatus == SUCCESS) [ FD ]
Line_23 $$ String errMsg = null-->Line_72 $$ sendResponse(opStatus, errMsg)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_26 $$ DataOutputStream replyOut = new DataOutputStream(getOutputStream())[ CD ]
Line_42 $$ proxyOut = new DataOutputStream(new BufferedOutputStream(unbufProxyOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_76 $$ IOUtils.closeStream(proxyOut)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_21 $$ DataOutputStream proxyOut = null[ CD ]
Line_28 $$ final String dnAddr = proxySource.getXferAddr(connectToDnViaHostname)-->Line_32 $$ InetSocketAddress proxyAddr = NetUtils.createSocketAddr(dnAddr)[ FD ]
Line_25 $$ DataInputStream proxyReply = null-->Line_78 $$ IOUtils.closeStream(proxyReply)[ FD ]
Line_15 $$ String msg = "Not able to receive block " + block.getBlockId() + " from " + peer.getRemoteAddressString() + " because threads " + "quota is exceeded."-->Line_17 $$ sendResponse(ERROR, msg)[ FD ]
Line_22 $$ Status opStatus = SUCCESS-->Line_59 $$ opStatus = ERROR[ FD ]
Line_38 $$ DataEncryptionKeyFactory keyFactory = datanode.getDataEncryptionKeyFactoryForBlock(block)-->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_56 $$ datanode.notifyNamenodeReceivedBlock(block, delHint, blockReceiver.getStorageUuid())[ FD ]
Line_15 $$ String msg = "Not able to receive block " + block.getBlockId() + " from " + peer.getRemoteAddressString() + " because threads " + "quota is exceeded."-->Line_16 $$ LOG.warn(msg)[ FD ]
Line_23 $$ String errMsg = null-->Line_60 $$ errMsg = "opReplaceBlock " + block + " received exception " + ioe[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_7 $$ datanode.blockPoolTokenSecretManager.checkAccess(blockToken, null, block, BlockTokenSecretManager.AccessMode.REPLACE)[ FD ]
Line_20 $$ Socket proxySock = null-->Line_36 $$ OutputStream unbufProxyOut = NetUtils.getOutputStream(proxySock, dnConf.socketWriteTimeout)[ FD ]
Line_60 $$ errMsg = "opReplaceBlock " + block + " received exception " + ioe-->Line_72 $$ sendResponse(opStatus, errMsg)[ FD ]
Line_43 $$ proxyReply = new DataInputStream(new BufferedInputStream(unbufProxyIn, HdfsConstants.IO_FILE_BUFFER_SIZE))-->Line_78 $$ IOUtils.closeStream(proxyReply)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_15 $$ String msg = "Not able to receive block " + block.getBlockId() + " from " + peer.getRemoteAddressString() + " because threads " + "quota is exceeded."[ FD ]
Line_59 $$ opStatus = ERROR-->Line_72 $$ sendResponse(opStatus, errMsg)[ FD ]
Line_20 $$ Socket proxySock = null-->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
Line_25 $$ DataInputStream proxyReply = null-->Line_43 $$ proxyReply = new DataInputStream(new BufferedInputStream(unbufProxyIn, HdfsConstants.IO_FILE_BUFFER_SIZE))[ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_34 $$ NetUtils.connect(proxySock, proxyAddr, dnConf.socketTimeout)[ FD ]
Line_20 $$ Socket proxySock = null-->Line_50 $$ throw new IOException("Copy block " + block + " from " + proxySock.getRemoteSocketAddress() + " failed")[ FD ]
Line_20 $$ Socket proxySock = null-->Line_48 $$ throw new IOException("Copy block " + block + " from " + proxySock.getRemoteSocketAddress() + " failed due to access token error")[ FD ]
Line_24 $$ BlockReceiver blockReceiver = null-->Line_77 $$ IOUtils.closeStream(blockReceiver)[ FD ]
Line_37 $$ InputStream unbufProxyIn = NetUtils.getInputStream(proxySock)-->Line_41 $$ unbufProxyIn = saslStreams.in[ FD ]
Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())-->Line_77 $$ IOUtils.closeStream(blockReceiver)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
Line_29 $$ if (LOG.isDebugEnabled()) -->Line_30 $$ LOG.debug("Connecting to datanode " + dnAddr)[ CD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_25 $$ DataInputStream proxyReply = null[ CD ]
Line_45 $$ BlockOpResponseProto copyResponse = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(proxyReply))-->Line_46 $$ if (copyResponse.getStatus() != SUCCESS) [ FD ]
Line_20 $$ Socket proxySock = null-->Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())[ FD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_37 $$ InputStream unbufProxyIn = NetUtils.getInputStream(proxySock)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_20 $$ Socket proxySock = null[ CD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_35 $$ proxySock.setSoTimeout(dnConf.socketTimeout)[ FD ]
Line_52 $$ ReadOpChecksumInfoProto checksumInfo = copyResponse.getReadOpChecksumInfo()-->Line_53 $$ DataChecksum remoteChecksum = DataTransferProtoUtil.fromProto(checksumInfo.getChecksum())[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_81 $$ datanode.metrics.addReplaceBlockOp(elapsed())[ CD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_3 $$ updateCurrentThreadName("Replacing block " + block + " from " + delHint)[ CD ]
Line_46 $$ if (copyResponse.getStatus() != SUCCESS) -->Line_47 $$ if (copyResponse.getStatus() == ERROR_ACCESS_TOKEN) [ CD ]
Line_33 $$ proxySock = datanode.newSocket()-->Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())[ FD ]
Line_25 $$ DataInputStream proxyReply = null-->Line_45 $$ BlockOpResponseProto copyResponse = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(proxyReply))[ FD ]
Line_20 $$ Socket proxySock = null-->Line_35 $$ proxySock.setSoTimeout(dnConf.socketTimeout)[ FD ]
Line_24 $$ BlockReceiver blockReceiver = null-->Line_56 $$ datanode.notifyNamenodeReceivedBlock(block, delHint, blockReceiver.getStorageUuid())[ FD ]
Line_14 $$ if (!dataXceiverServer.balanceThrottler.acquire()) -->Line_15 $$ String msg = "Not able to receive block " + block.getBlockId() + " from " + peer.getRemoteAddressString() + " because threads " + "quota is exceeded."[ CD ]
Line_14 $$ if (!dataXceiverServer.balanceThrottler.acquire()) -->Line_18 $$ return[ CD ]
Line_37 $$ InputStream unbufProxyIn = NetUtils.getInputStream(proxySock)-->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
Line_25 $$ DataInputStream proxyReply = null-->Line_66 $$ proxyReply.readChar()[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_44 $$ new Sender(proxyOut).copyBlock(block, blockToken)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_14 $$ if (!dataXceiverServer.balanceThrottler.acquire()) [ CD ]
Line_20 $$ Socket proxySock = null-->Line_33 $$ proxySock = datanode.newSocket()[ FD ]
Line_45 $$ BlockOpResponseProto copyResponse = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(proxyReply))-->Line_52 $$ ReadOpChecksumInfoProto checksumInfo = copyResponse.getReadOpChecksumInfo()[ FD ]
Line_20 $$ Socket proxySock = null-->Line_37 $$ InputStream unbufProxyIn = NetUtils.getInputStream(proxySock)[ FD ]
Line_24 $$ BlockReceiver blockReceiver = null-->Line_54 $$ blockReceiver = new BlockReceiver(block, storageType, proxyReply, proxySock.getRemoteSocketAddress().toString(), proxySock.getLocalSocketAddress().toString(), null, 0, 0, 0, "", null, datanode, remoteChecksum, CachingStrategy.newDropBehind())[ FD ]
Line_24 $$ BlockReceiver blockReceiver = null-->Line_55 $$ blockReceiver.receiveBlock(null, null, replyOut, null, dataXceiverServer.balanceThrottler, null, true)[ FD ]
Line_20 $$ Socket proxySock = null-->Line_34 $$ NetUtils.connect(proxySock, proxyAddr, dnConf.socketTimeout)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_28 $$ final String dnAddr = proxySource.getXferAddr(connectToDnViaHostname)[ FD ]
Line_2 $$ public void replaceBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String delHint, final DatanodeInfo proxySource) throws IOException -->Line_5 $$ if (datanode.isBlockTokenEnabled) [ CD ]
Line_21 $$ DataOutputStream proxyOut = null-->Line_42 $$ proxyOut = new DataOutputStream(new BufferedOutputStream(unbufProxyOut, HdfsConstants.SMALL_BUFFER_SIZE))[ FD ]
Line_36 $$ OutputStream unbufProxyOut = NetUtils.getOutputStream(proxySock, dnConf.socketWriteTimeout)-->Line_39 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(proxySock, unbufProxyOut, unbufProxyIn, keyFactory, blockToken, proxySource)[ FD ]
