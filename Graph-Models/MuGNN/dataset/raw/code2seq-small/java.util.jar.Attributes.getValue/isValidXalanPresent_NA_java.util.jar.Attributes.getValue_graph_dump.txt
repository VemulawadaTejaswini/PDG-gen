Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")-->Line_23 $$ final String version = attributes.getValue("Implementation-Version")[ FD ]
Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")-->Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")[ FD ]
Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null-->Line_8 $$ if (manifestFile != null) [ FD ]
Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)-->Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")[ FD ]
Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)-->Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())[ FD ]
Line_4 $$ for (VirtualFile file : files) -->Line_33 $$ LOG.info("No Xalan version information in " + file.getPath())[ FD ]
Line_27 $$ if (Integer.parseInt(parts[0]) >= 2 && Integer.parseInt(parts[1]) >= 6) -->Line_28 $$ return true[ CD ]
Line_16 $$ if (attributes == null) -->Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")[ CD ]
Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)-->Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")[ FD ]
Line_2 $$ private static Boolean isValidXalanPresent(SimpleJavaParameters parameters) -->Line_44 $$ return null[ CD ]
Line_4 $$ for (VirtualFile file : files) -->Line_5 $$ if (file.getName().matches(".*xalan.*\\.jar")) [ FD ]
Line_11 $$ if (manifest == null) -->Line_13 $$ manifestFile.putUserData(MANIFEST, manifest)[ CD ]
Line_24 $$ if (version != null) -->Line_26 $$ if (parts.length >= 2) [ CD ]
Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")-->Line_19 $$ if (attributes == null) [ FD ]
Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")-->Line_19 $$ if (attributes == null) [ FD ]
Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())-->Line_13 $$ manifestFile.putUserData(MANIFEST, manifest)[ FD ]
Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null-->Line_20 $$ LOG.info("No manifest attributes for 'org/apache/xalan/' in " + manifestFile.getPresentableUrl())[ FD ]
Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())-->Line_17 $$ attributes = manifest.getAttributes("org/apache/xalan")[ FD ]
Line_2 $$ private static Boolean isValidXalanPresent(SimpleJavaParameters parameters) -->Line_3 $$ final List<VirtualFile> files = parameters.getClassPath().getVirtualFiles()[ FD ]
Line_23 $$ final String version = attributes.getValue("Implementation-Version")-->Line_25 $$ final String[] parts = version.split("\\.")[ FD ]
Line_6 $$ final VirtualFile root = JarFileSystem.getInstance().getJarRootForLocalFile(file)-->Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null[ FD ]
Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null-->Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)[ FD ]
Line_4 $$ for (VirtualFile file : files) -->Line_6 $$ final VirtualFile root = JarFileSystem.getInstance().getJarRootForLocalFile(file)[ FD ]
Line_8 $$ if (manifestFile != null) -->Line_39 $$ LOG.info("No manifest file in " + file.getPath())[ CD ]
Line_19 $$ if (attributes == null) -->Line_20 $$ LOG.info("No manifest attributes for 'org/apache/xalan/' in " + manifestFile.getPresentableUrl())[ CD ]
Line_5 $$ if (file.getName().matches(".*xalan.*\\.jar")) -->Line_41 $$ return false[ CD ]
Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")-->Line_23 $$ final String version = attributes.getValue("Implementation-Version")[ FD ]
Line_4 $$ for (VirtualFile file : files) -->Line_36 $$ LOG.warn("Unable to read manifest from " + file.getName(), e)[ FD ]
Line_23 $$ final String version = attributes.getValue("Implementation-Version")-->Line_24 $$ if (version != null) [ FD ]
Line_5 $$ if (file.getName().matches(".*xalan.*\\.jar")) -->Line_6 $$ final VirtualFile root = JarFileSystem.getInstance().getJarRootForLocalFile(file)[ CD ]
Line_11 $$ if (manifest == null) -->Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())[ CD ]
Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())-->Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")[ FD ]
Line_24 $$ if (version != null) -->Line_33 $$ LOG.info("No Xalan version information in " + file.getPath())[ CD ]
Line_24 $$ if (version != null) -->Line_31 $$ LOG.info("Unsupported Xalan version: " + version)[ CD ]
Line_15 $$ Attributes attributes = manifest.getAttributes("org/apache/xalan/")-->Line_16 $$ if (attributes == null) [ FD ]
Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)-->Line_13 $$ manifestFile.putUserData(MANIFEST, manifest)[ FD ]
Line_10 $$ Manifest manifest = manifestFile.getUserData(MANIFEST)-->Line_11 $$ if (manifest == null) [ FD ]
Line_2 $$ private static Boolean isValidXalanPresent(SimpleJavaParameters parameters) -->Line_3 $$ final List<VirtualFile> files = parameters.getClassPath().getVirtualFiles()[ CD ]
Line_5 $$ if (file.getName().matches(".*xalan.*\\.jar")) -->Line_8 $$ if (manifestFile != null) [ CD ]
Line_5 $$ if (file.getName().matches(".*xalan.*\\.jar")) -->Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null[ CD ]
Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null-->Line_13 $$ manifestFile.putUserData(MANIFEST, manifest)[ FD ]
Line_7 $$ final VirtualFile manifestFile = root != null ? root.findFileByRelativePath("META-INF/MANIFEST.MF") : null-->Line_12 $$ manifest = new Manifest(manifestFile.getInputStream())[ FD ]
Line_4 $$ for (VirtualFile file : files) -->Line_39 $$ LOG.info("No manifest file in " + file.getPath())[ FD ]
Line_26 $$ if (parts.length >= 2) -->Line_27 $$ if (Integer.parseInt(parts[0]) >= 2 && Integer.parseInt(parts[1]) >= 6) [ CD ]
Line_24 $$ if (version != null) -->Line_25 $$ final String[] parts = version.split("\\.")[ CD ]
