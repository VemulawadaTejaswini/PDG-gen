Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_12 $$ if (manifest != null) -->Line_14 $$ if (main != null) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_15 $$ String mainClass = main.getValue("Main-Class")-->Line_25 $$ DescriptorEnvironmentLifecycleMethodProcessor.handleMethods(environment, moduleDescription, mainClass)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_23 $$ final DeploymentDescriptorEnvironment environment = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.MODULE_DEPLOYMENT_DESCRIPTOR_ENVIRONMENT)[ FD ]
Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) -->Line_5 $$ return[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_22 $$ deploymentUnit.putAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT, description)[ FD ]
Line_20 $$ final ApplicationClientComponentDescription description = new ApplicationClientComponentDescription(clazz.getName(), moduleDescription, deploymentUnit.getServiceName(), applicationClasses)-->Line_22 $$ deploymentUnit.putAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT, description)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) [ CD ]
Line_13 $$ Attributes main = manifest.getMainAttributes()-->Line_14 $$ if (main != null) [ FD ]
Line_13 $$ Attributes main = manifest.getMainAttributes()-->Line_15 $$ String mainClass = main.getValue("Main-Class")[ FD ]
Line_23 $$ final DeploymentDescriptorEnvironment environment = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.MODULE_DEPLOYMENT_DESCRIPTOR_ENVIRONMENT)-->Line_24 $$ if (environment != null) [ FD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_18 $$ final Class<?> clazz = module.getClassLoader().loadClass(mainClass)[ FD ]
Line_11 $$ final Manifest manifest = root.getAttachment(Attachments.MANIFEST)-->Line_12 $$ if (manifest != null) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_10 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ FD ]
Line_9 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_25 $$ DescriptorEnvironmentLifecycleMethodProcessor.handleMethods(environment, moduleDescription, mainClass)[ FD ]
Line_14 $$ if (main != null) -->Line_15 $$ String mainClass = main.getValue("Main-Class")[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_APPLICATION_CLASSES_DESCRIPTION)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_20 $$ final ApplicationClientComponentDescription description = new ApplicationClientComponentDescription(clazz.getName(), moduleDescription, deploymentUnit.getServiceName(), applicationClasses)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_15 $$ String mainClass = main.getValue("Main-Class")-->Line_18 $$ final Class<?> clazz = module.getClassLoader().loadClass(mainClass)[ FD ]
Line_7 $$ final ResourceRoot root = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_11 $$ final Manifest manifest = root.getAttachment(Attachments.MANIFEST)[ FD ]
Line_20 $$ final ApplicationClientComponentDescription description = new ApplicationClientComponentDescription(clazz.getName(), moduleDescription, deploymentUnit.getServiceName(), applicationClasses)-->Line_21 $$ moduleDescription.addComponent(description)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_14 $$ if (main != null) -->Line_16 $$ if (mainClass != null && !mainClass.isEmpty()) [ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.APPLICATION_CLIENT, deploymentUnit)) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_11 $$ final Manifest manifest = root.getAttachment(Attachments.MANIFEST)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_7 $$ final ResourceRoot root = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)[ FD ]
Line_18 $$ final Class<?> clazz = module.getClassLoader().loadClass(mainClass)-->Line_19 $$ deploymentUnit.putAttachment(AppClientAttachments.MAIN_CLASS, clazz)[ FD ]
Line_15 $$ String mainClass = main.getValue("Main-Class")-->Line_16 $$ if (mainClass != null && !mainClass.isEmpty()) [ FD ]
Line_24 $$ if (environment != null) -->Line_25 $$ DescriptorEnvironmentLifecycleMethodProcessor.handleMethods(environment, moduleDescription, mainClass)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_12 $$ if (manifest != null) [ CD ]
Line_11 $$ final Manifest manifest = root.getAttachment(Attachments.MANIFEST)-->Line_13 $$ Attributes main = manifest.getMainAttributes()[ FD ]
Line_18 $$ final Class<?> clazz = module.getClassLoader().loadClass(mainClass)-->Line_20 $$ final ApplicationClientComponentDescription description = new ApplicationClientComponentDescription(clazz.getName(), moduleDescription, deploymentUnit.getServiceName(), applicationClasses)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_19 $$ deploymentUnit.putAttachment(AppClientAttachments.MAIN_CLASS, clazz)[ FD ]
Line_23 $$ final DeploymentDescriptorEnvironment environment = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.MODULE_DEPLOYMENT_DESCRIPTOR_ENVIRONMENT)-->Line_25 $$ DescriptorEnvironmentLifecycleMethodProcessor.handleMethods(environment, moduleDescription, mainClass)[ FD ]
Line_12 $$ if (manifest != null) -->Line_13 $$ Attributes main = manifest.getMainAttributes()[ CD ]
Line_9 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_21 $$ moduleDescription.addComponent(description)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ final ResourceRoot root = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT)[ CD ]
