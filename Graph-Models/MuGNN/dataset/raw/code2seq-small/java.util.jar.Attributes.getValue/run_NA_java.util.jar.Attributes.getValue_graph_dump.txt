Line_15 $$ String mainClassName = null-->Line_34 $$ mainClassName = mainClassName.replaceAll("/", ".")[ FD ]
Line_32 $$ mainClassName = args[firstArg++]-->Line_34 $$ mainClassName = mainClassName.replaceAll("/", ".")[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_60 $$ String[] newArgs = Arrays.asList(args).subList(firstArg, args.length).toArray(new String[0])[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_49 $$ ensureDirectory(workDir)[ CD ]
Line_18 $$ jarFile = new JarFile(fileName)-->Line_22 $$ Manifest manifest = jarFile.getManifest()[ FD ]
Line_4 $$ if (args.length < 1) -->Line_6 $$ System.exit(-1)[ CD ]
Line_16 $$ JarFile jarFile-->Line_22 $$ Manifest manifest = jarFile.getManifest()[ FD ]
Line_15 $$ String mainClassName = null-->Line_58 $$ Class<?> mainClass = Class.forName(mainClassName, true, loader)[ FD ]
Line_37 $$ final File workDir-->Line_45 $$ if (!workDir.delete()) [ FD ]
Line_34 $$ mainClassName = mainClassName.replaceAll("/", ".")-->Line_58 $$ Class<?> mainClass = Class.forName(mainClassName, true, loader)[ FD ]
Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)-->Line_55 $$ unJar(file, workDir)[ FD ]
Line_18 $$ jarFile = new JarFile(fileName)-->Line_26 $$ jarFile.close()[ FD ]
Line_27 $$ if (mainClassName == null) -->Line_28 $$ if (args.length < 2) [ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_45 $$ if (!workDir.delete()) [ CD ]
Line_45 $$ if (!workDir.delete()) -->Line_47 $$ System.exit(-1)[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_22 $$ Manifest manifest = jarFile.getManifest()[ CD ]
Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)-->Line_49 $$ ensureDirectory(workDir)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_60 $$ String[] newArgs = Arrays.asList(args).subList(firstArg, args.length).toArray(new String[0])[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_10 $$ File file = new File(fileName)[ CD ]
Line_16 $$ JarFile jarFile-->Line_18 $$ jarFile = new JarFile(fileName)[ FD ]
Line_10 $$ File file = new File(fileName)-->Line_55 $$ unJar(file, workDir)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_37 $$ final File workDir[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_58 $$ Class<?> mainClass = Class.forName(mainClassName, true, loader)[ CD ]
Line_32 $$ mainClassName = args[firstArg++]-->Line_58 $$ Class<?> mainClass = Class.forName(mainClassName, true, loader)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_11 $$ if (!file.exists() || !file.isFile()) [ CD ]
Line_3 $$ String usage = "RunJar jarFile [mainClass] args..."-->Line_29 $$ System.err.println(usage)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_8 $$ int firstArg = 0[ CD ]
Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")-->Line_27 $$ if (mainClassName == null) [ FD ]
Line_37 $$ final File workDir-->Line_49 $$ ensureDirectory(workDir)[ FD ]
Line_8 $$ int firstArg = 0-->Line_9 $$ String fileName = args[firstArg++][ FD ]
Line_37 $$ final File workDir-->Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)[ FD ]
Line_15 $$ String mainClassName = null-->Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")[ FD ]
Line_37 $$ final File workDir-->Line_55 $$ unJar(file, workDir)[ FD ]
Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")-->Line_34 $$ mainClassName = mainClassName.replaceAll("/", ".")[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_35 $$ File tmpDir = new File(new Configuration().get("hadoop.tmp.dir"))[ CD ]
Line_8 $$ int firstArg = 0-->Line_32 $$ mainClassName = args[firstArg++][ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_26 $$ jarFile.close()[ CD ]
Line_10 $$ File file = new File(fileName)-->Line_11 $$ if (!file.exists() || !file.isFile()) [ FD ]
Line_22 $$ Manifest manifest = jarFile.getManifest()-->Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")[ FD ]
Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)-->Line_45 $$ if (!workDir.delete()) [ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_57 $$ Thread.currentThread().setContextClassLoader(loader)[ CD ]
Line_23 $$ if (manifest != null) -->Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")[ CD ]
Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)-->Line_56 $$ ClassLoader loader = createClassLoader(file, workDir)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_15 $$ String mainClassName = null[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_56 $$ ClassLoader loader = createClassLoader(file, workDir)[ CD ]
Line_8 $$ int firstArg = 0-->Line_60 $$ String[] newArgs = Arrays.asList(args).subList(firstArg, args.length).toArray(new String[0])[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_16 $$ JarFile jarFile[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_55 $$ unJar(file, workDir)[ CD ]
Line_10 $$ File file = new File(fileName)-->Line_56 $$ ClassLoader loader = createClassLoader(file, workDir)[ FD ]
Line_35 $$ File tmpDir = new File(new Configuration().get("hadoop.tmp.dir"))-->Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_4 $$ if (args.length < 1) [ CD ]
Line_22 $$ Manifest manifest = jarFile.getManifest()-->Line_23 $$ if (manifest != null) [ FD ]
Line_28 $$ if (args.length < 2) -->Line_29 $$ System.err.println(usage)[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_36 $$ ensureDirectory(tmpDir)[ CD ]
Line_3 $$ String usage = "RunJar jarFile [mainClass] args..."-->Line_5 $$ System.err.println(usage)[ FD ]
Line_15 $$ String mainClassName = null-->Line_27 $$ if (mainClassName == null) [ FD ]
Line_50 $$ ShutdownHookManager.get().addShutdownHook(new Runnable() -->Line_52 $$ FileUtil.fullyDelete(workDir)[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_27 $$ if (mainClassName == null) [ CD ]
Line_37 $$ final File workDir-->Line_52 $$ FileUtil.fullyDelete(workDir)[ FD ]
Line_28 $$ if (args.length < 2) -->Line_30 $$ System.exit(-1)[ CD ]
Line_35 $$ File tmpDir = new File(new Configuration().get("hadoop.tmp.dir"))-->Line_36 $$ ensureDirectory(tmpDir)[ FD ]
Line_4 $$ if (args.length < 1) -->Line_5 $$ System.err.println(usage)[ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_59 $$ Method main = mainClass.getMethod("main", new Class[] [ CD ]
Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")-->Line_32 $$ mainClassName = args[firstArg++][ FD ]
Line_39 $$ workDir = File.createTempFile("hadoop-unjar", "", tmpDir)-->Line_52 $$ FileUtil.fullyDelete(workDir)[ FD ]
Line_45 $$ if (!workDir.delete()) -->Line_46 $$ System.err.println("Delete failed for " + workDir)[ CD ]
Line_11 $$ if (!file.exists() || !file.isFile()) -->Line_13 $$ System.exit(-1)[ CD ]
Line_24 $$ mainClassName = manifest.getMainAttributes().getValue("Main-Class")-->Line_58 $$ Class<?> mainClass = Class.forName(mainClassName, true, loader)[ FD ]
Line_11 $$ if (!file.exists() || !file.isFile()) -->Line_12 $$ System.err.println("Not a valid JAR: " + file.getCanonicalPath())[ CD ]
Line_27 $$ if (mainClassName == null) -->Line_32 $$ mainClassName = args[firstArg++][ CD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_50 $$ ShutdownHookManager.get().addShutdownHook(new Runnable() [ CD ]
Line_37 $$ final File workDir-->Line_56 $$ ClassLoader loader = createClassLoader(file, workDir)[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_34 $$ mainClassName = mainClassName.replaceAll("/", ".")[ CD ]
Line_16 $$ JarFile jarFile-->Line_26 $$ jarFile.close()[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_3 $$ String usage = "RunJar jarFile [mainClass] args..."[ CD ]
Line_10 $$ File file = new File(fileName)-->Line_12 $$ System.err.println("Not a valid JAR: " + file.getCanonicalPath())[ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_9 $$ String fileName = args[firstArg++][ CD ]
Line_15 $$ String mainClassName = null-->Line_32 $$ mainClassName = args[firstArg++][ FD ]
Line_2 $$ public void run(String[] args) throws Throwable -->Line_23 $$ if (manifest != null) [ CD ]
