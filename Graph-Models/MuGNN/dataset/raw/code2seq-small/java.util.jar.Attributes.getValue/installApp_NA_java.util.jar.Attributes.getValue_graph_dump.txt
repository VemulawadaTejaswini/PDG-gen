Line_41 $$ if (fileName.endsWith(".jar")) -->Line_44 $$ bundleSymbolicName = GetterUtil.getString(attributes.getValue("Bundle-SymbolicName"))[ CD ]
Line_35 $$ File pluginPackageFile = new File(tmpDir + StringPool.SLASH + fileName)-->Line_36 $$ FileUtil.write(pluginPackageFile, zipInputStream)[ FD ]
Line_11 $$ inputStream = DLStoreUtil.getFileAsStream(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())-->Line_12 $$ if (inputStream == null) [ FD ]
Line_47 $$ contextName = ContextUtil.getContextName(contextPath)-->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_13 $$ throw new IOException("Unable to open file at " + app.getFilePath())[ FD ]
Line_47 $$ contextName = ContextUtil.getContextName(contextPath)-->Line_49 $$ contextName = ContextUtil.getContextName(fileName)[ FD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_43 $$ Attributes attributes = manifest.getMainAttributes()[ CD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_7 $$ String tmpDir = SystemProperties.get(SystemProperties.TMP_DIR) + StringPool.SLASH + Time.getTimestamp()[ CD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_4 $$ if (!DLStoreUtil.hasFile(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())) [ CD ]
Line_45 $$ bundleVersion = GetterUtil.getString(attributes.getValue("Bundle-Version"))-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_11 $$ inputStream = DLStoreUtil.getFileAsStream(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_36 $$ FileUtil.write(pluginPackageFile, zipInputStream)[ CD ]
Line_27 $$ InputStream zipInputStream = null-->Line_36 $$ FileUtil.write(pluginPackageFile, zipInputStream)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_40 $$ AutoDeploymentContext autoDeploymentContext = new AutoDeploymentContext()[ CD ]
Line_32 $$ Properties properties = PropertiesUtil.load(propertiesString)-->Line_33 $$ processMarketplaceProperties(properties)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_35 $$ File pluginPackageFile = new File(tmpDir + StringPool.SLASH + fileName)[ CD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)[ CD ]
Line_8 $$ InputStream inputStream = null-->Line_15 $$ File liferayPackageFile = FileUtil.createTempFile(inputStream)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_4 $$ if (!DLStoreUtil.hasFile(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())) [ FD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_9 $$ ZipFile zipFile = null[ CD ]
Line_37 $$ String bundleSymbolicName = StringPool.BLANK-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_18 $$ while (enu.hasMoreElements()) -->Line_24 $$ if (_log.isInfoEnabled()) [ CD ]
Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)-->Line_59 $$ StreamUtil.cleanUp(zipInputStream)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_66 $$ deleteApp(app)[ FD ]
Line_16 $$ zipFile = new ZipFile(liferayPackageFile)-->Line_75 $$ zipFile.close()[ FD ]
Line_8 $$ InputStream inputStream = null-->Line_79 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_41 $$ if (fileName.endsWith(".jar")) [ CD ]
Line_8 $$ InputStream inputStream = null-->Line_12 $$ if (inputStream == null) [ FD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_50 $$ autoDeploymentContext.setContext(contextName)[ CD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_52 $$ autoDeploymentContext.setFile(pluginPackageFile)[ CD ]
Line_40 $$ AutoDeploymentContext autoDeploymentContext = new AutoDeploymentContext()-->Line_52 $$ autoDeploymentContext.setFile(pluginPackageFile)[ FD ]
Line_47 $$ contextName = ContextUtil.getContextName(contextPath)-->Line_50 $$ autoDeploymentContext.setContext(contextName)[ FD ]
Line_11 $$ inputStream = DLStoreUtil.getFileAsStream(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())-->Line_15 $$ File liferayPackageFile = FileUtil.createTempFile(inputStream)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ CD ]
Line_47 $$ contextName = ContextUtil.getContextName(contextPath)-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_53 $$ DeployManagerUtil.deploy(autoDeploymentContext)[ CD ]
Line_16 $$ zipFile = new ZipFile(liferayPackageFile)-->Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)[ FD ]
Line_20 $$ String fileName = zipEntry.getName()-->Line_49 $$ contextName = ContextUtil.getContextName(fileName)[ FD ]
Line_46 $$ String contextPath = GetterUtil.getString(attributes.getValue("Web-ContextPath"))-->Line_47 $$ contextName = ContextUtil.getContextName(contextPath)[ FD ]
Line_17 $$ Enumeration<ZipEntry> enu = (Enumeration<ZipEntry>) zipFile.entries()-->Line_19 $$ ZipEntry zipEntry = enu.nextElement()[ FD ]
Line_43 $$ Attributes attributes = manifest.getMainAttributes()-->Line_46 $$ String contextPath = GetterUtil.getString(attributes.getValue("Web-ContextPath"))[ FD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_42 $$ Manifest manifest = BundleManagerUtil.getManifest(pluginPackageFile)[ CD ]
Line_37 $$ String bundleSymbolicName = StringPool.BLANK-->Line_44 $$ bundleSymbolicName = GetterUtil.getString(attributes.getValue("Bundle-SymbolicName"))[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_39 $$ String contextName = StringPool.BLANK[ CD ]
Line_43 $$ Attributes attributes = manifest.getMainAttributes()-->Line_45 $$ bundleVersion = GetterUtil.getString(attributes.getValue("Bundle-Version"))[ FD ]
Line_16 $$ zipFile = new ZipFile(liferayPackageFile)-->Line_73 $$ if (zipFile != null) [ FD ]
Line_49 $$ contextName = ContextUtil.getContextName(fileName)-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_40 $$ AutoDeploymentContext autoDeploymentContext = new AutoDeploymentContext()-->Line_53 $$ DeployManagerUtil.deploy(autoDeploymentContext)[ FD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_8 $$ InputStream inputStream = null[ CD ]
Line_27 $$ InputStream zipInputStream = null-->Line_31 $$ String propertiesString = StringUtil.read(zipInputStream)[ FD ]
Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) -->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ CD ]
Line_19 $$ ZipEntry zipEntry = enu.nextElement()-->Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)[ FD ]
Line_42 $$ Manifest manifest = BundleManagerUtil.getManifest(pluginPackageFile)-->Line_43 $$ Attributes attributes = manifest.getMainAttributes()[ FD ]
Line_27 $$ InputStream zipInputStream = null-->Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)[ FD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_46 $$ String contextPath = GetterUtil.getString(attributes.getValue("Web-ContextPath"))[ CD ]
Line_37 $$ String bundleSymbolicName = StringPool.BLANK-->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ FD ]
Line_16 $$ zipFile = new ZipFile(liferayPackageFile)-->Line_17 $$ Enumeration<ZipEntry> enu = (Enumeration<ZipEntry>) zipFile.entries()[ FD ]
Line_63 $$ if (_log.isInfoEnabled()) -->Line_64 $$ _log.info("Deleting corrupt package from app " + app.getAppId(), ze)[ CD ]
Line_18 $$ while (enu.hasMoreElements()) -->Line_19 $$ ZipEntry zipEntry = enu.nextElement()[ CD ]
Line_18 $$ while (enu.hasMoreElements()) -->Line_20 $$ String fileName = zipEntry.getName()[ CD ]
Line_39 $$ String contextName = StringPool.BLANK-->Line_49 $$ contextName = ContextUtil.getContextName(fileName)[ FD ]
Line_9 $$ ZipFile zipFile = null-->Line_17 $$ Enumeration<ZipEntry> enu = (Enumeration<ZipEntry>) zipFile.entries()[ FD ]
Line_8 $$ InputStream inputStream = null-->Line_11 $$ inputStream = DLStoreUtil.getFileAsStream(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())[ FD ]
Line_2 $$ public void installApp(long remoteAppId) throws PortalException -->Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)[ FD ]
Line_24 $$ if (_log.isInfoEnabled()) -->Line_25 $$ _log.info("Extracting " + fileName + " from app " + app.getAppId())[ CD ]
Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)-->Line_31 $$ String propertiesString = StringUtil.read(zipInputStream)[ FD ]
Line_19 $$ ZipEntry zipEntry = enu.nextElement()-->Line_20 $$ String fileName = zipEntry.getName()[ FD ]
Line_31 $$ String propertiesString = StringUtil.read(zipInputStream)-->Line_32 $$ Properties properties = PropertiesUtil.load(propertiesString)[ FD ]
Line_40 $$ AutoDeploymentContext autoDeploymentContext = new AutoDeploymentContext()-->Line_50 $$ autoDeploymentContext.setContext(contextName)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_25 $$ _log.info("Extracting " + fileName + " from app " + app.getAppId())[ FD ]
Line_35 $$ File pluginPackageFile = new File(tmpDir + StringPool.SLASH + fileName)-->Line_52 $$ autoDeploymentContext.setFile(pluginPackageFile)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_38 $$ String bundleVersion = StringPool.BLANK[ CD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_49 $$ contextName = ContextUtil.getContextName(fileName)[ CD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_33 $$ processMarketplaceProperties(properties)[ CD ]
Line_20 $$ String fileName = zipEntry.getName()-->Line_21 $$ if (!fileName.endsWith(".jar") && !fileName.endsWith(".war") && !fileName.endsWith(".xml") && !fileName.endsWith(".zip") && !fileName.equals("liferay-marketplace.properties")) [ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_37 $$ String bundleSymbolicName = StringPool.BLANK[ CD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_32 $$ Properties properties = PropertiesUtil.load(propertiesString)[ CD ]
Line_38 $$ String bundleVersion = StringPool.BLANK-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_9 $$ ZipFile zipFile = null-->Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)[ FD ]
Line_35 $$ File pluginPackageFile = new File(tmpDir + StringPool.SLASH + fileName)-->Line_42 $$ Manifest manifest = BundleManagerUtil.getManifest(pluginPackageFile)[ FD ]
Line_39 $$ String contextName = StringPool.BLANK-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_20 $$ String fileName = zipEntry.getName()-->Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) [ FD ]
Line_9 $$ ZipFile zipFile = null-->Line_75 $$ zipFile.close()[ FD ]
Line_9 $$ ZipFile zipFile = null-->Line_73 $$ if (zipFile != null) [ FD ]
Line_38 $$ String bundleVersion = StringPool.BLANK-->Line_45 $$ bundleVersion = GetterUtil.getString(attributes.getValue("Bundle-Version"))[ FD ]
Line_49 $$ contextName = ContextUtil.getContextName(fileName)-->Line_50 $$ autoDeploymentContext.setContext(contextName)[ FD ]
Line_30 $$ if (fileName.equals("liferay-marketplace.properties")) -->Line_31 $$ String propertiesString = StringUtil.read(zipInputStream)[ CD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_47 $$ contextName = ContextUtil.getContextName(contextPath)[ CD ]
Line_41 $$ if (fileName.endsWith(".jar")) -->Line_45 $$ bundleVersion = GetterUtil.getString(attributes.getValue("Bundle-Version"))[ CD ]
Line_39 $$ String contextName = StringPool.BLANK-->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ FD ]
Line_44 $$ bundleSymbolicName = GetterUtil.getString(attributes.getValue("Bundle-SymbolicName"))-->Line_55 $$ moduleLocalService.addModule(app.getUserId(), app.getAppId(), bundleSymbolicName, bundleVersion, contextName)[ FD ]
Line_3 $$ App app = appPersistence.findByRemoteAppId(remoteAppId)-->Line_64 $$ _log.info("Deleting corrupt package from app " + app.getAppId(), ze)[ FD ]
Line_27 $$ InputStream zipInputStream = null-->Line_59 $$ StreamUtil.cleanUp(zipInputStream)[ FD ]
Line_49 $$ contextName = ContextUtil.getContextName(fileName)-->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ FD ]
Line_18 $$ while (enu.hasMoreElements()) -->Line_21 $$ if (!fileName.endsWith(".jar") && !fileName.endsWith(".war") && !fileName.endsWith(".xml") && !fileName.endsWith(".zip") && !fileName.equals("liferay-marketplace.properties")) [ CD ]
Line_39 $$ String contextName = StringPool.BLANK-->Line_50 $$ autoDeploymentContext.setContext(contextName)[ FD ]
Line_18 $$ while (enu.hasMoreElements()) -->Line_27 $$ InputStream zipInputStream = null[ CD ]
Line_29 $$ zipInputStream = zipFile.getInputStream(zipEntry)-->Line_36 $$ FileUtil.write(pluginPackageFile, zipInputStream)[ FD ]
Line_17 $$ Enumeration<ZipEntry> enu = (Enumeration<ZipEntry>) zipFile.entries()-->Line_18 $$ while (enu.hasMoreElements()) [ FD ]
Line_20 $$ String fileName = zipEntry.getName()-->Line_41 $$ if (fileName.endsWith(".jar")) [ FD ]
Line_43 $$ Attributes attributes = manifest.getMainAttributes()-->Line_44 $$ bundleSymbolicName = GetterUtil.getString(attributes.getValue("Bundle-SymbolicName"))[ FD ]
Line_9 $$ ZipFile zipFile = null-->Line_16 $$ zipFile = new ZipFile(liferayPackageFile)[ FD ]
Line_39 $$ String contextName = StringPool.BLANK-->Line_47 $$ contextName = ContextUtil.getContextName(contextPath)[ FD ]
Line_7 $$ String tmpDir = SystemProperties.get(SystemProperties.TMP_DIR) + StringPool.SLASH + Time.getTimestamp()-->Line_72 $$ FileUtil.deltree(tmpDir)[ FD ]
Line_44 $$ bundleSymbolicName = GetterUtil.getString(attributes.getValue("Bundle-SymbolicName"))-->Line_54 $$ if (Validator.isNotNull(bundleSymbolicName) || Validator.isNotNull(contextName)) [ FD ]
Line_11 $$ inputStream = DLStoreUtil.getFileAsStream(app.getCompanyId(), CompanyConstants.SYSTEM, app.getFilePath())-->Line_79 $$ StreamUtil.cleanUp(inputStream)[ FD ]
