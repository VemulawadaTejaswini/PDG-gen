Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_9 $$ Assert.assertTrue(new File(tmp, "text.txt").createNewFile())[ CD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_5 $$ List<File> wildcardMatches = Arrays.asList(new File(tmp, "wildcard1.jar"), new File(tmp, "wildcard2.jar"), new File(tmp, "wildcard3.JAR"), new File(tmp, "wildcard4.JAR"))[ CD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_16 $$ String classPathJar = FileUtil.createJarWithClassPath(inputClassPath, new Path(tmp.getCanonicalPath()), System.getenv())[ CD ]
Line_22 $$ Attributes mainAttributes = jarManifest.getMainAttributes()-->Line_23 $$ Assert.assertNotNull(mainAttributes)[ FD ]
Line_41 $$ fileCp = new File(classPath)-->Line_46 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm())[ FD ]
Line_43 $$ if (nonExistentSubdir.equals(classPath)) -->Line_46 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm())[ CD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_10 $$ Assert.assertTrue(new File(tmp, "executable.exe").createNewFile())[ CD ]
Line_17 $$ JarFile jarFile = null-->Line_19 $$ jarFile = new JarFile(classPathJar)[ FD ]
Line_20 $$ Manifest jarManifest = jarFile.getManifest()-->Line_22 $$ Attributes mainAttributes = jarManifest.getMainAttributes()[ FD ]
Line_27 $$ List<String> expectedClassPaths = new ArrayList<String>()-->Line_46 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm())[ FD ]
Line_20 $$ Manifest jarManifest = jarFile.getManifest()-->Line_21 $$ Assert.assertNotNull(jarManifest)[ FD ]
Line_19 $$ jarFile = new JarFile(classPathJar)-->Line_57 $$ jarFile.close()[ FD ]
Line_17 $$ JarFile jarFile = null-->Line_20 $$ Manifest jarManifest = jarFile.getManifest()[ FD ]
Line_12 $$ String wildcardPath = tmp.getCanonicalPath() + File.separator + "*"-->Line_14 $$ List<String> classPaths = Arrays.asList("", "cp1.jar", "cp2.jar", wildcardPath, "cp3.jar", nonExistentSubdir)[ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_14 $$ List<String> classPaths = Arrays.asList("", "cp1.jar", "cp2.jar", wildcardPath, "cp3.jar", nonExistentSubdir)[ CD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_15 $$ String inputClassPath = StringUtils.join(File.pathSeparator, classPaths)[ CD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_13 $$ String nonExistentSubdir = tmp.getCanonicalPath() + Path.SEPARATOR + "subdir" + Path.SEPARATOR[ CD ]
Line_50 $$ List<String> actualClassPaths = Arrays.asList(classPathAttr.split(" "))-->Line_52 $$ Collections.sort(actualClassPaths)[ FD ]
Line_19 $$ jarFile = new JarFile(classPathJar)-->Line_55 $$ if (jarFile != null) [ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_3 $$ Assert.assertFalse(tmp.exists())[ CD ]
Line_15 $$ String inputClassPath = StringUtils.join(File.pathSeparator, classPaths)-->Line_16 $$ String classPathJar = FileUtil.createJarWithClassPath(inputClassPath, new Path(tmp.getCanonicalPath()), System.getenv())[ FD ]
Line_27 $$ List<String> expectedClassPaths = new ArrayList<String>()-->Line_51 $$ Collections.sort(expectedClassPaths)[ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_12 $$ String wildcardPath = tmp.getCanonicalPath() + File.separator + "*"[ CD ]
Line_43 $$ if (nonExistentSubdir.equals(classPath)) -->Line_44 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm() + Path.SEPARATOR)[ CD ]
Line_38 $$ if (!new Path(classPath).isAbsolute()) -->Line_39 $$ fileCp = new File(tmp, classPath)[ CD ]
Line_50 $$ List<String> actualClassPaths = Arrays.asList(classPathAttr.split(" "))-->Line_53 $$ Assert.assertEquals(expectedClassPaths, actualClassPaths)[ FD ]
Line_28 $$ for (String classPath : classPaths) -->Line_29 $$ if (classPath.length() == 0) [ FD ]
Line_25 $$ String classPathAttr = mainAttributes.getValue(Attributes.Name.CLASS_PATH)-->Line_26 $$ Assert.assertNotNull(classPathAttr)[ FD ]
Line_32 $$ if (wildcardPath.equals(classPath)) -->Line_37 $$ File fileCp = null[ CD ]
Line_38 $$ if (!new Path(classPath).isAbsolute()) -->Line_41 $$ fileCp = new File(classPath)[ CD ]
Line_12 $$ String wildcardPath = tmp.getCanonicalPath() + File.separator + "*"-->Line_32 $$ if (wildcardPath.equals(classPath)) [ FD ]
Line_39 $$ fileCp = new File(tmp, classPath)-->Line_44 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm() + Path.SEPARATOR)[ FD ]
Line_6 $$ for (File wildcardMatch : wildcardMatches) -->Line_34 $$ expectedClassPaths.add(wildcardMatch.toURI().toURL().toExternalForm())[ FD ]
Line_25 $$ String classPathAttr = mainAttributes.getValue(Attributes.Name.CLASS_PATH)-->Line_50 $$ List<String> actualClassPaths = Arrays.asList(classPathAttr.split(" "))[ FD ]
Line_17 $$ JarFile jarFile = null-->Line_55 $$ if (jarFile != null) [ FD ]
Line_27 $$ List<String> expectedClassPaths = new ArrayList<String>()-->Line_34 $$ expectedClassPaths.add(wildcardMatch.toURI().toURL().toExternalForm())[ FD ]
Line_19 $$ jarFile = new JarFile(classPathJar)-->Line_20 $$ Manifest jarManifest = jarFile.getManifest()[ FD ]
Line_13 $$ String nonExistentSubdir = tmp.getCanonicalPath() + Path.SEPARATOR + "subdir" + Path.SEPARATOR-->Line_14 $$ List<String> classPaths = Arrays.asList("", "cp1.jar", "cp2.jar", wildcardPath, "cp3.jar", nonExistentSubdir)[ FD ]
Line_14 $$ List<String> classPaths = Arrays.asList("", "cp1.jar", "cp2.jar", wildcardPath, "cp3.jar", nonExistentSubdir)-->Line_15 $$ String inputClassPath = StringUtils.join(File.pathSeparator, classPaths)[ FD ]
Line_6 $$ for (File wildcardMatch : wildcardMatches) -->Line_7 $$ Assert.assertTrue("failure creating file: " + wildcardMatch, wildcardMatch.createNewFile())[ FD ]
Line_37 $$ File fileCp = null-->Line_46 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm())[ FD ]
Line_41 $$ fileCp = new File(classPath)-->Line_44 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm() + Path.SEPARATOR)[ FD ]
Line_39 $$ fileCp = new File(tmp, classPath)-->Line_46 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm())[ FD ]
Line_39 $$ fileCp = new File(tmp, classPath)-->Line_41 $$ fileCp = new File(classPath)[ FD ]
Line_27 $$ List<String> expectedClassPaths = new ArrayList<String>()-->Line_53 $$ Assert.assertEquals(expectedClassPaths, actualClassPaths)[ FD ]
Line_22 $$ Attributes mainAttributes = jarManifest.getMainAttributes()-->Line_24 $$ Assert.assertTrue(mainAttributes.containsKey(Attributes.Name.CLASS_PATH))[ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_4 $$ Assert.assertTrue(tmp.mkdirs())[ CD ]
Line_32 $$ if (wildcardPath.equals(classPath)) -->Line_43 $$ if (nonExistentSubdir.equals(classPath)) [ CD ]
Line_17 $$ JarFile jarFile = null-->Line_57 $$ jarFile.close()[ FD ]
Line_37 $$ File fileCp = null-->Line_41 $$ fileCp = new File(classPath)[ FD ]
Line_37 $$ File fileCp = null-->Line_44 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm() + Path.SEPARATOR)[ FD ]
Line_13 $$ String nonExistentSubdir = tmp.getCanonicalPath() + Path.SEPARATOR + "subdir" + Path.SEPARATOR-->Line_43 $$ if (nonExistentSubdir.equals(classPath)) [ FD ]
Line_28 $$ for (String classPath : classPaths) -->Line_43 $$ if (nonExistentSubdir.equals(classPath)) [ FD ]
Line_27 $$ List<String> expectedClassPaths = new ArrayList<String>()-->Line_44 $$ expectedClassPaths.add(fileCp.toURI().toURL().toExternalForm() + Path.SEPARATOR)[ FD ]
Line_28 $$ for (String classPath : classPaths) -->Line_32 $$ if (wildcardPath.equals(classPath)) [ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_11 $$ Assert.assertTrue(new File(tmp, "README").createNewFile())[ CD ]
Line_37 $$ File fileCp = null-->Line_39 $$ fileCp = new File(tmp, classPath)[ FD ]
Line_2 $$ public void testCreateJarWithClassPath() throws Exception -->Line_17 $$ JarFile jarFile = null[ CD ]
Line_32 $$ if (wildcardPath.equals(classPath)) -->Line_38 $$ if (!new Path(classPath).isAbsolute()) [ CD ]
Line_22 $$ Attributes mainAttributes = jarManifest.getMainAttributes()-->Line_25 $$ String classPathAttr = mainAttributes.getValue(Attributes.Name.CLASS_PATH)[ FD ]
