Line_6 $$ if (bundleName != null) -->Line_7 $$ appendPropertyKeyNotFoundProblem(bundleName, key, expression, myManager, myProblems, onTheFly)[ CD ]
Line_37 $$ for (int i = 0; i < args.length; i++) -->Line_38 $$ if (args[i] == expression) [ CD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_26 $$ if (!JavaI18nUtil.mustBePropertyKey(expression, annotationParams))[ CD ]
Line_11 $$ if (Comparing.equal(nvp.getName(), AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) -->Line_13 $$ Module module = ModuleUtilCore.findModuleForPsiElement(expression)[ CD ]
Line_28 $$ final SortedSet<Integer> paramsCount = JavaI18nUtil.getPropertyValueParamsCount(expression, resourceBundleName.get())-->Line_32 $$ final int maxParamCount = paramsCount.last()[ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_37 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_38 $$ if (args[i] == expression) [ FD ]
Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) -->Line_9 $$ if (expression.getParent() instanceof PsiNameValuePair) [ CD ]
Line_26 $$ if (!JavaI18nUtil.mustBePropertyKey(expression, annotationParams))-->Line_27 $$ return[ CD ]
Line_3 $$ Ref<String> resourceBundleName = new Ref<String>()-->Line_5 $$ String bundleName = resourceBundleName.get()[ FD ]
Line_5 $$ String bundleName = resourceBundleName.get()-->Line_6 $$ if (bundleName != null) [ FD ]
Line_11 $$ if (Comparing.equal(nvp.getName(), AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) -->Line_12 $$ PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(expression.getProject())[ CD ]
Line_15 $$ List<PropertiesFile> propFiles = manager.findPropertiesFiles(module, key)-->Line_16 $$ if (propFiles.isEmpty()) [ FD ]
Line_11 $$ if (Comparing.equal(nvp.getName(), AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) -->Line_14 $$ if (module != null) [ CD ]
Line_34 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) expressions.getParent()-->Line_39 $$ if (i + maxParamCount >= args.length && method != null && method.getParameterList().getParametersCount() == i + 2 && method.getParameterList().getParameters()[i + 1].isVarArgs() && !hasArrayTypeAt(i + 1, methodCall)) [ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_34 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) expressions.getParent()[ CD ]
Line_17 $$ final String description = CodeInsightBundle.message("inspection.invalid.resource.bundle.reference", key)-->Line_18 $$ final ProblemDescriptor problem = myManager.createProblemDescriptor(expression, description, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_35 $$ final PsiMethod method = methodCall.resolveMethod()[ CD ]
Line_24 $$ final Map<String, Object> annotationParams = new HashMap<String, Object>()-->Line_26 $$ if (!JavaI18nUtil.mustBePropertyKey(expression, annotationParams))[ FD ]
Line_34 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) expressions.getParent()-->Line_40 $$ myProblems.add(myManager.createProblemDescriptor(methodCall, CodeInsightBundle.message("property.has.more.parameters.than.passed", key, maxParamCount, args.length - i - 1), onTheFly, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR))[ FD ]
Line_3 $$ Ref<String> resourceBundleName = new Ref<String>()-->Line_28 $$ final SortedSet<Integer> paramsCount = JavaI18nUtil.getPropertyValueParamsCount(expression, resourceBundleName.get())[ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_33 $$ final PsiExpressionList expressions = (PsiExpressionList) expression.getParent()[ CD ]
Line_39 $$ if (i + maxParamCount >= args.length && method != null && method.getParameterList().getParametersCount() == i + 2 && method.getParameterList().getParameters()[i + 1].isVarArgs() && !hasArrayTypeAt(i + 1, methodCall)) -->Line_40 $$ myProblems.add(myManager.createProblemDescriptor(methodCall, CodeInsightBundle.message("property.has.more.parameters.than.passed", key, maxParamCount, args.length - i - 1), onTheFly, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR))[ CD ]
Line_14 $$ if (module != null) -->Line_16 $$ if (propFiles.isEmpty()) [ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_9 $$ if (expression.getParent() instanceof PsiNameValuePair) [ FD ]
Line_13 $$ Module module = ModuleUtilCore.findModuleForPsiElement(expression)-->Line_15 $$ List<PropertiesFile> propFiles = manager.findPropertiesFiles(module, key)[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) [ FD ]
Line_5 $$ String bundleName = resourceBundleName.get()-->Line_7 $$ appendPropertyKeyNotFoundProblem(bundleName, key, expression, myManager, myProblems, onTheFly)[ FD ]
Line_33 $$ final PsiExpressionList expressions = (PsiExpressionList) expression.getParent()-->Line_36 $$ final PsiExpression[] args = expressions.getExpressions()[ FD ]
Line_10 $$ PsiNameValuePair nvp = (PsiNameValuePair) expression.getParent()-->Line_11 $$ if (Comparing.equal(nvp.getName(), AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) [ FD ]
Line_16 $$ if (propFiles.isEmpty()) -->Line_19 $$ myProblems.add(problem)[ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_40 $$ myProblems.add(myManager.createProblemDescriptor(methodCall, CodeInsightBundle.message("property.has.more.parameters.than.passed", key, maxParamCount, args.length - i - 1), onTheFly, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR))[ FD ]
Line_32 $$ final int maxParamCount = paramsCount.last()-->Line_40 $$ myProblems.add(myManager.createProblemDescriptor(methodCall, CodeInsightBundle.message("property.has.more.parameters.than.passed", key, maxParamCount, args.length - i - 1), onTheFly, LocalQuickFix.EMPTY_ARRAY, ProblemHighlightType.GENERIC_ERROR))[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) [ FD ]
Line_16 $$ if (propFiles.isEmpty()) -->Line_17 $$ final String description = CodeInsightBundle.message("inspection.invalid.resource.bundle.reference", key)[ CD ]
Line_18 $$ final ProblemDescriptor problem = myManager.createProblemDescriptor(expression, description, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)-->Line_19 $$ myProblems.add(problem)[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_10 $$ PsiNameValuePair nvp = (PsiNameValuePair) expression.getParent()[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_3 $$ Ref<String> resourceBundleName = new Ref<String>()[ CD ]
Line_9 $$ if (expression.getParent() instanceof PsiNameValuePair) -->Line_11 $$ if (Comparing.equal(nvp.getName(), AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)) [ CD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_24 $$ final Map<String, Object> annotationParams = new HashMap<String, Object>()[ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_7 $$ appendPropertyKeyNotFoundProblem(bundleName, key, expression, myManager, myProblems, onTheFly)[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_33 $$ final PsiExpressionList expressions = (PsiExpressionList) expression.getParent()[ FD ]
Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) -->Line_6 $$ if (bundleName != null) [ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_17 $$ final String description = CodeInsightBundle.message("inspection.invalid.resource.bundle.reference", key)[ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_36 $$ final PsiExpression[] args = expressions.getExpressions()[ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_15 $$ List<PropertiesFile> propFiles = manager.findPropertiesFiles(module, key)[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) [ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_12 $$ PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(expression.getProject())[ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_28 $$ final SortedSet<Integer> paramsCount = JavaI18nUtil.getPropertyValueParamsCount(expression, resourceBundleName.get())[ FD ]
Line_9 $$ if (expression.getParent() instanceof PsiNameValuePair) -->Line_10 $$ PsiNameValuePair nvp = (PsiNameValuePair) expression.getParent()[ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_26 $$ if (!JavaI18nUtil.mustBePropertyKey(expression, annotationParams))[ FD ]
Line_34 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) expressions.getParent()-->Line_35 $$ final PsiMethod method = methodCall.resolveMethod()[ FD ]
Line_38 $$ if (args[i] == expression) -->Line_39 $$ if (i + maxParamCount >= args.length && method != null && method.getParameterList().getParametersCount() == i + 2 && method.getParameterList().getParameters()[i + 1].isVarArgs() && !hasArrayTypeAt(i + 1, methodCall)) [ CD ]
Line_3 $$ Ref<String> resourceBundleName = new Ref<String>()-->Line_29 $$ if (paramsCount.isEmpty() || (paramsCount.size() != 1 && resourceBundleName.get() == null)) [ FD ]
Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) -->Line_5 $$ String bundleName = resourceBundleName.get()[ CD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_25 $$ annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null)[ CD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_13 $$ Module module = ModuleUtilCore.findModuleForPsiElement(expression)[ FD ]
Line_29 $$ if (paramsCount.isEmpty() || (paramsCount.size() != 1 && resourceBundleName.get() == null)) -->Line_30 $$ return[ CD ]
Line_24 $$ final Map<String, Object> annotationParams = new HashMap<String, Object>()-->Line_25 $$ annotationParams.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null)[ FD ]
Line_9 $$ if (expression.getParent() instanceof PsiNameValuePair) -->Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) [ CD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_32 $$ final int maxParamCount = paramsCount.last()[ CD ]
Line_14 $$ if (module != null) -->Line_15 $$ List<PropertiesFile> propFiles = manager.findPropertiesFiles(module, key)[ CD ]
Line_12 $$ PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(expression.getProject())-->Line_15 $$ List<PropertiesFile> propFiles = manager.findPropertiesFiles(module, key)[ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_29 $$ if (paramsCount.isEmpty() || (paramsCount.size() != 1 && resourceBundleName.get() == null)) [ CD ]
Line_28 $$ final SortedSet<Integer> paramsCount = JavaI18nUtil.getPropertyValueParamsCount(expression, resourceBundleName.get())-->Line_29 $$ if (paramsCount.isEmpty() || (paramsCount.size() != 1 && resourceBundleName.get() == null)) [ FD ]
Line_2 $$ private void visitPropertyKeyAnnotationParameter(PsiExpression expression, String key) -->Line_18 $$ final ProblemDescriptor problem = myManager.createProblemDescriptor(expression, description, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ FD ]
Line_3 $$ Ref<String> resourceBundleName = new Ref<String>()-->Line_4 $$ if (!JavaI18nUtil.isValidPropertyReference(myManager.getProject(), expression, key, resourceBundleName)) [ FD ]
Line_35 $$ final PsiMethod method = methodCall.resolveMethod()-->Line_39 $$ if (i + maxParamCount >= args.length && method != null && method.getParameterList().getParametersCount() == i + 2 && method.getParameterList().getParameters()[i + 1].isVarArgs() && !hasArrayTypeAt(i + 1, methodCall)) [ FD ]
Line_23 $$ if (expression.getParent() instanceof PsiExpressionList && expression.getParent().getParent() instanceof PsiMethodCallExpression) -->Line_28 $$ final SortedSet<Integer> paramsCount = JavaI18nUtil.getPropertyValueParamsCount(expression, resourceBundleName.get())[ CD ]
Line_33 $$ final PsiExpressionList expressions = (PsiExpressionList) expression.getParent()-->Line_34 $$ final PsiMethodCallExpression methodCall = (PsiMethodCallExpression) expressions.getParent()[ FD ]
Line_13 $$ Module module = ModuleUtilCore.findModuleForPsiElement(expression)-->Line_14 $$ if (module != null) [ FD ]
Line_16 $$ if (propFiles.isEmpty()) -->Line_18 $$ final ProblemDescriptor problem = myManager.createProblemDescriptor(expression, description, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ CD ]
