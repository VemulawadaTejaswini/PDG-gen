Line_14 $$ boolean useLb = random.nextBoolean()-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ CD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_43 $$ ubKey = keys.get(ubKeyIndex)-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_48 $$ ubIndex = -1 - ubIndex[ FD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_38 $$ if (useUb) [ CD ]
Line_29 $$ lbInclusive = random.nextBoolean()-->Line_32 $$ if (lbIndex >= 0 && !lbInclusive)[ FD ]
Line_19 $$ boolean lbInclusive = true-->Line_29 $$ lbInclusive = random.nextBoolean()[ FD ]
Line_10 $$ List<Integer> allKeys = randomKeys(canonical, mixInNotPresentItems)-->Line_65 $$ keys = allKeys[ FD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_29 $$ lbInclusive = random.nextBoolean()[ CD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_46 $$ ubIndex++[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_89 $$ return new RandomSelection(keys, canonicalSet, testAsSet, canonicalList, testAsList, comparator)[ CD ]
Line_42 $$ ubInclusive = random.nextBoolean()-->Line_54 $$ ubInclusive = false[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_51 $$ if (ubIndex < lbIndex) [ CD ]
Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ FD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_20 $$ Integer lbKey = canonicalList.get(0)-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_14 $$ boolean useLb = random.nextBoolean()-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_15 $$ boolean useUb = random.nextBoolean()[ CD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_20 $$ Integer lbKey = canonicalList.get(0)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_12 $$ int narrowCount = random.nextInt(3)[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_40 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_25 $$ if (useLb) -->Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ CD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_19 $$ boolean lbInclusive = true-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_53 $$ ubKey = lbKey-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_14 $$ boolean useLb = random.nextBoolean()[ FD ]
Line_68 $$ if (allKeys != keys)-->Line_69 $$ keys = new ArrayList(keys)[ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_29 $$ lbInclusive = random.nextBoolean()[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_27 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_74 $$ testAsList = testAsList.descendingSet()[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_18 $$ int indexRange = keys.size() / (narrowCount + 1)[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_70 $$ if (canonicalSet != canonical)[ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_46 $$ ubIndex++[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_20 $$ Integer lbKey = canonicalList.get(0)[ CD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_20 $$ Integer lbKey = canonicalList.get(0)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_65 $$ keys = allKeys-->Line_72 $$ Collections.reverse(keys)[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_73 $$ Collections.reverse(canonicalList)[ CD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_7 $$ BTreeSet<Integer> testAsList = this.test[ CD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_43 $$ ubKey = keys.get(ubKeyIndex)-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_68 $$ if (allKeys != keys)[ CD ]
Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_62 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_74 $$ testAsList = testAsList.descendingSet()[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_65 $$ keys = allKeys[ FD ]
Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_73 $$ Collections.reverse(canonicalList)[ FD ]
Line_30 $$ lbKey = keys.get(lbKeyIndex)-->Line_53 $$ ubKey = lbKey[ FD ]
Line_69 $$ keys = new ArrayList(keys)-->Line_72 $$ Collections.reverse(keys)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_67 $$ if (permitReversal && random.nextBoolean()) [ CD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_33 $$ lbIndex++[ FD ]
Line_54 $$ ubInclusive = false-->Line_45 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_14 $$ boolean useLb = random.nextBoolean()[ CD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_43 $$ ubKey = keys.get(ubKeyIndex)-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_66 $$ Comparator<Integer> comparator = naturalOrder()-->Line_77 $$ comparator = reverseOrder()[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_15 $$ boolean useUb = random.nextBoolean()-->Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) [ FD ]
Line_76 $$ testAsSet = testAsSet.descendingSet()-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_47 $$ if (ubIndex < 0)[ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_62 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_22 $$ boolean ubInclusive = true-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ CD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_42 $$ ubInclusive = random.nextBoolean()[ CD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_71 $$ canonicalList = new ArrayList(canonicalList)[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_70 $$ if (canonicalSet != canonical)-->Line_71 $$ canonicalList = new ArrayList(canonicalList)[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_70 $$ if (canonicalSet != canonical)[ FD ]
Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_61 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_61 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_64 $$ if (keys != allKeys && random.nextBoolean())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_5 $$ BTreeSet<Integer> testAsSet = this.test[ CD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_51 $$ if (ubIndex < lbIndex) -->Line_52 $$ ubIndex = lbIndex[ CD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ FD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_22 $$ boolean ubInclusive = true-->Line_42 $$ ubInclusive = random.nextBoolean()[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_40 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_35 $$ lbIndex = -1 - lbIndex[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_76 $$ testAsSet = testAsSet.descendingSet()[ CD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_77 $$ comparator = reverseOrder()[ CD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_76 $$ testAsSet = testAsSet.descendingSet()-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_16 $$ if (!(useLb | useUb))[ CD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_48 $$ ubIndex = -1 - ubIndex[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_69 $$ keys = new ArrayList(keys)[ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_62 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ CD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_25 $$ if (useLb) [ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_20 $$ Integer lbKey = canonicalList.get(0)-->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_65 $$ keys = allKeys-->Line_69 $$ keys = new ArrayList(keys)[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_76 $$ testAsSet = testAsSet.descendingSet()[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ CD ]
Line_42 $$ ubInclusive = random.nextBoolean()-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_21 $$ int lbKeyIndex = 0, lbIndex = 0[ CD ]
Line_71 $$ canonicalList = new ArrayList(canonicalList)-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ FD ]
Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_53 $$ ubKey = lbKey[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_61 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_64 $$ if (keys != allKeys && random.nextBoolean())-->Line_65 $$ keys = allKeys[ CD ]
Line_65 $$ keys = allKeys-->Line_68 $$ if (allKeys != keys)[ FD ]
Line_29 $$ lbInclusive = random.nextBoolean()-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_38 $$ if (useUb) -->Line_40 $$ Integer candidate = keys.get(ubKeyIndex)[ CD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_68 $$ if (allKeys != keys)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_71 $$ canonicalList = new ArrayList(canonicalList)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_66 $$ Comparator<Integer> comparator = naturalOrder()[ CD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ CD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_74 $$ testAsList = testAsList.descendingSet()[ FD ]
Line_74 $$ testAsList = testAsList.descendingSet()-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ CD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_51 $$ if (ubIndex < lbIndex) -->Line_53 $$ ubKey = lbKey[ CD ]
Line_30 $$ lbKey = keys.get(lbKeyIndex)-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_25 $$ if (useLb) -->Line_27 $$ Integer candidate = keys.get(lbKeyIndex)[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_81 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ CD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ CD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_34 $$ if (lbIndex < 0)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_75 $$ canonicalSet = canonicalSet.descendingSet()[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_81 $$ if (!canonicalSet.isEmpty()) [ CD ]
Line_20 $$ Integer lbKey = canonicalList.get(0)-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_46 $$ ubIndex++[ FD ]
Line_32 $$ if (lbIndex >= 0 && !lbInclusive)-->Line_34 $$ if (lbIndex < 0)[ CD ]
Line_38 $$ if (useUb) -->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ CD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_68 $$ if (allKeys != keys)[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_34 $$ if (lbIndex < 0)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_61 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_65 $$ keys = allKeys[ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_52 $$ ubIndex = lbIndex[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_27 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_11 $$ List<Integer> keys = allKeys[ CD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ CD ]
Line_71 $$ canonicalList = new ArrayList(canonicalList)-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_30 $$ lbKey = keys.get(lbKeyIndex)-->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_22 $$ boolean ubInclusive = true[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)[ CD ]
Line_22 $$ boolean ubInclusive = true-->Line_54 $$ ubInclusive = false[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_10 $$ List<Integer> allKeys = randomKeys(canonical, mixInNotPresentItems)[ CD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_69 $$ keys = new ArrayList(keys)[ FD ]
Line_71 $$ canonicalList = new ArrayList(canonicalList)-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_54 $$ ubInclusive = false-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_42 $$ ubInclusive = random.nextBoolean()-->Line_45 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ CD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_61 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_15 $$ boolean useUb = random.nextBoolean()-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_12 $$ int narrowCount = random.nextInt(3)[ CD ]
Line_22 $$ boolean ubInclusive = true-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical[ CD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_43 $$ ubKey = keys.get(ubKeyIndex)[ CD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_33 $$ lbIndex++[ FD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_12 $$ int narrowCount = random.nextInt(3)-->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_71 $$ canonicalList = new ArrayList(canonicalList)-->Line_73 $$ Collections.reverse(canonicalList)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_74 $$ testAsList = testAsList.descendingSet()-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_72 $$ Collections.reverse(keys)[ FD ]
Line_22 $$ boolean ubInclusive = true-->Line_45 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_48 $$ ubIndex = -1 - ubIndex[ FD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_86 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_34 $$ if (lbIndex < 0)[ FD ]
Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_27 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_29 $$ lbInclusive = random.nextBoolean()-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_64 $$ if (keys != allKeys && random.nextBoolean())[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_10 $$ List<Integer> allKeys = randomKeys(canonical, mixInNotPresentItems)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()[ CD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_18 $$ int indexRange = keys.size() / (narrowCount + 1)[ FD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_51 $$ if (ubIndex < lbIndex) [ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_33 $$ lbIndex++[ FD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_75 $$ canonicalSet = canonicalSet.descendingSet()[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_76 $$ testAsSet = testAsSet.descendingSet()[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_47 $$ if (ubIndex < 0)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_67 $$ if (permitReversal && random.nextBoolean()) [ FD ]
Line_81 $$ if (!canonicalSet.isEmpty()) -->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_53 $$ ubKey = lbKey-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_27 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_20 $$ Integer lbKey = canonicalList.get(0)-->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_30 $$ lbKey = keys.get(lbKeyIndex)-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_46 $$ ubIndex++[ FD ]
Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_79 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_15 $$ boolean useUb = random.nextBoolean()-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_67 $$ if (permitReversal && random.nextBoolean()) [ FD ]
Line_20 $$ Integer lbKey = canonicalList.get(0)-->Line_53 $$ ubKey = lbKey[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_45 $$ if (ubIndex >= 0 && ubInclusive) -->Line_46 $$ ubIndex++[ CD ]
Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_76 $$ testAsSet = testAsSet.descendingSet()-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_43 $$ ubKey = keys.get(ubKeyIndex)-->Line_53 $$ ubKey = lbKey[ FD ]
Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_38 $$ if (useUb) -->Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) [ CD ]
Line_35 $$ lbIndex = -1 - lbIndex-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_70 $$ if (canonicalSet != canonical)[ CD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_32 $$ if (lbIndex >= 0 && !lbInclusive)[ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_26 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ FD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_14 $$ boolean useLb = random.nextBoolean()-->Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) [ FD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_84 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_35 $$ lbIndex = -1 - lbIndex[ FD ]
Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_62 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_81 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_81 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ CD ]
Line_51 $$ if (ubIndex < lbIndex) -->Line_54 $$ ubInclusive = false[ CD ]
Line_19 $$ boolean lbInclusive = true-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_67 $$ if (permitReversal && random.nextBoolean()) -->Line_72 $$ Collections.reverse(keys)[ CD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_62 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_40 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_11 $$ List<Integer> keys = allKeys-->Line_72 $$ Collections.reverse(keys)[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_75 $$ canonicalSet = canonicalSet.descendingSet()[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_32 $$ if (lbIndex >= 0 && !lbInclusive)-->Line_33 $$ lbIndex++[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_45 $$ if (ubIndex >= 0 && ubInclusive) -->Line_47 $$ if (ubIndex < 0)[ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_15 $$ boolean useUb = random.nextBoolean()[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ CD ]
Line_10 $$ List<Integer> allKeys = randomKeys(canonical, mixInNotPresentItems)-->Line_68 $$ if (allKeys != keys)[ FD ]
Line_58 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_39 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_53 $$ ubKey = lbKey-->Line_44 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_52 $$ ubIndex = lbIndex-->Line_47 $$ if (ubIndex < 0)[ FD ]
Line_42 $$ ubInclusive = random.nextBoolean()-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_41 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_45 $$ if (ubIndex >= 0 && ubInclusive) [ CD ]
Line_34 $$ if (lbIndex < 0)-->Line_35 $$ lbIndex = -1 - lbIndex[ CD ]
Line_54 $$ ubInclusive = false-->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_82 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_48 $$ ubIndex = -1 - ubIndex-->Line_47 $$ if (ubIndex < 0)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_80 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_24 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_40 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_18 $$ int indexRange = keys.size() / (narrowCount + 1)[ CD ]
Line_25 $$ if (useLb) -->Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) [ CD ]
Line_74 $$ testAsList = testAsList.descendingSet()-->Line_87 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_23 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_56 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_19 $$ boolean lbInclusive = true[ CD ]
Line_13 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_57 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ CD ]
Line_59 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_73 $$ Collections.reverse(canonicalList)[ FD ]
Line_47 $$ if (ubIndex < 0)-->Line_48 $$ ubIndex = -1 - ubIndex[ CD ]
Line_28 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ CD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_85 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_19 $$ boolean lbInclusive = true-->Line_32 $$ if (lbIndex >= 0 && !lbInclusive)[ FD ]
Line_31 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_60 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_42 $$ ubInclusive = random.nextBoolean()[ FD ]
Line_21 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_30 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_75 $$ canonicalSet = canonicalSet.descendingSet()-->Line_83 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
