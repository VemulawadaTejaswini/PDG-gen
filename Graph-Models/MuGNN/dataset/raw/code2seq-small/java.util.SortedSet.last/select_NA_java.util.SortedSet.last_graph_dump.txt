Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_45 $$ ubKey = keys.get(ubKeyIndex)-->Line_55 $$ ubKey = lbKey[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_35 $$ lbIndex++[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_79 $$ testAsSet = testAsSet.descendingSet()[ FD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ CD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_84 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()[ CD ]
Line_54 $$ ubIndex = lbIndex-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_74 $$ canonicalList = new ArrayList(canonicalList)-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_13 $$ int narrowCount = random.nextInt(3)-->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ CD ]
Line_31 $$ lbInclusive = random.nextBoolean()-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_92 $$ return new RandomSelection(keys, canonicalSet, testAsSet, canonicalList, testAsList, comparator)[ CD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ CD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_34 $$ if (lbIndex >= 0 && !lbInclusive)[ CD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_71 $$ if (allKeys != keys)[ FD ]
Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_37 $$ lbIndex = -1 - lbIndex[ FD ]
Line_16 $$ boolean useUb = random.nextBoolean()-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_16 $$ boolean useUb = random.nextBoolean()-->Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) [ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_29 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_27 $$ if (useLb) -->Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) [ CD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_29 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_15 $$ boolean useLb = random.nextBoolean()-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_54 $$ ubIndex = lbIndex-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_48 $$ ubIndex++[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)[ CD ]
Line_54 $$ ubIndex = lbIndex-->Line_48 $$ ubIndex++[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_22 $$ Integer lbKey = canonicalList.get(0)-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_31 $$ lbInclusive = random.nextBoolean()[ CD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_84 $$ if (!canonicalSet.isEmpty()) [ CD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_78 $$ canonicalSet = canonicalSet.descendingSet()[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_7 $$ BTreeSet<Integer> testAsList = this.test[ CD ]
Line_40 $$ if (useUb) -->Line_42 $$ Integer candidate = keys.get(ubKeyIndex)[ CD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_24 $$ boolean ubInclusive = true-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_32 $$ lbKey = keys.get(lbKeyIndex)-->Line_55 $$ ubKey = lbKey[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ CD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_78 $$ canonicalSet = canonicalSet.descendingSet()[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_36 $$ if (lbIndex < 0)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_53 $$ if (ubIndex < lbIndex) -->Line_54 $$ ubIndex = lbIndex[ CD ]
Line_74 $$ canonicalList = new ArrayList(canonicalList)-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ CD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_64 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_72 $$ keys = new ArrayList(keys)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_44 $$ ubInclusive = random.nextBoolean()[ FD ]
Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_47 $$ if (ubIndex >= 0 && ubInclusive) -->Line_48 $$ ubIndex++[ CD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_80 $$ comparator = reverseOrder()[ CD ]
Line_22 $$ Integer lbKey = canonicalList.get(0)-->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_79 $$ testAsSet = testAsSet.descendingSet()-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ CD ]
Line_53 $$ if (ubIndex < lbIndex) -->Line_56 $$ ubInclusive = false[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_13 $$ int narrowCount = random.nextInt(3)[ CD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_22 $$ Integer lbKey = canonicalList.get(0)[ FD ]
Line_22 $$ Integer lbKey = canonicalList.get(0)-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_27 $$ if (useLb) -->Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ CD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_68 $$ keys = allKeys[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_16 $$ boolean useUb = random.nextBoolean()[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_84 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_24 $$ boolean ubInclusive = true-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_64 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_22 $$ Integer lbKey = canonicalList.get(0)[ CD ]
Line_68 $$ keys = allKeys-->Line_75 $$ Collections.reverse(keys)[ FD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_75 $$ Collections.reverse(keys)[ CD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ CD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_47 $$ if (ubIndex >= 0 && ubInclusive) -->Line_49 $$ if (ubIndex < 0)[ CD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_15 $$ boolean useLb = random.nextBoolean()-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_24 $$ boolean ubInclusive = true-->Line_56 $$ ubInclusive = false[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ CD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_76 $$ Collections.reverse(canonicalList)[ FD ]
Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_49 $$ if (ubIndex < 0)[ FD ]
Line_44 $$ ubInclusive = random.nextBoolean()-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_42 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_73 $$ if (canonicalSet != canonical)[ CD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_15 $$ boolean useLb = random.nextBoolean()[ CD ]
Line_21 $$ boolean lbInclusive = true-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_53 $$ if (ubIndex < lbIndex) [ CD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_75 $$ Collections.reverse(keys)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical[ CD ]
Line_21 $$ boolean lbInclusive = true-->Line_34 $$ if (lbIndex >= 0 && !lbInclusive)[ FD ]
Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_23 $$ int lbKeyIndex = 0, lbIndex = 0[ CD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ CD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_56 $$ ubInclusive = false-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ FD ]
Line_72 $$ keys = new ArrayList(keys)-->Line_75 $$ Collections.reverse(keys)[ FD ]
Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_77 $$ testAsList = testAsList.descendingSet()[ FD ]
Line_55 $$ ubKey = lbKey-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_70 $$ if (permitReversal && random.nextBoolean()) [ FD ]
Line_32 $$ lbKey = keys.get(lbKeyIndex)-->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_68 $$ keys = allKeys-->Line_72 $$ keys = new ArrayList(keys)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ CD ]
Line_45 $$ ubKey = keys.get(ubKeyIndex)-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_76 $$ Collections.reverse(canonicalList)[ FD ]
Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_49 $$ if (ubIndex < 0)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_22 $$ Integer lbKey = canonicalList.get(0)-->Line_55 $$ ubKey = lbKey[ FD ]
Line_45 $$ ubKey = keys.get(ubKeyIndex)-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_56 $$ ubInclusive = false-->Line_47 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_9 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_77 $$ testAsList = testAsList.descendingSet()[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_40 $$ if (useUb) [ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_70 $$ if (permitReversal && random.nextBoolean()) [ CD ]
Line_34 $$ if (lbIndex >= 0 && !lbInclusive)-->Line_36 $$ if (lbIndex < 0)[ CD ]
Line_73 $$ if (canonicalSet != canonical)-->Line_74 $$ canonicalList = new ArrayList(canonicalList)[ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_12 $$ List<Integer> keys = allKeys[ CD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_71 $$ if (allKeys != keys)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_21 $$ boolean lbInclusive = true[ CD ]
Line_16 $$ boolean useUb = random.nextBoolean()-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_79 $$ testAsSet = testAsSet.descendingSet()[ CD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_68 $$ keys = allKeys[ FD ]
Line_55 $$ ubKey = lbKey-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_63 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_74 $$ canonicalList = new ArrayList(canonicalList)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_5 $$ BTreeSet<Integer> testAsSet = this.test[ CD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ CD ]
Line_45 $$ ubKey = keys.get(ubKeyIndex)-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_35 $$ lbIndex++[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_69 $$ Comparator<Integer> comparator = naturalOrder()[ CD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_49 $$ if (ubIndex < 0)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_72 $$ keys = new ArrayList(keys)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_70 $$ if (permitReversal && random.nextBoolean()) [ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_36 $$ if (lbIndex < 0)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_15 $$ boolean useLb = random.nextBoolean()[ FD ]
Line_74 $$ canonicalList = new ArrayList(canonicalList)-->Line_86 $$ Assert.assertEquals(canonicalSet.last(), canonicalList.get(canonicalList.size() - 1))[ FD ]
Line_54 $$ ubIndex = lbIndex-->Line_50 $$ ubIndex = -1 - ubIndex[ FD ]
Line_55 $$ ubKey = lbKey-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_13 $$ int narrowCount = random.nextInt(3)[ FD ]
Line_24 $$ boolean ubInclusive = true-->Line_47 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_53 $$ if (ubIndex < lbIndex) -->Line_55 $$ ubKey = lbKey[ CD ]
Line_44 $$ ubInclusive = random.nextBoolean()-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ CD ]
Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_79 $$ testAsSet = testAsSet.descendingSet()[ FD ]
Line_79 $$ testAsSet = testAsSet.descendingSet()-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_21 $$ boolean lbInclusive = true-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_32 $$ lbKey = keys.get(lbKeyIndex)-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_40 $$ if (useUb) -->Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) [ CD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)[ FD ]
Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_87 $$ Assert.assertEquals(canonicalSet.first(), testAsSet.first())[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_42 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_36 $$ if (lbIndex < 0)-->Line_37 $$ lbIndex = -1 - lbIndex[ CD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_64 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_69 $$ Comparator<Integer> comparator = naturalOrder()-->Line_80 $$ comparator = reverseOrder()[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ CD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ CD ]
Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)[ FD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_44 $$ ubInclusive = random.nextBoolean()[ CD ]
Line_49 $$ if (ubIndex < 0)-->Line_50 $$ ubIndex = -1 - ubIndex[ CD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_77 $$ testAsList = testAsList.descendingSet()[ CD ]
Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)-->Line_55 $$ ubKey = lbKey[ FD ]
Line_68 $$ keys = allKeys-->Line_71 $$ if (allKeys != keys)[ FD ]
Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_74 $$ canonicalList = new ArrayList(canonicalList)[ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_82 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_3 $$ ThreadLocalRandom random = ThreadLocalRandom.current()-->Line_31 $$ lbInclusive = random.nextBoolean()[ FD ]
Line_79 $$ testAsSet = testAsSet.descendingSet()-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_22 $$ Integer lbKey = canonicalList.get(0)-->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_48 $$ ubIndex++[ FD ]
Line_15 $$ boolean useLb = random.nextBoolean()-->Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) [ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_34 $$ if (lbIndex >= 0 && !lbInclusive)-->Line_35 $$ lbIndex++[ CD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_78 $$ canonicalSet = canonicalSet.descendingSet()-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_32 $$ lbKey = keys.get(lbKeyIndex)-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_44 $$ ubInclusive = random.nextBoolean()-->Line_47 $$ if (ubIndex >= 0 && ubInclusive) [ FD ]
Line_50 $$ ubIndex = -1 - ubIndex-->Line_54 $$ ubIndex = lbIndex[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_36 $$ if (lbIndex < 0)[ FD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ CD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_77 $$ testAsList = testAsList.descendingSet()-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_22 $$ Integer lbKey = canonicalList.get(0)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_63 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_24 $$ boolean ubInclusive = true[ CD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_84 $$ if (!canonicalSet.isEmpty()) [ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) [ FD ]
Line_2 $$ RandomSelection select(boolean narrow, boolean mixInNotPresentItems, boolean permitReversal) -->Line_8 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_30 $$ if (useLb = (candidate > lbKey && candidate <= ubKey)) -->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_64 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_33 $$ lbIndex = Collections.binarySearch(canonicalList, lbKey)-->Line_37 $$ lbIndex = -1 - lbIndex[ FD ]
Line_77 $$ testAsList = testAsList.descendingSet()-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_27 $$ if (useLb) -->Line_29 $$ Integer candidate = keys.get(lbKeyIndex)[ CD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_85 $$ Assert.assertEquals(canonicalSet.first(), canonicalList.get(0))[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_29 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_31 $$ lbInclusive = random.nextBoolean()-->Line_34 $$ if (lbIndex >= 0 && !lbInclusive)[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_50 $$ ubIndex = -1 - ubIndex[ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_35 $$ lbIndex++[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_42 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_6 $$ List<Integer> canonicalList = new ArrayList(canonicalSet)-->Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_63 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
Line_24 $$ boolean ubInclusive = true-->Line_44 $$ ubInclusive = random.nextBoolean()[ FD ]
Line_44 $$ ubInclusive = random.nextBoolean()-->Line_56 $$ ubInclusive = false[ FD ]
Line_54 $$ ubIndex = lbIndex-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_25 $$ Integer ubKey = canonicalList.get(canonicalList.size() - 1)[ CD ]
Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)-->Line_48 $$ ubIndex++[ FD ]
Line_23 $$ int lbKeyIndex = 0, lbIndex = 0-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_40 $$ if (useUb) -->Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)[ CD ]
Line_54 $$ ubIndex = lbIndex-->Line_49 $$ if (ubIndex < 0)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_16 $$ boolean useUb = random.nextBoolean()[ CD ]
Line_43 $$ if (useUb = (candidate < ubKey && candidate >= lbKey)) -->Line_47 $$ if (ubIndex >= 0 && ubInclusive) [ CD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_76 $$ Collections.reverse(canonicalList)[ CD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_75 $$ Collections.reverse(keys)[ FD ]
Line_7 $$ BTreeSet<Integer> testAsList = this.test-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_83 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_46 $$ ubIndex = Collections.binarySearch(canonicalList, ubKey)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_17 $$ if (!(useLb | useUb))[ CD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_73 $$ if (canonicalSet != canonical)[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_63 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ CD ]
Line_31 $$ lbInclusive = random.nextBoolean()-->Line_59 $$ testAsSet = !useLb ? testAsSet.headSet(ubKey, ubInclusive) : !useUb ? testAsSet.tailSet(lbKey, lbInclusive) : testAsSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_73 $$ if (canonicalSet != canonical)[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_89 $$ Assert.assertEquals(canonicalSet.first(), testAsList.get(0))[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_53 $$ if (ubIndex < lbIndex) [ FD ]
Line_70 $$ if (permitReversal && random.nextBoolean()) -->Line_71 $$ if (allKeys != keys)[ CD ]
Line_61 $$ canonicalList = canonicalList.subList(lbIndex, ubIndex)-->Line_64 $$ Assert.assertEquals(canonicalList.size(), testAsList.size())[ FD ]
Line_21 $$ boolean lbInclusive = true-->Line_31 $$ lbInclusive = random.nextBoolean()[ FD ]
Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)-->Line_63 $$ Assert.assertEquals(canonicalSet.size(), testAsSet.size())[ FD ]
Line_4 $$ NavigableSet<Integer> canonicalSet = this.canonical-->Line_78 $$ canonicalSet = canonicalSet.descendingSet()[ FD ]
Line_14 $$ while (narrow && canonicalList.size() > 10 && keys.size() > 10 && narrowCount-- > 0) -->Line_27 $$ if (useLb) [ CD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_32 $$ lbKey = keys.get(lbKeyIndex)[ FD ]
Line_74 $$ canonicalList = new ArrayList(canonicalList)-->Line_76 $$ Collections.reverse(canonicalList)[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_50 $$ ubIndex = -1 - ubIndex[ FD ]
Line_12 $$ List<Integer> keys = allKeys-->Line_45 $$ ubKey = keys.get(ubKeyIndex)[ FD ]
Line_84 $$ if (!canonicalSet.isEmpty()) -->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ CD ]
Line_41 $$ ubKeyIndex = random.nextInt(Math.max(lbKeyIndex, keys.size() - indexRange), keys.size() - 1)-->Line_42 $$ Integer candidate = keys.get(ubKeyIndex)[ FD ]
Line_5 $$ BTreeSet<Integer> testAsSet = this.test-->Line_88 $$ Assert.assertEquals(canonicalSet.last(), testAsSet.last())[ FD ]
Line_37 $$ lbIndex = -1 - lbIndex-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_71 $$ if (allKeys != keys)-->Line_72 $$ keys = new ArrayList(keys)[ CD ]
Line_77 $$ testAsList = testAsList.descendingSet()-->Line_90 $$ Assert.assertEquals(canonicalSet.last(), testAsList.get(testAsList.size() - 1))[ FD ]
Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()-->Line_62 $$ testAsList = testAsList.subList(lbIndex, ubIndex)[ FD ]
Line_28 $$ lbKeyIndex = random.nextInt(0, indexRange - 1)-->Line_29 $$ Integer candidate = keys.get(lbKeyIndex)[ FD ]
Line_56 $$ ubInclusive = false-->Line_58 $$ canonicalSet = !useLb ? canonicalSet.headSet(ubKey, ubInclusive) : !useUb ? canonicalSet.tailSet(lbKey, lbInclusive) : canonicalSet.subSet(lbKey, lbInclusive, ubKey, ubInclusive)[ FD ]
Line_60 $$ keys = keys.subList(lbKeyIndex, ubKeyIndex)-->Line_26 $$ int ubKeyIndex = keys.size(), ubIndex = canonicalList.size()[ FD ]
