Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_44 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_14 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_12 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_43 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_51 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_56 $$ assertEquals(driver2.getLastPhase(), 10)[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_28 $$ assertEquals(driver1.getCompletedPhases(), 2)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)[ CD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_29 $$ assertEquals(driver2.getCompletedPhases(), 2)[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_36 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_53 $$ assertEquals(driver2.getFirstPhase(), 0)[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_52 $$ assertEquals(driver1.getFirstPhase(), 0)[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_35 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_31 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_24 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_32 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_6 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_46 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_26 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))-->Line_50 $$ future3.get(1, TimeUnit.SECONDS)[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_20 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_26 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))[ FD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_40 $$ assertEquals(driver3.getCompletedPhases(), 8)[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_4 $$ taskExecutor.start()[ FD ]
Line_6 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_14 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_12 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))-->Line_41 $$ future1.get(1, TimeUnit.SECONDS)[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_47 $$ assertEquals(driver1.getCompletedPhases(), 10)[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_12 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_15 $$ assertEquals(driver1.getCompletedPhases(), 0)[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_23 $$ assertEquals(driver2.getCompletedPhases(), 1)[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_34 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_38 $$ assertEquals(driver1.getCompletedPhases(), 10)[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_14 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_22 $$ assertEquals(driver1.getCompletedPhases(), 1)[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_27 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_30 $$ assertEquals(driver3.getCompletedPhases(), 0)[ FD ]
Line_6 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_26 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_19 $$ assertEquals(driver2.getCompletedPhases(), 0)[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_26 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_39 $$ assertEquals(driver2.getCompletedPhases(), 10)[ FD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_57 $$ assertEquals(driver3.getLastPhase(), 12)[ FD ]
Line_33 $$ for (int i = 0; i < 7; i++) -->Line_34 $$ verificationComplete.arriveAndAwaitAdvance()[ CD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_16 $$ assertEquals(driver2.getCompletedPhases(), 0)[ FD ]
Line_33 $$ for (int i = 0; i < 7; i++) -->Line_35 $$ beginPhase.arriveAndAwaitAdvance()[ CD ]
Line_14 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))-->Line_42 $$ future2.get(1, TimeUnit.SECONDS)[ FD ]
Line_13 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_48 $$ assertEquals(driver2.getCompletedPhases(), 10)[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_10 $$ verificationComplete.register()[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_45 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_55 $$ assertEquals(driver1.getLastPhase(), 10)[ FD ]
Line_11 $$ TestingJob driver1 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_18 $$ assertEquals(driver1.getCompletedPhases(), 0)[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_21 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_17 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_49 $$ assertEquals(driver3.getCompletedPhases(), 10)[ FD ]
Line_7 $$ final Phaser beginPhase = new Phaser()-->Line_8 $$ beginPhase.register()[ FD ]
Line_3 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_59 $$ taskExecutor.stop()[ FD ]
Line_9 $$ final Phaser verificationComplete = new Phaser()-->Line_36 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_4 $$ taskExecutor.start()[ CD ]
Line_33 $$ for (int i = 0; i < 7; i++) -->Line_36 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ CD ]
Line_25 $$ TestingJob driver3 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_54 $$ assertEquals(driver3.getFirstPhase(), 2)[ FD ]
Line_6 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_12 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))[ FD ]
