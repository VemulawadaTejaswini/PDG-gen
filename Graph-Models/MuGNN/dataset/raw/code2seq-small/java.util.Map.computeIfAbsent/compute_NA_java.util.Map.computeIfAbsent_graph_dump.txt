Line_2 $$ private ShardNodes compute() throws SQLException -->Line_3 $$ if (!resultSet.next()) [ CD ]
Line_2 $$ private ShardNodes compute() throws SQLException -->Line_9 $$ Set<String> nodeIdentifiers = nodeIds.stream().map( id -> nodeMap.computeIfAbsent(id, fetchNode)).collect(toSet())[ CD ]
Line_7 $$ List<Integer> nodeIds = intArrayFromBytes(resultSet.getBytes("node_ids"))-->Line_9 $$ Set<String> nodeIdentifiers = nodeIds.stream().map( id -> nodeMap.computeIfAbsent(id, fetchNode)).collect(toSet())[ FD ]
Line_2 $$ private ShardNodes compute() throws SQLException -->Line_7 $$ List<Integer> nodeIds = intArrayFromBytes(resultSet.getBytes("node_ids"))[ CD ]
Line_6 $$ UUID shardUuid = uuidFromBytes(resultSet.getBytes("shard_uuid"))-->Line_8 $$ fetchNode(id, shardUuid)[ FD ]
Line_3 $$ if (!resultSet.next()) -->Line_4 $$ return endOfData()[ CD ]
Line_2 $$ private ShardNodes compute() throws SQLException -->Line_8 $$ Function<Integer, String> fetchNode =  id -> fetchNode(id, shardUuid)[ CD ]
Line_8 $$ Function<Integer, String> fetchNode =  id -> fetchNode(id, shardUuid)-->Line_9 $$ nodeMap.computeIfAbsent(id, fetchNode)[ FD ]
Line_2 $$ private ShardNodes compute() throws SQLException -->Line_10 $$ return new ShardNodes(shardUuid, nodeIdentifiers)[ CD ]
Line_2 $$ private ShardNodes compute() throws SQLException -->Line_6 $$ UUID shardUuid = uuidFromBytes(resultSet.getBytes("shard_uuid"))[ CD ]
