Line_2 $$ public void testSerialization() -->Line_5 $$ WrappedRunnable runnable = new WrappedRunnable() [ CD ]
Line_2 $$ public void testSerialization() -->Line_15 $$ while (executor.getCompletedTaskCount() < 10) continue[ CD ]
Line_4 $$ DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1, Integer.MAX_VALUE, TimeUnit.MILLISECONDS, q, new NamedThreadFactory("TEST"))-->Line_15 $$ while (executor.getCompletedTaskCount() < 10) continue[ FD ]
Line_5 $$ WrappedRunnable runnable = new WrappedRunnable() -->Line_12 $$ executor.execute(runnable)[ FD ]
Line_4 $$ DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1, Integer.MAX_VALUE, TimeUnit.MILLISECONDS, q, new NamedThreadFactory("TEST"))-->Line_12 $$ executor.execute(runnable)[ FD ]
Line_3 $$ LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1)-->Line_14 $$ assert q.size() > 0 : q.size()[ FD ]
Line_5 $$ WrappedRunnable runnable = new WrappedRunnable() -->Line_7 $$ Thread.sleep(50)[ CD ]
Line_2 $$ public void testSerialization() -->Line_3 $$ LinkedBlockingQueue<Runnable> q = new LinkedBlockingQueue<Runnable>(1)[ CD ]
Line_2 $$ public void testSerialization() -->Line_16 $$ long delta = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)[ CD ]
Line_11 $$ for (int i = 0; i < 10; i++) -->Line_12 $$ executor.execute(runnable)[ CD ]
Line_2 $$ public void testSerialization() -->Line_4 $$ DebuggableThreadPoolExecutor executor = new DebuggableThreadPoolExecutor(1, Integer.MAX_VALUE, TimeUnit.MILLISECONDS, q, new NamedThreadFactory("TEST"))[ CD ]
Line_2 $$ public void testSerialization() -->Line_10 $$ long start = System.nanoTime()[ CD ]
Line_2 $$ public void testSerialization() -->Line_11 $$ for (int i = 0; i < 10; i++) [ CD ]
