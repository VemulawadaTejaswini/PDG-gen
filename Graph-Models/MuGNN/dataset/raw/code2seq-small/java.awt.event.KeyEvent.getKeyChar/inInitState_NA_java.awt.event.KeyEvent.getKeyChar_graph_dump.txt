Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_49 $$ message.append(KeyMapBundle.message("prefix.key.pressed.message"))[ CD ]
Line_69 $$ if (myState == KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE) -->Line_71 $$ new SecondaryKeystrokePopup(myFirstKeyStroke, secondKeyStrokes, oldContext).showInBestPositionFor(oldContext)[ CD ]
Line_46 $$ final ArrayList<Pair<AnAction, KeyStroke>> secondKeyStrokes = getSecondKeystrokeActions()-->Line_52 $$ Pair<AnAction, KeyStroke> pair = secondKeyStrokes.get(i)[ FD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_55 $$ message.append(pair.getFirst().getTemplatePresentation().getText())[ CD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_22 $$ KeyStroke originalKeyStroke = KeyStrokeAdapter.getDefaultKeyStroke(e)[ FD ]
Line_66 $$ final DataContext oldContext = myContext.getDataContext()-->Line_71 $$ new SecondaryKeystrokePopup(myFirstKeyStroke, secondKeyStrokes, oldContext).showInBestPositionFor(oldContext)[ FD ]
Line_2 $$ private boolean inInitState() -->Line_26 $$ KeyStroke keyStroke = getKeyStrokeWithoutMouseModifiers(originalKeyStroke)[ CD ]
Line_27 $$ if (myKeyGestureProcessor.processInitState()) -->Line_28 $$ return true[ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_77 $$ setState(KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE)[ CD ]
Line_2 $$ private boolean inInitState() -->Line_23 $$ if (originalKeyStroke == null) [ CD ]
Line_30 $$ if (SystemInfo.isMac) -->Line_31 $$ boolean keyTyped = e.getID() == KeyEvent.KEY_TYPED[ CD ]
Line_47 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_60 $$ StatusBar.Info.set(message.toString(), project)[ FD ]
Line_3 $$ Component focusOwner = myContext.getFocusOwner()-->Line_40 $$ updateCurrentContext(focusOwner, new KeyboardShortcut(keyStroke, null), isModalContext)[ FD ]
Line_2 $$ private boolean inInitState() -->Line_41 $$ if (myContext.getActions().isEmpty()) [ CD ]
Line_67 $$ mySecondKeystrokePopupTimeout.addRequest(new Runnable() -->Line_69 $$ if (myState == KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE) [ CD ]
Line_22 $$ KeyStroke originalKeyStroke = KeyStrokeAdapter.getDefaultKeyStroke(e)-->Line_23 $$ if (originalKeyStroke == null) [ FD ]
Line_30 $$ if (SystemInfo.isMac) -->Line_32 $$ boolean hasMnemonicsInWindow = e.getID() == KeyEvent.KEY_PRESSED && hasMnemonicInWindow(focusOwner, e.getKeyCode()) || keyTyped && hasMnemonicInWindow(focusOwner, e.getKeyChar())[ CD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_55 $$ message.append(pair.getFirst().getTemplatePresentation().getText())[ FD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) [ FD ]
Line_8 $$ if (Registry.is("actionSystem.force.alt.gr")) -->Line_9 $$ return false[ CD ]
Line_13 $$ Locale locale = inputContext.getLocale()-->Line_14 $$ if (locale != null) [ FD ]
Line_14 $$ if (locale != null) -->Line_15 $$ final String language = locale.getLanguage()[ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_61 $$ mySecondStrokeTimeout.cancelAllRequests()[ CD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_50 $$ message.append(' ')[ FD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_53 $$ if (i > 0)[ CD ]
Line_14 $$ if (locale != null) -->Line_16 $$ if (ALT_GR_LAYOUTS.contains(language)) [ CD ]
Line_46 $$ final ArrayList<Pair<AnAction, KeyStroke>> secondKeyStrokes = getSecondKeystrokeActions()-->Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) [ FD ]
Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) -->Line_35 $$ setPressedWasProcessed(true)[ CD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_80 $$ return processAction(e, myActionProcessor)[ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_50 $$ message.append(' ')[ CD ]
Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) -->Line_37 $$ return false[ CD ]
Line_2 $$ private boolean inInitState() -->Line_5 $$ DataContext dataContext = myContext.getDataContext()[ CD ]
Line_46 $$ final ArrayList<Pair<AnAction, KeyStroke>> secondKeyStrokes = getSecondKeystrokeActions()-->Line_65 $$ if (secondKeyStrokes.size() > 1) [ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_63 $$ if (Registry.is("actionSystem.secondKeystrokeAutoPopupEnabled")) [ CD ]
Line_53 $$ if (i > 0)-->Line_54 $$ message.append(", ")[ CD ]
Line_2 $$ private boolean inInitState() -->Line_4 $$ boolean isModalContext = myContext.isModalContext()[ CD ]
Line_23 $$ if (originalKeyStroke == null) -->Line_24 $$ return false[ CD ]
Line_3 $$ Component focusOwner = myContext.getFocusOwner()-->Line_11 $$ final InputContext inputContext = focusOwner.getInputContext()[ FD ]
Line_69 $$ if (myState == KeyState.STATE_WAIT_FOR_SECOND_KEYSTROKE) -->Line_70 $$ StatusBar.Info.set(null, CommonDataKeys.PROJECT.getData(oldContext))[ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_48 $$ StringBuilder message = new StringBuilder()[ CD ]
Line_66 $$ final DataContext oldContext = myContext.getDataContext()-->Line_70 $$ StatusBar.Info.set(null, CommonDataKeys.PROJECT.getData(oldContext))[ FD ]
Line_41 $$ if (myContext.getActions().isEmpty()) -->Line_42 $$ return false[ CD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_57 $$ message.append(KeymapUtil.getKeystrokeText(pair.getSecond()))[ CD ]
Line_7 $$ if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) -->Line_12 $$ if (inputContext != null) [ CD ]
Line_33 $$ boolean imEnabled = IdeEventQueue.getInstance().isInputMethodEnabled()-->Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) [ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_78 $$ return true[ CD ]
Line_2 $$ private boolean inInitState() -->Line_22 $$ KeyStroke originalKeyStroke = KeyStrokeAdapter.getDefaultKeyStroke(e)[ CD ]
Line_5 $$ DataContext dataContext = myContext.getDataContext()-->Line_47 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_13 $$ Locale locale = inputContext.getLocale()-->Line_15 $$ final String language = locale.getLanguage()[ FD ]
Line_3 $$ Component focusOwner = myContext.getFocusOwner()-->Line_32 $$ boolean hasMnemonicsInWindow = e.getID() == KeyEvent.KEY_PRESSED && hasMnemonicInWindow(focusOwner, e.getKeyCode()) || keyTyped && hasMnemonicInWindow(focusOwner, e.getKeyChar())[ FD ]
Line_12 $$ if (inputContext != null) -->Line_14 $$ if (locale != null) [ CD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_52 $$ Pair<AnAction, KeyStroke> pair = secondKeyStrokes.get(i)[ FD ]
Line_65 $$ if (secondKeyStrokes.size() > 1) -->Line_67 $$ mySecondKeystrokePopupTimeout.addRequest(new Runnable() [ CD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_31 $$ boolean keyTyped = e.getID() == KeyEvent.KEY_TYPED[ FD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_52 $$ Pair<AnAction, KeyStroke> pair = secondKeyStrokes.get(i)[ CD ]
Line_15 $$ final String language = locale.getLanguage()-->Line_16 $$ if (ALT_GR_LAYOUTS.contains(language)) [ FD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_58 $$ message.append(")")[ FD ]
Line_52 $$ Pair<AnAction, KeyStroke> pair = secondKeyStrokes.get(i)-->Line_57 $$ message.append(KeymapUtil.getKeystrokeText(pair.getSecond()))[ FD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_53 $$ if (i > 0)[ FD ]
Line_63 $$ if (Registry.is("actionSystem.secondKeystrokeAutoPopupEnabled")) -->Line_64 $$ mySecondKeystrokePopupTimeout.cancelAllRequests()[ CD ]
Line_52 $$ Pair<AnAction, KeyStroke> pair = secondKeyStrokes.get(i)-->Line_55 $$ message.append(pair.getFirst().getTemplatePresentation().getText())[ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_60 $$ StatusBar.Info.set(message.toString(), project)[ CD ]
Line_2 $$ private boolean inInitState() -->Line_27 $$ if (myKeyGestureProcessor.processInitState()) [ CD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_58 $$ message.append(")")[ CD ]
Line_2 $$ private boolean inInitState() -->Line_3 $$ Component focusOwner = myContext.getFocusOwner()[ CD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_32 $$ boolean hasMnemonicsInWindow = e.getID() == KeyEvent.KEY_PRESSED && hasMnemonicInWindow(focusOwner, e.getKeyCode()) || keyTyped && hasMnemonicInWindow(focusOwner, e.getKeyChar())[ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) [ CD ]
Line_22 $$ KeyStroke originalKeyStroke = KeyStrokeAdapter.getDefaultKeyStroke(e)-->Line_26 $$ KeyStroke keyStroke = getKeyStrokeWithoutMouseModifiers(originalKeyStroke)[ FD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_54 $$ message.append(", ")[ FD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_47 $$ final Project project = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_57 $$ message.append(KeymapUtil.getKeystrokeText(pair.getSecond()))[ FD ]
Line_2 $$ private boolean inInitState() -->Line_7 $$ if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) [ CD ]
Line_16 $$ if (ALT_GR_LAYOUTS.contains(language)) -->Line_17 $$ return false[ CD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_60 $$ StatusBar.Info.set(message.toString(), project)[ FD ]
Line_7 $$ if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) -->Line_8 $$ if (Registry.is("actionSystem.force.alt.gr")) [ CD ]
Line_6 $$ KeyEvent e = myContext.getInputEvent()-->Line_7 $$ if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) [ FD ]
Line_63 $$ if (Registry.is("actionSystem.secondKeystrokeAutoPopupEnabled")) -->Line_65 $$ if (secondKeyStrokes.size() > 1) [ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_80 $$ return processAction(e, myActionProcessor)[ CD ]
Line_11 $$ final InputContext inputContext = focusOwner.getInputContext()-->Line_13 $$ Locale locale = inputContext.getLocale()[ FD ]
Line_51 $$ for (int i = 0; i < secondKeyStrokes.size(); i++) -->Line_56 $$ message.append(" (")[ CD ]
Line_4 $$ boolean isModalContext = myContext.isModalContext()-->Line_40 $$ updateCurrentContext(focusOwner, new KeyboardShortcut(keyStroke, null), isModalContext)[ FD ]
Line_2 $$ private boolean inInitState() -->Line_6 $$ KeyEvent e = myContext.getInputEvent()[ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_62 $$ mySecondStrokeTimeout.addRequest(mySecondStrokeTimeoutRunnable, Registry.intValue("actionSystem.secondKeystrokeTimeout"))[ CD ]
Line_65 $$ if (secondKeyStrokes.size() > 1) -->Line_66 $$ final DataContext oldContext = myContext.getDataContext()[ CD ]
Line_30 $$ if (SystemInfo.isMac) -->Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) [ CD ]
Line_2 $$ private boolean inInitState() -->Line_30 $$ if (SystemInfo.isMac) [ CD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_56 $$ message.append(" (")[ FD ]
Line_30 $$ if (SystemInfo.isMac) -->Line_33 $$ boolean imEnabled = IdeEventQueue.getInstance().isInputMethodEnabled()[ CD ]
Line_12 $$ if (inputContext != null) -->Line_13 $$ Locale locale = inputContext.getLocale()[ CD ]
Line_11 $$ final InputContext inputContext = focusOwner.getInputContext()-->Line_12 $$ if (inputContext != null) [ FD ]
Line_48 $$ StringBuilder message = new StringBuilder()-->Line_49 $$ message.append(KeyMapBundle.message("prefix.key.pressed.message"))[ FD ]
Line_34 $$ if (e.getModifiersEx() == InputEvent.ALT_DOWN_MASK && (hasMnemonicsInWindow || !imEnabled && keyTyped)) -->Line_36 $$ setState(KeyState.STATE_PROCESSED)[ CD ]
Line_7 $$ if (myLeftCtrlPressed && myRightAltPressed && focusOwner != null && e.getModifiers() == (InputEvent.CTRL_MASK | InputEvent.ALT_MASK)) -->Line_11 $$ final InputContext inputContext = focusOwner.getInputContext()[ CD ]
Line_2 $$ private boolean inInitState() -->Line_44 $$ if (myContext.isHasSecondStroke()) [ CD ]
Line_44 $$ if (myContext.isHasSecondStroke()) -->Line_46 $$ final ArrayList<Pair<AnAction, KeyStroke>> secondKeyStrokes = getSecondKeystrokeActions()[ CD ]
Line_2 $$ private boolean inInitState() -->Line_40 $$ updateCurrentContext(focusOwner, new KeyboardShortcut(keyStroke, null), isModalContext)[ CD ]
