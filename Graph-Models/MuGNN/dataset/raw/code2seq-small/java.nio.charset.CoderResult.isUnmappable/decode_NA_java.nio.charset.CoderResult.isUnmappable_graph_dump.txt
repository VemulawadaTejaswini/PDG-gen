Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_33 $$ dest.flip()[ FD ]
Line_12 $$ action = CodingErrorAction.REPORT-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_7 $$ decoder = charset.newDecoder()[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_4 $$ String encodingName = getEncodingName()[ CD ]
Line_8 $$ CodingErrorAction action-->Line_12 $$ action = CodingErrorAction.REPORT[ FD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_33 $$ dest.flip()[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)[ FD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_46 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_46 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_53 $$ dest.limit(dest.capacity())[ FD ]
Line_3 $$ CharsetDecoder decoder-->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)[ FD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_46 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_25 $$ while (true) -->Line_27 $$ dest.flip()[ CD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_25 $$ while (true) [ CD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_53 $$ dest.limit(dest.capacity())[ FD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_44 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))[ FD ]
Line_8 $$ CodingErrorAction action-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_28 $$ if (result.isUnderflow()) [ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_33 $$ dest.flip()[ FD ]
Line_40 $$ if (result.isMalformed() || result.isUnmappable()) -->Line_53 $$ dest.limit(dest.capacity())[ CD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_46 $$ log.warning(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_3 $$ CharsetDecoder decoder[ CD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_7 $$ decoder = charset.newDecoder()[ FD ]
Line_25 $$ while (true) -->Line_28 $$ if (result.isUnderflow()) [ CD ]
Line_28 $$ if (result.isUnderflow()) -->Line_36 $$ if (result.isOverflow()) [ CD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_44 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_9 $$ if (ignoreEncodingErrors) -->Line_10 $$ action = CodingErrorAction.REPLACE[ CD ]
Line_36 $$ if (result.isOverflow()) -->Line_40 $$ if (result.isMalformed() || result.isUnmappable()) [ CD ]
Line_6 $$ Charset charset = (this.charset == null) ? Charset.forName(encodingName) : this.charset-->Line_44 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_44 $$ log.error(new JCDiagnostic.SimpleDiagnosticPosition(dest.limit()), "illegal.char.for.encoding", charset == null ? encodingName : charset.name())[ FD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_16 $$ log.error("unsupported.encoding", encodingName)[ FD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_53 $$ dest.limit(dest.capacity())[ FD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_27 $$ dest.flip()[ FD ]
Line_2 $$ private CharBuffer decode(ByteBuffer inbuf, boolean ignoreEncodingErrors) -->Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))[ CD ]
Line_25 $$ while (true) -->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ CD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_10 $$ action = CodingErrorAction.REPLACE-->Line_12 $$ action = CodingErrorAction.REPORT[ FD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_27 $$ dest.flip()[ FD ]
Line_8 $$ CodingErrorAction action-->Line_10 $$ action = CodingErrorAction.REPLACE[ FD ]
Line_32 $$ dest = CharBuffer.allocate(dest.capacity() + 1).put(dest)-->Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ FD ]
Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_36 $$ if (result.isOverflow()) [ FD ]
Line_9 $$ if (ignoreEncodingErrors) -->Line_12 $$ action = CodingErrorAction.REPORT[ CD ]
Line_10 $$ action = CodingErrorAction.REPLACE-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_7 $$ decoder = charset.newDecoder()-->Line_14 $$ decoder.onMalformedInput(action).onUnmappableCharacter(action)[ FD ]
Line_24 $$ CharBuffer dest = CharBuffer.allocate(10 + (int) (inbuf.remaining() * factor))-->Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ FD ]
Line_4 $$ String encodingName = getEncodingName()-->Line_19 $$ log.error("unsupported.encoding", encodingName)[ FD ]
Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)-->Line_27 $$ dest.flip()[ FD ]
Line_36 $$ if (result.isOverflow()) -->Line_39 $$ dest = CharBuffer.allocate(newCapacity).put(dest)[ CD ]
Line_28 $$ if (result.isUnderflow()) -->Line_35 $$ return dest[ CD ]
Line_26 $$ CoderResult result = decoder.decode(inbuf, dest, true)-->Line_40 $$ if (result.isMalformed() || result.isUnmappable()) [ FD ]
