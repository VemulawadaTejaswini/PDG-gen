Line_19 $$ if (e.why == NotFoundReason.not_context) -->Line_20 $$ len = inputName.length - (rest.length - 1)[ CD ]
Line_21 $$ if (rest.length == 1) -->Line_25 $$ System.arraycopy(rest, 1, tmp, 0, tmp.length)[ CD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_37 $$ cpe.setRootCause(e)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_12 $$ ne.setRootCause(e)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_16 $$ NameComponent[] resolvedName = null[ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_41 $$ cpe.setEnvironment(ctx._env)[ CD ]
Line_20 $$ len = inputName.length - (rest.length - 1)-->Line_29 $$ len = inputName.length - rest.length[ FD ]
Line_75 $$ RefAddr addr = new RefAddr("nns") -->Line_77 $$ return rf2[ CD ]
Line_10 $$ NamingException ne = new NameNotFoundException()-->Line_66 $$ ne.setRootCause(ge)[ FD ]
Line_16 $$ NameComponent[] resolvedName = null-->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_39 $$ cpe.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_32 $$ resolvedName = new NameComponent[len]-->Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx[ FD ]
Line_29 $$ len = inputName.length - rest.length-->Line_31 $$ if (len > 0) [ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_37 $$ cpe.setRootCause(e)[ FD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_56 $$ return cpe[ CD ]
Line_44 $$ RefAddr addr = new RefAddr("nns") -->Line_46 $$ return resolvedObj[ CD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_73 $$ cpe.setAltName(cname)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_38 $$ if (rest != null && rest.length > 0) [ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_17 $$ int len = 0[ CD ]
Line_19 $$ if (e.why == NotFoundReason.not_context) -->Line_21 $$ if (rest.length == 1) [ CD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_53 $$ cpe.setResolvedObj(ref)[ CD ]
Line_26 $$ rest = tmp-->Line_39 $$ cpe.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_58 $$ Name cname = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(resolvedName)[ CD ]
Line_17 $$ int len = 0-->Line_29 $$ len = inputName.length - rest.length[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_18 $$ if (inputName != null && (inputName.length >= rest.length)) [ CD ]
Line_21 $$ if (rest.length == 1) -->Line_22 $$ rest = null[ CD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_85 $$ return cpe[ CD ]
Line_18 $$ if (inputName != null && (inputName.length >= rest.length)) -->Line_19 $$ if (e.why == NotFoundReason.not_context) [ CD ]
Line_32 $$ resolvedName = new NameComponent[len]-->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name-->Line_25 $$ System.arraycopy(rest, 1, tmp, 0, tmp.length)[ FD ]
Line_31 $$ if (len > 0) -->Line_32 $$ resolvedName = new NameComponent[len][ CD ]
Line_16 $$ NameComponent[] resolvedName = null-->Line_58 $$ Name cname = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(resolvedName)[ FD ]
Line_31 $$ if (len > 0) -->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ CD ]
Line_8 $$ if (rest[0].id.equals(lastIn.id) && rest[0].kind != null && rest[0].kind.equals(lastIn.kind)) -->Line_12 $$ ne.setRootCause(e)[ CD ]
Line_24 $$ NameComponent[] tmp = new NameComponent[rest.length - 1]-->Line_26 $$ rest = tmp[ FD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_41 $$ cpe.setEnvironment(ctx._env)[ FD ]
Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) -->Line_83 $$ cpe.setAltNameCtx(ctx)[ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_36 $$ CannotProceedException cpe = new CannotProceedException()[ CD ]
Line_17 $$ int len = 0-->Line_31 $$ if (len > 0) [ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_37 $$ cpe.setRootCause(e)[ CD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_53 $$ cpe.setResolvedObj(ref)[ FD ]
Line_29 $$ len = inputName.length - rest.length-->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_22 $$ rest = null-->Line_39 $$ cpe.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_61 $$ resolvedObj2 = NamingManager.getObjectInstance(resolvedObj, cname, ctx, ctx._env)[ FD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_44 $$ RefAddr addr = new RefAddr("nns") [ CD ]
Line_22 $$ rest = null-->Line_25 $$ System.arraycopy(rest, 1, tmp, 0, tmp.length)[ FD ]
Line_38 $$ if (rest != null && rest.length > 0) -->Line_39 $$ cpe.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ CD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_83 $$ cpe.setAltNameCtx(ctx)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_43 $$ if (resolvedObj instanceof javax.naming.Context) [ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx[ FD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_55 $$ cpe.setAltNameCtx((javax.naming.Context) resolvedObj)[ CD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_52 $$ cname.add("")[ CD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) [ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name[ CD ]
Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) -->Line_73 $$ cpe.setAltName(cname)[ CD ]
Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) -->Line_72 $$ cname.add("")[ CD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_54 $$ cpe.setAltName(cname)[ FD ]
Line_32 $$ resolvedName = new NameComponent[len]-->Line_58 $$ Name cname = org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(resolvedName)[ FD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_70 $$ cpe.setResolvedObj(resolvedObj2)[ FD ]
Line_8 $$ if (rest[0].id.equals(lastIn.id) && rest[0].kind != null && rest[0].kind.equals(lastIn.kind)) -->Line_11 $$ ne.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ CD ]
Line_43 $$ if (resolvedObj instanceof javax.naming.Context) -->Line_54 $$ cpe.setAltName(cname)[ CD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_83 $$ cpe.setAltNameCtx(ctx)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx[ CD ]
Line_17 $$ int len = 0-->Line_20 $$ len = inputName.length - (rest.length - 1)[ FD ]
Line_20 $$ len = inputName.length - (rest.length - 1)-->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name-->Line_39 $$ cpe.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_6 $$ if (rest.length == 1 && inputName != null) [ CD ]
Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) -->Line_70 $$ cpe.setResolvedObj(resolvedObj2)[ CD ]
Line_10 $$ NamingException ne = new NameNotFoundException()-->Line_11 $$ ne.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_21 $$ if (rest.length == 1) -->Line_24 $$ NameComponent[] tmp = new NameComponent[rest.length - 1][ CD ]
Line_8 $$ if (rest[0].id.equals(lastIn.id) && rest[0].kind != null && rest[0].kind.equals(lastIn.kind)) -->Line_10 $$ NamingException ne = new NameNotFoundException()[ CD ]
Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name-->Line_22 $$ rest = null[ FD ]
Line_16 $$ NameComponent[] resolvedName = null-->Line_32 $$ resolvedName = new NameComponent[len][ FD ]
Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx-->Line_61 $$ resolvedObj2 = NamingManager.getObjectInstance(resolvedObj, cname, ctx, ctx._env)[ FD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_82 $$ cpe.setResolvedObj(ref)[ FD ]
Line_18 $$ if (inputName != null && (inputName.length >= rest.length)) -->Line_31 $$ if (len > 0) [ CD ]
Line_24 $$ NameComponent[] tmp = new NameComponent[rest.length - 1]-->Line_25 $$ System.arraycopy(rest, 1, tmp, 0, tmp.length)[ FD ]
Line_69 $$ if (resolvedObj2 instanceof javax.naming.Context) -->Line_82 $$ cpe.setResolvedObj(ref)[ CD ]
Line_6 $$ if (rest.length == 1 && inputName != null) -->Line_8 $$ if (rest[0].id.equals(lastIn.id) && rest[0].kind != null && rest[0].kind.equals(lastIn.kind)) [ CD ]
Line_16 $$ NameComponent[] resolvedName = null-->Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx[ FD ]
Line_6 $$ if (rest.length == 1 && inputName != null) -->Line_7 $$ NameComponent lastIn = inputName[inputName.length - 1][ CD ]
Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name-->Line_26 $$ rest = tmp[ FD ]
Line_22 $$ rest = null-->Line_26 $$ rest = tmp[ FD ]
Line_17 $$ int len = 0-->Line_33 $$ System.arraycopy(inputName, 0, resolvedName, 0, len)[ FD ]
Line_21 $$ if (rest.length == 1) -->Line_26 $$ rest = tmp[ CD ]
Line_10 $$ NamingException ne = new NameNotFoundException()-->Line_12 $$ ne.setRootCause(e)[ FD ]
Line_2 $$ private static NamingException tryFed(NotFound e, CNCtx ctx, NameComponent[] inputName) throws NamingException -->Line_4 $$ if (debug) [ CD ]
Line_19 $$ if (e.why == NotFoundReason.not_context) -->Line_29 $$ len = inputName.length - rest.length[ CD ]
Line_20 $$ len = inputName.length - (rest.length - 1)-->Line_31 $$ if (len > 0) [ FD ]
Line_42 $$ final java.lang.Object resolvedObj = (resolvedName != null) ? ctx.callResolve(resolvedName) : ctx-->Line_43 $$ if (resolvedObj instanceof javax.naming.Context) [ FD ]
Line_3 $$ NameComponent[] rest = ((NotFound) e).rest_of_name-->Line_11 $$ ne.setRemainingName(org.wildfly.iiop.openjdk.naming.jndi.CNNameParser.cosNameToName(rest))[ FD ]
Line_36 $$ CannotProceedException cpe = new CannotProceedException()-->Line_55 $$ cpe.setAltNameCtx((javax.naming.Context) resolvedObj)[ FD ]
