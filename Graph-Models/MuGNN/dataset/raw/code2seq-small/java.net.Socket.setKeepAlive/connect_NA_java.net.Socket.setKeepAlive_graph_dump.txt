Line_31 $$ if (maxTargetVersion == NO_VERSION) -->Line_35 $$ disconnect()[ CD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_40 $$ if (targetVersion > maxTargetVersion) [ FD ]
Line_54 $$ if (targetVersion < MessagingService.VERSION_21) -->Line_58 $$ Checksum checksum = XXHashFactory.fastestInstance().newStreamingHash32(LZ4_HASH_SEED).asChecksum()[ CD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_34 $$ logger.warn("Seed gossip version is [ FD ]
Line_51 $$ if (shouldCompressConnection()) -->Line_52 $$ out.flush()[ CD ]
Line_2 $$ private boolean connect() -->Line_76 $$ return false[ CD ]
Line_40 $$ if (targetVersion > maxTargetVersion) -->Line_43 $$ return false[ CD ]
Line_2 $$ private boolean connect() -->Line_6 $$ long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getRpcTimeout())[ CD ]
Line_31 $$ if (maxTargetVersion == NO_VERSION) -->Line_38 $$ MessagingService.instance().setVersion(poolReference.endPoint(), maxTargetVersion)[ CD ]
Line_12 $$ if (isLocalDC(poolReference.endPoint())) -->Line_15 $$ socket.setTcpNoDelay(DatabaseDescriptor.getInterDCTcpNoDelay())[ CD ]
Line_40 $$ if (targetVersion > maxTargetVersion) -->Line_42 $$ disconnect()[ CD ]
Line_45 $$ if (targetVersion < maxTargetVersion && targetVersion < MessagingService.current_version) -->Line_46 $$ logger.trace("Detected higher max version [ CD ]
Line_51 $$ if (shouldCompressConnection()) -->Line_54 $$ if (targetVersion < MessagingService.VERSION_21) [ CD ]
Line_12 $$ if (isLocalDC(poolReference.endPoint())) -->Line_13 $$ socket.setTcpNoDelay(INTRADC_TCP_NODELAY)[ CD ]
Line_2 $$ private boolean connect() -->Line_3 $$ if (logger.isTraceEnabled())[ CD ]
Line_45 $$ if (targetVersion < maxTargetVersion && targetVersion < MessagingService.current_version) -->Line_47 $$ softCloseSocket()[ CD ]
Line_2 $$ private boolean connect() -->Line_5 $$ long start = System.nanoTime()[ CD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_46 $$ logger.trace("Detected higher max version [ FD ]
Line_40 $$ if (targetVersion > maxTargetVersion) -->Line_41 $$ logger.trace("Target max version is [ CD ]
Line_31 $$ if (maxTargetVersion == NO_VERSION) -->Line_33 $$ if (DatabaseDescriptor.getSeeds().contains(poolReference.endPoint()))[ CD ]
Line_3 $$ if (logger.isTraceEnabled())-->Line_4 $$ logger.trace("attempting to connect to [ CD ]
Line_51 $$ if (shouldCompressConnection()) -->Line_53 $$ logger.trace("Upgrading OutputStream to be compressed")[ CD ]
Line_2 $$ private boolean connect() -->Line_7 $$ while (System.nanoTime() - start < timeout) [ CD ]
Line_6 $$ long timeout = TimeUnit.MILLISECONDS.toNanos(DatabaseDescriptor.getRpcTimeout())-->Line_7 $$ while (System.nanoTime() - start < timeout) [ FD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_41 $$ logger.trace("Target max version is [ FD ]
Line_31 $$ if (maxTargetVersion == NO_VERSION) -->Line_32 $$ logger.trace("Target max version is [ CD ]
Line_54 $$ if (targetVersion < MessagingService.VERSION_21) -->Line_57 $$ LZ4Compressor compressor = LZ4Factory.fastestInstance().fastCompressor()[ CD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_38 $$ MessagingService.instance().setVersion(poolReference.endPoint(), maxTargetVersion)[ FD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_31 $$ if (maxTargetVersion == NO_VERSION) [ FD ]
Line_30 $$ int maxTargetVersion = handshakeVersion(in)-->Line_32 $$ logger.trace("Target max version is [ FD ]
Line_33 $$ if (DatabaseDescriptor.getSeeds().contains(poolReference.endPoint()))-->Line_34 $$ logger.warn("Seed gossip version is [ CD ]
Line_7 $$ while (System.nanoTime() - start < timeout) -->Line_8 $$ targetVersion = MessagingService.instance().getVersion(poolReference.endPoint())[ CD ]
Line_29 $$ DataInputStream in = new DataInputStream(socket.getInputStream())-->Line_30 $$ int maxTargetVersion = handshakeVersion(in)[ FD ]
Line_71 $$ if (logger.isTraceEnabled())-->Line_72 $$ logger.trace("unable to connect to " + poolReference.endPoint(), e)[ CD ]
