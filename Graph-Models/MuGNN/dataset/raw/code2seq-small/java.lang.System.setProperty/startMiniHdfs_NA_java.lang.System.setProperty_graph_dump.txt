Line_10 $$ conf = new Configuration(conf)-->Line_11 $$ HadoopUsersConfTestHelper.addUserConf(conf)[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()[ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_4 $$ if (System.getProperty("hadoop.log.dir") == null) [ CD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_11 $$ HadoopUsersConfTestHelper.addUserConf(conf)[ FD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_13 $$ conf.set("dfs.block.access.token.enable", "false")[ FD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_3 $$ if (MINI_DFS == null) [ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_18 $$ MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(conf)[ CD ]
Line_7 $$ if (System.getProperty("test.build.data") == null) -->Line_8 $$ System.setProperty("test.build.data", new File(TEST_DIR_ROOT, "hadoop-data").getAbsolutePath())[ CD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_14 $$ conf.set("dfs.permissions", "true")[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_11 $$ HadoopUsersConfTestHelper.addUserConf(conf)[ CD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_15 $$ conf.set("hadoop.security.authentication", "simple")[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_19 $$ builder.numDataNodes(2)[ CD ]
Line_10 $$ conf = new Configuration(conf)-->Line_17 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()-->Line_24 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_12 $$ conf.set("fs.hdfs.impl.disable.cache", "true")[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_10 $$ conf = new Configuration(conf)[ CD ]
Line_18 $$ MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(conf)-->Line_19 $$ builder.numDataNodes(2)[ FD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_28 $$ return MINI_DFS[ CD ]
Line_20 $$ MiniDFSCluster miniHdfs = builder.build()-->Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_13 $$ conf.set("dfs.block.access.token.enable", "false")[ CD ]
Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()-->Line_22 $$ fileSystem.mkdirs(new Path("/tmp"))[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_15 $$ conf.set("hadoop.security.authentication", "simple")[ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_25 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_16 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_10 $$ conf = new Configuration(conf)-->Line_14 $$ conf.set("dfs.permissions", "true")[ FD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_17 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_22 $$ fileSystem.mkdirs(new Path("/tmp"))[ CD ]
Line_10 $$ conf = new Configuration(conf)-->Line_12 $$ conf.set("fs.hdfs.impl.disable.cache", "true")[ FD ]
Line_10 $$ conf = new Configuration(conf)-->Line_16 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_17 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY, true)[ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_12 $$ conf.set("fs.hdfs.impl.disable.cache", "true")[ CD ]
Line_2 $$ private static synchronized MiniDFSCluster startMiniHdfs(Configuration conf) throws Exception -->Line_10 $$ conf = new Configuration(conf)[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_20 $$ MiniDFSCluster miniHdfs = builder.build()[ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_24 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()-->Line_23 $$ fileSystem.mkdirs(new Path("/user"))[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_23 $$ fileSystem.mkdirs(new Path("/user"))[ CD ]
Line_10 $$ conf = new Configuration(conf)-->Line_13 $$ conf.set("dfs.block.access.token.enable", "false")[ FD ]
Line_10 $$ conf = new Configuration(conf)-->Line_15 $$ conf.set("hadoop.security.authentication", "simple")[ FD ]
Line_18 $$ MiniDFSCluster.Builder builder = new MiniDFSCluster.Builder(conf)-->Line_20 $$ MiniDFSCluster miniHdfs = builder.build()[ FD ]
Line_4 $$ if (System.getProperty("hadoop.log.dir") == null) -->Line_5 $$ System.setProperty("hadoop.log.dir", new File(TEST_DIR_ROOT, "hadoop-log").getAbsolutePath())[ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_7 $$ if (System.getProperty("test.build.data") == null) [ CD ]
Line_3 $$ if (MINI_DFS == null) -->Line_16 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY, true)[ CD ]
Line_21 $$ FileSystem fileSystem = miniHdfs.getFileSystem()-->Line_25 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_3 $$ if (MINI_DFS == null) -->Line_14 $$ conf.set("dfs.permissions", "true")[ CD ]
