Line_13 $$ org.apache.log4j.Logger root = org.apache.log4j.Logger.getRootLogger()-->Line_15 $$ root.setLevel(Level.WARN)[ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_11 $$ System.setProperty("log4j.defaultInitOverride", "true")[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_27 $$ if (newConfigFolder) [ CD ]
Line_35 $$ if (!Main.isHeadless()) -->Line_37 $$ AppUIUtil.registerBundledFonts()[ CD ]
Line_3 $$ boolean newConfigFolder = false-->Line_39 $$ appStarter.start(newConfigFolder)[ FD ]
Line_31 $$ Logger log = Logger.getInstance(Main.class)-->Line_33 $$ loadSystemLibraries(log)[ FD ]
Line_24 $$ if (!lockSystemFolders(args)) -->Line_25 $$ System.exit(Main.INSTANCE_CHECK_FAILED)[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_8 $$ if (!checkJdkVersion()) [ CD ]
Line_8 $$ if (!checkJdkVersion()) -->Line_9 $$ System.exit(Main.JDK_CHECK_FAILED)[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_33 $$ loadSystemLibraries(log)[ CD ]
Line_31 $$ Logger log = Logger.getInstance(Main.class)-->Line_34 $$ fixProcessEnvironment(log)[ FD ]
Line_3 $$ boolean newConfigFolder = false-->Line_6 $$ newConfigFolder = !new File(PathManager.getConfigPath()).exists()[ FD ]
Line_35 $$ if (!Main.isHeadless()) -->Line_36 $$ AppUIUtil.updateWindowIcon(JOptionPane.getRootFrame())[ CD ]
Line_13 $$ org.apache.log4j.Logger root = org.apache.log4j.Logger.getRootLogger()-->Line_14 $$ if (!root.getAllAppenders().hasMoreElements()) [ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_39 $$ appStarter.start(newConfigFolder)[ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_34 $$ fixProcessEnvironment(log)[ CD ]
Line_27 $$ if (newConfigFolder) -->Line_28 $$ ConfigImportHelper.importConfigsTo(PathManager.getConfigPath())[ CD ]
Line_21 $$ if (!checkSystemFolders()) -->Line_22 $$ System.exit(Main.DIR_CHECK_FAILED)[ CD ]
Line_31 $$ Logger log = Logger.getInstance(Main.class)-->Line_32 $$ startLogging(log)[ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_30 $$ Logger.setFactory(LoggerFactory.class)[ CD ]
Line_14 $$ if (!root.getAllAppenders().hasMoreElements()) -->Line_15 $$ root.setLevel(Level.WARN)[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_32 $$ startLogging(log)[ CD ]
Line_14 $$ if (!root.getAllAppenders().hasMoreElements()) -->Line_16 $$ root.addAppender(new ConsoleAppender(new PatternLayout(PatternLayout.DEFAULT_CONVERSION_PATTERN)))[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_21 $$ if (!checkSystemFolders()) [ CD ]
Line_4 $$ if (!Main.isHeadless()) -->Line_6 $$ newConfigFolder = !new File(PathManager.getConfigPath()).exists()[ CD ]
Line_4 $$ if (!Main.isHeadless()) -->Line_5 $$ AppUIUtil.updateFrameClass()[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_24 $$ if (!lockSystemFolders(args)) [ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_35 $$ if (!Main.isHeadless()) [ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_4 $$ if (!Main.isHeadless()) [ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_39 $$ appStarter.start(newConfigFolder)[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_3 $$ boolean newConfigFolder = false[ CD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_31 $$ Logger log = Logger.getInstance(Main.class)[ CD ]
Line_13 $$ org.apache.log4j.Logger root = org.apache.log4j.Logger.getRootLogger()-->Line_16 $$ root.addAppender(new ConsoleAppender(new PatternLayout(PatternLayout.DEFAULT_CONVERSION_PATTERN)))[ FD ]
Line_2 $$ static void prepareAndStart(String[] args, AppStarter appStarter) -->Line_24 $$ if (!lockSystemFolders(args)) [ CD ]
Line_6 $$ newConfigFolder = !new File(PathManager.getConfigPath()).exists()-->Line_39 $$ appStarter.start(newConfigFolder)[ FD ]
