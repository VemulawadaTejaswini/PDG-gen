Line_3 $$ final OperationDefinition removeExtension = new SimpleOperationDefinitionBuilder("remove", new StandardResourceDescriptionResolver("test", "test", getClass().getClassLoader())).build()-->Line_5 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(webExtension, ControllerResolver.getResolver(EXTENSION))).registerOperationHandler(removeExtension, new ReloadRequiredRemoveStepHandler())[ FD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_7 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(EXTENSION), ControllerResolver.getResolver(EXTENSION), new OperationStepHandler() [ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_11 $$ undertow.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.undertow", rootRegistration, ExtensionRegistryType.SERVER))[ FD ]
Line_9 $$ if (!extensionAdded) -->Line_12 $$ io.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.io", rootRegistration, ExtensionRegistryType.SERVER))[ CD ]
Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() -->Line_27 $$ return null[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_36 $$ registerServiceCapabilities(capabilityRegistry, capabilities)[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_4 $$ PathElement webExtension = PathElement.pathElement(EXTENSION, "org.jboss.as.web")[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_6 $$ rootResource.registerChild(webExtension, Resource.Factory.create())[ FD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_34 $$ capabilities.put(buildDynamicCapabilityName(SOCKET_CAPABILITY, "http"), SocketBinding.class)[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_6 $$ rootResource.registerChild(webExtension, Resource.Factory.create())[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_36 $$ registerServiceCapabilities(capabilityRegistry, capabilities)[ FD ]
Line_9 $$ if (!extensionAdded) -->Line_11 $$ undertow.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.undertow", rootRegistration, ExtensionRegistryType.SERVER))[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() [ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_7 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(EXTENSION), ControllerResolver.getResolver(EXTENSION), new OperationStepHandler() [ FD ]
Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() -->Line_24 $$ return null[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_30 $$ rootResource.registerChild(CoreManagementResourceDefinition.PATH_ELEMENT, Resource.Factory.create())[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_3 $$ final OperationDefinition removeExtension = new SimpleOperationDefinitionBuilder("remove", new StandardResourceDescriptionResolver("test", "test", getClass().getClassLoader())).build()[ CD ]
Line_4 $$ PathElement webExtension = PathElement.pathElement(EXTENSION, "org.jboss.as.web")-->Line_6 $$ rootResource.registerChild(webExtension, Resource.Factory.create())[ FD ]
Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() -->Line_18 $$ return true[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_31 $$ System.setProperty("file-base", new File(getClass().getClassLoader().getResource("server.keystore").getFile()).getParentFile().getAbsolutePath())[ CD ]
Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() -->Line_21 $$ return "Test"[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_5 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(webExtension, ControllerResolver.getResolver(EXTENSION))).registerOperationHandler(removeExtension, new ReloadRequiredRemoveStepHandler())[ CD ]
Line_7 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(PathElement.pathElement(EXTENSION), ControllerResolver.getResolver(EXTENSION), new OperationStepHandler() -->Line_9 $$ if (!extensionAdded) [ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_12 $$ io.initialize(extensionRegistry.getExtensionContext("org.wildfly.extension.io", rootRegistration, ExtensionRegistryType.SERVER))[ FD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_35 $$ capabilities.put(buildDynamicCapabilityName(SOCKET_CAPABILITY, "https"), SocketBinding.class)[ CD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_30 $$ rootResource.registerChild(CoreManagementResourceDefinition.PATH_ELEMENT, Resource.Factory.create())[ FD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_5 $$ rootRegistration.registerSubModel(new SimpleResourceDefinition(webExtension, ControllerResolver.getResolver(EXTENSION))).registerOperationHandler(removeExtension, new ReloadRequiredRemoveStepHandler())[ FD ]
Line_2 $$ protected void initializeExtraSubystemsAndModel(ExtensionRegistry extensionRegistry, Resource rootResource, ManagementResourceRegistration rootRegistration, RuntimeCapabilityRegistry capabilityRegistry) -->Line_16 $$ rootRegistration.registerSubModel(CoreManagementResourceDefinition.forStandaloneServer(new DelegatingConfigurableAuthorizer(), null, null, new EnvironmentNameReader() [ FD ]
