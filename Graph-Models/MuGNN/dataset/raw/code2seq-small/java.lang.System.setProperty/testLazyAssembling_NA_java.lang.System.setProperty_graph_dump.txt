Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_16 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_16 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_17 $$ name = (String) server.getAttribute(oname, "Name")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_20 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_14 $$ assertEquals("Invalid name returned", "FACTORY", name)[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_9 $$ String name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_19 $$ oname = ObjectNameManager.getInstance("spring:mbean=another")[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_21 $$ name = (String) server.getAttribute(oname, "Name")-->Line_22 $$ assertEquals("Invalid name returned", "Juergen Hoeller", name)[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_13 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_17 $$ name = (String) server.getAttribute(oname, "Name")-->Line_18 $$ assertEquals("Invalid name returned", "Rob Harrop", name)[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_13 $$ name = (String) server.getAttribute(oname, "Name")-->Line_18 $$ assertEquals("Invalid name returned", "Rob Harrop", name)[ FD ]
Line_19 $$ oname = ObjectNameManager.getInstance("spring:mbean=another")-->Line_20 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_22 $$ assertEquals("Invalid name returned", "Juergen Hoeller", name)[ FD ]
Line_17 $$ name = (String) server.getAttribute(oname, "Name")-->Line_22 $$ assertEquals("Invalid name returned", "Juergen Hoeller", name)[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_16 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_20 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_8 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_4 $$ AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(LazyAssemblingConfiguration.class)-->Line_25 $$ ctx.close()[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_8 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_12 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")[ FD ]
Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_2 $$ public void testLazyAssembling() throws Exception -->Line_3 $$ System.setProperty("domain", "bean")[ CD ]
Line_19 $$ oname = ObjectNameManager.getInstance("spring:mbean=another")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")-->Line_20 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_20 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_12 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_10 $$ assertEquals("Invalid name returned", "TEST", name)[ FD ]
Line_13 $$ name = (String) server.getAttribute(oname, "Name")-->Line_22 $$ assertEquals("Invalid name returned", "Juergen Hoeller", name)[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_13 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_13 $$ name = (String) server.getAttribute(oname, "Name")-->Line_14 $$ assertEquals("Invalid name returned", "FACTORY", name)[ FD ]
Line_13 $$ name = (String) server.getAttribute(oname, "Name")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_9 $$ String name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_17 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")-->Line_16 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_2 $$ public void testLazyAssembling() throws Exception -->Line_4 $$ AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(LazyAssemblingConfiguration.class)[ CD ]
Line_15 $$ oname = ObjectNameManager.getInstance("spring:mbean=true")-->Line_19 $$ oname = ObjectNameManager.getInstance("spring:mbean=another")[ FD ]
Line_13 $$ name = (String) server.getAttribute(oname, "Name")-->Line_21 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_4 $$ AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(LazyAssemblingConfiguration.class)-->Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")[ FD ]
Line_7 $$ ObjectName oname = ObjectNameManager.getInstance("bean:name=testBean4")-->Line_19 $$ oname = ObjectNameManager.getInstance("spring:mbean=another")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_12 $$ assertNotNull(server.getObjectInstance(oname))[ FD ]
Line_9 $$ String name = (String) server.getAttribute(oname, "Name")-->Line_18 $$ assertEquals("Invalid name returned", "Rob Harrop", name)[ FD ]
Line_6 $$ MBeanServer server = (MBeanServer) ctx.getBean("server")-->Line_13 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
Line_11 $$ oname = ObjectNameManager.getInstance("bean:name=testBean5")-->Line_13 $$ name = (String) server.getAttribute(oname, "Name")[ FD ]
