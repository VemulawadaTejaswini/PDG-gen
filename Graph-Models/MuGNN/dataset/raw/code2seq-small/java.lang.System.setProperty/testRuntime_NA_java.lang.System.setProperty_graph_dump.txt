Line_12 $$ ServiceController<FilterService> connectionLimiter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("limit-connections"))-->Line_14 $$ FilterService connectionLimiterService = connectionLimiter.getService().getValue()[ FD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_17 $$ ServiceController<FilterService> headersFilter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("headers"))[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_46 $$ Assert.assertNotNull("handler should have been created", gzipHandler)[ CD ]
Line_9 $$ if (!mainServices.isSuccessfulBoot()) -->Line_10 $$ Assert.fail(mainServices.getBootError().toString())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_28 $$ final ServiceName locationServiceName = UndertowService.locationServiceName("some-server", "default-host", "/")[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_5 $$ System.setProperty("jboss.home.dir", System.getProperty("java.io.tmpdir"))[ CD ]
Line_38 $$ JSPConfig jspConfig = jspServiceServiceController.getService().getValue().getJspConfig()-->Line_40 $$ Assert.assertNotNull(jspConfig.createJSPServletInfo())[ FD ]
Line_44 $$ FilterRef gzipFilterRef = gzipFilterController.getService().getValue()-->Line_45 $$ HttpHandler gzipHandler = gzipFilterRef.createHttpHandler(new PathHandler())[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_52 $$ defaultServerSC.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_14 $$ FilterService connectionLimiterService = connectionLimiter.getService().getValue()-->Line_15 $$ HttpHandler result = connectionLimiterService.createHttpHandler(Predicates.truePredicate(), new PathHandler())[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_44 $$ FilterRef gzipFilterRef = gzipFilterController.getService().getValue()[ CD ]
Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)-->Line_24 $$ Assert.assertNotNull(hostSC)[ FD ]
Line_53 $$ Server defaultServer = defaultServerSC.getValue()-->Line_54 $$ Assert.assertNotNull("Default host should exist", defaultServer)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_35 $$ final ServiceName jspServiceName = UndertowService.SERVLET_CONTAINER.append("myContainer")[ CD ]
Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)-->Line_25 $$ hostSC.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_17 $$ ServiceController<FilterService> headersFilter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("headers"))-->Line_19 $$ FilterService headersService = headersFilter.getService().getValue()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_20 $$ HttpHandler headerHandler = headersService.createHttpHandler(Predicates.truePredicate(), new PathHandler())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_50 $$ Assert.assertNotNull("Default host should exist", defaultHost)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_21 $$ Assert.assertNotNull("handler should have been created", headerHandler)[ CD ]
Line_28 $$ final ServiceName locationServiceName = UndertowService.locationServiceName("some-server", "default-host", "/")-->Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_40 $$ Assert.assertNotNull(jspConfig.createJSPServletInfo())[ CD ]
Line_36 $$ ServiceController<ServletContainerService> jspServiceServiceController = (ServiceController<ServletContainerService>) mainServices.getContainer().getService(jspServiceName)-->Line_38 $$ JSPConfig jspConfig = jspServiceServiceController.getService().getValue().getJspConfig()[ FD ]
Line_26 $$ Host host = hostSC.getValue()-->Line_27 $$ Assert.assertEquals(1, host.getFilters().size())[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_18 $$ headersFilter.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_12 $$ ServiceController<FilterService> connectionLimiter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("limit-connections"))[ CD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_34 $$ connectionLimiter.setMode(ServiceController.Mode.REMOVE)[ CD ]
Line_42 $$ ServiceController<FilterRef> gzipFilterController = (ServiceController<FilterRef>) mainServices.getContainer().getService(filterRefName)-->Line_43 $$ gzipFilterController.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_47 $$ ServiceController<Host> defaultHostSC = (ServiceController<Host>) mainServices.getContainer().getService(UndertowService.DEFAULT_HOST)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_14 $$ FilterService connectionLimiterService = connectionLimiter.getService().getValue()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_47 $$ ServiceController<Host> defaultHostSC = (ServiceController<Host>) mainServices.getContainer().getService(UndertowService.DEFAULT_HOST)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_51 $$ ServiceController<Server> defaultServerSC = (ServiceController<Server>) mainServices.getContainer().getService(UndertowService.DEFAULT_SERVER)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_39 $$ Assert.assertNotNull(jspConfig)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_22 $$ final ServiceName hostServiceName = UndertowService.virtualHostName("some-server", "other-host")[ CD ]
Line_42 $$ ServiceController<FilterRef> gzipFilterController = (ServiceController<FilterRef>) mainServices.getContainer().getService(filterRefName)-->Line_44 $$ FilterRef gzipFilterRef = gzipFilterController.getService().getValue()[ FD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_9 $$ if (!mainServices.isSuccessfulBoot()) [ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_9 $$ if (!mainServices.isSuccessfulBoot()) [ CD ]
Line_41 $$ final ServiceName filterRefName = UndertowService.filterRefName("some-server", "other-host", "/", "static-gzip")-->Line_42 $$ ServiceController<FilterRef> gzipFilterController = (ServiceController<FilterRef>) mainServices.getContainer().getService(filterRefName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_17 $$ ServiceController<FilterService> headersFilter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("headers"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_7 $$ KernelServicesBuilder builder = createKernelServicesBuilder(UndertowSubsystemTestCase.RUNTIME).setSubsystemXml(getSubsystemXml())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_25 $$ hostSC.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)-->Line_30 $$ Assert.assertNotNull(locationSC)[ FD ]
Line_51 $$ ServiceController<Server> defaultServerSC = (ServiceController<Server>) mainServices.getContainer().getService(UndertowService.DEFAULT_SERVER)-->Line_53 $$ Server defaultServer = defaultServerSC.getValue()[ FD ]
Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)-->Line_26 $$ Host host = hostSC.getValue()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_41 $$ final ServiceName filterRefName = UndertowService.filterRefName("some-server", "other-host", "/", "static-gzip")[ CD ]
Line_35 $$ final ServiceName jspServiceName = UndertowService.SERVLET_CONTAINER.append("myContainer")-->Line_36 $$ ServiceController<ServletContainerService> jspServiceServiceController = (ServiceController<ServletContainerService>) mainServices.getContainer().getService(jspServiceName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_6 $$ System.setProperty("jboss.server.server.dir", System.getProperty("java.io.tmpdir"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_13 $$ connectionLimiter.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_36 $$ ServiceController<ServletContainerService> jspServiceServiceController = (ServiceController<ServletContainerService>) mainServices.getContainer().getService(jspServiceName)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_3 $$ System.setProperty("server.data.dir", System.getProperty("java.io.tmpdir"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_43 $$ gzipFilterController.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_19 $$ FilterService headersService = headersFilter.getService().getValue()-->Line_20 $$ HttpHandler headerHandler = headersService.createHttpHandler(Predicates.truePredicate(), new PathHandler())[ FD ]
Line_36 $$ ServiceController<ServletContainerService> jspServiceServiceController = (ServiceController<ServletContainerService>) mainServices.getContainer().getService(jspServiceName)-->Line_37 $$ Assert.assertNotNull(jspServiceServiceController)[ FD ]
Line_47 $$ ServiceController<Host> defaultHostSC = (ServiceController<Host>) mainServices.getContainer().getService(UndertowService.DEFAULT_HOST)-->Line_49 $$ Host defaultHost = defaultHostSC.getValue()[ FD ]
Line_17 $$ ServiceController<FilterService> headersFilter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("headers"))-->Line_18 $$ headersFilter.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_47 $$ ServiceController<Host> defaultHostSC = (ServiceController<Host>) mainServices.getContainer().getService(UndertowService.DEFAULT_HOST)-->Line_48 $$ defaultHostSC.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)-->Line_32 $$ LocationService locationService = locationSC.getValue()[ FD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_10 $$ Assert.fail(mainServices.getBootError().toString())[ FD ]
Line_12 $$ ServiceController<FilterService> connectionLimiter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("limit-connections"))-->Line_34 $$ connectionLimiter.setMode(ServiceController.Mode.REMOVE)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_42 $$ ServiceController<FilterRef> gzipFilterController = (ServiceController<FilterRef>) mainServices.getContainer().getService(filterRefName)[ CD ]
Line_15 $$ HttpHandler result = connectionLimiterService.createHttpHandler(Predicates.truePredicate(), new PathHandler())-->Line_16 $$ Assert.assertNotNull("handler should have been created", result)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_31 $$ locationSC.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_32 $$ LocationService locationService = locationSC.getValue()[ CD ]
Line_20 $$ HttpHandler headerHandler = headersService.createHttpHandler(Predicates.truePredicate(), new PathHandler())-->Line_21 $$ Assert.assertNotNull("handler should have been created", headerHandler)[ FD ]
Line_32 $$ LocationService locationService = locationSC.getValue()-->Line_33 $$ Assert.assertNotNull(locationService)[ FD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_51 $$ ServiceController<Server> defaultServerSC = (ServiceController<Server>) mainServices.getContainer().getService(UndertowService.DEFAULT_SERVER)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_33 $$ Assert.assertNotNull(locationService)[ CD ]
Line_45 $$ HttpHandler gzipHandler = gzipFilterRef.createHttpHandler(new PathHandler())-->Line_46 $$ Assert.assertNotNull("handler should have been created", gzipHandler)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_45 $$ HttpHandler gzipHandler = gzipFilterRef.createHttpHandler(new PathHandler())[ CD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_36 $$ ServiceController<ServletContainerService> jspServiceServiceController = (ServiceController<ServletContainerService>) mainServices.getContainer().getService(jspServiceName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_48 $$ defaultHostSC.setMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)[ CD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_42 $$ ServiceController<FilterRef> gzipFilterController = (ServiceController<FilterRef>) mainServices.getContainer().getService(filterRefName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_54 $$ Assert.assertNotNull("Default host should exist", defaultServer)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_38 $$ JSPConfig jspConfig = jspServiceServiceController.getService().getValue().getJspConfig()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_8 $$ KernelServices mainServices = builder.build()[ CD ]
Line_22 $$ final ServiceName hostServiceName = UndertowService.virtualHostName("some-server", "other-host")-->Line_23 $$ ServiceController<Host> hostSC = (ServiceController<Host>) mainServices.getContainer().getService(hostServiceName)[ FD ]
Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)-->Line_31 $$ locationSC.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_38 $$ JSPConfig jspConfig = jspServiceServiceController.getService().getValue().getJspConfig()-->Line_39 $$ Assert.assertNotNull(jspConfig)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_19 $$ FilterService headersService = headersFilter.getService().getValue()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_27 $$ Assert.assertEquals(1, host.getFilters().size())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_24 $$ Assert.assertNotNull(hostSC)[ CD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_12 $$ ServiceController<FilterService> connectionLimiter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("limit-connections"))[ FD ]
Line_51 $$ ServiceController<Server> defaultServerSC = (ServiceController<Server>) mainServices.getContainer().getService(UndertowService.DEFAULT_SERVER)-->Line_52 $$ defaultServerSC.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_4 $$ System.setProperty("jboss.home.dir", System.getProperty("java.io.tmpdir"))[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_37 $$ Assert.assertNotNull(jspServiceServiceController)[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_26 $$ Host host = hostSC.getValue()[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_16 $$ Assert.assertNotNull("handler should have been created", result)[ CD ]
Line_8 $$ KernelServices mainServices = builder.build()-->Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_49 $$ Host defaultHost = defaultHostSC.getValue()[ CD ]
Line_49 $$ Host defaultHost = defaultHostSC.getValue()-->Line_50 $$ Assert.assertNotNull("Default host should exist", defaultHost)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_53 $$ Server defaultServer = defaultServerSC.getValue()[ CD ]
Line_7 $$ KernelServicesBuilder builder = createKernelServicesBuilder(UndertowSubsystemTestCase.RUNTIME).setSubsystemXml(getSubsystemXml())-->Line_8 $$ KernelServices mainServices = builder.build()[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_15 $$ HttpHandler result = connectionLimiterService.createHttpHandler(Predicates.truePredicate(), new PathHandler())[ CD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_30 $$ Assert.assertNotNull(locationSC)[ CD ]
Line_12 $$ ServiceController<FilterService> connectionLimiter = (ServiceController<FilterService>) mainServices.getContainer().getService(UndertowService.FILTER.append("limit-connections"))-->Line_13 $$ connectionLimiter.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_2 $$ public void testRuntime() throws Exception -->Line_29 $$ ServiceController<LocationService> locationSC = (ServiceController<LocationService>) mainServices.getContainer().getService(locationServiceName)[ CD ]
