Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_10 $$ conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH, cp)[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_6 $$ conf.set("dfs.block.access.token.enable", "false")[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()[ CD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_17 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_8 $$ conf.set("hadoop.security.authentication", "simple")[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_9 $$ String cp = conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) + File.pathSeparator + classpathDir[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_17 $$ fileSystem.setPermission(new Path("/user"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_20 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), 1, conf)[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_21 $$ Writer writer = new FileWriter(classpathDir + "/core-site.xml")[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_10 $$ conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH, cp)[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_7 $$ conf.set("dfs.permissions", "true")[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_6 $$ conf.set("dfs.block.access.token.enable", "false")[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_23 $$ writer.close()[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_11 $$ dfsCluster = new MiniDFSCluster.Builder(conf).build()[ CD ]
Line_21 $$ Writer writer = new FileWriter(classpathDir + "/core-site.xml")-->Line_22 $$ mrCluster.getConfig().writeXml(writer)[ FD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_14 $$ fileSystem.mkdirs(new Path("/user"))[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_16 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ CD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_13 $$ fileSystem.mkdirs(new Path("/tmp"))[ FD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_16 $$ fileSystem.setPermission(new Path("/tmp"), FsPermission.valueOf("-rwxrwxrwx"))[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_18 $$ fileSystem.setPermission(new Path("/hadoop/mapred/system"), FsPermission.valueOf("-rwx------"))[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_20 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), 1, conf)[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_19 $$ FileSystem.setDefaultUri(conf, fileSystem.getUri())[ CD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_15 $$ fileSystem.mkdirs(new Path("/hadoop/mapred/system"))[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_7 $$ conf.set("dfs.permissions", "true")[ FD ]
Line_9 $$ String cp = conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) + File.pathSeparator + classpathDir-->Line_10 $$ conf.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH, cp)[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_19 $$ FileSystem.setDefaultUri(conf, fileSystem.getUri())[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_15 $$ fileSystem.mkdirs(new Path("/hadoop/mapred/system"))[ CD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_18 $$ fileSystem.setPermission(new Path("/hadoop/mapred/system"), FsPermission.valueOf("-rwx------"))[ FD ]
Line_3 $$ if (System.getProperty("hadoop.log.dir") == null) -->Line_4 $$ System.setProperty("hadoop.log.dir", "target/test-dir")[ CD ]
Line_21 $$ Writer writer = new FileWriter(classpathDir + "/core-site.xml")-->Line_23 $$ writer.close()[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_3 $$ if (System.getProperty("hadoop.log.dir") == null) [ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_9 $$ String cp = conf.get(YarnConfiguration.YARN_APPLICATION_CLASSPATH, StringUtils.join(",", YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) + File.pathSeparator + classpathDir[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_13 $$ fileSystem.mkdirs(new Path("/tmp"))[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_8 $$ conf.set("hadoop.security.authentication", "simple")[ FD ]
Line_12 $$ FileSystem fileSystem = dfsCluster.getFileSystem()-->Line_19 $$ FileSystem.setDefaultUri(conf, fileSystem.getUri())[ FD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_14 $$ fileSystem.mkdirs(new Path("/user"))[ CD ]
Line_2 $$ private void startCluster(Configuration conf) throws Exception -->Line_22 $$ mrCluster.getConfig().writeXml(writer)[ CD ]
