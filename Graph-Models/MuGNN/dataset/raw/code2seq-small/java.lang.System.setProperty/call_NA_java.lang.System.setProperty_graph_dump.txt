Line_13 $$ tempStatePath = Files.createTempDirectory(null)-->Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() [ FD ]
Line_11 $$ Path tempStatePath = null-->Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() [ FD ]
Line_2 $$ public Result call() throws ProcessException -->Line_5 $$ if (resource != null) [ CD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_30 $$ Files.delete(path)[ CD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_31 $$ return FileVisitResult.CONTINUE[ CD ]
Line_10 $$ List<CaptureAppender> captureAppenders = null-->Line_41 $$ LogAssertionTestCallback.endAssert(Collections.<ExpectedLogs>emptyList(), captureAppenders)[ FD ]
Line_4 $$ URL resource = PACLTestRule.class.getResource("pacl-test.properties")-->Line_6 $$ System.setProperty("external-properties", resource.getPath())[ FD ]
Line_13 $$ tempStatePath = Files.createTempDirectory(null)-->Line_26 $$ if (tempStatePath != null) [ FD ]
Line_2 $$ public Result call() throws ProcessException -->Line_10 $$ List<CaptureAppender> captureAppenders = null[ CD ]
Line_2 $$ public Result call() throws ProcessException -->Line_8 $$ System.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.apache.naming.java.javaURLContextFactory")[ CD ]
Line_2 $$ public Result call() throws ProcessException -->Line_11 $$ Path tempStatePath = null[ CD ]
Line_2 $$ public Result call() throws ProcessException -->Line_4 $$ URL resource = PACLTestRule.class.getResource("pacl-test.properties")[ CD ]
Line_11 $$ Path tempStatePath = null-->Line_26 $$ if (tempStatePath != null) [ FD ]
Line_5 $$ if (resource != null) -->Line_6 $$ System.setProperty("external-properties", resource.getPath())[ CD ]
Line_4 $$ URL resource = PACLTestRule.class.getResource("pacl-test.properties")-->Line_5 $$ if (resource != null) [ FD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_34 $$ Files.delete(path)[ CD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_34 $$ Files.delete(path)[ FD ]
Line_11 $$ Path tempStatePath = null-->Line_13 $$ tempStatePath = Files.createTempDirectory(null)[ FD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_35 $$ return FileVisitResult.CONTINUE[ CD ]
Line_11 $$ Path tempStatePath = null-->Line_14 $$ System.setProperty("portal:" + PropsKeys.MODULE_FRAMEWORK_STATE_DIR, tempStatePath.toString())[ FD ]
Line_26 $$ if (tempStatePath != null) -->Line_41 $$ LogAssertionTestCallback.endAssert(Collections.<ExpectedLogs>emptyList(), captureAppenders)[ CD ]
Line_2 $$ public Result call() throws ProcessException -->Line_3 $$ ProxySelector.setDefault(new DummySocksProxySelector())[ CD ]
Line_28 $$ Files.walkFileTree(tempStatePath, new SimpleFileVisitor<Path>() -->Line_30 $$ Files.delete(path)[ FD ]
Line_18 $$ captureAppenders = LogAssertionTestCallback.startAssert(Collections.<ExpectedLogs>emptyList())-->Line_41 $$ LogAssertionTestCallback.endAssert(Collections.<ExpectedLogs>emptyList(), captureAppenders)[ FD ]
Line_2 $$ public Result call() throws ProcessException -->Line_9 $$ System.setProperty("catalina.base", ".")[ CD ]
Line_10 $$ List<CaptureAppender> captureAppenders = null-->Line_18 $$ captureAppenders = LogAssertionTestCallback.startAssert(Collections.<ExpectedLogs>emptyList())[ FD ]
Line_13 $$ tempStatePath = Files.createTempDirectory(null)-->Line_14 $$ System.setProperty("portal:" + PropsKeys.MODULE_FRAMEWORK_STATE_DIR, tempStatePath.toString())[ FD ]
