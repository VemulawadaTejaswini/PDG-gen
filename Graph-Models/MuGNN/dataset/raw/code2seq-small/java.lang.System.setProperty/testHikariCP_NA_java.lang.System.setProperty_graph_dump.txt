Line_23 $$ message = (String) loggingEvent.getMessage()-->Line_27 $$ Assert.assertTrue(message.startsWith("Installed "))[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_11 $$ DataSource dataSource = null[ CD ]
Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_19 $$ loggingEvent = loggingEvents.get(1)[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_29 $$ Class<?> dataSourceClass = dataSource.getClass()[ CD ]
Line_13 $$ dataSource = DataSourceFactoryUtil.initDataSource(_properties)-->Line_29 $$ Class<?> dataSourceClass = dataSource.getClass()[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_38 $$ int activeConnections = (int) mBeanServer.getAttribute(poolName, "ActiveConnections")[ CD ]
Line_23 $$ message = (String) loggingEvent.getMessage()-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_27 $$ Assert.assertTrue(message.startsWith("Installed "))[ FD ]
Line_26 $$ message = (String) loggingEvent.getMessage()-->Line_27 $$ Assert.assertTrue(message.startsWith("Installed "))[ FD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_10 $$ ServerDetector.init(ServerDetector.TOMCAT_ID)[ CD ]
Line_41 $$ int totalConnections = (int) mBeanServer.getAttribute(poolName, "TotalConnections")-->Line_42 $$ Assert.assertEquals(totalConnections, activeConnections + idleConnections)[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_30 $$ Assert.assertEquals("com.zaxxer.hikari.HikariDataSource", dataSourceClass.getName())[ CD ]
Line_22 $$ loggingEvent = loggingEvents.get(2)-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_20 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_25 $$ loggingEvent = loggingEvents.get(3)[ FD ]
Line_19 $$ loggingEvent = loggingEvents.get(1)-->Line_22 $$ loggingEvent = loggingEvents.get(2)[ FD ]
Line_11 $$ DataSource dataSource = null-->Line_29 $$ Class<?> dataSourceClass = dataSource.getClass()[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_40 $$ int idleConnections = (int) mBeanServer.getAttribute(poolName, "IdleConnections")[ CD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_31 $$ for (int i = 0; i < _CHECKOUT_COUNT; i++) [ CD ]
Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_15 $$ Assert.assertEquals(4, loggingEvents.size())[ FD ]
Line_20 $$ message = (String) loggingEvent.getMessage()-->Line_23 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_22 $$ loggingEvent = loggingEvents.get(2)-->Line_25 $$ loggingEvent = loggingEvents.get(3)[ FD ]
Line_36 $$ MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()-->Line_41 $$ int totalConnections = (int) mBeanServer.getAttribute(poolName, "TotalConnections")[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_42 $$ Assert.assertEquals(totalConnections, activeConnections + idleConnections)[ CD ]
Line_20 $$ message = (String) loggingEvent.getMessage()-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_20 $$ message = (String) loggingEvent.getMessage()-->Line_24 $$ Assert.assertTrue(message.startsWith("Installing "))[ FD ]
Line_22 $$ loggingEvent = loggingEvents.get(2)-->Line_23 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_25 $$ loggingEvent = loggingEvents.get(3)[ FD ]
Line_23 $$ message = (String) loggingEvent.getMessage()-->Line_24 $$ Assert.assertTrue(message.startsWith("Installing "))[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_6 $$ if (hikaricpJarURL != null) [ CD ]
Line_11 $$ DataSource dataSource = null-->Line_13 $$ dataSource = DataSourceFactoryUtil.initDataSource(_properties)[ FD ]
Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_4 $$ System.setProperty("portal:jdbc.default.liferay.pool.provider", "hikaricp")[ CD ]
Line_19 $$ loggingEvent = loggingEvents.get(1)-->Line_25 $$ loggingEvent = loggingEvents.get(3)[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_37 $$ ObjectName poolName = new ObjectName("com.zaxxer.hikari:type=Pool (TestJDBCPool)")[ CD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_21 $$ Assert.assertTrue(message.startsWith("Downloaded "))[ FD ]
Line_13 $$ dataSource = DataSourceFactoryUtil.initDataSource(_properties)-->Line_32 $$ Connection connection = dataSource.getConnection()[ FD ]
Line_36 $$ MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()-->Line_38 $$ int activeConnections = (int) mBeanServer.getAttribute(poolName, "ActiveConnections")[ FD ]
Line_19 $$ loggingEvent = loggingEvents.get(1)-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_5 $$ String hikaricpJarURL = System.getProperty(_HIKARICP_JAR_URL)-->Line_7 $$ System.setProperty("portal:" + PropsKeys.SETUP_LIFERAY_POOL_PROVIDER_JAR_URL + "[hikaricp]", hikaricpJarURL)[ FD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_22 $$ loggingEvent = loggingEvents.get(2)[ FD ]
Line_37 $$ ObjectName poolName = new ObjectName("com.zaxxer.hikari:type=Pool (TestJDBCPool)")-->Line_40 $$ int idleConnections = (int) mBeanServer.getAttribute(poolName, "IdleConnections")[ FD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_20 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_38 $$ int activeConnections = (int) mBeanServer.getAttribute(poolName, "ActiveConnections")-->Line_39 $$ Assert.assertEquals(_CHECKOUT_COUNT, activeConnections)[ FD ]
Line_5 $$ String hikaricpJarURL = System.getProperty(_HIKARICP_JAR_URL)-->Line_6 $$ if (hikaricpJarURL != null) [ FD ]
Line_20 $$ message = (String) loggingEvent.getMessage()-->Line_27 $$ Assert.assertTrue(message.startsWith("Installed "))[ FD ]
Line_31 $$ for (int i = 0; i < _CHECKOUT_COUNT; i++) -->Line_34 $$ preparedStatement.execute()[ CD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_17 $$ String message = (String) loggingEvent.getMessage()[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_39 $$ Assert.assertEquals(_CHECKOUT_COUNT, activeConnections)[ CD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_5 $$ String hikaricpJarURL = System.getProperty(_HIKARICP_JAR_URL)[ CD ]
Line_32 $$ Connection connection = dataSource.getConnection()-->Line_33 $$ PreparedStatement preparedStatement = connection.prepareStatement("SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS")[ FD ]
Line_20 $$ message = (String) loggingEvent.getMessage()-->Line_21 $$ Assert.assertTrue(message.startsWith("Downloaded "))[ FD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_24 $$ Assert.assertTrue(message.startsWith("Installing "))[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_9 $$ InitUtil.init()[ CD ]
Line_12 $$ try (CaptureAppender captureAppender = Log4JLoggerTestUtil.configureLog4JLogger(JarUtil.class.getName(), Level.INFO)) -->Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()[ FD ]
Line_6 $$ if (hikaricpJarURL != null) -->Line_7 $$ System.setProperty("portal:" + PropsKeys.SETUP_LIFERAY_POOL_PROVIDER_JAR_URL + "[hikaricp]", hikaricpJarURL)[ CD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_36 $$ MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()[ CD ]
Line_37 $$ ObjectName poolName = new ObjectName("com.zaxxer.hikari:type=Pool (TestJDBCPool)")-->Line_41 $$ int totalConnections = (int) mBeanServer.getAttribute(poolName, "TotalConnections")[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_3 $$ RegistryUtil.setRegistry(new BasicRegistryImpl())[ CD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_14 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_22 $$ loggingEvent = loggingEvents.get(2)[ FD ]
Line_29 $$ Class<?> dataSourceClass = dataSource.getClass()-->Line_30 $$ Assert.assertEquals("com.zaxxer.hikari.HikariDataSource", dataSourceClass.getName())[ FD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_23 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_33 $$ PreparedStatement preparedStatement = connection.prepareStatement("SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS")-->Line_34 $$ preparedStatement.execute()[ FD ]
Line_19 $$ loggingEvent = loggingEvents.get(1)-->Line_20 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_36 $$ MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer()-->Line_40 $$ int idleConnections = (int) mBeanServer.getAttribute(poolName, "IdleConnections")[ FD ]
Line_31 $$ for (int i = 0; i < _CHECKOUT_COUNT; i++) -->Line_33 $$ PreparedStatement preparedStatement = connection.prepareStatement("SELECT 1 FROM INFORMATION_SCHEMA.SYSTEM_USERS")[ CD ]
Line_37 $$ ObjectName poolName = new ObjectName("com.zaxxer.hikari:type=Pool (TestJDBCPool)")-->Line_38 $$ int activeConnections = (int) mBeanServer.getAttribute(poolName, "ActiveConnections")[ FD ]
Line_2 $$ public void testHikariCP() throws Exception -->Line_41 $$ int totalConnections = (int) mBeanServer.getAttribute(poolName, "TotalConnections")[ CD ]
Line_17 $$ String message = (String) loggingEvent.getMessage()-->Line_18 $$ Assert.assertTrue(message.startsWith("Downloading "))[ FD ]
Line_19 $$ loggingEvent = loggingEvents.get(1)-->Line_23 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_31 $$ for (int i = 0; i < _CHECKOUT_COUNT; i++) -->Line_32 $$ Connection connection = dataSource.getConnection()[ CD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_23 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_16 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_19 $$ loggingEvent = loggingEvents.get(1)[ FD ]
Line_25 $$ loggingEvent = loggingEvents.get(3)-->Line_26 $$ message = (String) loggingEvent.getMessage()[ FD ]
Line_11 $$ DataSource dataSource = null-->Line_32 $$ Connection connection = dataSource.getConnection()[ FD ]
