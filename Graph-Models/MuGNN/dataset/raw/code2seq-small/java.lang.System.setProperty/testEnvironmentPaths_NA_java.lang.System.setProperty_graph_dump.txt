Line_18 $$ Environment environment-->Line_39 $$ for (Path dataPath : environment.dataWithClusterFiles()) [ FD ]
Line_36 $$ for (Path dataPath : environment.dataFiles()) -->Line_40 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_35 $$ assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_43 $$ assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions)[ CD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_33 $$ assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions)[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_12 $$ settingsBuilder.put("path.logs", esHome.resolve("logs").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_30 $$ assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions)[ CD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_42 $$ assertExactPermissions(new FilePermission(environment.sharedDataFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_37 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_9 $$ settingsBuilder.put("path.plugins", esHome.resolve("plugins").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_3 $$ Path path = createTempDir()[ CD ]
Line_18 $$ Environment environment-->Line_32 $$ assertExactPermissions(new FilePermission(environment.modulesFile().toString(), "read,readlink"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_30 $$ assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_45 $$ assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_45 $$ assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_35 $$ assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_8 $$ settingsBuilder.put("path.scripts", esHome.resolve("scripts").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_13 $$ settingsBuilder.put("pidfile", esHome.resolve("test.pid").toString())[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_17 $$ Permissions permissions[ CD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_7 $$ settingsBuilder.put("path.conf", esHome.resolve("conf").toString())[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_13 $$ settingsBuilder.put("pidfile", esHome.resolve("test.pid").toString())[ FD ]
Line_18 $$ Environment environment-->Line_21 $$ environment = new Environment(settings)[ FD ]
Line_16 $$ String realTmpDir = System.getProperty("java.io.tmpdir")-->Line_24 $$ System.setProperty("java.io.tmpdir", realTmpDir)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_10 $$ settingsBuilder.putArray("path.data", esHome.resolve("data1").toString(), esHome.resolve("data2").toString())[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_9 $$ settingsBuilder.put("path.plugins", esHome.resolve("plugins").toString())[ CD ]
Line_18 $$ Environment environment-->Line_34 $$ assertExactPermissions(new FilePermission(environment.scriptsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_11 $$ settingsBuilder.put("path.shared_data", esHome.resolve("custom").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_6 $$ settingsBuilder.put("path.home", esHome.resolve("home").toString())[ CD ]
Line_17 $$ Permissions permissions-->Line_43 $$ assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_32 $$ assertExactPermissions(new FilePermission(environment.modulesFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_12 $$ settingsBuilder.put("path.logs", esHome.resolve("logs").toString())[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_11 $$ settingsBuilder.put("path.shared_data", esHome.resolve("custom").toString())[ CD ]
Line_18 $$ Environment environment-->Line_33 $$ assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_31 $$ assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_45 $$ assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_42 $$ assertExactPermissions(new FilePermission(environment.sharedDataFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_16 $$ String realTmpDir = System.getProperty("java.io.tmpdir")-->Line_29 $$ assertNoPermissions(PathUtils.get(realTmpDir), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_22 $$ permissions = Security.createPermissions(environment)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_9 $$ settingsBuilder.put("path.plugins", esHome.resolve("plugins").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()[ CD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_8 $$ settingsBuilder.put("path.scripts", esHome.resolve("scripts").toString())[ FD ]
Line_17 $$ Permissions permissions-->Line_34 $$ assertExactPermissions(new FilePermission(environment.scriptsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_34 $$ assertExactPermissions(new FilePermission(environment.scriptsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_7 $$ settingsBuilder.put("path.conf", esHome.resolve("conf").toString())[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_16 $$ String realTmpDir = System.getProperty("java.io.tmpdir")[ CD ]
Line_15 $$ Path fakeTmpDir = createTempDir()-->Line_20 $$ System.setProperty("java.io.tmpdir", fakeTmpDir.toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_26 $$ assertNoPermissions(esHome, permissions)[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_8 $$ settingsBuilder.put("path.scripts", esHome.resolve("scripts").toString())[ CD ]
Line_17 $$ Permissions permissions-->Line_28 $$ assertNoPermissions(esHome.getParent().resolve("other"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_15 $$ Path fakeTmpDir = createTempDir()[ CD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_30 $$ assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_26 $$ assertNoPermissions(esHome, permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_42 $$ assertExactPermissions(new FilePermission(environment.sharedDataFile().toString(), "read,readlink,write,delete"), permissions)[ CD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_6 $$ settingsBuilder.put("path.home", esHome.resolve("home").toString())[ FD ]
Line_17 $$ Permissions permissions-->Line_32 $$ assertExactPermissions(new FilePermission(environment.modulesFile().toString(), "read,readlink"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_27 $$ assertNoPermissions(esHome.getParent(), permissions)[ FD ]
Line_36 $$ for (Path dataPath : environment.dataFiles()) -->Line_37 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_44 $$ assertExactPermissions(new FilePermission(fakeTmpDir.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_33 $$ assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_29 $$ assertNoPermissions(PathUtils.get(realTmpDir), permissions)[ CD ]
Line_17 $$ Permissions permissions-->Line_30 $$ assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_10 $$ settingsBuilder.putArray("path.data", esHome.resolve("data1").toString(), esHome.resolve("data2").toString())[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_36 $$ for (Path dataPath : environment.dataFiles()) [ FD ]
Line_15 $$ Path fakeTmpDir = createTempDir()-->Line_44 $$ assertExactPermissions(new FilePermission(fakeTmpDir.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_31 $$ assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions)[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_14 $$ Settings settings = settingsBuilder.build()[ CD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_31 $$ assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_28 $$ assertNoPermissions(esHome.getParent().resolve("other"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_45 $$ assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_4 $$ Path esHome = path.resolve("esHome")[ CD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_7 $$ settingsBuilder.put("path.conf", esHome.resolve("conf").toString())[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_44 $$ assertExactPermissions(new FilePermission(fakeTmpDir.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_34 $$ assertExactPermissions(new FilePermission(environment.scriptsFile().toString(), "read,readlink"), permissions)[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_45 $$ assertExactPermissions(new FilePermission(environment.pidFile().toString(), "delete"), permissions)[ CD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_12 $$ settingsBuilder.put("path.logs", esHome.resolve("logs").toString())[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_42 $$ assertExactPermissions(new FilePermission(environment.sharedDataFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_26 $$ assertNoPermissions(esHome, permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_29 $$ assertNoPermissions(PathUtils.get(realTmpDir), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_36 $$ for (Path dataPath : environment.dataFiles()) [ FD ]
Line_17 $$ Permissions permissions-->Line_29 $$ assertNoPermissions(PathUtils.get(realTmpDir), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_22 $$ permissions = Security.createPermissions(environment)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_40 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_37 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_11 $$ settingsBuilder.put("path.shared_data", esHome.resolve("custom").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_27 $$ assertNoPermissions(esHome.getParent(), permissions)[ CD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_6 $$ settingsBuilder.put("path.home", esHome.resolve("home").toString())[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_32 $$ assertExactPermissions(new FilePermission(environment.modulesFile().toString(), "read,readlink"), permissions)[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_18 $$ Environment environment[ CD ]
Line_21 $$ environment = new Environment(settings)-->Line_22 $$ permissions = Security.createPermissions(environment)[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_14 $$ Settings settings = settingsBuilder.build()[ FD ]
Line_18 $$ Environment environment-->Line_30 $$ assertExactPermissions(new FilePermission(environment.binFile().toString(), "read,readlink"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_31 $$ assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_33 $$ assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions)[ CD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_44 $$ assertExactPermissions(new FilePermission(fakeTmpDir.toString(), "read,readlink,write,delete"), permissions)[ CD ]
Line_18 $$ Environment environment-->Line_35 $$ assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_27 $$ assertNoPermissions(esHome.getParent(), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_42 $$ assertExactPermissions(new FilePermission(environment.sharedDataFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_18 $$ Environment environment-->Line_43 $$ assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_43 $$ assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_39 $$ for (Path dataPath : environment.dataWithClusterFiles()) [ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_28 $$ assertNoPermissions(esHome.getParent().resolve("other"), permissions)[ CD ]
Line_21 $$ environment = new Environment(settings)-->Line_31 $$ assertExactPermissions(new FilePermission(environment.libFile().toString(), "read,readlink"), permissions)[ FD ]
Line_5 $$ Settings.Builder settingsBuilder = Settings.builder()-->Line_10 $$ settingsBuilder.putArray("path.data", esHome.resolve("data1").toString(), esHome.resolve("data2").toString())[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_13 $$ settingsBuilder.put("pidfile", esHome.resolve("test.pid").toString())[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_43 $$ assertExactPermissions(new FilePermission(environment.logsFile().toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_3 $$ Path path = createTempDir()-->Line_4 $$ Path esHome = path.resolve("esHome")[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_35 $$ assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_21 $$ environment = new Environment(settings)-->Line_34 $$ assertExactPermissions(new FilePermission(environment.scriptsFile().toString(), "read,readlink"), permissions)[ FD ]
Line_4 $$ Path esHome = path.resolve("esHome")-->Line_28 $$ assertNoPermissions(esHome.getParent().resolve("other"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_32 $$ assertExactPermissions(new FilePermission(environment.modulesFile().toString(), "read,readlink"), permissions)[ FD ]
Line_2 $$ public void testEnvironmentPaths() throws Exception -->Line_35 $$ assertExactPermissions(new FilePermission(environment.pluginsFile().toString(), "read,readlink"), permissions)[ CD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_27 $$ assertNoPermissions(esHome.getParent(), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_33 $$ assertExactPermissions(new FilePermission(environment.configFile().toString(), "read,readlink"), permissions)[ FD ]
Line_17 $$ Permissions permissions-->Line_40 $$ assertExactPermissions(new FilePermission(dataPath.toString(), "read,readlink,write,delete"), permissions)[ FD ]
Line_22 $$ permissions = Security.createPermissions(environment)-->Line_26 $$ assertNoPermissions(esHome, permissions)[ FD ]
