Line_23 $$ Subject loginSubject = login.getSubject()-->Line_24 $$ Set<Principal> loginPrincipals = loginSubject.getPrincipals()[ FD ]
Line_31 $$ User ugiUser = new User(loginPrincipals.iterator().next().getName(), AuthenticationMethod.KERBEROS, login)-->Line_32 $$ loginSubject.getPrincipals().add(ugiUser)[ FD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_13 $$ krbOptions.put("useTicketCache", "true")[ FD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_17 $$ krbOptions.put("renewTGT", "false")[ FD ]
Line_8 $$ if (IBM_JAVA) -->Line_12 $$ krbOptions.put("doNotPrompt", "true")[ CD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_15 $$ krbOptions.put("ticketCache", ticketCache)[ FD ]
Line_28 $$ if (loginPrincipals.size() != 1) -->Line_29 $$ LOG.warn("found more than one principal in the ticket cache file " + ticketCache)[ CD ]
Line_23 $$ Subject loginSubject = login.getSubject()-->Line_32 $$ loginSubject.getPrincipals().add(ugiUser)[ FD ]
Line_24 $$ Set<Principal> loginPrincipals = loginSubject.getPrincipals()-->Line_31 $$ User ugiUser = new User(loginPrincipals.iterator().next().getName(), AuthenticationMethod.KERBEROS, login)[ FD ]
Line_2 $$ public static UserGroupInformation getUGIFromTicketCache(String ticketCache, String user) throws IOException -->Line_15 $$ krbOptions.put("ticketCache", ticketCache)[ FD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_12 $$ krbOptions.put("doNotPrompt", "true")[ FD ]
Line_8 $$ if (IBM_JAVA) -->Line_14 $$ krbOptions.put("useKeyTab", "false")[ CD ]
Line_8 $$ if (IBM_JAVA) -->Line_10 $$ System.setProperty("KRB5CCNAME", ticketCache)[ CD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_9 $$ krbOptions.put("useDefaultCcache", "true")[ FD ]
Line_2 $$ public static UserGroupInformation getUGIFromTicketCache(String ticketCache, String user) throws IOException -->Line_10 $$ System.setProperty("KRB5CCNAME", ticketCache)[ FD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_14 $$ krbOptions.put("useKeyTab", "false")[ FD ]
Line_33 $$ UserGroupInformation ugi = new UserGroupInformation(loginSubject)-->Line_34 $$ ugi.setLogin(login)[ FD ]
Line_21 $$ LoginContext login = newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf)-->Line_23 $$ Subject loginSubject = login.getSubject()[ FD ]
Line_21 $$ LoginContext login = newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf)-->Line_22 $$ login.login()[ FD ]
Line_24 $$ Set<Principal> loginPrincipals = loginSubject.getPrincipals()-->Line_28 $$ if (loginPrincipals.size() != 1) [ FD ]
Line_3 $$ if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) -->Line_4 $$ return getBestUGI(null, user)[ CD ]
Line_8 $$ if (IBM_JAVA) -->Line_13 $$ krbOptions.put("useTicketCache", "true")[ CD ]
Line_21 $$ LoginContext login = newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf)-->Line_34 $$ ugi.setLogin(login)[ FD ]
Line_2 $$ public static UserGroupInformation getUGIFromTicketCache(String ticketCache, String user) throws IOException -->Line_3 $$ if (!isAuthenticationMethodEnabled(AuthenticationMethod.KERBEROS)) [ CD ]
Line_33 $$ UserGroupInformation ugi = new UserGroupInformation(loginSubject)-->Line_35 $$ ugi.setAuthenticationMethod(AuthenticationMethod.KERBEROS)[ FD ]
Line_8 $$ if (IBM_JAVA) -->Line_15 $$ krbOptions.put("ticketCache", ticketCache)[ CD ]
Line_24 $$ Set<Principal> loginPrincipals = loginSubject.getPrincipals()-->Line_25 $$ if (loginPrincipals.isEmpty()) [ FD ]
Line_8 $$ if (IBM_JAVA) -->Line_9 $$ krbOptions.put("useDefaultCcache", "true")[ CD ]
Line_7 $$ Map<String, String> krbOptions = new HashMap<String, String>()-->Line_18 $$ krbOptions.putAll(HadoopConfiguration.BASIC_JAAS_OPTIONS)[ FD ]
Line_20 $$ DynamicConfiguration dynConf = new DynamicConfiguration(new AppConfigurationEntry[] -->Line_21 $$ LoginContext login = newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, null, dynConf)[ FD ]
Line_2 $$ public static UserGroupInformation getUGIFromTicketCache(String ticketCache, String user) throws IOException -->Line_4 $$ return getBestUGI(null, user)[ FD ]
