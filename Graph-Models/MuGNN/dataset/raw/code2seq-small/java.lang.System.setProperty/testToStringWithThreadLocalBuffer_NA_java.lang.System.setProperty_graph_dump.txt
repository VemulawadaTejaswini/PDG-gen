Line_4 $$ String propertyKey = StringBundler.class.getName() + ".threadlocal.buffer.limit"-->Line_33 $$ System.setProperty(propertyKey, propertyValue)[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_15 $$ sb.append("3")[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_17 $$ Assert.assertEquals("1234", sb.toString())[ FD ]
Line_30 $$ if (propertyValue == null) -->Line_31 $$ System.clearProperty(propertyKey)[ CD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_23 $$ Assert.assertSame(stringBuilder, threadLocal.get())[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_25 $$ sb.append("6")[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_22 $$ Assert.assertEquals("12345", sb.toString())[ FD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_24 $$ Assert.assertEquals(10, stringBuilder.capacity())[ FD ]
Line_3 $$ int threadLocalBufferLimit = 3-->Line_8 $$ Assert.assertEquals(threadLocalBufferLimit, ReflectionTestUtil.getFieldValue(StringBundler.class, "_THREAD_LOCAL_BUFFER_LIMIT"))[ FD ]
Line_30 $$ if (propertyValue == null) -->Line_33 $$ System.setProperty(propertyKey, propertyValue)[ CD ]
Line_2 $$ public void testToStringWithThreadLocalBuffer() -->Line_3 $$ int threadLocalBufferLimit = 3[ CD ]
Line_2 $$ public void testToStringWithThreadLocalBuffer() -->Line_4 $$ String propertyKey = StringBundler.class.getName() + ".threadlocal.buffer.limit"[ CD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_28 $$ Assert.assertEquals(10, stringBuilder.capacity())[ FD ]
Line_9 $$ ThreadLocal<StringBuilder> threadLocal = ReflectionTestUtil.getFieldValue(StringBundler.class, "_stringBuilderThreadLocal")-->Line_11 $$ threadLocal.remove()[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_26 $$ Assert.assertEquals("123456", sb.toString())[ FD ]
Line_9 $$ ThreadLocal<StringBuilder> threadLocal = ReflectionTestUtil.getFieldValue(StringBundler.class, "_stringBuilderThreadLocal")-->Line_27 $$ Assert.assertSame(stringBuilder, threadLocal.get())[ FD ]
Line_9 $$ ThreadLocal<StringBuilder> threadLocal = ReflectionTestUtil.getFieldValue(StringBundler.class, "_stringBuilderThreadLocal")-->Line_10 $$ Assert.assertNotNull(threadLocal)[ FD ]
Line_3 $$ int threadLocalBufferLimit = 3-->Line_6 $$ System.setProperty(propertyKey, String.valueOf(threadLocalBufferLimit))[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append("2")[ FD ]
Line_9 $$ ThreadLocal<StringBuilder> threadLocal = ReflectionTestUtil.getFieldValue(StringBundler.class, "_stringBuilderThreadLocal")-->Line_23 $$ Assert.assertSame(stringBuilder, threadLocal.get())[ FD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_27 $$ Assert.assertSame(stringBuilder, threadLocal.get())[ FD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_19 $$ Assert.assertNotNull(stringBuilder)[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_21 $$ sb.append("5")[ FD ]
Line_9 $$ ThreadLocal<StringBuilder> threadLocal = ReflectionTestUtil.getFieldValue(StringBundler.class, "_stringBuilderThreadLocal")-->Line_18 $$ StringBuilder stringBuilder = threadLocal.get()[ FD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_13 $$ sb.append("1")[ FD ]
Line_4 $$ String propertyKey = StringBundler.class.getName() + ".threadlocal.buffer.limit"-->Line_6 $$ System.setProperty(propertyKey, String.valueOf(threadLocalBufferLimit))[ FD ]
Line_18 $$ StringBuilder stringBuilder = threadLocal.get()-->Line_20 $$ Assert.assertEquals(4, stringBuilder.capacity())[ FD ]
Line_2 $$ public void testToStringWithThreadLocalBuffer() -->Line_5 $$ String propertyValue = System.getProperty(propertyKey)[ CD ]
Line_2 $$ public void testToStringWithThreadLocalBuffer() -->Line_6 $$ System.setProperty(propertyKey, String.valueOf(threadLocalBufferLimit))[ CD ]
Line_12 $$ StringBundler sb = new StringBundler()-->Line_16 $$ sb.append("4")[ FD ]
Line_4 $$ String propertyKey = StringBundler.class.getName() + ".threadlocal.buffer.limit"-->Line_31 $$ System.clearProperty(propertyKey)[ FD ]
Line_5 $$ String propertyValue = System.getProperty(propertyKey)-->Line_33 $$ System.setProperty(propertyKey, propertyValue)[ FD ]
Line_4 $$ String propertyKey = StringBundler.class.getName() + ".threadlocal.buffer.limit"-->Line_5 $$ String propertyValue = System.getProperty(propertyKey)[ FD ]
Line_5 $$ String propertyValue = System.getProperty(propertyKey)-->Line_30 $$ if (propertyValue == null) [ FD ]
