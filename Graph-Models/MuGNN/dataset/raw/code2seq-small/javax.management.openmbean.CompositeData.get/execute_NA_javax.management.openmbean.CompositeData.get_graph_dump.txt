Line_2 $$ public void execute(NodeProbe probe) -->Line_3 $$ checkArgument(args.size() == 3, "toppartitions requires keyspace, column family name, and duration")[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_16 $$ Map<Sampler, CompositeData> results[ CD ]
Line_22 $$ boolean first = true-->Line_31 $$ if (!first)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_22 $$ boolean first = true[ CD ]
Line_23 $$ for (Entry<Sampler, CompositeData> result : results.entrySet()) -->Line_24 $$ CompositeData sampling = result.getValue()[ FD ]
Line_25 $$ List<CompositeData> topk = (List<CompositeData>) (Object) Lists.newArrayList(((TabularDataSupport) sampling.get("partitions")).values())-->Line_26 $$ Collections.sort(topk, new Ordering<CompositeData>() [ FD ]
Line_31 $$ if (!first)-->Line_32 $$ System.out.println()[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_7 $$ Integer duration = Integer.parseInt(args.get(2))[ CD ]
Line_25 $$ List<CompositeData> topk = (List<CompositeData>) (Object) Lists.newArrayList(((TabularDataSupport) sampling.get("partitions")).values())-->Line_36 $$ if (topk.size() == 0) [ FD ]
Line_9 $$ for (String s : samplers.split(",")) -->Line_11 $$ targets.add(Sampler.valueOf(s.toUpperCase()))[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_4 $$ checkArgument(topCount < size, "TopK count (-k) option must be smaller then the summary capacity (-s)")[ CD ]
Line_6 $$ String cfname = args.get(1)-->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_8 $$ List<Sampler> targets = Lists.newArrayList()-->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_36 $$ if (topk.size() == 0) -->Line_41 $$ System.out.printf("\t%-" + offset + "s%10s%10s%n", "Partition", "Count", "+/-")[ CD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_6 $$ String cfname = args.get(1)[ CD ]
Line_26 $$ Collections.sort(topk, new Ordering<CompositeData>() -->Line_28 $$ return Long.compare((long) right.get("count"), (long) left.get("count"))[ FD ]
Line_5 $$ String keyspace = args.get(0)-->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_7 $$ Integer duration = Integer.parseInt(args.get(2))-->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_8 $$ List<Sampler> targets = Lists.newArrayList()[ CD ]
Line_24 $$ CompositeData sampling = result.getValue()-->Line_34 $$ System.out.printf("  Cardinality: ~%d (%d capacity)%n", (long) sampling.get("cardinality"), size)[ FD ]
Line_36 $$ if (topk.size() == 0) -->Line_37 $$ System.out.println("\tNothing recorded during sampling period...")[ CD ]
Line_23 $$ for (Entry<Sampler, CompositeData> result : results.entrySet()) -->Line_33 $$ System.out.println(result.getKey().toString() + " Sampler:")[ FD ]
Line_2 $$ public void execute(NodeProbe probe) -->Line_5 $$ String keyspace = args.get(0)[ CD ]
Line_16 $$ Map<Sampler, CompositeData> results-->Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)[ FD ]
Line_16 $$ Map<Sampler, CompositeData> results-->Line_23 $$ for (Entry<Sampler, CompositeData> result : results.entrySet()) [ FD ]
Line_24 $$ CompositeData sampling = result.getValue()-->Line_25 $$ List<CompositeData> topk = (List<CompositeData>) (Object) Lists.newArrayList(((TabularDataSupport) sampling.get("partitions")).values())[ FD ]
Line_18 $$ results = probe.getPartitionSample(keyspace, cfname, size, duration, topCount, targets)-->Line_23 $$ for (Entry<Sampler, CompositeData> result : results.entrySet()) [ FD ]
Line_8 $$ List<Sampler> targets = Lists.newArrayList()-->Line_11 $$ targets.add(Sampler.valueOf(s.toUpperCase()))[ FD ]
Line_26 $$ Collections.sort(topk, new Ordering<CompositeData>() -->Line_28 $$ return Long.compare((long) right.get("count"), (long) left.get("count"))[ CD ]
