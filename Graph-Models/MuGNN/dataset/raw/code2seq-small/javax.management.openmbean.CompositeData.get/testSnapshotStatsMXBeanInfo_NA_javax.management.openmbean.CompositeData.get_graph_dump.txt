Line_20 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=NameNode,name=SnapshotInfo")-->Line_24 $$ CompositeData[] snapshots = (CompositeData[]) mbs.getAttribute(mxbeanName, "Snapshots")[ FD ]
Line_27 $$ CompositeData d = (CompositeData) Array.get(directories, 0)-->Line_29 $$ assertTrue(((String) d.get("path")).contains(pathName))[ FD ]
Line_10 $$ Path path = new Path(pathName)-->Line_16 $$ dfs.mkdirs(path)[ FD ]
Line_22 $$ int numDirectories = Array.getLength(directories)-->Line_23 $$ assertEquals(sm.getNumSnapshottableDirs(), numDirectories)[ FD ]
Line_24 $$ CompositeData[] snapshots = (CompositeData[]) mbs.getAttribute(mxbeanName, "Snapshots")-->Line_25 $$ int numSnapshots = Array.getLength(snapshots)[ FD ]
Line_28 $$ CompositeData s = (CompositeData) Array.get(snapshots, 0)-->Line_30 $$ assertTrue(((String) s.get("snapshotDirectory")).contains(pathName))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_14 $$ SnapshotManager sm = cluster.getNamesystem().getSnapshotManager()[ FD ]
Line_19 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_21 $$ CompositeData[] directories = (CompositeData[]) mbs.getAttribute(mxbeanName, "SnapshottableDirectories")[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_13 $$ cluster.waitActive()[ FD ]
Line_21 $$ CompositeData[] directories = (CompositeData[]) mbs.getAttribute(mxbeanName, "SnapshottableDirectories")-->Line_27 $$ CompositeData d = (CompositeData) Array.get(directories, 0)[ FD ]
Line_15 $$ DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem()-->Line_16 $$ dfs.mkdirs(path)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()[ FD ]
Line_9 $$ String pathName = "/snapshot"-->Line_30 $$ assertTrue(((String) s.get("snapshotDirectory")).contains(pathName))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_15 $$ DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem()[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_13 $$ cluster.waitActive()[ FD ]
Line_15 $$ DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem()-->Line_17 $$ dfs.allowSnapshot(path)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_14 $$ SnapshotManager sm = cluster.getNamesystem().getSnapshotManager()[ FD ]
Line_20 $$ ObjectName mxbeanName = new ObjectName("Hadoop:service=NameNode,name=SnapshotInfo")-->Line_21 $$ CompositeData[] directories = (CompositeData[]) mbs.getAttribute(mxbeanName, "SnapshottableDirectories")[ FD ]
Line_10 $$ Path path = new Path(pathName)-->Line_17 $$ dfs.allowSnapshot(path)[ FD ]
Line_10 $$ Path path = new Path(pathName)-->Line_18 $$ dfs.createSnapshot(path)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_32 $$ if (cluster != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_32 $$ if (cluster != null) [ FD ]
Line_14 $$ SnapshotManager sm = cluster.getNamesystem().getSnapshotManager()-->Line_26 $$ assertEquals(sm.getNumSnapshots(), numSnapshots)[ FD ]
Line_32 $$ if (cluster != null) -->Line_33 $$ cluster.shutdown()[ CD ]
Line_24 $$ CompositeData[] snapshots = (CompositeData[]) mbs.getAttribute(mxbeanName, "Snapshots")-->Line_28 $$ CompositeData s = (CompositeData) Array.get(snapshots, 0)[ FD ]
Line_21 $$ CompositeData[] directories = (CompositeData[]) mbs.getAttribute(mxbeanName, "SnapshottableDirectories")-->Line_22 $$ int numDirectories = Array.getLength(directories)[ FD ]
Line_14 $$ SnapshotManager sm = cluster.getNamesystem().getSnapshotManager()-->Line_23 $$ assertEquals(sm.getNumSnapshottableDirs(), numDirectories)[ FD ]
Line_9 $$ String pathName = "/snapshot"-->Line_29 $$ assertTrue(((String) d.get("path")).contains(pathName))[ FD ]
Line_19 $$ MBeanServer mbs = ManagementFactory.getPlatformMBeanServer()-->Line_24 $$ CompositeData[] snapshots = (CompositeData[]) mbs.getAttribute(mxbeanName, "Snapshots")[ FD ]
Line_15 $$ DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem()-->Line_18 $$ dfs.createSnapshot(path)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_33 $$ cluster.shutdown()[ FD ]
Line_25 $$ int numSnapshots = Array.getLength(snapshots)-->Line_26 $$ assertEquals(sm.getNumSnapshots(), numSnapshots)[ FD ]
Line_8 $$ MiniDFSCluster cluster = null-->Line_15 $$ DistributedFileSystem dfs = (DistributedFileSystem) cluster.getFileSystem()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_33 $$ cluster.shutdown()[ FD ]
