Line_2 $$ protected JComponent createCenterPanel() -->Line_23 $$ CompletionStatistics stats = ((FeatureUsageTrackerImpl) FeatureUsageTracker.getInstance()).getCompletionStatistics()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_10 $$ final TableView table = new TableView<FeatureDescriptor>(new ListTableModel<FeatureDescriptor>(COLUMNS, features, 0))[ CD ]
Line_11 $$ new TableViewSpeedSearch<FeatureDescriptor>(table) -->Line_13 $$ return element.getDisplayName()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_33 $$ controlsPanel.add(new JLabel(XmlStringUtil.wrapInHtml(labelText)), BorderLayout.NORTH)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_36 $$ topPanel.add(ScrollPaneFactory.createScrollPane(table), BorderLayout.CENTER)[ CD ]
Line_3 $$ Splitter splitter = new Splitter(true)-->Line_39 $$ splitter.setSecondComponent(ScrollPaneFactory.createScrollPane(browser))[ FD ]
Line_45 $$ if (selection.isEmpty()) -->Line_46 $$ browser.read(new StringReader(""), null)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_35 $$ topPanel.add(controlsPanel, BorderLayout.NORTH)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_5 $$ ProductivityFeaturesRegistry registry = ProductivityFeaturesRegistry.getInstance()[ CD ]
Line_10 $$ final TableView table = new TableView<FeatureDescriptor>(new ListTableModel<FeatureDescriptor>(COLUMNS, features, 0))-->Line_43 $$ Collection selection = table.getSelection()[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_30 $$ if (fstats.dayCount > 0 && fstats.invocations > 0) [ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_41 $$ table.getSelectionModel().addListSelectionListener(new ListSelectionListener() [ CD ]
Line_5 $$ ProductivityFeaturesRegistry registry = ProductivityFeaturesRegistry.getInstance()-->Line_8 $$ features.add(registry.getFeatureDescriptor(id))[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_37 $$ splitter.setFirstComponent(topPanel)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_56 $$ return splitter[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_29 $$ CumulativeStatistics fstats = ((FeatureUsageTrackerImpl) FeatureUsageTracker.getInstance()).getFixesStats()[ CD ]
Line_10 $$ final TableView table = new TableView<FeatureDescriptor>(new ListTableModel<FeatureDescriptor>(COLUMNS, features, 0))-->Line_41 $$ table.getSelectionModel().addListSelectionListener(new ListSelectionListener() [ FD ]
Line_10 $$ final TableView table = new TableView<FeatureDescriptor>(new ListTableModel<FeatureDescriptor>(COLUMNS, features, 0))-->Line_40 $$ table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_4 $$ splitter.setShowDividerControls(true)[ CD ]
Line_10 $$ final TableView table = new TableView<FeatureDescriptor>(new ListTableModel<FeatureDescriptor>(COLUMNS, features, 0))-->Line_36 $$ topPanel.add(ScrollPaneFactory.createScrollPane(table), BorderLayout.CENTER)[ FD ]
Line_48 $$ FeatureDescriptor feature = (FeatureDescriptor) selection.iterator().next()-->Line_49 $$ TipUIUtil.openTipInBrowser(feature.getTipFileName(), browser, feature.getProvider())[ FD ]
Line_43 $$ Collection selection = table.getSelection()-->Line_48 $$ FeatureDescriptor feature = (FeatureDescriptor) selection.iterator().next()[ FD ]
Line_6 $$ ArrayList<FeatureDescriptor> features = new ArrayList<FeatureDescriptor>()-->Line_8 $$ features.add(registry.getFeatureDescriptor(id))[ FD ]
Line_45 $$ if (selection.isEmpty()) -->Line_49 $$ TipUIUtil.openTipInBrowser(feature.getTipFileName(), browser, feature.getProvider())[ CD ]
Line_3 $$ Splitter splitter = new Splitter(true)-->Line_4 $$ splitter.setShowDividerControls(true)[ FD ]
Line_45 $$ if (selection.isEmpty()) -->Line_48 $$ FeatureDescriptor feature = (FeatureDescriptor) selection.iterator().next()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_17 $$ Application app = ApplicationManager.getApplication()[ CD ]
Line_7 $$ for (String id : registry.getFeatureIds()) -->Line_8 $$ features.add(registry.getFeatureDescriptor(id))[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_39 $$ splitter.setSecondComponent(ScrollPaneFactory.createScrollPane(browser))[ CD ]
Line_43 $$ Collection selection = table.getSelection()-->Line_45 $$ if (selection.isEmpty()) [ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_3 $$ Splitter splitter = new Splitter(true)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_20 $$ final String uptimeS = FeatureStatisticsBundle.message("feature.statistics.application.uptime", ApplicationNamesInfo.getInstance().getFullProductName(), DateFormatUtil.formatDuration(uptime))[ CD ]
Line_24 $$ if (stats.dayCount > 0 && stats.sparedCharacters > 0) -->Line_26 $$ String perDay = formatCharacterCount(stats.sparedCharacters / stats.dayCount, false)[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_38 $$ final JEditorPane browser = TipUIUtil.createTipBrowser()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_40 $$ table.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION)[ CD ]
Line_3 $$ Splitter splitter = new Splitter(true)-->Line_37 $$ splitter.setFirstComponent(topPanel)[ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_19 $$ long idleTime = app.getIdleTime()[ CD ]
Line_24 $$ if (stats.dayCount > 0 && stats.sparedCharacters > 0) -->Line_25 $$ String total = formatCharacterCount(stats.sparedCharacters, true)[ CD ]
Line_11 $$ new TableViewSpeedSearch<FeatureDescriptor>(table) -->Line_13 $$ return element.getDisplayName()[ FD ]
Line_41 $$ table.getSelectionModel().addListSelectionListener(new ListSelectionListener() -->Line_43 $$ Collection selection = table.getSelection()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_21 $$ final String idleTimeS = FeatureStatisticsBundle.message("feature.statistics.application.idle.time", DateFormatUtil.formatDuration(idleTime))[ CD ]
Line_5 $$ ProductivityFeaturesRegistry registry = ProductivityFeaturesRegistry.getInstance()-->Line_7 $$ for (String id : registry.getFeatureIds()) [ FD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_6 $$ ArrayList<FeatureDescriptor> features = new ArrayList<FeatureDescriptor>()[ CD ]
Line_2 $$ protected JComponent createCenterPanel() -->Line_24 $$ if (stats.dayCount > 0 && stats.sparedCharacters > 0) [ CD ]
