Line_4 $$ Future<ByteBuffer> future = executor().submit(() -> -->Line_17 $$ return future.get(DatabaseDescriptor.getUserDefinedFunctionFailTimeout() - DatabaseDescriptor.getUserDefinedFunctionWarnTimeout(), TimeUnit.MILLISECONDS)[ FD ]
Line_4 $$ Future<ByteBuffer> future = executor().submit(() -> -->Line_31 $$ return future.get(Math.max(DatabaseDescriptor.getUserDefinedFunctionFailTimeout() - cpuTimeMillis, 0L), TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ private ByteBuffer executeAsync(int protocolVersion, List<ByteBuffer> parameters) -->Line_3 $$ ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime()[ CD ]
Line_22 $$ Throwable c = e.getCause()-->Line_23 $$ if (c instanceof RuntimeException)[ FD ]
Line_2 $$ private ByteBuffer executeAsync(int protocolVersion, List<ByteBuffer> parameters) -->Line_4 $$ Future<ByteBuffer> future = executor().submit(() -> [ CD ]
Line_4 $$ Future<ByteBuffer> future = executor().submit(() -> -->Line_11 $$ return future.get(DatabaseDescriptor.getUserDefinedFunctionWarnTimeout(), TimeUnit.MILLISECONDS)[ FD ]
Line_41 $$ TimeoutException cause = new TimeoutException(String.format("User defined function %s ran longer than %dms%s", this, DatabaseDescriptor.getUserDefinedFunctionFailTimeout(), DatabaseDescriptor.getUserFunctionTimeoutPolicy() == Config.UserFunctionTimeoutPolicy.ignore ? "" : " - will stop Cassandra VM"))-->Line_43 $$ JVMStabilityInspector.userFunctionTimeout(cause)[ FD ]
Line_13 $$ String warn = String.format("User defined function %s ran longer than %dms", this, DatabaseDescriptor.getUserDefinedFunctionWarnTimeout())-->Line_14 $$ logger.warn(warn)[ FD ]
Line_3 $$ ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime()-->Line_5 $$ threadIdAndCpuTime.setup()[ FD ]
Line_3 $$ ThreadIdAndCpuTime threadIdAndCpuTime = new ThreadIdAndCpuTime()-->Line_28 $$ threadIdAndCpuTime.get(1, TimeUnit.SECONDS)[ FD ]
Line_41 $$ TimeoutException cause = new TimeoutException(String.format("User defined function %s ran longer than %dms%s", this, DatabaseDescriptor.getUserDefinedFunctionFailTimeout(), DatabaseDescriptor.getUserFunctionTimeoutPolicy() == Config.UserFunctionTimeoutPolicy.ignore ? "" : " - will stop Cassandra VM"))-->Line_42 $$ FunctionExecutionException fe = FunctionExecutionException.create(this, cause)[ FD ]
Line_29 $$ long cpuTimeMillis = threadMXBean.getThreadCpuTime(threadIdAndCpuTime.threadId) - threadIdAndCpuTime.cpuTime-->Line_30 $$ cpuTimeMillis /= 1000000L[ FD ]
Line_22 $$ Throwable c = e.getCause()-->Line_37 $$ if (c instanceof RuntimeException)[ FD ]
Line_2 $$ private ByteBuffer executeAsync(int protocolVersion, List<ByteBuffer> parameters) -->Line_6 $$ return executeUserDefined(protocolVersion, parameters)[ FD ]
Line_13 $$ String warn = String.format("User defined function %s ran longer than %dms", this, DatabaseDescriptor.getUserDefinedFunctionWarnTimeout())-->Line_15 $$ ClientWarn.warn(warn)[ FD ]
