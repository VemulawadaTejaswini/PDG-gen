Line_21 $$ if (sanity != null && sanity.isCompletedExceptionally()) -->Line_22 $$ segment.map.remove(key)[ CD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_3 $$ long now = now()[ CD ]
Line_4 $$ V value = get(key, now)-->Line_5 $$ if (value == null) [ FD ]
Line_40 $$ NullPointerException npe = new NullPointerException("loader returned a null value")-->Line_41 $$ future.completeExceptionally(npe)[ FD ]
Line_30 $$ future = completableFuture-->Line_44 $$ future.complete(new Entry(key, loaded, now))[ FD ]
Line_32 $$ V loaded-->Line_39 $$ if (loaded == null) [ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_29 $$ if (future == null) [ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_36 $$ future.completeExceptionally(e)[ FD ]
Line_5 $$ if (value == null) -->Line_7 $$ CompletableFuture<Entry<K, V>> future[ CD ]
Line_31 $$ completableValue = future.handle(handler)-->Line_50 $$ value = completableValue.get()[ FD ]
Line_12 $$ BiFunction<? super Entry<K, V>, Throwable, ? extends V> handler = ( ok,  ex) -> -->Line_31 $$ completableValue = future.handle(handler)[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_4 $$ V value = get(key, now)[ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_44 $$ future.complete(new Entry(key, loaded, now))[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_4 $$ V value = get(key, now)[ CD ]
Line_20 $$ CompletableFuture<Entry<K, V>> sanity = segment.map.get(key)-->Line_21 $$ if (sanity != null && sanity.isCompletedExceptionally()) [ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_28 $$ CompletableFuture<V> completableValue-->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_29 $$ if (future == null) -->Line_31 $$ completableValue = future.handle(handler)[ CD ]
Line_47 $$ completableValue = future.handle(handler)-->Line_50 $$ value = completableValue.get()[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_5 $$ if (value == null) [ CD ]
Line_8 $$ CompletableFuture<Entry<K, V>> completableFuture = new CompletableFuture()-->Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)[ FD ]
Line_30 $$ future = completableFuture-->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_5 $$ if (value == null) -->Line_29 $$ if (future == null) [ CD ]
Line_29 $$ if (future == null) -->Line_32 $$ V loaded[ CD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_34 $$ loaded = loader.load(key)[ FD ]
Line_5 $$ if (value == null) -->Line_6 $$ CacheSegment<K, V> segment = getCacheSegment(key)[ CD ]
Line_30 $$ future = completableFuture-->Line_41 $$ future.completeExceptionally(npe)[ FD ]
Line_29 $$ if (future == null) -->Line_30 $$ future = completableFuture[ CD ]
Line_29 $$ if (future == null) -->Line_47 $$ completableValue = future.handle(handler)[ CD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_20 $$ CompletableFuture<Entry<K, V>> sanity = segment.map.get(key)[ FD ]
Line_3 $$ long now = now()-->Line_15 $$ promote(ok, now)[ FD ]
Line_5 $$ if (value == null) -->Line_28 $$ CompletableFuture<V> completableValue[ CD ]
Line_28 $$ CompletableFuture<V> completableValue-->Line_31 $$ completableValue = future.handle(handler)[ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_29 $$ if (future == null) [ FD ]
Line_5 $$ if (value == null) -->Line_8 $$ CompletableFuture<Entry<K, V>> completableFuture = new CompletableFuture()[ CD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)[ FD ]
Line_30 $$ future = completableFuture-->Line_36 $$ future.completeExceptionally(e)[ FD ]
Line_5 $$ if (value == null) -->Line_12 $$ BiFunction<? super Entry<K, V>, Throwable, ? extends V> handler = ( ok,  ex) -> [ CD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_31 $$ completableValue = future.handle(handler)[ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_30 $$ future = completableFuture[ FD ]
Line_13 $$ if (ok != null) -->Line_17 $$ return ok.value[ CD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_36 $$ future.completeExceptionally(e)[ FD ]
Line_12 $$ BiFunction<? super Entry<K, V>, Throwable, ? extends V> handler = ( ok,  ex) -> -->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_13 $$ if (ok != null) -->Line_25 $$ return null[ CD ]
Line_34 $$ loaded = loader.load(key)-->Line_39 $$ if (loaded == null) [ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_39 $$ if (loaded == null) -->Line_40 $$ NullPointerException npe = new NullPointerException("loader returned a null value")[ CD ]
Line_31 $$ completableValue = future.handle(handler)-->Line_47 $$ completableValue = future.handle(handler)[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_6 $$ CacheSegment<K, V> segment = getCacheSegment(key)[ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_30 $$ future = completableFuture[ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_41 $$ future.completeExceptionally(npe)[ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_44 $$ future.complete(new Entry(key, loaded, now))[ FD ]
Line_32 $$ V loaded-->Line_34 $$ loaded = loader.load(key)[ FD ]
Line_28 $$ CompletableFuture<V> completableValue-->Line_50 $$ value = completableValue.get()[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_22 $$ segment.map.remove(key)[ FD ]
Line_7 $$ CompletableFuture<Entry<K, V>> future-->Line_41 $$ future.completeExceptionally(npe)[ FD ]
Line_2 $$ public V computeIfAbsent(K key, CacheLoader<K, V> loader) throws ExecutionException -->Line_55 $$ return value[ CD ]
Line_8 $$ CompletableFuture<Entry<K, V>> completableFuture = new CompletableFuture()-->Line_30 $$ future = completableFuture[ FD ]
Line_3 $$ long now = now()-->Line_4 $$ V value = get(key, now)[ FD ]
Line_39 $$ if (loaded == null) -->Line_41 $$ future.completeExceptionally(npe)[ CD ]
Line_39 $$ if (loaded == null) -->Line_44 $$ future.complete(new Entry(key, loaded, now))[ CD ]
Line_30 $$ future = completableFuture-->Line_31 $$ completableValue = future.handle(handler)[ FD ]
Line_29 $$ if (future == null) -->Line_39 $$ if (loaded == null) [ CD ]
Line_4 $$ V value = get(key, now)-->Line_50 $$ value = completableValue.get()[ FD ]
Line_10 $$ future = segment.map.putIfAbsent(key, completableFuture)-->Line_31 $$ completableValue = future.handle(handler)[ FD ]
