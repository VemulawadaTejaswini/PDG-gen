Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_10 $$ ListenableFuture<Thread> e1Thread = obj.e1Work()[ CD ]
Line_10 $$ ListenableFuture<Thread> e1Thread = obj.e1Work()-->Line_11 $$ assertThat(e1Thread.get().getName(), startsWith("e1-"))[ FD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_13 $$ assertThat(e1OtherThread.get().getName(), startsWith("e1-"))[ CD ]
Line_7 $$ Future<Thread> defaultThread = obj.defaultWork()-->Line_9 $$ assertThat(defaultThread.get().getName(), not(startsWith("e1-")))[ FD ]
Line_3 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_5 $$ AnnotationAsyncExecutionAspect.aspectOf().setBeanFactory(beanFactory)[ FD ]
Line_12 $$ CompletableFuture<Thread> e1OtherThread = obj.e1OtherWork()-->Line_13 $$ assertThat(e1OtherThread.get().getName(), startsWith("e1-"))[ FD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_5 $$ AnnotationAsyncExecutionAspect.aspectOf().setBeanFactory(beanFactory)[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_11 $$ assertThat(e1Thread.get().getName(), startsWith("e1-"))[ CD ]
Line_6 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_7 $$ Future<Thread> defaultThread = obj.defaultWork()[ FD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_6 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_12 $$ CompletableFuture<Thread> e1OtherThread = obj.e1OtherWork()[ CD ]
Line_6 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_12 $$ CompletableFuture<Thread> e1OtherThread = obj.e1OtherWork()[ FD ]
Line_6 $$ ClassWithQualifiedAsyncMethods obj = new ClassWithQualifiedAsyncMethods()-->Line_10 $$ ListenableFuture<Thread> e1Thread = obj.e1Work()[ FD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_4 $$ beanFactory.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_3 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_8 $$ assertThat(defaultThread.get(), not(Thread.currentThread()))[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_9 $$ assertThat(defaultThread.get().getName(), not(startsWith("e1-")))[ CD ]
Line_2 $$ public void qualifiedAsyncMethodsAreRoutedToCorrectExecutor() throws InterruptedException, ExecutionException -->Line_7 $$ Future<Thread> defaultThread = obj.defaultWork()[ CD ]
Line_7 $$ Future<Thread> defaultThread = obj.defaultWork()-->Line_8 $$ assertThat(defaultThread.get(), not(Thread.currentThread()))[ FD ]
Line_3 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_4 $$ beanFactory.registerBeanDefinition("e1", new RootBeanDefinition(ThreadPoolTaskExecutor.class))[ FD ]
