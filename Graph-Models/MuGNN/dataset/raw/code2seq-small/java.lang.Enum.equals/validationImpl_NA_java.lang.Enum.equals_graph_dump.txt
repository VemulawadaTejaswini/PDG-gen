Line_64 $$ final SvnInteractiveAuthenticationProvider provider = new SvnInteractiveAuthenticationProvider(svnVcs, manager)-->Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)[ FD ]
Line_9 $$ if (instance.USE_PROXY_PAC) -->Line_17 $$ if (select != null && !select.isEmpty()) [ CD ]
Line_22 $$ if (password == null) -->Line_24 $$ proxyToRelease = proxy[ CD ]
Line_5 $$ final HttpConfigurable instance = HttpConfigurable.getInstance()-->Line_9 $$ if (instance.USE_PROXY_PAC) [ FD ]
Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)-->Line_66 $$ if (svnAuthentication != null) [ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_56 $$ if (!checkWrite) [ FD ]
Line_21 $$ final PasswordAuthentication password = HttpConfigurable.getInstance().getGenericPassword(address.getHostName(), address.getPort())-->Line_22 $$ if (password == null) [ FD ]
Line_24 $$ proxyToRelease = proxy-->Line_52 $$ final InetSocketAddress address = (InetSocketAddress) proxyToRelease.address()[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_59 $$ if (SvnInteractiveAuthenticationProvider.wasCalled() && SvnInteractiveAuthenticationProvider.wasCancelled())[ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_12 $$ select = CommonProxy.getInstance().select(new URI(url.toString()))[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_3 $$ Proxy proxyToRelease = null[ CD ]
Line_10 $$ final List<Proxy> select-->Line_17 $$ if (select != null && !select.isEmpty()) [ FD ]
Line_6 $$ if (instance.USE_HTTP_PROXY && instance.PROXY_AUTHENTICATION && (StringUtil.isEmptyOrSpaces(instance.PROXY_LOGIN) || StringUtil.isEmptyOrSpaces(instance.getPlainProxyPassword()))) -->Line_7 $$ return false[ CD ]
Line_4 $$ if (!interactive && configuration.isIsUseDefaultProxy()) -->Line_6 $$ if (instance.USE_HTTP_PROXY && instance.PROXY_AUTHENTICATION && (StringUtil.isEmptyOrSpaces(instance.PROXY_LOGIN) || StringUtil.isEmptyOrSpaces(instance.getPlainProxyPassword()))) [ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_14 $$ LOG.info("wrong URL: " + url.toString())[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_66 $$ if (svnAuthentication != null) [ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_67 $$ configuration.acknowledge(kind, realm, svnAuthentication)[ FD ]
Line_20 $$ final InetSocketAddress address = (InetSocketAddress) proxy.address()-->Line_53 $$ CommonProxy.getInstance().noAuthentication("http", address.getHostName(), address.getPort())[ FD ]
Line_20 $$ final InetSocketAddress address = (InetSocketAddress) proxy.address()-->Line_23 $$ CommonProxy.getInstance().noAuthentication("http", address.getHostName(), address.getPort())[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_47 $$ showAuthenticationFailedWithHotFixes(project, configuration, e)[ FD ]
Line_3 $$ Proxy proxyToRelease = null-->Line_24 $$ proxyToRelease = proxy[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_63 $$ final SvnVcs svnVcs = SvnVcs.getInstance(project)[ CD ]
Line_61 $$ if (SvnInteractiveAuthenticationProvider.wasCalled())-->Line_62 $$ return true[ CD ]
Line_19 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) -->Line_20 $$ final InetSocketAddress address = (InetSocketAddress) proxy.address()[ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_56 $$ if (!checkWrite) [ CD ]
Line_12 $$ select = CommonProxy.getInstance().select(new URI(url.toString()))-->Line_17 $$ if (select != null && !select.isEmpty()) [ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_75 $$ return false[ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)[ CD ]
Line_10 $$ final List<Proxy> select-->Line_12 $$ select = CommonProxy.getInstance().select(new URI(url.toString()))[ FD ]
Line_20 $$ final InetSocketAddress address = (InetSocketAddress) proxy.address()-->Line_21 $$ final PasswordAuthentication password = HttpConfigurable.getInstance().getGenericPassword(address.getHostName(), address.getPort())[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_61 $$ if (SvnInteractiveAuthenticationProvider.wasCalled())[ CD ]
Line_41 $$ if (e.getErrorMessage().getErrorCode().isAuthentication()) -->Line_42 $$ log(e)[ CD ]
Line_5 $$ final HttpConfigurable instance = HttpConfigurable.getInstance()-->Line_6 $$ if (instance.USE_HTTP_PROXY && instance.PROXY_AUTHENTICATION && (StringUtil.isEmptyOrSpaces(instance.PROXY_LOGIN) || StringUtil.isEmptyOrSpaces(instance.getPlainProxyPassword()))) [ FD ]
Line_3 $$ Proxy proxyToRelease = null-->Line_52 $$ final InetSocketAddress address = (InetSocketAddress) proxyToRelease.address()[ FD ]
Line_18 $$ for (Proxy proxy : select) -->Line_20 $$ final InetSocketAddress address = (InetSocketAddress) proxy.address()[ FD ]
Line_18 $$ for (Proxy proxy : select) -->Line_24 $$ proxyToRelease = proxy[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_4 $$ if (!interactive && configuration.isIsUseDefaultProxy()) [ FD ]
Line_59 $$ if (SvnInteractiveAuthenticationProvider.wasCalled() && SvnInteractiveAuthenticationProvider.wasCancelled())-->Line_60 $$ return false[ CD ]
Line_22 $$ if (password == null) -->Line_23 $$ CommonProxy.getInstance().noAuthentication("http", address.getHostName(), address.getPort())[ CD ]
Line_9 $$ if (instance.USE_PROXY_PAC) -->Line_10 $$ final List<Proxy> select[ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_33 $$ SvnVcs.getInstance(project).getSvnKitManager().createWCClient(manager).doInfo(url, SVNRevision.UNDEFINED, SVNRevision.HEAD)[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_51 $$ if (!interactive && configuration.isIsUseDefaultProxy() && proxyToRelease != null) [ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_31 $$ SvnInteractiveAuthenticationProvider.clearCallState()[ CD ]
Line_56 $$ if (!checkWrite) -->Line_57 $$ return true[ CD ]
Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)-->Line_67 $$ configuration.acknowledge(kind, realm, svnAuthentication)[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_4 $$ if (!interactive && configuration.isIsUseDefaultProxy()) [ CD ]
Line_51 $$ if (!interactive && configuration.isIsUseDefaultProxy() && proxyToRelease != null) -->Line_53 $$ CommonProxy.getInstance().noAuthentication("http", address.getHostName(), address.getPort())[ CD ]
Line_66 $$ if (svnAuthentication != null) -->Line_73 $$ return true[ CD ]
Line_41 $$ if (e.getErrorMessage().getErrorCode().isAuthentication()) -->Line_43 $$ return false[ CD ]
Line_63 $$ final SvnVcs svnVcs = SvnVcs.getInstance(project)-->Line_69 $$ configuration.getAuthenticationManager(svnVcs).acknowledgeAuthentication(true, kind, realm, null, svnAuthentication)[ FD ]
Line_66 $$ if (svnAuthentication != null) -->Line_67 $$ configuration.acknowledge(kind, realm, svnAuthentication)[ CD ]
Line_19 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) -->Line_21 $$ final PasswordAuthentication password = HttpConfigurable.getInstance().getGenericPassword(address.getHostName(), address.getPort())[ CD ]
Line_65 $$ final SVNAuthentication svnAuthentication = provider.requestClientAuthentication(kind, url, realm, null, null, true)-->Line_69 $$ configuration.getAuthenticationManager(svnVcs).acknowledgeAuthentication(true, kind, realm, null, svnAuthentication)[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_63 $$ final SvnVcs svnVcs = SvnVcs.getInstance(project)[ FD ]
Line_46 $$ if (interactive) -->Line_47 $$ showAuthenticationFailedWithHotFixes(project, configuration, e)[ CD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_69 $$ configuration.getAuthenticationManager(svnVcs).acknowledgeAuthentication(true, kind, realm, null, svnAuthentication)[ FD ]
Line_2 $$ private static boolean validationImpl(final Project project, final SVNURL url, final SvnConfiguration configuration, final SvnAuthenticationManager manager, final boolean checkWrite, final String realm, final String kind, boolean interactive) -->Line_64 $$ final SvnInteractiveAuthenticationProvider provider = new SvnInteractiveAuthenticationProvider(svnVcs, manager)[ CD ]
Line_4 $$ if (!interactive && configuration.isIsUseDefaultProxy()) -->Line_5 $$ final HttpConfigurable instance = HttpConfigurable.getInstance()[ CD ]
Line_19 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) -->Line_22 $$ if (password == null) [ CD ]
Line_4 $$ if (!interactive && configuration.isIsUseDefaultProxy()) -->Line_9 $$ if (instance.USE_PROXY_PAC) [ CD ]
Line_18 $$ for (Proxy proxy : select) -->Line_19 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) [ FD ]
