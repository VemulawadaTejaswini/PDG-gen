Line_3 $$ if (mySourceTransformers.isEmpty()) -->Line_4 $$ return originalObjects[ CD ]
Line_2 $$ private Iterable<? extends JavaFileObject> wrapJavaFileObjects(Iterable<? extends JavaFileObject> originalObjects) -->Line_6 $$ final List<JavaFileObject> wrapped = new ArrayList<JavaFileObject>()[ CD ]
Line_2 $$ private Iterable<? extends JavaFileObject> wrapJavaFileObjects(Iterable<? extends JavaFileObject> originalObjects) -->Line_10 $$ return wrapped[ CD ]
Line_6 $$ final List<JavaFileObject> wrapped = new ArrayList<JavaFileObject>()-->Line_8 $$ wrapped.add(JavaFileObject.Kind.SOURCE.equals(fo.getKind()) ? new TransformableJavaFileObject(fo, mySourceTransformers) : fo)[ FD ]
Line_7 $$ for (JavaFileObject fo : originalObjects) -->Line_8 $$ wrapped.add(JavaFileObject.Kind.SOURCE.equals(fo.getKind()) ? new TransformableJavaFileObject(fo, mySourceTransformers) : fo)[ FD ]
Line_2 $$ private Iterable<? extends JavaFileObject> wrapJavaFileObjects(Iterable<? extends JavaFileObject> originalObjects) -->Line_3 $$ if (mySourceTransformers.isEmpty()) [ CD ]
