Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) -->Line_27 $$ for (int i = 0; i < period; i++) [ CD ]
Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)-->Line_43 $$ last_s = s[ FD ]
Line_11 $$ int counter = 0-->Line_15 $$ counter += 1[ FD ]
Line_19 $$ b += (vs[i + period] - vs[i]) / period-->Line_37 $$ b = beta * (s - last_s) + (1 - beta) * last_b[ FD ]
Line_32 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ CD ]
Line_8 $$ double b = 0-->Line_37 $$ b = beta * (s - last_s) + (1 - beta) * last_b[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_10 $$ double[] seasonal = new double[values.size()][ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_10 $$ double[] seasonal = new double[values.size()][ FD ]
Line_6 $$ double s = 0-->Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_17 $$ for (int i = 0; i < period; i++) -->Line_47 $$ for (int i = 1; i <= numForecasts; i++) [ FD ]
Line_17 $$ for (int i = 0; i < period; i++) -->Line_18 $$ s += vs[i][ CD ]
Line_27 $$ for (int i = 0; i < period; i++) -->Line_31 $$ for (int i = period; i < vs.length; i++) [ FD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_37 $$ b = beta * (s - last_s) + (1 - beta) * last_b[ CD ]
Line_38 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_39 $$ seasonal[i] = gamma * (vs[i] / (last_s + last_b)) + (1 - gamma) * seasonal[i - period][ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_12 $$ double[] vs = new double[values.size()][ FD ]
Line_22 $$ b /= (double) period-->Line_44 $$ last_b = b[ FD ]
Line_47 $$ for (int i = 1; i <= numForecasts; i++) -->Line_48 $$ int idx = values.size() - period + ((i - 1) % period)[ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_12 $$ double[] vs = new double[values.size()][ CD ]
Line_21 $$ s /= (double) period-->Line_28 $$ seasonal[i] = vs[i] / s[ FD ]
Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)-->Line_43 $$ last_s = s[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_46 $$ double[] forecastValues = new double[numForecasts][ CD ]
Line_21 $$ s /= (double) period-->Line_23 $$ last_s = s[ FD ]
Line_18 $$ s += vs[i]-->Line_28 $$ seasonal[i] = vs[i] / s[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_17 $$ for (int i = 0; i < period; i++) [ CD ]
Line_18 $$ s += vs[i]-->Line_23 $$ last_s = s[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_11 $$ int counter = 0[ CD ]
Line_21 $$ s /= (double) period-->Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_43 $$ last_s = s[ CD ]
Line_27 $$ for (int i = 0; i < period; i++) -->Line_47 $$ for (int i = 1; i <= numForecasts; i++) [ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_3 $$ if (values.size() < period * 2) [ FD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_44 $$ last_b = b[ CD ]
Line_49 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_52 $$ forecastValues[i - 1] = s + (i * b) + seasonal[idx][ CD ]
Line_21 $$ s /= (double) period-->Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_22 $$ b /= (double) period-->Line_37 $$ b = beta * (s - last_s) + (1 - beta) * last_b[ FD ]
Line_37 $$ b = beta * (s - last_s) + (1 - beta) * last_b-->Line_44 $$ last_b = b[ FD ]
Line_18 $$ s += vs[i]-->Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_18 $$ s += vs[i]-->Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) [ FD ]
Line_17 $$ for (int i = 0; i < period; i++) -->Line_31 $$ for (int i = period; i < vs.length; i++) [ FD ]
Line_32 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ CD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_32 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) [ CD ]
Line_18 $$ s += vs[i]-->Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_55 $$ return forecastValues[ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_21 $$ s /= (double) period[ CD ]
Line_8 $$ double b = 0-->Line_44 $$ last_b = b[ FD ]
Line_27 $$ for (int i = 0; i < period; i++) -->Line_28 $$ seasonal[i] = vs[i] / s[ CD ]
Line_21 $$ s /= (double) period-->Line_43 $$ last_s = s[ FD ]
Line_7 $$ double last_s-->Line_43 $$ last_s = s[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_23 $$ last_s = s[ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_4 $$ throw new AggregationExecutionException("Holt-Winters aggregation requires at least (2 * period == 2 * " + period + " == " + (2 * period) + ") data-points to function.  Only [" + values.size() + "] were provided.")[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_48 $$ int idx = values.size() - period + ((i - 1) % period)[ FD ]
Line_6 $$ double s = 0-->Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) [ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_31 $$ for (int i = period; i < vs.length; i++) [ CD ]
Line_21 $$ s /= (double) period-->Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) [ FD ]
Line_6 $$ double s = 0-->Line_28 $$ seasonal[i] = vs[i] / s[ FD ]
Line_17 $$ for (int i = 0; i < period; i++) -->Line_27 $$ for (int i = 0; i < period; i++) [ FD ]
Line_17 $$ for (int i = 0; i < period; i++) -->Line_19 $$ b += (vs[i + period] - vs[i]) / period[ CD ]
Line_49 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_50 $$ forecastValues[i - 1] = (s + (i * b)) * seasonal[idx][ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_22 $$ b /= (double) period[ CD ]
Line_6 $$ double s = 0-->Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_8 $$ double b = 0[ CD ]
Line_7 $$ double last_s-->Line_23 $$ last_s = s[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) [ CD ]
Line_33 $$ s = alpha * (vs[i] / seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)-->Line_35 $$ s = alpha * (vs[i] - seasonal[i - period]) + (1.0d - alpha) * (last_s + last_b)[ FD ]
Line_18 $$ s += vs[i]-->Line_43 $$ last_s = s[ FD ]
Line_8 $$ double b = 0-->Line_19 $$ b += (vs[i + period] - vs[i]) / period[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_6 $$ double s = 0[ CD ]
Line_18 $$ s += vs[i]-->Line_21 $$ s /= (double) period[ FD ]
Line_6 $$ double s = 0-->Line_43 $$ last_s = s[ FD ]
Line_19 $$ b += (vs[i + period] - vs[i]) / period-->Line_44 $$ last_b = b[ FD ]
Line_13 $$ for (T v : values) -->Line_14 $$ vs[counter] = v.doubleValue() + padding[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_9 $$ double last_b = 0[ CD ]
Line_6 $$ double s = 0-->Line_23 $$ last_s = s[ FD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_38 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) [ CD ]
Line_23 $$ last_s = s-->Line_43 $$ last_s = s[ FD ]
Line_6 $$ double s = 0-->Line_18 $$ s += vs[i][ FD ]
Line_38 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) -->Line_41 $$ seasonal[i] = gamma * (vs[i] - (last_s - last_b)) + (1 - gamma) * seasonal[i - period][ CD ]
Line_10 $$ double[] seasonal = new double[values.size()]-->Line_25 $$ Arrays.fill(seasonal, 0.0)[ FD ]
Line_19 $$ b += (vs[i + period] - vs[i]) / period-->Line_22 $$ b /= (double) period[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_7 $$ double last_s[ CD ]
Line_9 $$ double last_b = 0-->Line_44 $$ last_b = b[ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_47 $$ for (int i = 1; i <= numForecasts; i++) [ FD ]
Line_8 $$ double b = 0-->Line_22 $$ b /= (double) period[ FD ]
Line_47 $$ for (int i = 1; i <= numForecasts; i++) -->Line_49 $$ if (seasonalityType.equals(SeasonalityType.MULTIPLICATIVE)) [ CD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_3 $$ if (values.size() < period * 2) [ CD ]
Line_24 $$ if (Double.compare(s, 0.0) == 0 || Double.compare(s, -0.0) == 0) -->Line_25 $$ Arrays.fill(seasonal, 0.0)[ CD ]
Line_6 $$ double s = 0-->Line_21 $$ s /= (double) period[ FD ]
Line_31 $$ for (int i = period; i < vs.length; i++) -->Line_47 $$ for (int i = 1; i <= numForecasts; i++) [ FD ]
Line_2 $$ public <T extends Number> double[] next(Collection<T> values, int numForecasts) -->Line_47 $$ for (int i = 1; i <= numForecasts; i++) [ CD ]
