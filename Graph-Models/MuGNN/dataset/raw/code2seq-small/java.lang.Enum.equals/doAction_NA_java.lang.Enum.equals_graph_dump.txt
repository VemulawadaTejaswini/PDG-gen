Line_23 $$ if (MyExitAction.markStart.equals(exitAction)) -->Line_24 $$ myWaitingFinishListeners.addAll(myWaitingStartListeners)[ CD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_45 $$ LOG.debug("doAction: END " + action.name())[ CD ]
Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() -->Line_16 $$ return exitAction.name()[ CD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_3 $$ LOG.debug("doAction: START " + action.name())[ FD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_40 $$ if (toBeCalled != null) [ CD ]
Line_7 $$ final MyState oldState = myState-->Line_12 $$ LOG.debug("doAction: oldState: " + oldState.name() + ", newState: " + myState.name())[ FD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_45 $$ LOG.debug("doAction: END " + action.name())[ FD ]
Line_5 $$ List<Runnable> toBeCalled = null-->Line_40 $$ if (toBeCalled != null) [ FD ]
Line_4 $$ final MyExitAction[] exitActions-->Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() [ FD ]
Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() -->Line_16 $$ return exitAction.name()[ FD ]
Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() -->Line_35 $$ if (MyExitAction.submitRequestToExecutor.equals(exitAction)) [ FD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_5 $$ List<Runnable> toBeCalled = null[ CD ]
Line_26 $$ if (MyExitAction.markEnd.equals(exitAction)) -->Line_28 $$ myWaitingFinishListeners.clear()[ CD ]
Line_7 $$ final MyState oldState = myState-->Line_11 $$ exitActions = MyTransitionAction.getExit(oldState, myState)[ FD ]
Line_35 $$ if (MyExitAction.submitRequestToExecutor.equals(exitAction)) -->Line_36 $$ myAlarm.consume(myWorker)[ CD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_4 $$ final MyExitAction[] exitActions[ CD ]
Line_11 $$ exitActions = MyTransitionAction.getExit(oldState, myState)-->Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() [ FD ]
Line_11 $$ exitActions = MyTransitionAction.getExit(oldState, myState)-->Line_33 $$ if (exitActions != null) [ FD ]
Line_13 $$ if (LOG.isDebugEnabled() && exitActions != null) -->Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() [ CD ]
Line_7 $$ final MyState oldState = myState-->Line_9 $$ if (oldState.equals(myState))[ FD ]
Line_4 $$ final MyExitAction[] exitActions-->Line_33 $$ if (exitActions != null) [ FD ]
Line_11 $$ exitActions = MyTransitionAction.getExit(oldState, myState)-->Line_21 $$ if (exitActions != null) [ FD ]
Line_4 $$ final MyExitAction[] exitActions-->Line_21 $$ if (exitActions != null) [ FD ]
Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() -->Line_26 $$ if (MyExitAction.markEnd.equals(exitAction)) [ FD ]
Line_4 $$ final MyExitAction[] exitActions-->Line_11 $$ exitActions = MyTransitionAction.getExit(oldState, myState)[ FD ]
Line_23 $$ if (MyExitAction.markStart.equals(exitAction)) -->Line_26 $$ if (MyExitAction.markEnd.equals(exitAction)) [ CD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_33 $$ if (exitActions != null) [ CD ]
Line_13 $$ if (LOG.isDebugEnabled() && exitActions != null) -->Line_19 $$ LOG.debug("exit actions: " + debugExitActions)[ CD ]
Line_23 $$ if (MyExitAction.markStart.equals(exitAction)) -->Line_25 $$ myWaitingStartListeners.clear()[ CD ]
Line_14 $$ final String debugExitActions = StringUtil.join(exitActions, new Function<MyExitAction, String>() -->Line_23 $$ if (MyExitAction.markStart.equals(exitAction)) [ FD ]
Line_9 $$ if (oldState.equals(myState))-->Line_10 $$ return[ CD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_8 $$ myState = myState.transition(action)[ FD ]
Line_2 $$ private void doAction(final MyAction action) -->Line_3 $$ LOG.debug("doAction: START " + action.name())[ CD ]
