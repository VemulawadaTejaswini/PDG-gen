Line_12 $$ RowElementType rowElementType = RowElementType.NODE-->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_14 $$ rowElementType = RowElementType.DOWN_ARROW-->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_15 $$ arrows.remove(shortEdge.myEdge)[ FD ]
Line_3 $$ Collection<PrintElementWithGraphElement> result = new ArrayList<PrintElementWithGraphElement>()-->Line_31 $$ result.add(new TerminalEdgePrintElement(rowIndex, arrow.myPosition, arrow.myType == RowElementType.UP_ARROW ? EdgePrintElement.Type.UP : EdgePrintElement.Type.DOWN, (GraphEdge) arrow.myElement, myPrintElementManager))[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_23 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.UP_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) -->Line_24 $$ rowElementType = RowElementType.UP_ARROW[ CD ]
Line_12 $$ RowElementType rowElementType = RowElementType.NODE-->Line_24 $$ rowElementType = RowElementType.UP_ARROW[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_33 $$ for (SimpleRowElement rowElement : getSimpleRowElements(rowIndex)) [ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_10 $$ if (rowIndex < myLinearGraph.nodesCount() - 1) [ CD ]
Line_11 $$ for (ShortEdge shortEdge : getDownShortEdges(rowIndex)) -->Line_17 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.DOWN, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_3 $$ Collection<PrintElementWithGraphElement> result = new ArrayList<PrintElementWithGraphElement>()[ CD ]
Line_24 $$ rowElementType = RowElementType.UP_ARROW-->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_13 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.DOWN_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) [ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_20 $$ if (rowIndex > 0) [ CD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_17 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.DOWN, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_25 $$ arrows.remove(shortEdge.myEdge)[ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_30 $$ for (SimpleRowElement arrow : arrows.values()) [ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_7 $$ arrows.put((GraphEdge) rowElement.myElement, rowElement)[ FD ]
Line_5 $$ for (SimpleRowElement rowElement : getSimpleRowElements(rowIndex)) -->Line_35 $$ result.add(createSimplePrintElement(rowIndex, rowElement))[ FD ]
Line_3 $$ Collection<PrintElementWithGraphElement> result = new ArrayList<PrintElementWithGraphElement>()-->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_23 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.UP_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) -->Line_25 $$ arrows.remove(shortEdge.myEdge)[ CD ]
Line_14 $$ rowElementType = RowElementType.DOWN_ARROW-->Line_17 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.DOWN, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_3 $$ Collection<PrintElementWithGraphElement> result = new ArrayList<PrintElementWithGraphElement>()-->Line_35 $$ result.add(createSimplePrintElement(rowIndex, rowElement))[ FD ]
Line_13 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.DOWN_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) -->Line_14 $$ rowElementType = RowElementType.DOWN_ARROW[ CD ]
Line_5 $$ for (SimpleRowElement rowElement : getSimpleRowElements(rowIndex)) -->Line_7 $$ arrows.put((GraphEdge) rowElement.myElement, rowElement)[ FD ]
Line_6 $$ if (!rowElement.myType.equals(RowElementType.NODE)) -->Line_7 $$ arrows.put((GraphEdge) rowElement.myElement, rowElement)[ CD ]
Line_34 $$ if (rowElement.myType.equals(RowElementType.NODE)) -->Line_35 $$ result.add(createSimplePrintElement(rowIndex, rowElement))[ CD ]
Line_12 $$ RowElementType rowElementType = RowElementType.NODE-->Line_14 $$ rowElementType = RowElementType.DOWN_ARROW[ FD ]
Line_3 $$ Collection<PrintElementWithGraphElement> result = new ArrayList<PrintElementWithGraphElement>()-->Line_17 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.DOWN, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()-->Line_23 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.UP_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) [ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_35 $$ result.add(createSimplePrintElement(rowIndex, rowElement))[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_38 $$ return result[ CD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_11 $$ for (ShortEdge shortEdge : getDownShortEdges(rowIndex)) [ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_10 $$ if (rowIndex < myLinearGraph.nodesCount() - 1) [ FD ]
Line_11 $$ for (ShortEdge shortEdge : getDownShortEdges(rowIndex)) -->Line_27 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.UP, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_20 $$ if (rowIndex > 0) [ FD ]
Line_14 $$ rowElementType = RowElementType.DOWN_ARROW-->Line_24 $$ rowElementType = RowElementType.UP_ARROW[ FD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_5 $$ for (SimpleRowElement rowElement : getSimpleRowElements(rowIndex)) [ FD ]
Line_12 $$ RowElementType rowElementType = RowElementType.NODE-->Line_17 $$ result.add(createEdgePrintElement(rowIndex, shortEdge, EdgePrintElement.Type.DOWN, !rowElementType.equals(RowElementType.NODE)))[ FD ]
Line_13 $$ if ((arrows.get(shortEdge.myEdge) != null) && RowElementType.DOWN_ARROW.equals(arrows.get(shortEdge.myEdge).myType)) -->Line_15 $$ arrows.remove(shortEdge.myEdge)[ CD ]
Line_2 $$ public Collection<PrintElementWithGraphElement> getPrintElements(int rowIndex) -->Line_4 $$ Map<GraphEdge, SimpleRowElement> arrows = ContainerUtil.newHashMap()[ CD ]
