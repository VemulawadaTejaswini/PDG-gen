Line_3 $$ LinkedList<Token> args = new LinkedList<Token>()-->Line_15 $$ n.parse(args, conf)[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_5 $$ args.addFirst(st.pop())[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_16 $$ return new NodeToken(n)[ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_3 $$ LinkedList<Token> args = new LinkedList<Token>()[ CD ]
Line_4 $$ while (!st.isEmpty() && !TType.LPAREN.equals(st.peek().getType())) -->Line_5 $$ args.addFirst(st.pop())[ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_10 $$ st.pop()[ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_4 $$ while (!st.isEmpty() && !TType.LPAREN.equals(st.peek().getType())) [ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_14 $$ Node n = Node.forIdent(st.pop().getStr())[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_4 $$ while (!st.isEmpty() && !TType.LPAREN.equals(st.peek().getType())) [ FD ]
Line_3 $$ LinkedList<Token> args = new LinkedList<Token>()-->Line_5 $$ args.addFirst(st.pop())[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_10 $$ st.pop()[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_14 $$ Node n = Node.forIdent(st.pop().getStr())[ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_15 $$ n.parse(args, conf)[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_11 $$ if (st.isEmpty() || !TType.IDENT.equals(st.peek().getType())) [ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_7 $$ if (st.isEmpty()) [ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_7 $$ if (st.isEmpty()) [ CD ]
Line_14 $$ Node n = Node.forIdent(st.pop().getStr())-->Line_15 $$ n.parse(args, conf)[ FD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_15 $$ n.parse(args, conf)[ CD ]
Line_2 $$ private static Token reduce(Stack<Token> st, Configuration conf) throws IOException -->Line_11 $$ if (st.isEmpty() || !TType.IDENT.equals(st.peek().getType())) [ FD ]
