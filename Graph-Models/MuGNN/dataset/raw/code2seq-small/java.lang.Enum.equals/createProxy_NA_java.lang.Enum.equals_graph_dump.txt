Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_3 $$ String host = url.getHost()[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_27 $$ if (proxyExceptions == null) [ CD ]
Line_11 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) -->Line_13 $$ if (address instanceof InetSocketAddress) [ CD ]
Line_3 $$ String host = url.getHost()-->Line_41 $$ String proxyPassword = getServersPropertyIdea(host, HTTP_PROXY_PASSWORD)[ FD ]
Line_25 $$ String proxyExceptions = getServersPropertyIdea(host, "http-proxy-exceptions")-->Line_31 $$ if (proxyExceptions != null) [ FD ]
Line_11 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) -->Line_12 $$ final SocketAddress address = proxy.address()[ CD ]
Line_10 $$ for (Proxy proxy : proxies) -->Line_11 $$ if (HttpConfigurable.isRealProxy(proxy) && Proxy.Type.HTTP.equals(proxy.type())) [ FD ]
Line_3 $$ String host = url.getHost()-->Line_40 $$ String proxyUser = getServersPropertyIdea(host, HTTP_PROXY_USERNAME)[ FD ]
Line_13 $$ if (address instanceof InetSocketAddress) -->Line_14 $$ return new MyPromptingProxyManager(((InetSocketAddress) address).getHostName(), String.valueOf(((InetSocketAddress) address).getPort()), url.getProtocol())[ CD ]
Line_3 $$ String host = url.getHost()-->Line_34 $$ if (DefaultSVNOptions.matches(exception, host)) [ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_26 $$ String proxyExceptionsSeparator = ","[ CD ]
Line_5 $$ if (StringUtil.isEmptyOrSpaces(proxyHost)) -->Line_6 $$ if (getConfig().isIsUseDefaultProxy()) [ CD ]
Line_4 $$ String proxyHost = getServersPropertyIdea(host, HTTP_PROXY_HOST)-->Line_5 $$ if (StringUtil.isEmptyOrSpaces(proxyHost)) [ FD ]
Line_32 $$ for (StringTokenizer exceptions = new StringTokenizer(proxyExceptions, proxyExceptionsSeparator); exceptions.hasMoreTokens(); ) -->Line_33 $$ String exception = exceptions.nextToken().trim()[ CD ]
Line_31 $$ if (proxyExceptions != null) -->Line_32 $$ for (StringTokenizer exceptions = new StringTokenizer(proxyExceptions, proxyExceptionsSeparator); exceptions.hasMoreTokens(); ) [ CD ]
Line_28 $$ proxyExceptions = System.getProperty("http.nonProxyHosts")-->Line_31 $$ if (proxyExceptions != null) [ FD ]
Line_32 $$ for (StringTokenizer exceptions = new StringTokenizer(proxyExceptions, proxyExceptionsSeparator); exceptions.hasMoreTokens(); ) -->Line_33 $$ String exception = exceptions.nextToken().trim()[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_14 $$ return new MyPromptingProxyManager(((InetSocketAddress) address).getHostName(), String.valueOf(((InetSocketAddress) address).getPort()), url.getProtocol())[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_31 $$ if (proxyExceptions != null) [ CD ]
Line_5 $$ if (StringUtil.isEmptyOrSpaces(proxyHost)) -->Line_23 $$ return null[ CD ]
Line_25 $$ String proxyExceptions = getServersPropertyIdea(host, "http-proxy-exceptions")-->Line_28 $$ proxyExceptions = System.getProperty("http.nonProxyHosts")[ FD ]
Line_12 $$ final SocketAddress address = proxy.address()-->Line_13 $$ if (address instanceof InetSocketAddress) [ FD ]
Line_8 $$ final List<Proxy> proxies = HttpConfigurable.getInstance().getOnlyBySettingsSelector().select(new URI(url.toString()))-->Line_9 $$ if (proxies != null && !proxies.isEmpty()) [ FD ]
Line_33 $$ String exception = exceptions.nextToken().trim()-->Line_34 $$ if (DefaultSVNOptions.matches(exception, host)) [ FD ]
Line_3 $$ String host = url.getHost()-->Line_4 $$ String proxyHost = getServersPropertyIdea(host, HTTP_PROXY_HOST)[ FD ]
Line_32 $$ for (StringTokenizer exceptions = new StringTokenizer(proxyExceptions, proxyExceptionsSeparator); exceptions.hasMoreTokens(); ) -->Line_34 $$ if (DefaultSVNOptions.matches(exception, host)) [ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_3 $$ String host = url.getHost()[ CD ]
Line_3 $$ String host = url.getHost()-->Line_39 $$ String proxyPort = getServersPropertyIdea(host, HTTP_PROXY_PORT)[ FD ]
Line_26 $$ String proxyExceptionsSeparator = ","-->Line_29 $$ proxyExceptionsSeparator = "|"[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_39 $$ String proxyPort = getServersPropertyIdea(host, HTTP_PROXY_PORT)[ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_25 $$ String proxyExceptions = getServersPropertyIdea(host, "http-proxy-exceptions")[ CD ]
Line_34 $$ if (DefaultSVNOptions.matches(exception, host)) -->Line_35 $$ return null[ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_40 $$ String proxyUser = getServersPropertyIdea(host, HTTP_PROXY_USERNAME)[ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_4 $$ String proxyHost = getServersPropertyIdea(host, HTTP_PROXY_HOST)[ CD ]
Line_10 $$ for (Proxy proxy : proxies) -->Line_12 $$ final SocketAddress address = proxy.address()[ FD ]
Line_27 $$ if (proxyExceptions == null) -->Line_29 $$ proxyExceptionsSeparator = "|"[ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_5 $$ if (StringUtil.isEmptyOrSpaces(proxyHost)) [ CD ]
Line_25 $$ String proxyExceptions = getServersPropertyIdea(host, "http-proxy-exceptions")-->Line_27 $$ if (proxyExceptions == null) [ FD ]
Line_3 $$ String host = url.getHost()-->Line_25 $$ String proxyExceptions = getServersPropertyIdea(host, "http-proxy-exceptions")[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_42 $$ return new MySimpleProxyManager(proxyHost, proxyPort, proxyUser, proxyPassword)[ CD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_8 $$ final List<Proxy> proxies = HttpConfigurable.getInstance().getOnlyBySettingsSelector().select(new URI(url.toString()))[ FD ]
Line_2 $$ private ISVNProxyManager createProxy(SVNURL url) -->Line_41 $$ String proxyPassword = getServersPropertyIdea(host, HTTP_PROXY_PASSWORD)[ CD ]
Line_27 $$ if (proxyExceptions == null) -->Line_28 $$ proxyExceptions = System.getProperty("http.nonProxyHosts")[ CD ]
