Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_3 $$ if (TypeConversionUtil.isAssignable(left, right, false)) [ FD ]
Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_6 $$ if (myArgumentsList instanceof PsiExpressionList) [ CD ]
Line_6 $$ if (myArgumentsList instanceof PsiExpressionList) -->Line_7 $$ final PsiExpression[] expressions = ((PsiExpressionList) myArgumentsList).getExpressions()[ CD ]
Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_8 $$ if (argId < expressions.length) [ FD ]
Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_3 $$ if (TypeConversionUtil.isAssignable(left, right, false)) [ CD ]
Line_8 $$ if (argId < expressions.length) -->Line_9 $$ final Specifics specific = isFunctionalTypeMoreSpecific(expressions[argId], right, left)[ CD ]
Line_8 $$ if (argId < expressions.length) -->Line_10 $$ return Specifics.FIRST.equals(specific)[ CD ]
Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_13 $$ return false[ CD ]
Line_2 $$ private boolean isTypeMoreSpecific(PsiType left, PsiType right, int argId) -->Line_9 $$ final Specifics specific = isFunctionalTypeMoreSpecific(expressions[argId], right, left)[ FD ]
Line_6 $$ if (myArgumentsList instanceof PsiExpressionList) -->Line_8 $$ if (argId < expressions.length) [ CD ]
Line_3 $$ if (TypeConversionUtil.isAssignable(left, right, false)) -->Line_4 $$ return true[ CD ]
Line_9 $$ final Specifics specific = isFunctionalTypeMoreSpecific(expressions[argId], right, left)-->Line_10 $$ return Specifics.FIRST.equals(specific)[ FD ]
