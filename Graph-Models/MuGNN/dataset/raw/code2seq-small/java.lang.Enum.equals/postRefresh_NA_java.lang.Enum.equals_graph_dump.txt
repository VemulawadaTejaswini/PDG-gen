Line_10 $$ clManager.invokeAfterUpdate(new Runnable() -->Line_32 $$ vcsDirtyScopeManager.fileDirty(path)[ FD ]
Line_3 $$ return new Runnable() -->Line_8 $$ if (!myProject.isDisposed()) [ CD ]
Line_10 $$ clManager.invokeAfterUpdate(new Runnable() -->Line_12 $$ if (myCommitSuccess) [ CD ]
Line_3 $$ return new Runnable() -->Line_5 $$ if (myAction != null) [ CD ]
Line_13 $$ if (ChangeListsModificationAfterCommit.DELETE_LIST.equals(myAfterVcsRefreshModification)) -->Line_14 $$ if (!myKeepChangeListAfterCommit) [ CD ]
Line_19 $$ if (dialog.showAndGet()) -->Line_21 $$ MoveChangesToAnotherListAction.askAndMove(myProject, changes, null)[ CD ]
Line_10 $$ clManager.invokeAfterUpdate(new Runnable() -->Line_25 $$ final CommittedChangesCache cache = CommittedChangesCache.getInstance(myProject)[ CD ]
Line_14 $$ if (!myKeepChangeListAfterCommit) -->Line_15 $$ clManager.removeChangeList(myChangeList.getName())[ CD ]
Line_25 $$ final CommittedChangesCache cache = CommittedChangesCache.getInstance(myProject)-->Line_26 $$ cache.refreshAllCachesAsync(false, true)[ FD ]
Line_8 $$ if (!myProject.isDisposed()) -->Line_9 $$ final ChangeListManager clManager = ChangeListManager.getInstance(myProject)[ CD ]
Line_31 $$ for (FilePath path : myPathsToRefresh) -->Line_32 $$ vcsDirtyScopeManager.fileDirty(path)[ FD ]
Line_8 $$ if (!myProject.isDisposed()) -->Line_36 $$ LocalHistory.getInstance().putSystemLabel(myProject, myActionName + ": " + myCommitMessage)[ CD ]
Line_9 $$ final ChangeListManager clManager = ChangeListManager.getInstance(myProject)-->Line_20 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()[ FD ]
Line_13 $$ if (ChangeListsModificationAfterCommit.DELETE_LIST.equals(myAfterVcsRefreshModification)) -->Line_17 $$ if (ChangeListsModificationAfterCommit.MOVE_OTHERS.equals(myAfterVcsRefreshModification)) [ CD ]
Line_5 $$ if (myAction != null) -->Line_6 $$ myAction.finish()[ CD ]
Line_9 $$ final ChangeListManager clManager = ChangeListManager.getInstance(myProject)-->Line_10 $$ clManager.invokeAfterUpdate(new Runnable() [ FD ]
Line_8 $$ if (!myProject.isDisposed()) -->Line_10 $$ clManager.invokeAfterUpdate(new Runnable() [ CD ]
Line_9 $$ final ChangeListManager clManager = ChangeListManager.getInstance(myProject)-->Line_15 $$ clManager.removeChangeList(myChangeList.getName())[ FD ]
Line_10 $$ clManager.invokeAfterUpdate(new Runnable() -->Line_27 $$ cache.refreshIncomingChangesAsync()[ CD ]
Line_12 $$ if (myCommitSuccess) -->Line_13 $$ if (ChangeListsModificationAfterCommit.DELETE_LIST.equals(myAfterVcsRefreshModification)) [ CD ]
Line_20 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()-->Line_21 $$ MoveChangesToAnotherListAction.askAndMove(myProject, changes, null)[ FD ]
Line_2 $$ public Runnable postRefresh() -->Line_3 $$ return new Runnable() [ CD ]
Line_19 $$ if (dialog.showAndGet()) -->Line_20 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()[ CD ]
Line_10 $$ clManager.invokeAfterUpdate(new Runnable() -->Line_26 $$ cache.refreshAllCachesAsync(false, true)[ CD ]
Line_17 $$ if (ChangeListsModificationAfterCommit.MOVE_OTHERS.equals(myAfterVcsRefreshModification)) -->Line_18 $$ ChangelistMoveOfferDialog dialog = new ChangelistMoveOfferDialog(myConfiguration)[ CD ]
Line_25 $$ final CommittedChangesCache cache = CommittedChangesCache.getInstance(myProject)-->Line_27 $$ cache.refreshIncomingChangesAsync()[ FD ]
Line_18 $$ ChangelistMoveOfferDialog dialog = new ChangelistMoveOfferDialog(myConfiguration)-->Line_19 $$ if (dialog.showAndGet()) [ FD ]
Line_17 $$ if (ChangeListsModificationAfterCommit.MOVE_OTHERS.equals(myAfterVcsRefreshModification)) -->Line_19 $$ if (dialog.showAndGet()) [ CD ]
