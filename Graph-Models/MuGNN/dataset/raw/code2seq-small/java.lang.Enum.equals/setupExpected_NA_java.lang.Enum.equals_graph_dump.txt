Line_3 $$ ArrayList<Double> values = new ArrayList(numBuckets)-->Line_32 $$ values.add(diff)[ FD ]
Line_11 $$ metricValue = null-->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_4 $$ EvictingQueue<Double> lagWindow = new EvictingQueue(lag)-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_7 $$ Double metricValue-->Line_13 $$ metricValue = 0.0[ FD ]
Line_4 $$ EvictingQueue<Double> lagWindow = new EvictingQueue(lag)-->Line_25 $$ lagValue = lagWindow.peek()[ FD ]
Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) -->Line_34 $$ values.add(null)[ CD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_3 $$ ArrayList<Double> values = new ArrayList(numBuckets)[ CD ]
Line_12 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.INSERT_ZEROS)) -->Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)[ CD ]
Line_8 $$ double[] docValues = mockBucket.docValues-->Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)[ FD ]
Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_7 $$ Double metricValue-->Line_27 $$ if (metricValue == null) [ FD ]
Line_11 $$ metricValue = null-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_20 $$ counter += 1-->Line_22 $$ if (counter <= lag) [ FD ]
Line_7 $$ Double metricValue-->Line_11 $$ metricValue = null[ FD ]
Line_7 $$ Double metricValue-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_8 $$ double[] docValues = mockBucket.docValues-->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_3 $$ ArrayList<Double> values = new ArrayList(numBuckets)-->Line_38 $$ testValues.put(target.toString(), values)[ FD ]
Line_11 $$ metricValue = null-->Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)[ FD ]
Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_31 $$ double diff = metricValue - lagValue-->Line_32 $$ values.add(diff)[ FD ]
Line_21 $$ Double lagValue-->Line_25 $$ lagValue = lagWindow.peek()[ FD ]
Line_11 $$ metricValue = null-->Line_28 $$ metricValue = Double.NaN[ FD ]
Line_28 $$ metricValue = Double.NaN-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)-->Line_28 $$ metricValue = Double.NaN[ FD ]
Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)-->Line_27 $$ if (metricValue == null) [ FD ]
Line_21 $$ Double lagValue-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_10 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) -->Line_12 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.INSERT_ZEROS)) [ CD ]
Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count-->Line_28 $$ metricValue = Double.NaN[ FD ]
Line_13 $$ metricValue = 0.0-->Line_27 $$ if (metricValue == null) [ FD ]
Line_13 $$ metricValue = 0.0-->Line_28 $$ metricValue = Double.NaN[ FD ]
Line_13 $$ metricValue = 0.0-->Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)[ FD ]
Line_11 $$ metricValue = null-->Line_13 $$ metricValue = 0.0[ FD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_5 $$ int counter = 0-->Line_22 $$ if (counter <= lag) [ FD ]
Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) -->Line_32 $$ values.add(diff)[ CD ]
Line_7 $$ Double metricValue-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_22 $$ if (counter <= lag) -->Line_25 $$ lagValue = lagWindow.peek()[ CD ]
Line_13 $$ metricValue = 0.0-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) -->Line_31 $$ double diff = metricValue - lagValue[ CD ]
Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_9 $$ if (mockBucket.count == 0 && target.equals(MetricTarget.VALUE)) [ FD ]
Line_28 $$ metricValue = Double.NaN-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_13 $$ metricValue = 0.0-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_38 $$ testValues.put(target.toString(), values)[ CD ]
Line_23 $$ lagValue = Double.NaN-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_12 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.INSERT_ZEROS)) -->Line_13 $$ metricValue = 0.0[ CD ]
Line_10 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) -->Line_11 $$ metricValue = null[ CD ]
Line_21 $$ Double lagValue-->Line_23 $$ lagValue = Double.NaN[ FD ]
Line_23 $$ lagValue = Double.NaN-->Line_25 $$ lagValue = lagWindow.peek()[ FD ]
Line_25 $$ lagValue = lagWindow.peek()-->Line_30 $$ if (!Double.isNaN(metricValue) && !Double.isNaN(lagValue)) [ FD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_4 $$ EvictingQueue<Double> lagWindow = new EvictingQueue(lag)[ CD ]
Line_3 $$ ArrayList<Double> values = new ArrayList(numBuckets)-->Line_34 $$ values.add(null)[ FD ]
Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)-->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_5 $$ int counter = 0-->Line_20 $$ counter += 1[ FD ]
Line_27 $$ if (metricValue == null) -->Line_28 $$ metricValue = Double.NaN[ CD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_5 $$ int counter = 0[ CD ]
Line_7 $$ Double metricValue-->Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)[ FD ]
Line_11 $$ metricValue = null-->Line_27 $$ if (metricValue == null) [ FD ]
Line_13 $$ metricValue = 0.0-->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count-->Line_27 $$ if (metricValue == null) [ FD ]
Line_2 $$ private void setupExpected(MetricTarget target) -->Line_38 $$ testValues.put(target.toString(), values)[ FD ]
Line_7 $$ Double metricValue-->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ FD ]
Line_7 $$ Double metricValue-->Line_28 $$ metricValue = Double.NaN[ FD ]
Line_9 $$ if (mockBucket.count == 0 && target.equals(MetricTarget.VALUE)) -->Line_10 $$ if (gapPolicy.equals(BucketHelpers.GapPolicy.SKIP)) [ CD ]
Line_9 $$ if (mockBucket.count == 0 && target.equals(MetricTarget.VALUE)) -->Line_18 $$ metricValue = target.equals(MetricTarget.VALUE) ? PipelineAggregationHelperTests.calculateMetric(docValues, metric) : mockBucket.count[ CD ]
Line_11 $$ metricValue = null-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_15 $$ metricValue = PipelineAggregationHelperTests.calculateMetric(docValues, metric)-->Line_36 $$ lagWindow.add(metricValue)[ FD ]
Line_22 $$ if (counter <= lag) -->Line_23 $$ lagValue = Double.NaN[ CD ]
