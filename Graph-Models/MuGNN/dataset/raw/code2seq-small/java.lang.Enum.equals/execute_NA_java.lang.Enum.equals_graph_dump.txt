Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)-->Line_15 $$ myHadNoMappings = MyCheckResult.notMapped.equals(result)[ FD ]
Line_5 $$ if (myProject == null || myProject.isDefault()) -->Line_6 $$ return[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_15 $$ myHadNoMappings = MyCheckResult.notMapped.equals(result)[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_3 $$ final DataContext dataContext = e.getDataContext()[ FD ]
Line_11 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(myProject)-->Line_26 $$ myEnabled = (!vcsManager.isBackgroundVcsOperationRunning())[ FD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_8 $$ final VirtualFile baseDir = myProject.getBaseDir()[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_13 $$ if (MyCheckResult.disable.equals(result))[ CD ]
Line_22 $$ if ((!myHadNoMappings) && (!SvnVcs.getInstance(myProject).getSvnFileUrlMapping().isEmpty())) -->Line_23 $$ return[ CD ]
Line_9 $$ if (baseDir == null)-->Line_10 $$ return[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_9 $$ if (baseDir == null)[ CD ]
Line_8 $$ final VirtualFile baseDir = myProject.getBaseDir()-->Line_9 $$ if (baseDir == null)[ FD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_4 $$ myProject = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_3 $$ final DataContext dataContext = e.getDataContext()[ CD ]
Line_3 $$ final DataContext dataContext = e.getDataContext()-->Line_4 $$ myProject = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)[ CD ]
Line_11 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(myProject)-->Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)[ FD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_16 $$ if (MyCheckResult.notMapped.equals(result)) [ CD ]
Line_17 $$ if (SvnUtil.seemsLikeVersionedDir(baseDir))-->Line_18 $$ return[ CD ]
Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)-->Line_16 $$ if (MyCheckResult.notMapped.equals(result)) [ FD ]
Line_16 $$ if (MyCheckResult.notMapped.equals(result)) -->Line_17 $$ if (SvnUtil.seemsLikeVersionedDir(baseDir))[ CD ]
Line_8 $$ final VirtualFile baseDir = myProject.getBaseDir()-->Line_17 $$ if (SvnUtil.seemsLikeVersionedDir(baseDir))[ FD ]
Line_16 $$ if (MyCheckResult.notMapped.equals(result)) -->Line_19 $$ if (SvnStatusUtil.isUnderControl(myProject, baseDir)) [ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_22 $$ if ((!myHadNoMappings) && (!SvnVcs.getInstance(myProject).getSvnFileUrlMapping().isEmpty())) [ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_11 $$ final ProjectLevelVcsManager vcsManager = ProjectLevelVcsManager.getInstance(myProject)[ CD ]
Line_19 $$ if (SvnStatusUtil.isUnderControl(myProject, baseDir)) -->Line_20 $$ return[ CD ]
Line_2 $$ public void execute(final AnActionEvent e) -->Line_5 $$ if (myProject == null || myProject.isDefault()) [ CD ]
Line_8 $$ final VirtualFile baseDir = myProject.getBaseDir()-->Line_19 $$ if (SvnStatusUtil.isUnderControl(myProject, baseDir)) [ FD ]
Line_8 $$ final VirtualFile baseDir = myProject.getBaseDir()-->Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)[ FD ]
Line_12 $$ final MyCheckResult result = checkMappings(baseDir, vcsManager)-->Line_13 $$ if (MyCheckResult.disable.equals(result))[ FD ]
Line_13 $$ if (MyCheckResult.disable.equals(result))-->Line_14 $$ return[ CD ]
