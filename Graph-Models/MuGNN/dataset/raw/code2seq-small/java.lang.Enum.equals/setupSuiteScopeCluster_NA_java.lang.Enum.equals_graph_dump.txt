Line_5 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_29 $$ builders.add(client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, mockBucket.key).field(VALUE_FIELD, value).endObject()))[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_7 $$ numBuckets = randomIntBetween(6, 80)[ CD ]
Line_32 $$ for (int i = -10; i < 10; i++) -->Line_36 $$ builders.add(client().prepareIndex("double_predict", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ FD ]
Line_28 $$ for (double value : mockBucket.docValues) -->Line_29 $$ builders.add(client().prepareIndex("idx", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, mockBucket.key).field(VALUE_FIELD, value).endObject()))[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_8 $$ period = randomIntBetween(1, 5)[ CD ]
Line_18 $$ for (MovAvgType type : MovAvgType.values()) -->Line_21 $$ setupExpected(type, target, numBuckets)[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_35 $$ for (int i = 0; i < 12; i++) [ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_38 $$ indexRandom(true, builders)[ CD ]
Line_19 $$ for (MetricTarget target : MetricTarget.values()) -->Line_21 $$ setupExpected(type, target, numBuckets)[ FD ]
Line_18 $$ for (MovAvgType type : MovAvgType.values()) -->Line_20 $$ if (type.equals(MovAvgType.HOLT_BIG_MINIMIZE)) [ FD ]
Line_19 $$ for (MetricTarget target : MetricTarget.values()) -->Line_23 $$ setupExpected(type, target, windowSize)[ FD ]
Line_20 $$ if (type.equals(MovAvgType.HOLT_BIG_MINIMIZE)) -->Line_23 $$ setupExpected(type, target, windowSize)[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_16 $$ mockHisto = PipelineAggregationHelperTests.generateHistogram(interval, numBuckets, randomDouble(), randomDouble())[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_12 $$ gamma = randomDouble()[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_10 $$ alpha = randomDouble()[ CD ]
Line_32 $$ for (int i = -10; i < 10; i++) -->Line_33 $$ builders.add(client().prepareIndex("neg_idx", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ CD ]
Line_35 $$ for (int i = 0; i < 12; i++) -->Line_36 $$ builders.add(client().prepareIndex("double_predict", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_32 $$ for (int i = -10; i < 10; i++) [ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_3 $$ createIndex("idx")[ CD ]
Line_5 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_36 $$ builders.add(client().prepareIndex("double_predict", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_5 $$ List<IndexRequestBuilder> builders = new ArrayList()[ CD ]
Line_5 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_38 $$ indexRandom(true, builders)[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_4 $$ createIndex("idx_unmapped")[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_39 $$ ensureSearchable()[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_11 $$ beta = randomDouble()[ CD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_15 $$ metric = randomMetric("the_metric", VALUE_FIELD)[ CD ]
Line_18 $$ for (MovAvgType type : MovAvgType.values()) -->Line_23 $$ setupExpected(type, target, windowSize)[ FD ]
Line_20 $$ if (type.equals(MovAvgType.HOLT_BIG_MINIMIZE)) -->Line_21 $$ setupExpected(type, target, numBuckets)[ CD ]
Line_32 $$ for (int i = -10; i < 10; i++) -->Line_35 $$ for (int i = 0; i < 12; i++) [ FD ]
Line_35 $$ for (int i = 0; i < 12; i++) -->Line_36 $$ builders.add(client().prepareIndex("double_predict", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ FD ]
Line_2 $$ public void setupSuiteScopeCluster() throws Exception -->Line_9 $$ windowSize = randomIntBetween(period * 2, 10)[ CD ]
Line_5 $$ List<IndexRequestBuilder> builders = new ArrayList()-->Line_33 $$ builders.add(client().prepareIndex("neg_idx", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ FD ]
Line_32 $$ for (int i = -10; i < 10; i++) -->Line_33 $$ builders.add(client().prepareIndex("neg_idx", "type").setSource(jsonBuilder().startObject().field(INTERVAL_FIELD, i).field(VALUE_FIELD, 10).endObject()))[ FD ]
