Line_16 $$ final String e2 = s2.get(i)-->Line_24 $$ res = compareNumbers(e1, e2)[ FD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_16 $$ final String e2 = s2.get(i)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_9 $$ ver2 = ver2.toLowerCase()[ FD ]
Line_20 $$ res = comparePriorities(t1, t2)-->Line_22 $$ res = e1.compareTo(e2)[ FD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_16 $$ final String e2 = s2.get(i)[ CD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_26 $$ if (res != 0) [ CD ]
Line_26 $$ if (res != 0) -->Line_27 $$ return res[ CD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_9 $$ ver2 = ver2.toLowerCase()[ CD ]
Line_11 $$ final List<String> s2 = splitVersionString(ver2)-->Line_16 $$ final String e2 = s2.get(i)[ FD ]
Line_19 $$ if (!t1.equals(t2)) -->Line_20 $$ res = comparePriorities(t1, t2)[ CD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_10 $$ final List<String> s1 = splitVersionString(ver1)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_14 $$ for (int i = 0; i < s1.size(); i++) [ CD ]
Line_16 $$ final String e2 = s2.get(i)-->Line_18 $$ final VersionTokenType t2 = VersionTokenType.lookup(e2)[ FD ]
Line_16 $$ final String e2 = s2.get(i)-->Line_22 $$ res = e1.compareTo(e2)[ FD ]
Line_20 $$ res = comparePriorities(t1, t2)-->Line_24 $$ res = compareNumbers(e1, e2)[ FD ]
Line_22 $$ res = e1.compareTo(e2)-->Line_26 $$ if (res != 0) [ FD ]
Line_22 $$ res = e1.compareTo(e2)-->Line_24 $$ res = compareNumbers(e1, e2)[ FD ]
Line_24 $$ res = compareNumbers(e1, e2)-->Line_26 $$ if (res != 0) [ FD ]
Line_18 $$ final VersionTokenType t2 = VersionTokenType.lookup(e2)-->Line_19 $$ if (!t1.equals(t2)) [ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_3 $$ if (ver1 == null) [ FD ]
Line_13 $$ int res = 0-->Line_24 $$ res = compareNumbers(e1, e2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_11 $$ final List<String> s2 = splitVersionString(ver2)[ CD ]
Line_10 $$ final List<String> s1 = splitVersionString(ver1)-->Line_15 $$ final String e1 = s1.get(i)[ FD ]
Line_13 $$ int res = 0-->Line_20 $$ res = comparePriorities(t1, t2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_13 $$ int res = 0[ CD ]
Line_11 $$ final List<String> s2 = splitVersionString(ver2)-->Line_12 $$ padWithNulls(s1, s2)[ FD ]
Line_3 $$ if (ver1 == null) -->Line_4 $$ return (ver2 == null) ? 0 : -1[ CD ]
Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)-->Line_23 $$ if (t1 == VersionTokenType._DIGITS) [ FD ]
Line_15 $$ final String e1 = s1.get(i)-->Line_24 $$ res = compareNumbers(e1, e2)[ FD ]
Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)-->Line_21 $$ if (t1 == VersionTokenType._WORD) [ FD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)[ CD ]
Line_15 $$ final String e1 = s1.get(i)-->Line_22 $$ res = e1.compareTo(e2)[ FD ]
Line_9 $$ ver2 = ver2.toLowerCase()-->Line_11 $$ final List<String> s2 = splitVersionString(ver2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_12 $$ padWithNulls(s1, s2)[ CD ]
Line_10 $$ final List<String> s1 = splitVersionString(ver1)-->Line_12 $$ padWithNulls(s1, s2)[ FD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_15 $$ final String e1 = s1.get(i)[ CD ]
Line_18 $$ final VersionTokenType t2 = VersionTokenType.lookup(e2)-->Line_20 $$ res = comparePriorities(t1, t2)[ FD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_19 $$ if (!t1.equals(t2)) [ CD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_8 $$ ver1 = ver1.toLowerCase()[ CD ]
Line_10 $$ final List<String> s1 = splitVersionString(ver1)-->Line_14 $$ for (int i = 0; i < s1.size(); i++) [ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_11 $$ final List<String> s2 = splitVersionString(ver2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_3 $$ if (ver1 == null) [ CD ]
Line_15 $$ final String e1 = s1.get(i)-->Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)[ FD ]
Line_19 $$ if (!t1.equals(t2)) -->Line_21 $$ if (t1 == VersionTokenType._WORD) [ CD ]
Line_23 $$ if (t1 == VersionTokenType._DIGITS) -->Line_24 $$ res = compareNumbers(e1, e2)[ CD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_15 $$ final String e1 = s1.get(i)[ FD ]
Line_21 $$ if (t1 == VersionTokenType._WORD) -->Line_22 $$ res = e1.compareTo(e2)[ CD ]
Line_13 $$ int res = 0-->Line_22 $$ res = e1.compareTo(e2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_10 $$ final List<String> s1 = splitVersionString(ver1)[ CD ]
Line_14 $$ for (int i = 0; i < s1.size(); i++) -->Line_18 $$ final VersionTokenType t2 = VersionTokenType.lookup(e2)[ CD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_5 $$ if (ver2 == null) [ FD ]
Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)-->Line_20 $$ res = comparePriorities(t1, t2)[ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_30 $$ return 0[ CD ]
Line_3 $$ if (ver1 == null) -->Line_5 $$ if (ver2 == null) [ CD ]
Line_21 $$ if (t1 == VersionTokenType._WORD) -->Line_23 $$ if (t1 == VersionTokenType._DIGITS) [ CD ]
Line_17 $$ final VersionTokenType t1 = VersionTokenType.lookup(e1)-->Line_19 $$ if (!t1.equals(t2)) [ FD ]
Line_2 $$ public static int compare(String ver1, String ver2) -->Line_8 $$ ver1 = ver1.toLowerCase()[ FD ]
Line_20 $$ res = comparePriorities(t1, t2)-->Line_26 $$ if (res != 0) [ FD ]
Line_5 $$ if (ver2 == null) -->Line_6 $$ return 1[ CD ]
Line_13 $$ int res = 0-->Line_26 $$ if (res != 0) [ FD ]
Line_8 $$ ver1 = ver1.toLowerCase()-->Line_10 $$ final List<String> s1 = splitVersionString(ver1)[ FD ]
