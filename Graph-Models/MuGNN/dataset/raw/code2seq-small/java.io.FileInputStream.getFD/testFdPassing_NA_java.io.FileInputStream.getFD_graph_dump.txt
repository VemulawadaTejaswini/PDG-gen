Line_27 $$ InputStream connInputStream = conn.getInputStream()-->Line_28 $$ IOUtils.readFully(connInputStream, in1, 0, in1.length)[ FD ]
Line_11 $$ final byte[] serverMsg1 = new byte[] -->Line_31 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_71 $$ for (int i = 0; i < 2; i++) -->Line_73 $$ if (!(t instanceof Success)) [ CD ]
Line_13 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)-->Line_25 $$ conn = serv.accept()[ FD ]
Line_71 $$ for (int i = 0; i < 2; i++) -->Line_72 $$ Throwable t = threadResults.take()[ CD ]
Line_56 $$ for (int i = 0; i < passedFds.length; i++) -->Line_71 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_26 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_29 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_50 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_55 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_56 $$ for (int i = 0; i < passedFds.length; i++) -->Line_57 $$ Assert.assertNotNull(recvFis[i])[ CD ]
Line_25 $$ conn = serv.accept()-->Line_32 $$ conn.close()[ FD ]
Line_46 $$ OutputStream clientOutputStream = client.getOutputStream()-->Line_48 $$ clientOutputStream.write(clientMsg1)[ FD ]
Line_11 $$ final byte[] serverMsg1 = new byte[] -->Line_55 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_16 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_56 $$ for (int i = 0; i < passedFds.length; i++) [ FD ]
Line_73 $$ if (!(t instanceof Success)) -->Line_74 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ CD ]
Line_26 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_19 $$ Thread serverThread = new Thread() -->Line_37 $$ threadResults.add(new Success())[ CD ]
Line_19 $$ Thread serverThread = new Thread() -->Line_77 $$ serverThread.join(120000)[ FD ]
Line_25 $$ conn = serv.accept()-->Line_27 $$ InputStream connInputStream = conn.getInputStream()[ FD ]
Line_16 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_71 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)-->Line_54 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_13 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)-->Line_79 $$ serv.close()[ FD ]
Line_12 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_65 $$ threadResults.add(e)[ FD ]
Line_9 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock").getAbsolutePath()-->Line_45 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)[ FD ]
Line_50 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_9 $$ final String TEST_PATH = new File(sockDir.getDir(), "test_sock").getAbsolutePath()-->Line_13 $$ final DomainSocket serv = DomainSocket.bindAndListen(TEST_PATH)[ FD ]
Line_56 $$ for (int i = 0; i < passedFds.length; i++) -->Line_58 $$ passedFiles[i].checkInputStream(recvFis[i])[ CD ]
Line_19 $$ Thread serverThread = new Thread() -->Line_40 $$ serverThread.start()[ FD ]
Line_45 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_63 $$ client.close()[ FD ]
Line_51 $$ FileInputStream[] recvFis = new FileInputStream[passedFds.length]-->Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_72 $$ Throwable t = threadResults.take()-->Line_74 $$ Assert.fail(t.getMessage() + ExceptionUtils.getStackTrace(t))[ FD ]
Line_45 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_46 $$ OutputStream clientOutputStream = client.getOutputStream()[ FD ]
Line_47 $$ InputStream clientInputStream = client.getInputStream()-->Line_54 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_15 $$ final FileDescriptor[] passedFds = new FileDescriptor[passedFiles.length]-->Line_31 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_45 $$ DomainSocket client = DomainSocket.connect(TEST_PATH)-->Line_47 $$ InputStream clientInputStream = client.getInputStream()[ FD ]
Line_60 $$ for (FileInputStream fis : recvFis) -->Line_61 $$ fis.close()[ FD ]
Line_26 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_55 $$ Assert.assertTrue(Arrays.equals(serverMsg1, in1))[ FD ]
Line_10 $$ final byte[] clientMsg1 = new byte[] -->Line_48 $$ clientOutputStream.write(clientMsg1)[ FD ]
Line_12 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_37 $$ threadResults.add(new Success())[ FD ]
Line_30 $$ DomainSocket domainConn = (DomainSocket) conn-->Line_31 $$ domainConn.sendFileDescriptors(passedFds, serverMsg1, 0, serverMsg1.length)[ FD ]
Line_26 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_28 $$ IOUtils.readFully(connInputStream, in1, 0, in1.length)[ FD ]
Line_12 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_34 $$ threadResults.add(e)[ FD ]
Line_16 $$ for (int i = 0; i < passedFiles.length; i++) -->Line_17 $$ passedFds[i] = passedFiles[i].getInputStream().getFD()[ CD ]
Line_49 $$ DomainSocket domainConn = (DomainSocket) client-->Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
Line_12 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_67 $$ threadResults.add(new Success())[ FD ]
Line_12 $$ final ArrayBlockingQueue<Throwable> threadResults = new ArrayBlockingQueue<Throwable>(2)-->Line_72 $$ Throwable t = threadResults.take()[ FD ]
Line_26 $$ byte[] in1 = new byte[clientMsg1.length]-->Line_54 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_10 $$ final byte[] clientMsg1 = new byte[] -->Line_29 $$ Assert.assertTrue(Arrays.equals(clientMsg1, in1))[ FD ]
Line_50 $$ byte[] in1 = new byte[serverMsg1.length]-->Line_54 $$ IOUtils.readFully(clientInputStream, in1, r, in1.length - r)[ FD ]
Line_41 $$ Thread clientThread = new Thread() -->Line_67 $$ threadResults.add(new Success())[ CD ]
Line_30 $$ DomainSocket domainConn = (DomainSocket) conn-->Line_52 $$ int r = domainConn.recvFileInputStreams(recvFis, in1, 0, in1.length - 1)[ FD ]
