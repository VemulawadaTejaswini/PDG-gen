Line_2 $$ private void processClassHierarchy(Class testClass) -->Line_17 $$ Class superClass = testClass.getSuperclass()[ FD ]
Line_17 $$ Class superClass = testClass.getSuperclass()-->Line_18 $$ if (superClass != null) [ FD ]
Line_13 $$ if (method.getAnnotation(CallbackType.ON_EXPECTED_FAILURE.annotationClass) != null) -->Line_14 $$ addOnExpectedFailureCallback(method)[ CD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_4 $$ if (method.getAnnotation(CallbackType.BEFORE_CLASS_ONCE.annotationClass) != null) [ FD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_10 $$ if (method.getAnnotation(CallbackType.ON_FAILURE.annotationClass) != null) [ FD ]
Line_2 $$ private void processClassHierarchy(Class testClass) -->Line_17 $$ Class superClass = testClass.getSuperclass()[ CD ]
Line_18 $$ if (superClass != null) -->Line_19 $$ processClassHierarchy(superClass)[ CD ]
Line_2 $$ private void processClassHierarchy(Class testClass) -->Line_3 $$ for (Method method : testClass.getDeclaredMethods()) [ FD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_11 $$ addOnFailureCallback(method)[ FD ]
Line_10 $$ if (method.getAnnotation(CallbackType.ON_FAILURE.annotationClass) != null) -->Line_11 $$ addOnFailureCallback(method)[ CD ]
Line_17 $$ Class superClass = testClass.getSuperclass()-->Line_19 $$ processClassHierarchy(superClass)[ FD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_8 $$ addAfterClassOnceCallback(method)[ FD ]
Line_2 $$ private void processClassHierarchy(Class testClass) -->Line_18 $$ if (superClass != null) [ CD ]
Line_4 $$ if (method.getAnnotation(CallbackType.BEFORE_CLASS_ONCE.annotationClass) != null) -->Line_5 $$ addBeforeClassOnceCallback(method)[ CD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_14 $$ addOnExpectedFailureCallback(method)[ FD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_13 $$ if (method.getAnnotation(CallbackType.ON_EXPECTED_FAILURE.annotationClass) != null) [ FD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_7 $$ if (method.getAnnotation(CallbackType.AFTER_CLASS_ONCE.annotationClass) != null) [ FD ]
Line_7 $$ if (method.getAnnotation(CallbackType.AFTER_CLASS_ONCE.annotationClass) != null) -->Line_8 $$ addAfterClassOnceCallback(method)[ CD ]
Line_3 $$ for (Method method : testClass.getDeclaredMethods()) -->Line_5 $$ addBeforeClassOnceCallback(method)[ FD ]
