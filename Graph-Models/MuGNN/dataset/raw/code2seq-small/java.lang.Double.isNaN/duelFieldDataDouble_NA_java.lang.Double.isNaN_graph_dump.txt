Line_21 $$ if (j > 0) -->Line_22 $$ assertThat(Double.compare(previous, current), lessThan(0))[ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_4 $$ AtomicNumericFieldData rightData = random.nextBoolean() ? right.load(context) : right.loadDirect(context)[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ leftDoubleValues.setDocument(i)[ CD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_15 $$ double current = rightDoubleValues.valueAt(j)[ FD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_15 $$ double current = rightDoubleValues.valueAt(j)[ CD ]
Line_11 $$ int numValues = leftDoubleValues.count()-->Line_12 $$ assertThat(numValues, equalTo(rightDoubleValues.count()))[ FD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_19 $$ assertThat(leftDoubleValues.valueAt(j), closeTo(current, 0.0001))[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ leftDoubleValues.setDocument(i)[ FD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_3 $$ AtomicNumericFieldData leftData = random.nextBoolean() ? left.load(context) : left.loadDirect(context)[ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()[ CD ]
Line_16 $$ if (Double.isNaN(current)) -->Line_17 $$ assertTrue(Double.isNaN(leftDoubleValues.valueAt(j)))[ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_7 $$ SortedNumericDoubleValues rightDoubleValues = rightData.getDoubleValues()[ CD ]
Line_15 $$ double current = rightDoubleValues.valueAt(j)-->Line_19 $$ assertThat(leftDoubleValues.valueAt(j), closeTo(current, 0.0001))[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_14 $$ for (int j = 0; j < numValues; j++) [ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_5 $$ int numDocs = context.reader().maxDoc()[ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_4 $$ AtomicNumericFieldData rightData = random.nextBoolean() ? right.load(context) : right.loadDirect(context)[ CD ]
Line_15 $$ double current = rightDoubleValues.valueAt(j)-->Line_16 $$ if (Double.isNaN(current)) [ FD ]
Line_7 $$ SortedNumericDoubleValues rightDoubleValues = rightData.getDoubleValues()-->Line_15 $$ double current = rightDoubleValues.valueAt(j)[ FD ]
Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()-->Line_19 $$ assertThat(leftDoubleValues.valueAt(j), closeTo(current, 0.0001))[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_10 $$ rightDoubleValues.setDocument(i)[ CD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_5 $$ int numDocs = context.reader().maxDoc()[ FD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_16 $$ if (Double.isNaN(current)) [ CD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_21 $$ if (j > 0) [ CD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_21 $$ if (j > 0) [ FD ]
Line_11 $$ int numValues = leftDoubleValues.count()-->Line_14 $$ for (int j = 0; j < numValues; j++) [ FD ]
Line_15 $$ double current = rightDoubleValues.valueAt(j)-->Line_22 $$ assertThat(Double.compare(previous, current), lessThan(0))[ FD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_24 $$ previous = current[ CD ]
Line_14 $$ for (int j = 0; j < numValues; j++) -->Line_17 $$ assertTrue(Double.isNaN(leftDoubleValues.valueAt(j)))[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_11 $$ int numValues = leftDoubleValues.count()[ CD ]
Line_5 $$ int numDocs = context.reader().maxDoc()-->Line_8 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_3 $$ AtomicNumericFieldData leftData = random.nextBoolean() ? left.load(context) : left.loadDirect(context)-->Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()[ FD ]
Line_24 $$ previous = current-->Line_22 $$ assertThat(Double.compare(previous, current), lessThan(0))[ FD ]
Line_16 $$ if (Double.isNaN(current)) -->Line_19 $$ assertThat(leftDoubleValues.valueAt(j), closeTo(current, 0.0001))[ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_10 $$ rightDoubleValues.setDocument(i)[ FD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_3 $$ AtomicNumericFieldData leftData = random.nextBoolean() ? left.load(context) : left.loadDirect(context)[ FD ]
Line_7 $$ SortedNumericDoubleValues rightDoubleValues = rightData.getDoubleValues()-->Line_10 $$ rightDoubleValues.setDocument(i)[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_13 $$ double previous = 0[ CD ]
Line_15 $$ double current = rightDoubleValues.valueAt(j)-->Line_24 $$ previous = current[ FD ]
Line_13 $$ double previous = 0-->Line_22 $$ assertThat(Double.compare(previous, current), lessThan(0))[ FD ]
Line_4 $$ AtomicNumericFieldData rightData = random.nextBoolean() ? right.load(context) : right.loadDirect(context)-->Line_7 $$ SortedNumericDoubleValues rightDoubleValues = rightData.getDoubleValues()[ FD ]
Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()-->Line_11 $$ int numValues = leftDoubleValues.count()[ FD ]
Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()-->Line_9 $$ leftDoubleValues.setDocument(i)[ FD ]
Line_6 $$ SortedNumericDoubleValues leftDoubleValues = leftData.getDoubleValues()-->Line_17 $$ assertTrue(Double.isNaN(leftDoubleValues.valueAt(j)))[ FD ]
Line_7 $$ SortedNumericDoubleValues rightDoubleValues = rightData.getDoubleValues()-->Line_12 $$ assertThat(numValues, equalTo(rightDoubleValues.count()))[ FD ]
Line_13 $$ double previous = 0-->Line_24 $$ previous = current[ FD ]
Line_2 $$ private static void duelFieldDataDouble(Random random, LeafReaderContext context, IndexNumericFieldData left, IndexNumericFieldData right) throws Exception -->Line_8 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_12 $$ assertThat(numValues, equalTo(rightDoubleValues.count()))[ CD ]
