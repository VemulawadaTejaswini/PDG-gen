Line_7 $$ while (true) -->Line_12 $$ Block block = reader.readBlock(type, columnIndex)[ CD ]
Line_24 $$ if (!minSet || (value < min)) -->Line_26 $$ min = value[ CD ]
Line_7 $$ while (true) -->Line_8 $$ int batchSize = reader.nextBatch()[ CD ]
Line_5 $$ double min = 0-->Line_34 $$ if (isInfinite(min)) [ FD ]
Line_28 $$ if (!maxSet || (value > max)) -->Line_29 $$ maxSet = true[ CD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_37 $$ if (isInfinite(max)) [ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_17 $$ double value = type.getDouble(block, i)[ FD ]
Line_22 $$ value = 0.0-->Line_30 $$ max = value[ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_40 $$ return new ColumnStats(columnId, minSet ? min : null, maxSet ? max : null)[ CD ]
Line_5 $$ double min = 0-->Line_26 $$ min = value[ FD ]
Line_22 $$ value = 0.0-->Line_26 $$ min = value[ FD ]
Line_21 $$ if (value == -0.0) -->Line_22 $$ value = 0.0[ CD ]
Line_3 $$ boolean minSet = false-->Line_25 $$ minSet = true[ FD ]
Line_3 $$ boolean minSet = false-->Line_35 $$ minSet = false[ FD ]
Line_22 $$ value = 0.0-->Line_18 $$ if (isNaN(value)) [ FD ]
Line_6 $$ double max = 0-->Line_30 $$ max = value[ FD ]
Line_29 $$ maxSet = true-->Line_38 $$ maxSet = false[ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_12 $$ Block block = reader.readBlock(type, columnIndex)[ FD ]
Line_8 $$ int batchSize = reader.nextBatch()-->Line_9 $$ if (batchSize <= 0) [ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_17 $$ double value = type.getDouble(block, i)[ FD ]
Line_4 $$ boolean maxSet = false-->Line_29 $$ maxSet = true[ FD ]
Line_22 $$ value = 0.0-->Line_21 $$ if (value == -0.0) [ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_8 $$ int batchSize = reader.nextBatch()[ FD ]
Line_7 $$ while (true) -->Line_13 $$ for (int i = 0; i < batchSize; i++) [ CD ]
Line_30 $$ max = value-->Line_37 $$ if (isInfinite(max)) [ FD ]
Line_25 $$ minSet = true-->Line_24 $$ if (!minSet || (value < min)) [ FD ]
Line_17 $$ double value = type.getDouble(block, i)-->Line_26 $$ min = value[ FD ]
Line_26 $$ min = value-->Line_34 $$ if (isInfinite(min)) [ FD ]
Line_17 $$ double value = type.getDouble(block, i)-->Line_21 $$ if (value == -0.0) [ FD ]
Line_25 $$ minSet = true-->Line_35 $$ minSet = false[ FD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_28 $$ if (!maxSet || (value > max)) [ CD ]
Line_12 $$ Block block = reader.readBlock(type, columnIndex)-->Line_14 $$ if (block.isNull(i)) [ FD ]
Line_4 $$ boolean maxSet = false-->Line_28 $$ if (!maxSet || (value > max)) [ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_4 $$ boolean maxSet = false[ CD ]
Line_29 $$ maxSet = true-->Line_28 $$ if (!maxSet || (value > max)) [ FD ]
Line_8 $$ int batchSize = reader.nextBatch()-->Line_13 $$ for (int i = 0; i < batchSize; i++) [ FD ]
Line_7 $$ while (true) -->Line_9 $$ if (batchSize <= 0) [ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_14 $$ if (block.isNull(i)) [ CD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_5 $$ double min = 0[ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_14 $$ if (block.isNull(i)) [ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_6 $$ double max = 0[ CD ]
Line_28 $$ if (!maxSet || (value > max)) -->Line_30 $$ max = value[ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_17 $$ double value = type.getDouble(block, i)[ CD ]
Line_4 $$ boolean maxSet = false-->Line_38 $$ maxSet = false[ FD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_24 $$ if (!minSet || (value < min)) [ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_21 $$ if (value == -0.0) [ CD ]
Line_17 $$ double value = type.getDouble(block, i)-->Line_22 $$ value = 0.0[ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_34 $$ if (isInfinite(min)) [ CD ]
Line_24 $$ if (!minSet || (value < min)) -->Line_25 $$ minSet = true[ CD ]
Line_13 $$ for (int i = 0; i < batchSize; i++) -->Line_18 $$ if (isNaN(value)) [ CD ]
Line_17 $$ double value = type.getDouble(block, i)-->Line_18 $$ if (isNaN(value)) [ FD ]
Line_37 $$ if (isInfinite(max)) -->Line_38 $$ maxSet = false[ CD ]
Line_12 $$ Block block = reader.readBlock(type, columnIndex)-->Line_17 $$ double value = type.getDouble(block, i)[ FD ]
Line_17 $$ double value = type.getDouble(block, i)-->Line_30 $$ max = value[ FD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_3 $$ boolean minSet = false[ CD ]
Line_34 $$ if (isInfinite(min)) -->Line_35 $$ minSet = false[ CD ]
Line_2 $$ private static ColumnStats indexDouble(Type type, OrcRecordReader reader, int columnIndex, long columnId) throws IOException -->Line_7 $$ while (true) [ CD ]
Line_6 $$ double max = 0-->Line_37 $$ if (isInfinite(max)) [ FD ]
Line_3 $$ boolean minSet = false-->Line_24 $$ if (!minSet || (value < min)) [ FD ]
