Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_20 $$ SimpleValue sumDeriv = bucket.getAggregations().get("deriv")[ CD ]
Line_24 $$ double expectedDerivative = thisSumValue - lastSumValue-->Line_28 $$ assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001))[ FD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_14 $$ checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i, valueCounts_empty_rnd[i])[ FD ]
Line_21 $$ if (i == 0) -->Line_24 $$ double expectedDerivative = thisSumValue - lastSumValue[ CD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_9 $$ List<Bucket> buckets = deriv.getBuckets()[ CD ]
Line_21 $$ if (i == 0) -->Line_25 $$ if (Double.isNaN(expectedDerivative)) [ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_15 $$ Sum sum = bucket.getAggregations().get("sum")[ FD ]
Line_20 $$ SimpleValue sumDeriv = bucket.getAggregations().get("deriv")-->Line_22 $$ assertThat(sumDeriv, nullValue())[ FD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_10 $$ assertThat(buckets.size(), equalTo(numBuckets_empty_rnd))[ CD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_14 $$ checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i, valueCounts_empty_rnd[i])[ FD ]
Line_21 $$ if (i == 0) -->Line_22 $$ assertThat(sumDeriv, nullValue())[ CD ]
Line_25 $$ if (Double.isNaN(expectedDerivative)) -->Line_28 $$ assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001))[ CD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) [ CD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_5 $$ assertThat(searchResponse.getHits().getTotalHits(), equalTo(numDocsEmptyIdx_rnd))[ CD ]
Line_16 $$ double thisSumValue = sum.value()-->Line_31 $$ lastSumValue = thisSumValue[ FD ]
Line_18 $$ thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN-->Line_31 $$ lastSumValue = thisSumValue[ FD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_8 $$ assertThat(deriv.getName(), equalTo("histo"))[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_16 $$ double thisSumValue = sum.value()[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_21 $$ if (i == 0) [ CD ]
Line_4 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx_rnd").setQuery(matchAllQuery()).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1).extendedBounds(0l, (long) numBuckets_empty_rnd - 1).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)).subAggregation(derivative("deriv").setBucketsPaths("sum").gapPolicy(gapPolicy))).execute().actionGet()-->Line_6 $$ InternalHistogram<Bucket> deriv = searchResponse.getAggregations().get("histo")[ FD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_17 $$ if (bucket.getDocCount() == 0) [ CD ]
Line_20 $$ SimpleValue sumDeriv = bucket.getAggregations().get("deriv")-->Line_28 $$ assertThat(sumDeriv.value(), closeTo(expectedDerivative, 0.00001))[ FD ]
Line_6 $$ InternalHistogram<Bucket> deriv = searchResponse.getAggregations().get("histo")-->Line_8 $$ assertThat(deriv.getName(), equalTo("histo"))[ FD ]
Line_24 $$ double expectedDerivative = thisSumValue - lastSumValue-->Line_26 $$ assertThat(sumDeriv.value(), equalTo(expectedDerivative))[ FD ]
Line_17 $$ if (bucket.getDocCount() == 0) -->Line_18 $$ thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN[ CD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_6 $$ InternalHistogram<Bucket> deriv = searchResponse.getAggregations().get("histo")[ CD ]
Line_20 $$ SimpleValue sumDeriv = bucket.getAggregations().get("deriv")-->Line_26 $$ assertThat(sumDeriv.value(), equalTo(expectedDerivative))[ FD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_21 $$ if (i == 0) [ FD ]
Line_3 $$ GapPolicy gapPolicy = randomFrom(GapPolicy.values())-->Line_4 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx_rnd").setQuery(matchAllQuery()).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1).extendedBounds(0l, (long) numBuckets_empty_rnd - 1).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)).subAggregation(derivative("deriv").setBucketsPaths("sum").gapPolicy(gapPolicy))).execute().actionGet()[ FD ]
Line_6 $$ InternalHistogram<Bucket> deriv = searchResponse.getAggregations().get("histo")-->Line_7 $$ assertThat(deriv, Matchers.notNullValue())[ FD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_11 $$ double lastSumValue = Double.NaN[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_15 $$ Sum sum = bucket.getAggregations().get("sum")[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ FD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_14 $$ checkBucketKeyAndDocCount("InternalBucket " + i, bucket, i, valueCounts_empty_rnd[i])[ CD ]
Line_15 $$ Sum sum = bucket.getAggregations().get("sum")-->Line_16 $$ double thisSumValue = sum.value()[ FD ]
Line_24 $$ double expectedDerivative = thisSumValue - lastSumValue-->Line_25 $$ if (Double.isNaN(expectedDerivative)) [ FD ]
Line_11 $$ double lastSumValue = Double.NaN-->Line_31 $$ lastSumValue = thisSumValue[ FD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_20 $$ SimpleValue sumDeriv = bucket.getAggregations().get("deriv")[ FD ]
Line_16 $$ double thisSumValue = sum.value()-->Line_18 $$ thisSumValue = gapPolicy == GapPolicy.INSERT_ZEROS ? 0 : Double.NaN[ FD ]
Line_9 $$ List<Bucket> buckets = deriv.getBuckets()-->Line_10 $$ assertThat(buckets.size(), equalTo(numBuckets_empty_rnd))[ FD ]
Line_13 $$ Histogram.Bucket bucket = buckets.get(i)-->Line_17 $$ if (bucket.getDocCount() == 0) [ FD ]
Line_9 $$ List<Bucket> buckets = deriv.getBuckets()-->Line_13 $$ Histogram.Bucket bucket = buckets.get(i)[ FD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_4 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx_rnd").setQuery(matchAllQuery()).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1).extendedBounds(0l, (long) numBuckets_empty_rnd - 1).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)).subAggregation(derivative("deriv").setBucketsPaths("sum").gapPolicy(gapPolicy))).execute().actionGet()[ CD ]
Line_4 $$ SearchResponse searchResponse = client().prepareSearch("empty_bucket_idx_rnd").setQuery(matchAllQuery()).addAggregation(histogram("histo").field(SINGLE_VALUED_FIELD_NAME).interval(1).extendedBounds(0l, (long) numBuckets_empty_rnd - 1).subAggregation(sum("sum").field(SINGLE_VALUED_FIELD_NAME)).subAggregation(derivative("deriv").setBucketsPaths("sum").gapPolicy(gapPolicy))).execute().actionGet()-->Line_5 $$ assertThat(searchResponse.getHits().getTotalHits(), equalTo(numDocsEmptyIdx_rnd))[ FD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_7 $$ assertThat(deriv, Matchers.notNullValue())[ CD ]
Line_2 $$ public void testSingleValueAggDerivativeWithGaps_random() throws Exception -->Line_3 $$ GapPolicy gapPolicy = randomFrom(GapPolicy.values())[ CD ]
Line_25 $$ if (Double.isNaN(expectedDerivative)) -->Line_26 $$ assertThat(sumDeriv.value(), equalTo(expectedDerivative))[ CD ]
Line_12 $$ for (int i = 0; i < valueCounts_empty_rnd.length; i++) -->Line_31 $$ lastSumValue = thisSumValue[ CD ]
Line_6 $$ InternalHistogram<Bucket> deriv = searchResponse.getAggregations().get("histo")-->Line_9 $$ List<Bucket> buckets = deriv.getBuckets()[ FD ]
