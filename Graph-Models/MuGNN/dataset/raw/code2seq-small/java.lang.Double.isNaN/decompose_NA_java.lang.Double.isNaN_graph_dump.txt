Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)-->Line_21 $$ shift(shift, part)[ FD ]
Line_22 $$ offset = i - 1-->Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)[ FD ]
Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_17 $$ if (t < 1) -->Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)[ CD ]
Line_10 $$ int offset = 0-->Line_34 $$ Coordinate[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length)[ FD ]
Line_13 $$ for (int i = 1; i < coordinates.length; i++) -->Line_26 $$ offset = i[ FD ]
Line_15 $$ if (!Double.isNaN(t)) -->Line_28 $$ parts.add(part)[ CD ]
Line_10 $$ int offset = 0-->Line_33 $$ if (offset < coordinates.length - 1) [ FD ]
Line_22 $$ offset = i - 1-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_13 $$ for (int i = 1; i < coordinates.length; i++) -->Line_22 $$ offset = i - 1[ FD ]
Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)-->Line_28 $$ parts.add(part)[ FD ]
Line_16 $$ Coordinate[] part-->Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)[ FD ]
Line_12 $$ double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0)-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))-->Line_28 $$ parts.add(part)[ FD ]
Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))-->Line_21 $$ shift(shift, part)[ FD ]
Line_17 $$ if (t < 1) -->Line_22 $$ offset = i - 1[ CD ]
Line_17 $$ if (t < 1) -->Line_19 $$ part[part.length - 1] = Edge.position(coordinates[i - 1], coordinates[i], t)[ CD ]
Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_16 $$ Coordinate[] part-->Line_28 $$ parts.add(part)[ FD ]
Line_31 $$ if (offset == 0) -->Line_32 $$ parts.add(shift(shift, coordinates))[ CD ]
Line_17 $$ if (t < 1) -->Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)[ CD ]
Line_16 $$ Coordinate[] part-->Line_21 $$ shift(shift, part)[ FD ]
Line_13 $$ for (int i = 1; i < coordinates.length; i++) -->Line_15 $$ if (!Double.isNaN(t)) [ CD ]
Line_12 $$ double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0)-->Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)[ FD ]
Line_22 $$ offset = i - 1-->Line_26 $$ offset = i[ FD ]
Line_33 $$ if (offset < coordinates.length - 1) -->Line_34 $$ Coordinate[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length)[ CD ]
Line_16 $$ Coordinate[] part-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_10 $$ int offset = 0-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_15 $$ if (!Double.isNaN(t)) -->Line_17 $$ if (t < 1) [ CD ]
Line_26 $$ offset = i-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_33 $$ if (offset < coordinates.length - 1) -->Line_35 $$ parts.add(shift(shift, part))[ CD ]
Line_12 $$ double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0)-->Line_32 $$ parts.add(shift(shift, coordinates))[ FD ]
Line_10 $$ int offset = 0-->Line_31 $$ if (offset == 0) [ FD ]
Line_17 $$ if (t < 1) -->Line_21 $$ shift(shift, part)[ CD ]
Line_10 $$ int offset = 0-->Line_26 $$ offset = i[ FD ]
Line_14 $$ double t = intersection(coordinates[i - 1], coordinates[i], dateline)-->Line_19 $$ part[part.length - 1] = Edge.position(coordinates[i - 1], coordinates[i], t)[ FD ]
Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)-->Line_21 $$ shift(shift, part)[ FD ]
Line_15 $$ if (!Double.isNaN(t)) -->Line_16 $$ Coordinate[] part[ CD ]
Line_14 $$ double t = intersection(coordinates[i - 1], coordinates[i], dateline)-->Line_15 $$ if (!Double.isNaN(t)) [ FD ]
Line_31 $$ if (offset == 0) -->Line_33 $$ if (offset < coordinates.length - 1) [ CD ]
Line_22 $$ offset = i - 1-->Line_34 $$ Coordinate[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length)[ FD ]
Line_14 $$ double t = intersection(coordinates[i - 1], coordinates[i], dateline)-->Line_17 $$ if (t < 1) [ FD ]
Line_10 $$ int offset = 0-->Line_22 $$ offset = i - 1[ FD ]
Line_22 $$ offset = i - 1-->Line_31 $$ if (offset == 0) [ FD ]
Line_26 $$ offset = i-->Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)[ FD ]
Line_12 $$ double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0)-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_26 $$ offset = i-->Line_33 $$ if (offset < coordinates.length - 1) [ FD ]
Line_17 $$ if (t < 1) -->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ CD ]
Line_12 $$ double shift = coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0)-->Line_21 $$ shift(shift, part)[ FD ]
Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)-->Line_32 $$ parts.add(shift(shift, coordinates))[ FD ]
Line_34 $$ Coordinate[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length)-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_23 $$ shift = coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0)-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_17 $$ if (t < 1) -->Line_20 $$ coordinates[offset + i - 1] = Edge.position(coordinates[i - 1], coordinates[i], t)[ CD ]
Line_17 $$ if (t < 1) -->Line_26 $$ offset = i[ CD ]
Line_11 $$ ArrayList<Coordinate[]> parts = new ArrayList()-->Line_32 $$ parts.add(shift(shift, coordinates))[ FD ]
Line_14 $$ double t = intersection(coordinates[i - 1], coordinates[i], dateline)-->Line_20 $$ coordinates[offset + i - 1] = Edge.position(coordinates[i - 1], coordinates[i], t)[ FD ]
Line_11 $$ ArrayList<Coordinate[]> parts = new ArrayList()-->Line_37 $$ return parts.toArray(new Coordinate[parts.size()][])[ FD ]
Line_11 $$ ArrayList<Coordinate[]> parts = new ArrayList()-->Line_35 $$ parts.add(shift(shift, part))[ FD ]
Line_22 $$ offset = i - 1-->Line_33 $$ if (offset < coordinates.length - 1) [ FD ]
Line_16 $$ Coordinate[] part-->Line_25 $$ part = shift(shift, Arrays.copyOfRange(coordinates, offset, i + 1))[ FD ]
Line_26 $$ offset = i-->Line_34 $$ Coordinate[] part = Arrays.copyOfRange(coordinates, offset, coordinates.length)[ FD ]
Line_26 $$ offset = i-->Line_31 $$ if (offset == 0) [ FD ]
Line_10 $$ int offset = 0-->Line_18 $$ part = Arrays.copyOfRange(coordinates, offset, i + 1)[ FD ]
Line_11 $$ ArrayList<Coordinate[]> parts = new ArrayList()-->Line_28 $$ parts.add(part)[ FD ]
Line_13 $$ for (int i = 1; i < coordinates.length; i++) -->Line_14 $$ double t = intersection(coordinates[i - 1], coordinates[i], dateline)[ CD ]
