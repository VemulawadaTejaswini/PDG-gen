Line_12 $$ value = Math.random() * 10-->Line_13 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ FD ]
Line_10 $$ double value-->Line_13 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_8 $$ double[] array = new double[10][ CD ]
Line_12 $$ value = Math.random() * 10-->Line_17 $$ array[i] = value[ FD ]
Line_11 $$ if (randomFreq(0.9)) -->Line_17 $$ array[i] = value[ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_29 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_10 $$ double value[ CD ]
Line_10 $$ double value-->Line_20 $$ lookForValue = value[ FD ]
Line_37 $$ if (bitSet.cardinality() == 0) -->Line_40 $$ assertThat(bitSet.get(foundIndex), is(true))[ CD ]
Line_20 $$ lookForValue = value-->Line_30 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) [ FD ]
Line_11 $$ if (randomFreq(0.9)) -->Line_12 $$ value = Math.random() * 10[ CD ]
Line_30 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) -->Line_31 $$ bitSet.set(i)[ CD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_19 $$ if (i == index && lookForValue < 0) [ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_36 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ CD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_29 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_29 $$ for (int i = 0; i < array.length; i++) -->Line_31 $$ bitSet.set(i)[ FD ]
Line_29 $$ for (int i = 0; i < array.length; i++) -->Line_33 $$ bitSet.set(i)[ FD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_33 $$ bitSet.set(i)[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_23 $$ Arrays.sort(array)[ CD ]
Line_30 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) -->Line_32 $$ if ((array[i] >= lookForValue - tolerance) && (array[i] <= lookForValue + tolerance)) [ CD ]
Line_20 $$ lookForValue = value-->Line_36 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_32 $$ if ((array[i] >= lookForValue - tolerance) && (array[i] <= lookForValue + tolerance)) -->Line_33 $$ bitSet.set(i)[ CD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_31 $$ bitSet.set(i)[ FD ]
Line_8 $$ double[] array = new double[10]-->Line_36 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_4 $$ int index = Math.min(randomInt(0, 10), 9)[ CD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_5 $$ double tolerance = Math.random() * 0.01[ CD ]
Line_12 $$ value = Math.random() * 10-->Line_20 $$ lookForValue = value[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_37 $$ if (bitSet.cardinality() == 0) [ CD ]
Line_5 $$ double tolerance = Math.random() * 0.01-->Line_36 $$ int foundIndex = ArrayUtils.binarySearch(array, lookForValue, tolerance)[ FD ]
Line_37 $$ if (bitSet.cardinality() == 0) -->Line_38 $$ assertThat(foundIndex, is(-1))[ CD ]
Line_8 $$ double[] array = new double[10]-->Line_23 $$ Arrays.sort(array)[ FD ]
Line_11 $$ if (randomFreq(0.9)) -->Line_13 $$ array[i] = value + ((randomFreq(0.5) ? 1 : -1) * Math.random() * tolerance)[ CD ]
Line_19 $$ if (i == index && lookForValue < 0) -->Line_20 $$ lookForValue = value[ CD ]
Line_10 $$ double value-->Line_12 $$ value = Math.random() * 10[ FD ]
Line_2 $$ public void testBinarySearch() throws Exception -->Line_3 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_9 $$ for (int i = 0; i < array.length; i++) -->Line_11 $$ if (randomFreq(0.9)) [ CD ]
Line_10 $$ double value-->Line_17 $$ array[i] = value[ FD ]
Line_3 $$ for (int j = 0; j < 100; j++) -->Line_9 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_29 $$ for (int i = 0; i < array.length; i++) -->Line_30 $$ if (Double.isNaN(lookForValue) && Double.isNaN(array[i])) [ CD ]
