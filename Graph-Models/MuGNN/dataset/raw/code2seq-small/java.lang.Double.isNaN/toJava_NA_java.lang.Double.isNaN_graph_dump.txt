Line_44 $$ if (literal) -->Line_45 $$ return new TextBuffer(value.toString()).append("L")[ CD ]
Line_95 $$ floatfield = "NaN"-->Line_101 $$ floatfield = "MAX_VALUE"[ FD ]
Line_16 $$ char c = (char) val.intValue()-->Line_18 $$ ret = String.valueOf(c)[ FD ]
Line_58 $$ if (Double.isNaN(dval)) -->Line_59 $$ return new TextBuffer("0.0D / 0.0")[ CD ]
Line_46 $$ if (lval == Long.MAX_VALUE) -->Line_47 $$ longfield = "MAX_VALUE"[ CD ]
Line_68 $$ doublefield = "NaN"-->Line_76 $$ doublefield = "MIN_VALUE"[ FD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_60 $$ if (dval == Double.POSITIVE_INFINITY) [ FD ]
Line_13 $$ Integer val = (Integer) value-->Line_16 $$ char c = (char) val.intValue()[ FD ]
Line_100 $$ if (fval == Float.MAX_VALUE) -->Line_101 $$ floatfield = "MAX_VALUE"[ CD ]
Line_30 $$ String intfield-->Line_34 $$ intfield = "MAX_VALUE"[ FD ]
Line_115 $$ VarType classtype-->Line_119 $$ classtype = new VarType(strval, true)[ FD ]
Line_43 $$ String longfield-->Line_49 $$ longfield = "MIN_VALUE"[ FD ]
Line_115 $$ VarType classtype-->Line_121 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ FD ]
Line_89 $$ if (fval == Double.NEGATIVE_INFINITY) -->Line_92 $$ return new TextBuffer(value.toString()).append("F")[ CD ]
Line_35 $$ if (ival == Integer.MIN_VALUE) -->Line_38 $$ return new TextBuffer(value.toString())[ CD ]
Line_14 $$ String ret = ESCAPES.get(val)-->Line_20 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_96 $$ if (fval == Float.POSITIVE_INFINITY) [ FD ]
Line_17 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) -->Line_20 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ CD ]
Line_14 $$ String ret = ESCAPES.get(val)-->Line_15 $$ if (ret == null) [ FD ]
Line_16 $$ char c = (char) val.intValue()-->Line_17 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ FD ]
Line_44 $$ if (literal) -->Line_46 $$ if (lval == Long.MAX_VALUE) [ CD ]
Line_60 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_61 $$ return new TextBuffer("1.0D / 0.0")[ CD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_98 $$ if (fval == Float.NEGATIVE_INFINITY) [ FD ]
Line_99 $$ floatfield = "NEGATIVE_INFINITY"-->Line_101 $$ floatfield = "MAX_VALUE"[ FD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_58 $$ if (Double.isNaN(dval)) [ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_5 $$ tracer.addMapping(bytecode)[ FD ]
Line_102 $$ if (fval == Float.MIN_VALUE) -->Line_105 $$ return new TextBuffer(value.toString()).append("F")[ CD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_75 $$ if (dval == Double.MIN_VALUE) [ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_5 $$ tracer.addMapping(bytecode)[ CD ]
Line_72 $$ doublefield = "NEGATIVE_INFINITY"-->Line_76 $$ doublefield = "MIN_VALUE"[ FD ]
Line_70 $$ doublefield = "POSITIVE_INFINITY"-->Line_72 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_67 $$ if (Double.isNaN(dval)) [ FD ]
Line_31 $$ if (literal) -->Line_32 $$ return new TextBuffer(value.toString())[ CD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_102 $$ if (fval == Float.MIN_VALUE) [ FD ]
Line_74 $$ doublefield = "MAX_VALUE"-->Line_76 $$ doublefield = "MIN_VALUE"[ FD ]
Line_15 $$ if (ret == null) -->Line_16 $$ char c = (char) val.intValue()[ CD ]
Line_35 $$ if (ival == Integer.MIN_VALUE) -->Line_36 $$ intfield = "MIN_VALUE"[ CD ]
Line_116 $$ if (strval.startsWith("[")) -->Line_117 $$ classtype = new VarType(strval, false)[ CD ]
Line_15 $$ if (ret == null) -->Line_17 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ CD ]
Line_113 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_114 $$ String strval = value.toString()[ CD ]
Line_60 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_62 $$ if (dval == Double.NEGATIVE_INFINITY) [ CD ]
Line_13 $$ Integer val = (Integer) value-->Line_14 $$ String ret = ESCAPES.get(val)[ FD ]
Line_83 $$ String floatfield-->Line_99 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_89 $$ if (fval == Double.NEGATIVE_INFINITY) [ FD ]
Line_29 $$ int ival = ((Integer) value).intValue()-->Line_35 $$ if (ival == Integer.MIN_VALUE) [ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_53 $$ return new FieldExprent(longfield, "java/lang/Long", true, null, FieldDescriptor.LONG_DESCRIPTOR, bytecode).toJava(0, tracer)[ FD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_73 $$ if (dval == Double.MAX_VALUE) [ FD ]
Line_100 $$ if (fval == Float.MAX_VALUE) -->Line_102 $$ if (fval == Float.MIN_VALUE) [ CD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_71 $$ if (dval == Double.NEGATIVE_INFINITY) [ FD ]
Line_111 $$ if (constType.equals(VarType.VARTYPE_STRING)) -->Line_113 $$ if (constType.equals(VarType.VARTYPE_CLASS)) [ CD ]
Line_113 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_116 $$ if (strval.startsWith("[")) [ CD ]
Line_33 $$ if (ival == Integer.MAX_VALUE) -->Line_34 $$ intfield = "MAX_VALUE"[ CD ]
Line_97 $$ floatfield = "POSITIVE_INFINITY"-->Line_103 $$ floatfield = "MIN_VALUE"[ FD ]
Line_42 $$ long lval = ((Long) value).longValue()-->Line_48 $$ if (lval == Long.MIN_VALUE) [ FD ]
Line_14 $$ String ret = ESCAPES.get(val)-->Line_18 $$ ret = String.valueOf(c)[ FD ]
Line_87 $$ if (fval == Double.POSITIVE_INFINITY) -->Line_89 $$ if (fval == Double.NEGATIVE_INFINITY) [ CD ]
Line_57 $$ if (literal) -->Line_58 $$ if (Double.isNaN(dval)) [ CD ]
Line_56 $$ String doublefield-->Line_68 $$ doublefield = "NaN"[ FD ]
Line_95 $$ floatfield = "NaN"-->Line_99 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_62 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_65 $$ return new TextBuffer(value.toString()).append("D")[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_107 $$ return new FieldExprent(floatfield, "java/lang/Float", true, null, FieldDescriptor.FLOAT_DESCRIPTOR, bytecode).toJava(0, tracer)[ FD ]
Line_111 $$ if (constType.equals(VarType.VARTYPE_STRING)) -->Line_112 $$ return new TextBuffer(convertStringToJava(value.toString(), ascii)).enclose("\"", "\"")[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_3 $$ boolean literal = DecompilerContext.getOption(IFernflowerPreferences.LITERALS_AS_IS)[ CD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_62 $$ if (dval == Double.NEGATIVE_INFINITY) [ FD ]
Line_67 $$ if (Double.isNaN(dval)) -->Line_69 $$ if (dval == Double.POSITIVE_INFINITY) [ CD ]
Line_42 $$ long lval = ((Long) value).longValue()-->Line_46 $$ if (lval == Long.MAX_VALUE) [ FD ]
Line_69 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_70 $$ doublefield = "POSITIVE_INFINITY"[ CD ]
Line_62 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_63 $$ return new TextBuffer("-1.0D / 0.0")[ CD ]
Line_83 $$ String floatfield-->Line_97 $$ floatfield = "POSITIVE_INFINITY"[ FD ]
Line_67 $$ if (Double.isNaN(dval)) -->Line_68 $$ doublefield = "NaN"[ CD ]
Line_98 $$ if (fval == Float.NEGATIVE_INFINITY) -->Line_100 $$ if (fval == Float.MAX_VALUE) [ CD ]
Line_96 $$ if (fval == Float.POSITIVE_INFINITY) -->Line_98 $$ if (fval == Float.NEGATIVE_INFINITY) [ CD ]
Line_71 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_72 $$ doublefield = "NEGATIVE_INFINITY"[ CD ]
Line_116 $$ if (strval.startsWith("[")) -->Line_119 $$ classtype = new VarType(strval, true)[ CD ]
Line_43 $$ String longfield-->Line_47 $$ longfield = "MAX_VALUE"[ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_94 $$ if (Float.isNaN(fval)) [ FD ]
Line_117 $$ classtype = new VarType(strval, false)-->Line_119 $$ classtype = new VarType(strval, true)[ FD ]
Line_69 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_71 $$ if (dval == Double.NEGATIVE_INFINITY) [ CD ]
Line_48 $$ if (lval == Long.MIN_VALUE) -->Line_51 $$ return new TextBuffer(value.toString()).append("L")[ CD ]
Line_18 $$ ret = String.valueOf(c)-->Line_20 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_102 $$ if (fval == Float.MIN_VALUE) -->Line_103 $$ floatfield = "MIN_VALUE"[ CD ]
Line_29 $$ int ival = ((Integer) value).intValue()-->Line_33 $$ if (ival == Integer.MAX_VALUE) [ FD ]
Line_17 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) -->Line_18 $$ ret = String.valueOf(c)[ CD ]
Line_84 $$ if (literal) -->Line_94 $$ if (Float.isNaN(fval)) [ CD ]
Line_73 $$ if (dval == Double.MAX_VALUE) -->Line_74 $$ doublefield = "MAX_VALUE"[ CD ]
Line_101 $$ floatfield = "MAX_VALUE"-->Line_103 $$ floatfield = "MIN_VALUE"[ FD ]
Line_56 $$ String doublefield-->Line_76 $$ doublefield = "MIN_VALUE"[ FD ]
Line_56 $$ String doublefield-->Line_74 $$ doublefield = "MAX_VALUE"[ FD ]
Line_4 $$ boolean ascii = DecompilerContext.getOption(IFernflowerPreferences.ASCII_STRING_CHARACTERS)-->Line_17 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ FD ]
Line_73 $$ if (dval == Double.MAX_VALUE) -->Line_75 $$ if (dval == Double.MIN_VALUE) [ CD ]
Line_87 $$ if (fval == Double.POSITIVE_INFINITY) -->Line_88 $$ return new TextBuffer("1.0F / 0.0")[ CD ]
Line_99 $$ floatfield = "NEGATIVE_INFINITY"-->Line_103 $$ floatfield = "MIN_VALUE"[ FD ]
Line_113 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_121 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ CD ]
Line_68 $$ doublefield = "NaN"-->Line_72 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_97 $$ floatfield = "POSITIVE_INFINITY"-->Line_101 $$ floatfield = "MAX_VALUE"[ FD ]
Line_95 $$ floatfield = "NaN"-->Line_97 $$ floatfield = "POSITIVE_INFINITY"[ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_100 $$ if (fval == Float.MAX_VALUE) [ FD ]
Line_85 $$ if (Double.isNaN(fval)) -->Line_87 $$ if (fval == Double.POSITIVE_INFINITY) [ CD ]
Line_33 $$ if (ival == Integer.MAX_VALUE) -->Line_35 $$ if (ival == Integer.MIN_VALUE) [ CD ]
Line_71 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_73 $$ if (dval == Double.MAX_VALUE) [ CD ]
Line_83 $$ String floatfield-->Line_103 $$ floatfield = "MIN_VALUE"[ FD ]
Line_119 $$ classtype = new VarType(strval, true)-->Line_121 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ FD ]
Line_70 $$ doublefield = "POSITIVE_INFINITY"-->Line_74 $$ doublefield = "MAX_VALUE"[ FD ]
Line_58 $$ if (Double.isNaN(dval)) -->Line_60 $$ if (dval == Double.POSITIVE_INFINITY) [ CD ]
Line_56 $$ String doublefield-->Line_70 $$ doublefield = "POSITIVE_INFINITY"[ FD ]
Line_85 $$ if (Double.isNaN(fval)) -->Line_86 $$ return new TextBuffer("0.0F / 0.0")[ CD ]
Line_48 $$ if (lval == Long.MIN_VALUE) -->Line_49 $$ longfield = "MIN_VALUE"[ CD ]
Line_117 $$ classtype = new VarType(strval, false)-->Line_121 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ FD ]
Line_68 $$ doublefield = "NaN"-->Line_70 $$ doublefield = "POSITIVE_INFINITY"[ FD ]
Line_47 $$ longfield = "MAX_VALUE"-->Line_49 $$ longfield = "MIN_VALUE"[ FD ]
Line_75 $$ if (dval == Double.MIN_VALUE) -->Line_76 $$ doublefield = "MIN_VALUE"[ CD ]
Line_57 $$ if (literal) -->Line_67 $$ if (Double.isNaN(dval)) [ CD ]
Line_95 $$ floatfield = "NaN"-->Line_103 $$ floatfield = "MIN_VALUE"[ FD ]
Line_115 $$ VarType classtype-->Line_117 $$ classtype = new VarType(strval, false)[ FD ]
Line_94 $$ if (Float.isNaN(fval)) -->Line_95 $$ floatfield = "NaN"[ CD ]
Line_4 $$ boolean ascii = DecompilerContext.getOption(IFernflowerPreferences.ASCII_STRING_CHARACTERS)-->Line_112 $$ return new TextBuffer(convertStringToJava(value.toString(), ascii)).enclose("\"", "\"")[ FD ]
Line_83 $$ String floatfield-->Line_95 $$ floatfield = "NaN"[ FD ]
Line_94 $$ if (Float.isNaN(fval)) -->Line_96 $$ if (fval == Float.POSITIVE_INFINITY) [ CD ]
Line_98 $$ if (fval == Float.NEGATIVE_INFINITY) -->Line_99 $$ floatfield = "NEGATIVE_INFINITY"[ CD ]
Line_30 $$ String intfield-->Line_36 $$ intfield = "MIN_VALUE"[ FD ]
Line_56 $$ String doublefield-->Line_72 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_83 $$ String floatfield-->Line_101 $$ floatfield = "MAX_VALUE"[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_4 $$ boolean ascii = DecompilerContext.getOption(IFernflowerPreferences.ASCII_STRING_CHARACTERS)[ CD ]
Line_113 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_115 $$ VarType classtype[ CD ]
Line_46 $$ if (lval == Long.MAX_VALUE) -->Line_48 $$ if (lval == Long.MIN_VALUE) [ CD ]
Line_72 $$ doublefield = "NEGATIVE_INFINITY"-->Line_74 $$ doublefield = "MAX_VALUE"[ FD ]
Line_96 $$ if (fval == Float.POSITIVE_INFINITY) -->Line_97 $$ floatfield = "POSITIVE_INFINITY"[ CD ]
Line_68 $$ doublefield = "NaN"-->Line_74 $$ doublefield = "MAX_VALUE"[ FD ]
Line_75 $$ if (dval == Double.MIN_VALUE) -->Line_78 $$ return new TextBuffer(value.toString()).append("D")[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_80 $$ return new FieldExprent(doublefield, "java/lang/Double", true, null, FieldDescriptor.DOUBLE_DESCRIPTOR, bytecode).toJava(0, tracer)[ FD ]
Line_89 $$ if (fval == Double.NEGATIVE_INFINITY) -->Line_90 $$ return new TextBuffer("-1.0F / 0.0")[ CD ]
Line_6 $$ if (constType.type != CodeConstants.TYPE_NULL && value == null) -->Line_7 $$ return new TextBuffer(ExprProcessor.getCastTypeName(constType))[ CD ]
Line_31 $$ if (literal) -->Line_33 $$ if (ival == Integer.MAX_VALUE) [ CD ]
Line_84 $$ if (literal) -->Line_85 $$ if (Double.isNaN(fval)) [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_6 $$ if (constType.type != CodeConstants.TYPE_NULL && value == null) [ CD ]
Line_16 $$ char c = (char) val.intValue()-->Line_20 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_97 $$ floatfield = "POSITIVE_INFINITY"-->Line_99 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_40 $$ return new FieldExprent(intfield, "java/lang/Integer", true, null, FieldDescriptor.INTEGER_DESCRIPTOR, bytecode).toJava(0, tracer)[ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_85 $$ if (Double.isNaN(fval)) [ FD ]
Line_34 $$ intfield = "MAX_VALUE"-->Line_36 $$ intfield = "MIN_VALUE"[ FD ]
Line_55 $$ double dval = ((Double) value).doubleValue()-->Line_69 $$ if (dval == Double.POSITIVE_INFINITY) [ FD ]
Line_82 $$ float fval = ((Float) value).floatValue()-->Line_87 $$ if (fval == Double.POSITIVE_INFINITY) [ FD ]
Line_114 $$ String strval = value.toString()-->Line_116 $$ if (strval.startsWith("[")) [ FD ]
Line_70 $$ doublefield = "POSITIVE_INFINITY"-->Line_76 $$ doublefield = "MIN_VALUE"[ FD ]
