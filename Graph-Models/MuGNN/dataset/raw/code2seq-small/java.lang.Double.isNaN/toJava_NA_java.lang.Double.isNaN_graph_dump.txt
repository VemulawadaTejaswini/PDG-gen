Line_35 $$ intfield = "MAX_VALUE"-->Line_37 $$ intfield = "MIN_VALUE"[ FD ]
Line_98 $$ floatfield = "POSITIVE_INFINITY"-->Line_100 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_114 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_115 $$ String strval = value.toString()[ CD ]
Line_88 $$ if (fval == Double.POSITIVE_INFINITY) -->Line_89 $$ return new TextBuffer("1.0F / 0.0")[ CD ]
Line_48 $$ longfield = "MAX_VALUE"-->Line_50 $$ longfield = "MIN_VALUE"[ FD ]
Line_18 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) -->Line_19 $$ ret = String.valueOf(c)[ CD ]
Line_57 $$ String doublefield-->Line_69 $$ doublefield = "NaN"[ FD ]
Line_16 $$ if (ret == null) -->Line_18 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ CD ]
Line_43 $$ long lval = ((Long) value).longValue()-->Line_47 $$ if (lval == Long.MAX_VALUE) [ FD ]
Line_75 $$ doublefield = "MAX_VALUE"-->Line_77 $$ doublefield = "MIN_VALUE"[ FD ]
Line_84 $$ String floatfield-->Line_98 $$ floatfield = "POSITIVE_INFINITY"[ FD ]
Line_44 $$ String longfield-->Line_50 $$ longfield = "MIN_VALUE"[ FD ]
Line_68 $$ if (Double.isNaN(dval)) -->Line_69 $$ doublefield = "NaN"[ CD ]
Line_15 $$ String ret = ESCAPES.get(val)-->Line_21 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_71 $$ doublefield = "POSITIVE_INFINITY"-->Line_77 $$ doublefield = "MIN_VALUE"[ FD ]
Line_45 $$ if (literal) -->Line_47 $$ if (lval == Long.MAX_VALUE) [ CD ]
Line_84 $$ String floatfield-->Line_96 $$ floatfield = "NaN"[ FD ]
Line_17 $$ char c = (char) val.intValue()-->Line_21 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_102 $$ floatfield = "MAX_VALUE"-->Line_104 $$ floatfield = "MIN_VALUE"[ FD ]
Line_5 $$ boolean ascii = DecompilerContext.getOption(IFernflowerPreferences.ASCII_STRING_CHARACTERS)-->Line_18 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ FD ]
Line_31 $$ String intfield-->Line_37 $$ intfield = "MIN_VALUE"[ FD ]
Line_100 $$ floatfield = "NEGATIVE_INFINITY"-->Line_102 $$ floatfield = "MAX_VALUE"[ FD ]
Line_63 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_66 $$ return new TextBuffer(value.toString()).append("D")[ CD ]
Line_30 $$ int ival = ((Integer) value).intValue()-->Line_34 $$ if (ival == Integer.MAX_VALUE) [ FD ]
Line_114 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_124 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ CD ]
Line_76 $$ if (dval == Double.MIN_VALUE) -->Line_77 $$ doublefield = "MIN_VALUE"[ CD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_70 $$ if (dval == Double.POSITIVE_INFINITY) [ FD ]
Line_73 $$ doublefield = "NEGATIVE_INFINITY"-->Line_77 $$ doublefield = "MIN_VALUE"[ FD ]
Line_85 $$ if (literal) -->Line_86 $$ if (Double.isNaN(fval)) [ CD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_68 $$ if (Double.isNaN(dval)) [ FD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_97 $$ if (fval == Float.POSITIVE_INFINITY) [ FD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_61 $$ if (dval == Double.POSITIVE_INFINITY) [ FD ]
Line_96 $$ floatfield = "NaN"-->Line_102 $$ floatfield = "MAX_VALUE"[ FD ]
Line_49 $$ if (lval == Long.MIN_VALUE) -->Line_50 $$ longfield = "MIN_VALUE"[ CD ]
Line_74 $$ if (dval == Double.MAX_VALUE) -->Line_76 $$ if (dval == Double.MIN_VALUE) [ CD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_103 $$ if (fval == Float.MIN_VALUE) [ FD ]
Line_114 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_117 $$ if (strval.startsWith("[")) [ CD ]
Line_96 $$ floatfield = "NaN"-->Line_104 $$ floatfield = "MIN_VALUE"[ FD ]
Line_90 $$ if (fval == Double.NEGATIVE_INFINITY) -->Line_93 $$ return new TextBuffer(value.toString()).append("F")[ CD ]
Line_69 $$ doublefield = "NaN"-->Line_75 $$ doublefield = "MAX_VALUE"[ FD ]
Line_70 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_71 $$ doublefield = "POSITIVE_INFINITY"[ CD ]
Line_76 $$ if (dval == Double.MIN_VALUE) -->Line_79 $$ return new TextBuffer(value.toString()).append("D")[ CD ]
Line_58 $$ if (literal) -->Line_68 $$ if (Double.isNaN(dval)) [ CD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_99 $$ if (fval == Float.NEGATIVE_INFINITY) [ FD ]
Line_70 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_72 $$ if (dval == Double.NEGATIVE_INFINITY) [ CD ]
Line_15 $$ String ret = ESCAPES.get(val)-->Line_19 $$ ret = String.valueOf(c)[ FD ]
Line_5 $$ boolean ascii = DecompilerContext.getOption(IFernflowerPreferences.ASCII_STRING_CHARACTERS)-->Line_113 $$ return new TextBuffer(convertStringToJava(value.toString(), ascii)).enclose("\"", "\"")[ FD ]
Line_57 $$ String doublefield-->Line_71 $$ doublefield = "POSITIVE_INFINITY"[ FD ]
Line_73 $$ doublefield = "NEGATIVE_INFINITY"-->Line_75 $$ doublefield = "MAX_VALUE"[ FD ]
Line_86 $$ if (Double.isNaN(fval)) -->Line_87 $$ return new TextBuffer("0.0F / 0.0")[ CD ]
Line_101 $$ if (fval == Float.MAX_VALUE) -->Line_102 $$ floatfield = "MAX_VALUE"[ CD ]
Line_97 $$ if (fval == Float.POSITIVE_INFINITY) -->Line_99 $$ if (fval == Float.NEGATIVE_INFINITY) [ CD ]
Line_17 $$ char c = (char) val.intValue()-->Line_19 $$ ret = String.valueOf(c)[ FD ]
Line_69 $$ doublefield = "NaN"-->Line_73 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_61 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_62 $$ return new TextBuffer("1.0D / 0.0")[ CD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_95 $$ if (Float.isNaN(fval)) [ FD ]
Line_36 $$ if (ival == Integer.MIN_VALUE) -->Line_37 $$ intfield = "MIN_VALUE"[ CD ]
Line_59 $$ if (Double.isNaN(dval)) -->Line_60 $$ return new TextBuffer("0.0D / 0.0")[ CD ]
Line_95 $$ if (Float.isNaN(fval)) -->Line_97 $$ if (fval == Float.POSITIVE_INFINITY) [ CD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_86 $$ if (Double.isNaN(fval)) [ FD ]
Line_15 $$ String ret = ESCAPES.get(val)-->Line_16 $$ if (ret == null) [ FD ]
Line_90 $$ if (fval == Double.NEGATIVE_INFINITY) -->Line_91 $$ return new TextBuffer("-1.0F / 0.0")[ CD ]
Line_84 $$ String floatfield-->Line_102 $$ floatfield = "MAX_VALUE"[ FD ]
Line_45 $$ if (literal) -->Line_46 $$ return new TextBuffer(value.toString()).append("L")[ CD ]
Line_43 $$ long lval = ((Long) value).longValue()-->Line_49 $$ if (lval == Long.MIN_VALUE) [ FD ]
Line_96 $$ floatfield = "NaN"-->Line_98 $$ floatfield = "POSITIVE_INFINITY"[ FD ]
Line_31 $$ String intfield-->Line_35 $$ intfield = "MAX_VALUE"[ FD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_101 $$ if (fval == Float.MAX_VALUE) [ FD ]
Line_71 $$ doublefield = "POSITIVE_INFINITY"-->Line_73 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_57 $$ String doublefield-->Line_75 $$ doublefield = "MAX_VALUE"[ FD ]
Line_103 $$ if (fval == Float.MIN_VALUE) -->Line_104 $$ floatfield = "MIN_VALUE"[ CD ]
Line_47 $$ if (lval == Long.MAX_VALUE) -->Line_48 $$ longfield = "MAX_VALUE"[ CD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_72 $$ if (dval == Double.NEGATIVE_INFINITY) [ FD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_90 $$ if (fval == Double.NEGATIVE_INFINITY) [ FD ]
Line_84 $$ String floatfield-->Line_100 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_18 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) -->Line_21 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ CD ]
Line_49 $$ if (lval == Long.MIN_VALUE) -->Line_52 $$ return new TextBuffer(value.toString()).append("L")[ CD ]
Line_16 $$ if (ret == null) -->Line_17 $$ char c = (char) val.intValue()[ CD ]
Line_69 $$ doublefield = "NaN"-->Line_71 $$ doublefield = "POSITIVE_INFINITY"[ FD ]
Line_47 $$ if (lval == Long.MAX_VALUE) -->Line_49 $$ if (lval == Long.MIN_VALUE) [ CD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_63 $$ if (dval == Double.NEGATIVE_INFINITY) [ FD ]
Line_96 $$ floatfield = "NaN"-->Line_100 $$ floatfield = "NEGATIVE_INFINITY"[ FD ]
Line_69 $$ doublefield = "NaN"-->Line_77 $$ doublefield = "MIN_VALUE"[ FD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_74 $$ if (dval == Double.MAX_VALUE) [ FD ]
Line_57 $$ String doublefield-->Line_77 $$ doublefield = "MIN_VALUE"[ FD ]
Line_100 $$ floatfield = "NEGATIVE_INFINITY"-->Line_104 $$ floatfield = "MIN_VALUE"[ FD ]
Line_34 $$ if (ival == Integer.MAX_VALUE) -->Line_35 $$ intfield = "MAX_VALUE"[ CD ]
Line_44 $$ String longfield-->Line_48 $$ longfield = "MAX_VALUE"[ FD ]
Line_30 $$ int ival = ((Integer) value).intValue()-->Line_36 $$ if (ival == Integer.MIN_VALUE) [ FD ]
Line_68 $$ if (Double.isNaN(dval)) -->Line_70 $$ if (dval == Double.POSITIVE_INFINITY) [ CD ]
Line_98 $$ floatfield = "POSITIVE_INFINITY"-->Line_102 $$ floatfield = "MAX_VALUE"[ FD ]
Line_97 $$ if (fval == Float.POSITIVE_INFINITY) -->Line_98 $$ floatfield = "POSITIVE_INFINITY"[ CD ]
Line_101 $$ if (fval == Float.MAX_VALUE) -->Line_103 $$ if (fval == Float.MIN_VALUE) [ CD ]
Line_7 $$ if (constType.type != CodeConstants.TYPE_NULL && value == null) -->Line_8 $$ return new TextBuffer(ExprProcessor.getCastTypeName(constType))[ CD ]
Line_71 $$ doublefield = "POSITIVE_INFINITY"-->Line_75 $$ doublefield = "MAX_VALUE"[ FD ]
Line_103 $$ if (fval == Float.MIN_VALUE) -->Line_106 $$ return new TextBuffer(value.toString()).append("F")[ CD ]
Line_63 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_64 $$ return new TextBuffer("-1.0D / 0.0")[ CD ]
Line_84 $$ String floatfield-->Line_104 $$ floatfield = "MIN_VALUE"[ FD ]
Line_86 $$ if (Double.isNaN(fval)) -->Line_88 $$ if (fval == Double.POSITIVE_INFINITY) [ CD ]
Line_98 $$ floatfield = "POSITIVE_INFINITY"-->Line_104 $$ floatfield = "MIN_VALUE"[ FD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_76 $$ if (dval == Double.MIN_VALUE) [ FD ]
Line_112 $$ if (constType.equals(VarType.VARTYPE_STRING)) -->Line_113 $$ return new TextBuffer(convertStringToJava(value.toString(), ascii)).enclose("\"", "\"")[ CD ]
Line_36 $$ if (ival == Integer.MIN_VALUE) -->Line_39 $$ return new TextBuffer(value.toString())[ CD ]
Line_99 $$ if (fval == Float.NEGATIVE_INFINITY) -->Line_100 $$ floatfield = "NEGATIVE_INFINITY"[ CD ]
Line_34 $$ if (ival == Integer.MAX_VALUE) -->Line_36 $$ if (ival == Integer.MIN_VALUE) [ CD ]
Line_114 $$ if (constType.equals(VarType.VARTYPE_CLASS)) -->Line_116 $$ VarType classtype[ CD ]
Line_83 $$ float fval = ((Float) value).floatValue()-->Line_88 $$ if (fval == Double.POSITIVE_INFINITY) [ FD ]
Line_72 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_73 $$ doublefield = "NEGATIVE_INFINITY"[ CD ]
Line_116 $$ VarType classtype-->Line_124 $$ return new TextBuffer(ExprProcessor.getCastTypeName(classtype)).append(".class")[ FD ]
Line_57 $$ String doublefield-->Line_73 $$ doublefield = "NEGATIVE_INFINITY"[ FD ]
Line_14 $$ Integer val = (Integer) value-->Line_17 $$ char c = (char) val.intValue()[ FD ]
Line_99 $$ if (fval == Float.NEGATIVE_INFINITY) -->Line_101 $$ if (fval == Float.MAX_VALUE) [ CD ]
Line_61 $$ if (dval == Double.POSITIVE_INFINITY) -->Line_63 $$ if (dval == Double.NEGATIVE_INFINITY) [ CD ]
Line_56 $$ double dval = ((Double) value).doubleValue()-->Line_59 $$ if (Double.isNaN(dval)) [ FD ]
Line_32 $$ if (literal) -->Line_34 $$ if (ival == Integer.MAX_VALUE) [ CD ]
Line_72 $$ if (dval == Double.NEGATIVE_INFINITY) -->Line_74 $$ if (dval == Double.MAX_VALUE) [ CD ]
Line_59 $$ if (Double.isNaN(dval)) -->Line_61 $$ if (dval == Double.POSITIVE_INFINITY) [ CD ]
Line_74 $$ if (dval == Double.MAX_VALUE) -->Line_75 $$ doublefield = "MAX_VALUE"[ CD ]
Line_19 $$ ret = String.valueOf(c)-->Line_21 $$ ret = InterpreterUtil.charToUnicodeLiteral(c)[ FD ]
Line_88 $$ if (fval == Double.POSITIVE_INFINITY) -->Line_90 $$ if (fval == Double.NEGATIVE_INFINITY) [ CD ]
Line_17 $$ char c = (char) val.intValue()-->Line_18 $$ if (c >= 32 && c < 127 || !ascii && InterpreterUtil.isPrintableUnicode(c)) [ FD ]
Line_115 $$ String strval = value.toString()-->Line_117 $$ if (strval.startsWith("[")) [ FD ]
Line_95 $$ if (Float.isNaN(fval)) -->Line_96 $$ floatfield = "NaN"[ CD ]
Line_112 $$ if (constType.equals(VarType.VARTYPE_STRING)) -->Line_114 $$ if (constType.equals(VarType.VARTYPE_CLASS)) [ CD ]
Line_58 $$ if (literal) -->Line_59 $$ if (Double.isNaN(dval)) [ CD ]
Line_85 $$ if (literal) -->Line_95 $$ if (Float.isNaN(fval)) [ CD ]
Line_32 $$ if (literal) -->Line_33 $$ return new TextBuffer(value.toString())[ CD ]
Line_14 $$ Integer val = (Integer) value-->Line_15 $$ String ret = ESCAPES.get(val)[ FD ]
