Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_36 $$ lon = parser.doubleValue()[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_6 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_8 $$ point.resetFromString(parser.text())[ CD ]
Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_32 $$ if (token == XContentParser.Token.VALUE_NUMBER) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_46 $$ return false[ CD ]
Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_31 $$ currentFieldName = parser.currentName()[ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_20 $$ throw new SearchParseException(context, "malformed [" + currentFieldName + "] geo point array in [" + aggName + "] " + aggType + " aggregation. a geo point array must be of the form [lon, lat]", parser.getTokenLocation())[ FD ]
Line_33 $$ if ("lat".equals(currentFieldName)) -->Line_34 $$ lat = parser.doubleValue()[ CD ]
Line_18 $$ lat = parser.doubleValue()-->Line_17 $$ if (Double.isNaN(lat)) [ FD ]
Line_32 $$ if (token == XContentParser.Token.VALUE_NUMBER) -->Line_33 $$ if ("lat".equals(currentFieldName)) [ CD ]
Line_13 $$ double lon = Double.NaN-->Line_16 $$ lon = parser.doubleValue()[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_3 $$ if (!context.parseFieldMatcher().match(currentFieldName, field)) [ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_33 $$ if ("lat".equals(currentFieldName)) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_13 $$ double lon = Double.NaN-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_31 $$ currentFieldName = parser.currentName()-->Line_33 $$ if ("lat".equals(currentFieldName)) [ FD ]
Line_15 $$ if (Double.isNaN(lon)) -->Line_17 $$ if (Double.isNaN(lat)) [ CD ]
Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) [ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_35 $$ if ("lon".equals(currentFieldName)) [ FD ]
Line_26 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_44 $$ return true[ CD ]
Line_18 $$ lat = parser.doubleValue()-->Line_34 $$ lat = parser.doubleValue()[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_3 $$ if (!context.parseFieldMatcher().match(currentFieldName, field)) [ FD ]
Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_3 $$ if (!context.parseFieldMatcher().match(currentFieldName, field)) -->Line_4 $$ return false[ CD ]
Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_11 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_13 $$ double lon = Double.NaN[ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_6 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_12 $$ double lat = Double.NaN-->Line_18 $$ lat = parser.doubleValue()[ FD ]
Line_12 $$ double lat = Double.NaN-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_11 $$ if (token == XContentParser.Token.START_ARRAY) [ CD ]
Line_16 $$ lon = parser.doubleValue()-->Line_36 $$ lon = parser.doubleValue()[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_32 $$ if (token == XContentParser.Token.VALUE_NUMBER) [ FD ]
Line_18 $$ lat = parser.doubleValue()-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_13 $$ double lon = Double.NaN-->Line_36 $$ lon = parser.doubleValue()[ FD ]
Line_31 $$ currentFieldName = parser.currentName()-->Line_35 $$ if ("lon".equals(currentFieldName)) [ FD ]
Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_26 $$ if (token == XContentParser.Token.START_OBJECT) [ FD ]
Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_15 $$ if (Double.isNaN(lon)) [ CD ]
Line_34 $$ lat = parser.doubleValue()-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_31 $$ currentFieldName = parser.currentName()[ FD ]
Line_11 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_12 $$ double lat = Double.NaN[ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_26 $$ if (token == XContentParser.Token.START_OBJECT) [ CD ]
Line_11 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_24 $$ return true[ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_6 $$ if (token == XContentParser.Token.VALUE_STRING) [ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_11 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_26 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ CD ]
Line_11 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ CD ]
Line_33 $$ if ("lat".equals(currentFieldName)) -->Line_35 $$ if ("lon".equals(currentFieldName)) [ CD ]
Line_17 $$ if (Double.isNaN(lat)) -->Line_18 $$ lat = parser.doubleValue()[ CD ]
Line_26 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ CD ]
Line_35 $$ if ("lon".equals(currentFieldName)) -->Line_36 $$ lon = parser.doubleValue()[ CD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_18 $$ lat = parser.doubleValue()[ FD ]
Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_32 $$ if (token == XContentParser.Token.VALUE_NUMBER) [ CD ]
Line_12 $$ double lat = Double.NaN-->Line_34 $$ lat = parser.doubleValue()[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_26 $$ if (token == XContentParser.Token.START_OBJECT) [ FD ]
Line_12 $$ double lat = Double.NaN-->Line_17 $$ if (Double.isNaN(lat)) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_41 $$ throw new SearchParseException(context, "malformed [" + currentFieldName + "] geo point object. either [lat] or [lon] (or both) are " + "missing in [" + aggName + "] " + aggType + " aggregation", parser.getTokenLocation())[ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_16 $$ lon = parser.doubleValue()[ FD ]
Line_29 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_30 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_14 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_32 $$ if (token == XContentParser.Token.VALUE_NUMBER) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_34 $$ lat = parser.doubleValue()[ FD ]
Line_13 $$ double lon = Double.NaN-->Line_15 $$ if (Double.isNaN(lon)) [ FD ]
Line_16 $$ lon = parser.doubleValue()-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_6 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_9 $$ return true[ CD ]
Line_15 $$ if (Double.isNaN(lon)) -->Line_16 $$ lon = parser.doubleValue()[ CD ]
Line_36 $$ lon = parser.doubleValue()-->Line_40 $$ if (Double.isNaN(lat) || Double.isNaN(lon)) [ FD ]
Line_16 $$ lon = parser.doubleValue()-->Line_15 $$ if (Double.isNaN(lon)) [ FD ]
Line_2 $$ public boolean token(String currentFieldName, XContentParser.Token token, XContentParser parser) throws IOException -->Line_8 $$ point.resetFromString(parser.text())[ FD ]
