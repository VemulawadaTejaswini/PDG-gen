Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_5 $$ if (Double.isNaN(score)) [ CD ]
Line_4 $$ double score = (getMITerm(frequencies.N00, frequencies.N0_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N01, frequencies.N0_, frequencies.N_1, frequencies.N) + getMITerm(frequencies.N10, frequencies.N1_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N11, frequencies.N1_, frequencies.N_1, frequencies.N)) / log2-->Line_6 $$ score = Double.NEGATIVE_INFINITY[ FD ]
Line_6 $$ score = Double.NEGATIVE_INFINITY-->Line_9 $$ score = Double.NEGATIVE_INFINITY[ FD ]
Line_4 $$ double score = (getMITerm(frequencies.N00, frequencies.N0_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N01, frequencies.N0_, frequencies.N_1, frequencies.N) + getMITerm(frequencies.N10, frequencies.N1_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N11, frequencies.N1_, frequencies.N_1, frequencies.N)) / log2-->Line_5 $$ if (Double.isNaN(score)) [ FD ]
Line_5 $$ if (Double.isNaN(score)) -->Line_6 $$ score = Double.NEGATIVE_INFINITY[ CD ]
Line_8 $$ if (!includeNegatives && frequencies.N11 / frequencies.N_1 < frequencies.N10 / frequencies.N_0) -->Line_9 $$ score = Double.NEGATIVE_INFINITY[ CD ]
Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_11 $$ return score[ CD ]
Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_3 $$ Frequencies frequencies = computeNxys(subsetFreq, subsetSize, supersetFreq, supersetSize, "MutualInformation")[ FD ]
Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_4 $$ double score = (getMITerm(frequencies.N00, frequencies.N0_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N01, frequencies.N0_, frequencies.N_1, frequencies.N) + getMITerm(frequencies.N10, frequencies.N1_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N11, frequencies.N1_, frequencies.N_1, frequencies.N)) / log2[ CD ]
Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_8 $$ if (!includeNegatives && frequencies.N11 / frequencies.N_1 < frequencies.N10 / frequencies.N_0) [ CD ]
Line_2 $$ public double getScore(long subsetFreq, long subsetSize, long supersetFreq, long supersetSize) -->Line_3 $$ Frequencies frequencies = computeNxys(subsetFreq, subsetSize, supersetFreq, supersetSize, "MutualInformation")[ CD ]
Line_4 $$ double score = (getMITerm(frequencies.N00, frequencies.N0_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N01, frequencies.N0_, frequencies.N_1, frequencies.N) + getMITerm(frequencies.N10, frequencies.N1_, frequencies.N_0, frequencies.N) + getMITerm(frequencies.N11, frequencies.N1_, frequencies.N_1, frequencies.N)) / log2-->Line_9 $$ score = Double.NEGATIVE_INFINITY[ FD ]
