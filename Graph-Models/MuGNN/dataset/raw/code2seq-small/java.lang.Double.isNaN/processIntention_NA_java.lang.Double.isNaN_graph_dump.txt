Line_69 $$ if (prevToken != null) -->Line_70 $$ newExpressionText.append(prevToken.getText())[ CD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_61 $$ newExpressionText.append(Float.toString(v)).append('f')[ FD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_55 $$ if (v > 0.0F) [ FD ]
Line_28 $$ if (token == currentToken) -->Line_67 $$ prevToken = null[ CD ]
Line_67 $$ prevToken = null-->Line_76 $$ prevToken = currentToken[ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_29 $$ if (prevToken != null) [ FD ]
Line_55 $$ if (v > 0.0F) -->Line_58 $$ newExpressionText.append("java.lang.Float.NEGATIVE_INFINITY")[ CD ]
Line_50 $$ if (value instanceof Float) -->Line_64 $$ newExpressionText.append(value)[ CD ]
Line_72 $$ if (prevOperand != null) -->Line_73 $$ newExpressionText.append(prevOperand.getText())[ CD ]
Line_26 $$ for (PsiExpression operand : operands) -->Line_75 $$ prevOperand = operand[ FD ]
Line_76 $$ prevToken = currentToken-->Line_79 $$ if (prevToken != null) [ FD ]
Line_41 $$ if (Double.isInfinite(v)) -->Line_42 $$ if (v > 0.0) [ CD ]
Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)-->Line_35 $$ if (value instanceof Long) [ FD ]
Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)[ FD ]
Line_37 $$ if (value instanceof Double) -->Line_39 $$ if (Double.isNaN(v)) [ CD ]
Line_28 $$ if (token == currentToken) -->Line_76 $$ prevToken = currentToken[ CD ]
Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_27 $$ final PsiJavaToken currentToken = polyadicExpression.getTokenBeforeOperand(operand)[ FD ]
Line_28 $$ if (token == currentToken) -->Line_75 $$ prevOperand = operand[ CD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_41 $$ if (Double.isInfinite(v)) [ FD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_39 $$ if (Double.isNaN(v)) [ FD ]
Line_28 $$ if (token == currentToken) -->Line_72 $$ if (prevOperand != null) [ CD ]
Line_55 $$ if (v > 0.0F) -->Line_56 $$ newExpressionText.append("java.lang.Float.POSITIVE_INFINITY")[ CD ]
Line_4 $$ final PsiJavaToken token-->Line_10 $$ token = (PsiJavaToken) prevSibling[ FD ]
Line_67 $$ prevToken = null-->Line_79 $$ if (prevToken != null) [ FD ]
Line_82 $$ if (prevOperand != null) -->Line_83 $$ newExpressionText.append(prevOperand.getText())[ CD ]
Line_35 $$ if (value instanceof Long) -->Line_37 $$ if (value instanceof Double) [ CD ]
Line_42 $$ if (v > 0.0) -->Line_43 $$ newExpressionText.append("java.lang.Double.POSITIVE_INFINITY")[ CD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_83 $$ newExpressionText.append(prevOperand.getText())[ FD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_54 $$ if (Float.isInfinite(v)) [ FD ]
Line_6 $$ token = (PsiJavaToken) element-->Line_10 $$ token = (PsiJavaToken) prevSibling[ FD ]
Line_66 $$ prevOperand = null-->Line_75 $$ prevOperand = operand[ FD ]
Line_37 $$ if (value instanceof Double) -->Line_50 $$ if (value instanceof Float) [ CD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_72 $$ if (prevOperand != null) [ FD ]
Line_5 $$ if (element instanceof PsiJavaToken) -->Line_9 $$ if (prevSibling instanceof PsiJavaToken) [ CD ]
Line_76 $$ prevToken = currentToken-->Line_80 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_54 $$ if (Float.isInfinite(v)) -->Line_55 $$ if (v > 0.0F) [ CD ]
Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)-->Line_36 $$ newExpressionText.append(value).append('L')[ FD ]
Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)-->Line_50 $$ if (value instanceof Float) [ FD ]
Line_5 $$ if (element instanceof PsiJavaToken) -->Line_6 $$ token = (PsiJavaToken) element[ CD ]
Line_28 $$ if (token == currentToken) -->Line_29 $$ if (prevToken != null) [ CD ]
Line_37 $$ if (value instanceof Double) -->Line_38 $$ final double v = ((Double) value).doubleValue()[ CD ]
Line_79 $$ if (prevToken != null) -->Line_80 $$ newExpressionText.append(prevToken.getText())[ CD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_48 $$ newExpressionText.append(Double.toString(v))[ FD ]
Line_66 $$ prevOperand = null-->Line_83 $$ newExpressionText.append(prevOperand.getText())[ FD ]
Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)-->Line_37 $$ if (value instanceof Double) [ FD ]
Line_6 $$ token = (PsiJavaToken) element-->Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)[ FD ]
Line_28 $$ if (token == currentToken) -->Line_66 $$ prevOperand = null[ CD ]
Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)-->Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)[ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_70 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_5 $$ if (element instanceof PsiJavaToken) -->Line_8 $$ final PsiElement prevSibling = element.getPrevSibling()[ CD ]
Line_28 $$ if (token == currentToken) -->Line_35 $$ if (value instanceof Long) [ CD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_73 $$ newExpressionText.append(prevOperand.getText())[ FD ]
Line_67 $$ prevToken = null-->Line_70 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_35 $$ if (value instanceof Long) -->Line_36 $$ newExpressionText.append(value).append('L')[ CD ]
Line_4 $$ final PsiJavaToken token-->Line_28 $$ if (token == currentToken) [ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_79 $$ if (prevToken != null) [ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_80 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_41 $$ if (Double.isInfinite(v)) -->Line_48 $$ newExpressionText.append(Double.toString(v))[ CD ]
Line_6 $$ token = (PsiJavaToken) element-->Line_28 $$ if (token == currentToken) [ FD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_42 $$ if (v > 0.0) [ FD ]
Line_32 $$ if (newExpressionText.length() > 0) -->Line_33 $$ newExpressionText.append(' ')[ CD ]
Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_85 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpressionText.toString())[ FD ]
Line_50 $$ if (value instanceof Float) -->Line_51 $$ final float v = ((Float) value).floatValue()[ CD ]
Line_27 $$ final PsiJavaToken currentToken = polyadicExpression.getTokenBeforeOperand(operand)-->Line_28 $$ if (token == currentToken) [ FD ]
Line_39 $$ if (Double.isNaN(v)) -->Line_40 $$ newExpressionText.append("java.lang.Double.NaN")[ CD ]
Line_42 $$ if (v > 0.0) -->Line_45 $$ newExpressionText.append("java.lang.Double.NEGATIVE_INFINITY")[ CD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_67 $$ prevToken = null[ FD ]
Line_10 $$ token = (PsiJavaToken) prevSibling-->Line_28 $$ if (token == currentToken) [ FD ]
Line_17 $$ if (subexpression == null) -->Line_18 $$ return[ CD ]
Line_15 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_23 $$ final PsiExpression[] operands = polyadicExpression.getOperands()[ FD ]
Line_4 $$ final PsiJavaToken token-->Line_6 $$ token = (PsiJavaToken) element[ FD ]
Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)-->Line_17 $$ if (subexpression == null) [ FD ]
Line_26 $$ for (PsiExpression operand : operands) -->Line_27 $$ final PsiJavaToken currentToken = polyadicExpression.getTokenBeforeOperand(operand)[ FD ]
Line_29 $$ if (prevToken != null) -->Line_30 $$ newExpressionText.append(prevToken.getText())[ CD ]
Line_28 $$ if (token == currentToken) -->Line_32 $$ if (newExpressionText.length() > 0) [ CD ]
Line_67 $$ prevToken = null-->Line_69 $$ if (prevToken != null) [ FD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_75 $$ prevOperand = operand[ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_69 $$ if (prevToken != null) [ FD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_76 $$ prevToken = currentToken[ FD ]
Line_20 $$ final Object value = ExpressionUtils.computeConstantExpression(subexpression)-->Line_64 $$ newExpressionText.append(value)[ FD ]
Line_52 $$ if (Float.isNaN(v)) -->Line_54 $$ if (Float.isInfinite(v)) [ CD ]
Line_66 $$ prevOperand = null-->Line_82 $$ if (prevOperand != null) [ FD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_82 $$ if (prevOperand != null) [ FD ]
Line_50 $$ if (value instanceof Float) -->Line_52 $$ if (Float.isNaN(v)) [ CD ]
Line_67 $$ prevToken = null-->Line_80 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_8 $$ final PsiElement prevSibling = element.getPrevSibling()-->Line_9 $$ if (prevSibling instanceof PsiJavaToken) [ FD ]
Line_10 $$ token = (PsiJavaToken) prevSibling-->Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)[ FD ]
Line_75 $$ prevOperand = operand-->Line_82 $$ if (prevOperand != null) [ FD ]
Line_39 $$ if (Double.isNaN(v)) -->Line_41 $$ if (Double.isInfinite(v)) [ CD ]
Line_66 $$ prevOperand = null-->Line_73 $$ newExpressionText.append(prevOperand.getText())[ FD ]
Line_27 $$ final PsiJavaToken currentToken = polyadicExpression.getTokenBeforeOperand(operand)-->Line_76 $$ prevToken = currentToken[ FD ]
Line_28 $$ if (token == currentToken) -->Line_69 $$ if (prevToken != null) [ CD ]
Line_25 $$ PsiJavaToken prevToken = null-->Line_30 $$ newExpressionText.append(prevToken.getText())[ FD ]
Line_4 $$ final PsiJavaToken token-->Line_16 $$ final PsiPolyadicExpression subexpression = ConstantSubexpressionPredicate.getSubexpression(polyadicExpression, token)[ FD ]
Line_38 $$ final double v = ((Double) value).doubleValue()-->Line_52 $$ if (Float.isNaN(v)) [ FD ]
Line_66 $$ prevOperand = null-->Line_72 $$ if (prevOperand != null) [ FD ]
Line_54 $$ if (Float.isInfinite(v)) -->Line_61 $$ newExpressionText.append(Float.toString(v)).append('f')[ CD ]
Line_52 $$ if (Float.isNaN(v)) -->Line_53 $$ newExpressionText.append("java.lang.Float.NaN")[ CD ]
Line_75 $$ prevOperand = operand-->Line_83 $$ newExpressionText.append(prevOperand.getText())[ FD ]
Line_24 $$ PsiExpression prevOperand = null-->Line_66 $$ prevOperand = null[ FD ]
Line_9 $$ if (prevSibling instanceof PsiJavaToken) -->Line_10 $$ token = (PsiJavaToken) prevSibling[ CD ]
