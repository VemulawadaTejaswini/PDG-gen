Line_2 $$ public static int compareDiscardNaN(double d1, double d2, boolean asc) -->Line_3 $$ if (Double.isNaN(d1)) [ FD ]
Line_3 $$ if (Double.isNaN(d1)) -->Line_5 $$ if (Double.isNaN(d2)) [ CD ]
Line_2 $$ public static int compareDiscardNaN(double d1, double d2, boolean asc) -->Line_3 $$ if (Double.isNaN(d1)) [ CD ]
Line_5 $$ if (Double.isNaN(d2)) -->Line_6 $$ return -1[ CD ]
Line_3 $$ if (Double.isNaN(d1)) -->Line_4 $$ return Double.isNaN(d2) ? 0 : 1[ CD ]
Line_2 $$ public static int compareDiscardNaN(double d1, double d2, boolean asc) -->Line_4 $$ return Double.isNaN(d2) ? 0 : 1[ FD ]
Line_5 $$ if (Double.isNaN(d2)) -->Line_8 $$ return asc ? Double.compare(d1, d2) : Double.compare(d2, d1)[ CD ]
Line_2 $$ public static int compareDiscardNaN(double d1, double d2, boolean asc) -->Line_5 $$ if (Double.isNaN(d2)) [ FD ]
Line_2 $$ public static int compareDiscardNaN(double d1, double d2, boolean asc) -->Line_8 $$ return asc ? Double.compare(d1, d2) : Double.compare(d2, d1)[ FD ]
