Line_3 $$ MaterializedResult actual = computeActual("VALUES (0.0/0.0, 1.0/0.0, -1.0/0.0)")-->Line_4 $$ List<MaterializedRow> rows = actual.getMaterializedRows()[ FD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_7 $$ assertTrue(((Double) row.getField(0)).isNaN())[ CD ]
Line_4 $$ List<MaterializedRow> rows = actual.getMaterializedRows()-->Line_5 $$ assertEquals(rows.size(), 1)[ FD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_9 $$ assertEquals(row.getField(2), Double.NEGATIVE_INFINITY)[ CD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_3 $$ MaterializedResult actual = computeActual("VALUES (0.0/0.0, 1.0/0.0, -1.0/0.0)")[ CD ]
Line_4 $$ List<MaterializedRow> rows = actual.getMaterializedRows()-->Line_6 $$ MaterializedRow row = rows.get(0)[ FD ]
Line_6 $$ MaterializedRow row = rows.get(0)-->Line_8 $$ assertEquals(row.getField(1), Double.POSITIVE_INFINITY)[ FD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_8 $$ assertEquals(row.getField(1), Double.POSITIVE_INFINITY)[ CD ]
Line_6 $$ MaterializedRow row = rows.get(0)-->Line_7 $$ assertTrue(((Double) row.getField(0)).isNaN())[ FD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_5 $$ assertEquals(rows.size(), 1)[ CD ]
Line_6 $$ MaterializedRow row = rows.get(0)-->Line_9 $$ assertEquals(row.getField(2), Double.NEGATIVE_INFINITY)[ FD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_4 $$ List<MaterializedRow> rows = actual.getMaterializedRows()[ CD ]
Line_2 $$ public void testValuesWithNonTrivialType() throws Exception -->Line_6 $$ MaterializedRow row = rows.get(0)[ CD ]
