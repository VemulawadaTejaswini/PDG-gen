Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_16 $$ Arrays.sort(edges, INTERSECTION_ORDER)[ CD ]
Line_11 $$ if (!Double.isNaN(position)) -->Line_13 $$ numIntersections++[ CD ]
Line_6 $$ Coordinate p1 = edges[i].coordinate-->Line_10 $$ double position = intersection(p1, p2, dateline)[ FD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_5 $$ for (int i = 0; i < edges.length; i++) [ CD ]
Line_5 $$ for (int i = 0; i < edges.length; i++) -->Line_11 $$ if (!Double.isNaN(position)) [ CD ]
Line_10 $$ double position = intersection(p1, p2, dateline)-->Line_12 $$ edges[i].intersection(position)[ FD ]
Line_5 $$ for (int i = 0; i < edges.length; i++) -->Line_9 $$ edges[i].intersect = Edge.MAX_COORDINATE[ CD ]
Line_10 $$ double position = intersection(p1, p2, dateline)-->Line_11 $$ if (!Double.isNaN(position)) [ FD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_17 $$ return numIntersections[ CD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_3 $$ int numIntersections = 0[ CD ]
Line_5 $$ for (int i = 0; i < edges.length; i++) -->Line_10 $$ double position = intersection(p1, p2, dateline)[ CD ]
Line_5 $$ for (int i = 0; i < edges.length; i++) -->Line_6 $$ Coordinate p1 = edges[i].coordinate[ CD ]
Line_7 $$ Coordinate p2 = edges[i].next.coordinate-->Line_10 $$ double position = intersection(p1, p2, dateline)[ FD ]
Line_5 $$ for (int i = 0; i < edges.length; i++) -->Line_7 $$ Coordinate p2 = edges[i].next.coordinate[ CD ]
Line_11 $$ if (!Double.isNaN(position)) -->Line_12 $$ edges[i].intersection(position)[ CD ]
Line_3 $$ int numIntersections = 0-->Line_13 $$ numIntersections++[ FD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_4 $$ assert !Double.isNaN(dateline)[ FD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_16 $$ Arrays.sort(edges, INTERSECTION_ORDER)[ FD ]
Line_2 $$ protected static int intersections(double dateline, Edge[] edges) -->Line_10 $$ double position = intersection(p1, p2, dateline)[ FD ]
