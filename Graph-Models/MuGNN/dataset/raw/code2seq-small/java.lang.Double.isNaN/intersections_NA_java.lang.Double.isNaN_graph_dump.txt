Line_16 $$ for (int i = 0; i < edges.length; i++) -->Line_17 $$ Coordinate p1 = edges[i].coordinate[ CD ]
Line_16 $$ for (int i = 0; i < edges.length; i++) -->Line_21 $$ double position = intersection(p1, p2, dateline)[ CD ]
Line_14 $$ int numIntersections = 0-->Line_24 $$ numIntersections++[ FD ]
Line_22 $$ if (!Double.isNaN(position)) -->Line_24 $$ numIntersections++[ CD ]
Line_21 $$ double position = intersection(p1, p2, dateline)-->Line_23 $$ edges[i].intersection(position)[ FD ]
Line_21 $$ double position = intersection(p1, p2, dateline)-->Line_22 $$ if (!Double.isNaN(position)) [ FD ]
Line_16 $$ for (int i = 0; i < edges.length; i++) -->Line_22 $$ if (!Double.isNaN(position)) [ CD ]
Line_16 $$ for (int i = 0; i < edges.length; i++) -->Line_18 $$ Coordinate p2 = edges[i].next.coordinate[ CD ]
Line_17 $$ Coordinate p1 = edges[i].coordinate-->Line_21 $$ double position = intersection(p1, p2, dateline)[ FD ]
Line_16 $$ for (int i = 0; i < edges.length; i++) -->Line_20 $$ edges[i].intersect = Edge.MAX_COORDINATE[ CD ]
Line_18 $$ Coordinate p2 = edges[i].next.coordinate-->Line_21 $$ double position = intersection(p1, p2, dateline)[ FD ]
Line_22 $$ if (!Double.isNaN(position)) -->Line_23 $$ edges[i].intersection(position)[ CD ]
