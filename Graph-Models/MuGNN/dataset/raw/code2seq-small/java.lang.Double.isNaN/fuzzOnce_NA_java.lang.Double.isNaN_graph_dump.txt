Line_70 $$ totalRead += read-->Line_275 $$ totalRead += 8[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_25 $$ boolean threwEOF = false-->Line_31 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_55 $$ totalRead += length-->Line_171 $$ totalRead += 2[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_196 $$ totalRead += 2-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_125 $$ boolean threw = false-->Line_291 $$ assertTrue(threw)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_70 $$ totalRead += read-->Line_110 $$ totalRead++[ FD ]
Line_144 $$ totalRead += 2-->Line_171 $$ totalRead += 2[ FD ]
Line_196 $$ totalRead += 2-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_264 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_273 $$ long actual = is.readLong()[ FD ]
Line_6 $$ int totalRead = 0-->Line_70 $$ totalRead += read[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_299 $$ totalRead += 8[ FD ]
Line_176 $$ if (corpus.remaining() < 2) -->Line_188 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_89 $$ boolean canonical = dis.readBoolean()-->Line_316 $$ assertEquals(canonical, actual)[ FD ]
Line_221 $$ totalRead += 4-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_35 $$ totalRead += 111-->Line_221 $$ totalRead += 4[ FD ]
Line_55 $$ totalRead += length-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_275 $$ totalRead += 8-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_55 $$ totalRead += length-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_196 $$ totalRead += 2-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_108 $$ int actual = is.read()[ FD ]
Line_6 $$ int totalRead = 0-->Line_35 $$ totalRead += 111[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_299 $$ totalRead += 8[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_314 $$ int actual = is.skipBytes(actuallySkipped)[ FD ]
Line_221 $$ totalRead += 4-->Line_275 $$ totalRead += 8[ FD ]
Line_6 $$ int totalRead = 0-->Line_245 $$ totalRead += 4[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_221 $$ totalRead += 4-->Line_110 $$ totalRead++[ FD ]
Line_299 $$ totalRead += 8-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_101 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_55 $$ totalRead += length[ FD ]
Line_70 $$ totalRead += read-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_221 $$ totalRead += 4-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_70 $$ totalRead += read-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_158 $$ threw = true-->Line_185 $$ threw = true[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_221 $$ totalRead += 4[ FD ]
Line_235 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_235 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_70 $$ totalRead += read-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_196 $$ totalRead += 2-->Line_275 $$ totalRead += 8[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_245 $$ totalRead += 4[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_309 $$ int skipBytes = r.nextInt(1024)-->Line_310 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())[ FD ]
Line_35 $$ totalRead += 111-->Line_196 $$ totalRead += 2[ FD ]
Line_125 $$ boolean threw = false-->Line_210 $$ threw = true[ FD ]
Line_11 $$ while (totalRead < corpus.capacity()) -->Line_13 $$ int action = r.nextInt(16)[ CD ]
Line_149 $$ if (corpus.remaining() < 2) -->Line_162 $$ totalRead = corpus.capacity()[ CD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_65 $$ read = is.read(bytes, offset, length)[ FD ]
Line_245 $$ totalRead += 4-->Line_119 $$ totalRead++[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_298 $$ double actual = is.readDouble()[ FD ]
Line_171 $$ totalRead += 2-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_171 $$ totalRead += 2-->Line_196 $$ totalRead += 2[ FD ]
Line_6 $$ int totalRead = 0-->Line_275 $$ totalRead += 8[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_264 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_55 $$ totalRead += length-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_196 $$ totalRead += 2[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_275 $$ totalRead += 8-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_310 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_315 $$ assertEquals(actuallySkipped, canonical)[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_196 $$ totalRead += 2-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_119 $$ totalRead++[ FD ]
Line_125 $$ boolean threw = false-->Line_185 $$ threw = true[ FD ]
Line_89 $$ boolean canonical = dis.readBoolean()-->Line_247 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ FD ]
Line_299 $$ totalRead += 8-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_35 $$ totalRead += 111-->Line_137 $$ totalRead = corpus.capacity()[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_280 $$ if (corpus.remaining() < 8) -->Line_293 $$ totalRead = corpus.capacity()[ CD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_144 $$ totalRead += 2[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_70 $$ totalRead += read-->Line_299 $$ totalRead += 8[ FD ]
Line_83 $$ totalRead += read-->Line_171 $$ totalRead += 2[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_289 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_185 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_264 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_55 $$ totalRead += length-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_83 $$ totalRead += read-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_92 $$ totalRead++[ FD ]
Line_6 $$ int totalRead = 0-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_35 $$ totalRead += 111-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_6 $$ int totalRead = 0-->Line_55 $$ totalRead += length[ FD ]
Line_133 $$ threw = true-->Line_158 $$ threw = true[ FD ]
Line_210 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_55 $$ totalRead += length-->Line_299 $$ totalRead += 8[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_47 $$ is.readFully(bytes, offset, length)[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_83 $$ totalRead += read-->Line_245 $$ totalRead += 4[ FD ]
Line_275 $$ totalRead += 8-->Line_119 $$ totalRead++[ FD ]
Line_264 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_185 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_25 $$ boolean threwEOF = false-->Line_51 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_185 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_280 $$ if (corpus.remaining() < 8) -->Line_292 $$ assertTrue(corpus.remaining() - totalRead < 8)[ CD ]
Line_55 $$ totalRead += length-->Line_144 $$ totalRead += 2[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_90 $$ boolean actual = is.readBoolean()[ FD ]
Line_55 $$ totalRead += length-->Line_137 $$ totalRead = corpus.capacity()[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_171 $$ totalRead += 2[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_35 $$ totalRead += 111-->Line_101 $$ totalRead++[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_32 $$ if (expectEOF)-->Line_33 $$ return[ CD ]
Line_144 $$ totalRead += 2-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_152 $$ is.readUnsignedShort()[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_92 $$ totalRead++[ FD ]
Line_158 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_196 $$ totalRead += 2-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_245 $$ totalRead += 4-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_196 $$ totalRead += 2-->Line_299 $$ totalRead += 8[ FD ]
Line_275 $$ totalRead += 8-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_6 $$ int totalRead = 0-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_300 $$ if (Double.isNaN(expected)) -->Line_301 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ CD ]
Line_125 $$ boolean threw = false-->Line_160 $$ assertTrue(threw)[ FD ]
Line_245 $$ totalRead += 4-->Line_92 $$ totalRead++[ FD ]
Line_264 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_171 $$ totalRead += 2-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_245 $$ totalRead += 4[ FD ]
Line_35 $$ totalRead += 111-->Line_275 $$ totalRead += 8[ FD ]
Line_133 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_196 $$ totalRead += 2-->Line_119 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_65 $$ read = is.read(bytes, offset, length)[ FD ]
Line_41 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_201 $$ if (corpus.remaining() < 4) -->Line_214 $$ totalRead = corpus.capacity()[ CD ]
Line_246 $$ if (Float.isNaN(expected)) -->Line_247 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ CD ]
Line_289 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_70 $$ totalRead += read-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_210 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_6 $$ int totalRead = 0-->Line_144 $$ totalRead += 2[ FD ]
Line_6 $$ int totalRead = 0-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_83 $$ totalRead += read[ FD ]
Line_171 $$ totalRead += 2-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_41 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_47 $$ is.readFully(bytes, offset, length)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_171 $$ totalRead += 2-->Line_101 $$ totalRead++[ FD ]
Line_158 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_245 $$ totalRead += 4[ FD ]
Line_35 $$ totalRead += 111-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_299 $$ totalRead += 8-->Line_101 $$ totalRead++[ FD ]
Line_133 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_201 $$ if (corpus.remaining() < 4) -->Line_213 $$ assertTrue(corpus.remaining() - totalRead < 4)[ CD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_171 $$ totalRead += 2-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_289 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_70 $$ totalRead += read-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_158 $$ threw = true-->Line_264 $$ threw = true[ FD ]
Line_55 $$ totalRead += length-->Line_110 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_275 $$ totalRead += 8[ FD ]
Line_125 $$ boolean threw = false-->Line_158 $$ threw = true[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_229 $$ is.readFloat()[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_275 $$ totalRead += 8-->Line_101 $$ totalRead++[ FD ]
Line_255 $$ if (corpus.remaining() < 8) -->Line_266 $$ assertTrue(threw)[ CD ]
Line_11 $$ while (totalRead < corpus.capacity()) -->Line_12 $$ assertEquals(corpus.position(), totalRead)[ CD ]
Line_83 $$ totalRead += read-->Line_144 $$ totalRead += 2[ FD ]
Line_6 $$ int totalRead = 0-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_70 $$ totalRead += read-->Line_119 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_169 $$ int actual = is.readUnsignedShort()[ FD ]
Line_55 $$ totalRead += length-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_185 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_90 $$ boolean actual = is.readBoolean()-->Line_247 $$ assertTrue(Float.isNaN(canonical) && Float.isNaN(actual))[ FD ]
Line_196 $$ totalRead += 2-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_299 $$ totalRead += 8-->Line_110 $$ totalRead++[ FD ]
Line_210 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_299 $$ totalRead += 8-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_6 $$ int totalRead = 0-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_255 $$ if (corpus.remaining() < 8) -->Line_268 $$ totalRead = corpus.capacity()[ CD ]
Line_133 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_35 $$ totalRead += 111-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_133 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_196 $$ totalRead += 2-->Line_101 $$ totalRead++[ FD ]
Line_25 $$ boolean threwEOF = false-->Line_49 $$ threwEOF = true[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_127 $$ is.readShort()[ FD ]
Line_35 $$ totalRead += 111-->Line_299 $$ totalRead += 8[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_119 $$ totalRead++[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_171 $$ totalRead += 2[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_83 $$ totalRead += read-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_70 $$ totalRead += read-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_101 $$ totalRead++[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_185 $$ threw = true-->Line_235 $$ threw = true[ FD ]
Line_245 $$ totalRead += 4-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_299 $$ totalRead += 8-->Line_92 $$ totalRead++[ FD ]
Line_275 $$ totalRead += 8-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_125 $$ boolean threw = false-->Line_235 $$ threw = true[ FD ]
Line_171 $$ totalRead += 2-->Line_299 $$ totalRead += 8[ FD ]
Line_29 $$ threwEOF = true-->Line_49 $$ threwEOF = true[ FD ]
Line_125 $$ boolean threw = false-->Line_266 $$ assertTrue(threw)[ FD ]
Line_196 $$ totalRead += 2-->Line_221 $$ totalRead += 4[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_289 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_133 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_35 $$ totalRead += 111-->Line_171 $$ totalRead += 2[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_27 $$ is.readFully(bytes)[ FD ]
Line_5 $$ int read = 0-->Line_70 $$ totalRead += read[ FD ]
Line_70 $$ totalRead += read-->Line_92 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_83 $$ totalRead += read-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_133 $$ threw = true-->Line_235 $$ threw = true[ FD ]
Line_55 $$ totalRead += length-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_245 $$ totalRead += 4[ FD ]
Line_35 $$ totalRead += 111-->Line_119 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_88 $$ boolean expected = corpus.get() != 0-->Line_246 $$ if (Float.isNaN(expected)) [ FD ]
Line_35 $$ totalRead += 111-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_158 $$ threw = true-->Line_235 $$ threw = true[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_289 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_35 $$ totalRead += 111-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_5 $$ int read = 0-->Line_65 $$ read = is.read(bytes, offset, length)[ FD ]
Line_55 $$ totalRead += length-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_83 $$ totalRead += read-->Line_101 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_158 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_35 $$ totalRead += 111-->Line_92 $$ totalRead++[ FD ]
Line_299 $$ totalRead += 8-->Line_119 $$ totalRead++[ FD ]
Line_25 $$ boolean threwEOF = false-->Line_29 $$ threwEOF = true[ FD ]
Line_5 $$ int read = 0-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_289 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_221 $$ totalRead += 4[ FD ]
Line_196 $$ totalRead += 2-->Line_110 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_83 $$ totalRead += read[ FD ]
Line_83 $$ totalRead += read-->Line_196 $$ totalRead += 2[ FD ]
Line_185 $$ threw = true-->Line_264 $$ threw = true[ FD ]
Line_158 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_235 $$ threw = true-->Line_264 $$ threw = true[ FD ]
Line_70 $$ totalRead += read-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_280 $$ if (corpus.remaining() < 8) -->Line_291 $$ assertTrue(threw)[ CD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_176 $$ if (corpus.remaining() < 2) -->Line_187 $$ assertTrue(threw)[ CD ]
Line_42 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_47 $$ is.readFully(bytes, offset, length)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_258 $$ is.readLong()[ FD ]
Line_171 $$ totalRead += 2-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_125 $$ boolean threw = false-->Line_133 $$ threw = true[ FD ]
Line_55 $$ totalRead += length-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_70 $$ totalRead += read-->Line_137 $$ totalRead = corpus.capacity()[ FD ]
Line_125 $$ boolean threw = false-->Line_187 $$ assertTrue(threw)[ FD ]
Line_24 $$ boolean expectEOF = expectedBytes < 111-->Line_31 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_299 $$ totalRead += 8-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_78 $$ read = is.read(bytes)[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_24 $$ boolean expectEOF = expectedBytes < 111-->Line_79 $$ assertTrue((expectEOF && read <= 0) || (!expectEOF && read >= 0))[ FD ]
Line_55 $$ totalRead += length-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_210 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_283 $$ is.readDouble()[ FD ]
Line_275 $$ totalRead += 8-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_196 $$ totalRead += 2[ FD ]
Line_245 $$ totalRead += 4-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_245 $$ totalRead += 4-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_196 $$ totalRead += 2-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_83 $$ totalRead += read-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_70 $$ totalRead += read-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_171 $$ totalRead += 2-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_6 $$ int totalRead = 0-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_89 $$ boolean canonical = dis.readBoolean()-->Line_315 $$ assertEquals(actuallySkipped, canonical)[ FD ]
Line_35 $$ totalRead += 111-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_185 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_55 $$ totalRead += length-->Line_275 $$ totalRead += 8[ FD ]
Line_264 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_310 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_314 $$ int actual = is.skipBytes(actuallySkipped)[ FD ]
Line_221 $$ totalRead += 4-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_171 $$ totalRead += 2-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_196 $$ totalRead += 2-->Line_245 $$ totalRead += 4[ FD ]
Line_125 $$ boolean threw = false-->Line_212 $$ assertTrue(threw)[ FD ]
Line_144 $$ totalRead += 2-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_196 $$ totalRead += 2[ FD ]
Line_133 $$ threw = true-->Line_185 $$ threw = true[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_83 $$ totalRead += read-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_226 $$ if (corpus.remaining() < 4) -->Line_238 $$ assertTrue(corpus.remaining() - totalRead < 4)[ CD ]
Line_55 $$ totalRead += length-->Line_83 $$ totalRead += read[ FD ]
Line_226 $$ if (corpus.remaining() < 4) -->Line_237 $$ assertTrue(threw)[ CD ]
Line_65 $$ read = is.read(bytes, offset, length)-->Line_83 $$ totalRead += read[ FD ]
Line_245 $$ totalRead += 4-->Line_101 $$ totalRead++[ FD ]
Line_124 $$ if (corpus.remaining() < 2) -->Line_136 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_144 $$ totalRead += 2-->Line_119 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_110 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_171 $$ totalRead += 2[ FD ]
Line_55 $$ totalRead += length-->Line_196 $$ totalRead += 2[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_137 $$ totalRead = corpus.capacity()[ FD ]
Line_65 $$ read = is.read(bytes, offset, length)-->Line_70 $$ totalRead += read[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_144 $$ totalRead += 2-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_29 $$ threwEOF = true-->Line_51 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_70 $$ totalRead += read-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_5 $$ int read = 0-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_310 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_55 $$ totalRead += length-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_171 $$ totalRead += 2[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_176 $$ if (corpus.remaining() < 2) -->Line_189 $$ totalRead = corpus.capacity()[ CD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_245 $$ totalRead += 4[ FD ]
Line_185 $$ threw = true-->Line_210 $$ threw = true[ FD ]
Line_221 $$ totalRead += 4-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_101 $$ totalRead++[ FD ]
Line_78 $$ read = is.read(bytes)-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_5 $$ int read = 0-->Line_78 $$ read = is.read(bytes)[ FD ]
Line_55 $$ totalRead += length-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_275 $$ totalRead += 8-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_245 $$ totalRead += 4-->Line_110 $$ totalRead++[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_124 $$ if (corpus.remaining() < 2) -->Line_125 $$ boolean threw = false[ CD ]
Line_55 $$ totalRead += length-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_42 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_65 $$ read = is.read(bytes, offset, length)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_144 $$ totalRead += 2-->Line_196 $$ totalRead += 2[ FD ]
Line_70 $$ totalRead += read-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_245 $$ totalRead += 4-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_235 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_27 $$ is.readFully(bytes)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_92 $$ totalRead++[ FD ]
Line_221 $$ totalRead += 4-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_245 $$ totalRead += 4-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_35 $$ totalRead += 111-->Line_144 $$ totalRead += 2[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_221 $$ totalRead += 4[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_185 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_158 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_144 $$ totalRead += 2-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_201 $$ if (corpus.remaining() < 4) -->Line_212 $$ assertTrue(threw)[ CD ]
Line_65 $$ read = is.read(bytes, offset, length)-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_133 $$ threw = true-->Line_264 $$ threw = true[ FD ]
Line_158 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_70 $$ totalRead += read-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_144 $$ totalRead += 2-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_210 $$ threw = true-->Line_289 $$ threw = true[ FD ]
Line_6 $$ int totalRead = 0-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_35 $$ totalRead += 111-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_289 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_235 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_210 $$ threw = true-->Line_235 $$ threw = true[ FD ]
Line_300 $$ if (Double.isNaN(expected)) -->Line_303 $$ assertTrue(expected == canonical && canonical == actual)[ CD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_125 $$ boolean threw = false-->Line_264 $$ threw = true[ FD ]
Line_221 $$ totalRead += 4-->Line_92 $$ totalRead++[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_221 $$ totalRead += 4[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_65 $$ read = is.read(bytes, offset, length)-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_299 $$ totalRead += 8-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_119 $$ totalRead++[ FD ]
Line_133 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_6 $$ int totalRead = 0-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_117 $$ int actual = is.readUnsignedByte()[ FD ]
Line_275 $$ totalRead += 8-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_310 $$ int actuallySkipped = Math.min(skipBytes, corpus.remaining())-->Line_313 $$ int canonical = dis.skipBytes(actuallySkipped)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_196 $$ totalRead += 2-->Line_92 $$ totalRead++[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_22 $$ byte[] bytes = new byte[111]-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_133 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_89 $$ boolean canonical = dis.readBoolean()-->Line_301 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ FD ]
Line_149 $$ if (corpus.remaining() < 2) -->Line_160 $$ assertTrue(threw)[ CD ]
Line_196 $$ totalRead += 2-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_144 $$ totalRead += 2-->Line_275 $$ totalRead += 8[ FD ]
Line_275 $$ totalRead += 8-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_70 $$ totalRead += read-->Line_245 $$ totalRead += 4[ FD ]
Line_245 $$ totalRead += 4-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_119 $$ totalRead++[ FD ]
Line_41 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_65 $$ read = is.read(bytes, offset, length)[ FD ]
Line_144 $$ totalRead += 2-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_210 $$ threw = true-->Line_266 $$ assertTrue(threw)[ FD ]
Line_83 $$ totalRead += read-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_299 $$ totalRead += 8-->Line_12 $$ assertEquals(corpus.position(), totalRead)[ FD ]
Line_35 $$ totalRead += 111-->Line_245 $$ totalRead += 4[ FD ]
Line_144 $$ totalRead += 2-->Line_101 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_55 $$ totalRead += length-->Line_221 $$ totalRead += 4[ FD ]
Line_210 $$ threw = true-->Line_264 $$ threw = true[ FD ]
Line_144 $$ totalRead += 2-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_125 $$ boolean threw = false-->Line_135 $$ assertTrue(threw)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_210 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_80 $$ if (expectEOF)-->Line_81 $$ return[ CD ]
Line_171 $$ totalRead += 2-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_196 $$ totalRead += 2-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_110 $$ totalRead++[ FD ]
Line_6 $$ int totalRead = 0-->Line_221 $$ totalRead += 4[ FD ]
Line_78 $$ read = is.read(bytes)-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_83 $$ totalRead += read-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_6 $$ int totalRead = 0-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_275 $$ totalRead += 8-->Line_92 $$ totalRead++[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_35 $$ totalRead += 111-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_299 $$ totalRead += 8[ FD ]
Line_196 $$ totalRead += 2-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_235 $$ threw = true-->Line_160 $$ assertTrue(threw)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_219 $$ int actual = is.readInt()[ FD ]
Line_70 $$ totalRead += read-->Line_144 $$ totalRead += 2[ FD ]
Line_185 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_245 $$ totalRead += 4[ FD ]
Line_29 $$ threwEOF = true-->Line_31 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_245 $$ totalRead += 4-->Line_299 $$ totalRead += 8[ FD ]
Line_133 $$ threw = true-->Line_210 $$ threw = true[ FD ]
Line_275 $$ totalRead += 8-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_196 $$ totalRead += 2-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_55 $$ totalRead += length-->Line_70 $$ totalRead += read[ FD ]
Line_35 $$ totalRead += 111-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_158 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_275 $$ totalRead += 8-->Line_110 $$ totalRead++[ FD ]
Line_245 $$ totalRead += 4-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_83 $$ totalRead += read-->Line_92 $$ totalRead++[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_194 $$ char actual = is.readChar()[ FD ]
Line_235 $$ threw = true-->Line_187 $$ assertTrue(threw)[ FD ]
Line_221 $$ totalRead += 4-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_221 $$ totalRead += 4[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_83 $$ totalRead += read-->Line_137 $$ totalRead = corpus.capacity()[ FD ]
Line_226 $$ if (corpus.remaining() < 4) -->Line_239 $$ totalRead = corpus.capacity()[ CD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_179 $$ is.readChar()[ FD ]
Line_144 $$ totalRead += 2-->Line_245 $$ totalRead += 4[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_83 $$ totalRead += read-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_268 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_210 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_299 $$ totalRead += 8[ FD ]
Line_41 $$ int offset = bytes.length == 0 ? 0 : r.nextInt(bytes.length)-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_142 $$ short actual = is.readShort()[ FD ]
Line_70 $$ totalRead += read-->Line_83 $$ totalRead += read[ FD ]
Line_49 $$ threwEOF = true-->Line_31 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_255 $$ if (corpus.remaining() < 8) -->Line_267 $$ assertTrue(corpus.remaining() - totalRead < 8)[ CD ]
Line_55 $$ totalRead += length-->Line_101 $$ totalRead++[ FD ]
Line_124 $$ if (corpus.remaining() < 2) -->Line_135 $$ assertTrue(threw)[ CD ]
Line_149 $$ if (corpus.remaining() < 2) -->Line_161 $$ assertTrue(corpus.remaining() - totalRead < 2)[ CD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_99 $$ byte actual = is.readByte()[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_245 $$ totalRead += 4[ FD ]
Line_35 $$ totalRead += 111-->Line_70 $$ totalRead += read[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_35 $$ totalRead += 111-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_90 $$ boolean actual = is.readBoolean()-->Line_301 $$ assertTrue(Double.isNaN(canonical) && Double.isNaN(actual))[ FD ]
Line_6 $$ int totalRead = 0-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_245 $$ totalRead += 4-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_264 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_11 $$ while (totalRead < corpus.capacity()) [ FD ]
Line_144 $$ totalRead += 2-->Line_323 $$ assertEquals(totalRead, corpus.capacity())[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_67 $$ if (expectEOF)-->Line_68 $$ return[ CD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_268 $$ totalRead = corpus.capacity()[ FD ]
Line_78 $$ read = is.read(bytes)-->Line_70 $$ totalRead += read[ FD ]
Line_5 $$ int read = 0-->Line_83 $$ totalRead += read[ FD ]
Line_90 $$ boolean actual = is.readBoolean()-->Line_316 $$ assertEquals(canonical, actual)[ FD ]
Line_144 $$ totalRead += 2-->Line_299 $$ totalRead += 8[ FD ]
Line_239 $$ totalRead = corpus.capacity()-->Line_92 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_110 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_101 $$ totalRead++[ FD ]
Line_88 $$ boolean expected = corpus.get() != 0-->Line_300 $$ if (Double.isNaN(expected)) [ FD ]
Line_158 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_42 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_299 $$ totalRead += 8-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_171 $$ totalRead += 2-->Line_245 $$ totalRead += 4[ FD ]
Line_144 $$ totalRead += 2-->Line_110 $$ totalRead++[ FD ]
Line_275 $$ totalRead += 8-->Line_299 $$ totalRead += 8[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_204 $$ is.readInt()[ FD ]
Line_42 $$ int length = bytes.length == 0 ? 0 : r.nextInt(bytes.length - offset)-->Line_55 $$ totalRead += length[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_133 $$ threw = true-->Line_212 $$ assertTrue(threw)[ FD ]
Line_24 $$ boolean expectEOF = expectedBytes < 111-->Line_51 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_78 $$ read = is.read(bytes)[ FD ]
Line_214 $$ totalRead = corpus.capacity()-->Line_275 $$ totalRead += 8[ FD ]
Line_83 $$ totalRead += read-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_171 $$ totalRead += 2-->Line_221 $$ totalRead += 4[ FD ]
Line_78 $$ read = is.read(bytes)-->Line_83 $$ totalRead += read[ FD ]
Line_171 $$ totalRead += 2-->Line_275 $$ totalRead += 8[ FD ]
Line_245 $$ totalRead += 4-->Line_275 $$ totalRead += 8[ FD ]
Line_158 $$ threw = true-->Line_210 $$ threw = true[ FD ]
Line_83 $$ totalRead += read-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_119 $$ totalRead++[ FD ]
Line_24 $$ boolean expectEOF = expectedBytes < 111-->Line_66 $$ assertTrue((expectEOF && read <= 0) || (!expectEOF && read >= 0))[ FD ]
Line_221 $$ totalRead += 4-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_221 $$ totalRead += 4-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_144 $$ totalRead += 2-->Line_162 $$ totalRead = corpus.capacity()[ FD ]
Line_185 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_70 $$ totalRead += read-->Line_82 $$ validateAgainstCorpus(bytes, 0, read, totalRead)[ FD ]
Line_70 $$ totalRead += read-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_125 $$ boolean threw = false-->Line_289 $$ threw = true[ FD ]
Line_83 $$ totalRead += read-->Line_119 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_110 $$ totalRead++[ FD ]
Line_52 $$ if (expectEOF)-->Line_53 $$ return[ CD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_235 $$ threw = true-->Line_291 $$ assertTrue(threw)[ FD ]
Line_299 $$ totalRead += 8-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_144 $$ totalRead += 2-->Line_311 $$ totalRead += actuallySkipped[ FD ]
Line_83 $$ totalRead += read-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_47 $$ is.readFully(bytes, offset, length)[ FD ]
Line_171 $$ totalRead += 2-->Line_69 $$ validateAgainstCorpus(bytes, offset, read, totalRead)[ FD ]
Line_124 $$ if (corpus.remaining() < 2) -->Line_137 $$ totalRead = corpus.capacity()[ CD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_196 $$ totalRead += 2[ FD ]
Line_235 $$ threw = true-->Line_237 $$ assertTrue(threw)[ FD ]
Line_49 $$ threwEOF = true-->Line_51 $$ assertEquals(expectEOF, threwEOF)[ FD ]
Line_6 $$ int totalRead = 0-->Line_110 $$ totalRead++[ FD ]
Line_264 $$ threw = true-->Line_135 $$ assertTrue(threw)[ FD ]
Line_311 $$ totalRead += actuallySkipped-->Line_101 $$ totalRead++[ FD ]
Line_35 $$ totalRead += 111-->Line_239 $$ totalRead = corpus.capacity()[ FD ]
Line_8 $$ NIODataInputStream is = new NIODataInputStream(dc, 1024 * 4)-->Line_244 $$ float actual = is.readFloat()[ FD ]
Line_246 $$ if (Float.isNaN(expected)) -->Line_249 $$ assertTrue(expected == canonical && canonical == actual)[ CD ]
Line_83 $$ totalRead += read-->Line_221 $$ totalRead += 4[ FD ]
Line_162 $$ totalRead = corpus.capacity()-->Line_221 $$ totalRead += 4[ FD ]
Line_189 $$ totalRead = corpus.capacity()-->Line_196 $$ totalRead += 2[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
Line_245 $$ totalRead += 4-->Line_293 $$ totalRead = corpus.capacity()[ FD ]
Line_171 $$ totalRead += 2-->Line_92 $$ totalRead++[ FD ]
Line_171 $$ totalRead += 2-->Line_119 $$ totalRead++[ FD ]
Line_65 $$ read = is.read(bytes, offset, length)-->Line_78 $$ read = is.read(bytes)[ FD ]
Line_196 $$ totalRead += 2-->Line_214 $$ totalRead = corpus.capacity()[ FD ]
Line_144 $$ totalRead += 2-->Line_54 $$ validateAgainstCorpus(bytes, offset, length, totalRead)[ FD ]
Line_6 $$ int totalRead = 0-->Line_92 $$ totalRead++[ FD ]
Line_83 $$ totalRead += read-->Line_189 $$ totalRead = corpus.capacity()[ FD ]
Line_293 $$ totalRead = corpus.capacity()-->Line_34 $$ validateAgainstCorpus(bytes, 0, 111, totalRead)[ FD ]
Line_125 $$ boolean threw = false-->Line_237 $$ assertTrue(threw)[ FD ]
Line_137 $$ totalRead = corpus.capacity()-->Line_110 $$ totalRead++[ FD ]
