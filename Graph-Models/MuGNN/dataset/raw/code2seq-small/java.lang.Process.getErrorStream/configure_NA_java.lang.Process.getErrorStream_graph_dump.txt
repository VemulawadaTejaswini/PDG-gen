Line_2 $$ public void configure(JobConf job) -->Line_15 $$ setStreamJobDetails(job)[ FD ]
Line_4 $$ String argv = getPipeCommand(job)-->Line_16 $$ String[] argvSplit = splitArgs(argv)[ FD ]
Line_41 $$ Environment childEnv = (Environment) StreamUtil.env().clone()-->Line_42 $$ addJobConfToEnvironment(job_, childEnv)[ FD ]
Line_41 $$ Environment childEnv = (Environment) StreamUtil.env().clone()-->Line_48 $$ builder.environment().putAll(childEnv.toMap())[ FD ]
Line_34 $$ File f = finder.getAbsolutePath(argvSplit[0])-->Line_36 $$ argvSplit[0] = f.getAbsolutePath()[ FD ]
Line_34 $$ File f = finder.getAbsolutePath(argvSplit[0])-->Line_35 $$ if (f != null) [ FD ]
Line_35 $$ if (f != null) -->Line_36 $$ argvSplit[0] = f.getAbsolutePath()[ CD ]
Line_2 $$ public void configure(JobConf job) -->Line_4 $$ String argv = getPipeCommand(job)[ FD ]
Line_34 $$ File f = finder.getAbsolutePath(argvSplit[0])-->Line_38 $$ f = null[ FD ]
Line_2 $$ public void configure(JobConf job) -->Line_5 $$ joinDelay_ = job.getLong("stream.joindelay.milli", 0)[ FD ]
Line_32 $$ PathFinder finder = new PathFinder("PATH")-->Line_33 $$ finder.prependPathComponent(currentDir.toString())[ FD ]
Line_19 $$ if (new File(prog).isAbsolute()) -->Line_22 $$ FileUtil.chmod(new File(currentDir, prog).toString(), "a+x")[ CD ]
Line_13 $$ if (!doPipe_)-->Line_14 $$ return[ CD ]
Line_32 $$ PathFinder finder = new PathFinder("PATH")-->Line_34 $$ File f = finder.getAbsolutePath(argvSplit[0])[ FD ]
Line_18 $$ File currentDir = new File(".").getAbsoluteFile()-->Line_33 $$ finder.prependPathComponent(currentDir.toString())[ FD ]
Line_16 $$ String[] argvSplit = splitArgs(argv)-->Line_40 $$ LOG.info("PipeMapRed exec " + Arrays.asList(argvSplit))[ FD ]
Line_41 $$ Environment childEnv = (Environment) StreamUtil.env().clone()-->Line_43 $$ addEnvironment(childEnv, job_.get("stream.addenvironment"))[ FD ]
