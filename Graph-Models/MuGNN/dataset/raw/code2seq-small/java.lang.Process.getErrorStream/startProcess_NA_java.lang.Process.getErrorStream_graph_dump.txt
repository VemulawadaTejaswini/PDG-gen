Line_4 $$ final Process process = new ProcessBuilder(CommandLineUtil.toCommandLine(commands)).start()-->Line_11 $$ final String explanationMessage = new String(FileUtil.loadBytes(process.getInputStream()))[ FD ]
Line_5 $$ final String message = new String(FileUtil.loadBytes(process.getErrorStream()))-->Line_7 $$ registerJavaFxPackagerError(message)[ FD ]
Line_4 $$ final Process process = new ProcessBuilder(CommandLineUtil.toCommandLine(commands)).start()-->Line_5 $$ final String message = new String(FileUtil.loadBytes(process.getErrorStream()))[ FD ]
Line_4 $$ final Process process = new ProcessBuilder(CommandLineUtil.toCommandLine(commands)).start()-->Line_9 $$ final int result = process.waitFor()[ FD ]
Line_10 $$ if (result != 0) -->Line_12 $$ if (!StringUtil.isEmptyOrSpaces(explanationMessage)) [ CD ]
Line_5 $$ final String message = new String(FileUtil.loadBytes(process.getErrorStream()))-->Line_6 $$ if (!StringUtil.isEmptyOrSpaces(message)) [ FD ]
Line_6 $$ if (!StringUtil.isEmptyOrSpaces(message)) -->Line_7 $$ registerJavaFxPackagerError(message)[ CD ]
Line_2 $$ private int startProcess(List<String> commands) -->Line_4 $$ final Process process = new ProcessBuilder(CommandLineUtil.toCommandLine(commands)).start()[ FD ]
Line_11 $$ final String explanationMessage = new String(FileUtil.loadBytes(process.getInputStream()))-->Line_12 $$ if (!StringUtil.isEmptyOrSpaces(explanationMessage)) [ FD ]
Line_11 $$ final String explanationMessage = new String(FileUtil.loadBytes(process.getInputStream()))-->Line_13 $$ registerJavaFxPackagerError(explanationMessage)[ FD ]
Line_9 $$ final int result = process.waitFor()-->Line_10 $$ if (result != 0) [ FD ]
Line_10 $$ if (result != 0) -->Line_11 $$ final String explanationMessage = new String(FileUtil.loadBytes(process.getInputStream()))[ CD ]
Line_12 $$ if (!StringUtil.isEmptyOrSpaces(explanationMessage)) -->Line_13 $$ registerJavaFxPackagerError(explanationMessage)[ CD ]
