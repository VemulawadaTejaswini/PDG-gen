Line_63 $$ if (localAddresses.isEmpty()) -->Line_64 $$ InetAddress fallback = InetAddress.getByName(null)[ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_30 $$ remoteAddresses.add(candidate)[ FD ]
Line_33 $$ if (isLoopbackInterface) -->Line_41 $$ if (candidate.isLoopbackAddress()) [ CD ]
Line_2 $$ private void init() throws Exception -->Line_85 $$ InetAddress openshiftBindAddress = findOpenshiftAddresses()[ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_34 $$ if (candidate.isLoopbackAddress()) [ FD ]
Line_21 $$ Enumeration<InetAddress> candidates = networkInterface.getInetAddresses()-->Line_22 $$ while (candidates.hasMoreElements()) [ FD ]
Line_25 $$ if (candidate.isLoopbackAddress()) -->Line_29 $$ LOGGER.debug("Adding remote address [ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_36 $$ localAddresses.add(candidate)[ FD ]
Line_2 $$ private void init() throws Exception -->Line_7 $$ Transformer<Boolean, NetworkInterface> multicast = multicast()[ CD ]
Line_25 $$ if (candidate.isLoopbackAddress()) -->Line_26 $$ LOGGER.debug("Adding loopback address [ CD ]
Line_21 $$ Enumeration<InetAddress> candidates = networkInterface.getInetAddresses()-->Line_23 $$ InetAddress candidate = candidates.nextElement()[ FD ]
Line_85 $$ InetAddress openshiftBindAddress = findOpenshiftAddresses()-->Line_88 $$ localAddresses.add(openshiftBindAddress)[ FD ]
Line_24 $$ if (isLoopbackInterface == null) -->Line_25 $$ if (candidate.isLoopbackAddress()) [ CD ]
Line_64 $$ InetAddress fallback = InetAddress.getByName(null)-->Line_65 $$ LOGGER.debug("No loopback addresses, using fallback [ FD ]
Line_86 $$ if (openshiftBindAddress != null) -->Line_90 $$ localBindingAddress = new InetSocketAddress(0).getAddress()[ CD ]
Line_12 $$ while (interfaces.hasMoreElements()) -->Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()[ CD ]
Line_25 $$ if (candidate.isLoopbackAddress()) -->Line_27 $$ localAddresses.add(candidate)[ CD ]
Line_41 $$ if (candidate.isLoopbackAddress()) -->Line_42 $$ LOGGER.debug("Ignoring loopback address on remote interface [ CD ]
Line_33 $$ if (isLoopbackInterface) -->Line_34 $$ if (candidate.isLoopbackAddress()) [ CD ]
Line_51 $$ if (isRemote) -->Line_56 $$ multicastInterfaces.add(networkInterface)[ CD ]
Line_80 $$ Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces()-->Line_82 $$ multicastInterfaces.add(networkInterfaces.nextElement())[ FD ]
Line_81 $$ while (networkInterfaces.hasMoreElements()) -->Line_82 $$ multicastInterfaces.add(networkInterfaces.nextElement())[ CD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_16 $$ Boolean isLoopbackInterface = loopback.transform(networkInterface)[ FD ]
Line_31 $$ isRemote = true-->Line_46 $$ isRemote = true[ FD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_41 $$ if (candidate.isLoopbackAddress()) [ FD ]
Line_34 $$ if (candidate.isLoopbackAddress()) -->Line_35 $$ LOGGER.debug("Adding loopback address [ CD ]
Line_2 $$ private void init() throws Exception -->Line_6 $$ Transformer<Boolean, NetworkInterface> loopback = loopback()[ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_42 $$ LOGGER.debug("Ignoring loopback address on remote interface [ FD ]
Line_80 $$ Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces()-->Line_81 $$ while (networkInterfaces.hasMoreElements()) [ FD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_44 $$ LOGGER.debug("Adding remote address [ FD ]
Line_2 $$ private void init() throws Exception -->Line_68 $$ if (remoteAddresses.isEmpty()) [ CD ]
Line_11 $$ Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()-->Line_12 $$ while (interfaces.hasMoreElements()) [ FD ]
Line_78 $$ if (multicastInterfaces.isEmpty()) -->Line_79 $$ LOGGER.debug("No multicast interfaces, using fallbacks")[ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_29 $$ LOGGER.debug("Adding remote address [ FD ]
Line_85 $$ InetAddress openshiftBindAddress = findOpenshiftAddresses()-->Line_86 $$ if (openshiftBindAddress != null) [ FD ]
Line_86 $$ if (openshiftBindAddress != null) -->Line_88 $$ localAddresses.add(openshiftBindAddress)[ CD ]
Line_2 $$ private void init() throws Exception -->Line_78 $$ if (multicastInterfaces.isEmpty()) [ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_26 $$ LOGGER.debug("Adding loopback address [ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_55 $$ LOGGER.debug("Adding loopback multicast interface [ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_60 $$ throw new RuntimeException(String.format("Could not determine the IP addresses for network interface %s", networkInterface.getName()), e)[ FD ]
Line_7 $$ Transformer<Boolean, NetworkInterface> multicast = multicast()-->Line_18 $$ Boolean isMulticast = multicast.transform(networkInterface)[ FD ]
Line_64 $$ InetAddress fallback = InetAddress.getByName(null)-->Line_66 $$ localAddresses.add(fallback)[ FD ]
Line_78 $$ if (multicastInterfaces.isEmpty()) -->Line_81 $$ while (networkInterfaces.hasMoreElements()) [ CD ]
Line_16 $$ Boolean isLoopbackInterface = loopback.transform(networkInterface)-->Line_17 $$ LOGGER.debug("Is this a loopback interface? [ FD ]
Line_64 $$ InetAddress fallback = InetAddress.getByName(null)-->Line_71 $$ LOGGER.debug("No remote addresses, using fallback [ FD ]
Line_3 $$ if (localAddresses != null) -->Line_4 $$ return[ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_25 $$ if (candidate.isLoopbackAddress()) [ FD ]
Line_34 $$ if (candidate.isLoopbackAddress()) -->Line_38 $$ LOGGER.debug("Ignoring remote address on loopback interface [ CD ]
Line_50 $$ if (!Boolean.FALSE.equals(isMulticast)) -->Line_51 $$ if (isRemote) [ CD ]
Line_25 $$ if (candidate.isLoopbackAddress()) -->Line_30 $$ remoteAddresses.add(candidate)[ CD ]
Line_51 $$ if (isRemote) -->Line_53 $$ multicastInterfaces.add(0, networkInterface)[ CD ]
Line_20 $$ boolean isRemote = false-->Line_46 $$ isRemote = true[ FD ]
Line_2 $$ private void init() throws Exception -->Line_11 $$ Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()[ CD ]
Line_63 $$ if (localAddresses.isEmpty()) -->Line_65 $$ LOGGER.debug("No loopback addresses, using fallback [ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_38 $$ LOGGER.debug("Ignoring remote address on loopback interface [ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_56 $$ multicastInterfaces.add(networkInterface)[ FD ]
Line_24 $$ if (isLoopbackInterface == null) -->Line_33 $$ if (isLoopbackInterface) [ CD ]
Line_25 $$ if (candidate.isLoopbackAddress()) -->Line_31 $$ isRemote = true[ CD ]
Line_41 $$ if (candidate.isLoopbackAddress()) -->Line_45 $$ remoteAddresses.add(candidate)[ CD ]
Line_41 $$ if (candidate.isLoopbackAddress()) -->Line_44 $$ LOGGER.debug("Adding remote address [ CD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_27 $$ localAddresses.add(candidate)[ FD ]
Line_18 $$ Boolean isMulticast = multicast.transform(networkInterface)-->Line_19 $$ LOGGER.debug("Is this a multicast interface? [ FD ]
Line_78 $$ if (multicastInterfaces.isEmpty()) -->Line_80 $$ Enumeration<NetworkInterface> networkInterfaces = NetworkInterface.getNetworkInterfaces()[ CD ]
Line_16 $$ Boolean isLoopbackInterface = loopback.transform(networkInterface)-->Line_24 $$ if (isLoopbackInterface == null) [ FD ]
Line_2 $$ private void init() throws Exception -->Line_3 $$ if (localAddresses != null) [ CD ]
Line_2 $$ private void init() throws Exception -->Line_63 $$ if (localAddresses.isEmpty()) [ CD ]
Line_12 $$ while (interfaces.hasMoreElements()) -->Line_14 $$ LOGGER.debug("Adding IP addresses for network interface [ CD ]
Line_63 $$ if (localAddresses.isEmpty()) -->Line_66 $$ localAddresses.add(fallback)[ CD ]
Line_2 $$ private void init() throws Exception -->Line_12 $$ while (interfaces.hasMoreElements()) [ CD ]
Line_22 $$ while (candidates.hasMoreElements()) -->Line_24 $$ if (isLoopbackInterface == null) [ CD ]
Line_6 $$ Transformer<Boolean, NetworkInterface> loopback = loopback()-->Line_16 $$ Boolean isLoopbackInterface = loopback.transform(networkInterface)[ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_53 $$ multicastInterfaces.add(0, networkInterface)[ FD ]
Line_11 $$ Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces()-->Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()[ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_18 $$ Boolean isMulticast = multicast.transform(networkInterface)[ FD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_45 $$ remoteAddresses.add(candidate)[ FD ]
Line_41 $$ if (candidate.isLoopbackAddress()) -->Line_46 $$ isRemote = true[ CD ]
Line_20 $$ boolean isRemote = false-->Line_31 $$ isRemote = true[ FD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_52 $$ LOGGER.debug("Adding remote multicast interface [ FD ]
Line_18 $$ Boolean isMulticast = multicast.transform(networkInterface)-->Line_50 $$ if (!Boolean.FALSE.equals(isMulticast)) [ FD ]
Line_22 $$ while (candidates.hasMoreElements()) -->Line_23 $$ InetAddress candidate = candidates.nextElement()[ CD ]
Line_2 $$ private void init() throws Exception -->Line_86 $$ if (openshiftBindAddress != null) [ CD ]
Line_64 $$ InetAddress fallback = InetAddress.getByName(null)-->Line_72 $$ remoteAddresses.add(fallback)[ FD ]
Line_23 $$ InetAddress candidate = candidates.nextElement()-->Line_35 $$ LOGGER.debug("Adding loopback address [ FD ]
Line_51 $$ if (isRemote) -->Line_52 $$ LOGGER.debug("Adding remote multicast interface [ CD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_21 $$ Enumeration<InetAddress> candidates = networkInterface.getInetAddresses()[ FD ]
Line_34 $$ if (candidate.isLoopbackAddress()) -->Line_36 $$ localAddresses.add(candidate)[ CD ]
Line_13 $$ NetworkInterface networkInterface = interfaces.nextElement()-->Line_14 $$ LOGGER.debug("Adding IP addresses for network interface [ FD ]
Line_51 $$ if (isRemote) -->Line_55 $$ LOGGER.debug("Adding loopback multicast interface [ CD ]
