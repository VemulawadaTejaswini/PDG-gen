Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_22 $$ return rangeTombstoneWithNewStart(idx++, slice.start())[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx[ CD ]
Line_13 $$ Slice.Bound e = comparator.compare(slice.end(), ends[start]) < 0 ? slice.end() : ends[start]-->Line_14 $$ return Iterators.<RangeTombstone>singletonIterator(rangeTombstoneWithNewBounds(start, s, e))[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_21 $$ if (idx == start && comparator.compare(starts[idx], slice.start()) < 0)[ FD ]
Line_16 $$ return new AbstractIterator<RangeTombstone>() -->Line_21 $$ if (idx == start && comparator.compare(starts[idx], slice.start()) < 0)[ CD ]
Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx-->Line_11 $$ if (start == finish) [ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_16 $$ return new AbstractIterator<RangeTombstone>() [ CD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_24 $$ return rangeTombstoneWithNewEnd(idx++, slice.end())[ FD ]
Line_16 $$ return new AbstractIterator<RangeTombstone>() -->Line_25 $$ return rangeTombstone(idx++)[ CD ]
Line_5 $$ if (start >= size)-->Line_6 $$ return Collections.emptyIterator()[ CD ]
Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx-->Line_14 $$ return Iterators.<RangeTombstone>singletonIterator(rangeTombstoneWithNewBounds(start, s, e))[ FD ]
Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx-->Line_7 $$ int finishIdx = slice.end() == Slice.Bound.TOP ? size - 1 : searchInternal(slice.end(), start, size)[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_5 $$ if (start >= size)[ CD ]
Line_8 $$ final int finish = finishIdx < 0 ? -finishIdx - 2 : finishIdx-->Line_11 $$ if (start == finish) [ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_12 $$ Slice.Bound s = comparator.compare(starts[start], slice.start()) < 0 ? slice.start() : starts[start][ FD ]
Line_11 $$ if (start == finish) -->Line_13 $$ Slice.Bound e = comparator.compare(slice.end(), ends[start]) < 0 ? slice.end() : ends[start][ CD ]
Line_19 $$ if (idx >= size || idx > finish)-->Line_20 $$ return endOfData()[ CD ]
Line_9 $$ if (start > finish)-->Line_10 $$ return Collections.emptyIterator()[ CD ]
Line_16 $$ return new AbstractIterator<RangeTombstone>() -->Line_23 $$ if (idx == finish && comparator.compare(slice.end(), ends[idx]) < 0)[ CD ]
Line_11 $$ if (start == finish) -->Line_14 $$ return Iterators.<RangeTombstone>singletonIterator(rangeTombstoneWithNewBounds(start, s, e))[ CD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_11 $$ if (start == finish) [ CD ]
Line_16 $$ return new AbstractIterator<RangeTombstone>() -->Line_19 $$ if (idx >= size || idx > finish)[ CD ]
Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx-->Line_9 $$ if (start > finish)[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_7 $$ int finishIdx = slice.end() == Slice.Bound.TOP ? size - 1 : searchInternal(slice.end(), start, size)[ CD ]
Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx-->Line_5 $$ if (start >= size)[ FD ]
Line_21 $$ if (idx == start && comparator.compare(starts[idx], slice.start()) < 0)-->Line_22 $$ return rangeTombstoneWithNewStart(idx++, slice.start())[ CD ]
Line_11 $$ if (start == finish) -->Line_12 $$ Slice.Bound s = comparator.compare(starts[start], slice.start()) < 0 ? slice.start() : starts[start][ CD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_23 $$ if (idx == finish && comparator.compare(slice.end(), ends[idx]) < 0)[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_7 $$ int finishIdx = slice.end() == Slice.Bound.TOP ? size - 1 : searchInternal(slice.end(), start, size)[ FD ]
Line_8 $$ final int finish = finishIdx < 0 ? -finishIdx - 2 : finishIdx-->Line_9 $$ if (start > finish)[ FD ]
Line_12 $$ Slice.Bound s = comparator.compare(starts[start], slice.start()) < 0 ? slice.start() : starts[start]-->Line_14 $$ return Iterators.<RangeTombstone>singletonIterator(rangeTombstoneWithNewBounds(start, s, e))[ FD ]
Line_7 $$ int finishIdx = slice.end() == Slice.Bound.TOP ? size - 1 : searchInternal(slice.end(), start, size)-->Line_8 $$ final int finish = finishIdx < 0 ? -finishIdx - 2 : finishIdx[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_13 $$ Slice.Bound e = comparator.compare(slice.end(), ends[start]) < 0 ? slice.end() : ends[start][ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_8 $$ final int finish = finishIdx < 0 ? -finishIdx - 2 : finishIdx[ CD ]
Line_23 $$ if (idx == finish && comparator.compare(slice.end(), ends[idx]) < 0)-->Line_24 $$ return rangeTombstoneWithNewEnd(idx++, slice.end())[ CD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_3 $$ int startIdx = slice.start() == Slice.Bound.BOTTOM ? 0 : searchInternal(slice.start(), 0, size)[ CD ]
Line_3 $$ int startIdx = slice.start() == Slice.Bound.BOTTOM ? 0 : searchInternal(slice.start(), 0, size)-->Line_4 $$ final int start = startIdx < 0 ? -startIdx - 1 : startIdx[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_3 $$ int startIdx = slice.start() == Slice.Bound.BOTTOM ? 0 : searchInternal(slice.start(), 0, size)[ FD ]
Line_2 $$ private Iterator<RangeTombstone> forwardIterator(final Slice slice) -->Line_9 $$ if (start > finish)[ CD ]
