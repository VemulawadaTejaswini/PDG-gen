Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_3 $$ if (ring.isEmpty())[ FD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_5 $$ final boolean insertMin = includeMin && !ring.get(0).isMinimum()[ CD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_15 $$ return ring.get(j)[ FD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_3 $$ if (ring.isEmpty())[ CD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_7 $$ return new AbstractIterator<Token>() [ CD ]
Line_19 $$ j = insertMin ? -1 : 0-->Line_20 $$ if (j == startIndex)[ FD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_18 $$ if (j == ring.size())[ FD ]
Line_10 $$ if (j < -1)-->Line_11 $$ return endOfData()[ CD ]
Line_13 $$ if (j == -1)-->Line_14 $$ return start.getPartitioner().getMinimumToken()[ CD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_6 $$ final int startIndex = firstTokenIndex(ring, start, insertMin)[ CD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_14 $$ return start.getPartitioner().getMinimumToken()[ FD ]
Line_7 $$ return new AbstractIterator<Token>() -->Line_10 $$ if (j < -1)[ CD ]
Line_6 $$ final int startIndex = firstTokenIndex(ring, start, insertMin)-->Line_20 $$ if (j == startIndex)[ FD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_4 $$ return includeMin ? Iterators.singletonIterator(start.getPartitioner().getMinimumToken()) : Collections.emptyIterator()[ FD ]
Line_3 $$ if (ring.isEmpty())-->Line_4 $$ return includeMin ? Iterators.singletonIterator(start.getPartitioner().getMinimumToken()) : Collections.emptyIterator()[ CD ]
Line_19 $$ j = insertMin ? -1 : 0-->Line_21 $$ j = -2[ FD ]
Line_18 $$ if (j == ring.size())-->Line_19 $$ j = insertMin ? -1 : 0[ CD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_5 $$ final boolean insertMin = includeMin && !ring.get(0).isMinimum()[ FD ]
Line_20 $$ if (j == startIndex)-->Line_21 $$ j = -2[ CD ]
Line_5 $$ final boolean insertMin = includeMin && !ring.get(0).isMinimum()-->Line_6 $$ final int startIndex = firstTokenIndex(ring, start, insertMin)[ FD ]
Line_2 $$ public static Iterator<Token> ringIterator(final ArrayList<Token> ring, Token start, boolean includeMin) -->Line_6 $$ final int startIndex = firstTokenIndex(ring, start, insertMin)[ FD ]
