Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_72 $$ while (iter.hasNext()) iter.next()[ CD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_46 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ FD ]
Line_30 $$ if (mergedData != null || input != null) -->Line_32 $$ if (column.isSimple()) [ CD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_40 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_50 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_15 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_16 $$ inputIterators.add(merged.iterator())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_44 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_69 $$ Arrays.fill(inputDatas, null)[ CD ]
Line_15 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() [ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_44 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_9 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()-->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_6 $$ for (int i = 0; i < inputs.length; i++) [ CD ]
Line_41 $$ if (inputData == null) -->Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())[ CD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_59 $$ while (mergedCells.hasNext()) diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_60 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_40 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_28 $$ for (int i = 0; i != inputDatas.length; i++) [ CD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_33 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_4 $$ LivenessInfo mergedInfo = merged.primaryKeyLivenessInfo().isEmpty() ? null : merged.primaryKeyLivenessInfo()-->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_41 $$ if (inputData == null) -->Line_50 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ CD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_40 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_33 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_16 $$ inputIterators.add(merged.iterator())[ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_44 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_54 $$ if (cmp < 0)-->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_4 $$ LivenessInfo mergedInfo = merged.primaryKeyLivenessInfo().isEmpty() ? null : merged.primaryKeyLivenessInfo()[ FD ]
Line_22 $$ if (idx == 0)-->Line_25 $$ inputDatas[idx - 1] = current[ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_7 $$ Row input = inputs[i]-->Line_8 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_54 $$ if (cmp < 0)-->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ CD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_33 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_9 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()[ CD ]
Line_50 $$ while (mergedCells.hasNext() && inputCells.hasNext()) -->Line_52 $$ if (cmp == 0)[ CD ]
Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_32 $$ if (column.isSimple()) [ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_5 $$ Row.Deletion mergedDeletion = merged.deletion().isLive() ? null : merged.deletion()[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_30 $$ if (mergedData != null || input != null) [ CD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_42 $$ if (!mergedData.complexDeletion().isLive())[ FD ]
Line_7 $$ Row input = inputs[i]-->Line_9 $$ Row.Deletion inputDeletion = input == null || input.deletion().isLive() ? null : input.deletion()[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_3 $$ Clustering clustering = merged.clustering()[ FD ]
Line_30 $$ if (mergedData != null || input != null) -->Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column[ CD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_65 $$ return null[ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() [ CD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_59 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_41 $$ if (inputData == null) -->Line_60 $$ while (inputCells.hasNext()) diffListener.onCell(i, clustering, null, inputCells.next())[ CD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_42 $$ if (!mergedData.complexDeletion().isLive())-->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ CD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_40 $$ diffListener.onCell(i, clustering, null, inputCell)[ FD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_37 $$ if (mergedData == null) [ FD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_41 $$ if (inputData == null) [ FD ]
Line_52 $$ if (cmp == 0)-->Line_54 $$ if (cmp < 0)[ CD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_4 $$ LivenessInfo mergedInfo = merged.primaryKeyLivenessInfo().isEmpty() ? null : merged.primaryKeyLivenessInfo()[ CD ]
Line_32 $$ if (column.isSimple()) -->Line_33 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_32 $$ if (column.isSimple()) -->Line_37 $$ if (mergedData == null) [ CD ]
Line_8 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()-->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_12 $$ if (mergedDeletion != null || inputDeletion != null)-->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ CD ]
Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())[ FD ]
Line_15 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)-->Line_17 $$ inputIterators.add(row == null ? Collections.emptyIterator() : row.iterator())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_10 $$ if (mergedInfo != null || inputInfo != null)[ CD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_60 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_59 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_3 $$ Clustering clustering = merged.clustering()[ CD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_59 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_50 $$ while (mergedCells.hasNext() && inputCells.hasNext()) -->Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ CD ]
Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_43 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), null)[ FD ]
Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())-->Line_54 $$ if (cmp < 0)[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_28 $$ for (int i = 0; i != inputDatas.length; i++) [ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ FD ]
Line_41 $$ if (inputData == null) -->Line_42 $$ if (!mergedData.complexDeletion().isLive())[ CD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_60 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_38 $$ if (!inputData.complexDeletion().isLive())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_8 $$ LivenessInfo inputInfo = input == null || input.primaryKeyLivenessInfo().isEmpty() ? null : input.primaryKeyLivenessInfo()[ CD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_38 $$ if (!inputData.complexDeletion().isLive())-->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ CD ]
Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())-->Line_52 $$ if (cmp == 0)[ FD ]
Line_46 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())-->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ CD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_46 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ FD ]
Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())-->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_59 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_37 $$ if (mergedData == null) -->Line_41 $$ if (inputData == null) [ CD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_72 $$ iter.next()[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_29 $$ ColumnData input = inputDatas[i][ CD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_60 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_60 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_32 $$ if (column.isSimple()) -->Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input[ CD ]
Line_32 $$ if (column.isSimple()) -->Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData[ CD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_7 $$ Row input = inputs[i][ CD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_55 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_41 $$ if (inputData == null) -->Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())[ CD ]
Line_41 $$ if (inputData == null) -->Line_59 $$ while (mergedCells.hasNext()) diffListener.onCell(i, clustering, mergedCells.next(), null)[ CD ]
Line_5 $$ Row.Deletion mergedDeletion = merged.deletion().isLive() ? null : merged.deletion()-->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_60 $$ while (inputCells.hasNext()) diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_22 $$ if (idx == 0)[ FD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_48 $$ PeekingIterator<Cell> mergedCells = Iterators.peekingIterator(mergedData.iterator())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_57 $$ diffListener.onCell(i, clustering, null, inputCells.next())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_72 $$ while (iter.hasNext()) iter.next()[ FD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_16 $$ inputIterators.add(merged.iterator())[ FD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_12 $$ if (mergedDeletion != null || inputDeletion != null)[ CD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_51 $$ int cmp = column.cellPathComparator().compare(mergedCells.peek().path(), inputCells.peek().path())[ FD ]
Line_52 $$ if (cmp == 0)-->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ CD ]
Line_37 $$ if (mergedData == null) -->Line_38 $$ if (!inputData.complexDeletion().isLive())[ CD ]
Line_6 $$ for (int i = 0; i < inputs.length; i++) -->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_5 $$ Row.Deletion mergedDeletion = merged.deletion().isLive() ? null : merged.deletion()[ CD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_59 $$ diffListener.onCell(i, clustering, mergedCells.next(), null)[ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_13 $$ diffListener.onDeletion(i, clustering, mergedDeletion, inputDeletion)[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_31 $$ ColumnDefinition column = (mergedData != null ? mergedData : input).column-->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_35 $$ ComplexColumnData mergedData = (ComplexColumnData) this.mergedData-->Line_47 $$ diffListener.onComplexDeletion(i, clustering, column, mergedData.complexDeletion(), inputData.complexDeletion())[ FD ]
Line_28 $$ for (int i = 0; i != inputDatas.length; i++) -->Line_33 $$ diffListener.onCell(i, clustering, (Cell) mergedData, (Cell) input)[ FD ]
Line_49 $$ PeekingIterator<Cell> inputCells = Iterators.peekingIterator(inputData.iterator())-->Line_50 $$ while (mergedCells.hasNext() && inputCells.hasNext()) [ FD ]
Line_2 $$ public static void diff(RowDiffListener diffListener, Row merged, Row... inputs) -->Line_15 $$ List<Iterator<ColumnData>> inputIterators = new ArrayList(1 + inputs.length)[ CD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_44 $$ diffListener.onCell(i, clustering, mergedCell, null)[ FD ]
Line_10 $$ if (mergedInfo != null || inputInfo != null)-->Line_11 $$ diffListener.onPrimaryKeyLivenessInfo(i, clustering, mergedInfo, inputInfo)[ CD ]
Line_41 $$ if (inputData == null) -->Line_46 $$ if (!mergedData.complexDeletion().isLive() || !inputData.complexDeletion().isLive())[ CD ]
Line_36 $$ ComplexColumnData inputData = (ComplexColumnData) input-->Line_39 $$ diffListener.onComplexDeletion(i, clustering, column, null, inputData.complexDeletion())[ FD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_22 $$ if (idx == 0)[ CD ]
Line_18 $$ Iterator<?> iter = MergeIterator.get(inputIterators, ColumnData.comparator, new MergeIterator.Reducer<ColumnData, Object>() -->Line_25 $$ inputDatas[idx - 1] = current[ FD ]
Line_3 $$ Clustering clustering = merged.clustering()-->Line_53 $$ diffListener.onCell(i, clustering, mergedCells.next(), inputCells.next())[ FD ]
