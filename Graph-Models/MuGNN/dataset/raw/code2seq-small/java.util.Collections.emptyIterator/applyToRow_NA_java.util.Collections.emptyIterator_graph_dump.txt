Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) -->Line_11 $$ Cell staticCell = staticCells.peek()[ CD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_19 $$ builder.addCell(Cells.reconcile(makeDynamicCell(staticCells.next()), dynamicCells.next(), nowInSec))[ FD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_22 $$ while (dynamicCells.hasNext()) builder.addCell(dynamicCells.next())[ FD ]
Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) -->Line_12 $$ Cell dynamicCell = dynamicCells.peek()[ CD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_21 $$ builder.addCell(makeDynamicCell(staticCells.next()))[ FD ]
Line_7 $$ ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn)-->Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())[ FD ]
Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) -->Line_14 $$ if (cmp < 0)[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())[ CD ]
Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) -->Line_13 $$ int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0))[ CD ]
Line_16 $$ if (cmp > 0)-->Line_19 $$ builder.addCell(Cells.reconcile(makeDynamicCell(staticCells.next()), dynamicCells.next(), nowInSec))[ CD ]
Line_13 $$ int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0))-->Line_16 $$ if (cmp > 0)[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_6 $$ builder.newRow(row.clustering())[ FD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) [ FD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_12 $$ Cell dynamicCell = dynamicCells.peek()[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_7 $$ ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn)[ FD ]
Line_11 $$ Cell staticCell = staticCells.peek()-->Line_13 $$ int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0))[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_9 $$ builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion())[ CD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_17 $$ builder.addCell(dynamicCells.next())[ FD ]
Line_4 $$ if (!staticCells.hasNext())-->Line_5 $$ return row[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_23 $$ return builder.build()[ CD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_21 $$ while (staticCells.hasNext()) builder.addCell(makeDynamicCell(staticCells.next()))[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_7 $$ ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn)[ CD ]
Line_14 $$ if (cmp < 0)-->Line_16 $$ if (cmp > 0)[ CD ]
Line_12 $$ Cell dynamicCell = dynamicCells.peek()-->Line_13 $$ int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0))[ FD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_15 $$ builder.addCell(makeDynamicCell(staticCells.next()))[ FD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_19 $$ builder.addCell(Cells.reconcile(makeDynamicCell(staticCells.next()), dynamicCells.next(), nowInSec))[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))[ FD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_11 $$ Cell staticCell = staticCells.peek()[ FD ]
Line_14 $$ if (cmp < 0)-->Line_15 $$ builder.addCell(makeDynamicCell(staticCells.next()))[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_6 $$ builder.newRow(row.clustering())[ CD ]
Line_13 $$ int cmp = columnComparator.compare(staticCell.column().name.bytes, dynamicCell.path().get(0))-->Line_14 $$ if (cmp < 0)[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_4 $$ if (!staticCells.hasNext())[ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_4 $$ if (!staticCells.hasNext())[ CD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_4 $$ if (!staticCells.hasNext())[ FD ]
Line_16 $$ if (cmp > 0)-->Line_17 $$ builder.addCell(dynamicCells.next())[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_21 $$ while (staticCells.hasNext()) builder.addCell(makeDynamicCell(staticCells.next()))[ CD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_22 $$ while (dynamicCells.hasNext()) builder.addCell(dynamicCells.next())[ CD ]
Line_8 $$ PeekingIterator<Cell> dynamicCells = Iterators.peekingIterator(complexData == null ? Collections.<Cell>emptyIterator() : complexData.iterator())-->Line_22 $$ builder.addCell(dynamicCells.next())[ FD ]
Line_7 $$ ComplexColumnData complexData = row.getComplexColumnData(superColumnMapColumn)-->Line_9 $$ builder.addComplexDeletion(superColumnMapColumn, complexData.complexDeletion())[ FD ]
Line_3 $$ PeekingIterator<Cell> staticCells = Iterators.peekingIterator(simpleCellsIterator(row))-->Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) [ FD ]
Line_2 $$ public Row applyToRow(Row row) -->Line_10 $$ while (staticCells.hasNext() && dynamicCells.hasNext()) [ CD ]
