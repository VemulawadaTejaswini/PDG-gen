Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_8 $$ arguments.add(exeName)[ FD ]
Line_34 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(clientProcess, CharsetToolkit.getDefaultSystemCharset(), StringUtil.join(arguments, " "))-->Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)[ FD ]
Line_36 $$ if (myTraceClient || result.isTimeout()) -->Line_42 $$ final String err = result.getStderr().trim()[ CD ]
Line_3 $$ final List<String> arguments = new ArrayList<String>()-->Line_6 $$ arguments.add(client.toString())[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_18 $$ if (workingDir != null) [ FD ]
Line_26 $$ final OutputStream outputStream = clientProcess.getOutputStream()-->Line_29 $$ outputStream.write(bytes)[ FD ]
Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)-->Line_37 $$ LOG.debug("*** result: " + result.getExitCode())[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_19 $$ builder.directory(workingDir)[ FD ]
Line_4 $$ final File client = new File(myClientBinaryPath, SystemInfo.isWindows ? exeName + ".exe" : exeName)-->Line_5 $$ if (client.exists()) [ FD ]
Line_4 $$ final File client = new File(myClientBinaryPath, SystemInfo.isWindows ? exeName + ".exe" : exeName)-->Line_6 $$ arguments.add(client.toString())[ FD ]
Line_24 $$ final Process clientProcess = builder.start()-->Line_26 $$ final OutputStream outputStream = clientProcess.getOutputStream()[ FD ]
Line_47 $$ if (result.isTimeout()) -->Line_48 $$ String processList = LogUtil.getProcessList()[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_28 $$ final byte[] bytes = stdin.getBytes()[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_34 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(clientProcess, CharsetToolkit.getDefaultSystemCharset(), StringUtil.join(arguments, " "))[ CD ]
Line_3 $$ final List<String> arguments = new ArrayList<String>()-->Line_34 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(clientProcess, CharsetToolkit.getDefaultSystemCharset(), StringUtil.join(arguments, " "))[ FD ]
Line_47 $$ if (result.isTimeout()) -->Line_49 $$ handler.destroyProcess()[ CD ]
Line_36 $$ if (myTraceClient || result.isTimeout()) -->Line_37 $$ LOG.debug("*** result: " + result.getExitCode())[ CD ]
Line_43 $$ if (err.length() > 0) -->Line_44 $$ LOG.debug("*** error:\n" + err)[ CD ]
Line_5 $$ if (client.exists()) -->Line_6 $$ arguments.add(client.toString())[ CD ]
Line_36 $$ if (myTraceClient || result.isTimeout()) -->Line_39 $$ if (out.length() > 0) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_52 $$ return result[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_10 $$ Collections.addAll(arguments, commandLine)[ FD ]
Line_18 $$ if (workingDir != null) -->Line_19 $$ builder.directory(workingDir)[ CD ]
Line_21 $$ if (myClientEnvironment != null) -->Line_22 $$ builder.environment().putAll(myClientEnvironment)[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_11 $$ if (myTraceClient) [ CD ]
Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)-->Line_36 $$ if (myTraceClient || result.isTimeout()) [ FD ]
Line_3 $$ final List<String> arguments = new ArrayList<String>()-->Line_17 $$ final ProcessBuilder builder = new ProcessBuilder().command(arguments)[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_47 $$ if (result.isTimeout()) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_5 $$ if (client.exists()) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_10 $$ Collections.addAll(arguments, commandLine)[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_25 $$ if (stdin != null) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_25 $$ if (stdin != null) [ FD ]
Line_13 $$ if (StringUtil.isNotEmpty(stdin)) -->Line_14 $$ LOG.info("*** stdin:\n" + stdin)[ CD ]
Line_3 $$ final List<String> arguments = new ArrayList<String>()-->Line_10 $$ Collections.addAll(arguments, commandLine)[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_4 $$ final File client = new File(myClientBinaryPath, SystemInfo.isWindows ? exeName + ".exe" : exeName)[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_3 $$ final List<String> arguments = new ArrayList<String>()[ CD ]
Line_17 $$ final ProcessBuilder builder = new ProcessBuilder().command(arguments)-->Line_19 $$ builder.directory(workingDir)[ FD ]
Line_36 $$ if (myTraceClient || result.isTimeout()) -->Line_38 $$ final String out = result.getStdout().trim()[ CD ]
Line_3 $$ final List<String> arguments = new ArrayList<String>()-->Line_8 $$ arguments.add(exeName)[ FD ]
Line_38 $$ final String out = result.getStdout().trim()-->Line_39 $$ if (out.length() > 0) [ FD ]
Line_39 $$ if (out.length() > 0) -->Line_40 $$ LOG.debug("*** output:\n" + out)[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_18 $$ if (workingDir != null) [ CD ]
Line_42 $$ final String err = result.getStderr().trim()-->Line_43 $$ if (err.length() > 0) [ FD ]
Line_17 $$ final ProcessBuilder builder = new ProcessBuilder().command(arguments)-->Line_22 $$ builder.environment().putAll(myClientEnvironment)[ FD ]
Line_17 $$ final ProcessBuilder builder = new ProcessBuilder().command(arguments)-->Line_24 $$ final Process clientProcess = builder.start()[ FD ]
Line_25 $$ if (stdin != null) -->Line_26 $$ final OutputStream outputStream = clientProcess.getOutputStream()[ CD ]
Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)-->Line_47 $$ if (result.isTimeout()) [ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_13 $$ if (StringUtil.isNotEmpty(stdin)) [ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)[ CD ]
Line_34 $$ final CapturingProcessHandler handler = new CapturingProcessHandler(clientProcess, CharsetToolkit.getDefaultSystemCharset(), StringUtil.join(arguments, " "))-->Line_49 $$ handler.destroyProcess()[ FD ]
Line_11 $$ if (myTraceClient) -->Line_13 $$ if (StringUtil.isNotEmpty(stdin)) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_24 $$ final Process clientProcess = builder.start()[ CD ]
Line_28 $$ final byte[] bytes = stdin.getBytes()-->Line_29 $$ outputStream.write(bytes)[ FD ]
Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)-->Line_42 $$ final String err = result.getStderr().trim()[ FD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_17 $$ final ProcessBuilder builder = new ProcessBuilder().command(arguments)[ CD ]
Line_26 $$ final OutputStream outputStream = clientProcess.getOutputStream()-->Line_31 $$ outputStream.close()[ FD ]
Line_36 $$ if (myTraceClient || result.isTimeout()) -->Line_43 $$ if (err.length() > 0) [ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_36 $$ if (myTraceClient || result.isTimeout()) [ CD ]
Line_11 $$ if (myTraceClient) -->Line_12 $$ LOG.info("*** running:\n" + arguments)[ CD ]
Line_2 $$ public ProcessOutput runClient(@NotNull String exeName, @Nullable String stdin, @Nullable final File workingDir, String... commandLine) throws IOException -->Line_21 $$ if (myClientEnvironment != null) [ CD ]
Line_35 $$ final ProcessOutput result = handler.runProcess(100 * 1000, false)-->Line_38 $$ final String out = result.getStdout().trim()[ FD ]
Line_5 $$ if (client.exists()) -->Line_8 $$ arguments.add(exeName)[ CD ]
