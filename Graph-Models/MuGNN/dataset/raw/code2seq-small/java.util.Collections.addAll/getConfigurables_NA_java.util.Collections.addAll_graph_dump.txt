Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_69 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ CD ]
Line_54 $$ for (OptionDescription id : optionIds) -->Line_55 $$ ids.add(id.getConfigurableId())[ FD ]
Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_50 $$ contentHits.clear()[ FD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_33 $$ hits.getNameFullHits().add(each)[ FD ]
Line_7 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_41 $$ Collections.addAll(options, components)[ FD ]
Line_36 $$ final Set<Configurable> currentConfigurables = new HashSet<Configurable>(contentHits)-->Line_74 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) [ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_19 $$ final String displayName = each.getDisplayName().toLowerCase()[ FD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_22 $$ hits.getNameFullHits().add(each)[ FD ]
Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_10 $$ contentHits.addAll(SearchUtil.expandGroup(group))[ FD ]
Line_19 $$ final String displayName = each.getDisplayName().toLowerCase()-->Line_20 $$ final List<String> allWords = StringUtil.getWordsIn(displayName)[ FD ]
Line_31 $$ if (options.isEmpty()) -->Line_32 $$ hits.getNameHits().add(each)[ CD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()[ FD ]
Line_53 $$ final Set<String> ids = new HashSet<String>()-->Line_55 $$ ids.add(id.getConfigurableId())[ FD ]
Line_53 $$ final Set<String> ids = new HashSet<String>()-->Line_60 $$ helpIds.retainAll(ids)[ FD ]
Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) [ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_27 $$ hits.getNameHits().add(each)[ FD ]
Line_46 $$ Set<String> helpIds = null-->Line_58 $$ helpIds = ids[ FD ]
Line_47 $$ for (String opt : options) -->Line_48 $$ final Set<OptionDescription> optionIds = getAcceptableDescriptions(opt)[ FD ]
Line_58 $$ helpIds = ids-->Line_60 $$ helpIds.retainAll(ids)[ FD ]
Line_64 $$ Configurable configurable = it.next()-->Line_65 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) [ FD ]
Line_46 $$ Set<String> helpIds = null-->Line_57 $$ if (helpIds == null) [ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_23 $$ hits.getNameHits().add(each)[ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_22 $$ hits.getNameFullHits().add(each)[ FD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_23 $$ hits.getNameHits().add(each)[ FD ]
Line_21 $$ if (displayName.contains(optionToCheck)) -->Line_22 $$ hits.getNameFullHits().add(each)[ CD ]
Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_74 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) [ FD ]
Line_46 $$ Set<String> helpIds = null-->Line_60 $$ helpIds.retainAll(ids)[ FD ]
Line_9 $$ for (ConfigurableGroup group : groups) -->Line_10 $$ contentHits.addAll(SearchUtil.expandGroup(group))[ FD ]
Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_64 $$ Configurable configurable = it.next()[ FD ]
Line_48 $$ final Set<OptionDescription> optionIds = getAcceptableDescriptions(opt)-->Line_49 $$ if (optionIds == null) [ FD ]
Line_15 $$ String optionToCheck = option.trim().toLowerCase()-->Line_21 $$ if (displayName.contains(optionToCheck)) [ FD ]
Line_15 $$ String optionToCheck = option.trim().toLowerCase()-->Line_26 $$ if (eachWord.startsWith(optionToCheck)) [ FD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_32 $$ hits.getNameHits().add(each)[ FD ]
Line_62 $$ if (helpIds != null) -->Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) [ CD ]
Line_49 $$ if (optionIds == null) -->Line_51 $$ return hits[ CD ]
Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_70 $$ it.remove()[ FD ]
Line_40 $$ if (components.length > 0) -->Line_41 $$ Collections.addAll(options, components)[ CD ]
Line_40 $$ if (components.length > 0) -->Line_43 $$ options.add(option)[ CD ]
Line_46 $$ Set<String> helpIds = null-->Line_69 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ FD ]
Line_58 $$ helpIds = ids-->Line_62 $$ if (helpIds != null) [ FD ]
Line_7 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_37 $$ if (options.isEmpty()) [ FD ]
Line_5 $$ final ConfigurableHit hits = new ConfigurableHit()-->Line_27 $$ hits.getNameHits().add(each)[ FD ]
Line_6 $$ final Set<Configurable> contentHits = hits.getContentHits()-->Line_13 $$ contentHits.addAll(configurables)[ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_17 $$ if (each.getDisplayName() == null)[ FD ]
Line_58 $$ helpIds = ids-->Line_69 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) [ FD ]
Line_26 $$ if (eachWord.startsWith(optionToCheck)) -->Line_27 $$ hits.getNameHits().add(each)[ CD ]
Line_49 $$ if (optionIds == null) -->Line_50 $$ contentHits.clear()[ CD ]
Line_57 $$ if (helpIds == null) -->Line_58 $$ helpIds = ids[ CD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_33 $$ hits.getNameFullHits().add(each)[ FD ]
Line_46 $$ Set<String> helpIds = null-->Line_62 $$ if (helpIds != null) [ FD ]
Line_21 $$ if (displayName.contains(optionToCheck)) -->Line_23 $$ hits.getNameHits().add(each)[ CD ]
Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_64 $$ Configurable configurable = it.next()[ CD ]
Line_7 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_43 $$ options.add(option)[ FD ]
Line_31 $$ if (options.isEmpty()) -->Line_33 $$ hits.getNameFullHits().add(each)[ CD ]
Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_65 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) [ CD ]
Line_65 $$ if (CodeStyleFacade.getInstance(project).isUnsuitableCodeStyleConfigurable(configurable)) -->Line_66 $$ it.remove()[ CD ]
Line_69 $$ if (!(configurable instanceof SearchableConfigurable && helpIds.contains(((SearchableConfigurable) configurable).getId()))) -->Line_70 $$ it.remove()[ CD ]
Line_7 $$ Set<String> options = getProcessedWordsWithoutStemming(option)-->Line_31 $$ if (options.isEmpty()) [ FD ]
Line_37 $$ if (options.isEmpty()) -->Line_40 $$ if (components.length > 0) [ CD ]
Line_53 $$ final Set<String> ids = new HashSet<String>()-->Line_58 $$ helpIds = ids[ FD ]
Line_63 $$ for (Iterator<Configurable> it = contentHits.iterator(); it.hasNext(); ) -->Line_66 $$ it.remove()[ FD ]
Line_74 $$ if (currentConfigurables.equals(contentHits) && !(configurables == null && type == DocumentEvent.EventType.CHANGE)) -->Line_75 $$ return getConfigurables(groups, DocumentEvent.EventType.CHANGE, null, option, project)[ CD ]
Line_8 $$ if (configurables == null) -->Line_13 $$ contentHits.addAll(configurables)[ CD ]
Line_25 $$ for (String eachWord : allWords) -->Line_26 $$ if (eachWord.startsWith(optionToCheck)) [ FD ]
Line_16 $$ for (Configurable each : contentHits) -->Line_32 $$ hits.getNameHits().add(each)[ FD ]
Line_19 $$ final String displayName = each.getDisplayName().toLowerCase()-->Line_21 $$ if (displayName.contains(optionToCheck)) [ FD ]
