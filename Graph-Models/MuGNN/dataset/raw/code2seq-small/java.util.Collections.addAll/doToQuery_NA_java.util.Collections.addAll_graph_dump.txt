Line_9 $$ typesForQuery = context.queryTypes()-->Line_14 $$ Collections.addAll(typesForQuery, types)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_18 $$ return query[ CD ]
Line_4 $$ if (this.ids.isEmpty()) -->Line_8 $$ if (types.length == 0) [ CD ]
Line_7 $$ Collection<String> typesForQuery-->Line_9 $$ typesForQuery = context.queryTypes()[ FD ]
Line_7 $$ Collection<String> typesForQuery-->Line_13 $$ typesForQuery = new HashSet()[ FD ]
Line_10 $$ if (types.length == 1 && MetaData.ALL.equals(types[0])) -->Line_11 $$ typesForQuery = context.getMapperService().types()[ CD ]
Line_4 $$ if (this.ids.isEmpty()) -->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ CD ]
Line_10 $$ if (types.length == 1 && MetaData.ALL.equals(types[0])) -->Line_14 $$ Collections.addAll(typesForQuery, types)[ CD ]
Line_7 $$ Collection<String> typesForQuery-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_11 $$ typesForQuery = context.getMapperService().types()[ FD ]
Line_11 $$ typesForQuery = context.getMapperService().types()-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_9 $$ typesForQuery = context.queryTypes()[ FD ]
Line_3 $$ Query query-->Line_5 $$ query = Queries.newMatchNoDocsQuery()[ FD ]
Line_8 $$ if (types.length == 0) -->Line_10 $$ if (types.length == 1 && MetaData.ALL.equals(types[0])) [ CD ]
Line_9 $$ typesForQuery = context.queryTypes()-->Line_13 $$ typesForQuery = new HashSet()[ FD ]
Line_8 $$ if (types.length == 0) -->Line_9 $$ typesForQuery = context.queryTypes()[ CD ]
Line_7 $$ Collection<String> typesForQuery-->Line_11 $$ typesForQuery = context.getMapperService().types()[ FD ]
Line_11 $$ typesForQuery = context.getMapperService().types()-->Line_13 $$ typesForQuery = new HashSet()[ FD ]
Line_4 $$ if (this.ids.isEmpty()) -->Line_7 $$ Collection<String> typesForQuery[ CD ]
Line_4 $$ if (this.ids.isEmpty()) -->Line_5 $$ query = Queries.newMatchNoDocsQuery()[ CD ]
Line_10 $$ if (types.length == 1 && MetaData.ALL.equals(types[0])) -->Line_13 $$ typesForQuery = new HashSet()[ CD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_3 $$ Query query[ CD ]
Line_9 $$ typesForQuery = context.queryTypes()-->Line_11 $$ typesForQuery = context.getMapperService().types()[ FD ]
Line_13 $$ typesForQuery = new HashSet()-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_7 $$ Collection<String> typesForQuery-->Line_14 $$ Collections.addAll(typesForQuery, types)[ FD ]
Line_5 $$ query = Queries.newMatchNoDocsQuery()-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_11 $$ typesForQuery = context.getMapperService().types()-->Line_14 $$ Collections.addAll(typesForQuery, types)[ FD ]
Line_9 $$ typesForQuery = context.queryTypes()-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_3 $$ Query query-->Line_16 $$ query = new TermsQuery(UidFieldMapper.NAME, Uid.createUidsForTypesAndIds(typesForQuery, ids))[ FD ]
Line_13 $$ typesForQuery = new HashSet()-->Line_14 $$ Collections.addAll(typesForQuery, types)[ FD ]
Line_2 $$ protected Query doToQuery(QueryShardContext context) throws IOException -->Line_4 $$ if (this.ids.isEmpty()) [ CD ]
