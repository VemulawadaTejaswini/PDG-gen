Line_4 $$ List<Class<?>> queue = new ArrayList<Class<?>>()-->Line_18 $$ Collections.addAll(queue, current.getInterfaces())[ FD ]
Line_9 $$ while (!queue.isEmpty()) -->Line_14 $$ if (!current.equals(type)) [ CD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_8 $$ Collections.addAll(queue, superClasses(type))[ FD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_8 $$ Collections.addAll(queue, superClasses(type))[ CD ]
Line_9 $$ while (!queue.isEmpty()) -->Line_18 $$ Collections.addAll(queue, current.getInterfaces())[ CD ]
Line_10 $$ Class<?> current = queue.remove(0)-->Line_18 $$ Collections.addAll(queue, current.getInterfaces())[ FD ]
Line_9 $$ while (!queue.isEmpty()) -->Line_11 $$ if (!seen.add(current)) [ CD ]
Line_10 $$ Class<?> current = queue.remove(0)-->Line_11 $$ if (!seen.add(current)) [ FD ]
Line_4 $$ List<Class<?>> queue = new ArrayList<Class<?>>()-->Line_10 $$ Class<?> current = queue.remove(0)[ FD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_9 $$ while (!queue.isEmpty()) [ CD ]
Line_10 $$ Class<?> current = queue.remove(0)-->Line_17 $$ inspectClass(current, classDetails)[ FD ]
Line_10 $$ Class<?> current = queue.remove(0)-->Line_15 $$ classDetails.superType(current)[ FD ]
Line_10 $$ Class<?> current = queue.remove(0)-->Line_14 $$ if (!current.equals(type)) [ FD ]
Line_3 $$ Set<Class<?>> seen = new HashSet<Class<?>>()-->Line_11 $$ if (!seen.add(current)) [ FD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_14 $$ if (!current.equals(type)) [ FD ]
Line_14 $$ if (!current.equals(type)) -->Line_15 $$ classDetails.superType(current)[ CD ]
Line_4 $$ List<Class<?>> queue = new ArrayList<Class<?>>()-->Line_8 $$ Collections.addAll(queue, superClasses(type))[ FD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_4 $$ List<Class<?>> queue = new ArrayList<Class<?>>()[ CD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_3 $$ Set<Class<?>> seen = new HashSet<Class<?>>()[ CD ]
Line_4 $$ List<Class<?>> queue = new ArrayList<Class<?>>()-->Line_9 $$ while (!queue.isEmpty()) [ FD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_15 $$ classDetails.superType(current)[ FD ]
Line_9 $$ while (!queue.isEmpty()) -->Line_10 $$ Class<?> current = queue.remove(0)[ CD ]
Line_2 $$ private static void visitGraph(Class<?> type, MutableClassDetails classDetails) -->Line_17 $$ inspectClass(current, classDetails)[ FD ]
Line_9 $$ while (!queue.isEmpty()) -->Line_17 $$ inspectClass(current, classDetails)[ CD ]
