Line_7 $$ final Set<File> classFiles = new HashSet<File>()-->Line_45 $$ classFiles.add(child)[ FD ]
Line_15 $$ final String packageVmName = packageFQName.replace('.', '/')-->Line_22 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ FD ]
Line_16 $$ final List<File> children = new ArrayList<File>()-->Line_24 $$ Collections.addAll(children, testDir.listFiles())[ FD ]
Line_9 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()-->Line_11 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_11 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))-->Line_12 $$ return classFiles[ CD ]
Line_17 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)-->Line_19 $$ Collections.addAll(children, vDir.listFiles())[ FD ]
Line_18 $$ if (vDir != null && vDir.exists()) -->Line_19 $$ Collections.addAll(children, vDir.listFiles())[ CD ]
Line_34 $$ final String className = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_37 $$ return psiClass.getName()[ CD ]
Line_41 $$ if (FileUtilRt.extensionEquals(child.getName(), StdFileTypes.CLASS.getDefaultExtension())) -->Line_43 $$ if (//class or inner[ CD ]
Line_8 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()-->Line_17 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)[ FD ]
Line_8 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()-->Line_11 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_22 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)-->Line_24 $$ Collections.addAll(children, testDir.listFiles())[ FD ]
Line_22 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)-->Line_23 $$ if (testDir != null && testDir.exists()) [ FD ]
Line_14 $$ final String packageFQName = getPackageName(srcFile)-->Line_15 $$ final String packageVmName = packageFQName.replace('.', '/')[ FD ]
Line_16 $$ final List<File> children = new ArrayList<File>()-->Line_19 $$ Collections.addAll(children, vDir.listFiles())[ FD ]
Line_27 $$ final PsiClass[] classes = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>() -->Line_30 $$ return ((PsiClassOwner) srcFile).getClasses()[ CD ]
Line_9 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()-->Line_22 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ FD ]
Line_21 $$ if (suite.isTrackTestFolders()) -->Line_23 $$ if (testDir != null && testDir.exists()) [ CD ]
Line_4 $$ if (module == null) -->Line_5 $$ return Collections.emptySet()[ CD ]
Line_41 $$ if (FileUtilRt.extensionEquals(child.getName(), StdFileTypes.CLASS.getDefaultExtension())) -->Line_42 $$ final String childName = FileUtil.getNameWithoutExtension(child)[ CD ]
Line_23 $$ if (testDir != null && testDir.exists()) -->Line_24 $$ Collections.addAll(children, testDir.listFiles())[ CD ]
Line_7 $$ final Set<File> classFiles = new HashSet<File>()-->Line_11 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_10 $$ for (JavaCoverageEngineExtension extension : Extensions.getExtensions(JavaCoverageEngineExtension.EP_NAME)) -->Line_11 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_43 $$ if (//class or inner-->Line_45 $$ classFiles.add(child)[ CD ]
Line_21 $$ if (suite.isTrackTestFolders()) -->Line_22 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ CD ]
Line_15 $$ final String packageVmName = packageFQName.replace('.', '/')-->Line_17 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)[ FD ]
Line_17 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)-->Line_18 $$ if (vDir != null && vDir.exists()) [ FD ]
