Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_16 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)[ CD ]
Line_8 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()-->Line_21 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_7 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()[ FD ]
Line_15 $$ final List<File> children = new ArrayList<File>()-->Line_23 $$ Collections.addAll(children, testDir.listFiles())[ FD ]
Line_38 $$ if (FileUtilRt.extensionEquals(child.getName(), StdFileTypes.CLASS.getDefaultExtension())) -->Line_40 $$ if (childName.equals(className) || childName.startsWith(className) && childName.charAt(className.length()) == '$') [ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_17 $$ if (vDir != null && vDir.exists()) -->Line_18 $$ Collections.addAll(children, vDir.listFiles())[ CD ]
Line_14 $$ final String packageVmName = packageFQName.replace('.', '/')-->Line_16 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)[ FD ]
Line_8 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()-->Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_20 $$ if (suite.isTrackTestFolders()) -->Line_22 $$ if (testDir != null && testDir.exists()) [ CD ]
Line_21 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)-->Line_23 $$ Collections.addAll(children, testDir.listFiles())[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_13 $$ final String packageFQName = getPackageName(srcFile)[ FD ]
Line_22 $$ if (testDir != null && testDir.exists()) -->Line_23 $$ Collections.addAll(children, testDir.listFiles())[ CD ]
Line_26 $$ final PsiClass[] classes = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>() -->Line_28 $$ return ((PsiClassOwner) srcFile).getClasses()[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_15 $$ final List<File> children = new ArrayList<File>()[ CD ]
Line_40 $$ if (childName.equals(className) || childName.startsWith(className) && childName.charAt(className.length()) == '$') -->Line_42 $$ classFiles.add(child)[ CD ]
Line_9 $$ for (JavaCoverageEngineExtension extension : Extensions.getExtensions(JavaCoverageEngineExtension.EP_NAME)) -->Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))-->Line_11 $$ return classFiles[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_20 $$ if (suite.isTrackTestFolders()) [ FD ]
Line_13 $$ final String packageFQName = getPackageName(srcFile)-->Line_14 $$ final String packageVmName = packageFQName.replace('.', '/')[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_14 $$ final String packageVmName = packageFQName.replace('.', '/')[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_8 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()[ CD ]
Line_3 $$ if (module == null) -->Line_4 $$ return Collections.emptySet()[ CD ]
Line_32 $$ final String className = ApplicationManager.getApplication().runReadAction(new Computable<String>() -->Line_34 $$ return psiClass.getName()[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_8 $$ final VirtualFile testOutputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPathForTests()[ FD ]
Line_16 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)-->Line_18 $$ Collections.addAll(children, vDir.listFiles())[ FD ]
Line_6 $$ final Set<File> classFiles = new HashSet<File>()-->Line_42 $$ classFiles.add(child)[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_7 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_13 $$ final String packageFQName = getPackageName(srcFile)[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_3 $$ if (module == null) [ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_6 $$ final Set<File> classFiles = new HashSet<File>()[ CD ]
Line_14 $$ final String packageVmName = packageFQName.replace('.', '/')-->Line_21 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ FD ]
Line_20 $$ if (suite.isTrackTestFolders()) -->Line_21 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)[ CD ]
Line_21 $$ final File testDir = testOutputpath == null ? null : packageVmName.length() > 0 ? new File(testOutputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(testOutputpath)-->Line_22 $$ if (testDir != null && testDir.exists()) [ FD ]
Line_7 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()-->Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_20 $$ if (suite.isTrackTestFolders()) [ CD ]
Line_6 $$ final Set<File> classFiles = new HashSet<File>()-->Line_10 $$ if (extension.collectOutputFiles(srcFile, outputpath, testOutputpath, suite, classFiles))[ FD ]
Line_16 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)-->Line_17 $$ if (vDir != null && vDir.exists()) [ FD ]
Line_38 $$ if (FileUtilRt.extensionEquals(child.getName(), StdFileTypes.CLASS.getDefaultExtension())) -->Line_39 $$ final String childName = FileUtil.getNameWithoutExtension(child)[ CD ]
Line_7 $$ final VirtualFile outputpath = CompilerModuleExtension.getInstance(module).getCompilerOutputPath()-->Line_16 $$ final File vDir = outputpath == null ? null : packageVmName.length() > 0 ? new File(outputpath.getPath() + File.separator + packageVmName) : VfsUtilCore.virtualToIoFile(outputpath)[ FD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_26 $$ final PsiClass[] classes = ApplicationManager.getApplication().runReadAction(new Computable<PsiClass[]>() [ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_47 $$ return classFiles[ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_3 $$ if (module == null) [ CD ]
Line_2 $$ public Set<File> getCorrespondingOutputFiles(@NotNull final PsiFile srcFile, @Nullable final Module module, @NotNull final CoverageSuitesBundle suite) -->Line_17 $$ if (vDir != null && vDir.exists()) [ CD ]
Line_15 $$ final List<File> children = new ArrayList<File>()-->Line_18 $$ Collections.addAll(children, vDir.listFiles())[ FD ]
