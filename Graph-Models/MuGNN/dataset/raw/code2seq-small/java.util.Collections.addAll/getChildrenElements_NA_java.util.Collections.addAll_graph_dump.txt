Line_5 $$ final T typedElement = PyUtil.as(element, expectedClass)-->Line_7 $$ result.add(typedElement)[ FD ]
Line_4 $$ for (final PsiElement element : myPsiElements) -->Line_9 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)[ FD ]
Line_2 $$ public <T extends PsiElement> List<T> getChildrenElements(@NotNull final Class<T> expectedClass) -->Line_9 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)[ FD ]
Line_3 $$ final List<T> result = new ArrayList<T>()-->Line_11 $$ Collections.addAll(result, children)[ FD ]
Line_5 $$ final T typedElement = PyUtil.as(element, expectedClass)-->Line_6 $$ if (typedElement != null) [ FD ]
Line_6 $$ if (typedElement != null) -->Line_7 $$ result.add(typedElement)[ CD ]
Line_6 $$ if (typedElement != null) -->Line_9 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)[ CD ]
Line_4 $$ for (final PsiElement element : myPsiElements) -->Line_5 $$ final T typedElement = PyUtil.as(element, expectedClass)[ FD ]
Line_6 $$ if (typedElement != null) -->Line_10 $$ if (children != null) [ CD ]
Line_9 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)-->Line_10 $$ if (children != null) [ FD ]
Line_2 $$ public <T extends PsiElement> List<T> getChildrenElements(@NotNull final Class<T> expectedClass) -->Line_3 $$ final List<T> result = new ArrayList<T>()[ CD ]
Line_10 $$ if (children != null) -->Line_11 $$ Collections.addAll(result, children)[ CD ]
Line_3 $$ final List<T> result = new ArrayList<T>()-->Line_7 $$ result.add(typedElement)[ FD ]
Line_2 $$ public <T extends PsiElement> List<T> getChildrenElements(@NotNull final Class<T> expectedClass) -->Line_15 $$ return result[ CD ]
Line_2 $$ public <T extends PsiElement> List<T> getChildrenElements(@NotNull final Class<T> expectedClass) -->Line_5 $$ final T typedElement = PyUtil.as(element, expectedClass)[ FD ]
Line_9 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)-->Line_11 $$ Collections.addAll(result, children)[ FD ]
