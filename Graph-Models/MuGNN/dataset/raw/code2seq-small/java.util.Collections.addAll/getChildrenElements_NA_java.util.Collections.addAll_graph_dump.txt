Line_13 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)-->Line_15 $$ Collections.addAll(result, children)[ FD ]
Line_10 $$ if (typedElement != null) -->Line_11 $$ result.add(typedElement)[ CD ]
Line_10 $$ if (typedElement != null) -->Line_13 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)[ CD ]
Line_14 $$ if (children != null) -->Line_15 $$ Collections.addAll(result, children)[ CD ]
Line_9 $$ final T typedElement = PyUtil.as(element, expectedClass)-->Line_10 $$ if (typedElement != null) [ FD ]
Line_7 $$ final List<T> result = new ArrayList<T>()-->Line_15 $$ Collections.addAll(result, children)[ FD ]
Line_10 $$ if (typedElement != null) -->Line_14 $$ if (children != null) [ CD ]
Line_13 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)-->Line_14 $$ if (children != null) [ FD ]
Line_9 $$ final T typedElement = PyUtil.as(element, expectedClass)-->Line_11 $$ result.add(typedElement)[ FD ]
Line_8 $$ for (final PsiElement element : myPsiElements) -->Line_13 $$ final T[] children = PsiTreeUtil.getChildrenOfType(element, expectedClass)[ FD ]
Line_7 $$ final List<T> result = new ArrayList<T>()-->Line_11 $$ result.add(typedElement)[ FD ]
Line_8 $$ for (final PsiElement element : myPsiElements) -->Line_9 $$ final T typedElement = PyUtil.as(element, expectedClass)[ FD ]
