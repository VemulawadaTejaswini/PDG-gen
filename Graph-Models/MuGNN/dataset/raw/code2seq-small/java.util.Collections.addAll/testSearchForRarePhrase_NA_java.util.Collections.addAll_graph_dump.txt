Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_8 $$ NumShards test = getNumShards("test")[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_22 $$ assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_11 $$ for (int i = 0; i < 8; i++) [ CD ]
Line_9 $$ List<String> phrases = new ArrayList()-->Line_12 $$ phrases.add("noble somethingelse" + i)[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("nobel prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))-->Line_22 $$ assertSuggestionSize(searchSuggest, 0, 0, "simple_phrase")[ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_10 $$ Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_5 $$ XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store", "yes").field("termVector", "with_positions_offsets").endObject().startObject("properties").startObject("body").field("type", "string").field("analyzer", "body").endObject().endObject().endObject().endObject()[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_20 $$ refresh()[ CD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("nobel prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))-->Line_24 $$ assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")[ FD ]
Line_21 $$ Suggest searchSuggest = searchSuggest("nobel prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))-->Line_23 $$ searchSuggest = searchSuggest("noble prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))[ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_9 $$ List<String> phrases = new ArrayList()[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_3 $$ int chafPerShard = 100[ CD ]
Line_9 $$ List<String> phrases = new ArrayList()-->Line_15 $$ phrases.add("chaff" + i)[ FD ]
Line_4 $$ CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.body.tokenizer", "standard").putArray("index.analysis.analyzer.body.filter", "lowercase", "my_shingle").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", true).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 2))-->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ FD ]
Line_14 $$ for (int i = 0; i < test.numPrimaries * chafPerShard; i++) -->Line_15 $$ phrases.add("chaff" + i)[ CD ]
Line_17 $$ for (String phrase : phrases) -->Line_18 $$ index("test", "type1", phrase, "body", phrase)[ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_23 $$ searchSuggest = searchSuggest("noble prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_7 $$ ensureGreen()[ CD ]
Line_9 $$ List<String> phrases = new ArrayList()-->Line_10 $$ Collections.addAll(phrases, "nobel prize", "noble gases", "somethingelse prize", "pride and joy", "notes are fun")[ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_14 $$ for (int i = 0; i < test.numPrimaries * chafPerShard; i++) [ CD ]
Line_11 $$ for (int i = 0; i < 8; i++) -->Line_14 $$ for (int i = 0; i < test.numPrimaries * chafPerShard; i++) [ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_24 $$ assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")[ CD ]
Line_23 $$ searchSuggest = searchSuggest("noble prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))-->Line_24 $$ assertSuggestion(searchSuggest, 0, 0, "simple_phrase", "nobel prize")[ FD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_4 $$ CreateIndexRequestBuilder builder = prepareCreate("test").setSettings(settingsBuilder().put(indexSettings()).put("index.analysis.analyzer.body.tokenizer", "standard").putArray("index.analysis.analyzer.body.filter", "lowercase", "my_shingle").put("index.analysis.filter.my_shingle.type", "shingle").put("index.analysis.filter.my_shingle.output_unigrams", true).put("index.analysis.filter.my_shingle.min_shingle_size", 2).put("index.analysis.filter.my_shingle.max_shingle_size", 2))[ CD ]
Line_2 $$ public void testSearchForRarePhrase() throws IOException -->Line_21 $$ Suggest searchSuggest = searchSuggest("nobel prize", phraseSuggestion("simple_phrase").field("body").addCandidateGenerator(PhraseSuggestionBuilder.candidateGenerator("body").minWordLength(1).suggestMode("always").maxTermFreq(.99f)).confidence(2f).maxErrors(5f).size(1))[ CD ]
Line_5 $$ XContentBuilder mapping = XContentFactory.jsonBuilder().startObject().startObject("type1").startObject("_all").field("store", "yes").field("termVector", "with_positions_offsets").endObject().startObject("properties").startObject("body").field("type", "string").field("analyzer", "body").endObject().endObject().endObject().endObject()-->Line_6 $$ assertAcked(builder.addMapping("type1", mapping))[ FD ]
Line_11 $$ for (int i = 0; i < 8; i++) -->Line_12 $$ phrases.add("noble somethingelse" + i)[ CD ]
