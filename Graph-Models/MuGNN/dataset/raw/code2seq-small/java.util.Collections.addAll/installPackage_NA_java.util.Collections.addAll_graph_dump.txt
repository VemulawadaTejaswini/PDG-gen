Line_25 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_27 $$ listener.operationStarted(packageName)[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_30 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ FD ]
Line_3 $$ final String packageName = repoPackage.getName()-->Line_27 $$ listener.operationStarted(packageName)[ FD ]
Line_19 $$ final PyRequirement req-->Line_23 $$ req = new PyRequirement(packageName)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_20 $$ if (version != null) [ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_5 $$ final List<String> extraArgs = new ArrayList<String>()[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_3 $$ final String packageName = repoPackage.getName()[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_3 $$ final String packageName = repoPackage.getName()[ CD ]
Line_12 $$ if (!StringUtil.isEmptyOrSpaces(repository)) -->Line_13 $$ extraArgs.add("--extra-index-url")[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_25 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() [ CD ]
Line_16 $$ if (forceUpgrade) -->Line_17 $$ extraArgs.add("-U")[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_4 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_20 $$ if (version != null) [ CD ]
Line_25 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_30 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ FD ]
Line_25 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_25 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_30 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ CD ]
Line_19 $$ final PyRequirement req-->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_9 $$ if (extraOptions != null) -->Line_10 $$ Collections.addAll(extraArgs, extraOptions.split(" +"))[ CD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_14 $$ extraArgs.add(repository)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_9 $$ if (extraOptions != null) [ CD ]
Line_23 $$ req = new PyRequirement(packageName)-->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_20 $$ if (version != null) -->Line_23 $$ req = new PyRequirement(packageName)[ CD ]
Line_4 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()-->Line_12 $$ if (!StringUtil.isEmptyOrSpaces(repository)) [ FD ]
Line_3 $$ final String packageName = repoPackage.getName()-->Line_30 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_9 $$ if (extraOptions != null) [ FD ]
Line_21 $$ req = new PyRequirement(packageName, version)-->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_10 $$ Collections.addAll(extraArgs, extraOptions.split(" +"))[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_19 $$ final PyRequirement req[ CD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_7 $$ extraArgs.add(PyPackageManager.USE_USER_SITE)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_16 $$ if (forceUpgrade) [ CD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_17 $$ extraArgs.add("-U")[ FD ]
Line_19 $$ final PyRequirement req-->Line_21 $$ req = new PyRequirement(packageName, version)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_12 $$ if (!StringUtil.isEmptyOrSpaces(repository)) [ CD ]
Line_20 $$ if (version != null) -->Line_21 $$ req = new PyRequirement(packageName, version)[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_6 $$ if (installToUser) [ CD ]
Line_21 $$ req = new PyRequirement(packageName, version)-->Line_23 $$ req = new PyRequirement(packageName)[ FD ]
Line_12 $$ if (!StringUtil.isEmptyOrSpaces(repository)) -->Line_14 $$ extraArgs.add(repository)[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_27 $$ listener.operationStarted(packageName)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_10 $$ Collections.addAll(extraArgs, extraOptions.split(" +"))[ FD ]
Line_6 $$ if (installToUser) -->Line_7 $$ extraArgs.add(PyPackageManager.USE_USER_SITE)[ CD ]
Line_5 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_13 $$ extraArgs.add("--extra-index-url")[ FD ]
Line_4 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()-->Line_14 $$ extraArgs.add(repository)[ FD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_33 $$ ui.install(Collections.singletonList(req), extraArgs)[ CD ]
Line_2 $$ public void installPackage(final RepoPackage repoPackage, String version, boolean forceUpgrade, String extraOptions, final Listener listener, boolean installToUser) -->Line_4 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()[ FD ]
