Line_23 $$ req = new PyRequirement(packageName, version)-->Line_39 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_4 $$ final String packageName = repoPackage.getName()-->Line_36 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ FD ]
Line_25 $$ req = new PyRequirement(packageName)-->Line_39 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_6 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_15 $$ extraArgs.add("--extra-index-url")[ FD ]
Line_27 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_36 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ CD ]
Line_22 $$ if (version != null) -->Line_23 $$ req = new PyRequirement(packageName, version)[ CD ]
Line_6 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_8 $$ extraArgs.add(PyPackageManager.USE_USER_SITE)[ FD ]
Line_14 $$ if (!StringUtil.isEmptyOrSpaces(repository)) -->Line_15 $$ extraArgs.add("--extra-index-url")[ CD ]
Line_27 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_36 $$ listener.operationFinished(packageName, toErrorDescription(exceptions, mySdk))[ FD ]
Line_6 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_39 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_14 $$ if (!StringUtil.isEmptyOrSpaces(repository)) -->Line_16 $$ extraArgs.add(repository)[ CD ]
Line_23 $$ req = new PyRequirement(packageName, version)-->Line_25 $$ req = new PyRequirement(packageName)[ FD ]
Line_21 $$ final PyRequirement req-->Line_25 $$ req = new PyRequirement(packageName)[ FD ]
Line_5 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()-->Line_16 $$ extraArgs.add(repository)[ FD ]
Line_7 $$ if (installToUser) -->Line_8 $$ extraArgs.add(PyPackageManager.USE_USER_SITE)[ CD ]
Line_21 $$ final PyRequirement req-->Line_23 $$ req = new PyRequirement(packageName, version)[ FD ]
Line_6 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_19 $$ extraArgs.add("-U")[ FD ]
Line_18 $$ if (forceUpgrade) -->Line_19 $$ extraArgs.add("-U")[ CD ]
Line_27 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_31 $$ listener.operationStarted(packageName)[ CD ]
Line_22 $$ if (version != null) -->Line_25 $$ req = new PyRequirement(packageName)[ CD ]
Line_4 $$ final String packageName = repoPackage.getName()-->Line_31 $$ listener.operationStarted(packageName)[ FD ]
Line_27 $$ final PyPackageManagerUI ui = new PyPackageManagerUI(myProject, mySdk, new PyPackageManagerUI.Listener() -->Line_39 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_5 $$ final String repository = PyPIPackageUtil.PYPI_URL.equals(repoPackage.getRepoUrl()) ? null : repoPackage.getRepoUrl()-->Line_14 $$ if (!StringUtil.isEmptyOrSpaces(repository)) [ FD ]
Line_21 $$ final PyRequirement req-->Line_39 $$ ui.install(Collections.singletonList(req), extraArgs)[ FD ]
Line_6 $$ final List<String> extraArgs = new ArrayList<String>()-->Line_16 $$ extraArgs.add(repository)[ FD ]
