Line_11 $$ if (moduleScope != null && psiFacade.findClass(qualifiedName, moduleScope) == null) -->Line_12 $$ toRemove.add(qualifiedName)[ CD ]
Line_3 $$ Set<String> toRemove = new HashSet<String>()-->Line_12 $$ toRemove.add(qualifiedName)[ FD ]
Line_18 $$ PsiAnnotation psiAnnotation = modifierList.findAnnotation(fqn)-->Line_20 $$ psiAnnotation.delete()[ FD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_9 $$ String[] annotations2Remove = handler.annotationsToRemove(project, qualifiedName)[ FD ]
Line_6 $$ String qualifiedName = annotation.getQualifiedName()-->Line_11 $$ if (moduleScope != null && psiFacade.findClass(qualifiedName, moduleScope) == null) [ FD ]
Line_8 $$ for (OverrideImplementsAnnotationsHandler handler : Extensions.getExtensions(OverrideImplementsAnnotationsHandler.EP_NAME)) -->Line_9 $$ String[] annotations2Remove = handler.annotationsToRemove(project, qualifiedName)[ FD ]
Line_4 $$ JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)-->Line_11 $$ if (moduleScope != null && psiFacade.findClass(qualifiedName, moduleScope) == null) [ FD ]
Line_9 $$ String[] annotations2Remove = handler.annotationsToRemove(project, qualifiedName)-->Line_10 $$ Collections.addAll(toRemove, annotations2Remove)[ FD ]
Line_6 $$ String qualifiedName = annotation.getQualifiedName()-->Line_7 $$ if (qualifiedName != null) [ FD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_5 $$ for (PsiAnnotation annotation : modifierList.getAnnotations()) [ FD ]
Line_3 $$ Set<String> toRemove = new HashSet<String>()-->Line_10 $$ Collections.addAll(toRemove, annotations2Remove)[ FD ]
Line_5 $$ for (PsiAnnotation annotation : modifierList.getAnnotations()) -->Line_6 $$ String qualifiedName = annotation.getQualifiedName()[ FD ]
Line_19 $$ if (psiAnnotation != null) -->Line_20 $$ psiAnnotation.delete()[ CD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_3 $$ Set<String> toRemove = new HashSet<String>()[ CD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_18 $$ PsiAnnotation psiAnnotation = modifierList.findAnnotation(fqn)[ FD ]
Line_17 $$ for (String fqn : toRemove) -->Line_18 $$ PsiAnnotation psiAnnotation = modifierList.findAnnotation(fqn)[ FD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_4 $$ JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ CD ]
Line_6 $$ String qualifiedName = annotation.getQualifiedName()-->Line_9 $$ String[] annotations2Remove = handler.annotationsToRemove(project, qualifiedName)[ FD ]
Line_6 $$ String qualifiedName = annotation.getQualifiedName()-->Line_12 $$ toRemove.add(qualifiedName)[ FD ]
Line_18 $$ PsiAnnotation psiAnnotation = modifierList.findAnnotation(fqn)-->Line_19 $$ if (psiAnnotation != null) [ FD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_11 $$ if (moduleScope != null && psiFacade.findClass(qualifiedName, moduleScope) == null) [ FD ]
Line_2 $$ private static void filterAnnotations(Project project, PsiModifierList modifierList, GlobalSearchScope moduleScope) -->Line_4 $$ JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ FD ]
