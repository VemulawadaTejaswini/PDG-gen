Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_3 $$ if (numPrompts == 0) [ FD ]
Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)-->Line_14 $$ if (result == null) [ FD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_8 $$ Collections.addAll(vPrompts, prompt)[ CD ]
Line_10 $$ for (boolean e : echo) -->Line_11 $$ vEcho.add(e)[ FD ]
Line_14 $$ if (result == null) -->Line_18 $$ return rc[ CD ]
Line_14 $$ if (result == null) -->Line_20 $$ return ArrayUtilRt.toStringArray(result)[ CD ]
Line_7 $$ Vector<String> vPrompts = new Vector<String>(prompt.length)-->Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)[ FD ]
Line_9 $$ Vector<Boolean> vEcho = new Vector<Boolean>(prompt.length)-->Line_11 $$ vEcho.add(e)[ FD ]
Line_14 $$ if (result == null) -->Line_17 $$ Arrays.fill(rc, "")[ CD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_8 $$ Collections.addAll(vPrompts, prompt)[ FD ]
Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)-->Line_20 $$ return ArrayUtilRt.toStringArray(result)[ FD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_3 $$ if (numPrompts == 0) [ CD ]
Line_7 $$ Vector<String> vPrompts = new Vector<String>(prompt.length)-->Line_8 $$ Collections.addAll(vPrompts, prompt)[ FD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_14 $$ if (result == null) [ CD ]
Line_9 $$ Vector<Boolean> vEcho = new Vector<Boolean>(prompt.length)-->Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)[ FD ]
Line_16 $$ String[] rc = new String[numPrompts]-->Line_17 $$ Arrays.fill(rc, "")[ FD ]
Line_3 $$ if (numPrompts == 0) -->Line_4 $$ return ArrayUtilRt.EMPTY_STRING_ARRAY[ CD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)[ CD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_13 $$ final Vector<String> result = myXmlRpcClient.replyToChallenge(myHandlerNo, getUserHostString(), name, instruction, numPrompts, vPrompts, vEcho, myLastError)[ FD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_7 $$ Vector<String> vPrompts = new Vector<String>(prompt.length)[ CD ]
Line_2 $$ public String[] replyToChallenge(final String name, final String instruction, final int numPrompts, final String[] prompt, final boolean[] echo) throws Exception -->Line_9 $$ Vector<Boolean> vEcho = new Vector<Boolean>(prompt.length)[ CD ]
Line_14 $$ if (result == null) -->Line_16 $$ String[] rc = new String[numPrompts][ CD ]
