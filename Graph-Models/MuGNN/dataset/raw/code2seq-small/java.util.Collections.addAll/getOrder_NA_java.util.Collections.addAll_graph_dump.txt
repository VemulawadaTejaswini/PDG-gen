Line_11 $$ Class<?> c = clazz.getSuperclass()-->Line_12 $$ if (c != null) [ FD ]
Line_6 $$ Class<?> clazz = toCheck.poll()-->Line_11 $$ Class<?> c = clazz.getSuperclass()[ FD ]
Line_8 $$ if (annotation != null) -->Line_9 $$ return annotation.value()[ CD ]
Line_2 $$ private int getOrder(@NotNull Object o) -->Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()[ CD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_8 $$ if (annotation != null) [ CD ]
Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()-->Line_6 $$ Class<?> clazz = toCheck.poll()[ FD ]
Line_7 $$ Order annotation = clazz.getAnnotation(Order.class)-->Line_8 $$ if (annotation != null) [ FD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_12 $$ if (c != null) [ CD ]
Line_2 $$ private int getOrder(@NotNull Object o) -->Line_4 $$ toCheck.add(o.getClass())[ CD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_11 $$ Class<?> c = clazz.getSuperclass()[ CD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_15 $$ Class<?>[] interfaces = clazz.getInterfaces()[ CD ]
Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()-->Line_5 $$ while (!toCheck.isEmpty()) [ FD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_7 $$ Order annotation = clazz.getAnnotation(Order.class)[ CD ]
Line_2 $$ private int getOrder(@NotNull Object o) -->Line_5 $$ while (!toCheck.isEmpty()) [ CD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_16 $$ Collections.addAll(toCheck, interfaces)[ CD ]
Line_7 $$ Order annotation = clazz.getAnnotation(Order.class)-->Line_9 $$ return annotation.value()[ FD ]
Line_15 $$ Class<?>[] interfaces = clazz.getInterfaces()-->Line_16 $$ Collections.addAll(toCheck, interfaces)[ FD ]
Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()-->Line_13 $$ toCheck.add(c)[ FD ]
Line_2 $$ private int getOrder(@NotNull Object o) -->Line_18 $$ return ExternalSystemConstants.UNORDERED[ CD ]
Line_5 $$ while (!toCheck.isEmpty()) -->Line_6 $$ Class<?> clazz = toCheck.poll()[ CD ]
Line_6 $$ Class<?> clazz = toCheck.poll()-->Line_7 $$ Order annotation = clazz.getAnnotation(Order.class)[ FD ]
Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()-->Line_16 $$ Collections.addAll(toCheck, interfaces)[ FD ]
Line_2 $$ private int getOrder(@NotNull Object o) -->Line_4 $$ toCheck.add(o.getClass())[ FD ]
Line_6 $$ Class<?> clazz = toCheck.poll()-->Line_15 $$ Class<?>[] interfaces = clazz.getInterfaces()[ FD ]
Line_3 $$ Queue<Class<?>> toCheck = new ArrayDeque<Class<?>>()-->Line_4 $$ toCheck.add(o.getClass())[ FD ]
Line_11 $$ Class<?> c = clazz.getSuperclass()-->Line_13 $$ toCheck.add(c)[ FD ]
Line_12 $$ if (c != null) -->Line_13 $$ toCheck.add(c)[ CD ]
