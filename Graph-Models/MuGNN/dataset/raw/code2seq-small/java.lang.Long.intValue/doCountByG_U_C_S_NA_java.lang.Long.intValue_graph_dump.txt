Line_23 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_26 $$ qPos.add(userId)[ FD ]
Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_31 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_22 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)-->Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))[ FD ]
Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_31 $$ Iterator<Long> itr = q.iterate()-->Line_33 $$ Long count = itr.next()[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_7 $$ if (userId <= 0) [ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_10 $$ if (ArrayUtil.isEmpty(categoryIds)) [ FD ]
Line_23 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_24 $$ qPos.add(groupId)[ FD ]
Line_18 $$ if (inlineSQLHelper) -->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ CD ]
Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_23 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))[ FD ]
Line_15 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")[ CD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_25 $$ if (userId > 0) [ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))-->Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")[ FD ]
Line_5 $$ session = openSession()-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)[ FD ]
Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_24 $$ qPos.add(groupId)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)-->Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")[ FD ]
Line_28 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_29 $$ qPos.add(status)[ CD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)[ FD ]
Line_32 $$ if (itr.hasNext()) -->Line_34 $$ if (count != null) [ CD ]
Line_5 $$ session = openSession()-->Line_42 $$ closeSession(session)[ FD ]
Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_29 $$ qPos.add(status)[ FD ]
Line_33 $$ Long count = itr.next()-->Line_34 $$ if (count != null) [ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_28 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_3 $$ Session session = null-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_10 $$ if (ArrayUtil.isEmpty(categoryIds)) -->Line_11 $$ sql = StringUtil.replace(sql, "(currentMessage.categoryId = ?) AND", StringPool.BLANK)[ CD ]
Line_32 $$ if (itr.hasNext()) -->Line_33 $$ Long count = itr.next()[ CD ]
Line_33 $$ Long count = itr.next()-->Line_35 $$ return count.intValue()[ FD ]
Line_23 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_29 $$ qPos.add(status)[ FD ]
Line_34 $$ if (count != null) -->Line_35 $$ return count.intValue()[ CD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))[ FD ]
Line_3 $$ Session session = null-->Line_42 $$ closeSession(session)[ FD ]
Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")[ FD ]
Line_25 $$ if (userId > 0) -->Line_26 $$ qPos.add(userId)[ CD ]
Line_10 $$ if (ArrayUtil.isEmpty(categoryIds)) -->Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))[ CD ]
Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_31 $$ Iterator<Long> itr = q.iterate()-->Line_32 $$ if (itr.hasNext()) [ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_21 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)[ FD ]
Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_7 $$ if (userId <= 0) -->Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)[ CD ]
Line_8 $$ sql = StringUtil.replace(sql, _USER_ID_SQL, StringPool.BLANK)-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_26 $$ qPos.add(userId)[ FD ]
Line_13 $$ sql = StringUtil.replace(sql, "currentMessage.categoryId = ?", "currentMessage.categoryId = " + StringUtil.merge(categoryIds, " OR currentMessage.categoryId = "))-->Line_19 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "currentMessage.rootMessageId", groupId)[ FD ]
Line_2 $$ protected int doCountByG_U_C_S(long groupId, long userId, long[] categoryIds, int status, boolean inlineSQLHelper) -->Line_15 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_6 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C_S)-->Line_16 $$ sql = CustomSQLUtil.appendCriteria(sql, "AND (currentMessage.status = ?)")[ FD ]
