Line_18 $$ StringBundler query = new StringBundler()-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_38 $$ Session session = null-->Line_41 $$ Query q = session.createQuery(sql)[ FD ]
Line_17 $$ if (count == null) -->Line_20 $$ if (categoryIds.length > 0) [ CD ]
Line_10 $$ parentCategoryIds = new long[0]-->Line_15 $$ Object[] finderArgs = new Object[] [ FD ]
Line_41 $$ Query q = session.createQuery(sql)-->Line_42 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_28 $$ query.append(_FINDER_COLUMN_NOTC_G_P_GROUPID_2)[ FD ]
Line_10 $$ parentCategoryIds = new long[0]-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_17 $$ if (count == null) -->Line_37 $$ String sql = query.toString()[ CD ]
Line_17 $$ if (count == null) -->Line_38 $$ Session session = null[ CD ]
Line_15 $$ Object[] finderArgs = new Object[] -->Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)[ FD ]
Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)-->Line_44 $$ count = (Long) q.uniqueResult()[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_22 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ FD ]
Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_26 $$ query.append(WHERE_AND)[ CD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_24 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_40 $$ session = openSession()-->Line_50 $$ closeSession(session)[ FD ]
Line_15 $$ Object[] finderArgs = new Object[] -->Line_45 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, count)[ FD ]
Line_3 $$ if (categoryIds == null) -->Line_5 $$ if (categoryIds.length > 1) [ CD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_41 $$ Query q = session.createQuery(sql)-->Line_44 $$ count = (Long) q.uniqueResult()[ FD ]
Line_37 $$ String sql = query.toString()-->Line_41 $$ Query q = session.createQuery(sql)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_3 $$ if (categoryIds == null) [ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_25 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_17 $$ if (count == null) [ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_19 $$ query.append(_SQL_COUNT_MBCATEGORY_WHERE)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_15 $$ Object[] finderArgs = new Object[] [ FD ]
Line_17 $$ if (count == null) -->Line_29 $$ if (parentCategoryIds.length > 0) [ CD ]
Line_17 $$ if (count == null) -->Line_18 $$ StringBundler query = new StringBundler()[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_9 $$ if (parentCategoryIds == null) [ CD ]
Line_42 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_7 $$ Arrays.sort(categoryIds)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_4 $$ categoryIds = new long[0][ FD ]
Line_10 $$ parentCategoryIds = new long[0]-->Line_13 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_37 $$ String sql = query.toString()[ FD ]
Line_44 $$ count = (Long) q.uniqueResult()-->Line_45 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, count)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_26 $$ query.append(WHERE_AND)[ FD ]
Line_4 $$ categoryIds = new long[0]-->Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_3 $$ if (categoryIds == null) [ FD ]
Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)-->Line_17 $$ if (count == null) [ FD ]
Line_9 $$ if (parentCategoryIds == null) -->Line_11 $$ if (parentCategoryIds.length > 1) [ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_21 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_15 $$ Object[] finderArgs = new Object[] [ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_21 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)-->Line_45 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, count)[ FD ]
Line_38 $$ Session session = null-->Line_50 $$ closeSession(session)[ FD ]
Line_4 $$ categoryIds = new long[0]-->Line_15 $$ Object[] finderArgs = new Object[] [ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_36 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ CD ]
Line_3 $$ if (categoryIds == null) -->Line_4 $$ categoryIds = new long[0][ CD ]
Line_9 $$ if (parentCategoryIds == null) -->Line_10 $$ parentCategoryIds = new long[0][ CD ]
Line_15 $$ Object[] finderArgs = new Object[] -->Line_47 $$ finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs)[ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_16 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_NOTC_G_P, finderArgs, this)-->Line_53 $$ return count.intValue()[ FD ]
Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_15 $$ Object[] finderArgs = new Object[] [ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_13 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ CD ]
Line_17 $$ if (count == null) -->Line_28 $$ query.append(_FINDER_COLUMN_NOTC_G_P_GROUPID_2)[ CD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_15 $$ Object[] finderArgs = new Object[] [ CD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_4 $$ categoryIds = new long[0]-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_10 $$ parentCategoryIds = new long[0][ FD ]
Line_11 $$ if (parentCategoryIds.length > 1) -->Line_13 $$ Arrays.sort(parentCategoryIds)[ CD ]
Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_13 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_5 $$ if (categoryIds.length > 1) -->Line_7 $$ Arrays.sort(categoryIds)[ CD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_53 $$ return count.intValue()[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ FD ]
Line_17 $$ if (count == null) -->Line_19 $$ query.append(_SQL_COUNT_MBCATEGORY_WHERE)[ CD ]
Line_40 $$ session = openSession()-->Line_41 $$ Query q = session.createQuery(sql)[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_22 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ CD ]
Line_17 $$ if (count == null) -->Line_36 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ CD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ FD ]
Line_4 $$ categoryIds = new long[0]-->Line_7 $$ Arrays.sort(categoryIds)[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ CD ]
Line_38 $$ Session session = null-->Line_40 $$ session = openSession()[ FD ]
Line_10 $$ parentCategoryIds = new long[0]-->Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ FD ]
Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_7 $$ Arrays.sort(categoryIds)[ FD ]
Line_44 $$ count = (Long) q.uniqueResult()-->Line_53 $$ return count.intValue()[ FD ]
Line_5 $$ if (categoryIds.length > 1) -->Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)[ CD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_25 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_24 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_9 $$ if (parentCategoryIds == null) [ FD ]
Line_2 $$ public int countByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_43 $$ qPos.add(groupId)[ FD ]
Line_11 $$ if (parentCategoryIds.length > 1) -->Line_12 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ CD ]
Line_6 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
