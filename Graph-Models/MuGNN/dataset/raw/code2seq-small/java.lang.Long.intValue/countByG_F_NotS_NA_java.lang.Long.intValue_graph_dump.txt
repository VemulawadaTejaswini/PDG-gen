Line_4 $$ folderIds = new long[0]-->Line_9 $$ Object[] finderArgs = new Object[] [ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_6 $$ folderIds = ArrayUtil.unique(folderIds)[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_9 $$ Object[] finderArgs = new Object[] [ CD ]
Line_11 $$ if (count == null) -->Line_23 $$ query.append(_FINDER_COLUMN_G_F_NOTS_STATUS_2)[ CD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_3 $$ if (folderIds == null) [ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)[ CD ]
Line_26 $$ Session session = null-->Line_28 $$ session = openSession()[ FD ]
Line_28 $$ session = openSession()-->Line_39 $$ closeSession(session)[ FD ]
Line_15 $$ if (folderIds.length > 0) -->Line_16 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_11 $$ if (count == null) -->Line_12 $$ StringBundler query = new StringBundler()[ CD ]
Line_15 $$ if (folderIds.length > 0) -->Line_20 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_4 $$ folderIds = new long[0]-->Line_18 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_15 $$ if (folderIds.length > 0) -->Line_19 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_11 $$ if (count == null) -->Line_25 $$ String sql = query.toString()[ CD ]
Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)-->Line_11 $$ if (count == null) [ FD ]
Line_11 $$ if (count == null) -->Line_14 $$ query.append(_FINDER_COLUMN_G_F_NOTS_GROUPID_2)[ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_20 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_19 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_24 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_11 $$ if (count == null) -->Line_13 $$ query.append(_SQL_COUNT_BOOKMARKSENTRY_WHERE)[ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_18 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_26 $$ Session session = null-->Line_39 $$ closeSession(session)[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_11 $$ if (count == null) [ CD ]
Line_11 $$ if (count == null) -->Line_24 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_25 $$ String sql = query.toString()[ FD ]
Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)-->Line_33 $$ count = (Long) q.uniqueResult()[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_18 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_26 $$ Session session = null-->Line_29 $$ Query q = session.createQuery(sql)[ FD ]
Line_33 $$ count = (Long) q.uniqueResult()-->Line_42 $$ return count.intValue()[ FD ]
Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)-->Line_42 $$ return count.intValue()[ FD ]
Line_28 $$ session = openSession()-->Line_29 $$ Query q = session.createQuery(sql)[ FD ]
Line_30 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(status)[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_7 $$ Arrays.sort(folderIds)[ FD ]
Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)-->Line_34 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, count)[ FD ]
Line_4 $$ folderIds = new long[0]-->Line_6 $$ folderIds = ArrayUtil.unique(folderIds)[ FD ]
Line_9 $$ Object[] finderArgs = new Object[] -->Line_10 $$ Long count = (Long) finderCache.getResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, this)[ FD ]
Line_25 $$ String sql = query.toString()-->Line_29 $$ Query q = session.createQuery(sql)[ FD ]
Line_4 $$ folderIds = new long[0]-->Line_7 $$ Arrays.sort(folderIds)[ FD ]
Line_3 $$ if (folderIds == null) -->Line_4 $$ folderIds = new long[0][ CD ]
Line_15 $$ if (folderIds.length > 0) -->Line_17 $$ query.append(_FINDER_COLUMN_G_F_NOTS_FOLDERID_7)[ CD ]
Line_3 $$ if (folderIds == null) -->Line_5 $$ if (folderIds.length > 1) [ CD ]
Line_15 $$ if (folderIds.length > 0) -->Line_18 $$ query.append(StringUtil.merge(folderIds))[ CD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_3 $$ if (folderIds == null) [ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_23 $$ query.append(_FINDER_COLUMN_G_F_NOTS_STATUS_2)[ FD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_17 $$ query.append(_FINDER_COLUMN_G_F_NOTS_FOLDERID_7)[ FD ]
Line_30 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_31 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_31 $$ qPos.add(groupId)[ FD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_13 $$ query.append(_SQL_COUNT_BOOKMARKSENTRY_WHERE)[ FD ]
Line_29 $$ Query q = session.createQuery(sql)-->Line_33 $$ count = (Long) q.uniqueResult()[ FD ]
Line_5 $$ if (folderIds.length > 1) -->Line_7 $$ Arrays.sort(folderIds)[ CD ]
Line_33 $$ count = (Long) q.uniqueResult()-->Line_34 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, count)[ FD ]
Line_5 $$ if (folderIds.length > 1) -->Line_6 $$ folderIds = ArrayUtil.unique(folderIds)[ CD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_42 $$ return count.intValue()[ CD ]
Line_9 $$ Object[] finderArgs = new Object[] -->Line_36 $$ finderCache.removeResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs)[ FD ]
Line_15 $$ if (folderIds.length > 0) -->Line_21 $$ query.append(WHERE_AND)[ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_21 $$ query.append(WHERE_AND)[ FD ]
Line_11 $$ if (count == null) -->Line_26 $$ Session session = null[ CD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_14 $$ query.append(_FINDER_COLUMN_G_F_NOTS_GROUPID_2)[ FD ]
Line_6 $$ folderIds = ArrayUtil.unique(folderIds)-->Line_9 $$ Object[] finderArgs = new Object[] [ FD ]
Line_29 $$ Query q = session.createQuery(sql)-->Line_30 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_4 $$ folderIds = new long[0][ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_32 $$ qPos.add(status)[ FD ]
Line_12 $$ StringBundler query = new StringBundler()-->Line_16 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_9 $$ Object[] finderArgs = new Object[] -->Line_34 $$ finderCache.putResult(FINDER_PATH_WITH_PAGINATION_COUNT_BY_G_F_NOTS, finderArgs, count)[ FD ]
Line_6 $$ folderIds = ArrayUtil.unique(folderIds)-->Line_18 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_2 $$ public int countByG_F_NotS(long groupId, long[] folderIds, int status) -->Line_9 $$ Object[] finderArgs = new Object[] [ FD ]
Line_6 $$ folderIds = ArrayUtil.unique(folderIds)-->Line_7 $$ Arrays.sort(folderIds)[ FD ]
Line_11 $$ if (count == null) -->Line_15 $$ if (folderIds.length > 0) [ CD ]
