Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction tx = s.beginTransaction()[ FD ]
Line_22 $$ team2 = (SoccerTeam) s.load(team2.getClass(), team2.getId())-->Line_27 $$ team2.setOneVonePlayer(null)[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ int count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_33 $$ assertEquals("expected count of 0 but got = " + count, count, 0)[ CD ]
Line_7 $$ Player player1 = new Player()-->Line_10 $$ player1.setOneVoneTeam(team)[ FD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_16 $$ team2.setOneVonePlayer(player2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.clear()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_21 $$ s.clear()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_25 $$ assertEquals("expected count of 2 but got = " + count, count, 2)[ CD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_20 $$ tx = s.beginTransaction()[ FD ]
Line_14 $$ Player player2 = new Player()-->Line_17 $$ player2.setOneVoneTeam(team2)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_17 $$ player2.setOneVoneTeam(team2)[ CD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_19 $$ tx.commit()[ FD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_28 $$ tx.commit()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_11 $$ s.persist(team)[ CD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_6 $$ team.setName("Shalrie's team")[ FD ]
Line_23 $$ team = (SoccerTeam) s.load(team.getClass(), team.getId())-->Line_26 $$ team.setOneVonePlayer(null)[ FD ]
Line_31 $$ tx = s.beginTransaction()-->Line_34 $$ tx.commit()[ FD ]
Line_30 $$ s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_9 $$ team.setOneVonePlayer(player1)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_27 $$ team2.setOneVonePlayer(null)[ CD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.close()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_5 $$ SoccerTeam team = new SoccerTeam()[ CD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_26 $$ team.setOneVonePlayer(null)[ FD ]
Line_7 $$ Player player1 = new Player()-->Line_8 $$ player1.setName("Shalrie Joseph")[ FD ]
Line_30 $$ s = openSession()-->Line_31 $$ tx = s.beginTransaction()[ FD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_10 $$ player1.setOneVoneTeam(team)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_7 $$ Player player1 = new Player()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_8 $$ player1.setName("Shalrie Joseph")[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_30 $$ s = openSession()[ CD ]
Line_32 $$ count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()-->Line_33 $$ assertEquals("expected count of 0 but got = " + count, count, 0)[ FD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_23 $$ team = (SoccerTeam) s.load(team.getClass(), team.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s = openSession()[ FD ]
Line_30 $$ s = openSession()-->Line_32 $$ count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ team2 = (SoccerTeam) s.load(team2.getClass(), team2.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.close()[ FD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_17 $$ player2.setOneVoneTeam(team2)[ FD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_22 $$ team2 = (SoccerTeam) s.load(team2.getClass(), team2.getId())[ FD ]
Line_7 $$ Player player1 = new Player()-->Line_9 $$ team.setOneVonePlayer(player1)[ FD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_13 $$ team2.setName("Taylor's team")[ FD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_27 $$ team2.setOneVonePlayer(null)[ FD ]
Line_24 $$ int count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()-->Line_25 $$ assertEquals("expected count of 2 but got = " + count, count, 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ tx = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ team = (SoccerTeam) s.load(team.getClass(), team.getId())[ FD ]
Line_24 $$ int count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()-->Line_32 $$ count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_35 $$ s.close()[ CD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_31 $$ tx = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ tx = s.beginTransaction()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_26 $$ team.setOneVonePlayer(null)[ CD ]
Line_20 $$ tx = s.beginTransaction()-->Line_31 $$ tx = s.beginTransaction()[ FD ]
Line_4 $$ Transaction tx = s.beginTransaction()-->Line_34 $$ tx.commit()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_29 $$ s.close()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_18 $$ s.persist(team2)[ CD ]
Line_20 $$ tx = s.beginTransaction()-->Line_28 $$ tx.commit()[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_23 $$ team = (SoccerTeam) s.load(team.getClass(), team.getId())[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_14 $$ Player player2 = new Player()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_4 $$ Transaction tx = s.beginTransaction()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_28 $$ tx.commit()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_34 $$ tx.commit()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_19 $$ tx.commit()[ CD ]
Line_12 $$ SoccerTeam team2 = new SoccerTeam()-->Line_18 $$ s.persist(team2)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_10 $$ player1.setOneVoneTeam(team)[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_15 $$ player2.setName("Taylor Twellman")[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_20 $$ tx = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.persist(team2)[ FD ]
Line_5 $$ SoccerTeam team = new SoccerTeam()-->Line_11 $$ s.persist(team)[ FD ]
Line_14 $$ Player player2 = new Player()-->Line_15 $$ player2.setName("Taylor Twellman")[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_31 $$ tx = s.beginTransaction()[ CD ]
Line_20 $$ tx = s.beginTransaction()-->Line_34 $$ tx.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.persist(team)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_6 $$ team.setName("Shalrie's team")[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_32 $$ count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_22 $$ team2 = (SoccerTeam) s.load(team2.getClass(), team2.getId())[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_9 $$ team.setOneVonePlayer(player1)[ CD ]
Line_14 $$ Player player2 = new Player()-->Line_16 $$ team2.setOneVonePlayer(player2)[ FD ]
Line_24 $$ int count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()-->Line_33 $$ assertEquals("expected count of 0 but got = " + count, count, 0)[ FD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_13 $$ team2.setName("Taylor's team")[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_16 $$ team2.setOneVonePlayer(player2)[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_24 $$ int count = ((Long) s.createQuery("select count(*) from Player").iterate().next()).intValue()[ CD ]
Line_2 $$ public void testCascadedDeleteOfChildOneToOne() -->Line_12 $$ SoccerTeam team2 = new SoccerTeam()[ CD ]
