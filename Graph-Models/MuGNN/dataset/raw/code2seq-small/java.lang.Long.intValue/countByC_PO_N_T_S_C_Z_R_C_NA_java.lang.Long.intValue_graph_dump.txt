Line_33 $$ String sql = sb.toString()-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_25 $$ if (Validator.isNotNull(type)) -->Line_26 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_L_S_C_Z_R_C))[ CD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_57 $$ qPos.add(companyId)[ FD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_51 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_77 $$ Long l = itr.next()-->Line_79 $$ count += l.intValue()[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_70 $$ qPos.add(countryId)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_62 $$ qPos.add(names, 2)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_16 $$ if (groupOrganization != null) -->Line_17 $$ doUnion = true[ CD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_76 $$ while (itr.hasNext()) -->Line_77 $$ Long l = itr.next()[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_28 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_S_C_Z_R_C))[ FD ]
Line_6 $$ cities = CustomSQLUtil.keywords(cities)-->Line_72 $$ qPos.add(cities, 2)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_63 $$ qPos.add(streets, 6)[ FD ]
Line_30 $$ if (doUnion) -->Line_31 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_15 $$ groupOrganization = (Long) params.get("groupOrganization")-->Line_54 $$ qPos.add(groupOrganization)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_68 $$ if (countryId != null) -->Line_70 $$ qPos.add(countryId)[ CD ]
Line_10 $$ session = openSession()-->Line_86 $$ closeSession(session)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_73 $$ qPos.add(zips, 2)[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_56 $$ setJoin(qPos, params)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_31 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_60 $$ qPos.add(type)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_14 $$ if (params != null) -->Line_16 $$ if (groupOrganization != null) [ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_58 $$ qPos.add(parentOrganizationId)[ FD ]
Line_8 $$ Session session = null-->Line_10 $$ session = openSession()[ FD ]
Line_74 $$ int count = 0-->Line_79 $$ count += l.intValue()[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_6 $$ cities = CustomSQLUtil.keywords(cities)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_20 $$ if (doUnion) -->Line_22 $$ sb.append(CustomSQLUtil.get(COUNT_BY_GROUP_ID))[ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_22 $$ sb.append(CustomSQLUtil.get(COUNT_BY_GROUP_ID))[ FD ]
Line_10 $$ session = openSession()-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_75 $$ Iterator<Long> itr = q.iterate()-->Line_76 $$ while (itr.hasNext()) [ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_64 $$ if (regionId != null) -->Line_66 $$ qPos.add(regionId)[ CD ]
Line_13 $$ Long groupOrganization = null-->Line_16 $$ if (groupOrganization != null) [ FD ]
Line_33 $$ String sql = sb.toString()-->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_59 $$ if (Validator.isNotNull(type)) -->Line_60 $$ qPos.add(type)[ CD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_54 $$ qPos.add(groupOrganization)[ FD ]
Line_20 $$ if (doUnion) -->Line_21 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_75 $$ Iterator<Long> itr = q.iterate()-->Line_77 $$ Long l = itr.next()[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_76 $$ while (itr.hasNext()) -->Line_78 $$ if (l != null) [ CD ]
Line_12 $$ boolean doUnion = false-->Line_17 $$ doUnion = true[ FD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_68 $$ if (countryId != null) -->Line_69 $$ qPos.add(countryId)[ CD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_69 $$ qPos.add(countryId)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_8 $$ Session session = null-->Line_86 $$ closeSession(session)[ FD ]
Line_15 $$ groupOrganization = (Long) params.get("groupOrganization")-->Line_16 $$ if (groupOrganization != null) [ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_26 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_L_S_C_Z_R_C))[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)[ FD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)[ FD ]
Line_20 $$ if (doUnion) -->Line_23 $$ sb.append(") UNION ALL (")[ CD ]
Line_5 $$ streets = CustomSQLUtil.keywords(streets)-->Line_63 $$ qPos.add(streets, 6)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_21 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_65 $$ qPos.add(regionId)[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_40 $$ if (regionId == null) -->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ CD ]
Line_13 $$ Long groupOrganization = null-->Line_54 $$ qPos.add(groupOrganization)[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_13 $$ Long groupOrganization = null-->Line_15 $$ groupOrganization = (Long) params.get("groupOrganization")[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_4 $$ names = CustomSQLUtil.keywords(names)-->Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)[ FD ]
Line_7 $$ zips = CustomSQLUtil.keywords(zips)-->Line_73 $$ qPos.add(zips, 2)[ FD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_75 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_36 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street2)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_37 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street3)", StringPool.LIKE, true, streets)-->Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))[ FD ]
Line_14 $$ if (params != null) -->Line_15 $$ groupOrganization = (Long) params.get("groupOrganization")[ CD ]
Line_35 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.street1)", StringPool.LIKE, true, streets)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_38 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.city)", StringPool.LIKE, false, cities)[ FD ]
Line_53 $$ if (doUnion) -->Line_54 $$ qPos.add(groupOrganization)[ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ FD ]
Line_8 $$ Session session = null-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_25 $$ if (Validator.isNotNull(type)) -->Line_28 $$ sb.append(CustomSQLUtil.get(COUNT_BY_C_PO_N_S_C_Z_R_C))[ CD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_33 $$ String sql = sb.toString()[ FD ]
Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))[ FD ]
Line_4 $$ names = CustomSQLUtil.keywords(names)-->Line_62 $$ qPos.add(names, 2)[ FD ]
Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_66 $$ qPos.add(regionId)[ FD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_64 $$ if (regionId != null) -->Line_65 $$ qPos.add(regionId)[ CD ]
Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_43 $$ if (countryId == null) -->Line_44 $$ sql = StringUtil.replace(sql, _COUNTRY_ID_SQL, StringPool.BLANK)[ CD ]
Line_34 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Organization_.name)", StringPool.LIKE, false, names)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_72 $$ qPos.add(cities, 2)[ FD ]
Line_33 $$ String sql = sb.toString()-->Line_41 $$ sql = StringUtil.replace(sql, _REGION_ID_SQL, StringPool.BLANK)[ FD ]
Line_77 $$ Long l = itr.next()-->Line_78 $$ if (l != null) [ FD ]
Line_78 $$ if (l != null) -->Line_79 $$ count += l.intValue()[ CD ]
Line_7 $$ zips = CustomSQLUtil.keywords(zips)-->Line_39 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(Address.zip)", StringPool.LIKE, true, zips)[ FD ]
Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)-->Line_49 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_47 $$ sql = StringUtil.replace(sql, "[$WHERE$]", getWhere(params))-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_46 $$ sql = StringUtil.replace(sql, "[$JOIN$]", getJoin(params))-->Line_48 $$ sql = StringUtil.replace(sql, "[$PARENT_ORGANIZATION_ID_COMPARATOR$]", parentOrganizationIdComparator.equals(StringPool.EQUAL) ? StringPool.EQUAL : StringPool.NOT_EQUAL)[ FD ]
Line_11 $$ StringBundler sb = new StringBundler(5)-->Line_23 $$ sb.append(") UNION ALL (")[ FD ]
