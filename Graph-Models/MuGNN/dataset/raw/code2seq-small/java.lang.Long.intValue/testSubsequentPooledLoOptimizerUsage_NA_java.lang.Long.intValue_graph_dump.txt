Line_11 $$ next = (Long) optimizer.generate(sequence)-->Line_12 $$ assertEquals((1001 + 4), next.intValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_18 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_8 $$ assertEquals((1001 + 3), next.intValue())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_5 $$ assertEquals(5, sequence.getTimesCalled())[ CD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_8 $$ assertEquals((1001 + 3), next.intValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_14 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_7 $$ Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_18 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ FD ]
Line_4 $$ final Optimizer optimizer = buildPooledLoOptimizer(1, 3)-->Line_7 $$ Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_10 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_19 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_11 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 6), next.intValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_22 $$ assertEquals((1001 + 6), sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_6 $$ assertEquals(1001, sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_7 $$ Long next = (Long) optimizer.generate(sequence)[ CD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_11 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_11 $$ next = (Long) optimizer.generate(sequence)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_4 $$ final Optimizer optimizer = buildPooledLoOptimizer(1, 3)[ CD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 6), next.intValue())[ FD ]
Line_4 $$ final Optimizer optimizer = buildPooledLoOptimizer(1, 3)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_13 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ FD ]
Line_19 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 6), next.intValue())[ FD ]
Line_4 $$ final Optimizer optimizer = buildPooledLoOptimizer(1, 3)-->Line_11 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_20 $$ assertEquals((1001 + 6), next.intValue())[ CD ]
Line_11 $$ next = (Long) optimizer.generate(sequence)-->Line_15 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ final Optimizer optimizer = buildPooledLoOptimizer(1, 3)-->Line_15 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_5 $$ assertEquals(5, sequence.getTimesCalled())[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_14 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_15 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_10 $$ assertEquals((1001 + 3), sequence.getCurrentValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_12 $$ assertEquals((1001 + 4), next.intValue())[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_17 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_15 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_16 $$ assertEquals((1001 + 5), next.intValue())[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_22 $$ assertEquals((1001 + 6), sequence.getCurrentValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_17 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_13 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ CD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_11 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_9 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_16 $$ assertEquals((1001 + 5), next.intValue())[ FD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_21 $$ assertEquals((5 + 2), sequence.getTimesCalled())[ CD ]
Line_11 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 6), next.intValue())[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_6 $$ assertEquals(1001, sequence.getCurrentValue())[ FD ]
Line_3 $$ final SourceMock sequence = new SourceMock(1001, 3, 5)-->Line_21 $$ assertEquals((5 + 2), sequence.getTimesCalled())[ FD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_15 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_12 $$ assertEquals((1001 + 4), next.intValue())[ FD ]
Line_2 $$ public void testSubsequentPooledLoOptimizerUsage() -->Line_9 $$ assertEquals((5 + 1), sequence.getTimesCalled())[ CD ]
Line_11 $$ next = (Long) optimizer.generate(sequence)-->Line_16 $$ assertEquals((1001 + 5), next.intValue())[ FD ]
Line_7 $$ Long next = (Long) optimizer.generate(sequence)-->Line_16 $$ assertEquals((1001 + 5), next.intValue())[ FD ]
