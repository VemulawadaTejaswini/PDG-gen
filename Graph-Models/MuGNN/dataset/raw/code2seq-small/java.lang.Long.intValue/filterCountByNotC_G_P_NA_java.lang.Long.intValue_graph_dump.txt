Line_29 $$ if (categoryIds.length > 0) -->Line_32 $$ query.append(StringUtil.merge(categoryIds))[ CD ]
Line_16 $$ categoryIds = new long[0]-->Line_19 $$ Arrays.sort(categoryIds)[ FD ]
Line_29 $$ if (categoryIds.length > 0) -->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_40 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ FD ]
Line_49 $$ session = openSession()-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ categoryIds = new long[0]-->Line_18 $$ categoryIds = ArrayUtil.unique(categoryIds)[ FD ]
Line_16 $$ categoryIds = new long[0]-->Line_32 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_29 $$ if (categoryIds.length > 0) -->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_54 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_45 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_41 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_53 $$ qPos.add(groupId)[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_42 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_18 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_32 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_47 $$ Session session = null-->Line_49 $$ session = openSession()[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_39 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_46 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_15 $$ if (categoryIds == null) -->Line_16 $$ categoryIds = new long[0][ CD ]
Line_29 $$ if (categoryIds.length > 0) -->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_17 $$ if (categoryIds.length > 1) -->Line_19 $$ Arrays.sort(categoryIds)[ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_35 $$ query.append(WHERE_AND)[ FD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_52 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_29 $$ if (categoryIds.length > 0) -->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ CD ]
Line_23 $$ if (parentCategoryIds.length > 1) -->Line_25 $$ Arrays.sort(parentCategoryIds)[ CD ]
Line_49 $$ session = openSession()-->Line_59 $$ closeSession(session)[ FD ]
Line_22 $$ parentCategoryIds = new long[0]-->Line_25 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_38 $$ if (parentCategoryIds.length > 0) -->Line_43 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_47 $$ Session session = null-->Line_59 $$ closeSession(session)[ FD ]
Line_38 $$ if (parentCategoryIds.length > 0) -->Line_41 $$ query.append(StringUtil.merge(parentCategoryIds))[ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_37 $$ query.append(_FINDER_COLUMN_NOTC_G_P_GROUPID_2)[ FD ]
Line_38 $$ if (parentCategoryIds.length > 0) -->Line_40 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_46 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_43 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_21 $$ if (parentCategoryIds == null) -->Line_22 $$ parentCategoryIds = new long[0][ CD ]
Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_51 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_38 $$ if (parentCategoryIds.length > 0) -->Line_42 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_12 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_13 $$ return countByNotC_G_P(categoryIds, groupId, parentCategoryIds)[ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_28 $$ query.append(_FILTER_SQL_COUNT_MBCATEGORY_WHERE)[ FD ]
Line_24 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_41 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_32 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_29 $$ if (categoryIds.length > 0) -->Line_35 $$ query.append(WHERE_AND)[ CD ]
Line_22 $$ parentCategoryIds = new long[0]-->Line_41 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_17 $$ if (categoryIds.length > 1) -->Line_18 $$ categoryIds = ArrayUtil.unique(categoryIds)[ CD ]
Line_38 $$ if (parentCategoryIds.length > 0) -->Line_39 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_23 $$ if (parentCategoryIds.length > 1) -->Line_24 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ CD ]
Line_15 $$ if (categoryIds == null) -->Line_17 $$ if (categoryIds.length > 1) [ CD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ FD ]
Line_22 $$ parentCategoryIds = new long[0]-->Line_24 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ FD ]
Line_47 $$ Session session = null-->Line_50 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ if (parentCategoryIds == null) -->Line_23 $$ if (parentCategoryIds.length > 1) [ CD ]
Line_18 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_19 $$ Arrays.sort(categoryIds)[ FD ]
Line_54 $$ Long count = (Long) q.uniqueResult()-->Line_55 $$ return count.intValue()[ FD ]
Line_27 $$ StringBundler query = new StringBundler()-->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_24 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_25 $$ Arrays.sort(parentCategoryIds)[ FD ]
