Line_18 $$ StringBundler query = new StringBundler()-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_12 $$ if (parentCategoryIds == null) -->Line_13 $$ parentCategoryIds = new long[0][ CD ]
Line_43 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_44 $$ qPos.add(groupId)[ FD ]
Line_6 $$ if (categoryIds == null) -->Line_8 $$ if (categoryIds.length > 1) [ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_37 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_28 $$ query.append(_FINDER_COLUMN_NOTC_G_P_GROUPID_2)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_18 $$ StringBundler query = new StringBundler()[ CD ]
Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_42 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_44 $$ qPos.add(groupId)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_9 $$ categoryIds = ArrayUtil.unique(categoryIds)[ FD ]
Line_38 $$ Session session = null-->Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_22 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_20 $$ if (categoryIds.length > 0) [ CD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_26 $$ query.append(WHERE_AND)[ CD ]
Line_15 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_15 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)-->Line_16 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_24 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_40 $$ session = openSession()-->Line_50 $$ closeSession(session)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_36 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ CD ]
Line_13 $$ parentCategoryIds = new long[0]-->Line_15 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_13 $$ parentCategoryIds = new long[0]-->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ FD ]
Line_8 $$ if (categoryIds.length > 1) -->Line_10 $$ Arrays.sort(categoryIds)[ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_25 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_12 $$ if (parentCategoryIds == null) -->Line_14 $$ if (parentCategoryIds.length > 1) [ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_26 $$ query.append(WHERE_AND)[ FD ]
Line_8 $$ if (categoryIds.length > 1) -->Line_9 $$ categoryIds = ArrayUtil.unique(categoryIds)[ CD ]
Line_14 $$ if (parentCategoryIds.length > 1) -->Line_16 $$ Arrays.sort(parentCategoryIds)[ CD ]
Line_13 $$ parentCategoryIds = new long[0]-->Line_16 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_29 $$ if (parentCategoryIds.length > 0) [ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_16 $$ Arrays.sort(parentCategoryIds)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_21 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_38 $$ Session session = null-->Line_50 $$ closeSession(session)[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_21 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_12 $$ if (parentCategoryIds == null) [ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_4 $$ return countByNotC_G_P(categoryIds, groupId, parentCategoryIds)[ FD ]
Line_7 $$ categoryIds = new long[0]-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_45 $$ Long count = (Long) q.uniqueResult()-->Line_46 $$ return count.intValue()[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_36 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_28 $$ query.append(_FINDER_COLUMN_NOTC_G_P_GROUPID_2)[ CD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_32 $$ query.append(StringUtil.merge(parentCategoryIds))[ CD ]
Line_37 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_43 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_40 $$ session = openSession()-->Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_6 $$ if (categoryIds == null) [ FD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_33 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_6 $$ if (categoryIds == null) [ CD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_37 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_29 $$ if (parentCategoryIds.length > 0) -->Line_30 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_41 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_45 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_9 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_10 $$ Arrays.sort(categoryIds)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_19 $$ query.append(_FILTER_SQL_COUNT_MBCATEGORY_WHERE)[ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_12 $$ if (parentCategoryIds == null) [ CD ]
Line_14 $$ if (parentCategoryIds.length > 1) -->Line_15 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ CD ]
Line_6 $$ if (categoryIds == null) -->Line_7 $$ categoryIds = new long[0][ CD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_19 $$ query.append(_FILTER_SQL_COUNT_MBCATEGORY_WHERE)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_10 $$ Arrays.sort(categoryIds)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_15 $$ parentCategoryIds = ArrayUtil.unique(parentCategoryIds)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_31 $$ query.append(_FINDER_COLUMN_NOTC_G_P_PARENTCATEGORYID_7)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_7 $$ categoryIds = new long[0][ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_22 $$ query.append(_FINDER_COLUMN_NOTC_G_P_CATEGORYID_7)[ CD ]
Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ return countByNotC_G_P(categoryIds, groupId, parentCategoryIds)[ CD ]
Line_7 $$ categoryIds = new long[0]-->Line_10 $$ Arrays.sort(categoryIds)[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ CD ]
Line_38 $$ Session session = null-->Line_40 $$ session = openSession()[ FD ]
Line_20 $$ if (categoryIds.length > 0) -->Line_25 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_13 $$ parentCategoryIds = new long[0][ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_37 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), MBCategory.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_34 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_18 $$ StringBundler query = new StringBundler()-->Line_24 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_7 $$ categoryIds = new long[0]-->Line_9 $$ categoryIds = ArrayUtil.unique(categoryIds)[ FD ]
Line_2 $$ public int filterCountByNotC_G_P(long[] categoryIds, long groupId, long[] parentCategoryIds) -->Line_38 $$ Session session = null[ CD ]
Line_9 $$ categoryIds = ArrayUtil.unique(categoryIds)-->Line_23 $$ query.append(StringUtil.merge(categoryIds))[ FD ]
