Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_11 $$ assertEquals(11, sequence.getCurrentValue())[ FD ]
Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_7 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_15 $$ assertEquals(21, sequence.getCurrentValue())[ FD ]
Line_5 $$ Optimizer optimizer = buildPooledOptimizer(-1, 10)-->Line_7 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_15 $$ assertEquals(21, sequence.getCurrentValue())[ CD ]
Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_14 $$ assertEquals(3, sequence.getTimesCalled())[ FD ]
Line_6 $$ for (int i = 1; i <= 11; i++) -->Line_8 $$ assertEquals(i, next.intValue())[ FD ]
Line_6 $$ for (int i = 1; i <= 11; i++) -->Line_8 $$ assertEquals(i, next.intValue())[ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_4 $$ SourceMock sequence = new SourceMock(1, 10)[ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_14 $$ assertEquals(3, sequence.getTimesCalled())[ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_5 $$ Optimizer optimizer = buildPooledOptimizer(-1, 10)[ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_12 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_11 $$ assertEquals(11, sequence.getCurrentValue())[ CD ]
Line_6 $$ for (int i = 1; i <= 11; i++) -->Line_7 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_12 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_3 $$ Long next[ CD ]
Line_3 $$ Long next-->Line_7 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ next = (Long) optimizer.generate(sequence)-->Line_13 $$ assertEquals(12, next.intValue())[ FD ]
Line_12 $$ next = (Long) optimizer.generate(sequence)-->Line_13 $$ assertEquals(12, next.intValue())[ FD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_13 $$ assertEquals(12, next.intValue())[ CD ]
Line_7 $$ next = (Long) optimizer.generate(sequence)-->Line_8 $$ assertEquals(i, next.intValue())[ FD ]
Line_3 $$ Long next-->Line_13 $$ assertEquals(12, next.intValue())[ FD ]
Line_5 $$ Optimizer optimizer = buildPooledOptimizer(-1, 10)-->Line_12 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_6 $$ for (int i = 1; i <= 11; i++) [ CD ]
Line_2 $$ public void testBasicPooledOptimizerUsage() -->Line_10 $$ assertEquals(2, sequence.getTimesCalled())[ CD ]
Line_3 $$ Long next-->Line_8 $$ assertEquals(i, next.intValue())[ FD ]
Line_3 $$ Long next-->Line_12 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ SourceMock sequence = new SourceMock(1, 10)-->Line_10 $$ assertEquals(2, sequence.getTimesCalled())[ FD ]
Line_7 $$ next = (Long) optimizer.generate(sequence)-->Line_12 $$ next = (Long) optimizer.generate(sequence)[ FD ]
