Line_13 $$ for (int i = 1; i < 11; i++) -->Line_15 $$ assertEquals(i, next.intValue())[ FD ]
Line_4 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_6 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_6 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_15 $$ assertEquals(i, next.intValue())[ FD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_14 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_12 $$ optimizer = buildNoneOptimizer(-1, 1)[ FD ]
Line_5 $$ for (int i = 1; i < 11; i++) -->Line_7 $$ assertEquals(i, next.intValue())[ CD ]
Line_11 $$ sequence = new SourceMock(0)-->Line_17 $$ assertEquals(11, sequence.getTimesCalled())[ FD ]
Line_13 $$ for (int i = 1; i < 11; i++) -->Line_15 $$ assertEquals(i, next.intValue())[ CD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_9 $$ assertEquals(10, sequence.getTimesCalled())[ FD ]
Line_13 $$ for (int i = 1; i < 11; i++) -->Line_14 $$ final Long next = (Long) optimizer.generate(sequence)[ CD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_4 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)[ CD ]
Line_5 $$ for (int i = 1; i < 11; i++) -->Line_15 $$ assertEquals(i, next.intValue())[ FD ]
Line_11 $$ sequence = new SourceMock(0)-->Line_14 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_10 $$ assertEquals(10, sequence.getCurrentValue())[ FD ]
Line_5 $$ for (int i = 1; i < 11; i++) -->Line_6 $$ final Long next = (Long) optimizer.generate(sequence)[ CD ]
Line_6 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_7 $$ assertEquals(i, next.intValue())[ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_13 $$ for (int i = 1; i < 11; i++) [ CD ]
Line_12 $$ optimizer = buildNoneOptimizer(-1, 1)-->Line_14 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_9 $$ assertEquals(10, sequence.getTimesCalled())[ CD ]
Line_14 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_15 $$ assertEquals(i, next.intValue())[ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_3 $$ SourceMock sequence = new SourceMock(1)[ CD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_5 $$ for (int i = 1; i < 11; i++) [ CD ]
Line_4 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_14 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_5 $$ for (int i = 1; i < 11; i++) -->Line_7 $$ assertEquals(i, next.intValue())[ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_10 $$ assertEquals(10, sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_11 $$ sequence = new SourceMock(0)[ CD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_17 $$ assertEquals(11, sequence.getTimesCalled())[ FD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_18 $$ assertEquals(10, sequence.getCurrentValue())[ FD ]
Line_11 $$ sequence = new SourceMock(0)-->Line_18 $$ assertEquals(10, sequence.getCurrentValue())[ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_12 $$ optimizer = buildNoneOptimizer(-1, 1)[ CD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_18 $$ assertEquals(10, sequence.getCurrentValue())[ CD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_11 $$ sequence = new SourceMock(0)[ FD ]
Line_5 $$ for (int i = 1; i < 11; i++) -->Line_13 $$ for (int i = 1; i < 11; i++) [ FD ]
Line_2 $$ public void testBasicNoOptimizerUsage() -->Line_17 $$ assertEquals(11, sequence.getTimesCalled())[ CD ]
Line_3 $$ SourceMock sequence = new SourceMock(1)-->Line_6 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
