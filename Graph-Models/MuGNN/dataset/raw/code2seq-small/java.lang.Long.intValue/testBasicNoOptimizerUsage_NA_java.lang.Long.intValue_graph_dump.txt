Line_16 $$ for (int i = 1; i < 11; i++) -->Line_18 $$ assertEquals(i, next.intValue())[ CD ]
Line_8 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_9 $$ assertEquals(i, next.intValue())[ FD ]
Line_7 $$ for (int i = 1; i < 11; i++) -->Line_9 $$ assertEquals(i, next.intValue())[ CD ]
Line_16 $$ for (int i = 1; i < 11; i++) -->Line_18 $$ assertEquals(i, next.intValue())[ FD ]
Line_7 $$ for (int i = 1; i < 11; i++) -->Line_8 $$ final Long next = (Long) optimizer.generate(sequence)[ CD ]
Line_7 $$ for (int i = 1; i < 11; i++) -->Line_16 $$ for (int i = 1; i < 11; i++) [ FD ]
Line_6 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_17 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ for (int i = 1; i < 11; i++) -->Line_9 $$ assertEquals(i, next.intValue())[ FD ]
Line_6 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_8 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_15 $$ optimizer = buildNoneOptimizer(-1, 1)-->Line_17 $$ final Long next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ for (int i = 1; i < 11; i++) -->Line_18 $$ assertEquals(i, next.intValue())[ FD ]
Line_8 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_18 $$ assertEquals(i, next.intValue())[ FD ]
Line_17 $$ final Long next = (Long) optimizer.generate(sequence)-->Line_18 $$ assertEquals(i, next.intValue())[ FD ]
Line_6 $$ Optimizer optimizer = buildNoneOptimizer(-1, 1)-->Line_15 $$ optimizer = buildNoneOptimizer(-1, 1)[ FD ]
Line_16 $$ for (int i = 1; i < 11; i++) -->Line_17 $$ final Long next = (Long) optimizer.generate(sequence)[ CD ]
