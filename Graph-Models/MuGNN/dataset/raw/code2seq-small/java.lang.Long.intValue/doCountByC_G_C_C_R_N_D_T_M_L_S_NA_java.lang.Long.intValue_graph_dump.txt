Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_41 $$ qPos.add(types, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_6 $$ modes = CustomSQLUtil.keywords(modes, false)-->Line_42 $$ qPos.add(modes, 2)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_48 $$ if (itr.hasNext()) -->Line_50 $$ if (count != null) [ CD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_45 $$ qPos.add(status)[ FD ]
Line_49 $$ Long count = itr.next()-->Line_51 $$ return count.intValue()[ FD ]
Line_47 $$ Iterator<Long> itr = q.iterate()-->Line_48 $$ if (itr.hasNext()) [ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_6 $$ modes = CustomSQLUtil.keywords(modes, false)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_7 $$ languages = CustomSQLUtil.keywords(languages, false)-->Line_43 $$ qPos.add(languages, 2)[ FD ]
Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_36 $$ qPos.add(classPKs)[ FD ]
Line_5 $$ types = CustomSQLUtil.keywords(types, false)-->Line_41 $$ qPos.add(types, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_44 $$ if (status != WorkflowConstants.STATUS_ANY) [ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(languages, 2)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_33 $$ qPos.add(classNameIds)[ FD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_35 $$ if (classPKs != null) -->Line_36 $$ qPos.add(classPKs)[ CD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_44 $$ if (status != WorkflowConstants.STATUS_ANY) -->Line_45 $$ qPos.add(status)[ CD ]
Line_3 $$ names = CustomSQLUtil.keywords(names)-->Line_39 $$ qPos.add(names, 2)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_35 $$ if (classPKs != null) [ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))[ FD ]
Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_30 $$ qPos.add(groupIds)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_40 $$ qPos.add(descriptions, 2)[ FD ]
Line_6 $$ modes = CustomSQLUtil.keywords(modes, false)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_10 $$ session = openSession()-->Line_58 $$ closeSession(session)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ Session session = null-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))[ FD ]
Line_8 $$ Session session = null-->Line_10 $$ session = openSession()[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_7 $$ languages = CustomSQLUtil.keywords(languages, false)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)-->Line_40 $$ qPos.add(descriptions, 2)[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(groupIds)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_7 $$ languages = CustomSQLUtil.keywords(languages, false)[ CD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_36 $$ qPos.add(classPKs)[ FD ]
Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_26 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_8 $$ Session session = null[ CD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_39 $$ qPos.add(names, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_29 $$ if (groupIds != null) [ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_40 $$ qPos.add(descriptions, 2)[ FD ]
Line_32 $$ if (classNameIds != null) -->Line_33 $$ qPos.add(classNameIds)[ CD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_32 $$ if (classNameIds != null) [ FD ]
Line_29 $$ if (groupIds != null) -->Line_30 $$ qPos.add(groupIds)[ CD ]
Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_47 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_8 $$ Session session = null-->Line_58 $$ closeSession(session)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(resourceClassNameId)[ FD ]
Line_12 $$ if (inlineSQLHelper) -->Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)[ CD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))[ FD ]
Line_10 $$ session = openSession()-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_5 $$ types = CustomSQLUtil.keywords(types, false)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_7 $$ languages = CustomSQLUtil.keywords(languages, false)[ FD ]
Line_16 $$ sql = StringUtil.replace(sql, "[$CLASSNAME_ID$]", getClassNameIds(classNameIds))-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_50 $$ if (count != null) -->Line_51 $$ return count.intValue()[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_4 $$ descriptions = CustomSQLUtil.keywords(descriptions, false)[ CD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_38 $$ qPos.add(resourceClassNameId)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_42 $$ qPos.add(modes, 2)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_45 $$ qPos.add(status)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_28 $$ qPos.add(companyId)[ FD ]
Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))-->Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_6 $$ modes = CustomSQLUtil.keywords(modes, false)[ CD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_5 $$ types = CustomSQLUtil.keywords(types, false)[ CD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_47 $$ Iterator<Long> itr = q.iterate()-->Line_49 $$ Long count = itr.next()[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_18 $$ sql = StringUtil.replace(sql, "[$STATUS$]", getStatus(status))[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_41 $$ qPos.add(types, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_43 $$ qPos.add(languages, 2)[ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(companyId)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_3 $$ names = CustomSQLUtil.keywords(names)[ FD ]
Line_13 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, DDMTemplatePermission.getTemplateModelResourceName(resourceClassNameId), "DDMTemplate.templateId", groupIds)-->Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)-->Line_21 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.type", StringPool.LIKE, false, types)[ FD ]
Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_15 $$ sql = StringUtil.replace(sql, "[$GROUP_ID$]", getGroupIds(groupIds))-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_42 $$ qPos.add(modes, 2)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_11 $$ String sql = CustomSQLUtil.get(COUNT_BY_C_G_C_C_R_N_D_T_M_L_S)-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)-->Line_24 $$ sql = CustomSQLUtil.replaceAndOperator(sql, andOperator)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_5 $$ types = CustomSQLUtil.keywords(types, false)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_39 $$ qPos.add(names, 2)[ FD ]
Line_2 $$ protected int doCountByC_G_C_C_R_N_D_T_M_L_S(long companyId, long[] groupIds, long[] classNameIds, long[] classPKs, long resourceClassNameId, String[] names, String[] descriptions, String[] types, String[] modes, String[] languages, int status, boolean andOperator, boolean inlineSQLHelper) -->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)-->Line_22 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.mode", StringPool.LIKE, false, modes)[ FD ]
Line_17 $$ sql = StringUtil.replace(sql, "[$CLASS_PK$]", getClassPKs(classPKs))-->Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)[ FD ]
Line_27 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_33 $$ qPos.add(classNameIds)[ FD ]
Line_49 $$ Long count = itr.next()-->Line_50 $$ if (count != null) [ FD ]
Line_19 $$ sql = CustomSQLUtil.replaceKeywords(sql, "lower(CAST_TEXT(DDMTemplate.name))", StringPool.LIKE, false, names)-->Line_23 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.language", StringPool.LIKE, true, languages)[ FD ]
Line_48 $$ if (itr.hasNext()) -->Line_49 $$ Long count = itr.next()[ CD ]
Line_20 $$ sql = CustomSQLUtil.replaceKeywords(sql, "DDMTemplate.description", StringPool.LIKE, false, descriptions)-->Line_25 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
