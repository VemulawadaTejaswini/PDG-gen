Line_14 $$ session = openSession()-->Line_26 $$ closeSession(session)[ FD ]
Line_14 $$ session = openSession()-->Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ Session session = null-->Line_26 $$ closeSession(session)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_19 $$ qPos.add(userId)[ FD ]
Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ return countByG_U_S(groupId, userId, status)[ CD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_9 $$ query.append(_FINDER_COLUMN_G_U_S_USERID_2)[ CD ]
Line_12 $$ Session session = null-->Line_14 $$ session = openSession()[ FD ]
Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_21 $$ Long count = (Long) q.uniqueResult()-->Line_22 $$ return count.intValue()[ FD ]
Line_11 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), BlogsEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_8 $$ query.append(_FINDER_COLUMN_G_U_S_GROUPID_2)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(4)-->Line_10 $$ query.append(_FINDER_COLUMN_G_U_S_STATUS_2)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_11 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), BlogsEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_11 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), BlogsEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(4)-->Line_9 $$ query.append(_FINDER_COLUMN_G_U_S_USERID_2)[ FD ]
Line_17 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(status)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_12 $$ Session session = null[ CD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_7 $$ query.append(_FILTER_SQL_COUNT_BLOGSENTRY_WHERE)[ CD ]
Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_21 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_4 $$ return countByG_U_S(groupId, userId, status)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_10 $$ query.append(_FINDER_COLUMN_G_U_S_STATUS_2)[ CD ]
Line_17 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_18 $$ qPos.add(groupId)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(4)-->Line_7 $$ query.append(_FILTER_SQL_COUNT_BLOGSENTRY_WHERE)[ FD ]
Line_12 $$ Session session = null-->Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(4)-->Line_8 $$ query.append(_FINDER_COLUMN_G_U_S_GROUPID_2)[ FD ]
Line_15 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_18 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_6 $$ StringBundler query = new StringBundler(4)[ CD ]
Line_17 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(userId)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_20 $$ qPos.add(status)[ FD ]
Line_2 $$ public int filterCountByG_U_S(long groupId, long userId, int status) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
Line_6 $$ StringBundler query = new StringBundler(4)-->Line_11 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), BlogsEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
