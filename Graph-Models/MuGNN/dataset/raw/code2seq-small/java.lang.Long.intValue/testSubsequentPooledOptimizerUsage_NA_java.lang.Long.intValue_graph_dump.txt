Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_12 $$ assertEquals(1001 + 1, next.intValue())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ assertEquals((1001 + 4), next.intValue())[ FD ]
Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_16 $$ assertEquals((1001 + 2), next.intValue())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 3), next.intValue())[ FD ]
Line_19 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ assertEquals((1001 + 4), next.intValue())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_16 $$ assertEquals((1001 + 2), next.intValue())[ FD ]
Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_25 $$ assertEquals((1001 + 4), next.intValue())[ FD ]
Line_15 $$ next = (Long) optimizer.generate(sequence)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_15 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_19 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 3), next.intValue())[ FD ]
Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_20 $$ assertEquals((1001 + 3), next.intValue())[ FD ]
Line_11 $$ Long next = (Long) optimizer.generate(sequence)-->Line_19 $$ next = (Long) optimizer.generate(sequence)[ FD ]
