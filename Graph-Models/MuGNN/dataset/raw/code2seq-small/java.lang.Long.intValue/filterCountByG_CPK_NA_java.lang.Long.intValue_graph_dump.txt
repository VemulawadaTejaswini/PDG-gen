Line_20 $$ StringBundler query = new StringBundler()-->Line_24 $$ query.append(_FINDER_COLUMN_G_CPK_GROUPID_7)[ FD ]
Line_33 $$ Session session = null-->Line_35 $$ session = openSession()[ FD ]
Line_11 $$ if (!InlineSQLHelperUtil.isEnabled(groupIds)) -->Line_12 $$ return countByG_CPK(groupIds, classPK)[ CD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_32 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DDMTemplate.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupIds)[ FD ]
Line_14 $$ if (groupIds == null) -->Line_16 $$ if (groupIds.length > 1) [ CD ]
Line_22 $$ if (groupIds.length > 0) -->Line_28 $$ query.append(WHERE_AND)[ CD ]
Line_15 $$ groupIds = new long[0]-->Line_32 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DDMTemplate.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupIds)[ FD ]
Line_15 $$ groupIds = new long[0]-->Line_25 $$ query.append(StringUtil.merge(groupIds))[ FD ]
Line_22 $$ if (groupIds.length > 0) -->Line_25 $$ query.append(StringUtil.merge(groupIds))[ CD ]
Line_35 $$ session = openSession()-->Line_45 $$ closeSession(session)[ FD ]
Line_22 $$ if (groupIds.length > 0) -->Line_23 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_22 $$ if (groupIds.length > 0) -->Line_26 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_15 $$ groupIds = new long[0]-->Line_18 $$ Arrays.sort(groupIds)[ FD ]
Line_16 $$ if (groupIds.length > 1) -->Line_18 $$ Arrays.sort(groupIds)[ CD ]
Line_22 $$ if (groupIds.length > 0) -->Line_27 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_22 $$ if (groupIds.length > 0) -->Line_24 $$ query.append(_FINDER_COLUMN_G_CPK_GROUPID_7)[ CD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_28 $$ query.append(WHERE_AND)[ FD ]
Line_32 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DDMTemplate.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupIds)-->Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_17 $$ groupIds = ArrayUtil.unique(groupIds)-->Line_25 $$ query.append(StringUtil.merge(groupIds))[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_30 $$ query.append(_FINDER_COLUMN_G_CPK_CLASSPK_2)[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_21 $$ query.append(_FILTER_SQL_COUNT_DDMTEMPLATE_WHERE)[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_27 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_38 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_17 $$ groupIds = ArrayUtil.unique(groupIds)-->Line_18 $$ Arrays.sort(groupIds)[ FD ]
Line_14 $$ if (groupIds == null) -->Line_15 $$ groupIds = new long[0][ CD ]
Line_15 $$ groupIds = new long[0]-->Line_17 $$ groupIds = ArrayUtil.unique(groupIds)[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_25 $$ query.append(StringUtil.merge(groupIds))[ FD ]
Line_17 $$ groupIds = ArrayUtil.unique(groupIds)-->Line_32 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DDMTemplate.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupIds)[ FD ]
Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_40 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_37 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_23 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_33 $$ Session session = null-->Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_40 $$ Long count = (Long) q.uniqueResult()-->Line_41 $$ return count.intValue()[ FD ]
Line_35 $$ session = openSession()-->Line_36 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ if (groupIds.length > 1) -->Line_17 $$ groupIds = ArrayUtil.unique(groupIds)[ CD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_31 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_20 $$ StringBundler query = new StringBundler()-->Line_26 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_33 $$ Session session = null-->Line_45 $$ closeSession(session)[ FD ]
Line_38 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_39 $$ qPos.add(classPK)[ FD ]
