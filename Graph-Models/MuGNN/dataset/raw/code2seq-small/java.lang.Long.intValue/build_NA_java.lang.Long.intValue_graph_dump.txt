Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_62 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) [ FD ]
Line_21 $$ Long runtime = null-->Line_34 $$ if (runtime != null) [ FD ]
Line_21 $$ Long runtime = null-->Line_63 $$ failedReduceAttemptTimes.enter(runtime)[ FD ]
Line_2 $$ public ParsedJob build() -->Line_16 $$ Histogram failedReduceAttemptTimes = new Histogram()[ CD ]
Line_43 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) -->Line_44 $$ if (runtime != null) [ CD ]
Line_68 $$ LoggedDiscreteCDF failedReduce = new LoggedDiscreteCDF()-->Line_70 $$ result.setFailedReduceAttemptCDF(failedReduce)[ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_22 $$ if (attempt.getFinishTime() > 0 && attempt.getStartTime() > 0) [ FD ]
Line_20 $$ int distance = successfulMapAttemptTimes.length - 1-->Line_30 $$ distance = Math.min(distance, preferedLoc.distance(new ParsedHost(host)))[ FD ]
Line_2 $$ public ParsedJob build() -->Line_7 $$ Histogram[] successfulMapAttemptTimes = new Histogram[ParsedHost.numberOfDistances() + 1][ CD ]
Line_21 $$ Long runtime = null-->Line_60 $$ successfulReduceAttemptTimes.enter(runtime)[ FD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_43 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) [ CD ]
Line_76 $$ long maxTriesToSucceed = 0L-->Line_79 $$ maxTriesToSucceed = Math.max(maxTriesToSucceed, ent.getKey())[ FD ]
Line_11 $$ Histogram successfulReduceAttemptTimes = new Histogram()-->Line_73 $$ succReduce.setCDF(successfulReduceAttemptTimes, attemptTimesPercentiles, 100)[ FD ]
Line_83 $$ for (int i = 0; i < successAfterI.length; ++i) -->Line_84 $$ successAfterI[i] = 0.0D[ CD ]
Line_2 $$ public ParsedJob build() -->Line_69 $$ failedReduce.setCDF(failedReduceAttemptTimes, attemptTimesPercentiles, 100)[ CD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_68 $$ LoggedDiscreteCDF failedReduce = new LoggedDiscreteCDF()-->Line_69 $$ failedReduce.setCDF(failedReduceAttemptTimes, attemptTimesPercentiles, 100)[ FD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_39 $$ if (attemptID != null) [ CD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_44 $$ if (runtime != null) [ FD ]
Line_2 $$ public ParsedJob build() -->Line_93 $$ return result[ CD ]
Line_13 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) -->Line_14 $$ failedMapAttemptTimes[i] = new Histogram()[ CD ]
Line_2 $$ public ParsedJob build() -->Line_17 $$ Histogram successfulNthMapperAttempts = new Histogram()[ CD ]
Line_17 $$ Histogram successfulNthMapperAttempts = new Histogram()-->Line_40 $$ successfulNthMapperAttempts.enter(attemptID.getId())[ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_43 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) [ FD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_59 $$ if (runtime != null) [ FD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_35 $$ successfulMapAttemptTimes[distance].enter(runtime)[ FD ]
Line_21 $$ Long runtime = null-->Line_45 $$ failedMapAttemptTimes[distance].enter(runtime)[ FD ]
Line_75 $$ long totalSuccessfulAttempts = 0L-->Line_81 $$ if (totalSuccessfulAttempts > 0L) [ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_54 $$ Long runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_33 $$ if (attempt.getStartTime() > 0 && attempt.getFinishTime() > 0) [ FD ]
Line_55 $$ if (attempt.getFinishTime() > 0 && attempt.getStartTime() > 0) -->Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ CD ]
Line_11 $$ Histogram successfulReduceAttemptTimes = new Histogram()-->Line_60 $$ successfulReduceAttemptTimes.enter(runtime)[ FD ]
Line_39 $$ if (attemptID != null) -->Line_40 $$ successfulNthMapperAttempts.enter(attemptID.getId())[ CD ]
Line_62 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) -->Line_63 $$ failedReduceAttemptTimes.enter(runtime)[ CD ]
Line_2 $$ public ParsedJob build() -->Line_11 $$ Histogram successfulReduceAttemptTimes = new Histogram()[ CD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_63 $$ failedReduceAttemptTimes.enter(runtime)[ FD ]
Line_21 $$ Long runtime = null-->Line_59 $$ if (runtime != null) [ FD ]
Line_2 $$ public ParsedJob build() -->Line_4 $$ if (jobConfigurationParameters != null) [ CD ]
Line_75 $$ long totalSuccessfulAttempts = 0L-->Line_78 $$ totalSuccessfulAttempts += ent.getValue()[ FD ]
Line_78 $$ totalSuccessfulAttempts += ent.getValue()-->Line_81 $$ if (totalSuccessfulAttempts > 0L) [ FD ]
Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_60 $$ successfulReduceAttemptTimes.enter(runtime)[ FD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_26 $$ List<LoggedLocation> locs = task.getPreferredLocations()[ CD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_58 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_59 $$ if (runtime != null) [ CD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_27 $$ if (host != null && locs != null) [ CD ]
Line_2 $$ public ParsedJob build() -->Line_12 $$ Histogram[] failedMapAttemptTimes = new Histogram[ParsedHost.numberOfDistances() + 1][ CD ]
Line_72 $$ LoggedDiscreteCDF succReduce = new LoggedDiscreteCDF()-->Line_73 $$ succReduce.setCDF(successfulReduceAttemptTimes, attemptTimesPercentiles, 100)[ FD ]
Line_81 $$ if (totalSuccessfulAttempts > 0L) -->Line_89 $$ result.setMapperTriesToSucceed(successAfterI)[ CD ]
Line_4 $$ if (jobConfigurationParameters != null) -->Line_5 $$ result.setJobProperties(jobConfigurationParameters)[ CD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_55 $$ if (attempt.getFinishTime() > 0 && attempt.getStartTime() > 0) [ FD ]
Line_33 $$ if (attempt.getStartTime() > 0 && attempt.getFinishTime() > 0) -->Line_34 $$ if (runtime != null) [ CD ]
Line_75 $$ long totalSuccessfulAttempts = 0L-->Line_87 $$ successAfterI[ent.getKey().intValue()] = ((double) ent.getValue()) / totalSuccessfulAttempts[ FD ]
Line_21 $$ Long runtime = null-->Line_35 $$ successfulMapAttemptTimes[distance].enter(runtime)[ FD ]
Line_34 $$ if (runtime != null) -->Line_35 $$ successfulMapAttemptTimes[distance].enter(runtime)[ CD ]
Line_2 $$ public ParsedJob build() -->Line_76 $$ long maxTriesToSucceed = 0L[ CD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_34 $$ if (runtime != null) [ FD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_45 $$ failedMapAttemptTimes[distance].enter(runtime)[ FD ]
Line_18 $$ for (LoggedTask task : result.getMapTasks()) -->Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) [ FD ]
Line_22 $$ if (attempt.getFinishTime() > 0 && attempt.getStartTime() > 0) -->Line_24 $$ if (attempt.getResult() == Values.SUCCESS) [ CD ]
Line_2 $$ public ParsedJob build() -->Line_75 $$ long totalSuccessfulAttempts = 0L[ CD ]
Line_38 $$ TaskAttemptID attemptID = attempt.getAttemptID()-->Line_39 $$ if (attemptID != null) [ FD ]
Line_59 $$ if (runtime != null) -->Line_60 $$ successfulReduceAttemptTimes.enter(runtime)[ CD ]
Line_58 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_62 $$ if (attempt.getResult() == Pre21JobHistoryConstants.Values.FAILED) [ CD ]
Line_77 $$ for (Map.Entry<Long, Long> ent : successfulNthMapperAttempts) -->Line_87 $$ successAfterI[ent.getKey().intValue()] = ((double) ent.getValue()) / totalSuccessfulAttempts[ FD ]
Line_21 $$ Long runtime = null-->Line_44 $$ if (runtime != null) [ FD ]
Line_82 $$ double[] successAfterI = new double[(int) maxTriesToSucceed + 1]-->Line_89 $$ result.setMapperTriesToSucceed(successAfterI)[ FD ]
Line_77 $$ for (Map.Entry<Long, Long> ent : successfulNthMapperAttempts) -->Line_79 $$ maxTriesToSucceed = Math.max(maxTriesToSucceed, ent.getKey())[ FD ]
Line_13 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) -->Line_83 $$ for (int i = 0; i < successAfterI.length; ++i) [ FD ]
Line_81 $$ if (totalSuccessfulAttempts > 0L) -->Line_91 $$ result.setMapperTriesToSucceed(null)[ CD ]
Line_78 $$ totalSuccessfulAttempts += ent.getValue()-->Line_87 $$ successAfterI[ent.getKey().intValue()] = ((double) ent.getValue()) / totalSuccessfulAttempts[ FD ]
Line_21 $$ Long runtime = null-->Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_38 $$ TaskAttemptID attemptID = attempt.getAttemptID()[ CD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_24 $$ if (attempt.getResult() == Values.SUCCESS) [ FD ]
Line_2 $$ public ParsedJob build() -->Line_81 $$ if (totalSuccessfulAttempts > 0L) [ CD ]
Line_29 $$ ParsedHost preferedLoc = new ParsedHost(loc)-->Line_30 $$ distance = Math.min(distance, preferedLoc.distance(new ParsedHost(host)))[ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_38 $$ TaskAttemptID attemptID = attempt.getAttemptID()[ FD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_25 $$ LoggedLocation host = attempt.getLocation()[ FD ]
Line_38 $$ TaskAttemptID attemptID = attempt.getAttemptID()-->Line_40 $$ successfulNthMapperAttempts.enter(attemptID.getId())[ FD ]
Line_2 $$ public ParsedJob build() -->Line_8 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) [ CD ]
Line_19 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) -->Line_58 $$ if (attempt.getResult() == Values.SUCCESS) [ FD ]
Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_63 $$ failedReduceAttemptTimes.enter(runtime)[ FD ]
Line_44 $$ if (runtime != null) -->Line_45 $$ failedMapAttemptTimes[distance].enter(runtime)[ CD ]
Line_2 $$ public ParsedJob build() -->Line_74 $$ result.setSuccessfulReduceAttemptCDF(succReduce)[ CD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_25 $$ LoggedLocation host = attempt.getLocation()[ CD ]
Line_2 $$ public ParsedJob build() -->Line_68 $$ LoggedDiscreteCDF failedReduce = new LoggedDiscreteCDF()[ CD ]
Line_8 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_13 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) [ FD ]
Line_18 $$ for (LoggedTask task : result.getMapTasks()) -->Line_26 $$ List<LoggedLocation> locs = task.getPreferredLocations()[ FD ]
Line_2 $$ public ParsedJob build() -->Line_70 $$ result.setFailedReduceAttemptCDF(failedReduce)[ CD ]
Line_2 $$ public ParsedJob build() -->Line_72 $$ LoggedDiscreteCDF succReduce = new LoggedDiscreteCDF()[ CD ]
Line_72 $$ LoggedDiscreteCDF succReduce = new LoggedDiscreteCDF()-->Line_74 $$ result.setSuccessfulReduceAttemptCDF(succReduce)[ FD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_7 $$ Histogram[] successfulMapAttemptTimes = new Histogram[ParsedHost.numberOfDistances() + 1]-->Line_71 $$ result.setSuccessfulMapAttemptCDFs(mapCDFArrayList(successfulMapAttemptTimes))[ FD ]
Line_2 $$ public ParsedJob build() -->Line_73 $$ succReduce.setCDF(successfulReduceAttemptTimes, attemptTimesPercentiles, 100)[ CD ]
Line_22 $$ if (attempt.getFinishTime() > 0 && attempt.getStartTime() > 0) -->Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ CD ]
Line_18 $$ for (LoggedTask task : result.getMapTasks()) -->Line_53 $$ for (LoggedTaskAttempt attempt : task.getAttempts()) [ FD ]
Line_21 $$ Long runtime = null-->Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()[ FD ]
Line_2 $$ public ParsedJob build() -->Line_13 $$ for (int i = 0; i < failedMapAttemptTimes.length; ++i) [ CD ]
Line_16 $$ Histogram failedReduceAttemptTimes = new Histogram()-->Line_69 $$ failedReduce.setCDF(failedReduceAttemptTimes, attemptTimesPercentiles, 100)[ FD ]
Line_77 $$ for (Map.Entry<Long, Long> ent : successfulNthMapperAttempts) -->Line_78 $$ totalSuccessfulAttempts += ent.getValue()[ FD ]
Line_8 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_9 $$ successfulMapAttemptTimes[i] = new Histogram()[ CD ]
Line_16 $$ Histogram failedReduceAttemptTimes = new Histogram()-->Line_63 $$ failedReduceAttemptTimes.enter(runtime)[ FD ]
Line_2 $$ public ParsedJob build() -->Line_67 $$ result.setFailedMapAttemptCDFs(mapCDFArrayList(failedMapAttemptTimes))[ CD ]
Line_81 $$ if (totalSuccessfulAttempts > 0L) -->Line_82 $$ double[] successAfterI = new double[(int) maxTriesToSucceed + 1][ CD ]
Line_2 $$ public ParsedJob build() -->Line_71 $$ result.setSuccessfulMapAttemptCDFs(mapCDFArrayList(successfulMapAttemptTimes))[ CD ]
Line_23 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_60 $$ successfulReduceAttemptTimes.enter(runtime)[ FD ]
Line_56 $$ runtime = attempt.getFinishTime() - attempt.getStartTime()-->Line_59 $$ if (runtime != null) [ FD ]
Line_12 $$ Histogram[] failedMapAttemptTimes = new Histogram[ParsedHost.numberOfDistances() + 1]-->Line_67 $$ result.setFailedMapAttemptCDFs(mapCDFArrayList(failedMapAttemptTimes))[ FD ]
Line_81 $$ if (totalSuccessfulAttempts > 0L) -->Line_83 $$ for (int i = 0; i < successAfterI.length; ++i) [ CD ]
Line_24 $$ if (attempt.getResult() == Values.SUCCESS) -->Line_33 $$ if (attempt.getStartTime() > 0 && attempt.getFinishTime() > 0) [ CD ]
Line_8 $$ for (int i = 0; i < successfulMapAttemptTimes.length; ++i) -->Line_83 $$ for (int i = 0; i < successAfterI.length; ++i) [ FD ]
