Line_6 $$ session = openSession()-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C)-->Line_9 $$ sql = StringUtil.replace(sql, "(MBThread.categoryId = ?) AND", StringPool.BLANK)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, "(MBThread.categoryId = ?) AND", StringPool.BLANK)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_17 $$ qPos.add(groupId)[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_18 $$ qPos.add(userId)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, "(MBThread.categoryId = ?) AND", StringPool.BLANK)-->Line_13 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_9 $$ sql = StringUtil.replace(sql, "(MBThread.categoryId = ?) AND", StringPool.BLANK)-->Line_11 $$ sql = StringUtil.replace(sql, "MBThread.categoryId = ?", "MBThread.categoryId = " + StringUtil.merge(categoryIds, " OR MBThread.categoryId = "))[ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(anonymous)[ FD ]
Line_4 $$ Session session = null-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ if (count != null) -->Line_27 $$ return count.intValue()[ CD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C)-->Line_11 $$ sql = StringUtil.replace(sql, "MBThread.categoryId = ?", "MBThread.categoryId = " + StringUtil.merge(categoryIds, " OR MBThread.categoryId = "))[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_11 $$ sql = StringUtil.replace(sql, "MBThread.categoryId = ?", "MBThread.categoryId = " + StringUtil.merge(categoryIds, " OR MBThread.categoryId = "))-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_8 $$ if (ArrayUtil.isEmpty(categoryIds)) -->Line_11 $$ sql = StringUtil.replace(sql, "MBThread.categoryId = ?", "MBThread.categoryId = " + StringUtil.merge(categoryIds, " OR MBThread.categoryId = "))[ CD ]
Line_6 $$ session = openSession()-->Line_34 $$ closeSession(session)[ FD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_15 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_25 $$ Long count = itr.next()-->Line_27 $$ return count.intValue()[ FD ]
Line_4 $$ Session session = null-->Line_34 $$ closeSession(session)[ FD ]
Line_13 $$ sql = updateSQL(sql, queryDefinition)-->Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_4 $$ Session session = null-->Line_6 $$ session = openSession()[ FD ]
Line_25 $$ Long count = itr.next()-->Line_26 $$ if (count != null) [ FD ]
Line_16 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_21 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_23 $$ Iterator<Long> itr = q.iterate()-->Line_24 $$ if (itr.hasNext()) [ FD ]
Line_20 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_21 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_8 $$ if (ArrayUtil.isEmpty(categoryIds)) -->Line_9 $$ sql = StringUtil.replace(sql, "(MBThread.categoryId = ?) AND", StringPool.BLANK)[ CD ]
Line_23 $$ Iterator<Long> itr = q.iterate()-->Line_25 $$ Long count = itr.next()[ FD ]
Line_24 $$ if (itr.hasNext()) -->Line_26 $$ if (count != null) [ CD ]
Line_11 $$ sql = StringUtil.replace(sql, "MBThread.categoryId = ?", "MBThread.categoryId = " + StringUtil.merge(categoryIds, " OR MBThread.categoryId = "))-->Line_13 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_7 $$ String sql = CustomSQLUtil.get(COUNT_BY_G_U_C)-->Line_13 $$ sql = updateSQL(sql, queryDefinition)[ FD ]
Line_24 $$ if (itr.hasNext()) -->Line_25 $$ Long count = itr.next()[ CD ]
Line_14 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_23 $$ Iterator<Long> itr = q.iterate()[ FD ]
