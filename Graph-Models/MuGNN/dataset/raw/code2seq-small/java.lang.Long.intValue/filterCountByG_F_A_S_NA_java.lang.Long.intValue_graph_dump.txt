Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_21 $$ qPos.add(active)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_10 $$ query.append(_FINDER_COLUMN_G_F_A_S_ACTIVE_2_SQL)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_9 $$ query.append(_FINDER_COLUMN_G_F_A_S_FOLDERID_2)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
Line_13 $$ Session session = null-->Line_15 $$ session = openSession()[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_12 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileShortcut.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_11 $$ query.append(_FINDER_COLUMN_G_F_A_S_STATUS_2)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_21 $$ qPos.add(active)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_9 $$ query.append(_FINDER_COLUMN_G_F_A_S_FOLDERID_2)[ CD ]
Line_15 $$ session = openSession()-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_13 $$ Session session = null[ CD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_23 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_22 $$ qPos.add(status)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_20 $$ qPos.add(folderId)[ FD ]
Line_13 $$ Session session = null-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_11 $$ query.append(_FINDER_COLUMN_G_F_A_S_STATUS_2)[ CD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_6 $$ StringBundler query = new StringBundler(5)[ CD ]
Line_12 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileShortcut.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_17 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_4 $$ return countByG_F_A_S(groupId, folderId, active, status)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_10 $$ query.append(_FINDER_COLUMN_G_F_A_S_ACTIVE_2_SQL)[ CD ]
Line_23 $$ Long count = (Long) q.uniqueResult()-->Line_24 $$ return count.intValue()[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_8 $$ query.append(_FINDER_COLUMN_G_F_A_S_GROUPID_2)[ CD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_7 $$ query.append(_FILTER_SQL_COUNT_DLFILESHORTCUT_WHERE)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_7 $$ query.append(_FILTER_SQL_COUNT_DLFILESHORTCUT_WHERE)[ FD ]
Line_15 $$ session = openSession()-->Line_28 $$ closeSession(session)[ FD ]
Line_16 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_19 $$ qPos.add(groupId)[ FD ]
Line_13 $$ Session session = null-->Line_28 $$ closeSession(session)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_8 $$ query.append(_FINDER_COLUMN_G_F_A_S_GROUPID_2)[ FD ]
Line_18 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_19 $$ qPos.add(groupId)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_20 $$ qPos.add(folderId)[ FD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_22 $$ qPos.add(status)[ FD ]
Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ return countByG_F_A_S(groupId, folderId, active, status)[ CD ]
Line_2 $$ public int filterCountByG_F_A_S(long groupId, long folderId, boolean active, int status) -->Line_12 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileShortcut.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_12 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileShortcut.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
