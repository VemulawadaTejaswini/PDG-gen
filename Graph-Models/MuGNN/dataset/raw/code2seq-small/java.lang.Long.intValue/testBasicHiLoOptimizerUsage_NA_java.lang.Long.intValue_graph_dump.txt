Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_23 $$ assertEquals(2, sequence.getTimesCalled())[ FD ]
Line_25 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(11, next.intValue())[ FD ]
Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_28 $$ assertEquals(2, sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_27 $$ assertEquals(3, sequence.getTimesCalled())[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_17 $$ sequence = new SourceMock(0)[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_27 $$ assertEquals(3, sequence.getTimesCalled())[ FD ]
Line_7 $$ for (int i = 1; i <= increment; i++) -->Line_8 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_4 $$ Long next-->Line_9 $$ assertEquals(i, next.intValue())[ FD ]
Line_13 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(11, next.intValue())[ FD ]
Line_3 $$ int increment = 10-->Line_19 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_3 $$ int increment = 10-->Line_18 $$ optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_18 $$ optimizer = buildHiloOptimizer(-1, increment)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_13 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_7 $$ for (int i = 1; i <= increment; i++) [ CD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_19 $$ for (int i = 1; i <= increment; i++) -->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_13 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_4 $$ Long next[ CD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_23 $$ assertEquals(2, sequence.getTimesCalled())[ FD ]
Line_4 $$ Long next-->Line_8 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ Long next-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_5 $$ SourceMock sequence = new SourceMock(1)[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_23 $$ assertEquals(2, sequence.getTimesCalled())[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_15 $$ assertEquals(2, sequence.getTimesCalled())[ FD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_16 $$ assertEquals(2, sequence.getCurrentValue())[ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(11, next.intValue())[ FD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_27 $$ assertEquals(3, sequence.getTimesCalled())[ FD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_19 $$ for (int i = 1; i <= increment; i++) -->Line_20 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_24 $$ assertEquals(1, sequence.getCurrentValue())[ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_14 $$ assertEquals(11, next.intValue())[ FD ]
Line_7 $$ for (int i = 1; i <= increment; i++) -->Line_9 $$ assertEquals(i, next.intValue())[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_12 $$ assertEquals(1, sequence.getCurrentValue())[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_19 $$ for (int i = 1; i <= increment; i++) [ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_24 $$ assertEquals(1, sequence.getCurrentValue())[ FD ]
Line_7 $$ for (int i = 1; i <= increment; i++) -->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_28 $$ assertEquals(2, sequence.getCurrentValue())[ FD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_8 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_18 $$ optimizer = buildHiloOptimizer(-1, increment)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_3 $$ int increment = 10-->Line_7 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_13 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_20 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(11, next.intValue())[ FD ]
Line_4 $$ Long next-->Line_13 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_25 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_4 $$ Long next-->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_20 $$ next = (Long) optimizer.generate(sequence)-->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_3 $$ int increment = 10-->Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_26 $$ assertEquals(11, next.intValue())[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_17 $$ sequence = new SourceMock(0)[ FD ]
Line_20 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_11 $$ assertEquals(1, sequence.getTimesCalled())[ CD ]
Line_13 $$ next = (Long) optimizer.generate(sequence)-->Line_14 $$ assertEquals(11, next.intValue())[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_15 $$ assertEquals(2, sequence.getTimesCalled())[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_12 $$ assertEquals(1, sequence.getCurrentValue())[ CD ]
Line_13 $$ next = (Long) optimizer.generate(sequence)-->Line_21 $$ assertEquals(i, next.intValue())[ FD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_28 $$ assertEquals(2, sequence.getCurrentValue())[ FD ]
Line_4 $$ Long next-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_16 $$ assertEquals(2, sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_24 $$ assertEquals(1, sequence.getCurrentValue())[ CD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_18 $$ optimizer = buildHiloOptimizer(-1, increment)[ CD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_7 $$ for (int i = 1; i <= increment; i++) -->Line_19 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_4 $$ Long next-->Line_14 $$ assertEquals(11, next.intValue())[ FD ]
Line_7 $$ for (int i = 1; i <= increment; i++) -->Line_9 $$ assertEquals(i, next.intValue())[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_3 $$ int increment = 10[ CD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_11 $$ assertEquals(1, sequence.getTimesCalled())[ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_13 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)[ CD ]
Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_8 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_5 $$ SourceMock sequence = new SourceMock(1)-->Line_13 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_2 $$ public void testBasicHiLoOptimizerUsage() -->Line_14 $$ assertEquals(11, next.intValue())[ CD ]
Line_13 $$ next = (Long) optimizer.generate(sequence)-->Line_20 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_19 $$ for (int i = 1; i <= increment; i++) -->Line_21 $$ assertEquals(i, next.intValue())[ CD ]
Line_17 $$ sequence = new SourceMock(0)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ Long next-->Line_26 $$ assertEquals(11, next.intValue())[ FD ]
Line_6 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_18 $$ optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_8 $$ next = (Long) optimizer.generate(sequence)-->Line_9 $$ assertEquals(i, next.intValue())[ FD ]
