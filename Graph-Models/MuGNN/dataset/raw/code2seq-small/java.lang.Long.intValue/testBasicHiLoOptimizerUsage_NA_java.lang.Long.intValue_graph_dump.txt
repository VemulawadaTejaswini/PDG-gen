Line_24 $$ for (int i = 1; i <= increment; i++) -->Line_26 $$ assertEquals(i, next.intValue())[ FD ]
Line_10 $$ next = (Long) optimizer.generate(sequence)-->Line_33 $$ assertEquals(11, next.intValue())[ FD ]
Line_4 $$ int increment = 10-->Line_24 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_5 $$ Long next-->Line_11 $$ assertEquals(i, next.intValue())[ FD ]
Line_5 $$ Long next-->Line_10 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_9 $$ for (int i = 1; i <= increment; i++) -->Line_10 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_10 $$ next = (Long) optimizer.generate(sequence)-->Line_11 $$ assertEquals(i, next.intValue())[ FD ]
Line_9 $$ for (int i = 1; i <= increment; i++) -->Line_11 $$ assertEquals(i, next.intValue())[ FD ]
Line_5 $$ Long next-->Line_18 $$ assertEquals(11, next.intValue())[ FD ]
Line_8 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_10 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_10 $$ next = (Long) optimizer.generate(sequence)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ int increment = 10-->Line_8 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_9 $$ for (int i = 1; i <= increment; i++) -->Line_24 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_10 $$ next = (Long) optimizer.generate(sequence)-->Line_18 $$ assertEquals(11, next.intValue())[ FD ]
Line_8 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_4 $$ int increment = 10-->Line_9 $$ for (int i = 1; i <= increment; i++) [ FD ]
Line_10 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(i, next.intValue())[ FD ]
Line_5 $$ Long next-->Line_26 $$ assertEquals(i, next.intValue())[ FD ]
Line_25 $$ next = (Long) optimizer.generate(sequence)-->Line_33 $$ assertEquals(11, next.intValue())[ FD ]
Line_24 $$ for (int i = 1; i <= increment; i++) -->Line_25 $$ next = (Long) optimizer.generate(sequence)[ CD ]
Line_8 $$ Optimizer optimizer = buildHiloOptimizer(-1, increment)-->Line_23 $$ optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_5 $$ Long next-->Line_33 $$ assertEquals(11, next.intValue())[ FD ]
Line_4 $$ int increment = 10-->Line_23 $$ optimizer = buildHiloOptimizer(-1, increment)[ FD ]
Line_9 $$ for (int i = 1; i <= increment; i++) -->Line_26 $$ assertEquals(i, next.intValue())[ FD ]
Line_5 $$ Long next-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_24 $$ for (int i = 1; i <= increment; i++) -->Line_26 $$ assertEquals(i, next.intValue())[ CD ]
Line_9 $$ for (int i = 1; i <= increment; i++) -->Line_11 $$ assertEquals(i, next.intValue())[ CD ]
Line_23 $$ optimizer = buildHiloOptimizer(-1, increment)-->Line_25 $$ next = (Long) optimizer.generate(sequence)[ FD ]
Line_25 $$ next = (Long) optimizer.generate(sequence)-->Line_26 $$ assertEquals(i, next.intValue())[ FD ]
