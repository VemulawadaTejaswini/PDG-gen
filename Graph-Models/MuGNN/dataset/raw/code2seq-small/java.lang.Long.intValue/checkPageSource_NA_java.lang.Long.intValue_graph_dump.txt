Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ CD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_20 $$ assertEquals(actualValue, expectedTimestamp)[ FD ]
Line_8 $$ Type type = types.get(i)-->Line_34 $$ type.writeObject(builder, expectedValue)[ FD ]
Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)-->Line_34 $$ type.writeObject(builder, expectedValue)[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_8 $$ Type type = types.get(i)[ CD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_11 $$ if (actualValue == null) [ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_28 $$ if (actualValue instanceof SqlVarbinary) [ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_8 $$ Type type = types.get(i)[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_10 $$ Object expectedValue = testColumn.getExpectedValue()[ CD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_11 $$ if (actualValue == null) [ CD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_34 $$ type.writeObject(builder, expectedValue)[ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)[ FD ]
Line_2 $$ protected void checkPageSource(ConnectorPageSource pageSource, List<TestColumn> testColumns, List<Type> types) throws IOException -->Line_8 $$ Type type = types.get(i)[ FD ]
Line_15 $$ if (testColumn.getObjectInspector().getTypeName().equals("date")) -->Line_16 $$ SqlDate expectedDate = new SqlDate(((Long) expectedValue).intValue())[ CD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_34 $$ type.writeObject(builder, expectedValue)[ CD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_10 $$ Object expectedValue = testColumn.getExpectedValue()[ FD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_34 $$ type.writeObject(builder, expectedValue)[ FD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)[ FD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_2 $$ protected void checkPageSource(ConnectorPageSource pageSource, List<TestColumn> testColumns, List<Type> types) throws IOException -->Line_41 $$ pageSource.close()[ FD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_13 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) [ FD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_18 $$ if (testColumn.getObjectInspector().getTypeName().equals("timestamp")) [ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_20 $$ assertEquals(actualValue, expectedTimestamp)[ FD ]
Line_19 $$ SqlTimestamp expectedTimestamp = new SqlTimestamp((Long) expectedValue, SESSION.getTimeZoneKey())-->Line_20 $$ assertEquals(actualValue, expectedTimestamp)[ FD ]
Line_15 $$ if (testColumn.getObjectInspector().getTypeName().equals("date")) -->Line_17 $$ assertEquals(actualValue, expectedDate)[ CD ]
Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)-->Line_12 $$ assertEquals(null, expectedValue, String.format("Expected non-null for column %d", i))[ FD ]
Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)-->Line_22 $$ if (expectedValue instanceof Slice) [ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_28 $$ if (actualValue instanceof SqlVarbinary) [ CD ]
Line_8 $$ Type type = types.get(i)-->Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)[ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()[ FD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_22 $$ if (expectedValue instanceof Slice) [ FD ]
Line_25 $$ if (actualValue instanceof Slice) -->Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()[ CD ]
Line_18 $$ if (testColumn.getObjectInspector().getTypeName().equals("timestamp")) -->Line_19 $$ SqlTimestamp expectedTimestamp = new SqlTimestamp((Long) expectedValue, SESSION.getTimeZoneKey())[ CD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_12 $$ assertEquals(null, expectedValue, String.format("Expected non-null for column %d", i))[ FD ]
Line_2 $$ protected void checkPageSource(ConnectorPageSource pageSource, List<TestColumn> testColumns, List<Type> types) throws IOException -->Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) [ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_7 $$ TestColumn testColumn = testColumns.get(i)[ FD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_12 $$ assertEquals(null, expectedValue, String.format("Expected non-null for column %d", i))[ FD ]
Line_11 $$ if (actualValue == null) -->Line_12 $$ assertEquals(null, expectedValue, String.format("Expected non-null for column %d", i))[ CD ]
Line_11 $$ if (actualValue == null) -->Line_13 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) [ CD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_20 $$ assertEquals(actualValue, expectedTimestamp)[ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_22 $$ if (expectedValue instanceof Slice) [ FD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_28 $$ if (actualValue instanceof SqlVarbinary) [ FD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ CD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_25 $$ if (actualValue instanceof Slice) [ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_33 $$ BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1)[ CD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_22 $$ if (expectedValue instanceof Slice) [ CD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_2 $$ protected void checkPageSource(ConnectorPageSource pageSource, List<TestColumn> testColumns, List<Type> types) throws IOException -->Line_4 $$ MaterializedResult result = materializeSourceDataStream(SESSION, pageSource, types)[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_12 $$ assertEquals(null, expectedValue, String.format("Expected non-null for column %d", i))[ FD ]
Line_18 $$ if (testColumn.getObjectInspector().getTypeName().equals("timestamp")) -->Line_20 $$ assertEquals(actualValue, expectedTimestamp)[ CD ]
Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()-->Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)[ FD ]
Line_15 $$ if (testColumn.getObjectInspector().getTypeName().equals("date")) -->Line_18 $$ if (testColumn.getObjectInspector().getTypeName().equals("timestamp")) [ CD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)[ FD ]
Line_5 $$ for (MaterializedRow row : result) -->Line_9 $$ Object actualValue = row.getField(i)[ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_17 $$ assertEquals(actualValue, expectedDate)[ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_9 $$ Object actualValue = row.getField(i)[ FD ]
Line_13 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) -->Line_14 $$ assertEquals((double) actualValue, (double) expectedValue, EPSILON)[ CD ]
Line_16 $$ SqlDate expectedDate = new SqlDate(((Long) expectedValue).intValue())-->Line_17 $$ assertEquals(actualValue, expectedDate)[ FD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_25 $$ if (actualValue instanceof Slice) [ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_9 $$ Object actualValue = row.getField(i)-->Line_31 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %d", i))[ FD ]
Line_10 $$ Object expectedValue = testColumn.getExpectedValue()-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_33 $$ BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)[ FD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) [ FD ]
Line_33 $$ BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1)-->Line_34 $$ type.writeObject(builder, expectedValue)[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_9 $$ Object actualValue = row.getField(i)[ CD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_25 $$ if (actualValue instanceof Slice) [ CD ]
Line_2 $$ protected void checkPageSource(ConnectorPageSource pageSource, List<TestColumn> testColumns, List<Type> types) throws IOException -->Line_7 $$ TestColumn testColumn = testColumns.get(i)[ FD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_36 $$ assertEquals(actualValue, expectedValue, String.format("Wrong value for column %s", testColumn.getName()))[ FD ]
Line_6 $$ for (int i = 0, testColumnsSize = testColumns.size(); i < testColumnsSize; i++) -->Line_7 $$ TestColumn testColumn = testColumns.get(i)[ CD ]
Line_18 $$ if (testColumn.getObjectInspector().getTypeName().equals("timestamp")) -->Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) [ CD ]
Line_28 $$ if (actualValue instanceof SqlVarbinary) -->Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)[ CD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_28 $$ if (actualValue instanceof SqlVarbinary) [ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_17 $$ assertEquals(actualValue, expectedDate)[ FD ]
Line_21 $$ if (testColumn.getObjectInspector().getCategory() == Category.PRIMITIVE) -->Line_35 $$ expectedValue = type.getObjectValue(SESSION, builder.build(), 0)[ CD ]
Line_7 $$ TestColumn testColumn = testColumns.get(i)-->Line_15 $$ if (testColumn.getObjectInspector().getTypeName().equals("date")) [ FD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_11 $$ if (actualValue == null) [ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_11 $$ if (actualValue == null) [ FD ]
Line_26 $$ actualValue = ((Slice) actualValue).toStringUtf8()-->Line_25 $$ if (actualValue instanceof Slice) [ FD ]
Line_13 $$ if (testColumn.getObjectInspector().getTypeName().equals("float") || testColumn.getObjectInspector().getTypeName().equals("double")) -->Line_15 $$ if (testColumn.getObjectInspector().getTypeName().equals("date")) [ CD ]
Line_8 $$ Type type = types.get(i)-->Line_33 $$ BlockBuilder builder = type.createBlockBuilder(new BlockBuilderStatus(), 1)[ FD ]
Line_22 $$ if (expectedValue instanceof Slice) -->Line_23 $$ expectedValue = ((Slice) expectedValue).toStringUtf8()[ CD ]
Line_29 $$ actualValue = new String(((SqlVarbinary) actualValue).getBytes(), UTF_8)-->Line_17 $$ assertEquals(actualValue, expectedDate)[ FD ]
