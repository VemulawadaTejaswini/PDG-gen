Line_18 $$ folderIds = ArrayUtil.unique(folderIds)-->Line_27 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_35 $$ Session session = null-->Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_27 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_15 $$ if (folderIds == null) -->Line_16 $$ folderIds = new long[0][ CD ]
Line_35 $$ Session session = null-->Line_48 $$ closeSession(session)[ FD ]
Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_43 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_12 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_13 $$ return countByG_F_F(groupId, folderIds, fileEntryTypeId)[ CD ]
Line_24 $$ if (folderIds.length > 0) -->Line_27 $$ query.append(StringUtil.merge(folderIds))[ CD ]
Line_24 $$ if (folderIds.length > 0) -->Line_29 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_37 $$ session = openSession()-->Line_48 $$ closeSession(session)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_28 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_26 $$ query.append(_FINDER_COLUMN_G_F_F_FOLDERID_7)[ FD ]
Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_39 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_34 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_40 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_42 $$ qPos.add(fileEntryTypeId)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_29 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_17 $$ if (folderIds.length > 1) -->Line_19 $$ Arrays.sort(folderIds)[ CD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_30 $$ query.append(WHERE_AND)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_32 $$ query.append(_FINDER_COLUMN_G_F_F_FILEENTRYTYPEID_2)[ FD ]
Line_24 $$ if (folderIds.length > 0) -->Line_26 $$ query.append(_FINDER_COLUMN_G_F_F_FOLDERID_7)[ CD ]
Line_43 $$ Long count = (Long) q.uniqueResult()-->Line_44 $$ return count.intValue()[ FD ]
Line_17 $$ if (folderIds.length > 1) -->Line_18 $$ folderIds = ArrayUtil.unique(folderIds)[ CD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_22 $$ query.append(_FILTER_SQL_COUNT_DLFILEENTRY_WHERE)[ FD ]
Line_24 $$ if (folderIds.length > 0) -->Line_25 $$ query.append(StringPool.OPEN_PARENTHESIS)[ CD ]
Line_40 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_41 $$ qPos.add(groupId)[ FD ]
Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_40 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_37 $$ session = openSession()-->Line_38 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_18 $$ folderIds = ArrayUtil.unique(folderIds)-->Line_19 $$ Arrays.sort(folderIds)[ FD ]
Line_24 $$ if (folderIds.length > 0) -->Line_28 $$ query.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_16 $$ folderIds = new long[0]-->Line_19 $$ Arrays.sort(folderIds)[ FD ]
Line_24 $$ if (folderIds.length > 0) -->Line_30 $$ query.append(WHERE_AND)[ CD ]
Line_16 $$ folderIds = new long[0]-->Line_18 $$ folderIds = ArrayUtil.unique(folderIds)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_33 $$ query.setStringAt(removeConjunction(query.stringAt(query.index() - 1)), query.index() - 1)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_34 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), DLFileEntry.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_23 $$ query.append(_FINDER_COLUMN_G_F_F_GROUPID_2)[ FD ]
Line_15 $$ if (folderIds == null) -->Line_17 $$ if (folderIds.length > 1) [ CD ]
Line_16 $$ folderIds = new long[0]-->Line_27 $$ query.append(StringUtil.merge(folderIds))[ FD ]
Line_21 $$ StringBundler query = new StringBundler()-->Line_25 $$ query.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_35 $$ Session session = null-->Line_37 $$ session = openSession()[ FD ]
