Line_6 $$ StringBundler query = new StringBundler(5)-->Line_19 $$ query.append(_FINDER_COLUMN_G_N_T_H_HEAD_2)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_30 $$ qPos.add(StringUtil.toLowerCase(title))[ FD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_33 $$ Long count = (Long) q.uniqueResult()[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_8 $$ query.append(_FINDER_COLUMN_G_N_T_H_GROUPID_2)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_14 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_3)[ FD ]
Line_21 $$ Session session = null-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_23 $$ session = openSession()-->Line_38 $$ closeSession(session)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_17 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_2)[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_8 $$ query.append(_FINDER_COLUMN_G_N_T_H_GROUPID_2)[ FD ]
Line_13 $$ if (title.equals(StringPool.BLANK)) -->Line_14 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_3)[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_19 $$ query.append(_FINDER_COLUMN_G_N_T_H_HEAD_2)[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_6 $$ StringBundler query = new StringBundler(5)[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_11 $$ if (title == null) [ FD ]
Line_10 $$ boolean bindTitle = false-->Line_16 $$ bindTitle = true[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_9 $$ query.append(_FINDER_COLUMN_G_N_T_H_NODEID_2)[ CD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_25 $$ q.addScalar(COUNT_COLUMN_NAME, com.liferay.portal.kernel.dao.orm.Type.LONG)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_4 $$ return countByG_N_T_H(groupId, nodeId, title, head)[ FD ]
Line_21 $$ Session session = null-->Line_38 $$ closeSession(session)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_20 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), WikiPage.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_20 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), WikiPage.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_11 $$ if (title == null) [ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_13 $$ if (title.equals(StringPool.BLANK)) [ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_32 $$ qPos.add(head)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_10 $$ boolean bindTitle = false[ CD ]
Line_33 $$ Long count = (Long) q.uniqueResult()-->Line_34 $$ return count.intValue()[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_28 $$ qPos.add(nodeId)[ FD ]
Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_30 $$ qPos.add(StringUtil.toLowerCase(title))[ FD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_12 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_1)[ FD ]
Line_11 $$ if (title == null) -->Line_12 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_1)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_7 $$ query.append(_FILTER_SQL_COUNT_WIKIPAGE_WHERE)[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_7 $$ query.append(_FILTER_SQL_COUNT_WIKIPAGE_WHERE)[ CD ]
Line_20 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), WikiPage.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_13 $$ if (title.equals(StringPool.BLANK)) -->Line_17 $$ query.append(_FINDER_COLUMN_G_N_T_H_TITLE_2)[ CD ]
Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) -->Line_4 $$ return countByG_N_T_H(groupId, nodeId, title, head)[ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_9 $$ query.append(_FINDER_COLUMN_G_N_T_H_NODEID_2)[ FD ]
Line_23 $$ session = openSession()-->Line_24 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_32 $$ qPos.add(head)[ FD ]
Line_26 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_27 $$ qPos.add(groupId)[ FD ]
Line_13 $$ if (title.equals(StringPool.BLANK)) -->Line_16 $$ bindTitle = true[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_21 $$ Session session = null[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_3 $$ if (!InlineSQLHelperUtil.isEnabled(groupId)) [ CD ]
Line_21 $$ Session session = null-->Line_23 $$ session = openSession()[ FD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_28 $$ qPos.add(nodeId)[ FD ]
Line_29 $$ if (bindTitle) -->Line_30 $$ qPos.add(StringUtil.toLowerCase(title))[ CD ]
Line_2 $$ public int filterCountByG_N_T_H(long groupId, long nodeId, String title, boolean head) -->Line_27 $$ qPos.add(groupId)[ FD ]
Line_11 $$ if (title == null) -->Line_13 $$ if (title.equals(StringPool.BLANK)) [ CD ]
Line_6 $$ StringBundler query = new StringBundler(5)-->Line_20 $$ String sql = InlineSQLHelperUtil.replacePermissionCheck(query.toString(), WikiPage.class.getName(), _FILTER_ENTITY_TABLE_FILTER_PK_COLUMN, groupId)[ FD ]
