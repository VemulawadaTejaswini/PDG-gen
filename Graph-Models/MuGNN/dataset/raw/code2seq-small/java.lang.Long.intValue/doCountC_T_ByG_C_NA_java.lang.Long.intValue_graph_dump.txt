Line_49 $$ if (l != null) -->Line_50 $$ count += l.intValue()[ CD ]
Line_48 $$ Long l = itr.next()-->Line_50 $$ count += l.intValue()[ FD ]
Line_8 $$ String sql = null-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_42 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_15 $$ if (inlineSQLHelper) -->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ CD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_43 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ FD ]
Line_26 $$ if (inlineSQLHelper) -->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ CD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_35 $$ qPos.add(groupId)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_35 $$ qPos.add(groupId)[ FD ]
Line_47 $$ while (itr.hasNext()) -->Line_48 $$ Long l = itr.next()[ CD ]
Line_42 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_43 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_46 $$ Iterator<Long> itr = q.iterate()-->Line_47 $$ while (itr.hasNext()) [ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ CD ]
Line_37 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) -->Line_38 $$ qPos.add(queryDefinition.getStatus())[ CD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_41 $$ qPos.add(categoryId)[ FD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_38 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_29 $$ sb.append(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_29 $$ sb.append(sql)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_3 $$ Session session = null[ CD ]
Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_8 $$ String sql = null-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_37 $$ if (queryDefinition.getStatus() != WorkflowConstants.STATUS_ANY) [ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ CD ]
Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_8 $$ String sql = null-->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ FD ]
Line_47 $$ while (itr.hasNext()) -->Line_49 $$ if (l != null) [ CD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_29 $$ sb.append(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_18 $$ sb.append(sql)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_18 $$ sb.append(sql)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_8 $$ String sql = null-->Line_29 $$ sb.append(sql)[ FD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_36 $$ qPos.add(categoryId)[ FD ]
Line_46 $$ Iterator<Long> itr = q.iterate()-->Line_48 $$ Long l = itr.next()[ FD ]
Line_8 $$ String sql = null-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_29 $$ sb.append(sql)[ FD ]
Line_3 $$ Session session = null-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_31 $$ sql = sb.toString()-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_29 $$ sb.append(sql)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_29 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = null-->Line_18 $$ sb.append(sql)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_43 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_8 $$ String sql = null-->Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) [ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_8 $$ String sql = null-->Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)[ FD ]
Line_8 $$ String sql = null-->Line_31 $$ sql = sb.toString()[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_3 $$ Session session = null-->Line_57 $$ closeSession(session)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_46 $$ Iterator<Long> itr = q.iterate()[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)-->Line_29 $$ sb.append(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_18 $$ sb.append(sql)[ FD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ CD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) [ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_8 $$ String sql = null-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_48 $$ Long l = itr.next()-->Line_49 $$ if (l != null) [ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_18 $$ sb.append(sql)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_41 $$ qPos.add(categoryId)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = openSession()[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_7 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_19 $$ sb.append(") UNION ALL (")[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_30 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_6 $$ StringBundler sb = new StringBundler(5)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_31 $$ sql = sb.toString()[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_34 $$ QueryPos qPos = QueryPos.getInstance(q)-->Line_40 $$ qPos.add(groupId)[ FD ]
Line_20 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ CD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_16 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBMessage.class.getName(), "MBThread.rootMessageId", groupId)-->Line_23 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P_S)[ FD ]
Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_21 $$ sql = CustomSQLUtil.get(COUNT_C_BY_G_P)-->Line_29 $$ sb.append(sql)[ FD ]
Line_8 $$ String sql = null-->Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_38 $$ qPos.add(queryDefinition.getStatus())[ FD ]
Line_5 $$ session = openSession()-->Line_57 $$ closeSession(session)[ FD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)[ CD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_40 $$ qPos.add(groupId)[ FD ]
Line_10 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C)-->Line_18 $$ sb.append(sql)[ FD ]
Line_45 $$ int count = 0-->Line_50 $$ count += l.intValue()[ FD ]
Line_5 $$ session = openSession()-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)-->Line_33 $$ q.addScalar(COUNT_COLUMN_NAME, Type.LONG)[ FD ]
Line_9 $$ if (queryDefinition.getStatus() == WorkflowConstants.STATUS_ANY) -->Line_12 $$ sql = CustomSQLUtil.get(COUNT_T_BY_G_C_S)[ CD ]
Line_27 $$ sql = InlineSQLHelperUtil.replacePermissionCheck(sql, MBCategory.class.getName(), "MBCategory.categoryId", groupId)-->Line_29 $$ sb.append(sql)[ FD ]
Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_32 $$ SQLQuery q = session.createSynchronizedSQLQuery(sql)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_36 $$ qPos.add(categoryId)[ FD ]
Line_2 $$ protected int doCountC_T_ByG_C(long groupId, long categoryId, QueryDefinition<?> queryDefinition, boolean inlineSQLHelper) -->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_8 $$ String sql = null-->Line_24 $$ sql = replaceExcludeStatus(sql, queryDefinition)[ FD ]
Line_13 $$ sql = replaceExcludeStatus(sql, queryDefinition)-->Line_31 $$ sql = sb.toString()[ FD ]
