Line_8 $$ if (dependantNode.index == -1) -->Line_11 $$ if (currentStack.contains(dependantNode)) [ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_3 $$ currentNode.index = index[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_3 $$ currentNode.index = index[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_11 $$ if (currentStack.contains(dependantNode)) [ FD ]
Line_16 $$ final ArrayList<InferenceGraphNode<T>> arrayList = new ArrayList<InferenceGraphNode<T>>()-->Line_20 $$ arrayList.add(cyclicNode)[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_15 $$ if (currentNode.lowlink == currentNode.index) [ CD ]
Line_7 $$ for (InferenceGraphNode<T> dependantNode : currentNode.getDependencies()) -->Line_9 $$ strongConnect(dependantNode, index, currentStack, result)[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_9 $$ strongConnect(dependantNode, index, currentStack, result)[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_18 $$ do [ FD ]
Line_16 $$ final ArrayList<InferenceGraphNode<T>> arrayList = new ArrayList<InferenceGraphNode<T>>()-->Line_22 $$ result.add(arrayList)[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_4 $$ currentNode.lowlink = index[ CD ]
Line_17 $$ InferenceGraphNode<T> cyclicNode-->Line_18 $$ do [ FD ]
Line_11 $$ if (currentStack.contains(dependantNode)) -->Line_12 $$ currentNode.lowlink = Math.min(currentNode.lowlink, dependantNode.index)[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_22 $$ result.add(arrayList)[ FD ]
Line_18 $$ do -->Line_20 $$ arrayList.add(cyclicNode)[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_6 $$ currentStack.push(currentNode)[ FD ]
Line_8 $$ if (dependantNode.index == -1) -->Line_10 $$ currentNode.lowlink = Math.min(currentNode.lowlink, dependantNode.lowlink)[ CD ]
Line_17 $$ InferenceGraphNode<T> cyclicNode-->Line_20 $$ arrayList.add(cyclicNode)[ FD ]
Line_19 $$ cyclicNode = currentStack.pop()-->Line_18 $$ do [ FD ]
Line_15 $$ if (currentNode.lowlink == currentNode.index) -->Line_16 $$ final ArrayList<InferenceGraphNode<T>> arrayList = new ArrayList<InferenceGraphNode<T>>()[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_5 $$ index++[ FD ]
Line_15 $$ if (currentNode.lowlink == currentNode.index) -->Line_22 $$ result.add(arrayList)[ CD ]
Line_17 $$ InferenceGraphNode<T> cyclicNode-->Line_19 $$ cyclicNode = currentStack.pop()[ FD ]
Line_19 $$ cyclicNode = currentStack.pop()-->Line_20 $$ arrayList.add(cyclicNode)[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_4 $$ currentNode.lowlink = index[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_6 $$ currentStack.push(currentNode)[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_24 $$ return index[ CD ]
Line_7 $$ for (InferenceGraphNode<T> dependantNode : currentNode.getDependencies()) -->Line_11 $$ if (currentStack.contains(dependantNode)) [ FD ]
Line_15 $$ if (currentNode.lowlink == currentNode.index) -->Line_18 $$ do [ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_19 $$ cyclicNode = currentStack.pop()[ FD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_5 $$ index++[ CD ]
Line_15 $$ if (currentNode.lowlink == currentNode.index) -->Line_17 $$ InferenceGraphNode<T> cyclicNode[ CD ]
Line_18 $$ do -->Line_19 $$ cyclicNode = currentStack.pop()[ CD ]
Line_2 $$ private static <T> int strongConnect(InferenceGraphNode<T> currentNode, int index, Stack<InferenceGraphNode<T>> currentStack, ArrayList<List<InferenceGraphNode<T>>> result) -->Line_7 $$ for (InferenceGraphNode<T> dependantNode : currentNode.getDependencies()) [ FD ]
Line_8 $$ if (dependantNode.index == -1) -->Line_9 $$ strongConnect(dependantNode, index, currentStack, result)[ CD ]
