Line_7 $$ String href = element.getAttributeValue(HREF)-->Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)[ FD ]
Line_35 $$ i += nodes.size()-->Line_37 $$ i--[ FD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_36 $$ remoteParsed.remove(i)[ FD ]
Line_11 $$ base = baseAttribute.getValue()-->Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_10 $$ if (baseAttribute != null) [ CD ]
Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)-->Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)[ FD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_34 $$ remoteParsed.addAll(i, nodes)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)[ FD ]
Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)-->Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) [ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)[ CD ]
Line_24 $$ final Element fallbackElement = element.getChild("fallback", element.getNamespace())-->Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)[ FD ]
Line_43 $$ Content content = (Content) o-->Line_44 $$ content.detach()[ FD ]
Line_22 $$ if (parse) -->Line_47 $$ return remoteParsed[ CD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_24 $$ final Element fallbackElement = element.getChild("fallback", element.getNamespace())[ FD ]
Line_14 $$ boolean parse = true-->Line_18 $$ parse = false[ FD ]
Line_22 $$ if (parse) -->Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)[ CD ]
Line_31 $$ if (o instanceof Element) -->Line_38 $$ e.detach()[ CD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_36 $$ remoteParsed.remove(i)[ FD ]
Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)-->Line_51 $$ String s = StreamUtil.readText(URLUtil.openResourceStream(remote), encoding)[ FD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_34 $$ remoteParsed.addAll(i, nodes)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_15 $$ final String parseAttribute = element.getAttributeValue(PARSE)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_50 $$ String encoding = element.getAttributeValue(ENCODING)[ FD ]
Line_22 $$ if (parse) -->Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) [ CD ]
Line_15 $$ final String parseAttribute = element.getAttributeValue(PARSE)-->Line_16 $$ if (parseAttribute != null) [ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_4 $$ if (!bases.isEmpty())[ CD ]
Line_52 $$ List<Content> resultList = new ArrayList<Content>(1)-->Line_53 $$ resultList.add(new Text(s))[ FD ]
Line_9 $$ Attribute baseAttribute = element.getAttribute(BASE, Namespace.XML_NAMESPACE)-->Line_10 $$ if (baseAttribute != null) [ FD ]
Line_5 $$ base = bases.peek()-->Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)[ FD ]
Line_3 $$ String base = ""-->Line_5 $$ base = bases.peek()[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_14 $$ boolean parse = true[ CD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_7 $$ String href = element.getAttributeValue(HREF)[ FD ]
Line_26 $$ if (!remoteParsed.isEmpty()) -->Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)[ CD ]
Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)-->Line_36 $$ remoteParsed.remove(i)[ FD ]
Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)-->Line_30 $$ Object o = remoteParsed.get(i)[ FD ]
Line_22 $$ if (parse) -->Line_24 $$ final Element fallbackElement = element.getChild("fallback", element.getNamespace())[ CD ]
Line_10 $$ if (baseAttribute != null) -->Line_11 $$ base = baseAttribute.getValue()[ CD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_6 $$ assert isIncludeElement(element)[ FD ]
Line_33 $$ List<? extends Content> nodes = resolve(e, bases)-->Line_35 $$ i += nodes.size()[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_4 $$ if (!bases.isEmpty())[ FD ]
Line_22 $$ if (parse) -->Line_26 $$ if (!remoteParsed.isEmpty()) [ CD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_37 $$ i--[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_9 $$ Attribute baseAttribute = element.getAttribute(BASE, Namespace.XML_NAMESPACE)[ FD ]
Line_15 $$ final String parseAttribute = element.getAttributeValue(PARSE)-->Line_20 $$ assert parseAttribute.equals(XML) : parseAttribute + "is not a legal value for the parse attribute"[ FD ]
Line_32 $$ Element e = (Element) o-->Line_33 $$ List<? extends Content> nodes = resolve(e, bases)[ FD ]
Line_35 $$ i += nodes.size()-->Line_30 $$ Object o = remoteParsed.get(i)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_5 $$ base = bases.peek()[ FD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_30 $$ Object o = remoteParsed.get(i)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_9 $$ Attribute baseAttribute = element.getAttribute(BASE, Namespace.XML_NAMESPACE)[ CD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_31 $$ if (o instanceof Element) [ CD ]
Line_15 $$ final String parseAttribute = element.getAttributeValue(PARSE)-->Line_17 $$ if (parseAttribute.equals(TEXT)) [ FD ]
Line_31 $$ if (o instanceof Element) -->Line_37 $$ i--[ CD ]
Line_27 $$ remoteParsed = extractNeededChildren(element, remoteParsed)-->Line_34 $$ remoteParsed.addAll(i, nodes)[ FD ]
Line_30 $$ Object o = remoteParsed.get(i)-->Line_31 $$ if (o instanceof Element) [ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_15 $$ final String parseAttribute = element.getAttributeValue(PARSE)[ CD ]
Line_31 $$ if (o instanceof Element) -->Line_32 $$ Element e = (Element) o[ CD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_30 $$ Object o = remoteParsed.get(i)[ FD ]
Line_3 $$ String base = ""-->Line_11 $$ base = baseAttribute.getValue()[ FD ]
Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)-->Line_23 $$ assert !bases.contains(remote.toExternalForm()) : "Circular XInclude Reference to " + remote.toExternalForm()[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_33 $$ List<? extends Content> nodes = resolve(e, bases)[ FD ]
Line_9 $$ Attribute baseAttribute = element.getAttribute(BASE, Namespace.XML_NAMESPACE)-->Line_11 $$ base = baseAttribute.getValue()[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_3 $$ String base = ""[ CD ]
Line_41 $$ for (Object o : remoteParsed) -->Line_42 $$ if (o instanceof Content) [ FD ]
Line_35 $$ i += nodes.size()-->Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) [ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_16 $$ if (parseAttribute != null) [ CD ]
Line_17 $$ if (parseAttribute.equals(TEXT)) -->Line_18 $$ parse = false[ CD ]
Line_35 $$ i += nodes.size()-->Line_34 $$ remoteParsed.addAll(i, nodes)[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_7 $$ String href = element.getAttributeValue(HREF)[ CD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_22 $$ if (parse) [ CD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_26 $$ if (!remoteParsed.isEmpty()) [ FD ]
Line_32 $$ Element e = (Element) o-->Line_38 $$ e.detach()[ FD ]
Line_42 $$ if (o instanceof Content) -->Line_43 $$ Content content = (Content) o[ CD ]
Line_31 $$ if (o instanceof Element) -->Line_35 $$ i += nodes.size()[ CD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)[ FD ]
Line_42 $$ if (o instanceof Content) -->Line_44 $$ content.detach()[ CD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_30 $$ Object o = remoteParsed.get(i)[ CD ]
Line_4 $$ if (!bases.isEmpty())-->Line_5 $$ base = bases.peek()[ CD ]
Line_31 $$ if (o instanceof Element) -->Line_33 $$ List<? extends Content> nodes = resolve(e, bases)[ CD ]
Line_3 $$ String base = ""-->Line_13 $$ URL remote = myPathResolver.resolvePath(href, base)[ FD ]
Line_35 $$ i += nodes.size()-->Line_36 $$ remoteParsed.remove(i)[ FD ]
Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) -->Line_35 $$ i += nodes.size()[ FD ]
Line_30 $$ Object o = remoteParsed.get(i)-->Line_42 $$ if (o instanceof Content) [ FD ]
Line_16 $$ if (parseAttribute != null) -->Line_17 $$ if (parseAttribute.equals(TEXT)) [ CD ]
Line_5 $$ base = bases.peek()-->Line_11 $$ base = baseAttribute.getValue()[ FD ]
Line_2 $$ private List<Content> resolveXIncludeElement(Element element, Stack<String> bases) throws XIncludeException -->Line_23 $$ assert !bases.contains(remote.toExternalForm()) : "Circular XInclude Reference to " + remote.toExternalForm()[ FD ]
Line_50 $$ String encoding = element.getAttributeValue(ENCODING)-->Line_51 $$ String s = StreamUtil.readText(URLUtil.openResourceStream(remote), encoding)[ FD ]
Line_31 $$ if (o instanceof Element) -->Line_36 $$ remoteParsed.remove(i)[ CD ]
Line_31 $$ if (o instanceof Element) -->Line_34 $$ remoteParsed.addAll(i, nodes)[ CD ]
Line_25 $$ List<Content> remoteParsed = parseRemote(bases, remote, fallbackElement)-->Line_29 $$ for (int i = 0; i < remoteParsed.size(); i++) [ FD ]
Line_33 $$ List<? extends Content> nodes = resolve(e, bases)-->Line_34 $$ remoteParsed.addAll(i, nodes)[ FD ]
