Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_13 $$ final PsiClass aClass = JavaPsiFacade.getElementFactory(project).createClassFromText(text, null).getInnerClasses()[0][ FD ]
Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_14 $$ return JavaPsiFacade.getElementFactory(project).createType(aClass)[ FD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_6 $$ if (methodName.startsWith("set")) [ CD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_5 $$ final String methodName = method.getName()[ FD ]
Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() [ FD ]
Line_6 $$ if (methodName.startsWith("set")) -->Line_7 $$ return null[ CD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_9 $$ return method.getGenericReturnType().toString() + " " + methodName + "();"[ CD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_9 $$ return method.getGenericReturnType().toString() + " " + methodName + "();"[ FD ]
Line_5 $$ final String methodName = method.getName()-->Line_6 $$ if (methodName.startsWith("set")) [ FD ]
Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_14 $$ return JavaPsiFacade.getElementFactory(project).createType(aClass)[ CD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_12 $$ final String text = "interface " + elementClass.getSimpleName() + " [ FD ]
Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() [ CD ]
Line_2 $$ public static PsiType createElementType(Project project, Class<?> elementClass) -->Line_12 $$ final String text = "interface " + elementClass.getSimpleName() + " [ FD ]
Line_3 $$ final List<String> methodNames = ContainerUtil.mapNotNull(elementClass.getMethods(), new Function<Method, String>() -->Line_5 $$ final String methodName = method.getName()[ CD ]
