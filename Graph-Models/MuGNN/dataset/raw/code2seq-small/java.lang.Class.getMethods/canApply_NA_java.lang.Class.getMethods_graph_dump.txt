Line_4 $$ if (!pc.getClassFilter().matches(targetClass)) -->Line_5 $$ return false[ CD ]
Line_9 $$ if (methodMatcher instanceof IntroductionAwareMethodMatcher) -->Line_10 $$ introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher[ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_3 $$ Assert.notNull(pc, "Pointcut must not be null")[ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_9 $$ if (methodMatcher instanceof IntroductionAwareMethodMatcher) [ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_13 $$ classes.add(targetClass)[ CD ]
Line_8 $$ IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null-->Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) [ FD ]
Line_16 $$ for (Method method : methods) -->Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) [ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_22 $$ return false[ CD ]
Line_8 $$ IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null-->Line_10 $$ introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher[ FD ]
Line_7 $$ MethodMatcher methodMatcher = pc.getMethodMatcher()-->Line_9 $$ if (methodMatcher instanceof IntroductionAwareMethodMatcher) [ FD ]
Line_14 $$ for (Class<?> clazz : classes) -->Line_15 $$ Method[] methods = clazz.getMethods()[ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_13 $$ classes.add(targetClass)[ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_3 $$ Assert.notNull(pc, "Pointcut must not be null")[ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_7 $$ MethodMatcher methodMatcher = pc.getMethodMatcher()[ CD ]
Line_12 $$ Set<Class<?>> classes = new LinkedHashSet<Class<?>>(ClassUtils.getAllInterfacesForClassAsSet(targetClass))-->Line_13 $$ classes.add(targetClass)[ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_12 $$ Set<Class<?>> classes = new LinkedHashSet<Class<?>>(ClassUtils.getAllInterfacesForClassAsSet(targetClass))[ FD ]
Line_10 $$ introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher-->Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) [ FD ]
Line_7 $$ MethodMatcher methodMatcher = pc.getMethodMatcher()-->Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) [ FD ]
Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) -->Line_18 $$ return true[ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_4 $$ if (!pc.getClassFilter().matches(targetClass)) [ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_12 $$ Set<Class<?>> classes = new LinkedHashSet<Class<?>>(ClassUtils.getAllInterfacesForClassAsSet(targetClass))[ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_7 $$ MethodMatcher methodMatcher = pc.getMethodMatcher()[ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_8 $$ IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null[ CD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_17 $$ if ((introductionAwareMethodMatcher != null && introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions)) || methodMatcher.matches(method, targetClass)) [ FD ]
Line_2 $$ public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) -->Line_4 $$ if (!pc.getClassFilter().matches(targetClass)) [ CD ]
