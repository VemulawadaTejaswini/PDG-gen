Line_8 $$ final Object[] newArgs-->Line_10 $$ newArgs = arguments[ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_24 $$ throw new NoSuchMethodException("unknown symbol: " + methodName + "(" + StringUtil.join(arguments, new Function<Object, String>() [ FD ]
Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)-->Line_12 $$ final Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_8 $$ final Object[] newArgs-->Line_14 $$ System.arraycopy(arguments, 0, newArgs, 0, parameterTypes.length - 1)[ FD ]
Line_8 $$ final Object[] newArgs-->Line_19 $$ return method.invoke(target, newArgs)[ FD ]
Line_8 $$ final Object[] newArgs-->Line_13 $$ newArgs = new Object[parameterTypes.length][ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_14 $$ System.arraycopy(arguments, 0, newArgs, 0, parameterTypes.length - 1)[ FD ]
Line_10 $$ newArgs = arguments-->Line_13 $$ newArgs = new Object[parameterTypes.length][ FD ]
Line_24 $$ throw new NoSuchMethodException("unknown symbol: " + methodName + "(" + StringUtil.join(arguments, new Function<Object, String>() -->Line_26 $$ return String.valueOf(o)[ FD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_14 $$ System.arraycopy(arguments, 0, newArgs, 0, parameterTypes.length - 1)[ CD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_3 $$ final Ref<Boolean> convertVarArgs = Ref.create(Boolean.FALSE)[ CD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_16 $$ System.arraycopy(arguments, parameterTypes.length - 1, varArgs, 0, varArgs.length)[ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_4 $$ final Collection<Method> methods = target == null ? staticMethods : Arrays.asList(target.getClass().getMethods())[ CD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_16 $$ System.arraycopy(arguments, parameterTypes.length - 1, varArgs, 0, varArgs.length)[ CD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_19 $$ return method.invoke(target, newArgs)[ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_6 $$ if (method != null) [ CD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)[ FD ]
Line_13 $$ newArgs = new Object[parameterTypes.length]-->Line_14 $$ System.arraycopy(arguments, 0, newArgs, 0, parameterTypes.length - 1)[ FD ]
Line_13 $$ newArgs = new Object[parameterTypes.length]-->Line_19 $$ return method.invoke(target, newArgs)[ FD ]
Line_15 $$ final Object[] varArgs = (Object[]) Array.newInstance(parameterTypes[parameterTypes.length - 1].getComponentType(), arguments.length - parameterTypes.length + 1)-->Line_17 $$ newArgs[parameterTypes.length - 1] = varArgs[ FD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_12 $$ final Class<?>[] parameterTypes = method.getParameterTypes()[ CD ]
Line_24 $$ throw new NoSuchMethodException("unknown symbol: " + methodName + "(" + StringUtil.join(arguments, new Function<Object, String>() -->Line_26 $$ return String.valueOf(o)[ CD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_10 $$ newArgs = arguments[ FD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_13 $$ newArgs = new Object[parameterTypes.length][ CD ]
Line_10 $$ newArgs = arguments-->Line_14 $$ System.arraycopy(arguments, 0, newArgs, 0, parameterTypes.length - 1)[ FD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_10 $$ newArgs = arguments[ CD ]
Line_3 $$ final Ref<Boolean> convertVarArgs = Ref.create(Boolean.FALSE)-->Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)[ FD ]
Line_15 $$ final Object[] varArgs = (Object[]) Array.newInstance(parameterTypes[parameterTypes.length - 1].getComponentType(), arguments.length - parameterTypes.length + 1)-->Line_16 $$ System.arraycopy(arguments, parameterTypes.length - 1, varArgs, 0, varArgs.length)[ FD ]
Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)-->Line_19 $$ return method.invoke(target, newArgs)[ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)[ CD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_15 $$ final Object[] varArgs = (Object[]) Array.newInstance(parameterTypes[parameterTypes.length - 1].getComponentType(), arguments.length - parameterTypes.length + 1)[ CD ]
Line_3 $$ final Ref<Boolean> convertVarArgs = Ref.create(Boolean.FALSE)-->Line_9 $$ if (!convertVarArgs.get())[ FD ]
Line_9 $$ if (!convertVarArgs.get())-->Line_17 $$ newArgs[parameterTypes.length - 1] = varArgs[ CD ]
Line_10 $$ newArgs = arguments-->Line_19 $$ return method.invoke(target, newArgs)[ FD ]
Line_4 $$ final Collection<Method> methods = target == null ? staticMethods : Arrays.asList(target.getClass().getMethods())-->Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)[ FD ]
Line_5 $$ final Method method = findMethod(methodName, arguments, methods, convertVarArgs)-->Line_6 $$ if (method != null) [ FD ]
Line_2 $$ private static Object invokeMethod(@Nullable final Object target, final String methodName, final Object[] arguments, final Collection<Method> staticMethods) throws Throwable -->Line_4 $$ final Collection<Method> methods = target == null ? staticMethods : Arrays.asList(target.getClass().getMethods())[ FD ]
