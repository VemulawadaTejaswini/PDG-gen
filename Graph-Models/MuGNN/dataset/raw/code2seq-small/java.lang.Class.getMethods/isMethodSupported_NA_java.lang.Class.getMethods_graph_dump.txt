Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_22 $$ Method[] allMethods = protocol.getMethods()[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_3 $$ InetSocketAddress serverAddress = RPC.getServerAddress(rpcProxy)[ CD ]
Line_5 $$ if (versionMap == null) -->Line_10 $$ builder.setProtocol(protocol.getName())[ CD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_11 $$ builder.setRpcKind(rpcKind.toString())[ FD ]
Line_30 $$ if (desiredMethod == null) -->Line_31 $$ return false[ CD ]
Line_21 $$ Method desiredMethod-->Line_23 $$ desiredMethod = null[ FD ]
Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())-->Line_34 $$ return methodExists(methodHash, version, versionMap)[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_19 $$ putVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString(), versionMap)[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_21 $$ Method desiredMethod[ CD ]
Line_21 $$ Method desiredMethod-->Line_33 $$ int methodHash = ProtocolSignature.getFingerprint(desiredMethod)[ FD ]
Line_5 $$ if (versionMap == null) -->Line_8 $$ ProtocolMetaInfoPB protocolInfoProxy = getProtocolMetaInfoProxy(rpcProxy, conf)[ CD ]
Line_5 $$ if (versionMap == null) -->Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())[ CD ]
Line_21 $$ Method desiredMethod-->Line_26 $$ desiredMethod = m[ FD ]
Line_5 $$ if (versionMap == null) -->Line_9 $$ GetProtocolSignatureRequestProto.Builder builder = GetProtocolSignatureRequestProto.newBuilder()[ CD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_33 $$ int methodHash = ProtocolSignature.getFingerprint(desiredMethod)[ CD ]
Line_26 $$ desiredMethod = m-->Line_33 $$ int methodHash = ProtocolSignature.getFingerprint(desiredMethod)[ FD ]
Line_5 $$ if (versionMap == null) -->Line_12 $$ GetProtocolSignatureResponseProto resp[ CD ]
Line_5 $$ if (versionMap == null) -->Line_19 $$ putVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString(), versionMap)[ CD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_5 $$ if (versionMap == null) [ CD ]
Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())-->Line_19 $$ putVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString(), versionMap)[ FD ]
Line_24 $$ for (Method m : allMethods) -->Line_25 $$ if (m.getName().equals(methodName)) [ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_3 $$ InetSocketAddress serverAddress = RPC.getServerAddress(rpcProxy)[ FD ]
Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())-->Line_5 $$ if (versionMap == null) [ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_34 $$ return methodExists(methodHash, version, versionMap)[ CD ]
Line_23 $$ desiredMethod = null-->Line_33 $$ int methodHash = ProtocolSignature.getFingerprint(desiredMethod)[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_8 $$ ProtocolMetaInfoPB protocolInfoProxy = getProtocolMetaInfoProxy(rpcProxy, conf)[ FD ]
Line_12 $$ GetProtocolSignatureResponseProto resp-->Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_23 $$ desiredMethod = null[ CD ]
Line_9 $$ GetProtocolSignatureRequestProto.Builder builder = GetProtocolSignatureRequestProto.newBuilder()-->Line_10 $$ builder.setProtocol(protocol.getName())[ FD ]
Line_9 $$ GetProtocolSignatureRequestProto.Builder builder = GetProtocolSignatureRequestProto.newBuilder()-->Line_14 $$ resp = protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER, builder.build())[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())[ CD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_10 $$ builder.setProtocol(protocol.getName())[ FD ]
Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())-->Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())[ FD ]
Line_8 $$ ProtocolMetaInfoPB protocolInfoProxy = getProtocolMetaInfoProxy(rpcProxy, conf)-->Line_14 $$ resp = protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER, builder.build())[ FD ]
Line_14 $$ resp = protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER, builder.build())-->Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())[ FD ]
Line_23 $$ desiredMethod = null-->Line_26 $$ desiredMethod = m[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class, ProtobufRpcEngine.class)[ FD ]
Line_5 $$ if (versionMap == null) -->Line_11 $$ builder.setRpcKind(rpcKind.toString())[ CD ]
Line_3 $$ InetSocketAddress serverAddress = RPC.getServerAddress(rpcProxy)-->Line_19 $$ putVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString(), versionMap)[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_22 $$ Method[] allMethods = protocol.getMethods()[ CD ]
Line_12 $$ GetProtocolSignatureResponseProto resp-->Line_14 $$ resp = protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER, builder.build())[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_30 $$ if (desiredMethod == null) [ CD ]
Line_18 $$ versionMap = convertProtocolSignatureProtos(resp.getProtocolSignatureList())-->Line_34 $$ return methodExists(methodHash, version, versionMap)[ FD ]
Line_3 $$ InetSocketAddress serverAddress = RPC.getServerAddress(rpcProxy)-->Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())[ FD ]
Line_21 $$ Method desiredMethod-->Line_30 $$ if (desiredMethod == null) [ FD ]
Line_25 $$ if (m.getName().equals(methodName)) -->Line_26 $$ desiredMethod = m[ CD ]
Line_26 $$ desiredMethod = m-->Line_30 $$ if (desiredMethod == null) [ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_8 $$ ProtocolMetaInfoPB protocolInfoProxy = getProtocolMetaInfoProxy(rpcProxy, conf)[ FD ]
Line_23 $$ desiredMethod = null-->Line_30 $$ if (desiredMethod == null) [ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_34 $$ return methodExists(methodHash, version, versionMap)[ FD ]
Line_5 $$ if (versionMap == null) -->Line_7 $$ RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class, ProtobufRpcEngine.class)[ CD ]
Line_4 $$ Map<Long, ProtocolSignature> versionMap = getVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString())-->Line_19 $$ putVersionSignatureMap(serverAddress, protocol.getName(), rpcKind.toString(), versionMap)[ FD ]
Line_33 $$ int methodHash = ProtocolSignature.getFingerprint(desiredMethod)-->Line_34 $$ return methodExists(methodHash, version, versionMap)[ FD ]
Line_2 $$ public static boolean isMethodSupported(Object rpcProxy, Class<?> protocol, RPC.RpcKind rpcKind, long version, String methodName) throws IOException -->Line_25 $$ if (m.getName().equals(methodName)) [ FD ]
Line_9 $$ GetProtocolSignatureRequestProto.Builder builder = GetProtocolSignatureRequestProto.newBuilder()-->Line_11 $$ builder.setRpcKind(rpcKind.toString())[ FD ]
Line_5 $$ if (versionMap == null) -->Line_6 $$ Configuration conf = new Configuration()[ CD ]
Line_24 $$ for (Method m : allMethods) -->Line_26 $$ desiredMethod = m[ FD ]
