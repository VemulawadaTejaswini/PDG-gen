Line_17 $$ for (int j = 0; j < parameterTypes.length; j++) -->Line_19 $$ Class<?> b = curParameterTypes[j][ CD ]
Line_2 $$ private Object _invoke(MethodHandler methodHandler) throws Exception -->Line_26 $$ return method.invoke(_obj, methodHandler.getArguments())[ FD ]
Line_9 $$ Class<?> clazz = Class.forName(_className, true, _classLoader)-->Line_10 $$ for (Method method : clazz.getMethods()) [ FD ]
Line_16 $$ boolean correctParams = true-->Line_21 $$ correctParams = false[ FD ]
Line_25 $$ if (correctParams) -->Line_26 $$ return method.invoke(_obj, methodHandler.getArguments())[ CD ]
Line_11 $$ String curName = method.getName()-->Line_13 $$ if (!curName.equals(name) || (curParameterTypes.length != parameterTypes.length)) [ FD ]
Line_7 $$ String name = methodKey.getMethodName()-->Line_13 $$ if (!curName.equals(name) || (curParameterTypes.length != parameterTypes.length)) [ FD ]
Line_19 $$ Class<?> b = curParameterTypes[j]-->Line_20 $$ if (!ClassUtil.isSubclass(a, b.getName())) [ FD ]
Line_6 $$ MethodKey methodKey = methodHandler.getMethodKey()-->Line_8 $$ Class<?>[] parameterTypes = methodKey.getParameterTypes()[ FD ]
Line_10 $$ for (Method method : clazz.getMethods()) -->Line_11 $$ String curName = method.getName()[ FD ]
Line_20 $$ if (!ClassUtil.isSubclass(a, b.getName())) -->Line_21 $$ correctParams = false[ CD ]
Line_2 $$ private Object _invoke(MethodHandler methodHandler) throws Exception -->Line_4 $$ return methodHandler.invoke(_obj)[ FD ]
Line_17 $$ for (int j = 0; j < parameterTypes.length; j++) -->Line_18 $$ Class<?> a = parameterTypes[j][ CD ]
Line_10 $$ for (Method method : clazz.getMethods()) -->Line_26 $$ return method.invoke(_obj, methodHandler.getArguments())[ FD ]
Line_6 $$ MethodKey methodKey = methodHandler.getMethodKey()-->Line_7 $$ String name = methodKey.getMethodName()[ FD ]
Line_10 $$ for (Method method : clazz.getMethods()) -->Line_12 $$ Class<?>[] curParameterTypes = method.getParameterTypes()[ FD ]
Line_18 $$ Class<?> a = parameterTypes[j]-->Line_20 $$ if (!ClassUtil.isSubclass(a, b.getName())) [ FD ]
Line_2 $$ private Object _invoke(MethodHandler methodHandler) throws Exception -->Line_6 $$ MethodKey methodKey = methodHandler.getMethodKey()[ FD ]
Line_17 $$ for (int j = 0; j < parameterTypes.length; j++) -->Line_20 $$ if (!ClassUtil.isSubclass(a, b.getName())) [ CD ]
