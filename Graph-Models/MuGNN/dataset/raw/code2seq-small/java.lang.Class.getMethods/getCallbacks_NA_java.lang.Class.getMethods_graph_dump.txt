Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_4 $$ boolean isFrozen = this.advised.isFrozen()[ CD ]
Line_28 $$ callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length]-->Line_29 $$ System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length)[ FD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_21 $$ Callback[] fixedCallbacks = new Callback[methods.length][ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_20 $$ Method[] methods = rootClass.getMethods()[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_19 $$ if (isStatic && isFrozen) [ CD ]
Line_28 $$ callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length]-->Line_30 $$ System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length)[ FD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_8 $$ if (exposeProxy) [ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_28 $$ callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length][ CD ]
Line_23 $$ for (int x = 0; x < methods.length; x++) -->Line_24 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass)[ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_30 $$ System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length)[ CD ]
Line_7 $$ Callback targetInterceptor-->Line_9 $$ targetInterceptor = isStatic ? new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource())[ FD ]
Line_18 $$ Callback[] callbacks-->Line_29 $$ System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length)[ FD ]
Line_18 $$ Callback[] callbacks-->Line_30 $$ System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length)[ FD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_14 $$ Callback[] mainCallbacks = new Callback[] [ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_6 $$ Callback aopInterceptor = new DynamicAdvisedInterceptor(this.advised)[ CD ]
Line_8 $$ if (exposeProxy) -->Line_11 $$ targetInterceptor = isStatic ? new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedInterceptor(this.advised.getTargetSource())[ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_23 $$ for (int x = 0; x < methods.length; x++) [ CD ]
Line_14 $$ Callback[] mainCallbacks = new Callback[] -->Line_29 $$ System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length)[ FD ]
Line_18 $$ Callback[] callbacks-->Line_28 $$ callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length][ FD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_3 $$ boolean exposeProxy = this.advised.isExposeProxy()[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_7 $$ Callback targetInterceptor[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_18 $$ Callback[] callbacks[ CD ]
Line_18 $$ Callback[] callbacks-->Line_33 $$ callbacks = mainCallbacks[ FD ]
Line_23 $$ for (int x = 0; x < methods.length; x++) -->Line_26 $$ this.fixedInterceptorMap.put(methods[x].toString(), x)[ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_31 $$ this.fixedInterceptorOffset = mainCallbacks.length[ CD ]
Line_8 $$ if (exposeProxy) -->Line_9 $$ targetInterceptor = isStatic ? new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource())[ CD ]
Line_14 $$ Callback[] mainCallbacks = new Callback[] -->Line_33 $$ callbacks = mainCallbacks[ FD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_22 $$ this.fixedInterceptorMap = new HashMap<String, Integer>(methods.length)[ CD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_29 $$ System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length)[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_24 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass)[ FD ]
Line_7 $$ Callback targetInterceptor-->Line_11 $$ targetInterceptor = isStatic ? new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedInterceptor(this.advised.getTargetSource())[ FD ]
Line_23 $$ for (int x = 0; x < methods.length; x++) -->Line_26 $$ this.fixedInterceptorMap.put(methods[x].toString(), x)[ FD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_13 $$ Callback targetDispatcher = isStatic ? new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp()[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_20 $$ Method[] methods = rootClass.getMethods()[ FD ]
Line_19 $$ if (isStatic && isFrozen) -->Line_33 $$ callbacks = mainCallbacks[ CD ]
Line_21 $$ Callback[] fixedCallbacks = new Callback[methods.length]-->Line_30 $$ System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length)[ FD ]
Line_4 $$ boolean isFrozen = this.advised.isFrozen()-->Line_19 $$ if (isStatic && isFrozen) [ FD ]
Line_9 $$ targetInterceptor = isStatic ? new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource())-->Line_11 $$ targetInterceptor = isStatic ? new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) : new DynamicUnadvisedInterceptor(this.advised.getTargetSource())[ FD ]
Line_28 $$ callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length]-->Line_33 $$ callbacks = mainCallbacks[ FD ]
Line_5 $$ boolean isStatic = this.advised.getTargetSource().isStatic()-->Line_19 $$ if (isStatic && isFrozen) [ FD ]
Line_23 $$ for (int x = 0; x < methods.length; x++) -->Line_25 $$ fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass())[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_5 $$ boolean isStatic = this.advised.getTargetSource().isStatic()[ CD ]
Line_2 $$ private Callback[] getCallbacks(Class<?> rootClass) throws Exception -->Line_35 $$ return callbacks[ CD ]
