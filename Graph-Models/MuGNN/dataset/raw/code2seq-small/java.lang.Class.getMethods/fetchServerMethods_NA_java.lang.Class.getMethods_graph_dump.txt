Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_3 $$ long clientVersion[ CD ]
Line_3 $$ long clientVersion-->Line_8 $$ if (serverVersion != clientVersion) [ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_8 $$ if (serverVersion != clientVersion) [ CD ]
Line_11 $$ int[] serverMethodsCodes = serverInfo.getMethods()-->Line_12 $$ if (serverMethodsCodes != null) [ FD ]
Line_4 $$ clientVersion = RPC.getProtocolVersion(method.getDeclaringClass())-->Line_8 $$ if (serverVersion != clientVersion) [ FD ]
Line_4 $$ clientVersion = RPC.getProtocolVersion(method.getDeclaringClass())-->Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)[ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_4 $$ clientVersion = RPC.getProtocolVersion(method.getDeclaringClass())[ CD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_11 $$ int[] serverMethodsCodes = serverInfo.getMethods()[ CD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_4 $$ clientVersion = RPC.getProtocolVersion(method.getDeclaringClass())[ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_5 $$ int clientMethodsHash = ProtocolSignature.getFingerprint(method.getDeclaringClass().getMethods())[ FD ]
Line_3 $$ long clientVersion-->Line_4 $$ clientVersion = RPC.getProtocolVersion(method.getDeclaringClass())[ FD ]
Line_7 $$ long serverVersion = serverInfo.getVersion()-->Line_8 $$ if (serverVersion != clientVersion) [ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_5 $$ int clientMethodsHash = ProtocolSignature.getFingerprint(method.getDeclaringClass().getMethods())[ CD ]
Line_5 $$ int clientMethodsHash = ProtocolSignature.getFingerprint(method.getDeclaringClass().getMethods())-->Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)[ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_7 $$ long serverVersion = serverInfo.getVersion()[ CD ]
Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)-->Line_11 $$ int[] serverMethodsCodes = serverInfo.getMethods()[ FD ]
Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)-->Line_7 $$ long serverVersion = serverInfo.getVersion()[ FD ]
Line_14 $$ for (int m : serverMethodsCodes) -->Line_15 $$ this.serverMethods.add(Integer.valueOf(m))[ FD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_12 $$ if (serverMethodsCodes != null) [ CD ]
Line_2 $$ private void fetchServerMethods(Method method) throws IOException -->Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)[ CD ]
Line_3 $$ long clientVersion-->Line_6 $$ ProtocolSignature serverInfo = ((VersionedProtocol) proxy).getProtocolSignature(RPC.getProtocolName(protocol), clientVersion, clientMethodsHash)[ FD ]
