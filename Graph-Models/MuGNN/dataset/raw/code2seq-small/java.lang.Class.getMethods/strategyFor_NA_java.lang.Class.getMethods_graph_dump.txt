Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_7 $$ if (annotationType.getMethods().length == 0) [ CD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_10 $$ return new AnnotationInstanceStrategy(annotation)[ CD ]
Line_4 $$ Class<? extends Annotation> annotationType = annotation.annotationType()-->Line_5 $$ ensureRetainedAtRuntime(annotationType)[ FD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_4 $$ Class<? extends Annotation> annotationType = annotation.annotationType()[ FD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_6 $$ ensureIsBindingAnnotation(annotationType)[ CD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_5 $$ ensureRetainedAtRuntime(annotationType)[ CD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_4 $$ Class<? extends Annotation> annotationType = annotation.annotationType()[ CD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_3 $$ Objects.requireNonNull(annotation, "annotation")[ FD ]
Line_2 $$ static AnnotationStrategy strategyFor(Annotation annotation) -->Line_3 $$ Objects.requireNonNull(annotation, "annotation")[ CD ]
Line_4 $$ Class<? extends Annotation> annotationType = annotation.annotationType()-->Line_6 $$ ensureIsBindingAnnotation(annotationType)[ FD ]
Line_7 $$ if (annotationType.getMethods().length == 0) -->Line_8 $$ return new AnnotationTypeStrategy(annotationType, annotation)[ CD ]
Line_4 $$ Class<? extends Annotation> annotationType = annotation.annotationType()-->Line_7 $$ if (annotationType.getMethods().length == 0) [ FD ]
