Line_5 $$ if (method.getName().startsWith("get") && isGetter(method)) -->Line_9 $$ if (method.getName().startsWith("is") && isBooleanGetter(method)) [ CD ]
Line_9 $$ if (method.getName().startsWith("is") && isBooleanGetter(method)) -->Line_12 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ CD ]
Line_9 $$ if (method.getName().startsWith("is") && isBooleanGetter(method)) -->Line_11 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)[ CD ]
Line_7 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_11 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_3 $$ HashMap<String, PropertyAccessor> properties = new HashMap<String, PropertyAccessor>()-->Line_12 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_6 $$ String propertyName = method.getName().substring(3)-->Line_7 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_2 $$ public static <T> Map<String, PropertyAccessor> readableProperties(Class<T> target) -->Line_15 $$ return properties[ CD ]
Line_4 $$ for (Method method : target.getMethods()) -->Line_9 $$ if (method.getName().startsWith("is") && isBooleanGetter(method)) [ FD ]
Line_5 $$ if (method.getName().startsWith("get") && isGetter(method)) -->Line_8 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ CD ]
Line_7 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_8 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_9 $$ if (method.getName().startsWith("is") && isBooleanGetter(method)) -->Line_10 $$ String propertyName = method.getName().substring(2)[ CD ]
Line_3 $$ HashMap<String, PropertyAccessor> properties = new HashMap<String, PropertyAccessor>()-->Line_8 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_5 $$ if (method.getName().startsWith("get") && isGetter(method)) -->Line_7 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)[ CD ]
Line_6 $$ String propertyName = method.getName().substring(3)-->Line_12 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_2 $$ public static <T> Map<String, PropertyAccessor> readableProperties(Class<T> target) -->Line_4 $$ for (Method method : target.getMethods()) [ FD ]
Line_6 $$ String propertyName = method.getName().substring(3)-->Line_8 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_4 $$ for (Method method : target.getMethods()) -->Line_10 $$ String propertyName = method.getName().substring(2)[ FD ]
Line_11 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_12 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
Line_4 $$ for (Method method : target.getMethods()) -->Line_5 $$ if (method.getName().startsWith("get") && isGetter(method)) [ FD ]
Line_6 $$ String propertyName = method.getName().substring(3)-->Line_11 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)[ FD ]
Line_5 $$ if (method.getName().startsWith("get") && isGetter(method)) -->Line_6 $$ String propertyName = method.getName().substring(3)[ CD ]
Line_4 $$ for (Method method : target.getMethods()) -->Line_6 $$ String propertyName = method.getName().substring(3)[ FD ]
Line_2 $$ public static <T> Map<String, PropertyAccessor> readableProperties(Class<T> target) -->Line_3 $$ HashMap<String, PropertyAccessor> properties = new HashMap<String, PropertyAccessor>()[ CD ]
Line_7 $$ propertyName = Character.toLowerCase(propertyName.charAt(0)) + propertyName.substring(1)-->Line_12 $$ properties.put(propertyName, new GetterMethodBackedPropertyAccessor<T, Object>(propertyName, Object.class, method))[ FD ]
