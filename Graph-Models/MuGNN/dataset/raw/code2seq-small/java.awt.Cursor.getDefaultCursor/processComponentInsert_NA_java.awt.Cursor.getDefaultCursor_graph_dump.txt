Line_27 $$ final ComponentItemDragObject dragObject = new ComponentItemDragObject(item)-->Line_28 $$ if (location.canDrop(dragObject)) [ FD ]
Line_21 $$ if (myInsertedComponent == null) -->Line_25 $$ return[ CD ]
Line_27 $$ final ComponentItemDragObject dragObject = new ComponentItemDragObject(item)-->Line_33 $$ location.processDrop(myEditor, components, null, dragObject)[ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_18 $$ final boolean forceBinding = item.isAutoCreateBinding()[ FD ]
Line_6 $$ if (item == null) -->Line_7 $$ return[ CD ]
Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))-->Line_6 $$ if (item == null) [ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_9 $$ if (!validateNestedFormInsert(item)) [ CD ]
Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))-->Line_19 $$ myInsertedComponent = createInsertedComponent(myEditor, item)[ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_32 $$ final RadComponent[] components = new RadComponent[] [ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_19 $$ myInsertedComponent = createInsertedComponent(myEditor, item)[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_6 $$ if (item == null) [ CD ]
Line_28 $$ if (location.canDrop(dragObject)) -->Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() [ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_33 $$ location.processDrop(myEditor, components, null, dragObject)[ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_35 $$ if (location.getContainer() != null && location.getContainer().isXY()) [ CD ]
Line_40 $$ if (myInsertedComponent.getParent() instanceof RadRootContainer && myInsertedComponent instanceof RadAtomicComponent) -->Line_42 $$ FormEditingUtil.selectSingleComponent(myEditor, myInsertedComponent)[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_15 $$ if (!myEditor.ensureEditable()) [ CD ]
Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))-->Line_12 $$ if (!checkAddDependencyOnInsert(item)) [ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_9 $$ if (!validateNestedFormInsert(item)) [ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_34 $$ FormEditingUtil.selectSingleComponent(myEditor, myInsertedComponent)[ CD ]
Line_32 $$ final RadComponent[] components = new RadComponent[] -->Line_33 $$ location.processDrop(myEditor, components, null, dragObject)[ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_44 $$ checkBindTopLevelPanel()[ CD ]
Line_45 $$ if (!mySticky) -->Line_46 $$ PaletteToolWindowManager.getInstance(myEditor).clearActiveItem()[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_19 $$ myInsertedComponent = createInsertedComponent(myEditor, item)[ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_35 $$ if (location.getContainer() != null && location.getContainer().isXY()) [ FD ]
Line_22 $$ if (!mySticky) -->Line_23 $$ PaletteToolWindowManager.getInstance(myEditor).clearActiveItem()[ CD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_31 $$ createBindingWhenDrop(myEditor, myInsertedComponent, forceBinding)[ CD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_45 $$ if (!mySticky) [ CD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_48 $$ myEditor.refreshAndSave(false)[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_20 $$ setCursor(Cursor.getDefaultCursor())[ CD ]
Line_9 $$ if (!validateNestedFormInsert(item)) -->Line_10 $$ return[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))[ FD ]
Line_15 $$ if (!myEditor.ensureEditable()) -->Line_16 $$ return[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_27 $$ final ComponentItemDragObject dragObject = new ComponentItemDragObject(item)[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_28 $$ if (location.canDrop(dragObject)) [ CD ]
Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))-->Line_18 $$ final boolean forceBinding = item.isAutoCreateBinding()[ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_28 $$ if (location.canDrop(dragObject)) [ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_33 $$ location.processDrop(myEditor, components, null, dragObject)[ CD ]
Line_5 $$ item = replaceAnyComponentItem(myEditor, item, UIDesignerBundle.message("palette.non.palette.component.title"))-->Line_9 $$ if (!validateNestedFormInsert(item)) [ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_12 $$ if (!checkAddDependencyOnInsert(item)) [ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_6 $$ if (item == null) [ FD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_18 $$ final boolean forceBinding = item.isAutoCreateBinding()[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_21 $$ if (myInsertedComponent == null) [ CD ]
Line_35 $$ if (location.getContainer() != null && location.getContainer().isXY()) -->Line_38 $$ myInsertedComponent.setSize(newSize)[ CD ]
Line_36 $$ Dimension newSize = myInsertedComponent.getPreferredSize()-->Line_38 $$ myInsertedComponent.setSize(newSize)[ FD ]
Line_29 $$ CommandProcessor.getInstance().executeCommand(myEditor.getProject(), new Runnable() -->Line_40 $$ if (myInsertedComponent.getParent() instanceof RadRootContainer && myInsertedComponent instanceof RadAtomicComponent) [ CD ]
Line_35 $$ if (location.getContainer() != null && location.getContainer().isXY()) -->Line_36 $$ Dimension newSize = myInsertedComponent.getPreferredSize()[ CD ]
Line_36 $$ Dimension newSize = myInsertedComponent.getPreferredSize()-->Line_37 $$ Util.adjustSize(myInsertedComponent.getDelegee(), myInsertedComponent.getConstraints(), newSize)[ FD ]
Line_21 $$ if (myInsertedComponent == null) -->Line_22 $$ if (!mySticky) [ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_3 $$ myEditor.getActiveDecorationLayer().removeFeedback()[ CD ]
Line_35 $$ if (location.getContainer() != null && location.getContainer().isXY()) -->Line_37 $$ Util.adjustSize(myInsertedComponent.getDelegee(), myInsertedComponent.getConstraints(), newSize)[ CD ]
Line_40 $$ if (myInsertedComponent.getParent() instanceof RadRootContainer && myInsertedComponent instanceof RadAtomicComponent) -->Line_41 $$ GridBuildUtil.convertToGrid(myEditor)[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_4 $$ myEditor.setDesignTimeInsets(2)[ CD ]
Line_18 $$ final boolean forceBinding = item.isAutoCreateBinding()-->Line_31 $$ createBindingWhenDrop(myEditor, myInsertedComponent, forceBinding)[ FD ]
Line_12 $$ if (!checkAddDependencyOnInsert(item)) -->Line_13 $$ return[ CD ]
Line_2 $$ public void processComponentInsert(ComponentItem item, final ComponentDropLocation location) -->Line_12 $$ if (!checkAddDependencyOnInsert(item)) [ CD ]
