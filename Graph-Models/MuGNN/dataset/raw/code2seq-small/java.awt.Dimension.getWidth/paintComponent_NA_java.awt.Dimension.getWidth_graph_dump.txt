Line_2 $$ protected void paintComponent(Graphics g) -->Line_3 $$ final GraphicsConfig config = GraphicsUtil.setupAAPainting(g)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_21 $$ int alpha_step = y_steps > 0 ? (255 - 70) / y_steps : 255 - 70[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_26 $$ g2.setPaint(myColor)[ FD ]
Line_28 $$ for (int j = 0; j < y_steps; j++) -->Line_30 $$ g2.setPaint(color)[ CD ]
Line_28 $$ for (int j = 0; j < y_steps; j++) -->Line_31 $$ UIUtil.drawLine(g2, x_offset, y_center - 1 - j, x_offset + BRICK_WIDTH - 1, y_center - 1 - j)[ CD ]
Line_32 $$ if (!(y_center % 2 != 0 && j == y_steps - 1)) -->Line_33 $$ UIUtil.drawLine(g2, x_offset, y_center + 1 + j, x_offset + BRICK_WIDTH - 1, y_center + 1 + j)[ CD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_27 $$ UIUtil.drawLine(g2, x_offset, y_center, x_offset + BRICK_WIDTH - 1, y_center)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_9 $$ double width = size.getWidth() - 2 * myIndent[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_17 $$ g2.drawRoundRect(myIndent, 0, (int) width, myHeight, arcWidth, arcHeight)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_10 $$ g2.setPaint(UIUtil.getTextFieldBackground())[ CD ]
Line_20 $$ int y_steps = myHeight / 2 - 3-->Line_28 $$ for (int j = 0; j < y_steps; j++) [ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_15 $$ int arcWidth = 5[ CD ]
Line_22 $$ int x_offset = 4-->Line_27 $$ UIUtil.drawLine(g2, x_offset, y_center, x_offset + BRICK_WIDTH - 1, y_center)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_23 $$ g.setClip(4 + myIndent, 3, (int) width - 6, myHeight - 4)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_23 $$ g.setClip(4 + myIndent, 3, (int) width - 6, myHeight - 4)[ FD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_27 $$ UIUtil.drawLine(g2, x_offset, y_center, x_offset + BRICK_WIDTH - 1, y_center)[ FD ]
Line_9 $$ double width = size.getWidth() - 2 * myIndent-->Line_14 $$ rect.setRect(myIndent, 0, width, myHeight)[ FD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_17 $$ g2.drawRoundRect(myIndent, 0, (int) width, myHeight, arcWidth, arcHeight)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_16 $$ int arcHeight = 5[ CD ]
Line_8 $$ Dimension size = getSize()-->Line_9 $$ double width = size.getWidth() - 2 * myIndent[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_3 $$ final GraphicsConfig config = GraphicsUtil.setupAAPainting(g)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_24 $$ int bricksToDraw = myFraction == 0 ? 0 : getBricksToDraw(myFraction)[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_12 $$ g2.fill(rect)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_25 $$ for (int i = 0; i < bricksToDraw; i++) [ CD ]
Line_15 $$ int arcWidth = 5-->Line_17 $$ g2.drawRoundRect(myIndent, 0, (int) width, myHeight, arcWidth, arcHeight)[ FD ]
Line_28 $$ for (int j = 0; j < y_steps; j++) -->Line_29 $$ Color color = ColorUtil.toAlpha(myColor, 255 - alpha_step * (j + 1))[ CD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_26 $$ g2.setPaint(myColor)[ CD ]
Line_24 $$ int bricksToDraw = myFraction == 0 ? 0 : getBricksToDraw(myFraction)-->Line_25 $$ for (int i = 0; i < bricksToDraw; i++) [ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_13 $$ g2.setPaint(new JBColor(SHADOW1, JBColor.border()))[ CD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_37 $$ g2.drawRect(x_offset, y_center - y_steps, BRICK_WIDTH - 1, myHeight - 7)[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_37 $$ g2.drawRect(x_offset, y_center - y_steps, BRICK_WIDTH - 1, myHeight - 7)[ FD ]
Line_22 $$ int x_offset = 4-->Line_38 $$ x_offset += BRICK_WIDTH + BRICK_SPACE[ FD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_36 $$ g2.setColor(ColorUtil.toAlpha(myColor, 255 - alpha_step * (y_steps / 2 + 1)))[ CD ]
Line_38 $$ x_offset += BRICK_WIDTH + BRICK_SPACE-->Line_27 $$ UIUtil.drawLine(g2, x_offset, y_center, x_offset + BRICK_WIDTH - 1, y_center)[ FD ]
Line_16 $$ int arcHeight = 5-->Line_17 $$ g2.drawRoundRect(myIndent, 0, (int) width, myHeight, arcWidth, arcHeight)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_5 $$ if (myFraction > 1) [ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_30 $$ g2.setPaint(color)[ FD ]
Line_3 $$ final GraphicsConfig config = GraphicsUtil.setupAAPainting(g)-->Line_40 $$ config.restore()[ FD ]
Line_29 $$ Color color = ColorUtil.toAlpha(myColor, 255 - alpha_step * (j + 1))-->Line_30 $$ g2.setPaint(color)[ FD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_28 $$ for (int j = 0; j < y_steps; j++) [ CD ]
Line_28 $$ for (int j = 0; j < y_steps; j++) -->Line_32 $$ if (!(y_center % 2 != 0 && j == y_steps - 1)) [ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_18 $$ g2.setPaint(SHADOW2)[ FD ]
Line_11 $$ Rectangle2D rect = new Rectangle2D.Double(myIndent, 0, width, myHeight)-->Line_12 $$ g2.fill(rect)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_14 $$ rect.setRect(myIndent, 0, width, myHeight)[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_33 $$ UIUtil.drawLine(g2, x_offset, y_center + 1 + j, x_offset + BRICK_WIDTH - 1, y_center + 1 + j)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_18 $$ g2.setPaint(SHADOW2)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_22 $$ int x_offset = 4[ CD ]
Line_38 $$ x_offset += BRICK_WIDTH + BRICK_SPACE-->Line_37 $$ g2.drawRect(x_offset, y_center - y_steps, BRICK_WIDTH - 1, myHeight - 7)[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_40 $$ config.restore()[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_11 $$ Rectangle2D rect = new Rectangle2D.Double(myIndent, 0, width, myHeight)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_20 $$ int y_steps = myHeight / 2 - 3[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_10 $$ g2.setPaint(UIUtil.getTextFieldBackground())[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_12 $$ g2.fill(rect)[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_19 $$ int y_center = myHeight / 2[ CD ]
Line_22 $$ int x_offset = 4-->Line_33 $$ UIUtil.drawLine(g2, x_offset, y_center + 1 + j, x_offset + BRICK_WIDTH - 1, y_center + 1 + j)[ FD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_36 $$ g2.setColor(ColorUtil.toAlpha(myColor, 255 - alpha_step * (y_steps / 2 + 1)))[ FD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_8 $$ Dimension size = getSize()[ CD ]
Line_2 $$ protected void paintComponent(Graphics g) -->Line_4 $$ Graphics2D g2 = (Graphics2D) g[ CD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_13 $$ g2.setPaint(new JBColor(SHADOW1, JBColor.border()))[ FD ]
Line_11 $$ Rectangle2D rect = new Rectangle2D.Double(myIndent, 0, width, myHeight)-->Line_14 $$ rect.setRect(myIndent, 0, width, myHeight)[ FD ]
Line_4 $$ Graphics2D g2 = (Graphics2D) g-->Line_31 $$ UIUtil.drawLine(g2, x_offset, y_center - 1 - j, x_offset + BRICK_WIDTH - 1, y_center - 1 - j)[ FD ]
Line_22 $$ int x_offset = 4-->Line_37 $$ g2.drawRect(x_offset, y_center - y_steps, BRICK_WIDTH - 1, myHeight - 7)[ FD ]
Line_22 $$ int x_offset = 4-->Line_31 $$ UIUtil.drawLine(g2, x_offset, y_center - 1 - j, x_offset + BRICK_WIDTH - 1, y_center - 1 - j)[ FD ]
Line_19 $$ int y_center = myHeight / 2-->Line_27 $$ UIUtil.drawLine(g2, x_offset, y_center, x_offset + BRICK_WIDTH - 1, y_center)[ FD ]
Line_25 $$ for (int i = 0; i < bricksToDraw; i++) -->Line_38 $$ x_offset += BRICK_WIDTH + BRICK_SPACE[ CD ]
