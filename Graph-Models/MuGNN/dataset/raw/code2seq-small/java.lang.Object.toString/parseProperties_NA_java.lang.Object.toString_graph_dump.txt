Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_4 $$ while (iterator.hasNext()) [ FD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_23 $$ type = ObjectMapper.CONTENT_TYPE-->Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_35 $$ if (typeParser == null) [ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_45 $$ throw new MapperParsingException("Expected map for property [fields] on field [" + fieldName + "] but got a " + fieldName.getClass())[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ FD ]
Line_17 $$ Object typeNode = propNode.get("type")-->Line_18 $$ if (typeNode != null) [ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_4 $$ while (iterator.hasNext()) [ CD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_17 $$ Object typeNode = propNode.get("type")[ CD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_6 $$ String fieldName = entry.getKey()[ FD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_48 $$ DocumentMapperParser.checkNoRemainingFields(propsNode, parserContext.indexVersionCreated(), "DocType mapping definition has unsupported parameters: ")[ CD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_41 $$ iterator.remove()[ CD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_41 $$ iterator.remove()[ FD ]
Line_16 $$ String type-->Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_17 $$ Object typeNode = propNode.get("type")-->Line_19 $$ type = typeNode.toString()[ FD ]
Line_16 $$ String type-->Line_19 $$ type = typeNode.toString()[ FD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_43 $$ iterator.remove()[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_6 $$ String fieldName = entry.getKey()[ CD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_7 $$ if (fieldName.contains(".")) [ FD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_13 $$ if (entry.getValue() instanceof Map) [ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_38 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_38 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ FD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_35 $$ if (typeParser == null) [ CD ]
Line_42 $$ if (isEmptyList) -->Line_43 $$ iterator.remove()[ CD ]
Line_19 $$ type = typeNode.toString()-->Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_34 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ CD ]
Line_16 $$ String type-->Line_23 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_48 $$ DocumentMapperParser.checkNoRemainingFields(propsNode, parserContext.indexVersionCreated(), "DocType mapping definition has unsupported parameters: ")[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_13 $$ if (entry.getValue() instanceof Map) [ CD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_42 $$ if (isEmptyList) [ CD ]
Line_18 $$ if (typeNode != null) -->Line_19 $$ type = typeNode.toString()[ CD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_18 $$ if (typeNode != null) [ CD ]
Line_4 $$ while (iterator.hasNext()) -->Line_7 $$ if (fieldName.contains(".")) [ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()[ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_38 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_38 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ CD ]
Line_4 $$ while (iterator.hasNext()) -->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()[ FD ]
Line_19 $$ type = typeNode.toString()-->Line_23 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_39 $$ propNode.remove("type")[ CD ]
Line_13 $$ if (entry.getValue() instanceof Map) -->Line_16 $$ String type[ CD ]
