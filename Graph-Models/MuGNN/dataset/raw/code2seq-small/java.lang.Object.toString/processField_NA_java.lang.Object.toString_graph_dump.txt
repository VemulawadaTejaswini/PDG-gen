Line_13 $$ dateTimeFormatters = null-->Line_15 $$ dateTimeFormatters.add(parseDateTimeFormatter(fieldNode))[ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_50 $$ return false[ CD ]
Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) -->Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()[ CD ]
Line_6 $$ for (Object node1 : (List) fieldNode) -->Line_8 $$ throw new MapperParsingException("Epoch [" + node1.toString() + "] is not supported as dynamic date format")[ FD ]
Line_5 $$ if (fieldNode instanceof List) -->Line_12 $$ if ("none".equals(fieldNode.toString())) [ CD ]
Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()-->Line_17 $$ if (dateTimeFormatters == null) [ FD ]
Line_35 $$ Map<String, Object> tmpl = (Map<String, Object>) tmplNode-->Line_36 $$ if (tmpl.size() != 1) [ FD ]
Line_23 $$ if (fieldName.equals("dynamic_templates")) -->Line_43 $$ if (fieldName.equals("date_detection")) [ CD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_43 $$ if (fieldName.equals("date_detection")) [ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_47 $$ ((Builder) builder).numericDetection = nodeBooleanValue(fieldNode)[ FD ]
Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) -->Line_5 $$ if (fieldNode instanceof List) [ CD ]
Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) -->Line_17 $$ if (dateTimeFormatters == null) [ CD ]
Line_17 $$ if (dateTimeFormatters == null) -->Line_18 $$ ((Builder) builder).noDynamicDateTimeFormatter()[ CD ]
Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) -->Line_23 $$ if (fieldName.equals("dynamic_templates")) [ CD ]
Line_46 $$ if (fieldName.equals("numeric_detection")) -->Line_48 $$ return true[ CD ]
Line_43 $$ if (fieldName.equals("date_detection")) -->Line_46 $$ if (fieldName.equals("numeric_detection")) [ CD ]
Line_43 $$ if (fieldName.equals("date_detection")) -->Line_45 $$ return true[ CD ]
Line_6 $$ for (Object node1 : (List) fieldNode) -->Line_10 $$ dateTimeFormatters.add(parseDateTimeFormatter(node1))[ FD ]
Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()-->Line_10 $$ dateTimeFormatters.add(parseDateTimeFormatter(node1))[ FD ]
Line_23 $$ if (fieldName.equals("dynamic_templates")) -->Line_42 $$ return true[ CD ]
Line_13 $$ dateTimeFormatters = null-->Line_20 $$ ((Builder) builder).dynamicDateTimeFormatter(dateTimeFormatters)[ FD ]
Line_13 $$ dateTimeFormatters = null-->Line_17 $$ if (dateTimeFormatters == null) [ FD ]
Line_35 $$ Map<String, Object> tmpl = (Map<String, Object>) tmplNode-->Line_39 $$ Map.Entry<String, Object> entry = tmpl.entrySet().iterator().next()[ FD ]
Line_6 $$ for (Object node1 : (List) fieldNode) -->Line_7 $$ if (node1.toString().startsWith("epoch_")) [ FD ]
Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()-->Line_13 $$ dateTimeFormatters = null[ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_44 $$ ((Builder) builder).dateDetection = nodeBooleanValue(fieldNode)[ FD ]
Line_12 $$ if ("none".equals(fieldNode.toString())) -->Line_15 $$ dateTimeFormatters.add(parseDateTimeFormatter(fieldNode))[ CD ]
Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()-->Line_15 $$ dateTimeFormatters.add(parseDateTimeFormatter(fieldNode))[ FD ]
Line_17 $$ if (dateTimeFormatters == null) -->Line_20 $$ ((Builder) builder).dynamicDateTimeFormatter(dateTimeFormatters)[ CD ]
Line_46 $$ if (fieldName.equals("numeric_detection")) -->Line_47 $$ ((Builder) builder).numericDetection = nodeBooleanValue(fieldNode)[ CD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_23 $$ if (fieldName.equals("dynamic_templates")) [ FD ]
Line_4 $$ List<FormatDateTimeFormatter> dateTimeFormatters = new ArrayList()-->Line_20 $$ ((Builder) builder).dynamicDateTimeFormatter(dateTimeFormatters)[ FD ]
Line_12 $$ if ("none".equals(fieldNode.toString())) -->Line_13 $$ dateTimeFormatters = null[ CD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_12 $$ if ("none".equals(fieldNode.toString())) [ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_46 $$ if (fieldName.equals("numeric_detection")) [ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) [ CD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_5 $$ if (fieldNode instanceof List) [ FD ]
Line_39 $$ Map.Entry<String, Object> entry = tmpl.entrySet().iterator().next()-->Line_40 $$ ((Builder) builder).add(DynamicTemplate.parse(entry.getKey(), (Map<String, Object>) entry.getValue()))[ FD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_15 $$ dateTimeFormatters.add(parseDateTimeFormatter(fieldNode))[ FD ]
Line_43 $$ if (fieldName.equals("date_detection")) -->Line_44 $$ ((Builder) builder).dateDetection = nodeBooleanValue(fieldNode)[ CD ]
Line_2 $$ protected boolean processField(ObjectMapper.Builder builder, String fieldName, Object fieldNode) -->Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) [ FD ]
Line_3 $$ if (fieldName.equals("date_formats") || fieldName.equals("dynamic_date_formats")) -->Line_22 $$ return true[ CD ]
