Line_39 $$ for (String aliasedAttributeName : aliasMap.get(attributeName)) -->Line_40 $$ if (valuesAlreadyReplaced.contains(aliasedAttributeName)) [ FD ]
Line_37 $$ Object value = attributes.get(attributeName)-->Line_71 $$ if (value instanceof DefaultValueHolder) [ FD ]
Line_39 $$ for (String aliasedAttributeName : aliasMap.get(attributeName)) -->Line_60 $$ valuesAlreadyReplaced.add(aliasedAttributeName)[ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_37 $$ Object value = attributes.get(attributeName)[ FD ]
Line_39 $$ for (String aliasedAttributeName : aliasMap.get(attributeName)) -->Line_43 $$ Object aliasedValue = attributes.get(aliasedAttributeName)[ FD ]
Line_27 $$ Class<? extends Annotation> annotationType = attributes.annotationType()-->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
Line_37 $$ Object value = attributes.get(attributeName)-->Line_72 $$ value = ((DefaultValueHolder) value).defaultValue[ FD ]
Line_43 $$ Object aliasedValue = attributes.get(aliasedAttributeName)-->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_34 $$ if (valuesAlreadyReplaced.contains(attributeName)) [ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_67 $$ if (valuesAlreadyReplaced.contains(attributeName)) [ FD ]
Line_71 $$ if (value instanceof DefaultValueHolder) -->Line_73 $$ attributes.put(attributeName, adaptValue(annotatedElement, value, classValuesAsString, nestedAnnotationsAsMap))[ CD ]
Line_37 $$ Object value = attributes.get(attributeName)-->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_70 $$ Object value = attributes.get(attributeName)[ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_39 $$ for (String aliasedAttributeName : aliasMap.get(attributeName)) [ FD ]
Line_47 $$ if (valuePresent && aliasPresent) -->Line_53 $$ if (aliasPresent) [ CD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_73 $$ attributes.put(attributeName, adaptValue(annotatedElement, value, classValuesAsString, nestedAnnotationsAsMap))[ FD ]
Line_44 $$ boolean aliasPresent = (aliasedValue != null && !(aliasedValue instanceof DefaultValueHolder))-->Line_47 $$ if (valuePresent && aliasPresent) [ FD ]
Line_33 $$ for (String attributeName : aliasMap.keySet()) -->Line_56 $$ valuesAlreadyReplaced.add(attributeName)[ FD ]
Line_72 $$ value = ((DefaultValueHolder) value).defaultValue-->Line_73 $$ attributes.put(attributeName, adaptValue(annotatedElement, value, classValuesAsString, nestedAnnotationsAsMap))[ FD ]
Line_71 $$ if (value instanceof DefaultValueHolder) -->Line_72 $$ value = ((DefaultValueHolder) value).defaultValue[ CD ]
Line_39 $$ for (String aliasedAttributeName : aliasMap.get(attributeName)) -->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
Line_53 $$ if (aliasPresent) -->Line_60 $$ valuesAlreadyReplaced.add(aliasedAttributeName)[ CD ]
Line_37 $$ Object value = attributes.get(attributeName)-->Line_73 $$ attributes.put(attributeName, adaptValue(annotatedElement, value, classValuesAsString, nestedAnnotationsAsMap))[ FD ]
Line_53 $$ if (aliasPresent) -->Line_56 $$ valuesAlreadyReplaced.add(attributeName)[ CD ]
Line_38 $$ boolean valuePresent = (value != null && !(value instanceof DefaultValueHolder))-->Line_47 $$ if (valuePresent && aliasPresent) [ FD ]
Line_50 $$ String elementAsString = (annotatedElement != null ? annotatedElement.toString() : "unknown element")-->Line_51 $$ throw new AnnotationConfigurationException(String.format("In AnnotationAttributes for annotation [%s] declared on %s, " + "attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], " + "but only one is permitted.", annotationType.getName(), elementAsString, attributeName, aliasedAttributeName, ObjectUtils.nullSafeToString(value), ObjectUtils.nullSafeToString(aliasedValue)))[ FD ]
