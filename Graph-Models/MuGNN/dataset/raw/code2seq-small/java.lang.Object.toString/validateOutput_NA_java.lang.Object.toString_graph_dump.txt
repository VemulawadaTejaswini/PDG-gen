Line_8 $$ int mapRecs = input.size() - mapperBadRecords.size()-->Line_9 $$ assertEquals(counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getCounter(), mapRecs)[ FD ]
Line_52 $$ int counter = 0-->Line_64 $$ assertEquals(reducerOutput.size(), counter)[ FD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_64 $$ assertEquals(reducerOutput.size(), counter)[ CD ]
Line_29 $$ while (key != null) -->Line_32 $$ if (skipPath.getName().contains("_r_")) [ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_41 $$ assertTrue(mapSkipped.containsAll(mapperBadRecords))[ CD ]
Line_61 $$ line = reader.readLine()-->Line_53 $$ while (line != null) [ FD ]
Line_26 $$ Object key = ReflectionUtils.newInstance(reader.getKeyClass(), conf)-->Line_28 $$ key = reader.next(key)[ FD ]
Line_30 $$ value = reader.getCurrentValue(value)-->Line_31 $$ LOG.debug("key:" + key + " value:" + value.toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_13 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_SKIPPED_GROUPS).getCounter(), redBadRecords.size())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_48 $$ if (outputFiles.length > 0) [ CD ]
Line_53 $$ while (line != null) -->Line_57 $$ String value = tokeniz.nextToken()[ CD ]
Line_37 $$ key = reader.next(key)-->Line_29 $$ while (key != null) [ FD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_31 $$ LOG.debug("key:" + key + " value:" + value.toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_19 $$ assertNotNull(skipDir)[ CD ]
Line_53 $$ while (line != null) -->Line_60 $$ assertTrue(reducerOutput.contains(value))[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_44 $$ List<String> mapperOutput = getProcessed(input, mapperBadRecords)[ FD ]
Line_44 $$ List<String> mapperOutput = getProcessed(input, mapperBadRecords)-->Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)[ FD ]
Line_57 $$ String value = tokeniz.nextToken()-->Line_59 $$ assertTrue(value.contains("hello"))[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_11 $$ int redRecs = mapRecs - redBadRecords.size()[ FD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)[ FD ]
Line_29 $$ while (key != null) -->Line_37 $$ key = reader.next(key)[ CD ]
Line_22 $$ List<String> redSkipped = new ArrayList<String>()-->Line_33 $$ redSkipped.add(value.toString())[ FD ]
Line_51 $$ String line = reader.readLine()-->Line_61 $$ line = reader.readLine()[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_12 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_SKIPPED_RECORDS).getCounter(), redBadRecords.size())[ FD ]
Line_11 $$ int redRecs = mapRecs - redBadRecords.size()-->Line_14 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_INPUT_GROUPS).getCounter(), redRecs)[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)[ CD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_52 $$ int counter = 0[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_42 $$ assertTrue(redSkipped.containsAll(redBadRecords))[ FD ]
Line_52 $$ int counter = 0-->Line_54 $$ counter++[ FD ]
Line_8 $$ int mapRecs = input.size() - mapperBadRecords.size()-->Line_10 $$ assertEquals(counters.findCounter(TaskCounter.MAP_OUTPUT_RECORDS).getCounter(), mapRecs)[ FD ]
Line_30 $$ value = reader.getCurrentValue(value)-->Line_33 $$ redSkipped.add(value.toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_47 $$ LOG.debug("reducerOutput " + reducerOutput.size())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_22 $$ List<String> redSkipped = new ArrayList<String>()[ CD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_51 $$ String line = reader.readLine()[ CD ]
Line_55 $$ StringTokenizer tokeniz = new StringTokenizer(line, "\t")-->Line_57 $$ String value = tokeniz.nextToken()[ FD ]
Line_23 $$ for (Path skipPath : skips) -->Line_32 $$ if (skipPath.getName().contains("_r_")) [ FD ]
Line_30 $$ value = reader.getCurrentValue(value)-->Line_35 $$ mapSkipped.add(value.toString())[ FD ]
Line_32 $$ if (skipPath.getName().contains("_r_")) -->Line_33 $$ redSkipped.add(value.toString())[ CD ]
Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)-->Line_64 $$ assertEquals(reducerOutput.size(), counter)[ FD ]
Line_53 $$ while (line != null) -->Line_59 $$ assertTrue(value.contains("hello"))[ CD ]
Line_28 $$ key = reader.next(key)-->Line_37 $$ key = reader.next(key)[ FD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_63 $$ reader.close()[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_14 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_INPUT_GROUPS).getCounter(), redRecs)[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_3 $$ LOG.info(runningJob.getCounters().toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_4 $$ assertTrue(runningJob.isSuccessful())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_15 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_INPUT_RECORDS).getCounter(), redRecs)[ CD ]
Line_21 $$ List<String> mapSkipped = new ArrayList<String>()-->Line_35 $$ mapSkipped.add(value.toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_41 $$ assertTrue(mapSkipped.containsAll(mapperBadRecords))[ FD ]
Line_28 $$ key = reader.next(key)-->Line_29 $$ while (key != null) [ FD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_59 $$ assertTrue(value.contains("hello"))[ FD ]
Line_53 $$ while (line != null) -->Line_61 $$ line = reader.readLine()[ CD ]
Line_51 $$ String line = reader.readLine()-->Line_53 $$ while (line != null) [ FD ]
Line_30 $$ value = reader.getCurrentValue(value)-->Line_60 $$ assertTrue(reducerOutput.contains(value))[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_11 $$ int redRecs = mapRecs - redBadRecords.size()[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_3 $$ LOG.info(runningJob.getCounters().toString())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_45 $$ LOG.debug("mapperOutput " + mapperOutput.size())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_43 $$ Path[] outputFiles = FileUtil.stat2Paths(getFileSystem().listStatus(getOutputDir(), new Utils.OutputFileUtils.OutputFilesFilter()))[ CD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_60 $$ assertTrue(reducerOutput.contains(value))[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_7 $$ assertEquals(counters.findCounter(TaskCounter.MAP_SKIPPED_RECORDS).getCounter(), mapperBadRecords.size())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)[ FD ]
Line_44 $$ List<String> mapperOutput = getProcessed(input, mapperBadRecords)-->Line_45 $$ LOG.debug("mapperOutput " + mapperOutput.size())[ FD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_53 $$ while (line != null) [ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_9 $$ assertEquals(counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getCounter(), mapRecs)[ CD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_39 $$ reader.close()[ FD ]
Line_29 $$ while (key != null) -->Line_30 $$ value = reader.getCurrentValue(value)[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_21 $$ List<String> mapSkipped = new ArrayList<String>()[ CD ]
Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)-->Line_47 $$ LOG.debug("reducerOutput " + reducerOutput.size())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_44 $$ List<String> mapperOutput = getProcessed(input, mapperBadRecords)[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_8 $$ int mapRecs = input.size() - mapperBadRecords.size()[ CD ]
Line_30 $$ value = reader.getCurrentValue(value)-->Line_59 $$ assertTrue(value.contains("hello"))[ FD ]
Line_11 $$ int redRecs = mapRecs - redBadRecords.size()-->Line_16 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_OUTPUT_RECORDS).getCounter(), redRecs)[ FD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_30 $$ value = reader.getCurrentValue(value)[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_10 $$ assertEquals(counters.findCounter(TaskCounter.MAP_OUTPUT_RECORDS).getCounter(), mapRecs)[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_42 $$ assertTrue(redSkipped.containsAll(redBadRecords))[ CD ]
Line_21 $$ List<String> mapSkipped = new ArrayList<String>()-->Line_41 $$ assertTrue(mapSkipped.containsAll(mapperBadRecords))[ FD ]
Line_53 $$ while (line != null) -->Line_54 $$ counter++[ CD ]
Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)-->Line_60 $$ assertTrue(reducerOutput.contains(value))[ FD ]
Line_53 $$ while (line != null) -->Line_55 $$ StringTokenizer tokeniz = new StringTokenizer(line, "\t")[ CD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_63 $$ reader.close()[ CD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_35 $$ mapSkipped.add(value.toString())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_46 $$ List<String> reducerOutput = getProcessed(mapperOutput, redBadRecords)[ FD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_26 $$ Object key = ReflectionUtils.newInstance(reader.getKeyClass(), conf)[ FD ]
Line_48 $$ if (outputFiles.length > 0) -->Line_49 $$ InputStream is = getFileSystem().open(outputFiles[0])[ CD ]
Line_29 $$ while (key != null) -->Line_31 $$ LOG.debug("key:" + key + " value:" + value.toString())[ CD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_37 $$ key = reader.next(key)[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_4 $$ assertTrue(runningJob.isSuccessful())[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_20 $$ Path[] skips = FileUtil.stat2Paths(getFileSystem().listStatus(skipDir))[ CD ]
Line_53 $$ while (line != null) -->Line_56 $$ String key = tokeniz.nextToken()[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_7 $$ assertEquals(counters.findCounter(TaskCounter.MAP_SKIPPED_RECORDS).getCounter(), mapperBadRecords.size())[ CD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_30 $$ value = reader.getCurrentValue(value)[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_8 $$ int mapRecs = input.size() - mapperBadRecords.size()[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_12 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_SKIPPED_RECORDS).getCounter(), redBadRecords.size())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_13 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_SKIPPED_GROUPS).getCounter(), redBadRecords.size())[ CD ]
Line_55 $$ StringTokenizer tokeniz = new StringTokenizer(line, "\t")-->Line_56 $$ String key = tokeniz.nextToken()[ FD ]
Line_27 $$ Object value = ReflectionUtils.newInstance(reader.getValueClass(), conf)-->Line_33 $$ redSkipped.add(value.toString())[ FD ]
Line_26 $$ Object key = ReflectionUtils.newInstance(reader.getKeyClass(), conf)-->Line_37 $$ key = reader.next(key)[ FD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_16 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_OUTPUT_RECORDS).getCounter(), redRecs)[ CD ]
Line_53 $$ while (line != null) -->Line_58 $$ LOG.debug("Output: key:" + key + "  value:" + value)[ CD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_28 $$ key = reader.next(key)[ FD ]
Line_26 $$ Object key = ReflectionUtils.newInstance(reader.getKeyClass(), conf)-->Line_29 $$ while (key != null) [ FD ]
Line_22 $$ List<String> redSkipped = new ArrayList<String>()-->Line_42 $$ assertTrue(redSkipped.containsAll(redBadRecords))[ FD ]
Line_11 $$ int redRecs = mapRecs - redBadRecords.size()-->Line_15 $$ assertEquals(counters.findCounter(TaskCounter.REDUCE_INPUT_RECORDS).getCounter(), redRecs)[ FD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_51 $$ String line = reader.readLine()[ FD ]
Line_25 $$ SequenceFile.Reader reader = new SequenceFile.Reader(getFileSystem(), skipPath, conf)-->Line_61 $$ line = reader.readLine()[ FD ]
Line_57 $$ String value = tokeniz.nextToken()-->Line_60 $$ assertTrue(reducerOutput.contains(value))[ FD ]
Line_32 $$ if (skipPath.getName().contains("_r_")) -->Line_35 $$ mapSkipped.add(value.toString())[ CD ]
Line_2 $$ private void validateOutput(JobConf conf, RunningJob runningJob, List<String> mapperBadRecords, List<String> redBadRecords) throws Exception -->Line_26 $$ Object key = ReflectionUtils.newInstance(reader.getKeyClass(), conf)[ FD ]
