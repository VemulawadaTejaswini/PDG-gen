Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_7 $$ throw new IllegalStateException("Invalid cache annotation configuration on '" + ae.toString() + "'. Both 'cacheManager' and 'cacheResolver' attributes have been set. " + "These attributes are mutually exclusive: the cache manager is used to configure a" + "default cache resolver if none is set. If a cache resolver is set, the cache manager" + "won't be used.")[ FD ]
Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_6 $$ if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) [ FD ]
Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_4 $$ throw new IllegalStateException("Invalid cache annotation configuration on '" + ae.toString() + "'. Both 'key' and 'keyGenerator' attributes have been set. " + "These attributes are mutually exclusive: either set the SpEL expression used to" + "compute the key at runtime or set the name of the KeyGenerator bean to use.")[ FD ]
Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_6 $$ if (StringUtils.hasText(operation.getCacheManager()) && StringUtils.hasText(operation.getCacheResolver())) [ CD ]
Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_3 $$ if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) [ CD ]
Line_2 $$ private void validateCacheOperation(AnnotatedElement ae, CacheOperation operation) -->Line_3 $$ if (StringUtils.hasText(operation.getKey()) && StringUtils.hasText(operation.getKeyGenerator())) [ FD ]
