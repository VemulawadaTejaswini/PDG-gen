Line_15 $$ names = bean.getNodes()-->Line_18 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_17 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_26 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)-->Line_15 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_25 $$ assertEquals(2, names.size())[ FD ]
Line_24 $$ names = bean.getNodes()-->Line_27 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_26 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_22 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_4 $$ try (EJBDirectory context = new RemoteEJBDirectory(MODULE_NAME)) -->Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_26 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_3 $$ ContextSelector<EJBClientContext> selector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)-->Line_30 $$ EJBClientContext.setSelector(selector)[ FD ]
Line_2 $$ public void test() throws Exception -->Line_3 $$ ContextSelector<EJBClientContext> selector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)[ CD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_18 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_21 $$ assertEquals(1, names.size())[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_7 $$ assertEquals(2, names.size())[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_20 $$ names = bean.getNodes()[ FD ]
Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)-->Line_20 $$ names = bean.getNodes()[ FD ]
Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)-->Line_11 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_26 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_17 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_27 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_27 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_13 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_16 $$ assertEquals(2, names.size())[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_16 $$ assertEquals(2, names.size())[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_24 $$ names = bean.getNodes()[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_24 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_27 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_16 $$ assertEquals(2, names.size())[ FD ]
Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)-->Line_6 $$ Collection<String> names = bean.getNodes()[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_12 $$ assertEquals(1, names.size())[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_21 $$ assertEquals(1, names.size())[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_22 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_21 $$ assertEquals(1, names.size())[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_25 $$ assertEquals(2, names.size())[ FD ]
Line_29 $$ if (selector != null) -->Line_30 $$ EJBClientContext.setSelector(selector)[ CD ]
Line_11 $$ names = bean.getNodes()-->Line_24 $$ names = bean.getNodes()[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_9 $$ assertTrue(names.toString(), names.contains(NODE_2))[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_25 $$ assertEquals(2, names.size())[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_27 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_18 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_3 $$ ContextSelector<EJBClientContext> selector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)-->Line_29 $$ if (selector != null) [ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_20 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_12 $$ assertEquals(1, names.size())[ FD ]
Line_20 $$ names = bean.getNodes()-->Line_22 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_21 $$ assertEquals(1, names.size())[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_20 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_17 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_24 $$ names = bean.getNodes()[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_15 $$ names = bean.getNodes()[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_8 $$ assertTrue(names.toString(), names.contains(NODE_1))[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_22 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_24 $$ names = bean.getNodes()-->Line_26 $$ assertTrue(names.contains(NODE_1))[ FD ]
Line_24 $$ names = bean.getNodes()-->Line_25 $$ assertEquals(2, names.size())[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_13 $$ assertTrue(names.contains(NODE_2))[ FD ]
Line_6 $$ Collection<String> names = bean.getNodes()-->Line_11 $$ names = bean.getNodes()[ FD ]
Line_11 $$ names = bean.getNodes()-->Line_15 $$ names = bean.getNodes()[ FD ]
Line_5 $$ RegistryRetriever bean = context.lookupStateless(RegistryRetrieverBean.class, RegistryRetriever.class)-->Line_24 $$ names = bean.getNodes()[ FD ]
Line_15 $$ names = bean.getNodes()-->Line_25 $$ assertEquals(2, names.size())[ FD ]
