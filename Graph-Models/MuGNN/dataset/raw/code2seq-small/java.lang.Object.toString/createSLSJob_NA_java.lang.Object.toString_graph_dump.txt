Line_30 $$ List tasks = new ArrayList()-->Line_32 $$ tasks.addAll(reduces)[ FD ]
Line_13 $$ jobStart -= baseline-->Line_20 $$ jobStart = 0[ FD ]
Line_13 $$ jobStart -= baseline-->Line_16 $$ if (jobStart < 0) [ FD ]
Line_7 $$ String jobId = rumenJob.get("jobID").toString()-->Line_26 $$ json.put("job.id", jobId)[ FD ]
Line_6 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_24 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_18 $$ offset = -jobStart-->Line_29 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_33 $$ json.put("job.tasks", tasks)[ FD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_19 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_18 $$ offset = -jobStart-->Line_28 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ FD ]
Line_29 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)-->Line_32 $$ tasks.addAll(reduces)[ FD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_13 $$ jobStart -= baseline[ FD ]
Line_9 $$ String user = rumenJob.get("user").toString()-->Line_27 $$ json.put("job.user", user)[ FD ]
Line_13 $$ jobStart -= baseline-->Line_23 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_16 $$ if (jobStart < 0) -->Line_17 $$ System.out.println("Warning: reset job " + jobId + " start time to 0.")[ CD ]
Line_15 $$ long offset = 0-->Line_18 $$ offset = -jobStart[ FD ]
Line_14 $$ jobFinish -= baseline-->Line_24 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_6 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_14 $$ jobFinish -= baseline[ FD ]
Line_13 $$ jobStart -= baseline-->Line_18 $$ offset = -jobStart[ FD ]
Line_30 $$ List tasks = new ArrayList()-->Line_31 $$ tasks.addAll(maps)[ FD ]
Line_20 $$ jobStart = 0-->Line_23 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_22 $$ json.put("am.type", "mapreduce")[ FD ]
Line_15 $$ long offset = 0-->Line_28 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_27 $$ json.put("job.user", user)[ FD ]
Line_13 $$ jobStart -= baseline-->Line_19 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_16 $$ if (jobStart < 0) -->Line_20 $$ jobStart = 0[ CD ]
Line_16 $$ if (jobStart < 0) -->Line_18 $$ offset = -jobStart[ CD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_20 $$ jobStart = 0[ FD ]
Line_8 $$ String queue = rumenJob.get("queue").toString()-->Line_25 $$ json.put("job.queue.name", queue)[ FD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_23 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_16 $$ if (jobStart < 0) [ FD ]
Line_14 $$ jobFinish -= baseline-->Line_19 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_5 $$ long jobStart = (Long) rumenJob.get("submitTime")-->Line_18 $$ offset = -jobStart[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_24 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_30 $$ List tasks = new ArrayList()-->Line_33 $$ json.put("job.tasks", tasks)[ FD ]
Line_28 $$ List maps = createSLSTasks("map", (List) rumenJob.get("mapTasks"), offset)-->Line_31 $$ tasks.addAll(maps)[ FD ]
Line_6 $$ long jobFinish = (Long) rumenJob.get("finishTime")-->Line_19 $$ jobFinish = jobFinish - jobStart[ FD ]
Line_19 $$ jobFinish = jobFinish - jobStart-->Line_24 $$ json.put("job.end.ms", jobFinish)[ FD ]
Line_15 $$ long offset = 0-->Line_29 $$ List reduces = createSLSTasks("reduce", (List) rumenJob.get("reduceTasks"), offset)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_23 $$ json.put("job.start.ms", jobStart)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_25 $$ json.put("job.queue.name", queue)[ FD ]
Line_4 $$ Map json = new LinkedHashMap()-->Line_26 $$ json.put("job.id", jobId)[ FD ]
Line_16 $$ if (jobStart < 0) -->Line_19 $$ jobFinish = jobFinish - jobStart[ CD ]
