Line_12 $$ if ("constructor".equals(newValue)) -->Line_13 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)[ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_24 $$ bd.setConstructorArgumentValues(cav)[ FD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_28 $$ bd.setFactoryBeanName(newValue.toString())[ FD ]
Line_10 $$ if ("byType".equals(newValue)) -->Line_12 $$ if ("constructor".equals(newValue)) [ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_37 $$ bd.setInitMethodName(newValue.toString())[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_42 $$ bd.setDestroyMethodName(newValue.toString())[ FD ]
Line_7 $$ if (AUTOWIRE.equals(property)) -->Line_8 $$ if ("byName".equals(newValue)) [ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_46 $$ bd.setScope(Boolean.TRUE.equals(newValue) ? BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_47 $$ if (this.definitionWrapper.isWritableProperty(property)) [ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_50 $$ super.setProperty(property, newValue)[ FD ]
Line_3 $$ if (PARENT.equals(property)) -->Line_4 $$ setParent(newValue)[ CD ]
Line_32 $$ if (newValue != null)-->Line_33 $$ bd.setFactoryMethodName(newValue.toString())[ CD ]
Line_47 $$ if (this.definitionWrapper.isWritableProperty(property)) -->Line_50 $$ super.setProperty(property, newValue)[ CD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_7 $$ if (AUTOWIRE.equals(property)) [ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_27 $$ if (newValue != null) [ FD ]
Line_3 $$ if (PARENT.equals(property)) -->Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()[ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_9 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_NAME)[ FD ]
Line_47 $$ if (this.definitionWrapper.isWritableProperty(property)) -->Line_48 $$ this.definitionWrapper.setPropertyValue(property, newValue)[ CD ]
Line_27 $$ if (newValue != null) -->Line_28 $$ bd.setFactoryBeanName(newValue.toString())[ CD ]
Line_36 $$ if (newValue != null) -->Line_37 $$ bd.setInitMethodName(newValue.toString())[ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_42 $$ bd.setDestroyMethodName(newValue.toString())[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_10 $$ if ("byType".equals(newValue)) [ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_14 $$ if (Boolean.TRUE.equals(newValue)) [ FD ]
Line_8 $$ if ("byName".equals(newValue)) -->Line_9 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_NAME)[ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_13 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_CONSTRUCTOR)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_12 $$ if ("constructor".equals(newValue)) [ FD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_33 $$ bd.setFactoryMethodName(newValue.toString())[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_33 $$ bd.setFactoryMethodName(newValue.toString())[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_3 $$ if (PARENT.equals(property)) [ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_8 $$ if ("byName".equals(newValue)) [ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_32 $$ if (newValue != null)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_37 $$ bd.setInitMethodName(newValue.toString())[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_46 $$ bd.setScope(Boolean.TRUE.equals(newValue) ? BeanDefinition.SCOPE_SINGLETON : BeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_3 $$ if (PARENT.equals(property)) -->Line_7 $$ if (AUTOWIRE.equals(property)) [ CD ]
Line_14 $$ if (Boolean.TRUE.equals(newValue)) -->Line_15 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_NAME)[ CD ]
Line_19 $$ ConstructorArgumentValues cav = new ConstructorArgumentValues()-->Line_24 $$ bd.setConstructorArgumentValues(cav)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_28 $$ bd.setFactoryBeanName(newValue.toString())[ FD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_11 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE)[ FD ]
Line_10 $$ if ("byType".equals(newValue)) -->Line_11 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_TYPE)[ CD ]
Line_21 $$ for (Object arg : args) -->Line_22 $$ cav.addGenericArgumentValue(arg)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_4 $$ setParent(newValue)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_3 $$ if (PARENT.equals(property)) [ CD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_41 $$ if (newValue != null) [ FD ]
Line_19 $$ ConstructorArgumentValues cav = new ConstructorArgumentValues()-->Line_22 $$ cav.addGenericArgumentValue(arg)[ FD ]
Line_12 $$ if ("constructor".equals(newValue)) -->Line_14 $$ if (Boolean.TRUE.equals(newValue)) [ CD ]
Line_41 $$ if (newValue != null) -->Line_42 $$ bd.setDestroyMethodName(newValue.toString())[ CD ]
Line_6 $$ AbstractBeanDefinition bd = getBeanDefinition()-->Line_15 $$ bd.setAutowireMode(AutowireCapableBeanFactory.AUTOWIRE_BY_NAME)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_48 $$ this.definitionWrapper.setPropertyValue(property, newValue)[ FD ]
Line_2 $$ public void setProperty(String property, Object newValue) -->Line_36 $$ if (newValue != null) [ FD ]
Line_8 $$ if ("byName".equals(newValue)) -->Line_10 $$ if ("byType".equals(newValue)) [ CD ]
