Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_76 $$ append(value.toString(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_5 $$ Node node = (Node) value-->Line_62 $$ if (node.isValid()) [ FD ]
Line_56 $$ if (treeNode instanceof UsageNode) -->Line_70 $$ if (userObject instanceof String) [ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_16 $$ Object userObject = treeNode.getUserObject()[ CD ]
Line_5 $$ Node node = (Node) value-->Line_67 $$ append(textChunk.getText() + (i == 0 ? " " : ""), patchAttrs(node, simples))[ FD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_44 $$ setIcon(presentation.getIcon(expanded))[ CD ]
Line_19 $$ RowLocation visible = myRowBoundsCalled ? RowLocation.INSIDE_VISIBLE_RECT : isRowVisible(row, visibleRect)-->Line_21 $$ if (visible != RowLocation.INSIDE_VISIBLE_RECT) [ FD ]
Line_33 $$ if (!usageTarget.isValid()) -->Line_34 $$ append(UsageViewBundle.message("node.invalid"), ourInvalidAttributes)[ CD ]
Line_64 $$ for (int i = 0; i < text.length; i++) -->Line_67 $$ append(textChunk.getText() + (i == 0 ? " " : ""), patchAttrs(node, simples))[ CD ]
Line_5 $$ Node node = (Node) value-->Line_60 $$ append(UsageViewBundle.message("node.readonly") + " ", patchAttrs(node, ourReadOnlyAttributes))[ FD ]
Line_56 $$ if (treeNode instanceof UsageNode) -->Line_58 $$ setIcon(node.getUsage().getPresentation().getIcon())[ CD ]
Line_4 $$ if (value instanceof Node && value != tree.getModel().getRoot()) -->Line_6 $$ if (!node.isValid()) [ CD ]
Line_5 $$ Node node = (Node) value-->Line_51 $$ setIcon(node.getGroup().getIcon(expanded))[ FD ]
Line_56 $$ if (treeNode instanceof UsageNode) -->Line_59 $$ if (showAsReadOnly) [ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_28 $$ if (myCalculated)[ CD ]
Line_9 $$ if (myPresentation.isShowReadOnlyStatusAsRed() && node.isReadOnly()) -->Line_10 $$ showAsReadOnly = true[ CD ]
Line_47 $$ if (node.isRoot()) -->Line_48 $$ append(StringUtil.capitalize(myPresentation.getUsagesWord()), patchAttrs(node, SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES))[ CD ]
Line_53 $$ int count = node.getRecursiveUsageCount()-->Line_55 $$ append(FontUtil.spaceAndThinSpace() + StringUtil.pluralize(count + " " + myPresentation.getUsagesWord(), count), SimpleTextAttributes.GRAYED_ATTRIBUTES.derive(attributes.getStyle(), null, null, null))[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ if (value instanceof Node && value != tree.getModel().getRoot()) [ FD ]
Line_62 $$ if (node.isValid()) -->Line_63 $$ TextChunk[] text = node.getUsage().getPresentation().getText()[ CD ]
Line_32 $$ UsageTarget usageTarget = (UsageTarget) userObject-->Line_37 $$ final ItemPresentation presentation = usageTarget.getPresentation()[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_76 $$ append(value.toString(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_4 $$ if (value instanceof Node && value != tree.getModel().getRoot()) -->Line_5 $$ Node node = (Node) value[ CD ]
Line_4 $$ if (value instanceof Node && value != tree.getModel().getRoot()) -->Line_9 $$ if (myPresentation.isShowReadOnlyStatusAsRed() && node.isReadOnly()) [ CD ]
Line_65 $$ TextChunk textChunk = text[i]-->Line_67 $$ append(textChunk.getText() + (i == 0 ? " " : ""), patchAttrs(node, simples))[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_14 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
Line_66 $$ SimpleTextAttributes simples = textChunk.getSimpleAttributesIgnoreBackground()-->Line_67 $$ append(textChunk.getText() + (i == 0 ? " " : ""), patchAttrs(node, simples))[ FD ]
Line_5 $$ Node node = (Node) value-->Line_58 $$ setIcon(node.getUsage().getPresentation().getIcon())[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_3 $$ boolean showAsReadOnly = false[ CD ]
Line_18 $$ if (!visibleRect.isEmpty()) -->Line_19 $$ RowLocation visible = myRowBoundsCalled ? RowLocation.INSIDE_VISIBLE_RECT : isRowVisible(row, visibleRect)[ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_17 $$ Rectangle visibleRect = ((JViewport) tree.getParent()).getViewRect()[ CD ]
Line_45 $$ if (treeNode instanceof GroupNode) -->Line_53 $$ int count = node.getRecursiveUsageCount()[ CD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_18 $$ if (!visibleRect.isEmpty()) [ CD ]
Line_18 $$ if (!visibleRect.isEmpty()) -->Line_24 $$ if (!getIpad().equals(STANDARD_IPAD_NOWIFI)) [ CD ]
Line_62 $$ if (node.isValid()) -->Line_64 $$ for (int i = 0; i < text.length; i++) [ CD ]
Line_16 $$ Object userObject = treeNode.getUserObject()-->Line_70 $$ if (userObject instanceof String) [ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_19 $$ RowLocation visible = myRowBoundsCalled ? RowLocation.INSIDE_VISIBLE_RECT : isRowVisible(row, visibleRect)[ FD ]
Line_45 $$ if (treeNode instanceof GroupNode) -->Line_54 $$ SimpleTextAttributes attributes = patchAttrs(node, ourNumberOfUsagesAttribute)[ CD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_43 $$ append(text == null ? "" : text, SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_37 $$ final ItemPresentation presentation = usageTarget.getPresentation()-->Line_44 $$ setIcon(presentation.getIcon(expanded))[ FD ]
Line_15 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value-->Line_16 $$ Object userObject = treeNode.getUserObject()[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_51 $$ setIcon(node.getGroup().getIcon(expanded))[ FD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_45 $$ if (treeNode instanceof GroupNode) [ CD ]
Line_15 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value-->Line_56 $$ if (treeNode instanceof UsageNode) [ FD ]
Line_39 $$ if (showAsReadOnly) -->Line_40 $$ append(UsageViewBundle.message("node.readonly") + " ", ourReadOnlyAttributes)[ CD ]
Line_5 $$ Node node = (Node) value-->Line_9 $$ if (myPresentation.isShowReadOnlyStatusAsRed() && node.isReadOnly()) [ FD ]
Line_54 $$ SimpleTextAttributes attributes = patchAttrs(node, ourNumberOfUsagesAttribute)-->Line_55 $$ append(FontUtil.spaceAndThinSpace() + StringUtil.pluralize(count + " " + myPresentation.getUsagesWord(), count), SimpleTextAttributes.GRAYED_ATTRIBUTES.derive(attributes.getStyle(), null, null, null))[ FD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_31 $$ if (userObject instanceof UsageTarget) [ CD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ if (value instanceof Node && value != tree.getModel().getRoot()) [ CD ]
Line_33 $$ if (!usageTarget.isValid()) -->Line_35 $$ return[ CD ]
Line_70 $$ if (userObject instanceof String) -->Line_71 $$ append((String) userObject, SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_37 $$ final ItemPresentation presentation = usageTarget.getPresentation()[ CD ]
Line_47 $$ if (node.isRoot()) -->Line_51 $$ setIcon(node.getGroup().getIcon(expanded))[ CD ]
Line_5 $$ Node node = (Node) value-->Line_54 $$ SimpleTextAttributes attributes = patchAttrs(node, ourNumberOfUsagesAttribute)[ FD ]
Line_3 $$ boolean showAsReadOnly = false-->Line_10 $$ showAsReadOnly = true[ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_14 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_78 $$ SpeedSearchUtil.applySpeedSearchHighlighting(tree, this, true, mySelected)[ CD ]
Line_37 $$ final ItemPresentation presentation = usageTarget.getPresentation()-->Line_42 $$ final String text = presentation.getPresentableText()[ FD ]
Line_17 $$ Rectangle visibleRect = ((JViewport) tree.getParent()).getViewRect()-->Line_19 $$ RowLocation visible = myRowBoundsCalled ? RowLocation.INSIDE_VISIBLE_RECT : isRowVisible(row, visibleRect)[ FD ]
Line_14 $$ if (value instanceof DefaultMutableTreeNode) -->Line_15 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value[ CD ]
Line_56 $$ if (treeNode instanceof UsageNode) -->Line_62 $$ if (node.isValid()) [ CD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_42 $$ final String text = presentation.getPresentableText()[ CD ]
Line_45 $$ if (treeNode instanceof GroupNode) -->Line_56 $$ if (treeNode instanceof UsageNode) [ CD ]
Line_5 $$ Node node = (Node) value-->Line_6 $$ if (!node.isValid()) [ FD ]
Line_65 $$ TextChunk textChunk = text[i]-->Line_66 $$ SimpleTextAttributes simples = textChunk.getSimpleAttributesIgnoreBackground()[ FD ]
Line_45 $$ if (treeNode instanceof GroupNode) -->Line_47 $$ if (node.isRoot()) [ CD ]
Line_16 $$ Object userObject = treeNode.getUserObject()-->Line_73 $$ append(userObject == null ? "" : userObject.toString(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ FD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_39 $$ if (showAsReadOnly) [ CD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_78 $$ SpeedSearchUtil.applySpeedSearchHighlighting(tree, this, true, mySelected)[ FD ]
Line_64 $$ for (int i = 0; i < text.length; i++) -->Line_66 $$ SimpleTextAttributes simples = textChunk.getSimpleAttributesIgnoreBackground()[ CD ]
Line_24 $$ if (!getIpad().equals(STANDARD_IPAD_NOWIFI)) -->Line_25 $$ setIpad(STANDARD_IPAD_NOWIFI)[ CD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_44 $$ setIcon(presentation.getIcon(expanded))[ FD ]
Line_47 $$ if (node.isRoot()) -->Line_50 $$ append(node.getGroup().getText(myView), patchAttrs(node, showAsReadOnly ? ourReadOnlyAttributes : SimpleTextAttributes.REGULAR_ATTRIBUTES))[ CD ]
Line_70 $$ if (userObject instanceof String) -->Line_73 $$ append(userObject == null ? "" : userObject.toString(), SimpleTextAttributes.REGULAR_ATTRIBUTES)[ CD ]
Line_15 $$ DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) value-->Line_45 $$ if (treeNode instanceof GroupNode) [ FD ]
Line_5 $$ Node node = (Node) value-->Line_53 $$ int count = node.getRecursiveUsageCount()[ FD ]
Line_28 $$ if (myCalculated)-->Line_29 $$ return[ CD ]
Line_2 $$ public void customizeCellRenderer(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_17 $$ Rectangle visibleRect = ((JViewport) tree.getParent()).getViewRect()[ FD ]
Line_5 $$ Node node = (Node) value-->Line_50 $$ append(node.getGroup().getText(myView), patchAttrs(node, showAsReadOnly ? ourReadOnlyAttributes : SimpleTextAttributes.REGULAR_ATTRIBUTES))[ FD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_38 $$ LOG.assertTrue(presentation != null)[ CD ]
Line_17 $$ Rectangle visibleRect = ((JViewport) tree.getParent()).getViewRect()-->Line_18 $$ if (!visibleRect.isEmpty()) [ FD ]
Line_5 $$ Node node = (Node) value-->Line_48 $$ append(StringUtil.capitalize(myPresentation.getUsagesWord()), patchAttrs(node, SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES))[ FD ]
Line_5 $$ Node node = (Node) value-->Line_47 $$ if (node.isRoot()) [ FD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_33 $$ if (!usageTarget.isValid()) [ CD ]
Line_6 $$ if (!node.isValid()) -->Line_7 $$ append(UsageViewBundle.message("node.invalid") + " ", UIUtil.isUnderDarcula() ? ourInvalidAttributesDarcula : ourInvalidAttributes)[ CD ]
Line_64 $$ for (int i = 0; i < text.length; i++) -->Line_65 $$ TextChunk textChunk = text[i][ CD ]
Line_31 $$ if (userObject instanceof UsageTarget) -->Line_32 $$ UsageTarget usageTarget = (UsageTarget) userObject[ CD ]
Line_59 $$ if (showAsReadOnly) -->Line_60 $$ append(UsageViewBundle.message("node.readonly") + " ", patchAttrs(node, ourReadOnlyAttributes))[ CD ]
Line_32 $$ UsageTarget usageTarget = (UsageTarget) userObject-->Line_33 $$ if (!usageTarget.isValid()) [ FD ]
Line_5 $$ Node node = (Node) value-->Line_63 $$ TextChunk[] text = node.getUsage().getPresentation().getText()[ FD ]
Line_16 $$ Object userObject = treeNode.getUserObject()-->Line_31 $$ if (userObject instanceof UsageTarget) [ FD ]
Line_21 $$ if (visible != RowLocation.INSIDE_VISIBLE_RECT) -->Line_22 $$ return[ CD ]
Line_45 $$ if (treeNode instanceof GroupNode) -->Line_55 $$ append(FontUtil.spaceAndThinSpace() + StringUtil.pluralize(count + " " + myPresentation.getUsagesWord(), count), SimpleTextAttributes.GRAYED_ATTRIBUTES.derive(attributes.getStyle(), null, null, null))[ CD ]
Line_18 $$ if (!visibleRect.isEmpty()) -->Line_21 $$ if (visible != RowLocation.INSIDE_VISIBLE_RECT) [ CD ]
