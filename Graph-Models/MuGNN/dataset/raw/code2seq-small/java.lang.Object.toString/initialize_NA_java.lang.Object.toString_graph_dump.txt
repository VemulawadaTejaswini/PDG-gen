Line_5 $$ if (options.containsKey(USE_CLIENT_CERT_OPTION)) -->Line_6 $$ useClientCert = Boolean.parseBoolean(options.get(USE_CLIENT_CERT_OPTION).toString())[ CD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_5 $$ if (options.containsKey(USE_CLIENT_CERT_OPTION)) [ CD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_3 $$ addValidOptions(ALL_OPTIONS)[ CD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_5 $$ if (options.containsKey(USE_CLIENT_CERT_OPTION)) [ FD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_4 $$ super.initialize(subject, callbackHandler, sharedState, options)[ CD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_6 $$ useClientCert = Boolean.parseBoolean(options.get(USE_CLIENT_CERT_OPTION).toString())[ FD ]
Line_2 $$ public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> sharedState, Map<String, ?> options) -->Line_4 $$ super.initialize(subject, callbackHandler, sharedState, options)[ FD ]
