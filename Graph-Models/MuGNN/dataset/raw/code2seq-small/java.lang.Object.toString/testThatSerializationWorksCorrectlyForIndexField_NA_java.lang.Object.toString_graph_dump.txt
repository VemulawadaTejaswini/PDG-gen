Line_15 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")-->Line_16 $$ assertThat(timestampConfiguration, hasKey("index"))[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_15 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")[ FD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_8 $$ builder.close()[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_14 $$ assertThat(serializedMap.get("_timestamp"), instanceOf(Map.class))[ FD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_10 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) [ FD ]
Line_11 $$ serializedMap = parser.map()-->Line_14 $$ assertThat(serializedMap.get("_timestamp"), instanceOf(Map.class))[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_13 $$ assertThat(serializedMap, hasKey("_timestamp"))[ FD ]
Line_15 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")-->Line_17 $$ assertThat(timestampConfiguration.get("index").toString(), is("no"))[ FD ]
Line_11 $$ serializedMap = parser.map()-->Line_15 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")[ FD ]
Line_10 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) -->Line_11 $$ serializedMap = parser.map()[ FD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_7 $$ enabledMapper.timestampFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_11 $$ serializedMap = parser.map()[ FD ]
Line_5 $$ DocumentMapper enabledMapper = createIndex("test", BWC_SETTINGS).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))-->Line_7 $$ enabledMapper.timestampFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_11 $$ serializedMap = parser.map()-->Line_13 $$ assertThat(serializedMap, hasKey("_timestamp"))[ FD ]
