Line_5 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_7 $$ builder.close()[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_8 $$ Map<String, Object> serializedMap[ CD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_3 $$ String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_timestamp").field("enabled", true).field("store", "yes").field("index", "no").endObject().endObject().endObject().string()[ CD ]
Line_5 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_9 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) [ FD ]
Line_10 $$ serializedMap = parser.map()-->Line_13 $$ assertThat(serializedMap.get("_timestamp"), instanceOf(Map.class))[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_4 $$ DocumentMapper enabledMapper = createIndex("test", BWC_SETTINGS).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))[ CD ]
Line_8 $$ Map<String, Object> serializedMap-->Line_10 $$ serializedMap = parser.map()[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_15 $$ assertThat(timestampConfiguration, hasKey("index"))[ CD ]
Line_14 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")-->Line_16 $$ assertThat(timestampConfiguration.get("index").toString(), is("no"))[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_7 $$ builder.close()[ CD ]
Line_14 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")-->Line_15 $$ assertThat(timestampConfiguration, hasKey("index"))[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_12 $$ assertThat(serializedMap, hasKey("_timestamp"))[ CD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_6 $$ enabledMapper.timestampFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ CD ]
Line_4 $$ DocumentMapper enabledMapper = createIndex("test", BWC_SETTINGS).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))-->Line_6 $$ enabledMapper.timestampFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_8 $$ Map<String, Object> serializedMap-->Line_12 $$ assertThat(serializedMap, hasKey("_timestamp"))[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_5 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()[ CD ]
Line_10 $$ serializedMap = parser.map()-->Line_12 $$ assertThat(serializedMap, hasKey("_timestamp"))[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_14 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")[ CD ]
Line_5 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_6 $$ enabledMapper.timestampFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_13 $$ assertThat(serializedMap.get("_timestamp"), instanceOf(Map.class))[ CD ]
Line_8 $$ Map<String, Object> serializedMap-->Line_14 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")[ FD ]
Line_2 $$ public void testThatSerializationWorksCorrectlyForIndexField() throws Exception -->Line_16 $$ assertThat(timestampConfiguration.get("index").toString(), is("no"))[ CD ]
Line_8 $$ Map<String, Object> serializedMap-->Line_13 $$ assertThat(serializedMap.get("_timestamp"), instanceOf(Map.class))[ FD ]
Line_9 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) -->Line_10 $$ serializedMap = parser.map()[ FD ]
Line_10 $$ serializedMap = parser.map()-->Line_14 $$ Map<String, Object> timestampConfiguration = (Map<String, Object>) serializedMap.get("_timestamp")[ FD ]
