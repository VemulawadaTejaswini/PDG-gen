Line_24 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_30 $$ errors.add(authorizationError)[ CD ]
Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_38 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_22 $$ for (String error : resultErrors) -->Line_24 $$ if (HgErrorUtil.isAuthorizationError(error)) [ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_6 $$ final HgVersion version = hgvcs.getVersion()[ CD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_21 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) [ CD ]
Line_25 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_27 $$ commitLoader.reloadCommits()[ FD ]
Line_3 $$ final Project project = repository.getProject()-->Line_38 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_11 $$ if (StringUtil.isEmptyOrSpaces(hgTarget.myTarget)) -->Line_13 $$ return new OutgoingResult(Collections.<VcsFullCommitDetails>emptyList(), errors)[ CD ]
Line_8 $$ HgOutgoingCommand hgOutgoingCommand = new HgOutgoingCommand(project)-->Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ FD ]
Line_20 $$ List<String> resultErrors = result.getErrorLines()-->Line_36 $$ LOG.warn(resultErrors.toString())[ FD ]
Line_24 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_25 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() [ CD ]
Line_4 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_6 $$ final HgVersion version = hgvcs.getVersion()[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_38 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_16 $$ if (result == null) [ CD ]
Line_22 $$ for (String error : resultErrors) -->Line_23 $$ if (HgErrorUtil.isAbortLine(error)) [ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_3 $$ final Project project = repository.getProject()[ FD ]
Line_25 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_27 $$ commitLoader.reloadCommits()[ CD ]
Line_24 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_32 $$ errors.add(new VcsError(error))[ CD ]
Line_7 $$ String[] templates = HgBaseLogParser.constructFullTemplateArgument(true, version)-->Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ FD ]
Line_6 $$ final HgVersion version = hgvcs.getVersion()-->Line_38 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_8 $$ HgOutgoingCommand hgOutgoingCommand = new HgOutgoingCommand(project)[ CD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_7 $$ String[] templates = HgBaseLogParser.constructFullTemplateArgument(true, version)[ CD ]
Line_11 $$ if (StringUtil.isEmptyOrSpaces(hgTarget.myTarget)) -->Line_12 $$ errors.add(new VcsError("Hg push path could not be empty."))[ CD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_4 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ CD ]
Line_10 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_30 $$ errors.add(authorizationError)[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_3 $$ final Project project = repository.getProject()[ CD ]
Line_10 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_32 $$ errors.add(new VcsError(error))[ FD ]
Line_10 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_17 $$ errors.add(new VcsError("Couldn't execute hg outgoing command for " + repository))[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_38 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ CD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_20 $$ List<String> resultErrors = result.getErrorLines()[ CD ]
Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_21 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) [ FD ]
Line_16 $$ if (result == null) -->Line_17 $$ errors.add(new VcsError("Couldn't execute hg outgoing command for " + repository))[ CD ]
Line_20 $$ List<String> resultErrors = result.getErrorLines()-->Line_21 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) [ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_10 $$ List<VcsError> errors = new ArrayList<VcsError>()[ CD ]
Line_10 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_12 $$ errors.add(new VcsError("Hg push path could not be empty."))[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ CD ]
Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_16 $$ if (result == null) [ FD ]
Line_15 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_20 $$ List<String> resultErrors = result.getErrorLines()[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_11 $$ if (StringUtil.isEmptyOrSpaces(hgTarget.myTarget)) [ CD ]
Line_25 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_30 $$ errors.add(authorizationError)[ FD ]
Line_3 $$ final Project project = repository.getProject()-->Line_4 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ FD ]
Line_6 $$ final HgVersion version = hgvcs.getVersion()-->Line_7 $$ String[] templates = HgBaseLogParser.constructFullTemplateArgument(true, version)[ FD ]
Line_16 $$ if (result == null) -->Line_18 $$ return new OutgoingResult(Collections.<VcsFullCommitDetails>emptyList(), errors)[ CD ]
Line_23 $$ if (HgErrorUtil.isAbortLine(error)) -->Line_24 $$ if (HgErrorUtil.isAuthorizationError(error)) [ CD ]
Line_21 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) -->Line_36 $$ LOG.warn(resultErrors.toString())[ CD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_9 $$ HgTarget hgTarget = pushSpec.getTarget()[ FD ]
Line_2 $$ public OutgoingResult getOutgoingCommits(@NotNull final HgRepository repository, @NotNull final PushSpec<HgPushSource, HgTarget> pushSpec, boolean initial) -->Line_9 $$ HgTarget hgTarget = pushSpec.getTarget()[ CD ]
