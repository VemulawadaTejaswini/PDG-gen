Line_25 $$ if (HgErrorUtil.isAbortLine(error)) -->Line_26 $$ if (HgErrorUtil.isAuthorizationError(error)) [ CD ]
Line_13 $$ if (StringUtil.isEmptyOrSpaces(hgTarget.myTarget)) -->Line_14 $$ errors.add(new VcsError("Hg push path could not be empty."))[ CD ]
Line_13 $$ if (StringUtil.isEmptyOrSpaces(hgTarget.myTarget)) -->Line_15 $$ return new OutgoingResult(Collections.<VcsFullCommitDetails>emptyList(), errors)[ CD ]
Line_18 $$ if (result == null) -->Line_19 $$ errors.add(new VcsError("Couldn't execute hg outgoing command for " + repository))[ CD ]
Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_22 $$ List<String> resultErrors = result.getErrorLines()[ FD ]
Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_23 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) [ FD ]
Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_41 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_5 $$ final Project project = repository.getProject()-->Line_6 $$ HgVcs hgvcs = HgVcs.getInstance(project)[ FD ]
Line_27 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_30 $$ commitLoader.reloadCommits()[ CD ]
Line_18 $$ if (result == null) -->Line_20 $$ return new OutgoingResult(Collections.<VcsFullCommitDetails>emptyList(), errors)[ CD ]
Line_5 $$ final Project project = repository.getProject()-->Line_41 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_10 $$ HgOutgoingCommand hgOutgoingCommand = new HgOutgoingCommand(project)-->Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ FD ]
Line_12 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_19 $$ errors.add(new VcsError("Couldn't execute hg outgoing command for " + repository))[ FD ]
Line_24 $$ for (String error : resultErrors) -->Line_25 $$ if (HgErrorUtil.isAbortLine(error)) [ FD ]
Line_12 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_33 $$ errors.add(authorizationError)[ FD ]
Line_27 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_30 $$ commitLoader.reloadCommits()[ FD ]
Line_8 $$ final HgVersion version = hgvcs.getVersion()-->Line_9 $$ String[] templates = HgBaseLogParser.constructFullTemplateArgument(true, version)[ FD ]
Line_9 $$ String[] templates = HgBaseLogParser.constructFullTemplateArgument(true, version)-->Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)[ FD ]
Line_26 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_35 $$ errors.add(new VcsError(error))[ CD ]
Line_26 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_27 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() [ CD ]
Line_12 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_14 $$ errors.add(new VcsError("Hg push path could not be empty."))[ FD ]
Line_27 $$ VcsError authorizationError = new VcsError(error + "<a href='authenticate'>" + LOGIN_AND_REFRESH_LINK + "</a>", new VcsErrorHandler() -->Line_33 $$ errors.add(authorizationError)[ FD ]
Line_12 $$ List<VcsError> errors = new ArrayList<VcsError>()-->Line_35 $$ errors.add(new VcsError(error))[ FD ]
Line_23 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) -->Line_39 $$ LOG.warn(resultErrors.toString())[ CD ]
Line_22 $$ List<String> resultErrors = result.getErrorLines()-->Line_23 $$ if (resultErrors != null && !resultErrors.isEmpty() && result.getExitValue() != 0) [ FD ]
Line_26 $$ if (HgErrorUtil.isAuthorizationError(error)) -->Line_33 $$ errors.add(authorizationError)[ CD ]
Line_24 $$ for (String error : resultErrors) -->Line_26 $$ if (HgErrorUtil.isAuthorizationError(error)) [ FD ]
Line_22 $$ List<String> resultErrors = result.getErrorLines()-->Line_39 $$ LOG.warn(resultErrors.toString())[ FD ]
Line_8 $$ final HgVersion version = hgvcs.getVersion()-->Line_41 $$ return new OutgoingResult(HgHistoryUtil.createFullCommitsFromResult(project, repository.getRoot(), result, version, true), errors)[ FD ]
Line_6 $$ HgVcs hgvcs = HgVcs.getInstance(project)-->Line_8 $$ final HgVersion version = hgvcs.getVersion()[ FD ]
Line_17 $$ HgCommandResult result = hgOutgoingCommand.execute(repository.getRoot(), HgChangesetUtil.makeTemplate(templates), pushSpec.getSource().getPresentation(), hgTarget.myTarget, initial)-->Line_18 $$ if (result == null) [ FD ]
