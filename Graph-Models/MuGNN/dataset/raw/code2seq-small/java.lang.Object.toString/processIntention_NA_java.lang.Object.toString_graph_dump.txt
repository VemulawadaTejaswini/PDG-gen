Line_39 $$ if (buffer.isEmpty()) -->Line_42 $$ buffer.add(child)[ CD ]
Line_22 $$ for (PsiElement bufferedElement : buffer) -->Line_47 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_26 $$ newExpression.append(child.getText())[ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_9 $$ final PsiJavaToken token = (PsiJavaToken) element[ CD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_3 $$ if (element instanceof PsiWhiteSpace) [ CD ]
Line_16 $$ if (token.equals(child)) -->Line_20 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ CD ]
Line_18 $$ final Object value = literalExpression.getValue()-->Line_35 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_49 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpression.toString())[ CD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_4 $$ element = element.getPrevSibling()[ FD ]
Line_28 $$ if (child instanceof PsiLiteralExpression) -->Line_39 $$ if (buffer.isEmpty()) [ CD ]
Line_3 $$ if (element instanceof PsiWhiteSpace) -->Line_4 $$ element = element.getPrevSibling()[ CD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_49 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpression.toString())[ FD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_30 $$ buffer.add(child)[ FD ]
Line_29 $$ if (buffer.isEmpty()) -->Line_33 $$ final Object value = literalExpression.getValue()[ CD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_40 $$ newExpression.append(child.getText())[ FD ]
Line_29 $$ if (buffer.isEmpty()) -->Line_36 $$ buffer.clear()[ CD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_35 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ FD ]
Line_10 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_12 $$ final PsiElement[] children = polyadicExpression.getChildren()[ FD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_17 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)[ FD ]
Line_18 $$ final Object value = literalExpression.getValue()-->Line_20 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ FD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_29 $$ if (buffer.isEmpty()) [ FD ]
Line_9 $$ final PsiJavaToken token = (PsiJavaToken) element-->Line_16 $$ if (token.equals(child)) [ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_6 $$ if (!(element instanceof PsiJavaToken)) [ CD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)[ CD ]
Line_4 $$ element = element.getPrevSibling()-->Line_10 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()[ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_10 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()[ FD ]
Line_14 $$ for (PsiElement child : children) -->Line_16 $$ if (token.equals(child)) [ FD ]
Line_10 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_49 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpression.toString())[ FD ]
Line_16 $$ if (token.equals(child)) -->Line_17 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)[ CD ]
Line_28 $$ if (child instanceof PsiLiteralExpression) -->Line_29 $$ if (buffer.isEmpty()) [ CD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_47 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_16 $$ if (token.equals(child)) -->Line_26 $$ newExpression.append(child.getText())[ CD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_39 $$ if (buffer.isEmpty()) [ FD ]
Line_14 $$ for (PsiElement child : children) -->Line_40 $$ newExpression.append(child.getText())[ FD ]
Line_29 $$ if (buffer.isEmpty()) -->Line_30 $$ buffer.add(child)[ CD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_42 $$ buffer.add(child)[ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_10 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()[ CD ]
Line_15 $$ if (child instanceof PsiJavaToken) -->Line_28 $$ if (child instanceof PsiLiteralExpression) [ CD ]
Line_17 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)-->Line_18 $$ final Object value = literalExpression.getValue()[ FD ]
Line_16 $$ if (token.equals(child)) -->Line_18 $$ final Object value = literalExpression.getValue()[ CD ]
Line_16 $$ if (token.equals(child)) -->Line_25 $$ buffer.clear()[ CD ]
Line_29 $$ if (buffer.isEmpty()) -->Line_35 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ CD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_11 $$ StringBuilder newExpression = new StringBuilder()[ CD ]
Line_15 $$ if (child instanceof PsiJavaToken) -->Line_16 $$ if (token.equals(child)) [ CD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_25 $$ buffer.clear()[ FD ]
Line_13 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_36 $$ buffer.clear()[ FD ]
Line_14 $$ for (PsiElement child : children) -->Line_42 $$ buffer.add(child)[ FD ]
Line_17 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)-->Line_33 $$ final Object value = literalExpression.getValue()[ FD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_23 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_39 $$ if (buffer.isEmpty()) -->Line_40 $$ newExpression.append(child.getText())[ CD ]
Line_14 $$ for (PsiElement child : children) -->Line_30 $$ buffer.add(child)[ FD ]
Line_22 $$ for (PsiElement bufferedElement : buffer) -->Line_23 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_14 $$ for (PsiElement child : children) -->Line_28 $$ if (child instanceof PsiLiteralExpression) [ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_12 $$ final PsiElement[] children = polyadicExpression.getChildren()[ CD ]
Line_14 $$ for (PsiElement child : children) -->Line_15 $$ if (child instanceof PsiJavaToken) [ FD ]
Line_2 $$ public void processIntention(PsiElement element) throws IncorrectOperationException -->Line_3 $$ if (element instanceof PsiWhiteSpace) [ FD ]
Line_14 $$ for (PsiElement child : children) -->Line_26 $$ newExpression.append(child.getText())[ FD ]
Line_11 $$ StringBuilder newExpression = new StringBuilder()-->Line_20 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ FD ]
Line_6 $$ if (!(element instanceof PsiJavaToken)) -->Line_7 $$ return[ CD ]
