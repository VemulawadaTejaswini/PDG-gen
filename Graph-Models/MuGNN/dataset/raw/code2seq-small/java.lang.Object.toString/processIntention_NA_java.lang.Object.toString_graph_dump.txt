Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_26 $$ buffer.clear()[ FD ]
Line_17 $$ if (token.equals(child)) -->Line_27 $$ newExpression.append(child.getText())[ CD ]
Line_15 $$ for (PsiElement child : children) -->Line_16 $$ if (child instanceof PsiJavaToken) [ FD ]
Line_15 $$ for (PsiElement child : children) -->Line_43 $$ buffer.add(child)[ FD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_27 $$ newExpression.append(child.getText())[ FD ]
Line_15 $$ for (PsiElement child : children) -->Line_27 $$ newExpression.append(child.getText())[ FD ]
Line_19 $$ final Object value = literalExpression.getValue()-->Line_36 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ FD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_48 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_17 $$ if (token.equals(child)) -->Line_26 $$ buffer.clear()[ CD ]
Line_17 $$ if (token.equals(child)) -->Line_21 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ CD ]
Line_30 $$ if (buffer.isEmpty()) -->Line_34 $$ final Object value = literalExpression.getValue()[ CD ]
Line_16 $$ if (child instanceof PsiJavaToken) -->Line_29 $$ if (child instanceof PsiLiteralExpression) [ CD ]
Line_15 $$ for (PsiElement child : children) -->Line_17 $$ if (token.equals(child)) [ FD ]
Line_11 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_50 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpression.toString())[ FD ]
Line_15 $$ for (PsiElement child : children) -->Line_31 $$ buffer.add(child)[ FD ]
Line_16 $$ if (child instanceof PsiJavaToken) -->Line_17 $$ if (token.equals(child)) [ CD ]
Line_18 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)-->Line_19 $$ final Object value = literalExpression.getValue()[ FD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_30 $$ if (buffer.isEmpty()) [ FD ]
Line_4 $$ if (element instanceof PsiWhiteSpace) -->Line_5 $$ element = element.getPrevSibling()[ CD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_37 $$ buffer.clear()[ FD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_40 $$ if (buffer.isEmpty()) [ FD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_50 $$ PsiReplacementUtil.replaceExpression(polyadicExpression, newExpression.toString())[ FD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_31 $$ buffer.add(child)[ FD ]
Line_15 $$ for (PsiElement child : children) -->Line_29 $$ if (child instanceof PsiLiteralExpression) [ FD ]
Line_40 $$ if (buffer.isEmpty()) -->Line_43 $$ buffer.add(child)[ CD ]
Line_30 $$ if (buffer.isEmpty()) -->Line_31 $$ buffer.add(child)[ CD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_43 $$ buffer.add(child)[ FD ]
Line_18 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)-->Line_34 $$ final Object value = literalExpression.getValue()[ FD ]
Line_7 $$ if (!(element instanceof PsiJavaToken)) -->Line_8 $$ return[ CD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_24 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_41 $$ newExpression.append(child.getText())[ FD ]
Line_10 $$ final PsiJavaToken token = (PsiJavaToken) element-->Line_17 $$ if (token.equals(child)) [ FD ]
Line_15 $$ for (PsiElement child : children) -->Line_41 $$ newExpression.append(child.getText())[ FD ]
Line_29 $$ if (child instanceof PsiLiteralExpression) -->Line_40 $$ if (buffer.isEmpty()) [ CD ]
Line_23 $$ for (PsiElement bufferedElement : buffer) -->Line_48 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_30 $$ if (buffer.isEmpty()) -->Line_37 $$ buffer.clear()[ CD ]
Line_30 $$ if (buffer.isEmpty()) -->Line_36 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ CD ]
Line_29 $$ if (child instanceof PsiLiteralExpression) -->Line_30 $$ if (buffer.isEmpty()) [ CD ]
Line_40 $$ if (buffer.isEmpty()) -->Line_41 $$ newExpression.append(child.getText())[ CD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_36 $$ newExpression.append(StringUtil.escapeStringCharacters(value.toString())).append('"')[ FD ]
Line_17 $$ if (token.equals(child)) -->Line_18 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)[ CD ]
Line_19 $$ final Object value = literalExpression.getValue()-->Line_21 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ FD ]
Line_5 $$ element = element.getPrevSibling()-->Line_11 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()[ FD ]
Line_11 $$ final PsiPolyadicExpression polyadicExpression = (PsiPolyadicExpression) element.getParent()-->Line_13 $$ final PsiElement[] children = polyadicExpression.getChildren()[ FD ]
Line_14 $$ final List<PsiElement> buffer = new ArrayList(3)-->Line_18 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) buffer.get(0)[ FD ]
Line_17 $$ if (token.equals(child)) -->Line_19 $$ final Object value = literalExpression.getValue()[ CD ]
Line_23 $$ for (PsiElement bufferedElement : buffer) -->Line_24 $$ newExpression.append(bufferedElement.getText())[ FD ]
Line_12 $$ StringBuilder newExpression = new StringBuilder()-->Line_21 $$ newExpression.append('"').append(StringUtil.escapeStringCharacters(value.toString()))[ FD ]
