Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_11 $$ pp.postProcessBeanFactory(beanFactory)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_12 $$ beanFactory.freezeConfiguration()[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_17 $$ assertTrue(AopUtils.isCglibProxy(bean.integerRepository))[ CD ]
Line_3 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_5 $$ beanFactory.addBeanPostProcessor(bpp)[ FD ]
Line_10 $$ ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor()-->Line_11 $$ pp.postProcessBeanFactory(beanFactory)[ FD ]
Line_6 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class)-->Line_8 $$ beanFactory.registerBeanDefinition("annotatedBean", bd)[ FD ]
Line_3 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_4 $$ bpp.setBeanFactory(beanFactory)[ FD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_5 $$ beanFactory.addBeanPostProcessor(bpp)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_8 $$ beanFactory.registerBeanDefinition("annotatedBean", bd)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_10 $$ ConfigurationClassPostProcessor pp = new ConfigurationClassPostProcessor()[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_7 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_6 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_13 $$ RepositoryInjectionBean bean = (RepositoryInjectionBean) beanFactory.getBean("annotatedBean")[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_4 $$ bpp.setBeanFactory(beanFactory)[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_16 $$ assertTrue(AopUtils.isCglibProxy(bean.stringRepository))[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_9 $$ beanFactory.registerBeanDefinition("configClass", new RootBeanDefinition(ScopedProxyRepositoryConfiguration.class))[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_14 $$ assertEquals("Repository<String>", bean.stringRepository.toString())[ CD ]
Line_6 $$ RootBeanDefinition bd = new RootBeanDefinition(RepositoryInjectionBean.class)-->Line_7 $$ bd.setScope(RootBeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_3 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_2 $$ public void genericsBasedInjectionWithScopedProxy() -->Line_15 $$ assertEquals("Repository<Integer>", bean.integerRepository.toString())[ CD ]
