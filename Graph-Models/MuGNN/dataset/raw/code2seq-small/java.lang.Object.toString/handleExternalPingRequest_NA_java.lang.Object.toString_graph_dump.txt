Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_42 $$ builder.field(attr.key, attr.value)[ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_13 $$ logger.warn("malformed external ping request, no 'request' element from [ FD ]
Line_29 $$ DiscoveryNode localNode = contextProvider.nodes().localNode()-->Line_34 $$ builder.field("transport_address", localNode.address().toString())[ FD ]
Line_36 $$ for (Map.Entry<String, String> attr : contextProvider.nodeService().attributes().entrySet()) -->Line_37 $$ builder.field(attr.getKey(), attr.getValue())[ FD ]
Line_17 $$ if (requestClusterName == null) -->Line_19 $$ return[ CD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_37 $$ builder.field(attr.getKey(), attr.getValue())[ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_21 $$ if (!requestClusterName.equals(clusterName.value())) [ CD ]
Line_3 $$ if (externalPingData.containsKey("response")) -->Line_5 $$ return[ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_18 $$ logger.warn("malformed external ping request, missing 'cluster_name' element within request, from [ FD ]
Line_12 $$ if (request == null) -->Line_13 $$ logger.warn("malformed external ping request, no 'request' element from [ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_31 $$ builder.startObject().startObject("response")[ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_3 $$ if (externalPingData.containsKey("response")) [ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_3 $$ if (externalPingData.containsKey("response")) [ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_25 $$ if (logger.isTraceEnabled()) [ CD ]
Line_47 $$ if (logger.isTraceEnabled()) -->Line_48 $$ logger.trace("sending external ping response [ CD ]
Line_16 $$ final String requestClusterName = request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null-->Line_21 $$ if (!requestClusterName.equals(clusterName.value())) [ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_44 $$ builder.endObject()[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_34 $$ builder.field("transport_address", localNode.address().toString())[ FD ]
Line_7 $$ if (multicastChannel == null) -->Line_9 $$ return[ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_11 $$ Map<String, Object> request = (Map<String, Object>) externalPingData.get("request")[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_33 $$ builder.startObject("version").field("number", version.number()).field("snapshot_build", version.snapshot).endObject()[ FD ]
Line_12 $$ if (request == null) -->Line_14 $$ return[ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_11 $$ Map<String, Object> request = (Map<String, Object>) externalPingData.get("request")[ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_12 $$ if (request == null) [ CD ]
Line_21 $$ if (!requestClusterName.equals(clusterName.value())) -->Line_22 $$ logger.trace("got request for cluster_name [ CD ]
Line_17 $$ if (requestClusterName == null) -->Line_18 $$ logger.warn("malformed external ping request, missing 'cluster_name' element within request, from [ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_17 $$ if (requestClusterName == null) [ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_26 $$ logger.trace("got external ping request from [ FD ]
Line_21 $$ if (!requestClusterName.equals(clusterName.value())) -->Line_23 $$ return[ CD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_32 $$ builder.field("cluster_name", clusterName.value())[ FD ]
Line_3 $$ if (externalPingData.containsKey("response")) -->Line_4 $$ logger.trace("got an external ping response (ignoring) from [ CD ]
Line_29 $$ DiscoveryNode localNode = contextProvider.nodes().localNode()-->Line_41 $$ for (ObjectObjectCursor<String, String> attr : localNode.attributes()) [ FD ]
Line_11 $$ Map<String, Object> request = (Map<String, Object>) externalPingData.get("request")-->Line_16 $$ final String requestClusterName = request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_46 $$ multicastChannel.send(builder.bytes())[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_40 $$ builder.startObject("attributes")[ FD ]
Line_11 $$ Map<String, Object> request = (Map<String, Object>) externalPingData.get("request")-->Line_12 $$ if (request == null) [ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_45 $$ builder.endObject().endObject()[ FD ]
Line_30 $$ XContentBuilder builder = XContentFactory.contentBuilder(contentType)-->Line_48 $$ logger.trace("sending external ping response [ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_8 $$ logger.debug("can't send ping response, no socket, from [ FD ]
Line_7 $$ if (multicastChannel == null) -->Line_8 $$ logger.debug("can't send ping response, no socket, from [ CD ]
Line_16 $$ final String requestClusterName = request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null-->Line_22 $$ logger.trace("got request for cluster_name [ FD ]
Line_25 $$ if (logger.isTraceEnabled()) -->Line_26 $$ logger.trace("got external ping request from [ CD ]
Line_16 $$ final String requestClusterName = request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null-->Line_17 $$ if (requestClusterName == null) [ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_4 $$ logger.trace("got an external ping response (ignoring) from [ FD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_16 $$ final String requestClusterName = request.containsKey("cluster_name") ? request.get("cluster_name").toString() : request.containsKey("clusterName") ? request.get("clusterName").toString() : null[ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_7 $$ if (multicastChannel == null) [ CD ]
Line_2 $$ private void handleExternalPingRequest(Map<String, Object> externalPingData, XContentType contentType, SocketAddress remoteAddress) -->Line_22 $$ logger.trace("got request for cluster_name [ FD ]
