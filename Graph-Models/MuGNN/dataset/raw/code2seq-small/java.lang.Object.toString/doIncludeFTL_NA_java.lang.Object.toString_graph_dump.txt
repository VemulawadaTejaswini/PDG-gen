Line_27 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)-->Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ FD ]
Line_16 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_17 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)[ CD ]
Line_14 $$ String portletId = getPortletId(request)-->Line_17 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_20 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_14 $$ String portletId = getPortletId(request)[ CD ]
Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_45 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)-->Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)[ CD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_43 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_14 $$ String portletId = getPortletId(request)-->Line_20 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_14 $$ String portletId = getPortletId(request)-->Line_16 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_20 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_45 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_45 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ CD ]
Line_34 $$ Writer writer = null-->Line_39 $$ writer = new UnsyncStringWriter()[ FD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_47 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_27 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ CD ]
Line_17 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)-->Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_42 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_20 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ CD ]
Line_16 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_45 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_14 $$ String portletId = getPortletId(request)-->Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ FD ]
Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_43 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_33 $$ template.put("themeServletContext", themeServletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_42 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ CD ]
Line_39 $$ writer = new UnsyncStringWriter()-->Line_47 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_42 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_44 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_50 $$ if (write) [ CD ]
Line_34 $$ Writer writer = null-->Line_53 $$ return writer.toString()[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_43 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_34 $$ Writer writer = null[ CD ]
Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_46 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_14 $$ String portletId = getPortletId(request)[ FD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_34 $$ Writer writer = null-->Line_47 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_50 $$ if (write) -->Line_51 $$ return null[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_16 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_27 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_33 $$ template.put("themeServletContext", themeServletContext)[ CD ]
Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_42 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_41 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_46 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_25 $$ return null[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_43 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_44 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ CD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_23 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_24 $$ _log.error(resourcePath + " does not exist")[ CD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_44 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ FD ]
Line_15 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_16 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_9 $$ if (ServletContextPool.get(servletContextName) == null) [ CD ]
Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_46 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_27 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
Line_35 $$ if (write) -->Line_39 $$ writer = new UnsyncStringWriter()[ CD ]
Line_39 $$ writer = new UnsyncStringWriter()-->Line_53 $$ return writer.toString()[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_47 $$ template.put(TemplateConstants.WRITER, writer)[ CD ]
Line_50 $$ if (write) -->Line_53 $$ return writer.toString()[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_35 $$ if (write) [ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_28 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ FD ]
Line_18 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_46 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_20 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_21 $$ resourcePath = theme.getResourcePath(servletContext, null, path)-->Line_27 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
