Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_34 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_13 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_34 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ CD ]
Line_7 $$ String portletId = getPortletId(request)-->Line_9 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_26 $$ if (write) [ CD ]
Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)-->Line_20 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
Line_25 $$ Writer writer = null-->Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())[ FD ]
Line_3 $$ String servletContextName = GetterUtil.getString(theme.getServletContextName())-->Line_23 $$ ServletContext themeServletContext = ServletContextPool.get(servletContextName)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_36 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_33 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ CD ]
Line_13 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_25 $$ Writer writer = null-->Line_38 $$ template.processTemplate(writer)[ FD ]
Line_25 $$ Writer writer = null-->Line_29 $$ writer = new UnsyncStringWriter()[ FD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_24 $$ template.put("themeServletContext", themeServletContext)[ FD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_13 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_4 $$ if (ServletContextPool.get(servletContextName) == null) -->Line_5 $$ ServletContextPool.put(servletContextName, servletContext)[ CD ]
Line_20 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)-->Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_4 $$ if (ServletContextPool.get(servletContextName) == null) [ CD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_5 $$ ServletContextPool.put(servletContextName, servletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_36 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_33 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_36 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_26 $$ if (write) -->Line_29 $$ writer = new UnsyncStringWriter()[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_3 $$ String servletContextName = GetterUtil.getString(theme.getServletContextName())[ FD ]
Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_35 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_3 $$ String servletContextName = GetterUtil.getString(theme.getServletContextName())-->Line_4 $$ if (ServletContextPool.get(servletContextName) == null) [ FD ]
Line_10 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)-->Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_9 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_17 $$ _log.error(resourcePath + " does not exist")[ CD ]
Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_22 $$ template.prepare(request)[ CD ]
Line_7 $$ String portletId = getPortletId(request)-->Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)[ FD ]
Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_32 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_7 $$ String portletId = getPortletId(request)-->Line_10 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)[ FD ]
Line_29 $$ writer = new UnsyncStringWriter()-->Line_42 $$ return writer.toString()[ FD ]
Line_29 $$ writer = new UnsyncStringWriter()-->Line_37 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_39 $$ if (write) -->Line_40 $$ return null[ CD ]
Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())-->Line_42 $$ return writer.toString()[ FD ]
Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)-->Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_22 $$ template.prepare(request)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_22 $$ template.prepare(request)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_9 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_33 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_23 $$ ServletContext themeServletContext = ServletContextPool.get(servletContextName)-->Line_24 $$ template.put("themeServletContext", themeServletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_23 $$ ServletContext themeServletContext = ServletContextPool.get(servletContextName)[ CD ]
Line_25 $$ Writer writer = null-->Line_37 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_35 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_25 $$ Writer writer = null-->Line_42 $$ return writer.toString()[ FD ]
Line_31 $$ TemplateManager templateManager = TemplateManagerUtil.getTemplateManager(TemplateConstants.LANG_TYPE_FTL)-->Line_33 $$ templateManager.addTaglibFactory(template, "PortalJspTagLibs", servletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)[ CD ]
Line_7 $$ String portletId = getPortletId(request)-->Line_13 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_37 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_20 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ CD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_36 $$ templateManager.addTaglibTheme(template, "taglibLiferay", request, new PipingServletResponse(response, writer))[ FD ]
Line_26 $$ if (write) -->Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())[ CD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ FD ]
Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())-->Line_29 $$ writer = new UnsyncStringWriter()[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_35 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_37 $$ template.put(TemplateConstants.WRITER, writer)[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_38 $$ template.processTemplate(writer)[ CD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_34 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ FD ]
Line_3 $$ String servletContextName = GetterUtil.getString(theme.getServletContextName())-->Line_5 $$ ServletContextPool.put(servletContextName, servletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())[ FD ]
Line_29 $$ writer = new UnsyncStringWriter()-->Line_38 $$ template.processTemplate(writer)[ FD ]
Line_39 $$ if (write) -->Line_42 $$ return writer.toString()[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ CD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_38 $$ template.processTemplate(writer)[ FD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_20 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
Line_9 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_10 $$ String rootPortletId = PortletConstants.getRootPortletId(portletId)[ CD ]
Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_8 $$ String resourcePath = theme.getResourcePath(servletContext, portletId, path)-->Line_14 $$ resourcePath = theme.getResourcePath(servletContext, null, path)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_7 $$ String portletId = getPortletId(request)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_7 $$ String portletId = getPortletId(request)[ CD ]
Line_23 $$ ServletContext themeServletContext = ServletContextPool.get(servletContextName)-->Line_34 $$ templateManager.addTaglibFactory(template, "ThemeJspTaglibs", themeServletContext)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_24 $$ template.put("themeServletContext", themeServletContext)[ CD ]
Line_16 $$ if (!TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_18 $$ return null[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_3 $$ String servletContextName = GetterUtil.getString(theme.getServletContextName())[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_32 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ CD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_35 $$ templateManager.addTaglibRequest(template, "Request", request, response)[ CD ]
Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())-->Line_37 $$ template.put(TemplateConstants.WRITER, writer)[ FD ]
Line_27 $$ writer = UnsyncPrintWriterPool.borrow(response.getWriter())-->Line_38 $$ template.processTemplate(writer)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_39 $$ if (write) [ CD ]
Line_21 $$ Template template = TemplateManagerUtil.getTemplate(TemplateConstants.LANG_TYPE_FTL, templateResource, restricted)-->Line_32 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_32 $$ templateManager.addTaglibApplication(template, "Application", request.getServletContext())[ FD ]
Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_13 $$ if (Validator.isNotNull(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) [ FD ]
Line_9 $$ if (Validator.isNotNull(portletId) && PortletConstants.hasInstanceId(portletId) && !TemplateResourceLoaderUtil.hasTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)) -->Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)[ CD ]
Line_11 $$ resourcePath = theme.getResourcePath(servletContext, rootPortletId, path)-->Line_20 $$ TemplateResource templateResource = TemplateResourceLoaderUtil.getTemplateResource(TemplateConstants.LANG_TYPE_FTL, resourcePath)[ FD ]
Line_2 $$ protected static String doIncludeFTL(ServletContext servletContext, HttpServletRequest request, HttpServletResponse response, String path, Theme theme, boolean restricted, boolean write) throws Exception -->Line_25 $$ Writer writer = null[ CD ]
