Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_67 $$ if (value.getClass().getComponentType() == short.class) [ FD ]
Line_30 $$ if (value instanceof Boolean) -->Line_31 $$ row.add(value)[ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_57 $$ if (value.getClass().getComponentType() == char.class) [ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_68 $$ row.add(Arrays.toString((short[]) value))[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_54 $$ row.add(Arrays.toString((boolean[]) value))[ FD ]
Line_28 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_43 $$ if (javaType == double.class) [ FD ]
Line_44 $$ if (value instanceof Number) -->Line_45 $$ row.add(((Number) value).doubleValue())[ CD ]
Line_57 $$ if (value.getClass().getComponentType() == char.class) -->Line_58 $$ row.add(Arrays.toString((char[]) value))[ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_58 $$ row.add(Arrays.toString((char[]) value))[ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_59 $$ if (value.getClass().getComponentType() == double.class) [ FD ]
Line_28 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_29 $$ if (javaType == boolean.class) [ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_64 $$ row.add(Arrays.toString((int[]) value))[ FD ]
Line_61 $$ if (value.getClass().getComponentType() == float.class) -->Line_63 $$ if (value.getClass().getComponentType() == int.class) [ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_44 $$ if (value instanceof Number) [ FD ]
Line_12 $$ ImmutableMap<String, Type> columnTypes = builder.build()-->Line_15 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)[ FD ]
Line_21 $$ if (entry.getKey().equals("node")) -->Line_25 $$ if (value == null) [ CD ]
Line_8 $$ for (ColumnHandle column : columns) -->Line_9 $$ JmxColumnHandle jmxColumnHandle = checkType(column, JmxColumnHandle.class, "column")[ FD ]
Line_65 $$ if (value.getClass().getComponentType() == long.class) -->Line_66 $$ row.add(Arrays.toString((long[]) value))[ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_45 $$ row.add(((Number) value).doubleValue())[ FD ]
Line_36 $$ if (javaType == long.class) -->Line_43 $$ if (javaType == double.class) [ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_73 $$ row.add(value.toString())[ FD ]
Line_29 $$ if (javaType == boolean.class) -->Line_30 $$ if (value instanceof Boolean) [ CD ]
Line_29 $$ if (javaType == boolean.class) -->Line_36 $$ if (javaType == long.class) [ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_38 $$ row.add(((Number) value).longValue())[ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_37 $$ if (value instanceof Number) [ FD ]
Line_13 $$ List<List<Object>> rows-->Line_81 $$ rows = ImmutableList.of()[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_62 $$ row.add(Arrays.toString((float[]) value))[ FD ]
Line_43 $$ if (javaType == double.class) -->Line_50 $$ if (javaType == Slice.class) [ CD ]
Line_55 $$ if (value.getClass().getComponentType() == byte.class) -->Line_56 $$ row.add(Arrays.toString((byte[]) value))[ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_60 $$ row.add(Arrays.toString((double[]) value))[ FD ]
Line_21 $$ if (entry.getKey().equals("node")) -->Line_22 $$ row.add(nodeId)[ CD ]
Line_25 $$ if (value == null) -->Line_29 $$ if (javaType == boolean.class) [ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_25 $$ if (value == null) [ FD ]
Line_50 $$ if (javaType == Slice.class) -->Line_51 $$ if (value.getClass().isArray()) [ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_61 $$ if (value.getClass().getComponentType() == float.class) [ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_63 $$ if (value.getClass().getComponentType() == int.class) [ FD ]
Line_28 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_36 $$ if (javaType == long.class) [ FD ]
Line_65 $$ if (value.getClass().getComponentType() == long.class) -->Line_67 $$ if (value.getClass().getComponentType() == short.class) [ CD ]
Line_67 $$ if (value.getClass().getComponentType() == short.class) -->Line_68 $$ row.add(Arrays.toString((short[]) value))[ CD ]
Line_7 $$ ImmutableMap.Builder<String, Type> builder = ImmutableMap.builder()-->Line_10 $$ builder.put(jmxColumnHandle.getColumnName(), jmxColumnHandle.getColumnType())[ FD ]
Line_13 $$ List<List<Object>> rows-->Line_79 $$ rows = ImmutableList.of(row)[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_79 $$ rows = ImmutableList.of(row)[ FD ]
Line_43 $$ if (javaType == double.class) -->Line_44 $$ if (value instanceof Number) [ CD ]
Line_9 $$ JmxColumnHandle jmxColumnHandle = checkType(column, JmxColumnHandle.class, "column")-->Line_10 $$ builder.put(jmxColumnHandle.getColumnName(), jmxColumnHandle.getColumnType())[ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_51 $$ if (value.getClass().isArray()) [ FD ]
Line_59 $$ if (value.getClass().getComponentType() == double.class) -->Line_61 $$ if (value.getClass().getComponentType() == float.class) [ CD ]
Line_15 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)-->Line_24 $$ Object value = attributes.get(entry.getKey())[ FD ]
Line_51 $$ if (value.getClass().isArray()) -->Line_73 $$ row.add(value.toString())[ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_66 $$ row.add(Arrays.toString((long[]) value))[ FD ]
Line_36 $$ if (javaType == long.class) -->Line_37 $$ if (value instanceof Number) [ CD ]
Line_28 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_50 $$ if (javaType == Slice.class) [ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_73 $$ row.add(value.toString())[ FD ]
Line_79 $$ rows = ImmutableList.of(row)-->Line_81 $$ rows = ImmutableList.of()[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_70 $$ row.add(Arrays.toString((Object[]) value))[ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_30 $$ if (value instanceof Boolean) [ FD ]
Line_12 $$ ImmutableMap<String, Type> columnTypes = builder.build()-->Line_83 $$ return new InMemoryRecordSet(columnTypes.values(), rows)[ FD ]
Line_63 $$ if (value.getClass().getComponentType() == int.class) -->Line_65 $$ if (value.getClass().getComponentType() == long.class) [ CD ]
Line_25 $$ if (value == null) -->Line_26 $$ row.add(null)[ CD ]
Line_67 $$ if (value.getClass().getComponentType() == short.class) -->Line_70 $$ row.add(Arrays.toString((Object[]) value))[ CD ]
Line_63 $$ if (value.getClass().getComponentType() == int.class) -->Line_64 $$ row.add(Arrays.toString((int[]) value))[ CD ]
Line_7 $$ ImmutableMap.Builder<String, Type> builder = ImmutableMap.builder()-->Line_12 $$ ImmutableMap<String, Type> columnTypes = builder.build()[ FD ]
Line_37 $$ if (value instanceof Number) -->Line_38 $$ row.add(((Number) value).longValue())[ CD ]
Line_57 $$ if (value.getClass().getComponentType() == char.class) -->Line_59 $$ if (value.getClass().getComponentType() == double.class) [ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_22 $$ row.add(nodeId)[ FD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_31 $$ row.add(value)[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_56 $$ row.add(Arrays.toString((byte[]) value))[ FD ]
Line_21 $$ if (entry.getKey().equals("node")) -->Line_24 $$ Object value = attributes.get(entry.getKey())[ CD ]
Line_59 $$ if (value.getClass().getComponentType() == double.class) -->Line_60 $$ row.add(Arrays.toString((double[]) value))[ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_65 $$ if (value.getClass().getComponentType() == long.class) [ FD ]
Line_25 $$ if (value == null) -->Line_28 $$ Class<?> javaType = entry.getValue().getJavaType()[ CD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_31 $$ row.add(value)[ FD ]
Line_61 $$ if (value.getClass().getComponentType() == float.class) -->Line_62 $$ row.add(Arrays.toString((float[]) value))[ CD ]
Line_55 $$ if (value.getClass().getComponentType() == byte.class) -->Line_57 $$ if (value.getClass().getComponentType() == char.class) [ CD ]
Line_24 $$ Object value = attributes.get(entry.getKey())-->Line_55 $$ if (value.getClass().getComponentType() == byte.class) [ FD ]
Line_4 $$ JmxTableHandle tableHandle = checkType(split, JmxSplit.class, "split").getTableHandle()-->Line_15 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)[ FD ]
Line_16 $$ List<Object> row = new ArrayList()-->Line_26 $$ row.add(null)[ FD ]
