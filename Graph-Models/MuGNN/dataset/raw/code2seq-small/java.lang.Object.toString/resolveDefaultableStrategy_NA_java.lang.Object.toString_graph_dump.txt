Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_14 $$ if (Class.class.isInstance(strategyReference)) [ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_5 $$ return defaultResolver.call()[ FD ]
Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())-->Line_20 $$ return implementationClass.newInstance()[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_10 $$ if (strategy.isInstance(strategyReference)) [ CD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_13 $$ final Class<? extends T> implementationClass[ CD ]
Line_15 $$ implementationClass = (Class<T>) strategyReference-->Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())[ FD ]
Line_15 $$ implementationClass = (Class<T>) strategyReference-->Line_20 $$ return implementationClass.newInstance()[ FD ]
Line_13 $$ final Class<? extends T> implementationClass-->Line_20 $$ return implementationClass.newInstance()[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_3 $$ if (strategyReference == null) [ CD ]
Line_13 $$ final Class<? extends T> implementationClass-->Line_15 $$ implementationClass = (Class<T>) strategyReference[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_10 $$ if (strategy.isInstance(strategyReference)) [ FD ]
Line_13 $$ final Class<? extends T> implementationClass-->Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_3 $$ if (strategyReference == null) [ FD ]
Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())-->Line_22 $$ throw new StrategySelectionException(String.format("Could not instantiate named strategy class [%s]", implementationClass.getName()), e)[ FD ]
Line_14 $$ if (Class.class.isInstance(strategyReference)) -->Line_15 $$ implementationClass = (Class<T>) strategyReference[ CD ]
Line_15 $$ implementationClass = (Class<T>) strategyReference-->Line_22 $$ throw new StrategySelectionException(String.format("Could not instantiate named strategy class [%s]", implementationClass.getName()), e)[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_14 $$ if (Class.class.isInstance(strategyReference)) [ CD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())[ FD ]
Line_10 $$ if (strategy.isInstance(strategyReference)) -->Line_11 $$ return strategy.cast(strategyReference)[ CD ]
Line_14 $$ if (Class.class.isInstance(strategyReference)) -->Line_17 $$ implementationClass = selectStrategyImplementor(strategy, strategyReference.toString())[ CD ]
Line_13 $$ final Class<? extends T> implementationClass-->Line_22 $$ throw new StrategySelectionException(String.format("Could not instantiate named strategy class [%s]", implementationClass.getName()), e)[ FD ]
Line_2 $$ public <T> T resolveDefaultableStrategy(Class<T> strategy, Object strategyReference, Callable<T> defaultResolver) -->Line_11 $$ return strategy.cast(strategyReference)[ FD ]
