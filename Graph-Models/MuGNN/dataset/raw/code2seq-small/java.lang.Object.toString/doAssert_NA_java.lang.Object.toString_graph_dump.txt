Line_7 $$ String actualString = actualValue.toString()-->Line_8 $$ assertThat(errorMessage(), actualString, anyOf(equalTo(""), equalToIgnoringCase(Boolean.FALSE.toString()), equalTo("0")))[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ logger.trace("assert that [[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ logger.trace("assert that [[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_7 $$ String actualString = actualValue.toString()[ FD ]
Line_4 $$ if (actualValue == null) -->Line_5 $$ return[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_8 $$ assertThat(errorMessage(), actualString, anyOf(equalTo(""), equalToIgnoringCase(Boolean.FALSE.toString()), equalTo("0")))[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_4 $$ if (actualValue == null) [ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_7 $$ String actualString = actualValue.toString()[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_4 $$ if (actualValue == null) [ FD ]
