Line_18 $$ Object result = requiredUniqueResult(results)-->Line_29 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_24 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)-->Line_29 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_19 $$ if (requiredType != null && !requiredType.isInstance(result)) -->Line_20 $$ if (String.class == requiredType) [ CD ]
Line_18 $$ Object result = requiredUniqueResult(results)-->Line_24 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)[ FD ]
Line_18 $$ Object result = requiredUniqueResult(results)-->Line_19 $$ if (requiredType != null && !requiredType.isInstance(result)) [ FD ]
Line_21 $$ result = result.toString()-->Line_22 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ FD ]
Line_18 $$ Object result = requiredUniqueResult(results)-->Line_21 $$ result = result.toString()[ FD ]
Line_21 $$ result = result.toString()-->Line_24 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)[ FD ]
Line_18 $$ Object result = requiredUniqueResult(results)-->Line_22 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ FD ]
Line_21 $$ result = result.toString()-->Line_29 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_20 $$ if (String.class == requiredType) -->Line_21 $$ result = result.toString()[ CD ]
Line_20 $$ if (String.class == requiredType) -->Line_22 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ CD ]
