Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_12 $$ String replacement = first ? "([^\\n]*)" : "\\" + groupNumber[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_5 $$ String regex = escapeRegexChars(text)[ CD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_21 $$ offsetToProperty.put(i, name)[ CD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_14 $$ int[] offs = offsetToProperty.keys()[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_18 $$ offsetToProperty.put(off - delta, prop)[ FD ]
Line_12 $$ String replacement = first ? "([^\\n]*)" : "\\" + groupNumber-->Line_13 $$ int delta = escaped.length() - replacement.length()[ FD ]
Line_16 $$ if (off > i) -->Line_18 $$ offsetToProperty.put(off - delta, prop)[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_3 $$ List<Object> properties = ContainerUtil.newArrayList(FileTemplateManager.getInstance(project).getDefaultProperties().keySet())[ FD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_6 $$ int groupNumber = 1[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_4 $$ properties.add("PACKAGE_NAME")[ CD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_22 $$ regex = regex.substring(0, i) + replacement + regex.substring(i + escaped.length())[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_5 $$ String regex = escapeRegexChars(text)[ FD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_29 $$ return regex[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_21 $$ offsetToProperty.put(i, name)[ FD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_23 $$ if (first) [ CD ]
Line_3 $$ List<Object> properties = ContainerUtil.newArrayList(FileTemplateManager.getInstance(project).getDefaultProperties().keySet())-->Line_4 $$ properties.add("PACKAGE_NAME")[ FD ]
Line_16 $$ if (off > i) -->Line_17 $$ String prop = offsetToProperty.remove(off)[ CD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_21 $$ offsetToProperty.put(i, name)[ FD ]
Line_8 $$ String name = property.toString()-->Line_21 $$ offsetToProperty.put(i, name)[ FD ]
Line_9 $$ String escaped = escapeRegexChars("$-->Line_22 $$ regex = regex.substring(0, i) + replacement + regex.substring(i + escaped.length())[ FD ]
Line_9 $$ String escaped = escapeRegexChars("$-->Line_13 $$ int delta = escaped.length() - replacement.length()[ FD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_3 $$ List<Object> properties = ContainerUtil.newArrayList(FileTemplateManager.getInstance(project).getDefaultProperties().keySet())[ CD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_17 $$ String prop = offsetToProperty.remove(off)[ FD ]
Line_2 $$ private static String templateToRegex(String text, TIntObjectHashMap<String> offsetToProperty, Project project) -->Line_14 $$ int[] offs = offsetToProperty.keys()[ FD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_16 $$ if (off > i) [ FD ]
Line_7 $$ for (Object property : properties) -->Line_8 $$ String name = property.toString()[ FD ]
Line_23 $$ if (first) -->Line_25 $$ first = false[ CD ]
Line_6 $$ int groupNumber = 1-->Line_24 $$ groupNumber++[ FD ]
Line_5 $$ String regex = escapeRegexChars(text)-->Line_22 $$ regex = regex.substring(0, i) + replacement + regex.substring(i + escaped.length())[ FD ]
Line_10 $$ boolean first = true-->Line_25 $$ first = false[ FD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_13 $$ int delta = escaped.length() - replacement.length()[ CD ]
Line_23 $$ if (first) -->Line_24 $$ groupNumber++[ CD ]
Line_22 $$ regex = regex.substring(0, i) + replacement + regex.substring(i + escaped.length())-->Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) [ FD ]
Line_9 $$ String escaped = escapeRegexChars("$-->Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) [ FD ]
Line_15 $$ for (int off : offs) -->Line_16 $$ if (off > i) [ FD ]
Line_17 $$ String prop = offsetToProperty.remove(off)-->Line_18 $$ offsetToProperty.put(off - delta, prop)[ FD ]
Line_5 $$ String regex = escapeRegexChars(text)-->Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) [ FD ]
Line_15 $$ for (int off : offs) -->Line_17 $$ String prop = offsetToProperty.remove(off)[ FD ]
Line_11 $$ for (int i = regex.indexOf(escaped); i != -1 && i < regex.length(); i = regex.indexOf(escaped, i + 1)) -->Line_22 $$ regex = regex.substring(0, i) + replacement + regex.substring(i + escaped.length())[ FD ]
