Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_7 $$ Assert.assertTrue(message instanceof RPCResponse)[ CD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_3 $$ rpcRequest.execute(_embeddedChannel)[ FD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_3 $$ rpcRequest.execute(_embeddedChannel)[ CD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_5 $$ Assert.assertEquals(1, messages.size())[ CD ]
Line_4 $$ Queue<Object> messages = _embeddedChannel.outboundMessages()-->Line_6 $$ Object message = messages.poll()[ FD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_8 $$ Assert.assertEquals(rpcResponse.toString(), message.toString())[ FD ]
Line_6 $$ Object message = messages.poll()-->Line_8 $$ Assert.assertEquals(rpcResponse.toString(), message.toString())[ FD ]
Line_4 $$ Queue<Object> messages = _embeddedChannel.outboundMessages()-->Line_5 $$ Assert.assertEquals(1, messages.size())[ FD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_6 $$ Object message = messages.poll()[ CD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_4 $$ Queue<Object> messages = _embeddedChannel.outboundMessages()[ CD ]
Line_2 $$ protected void doTestExecute(RPCRequest<String> rpcRequest, RPCResponse<String> rpcResponse) -->Line_8 $$ Assert.assertEquals(rpcResponse.toString(), message.toString())[ CD ]
