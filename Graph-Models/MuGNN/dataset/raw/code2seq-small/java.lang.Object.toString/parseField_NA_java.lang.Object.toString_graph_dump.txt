Line_8 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_10 $$ final Object propNode = entry.getValue()[ FD ]
Line_56 $$ if (propName.equals("postings_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) -->Line_59 $$ if (propName.equals("doc_values_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ CD ]
Line_20 $$ if (propName.equals("boost")) -->Line_21 $$ builder.boost(nodeFloatValue(propNode))[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_30 $$ final String propName2 = Strings.toUnderscoreCase(entry2.getKey())[ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(propName, properties, parserContext.indexVersionCreated())[ FD ]
Line_42 $$ if (propName.equals("omit_term_freq_and_positions")) -->Line_49 $$ iterator.remove()[ CD ]
Line_35 $$ if (propName2.equals(Loading.KEY)) -->Line_36 $$ builder.normsLoading(Loading.parse(nodeStringValue(propNode2, null), null))[ CD ]
Line_30 $$ final String propName2 = Strings.toUnderscoreCase(entry2.getKey())-->Line_32 $$ if (propName2.equals("enabled")) [ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_25 $$ iterator.remove()[ FD ]
Line_42 $$ if (propName.equals("omit_term_freq_and_positions")) -->Line_44 $$ if (indexVersionCreated.onOrAfter(Version.V_1_0_0_RC2)) [ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_55 $$ iterator.remove()[ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_50 $$ if (propName.equals("index_options")) [ FD ]
Line_11 $$ if (propName.equals("store")) -->Line_12 $$ builder.store(parseStore(name, propNode.toString()))[ CD ]
Line_6 $$ Version indexVersionCreated = parserContext.indexVersionCreated()-->Line_44 $$ if (indexVersionCreated.onOrAfter(Version.V_1_0_0_RC2)) [ FD ]
Line_30 $$ final String propName2 = Strings.toUnderscoreCase(entry2.getKey())-->Line_35 $$ if (propName2.equals(Loading.KEY)) [ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_42 $$ if (propName.equals("omit_term_freq_and_positions")) [ FD ]
Line_65 $$ if (propName.equals("fielddata")) -->Line_66 $$ final Settings settings = Settings.builder().put(SettingsLoader.Helper.loadNestedFromMap(nodeMapValue(propNode, "fielddata"))).build()[ CD ]
Line_17 $$ if (propName.equals(DOC_VALUES)) -->Line_18 $$ builder.docValues(nodeBooleanValue(propNode))[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_29 $$ Entry<String, Object> entry2 = propsIterator.next()[ FD ]
Line_26 $$ if (propName.equals("norms")) -->Line_41 $$ iterator.remove()[ CD ]
Line_11 $$ if (propName.equals("store")) -->Line_14 $$ if (propName.equals("index")) [ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_37 $$ propsIterator.remove()[ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_59 $$ if (propName.equals("doc_values_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ FD ]
Line_6 $$ Version indexVersionCreated = parserContext.indexVersionCreated()-->Line_71 $$ if (indexVersionCreated.after(Version.V_2_1_0) || (indexVersionCreated.after(Version.V_2_0_1) && indexVersionCreated.before(Version.V_2_1_0))) [ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_66 $$ final Settings settings = Settings.builder().put(SettingsLoader.Helper.loadNestedFromMap(nodeMapValue(propNode, "fielddata"))).build()[ FD ]
Line_53 $$ if (propName.equals("include_in_all")) -->Line_54 $$ builder.includeInAll(nodeBooleanValue(propNode))[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_32 $$ if (propName2.equals("enabled")) [ CD ]
Line_29 $$ Entry<String, Object> entry2 = propsIterator.next()-->Line_31 $$ final Object propNode2 = entry2.getValue()[ FD ]
Line_50 $$ if (propName.equals("index_options")) -->Line_53 $$ if (propName.equals("include_in_all")) [ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_65 $$ if (propName.equals("fielddata")) -->Line_67 $$ builder.fieldDataSettings(settings)[ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_17 $$ if (propName.equals(DOC_VALUES)) [ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_51 $$ builder.indexOptions(nodeIndexOptionValue(propNode))[ FD ]
Line_32 $$ if (propName2.equals("enabled")) -->Line_34 $$ propsIterator.remove()[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_22 $$ iterator.remove()[ FD ]
Line_23 $$ if (propName.equals("omit_norms")) -->Line_25 $$ iterator.remove()[ CD ]
Line_17 $$ if (propName.equals(DOC_VALUES)) -->Line_20 $$ if (propName.equals("boost")) [ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_64 $$ iterator.remove()[ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_65 $$ if (propName.equals("fielddata")) [ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_53 $$ if (propName.equals("include_in_all")) [ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_62 $$ if (propName.equals("similarity")) [ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_69 $$ if (propName.equals("copy_to")) [ FD ]
Line_31 $$ final Object propNode2 = entry2.getValue()-->Line_36 $$ builder.normsLoading(Loading.parse(nodeStringValue(propNode2, null), null))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_68 $$ iterator.remove()[ FD ]
Line_70 $$ if (parserContext.isWithinMultiField()) -->Line_77 $$ parseCopyFields(propNode, builder)[ CD ]
Line_35 $$ if (propName2.equals(Loading.KEY)) -->Line_37 $$ propsIterator.remove()[ CD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_27 $$ final Map<String, Object> properties = nodeMapValue(propNode, "norms")[ FD ]
Line_42 $$ if (propName.equals("omit_term_freq_and_positions")) -->Line_50 $$ if (propName.equals("index_options")) [ CD ]
Line_26 $$ if (propName.equals("norms")) -->Line_27 $$ final Map<String, Object> properties = nodeMapValue(propNode, "norms")[ CD ]
Line_31 $$ final Object propNode2 = entry2.getValue()-->Line_33 $$ builder.omitNorms(!nodeBooleanValue(propNode2))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_10 $$ final Object propNode = entry.getValue()[ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_11 $$ if (propName.equals("store")) [ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_12 $$ builder.store(parseStore(name, propNode.toString()))[ FD ]
Line_14 $$ if (propName.equals("index")) -->Line_17 $$ if (propName.equals(DOC_VALUES)) [ CD ]
Line_53 $$ if (propName.equals("include_in_all")) -->Line_55 $$ iterator.remove()[ CD ]
Line_8 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())[ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_54 $$ builder.includeInAll(nodeBooleanValue(propNode))[ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_21 $$ builder.boost(nodeFloatValue(propNode))[ FD ]
Line_29 $$ Entry<String, Object> entry2 = propsIterator.next()-->Line_30 $$ final String propName2 = Strings.toUnderscoreCase(entry2.getKey())[ FD ]
Line_26 $$ if (propName.equals("norms")) -->Line_42 $$ if (propName.equals("omit_term_freq_and_positions")) [ CD ]
Line_23 $$ if (propName.equals("omit_norms")) -->Line_24 $$ builder.omitNorms(nodeBooleanValue(propNode))[ CD ]
Line_26 $$ if (propName.equals("norms")) -->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(propName, properties, parserContext.indexVersionCreated())[ CD ]
Line_65 $$ if (propName.equals("fielddata")) -->Line_69 $$ if (propName.equals("copy_to")) [ CD ]
Line_62 $$ if (propName.equals("similarity")) -->Line_65 $$ if (propName.equals("fielddata")) [ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_26 $$ if (propName.equals("norms")) [ FD ]
Line_11 $$ if (propName.equals("store")) -->Line_13 $$ iterator.remove()[ CD ]
Line_14 $$ if (propName.equals("index")) -->Line_16 $$ iterator.remove()[ CD ]
Line_20 $$ if (propName.equals("boost")) -->Line_22 $$ iterator.remove()[ CD ]
Line_32 $$ if (propName2.equals("enabled")) -->Line_33 $$ builder.omitNorms(!nodeBooleanValue(propNode2))[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_34 $$ propsIterator.remove()[ FD ]
Line_27 $$ final Map<String, Object> properties = nodeMapValue(propNode, "norms")-->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(propName, properties, parserContext.indexVersionCreated())[ FD ]
Line_17 $$ if (propName.equals(DOC_VALUES)) -->Line_19 $$ iterator.remove()[ CD ]
Line_70 $$ if (parserContext.isWithinMultiField()) -->Line_71 $$ if (indexVersionCreated.after(Version.V_2_1_0) || (indexVersionCreated.after(Version.V_2_0_1) && indexVersionCreated.before(Version.V_2_1_0))) [ CD ]
Line_53 $$ if (propName.equals("include_in_all")) -->Line_56 $$ if (propName.equals("postings_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_20 $$ if (propName.equals("boost")) [ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_41 $$ iterator.remove()[ FD ]
Line_50 $$ if (propName.equals("index_options")) -->Line_51 $$ builder.indexOptions(nodeIndexOptionValue(propNode))[ CD ]
Line_23 $$ if (propName.equals("omit_norms")) -->Line_26 $$ if (propName.equals("norms")) [ CD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_43 $$ final IndexOptions op = nodeBooleanValue(propNode) ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS[ FD ]
Line_59 $$ if (propName.equals("doc_values_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) -->Line_62 $$ if (propName.equals("similarity")) [ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_14 $$ if (propName.equals("index")) [ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_13 $$ iterator.remove()[ FD ]
Line_26 $$ if (propName.equals("norms")) -->Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) [ CD ]
Line_14 $$ if (propName.equals("index")) -->Line_15 $$ parseIndex(name, propNode.toString(), builder)[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_29 $$ Entry<String, Object> entry2 = propsIterator.next()[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_11 $$ if (propName.equals("store")) [ CD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_23 $$ if (propName.equals("omit_norms")) [ FD ]
Line_62 $$ if (propName.equals("similarity")) -->Line_64 $$ iterator.remove()[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_49 $$ iterator.remove()[ FD ]
Line_9 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_56 $$ if (propName.equals("postings_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ FD ]
Line_27 $$ final Map<String, Object> properties = nodeMapValue(propNode, "norms")-->Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) [ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_62 $$ if (propName.equals("similarity")) -->Line_63 $$ builder.similarity(parserContext.getSimilarity(propNode.toString()))[ CD ]
Line_20 $$ if (propName.equals("boost")) -->Line_23 $$ if (propName.equals("omit_norms")) [ CD ]
Line_69 $$ if (propName.equals("copy_to")) -->Line_70 $$ if (parserContext.isWithinMultiField()) [ CD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_15 $$ parseIndex(name, propNode.toString(), builder)[ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_24 $$ builder.omitNorms(nodeBooleanValue(propNode))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_50 $$ if (propName.equals("index_options")) -->Line_52 $$ iterator.remove()[ CD ]
Line_6 $$ Version indexVersionCreated = parserContext.indexVersionCreated()-->Line_56 $$ if (propName.equals("postings_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ FD ]
Line_65 $$ if (propName.equals("fielddata")) -->Line_68 $$ iterator.remove()[ CD ]
Line_28 $$ for (Iterator<Entry<String, Object>> propsIterator = properties.entrySet().iterator(); propsIterator.hasNext(); ) -->Line_31 $$ final Object propNode2 = entry2.getValue()[ CD ]
Line_32 $$ if (propName2.equals("enabled")) -->Line_35 $$ if (propName2.equals(Loading.KEY)) [ CD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_18 $$ builder.docValues(nodeBooleanValue(propNode))[ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_77 $$ parseCopyFields(propNode, builder)[ FD ]
Line_71 $$ if (indexVersionCreated.after(Version.V_2_1_0) || (indexVersionCreated.after(Version.V_2_0_1) && indexVersionCreated.before(Version.V_2_1_0))) -->Line_74 $$ ESLoggerFactory.getLogger("mapping [" + parserContext.type() + "]").warn("Found a copy_to in field [" + name + "] which is within a multi field. This feature has been removed and the copy_to will be removed from the mapping.")[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_52 $$ iterator.remove()[ FD ]
Line_69 $$ if (propName.equals("copy_to")) -->Line_79 $$ iterator.remove()[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_79 $$ iterator.remove()[ FD ]
Line_6 $$ Version indexVersionCreated = parserContext.indexVersionCreated()-->Line_59 $$ if (propName.equals("doc_values_format") && indexVersionCreated.before(Version.V_2_0_0_beta1)) [ FD ]
Line_10 $$ final Object propNode = entry.getValue()-->Line_63 $$ builder.similarity(parserContext.getSimilarity(propNode.toString()))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_16 $$ iterator.remove()[ FD ]
Line_6 $$ Version indexVersionCreated = parserContext.indexVersionCreated()-->Line_82 $$ if (indexVersionCreated.before(Version.V_2_2_0)) [ FD ]
