Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_10 $$ assertEquals("s1", actual.get(StompHeaderAccessor.STOMP_SUBSCRIPTION_HEADER).get(0))[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_11 $$ assertEquals("/d", actual.get(StompHeaderAccessor.STOMP_DESTINATION_HEADER).get(0))[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_12 $$ assertEquals("application/json", actual.get(StompHeaderAccessor.STOMP_CONTENT_TYPE_HEADER).get(0))[ CD ]
Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()-->Line_9 $$ assertEquals(actual.toString(), 4, actual.size())[ FD ]
Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()-->Line_10 $$ assertEquals("s1", actual.get(StompHeaderAccessor.STOMP_SUBSCRIPTION_HEADER).get(0))[ FD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_6 $$ headers.setContentType(MimeTypeUtils.APPLICATION_JSON)[ FD ]
Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()-->Line_12 $$ assertEquals("application/json", actual.get(StompHeaderAccessor.STOMP_CONTENT_TYPE_HEADER).get(0))[ FD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_9 $$ assertEquals(actual.toString(), 4, actual.size())[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_4 $$ headers.setSubscriptionId("s1")[ FD ]
Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()-->Line_11 $$ assertEquals("/d", actual.get(StompHeaderAccessor.STOMP_DESTINATION_HEADER).get(0))[ FD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_5 $$ headers.setDestination("/d")[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_4 $$ headers.setSubscriptionId("s1")[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()[ FD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_7 $$ headers.updateStompCommandAsServerMessage()[ CD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_13 $$ assertNotNull("message-id was not created", actual.get(StompHeaderAccessor.STOMP_MESSAGE_ID_HEADER).get(0))[ CD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_5 $$ headers.setDestination("/d")[ FD ]
Line_3 $$ StompHeaderAccessor headers = StompHeaderAccessor.create(StompCommand.MESSAGE)-->Line_7 $$ headers.updateStompCommandAsServerMessage()[ FD ]
Line_8 $$ Map<String, List<String>> actual = headers.toNativeHeaderMap()-->Line_13 $$ assertNotNull("message-id was not created", actual.get(StompHeaderAccessor.STOMP_MESSAGE_ID_HEADER).get(0))[ FD ]
Line_2 $$ public void toNativeHeadersMessageFrame() -->Line_6 $$ headers.setContentType(MimeTypeUtils.APPLICATION_JSON)[ CD ]
