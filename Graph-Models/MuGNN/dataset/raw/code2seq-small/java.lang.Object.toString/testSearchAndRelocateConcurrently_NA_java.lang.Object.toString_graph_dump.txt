Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_7 $$ final int numDocs = between(10, 20)[ CD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ FD ]
Line_3 $$ final int numShards = between(1, 20)-->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_12 $$ assertHitCount(client().prepareSearch().get(), (numDocs))[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()[ CD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_50 $$ thrownExceptions.add(t)[ FD ]
Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_79 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, thrownExceptions, Matchers.emptyIterable())[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ FD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_72 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_27 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()[ FD ]
Line_35 $$ final SearchHits sh = sr.getHits()-->Line_36 $$ assertThat("Expected hits to be the same size the actual hits array", sh.getTotalHits(), equalTo((long) (sh.getHits().length)))[ FD ]
Line_43 $$ if (numberOfReplicas == 1 || !ex.getMessage().contains("all shards failed")) -->Line_44 $$ thrownExceptions.add(ex)[ CD ]
Line_34 $$ criticalException = true-->Line_47 $$ if (!criticalException) [ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_59 $$ allowNodes("test", between(1, 3))[ CD ]
Line_62 $$ for (int j = 0; j < threads.length; j++) -->Line_72 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_26 $$ while (!stop.get()) -->Line_35 $$ final SearchHits sh = sr.getHits()[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_56 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_5 $$ ensureGreen()[ CD ]
Line_26 $$ while (!stop.get()) -->Line_36 $$ assertThat("Expected hits to be the same size the actual hits array", sh.getTotalHits(), equalTo((long) (sh.getHits().length)))[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_14 $$ for (int i = 0; i < numIters; i++) [ CD ]
Line_26 $$ while (!stop.get()) -->Line_34 $$ criticalException = true[ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_14 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()-->Line_48 $$ nonCriticalExceptions.add(t)[ FD ]
Line_27 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()-->Line_35 $$ final SearchHits sh = sr.getHits()[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_18 $$ Thread[] threads = new Thread[scaledRandomIntBetween(1, 3)][ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()[ CD ]
Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_82 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, postSearchOK, is(true))[ CD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_8 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_67 $$ assertNoTimeout(resp)[ CD ]
Line_26 $$ while (!stop.get()) -->Line_33 $$ assertHitCount(sr, (numDocs))[ CD ]
Line_20 $$ threads[j] = new Thread() -->Line_24 $$ boolean criticalException = true[ CD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_20 $$ threads[j] = new Thread() [ CD ]
Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()-->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ FD ]
Line_56 $$ for (int j = 0; j < threads.length; j++) -->Line_62 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_62 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_44 $$ thrownExceptions.add(ex)[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_62 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_24 $$ boolean criticalException = true-->Line_34 $$ criticalException = true[ FD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_79 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, thrownExceptions, Matchers.emptyIterable())[ FD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_56 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_13 $$ final int numIters = scaledRandomIntBetween(5, 20)-->Line_14 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_72 $$ for (int j = 0; j < 10; j++) -->Line_73 $$ if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) [ CD ]
Line_26 $$ while (!stop.get()) -->Line_27 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()[ CD ]
Line_47 $$ if (!criticalException) -->Line_50 $$ thrownExceptions.add(t)[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_13 $$ final int numIters = scaledRandomIntBetween(5, 20)[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_61 $$ stop.set(true)[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ FD ]
Line_56 $$ for (int j = 0; j < threads.length; j++) -->Line_57 $$ threads[j].start()[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ CD ]
Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_61 $$ stop.set(true)[ FD ]
Line_27 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()-->Line_33 $$ assertHitCount(sr, (numDocs))[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_60 $$ client().admin().cluster().prepareReroute().get()[ CD ]
Line_62 $$ for (int j = 0; j < threads.length; j++) -->Line_63 $$ threads[j].join()[ CD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_73 $$ if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) [ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_11 $$ indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]))[ CD ]
Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()-->Line_11 $$ indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]))[ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_3 $$ final int numShards = between(1, 20)[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_19 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_47 $$ if (!criticalException) -->Line_48 $$ nonCriticalExceptions.add(t)[ CD ]
Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_26 $$ while (!stop.get()) [ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ CD ]
Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_69 $$ Client client = client()[ CD ]
Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_72 $$ for (int j = 0; j < 10; j++) [ CD ]
Line_56 $$ for (int j = 0; j < threads.length; j++) -->Line_72 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_24 $$ boolean criticalException = true-->Line_47 $$ if (!criticalException) [ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_8 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()-->Line_68 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ FD ]
