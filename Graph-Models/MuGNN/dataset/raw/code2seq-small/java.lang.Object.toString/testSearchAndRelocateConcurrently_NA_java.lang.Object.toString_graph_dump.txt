Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_3 $$ final int numShards = between(1, 20)[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_12 $$ assertHitCount(client().prepareSearch().get(), (numDocs))[ CD ]
Line_37 $$ if (!criticalException) -->Line_38 $$ nonCriticalExceptions.add(t)[ CD ]
Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_58 $$ Client client = client()[ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ CD ]
Line_33 $$ if (numberOfReplicas == 1 || !ex.getMessage().contains("all shards failed")) -->Line_34 $$ thrownExceptions.add(ex)[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ CD ]
Line_24 $$ while (!stop.get()) -->Line_30 $$ assertThat("Expected hits to be the same size the actual hits array", sh.getTotalHits(), equalTo((long) (sh.getHits().length)))[ CD ]
Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_68 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, thrownExceptions, Matchers.emptyIterable())[ CD ]
Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_70 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, postSearchOK, is(true))[ CD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_68 $$ assertThat("numberOfReplicas: " + numberOfReplicas + " failed in iteration " + i + ", verification: " + verified, thrownExceptions, Matchers.emptyIterable())[ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_13 $$ final int numIters = scaledRandomIntBetween(5, 20)[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_5 $$ ensureGreen()[ CD ]
Line_24 $$ while (!stop.get()) -->Line_29 $$ final SearchHits sh = sr.getHits()[ CD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_52 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_46 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_11 $$ indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]))[ CD ]
Line_25 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()-->Line_27 $$ assertHitCount(sr, (numDocs))[ FD ]
Line_22 $$ boolean criticalException = true-->Line_28 $$ criticalException = true[ FD ]
Line_20 $$ threads[j] = new Thread() -->Line_22 $$ boolean criticalException = true[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_56 $$ assertNoTimeout(resp)[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_50 $$ client().admin().cluster().prepareReroute().get()[ CD ]
Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_61 $$ for (int j = 0; j < 10; j++) [ CD ]
Line_37 $$ if (!criticalException) -->Line_40 $$ thrownExceptions.add(t)[ CD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_40 $$ thrownExceptions.add(t)[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_52 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ CD ]
Line_24 $$ while (!stop.get()) -->Line_28 $$ criticalException = true[ CD ]
Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()-->Line_69 $$ logger.info("Non-CriticalExceptions: " + nonCriticalExceptions.toString())[ FD ]
Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_51 $$ stop.set(true)[ FD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_8 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_46 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_20 $$ threads[j] = new Thread() [ CD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ FD ]
Line_46 $$ for (int j = 0; j < threads.length; j++) -->Line_47 $$ threads[j].start()[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_51 $$ stop.set(true)[ CD ]
Line_26 $$ criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0-->Line_37 $$ if (!criticalException) [ FD ]
Line_24 $$ while (!stop.get()) -->Line_25 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()[ CD ]
Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) -->Line_69 $$ logger.info("Non-CriticalExceptions: " + nonCriticalExceptions.toString())[ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ FD ]
Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()-->Line_9 $$ indexBuilders.add(client().prepareIndex("test", "type", Integer.toString(i)).setSource(jsonBuilder().startObject().field("test", "value").startObject("loc").field("lat", 11).field("lon", 21).endObject().endObject()))[ FD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_25 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_19 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_18 $$ Thread[] threads = new Thread[scaledRandomIntBetween(1, 3)][ CD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()[ CD ]
Line_25 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()-->Line_26 $$ criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0[ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_7 $$ final int numDocs = between(10, 20)[ CD ]
Line_24 $$ while (!stop.get()) -->Line_27 $$ assertHitCount(sr, (numDocs))[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()[ CD ]
Line_46 $$ for (int j = 0; j < threads.length; j++) -->Line_52 $$ for (int j = 0; j < threads.length; j++) [ FD ]
Line_52 $$ for (int j = 0; j < threads.length; j++) -->Line_61 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_14 $$ for (int i = 0; i < numIters; i++) [ CD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ FD ]
Line_22 $$ boolean criticalException = true-->Line_26 $$ criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0[ FD ]
Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_24 $$ while (!stop.get()) [ FD ]
Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()-->Line_38 $$ nonCriticalExceptions.add(t)[ FD ]
Line_22 $$ boolean criticalException = true-->Line_37 $$ if (!criticalException) [ FD ]
Line_8 $$ for (int i = 0; i < numDocs; i++) -->Line_14 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_16 $$ final List<Throwable> thrownExceptions = new CopyOnWriteArrayList()-->Line_34 $$ thrownExceptions.add(ex)[ FD ]
Line_24 $$ while (!stop.get()) -->Line_26 $$ criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0[ CD ]
Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()-->Line_57 $$ if (!thrownExceptions.isEmpty() || !nonCriticalExceptions.isEmpty()) [ FD ]
Line_3 $$ final int numShards = between(1, 20)-->Line_4 $$ client().admin().indices().prepareCreate("test").setSettings(settingsBuilder().put("index.number_of_shards", numShards).put("index.number_of_replicas", numberOfReplicas)).addMapping("type", "loc", "type=geo_point", "test", "type=string").execute().actionGet()[ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_55 $$ ClusterHealthResponse resp = client().admin().cluster().prepareHealth().setWaitForYellowStatus().setWaitForRelocatingShards(0).setWaitForEvents(Priority.LANGUID).setTimeout("5m").get()[ CD ]
Line_28 $$ criticalException = true-->Line_37 $$ if (!criticalException) [ FD ]
Line_52 $$ for (int j = 0; j < threads.length; j++) -->Line_53 $$ threads[j].join()[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_17 $$ final List<Throwable> nonCriticalExceptions = new CopyOnWriteArrayList()[ CD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_15 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_19 $$ for (int j = 0; j < threads.length; j++) -->Line_61 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_61 $$ for (int j = 0; j < 10; j++) -->Line_62 $$ if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) [ CD ]
Line_29 $$ final SearchHits sh = sr.getHits()-->Line_30 $$ assertThat("Expected hits to be the same size the actual hits array", sh.getTotalHits(), equalTo((long) (sh.getHits().length)))[ FD ]
Line_26 $$ criticalException = sr.getTotalShards() == sr.getSuccessfulShards() || sr.getFailedShards() > 0-->Line_28 $$ criticalException = true[ FD ]
Line_25 $$ SearchResponse sr = client().prepareSearch().setSize(numDocs).get()-->Line_29 $$ final SearchHits sh = sr.getHits()[ FD ]
Line_46 $$ for (int j = 0; j < threads.length; j++) -->Line_61 $$ for (int j = 0; j < 10; j++) [ FD ]
Line_13 $$ final int numIters = scaledRandomIntBetween(5, 20)-->Line_14 $$ for (int i = 0; i < numIters; i++) [ FD ]
Line_14 $$ for (int i = 0; i < numIters; i++) -->Line_49 $$ allowNodes("test", between(1, 3))[ CD ]
Line_7 $$ final int numDocs = between(10, 20)-->Line_62 $$ if (client.prepareSearch().get().getHits().getTotalHits() != numDocs) [ FD ]
Line_6 $$ List<IndexRequestBuilder> indexBuilders = new ArrayList()-->Line_11 $$ indexRandom(true, indexBuilders.toArray(new IndexRequestBuilder[indexBuilders.size()]))[ FD ]
Line_2 $$ private void testSearchAndRelocateConcurrently(final int numberOfReplicas) throws Exception -->Line_8 $$ for (int i = 0; i < numDocs; i++) [ CD ]
