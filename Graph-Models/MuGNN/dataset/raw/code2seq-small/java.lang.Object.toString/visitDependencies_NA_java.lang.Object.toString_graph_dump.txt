Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_47 $$ formats.add("A String or CharSequence task name or path")[ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_10 $$ if (dependency instanceof TaskDependency) [ FD ]
Line_25 $$ if (dependency instanceof Map) -->Line_27 $$ queue.addAll(0, map.values())[ CD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_30 $$ queue.addAll(0, Arrays.asList(array))[ FD ]
Line_35 $$ callableResult = callable.call()-->Line_39 $$ if (callableResult != null) [ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_28 $$ if (dependency instanceof Object[]) [ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_4 $$ while (!queue.isEmpty()) [ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_6 $$ if (dependency instanceof Buildable) [ FD ]
Line_28 $$ if (dependency instanceof Object[]) -->Line_30 $$ queue.addAll(0, Arrays.asList(array))[ CD ]
Line_14 $$ Object closureResult = closure.call(context.getTask())-->Line_16 $$ queue.add(0, closureResult)[ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_43 $$ context.add(resolver.resolveTask(dependency.toString()))[ FD ]
Line_22 $$ if (dependency instanceof Iterable) -->Line_24 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), iterable))[ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_43 $$ context.add(resolver.resolveTask(dependency.toString()))[ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_9 $$ context.add(dependency)[ FD ]
Line_12 $$ if (dependency instanceof Closure) -->Line_13 $$ Closure closure = (Closure) dependency[ CD ]
Line_8 $$ if (dependency instanceof Task) -->Line_9 $$ context.add(dependency)[ CD ]
Line_4 $$ while (!queue.isEmpty()) -->Line_6 $$ if (dependency instanceof Buildable) [ CD ]
Line_18 $$ if (dependency instanceof RealizableTaskCollection) -->Line_21 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), realizableTaskCollection))[ CD ]
Line_31 $$ if (dependency instanceof Callable) -->Line_42 $$ if (resolver != null && dependency instanceof CharSequence) [ CD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_51 $$ formats.add("A TaskDependency instance")[ FD ]
Line_25 $$ if (dependency instanceof Map) -->Line_28 $$ if (dependency instanceof Object[]) [ CD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_52 $$ formats.add("A Closure instance that returns any of the above types")[ FD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_52 $$ formats.add("A Closure instance that returns any of the above types")[ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_25 $$ if (dependency instanceof Map) [ FD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_53 $$ formats.add("A Callable instance that returns any of the above types")[ CD ]
Line_31 $$ if (dependency instanceof Callable) -->Line_32 $$ Callable callable = (Callable) dependency[ CD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_5 $$ Object dependency = queue.removeFirst()[ FD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_16 $$ queue.add(0, closureResult)[ FD ]
Line_8 $$ if (dependency instanceof Task) -->Line_10 $$ if (dependency instanceof TaskDependency) [ CD ]
Line_46 $$ if (resolver != null) -->Line_47 $$ formats.add("A String or CharSequence task name or path")[ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_43 $$ context.add(resolver.resolveTask(dependency.toString()))[ CD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_21 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), realizableTaskCollection))[ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_18 $$ if (dependency instanceof RealizableTaskCollection) [ FD ]
Line_28 $$ if (dependency instanceof Object[]) -->Line_31 $$ if (dependency instanceof Callable) [ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_49 $$ formats.add("A Task instance")[ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_51 $$ formats.add("A TaskDependency instance")[ CD ]
Line_10 $$ if (dependency instanceof TaskDependency) -->Line_11 $$ context.add(dependency)[ CD ]
Line_23 $$ Iterable<?> iterable = (Iterable) dependency-->Line_24 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), iterable))[ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_9 $$ context.add(dependency)[ FD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_46 $$ if (resolver != null) [ CD ]
Line_26 $$ Map<?, ?> map = (Map) dependency-->Line_27 $$ queue.addAll(0, map.values())[ FD ]
Line_31 $$ if (dependency instanceof Callable) -->Line_33 $$ Object callableResult[ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_45 $$ List<String> formats = new ArrayList<String>()[ CD ]
Line_33 $$ Object callableResult-->Line_39 $$ if (callableResult != null) [ FD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_24 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), iterable))[ FD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_54 $$ formats.add("An Iterable, Collection, Map or array instance that contains any of the above types")[ FD ]
Line_33 $$ Object callableResult-->Line_40 $$ queue.add(0, callableResult)[ FD ]
Line_28 $$ if (dependency instanceof Object[]) -->Line_29 $$ Object[] array = (Object[]) dependency[ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_31 $$ if (dependency instanceof Callable) [ FD ]
Line_12 $$ if (dependency instanceof Closure) -->Line_14 $$ Object closureResult = closure.call(context.getTask())[ CD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_50 $$ formats.add("A Buildable instance")[ FD ]
Line_10 $$ if (dependency instanceof TaskDependency) -->Line_12 $$ if (dependency instanceof Closure) [ CD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_11 $$ context.add(dependency)[ FD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_27 $$ queue.addAll(0, map.values())[ FD ]
Line_18 $$ if (dependency instanceof RealizableTaskCollection) -->Line_19 $$ RealizableTaskCollection realizableTaskCollection = (RealizableTaskCollection) dependency[ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_55 $$ throw new UnsupportedNotationException(dependency, String.format("Cannot convert %s to a task.", dependency), null, formats)[ FD ]
Line_18 $$ if (dependency instanceof RealizableTaskCollection) -->Line_20 $$ realizableTaskCollection.realizeRuleTaskTypes()[ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_54 $$ formats.add("An Iterable, Collection, Map or array instance that contains any of the above types")[ CD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_4 $$ while (!queue.isEmpty()) [ FD ]
Line_18 $$ if (dependency instanceof RealizableTaskCollection) -->Line_22 $$ if (dependency instanceof Iterable) [ CD ]
Line_25 $$ if (dependency instanceof Map) -->Line_26 $$ Map<?, ?> map = (Map) dependency[ CD ]
Line_35 $$ callableResult = callable.call()-->Line_40 $$ queue.add(0, callableResult)[ FD ]
Line_12 $$ if (dependency instanceof Closure) -->Line_15 $$ if (closureResult != null) [ CD ]
Line_19 $$ RealizableTaskCollection realizableTaskCollection = (RealizableTaskCollection) dependency-->Line_21 $$ queue.addAll(0, GUtil.addToCollection(new ArrayList<Object>(), realizableTaskCollection))[ FD ]
Line_33 $$ Object callableResult-->Line_35 $$ callableResult = callable.call()[ FD ]
Line_4 $$ while (!queue.isEmpty()) -->Line_5 $$ Object dependency = queue.removeFirst()[ CD ]
Line_22 $$ if (dependency instanceof Iterable) -->Line_25 $$ if (dependency instanceof Map) [ CD ]
Line_6 $$ if (dependency instanceof Buildable) -->Line_8 $$ if (dependency instanceof Task) [ CD ]
Line_29 $$ Object[] array = (Object[]) dependency-->Line_30 $$ queue.addAll(0, Arrays.asList(array))[ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_14 $$ Object closureResult = closure.call(context.getTask())[ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_22 $$ if (dependency instanceof Iterable) [ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_7 $$ context.add(dependency)[ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_8 $$ if (dependency instanceof Task) [ FD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_11 $$ context.add(dependency)[ FD ]
Line_22 $$ if (dependency instanceof Iterable) -->Line_23 $$ Iterable<?> iterable = (Iterable) dependency[ CD ]
Line_42 $$ if (resolver != null && dependency instanceof CharSequence) -->Line_50 $$ formats.add("A Buildable instance")[ CD ]
Line_5 $$ Object dependency = queue.removeFirst()-->Line_12 $$ if (dependency instanceof Closure) [ FD ]
Line_14 $$ Object closureResult = closure.call(context.getTask())-->Line_15 $$ if (closureResult != null) [ FD ]
Line_13 $$ Closure closure = (Closure) dependency-->Line_14 $$ Object closureResult = closure.call(context.getTask())[ FD ]
Line_12 $$ if (dependency instanceof Closure) -->Line_18 $$ if (dependency instanceof RealizableTaskCollection) [ CD ]
Line_15 $$ if (closureResult != null) -->Line_16 $$ queue.add(0, closureResult)[ CD ]
Line_6 $$ if (dependency instanceof Buildable) -->Line_7 $$ context.add(dependency)[ CD ]
Line_19 $$ RealizableTaskCollection realizableTaskCollection = (RealizableTaskCollection) dependency-->Line_20 $$ realizableTaskCollection.realizeRuleTaskTypes()[ FD ]
Line_39 $$ if (callableResult != null) -->Line_40 $$ queue.add(0, callableResult)[ CD ]
Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)-->Line_40 $$ queue.add(0, callableResult)[ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_7 $$ context.add(dependency)[ FD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_53 $$ formats.add("A Callable instance that returns any of the above types")[ FD ]
Line_2 $$ public void visitDependencies(TaskDependencyResolveContext context) -->Line_3 $$ LinkedList<Object> queue = new LinkedList<Object>(values)[ CD ]
Line_32 $$ Callable callable = (Callable) dependency-->Line_35 $$ callableResult = callable.call()[ FD ]
Line_45 $$ List<String> formats = new ArrayList<String>()-->Line_49 $$ formats.add("A Task instance")[ FD ]
Line_31 $$ if (dependency instanceof Callable) -->Line_39 $$ if (callableResult != null) [ CD ]
