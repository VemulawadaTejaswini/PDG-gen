Line_25 $$ if (resourceBundle == null) -->Line_26 $$ return false[ CD ]
Line_23 $$ if (value == null) -->Line_25 $$ if (resourceBundle == null) [ CD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_6 $$ final Object resourceBundleName = annotationAttributeValues.get(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)[ CD ]
Line_23 $$ if (value == null) -->Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())[ CD ]
Line_23 $$ if (value == null) -->Line_24 $$ final ResourceBundle resourceBundle = resolveResourceBundleByKey(key, project)[ CD ]
Line_33 $$ value = bundleName-->Line_36 $$ String bundleName = value.toString()[ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_11 $$ final PsiConstantEvaluationHelper constantEvaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()[ FD ]
Line_30 $$ if (bundleName == null) -->Line_31 $$ return false[ CD ]
Line_10 $$ PsiExpression expr = (PsiExpression) resourceBundleName-->Line_14 $$ if (expr instanceof PsiReferenceExpression) [ FD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_33 $$ value = bundleName[ FD ]
Line_24 $$ final ResourceBundle resourceBundle = resolveResourceBundleByKey(key, project)-->Line_28 $$ final PropertiesFile defaultPropertiesFile = resourceBundle.getDefaultPropertiesFile()[ FD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_7 $$ if (!(resourceBundleName instanceof PsiExpression)) [ CD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_36 $$ String bundleName = value.toString()[ FD ]
Line_23 $$ if (value == null) -->Line_30 $$ if (bundleName == null) [ CD ]
Line_23 $$ if (value == null) -->Line_33 $$ value = bundleName[ CD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_36 $$ String bundleName = value.toString()[ CD ]
Line_23 $$ if (value == null) -->Line_28 $$ final PropertiesFile defaultPropertiesFile = resourceBundle.getDefaultPropertiesFile()[ CD ]
Line_18 $$ if (value == null) -->Line_19 $$ return false[ CD ]
Line_3 $$ final HashMap<String, Object> annotationAttributeValues = new HashMap<String, Object>()-->Line_6 $$ final Object resourceBundleName = annotationAttributeValues.get(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER)[ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) [ FD ]
Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())-->Line_33 $$ value = bundleName[ FD ]
Line_3 $$ final HashMap<String, Object> annotationAttributeValues = new HashMap<String, Object>()-->Line_4 $$ annotationAttributeValues.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null)[ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_38 $$ return isPropertyRef(expression, key, bundleName)[ FD ]
Line_11 $$ final PsiConstantEvaluationHelper constantEvaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()-->Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)[ FD ]
Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())-->Line_30 $$ if (bundleName == null) [ FD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_13 $$ if (value == null) [ CD ]
Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())-->Line_36 $$ String bundleName = value.toString()[ FD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_11 $$ final PsiConstantEvaluationHelper constantEvaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()[ CD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_3 $$ final HashMap<String, Object> annotationAttributeValues = new HashMap<String, Object>()[ CD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())[ FD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_18 $$ if (value == null) [ FD ]
Line_24 $$ final ResourceBundle resourceBundle = resolveResourceBundleByKey(key, project)-->Line_25 $$ if (resourceBundle == null) [ FD ]
Line_13 $$ if (value == null) -->Line_14 $$ if (expr instanceof PsiReferenceExpression) [ CD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_38 $$ return isPropertyRef(expression, key, bundleName)[ CD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_10 $$ PsiExpression expr = (PsiExpression) resourceBundleName[ CD ]
Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())-->Line_23 $$ if (value == null) [ FD ]
Line_3 $$ final HashMap<String, Object> annotationAttributeValues = new HashMap<String, Object>()-->Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) [ FD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_13 $$ if (value == null) [ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_24 $$ final ResourceBundle resourceBundle = resolveResourceBundleByKey(key, project)[ FD ]
Line_14 $$ if (expr instanceof PsiReferenceExpression) -->Line_15 $$ final PsiElement resolve = ((PsiReferenceExpression) expr).resolve()[ CD ]
Line_11 $$ final PsiConstantEvaluationHelper constantEvaluationHelper = JavaPsiFacade.getInstance(project).getConstantEvaluationHelper()-->Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())[ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_4 $$ annotationAttributeValues.put(AnnotationUtil.PROPERTY_KEY_RESOURCE_BUNDLE_PARAMETER, null)[ CD ]
Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())-->Line_37 $$ outResourceBundle.set(bundleName)[ FD ]
Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())-->Line_38 $$ return isPropertyRef(expression, key, bundleName)[ FD ]
Line_13 $$ if (value == null) -->Line_23 $$ if (value == null) [ CD ]
Line_10 $$ PsiExpression expr = (PsiExpression) resourceBundleName-->Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)[ FD ]
Line_16 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) -->Line_18 $$ if (value == null) [ CD ]
Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())-->Line_18 $$ if (value == null) [ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_40 $$ return true[ CD ]
Line_28 $$ final PropertiesFile defaultPropertiesFile = resourceBundle.getDefaultPropertiesFile()-->Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())[ FD ]
Line_29 $$ final String bundleName = BundleNameEvaluator.DEFAULT.evaluateBundleName(defaultPropertiesFile.getContainingFile())-->Line_33 $$ value = bundleName[ FD ]
Line_7 $$ if (!(resourceBundleName instanceof PsiExpression)) -->Line_8 $$ return false[ CD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_37 $$ outResourceBundle.set(bundleName)[ CD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_37 $$ outResourceBundle.set(bundleName)[ FD ]
Line_2 $$ static boolean isValidPropertyReference(@NotNull Project project, @NotNull PsiExpression expression, @NotNull String key, @NotNull Ref<String> outResourceBundle) -->Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) [ CD ]
Line_14 $$ if (expr instanceof PsiReferenceExpression) -->Line_16 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) [ CD ]
Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)-->Line_23 $$ if (value == null) [ FD ]
Line_5 $$ if (mustBePropertyKey(expression, annotationAttributeValues)) -->Line_12 $$ Object value = constantEvaluationHelper.computeConstantExpression(expr)[ CD ]
Line_16 $$ if (resolve instanceof PsiField && ((PsiField) resolve).hasModifierProperty(PsiModifier.FINAL)) -->Line_17 $$ value = constantEvaluationHelper.computeConstantExpression(((PsiField) resolve).getInitializer())[ CD ]
