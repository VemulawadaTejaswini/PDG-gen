Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_3 $$ if (this.listeners.putIfAbsent(service, listener) != null) [ CD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_13 $$ Set<Node> nodes = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK).get(service)[ FD ]
Line_15 $$ Cache<T, Set<Node>> cache = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES)-->Line_17 $$ cache.remove(service)[ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_7 $$ this.register(this.group.getLocalNode(), service)[ FD ]
Line_13 $$ Set<Node> nodes = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK).get(service)-->Line_16 $$ if (nodes.isEmpty()) [ FD ]
Line_13 $$ Set<Node> nodes = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK).get(service)-->Line_19 $$ cache.replace(service, nodes)[ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_4 $$ throw new IllegalArgumentException(service.toString())[ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_23 $$ CacheServiceProviderRegistry.this.listeners.remove(service)[ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_3 $$ if (this.listeners.putIfAbsent(service, listener) != null) [ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_17 $$ cache.remove(service)[ FD ]
Line_15 $$ Cache<T, Set<Node>> cache = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES)-->Line_19 $$ cache.replace(service, nodes)[ FD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_19 $$ cache.replace(service, nodes)[ FD ]
Line_13 $$ Set<Node> nodes = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.FORCE_WRITE_LOCK).get(service)-->Line_14 $$ if ((nodes != null) && nodes.remove(node)) [ FD ]
Line_9 $$ return new AbstractServiceProviderRegistration<T>(service, this) -->Line_11 $$ Node node = CacheServiceProviderRegistry.this.getGroup().getLocalNode()[ CD ]
Line_16 $$ if (nodes.isEmpty()) -->Line_17 $$ cache.remove(service)[ CD ]
Line_2 $$ public ServiceProviderRegistration<T> register(final T service, Listener listener) -->Line_9 $$ return new AbstractServiceProviderRegistration<T>(service, this) [ CD ]
Line_14 $$ if ((nodes != null) && nodes.remove(node)) -->Line_15 $$ Cache<T, Set<Node>> cache = CacheServiceProviderRegistry.this.cache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES)[ CD ]
Line_14 $$ if ((nodes != null) && nodes.remove(node)) -->Line_16 $$ if (nodes.isEmpty()) [ CD ]
Line_16 $$ if (nodes.isEmpty()) -->Line_19 $$ cache.replace(service, nodes)[ CD ]
Line_11 $$ Node node = CacheServiceProviderRegistry.this.getGroup().getLocalNode()-->Line_14 $$ if ((nodes != null) && nodes.remove(node)) [ FD ]
