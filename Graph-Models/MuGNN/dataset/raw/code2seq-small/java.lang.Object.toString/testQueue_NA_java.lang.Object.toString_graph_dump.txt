Line_22 $$ Queue secondSubQueue = iterator.next()-->Line_23 $$ assertTrue(secondSubQueue.getName().equals("second"))[ FD ]
Line_12 $$ f = writeFile()-->Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)[ FD ]
Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_19 $$ Queue firstSubQueue = iterator.next()[ FD ]
Line_29 $$ Set<String> template = new HashSet<String>()-->Line_32 $$ assertEquals(manager.getLeafQueueNames(), template)[ FD ]
Line_47 $$ iterator = root.getChildren().iterator()-->Line_49 $$ Queue secondSubQueue1 = iterator.next()[ FD ]
Line_19 $$ Queue firstSubQueue = iterator.next()-->Line_59 $$ assertEquals(firstSubQueue.getJobQueueInfo().getSchedulingInfo(), "queueInfo")[ FD ]
Line_68 $$ for (Queue queue : root.getChildren()) -->Line_69 $$ rootJobQueueInfos.add(queue.getJobQueueInfo().getQueueName())[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_64 $$ for (JobQueueInfo jobInfo : manager.getJobQueueInfos()) [ FD ]
Line_79 $$ String result = writer.toString()-->Line_80 $$ assertTrue(result.indexOf("\"name\":\"first\",\"state\":\"running\",\"acl_submit_job\":\"user1,user2 group1,group2\",\"acl_administer_jobs\":\"user3,user4 group3,group4\",\"properties\":[],\"children\":[]") > 0)[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_43 $$ QueueAclsInfo[] qai = manager.getQueueAcls(mockUGI)[ FD ]
Line_48 $$ Queue firstSubQueue1 = iterator.next()-->Line_54 $$ assertEquals(firstSubQueue1.getSchedulingInfo(), "queueInfo")[ FD ]
Line_19 $$ Queue firstSubQueue = iterator.next()-->Line_58 $$ assertEquals(firstSubQueue.getJobQueueInfo().getQueueState(), "running")[ FD ]
Line_67 $$ Set<String> rootJobQueueInfos = new HashSet<String>()-->Line_69 $$ rootJobQueueInfos.add(queue.getJobQueueInfo().getQueueName())[ FD ]
Line_79 $$ String result = writer.toString()-->Line_84 $$ assertEquals("[ FD ]
Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_22 $$ Queue secondSubQueue = iterator.next()[ FD ]
Line_29 $$ Set<String> template = new HashSet<String>()-->Line_30 $$ template.add("first")[ FD ]
Line_76 $$ Configuration conf = getConfiguration()-->Line_78 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_16 $$ Queue root = manager.getRoot()[ FD ]
Line_67 $$ Set<String> rootJobQueueInfos = new HashSet<String>()-->Line_71 $$ assertEquals(queueJobQueueInfos, rootJobQueueInfos)[ FD ]
Line_12 $$ f = writeFile()-->Line_78 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_10 $$ File f = null-->Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_15 $$ manager.setSchedulerInfo("second", "queueInfoqueueInfo")[ FD ]
Line_16 $$ Queue root = manager.getRoot()-->Line_68 $$ for (Queue queue : root.getChildren()) [ FD ]
Line_76 $$ Configuration conf = getConfiguration()-->Line_77 $$ conf.unset(DeprecatedQueueConfigurationParser.MAPRED_QUEUE_NAMES_KEY)[ FD ]
Line_16 $$ Queue root = manager.getRoot()-->Line_47 $$ iterator = root.getChildren().iterator()[ FD ]
Line_81 $$ writer = new StringWriter()-->Line_83 $$ result = writer.toString()[ FD ]
Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_48 $$ Queue firstSubQueue1 = iterator.next()[ FD ]
Line_10 $$ File f = null-->Line_89 $$ if (f != null) [ FD ]
Line_64 $$ for (JobQueueInfo jobInfo : manager.getJobQueueInfos()) -->Line_65 $$ queueJobQueueInfos.add(jobInfo.getQueueName())[ FD ]
Line_10 $$ File f = null-->Line_78 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_81 $$ writer = new StringWriter()-->Line_82 $$ QueueManager.dumpConfiguration(writer, conf)[ FD ]
Line_16 $$ Queue root = manager.getRoot()-->Line_17 $$ assertTrue(root.getChildren().size() == 2)[ FD ]
Line_36 $$ String[] groups = -->Line_37 $$ when(mockUGI.getGroupNames()).thenReturn(groups)[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_32 $$ assertEquals(manager.getLeafQueueNames(), template)[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_38 $$ assertTrue(manager.hasAccess("first", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_89 $$ if (f != null) -->Line_90 $$ f.delete()[ CD ]
Line_63 $$ Set<String> queueJobQueueInfos = new HashSet<String>()-->Line_71 $$ assertEquals(queueJobQueueInfos, rootJobQueueInfos)[ FD ]
Line_83 $$ result = writer.toString()-->Line_84 $$ assertEquals("[ FD ]
Line_10 $$ File f = null-->Line_90 $$ f.delete()[ FD ]
Line_22 $$ Queue secondSubQueue = iterator.next()-->Line_28 $$ assertEquals(secondSubQueue.getState().getStateName(), "stopped")[ FD ]
Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_47 $$ iterator = root.getChildren().iterator()[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_42 $$ assertTrue(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
Line_12 $$ f = writeFile()-->Line_89 $$ if (f != null) [ FD ]
Line_22 $$ Queue secondSubQueue = iterator.next()-->Line_25 $$ assertEquals(secondSubQueue.getProperties().getProperty("key1"), "value1")[ FD ]
Line_48 $$ Queue firstSubQueue1 = iterator.next()-->Line_52 $$ assertEquals(firstSubQueue1.getState().getStateName(), "running")[ FD ]
Line_79 $$ String result = writer.toString()-->Line_83 $$ result = writer.toString()[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_39 $$ assertFalse(manager.hasAccess("second", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_47 $$ iterator = root.getChildren().iterator()-->Line_48 $$ Queue firstSubQueue1 = iterator.next()[ FD ]
Line_12 $$ f = writeFile()-->Line_90 $$ f.delete()[ FD ]
Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_49 $$ Queue secondSubQueue1 = iterator.next()[ FD ]
Line_19 $$ Queue firstSubQueue = iterator.next()-->Line_20 $$ assertTrue(firstSubQueue.getName().equals("first"))[ FD ]
Line_49 $$ Queue secondSubQueue1 = iterator.next()-->Line_55 $$ assertEquals(secondSubQueue1.getSchedulingInfo(), "queueInfoqueueInfo")[ FD ]
Line_29 $$ Set<String> template = new HashSet<String>()-->Line_31 $$ template.add("second")[ FD ]
Line_63 $$ Set<String> queueJobQueueInfos = new HashSet<String>()-->Line_65 $$ queueJobQueueInfos.add(jobInfo.getQueueName())[ FD ]
Line_22 $$ Queue secondSubQueue = iterator.next()-->Line_60 $$ assertEquals(secondSubQueue.getJobQueueInfo().getChildren().size(), 0)[ FD ]
Line_49 $$ Queue secondSubQueue1 = iterator.next()-->Line_53 $$ assertEquals(secondSubQueue1.getState().getStateName(), "stopped")[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_14 $$ manager.setSchedulerInfo("first", "queueInfo")[ FD ]
Line_22 $$ Queue secondSubQueue = iterator.next()-->Line_24 $$ assertEquals(secondSubQueue.getProperties().getProperty("key"), "value")[ FD ]
Line_19 $$ Queue firstSubQueue = iterator.next()-->Line_21 $$ assertEquals(firstSubQueue.getAcls().get("mapred.queue.first.acl-submit-job").toString(), "Users [user1, user2] and members of the groups [group1, group2] are allowed")[ FD ]
Line_76 $$ Configuration conf = getConfiguration()-->Line_82 $$ QueueManager.dumpConfiguration(writer, conf)[ FD ]
Line_16 $$ Queue root = manager.getRoot()-->Line_18 $$ Iterator<Queue> iterator = root.getChildren().iterator()[ FD ]
Line_10 $$ File f = null-->Line_12 $$ f = writeFile()[ FD ]
Line_13 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_40 $$ assertFalse(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
