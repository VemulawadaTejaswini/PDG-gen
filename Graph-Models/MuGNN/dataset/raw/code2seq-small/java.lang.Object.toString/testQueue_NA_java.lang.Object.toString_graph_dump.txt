Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_19 $$ assertEquals(firstSubQueue.getState().getStateName(), "running")[ FD ]
Line_3 $$ File f = null-->Line_74 $$ f.delete()[ FD ]
Line_66 $$ writer = new StringWriter()-->Line_68 $$ result = writer.toString()[ FD ]
Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_15 $$ Queue secondSubQueue = iterator.next()[ FD ]
Line_39 $$ Queue secondSubQueue1 = iterator.next()-->Line_44 $$ assertEquals(secondSubQueue1.getSchedulingInfo(), "queueInfoqueueInfo")[ FD ]
Line_9 $$ Queue root = manager.getRoot()-->Line_10 $$ assertTrue(root.getChildren().size() == 2)[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_26 $$ when(mockUGI.getShortUserName()).thenReturn("user1")[ FD ]
Line_5 $$ f = writeFile()-->Line_63 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_38 $$ Queue firstSubQueue1 = iterator.next()-->Line_43 $$ assertEquals(firstSubQueue1.getSchedulingInfo(), "queueInfo")[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_40 $$ assertTrue(firstSubQueue.equals(firstSubQueue1))[ FD ]
Line_38 $$ Queue firstSubQueue1 = iterator.next()-->Line_41 $$ assertEquals(firstSubQueue1.getState().getStateName(), "running")[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_7 $$ manager.setSchedulerInfo("first", "queueInfo")[ FD ]
Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_37 $$ iterator = root.getChildren().iterator()[ FD ]
Line_38 $$ Queue firstSubQueue1 = iterator.next()-->Line_40 $$ assertTrue(firstSubQueue.equals(firstSubQueue1))[ FD ]
Line_60 $$ Writer writer = new StringWriter()-->Line_67 $$ QueueManager.dumpConfiguration(writer, conf)[ FD ]
Line_55 $$ for (Queue queue : root.getChildren()) -->Line_56 $$ rootJobQueueInfos.add(queue.getJobQueueInfo().getQueueName())[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_46 $$ assertEquals(firstSubQueue.getJobQueueInfo().getQueueState(), "running")[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_31 $$ assertFalse(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_39 $$ Queue secondSubQueue1 = iterator.next()[ FD ]
Line_60 $$ Writer writer = new StringWriter()-->Line_66 $$ writer = new StringWriter()[ FD ]
Line_61 $$ Configuration conf = getConfiguration()-->Line_63 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_64 $$ String result = writer.toString()-->Line_65 $$ assertTrue(result.indexOf("\"name\":\"first\",\"state\":\"running\",\"acl_submit_job\":\"user1,user2 group1,group2\",\"acl_administer_jobs\":\"user3,user4 group3,group4\",\"properties\":[],\"children\":[]") > 0)[ FD ]
Line_66 $$ writer = new StringWriter()-->Line_67 $$ QueueManager.dumpConfiguration(writer, conf)[ FD ]
Line_61 $$ Configuration conf = getConfiguration()-->Line_62 $$ conf.unset(DeprecatedQueueConfigurationParser.MAPRED_QUEUE_NAMES_KEY)[ FD ]
Line_21 $$ Set<String> template = new HashSet<String>()-->Line_23 $$ template.add("second")[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_36 $$ manager.refreshQueues(getConfiguration(), null)[ FD ]
Line_70 $$ QueueAclsInfo qi = new QueueAclsInfo()-->Line_71 $$ assertNull(qi.getQueueName())[ FD ]
Line_39 $$ Queue secondSubQueue1 = iterator.next()-->Line_42 $$ assertEquals(secondSubQueue1.getState().getStateName(), "stopped")[ FD ]
Line_50 $$ Set<String> queueJobQueueInfos = new HashSet<String>()-->Line_58 $$ assertEquals(queueJobQueueInfos, rootJobQueueInfos)[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_51 $$ for (JobQueueInfo jobInfo : manager.getJobQueueInfos()) [ FD ]
Line_9 $$ Queue root = manager.getRoot()-->Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()[ FD ]
Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_12 $$ Queue firstSubQueue = iterator.next()[ FD ]
Line_64 $$ String result = writer.toString()-->Line_69 $$ assertEquals("[ FD ]
Line_3 $$ File f = null-->Line_73 $$ if (f != null) [ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_33 $$ assertTrue(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_33 $$ assertTrue(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_47 $$ assertEquals(firstSubQueue.getJobQueueInfo().getSchedulingInfo(), "queueInfo")[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_13 $$ assertTrue(firstSubQueue.getName().equals("first"))[ FD ]
Line_15 $$ Queue secondSubQueue = iterator.next()-->Line_48 $$ assertEquals(secondSubQueue.getJobQueueInfo().getChildren().size(), 0)[ FD ]
Line_15 $$ Queue secondSubQueue = iterator.next()-->Line_16 $$ assertTrue(secondSubQueue.getName().equals("second"))[ FD ]
Line_27 $$ String[] groups = -->Line_28 $$ when(mockUGI.getGroupNames()).thenReturn(groups)[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_49 $$ assertEquals(manager.getSchedulerInfo("first"), "queueInfo")[ FD ]
Line_54 $$ Set<String> rootJobQueueInfos = new HashSet<String>()-->Line_56 $$ rootJobQueueInfos.add(queue.getJobQueueInfo().getQueueName())[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_8 $$ manager.setSchedulerInfo("second", "queueInfoqueueInfo")[ FD ]
Line_21 $$ Set<String> template = new HashSet<String>()-->Line_24 $$ assertEquals(manager.getLeafQueueNames(), template)[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_30 $$ assertFalse(manager.hasAccess("second", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_9 $$ Queue root = manager.getRoot()[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_34 $$ QueueAclsInfo[] qai = manager.getQueueAcls(mockUGI)[ FD ]
Line_60 $$ Writer writer = new StringWriter()-->Line_68 $$ result = writer.toString()[ FD ]
Line_60 $$ Writer writer = new StringWriter()-->Line_64 $$ String result = writer.toString()[ FD ]
Line_15 $$ Queue secondSubQueue = iterator.next()-->Line_18 $$ assertEquals(secondSubQueue.getProperties().getProperty("key1"), "value1")[ FD ]
Line_3 $$ File f = null-->Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)[ FD ]
Line_3 $$ File f = null-->Line_5 $$ f = writeFile()[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_29 $$ assertTrue(manager.hasAccess("first", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_31 $$ assertFalse(manager.hasAccess("first", QueueACL.ADMINISTER_JOBS, mockUGI))[ FD ]
Line_61 $$ Configuration conf = getConfiguration()-->Line_67 $$ QueueManager.dumpConfiguration(writer, conf)[ FD ]
Line_5 $$ f = writeFile()-->Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)[ FD ]
Line_64 $$ String result = writer.toString()-->Line_68 $$ result = writer.toString()[ FD ]
Line_73 $$ if (f != null) -->Line_74 $$ f.delete()[ CD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_24 $$ assertEquals(manager.getLeafQueueNames(), template)[ FD ]
Line_68 $$ result = writer.toString()-->Line_69 $$ assertEquals("[ FD ]
Line_21 $$ Set<String> template = new HashSet<String>()-->Line_22 $$ template.add("first")[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_34 $$ QueueAclsInfo[] qai = manager.getQueueAcls(mockUGI)[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_45 $$ assertEquals(firstSubQueue.getJobQueueInfo().getQueueName(), "first")[ FD ]
Line_5 $$ f = writeFile()-->Line_73 $$ if (f != null) [ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_30 $$ assertFalse(manager.hasAccess("second", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_54 $$ Set<String> rootJobQueueInfos = new HashSet<String>()-->Line_58 $$ assertEquals(queueJobQueueInfos, rootJobQueueInfos)[ FD ]
Line_6 $$ QueueManager manager = new QueueManager(f.getCanonicalPath(), true)-->Line_59 $$ assertEquals(manager.getJobQueueInfoMapping().get("first").getQueueName(), "first")[ FD ]
Line_60 $$ Writer writer = new StringWriter()-->Line_63 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_15 $$ Queue secondSubQueue = iterator.next()-->Line_20 $$ assertEquals(secondSubQueue.getState().getStateName(), "stopped")[ FD ]
Line_12 $$ Queue firstSubQueue = iterator.next()-->Line_14 $$ assertEquals(firstSubQueue.getAcls().get("mapred.queue.first.acl-submit-job").toString(), "Users [user1, user2] and members of the groups [group1, group2] are allowed")[ FD ]
Line_51 $$ for (JobQueueInfo jobInfo : manager.getJobQueueInfos()) -->Line_52 $$ queueJobQueueInfos.add(jobInfo.getQueueName())[ FD ]
Line_15 $$ Queue secondSubQueue = iterator.next()-->Line_17 $$ assertEquals(secondSubQueue.getProperties().getProperty("key"), "value")[ FD ]
Line_3 $$ File f = null-->Line_63 $$ QueueManager.dumpConfiguration(writer, f.getAbsolutePath(), conf)[ FD ]
Line_50 $$ Set<String> queueJobQueueInfos = new HashSet<String>()-->Line_52 $$ queueJobQueueInfos.add(jobInfo.getQueueName())[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_29 $$ assertTrue(manager.hasAccess("first", QueueACL.SUBMIT_JOB, mockUGI))[ FD ]
Line_5 $$ f = writeFile()-->Line_74 $$ f.delete()[ FD ]
Line_9 $$ Queue root = manager.getRoot()-->Line_55 $$ for (Queue queue : root.getChildren()) [ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_28 $$ when(mockUGI.getGroupNames()).thenReturn(groups)[ FD ]
Line_11 $$ Iterator<Queue> iterator = root.getChildren().iterator()-->Line_38 $$ Queue firstSubQueue1 = iterator.next()[ FD ]
Line_9 $$ Queue root = manager.getRoot()-->Line_37 $$ iterator = root.getChildren().iterator()[ FD ]
Line_2 $$ public void testQueue() throws IOException -->Line_3 $$ File f = null[ CD ]
Line_37 $$ iterator = root.getChildren().iterator()-->Line_39 $$ Queue secondSubQueue1 = iterator.next()[ FD ]
Line_25 $$ UserGroupInformation mockUGI = mock(UserGroupInformation.class)-->Line_32 $$ when(mockUGI.getShortUserName()).thenReturn("user3")[ FD ]
Line_37 $$ iterator = root.getChildren().iterator()-->Line_38 $$ Queue firstSubQueue1 = iterator.next()[ FD ]
