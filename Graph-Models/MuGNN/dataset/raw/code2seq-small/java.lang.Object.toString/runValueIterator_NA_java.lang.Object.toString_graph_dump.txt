Line_14 $$ while (valItr.more()) -->Line_19 $$ while (valItr.hasNext()) [ CD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_25 $$ assertEquals(keyString, valItr.getKey().toString())[ FD ]
Line_20 $$ String valueString = valItr.next().toString()-->Line_21 $$ assertEquals(vals[i].value, valueString)[ FD ]
Line_4 $$ FileSystem rfs = ((LocalFileSystem) localFs).getRaw()-->Line_6 $$ IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs.create(path), Text.class, Text.class, codec, null)[ FD ]
Line_14 $$ while (valItr.more()) -->Line_15 $$ Object key = valItr.getKey()[ CD ]
Line_14 $$ while (valItr.more()) -->Line_16 $$ String keyString = key.toString()[ CD ]
Line_14 $$ while (valItr.more()) -->Line_25 $$ assertEquals(keyString, valItr.getKey().toString())[ CD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_28 $$ assertEquals(vals.length, i)[ CD ]
Line_6 $$ IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs.create(path), Text.class, Text.class, codec, null)-->Line_8 $$ writer.append(new Text(p.key), new Text(p.value))[ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_13 $$ int i = 0[ CD ]
Line_14 $$ while (valItr.more()) -->Line_17 $$ assertEquals(vals[i].key, keyString)[ CD ]
Line_19 $$ while (valItr.hasNext()) -->Line_20 $$ String valueString = valItr.next().toString()[ CD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_3 $$ FileSystem localFs = FileSystem.getLocal(conf)[ CD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_3 $$ FileSystem localFs = FileSystem.getLocal(conf)[ FD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_19 $$ while (valItr.hasNext()) [ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_11 $$ RawKeyValueIterator rawItr = Merger.merge(conf, rfs, Text.class, Text.class, codec, new Path[] [ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_14 $$ while (valItr.more()) [ CD ]
Line_14 $$ while (valItr.more()) -->Line_18 $$ assertTrue(valItr.hasNext())[ CD ]
Line_13 $$ int i = 0-->Line_28 $$ assertEquals(vals.length, i)[ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_10 $$ writer.close()[ CD ]
Line_19 $$ while (valItr.hasNext()) -->Line_21 $$ assertEquals(vals[i].value, valueString)[ CD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_20 $$ String valueString = valItr.next().toString()[ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_5 $$ Path path = new Path(tmpDir, "data.in")[ CD ]
Line_19 $$ while (valItr.hasNext()) -->Line_22 $$ assertEquals(vals[i].key, valItr.getKey().toString())[ CD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_6 $$ IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs.create(path), Text.class, Text.class, codec, null)[ CD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_26 $$ valItr.nextKey()[ FD ]
Line_23 $$ i += 1-->Line_28 $$ assertEquals(vals.length, i)[ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_29 $$ assertEquals(1.0f, rawItr.getProgress().get())[ CD ]
Line_6 $$ IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs.create(path), Text.class, Text.class, codec, null)-->Line_10 $$ writer.close()[ FD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_18 $$ assertTrue(valItr.hasNext())[ FD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_14 $$ while (valItr.more()) [ FD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_22 $$ assertEquals(vals[i].key, valItr.getKey().toString())[ FD ]
Line_13 $$ int i = 0-->Line_23 $$ i += 1[ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())[ CD ]
Line_4 $$ FileSystem rfs = ((LocalFileSystem) localFs).getRaw()-->Line_11 $$ RawKeyValueIterator rawItr = Merger.merge(conf, rfs, Text.class, Text.class, codec, new Path[] [ FD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_4 $$ FileSystem rfs = ((LocalFileSystem) localFs).getRaw()[ CD ]
Line_16 $$ String keyString = key.toString()-->Line_17 $$ assertEquals(vals[i].key, keyString)[ FD ]
Line_16 $$ String keyString = key.toString()-->Line_25 $$ assertEquals(keyString, valItr.getKey().toString())[ FD ]
Line_5 $$ Path path = new Path(tmpDir, "data.in")-->Line_6 $$ IFile.Writer<Text, Text> writer = new IFile.Writer<Text, Text>(conf, rfs.create(path), Text.class, Text.class, codec, null)[ FD ]
Line_19 $$ while (valItr.hasNext()) -->Line_23 $$ i += 1[ CD ]
Line_2 $$ public void runValueIterator(Path tmpDir, Pair[] vals, Configuration conf, CompressionCodec codec) throws IOException -->Line_11 $$ RawKeyValueIterator rawItr = Merger.merge(conf, rfs, Text.class, Text.class, codec, new Path[] [ CD ]
Line_15 $$ Object key = valItr.getKey()-->Line_16 $$ String keyString = key.toString()[ FD ]
Line_14 $$ while (valItr.more()) -->Line_26 $$ valItr.nextKey()[ CD ]
Line_12 $$ ReduceTask.ValuesIterator valItr = new ReduceTask.ValuesIterator<Text, Text>(rawItr, WritableComparator.get(Text.class), Text.class, Text.class, conf, new NullProgress())-->Line_15 $$ Object key = valItr.getKey()[ FD ]
Line_11 $$ RawKeyValueIterator rawItr = Merger.merge(conf, rfs, Text.class, Text.class, codec, new Path[] -->Line_29 $$ assertEquals(1.0f, rawItr.getProgress().get())[ FD ]
