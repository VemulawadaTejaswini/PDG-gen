Line_5 $$ String field = getField.getName()-->Line_11 $$ index.addField(field, text.toString(), analyzer)[ FD ]
Line_2 $$ private Fields generateTermVectors(IndexShard indexShard, Collection<GetField> getFields, boolean withOffsets, @Nullable Map<String, String> perFieldAnalyzer, Set<String> fields) throws IOException -->Line_9 $$ Analyzer analyzer = getAnalyzerAtField(indexShard, field, perFieldAnalyzer)[ FD ]
Line_3 $$ MemoryIndex index = new MemoryIndex(withOffsets)-->Line_11 $$ index.addField(field, text.toString(), analyzer)[ FD ]
Line_5 $$ String field = getField.getName()-->Line_9 $$ Analyzer analyzer = getAnalyzerAtField(indexShard, field, perFieldAnalyzer)[ FD ]
Line_3 $$ MemoryIndex index = new MemoryIndex(withOffsets)-->Line_14 $$ return MultiFields.getFields(index.createSearcher().getIndexReader())[ FD ]
Line_2 $$ private Fields generateTermVectors(IndexShard indexShard, Collection<GetField> getFields, boolean withOffsets, @Nullable Map<String, String> perFieldAnalyzer, Set<String> fields) throws IOException -->Line_6 $$ if (fields.contains(field) == false) [ FD ]
Line_9 $$ Analyzer analyzer = getAnalyzerAtField(indexShard, field, perFieldAnalyzer)-->Line_11 $$ index.addField(field, text.toString(), analyzer)[ FD ]
Line_4 $$ for (GetField getField : getFields) -->Line_5 $$ String field = getField.getName()[ FD ]
Line_10 $$ for (Object text : getField.getValues()) -->Line_11 $$ index.addField(field, text.toString(), analyzer)[ FD ]
Line_5 $$ String field = getField.getName()-->Line_6 $$ if (fields.contains(field) == false) [ FD ]
Line_2 $$ private Fields generateTermVectors(IndexShard indexShard, Collection<GetField> getFields, boolean withOffsets, @Nullable Map<String, String> perFieldAnalyzer, Set<String> fields) throws IOException -->Line_14 $$ return MultiFields.getFields(index.createSearcher().getIndexReader())[ CD ]
Line_4 $$ for (GetField getField : getFields) -->Line_10 $$ for (Object text : getField.getValues()) [ FD ]
Line_2 $$ private Fields generateTermVectors(IndexShard indexShard, Collection<GetField> getFields, boolean withOffsets, @Nullable Map<String, String> perFieldAnalyzer, Set<String> fields) throws IOException -->Line_3 $$ MemoryIndex index = new MemoryIndex(withOffsets)[ CD ]
