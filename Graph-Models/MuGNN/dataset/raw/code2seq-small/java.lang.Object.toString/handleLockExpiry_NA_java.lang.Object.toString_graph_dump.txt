Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_7 $$ region().put(key, newLock)[ FD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_4 $$ final long ts = region().nextTimestamp() + region().getTimeout()[ CD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_6 $$ newLock.unlock(ts)[ CD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_3 $$ LOG.softLockedCacheExpired(region().getName(), key, lock == null ? "(null)" : lock.toString())[ CD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_3 $$ LOG.softLockedCacheExpired(region().getName(), key, lock == null ? "(null)" : lock.toString())[ FD ]
Line_4 $$ final long ts = region().nextTimestamp() + region().getTimeout()-->Line_6 $$ newLock.unlock(ts)[ FD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_7 $$ region().put(key, newLock)[ CD ]
Line_5 $$ final Lock newLock = new Lock(ts, uuid, nextLockId.getAndIncrement(), null)-->Line_7 $$ region().put(key, newLock)[ FD ]
Line_5 $$ final Lock newLock = new Lock(ts, uuid, nextLockId.getAndIncrement(), null)-->Line_6 $$ newLock.unlock(ts)[ FD ]
Line_2 $$ protected void handleLockExpiry(Object key, Lockable lock) -->Line_5 $$ final Lock newLock = new Lock(ts, uuid, nextLockId.getAndIncrement(), null)[ CD ]
