Line_18 $$ UserType udt = (UserType) value-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))[ FD ]
Line_22 $$ size += 2-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_10 $$ return codec.oneSerializedSize(DataType.fromType((AbstractType) value, version), version)[ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_19 $$ int size = 0-->Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)[ FD ]
Line_14 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(0), version), version)-->Line_15 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(1), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_14 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(0), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_4 $$ return CBUtil.sizeOfString(value.toString())[ FD ]
Line_19 $$ int size = 0-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))-->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)-->Line_30 $$ size = 2[ FD ]
Line_22 $$ size += 2-->Line_30 $$ size = 2[ FD ]
Line_30 $$ size = 2-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_22 $$ size += 2-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_19 $$ int size = 0-->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))-->Line_22 $$ size += 2[ FD ]
Line_18 $$ UserType udt = (UserType) value-->Line_23 $$ for (int i = 0; i < udt.size(); i++) [ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ CD ]
Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))-->Line_30 $$ size = 2[ FD ]
Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))-->Line_30 $$ size = 2[ FD ]
Line_12 $$ List<AbstractType> l = (List<AbstractType>) value-->Line_15 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(1), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_15 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(1), version), version)[ FD ]
Line_19 $$ int size = 0-->Line_30 $$ size = 2[ FD ]
Line_19 $$ int size = 0-->Line_22 $$ size += 2[ FD ]
Line_3 $$ if (version < protocolVersion)-->Line_4 $$ return CBUtil.sizeOfString(value.toString())[ CD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_18 $$ UserType udt = (UserType) value-->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_19 $$ int size = 0-->Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))[ FD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_19 $$ int size = 0-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_3 $$ if (version < protocolVersion)[ CD ]
Line_13 $$ int s = 0-->Line_14 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(0), version), version)[ FD ]
Line_21 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.name))-->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ CD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_30 $$ size = 2[ FD ]
Line_29 $$ TupleType tt = (TupleType) value-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_3 $$ if (version < protocolVersion)[ FD ]
Line_13 $$ int s = 0-->Line_15 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(1), version), version)[ FD ]
Line_22 $$ size += 2-->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_29 $$ TupleType tt = (TupleType) value-->Line_31 $$ for (int i = 0; i < tt.size(); i++) size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_12 $$ List<AbstractType> l = (List<AbstractType>) value-->Line_14 $$ s += codec.oneSerializedSize(DataType.fromType(l.get(0), version), version)[ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_2 $$ public int serializedValueSize(Object value, int version) -->Line_25 $$ size += codec.oneSerializedSize(DataType.fromType(udt.fieldType(i), version), version)[ FD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))[ FD ]
Line_20 $$ size += CBUtil.sizeOfString(udt.keyspace)-->Line_22 $$ size += 2[ FD ]
Line_24 $$ size += CBUtil.sizeOfString(UTF8Type.instance.compose(udt.fieldName(i)))-->Line_31 $$ size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
Line_23 $$ for (int i = 0; i < udt.size(); i++) -->Line_31 $$ for (int i = 0; i < tt.size(); i++) size += codec.oneSerializedSize(DataType.fromType(tt.type(i), version), version)[ FD ]
