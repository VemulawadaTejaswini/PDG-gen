Line_2 $$ public void testAnalyzerChangedIn10RC1() throws IOException -->Line_4 $$ Analyzer standardHtml = PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(Version.V_1_0_0_RC1)[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_18 $$ CharTermAttribute charTermAttribute = ts.addAttribute(CharTermAttribute.class)[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_19 $$ List<String> list = new ArrayList()[ CD ]
Line_19 $$ List<String> list = new ArrayList()-->Line_28 $$ assertThat(list, contains("dude"))[ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_31 $$ version = randomVersion(random())[ CD ]
Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) -->Line_24 $$ assertThat(list.toString(), list.size(), is(4))[ CD ]
Line_6 $$ Version version = Version.CURRENT-->Line_31 $$ version = randomVersion(random())[ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) [ CD ]
Line_31 $$ version = randomVersion(random())-->Line_9 $$ assertThat(pattern, is(PreBuiltAnalyzers.PATTERN.getAnalyzer(version)))[ FD ]
Line_31 $$ version = randomVersion(random())-->Line_12 $$ assertThat(pattern, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
Line_6 $$ Version version = Version.CURRENT-->Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) [ FD ]
Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) -->Line_27 $$ assertThat(list.size(), is(1))[ CD ]
Line_31 $$ version = randomVersion(random())-->Line_13 $$ assertThat(standardHtml, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
Line_31 $$ version = randomVersion(random())-->Line_15 $$ Analyzer analyzer = randomBoolean() ? PreBuiltAnalyzers.PATTERN.getAnalyzer(version) : PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)[ FD ]
Line_2 $$ public void testAnalyzerChangedIn10RC1() throws IOException -->Line_3 $$ Analyzer pattern = PreBuiltAnalyzers.PATTERN.getAnalyzer(Version.V_1_0_0_RC1)[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_20 $$ while (ts.incrementToken()) [ CD ]
Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")-->Line_20 $$ while (ts.incrementToken()) [ FD ]
Line_2 $$ public void testAnalyzerChangedIn10RC1() throws IOException -->Line_7 $$ for (int i = 0; i < n; i++) [ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_17 $$ ts.reset()[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) [ CD ]
Line_5 $$ final int n = scaledRandomIntBetween(10, 100)-->Line_7 $$ for (int i = 0; i < n; i++) [ FD ]
Line_19 $$ List<String> list = new ArrayList()-->Line_21 $$ list.add(charTermAttribute.toString())[ FD ]
Line_2 $$ public void testAnalyzerChangedIn10RC1() throws IOException -->Line_5 $$ final int n = scaledRandomIntBetween(10, 100)[ CD ]
Line_6 $$ Version version = Version.CURRENT-->Line_13 $$ assertThat(standardHtml, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
Line_6 $$ Version version = Version.CURRENT-->Line_15 $$ Analyzer analyzer = randomBoolean() ? PreBuiltAnalyzers.PATTERN.getAnalyzer(version) : PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)[ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_15 $$ Analyzer analyzer = randomBoolean() ? PreBuiltAnalyzers.PATTERN.getAnalyzer(version) : PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)[ CD ]
Line_15 $$ Analyzer analyzer = randomBoolean() ? PreBuiltAnalyzers.PATTERN.getAnalyzer(version) : PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)-->Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")[ FD ]
Line_19 $$ List<String> list = new ArrayList()-->Line_24 $$ assertThat(list.toString(), list.size(), is(4))[ FD ]
Line_18 $$ CharTermAttribute charTermAttribute = ts.addAttribute(CharTermAttribute.class)-->Line_21 $$ list.add(charTermAttribute.toString())[ FD ]
Line_19 $$ List<String> list = new ArrayList()-->Line_27 $$ assertThat(list.size(), is(1))[ FD ]
Line_6 $$ Version version = Version.CURRENT-->Line_10 $$ assertThat(standardHtml, is(PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)))[ FD ]
Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) -->Line_13 $$ assertThat(standardHtml, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ CD ]
Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")-->Line_30 $$ ts.close()[ FD ]
Line_3 $$ Analyzer pattern = PreBuiltAnalyzers.PATTERN.getAnalyzer(Version.V_1_0_0_RC1)-->Line_9 $$ assertThat(pattern, is(PreBuiltAnalyzers.PATTERN.getAnalyzer(version)))[ FD ]
Line_6 $$ Version version = Version.CURRENT-->Line_9 $$ assertThat(pattern, is(PreBuiltAnalyzers.PATTERN.getAnalyzer(version)))[ FD ]
Line_6 $$ Version version = Version.CURRENT-->Line_12 $$ assertThat(pattern, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
Line_20 $$ while (ts.incrementToken()) -->Line_21 $$ list.add(charTermAttribute.toString())[ CD ]
Line_31 $$ version = randomVersion(random())-->Line_10 $$ assertThat(standardHtml, is(PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)))[ FD ]
Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")-->Line_18 $$ CharTermAttribute charTermAttribute = ts.addAttribute(CharTermAttribute.class)[ FD ]
Line_3 $$ Analyzer pattern = PreBuiltAnalyzers.PATTERN.getAnalyzer(Version.V_1_0_0_RC1)-->Line_12 $$ assertThat(pattern, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) -->Line_10 $$ assertThat(standardHtml, is(PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)))[ CD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_30 $$ ts.close()[ CD ]
Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")-->Line_17 $$ ts.reset()[ FD ]
Line_31 $$ version = randomVersion(random())-->Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) [ FD ]
Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) -->Line_28 $$ assertThat(list, contains("dude"))[ CD ]
Line_4 $$ Analyzer standardHtml = PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(Version.V_1_0_0_RC1)-->Line_10 $$ assertThat(standardHtml, is(PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(version)))[ FD ]
Line_7 $$ for (int i = 0; i < n; i++) -->Line_16 $$ TokenStream ts = analyzer.tokenStream("foo", "This is it Dude")[ CD ]
Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) -->Line_12 $$ assertThat(pattern, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ CD ]
Line_2 $$ public void testAnalyzerChangedIn10RC1() throws IOException -->Line_6 $$ Version version = Version.CURRENT[ CD ]
Line_6 $$ Version version = Version.CURRENT-->Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) [ FD ]
Line_31 $$ version = randomVersion(random())-->Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) [ FD ]
Line_8 $$ if (version.equals(Version.V_1_0_0_RC1)) -->Line_9 $$ assertThat(pattern, is(PreBuiltAnalyzers.PATTERN.getAnalyzer(version)))[ CD ]
Line_19 $$ List<String> list = new ArrayList()-->Line_25 $$ assertThat(list, contains("this", "is", "it", "dude"))[ FD ]
Line_23 $$ if (version.onOrAfter(Version.V_1_0_0_RC1)) -->Line_25 $$ assertThat(list, contains("this", "is", "it", "dude"))[ CD ]
Line_4 $$ Analyzer standardHtml = PreBuiltAnalyzers.STANDARD_HTML_STRIP.getAnalyzer(Version.V_1_0_0_RC1)-->Line_13 $$ assertThat(standardHtml, not(is(PreBuiltAnalyzers.DEFAULT.getAnalyzer(version))))[ FD ]
