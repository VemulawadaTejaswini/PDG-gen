Line_18 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_22 $$ String queue = jsonJob.get("job.queue.name").toString()[ CD ]
Line_13 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)-->Line_14 $$ while (i.hasNext()) [ FD ]
Line_19 $$ String user = (String) jsonJob.get("job.user")-->Line_21 $$ user = "default"[ FD ]
Line_21 $$ user = "default"-->Line_20 $$ if (user == null)[ FD ]
Line_33 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_42 $$ containerList.add(new ContainerSimulator(containerResource, lifeTime, hostname, priority, type))[ FD ]
Line_33 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_46 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_47 $$ if (amSim != null) [ FD ]
Line_22 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_25 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_46 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())[ CD ]
Line_47 $$ if (amSim != null) -->Line_49 $$ runner.schedule(amSim)[ CD ]
Line_46 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_52 $$ amMap.put(oldAppId, amSim)[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_33 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()[ CD ]
Line_14 $$ while (i.hasNext()) -->Line_24 $$ boolean isTracked = trackedApps.contains(oldAppId)[ CD ]
Line_22 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_27 $$ queueAppNumMap.put(queue, queueSize)[ FD ]
Line_25 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0-->Line_27 $$ queueAppNumMap.put(queue, queueSize)[ FD ]
Line_18 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())-->Line_50 $$ maxRuntime = Math.max(maxRuntime, jobFinishTime)[ FD ]
Line_47 $$ if (amSim != null) -->Line_52 $$ amMap.put(oldAppId, amSim)[ CD ]
Line_14 $$ while (i.hasNext()) -->Line_27 $$ queueAppNumMap.put(queue, queueSize)[ CD ]
Line_35 $$ Map jsonTask = (Map) o-->Line_40 $$ int priority = Integer.parseInt(jsonTask.get("container.priority").toString())[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_15 $$ Map jsonJob = i.next()[ CD ]
Line_35 $$ Map jsonTask = (Map) o-->Line_41 $$ String type = jsonTask.get("container.type").toString()[ FD ]
Line_15 $$ Map jsonJob = i.next()-->Line_22 $$ String queue = jsonJob.get("job.queue.name").toString()[ FD ]
Line_25 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0-->Line_26 $$ queueSize++[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_47 $$ if (amSim != null) [ CD ]
Line_14 $$ while (i.hasNext()) -->Line_18 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())[ CD ]
Line_35 $$ Map jsonTask = (Map) o-->Line_36 $$ String hostname = jsonTask.get("container.host").toString()[ FD ]
Line_20 $$ if (user == null)-->Line_21 $$ user = "default"[ CD ]
Line_19 $$ String user = (String) jsonJob.get("job.user")-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_23 $$ String oldAppId = jsonJob.get("job.id").toString()[ CD ]
Line_33 $$ List<ContainerSimulator> containerList = new ArrayList<ContainerSimulator>()-->Line_51 $$ numTasks += containerList.size()[ FD ]
Line_13 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)-->Line_15 $$ Map jsonJob = i.next()[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_19 $$ String user = (String) jsonJob.get("job.user")[ CD ]
Line_35 $$ Map jsonTask = (Map) o-->Line_38 $$ long taskFinish = Long.parseLong(jsonTask.get("container.end.ms").toString())[ FD ]
Line_11 $$ Reader input = new FileReader(inputTrace)-->Line_13 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)[ FD ]
Line_15 $$ Map jsonJob = i.next()-->Line_18 $$ long jobFinishTime = Long.parseLong(jsonJob.get("job.end.ms").toString())[ FD ]
Line_15 $$ Map jsonJob = i.next()-->Line_23 $$ String oldAppId = jsonJob.get("job.id").toString()[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_25 $$ int queueSize = queueAppNumMap.containsKey(queue) ? queueAppNumMap.get(queue) : 0[ CD ]
Line_47 $$ if (amSim != null) -->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ CD ]
Line_46 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_15 $$ Map jsonJob = i.next()-->Line_19 $$ String user = (String) jsonJob.get("job.user")[ FD ]
Line_24 $$ boolean isTracked = trackedApps.contains(oldAppId)-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_35 $$ Map jsonTask = (Map) o-->Line_37 $$ long taskStart = Long.parseLong(jsonTask.get("container.start.ms").toString())[ FD ]
Line_9 $$ ObjectMapper mapper = new ObjectMapper()-->Line_13 $$ Iterator<Map> i = mapper.readValues(jsonF.createJsonParser(input), Map.class)[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_26 $$ queueSize++[ CD ]
Line_46 $$ AMSimulator amSim = (AMSimulator) ReflectionUtils.newInstance(amClassMap.get(amType), new Configuration())-->Line_49 $$ runner.schedule(amSim)[ FD ]
Line_47 $$ if (amSim != null) -->Line_50 $$ maxRuntime = Math.max(maxRuntime, jobFinishTime)[ CD ]
Line_11 $$ Reader input = new FileReader(inputTrace)-->Line_56 $$ input.close()[ FD ]
Line_22 $$ String queue = jsonJob.get("job.queue.name").toString()-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_14 $$ while (i.hasNext()) -->Line_30 $$ if (tasks == null || tasks.size() == 0) [ CD ]
Line_23 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_52 $$ amMap.put(oldAppId, amSim)[ FD ]
Line_47 $$ if (amSim != null) -->Line_51 $$ numTasks += containerList.size()[ CD ]
Line_14 $$ while (i.hasNext()) -->Line_20 $$ if (user == null)[ CD ]
Line_23 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_24 $$ boolean isTracked = trackedApps.contains(oldAppId)[ FD ]
Line_21 $$ user = "default"-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
Line_19 $$ String user = (String) jsonJob.get("job.user")-->Line_20 $$ if (user == null)[ FD ]
Line_23 $$ String oldAppId = jsonJob.get("job.id").toString()-->Line_48 $$ amSim.init(AM_ID++, heartbeatInterval, containerList, rm, this, jobStartTime, jobFinishTime, user, queue, isTracked, oldAppId)[ FD ]
