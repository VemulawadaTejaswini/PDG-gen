Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) -->Line_11 $$ String title = "Could not execute hg status command "[ CD ]
Line_4 $$ HgChange previous = null-->Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) [ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_4 $$ HgChange previous = null[ CD ]
Line_33 $$ previous = null-->Line_35 $$ previous = new HgChange(new HgFile(repo, ioFile), status)[ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_5 $$ if (result == null) [ CD ]
Line_33 $$ previous = null-->Line_36 $$ changes.add(previous)[ FD ]
Line_8 $$ List<String> errors = result.getErrorLines()-->Line_16 $$ LOG.warn(errors.toString())[ FD ]
Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) -->Line_13 $$ VcsNotifier.getInstance(myProject).logInfo(title, errors.toString())[ CD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_29 $$ File ioFile = new File(repo.getPath(), line.substring(2))[ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_8 $$ List<String> errors = result.getErrorLines()[ CD ]
Line_4 $$ HgChange previous = null-->Line_35 $$ previous = new HgChange(new HgFile(repo, ioFile), status)[ FD ]
Line_11 $$ String title = "Could not execute hg status command "-->Line_13 $$ VcsNotifier.getInstance(myProject).logInfo(title, errors.toString())[ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_18 $$ for (String line : result.getOutputLines()) [ FD ]
Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) -->Line_35 $$ previous = new HgChange(new HgFile(repo, ioFile), status)[ CD ]
Line_24 $$ HgFileStatusEnum status = HgFileStatusEnum.parse(statusChar)-->Line_25 $$ if (status == null) [ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_3 $$ final Set<HgChange> changes = new HashSet<HgChange>()[ CD ]
Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) -->Line_33 $$ previous = null[ CD ]
Line_9 $$ if (errors != null && !errors.isEmpty()) -->Line_16 $$ LOG.warn(errors.toString())[ CD ]
Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) -->Line_36 $$ changes.add(previous)[ CD ]
Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) -->Line_32 $$ previous.setBeforeFile(new HgFile(repo, ioFile))[ CD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_5 $$ if (result == null) [ FD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_9 $$ if (errors != null && !errors.isEmpty()) [ CD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_39 $$ return changes[ CD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_8 $$ List<String> errors = result.getErrorLines()[ FD ]
Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) -->Line_12 $$ LOG.warn(title + errors.toString())[ CD ]
Line_35 $$ previous = new HgChange(new HgFile(repo, ioFile), status)-->Line_36 $$ changes.add(previous)[ FD ]
Line_18 $$ for (String line : result.getOutputLines()) -->Line_19 $$ if (StringUtil.isEmptyOrSpaces(line) || line.length() < ITEM_COUNT) [ FD ]
Line_18 $$ for (String line : result.getOutputLines()) -->Line_23 $$ char statusChar = line.charAt(STATUS_INDEX)[ FD ]
Line_9 $$ if (errors != null && !errors.isEmpty()) -->Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) [ CD ]
Line_8 $$ List<String> errors = result.getErrorLines()-->Line_12 $$ LOG.warn(title + errors.toString())[ FD ]
Line_4 $$ HgChange previous = null-->Line_32 $$ previous.setBeforeFile(new HgFile(repo, ioFile))[ FD ]
Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) -->Line_14 $$ return changes[ CD ]
Line_3 $$ final Set<HgChange> changes = new HashSet<HgChange>()-->Line_36 $$ changes.add(previous)[ FD ]
Line_8 $$ List<String> errors = result.getErrorLines()-->Line_13 $$ VcsNotifier.getInstance(myProject).logInfo(title, errors.toString())[ FD ]
Line_4 $$ HgChange previous = null-->Line_36 $$ changes.add(previous)[ FD ]
Line_4 $$ HgChange previous = null-->Line_31 $$ previous.setStatus(HgFileStatusEnum.COPY)[ FD ]
Line_18 $$ for (String line : result.getOutputLines()) -->Line_29 $$ File ioFile = new File(repo.getPath(), line.substring(2))[ FD ]
Line_19 $$ if (StringUtil.isEmptyOrSpaces(line) || line.length() < ITEM_COUNT) -->Line_20 $$ LOG.warn("Unexpected line in status '" + line + '\'')[ CD ]
Line_25 $$ if (status == null) -->Line_26 $$ LOG.error("Unknown status [" + statusChar + "] in line [" + line + "]" + "\n with arguments " + args)[ CD ]
Line_23 $$ char statusChar = line.charAt(STATUS_INDEX)-->Line_24 $$ HgFileStatusEnum status = HgFileStatusEnum.parse(statusChar)[ FD ]
Line_30 $$ if (HgFileStatusEnum.COPY == status && previous != null && previous.getStatus() == HgFileStatusEnum.ADDED) -->Line_31 $$ previous.setStatus(HgFileStatusEnum.COPY)[ CD ]
Line_8 $$ List<String> errors = result.getErrorLines()-->Line_9 $$ if (errors != null && !errors.isEmpty()) [ FD ]
Line_5 $$ if (result == null) -->Line_6 $$ return changes[ CD ]
Line_2 $$ private Collection<HgChange> parseChangesFromResult(VirtualFile repo, HgCommandResult result, List<String> args) -->Line_10 $$ if (result.getExitValue() != 0 && !myProject.isDisposed()) [ FD ]
Line_4 $$ HgChange previous = null-->Line_33 $$ previous = null[ FD ]
