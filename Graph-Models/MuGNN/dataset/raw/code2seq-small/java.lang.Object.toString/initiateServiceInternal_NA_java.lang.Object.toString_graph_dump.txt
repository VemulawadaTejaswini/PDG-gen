Line_7 $$ statisticsFactory = (StatisticsFactory) configValue-->Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ FD ]
Line_4 $$ if (configValue == null) -->Line_5 $$ statisticsFactory = DEFAULT_STATS_BUILDER[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_9 $$ final ClassLoaderService classLoaderService = registry.getService(ClassLoaderService.class)[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_4 $$ if (configValue == null) [ CD ]
Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()-->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_19 $$ final boolean enabled = sessionFactory.getSettings().isStatisticsEnabled()[ FD ]
Line_6 $$ if (StatisticsFactory.class.isInstance(configValue)) -->Line_9 $$ final ClassLoaderService classLoaderService = registry.getService(ClassLoaderService.class)[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_21 $$ LOG.debugf("Statistics initialized [enabled=%s]", enabled)[ CD ]
Line_6 $$ if (StatisticsFactory.class.isInstance(configValue)) -->Line_7 $$ statisticsFactory = (StatisticsFactory) configValue[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_3 $$ StatisticsFactory statisticsFactory[ CD ]
Line_3 $$ StatisticsFactory statisticsFactory-->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ FD ]
Line_5 $$ statisticsFactory = DEFAULT_STATS_BUILDER-->Line_7 $$ statisticsFactory = (StatisticsFactory) configValue[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_4 $$ if (configValue == null) [ FD ]
Line_4 $$ if (configValue == null) -->Line_6 $$ if (StatisticsFactory.class.isInstance(configValue)) [ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_15 $$ throw new HibernateException("Unable to instantiate specified StatisticsFactory implementation [" + configValue.toString() + "]", e)[ FD ]
Line_9 $$ final ClassLoaderService classLoaderService = registry.getService(ClassLoaderService.class)-->Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_20 $$ statistics.setStatisticsEnabled(enabled)[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_22 $$ return statistics[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_19 $$ final boolean enabled = sessionFactory.getSettings().isStatisticsEnabled()[ CD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_6 $$ if (StatisticsFactory.class.isInstance(configValue)) [ FD ]
Line_5 $$ statisticsFactory = DEFAULT_STATS_BUILDER-->Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()[ FD ]
Line_19 $$ final boolean enabled = sessionFactory.getSettings().isStatisticsEnabled()-->Line_21 $$ LOG.debugf("Statistics initialized [enabled=%s]", enabled)[ FD ]
Line_7 $$ statisticsFactory = (StatisticsFactory) configValue-->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ FD ]
Line_3 $$ StatisticsFactory statisticsFactory-->Line_11 $$ statisticsFactory = (StatisticsFactory) classLoaderService.classForName(configValue.toString()).newInstance()[ FD ]
Line_5 $$ statisticsFactory = DEFAULT_STATS_BUILDER-->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ FD ]
Line_2 $$ private StatisticsImplementor initiateServiceInternal(SessionFactoryImplementor sessionFactory, Object configValue, ServiceRegistryImplementor registry) -->Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)[ CD ]
Line_3 $$ StatisticsFactory statisticsFactory-->Line_7 $$ statisticsFactory = (StatisticsFactory) configValue[ FD ]
Line_3 $$ StatisticsFactory statisticsFactory-->Line_5 $$ statisticsFactory = DEFAULT_STATS_BUILDER[ FD ]
Line_18 $$ StatisticsImplementor statistics = statisticsFactory.buildStatistics(sessionFactory)-->Line_20 $$ statistics.setStatisticsEnabled(enabled)[ FD ]
Line_19 $$ final boolean enabled = sessionFactory.getSettings().isStatisticsEnabled()-->Line_20 $$ statistics.setStatisticsEnabled(enabled)[ FD ]
