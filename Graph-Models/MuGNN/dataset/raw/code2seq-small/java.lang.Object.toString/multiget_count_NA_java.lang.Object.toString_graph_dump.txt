Line_2 $$ public Map<ByteBuffer, Integer> multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_8 $$ Map<String, String> traceParameters = ImmutableMap.of("keys", keysList.toString(), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_4 $$ List<String> keysList = Lists.newArrayList()[ CD ]
Line_4 $$ List<String> keysList = Lists.newArrayList()-->Line_8 $$ Map<String, String> traceParameters = ImmutableMap.of("keys", keysList.toString(), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ FD ]
Line_4 $$ List<String> keysList = Lists.newArrayList()-->Line_6 $$ keysList.add(ByteBufferUtil.bytesToHex(key))[ FD ]
Line_15 $$ String keyspace = cState.getKeyspace()-->Line_18 $$ Map<ByteBuffer, List<ColumnOrSuperColumn>> columnFamiliesMap = multigetSliceInternal(keyspace, keys, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_11 $$ logger.trace("multiget_count")[ CD ]
Line_8 $$ Map<String, String> traceParameters = ImmutableMap.of("keys", keysList.toString(), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())-->Line_9 $$ Tracing.instance.begin("multiget_count", traceParameters)[ FD ]
Line_14 $$ ThriftClientState cState = state()-->Line_15 $$ String keyspace = cState.getKeyspace()[ FD ]
Line_14 $$ ThriftClientState cState = state()-->Line_18 $$ Map<ByteBuffer, List<ColumnOrSuperColumn>> columnFamiliesMap = multigetSliceInternal(keyspace, keys, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_2 $$ public Map<ByteBuffer, Integer> multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_3 $$ if (startSessionIfRequested()) [ CD ]
Line_18 $$ Map<ByteBuffer, List<ColumnOrSuperColumn>> columnFamiliesMap = multigetSliceInternal(keyspace, keys, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)-->Line_19 $$ for (Map.Entry<ByteBuffer, List<ColumnOrSuperColumn>> cf : columnFamiliesMap.entrySet()) counts.put(cf.getKey(), cf.getValue().size())[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_9 $$ Tracing.instance.begin("multiget_count", traceParameters)[ CD ]
Line_17 $$ Map<ByteBuffer, Integer> counts = new HashMap()-->Line_19 $$ counts.put(cf.getKey(), cf.getValue().size())[ FD ]
Line_2 $$ public Map<ByteBuffer, Integer> multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException -->Line_18 $$ Map<ByteBuffer, List<ColumnOrSuperColumn>> columnFamiliesMap = multigetSliceInternal(keyspace, keys, column_parent, FBUtilities.nowInSeconds(), predicate, consistency_level, cState)[ FD ]
Line_14 $$ ThriftClientState cState = state()-->Line_16 $$ cState.hasColumnFamilyAccess(keyspace, column_parent.column_family, Permission.SELECT)[ FD ]
Line_5 $$ for (ByteBuffer key : keys) -->Line_6 $$ keysList.add(ByteBufferUtil.bytesToHex(key))[ FD ]
Line_15 $$ String keyspace = cState.getKeyspace()-->Line_16 $$ cState.hasColumnFamilyAccess(keyspace, column_parent.column_family, Permission.SELECT)[ FD ]
Line_3 $$ if (startSessionIfRequested()) -->Line_8 $$ Map<String, String> traceParameters = ImmutableMap.of("keys", keysList.toString(), "column_parent", column_parent.toString(), "predicate", predicate.toString(), "consistency_level", consistency_level.name())[ CD ]
