Line_2 $$ public void forConstructor() throws Exception -->Line_3 $$ Constructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class)[ CD ]
Line_2 $$ public void forConstructor() throws Exception -->Line_4 $$ Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forMethodOrConstructor(constructor, 0))[ CD ]
Line_4 $$ Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forMethodOrConstructor(constructor, 0))-->Line_5 $$ assertThat(type.toString(), equalTo("java.util.List<java.lang.String>"))[ FD ]
Line_4 $$ Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forMethodOrConstructor(constructor, 0))-->Line_6 $$ assertSerialzable(type)[ FD ]
Line_2 $$ public void forConstructor() throws Exception -->Line_6 $$ assertSerialzable(type)[ CD ]
Line_3 $$ Constructor<?> constructor = Constructors.class.getDeclaredConstructor(List.class)-->Line_4 $$ Type type = SerializableTypeWrapper.forMethodParameter(MethodParameter.forMethodOrConstructor(constructor, 0))[ FD ]
Line_2 $$ public void forConstructor() throws Exception -->Line_5 $$ assertThat(type.toString(), equalTo("java.util.List<java.lang.String>"))[ CD ]
