Line_18 $$ l = 0-->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
Line_17 $$ if (l == null) -->Line_18 $$ l = 0[ CD ]
Line_9 $$ Session tmpSession = sessionFactory.openSession()-->Line_12 $$ List list = tmpSession.createQuery("select o from java.lang.Object o").list()[ FD ]
Line_18 $$ l = 0-->Line_20 $$ l = l + 1[ FD ]
Line_13 $$ Map<String, Integer> items = new HashMap<String, Integer>()-->Line_25 $$ fail("Data is left in the database: " + items.toString())[ FD ]
Line_2 $$ protected void assertAllDataRemoved() -->Line_9 $$ Session tmpSession = sessionFactory.openSession()[ CD ]
Line_9 $$ Session tmpSession = sessionFactory.openSession()-->Line_33 $$ tmpSession.close()[ FD ]
Line_2 $$ protected void assertAllDataRemoved() -->Line_10 $$ Transaction transaction = tmpSession.beginTransaction()[ CD ]
Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))-->Line_17 $$ if (l == null) [ FD ]
Line_15 $$ for (Object element : list) -->Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))[ FD ]
Line_9 $$ Session tmpSession = sessionFactory.openSession()-->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
Line_14 $$ if (!list.isEmpty()) -->Line_25 $$ fail("Data is left in the database: " + items.toString())[ CD ]
Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))-->Line_18 $$ l = 0[ FD ]
Line_14 $$ if (!list.isEmpty()) -->Line_24 $$ transaction.rollback()[ CD ]
Line_2 $$ protected void assertAllDataRemoved() -->Line_3 $$ if (!createSchema()) [ CD ]
Line_13 $$ Map<String, Integer> items = new HashMap<String, Integer>()-->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
Line_10 $$ Transaction transaction = tmpSession.beginTransaction()-->Line_31 $$ transaction.rollback()[ FD ]
Line_12 $$ List list = tmpSession.createQuery("select o from java.lang.Object o").list()-->Line_14 $$ if (!list.isEmpty()) [ FD ]
Line_9 $$ Session tmpSession = sessionFactory.openSession()-->Line_10 $$ Transaction transaction = tmpSession.beginTransaction()[ FD ]
Line_13 $$ Map<String, Integer> items = new HashMap<String, Integer>()-->Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))[ FD ]
Line_15 $$ for (Object element : list) -->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
Line_10 $$ Transaction transaction = tmpSession.beginTransaction()-->Line_27 $$ transaction.rollback()[ FD ]
Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))-->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
Line_30 $$ if (transaction.getStatus().canRollback()) -->Line_31 $$ transaction.rollback()[ CD ]
Line_10 $$ Transaction transaction = tmpSession.beginTransaction()-->Line_24 $$ transaction.rollback()[ FD ]
Line_2 $$ protected void assertAllDataRemoved() -->Line_6 $$ if (!Boolean.getBoolean(VALIDATE_DATA_CLEANUP)) [ CD ]
Line_9 $$ Session tmpSession = sessionFactory.openSession()-->Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))[ FD ]
Line_3 $$ if (!createSchema()) -->Line_4 $$ return[ CD ]
Line_10 $$ Transaction transaction = tmpSession.beginTransaction()-->Line_30 $$ if (transaction.getStatus().canRollback()) [ FD ]
Line_6 $$ if (!Boolean.getBoolean(VALIDATE_DATA_CLEANUP)) -->Line_7 $$ return[ CD ]
Line_16 $$ Integer l = items.get(tmpSession.getEntityName(element))-->Line_20 $$ l = l + 1[ FD ]
Line_20 $$ l = l + 1-->Line_21 $$ items.put(tmpSession.getEntityName(element), l)[ FD ]
