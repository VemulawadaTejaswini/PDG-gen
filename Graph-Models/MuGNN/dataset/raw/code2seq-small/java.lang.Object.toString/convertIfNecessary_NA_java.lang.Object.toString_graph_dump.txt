Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) -->Line_68 $$ convertedValue = Array.get(convertedValue, 0)[ CD ]
Line_50 $$ if (Object.class == requiredType) -->Line_51 $$ return (T) convertedValue[ CD ]
Line_61 $$ standardConversion = true-->Line_65 $$ standardConversion = true[ FD ]
Line_46 $$ boolean standardConversion = false-->Line_96 $$ standardConversion = true[ FD ]
Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) -->Line_108 $$ if (conversionAttemptEx != null) [ CD ]
Line_61 $$ standardConversion = true-->Line_96 $$ standardConversion = true[ FD ]
Line_22 $$ TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue)-->Line_25 $$ return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor)[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)[ FD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_75 $$ if (conversionAttemptEx == null && !requiredType.isInterface() && !requiredType.isEnum()) [ CD ]
Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_90 $$ String trimmedValue = ((String) convertedValue).trim()[ CD ]
Line_115 $$ if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) -->Line_116 $$ return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor)[ CD ]
Line_32 $$ Object convertedValue = newValue-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_42 $$ editor = findDefaultEditor(requiredType)-->Line_126 $$ if (editor != null) [ FD ]
Line_52 $$ if (requiredType.isArray()) -->Line_57 $$ return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType())[ CD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_97 $$ if (convertedValue instanceof Number && Number.class.isAssignableFrom(requiredType)) [ CD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_85 $$ if (logger.isDebugEnabled()) -->Line_86 $$ logger.debug("Construction via String failed for type [" + requiredType.getName() + "]", ex)[ CD ]
Line_96 $$ standardConversion = true-->Line_99 $$ standardConversion = true[ FD ]
Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) -->Line_126 $$ if (editor != null) [ CD ]
Line_21 $$ if (editor == null && conversionService != null && newValue != null && typeDescriptor != null) -->Line_22 $$ TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue)[ CD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) [ FD ]
Line_99 $$ standardConversion = true-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)[ FD ]
Line_126 $$ if (editor != null) -->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ CD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_42 $$ editor = findDefaultEditor(requiredType)-->Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)[ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_108 $$ if (conversionAttemptEx != null) -->Line_111 $$ if (conversionService != null) [ CD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_58 $$ if (convertedValue instanceof Collection) [ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) [ FD ]
Line_61 $$ standardConversion = true-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_62 $$ if (convertedValue instanceof Map) -->Line_65 $$ standardConversion = true[ CD ]
Line_32 $$ Object convertedValue = newValue-->Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) [ FD ]
Line_18 $$ ConversionFailedException conversionAttemptEx = null-->Line_28 $$ conversionAttemptEx = ex[ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_57 $$ return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType())[ FD ]
Line_52 $$ if (requiredType.isArray()) -->Line_58 $$ if (convertedValue instanceof Collection) [ CD ]
Line_47 $$ if (requiredType != null) -->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ CD ]
Line_58 $$ if (convertedValue instanceof Collection) -->Line_61 $$ standardConversion = true[ CD ]
Line_32 $$ Object convertedValue = newValue-->Line_68 $$ convertedValue = Array.get(convertedValue, 0)[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_68 $$ convertedValue = Array.get(convertedValue, 0)[ FD ]
Line_46 $$ boolean standardConversion = false-->Line_65 $$ standardConversion = true[ FD ]
Line_90 $$ String trimmedValue = ((String) convertedValue).trim()-->Line_91 $$ if (requiredType.isEnum() && "".equals(trimmedValue)) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_65 $$ standardConversion = true-->Line_69 $$ standardConversion = true[ FD ]
Line_65 $$ standardConversion = true-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) -->Line_122 $$ msg.append("] to required type [").append(ClassUtils.getQualifiedName(requiredType)).append("]")[ CD ]
Line_50 $$ if (Object.class == requiredType) -->Line_52 $$ if (requiredType.isArray()) [ CD ]
Line_37 $$ if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) -->Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)[ CD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)[ FD ]
Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) -->Line_69 $$ standardConversion = true[ CD ]
Line_135 $$ if (conversionAttemptEx != null) -->Line_139 $$ logger.debug("Original ConversionService attempt failed - ignored since " + "PropertyEditor based conversion eventually succeeded", conversionAttemptEx)[ CD ]
Line_18 $$ ConversionFailedException conversionAttemptEx = null-->Line_108 $$ if (conversionAttemptEx != null) [ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_62 $$ if (convertedValue instanceof Map) [ FD ]
Line_69 $$ standardConversion = true-->Line_99 $$ standardConversion = true[ FD ]
Line_18 $$ ConversionFailedException conversionAttemptEx = null-->Line_135 $$ if (conversionAttemptEx != null) [ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_57 $$ return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType())[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_135 $$ if (conversionAttemptEx != null) -->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ CD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_104 $$ convertedValue = javaUtilOptionalEmpty-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) [ FD ]
Line_36 $$ TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor()-->Line_37 $$ if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) [ FD ]
Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) -->Line_123 $$ if (propertyName != null) [ CD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_57 $$ return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType())[ FD ]
Line_42 $$ editor = findDefaultEditor(requiredType)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_69 $$ standardConversion = true-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) [ FD ]
Line_22 $$ TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue)-->Line_116 $$ return (T) conversionService.convert(newValue, sourceTypeDesc, typeDescriptor)[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) -->Line_121 $$ msg.append("Cannot convert value of type [").append(ClassUtils.getDescriptiveType(newValue))[ CD ]
Line_90 $$ String trimmedValue = ((String) convertedValue).trim()-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_58 $$ if (convertedValue instanceof Collection) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_62 $$ if (convertedValue instanceof Map) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_58 $$ if (convertedValue instanceof Collection) [ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) [ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ FD ]
Line_97 $$ if (convertedValue instanceof Number && Number.class.isAssignableFrom(requiredType)) -->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ CD ]
Line_104 $$ convertedValue = javaUtilOptionalEmpty-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_35 $$ if (requiredType != null && Collection.class.isAssignableFrom(requiredType) && convertedValue instanceof String) -->Line_37 $$ if (elementType != null && Enum.class.isAssignableFrom(elementType.getType())) [ CD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_68 $$ convertedValue = Array.get(convertedValue, 0)[ FD ]
Line_123 $$ if (propertyName != null) -->Line_124 $$ msg.append(" for property '").append(propertyName).append("'")[ CD ]
Line_32 $$ Object convertedValue = newValue-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_18 $$ ConversionFailedException conversionAttemptEx = null-->Line_139 $$ logger.debug("Original ConversionService attempt failed - ignored since " + "PropertyEditor based conversion eventually succeeded", conversionAttemptEx)[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_67 $$ if (convertedValue.getClass().isArray() && Array.getLength(convertedValue) == 1) [ FD ]
Line_21 $$ if (editor == null && conversionService != null && newValue != null && typeDescriptor != null) -->Line_23 $$ if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) [ CD ]
Line_61 $$ standardConversion = true-->Line_69 $$ standardConversion = true[ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_58 $$ if (convertedValue instanceof Collection) [ FD ]
Line_81 $$ if (logger.isTraceEnabled()) -->Line_82 $$ logger.trace("No String constructor found on type [" + requiredType.getName() + "]", ex)[ CD ]
Line_65 $$ standardConversion = true-->Line_96 $$ standardConversion = true[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_62 $$ if (convertedValue instanceof Map) [ FD ]
Line_111 $$ if (conversionService != null) -->Line_115 $$ if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) [ CD ]
Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_127 $$ msg.append(": PropertyEditor [").append(editor.getClass().getName()).append("] returned inappropriate value of type [").append(ClassUtils.getDescriptiveType(convertedValue)).append("]")[ FD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_91 $$ if (requiredType.isEnum() && "".equals(trimmedValue)) [ CD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_57 $$ return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType())[ FD ]
Line_58 $$ if (convertedValue instanceof Collection) -->Line_62 $$ if (convertedValue instanceof Map) [ CD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_96 $$ standardConversion = true[ CD ]
Line_32 $$ Object convertedValue = newValue-->Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)[ FD ]
Line_65 $$ standardConversion = true-->Line_99 $$ standardConversion = true[ FD ]
Line_96 $$ standardConversion = true-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_46 $$ boolean standardConversion = false-->Line_69 $$ standardConversion = true[ FD ]
Line_22 $$ TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue)-->Line_115 $$ if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) [ FD ]
Line_69 $$ standardConversion = true-->Line_96 $$ standardConversion = true[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)[ FD ]
Line_44 $$ convertedValue = doConvertValue(oldValue, convertedValue, requiredType, editor)-->Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)[ FD ]
Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_28 $$ conversionAttemptEx = ex-->Line_108 $$ if (conversionAttemptEx != null) [ FD ]
Line_68 $$ convertedValue = Array.get(convertedValue, 0)-->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) [ FD ]
Line_28 $$ conversionAttemptEx = ex-->Line_135 $$ if (conversionAttemptEx != null) [ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_62 $$ if (convertedValue instanceof Map) [ FD ]
Line_77 $$ Constructor<T> strCtor = requiredType.getConstructor(String.class)-->Line_78 $$ return BeanUtils.instantiateClass(strCtor, convertedValue)[ FD ]
Line_32 $$ Object convertedValue = newValue-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)-->Line_107 $$ if (!ClassUtils.isAssignableValue(requiredType, convertedValue)) [ FD ]
Line_46 $$ boolean standardConversion = false-->Line_99 $$ standardConversion = true[ FD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ FD ]
Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) -->Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)[ CD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_68 $$ convertedValue = Array.get(convertedValue, 0)[ FD ]
Line_71 $$ if (String.class == requiredType && ClassUtils.isPrimitiveOrWrapper(convertedValue.getClass())) -->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ CD ]
Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)-->Line_98 $$ convertedValue = NumberUtils.convertNumberToTargetClass((Number) convertedValue, (Class<Number>) requiredType)[ FD ]
Line_97 $$ if (convertedValue instanceof Number && Number.class.isAssignableFrom(requiredType)) -->Line_99 $$ standardConversion = true[ CD ]
Line_38 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_28 $$ conversionAttemptEx = ex-->Line_139 $$ logger.debug("Original ConversionService attempt failed - ignored since " + "PropertyEditor based conversion eventually succeeded", conversionAttemptEx)[ FD ]
Line_46 $$ boolean standardConversion = false-->Line_61 $$ standardConversion = true[ FD ]
Line_126 $$ if (editor != null) -->Line_130 $$ msg.append(": no matching editors or conversion strategy found")[ CD ]
Line_95 $$ convertedValue = attemptToConvertStringToEnum(requiredType, trimmedValue, convertedValue)-->Line_104 $$ convertedValue = javaUtilOptionalEmpty[ FD ]
Line_41 $$ if (editor == null) -->Line_42 $$ editor = findDefaultEditor(requiredType)[ CD ]
Line_35 $$ if (requiredType != null && Collection.class.isAssignableFrom(requiredType) && convertedValue instanceof String) -->Line_36 $$ TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor()[ CD ]
Line_61 $$ standardConversion = true-->Line_99 $$ standardConversion = true[ FD ]
Line_46 $$ boolean standardConversion = false-->Line_136 $$ if (editor == null && !standardConversion && requiredType != null && Object.class != requiredType) [ FD ]
Line_22 $$ TypeDescriptor sourceTypeDesc = TypeDescriptor.forObject(newValue)-->Line_23 $$ if (conversionService.canConvert(sourceTypeDesc, typeDescriptor)) [ FD ]
Line_55 $$ convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue)-->Line_74 $$ if (convertedValue instanceof String && !requiredType.isInstance(convertedValue)) [ FD ]
