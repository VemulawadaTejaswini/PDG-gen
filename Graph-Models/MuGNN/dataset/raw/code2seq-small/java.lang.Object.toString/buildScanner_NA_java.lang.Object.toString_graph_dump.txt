Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_45 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor()[ FD ]
Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()-->Line_6 $$ if (archiveDescriptorFactory == null) [ FD ]
Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()-->Line_13 $$ if (archiveDescriptorFactory != null) [ FD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ final Object scannerSetting = options.getScanner()[ FD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting[ FD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_45 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor()[ FD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ final Object scannerSetting = options.getScanner()[ CD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_49 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e2)[ FD ]
Line_3 $$ final Object scannerSetting = options.getScanner()-->Line_12 $$ if (Scanner.class.isInstance(scannerSetting)) [ FD ]
Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()-->Line_28 $$ return constructor.newInstance(archiveDescriptorFactory)[ FD ]
Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)-->Line_28 $$ return constructor.newInstance(archiveDescriptorFactory)[ FD ]
Line_12 $$ if (Scanner.class.isInstance(scannerSetting)) -->Line_13 $$ if (archiveDescriptorFactory != null) [ CD ]
Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)-->Line_47 $$ return constructor.newInstance()[ FD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_41 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_37 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())[ FD ]
Line_5 $$ if (scannerSetting == null) -->Line_18 $$ final Class<? extends Scanner> scannerImplClass[ CD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())[ FD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()[ CD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_49 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e2)[ FD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_5 $$ if (scannerSetting == null) [ CD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_30 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_37 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
Line_5 $$ if (scannerSetting == null) -->Line_12 $$ if (Scanner.class.isInstance(scannerSetting)) [ CD ]
Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()-->Line_24 $$ if (archiveDescriptorFactory != null) [ FD ]
Line_3 $$ final Object scannerSetting = options.getScanner()-->Line_19 $$ if (Class.class.isInstance(scannerSetting)) [ FD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_30 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_3 $$ final Object scannerSetting = options.getScanner()-->Line_5 $$ if (scannerSetting == null) [ FD ]
Line_3 $$ final Object scannerSetting = options.getScanner()-->Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())[ FD ]
Line_19 $$ if (Class.class.isInstance(scannerSetting)) -->Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting[ CD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_45 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor()[ FD ]
Line_5 $$ if (scannerSetting == null) -->Line_24 $$ if (archiveDescriptorFactory != null) [ CD ]
Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)-->Line_39 $$ return constructor.newInstance(StandardArchiveDescriptorFactory.INSTANCE)[ FD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_26 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())-->Line_41 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_5 $$ if (scannerSetting == null) -->Line_19 $$ if (Class.class.isInstance(scannerSetting)) [ CD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_41 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_5 $$ if (scannerSetting == null) -->Line_6 $$ if (archiveDescriptorFactory == null) [ CD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_49 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e2)[ FD ]
Line_6 $$ if (archiveDescriptorFactory == null) -->Line_9 $$ return new StandardScanner(archiveDescriptorFactory)[ CD ]
Line_6 $$ if (archiveDescriptorFactory == null) -->Line_7 $$ return new StandardScanner()[ CD ]
Line_12 $$ if (Scanner.class.isInstance(scannerSetting)) -->Line_16 $$ return (Scanner) scannerSetting[ CD ]
Line_2 $$ private static Scanner buildScanner(MetadataBuildingOptions options, ClassLoaderAccess classLoaderAccess) -->Line_4 $$ final ArchiveDescriptorFactory archiveDescriptorFactory = options.getArchiveDescriptorFactory()[ FD ]
Line_20 $$ scannerImplClass = (Class<? extends Scanner>) scannerSetting-->Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())[ FD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_30 $$ throw new IllegalStateException("Error trying to instantiate custom specified Scanner [" + scannerImplClass.getName() + "]", e)[ FD ]
Line_19 $$ if (Class.class.isInstance(scannerSetting)) -->Line_22 $$ scannerImplClass = classLoaderAccess.classForName(scannerSetting.toString())[ CD ]
Line_18 $$ final Class<? extends Scanner> scannerImplClass-->Line_37 $$ final Constructor<? extends Scanner> constructor = scannerImplClass.getConstructor(SINGLE_ARG)[ FD ]
