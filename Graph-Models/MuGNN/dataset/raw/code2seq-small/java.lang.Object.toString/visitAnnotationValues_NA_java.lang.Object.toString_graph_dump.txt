Line_4 $$ String name = method.getName()-->Line_9 $$ AnnotationVisitor arrayVisitor = annotationVisitor.visitArray(name)[ FD ]
Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) -->Line_10 $$ Object[] elements = (Object[]) getAnnotationParameterValue(annotation, method)[ CD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_16 $$ if (returnType.isAnnotation()) [ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_15 $$ annotationVisitor.visit(name, Type.getType(clazz))[ FD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_17 $$ Annotation nestedAnnotation = (Annotation) getAnnotationParameterValue(annotation, method)[ FD ]
Line_6 $$ if (returnType.isEnum()) -->Line_7 $$ annotationVisitor.visitEnum(name, Type.getType(returnType).getDescriptor(), getAnnotationParameterValue(annotation, method).toString())[ CD ]
Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())-->Line_20 $$ nestedAnnotationVisitor.visitEnd()[ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())[ FD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_4 $$ String name = method.getName()[ FD ]
Line_14 $$ Class<?> clazz = (Class<?>) getAnnotationParameterValue(annotation, method)-->Line_15 $$ annotationVisitor.visit(name, Type.getType(clazz))[ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_9 $$ AnnotationVisitor arrayVisitor = annotationVisitor.visitArray(name)[ FD ]
Line_13 $$ if (returnType.equals(Class.class)) -->Line_14 $$ Class<?> clazz = (Class<?>) getAnnotationParameterValue(annotation, method)[ CD ]
Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) -->Line_9 $$ AnnotationVisitor arrayVisitor = annotationVisitor.visitArray(name)[ CD ]
Line_16 $$ if (returnType.isAnnotation()) -->Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())[ CD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_7 $$ annotationVisitor.visitEnum(name, Type.getType(returnType).getDescriptor(), getAnnotationParameterValue(annotation, method).toString())[ FD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_7 $$ annotationVisitor.visitEnum(name, Type.getType(returnType).getDescriptor(), getAnnotationParameterValue(annotation, method).toString())[ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_10 $$ Object[] elements = (Object[]) getAnnotationParameterValue(annotation, method)[ FD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_10 $$ Object[] elements = (Object[]) getAnnotationParameterValue(annotation, method)[ FD ]
Line_4 $$ String name = method.getName()-->Line_15 $$ annotationVisitor.visit(name, Type.getType(clazz))[ FD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_11 $$ visitArrayElements(arrayVisitor, returnType.getComponentType(), elements)[ FD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_14 $$ Class<?> clazz = (Class<?>) getAnnotationParameterValue(annotation, method)[ FD ]
Line_13 $$ if (returnType.equals(Class.class)) -->Line_15 $$ annotationVisitor.visit(name, Type.getType(clazz))[ CD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_22 $$ annotationVisitor.visit(name, getAnnotationParameterValue(annotation, method))[ FD ]
Line_9 $$ AnnotationVisitor arrayVisitor = annotationVisitor.visitArray(name)-->Line_11 $$ visitArrayElements(arrayVisitor, returnType.getComponentType(), elements)[ FD ]
Line_9 $$ AnnotationVisitor arrayVisitor = annotationVisitor.visitArray(name)-->Line_12 $$ arrayVisitor.visitEnd()[ FD ]
Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) -->Line_11 $$ visitArrayElements(arrayVisitor, returnType.getComponentType(), elements)[ CD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_22 $$ annotationVisitor.visit(name, getAnnotationParameterValue(annotation, method))[ FD ]
Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())-->Line_19 $$ visitAnnotationValues(nestedAnnotation, nestedAnnotationVisitor)[ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_7 $$ annotationVisitor.visitEnum(name, Type.getType(returnType).getDescriptor(), getAnnotationParameterValue(annotation, method).toString())[ FD ]
Line_16 $$ if (returnType.isAnnotation()) -->Line_20 $$ nestedAnnotationVisitor.visitEnd()[ CD ]
Line_17 $$ Annotation nestedAnnotation = (Annotation) getAnnotationParameterValue(annotation, method)-->Line_19 $$ visitAnnotationValues(nestedAnnotation, nestedAnnotationVisitor)[ FD ]
Line_4 $$ String name = method.getName()-->Line_22 $$ annotationVisitor.visit(name, getAnnotationParameterValue(annotation, method))[ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_14 $$ Class<?> clazz = (Class<?>) getAnnotationParameterValue(annotation, method)[ FD ]
Line_16 $$ if (returnType.isAnnotation()) -->Line_17 $$ Annotation nestedAnnotation = (Annotation) getAnnotationParameterValue(annotation, method)[ CD ]
Line_13 $$ if (returnType.equals(Class.class)) -->Line_16 $$ if (returnType.isAnnotation()) [ CD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_17 $$ Annotation nestedAnnotation = (Annotation) getAnnotationParameterValue(annotation, method)[ FD ]
Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) -->Line_12 $$ arrayVisitor.visitEnd()[ CD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())[ FD ]
Line_4 $$ String name = method.getName()-->Line_18 $$ AnnotationVisitor nestedAnnotationVisitor = annotationVisitor.visitAnnotation(name, Type.getType(returnType).getDescriptor())[ FD ]
Line_4 $$ String name = method.getName()-->Line_7 $$ annotationVisitor.visitEnum(name, Type.getType(returnType).getDescriptor(), getAnnotationParameterValue(annotation, method).toString())[ FD ]
Line_6 $$ if (returnType.isEnum()) -->Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) [ CD ]
Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) -->Line_13 $$ if (returnType.equals(Class.class)) [ CD ]
Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) -->Line_5 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_8 $$ if (returnType.isArray() && !PRIMITIVE_TYPES.contains(returnType.getComponentType())) [ FD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_13 $$ if (returnType.equals(Class.class)) [ FD ]
Line_16 $$ if (returnType.isAnnotation()) -->Line_22 $$ annotationVisitor.visit(name, getAnnotationParameterValue(annotation, method))[ CD ]
Line_10 $$ Object[] elements = (Object[]) getAnnotationParameterValue(annotation, method)-->Line_11 $$ visitArrayElements(arrayVisitor, returnType.getComponentType(), elements)[ FD ]
Line_16 $$ if (returnType.isAnnotation()) -->Line_19 $$ visitAnnotationValues(nestedAnnotation, nestedAnnotationVisitor)[ CD ]
Line_5 $$ Class<?> returnType = method.getReturnType()-->Line_6 $$ if (returnType.isEnum()) [ FD ]
Line_2 $$ private void visitAnnotationValues(Annotation annotation, AnnotationVisitor annotationVisitor) -->Line_3 $$ for (Method method : annotation.annotationType().getDeclaredMethods()) [ FD ]
