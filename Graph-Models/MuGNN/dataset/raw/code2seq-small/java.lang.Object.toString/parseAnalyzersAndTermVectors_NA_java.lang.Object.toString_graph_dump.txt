Line_8 $$ final Object propNode = entry.getValue()-->Line_13 $$ builder.storeTermVectors(nodeBooleanValue(propNode))[ FD ]
Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()-->Line_42 $$ if (searchAnalyzer != null) [ FD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_15 $$ if (propName.equals("store_term_vector_offsets")) [ FD ]
Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()-->Line_30 $$ indexAnalyzer = analyzer[ FD ]
Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0-->Line_32 $$ if (propName.equals("search_analyzer")) [ CD ]
Line_12 $$ if (propName.equals("store_term_vectors")) -->Line_15 $$ if (propName.equals("store_term_vector_offsets")) [ CD ]
Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0-->Line_30 $$ indexAnalyzer = analyzer[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()[ CD ]
Line_15 $$ if (propName.equals("store_term_vector_offsets")) -->Line_17 $$ iterator.remove()[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_48 $$ builder.indexAnalyzer(indexAnalyzer)[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_33 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ FD ]
Line_32 $$ if (propName.equals("search_analyzer")) -->Line_34 $$ if (analyzer == null) [ CD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_18 $$ if (propName.equals("store_term_vector_positions")) [ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_14 $$ iterator.remove()[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_19 $$ builder.storeTermVectorPositions(nodeBooleanValue(propNode))[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_49 $$ builder.searchAnalyzer(searchAnalyzer)[ CD ]
Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())-->Line_30 $$ indexAnalyzer = analyzer[ FD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_33 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_41 $$ if (indexAnalyzer == null) [ CD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_21 $$ if (propName.equals("store_term_vector_payloads")) [ FD ]
Line_46 $$ searchAnalyzer = indexAnalyzer-->Line_49 $$ builder.searchAnalyzer(searchAnalyzer)[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_6 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_9 $$ if (propName.equals("term_vector")) [ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_22 $$ builder.storeTermVectorPayloads(nodeBooleanValue(propNode))[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())[ CD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_32 $$ if (propName.equals("search_analyzer")) [ FD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_10 $$ parseTermVector(name, propNode.toString(), builder)[ FD ]
Line_30 $$ indexAnalyzer = analyzer-->Line_41 $$ if (indexAnalyzer == null) [ FD ]
Line_32 $$ if (propName.equals("search_analyzer")) -->Line_33 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_48 $$ builder.indexAnalyzer(indexAnalyzer)[ CD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_19 $$ builder.storeTermVectorPositions(nodeBooleanValue(propNode))[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()[ FD ]
Line_32 $$ if (propName.equals("search_analyzer")) -->Line_37 $$ searchAnalyzer = analyzer[ CD ]
Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0-->Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ CD ]
Line_37 $$ searchAnalyzer = analyzer-->Line_46 $$ searchAnalyzer = indexAnalyzer[ FD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0[ FD ]
Line_41 $$ if (indexAnalyzer == null) -->Line_42 $$ if (searchAnalyzer != null) [ CD ]
Line_9 $$ if (propName.equals("term_vector")) -->Line_12 $$ if (propName.equals("store_term_vectors")) [ CD ]
Line_18 $$ if (propName.equals("store_term_vector_positions")) -->Line_19 $$ builder.storeTermVectorPositions(nodeBooleanValue(propNode))[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ FD ]
Line_9 $$ if (propName.equals("term_vector")) -->Line_11 $$ iterator.remove()[ CD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_22 $$ builder.storeTermVectorPayloads(nodeBooleanValue(propNode))[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_31 $$ iterator.remove()[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_38 $$ iterator.remove()[ FD ]
Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_12 $$ if (propName.equals("store_term_vectors")) [ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_49 $$ builder.searchAnalyzer(searchAnalyzer)[ FD ]
Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()-->Line_49 $$ builder.searchAnalyzer(searchAnalyzer)[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_10 $$ parseTermVector(name, propNode.toString(), builder)[ FD ]
Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()-->Line_46 $$ searchAnalyzer = indexAnalyzer[ FD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())[ FD ]
Line_15 $$ if (propName.equals("store_term_vector_offsets")) -->Line_16 $$ builder.storeTermVectorOffsets(nodeBooleanValue(propNode))[ CD ]
Line_37 $$ searchAnalyzer = analyzer-->Line_42 $$ if (searchAnalyzer != null) [ FD ]
Line_12 $$ if (propName.equals("store_term_vectors")) -->Line_13 $$ builder.storeTermVectors(nodeBooleanValue(propNode))[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()-->Line_41 $$ if (indexAnalyzer == null) [ FD ]
Line_9 $$ if (propName.equals("term_vector")) -->Line_10 $$ parseTermVector(name, propNode.toString(), builder)[ CD ]
Line_41 $$ if (indexAnalyzer == null) -->Line_45 $$ if (searchAnalyzer == null) [ CD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_6 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_37 $$ searchAnalyzer = analyzer-->Line_49 $$ builder.searchAnalyzer(searchAnalyzer)[ FD ]
Line_18 $$ if (propName.equals("store_term_vector_positions")) -->Line_21 $$ if (propName.equals("store_term_vector_payloads")) [ CD ]
Line_21 $$ if (propName.equals("store_term_vector_payloads")) -->Line_23 $$ iterator.remove()[ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_13 $$ builder.storeTermVectors(nodeBooleanValue(propNode))[ FD ]
Line_37 $$ searchAnalyzer = analyzer-->Line_45 $$ if (searchAnalyzer == null) [ FD ]
Line_18 $$ if (propName.equals("store_term_vector_positions")) -->Line_20 $$ iterator.remove()[ CD ]
Line_32 $$ if (propName.equals("search_analyzer")) -->Line_38 $$ iterator.remove()[ CD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ final Object propNode = entry.getValue()[ CD ]
Line_12 $$ if (propName.equals("store_term_vectors")) -->Line_14 $$ iterator.remove()[ CD ]
Line_45 $$ if (searchAnalyzer == null) -->Line_46 $$ searchAnalyzer = indexAnalyzer[ CD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_9 $$ if (propName.equals("term_vector")) [ CD ]
Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())-->Line_37 $$ searchAnalyzer = analyzer[ FD ]
Line_30 $$ indexAnalyzer = analyzer-->Line_46 $$ searchAnalyzer = indexAnalyzer[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_17 $$ iterator.remove()[ FD ]
Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()-->Line_48 $$ builder.indexAnalyzer(indexAnalyzer)[ FD ]
Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0-->Line_27 $$ if (analyzer == null) [ CD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) [ FD ]
Line_30 $$ indexAnalyzer = analyzer-->Line_48 $$ builder.indexAnalyzer(indexAnalyzer)[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_3 $$ NamedAnalyzer indexAnalyzer = builder.fieldType().indexAnalyzer()[ FD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_28 $$ throw new MapperParsingException("analyzer [" + propNode.toString() + "] not found for field [" + name + "]")[ FD ]
Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0-->Line_31 $$ iterator.remove()[ CD ]
Line_15 $$ if (propName.equals("store_term_vector_offsets")) -->Line_18 $$ if (propName.equals("store_term_vector_positions")) [ CD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_16 $$ builder.storeTermVectorOffsets(nodeBooleanValue(propNode))[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_23 $$ iterator.remove()[ FD ]
Line_21 $$ if (propName.equals("store_term_vector_payloads")) -->Line_22 $$ builder.storeTermVectorPayloads(nodeBooleanValue(propNode))[ CD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_11 $$ iterator.remove()[ FD ]
Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()-->Line_45 $$ if (searchAnalyzer == null) [ FD ]
Line_8 $$ final Object propNode = entry.getValue()-->Line_35 $$ throw new MapperParsingException("analyzer [" + propNode.toString() + "] not found for field [" + name + "]")[ FD ]
Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()-->Line_46 $$ searchAnalyzer = indexAnalyzer[ FD ]
Line_5 $$ for (Iterator<Map.Entry<String, Object>> iterator = fieldNode.entrySet().iterator(); iterator.hasNext(); ) -->Line_20 $$ iterator.remove()[ FD ]
Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())-->Line_34 $$ if (analyzer == null) [ FD ]
Line_6 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_8 $$ final Object propNode = entry.getValue()[ FD ]
Line_4 $$ NamedAnalyzer searchAnalyzer = builder.fieldType().searchAnalyzer()-->Line_37 $$ searchAnalyzer = analyzer[ FD ]
Line_2 $$ private static void parseAnalyzersAndTermVectors(FieldMapper.Builder builder, String name, Map<String, Object> fieldNode, Mapper.TypeParser.ParserContext parserContext) -->Line_16 $$ builder.storeTermVectorOffsets(nodeBooleanValue(propNode))[ FD ]
Line_6 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_7 $$ final String propName = Strings.toUnderscoreCase(entry.getKey())[ FD ]
Line_26 $$ NamedAnalyzer analyzer = parserContext.analysisService().analyzer(propNode.toString())-->Line_27 $$ if (analyzer == null) [ FD ]
Line_21 $$ if (propName.equals("store_term_vector_payloads")) -->Line_24 $$ if (// for backcompat, reading old indexes, remove for v3.0[ CD ]
