Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()-->Line_22 $$ assertThat(((Map) XContentMapValues.extractValue("properties.title", mappingSource)).size(), equalTo(2))[ FD ]
Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_20 $$ assertThat(mappingMetaData, not(nullValue()))[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_25 $$ assertThat(titleFields.get("not_analyzed"), notNullValue())[ FD ]
Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ CD ]
Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()-->Line_16 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_28 $$ assertThat(((Map) titleFields.get("uncased")).get("analyzer").toString(), equalTo("whitespace"))[ CD ]
Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()[ FD ]
Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()-->Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()[ CD ]
Line_15 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.not_analyzed", "Multi fields")).get()-->Line_16 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_4 $$ GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()-->Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_9 $$ assertThat(titleFields.size(), equalTo(1))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()[ CD ]
Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_24 $$ assertThat(titleFields.size(), equalTo(2))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_29 $$ client().prepareIndex("my-index", "my-type", "1").setSource("title", "Multi fields").setRefresh(true).get()[ CD ]
Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()-->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_17 $$ assertAcked(client().admin().indices().preparePutMapping("my-index").setType("my-type").setSource(createPutMappingSource()))[ CD ]
Line_30 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.uncased", "Multi")).get()-->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_26 $$ assertThat(((Map) titleFields.get("not_analyzed")).get("index").toString(), equalTo("not_analyzed"))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_4 $$ GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_18 $$ getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_20 $$ assertThat(mappingMetaData, not(nullValue()))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_22 $$ assertThat(((Map) XContentMapValues.extractValue("properties.title", mappingSource)).size(), equalTo(2))[ CD ]
Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_26 $$ assertThat(((Map) titleFields.get("not_analyzed")).get("index").toString(), equalTo("not_analyzed"))[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_27 $$ assertThat(titleFields.get("uncased"), notNullValue())[ FD ]
Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ FD ]
Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_27 $$ assertThat(titleFields.get("uncased"), notNullValue())[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_30 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.uncased", "Multi")).get()[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_12 $$ client().prepareIndex("my-index", "my-type", "1").setSource("title", "Multi fields").setRefresh(true).get()[ CD ]
Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()-->Line_15 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.not_analyzed", "Multi fields")).get()[ FD ]
Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_20 $$ assertThat(mappingMetaData, not(nullValue()))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_16 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_27 $$ assertThat(titleFields.get("uncased"), notNullValue())[ CD ]
Line_4 $$ GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()-->Line_18 $$ getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_9 $$ assertThat(titleFields.size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_14 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ CD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_24 $$ assertThat(titleFields.size(), equalTo(2))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_6 $$ assertThat(mappingMetaData, not(nullValue()))[ CD ]
Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()-->Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ FD ]
Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()-->Line_14 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_25 $$ assertThat(titleFields.get("not_analyzed"), notNullValue())[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_26 $$ assertThat(((Map) titleFields.get("not_analyzed")).get("index").toString(), equalTo("not_analyzed"))[ CD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ FD ]
Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()-->Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_3 $$ assertAcked(client().admin().indices().prepareCreate("my-index").addMapping("my-type", createTypeSource()))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_15 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.not_analyzed", "Multi fields")).get()[ CD ]
Line_18 $$ getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()-->Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ FD ]
Line_19 $$ mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()[ FD ]
Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_28 $$ assertThat(((Map) titleFields.get("uncased")).get("analyzer").toString(), equalTo("whitespace"))[ FD ]
Line_4 $$ GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings("my-index").get()-->Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_24 $$ assertThat(titleFields.size(), equalTo(2))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_25 $$ assertThat(titleFields.get("not_analyzed"), notNullValue())[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_11 $$ assertThat(((Map) titleFields.get("not_analyzed")).get("index").toString(), equalTo("not_analyzed"))[ CD ]
Line_15 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.not_analyzed", "Multi fields")).get()-->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_28 $$ assertThat(((Map) titleFields.get("uncased")).get("analyzer").toString(), equalTo("whitespace"))[ FD ]
Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")-->Line_6 $$ assertThat(mappingMetaData, not(nullValue()))[ FD ]
Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()-->Line_21 $$ mappingSource = mappingMetaData.sourceAsMap()[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_11 $$ assertThat(((Map) titleFields.get("not_analyzed")).get("index").toString(), equalTo("not_analyzed"))[ FD ]
Line_13 $$ SearchResponse searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title", "multi")).get()-->Line_30 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.uncased", "Multi")).get()[ FD ]
Line_8 $$ Map titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))-->Line_10 $$ assertThat(titleFields.get("not_analyzed"), notNullValue())[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_5 $$ MappingMetaData mappingMetaData = getMappingsResponse.mappings().get("my-index").get("my-type")[ CD ]
Line_15 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.not_analyzed", "Multi fields")).get()-->Line_30 $$ searchResponse = client().prepareSearch("my-index").setQuery(matchQuery("title.uncased", "Multi")).get()[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_10 $$ assertThat(titleFields.get("not_analyzed"), notNullValue())[ CD ]
Line_7 $$ Map<String, Object> mappingSource = mappingMetaData.sourceAsMap()-->Line_22 $$ assertThat(((Map) XContentMapValues.extractValue("properties.title", mappingSource)).size(), equalTo(2))[ FD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_31 $$ assertThat(searchResponse.getHits().totalHits(), equalTo(1l))[ CD ]
Line_2 $$ public void testMultiFields() throws Exception -->Line_23 $$ titleFields = ((Map) XContentMapValues.extractValue("properties.title.fields", mappingSource))[ CD ]
