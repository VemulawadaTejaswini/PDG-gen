Line_17 $$ if (r instanceof PsiLiteralExpression && g instanceof PsiLiteralExpression && b instanceof PsiLiteralExpression) -->Line_18 $$ final Object red = JavaConstantExpressionEvaluator.computeConstantExpression(r, false)[ CD ]
Line_35 $$ if (e instanceof PsiLiteralExpression) -->Line_36 $$ final Object literal = JavaConstantExpressionEvaluator.computeConstantExpression(e, false)[ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_4 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ CD ]
Line_36 $$ final Object literal = JavaConstantExpressionEvaluator.computeConstantExpression(e, false)-->Line_39 $$ int num = Integer.parseInt(literal.toString())[ FD ]
Line_5 $$ final PsiClass grayClass = facade.findClass(Gray.class.getName(), GlobalSearchScope.allScope(project))-->Line_12 $$ if (!facade.getResolveHelper().isAccessible(grayClass, expression, grayClass))[ FD ]
Line_3 $$ final Project project = manager.getProject()-->Line_5 $$ final PsiClass grayClass = facade.findClass(Gray.class.getName(), GlobalSearchScope.allScope(project))[ FD ]
Line_20 $$ final Object blue = JavaConstantExpressionEvaluator.computeConstantExpression(b, false)-->Line_25 $$ int bb = Integer.parseInt(blue.toString())[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_27 $$ return manager.createProblemDescriptor(expression, "Convert to Gray._" + rr, new ConvertToGrayQuickFix(rr), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ final Project project = manager.getProject()[ FD ]
Line_18 $$ final Object red = JavaConstantExpressionEvaluator.computeConstantExpression(r, false)-->Line_21 $$ if (NullUtils.notNull(red, green, blue)) [ FD ]
Line_12 $$ if (!facade.getResolveHelper().isAccessible(grayClass, expression, grayClass))-->Line_13 $$ return null[ CD ]
Line_19 $$ final Object green = JavaConstantExpressionEvaluator.computeConstantExpression(g, false)-->Line_21 $$ if (NullUtils.notNull(red, green, blue)) [ FD ]
Line_26 $$ if (rr == gg && gg == bb && 0 <= rr && rr < 256) -->Line_27 $$ return manager.createProblemDescriptor(expression, "Convert to Gray._" + rr, new ConvertToGrayQuickFix(rr), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ CD ]
Line_34 $$ final PsiExpression e = expressions[0]-->Line_35 $$ if (e instanceof PsiLiteralExpression) [ FD ]
Line_20 $$ final Object blue = JavaConstantExpressionEvaluator.computeConstantExpression(b, false)-->Line_21 $$ if (NullUtils.notNull(red, green, blue)) [ FD ]
Line_34 $$ final PsiExpression e = expressions[0]-->Line_36 $$ final Object literal = JavaConstantExpressionEvaluator.computeConstantExpression(e, false)[ FD ]
Line_6 $$ final PsiType type = expression.getType()-->Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) [ FD ]
Line_4 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_12 $$ if (!facade.getResolveHelper().isAccessible(grayClass, expression, grayClass))[ FD ]
Line_15 $$ final PsiExpression g = expressions[1]-->Line_19 $$ final Object green = JavaConstantExpressionEvaluator.computeConstantExpression(g, false)[ FD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_17 $$ if (r instanceof PsiLiteralExpression && g instanceof PsiLiteralExpression && b instanceof PsiLiteralExpression) [ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_7 $$ if (type != null && grayClass != null) [ CD ]
Line_16 $$ final PsiExpression b = expressions[2]-->Line_20 $$ final Object blue = JavaConstantExpressionEvaluator.computeConstantExpression(b, false)[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_6 $$ final PsiType type = expression.getType()[ FD ]
Line_33 $$ if (expressions.length == 1 && "com.intellij.ui.Gray".equals(type.getCanonicalText())) -->Line_35 $$ if (e instanceof PsiLiteralExpression) [ CD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_12 $$ if (!facade.getResolveHelper().isAccessible(grayClass, expression, grayClass))[ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_8 $$ final PsiExpressionList arguments = expression.getArgumentList()[ FD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_14 $$ final PsiExpression r = expressions[0][ CD ]
Line_35 $$ if (e instanceof PsiLiteralExpression) -->Line_37 $$ if (literal != null) [ CD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_33 $$ if (expressions.length == 1 && "com.intellij.ui.Gray".equals(type.getCanonicalText())) [ CD ]
Line_14 $$ final PsiExpression r = expressions[0]-->Line_18 $$ final Object red = JavaConstantExpressionEvaluator.computeConstantExpression(r, false)[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_12 $$ if (!facade.getResolveHelper().isAccessible(grayClass, expression, grayClass))[ FD ]
Line_3 $$ final Project project = manager.getProject()-->Line_4 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ FD ]
Line_9 $$ if (arguments != null) -->Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) [ CD ]
Line_36 $$ final Object literal = JavaConstantExpressionEvaluator.computeConstantExpression(e, false)-->Line_37 $$ if (literal != null) [ FD ]
Line_4 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_5 $$ final PsiClass grayClass = facade.findClass(Gray.class.getName(), GlobalSearchScope.allScope(project))[ FD ]
Line_7 $$ if (type != null && grayClass != null) -->Line_9 $$ if (arguments != null) [ CD ]
Line_6 $$ final PsiType type = expression.getType()-->Line_33 $$ if (expressions.length == 1 && "com.intellij.ui.Gray".equals(type.getCanonicalText())) [ FD ]
Line_33 $$ if (expressions.length == 1 && "com.intellij.ui.Gray".equals(type.getCanonicalText())) -->Line_34 $$ final PsiExpression e = expressions[0][ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_6 $$ final PsiType type = expression.getType()[ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_5 $$ final PsiClass grayClass = facade.findClass(Gray.class.getName(), GlobalSearchScope.allScope(project))[ CD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_15 $$ final PsiExpression g = expressions[1][ CD ]
Line_40 $$ if (0 <= num && num < 256) -->Line_41 $$ return manager.createProblemDescriptor(expression, "Convert to Gray_" + num, new ConvertToGrayQuickFix(num), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ CD ]
Line_7 $$ if (type != null && grayClass != null) -->Line_8 $$ final PsiExpressionList arguments = expression.getArgumentList()[ CD ]
Line_17 $$ if (r instanceof PsiLiteralExpression && g instanceof PsiLiteralExpression && b instanceof PsiLiteralExpression) -->Line_19 $$ final Object green = JavaConstantExpressionEvaluator.computeConstantExpression(g, false)[ CD ]
Line_17 $$ if (r instanceof PsiLiteralExpression && g instanceof PsiLiteralExpression && b instanceof PsiLiteralExpression) -->Line_20 $$ final Object blue = JavaConstantExpressionEvaluator.computeConstantExpression(b, false)[ CD ]
Line_18 $$ final Object red = JavaConstantExpressionEvaluator.computeConstantExpression(r, false)-->Line_23 $$ int rr = Integer.parseInt(red.toString())[ FD ]
Line_11 $$ if (expressions.length == 3 && "java.awt.Color".equals(type.getCanonicalText())) -->Line_16 $$ final PsiExpression b = expressions[2][ CD ]
Line_8 $$ final PsiExpressionList arguments = expression.getArgumentList()-->Line_9 $$ if (arguments != null) [ FD ]
Line_8 $$ final PsiExpressionList arguments = expression.getArgumentList()-->Line_10 $$ final PsiExpression[] expressions = arguments.getExpressions()[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ final Project project = manager.getProject()[ CD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_41 $$ return manager.createProblemDescriptor(expression, "Convert to Gray_" + num, new ConvertToGrayQuickFix(num), ProblemHighlightType.GENERIC_ERROR_OR_WARNING, isOnTheFly)[ FD ]
Line_19 $$ final Object green = JavaConstantExpressionEvaluator.computeConstantExpression(g, false)-->Line_24 $$ int gg = Integer.parseInt(green.toString())[ FD ]
Line_2 $$ private static ProblemDescriptor checkNewExpression(PsiNewExpression expression, InspectionManager manager, boolean isOnTheFly) -->Line_50 $$ return null[ CD ]
Line_17 $$ if (r instanceof PsiLiteralExpression && g instanceof PsiLiteralExpression && b instanceof PsiLiteralExpression) -->Line_21 $$ if (NullUtils.notNull(red, green, blue)) [ CD ]
Line_9 $$ if (arguments != null) -->Line_10 $$ final PsiExpression[] expressions = arguments.getExpressions()[ CD ]
