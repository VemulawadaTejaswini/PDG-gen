Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_59 $$ sb.append("[").append(l.size()).append("][ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append("long[").append(l.length).append("][ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append("}")[ FD ]
Line_16 $$ if (primitiveType == Integer.TYPE) -->Line_17 $$ int[] l = (int[]) value[ CD ]
Line_19 $$ for (int j = 0; j < l.length; j++) -->Line_23 $$ sb.append(stringValueOf(l[j]))[ CD ]
Line_16 $$ if (primitiveType == Integer.TYPE) -->Line_25 $$ sb.append("}")[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_44 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_41 $$ if (!isNested) -->Line_42 $$ sb.append(value.getClass().getComponentType().getName())[ CD ]
Line_46 $$ for (Object object : l) -->Line_51 $$ sb.append(stringValueOf(object, true))[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_68 $$ sb.append("}")[ FD ]
Line_16 $$ if (primitiveType == Integer.TYPE) -->Line_26 $$ if (primitiveType == Long.TYPE) [ CD ]
Line_15 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_37 $$ throw new RuntimeException("Please implement support for type " + primitiveType.getName() + " in ExpressionTestCase.stringValueOf()")[ FD ]
Line_15 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_16 $$ if (primitiveType == Integer.TYPE) [ FD ]
Line_29 $$ for (int j = 0; j < l.length; j++) -->Line_30 $$ if (j > 0) [ CD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_55 $$ List<Object> l = Arrays.asList((Object[]) value)[ CD ]
Line_45 $$ int i = 0-->Line_50 $$ i++[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append("}")[ FD ]
Line_47 $$ if (i > 0) -->Line_48 $$ sb.append(",")[ CD ]
Line_26 $$ if (primitiveType == Long.TYPE) -->Line_29 $$ for (int j = 0; j < l.length; j++) [ CD ]
Line_45 $$ int i = 0-->Line_62 $$ if (i > 0) [ FD ]
Line_12 $$ if (value.getClass().isArray()) -->Line_13 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_19 $$ for (int j = 0; j < l.length; j++) -->Line_29 $$ for (int j = 0; j < l.length; j++) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_21 $$ sb.append(",")[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ sb.append(",")[ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_68 $$ sb.append("}")[ CD ]
Line_26 $$ if (primitiveType == Long.TYPE) -->Line_28 $$ sb.append("long[").append(l.length).append("][ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append(stringValueOf(object, true))[ FD ]
Line_29 $$ for (int j = 0; j < l.length; j++) -->Line_30 $$ if (j > 0) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_19 $$ for (int j = 0; j < l.length; j++) -->Line_30 $$ if (j > 0) [ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(stringValueOf(l[j]))[ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_41 $$ if (!isNested) [ CD ]
Line_45 $$ int i = 0-->Line_47 $$ if (i > 0) [ FD ]
Line_14 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_39 $$ if (value.getClass().getComponentType().isArray()) [ CD ]
Line_15 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_26 $$ if (primitiveType == Long.TYPE) [ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_44 $$ sb.append("[").append(l.size()).append("][ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_59 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_29 $$ for (int j = 0; j < l.length; j++) -->Line_33 $$ sb.append(stringValueOf(l[j]))[ CD ]
Line_62 $$ if (i > 0) -->Line_63 $$ sb.append(",")[ CD ]
Line_12 $$ if (value.getClass().isArray()) -->Line_14 $$ if (value.getClass().getComponentType().isPrimitive()) [ CD ]
Line_17 $$ int[] l = (int[]) value-->Line_59 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_40 $$ List<Object> l = Arrays.asList((Object[]) value)[ CD ]
Line_45 $$ int i = 0-->Line_65 $$ i++[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append("int[").append(l.length).append("][ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(",")[ FD ]
Line_19 $$ for (int j = 0; j < l.length; j++) -->Line_20 $$ if (j > 0) [ FD ]
Line_14 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_15 $$ Class<?> primitiveType = value.getClass().getComponentType()[ CD ]
Line_14 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_16 $$ if (primitiveType == Integer.TYPE) [ CD ]
Line_12 $$ if (value.getClass().isArray()) -->Line_70 $$ return sb.toString()[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append("}")[ FD ]
Line_56 $$ if (!isNested) -->Line_57 $$ sb.append(value.getClass().getComponentType().getName())[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(stringValueOf(l[j]))[ FD ]
Line_20 $$ if (j > 0) -->Line_21 $$ sb.append(",")[ CD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_53 $$ sb.append("}")[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_66 $$ sb.append(stringValueOf(object))[ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_56 $$ if (!isNested) [ CD ]
Line_17 $$ int[] l = (int[]) value-->Line_44 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_30 $$ if (j > 0) -->Line_31 $$ sb.append(",")[ CD ]
Line_26 $$ if (primitiveType == Long.TYPE) -->Line_35 $$ sb.append("}")[ CD ]
Line_12 $$ if (value.getClass().isArray()) -->Line_72 $$ return value.toString()[ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_70 $$ return sb.toString()[ FD ]
Line_46 $$ for (Object object : l) -->Line_66 $$ sb.append(stringValueOf(object))[ FD ]
Line_39 $$ if (value.getClass().getComponentType().isArray()) -->Line_45 $$ int i = 0[ CD ]
Line_16 $$ if (primitiveType == Integer.TYPE) -->Line_19 $$ for (int j = 0; j < l.length; j++) [ CD ]
Line_16 $$ if (primitiveType == Integer.TYPE) -->Line_18 $$ sb.append("int[").append(l.length).append("][ CD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_48 $$ sb.append(",")[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_19 $$ for (int j = 0; j < l.length; j++) -->Line_20 $$ if (j > 0) [ CD ]
