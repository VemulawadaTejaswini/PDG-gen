Line_27 $$ if (FailureDetector.instance.isAlive(neighbour)) -->Line_30 $$ MessagingService.instance().sendRR(msg, neighbour, callback, TimeUnit.HOURS.toMillis(1), true)[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_24 $$ List<UUID> cfIds = new ArrayList(columnFamilyStores.size())[ FD ]
Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())-->Line_38 $$ prepareLatch.await(1, TimeUnit.HOURS)[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_4 $$ registerParentRepairSession(parentRepairSession, columnFamilyStores, options.getRanges(), options.isIncremental(), timestamp, options.isGlobal())[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_3 $$ long timestamp = System.currentTimeMillis()[ CD ]
Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())-->Line_11 $$ prepareLatch.countDown()[ FD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_20 $$ failedNodes.add(from.getHostAddress())[ FD ]
Line_7 $$ final Set<String> failedNodes = Collections.synchronizedSet(new HashSet<String>())-->Line_20 $$ failedNodes.add(from.getHostAddress())[ FD ]
Line_7 $$ final Set<String> failedNodes = Collections.synchronizedSet(new HashSet<String>())-->Line_33 $$ failedNodes.add(neighbour.getHostAddress())[ FD ]
Line_3 $$ long timestamp = System.currentTimeMillis()-->Line_4 $$ registerParentRepairSession(parentRepairSession, columnFamilyStores, options.getRanges(), options.isIncremental(), timestamp, options.isGlobal())[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_44 $$ parentRepairSessions.remove(parentRepairSession)[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() [ CD ]
Line_6 $$ final AtomicBoolean status = new AtomicBoolean(true)-->Line_19 $$ status.set(false)[ FD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_11 $$ prepareLatch.countDown()[ CD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_19 $$ status.set(false)[ CD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_30 $$ MessagingService.instance().sendRR(msg, neighbour, callback, TimeUnit.HOURS.toMillis(1), true)[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_43 $$ if (!status.get()) [ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_6 $$ final AtomicBoolean status = new AtomicBoolean(true)[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())[ FD ]
Line_27 $$ if (FailureDetector.instance.isAlive(neighbour)) -->Line_29 $$ MessageOut<RepairMessage> msg = message.createMessage()[ CD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_21 $$ prepareLatch.countDown()[ CD ]
Line_27 $$ if (FailureDetector.instance.isAlive(neighbour)) -->Line_34 $$ prepareLatch.countDown()[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_47 $$ return parentRepairSession[ CD ]
Line_27 $$ if (FailureDetector.instance.isAlive(neighbour)) -->Line_32 $$ status.set(false)[ CD ]
Line_27 $$ if (FailureDetector.instance.isAlive(neighbour)) -->Line_33 $$ failedNodes.add(neighbour.getHostAddress())[ CD ]
Line_7 $$ final Set<String> failedNodes = Collections.synchronizedSet(new HashSet<String>())-->Line_41 $$ throw new RuntimeException("Did not get replies from all endpoints. List of failed endpoint(s): " + failedNodes.toString(), e)[ FD ]
Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())-->Line_34 $$ prepareLatch.countDown()[ FD ]
Line_43 $$ if (!status.get()) -->Line_44 $$ parentRepairSessions.remove(parentRepairSession)[ CD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_40 $$ parentRepairSessions.remove(parentRepairSession)[ FD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_15 $$ return false[ CD ]
Line_6 $$ final AtomicBoolean status = new AtomicBoolean(true)-->Line_32 $$ status.set(false)[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_4 $$ registerParentRepairSession(parentRepairSession, columnFamilyStores, options.getRanges(), options.isIncremental(), timestamp, options.isGlobal())[ FD ]
Line_5 $$ final CountDownLatch prepareLatch = new CountDownLatch(endpoints.size())-->Line_21 $$ prepareLatch.countDown()[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_7 $$ final Set<String> failedNodes = Collections.synchronizedSet(new HashSet<String>())[ CD ]
Line_7 $$ final Set<String> failedNodes = Collections.synchronizedSet(new HashSet<String>())-->Line_45 $$ throw new RuntimeException("Did not get positive replies from all endpoints. List of failed endpoint(s): " + failedNodes.toString())[ FD ]
Line_2 $$ public synchronized UUID prepareForRepair(UUID parentRepairSession, Set<InetAddress> endpoints, RepairOption options, List<ColumnFamilyStore> columnFamilyStores) -->Line_28 $$ PrepareMessage message = new PrepareMessage(parentRepairSession, cfIds, options.getRanges(), options.isIncremental(), timestamp, options.isGlobal())[ FD ]
Line_8 $$ IAsyncCallbackWithFailure callback = new IAsyncCallbackWithFailure() -->Line_20 $$ failedNodes.add(from.getHostAddress())[ CD ]
Line_6 $$ final AtomicBoolean status = new AtomicBoolean(true)-->Line_43 $$ if (!status.get()) [ FD ]
