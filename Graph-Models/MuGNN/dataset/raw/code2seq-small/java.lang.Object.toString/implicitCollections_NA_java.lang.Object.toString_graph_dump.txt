Line_2 $$ public void implicitCollections() throws Exception -->Line_9 $$ marshaller.setAliases(aliases)[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_17 $$ assertXpathNotExists("/flights/strings", result)[ CD ]
Line_6 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()-->Line_9 $$ marshaller.setAliases(aliases)[ FD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_16 $$ assertXpathExists("/flights/flight", result)[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_11 $$ marshaller.setImplicitCollections(implicitCollections)[ CD ]
Line_6 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()-->Line_7 $$ aliases.put("flight", Flight.class)[ FD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_4 $$ flights.getFlights().add(flight)[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_18 $$ assertXpathExists("/flights/string", result)[ CD ]
Line_14 $$ String result = writer.toString()-->Line_16 $$ assertXpathExists("/flights/flight", result)[ FD ]
Line_3 $$ Flights flights = new Flights()-->Line_13 $$ marshaller.marshal(flights, new StreamResult(writer))[ FD ]
Line_3 $$ Flights flights = new Flights()-->Line_5 $$ flights.getStrings().add("42")[ FD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_5 $$ flights.getStrings().add("42")[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_6 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_10 $$ Map implicitCollections = Collections.singletonMap(Flights.class, "flights,strings")[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_15 $$ assertXpathNotExists("/flights/flights", result)[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_14 $$ String result = writer.toString()[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_13 $$ marshaller.marshal(flights, new StreamResult(writer))[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_12 $$ Writer writer = new StringWriter()[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_3 $$ Flights flights = new Flights()[ CD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_8 $$ aliases.put("flights", Flights.class)[ CD ]
Line_3 $$ Flights flights = new Flights()-->Line_4 $$ flights.getFlights().add(flight)[ FD ]
Line_14 $$ String result = writer.toString()-->Line_17 $$ assertXpathNotExists("/flights/strings", result)[ FD ]
Line_14 $$ String result = writer.toString()-->Line_15 $$ assertXpathNotExists("/flights/flights", result)[ FD ]
Line_2 $$ public void implicitCollections() throws Exception -->Line_7 $$ aliases.put("flight", Flight.class)[ CD ]
Line_14 $$ String result = writer.toString()-->Line_18 $$ assertXpathExists("/flights/string", result)[ FD ]
Line_6 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()-->Line_8 $$ aliases.put("flights", Flights.class)[ FD ]
Line_10 $$ Map implicitCollections = Collections.singletonMap(Flights.class, "flights,strings")-->Line_11 $$ marshaller.setImplicitCollections(implicitCollections)[ FD ]
Line_12 $$ Writer writer = new StringWriter()-->Line_14 $$ String result = writer.toString()[ FD ]
