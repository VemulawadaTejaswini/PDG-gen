Line_6 $$ operationClass = cl-->Line_16 $$ Method totalProgress = GitStandardProgressAnalyzer.class.getDeclaredMethod("updateTotalProgress", operationClass)[ FD ]
Line_2 $$ private double getCurrentTotalProgressAtTheEnd() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException -->Line_18 $$ return (Double) totalProgress.invoke(myProgressModifier, resolvingDeltasOperation)[ CD ]
Line_2 $$ private double getCurrentTotalProgressAtTheEnd() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException -->Line_9 $$ Object resolvingDeltasOperation = null[ CD ]
Line_2 $$ private double getCurrentTotalProgressAtTheEnd() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException -->Line_3 $$ Class operationClass = null[ CD ]
Line_9 $$ Object resolvingDeltasOperation = null-->Line_18 $$ return (Double) totalProgress.invoke(myProgressModifier, resolvingDeltasOperation)[ FD ]
Line_4 $$ for (Class cl : GitStandardProgressAnalyzer.class.getDeclaredClasses()) -->Line_6 $$ operationClass = cl[ FD ]
Line_11 $$ for (Object enumConstant : operationClass.getEnumConstants()) -->Line_13 $$ resolvingDeltasOperation = enumConstant[ FD ]
Line_13 $$ resolvingDeltasOperation = enumConstant-->Line_18 $$ return (Double) totalProgress.invoke(myProgressModifier, resolvingDeltasOperation)[ FD ]
Line_16 $$ Method totalProgress = GitStandardProgressAnalyzer.class.getDeclaredMethod("updateTotalProgress", operationClass)-->Line_17 $$ totalProgress.setAccessible(true)[ FD ]
Line_9 $$ Object resolvingDeltasOperation = null-->Line_13 $$ resolvingDeltasOperation = enumConstant[ FD ]
Line_3 $$ Class operationClass = null-->Line_16 $$ Method totalProgress = GitStandardProgressAnalyzer.class.getDeclaredMethod("updateTotalProgress", operationClass)[ FD ]
Line_6 $$ operationClass = cl-->Line_11 $$ for (Object enumConstant : operationClass.getEnumConstants()) [ FD ]
Line_4 $$ for (Class cl : GitStandardProgressAnalyzer.class.getDeclaredClasses()) -->Line_5 $$ if (cl.getName().endsWith("Operation")) [ FD ]
Line_2 $$ private double getCurrentTotalProgressAtTheEnd() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException -->Line_17 $$ totalProgress.setAccessible(true)[ CD ]
Line_3 $$ Class operationClass = null-->Line_6 $$ operationClass = cl[ FD ]
Line_5 $$ if (cl.getName().endsWith("Operation")) -->Line_6 $$ operationClass = cl[ CD ]
Line_2 $$ private double getCurrentTotalProgressAtTheEnd() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException -->Line_16 $$ Method totalProgress = GitStandardProgressAnalyzer.class.getDeclaredMethod("updateTotalProgress", operationClass)[ CD ]
Line_16 $$ Method totalProgress = GitStandardProgressAnalyzer.class.getDeclaredMethod("updateTotalProgress", operationClass)-->Line_18 $$ return (Double) totalProgress.invoke(myProgressModifier, resolvingDeltasOperation)[ FD ]
Line_11 $$ for (Object enumConstant : operationClass.getEnumConstants()) -->Line_12 $$ if (enumConstant.toString() == "RESOLVING_DELTAS") [ FD ]
Line_3 $$ Class operationClass = null-->Line_11 $$ for (Object enumConstant : operationClass.getEnumConstants()) [ FD ]
Line_12 $$ if (enumConstant.toString() == "RESOLVING_DELTAS") -->Line_13 $$ resolvingDeltasOperation = enumConstant[ CD ]
