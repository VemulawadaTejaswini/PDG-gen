Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()[ CD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_4 $$ updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_43 $$ Set<String> closeIndices = new HashSet()[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_51 $$ if (closeIndices.size() > 0 && closeSettings.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) != null) [ CD ]
Line_43 $$ Set<String> closeIndices = new HashSet()-->Line_51 $$ if (closeIndices.size() > 0 && closeSettings.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) != null) [ FD ]
Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())-->Line_60 $$ metaDataBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_104 $$ if (!openIndices.isEmpty()) [ CD ]
Line_19 $$ if (error != null) -->Line_20 $$ errors.add("[" + setting.getKey() + "] - " + error)[ CD ]
Line_84 $$ Boolean updateWriteBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_WRITE, null)-->Line_85 $$ if (updateWriteBlock != null) [ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_100 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_80 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ FD ]
Line_113 $$ RoutingAllocation.Result routingResult = allocationService.reroute(updatedState, "settings update")-->Line_114 $$ updatedState = ClusterState.builder(updatedState).routingResult(routingResult).build()[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_45 $$ if (currentState.metaData().index(index).getState() == IndexMetaData.State.OPEN) [ FD ]
Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)-->Line_58 $$ if (updatedNumberOfReplicas != -1) [ FD ]
Line_45 $$ if (currentState.metaData().index(index).getState() == IndexMetaData.State.OPEN) -->Line_46 $$ openIndices.add(index)[ CD ]
Line_94 $$ Boolean updateReadBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_READ, null)-->Line_95 $$ if (updateReadBlock != null) [ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())[ FD ]
Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)-->Line_59 $$ routingTableBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_48 $$ closeIndices.add(index)[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_80 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ FD ]
Line_67 $$ if (updatedReadOnly) -->Line_68 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ CD ]
Line_24 $$ if (!errors.isEmpty()) -->Line_26 $$ return[ CD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_78 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ FD ]
Line_45 $$ if (currentState.metaData().index(index).getState() == IndexMetaData.State.OPEN) -->Line_48 $$ closeIndices.add(index)[ CD ]
Line_44 $$ for (String index : actualIndices) -->Line_68 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())[ CD ]
Line_29 $$ for (String removedSetting : removedSettings) -->Line_30 $$ updatedSettingsBuilder.remove(removedSetting)[ FD ]
Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())-->Line_59 $$ routingTableBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_11 $$ final Settings closeSettings = updatedSettingsBuilder.build()[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())[ CD ]
Line_58 $$ if (updatedNumberOfReplicas != -1) -->Line_59 $$ routingTableBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())[ FD ]
Line_108 $$ if (!closeIndices.isEmpty()) -->Line_109 $$ String[] indices = closeIndices.toArray(new String[closeIndices.size()])[ CD ]
Line_12 $$ final Set<String> removedSettings = new HashSet()-->Line_16 $$ removedSettings.add(setting.getKey())[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_98 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_70 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ FD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_14 $$ for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_65 $$ if (updatedReadOnly != null) [ CD ]
Line_87 $$ if (updateWriteBlock) -->Line_90 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ CD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_98 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_13 $$ final Set<String> errors = new HashSet()[ CD ]
Line_13 $$ final Set<String> errors = new HashSet()-->Line_24 $$ if (!errors.isEmpty()) [ FD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_64 $$ Boolean updatedReadOnly = openSettings.getAsBoolean(IndexMetaData.SETTING_READ_ONLY, null)[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) [ CD ]
Line_14 $$ for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) -->Line_16 $$ removedSettings.add(setting.getKey())[ FD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_74 $$ Boolean updateMetaDataBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_METADATA, null)[ FD ]
Line_43 $$ Set<String> closeIndices = new HashSet()-->Line_52 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "Can't update [%s] on closed indices [%s] - can leave index in an unopenable state", IndexMetaData.SETTING_NUMBER_OF_REPLICAS, closeIndices))[ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_68 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_7 $$ listener.onFailure(new IllegalArgumentException("can't change the number of shards for an index"))[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_46 $$ openIndices.add(index)[ FD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_45 $$ if (currentState.metaData().index(index).getState() == IndexMetaData.State.OPEN) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())[ FD ]
Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())-->Line_106 $$ metaDataBuilder.updateSettings(openSettings, indices)[ FD ]
Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())-->Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_90 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ FD ]
Line_6 $$ if (key.equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) -->Line_8 $$ return[ CD ]
Line_58 $$ if (updatedNumberOfReplicas != -1) -->Line_61 $$ logger.info("updating number_of_replicas to [[ CD ]
Line_14 $$ for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) -->Line_15 $$ if (!dynamicSettings.hasDynamicSetting(setting.getKey())) [ FD ]
Line_15 $$ if (!dynamicSettings.hasDynamicSetting(setting.getKey())) -->Line_19 $$ if (error != null) [ CD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()[ CD ]
Line_87 $$ if (updateWriteBlock) -->Line_88 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ CD ]
Line_42 $$ Set<String> openIndices = new HashSet()-->Line_104 $$ if (!openIndices.isEmpty()) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_64 $$ Boolean updatedReadOnly = openSettings.getAsBoolean(IndexMetaData.SETTING_READ_ONLY, null)[ CD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_88 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_88 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_40 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())[ CD ]
Line_12 $$ final Set<String> removedSettings = new HashSet()-->Line_28 $$ if (!removedSettings.isEmpty()) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_75 $$ if (updateMetaDataBlock != null) [ CD ]
Line_44 $$ for (String index : actualIndices) -->Line_100 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ FD ]
Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)-->Line_60 $$ metaDataBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_84 $$ Boolean updateWriteBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_WRITE, null)[ CD ]
Line_14 $$ for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) -->Line_18 $$ String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue(), clusterService.state())[ FD ]
Line_97 $$ if (updateReadBlock) -->Line_100 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ CD ]
Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())-->Line_60 $$ metaDataBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_42 $$ Set<String> openIndices = new HashSet()-->Line_105 $$ String[] indices = openIndices.toArray(new String[openIndices.size()])[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_115 $$ return updatedState[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_36 $$ return new ClusterStateUpdateResponse(acknowledged)[ CD ]
Line_11 $$ final Settings closeSettings = updatedSettingsBuilder.build()-->Line_110 $$ metaDataBuilder.updateSettings(closeSettings, indices)[ FD ]
Line_42 $$ Set<String> openIndices = new HashSet()-->Line_46 $$ openIndices.add(index)[ FD ]
Line_105 $$ String[] indices = openIndices.toArray(new String[openIndices.size()])-->Line_106 $$ metaDataBuilder.updateSettings(openSettings, indices)[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_4 $$ updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX)[ FD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_94 $$ Boolean updateReadBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_READ, null)[ FD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_84 $$ Boolean updateWriteBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_WRITE, null)[ FD ]
Line_12 $$ final Set<String> removedSettings = new HashSet()-->Line_54 $$ if (!removedSettings.isEmpty() && !openIndices.isEmpty()) [ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_4 $$ updatedSettingsBuilder.put(request.settings()).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX)[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_40 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())[ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_90 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_WRITE_BLOCK)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_108 $$ if (!closeIndices.isEmpty()) [ CD ]
Line_12 $$ final Set<String> removedSettings = new HashSet()-->Line_55 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "Can't update non dynamic settings[%s] for open indices [%s]", removedSettings, openIndices))[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_94 $$ Boolean updateReadBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_READ, null)[ CD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_24 $$ if (!errors.isEmpty()) [ CD ]
Line_58 $$ if (updatedNumberOfReplicas != -1) -->Line_60 $$ metaDataBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)[ CD ]
Line_77 $$ if (updateMetaDataBlock) -->Line_80 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ CD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_25 $$ listener.onFailure(new IllegalArgumentException("can't process the settings: " + errors.toString()))[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_12 $$ final Set<String> removedSettings = new HashSet()[ CD ]
Line_40 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())-->Line_59 $$ routingTableBuilder.updateNumberOfReplicas(updatedNumberOfReplicas, actualIndices)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_58 $$ if (updatedNumberOfReplicas != -1) [ CD ]
Line_42 $$ Set<String> openIndices = new HashSet()-->Line_54 $$ if (!removedSettings.isEmpty() && !openIndices.isEmpty()) [ FD ]
Line_108 $$ if (!closeIndices.isEmpty()) -->Line_110 $$ metaDataBuilder.updateSettings(closeSettings, indices)[ CD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_95 $$ if (updateReadBlock != null) [ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_114 $$ updatedState = ClusterState.builder(updatedState).routingResult(routingResult).build()[ CD ]
Line_105 $$ String[] indices = openIndices.toArray(new String[openIndices.size()])-->Line_110 $$ metaDataBuilder.updateSettings(closeSettings, indices)[ FD ]
Line_40 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder(currentState.routingTable())-->Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()[ FD ]
Line_44 $$ for (String index : actualIndices) -->Line_78 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ FD ]
Line_18 $$ String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue(), clusterService.state())-->Line_19 $$ if (error != null) [ FD ]
Line_43 $$ Set<String> closeIndices = new HashSet()-->Line_108 $$ if (!closeIndices.isEmpty()) [ FD ]
Line_33 $$ final Settings openSettings = updatedSettingsBuilder.build()-->Line_106 $$ metaDataBuilder.updateSettings(openSettings, indices)[ FD ]
Line_63 $$ ClusterBlocks.Builder blocks = ClusterBlocks.builder().blocks(currentState.blocks())-->Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()[ FD ]
Line_15 $$ if (!dynamicSettings.hasDynamicSetting(setting.getKey())) -->Line_16 $$ removedSettings.add(setting.getKey())[ CD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_5 $$ for (String key : updatedSettingsBuilder.internalMap().keySet()) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_113 $$ RoutingAllocation.Result routingResult = allocationService.reroute(updatedState, "settings update")[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())[ CD ]
Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())-->Line_110 $$ metaDataBuilder.updateSettings(closeSettings, indices)[ FD ]
Line_24 $$ if (!errors.isEmpty()) -->Line_25 $$ listener.onFailure(new IllegalArgumentException("can't process the settings: " + errors.toString()))[ CD ]
Line_14 $$ for (Map.Entry<String, String> setting : updatedSettingsBuilder.internalMap().entrySet()) -->Line_20 $$ errors.add("[" + setting.getKey() + "] - " + error)[ FD ]
Line_13 $$ final Set<String> errors = new HashSet()-->Line_25 $$ listener.onFailure(new IllegalArgumentException("can't process the settings: " + errors.toString()))[ FD ]
Line_13 $$ final Set<String> errors = new HashSet()-->Line_20 $$ errors.add("[" + setting.getKey() + "] - " + error)[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_11 $$ final Settings closeSettings = updatedSettingsBuilder.build()[ CD ]
Line_5 $$ for (String key : updatedSettingsBuilder.internalMap().keySet()) -->Line_6 $$ if (key.equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) [ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_54 $$ if (!removedSettings.isEmpty() && !openIndices.isEmpty()) [ CD ]
Line_57 $$ int updatedNumberOfReplicas = openSettings.getAsInt(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, -1)-->Line_61 $$ logger.info("updating number_of_replicas to [[ FD ]
Line_67 $$ if (updatedReadOnly) -->Line_70 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ CD ]
Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()-->Line_114 $$ updatedState = ClusterState.builder(updatedState).routingResult(routingResult).build()[ FD ]
Line_2 $$ public void updateSettings(final UpdateSettingsClusterStateUpdateRequest request, final ActionListener<ClusterStateUpdateResponse> listener) -->Line_28 $$ if (!removedSettings.isEmpty()) [ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_85 $$ if (updateWriteBlock != null) [ CD ]
Line_97 $$ if (updateReadBlock) -->Line_98 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_READ_BLOCK)[ CD ]
Line_77 $$ if (updateMetaDataBlock) -->Line_78 $$ blocks.addIndexBlock(index, IndexMetaData.INDEX_METADATA_BLOCK)[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()[ CD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_41 $$ MetaData.Builder metaDataBuilder = MetaData.builder(currentState.metaData())[ FD ]
Line_43 $$ Set<String> closeIndices = new HashSet()-->Line_109 $$ String[] indices = closeIndices.toArray(new String[closeIndices.size()])[ FD ]
Line_64 $$ Boolean updatedReadOnly = openSettings.getAsBoolean(IndexMetaData.SETTING_READ_ONLY, null)-->Line_65 $$ if (updatedReadOnly != null) [ FD ]
Line_43 $$ Set<String> closeIndices = new HashSet()-->Line_48 $$ closeIndices.add(index)[ FD ]
Line_74 $$ Boolean updateMetaDataBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_METADATA, null)-->Line_75 $$ if (updateMetaDataBlock != null) [ FD ]
Line_104 $$ if (!openIndices.isEmpty()) -->Line_106 $$ metaDataBuilder.updateSettings(openSettings, indices)[ CD ]
Line_42 $$ Set<String> openIndices = new HashSet()-->Line_55 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "Can't update non dynamic settings[%s] for open indices [%s]", removedSettings, openIndices))[ FD ]
Line_104 $$ if (!openIndices.isEmpty()) -->Line_105 $$ String[] indices = openIndices.toArray(new String[openIndices.size()])[ CD ]
Line_15 $$ if (!dynamicSettings.hasDynamicSetting(setting.getKey())) -->Line_18 $$ String error = dynamicSettings.validateDynamicSetting(setting.getKey(), setting.getValue(), clusterService.state())[ CD ]
Line_39 $$ String[] actualIndices = indexNameExpressionResolver.concreteIndices(currentState, IndicesOptions.strictExpand(), request.indices())-->Line_61 $$ logger.info("updating number_of_replicas to [[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_74 $$ Boolean updateMetaDataBlock = openSettings.getAsBoolean(IndexMetaData.SETTING_BLOCKS_METADATA, null)[ CD ]
Line_3 $$ Settings.Builder updatedSettingsBuilder = Settings.settingsBuilder()-->Line_30 $$ updatedSettingsBuilder.remove(removedSetting)[ FD ]
Line_112 $$ ClusterState updatedState = ClusterState.builder(currentState).metaData(metaDataBuilder).routingTable(routingTableBuilder.build()).blocks(blocks).build()-->Line_113 $$ RoutingAllocation.Result routingResult = allocationService.reroute(updatedState, "settings update")[ FD ]
Line_6 $$ if (key.equals(IndexMetaData.SETTING_NUMBER_OF_SHARDS)) -->Line_7 $$ listener.onFailure(new IllegalArgumentException("can't change the number of shards for an index"))[ CD ]
Line_44 $$ for (String index : actualIndices) -->Line_70 $$ blocks.removeIndexBlock(index, IndexMetaData.INDEX_READ_ONLY_BLOCK)[ FD ]
Line_34 $$ clusterService.submitStateUpdateTask("update-settings", new AckedClusterStateUpdateTask<ClusterStateUpdateResponse>(Priority.URGENT, request, listener) -->Line_42 $$ Set<String> openIndices = new HashSet()[ CD ]
Line_11 $$ final Settings closeSettings = updatedSettingsBuilder.build()-->Line_51 $$ if (closeIndices.size() > 0 && closeSettings.get(IndexMetaData.SETTING_NUMBER_OF_REPLICAS) != null) [ FD ]
