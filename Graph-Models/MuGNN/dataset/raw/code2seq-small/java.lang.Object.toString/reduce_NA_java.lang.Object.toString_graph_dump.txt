Line_12 $$ Object v = outputs.next()-->Line_16 $$ output.collect(key, new Text(v.toString()))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_8 $$ aggregator.addNextValue(values.next())[ FD ]
Line_3 $$ String keyStr = key.toString()-->Line_5 $$ String type = keyStr.substring(0, pos)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_7 $$ while (values.hasNext()) [ CD ]
Line_6 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)-->Line_10 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_5 $$ String type = keyStr.substring(0, pos)[ CD ]
Line_13 $$ if (v instanceof Text) -->Line_16 $$ output.collect(key, new Text(v.toString()))[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_3 $$ String keyStr = key.toString()[ FD ]
Line_4 $$ int pos = keyStr.indexOf(ValueAggregatorDescriptor.TYPE_SEPARATOR)-->Line_5 $$ String type = keyStr.substring(0, pos)[ FD ]
Line_13 $$ if (v instanceof Text) -->Line_14 $$ output.collect(key, (Text) v)[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_6 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_10 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()[ CD ]
Line_3 $$ String keyStr = key.toString()-->Line_4 $$ int pos = keyStr.indexOf(ValueAggregatorDescriptor.TYPE_SEPARATOR)[ FD ]
Line_11 $$ while (outputs.hasNext()) -->Line_13 $$ if (v instanceof Text) [ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_3 $$ String keyStr = key.toString()[ CD ]
Line_5 $$ String type = keyStr.substring(0, pos)-->Line_6 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)[ FD ]
Line_10 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()-->Line_12 $$ Object v = outputs.next()[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_16 $$ output.collect(key, new Text(v.toString()))[ FD ]
Line_11 $$ while (outputs.hasNext()) -->Line_12 $$ Object v = outputs.next()[ CD ]
Line_7 $$ while (values.hasNext()) -->Line_8 $$ aggregator.addNextValue(values.next())[ CD ]
Line_6 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)-->Line_8 $$ aggregator.addNextValue(values.next())[ FD ]
Line_12 $$ Object v = outputs.next()-->Line_13 $$ if (v instanceof Text) [ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_14 $$ output.collect(key, (Text) v)[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_7 $$ while (values.hasNext()) [ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_11 $$ while (outputs.hasNext()) [ CD ]
Line_10 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()-->Line_11 $$ while (outputs.hasNext()) [ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_4 $$ int pos = keyStr.indexOf(ValueAggregatorDescriptor.TYPE_SEPARATOR)[ CD ]
