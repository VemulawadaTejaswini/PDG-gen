Line_14 $$ while (values.hasNext()) -->Line_15 $$ aggregator.addNextValue(values.next())[ CD ]
Line_12 $$ String type = keyStr.substring(0, pos)-->Line_13 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)[ FD ]
Line_13 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)-->Line_17 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()[ FD ]
Line_18 $$ while (outputs.hasNext()) -->Line_19 $$ Object v = outputs.next()[ CD ]
Line_19 $$ Object v = outputs.next()-->Line_23 $$ output.collect(key, new Text(v.toString()))[ FD ]
Line_19 $$ Object v = outputs.next()-->Line_20 $$ if (v instanceof Text) [ FD ]
Line_20 $$ if (v instanceof Text) -->Line_23 $$ output.collect(key, new Text(v.toString()))[ CD ]
Line_18 $$ while (outputs.hasNext()) -->Line_20 $$ if (v instanceof Text) [ CD ]
Line_17 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()-->Line_19 $$ Object v = outputs.next()[ FD ]
Line_17 $$ Iterator outputs = aggregator.getCombinerOutput().iterator()-->Line_18 $$ while (outputs.hasNext()) [ FD ]
Line_10 $$ String keyStr = key.toString()-->Line_11 $$ int pos = keyStr.indexOf(ValueAggregatorDescriptor.TYPE_SEPARATOR)[ FD ]
Line_11 $$ int pos = keyStr.indexOf(ValueAggregatorDescriptor.TYPE_SEPARATOR)-->Line_12 $$ String type = keyStr.substring(0, pos)[ FD ]
Line_20 $$ if (v instanceof Text) -->Line_21 $$ output.collect(key, (Text) v)[ CD ]
Line_10 $$ String keyStr = key.toString()-->Line_12 $$ String type = keyStr.substring(0, pos)[ FD ]
Line_13 $$ ValueAggregator aggregator = ValueAggregatorBaseDescriptor.generateValueAggregator(type)-->Line_15 $$ aggregator.addNextValue(values.next())[ FD ]
