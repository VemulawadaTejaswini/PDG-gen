Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_184 $$ newClusterState.status(ClusterState.ClusterStateStatus.APPLIED)[ FD ]
Line_92 $$ if (previousClusterState.metaData() != newClusterState.metaData()) -->Line_93 $$ builder.metaData(MetaData.builder(newClusterState.metaData()).version(newClusterState.metaData().version() + 1))[ CD ]
Line_61 $$ final ArrayList<UpdateTask<T>> proccessedListeners = new ArrayList()-->Line_154 $$ proccessedListeners.forEach( task -> task.listener.onFailure(task.source, t))[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_81 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_71 $$ if (previousClusterState == newClusterState) [ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_103 $$ ackListeners.add(new AckCountDownListener(ackedListener, newClusterState.version(), newClusterState.nodes(), threadPool))[ FD ]
Line_41 $$ if (logger.isTraceEnabled()) -->Line_44 $$ sb.append(previousClusterState.routingTable().prettyPrint())[ CD ]
Line_85 $$ ArrayList<Discovery.AckListener> ackListeners = new ArrayList()-->Line_103 $$ ackListeners.add(new AckCountDownListener(ackedListener, newClusterState.version(), newClusterState.nodes(), threadPool))[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_149 $$ logger.debug("publishing cluster state version [[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_201 $$ task.listener.clusterStateProcessed(task.source, previousClusterState, newClusterState)[ FD ]
Line_9 $$ if (task.processed.getAndSet(true) == false) -->Line_14 $$ logger.trace("skipping [[ CD ]
Line_117 $$ if (logger.isTraceEnabled()) -->Line_121 $$ if (logger.isDebugEnabled()) [ CD ]
Line_95 $$ newClusterState = builder.build()-->Line_201 $$ task.listener.clusterStateProcessed(task.source, previousClusterState, newClusterState)[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_203 $$ executor.clusterStatePublished(newClusterState)[ FD ]
Line_34 $$ ClusterStateTaskExecutor.BatchResult<T> batchResult-->Line_49 $$ batchResult = ClusterStateTaskExecutor.BatchResult.<T>builder().failures(toExecute.stream().map( updateTask -> updateTask.task)::<>iterator, e).build(previousClusterState)[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_120 $$ logger.trace(sb.toString())[ FD ]
Line_65 $$ final ClusterStateTaskExecutor.TaskResult executionResult = batchResult.executionResults.get(updateTask.task)-->Line_66 $$ executionResult.handle(() -> proccessedListeners.add(updateTask),  ex -> [ FD ]
Line_98 $$ final AckedClusterStateTaskListener ackedListener = (AckedClusterStateTaskListener) task.listener-->Line_100 $$ ackedListener.onAckTimeout()[ FD ]
Line_89 $$ if (previousClusterState.routingTable() != newClusterState.routingTable()) -->Line_90 $$ builder.routingTable(RoutingTable.builder(newClusterState.routingTable()).version(newClusterState.routingTable().version() + 1).build())[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_27 $$ logger.debug("processing [[ CD ]
Line_105 $$ if (logger.isDebugEnabled()) -->Line_106 $$ logger.debug("Couldn't schedule timeout thread - node might be shutting down", ex)[ CD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_206 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_43 $$ sb.append(previousClusterState.nodes().prettyPrint())[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_116 $$ newClusterState.status(ClusterState.ClusterStateStatus.BEING_APPLIED)[ FD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_122 $$ logger.debug("cluster state updated, version [[ FD ]
Line_121 $$ if (logger.isDebugEnabled()) -->Line_122 $$ logger.debug("cluster state updated, version [[ CD ]
Line_128 $$ String summary = nodesDelta.shortSummary()-->Line_130 $$ logger.info("[ FD ]
Line_170 $$ for (ClusterStateListener listener : preAppliedListeners) -->Line_187 $$ listener.clusterChanged(clusterChangedEvent)[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_205 $$ logger.debug("processing [[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_103 $$ ackListeners.add(new AckCountDownListener(ackedListener, newClusterState.version(), newClusterState.nodes(), threadPool))[ FD ]
Line_97 $$ if (task.listener instanceof AckedClusterStateTaskListener) -->Line_98 $$ final AckedClusterStateTaskListener ackedListener = (AckedClusterStateTaskListener) task.listener[ CD ]
Line_129 $$ if (summary.length() > 0) -->Line_130 $$ logger.info("[ CD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_27 $$ logger.debug("processing [[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_38 $$ batchResult = executor.execute(previousClusterState, inputs)[ FD ]
Line_115 $$ final Discovery.AckListener ackListener = new DelegetingAckListener(ackListeners)-->Line_195 $$ ackListener.onNodeAck(newClusterState.nodes().localNode(), null)[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_92 $$ if (previousClusterState.metaData() != newClusterState.metaData()) [ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_213 $$ logger.warn(sb.toString(), t)[ FD ]
Line_98 $$ final AckedClusterStateTaskListener ackedListener = (AckedClusterStateTaskListener) task.listener-->Line_109 $$ ackedListener.onAckTimeout()[ FD ]
Line_98 $$ final AckedClusterStateTaskListener ackedListener = (AckedClusterStateTaskListener) task.listener-->Line_99 $$ if (ackedListener.ackTimeout() == null || ackedListener.ackTimeout().millis() == 0) [ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_24 $$ logger.debug("processing [[ FD ]
Line_124 $$ ClusterChangedEvent clusterChangedEvent = new ClusterChangedEvent(source, newClusterState, previousClusterState)-->Line_164 $$ final Settings incomingSettings = clusterChangedEvent.state().metaData().settings()[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_93 $$ builder.metaData(MetaData.builder(newClusterState.metaData()).version(newClusterState.metaData().version() + 1))[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_210 $$ sb.append(newClusterState.nodes().prettyPrint())[ FD ]
Line_86 $$ if (newClusterState.nodes().localNodeMaster()) -->Line_89 $$ if (previousClusterState.routingTable() != newClusterState.routingTable()) [ CD ]
Line_95 $$ newClusterState = builder.build()-->Line_153 $$ logger.warn("failing [[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_153 $$ logger.warn("failing [[ FD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_52 $$ assert batchResult.executionResults.size() == toExecute.size() : String.format(Locale.ROOT, "expected [%d] task result%s but was [%d]", toExecute.size(), toExecute.size() == 1 ? "" : "s", batchResult.executionResults.size())[ FD ]
Line_117 $$ if (logger.isTraceEnabled()) -->Line_119 $$ sb.append(newClusterState.prettyPrint())[ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_212 $$ sb.append(newClusterState.getRoutingNodes().prettyPrint())[ FD ]
Line_170 $$ for (ClusterStateListener listener : preAppliedListeners) -->Line_172 $$ listener.clusterChanged(clusterChangedEvent)[ FD ]
Line_124 $$ ClusterChangedEvent clusterChangedEvent = new ClusterChangedEvent(source, newClusterState, previousClusterState)-->Line_151 $$ discoveryService.publish(clusterChangedEvent, ackListener)[ FD ]
Line_99 $$ if (ackedListener.ackTimeout() == null || ackedListener.ackTimeout().millis() == 0) -->Line_100 $$ ackedListener.onAckTimeout()[ CD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_45 $$ sb.append(previousClusterState.getRoutingNodes().prettyPrint())[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_95 $$ newClusterState = builder.build()[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)[ CD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_118 $$ StringBuilder sb = new StringBuilder("cluster state updated, source [").append(source).append("]\n")[ FD ]
Line_4 $$ final ArrayList<String> sources = new ArrayList()-->Line_12 $$ sources.add(task.source)[ FD ]
Line_4 $$ final ArrayList<String> sources = new ArrayList()-->Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)[ FD ]
Line_117 $$ if (logger.isTraceEnabled()) -->Line_118 $$ StringBuilder sb = new StringBuilder("cluster state updated, source [").append(source).append("]\n")[ CD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_81 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_197 $$ logger.debug("error while processing ack for master node [[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_80 $$ logger.debug("processing [[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_89 $$ if (previousClusterState.routingTable() != newClusterState.routingTable()) [ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_149 $$ logger.debug("publishing cluster state version [[ FD ]
Line_127 $$ if (nodesDelta.hasChanges() && logger.isInfoEnabled()) -->Line_129 $$ if (summary.length() > 0) [ CD ]
Line_9 $$ if (task.processed.getAndSet(true) == false) -->Line_10 $$ logger.trace("will process [[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_4 $$ final ArrayList<String> sources = new ArrayList()[ CD ]
Line_95 $$ newClusterState = builder.build()-->Line_119 $$ sb.append(newClusterState.prettyPrint())[ FD ]
Line_124 $$ ClusterChangedEvent clusterChangedEvent = new ClusterChangedEvent(source, newClusterState, previousClusterState)-->Line_172 $$ listener.clusterChanged(clusterChangedEvent)[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_209 $$ StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.stateUUID()).append("], source [").append(source).append("]\n")[ FD ]
Line_53 $$ boolean assertsEnabled = false-->Line_54 $$ assert (assertsEnabled = true)[ FD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_31 $$ toExecute.stream().forEach( task -> task.listener.onNoLongerMaster(task.source))[ FD ]
Line_41 $$ if (logger.isTraceEnabled()) -->Line_43 $$ sb.append(previousClusterState.nodes().prettyPrint())[ CD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_43 $$ sb.append(previousClusterState.nodes().prettyPrint())[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_49 $$ batchResult = ClusterStateTaskExecutor.BatchResult.<T>builder().failures(toExecute.stream().map( updateTask -> updateTask.task)::<>iterator, e).build(previousClusterState)[ FD ]
Line_71 $$ if (previousClusterState == newClusterState) -->Line_79 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_61 $$ final ArrayList<UpdateTask<T>> proccessedListeners = new ArrayList()[ CD ]
Line_38 $$ batchResult = executor.execute(previousClusterState, inputs)-->Line_49 $$ batchResult = ClusterStateTaskExecutor.BatchResult.<T>builder().failures(toExecute.stream().map( updateTask -> updateTask.task)::<>iterator, e).build(previousClusterState)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_122 $$ logger.debug("cluster state updated, version [[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_35 $$ long startTimeNS = System.nanoTime()[ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_160 $$ logger.debug("set local cluster state to version [ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_211 $$ sb.append(newClusterState.routingTable().prettyPrint())[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_195 $$ ackListener.onNodeAck(newClusterState.nodes().localNode(), null)[ FD ]
Line_115 $$ final Discovery.AckListener ackListener = new DelegetingAckListener(ackListeners)-->Line_151 $$ discoveryService.publish(clusterChangedEvent, ackListener)[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_205 $$ logger.debug("processing [[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_23 $$ if (!lifecycle.started()) [ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_34 $$ ClusterStateTaskExecutor.BatchResult<T> batchResult[ CD ]
Line_71 $$ if (previousClusterState == newClusterState) -->Line_80 $$ logger.debug("processing [[ CD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_30 $$ logger.debug("failing [[ FD ]
Line_71 $$ if (previousClusterState == newClusterState) -->Line_82 $$ return[ CD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_11 $$ toExecute.add(task)[ FD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_19 $$ if (toExecute.isEmpty()) [ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) [ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_122 $$ logger.debug("cluster state updated, version [[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_206 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_71 $$ if (previousClusterState == newClusterState) [ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_119 $$ sb.append(newClusterState.prettyPrint())[ FD ]
Line_164 $$ final Settings incomingSettings = clusterChangedEvent.state().metaData().settings()-->Line_165 $$ clusterSettings.applySettings(incomingSettings)[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_209 $$ StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.stateUUID()).append("], source [").append(source).append("]\n")[ FD ]
Line_41 $$ if (logger.isTraceEnabled()) -->Line_46 $$ logger.trace(sb.toString(), e)[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_55 $$ if (assertsEnabled) [ CD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_130 $$ logger.info("[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_60 $$ ClusterState newClusterState = batchResult.resultingState[ CD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_77 $$ task.listener.clusterStateProcessed(task.source, previousClusterState, newClusterState)[ FD ]
Line_41 $$ if (logger.isTraceEnabled()) -->Line_45 $$ sb.append(previousClusterState.getRoutingNodes().prettyPrint())[ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_209 $$ StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.stateUUID()).append("], source [").append(source).append("]\n")[ FD ]
Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) -->Line_31 $$ toExecute.stream().forEach( task -> task.listener.onNoLongerMaster(task.source))[ CD ]
Line_9 $$ if (task.processed.getAndSet(true) == false) -->Line_11 $$ toExecute.add(task)[ CD ]
Line_86 $$ if (newClusterState.nodes().localNodeMaster()) -->Line_92 $$ if (previousClusterState.metaData() != newClusterState.metaData()) [ CD ]
Line_95 $$ newClusterState = builder.build()-->Line_212 $$ sb.append(newClusterState.getRoutingNodes().prettyPrint())[ FD ]
Line_124 $$ ClusterChangedEvent clusterChangedEvent = new ClusterChangedEvent(source, newClusterState, previousClusterState)-->Line_187 $$ listener.clusterChanged(clusterChangedEvent)[ FD ]
Line_37 $$ List<T> inputs = toExecute.stream().map( tUpdateTask -> tUpdateTask.task).collect(Collectors.toList())-->Line_38 $$ batchResult = executor.execute(previousClusterState, inputs)[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_45 $$ sb.append(previousClusterState.getRoutingNodes().prettyPrint())[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_86 $$ if (newClusterState.nodes().localNodeMaster()) [ FD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_37 $$ List<T> inputs = toExecute.stream().map( tUpdateTask -> tUpdateTask.task).collect(Collectors.toList())[ FD ]
Line_127 $$ if (nodesDelta.hasChanges() && logger.isInfoEnabled()) -->Line_128 $$ String summary = nodesDelta.shortSummary()[ CD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_119 $$ sb.append(newClusterState.prettyPrint())[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()[ CD ]
Line_19 $$ if (toExecute.isEmpty()) -->Line_20 $$ return[ CD ]
Line_9 $$ if (task.processed.getAndSet(true) == false) -->Line_12 $$ sources.add(task.source)[ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_89 $$ if (previousClusterState.routingTable() != newClusterState.routingTable()) [ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_201 $$ task.listener.clusterStateProcessed(task.source, previousClusterState, newClusterState)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_195 $$ ackListener.onNodeAck(newClusterState.nodes().localNode(), null)[ FD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_205 $$ logger.debug("processing [[ FD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_48 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_53 $$ boolean assertsEnabled = false[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_28 $$ ClusterState previousClusterState = clusterState[ CD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_211 $$ sb.append(newClusterState.routingTable().prettyPrint())[ FD ]
Line_41 $$ if (logger.isTraceEnabled()) -->Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")[ CD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) [ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_92 $$ if (previousClusterState.metaData() != newClusterState.metaData()) [ FD ]
Line_8 $$ for (UpdateTask<T> task : pending) -->Line_11 $$ toExecute.add(task)[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_19 $$ if (toExecute.isEmpty()) [ CD ]
Line_128 $$ String summary = nodesDelta.shortSummary()-->Line_129 $$ if (summary.length() > 0) [ FD ]
Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) -->Line_32 $$ return[ CD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_48 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_211 $$ sb.append(newClusterState.routingTable().prettyPrint())[ FD ]
Line_22 $$ final String source = Strings.collectionToCommaDelimitedString(sources)-->Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")[ FD ]
Line_3 $$ final ArrayList<UpdateTask<T>> toExecute = new ArrayList()-->Line_49 $$ batchResult = ClusterStateTaskExecutor.BatchResult.<T>builder().failures(toExecute.stream().map( updateTask -> updateTask.task)::<>iterator, e).build(previousClusterState)[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_38 $$ batchResult = executor.execute(previousClusterState, inputs)[ FD ]
Line_86 $$ if (newClusterState.nodes().localNodeMaster()) -->Line_95 $$ newClusterState = builder.build()[ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_90 $$ builder.routingTable(RoutingTable.builder(newClusterState.routingTable()).version(newClusterState.routingTable().version() + 1).build())[ FD ]
Line_117 $$ if (logger.isTraceEnabled()) -->Line_120 $$ logger.trace(sb.toString())[ CD ]
Line_95 $$ newClusterState = builder.build()-->Line_116 $$ newClusterState.status(ClusterState.ClusterStateStatus.BEING_APPLIED)[ FD ]
Line_71 $$ if (previousClusterState == newClusterState) -->Line_81 $$ warnAboutSlowTaskIfNeeded(executionTime, source)[ CD ]
Line_6 $$ List<UpdateTask> pending = updateTasksPerExecutor.remove(executor)-->Line_7 $$ if (pending != null) [ FD ]
Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) -->Line_30 $$ logger.debug("failing [[ CD ]
Line_61 $$ final ArrayList<UpdateTask<T>> proccessedListeners = new ArrayList()-->Line_66 $$ proccessedListeners.add(updateTask)[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_160 $$ logger.debug("set local cluster state to version [ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_29 $$ if (!previousClusterState.nodes().localNodeMaster() && executor.runOnlyOnMaster()) [ CD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_210 $$ sb.append(newClusterState.nodes().prettyPrint())[ FD ]
Line_2 $$ <T> void runTasksForExecutor(ClusterStateTaskExecutor<T> executor) -->Line_6 $$ List<UpdateTask> pending = updateTasksPerExecutor.remove(executor)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_77 $$ task.listener.clusterStateProcessed(task.source, previousClusterState, newClusterState)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_203 $$ executor.clusterStatePublished(newClusterState)[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_44 $$ sb.append(previousClusterState.routingTable().prettyPrint())[ FD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_80 $$ logger.debug("processing [[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_46 $$ logger.trace(sb.toString(), e)[ FD ]
Line_97 $$ if (task.listener instanceof AckedClusterStateTaskListener) -->Line_99 $$ if (ackedListener.ackTimeout() == null || ackedListener.ackTimeout().millis() == 0) [ CD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_212 $$ sb.append(newClusterState.getRoutingNodes().prettyPrint())[ FD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_44 $$ sb.append(previousClusterState.routingTable().prettyPrint())[ FD ]
Line_40 $$ TimeValue executionTime = TimeValue.timeValueMillis(Math.max(0, TimeValue.nsecToMSec(System.nanoTime() - startTimeNS)))-->Line_209 $$ StringBuilder sb = new StringBuilder("failed to apply updated cluster state in ").append(executionTime).append(":\nversion [").append(newClusterState.version()).append("], uuid [").append(newClusterState.stateUUID()).append("], source [").append(source).append("]\n")[ FD ]
Line_23 $$ if (!lifecycle.started()) -->Line_25 $$ return[ CD ]
Line_28 $$ ClusterState previousClusterState = clusterState-->Line_71 $$ if (previousClusterState == newClusterState) [ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_197 $$ logger.debug("error while processing ack for master node [[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_203 $$ executor.clusterStatePublished(newClusterState)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_153 $$ logger.warn("failing [[ FD ]
Line_95 $$ newClusterState = builder.build()-->Line_184 $$ newClusterState.status(ClusterState.ClusterStateStatus.APPLIED)[ FD ]
Line_60 $$ ClusterState newClusterState = batchResult.resultingState-->Line_205 $$ logger.debug("processing [[ FD ]
Line_42 $$ StringBuilder sb = new StringBuilder("failed to execute cluster state update in ").append(executionTime).append(", state:\nversion [").append(previousClusterState.version()).append("], source [").append(source).append("]\n")-->Line_210 $$ sb.append(newClusterState.nodes().prettyPrint())[ FD ]
Line_34 $$ ClusterStateTaskExecutor.BatchResult<T> batchResult-->Line_38 $$ batchResult = executor.execute(previousClusterState, inputs)[ FD ]
Line_56 $$ for (UpdateTask<T> updateTask : toExecute) -->Line_66 $$ proccessedListeners.add(updateTask)[ FD ]
Line_23 $$ if (!lifecycle.started()) -->Line_24 $$ logger.debug("processing [[ CD ]
