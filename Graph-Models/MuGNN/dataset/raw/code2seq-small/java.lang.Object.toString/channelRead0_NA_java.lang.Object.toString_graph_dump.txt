Line_11 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(channel, repository, nettyFabricAgentConfig.getRepositoryPath(), _rpcRelayTimeout, _startupTimeout)-->Line_12 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) [ FD ]
Line_4 $$ Channel channel = channelHandlerContext.channel()-->Line_5 $$ SocketAddress socketAddress = channel.localAddress()[ FD ]
Line_13 $$ if (_log.isWarnEnabled()) -->Line_14 $$ _log.warn("Rejected duplicated fabric agent on " + channel)[ CD ]
Line_9 $$ ChannelPipeline channelPipeline = channel.pipeline()-->Line_10 $$ channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(), _eventExecutorGroup))[ FD ]
Line_6 $$ Path repositoryPath = Paths.get(_repositoryParentPath.toString(), StringUtil.replace(socketAddress.toString(), CharPool.COLON, CharPool.DASH))-->Line_7 $$ Files.createDirectories(repositoryPath)[ FD ]
Line_12 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) -->Line_13 $$ if (_log.isWarnEnabled()) [ CD ]
Line_5 $$ SocketAddress socketAddress = channel.localAddress()-->Line_6 $$ Path repositoryPath = Paths.get(_repositoryParentPath.toString(), StringUtil.replace(socketAddress.toString(), CharPool.COLON, CharPool.DASH))[ FD ]
Line_8 $$ Repository<Channel> repository = new NettyRepository(repositoryPath, _getFileTimeout)-->Line_10 $$ channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(), _eventExecutorGroup))[ FD ]
Line_4 $$ Channel channel = channelHandlerContext.channel()-->Line_9 $$ ChannelPipeline channelPipeline = channel.pipeline()[ FD ]
Line_12 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) -->Line_16 $$ return[ CD ]
Line_18 $$ if (_log.isInfoEnabled()) -->Line_19 $$ _log.info("Registered fabric agent on " + channel)[ CD ]
