Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_8 $$ ChannelPipeline channelPipeline = channel.pipeline()[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_3 $$ Channel channel = channelHandlerContext.channel()[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_5 $$ Path repositoryPath = Paths.get(_repositoryParentPath.toString(), StringUtil.replace(socketAddress.toString(), CharPool.COLON, CharPool.DASH))[ CD ]
Line_11 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) -->Line_12 $$ if (_log.isWarnEnabled()) [ CD ]
Line_8 $$ ChannelPipeline channelPipeline = channel.pipeline()-->Line_9 $$ channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(), _eventExecutorGroup))[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_9 $$ channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(), _eventExecutorGroup))[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_3 $$ Channel channel = channelHandlerContext.channel()[ CD ]
Line_5 $$ Path repositoryPath = Paths.get(_repositoryParentPath.toString(), StringUtil.replace(socketAddress.toString(), CharPool.COLON, CharPool.DASH))-->Line_6 $$ Files.createDirectories(repositoryPath)[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_7 $$ Repository<Channel> repository = new NettyRepository(repositoryPath, _getFileTimeout)[ CD ]
Line_7 $$ Repository<Channel> repository = new NettyRepository(repositoryPath, _getFileTimeout)-->Line_9 $$ channelPipeline.addLast(new FileResponseChannelHandler(repository.getAsyncBroker(), _eventExecutorGroup))[ FD ]
Line_17 $$ if (_log.isInfoEnabled()) -->Line_18 $$ _log.info("Registered fabric agent on " + channel)[ CD ]
Line_12 $$ if (_log.isWarnEnabled()) -->Line_13 $$ _log.warn("Rejected duplicated fabric agent on " + channel)[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_10 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(channel, repository, nettyFabricAgentConfig.getRepositoryPath(), _rpcRelayTimeout, _startupTimeout)[ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_4 $$ SocketAddress socketAddress = channel.localAddress()[ CD ]
Line_3 $$ Channel channel = channelHandlerContext.channel()-->Line_8 $$ ChannelPipeline channelPipeline = channel.pipeline()[ FD ]
Line_4 $$ SocketAddress socketAddress = channel.localAddress()-->Line_5 $$ Path repositoryPath = Paths.get(_repositoryParentPath.toString(), StringUtil.replace(socketAddress.toString(), CharPool.COLON, CharPool.DASH))[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_10 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(channel, repository, nettyFabricAgentConfig.getRepositoryPath(), _rpcRelayTimeout, _startupTimeout)[ FD ]
Line_3 $$ Channel channel = channelHandlerContext.channel()-->Line_4 $$ SocketAddress socketAddress = channel.localAddress()[ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_11 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) [ CD ]
Line_10 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(channel, repository, nettyFabricAgentConfig.getRepositoryPath(), _rpcRelayTimeout, _startupTimeout)-->Line_11 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) [ FD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_17 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ protected void channelRead0(ChannelHandlerContext channelHandlerContext, NettyFabricAgentConfig nettyFabricAgentConfig) throws IOException -->Line_6 $$ Files.createDirectories(repositoryPath)[ CD ]
Line_11 $$ if (!_fabricAgentRegistry.registerFabricAgent(nettyFabricAgentStub, new OnRegistration(channel, nettyFabricAgentStub, repository))) -->Line_15 $$ return[ CD ]
