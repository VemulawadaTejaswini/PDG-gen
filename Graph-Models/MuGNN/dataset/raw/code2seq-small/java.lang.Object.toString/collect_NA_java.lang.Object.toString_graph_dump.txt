Line_16 $$ Properties plugins = new Properties()-->Line_17 $$ plugins.load(is)[ FD ]
Line_11 $$ ByteArrayOutputStream versionStream = new ByteArrayOutputStream()-->Line_25 $$ this.env.getZip().add(new ByteArrayInputStream(versionStream.toByteArray()), "version.txt")[ FD ]
Line_35 $$ StringBuilder skips = new StringBuilder()-->Line_45 $$ skips.append(message)[ FD ]
Line_16 $$ Properties plugins = new Properties()-->Line_18 $$ for (String pluginName : plugins.stringPropertyNames()) [ FD ]
Line_34 $$ JdrReport report = new JdrReport()-->Line_36 $$ report.setStartTime()[ FD ]
Line_18 $$ for (String pluginName : plugins.stringPropertyNames()) -->Line_19 $$ Class<?> pluginClass = Class.forName(pluginName)[ FD ]
Line_12 $$ PrintWriter versionWriter = new PrintWriter(new OutputStreamWriter(versionStream))-->Line_24 $$ versionWriter.close()[ FD ]
Line_46 $$ PrintWriter pw = new PrintWriter(new StringWriter())-->Line_47 $$ t.printStackTrace(pw)[ FD ]
Line_34 $$ JdrReport report = new JdrReport()-->Line_37 $$ report.setJdrUuid(obtainServerUUID())[ FD ]
Line_38 $$ for (JdrCommand command : commands) -->Line_41 $$ command.execute()[ FD ]
Line_30 $$ if (commands.size() < 1) -->Line_31 $$ ROOT_LOGGER.error(JdrLogger.ROOT_LOGGER.noCommandsToRun())[ CD ]
Line_34 $$ JdrReport report = new JdrReport()-->Line_62 $$ report.setEndTime()[ FD ]
Line_12 $$ PrintWriter versionWriter = new PrintWriter(new OutputStreamWriter(versionStream))-->Line_13 $$ versionWriter.println("JDR: " + Namespace.CURRENT.getUriString())[ FD ]
Line_12 $$ PrintWriter versionWriter = new PrintWriter(new OutputStreamWriter(versionStream))-->Line_22 $$ versionWriter.println(plugin.getPluginId())[ FD ]
Line_20 $$ JdrPlugin plugin = (JdrPlugin) pluginClass.newInstance()-->Line_21 $$ commands.addAll(plugin.getCommands())[ FD ]
Line_38 $$ for (JdrCommand command : commands) -->Line_39 $$ command.setEnvironment(new JdrEnvironment(this.env))[ FD ]
Line_43 $$ String message = "Skipping command " + command.toString()-->Line_44 $$ ROOT_LOGGER.debugf(message)[ FD ]
Line_46 $$ PrintWriter pw = new PrintWriter(new StringWriter())-->Line_49 $$ pw.close()[ FD ]
Line_43 $$ String message = "Skipping command " + command.toString()-->Line_45 $$ skips.append(message)[ FD ]
Line_35 $$ StringBuilder skips = new StringBuilder()-->Line_48 $$ skips.append(pw.toString())[ FD ]
Line_15 $$ InputStream is = this.getClass().getClassLoader().getResourceAsStream("plugins.properties")-->Line_17 $$ plugins.load(is)[ FD ]
Line_20 $$ JdrPlugin plugin = (JdrPlugin) pluginClass.newInstance()-->Line_22 $$ versionWriter.println(plugin.getPluginId())[ FD ]
Line_46 $$ PrintWriter pw = new PrintWriter(new StringWriter())-->Line_48 $$ skips.append(pw.toString())[ FD ]
Line_10 $$ List<JdrCommand> commands = new ArrayList<JdrCommand>()-->Line_21 $$ commands.addAll(plugin.getCommands())[ FD ]
Line_19 $$ Class<?> pluginClass = Class.forName(pluginName)-->Line_20 $$ JdrPlugin plugin = (JdrPlugin) pluginClass.newInstance()[ FD ]
Line_35 $$ StringBuilder skips = new StringBuilder()-->Line_53 $$ this.env.getZip().addLog(skips.toString(), "skips.log")[ FD ]
Line_38 $$ for (JdrCommand command : commands) -->Line_43 $$ String message = "Skipping command " + command.toString()[ FD ]
Line_34 $$ JdrReport report = new JdrReport()-->Line_63 $$ report.setLocation(this.env.getZip().name())[ FD ]
Line_10 $$ List<JdrCommand> commands = new ArrayList<JdrCommand>()-->Line_30 $$ if (commands.size() < 1) [ FD ]
