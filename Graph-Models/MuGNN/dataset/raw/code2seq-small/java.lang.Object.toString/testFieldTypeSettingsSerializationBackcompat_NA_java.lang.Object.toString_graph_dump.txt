Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")[ CD ]
Line_4 $$ Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build()-->Line_5 $$ DocumentMapper enabledMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))[ FD ]
Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")-->Line_19 $$ assertThat(routingConfiguration.get("index").toString(), is("no"))[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_14 $$ assertThat(serializedMap.get("_routing"), instanceOf(Map.class))[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_3 $$ String enabledMapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("_routing").field("store", "no").field("index", "no").endObject().endObject().endObject().string()[ CD ]
Line_11 $$ serializedMap = parser.map()-->Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_18 $$ assertThat(routingConfiguration, hasKey("index"))[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_16 $$ assertThat(routingConfiguration, hasKey("store"))[ CD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_10 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) [ FD ]
Line_11 $$ serializedMap = parser.map()-->Line_13 $$ assertThat(serializedMap, hasKey("_routing"))[ FD ]
Line_11 $$ serializedMap = parser.map()-->Line_14 $$ assertThat(serializedMap.get("_routing"), instanceOf(Map.class))[ FD ]
Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")-->Line_18 $$ assertThat(routingConfiguration, hasKey("index"))[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_13 $$ assertThat(serializedMap, hasKey("_routing"))[ FD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_11 $$ serializedMap = parser.map()[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_8 $$ builder.close()[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_4 $$ Settings indexSettings = Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.V_1_4_2.id).build()[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_9 $$ Map<String, Object> serializedMap[ CD ]
Line_9 $$ Map<String, Object> serializedMap-->Line_14 $$ assertThat(serializedMap.get("_routing"), instanceOf(Map.class))[ FD ]
Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")-->Line_16 $$ assertThat(routingConfiguration, hasKey("store"))[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_17 $$ assertThat(routingConfiguration.get("store").toString(), is("false"))[ CD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_8 $$ builder.close()[ FD ]
Line_15 $$ Map<String, Object> routingConfiguration = (Map<String, Object>) serializedMap.get("_routing")-->Line_17 $$ assertThat(routingConfiguration.get("store").toString(), is("false"))[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_13 $$ assertThat(serializedMap, hasKey("_routing"))[ CD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_7 $$ enabledMapper.routingFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ CD ]
Line_5 $$ DocumentMapper enabledMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))-->Line_7 $$ enabledMapper.routingFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_19 $$ assertThat(routingConfiguration.get("index").toString(), is("no"))[ CD ]
Line_10 $$ try (XContentParser parser = JsonXContent.jsonXContent.createParser(builder.bytes())) -->Line_11 $$ serializedMap = parser.map()[ FD ]
Line_2 $$ public void testFieldTypeSettingsSerializationBackcompat() throws Exception -->Line_5 $$ DocumentMapper enabledMapper = createIndex("test", indexSettings).mapperService().documentMapperParser().parse("type", new CompressedXContent(enabledMapping))[ CD ]
Line_6 $$ XContentBuilder builder = JsonXContent.contentBuilder().startObject()-->Line_7 $$ enabledMapper.routingFieldMapper().toXContent(builder, ToXContent.EMPTY_PARAMS).endObject()[ FD ]
