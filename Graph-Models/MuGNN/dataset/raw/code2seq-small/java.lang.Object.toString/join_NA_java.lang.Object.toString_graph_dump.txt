Line_2 $$ private static byte[] join(@NotNull Multimap<String, String> params) throws UnsupportedEncodingException -->Line_4 $$ for (Map.Entry<String, String> param : params.entries()) [ FD ]
Line_8 $$ if (builder.length() > 0) -->Line_9 $$ builder.append('&')[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_8 $$ if (builder.length() > 0) [ FD ]
Line_4 $$ for (Map.Entry<String, String> param : params.entries()) -->Line_12 $$ builder.append(param.getKey()).append('=').append(URLEncoder.encode(param.getValue(), ENCODING))[ FD ]
Line_4 $$ for (Map.Entry<String, String> param : params.entries()) -->Line_5 $$ if (StringUtil.isEmpty(param.getKey())) [ FD ]
Line_4 $$ for (Map.Entry<String, String> param : params.entries()) -->Line_6 $$ throw new IllegalArgumentException(param.toString())[ FD ]
Line_4 $$ for (Map.Entry<String, String> param : params.entries()) -->Line_11 $$ if (StringUtil.isNotEmpty(param.getValue())) [ FD ]
Line_2 $$ private static byte[] join(@NotNull Multimap<String, String> params) throws UnsupportedEncodingException -->Line_15 $$ return builder.toString().getBytes(ENCODING)[ CD ]
Line_2 $$ private static byte[] join(@NotNull Multimap<String, String> params) throws UnsupportedEncodingException -->Line_3 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(param.getKey()).append('=').append(URLEncoder.encode(param.getValue(), ENCODING))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ return builder.toString().getBytes(ENCODING)[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append('&')[ FD ]
Line_11 $$ if (StringUtil.isNotEmpty(param.getValue())) -->Line_12 $$ builder.append(param.getKey()).append('=').append(URLEncoder.encode(param.getValue(), ENCODING))[ CD ]
