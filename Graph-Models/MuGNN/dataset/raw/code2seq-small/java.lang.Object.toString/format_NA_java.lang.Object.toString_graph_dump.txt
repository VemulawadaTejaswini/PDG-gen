Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) [ FD ]
Line_10 $$ pattern = _escapePattern(pattern)-->Line_21 $$ value = pattern[ FD ]
Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_12 $$ for (int i = 0; i < arguments.length; i++) [ CD ]
Line_6 $$ String value = null-->Line_21 $$ value = pattern[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_14 $$ formattedArguments[i] = get(resourceBundle, arguments[i].toString())[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_21 $$ value = pattern[ FD ]
Line_11 $$ Object[] formattedArguments = new Object[arguments.length]-->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_3 $$ if (PropsValues.TRANSLATIONS_DISABLED) -->Line_4 $$ return pattern[ CD ]
Line_10 $$ pattern = _escapePattern(pattern)-->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_6 $$ String value = null-->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_11 $$ Object[] formattedArguments = new Object[arguments.length][ CD ]
Line_12 $$ for (int i = 0; i < arguments.length; i++) -->Line_13 $$ if (translateArguments) [ CD ]
Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_21 $$ value = pattern[ CD ]
Line_8 $$ pattern = get(resourceBundle, pattern)-->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_10 $$ pattern = _escapePattern(pattern)[ FD ]
Line_8 $$ pattern = get(resourceBundle, pattern)-->Line_21 $$ value = pattern[ FD ]
Line_13 $$ if (translateArguments) -->Line_14 $$ formattedArguments[i] = get(resourceBundle, arguments[i].toString())[ CD ]
Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)-->Line_21 $$ value = pattern[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_28 $$ return value[ CD ]
Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_10 $$ pattern = _escapePattern(pattern)[ CD ]
Line_13 $$ if (translateArguments) -->Line_16 $$ formattedArguments[i] = arguments[i][ CD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_6 $$ String value = null[ CD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_8 $$ pattern = get(resourceBundle, pattern)[ FD ]
Line_2 $$ public String format(ResourceBundle resourceBundle, String pattern, Object[] arguments, boolean translateArguments) -->Line_3 $$ if (PropsValues.TRANSLATIONS_DISABLED) [ CD ]
Line_8 $$ pattern = get(resourceBundle, pattern)-->Line_10 $$ pattern = _escapePattern(pattern)[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_25 $$ _log.warn(e, e)[ CD ]
Line_9 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_19 $$ value = MessageFormat.format(pattern, formattedArguments)[ CD ]
