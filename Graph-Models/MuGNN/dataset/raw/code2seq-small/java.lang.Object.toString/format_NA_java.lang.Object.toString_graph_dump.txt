Line_10 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_13 $$ for (int i = 0; i < arguments.length; i++) [ CD ]
Line_14 $$ if (translateArguments) -->Line_17 $$ formattedArguments[i] = arguments[i][ CD ]
Line_12 $$ Object[] formattedArguments = new Object[arguments.length]-->Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_11 $$ pattern = _escapePattern(pattern)-->Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_11 $$ pattern = _escapePattern(pattern)-->Line_22 $$ value = pattern[ FD ]
Line_4 $$ if (PropsValues.TRANSLATIONS_DISABLED) -->Line_5 $$ return pattern[ CD ]
Line_10 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_22 $$ value = pattern[ CD ]
Line_25 $$ if (_log.isWarnEnabled()) -->Line_26 $$ _log.warn(e, e)[ CD ]
Line_10 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_11 $$ pattern = _escapePattern(pattern)[ CD ]
Line_10 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)[ CD ]
Line_7 $$ String value = null-->Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
Line_7 $$ String value = null-->Line_22 $$ value = pattern[ FD ]
Line_14 $$ if (translateArguments) -->Line_15 $$ formattedArguments[i] = get(resourceBundle, arguments[i].toString())[ CD ]
Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)-->Line_22 $$ value = pattern[ FD ]
Line_13 $$ for (int i = 0; i < arguments.length; i++) -->Line_14 $$ if (translateArguments) [ CD ]
Line_9 $$ pattern = get(resourceBundle, pattern)-->Line_22 $$ value = pattern[ FD ]
Line_10 $$ if (ArrayUtil.isNotEmpty(arguments)) -->Line_12 $$ Object[] formattedArguments = new Object[arguments.length][ CD ]
Line_9 $$ pattern = get(resourceBundle, pattern)-->Line_11 $$ pattern = _escapePattern(pattern)[ FD ]
Line_9 $$ pattern = get(resourceBundle, pattern)-->Line_20 $$ value = MessageFormat.format(pattern, formattedArguments)[ FD ]
