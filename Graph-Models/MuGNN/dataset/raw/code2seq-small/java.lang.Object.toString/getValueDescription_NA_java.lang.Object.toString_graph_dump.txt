Line_4 $$ Object instance = modelView.getInstance()-->Line_5 $$ if (null != instance && !JavaReflectionUtil.hasDefaultToString(instance)) [ FD ]
Line_2 $$ public Optional<String> getValueDescription(MutableModelNode modelNodeInternal) -->Line_3 $$ ModelView<?> modelView = modelNodeInternal.asImmutable(ModelType.untyped(), null)[ CD ]
Line_4 $$ Object instance = modelView.getInstance()-->Line_6 $$ return Optional.fromNullable(instance.toString())[ FD ]
Line_2 $$ public Optional<String> getValueDescription(MutableModelNode modelNodeInternal) -->Line_5 $$ if (null != instance && !JavaReflectionUtil.hasDefaultToString(instance)) [ CD ]
Line_2 $$ public Optional<String> getValueDescription(MutableModelNode modelNodeInternal) -->Line_3 $$ ModelView<?> modelView = modelNodeInternal.asImmutable(ModelType.untyped(), null)[ FD ]
Line_5 $$ if (null != instance && !JavaReflectionUtil.hasDefaultToString(instance)) -->Line_6 $$ return Optional.fromNullable(instance.toString())[ CD ]
Line_3 $$ ModelView<?> modelView = modelNodeInternal.asImmutable(ModelType.untyped(), null)-->Line_4 $$ Object instance = modelView.getInstance()[ FD ]
Line_2 $$ public Optional<String> getValueDescription(MutableModelNode modelNodeInternal) -->Line_4 $$ Object instance = modelView.getInstance()[ CD ]
Line_2 $$ public Optional<String> getValueDescription(MutableModelNode modelNodeInternal) -->Line_8 $$ return Optional.absent()[ CD ]
