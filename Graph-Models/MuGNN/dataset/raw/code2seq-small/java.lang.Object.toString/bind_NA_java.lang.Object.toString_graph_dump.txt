Line_6 $$ deploymentUnitServiceName = (ServiceName) owner-->Line_25 $$ if (deploymentUnitServiceName != null) [ FD ]
Line_8 $$ serviceTarget = (ServiceTarget) owner-->Line_12 $$ final ServiceBuilder<?> builder = serviceTarget.addService(bindName, binderService).addDependency(getServiceNameBase(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addInjection(binderService.getManagedObjectInjector(), new ImmediateManagedReferenceFactory(object)).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_3 $$ ServiceTarget serviceTarget = this.serviceTarget-->Line_8 $$ serviceTarget = (ServiceTarget) owner[ FD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_12 $$ final ServiceBuilder<?> builder = serviceTarget.addService(bindName, binderService).addDependency(getServiceNameBase(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addInjection(binderService.getManagedObjectInjector(), new ImmediateManagedReferenceFactory(object)).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_25 $$ if (deploymentUnitServiceName != null) -->Line_27 $$ final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) binderServiceController.getServiceContainer().getService(JndiNamingDependencyProcessor.serviceName(deploymentUnitServiceName)).getValue()[ CD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_3 $$ ServiceTarget serviceTarget = this.serviceTarget[ CD ]
Line_13 $$ final ServiceController<?> binderServiceController = builder.install()-->Line_15 $$ monitor.addController(binderServiceController)[ FD ]
Line_25 $$ if (deploymentUnitServiceName != null) -->Line_26 $$ binderService.acquire()[ CD ]
Line_14 $$ final StabilityMonitor monitor = new StabilityMonitor()-->Line_19 $$ monitor.removeController(binderServiceController)[ FD ]
Line_6 $$ deploymentUnitServiceName = (ServiceName) owner-->Line_27 $$ final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) binderServiceController.getServiceContainer().getService(JndiNamingDependencyProcessor.serviceName(deploymentUnitServiceName)).getValue()[ FD ]
Line_25 $$ if (deploymentUnitServiceName != null) -->Line_28 $$ duBindingReferences.add(binderService)[ CD ]
Line_4 $$ ServiceName deploymentUnitServiceName = null-->Line_6 $$ deploymentUnitServiceName = (ServiceName) owner[ FD ]
Line_14 $$ final StabilityMonitor monitor = new StabilityMonitor()-->Line_17 $$ monitor.awaitStability()[ FD ]
Line_5 $$ if (owner instanceof ServiceName) -->Line_8 $$ serviceTarget = (ServiceTarget) owner[ CD ]
Line_14 $$ final StabilityMonitor monitor = new StabilityMonitor()-->Line_15 $$ monitor.addController(binderServiceController)[ FD ]
Line_13 $$ final ServiceController<?> binderServiceController = builder.install()-->Line_21 $$ final Exception startException = binderServiceController.getStartException()[ FD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_5 $$ if (owner instanceof ServiceName) [ FD ]
Line_13 $$ final ServiceController<?> binderServiceController = builder.install()-->Line_19 $$ monitor.removeController(binderServiceController)[ FD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_4 $$ ServiceName deploymentUnitServiceName = null[ CD ]
Line_12 $$ final ServiceBuilder<?> builder = serviceTarget.addService(bindName, binderService).addDependency(getServiceNameBase(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addInjection(binderService.getManagedObjectInjector(), new ImmediateManagedReferenceFactory(object)).setInitialMode(ServiceController.Mode.ACTIVE)-->Line_13 $$ final ServiceController<?> binderServiceController = builder.install()[ FD ]
Line_27 $$ final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) binderServiceController.getServiceContainer().getService(JndiNamingDependencyProcessor.serviceName(deploymentUnitServiceName)).getValue()-->Line_28 $$ duBindingReferences.add(binderService)[ FD ]
Line_11 $$ final BinderService binderService = new BinderService(name.toString(), null, deploymentUnitServiceName != null)-->Line_12 $$ final ServiceBuilder<?> builder = serviceTarget.addService(bindName, binderService).addDependency(getServiceNameBase(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addInjection(binderService.getManagedObjectInjector(), new ImmediateManagedReferenceFactory(object)).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_3 $$ ServiceTarget serviceTarget = this.serviceTarget-->Line_12 $$ final ServiceBuilder<?> builder = serviceTarget.addService(bindName, binderService).addDependency(getServiceNameBase(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addInjection(binderService.getManagedObjectInjector(), new ImmediateManagedReferenceFactory(object)).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_11 $$ final BinderService binderService = new BinderService(name.toString(), null, deploymentUnitServiceName != null)-->Line_28 $$ duBindingReferences.add(binderService)[ FD ]
Line_13 $$ final ServiceController<?> binderServiceController = builder.install()-->Line_27 $$ final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) binderServiceController.getServiceContainer().getService(JndiNamingDependencyProcessor.serviceName(deploymentUnitServiceName)).getValue()[ FD ]
Line_11 $$ final BinderService binderService = new BinderService(name.toString(), null, deploymentUnitServiceName != null)-->Line_26 $$ binderService.acquire()[ FD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_5 $$ if (owner instanceof ServiceName) [ CD ]
Line_4 $$ ServiceName deploymentUnitServiceName = null-->Line_27 $$ final RuntimeBindReleaseService.References duBindingReferences = (RuntimeBindReleaseService.References) binderServiceController.getServiceContainer().getService(JndiNamingDependencyProcessor.serviceName(deploymentUnitServiceName)).getValue()[ FD ]
Line_4 $$ ServiceName deploymentUnitServiceName = null-->Line_25 $$ if (deploymentUnitServiceName != null) [ FD ]
Line_5 $$ if (owner instanceof ServiceName) -->Line_6 $$ deploymentUnitServiceName = (ServiceName) owner[ CD ]
Line_21 $$ final Exception startException = binderServiceController.getStartException()-->Line_22 $$ if (startException != null) [ FD ]
Line_2 $$ private void bind(Name name, Object object, Object owner, ServiceName bindName) throws NamingException -->Line_11 $$ final BinderService binderService = new BinderService(name.toString(), null, deploymentUnitServiceName != null)[ FD ]
