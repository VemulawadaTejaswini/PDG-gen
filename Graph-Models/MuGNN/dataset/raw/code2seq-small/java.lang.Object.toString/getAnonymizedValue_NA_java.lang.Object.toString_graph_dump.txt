Line_3 $$ Properties filteredProperties = null-->Line_24 $$ filteredProperties.put(key, pValue)[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_4 $$ List<JobPropertyParser> pList = new ArrayList<JobPropertyParser>(1)[ CD ]
Line_23 $$ if (pValue != null) -->Line_24 $$ filteredProperties.put(key, pValue)[ CD ]
Line_4 $$ List<JobPropertyParser> pList = new ArrayList<JobPropertyParser>(1)-->Line_10 $$ pList.add(parser)[ FD ]
Line_6 $$ if (config != null) -->Line_7 $$ Class<JobPropertyParser>[] parsers = (Class[]) conf.getClasses(PARSERS_CONFIG_KEY)[ CD ]
Line_9 $$ JobPropertyParser parser = ReflectionUtils.newInstance(c, conf)-->Line_14 $$ pList.add(parser)[ FD ]
Line_17 $$ filteredProperties = new Properties()-->Line_24 $$ filteredProperties.put(key, pValue)[ FD ]
Line_19 $$ String key = entry.getKey().toString()-->Line_24 $$ filteredProperties.put(key, pValue)[ FD ]
Line_22 $$ DataType<?> pValue = p.parseJobProperty(key, value)-->Line_23 $$ if (pValue != null) [ FD ]
Line_4 $$ List<JobPropertyParser> pList = new ArrayList<JobPropertyParser>(1)-->Line_14 $$ pList.add(parser)[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_5 $$ String config = conf.get(PARSERS_CONFIG_KEY)[ CD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_16 $$ if (jobProperties != null) [ CD ]
Line_16 $$ if (jobProperties != null) -->Line_17 $$ filteredProperties = new Properties()[ CD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_30 $$ return filteredProperties[ CD ]
Line_18 $$ for (Map.Entry<Object, Object> entry : jobProperties.entrySet()) -->Line_20 $$ String value = entry.getValue().toString()[ FD ]
Line_19 $$ String key = entry.getKey().toString()-->Line_22 $$ DataType<?> pValue = p.parseJobProperty(key, value)[ FD ]
Line_21 $$ for (JobPropertyParser p : pList) -->Line_22 $$ DataType<?> pValue = p.parseJobProperty(key, value)[ FD ]
Line_3 $$ Properties filteredProperties = null-->Line_17 $$ filteredProperties = new Properties()[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_6 $$ if (config != null) [ CD ]
Line_20 $$ String value = entry.getValue().toString()-->Line_22 $$ DataType<?> pValue = p.parseJobProperty(key, value)[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_7 $$ Class<JobPropertyParser>[] parsers = (Class[]) conf.getClasses(PARSERS_CONFIG_KEY)[ FD ]
Line_8 $$ for (Class<JobPropertyParser> c : parsers) -->Line_9 $$ JobPropertyParser parser = ReflectionUtils.newInstance(c, conf)[ FD ]
Line_9 $$ JobPropertyParser parser = ReflectionUtils.newInstance(c, conf)-->Line_10 $$ pList.add(parser)[ FD ]
Line_22 $$ DataType<?> pValue = p.parseJobProperty(key, value)-->Line_24 $$ filteredProperties.put(key, pValue)[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_5 $$ String config = conf.get(PARSERS_CONFIG_KEY)[ FD ]
Line_6 $$ if (config != null) -->Line_14 $$ pList.add(parser)[ CD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_9 $$ JobPropertyParser parser = ReflectionUtils.newInstance(c, conf)[ FD ]
Line_5 $$ String config = conf.get(PARSERS_CONFIG_KEY)-->Line_6 $$ if (config != null) [ FD ]
Line_18 $$ for (Map.Entry<Object, Object> entry : jobProperties.entrySet()) -->Line_19 $$ String key = entry.getKey().toString()[ FD ]
Line_2 $$ public Properties getAnonymizedValue(StatePool statePool, Configuration conf) -->Line_3 $$ Properties filteredProperties = null[ CD ]
