Line_4 $$ String argStr = argument.toString()-->Line_30 $$ if (argStr.equals("-ea") || argStr.equals("-enableassertions")) [ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_43 $$ for (Object extraJvmArg : extraJvmArgs) -->Line_44 $$ if (extraJvmArg.toString().equals("-Xdebug")) [ FD ]
Line_6 $$ if (matcher.matches()) -->Line_7 $$ systemProperty(matcher.group(1), matcher.group(2))[ CD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_7 $$ systemProperty(matcher.group(1), matcher.group(2))[ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_21 $$ if (matcher.matches()) [ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_21 $$ if (matcher.matches()) [ FD ]
Line_4 $$ String argStr = argument.toString()-->Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_16 $$ if (matcher.matches()) -->Line_17 $$ minHeapSize = matcher.group(1)[ CD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_16 $$ if (matcher.matches()) [ FD ]
Line_42 $$ Set<Object> matches = new HashSet<Object>()-->Line_54 $$ extraJvmArgs.removeAll(matches)[ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_4 $$ String argStr = argument.toString()-->Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)[ FD ]
Line_40 $$ boolean xdebugFound = false-->Line_52 $$ if (xdebugFound && xrunjdwpFound) [ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_4 $$ String argStr = argument.toString()-->Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)[ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_17 $$ minHeapSize = matcher.group(1)[ FD ]
Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)-->Line_21 $$ if (matcher.matches()) [ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_17 $$ minHeapSize = matcher.group(1)[ FD ]
Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)-->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ FD ]
Line_47 $$ if (extraJvmArg.toString().equals("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")) -->Line_49 $$ matches.add(extraJvmArg)[ CD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_16 $$ if (matcher.matches()) [ FD ]
Line_52 $$ if (xdebugFound && xrunjdwpFound) -->Line_54 $$ extraJvmArgs.removeAll(matches)[ CD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_11 $$ if (matcher.matches()) [ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_11 $$ if (matcher.matches()) [ FD ]
Line_21 $$ if (matcher.matches()) -->Line_22 $$ maxHeapSize = matcher.group(1)[ CD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_3 $$ for (Object argument : arguments) -->Line_4 $$ String argStr = argument.toString()[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)[ FD ]
Line_42 $$ Set<Object> matches = new HashSet<Object>()-->Line_49 $$ matches.add(extraJvmArg)[ FD ]
Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)-->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_22 $$ maxHeapSize = matcher.group(1)[ FD ]
Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_12 $$ systemProperty(matcher.group(1), "")[ FD ]
Line_4 $$ String argStr = argument.toString()-->Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)[ FD ]
Line_42 $$ Set<Object> matches = new HashSet<Object>()-->Line_46 $$ matches.add(extraJvmArg)[ FD ]
Line_4 $$ String argStr = argument.toString()-->Line_34 $$ if (argStr.equals("-da") || argStr.equals("-disableassertions")) [ FD ]
Line_11 $$ if (matcher.matches()) -->Line_12 $$ systemProperty(matcher.group(1), "")[ CD ]
Line_44 $$ if (extraJvmArg.toString().equals("-Xdebug")) -->Line_46 $$ matches.add(extraJvmArg)[ CD ]
Line_44 $$ if (extraJvmArg.toString().equals("-Xdebug")) -->Line_45 $$ xdebugFound = true[ CD ]
Line_41 $$ boolean xrunjdwpFound = false-->Line_48 $$ xrunjdwpFound = true[ FD ]
Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)-->Line_22 $$ maxHeapSize = matcher.group(1)[ FD ]
Line_2 $$ public void jvmArgs(Iterable<?> arguments) -->Line_42 $$ Set<Object> matches = new HashSet<Object>()[ CD ]
Line_40 $$ boolean xdebugFound = false-->Line_45 $$ xdebugFound = true[ FD ]
Line_44 $$ if (extraJvmArg.toString().equals("-Xdebug")) -->Line_47 $$ if (extraJvmArg.toString().equals("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")) [ CD ]
Line_4 $$ String argStr = argument.toString()-->Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_16 $$ if (matcher.matches()) [ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_22 $$ maxHeapSize = matcher.group(1)[ FD ]
Line_47 $$ if (extraJvmArg.toString().equals("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")) -->Line_48 $$ xrunjdwpFound = true[ CD ]
Line_48 $$ xrunjdwpFound = true-->Line_52 $$ if (xdebugFound && xrunjdwpFound) [ FD ]
Line_43 $$ for (Object extraJvmArg : extraJvmArgs) -->Line_47 $$ if (extraJvmArg.toString().equals("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")) [ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)[ FD ]
Line_45 $$ xdebugFound = true-->Line_52 $$ if (xdebugFound && xrunjdwpFound) [ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_17 $$ minHeapSize = matcher.group(1)[ FD ]
Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)-->Line_26 $$ if (matcher.matches()) [ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_12 $$ systemProperty(matcher.group(1), "")[ FD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_6 $$ if (matcher.matches()) [ FD ]
Line_20 $$ matcher = MAX_HEAP_PATTERN.matcher(argStr)-->Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)[ FD ]
Line_2 $$ public void jvmArgs(Iterable<?> arguments) -->Line_41 $$ boolean xrunjdwpFound = false[ CD ]
Line_5 $$ Matcher matcher = SYS_PROP_PATTERN.matcher(argStr)-->Line_25 $$ matcher = BOOTSTRAP_PATTERN.matcher(argStr)[ FD ]
Line_41 $$ boolean xrunjdwpFound = false-->Line_52 $$ if (xdebugFound && xrunjdwpFound) [ FD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_22 $$ maxHeapSize = matcher.group(1)[ FD ]
Line_43 $$ for (Object extraJvmArg : extraJvmArgs) -->Line_46 $$ matches.add(extraJvmArg)[ FD ]
Line_3 $$ for (Object argument : arguments) -->Line_38 $$ extraJvmArgs.add(argument)[ FD ]
Line_43 $$ for (Object extraJvmArg : extraJvmArgs) -->Line_49 $$ matches.add(extraJvmArg)[ FD ]
Line_26 $$ if (matcher.matches()) -->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ CD ]
Line_2 $$ public void jvmArgs(Iterable<?> arguments) -->Line_40 $$ boolean xdebugFound = false[ CD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ FD ]
Line_15 $$ matcher = MIN_HEAP_PATTERN.matcher(argStr)-->Line_27 $$ setBootstrapClasspath((Object[]) matcher.group(1).split(Pattern.quote(File.pathSeparator)))[ FD ]
Line_2 $$ public void jvmArgs(Iterable<?> arguments) -->Line_52 $$ if (xdebugFound && xrunjdwpFound) [ CD ]
Line_10 $$ matcher = NO_ARG_SYS_PROP_PATTERN.matcher(argStr)-->Line_21 $$ if (matcher.matches()) [ FD ]
