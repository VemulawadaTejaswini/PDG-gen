Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_6 $$ final long blockSize = 512[ CD ]
Line_15 $$ dfs = cluster.getFileSystem()-->Line_37 $$ dfs.close()[ FD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_8 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ CD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_7 $$ Configuration conf = new Configuration()[ CD ]
Line_36 $$ if (dfs != null) -->Line_37 $$ dfs.close()[ CD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()[ FD ]
Line_15 $$ dfs = cluster.getFileSystem()-->Line_36 $$ if (dfs != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_40 $$ cluster.shutdown()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_14 $$ cluster.waitClusterUp()[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_21 $$ NameNode namenode = cluster.getNameNode()[ FD ]
Line_21 $$ NameNode namenode = cluster.getNameNode()-->Line_28 $$ final HdfsFileStatus file = namenode.getRpcServer().getFileInfo(pathString)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_39 $$ if (cluster != null) [ FD ]
Line_15 $$ dfs = cluster.getFileSystem()-->Line_20 $$ DFSTestUtil.createFile(dfs, path, fileLen, REPL_FACTOR, 1)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_40 $$ cluster.shutdown()[ FD ]
Line_18 $$ final Path path = new Path(pathString)-->Line_20 $$ DFSTestUtil.createFile(dfs, path, fileLen, REPL_FACTOR, 1)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_22 $$ NetworkTopology nettop = cluster.getNamesystem().getBlockManager().getDatanodeManager().getNetworkTopology()[ FD ]
Line_17 $$ final String pathString = new String("/testfile")-->Line_28 $$ final HdfsFileStatus file = namenode.getRpcServer().getFileInfo(pathString)[ FD ]
Line_15 $$ dfs = cluster.getFileSystem()-->Line_16 $$ assertNotNull("Failed to get FileSystem", dfs)[ FD ]
Line_28 $$ final HdfsFileStatus file = namenode.getRpcServer().getFileInfo(pathString)-->Line_31 $$ fsck.check(pathString, file, res)[ FD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_3 $$ final short REPL_FACTOR = 2[ CD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_4 $$ final short NUM_REPLICAS = 1[ CD ]
Line_19 $$ long fileLen = blockSize * NUM_BLOCKS-->Line_20 $$ DFSTestUtil.createFile(dfs, path, fileLen, REPL_FACTOR, 1)[ FD ]
Line_27 $$ NamenodeFsck fsck = new NamenodeFsck(conf, namenode, nettop, pmap, out, NUM_REPLICAS, (short) 1, remoteAddress)-->Line_31 $$ fsck.check(pathString, file, res)[ FD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_5 $$ final short NUM_BLOCKS = 3[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_21 $$ NameNode namenode = cluster.getNameNode()[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_15 $$ dfs = cluster.getFileSystem()[ FD ]
Line_24 $$ Writer result = new StringWriter()-->Line_32 $$ System.out.println(result.toString())[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_14 $$ cluster.waitClusterUp()[ FD ]
Line_30 $$ Result res = new Result(conf)-->Line_31 $$ fsck.check(pathString, file, res)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_39 $$ if (cluster != null) [ FD ]
Line_6 $$ final long blockSize = 512-->Line_8 $$ conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, blockSize)[ FD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_10 $$ DistributedFileSystem dfs = null[ CD ]
Line_39 $$ if (cluster != null) -->Line_40 $$ cluster.shutdown()[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_15 $$ dfs = cluster.getFileSystem()[ FD ]
Line_28 $$ final HdfsFileStatus file = namenode.getRpcServer().getFileInfo(pathString)-->Line_29 $$ assertNotNull(file)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_13 $$ assertNotNull("Failed Cluster Creation", cluster)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()-->Line_13 $$ assertNotNull("Failed Cluster Creation", cluster)[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_16 $$ assertNotNull("Failed to get FileSystem", dfs)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_22 $$ NetworkTopology nettop = cluster.getNamesystem().getBlockManager().getDatanodeManager().getNetworkTopology()[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_15 $$ dfs = cluster.getFileSystem()[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_20 $$ DFSTestUtil.createFile(dfs, path, fileLen, REPL_FACTOR, 1)[ FD ]
Line_3 $$ final short REPL_FACTOR = 2-->Line_20 $$ DFSTestUtil.createFile(dfs, path, fileLen, REPL_FACTOR, 1)[ FD ]
Line_2 $$ public void testFsckMissingReplicas() throws IOException -->Line_9 $$ MiniDFSCluster cluster = null[ CD ]
Line_17 $$ final String pathString = new String("/testfile")-->Line_31 $$ fsck.check(pathString, file, res)[ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_36 $$ if (dfs != null) [ FD ]
Line_10 $$ DistributedFileSystem dfs = null-->Line_37 $$ dfs.close()[ FD ]
Line_4 $$ final short NUM_REPLICAS = 1-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build()[ FD ]
