Line_9 $$ Object propNode = entry.getValue()-->Line_24 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ FD ]
Line_16 $$ if (propName.equals("format")) -->Line_20 $$ if (propName.equals("numeric_resolution")) [ CD ]
Line_16 $$ if (propName.equals("format")) -->Line_19 $$ iterator.remove()[ CD ]
Line_29 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) -->Line_30 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER)[ CD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_30 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER)[ FD ]
Line_16 $$ if (propName.equals("format")) -->Line_18 $$ configuredFormat = true[ CD ]
Line_16 $$ if (propName.equals("format")) -->Line_17 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ CD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_7 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_14 $$ builder.nullValue(propNode.toString())[ FD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_21 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ FD ]
Line_23 $$ if (propName.equals("locale")) -->Line_24 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ CD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_5 $$ boolean configuredFormat = false[ CD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_19 $$ iterator.remove()[ FD ]
Line_20 $$ if (propName.equals("numeric_resolution")) -->Line_21 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ CD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_3 $$ DateFieldMapper.Builder builder = dateField(name)[ CD ]
Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_16 $$ if (propName.equals("format")) [ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_35 $$ return builder[ CD ]
Line_9 $$ Object propNode = entry.getValue()-->Line_21 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ FD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_17 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ FD ]
Line_10 $$ if (propName.equals("null_value")) -->Line_15 $$ iterator.remove()[ CD ]
Line_10 $$ if (propName.equals("null_value")) -->Line_14 $$ builder.nullValue(propNode.toString())[ CD ]
Line_5 $$ boolean configuredFormat = false-->Line_28 $$ if (!configuredFormat) [ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_7 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_24 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ FD ]
Line_9 $$ Object propNode = entry.getValue()-->Line_11 $$ if (propNode == null) [ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_32 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER_BEFORE_2_0)[ FD ]
Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_23 $$ if (propName.equals("locale")) [ FD ]
Line_7 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_9 $$ Object propNode = entry.getValue()[ FD ]
Line_20 $$ if (propName.equals("numeric_resolution")) -->Line_22 $$ iterator.remove()[ CD ]
Line_9 $$ Object propNode = entry.getValue()-->Line_17 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_25 $$ iterator.remove()[ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_10 $$ if (propName.equals("null_value")) [ CD ]
Line_3 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_4 $$ parseNumberField(builder, name, node, parserContext)[ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_15 $$ iterator.remove()[ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_29 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) [ FD ]
Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_20 $$ if (propName.equals("numeric_resolution")) [ FD ]
Line_20 $$ if (propName.equals("numeric_resolution")) -->Line_23 $$ if (propName.equals("locale")) [ CD ]
Line_23 $$ if (propName.equals("locale")) -->Line_25 $$ iterator.remove()[ CD ]
Line_18 $$ configuredFormat = true-->Line_28 $$ if (!configuredFormat) [ FD ]
Line_28 $$ if (!configuredFormat) -->Line_29 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) [ CD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_9 $$ Object propNode = entry.getValue()[ CD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_3 $$ DateFieldMapper.Builder builder = dateField(name)[ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ CD ]
Line_10 $$ if (propName.equals("null_value")) -->Line_11 $$ if (propNode == null) [ CD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_4 $$ parseNumberField(builder, name, node, parserContext)[ CD ]
Line_29 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) -->Line_32 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER_BEFORE_2_0)[ CD ]
Line_5 $$ boolean configuredFormat = false-->Line_18 $$ configuredFormat = true[ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) [ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_4 $$ parseNumberField(builder, name, node, parserContext)[ FD ]
Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_10 $$ if (propName.equals("null_value")) [ FD ]
Line_6 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_22 $$ iterator.remove()[ FD ]
Line_2 $$ public Mapper.Builder<?, ?> parse(String name, Map<String, Object> node, ParserContext parserContext) throws MapperParsingException -->Line_28 $$ if (!configuredFormat) [ CD ]
Line_7 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_8 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ FD ]
Line_9 $$ Object propNode = entry.getValue()-->Line_14 $$ builder.nullValue(propNode.toString())[ FD ]
Line_10 $$ if (propName.equals("null_value")) -->Line_16 $$ if (propName.equals("format")) [ CD ]
