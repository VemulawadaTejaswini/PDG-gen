Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_10 $$ Object propNode = entry.getValue()[ CD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_5 $$ parseNumberField(builder, name, node, parserContext)[ FD ]
Line_10 $$ Object propNode = entry.getValue()-->Line_22 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ FD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_33 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER_BEFORE_2_0)[ FD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_25 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_17 $$ if (propName.equals("format")) -->Line_19 $$ configuredFormat = true[ CD ]
Line_8 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_10 $$ Object propNode = entry.getValue()[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ CD ]
Line_17 $$ if (propName.equals("format")) -->Line_18 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ CD ]
Line_17 $$ if (propName.equals("format")) -->Line_21 $$ if (propName.equals("numeric_resolution")) [ CD ]
Line_11 $$ if (propName.equals("null_value")) -->Line_12 $$ if (propNode == null) [ CD ]
Line_8 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())[ FD ]
Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_24 $$ if (propName.equals("locale")) [ FD ]
Line_17 $$ if (propName.equals("format")) -->Line_20 $$ iterator.remove()[ CD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_18 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ FD ]
Line_10 $$ Object propNode = entry.getValue()-->Line_12 $$ if (propNode == null) [ FD ]
Line_11 $$ if (propName.equals("null_value")) -->Line_15 $$ builder.nullValue(propNode.toString())[ CD ]
Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_11 $$ if (propName.equals("null_value")) [ FD ]
Line_19 $$ configuredFormat = true-->Line_29 $$ if (!configuredFormat) [ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_23 $$ iterator.remove()[ FD ]
Line_21 $$ if (propName.equals("numeric_resolution")) -->Line_23 $$ iterator.remove()[ CD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_15 $$ builder.nullValue(propNode.toString())[ FD ]
Line_30 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) -->Line_31 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER)[ CD ]
Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_21 $$ if (propName.equals("numeric_resolution")) [ FD ]
Line_10 $$ Object propNode = entry.getValue()-->Line_25 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_26 $$ iterator.remove()[ FD ]
Line_24 $$ if (propName.equals("locale")) -->Line_26 $$ iterator.remove()[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_11 $$ if (propName.equals("null_value")) [ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_8 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_16 $$ iterator.remove()[ FD ]
Line_10 $$ Object propNode = entry.getValue()-->Line_18 $$ builder.dateTimeFormatter(parseDateTimeFormatter(propNode))[ FD ]
Line_6 $$ boolean configuredFormat = false-->Line_19 $$ configuredFormat = true[ FD ]
Line_11 $$ if (propName.equals("null_value")) -->Line_17 $$ if (propName.equals("format")) [ CD ]
Line_29 $$ if (!configuredFormat) -->Line_30 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) [ CD ]
Line_11 $$ if (propName.equals("null_value")) -->Line_16 $$ iterator.remove()[ CD ]
Line_30 $$ if (parserContext.indexVersionCreated().onOrAfter(Version.V_2_0_0_beta1)) -->Line_33 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER_BEFORE_2_0)[ CD ]
Line_7 $$ for (Iterator<Map.Entry<String, Object>> iterator = node.entrySet().iterator(); iterator.hasNext(); ) -->Line_20 $$ iterator.remove()[ FD ]
Line_21 $$ if (propName.equals("numeric_resolution")) -->Line_24 $$ if (propName.equals("locale")) [ CD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_22 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ FD ]
Line_10 $$ Object propNode = entry.getValue()-->Line_15 $$ builder.nullValue(propNode.toString())[ FD ]
Line_9 $$ String propName = Strings.toUnderscoreCase(entry.getKey())-->Line_17 $$ if (propName.equals("format")) [ FD ]
Line_21 $$ if (propName.equals("numeric_resolution")) -->Line_22 $$ builder.timeUnit(TimeUnit.valueOf(propNode.toString().toUpperCase(Locale.ROOT)))[ CD ]
Line_6 $$ boolean configuredFormat = false-->Line_29 $$ if (!configuredFormat) [ FD ]
Line_4 $$ DateFieldMapper.Builder builder = dateField(name)-->Line_31 $$ builder.dateTimeFormatter(Defaults.DATE_TIME_FORMATTER)[ FD ]
Line_24 $$ if (propName.equals("locale")) -->Line_25 $$ builder.locale(LocaleUtils.parse(propNode.toString()))[ CD ]
