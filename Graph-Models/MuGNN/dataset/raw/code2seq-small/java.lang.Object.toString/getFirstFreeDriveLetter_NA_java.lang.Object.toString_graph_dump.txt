Line_2 $$ private static char getFirstFreeDriveLetter() -->Line_15 $$ assertFalse("Occupied: " + roots.toString(), drive == 0)[ CD ]
Line_3 $$ final Set<Character> roots = ContainerUtil.map2Set(File.listRoots(), new Function<File, Character>() -->Line_5 $$ return root.getPath().toUpperCase(Locale.US).charAt(0)[ FD ]
Line_2 $$ private static char getFirstFreeDriveLetter() -->Line_16 $$ return drive[ CD ]
Line_3 $$ final Set<Character> roots = ContainerUtil.map2Set(File.listRoots(), new Function<File, Character>() -->Line_10 $$ if (!roots.contains(c)) [ FD ]
Line_3 $$ final Set<Character> roots = ContainerUtil.map2Set(File.listRoots(), new Function<File, Character>() -->Line_15 $$ assertFalse("Occupied: " + roots.toString(), drive == 0)[ FD ]
Line_2 $$ private static char getFirstFreeDriveLetter() -->Line_9 $$ for (char c = 'E'; c <= 'Z'; c++) [ CD ]
Line_2 $$ private static char getFirstFreeDriveLetter() -->Line_3 $$ final Set<Character> roots = ContainerUtil.map2Set(File.listRoots(), new Function<File, Character>() [ CD ]
Line_3 $$ final Set<Character> roots = ContainerUtil.map2Set(File.listRoots(), new Function<File, Character>() -->Line_5 $$ return root.getPath().toUpperCase(Locale.US).charAt(0)[ CD ]
Line_9 $$ for (char c = 'E'; c <= 'Z'; c++) -->Line_10 $$ if (!roots.contains(c)) [ CD ]
Line_9 $$ for (char c = 'E'; c <= 'Z'; c++) -->Line_10 $$ if (!roots.contains(c)) [ FD ]
