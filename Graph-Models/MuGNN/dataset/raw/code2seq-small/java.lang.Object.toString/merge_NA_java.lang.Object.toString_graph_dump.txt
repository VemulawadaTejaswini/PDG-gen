Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_6 $$ Document document = newData.getDocument()[ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_10 $$ Object newDataText = newData.getTransferData(DataFlavor.stringFlavor)[ CD ]
Line_23 $$ if (newData.getEndOffset() == oldData.getStartOffset()) -->Line_24 $$ return new KillRingTransferable(newDataText.toString() + oldDataText, document, newData.getStartOffset(), oldData.getEndOffset(), false)[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_7 $$ if (document == null || document != oldData.getDocument()) [ FD ]
Line_3 $$ if (!oldData.isReadyToCombine() || !newData.isReadyToCombine()) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_26 $$ return null[ CD ]
Line_12 $$ if (newDataText == null || oldDataText == null) -->Line_13 $$ return null[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_11 $$ Object oldDataText = oldData.getTransferData(DataFlavor.stringFlavor)[ CD ]
Line_15 $$ if (oldData.isCut()) -->Line_16 $$ if (newData.getStartOffset() == oldData.getStartOffset()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_20 $$ if (newData.getStartOffset() == oldData.getEndOffset()) [ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_15 $$ if (oldData.isCut()) [ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_24 $$ return new KillRingTransferable(newDataText.toString() + oldDataText, document, newData.getStartOffset(), oldData.getEndOffset(), false)[ FD ]
Line_7 $$ if (document == null || document != oldData.getDocument()) -->Line_8 $$ return null[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_3 $$ if (!oldData.isReadyToCombine() || !newData.isReadyToCombine()) [ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_23 $$ if (newData.getEndOffset() == oldData.getStartOffset()) [ FD ]
Line_16 $$ if (newData.getStartOffset() == oldData.getStartOffset()) -->Line_17 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), newData.isCut())[ CD ]
Line_20 $$ if (newData.getStartOffset() == oldData.getEndOffset()) -->Line_21 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), false)[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_15 $$ if (oldData.isCut()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_21 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), false)[ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_12 $$ if (newDataText == null || oldDataText == null) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_20 $$ if (newData.getStartOffset() == oldData.getEndOffset()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_7 $$ if (document == null || document != oldData.getDocument()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_17 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), newData.isCut())[ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_3 $$ if (!oldData.isReadyToCombine() || !newData.isReadyToCombine()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_6 $$ Document document = newData.getDocument()[ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_23 $$ if (newData.getEndOffset() == oldData.getStartOffset()) [ CD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_10 $$ Object newDataText = newData.getTransferData(DataFlavor.stringFlavor)[ FD ]
Line_10 $$ Object newDataText = newData.getTransferData(DataFlavor.stringFlavor)-->Line_24 $$ return new KillRingTransferable(newDataText.toString() + oldDataText, document, newData.getStartOffset(), oldData.getEndOffset(), false)[ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_16 $$ if (newData.getStartOffset() == oldData.getStartOffset()) [ FD ]
Line_2 $$ private static Transferable merge(@NotNull KillRingTransferable newData, @NotNull KillRingTransferable oldData) throws IOException, UnsupportedFlavorException -->Line_11 $$ Object oldDataText = oldData.getTransferData(DataFlavor.stringFlavor)[ FD ]
Line_11 $$ Object oldDataText = oldData.getTransferData(DataFlavor.stringFlavor)-->Line_21 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), false)[ FD ]
Line_11 $$ Object oldDataText = oldData.getTransferData(DataFlavor.stringFlavor)-->Line_17 $$ return new KillRingTransferable(oldDataText.toString() + newDataText, document, oldData.getStartOffset(), newData.getEndOffset(), newData.isCut())[ FD ]
