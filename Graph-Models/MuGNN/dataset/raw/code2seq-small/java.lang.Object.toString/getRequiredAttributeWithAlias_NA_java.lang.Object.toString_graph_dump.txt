Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_45 $$ attributeValue = aliasValue[ FD ]
Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_37 $$ String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())-->Line_38 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) -->Line_37 $$ String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())[ CD ]
Line_34 $$ boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)-->Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_35 $$ boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)-->Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_30 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)-->Line_31 $$ if (aliasNames != null) [ FD ]
Line_31 $$ if (aliasNames != null) -->Line_52 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ CD ]
Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) -->Line_38 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ CD ]
Line_45 $$ attributeValue = aliasValue-->Line_49 $$ attributeValue = aliasValue[ FD ]
Line_30 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)-->Line_52 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_35 $$ boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_36 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_38 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_32 $$ for (String aliasName : aliasNames) -->Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_45 $$ attributeValue = aliasValue[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_38 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_32 $$ for (String aliasName : aliasNames) -->Line_38 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_52 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_34 $$ boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)[ FD ]
Line_45 $$ attributeValue = aliasValue-->Line_52 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_29 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_49 $$ attributeValue = aliasValue[ FD ]
Line_33 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_49 $$ attributeValue = aliasValue[ FD ]
Line_49 $$ attributeValue = aliasValue-->Line_52 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
