Line_7 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)-->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_19 $$ attributeValue = aliasValue[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_4 $$ Assert.notNull(annotationType, "annotationType must not be null")[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_8 $$ if (aliasNames != null) [ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_7 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)[ FD ]
Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_12 $$ boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)[ FD ]
Line_12 $$ boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)-->Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_18 $$ if (expectedType.isArray() && attributeValue == null && aliasValue != null) -->Line_19 $$ attributeValue = aliasValue[ CD ]
Line_12 $$ boolean aliasEmpty = ObjectUtils.isEmpty(aliasValue)-->Line_21 $$ if (attributeEmpty && !aliasEmpty) [ FD ]
Line_9 $$ for (String aliasName : aliasNames) -->Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_5 $$ Assert.notNull(expectedType, "expectedType must not be null")[ FD ]
Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_22 $$ attributeValue = aliasValue[ FD ]
Line_22 $$ attributeValue = aliasValue-->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_8 $$ if (aliasNames != null) -->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ CD ]
Line_21 $$ if (attributeEmpty && !aliasEmpty) -->Line_22 $$ attributeValue = aliasValue[ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)[ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_5 $$ Assert.notNull(expectedType, "expectedType must not be null")[ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_27 $$ return attributeValue[ CD ]
Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) -->Line_14 $$ String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())[ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_18 $$ if (expectedType.isArray() && attributeValue == null && aliasValue != null) [ FD ]
Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_18 $$ if (expectedType.isArray() && attributeValue == null && aliasValue != null) -->Line_21 $$ if (attributeEmpty && !aliasEmpty) [ CD ]
Line_19 $$ attributeValue = aliasValue-->Line_22 $$ attributeValue = aliasValue[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_4 $$ Assert.notNull(annotationType, "annotationType must not be null")[ CD ]
Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) -->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ CD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_7 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)[ CD ]
Line_11 $$ boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)-->Line_21 $$ if (attributeEmpty && !aliasEmpty) [ FD ]
Line_11 $$ boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)-->Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_19 $$ attributeValue = aliasValue-->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_3 $$ Assert.hasText(attributeName, "attributeName must not be null or empty")[ CD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)[ FD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_3 $$ Assert.hasText(attributeName, "attributeName must not be null or empty")[ FD ]
Line_2 $$ private <T> T getRequiredAttributeWithAlias(String attributeName, Class<? extends Annotation> annotationType, Object annotationSource, Class<T> expectedType) -->Line_14 $$ String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())[ FD ]
Line_14 $$ String elementName = (annotationSource == null ? "unknown element" : annotationSource.toString())-->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_7 $$ List<String> aliasNames = AnnotationUtils.getAttributeAliasMap(annotationType).get(attributeName)-->Line_8 $$ if (aliasNames != null) [ FD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_22 $$ attributeValue = aliasValue[ FD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_19 $$ attributeValue = aliasValue[ FD ]
Line_10 $$ T aliasValue = getAttribute(aliasName, expectedType)-->Line_13 $$ if (!attributeEmpty && !aliasEmpty && !ObjectUtils.nullSafeEquals(attributeValue, aliasValue)) [ FD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_25 $$ assertAttributePresence(attributeName, aliasNames, attributeValue)[ FD ]
Line_9 $$ for (String aliasName : aliasNames) -->Line_15 $$ String msg = String.format("In annotation [%s] declared on [%s], attribute [%s] and its alias [%s] " + "are present with values of [%s] and [%s], but only one is permitted.", annotationType.getName(), elementName, attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue))[ FD ]
Line_6 $$ T attributeValue = getAttribute(attributeName, expectedType)-->Line_11 $$ boolean attributeEmpty = ObjectUtils.isEmpty(attributeValue)[ FD ]
