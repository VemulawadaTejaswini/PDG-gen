Line_29 $$ result = rNumber.shortValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_29 $$ result = rNumber.shortValue()[ FD ]
Line_49 $$ if (javaReturnType == BigInteger.class) -->Line_50 $$ if (rNumber instanceof BigDecimal)[ CD ]
Line_30 $$ if (javaReturnType == Byte.class)-->Line_31 $$ result = rNumber.byteValue()[ CD ]
Line_31 $$ result = rNumber.byteValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_50 $$ if (rNumber instanceof BigDecimal)-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ CD ]
Line_45 $$ if (javaReturnType == Float.class)-->Line_46 $$ result = rNumber.floatValue()[ CD ]
Line_33 $$ result = rNumber.floatValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_46 $$ result = rNumber.floatValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_34 $$ if (javaReturnType == Double.class)-->Line_35 $$ result = rNumber.doubleValue()[ CD ]
Line_39 $$ if (javaReturnType == Short.class)-->Line_41 $$ if (javaReturnType == Byte.class)[ CD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_59 $$ if (javaReturnType == BigDecimal.class)[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_45 $$ if (javaReturnType == Float.class)[ FD ]
Line_44 $$ result = rNumber.longValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_48 $$ result = rNumber.doubleValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_52 $$ if (rNumber instanceof Double || rNumber instanceof Float)-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ CD ]
Line_30 $$ if (javaReturnType == Byte.class)-->Line_32 $$ if (javaReturnType == Float.class)[ CD ]
Line_9 $$ Object result-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_47 $$ if (javaReturnType == Double.class)-->Line_48 $$ result = rNumber.doubleValue()[ CD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_28 $$ if (javaReturnType == Short.class)[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_50 $$ if (rNumber instanceof BigDecimal)[ FD ]
Line_9 $$ Object result-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_9 $$ Object result[ CD ]
Line_38 $$ result = rNumber.intValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_31 $$ result = rNumber.byteValue()[ FD ]
Line_9 $$ Object result-->Line_29 $$ result = rNumber.shortValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_9 $$ Object result-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_46 $$ result = rNumber.floatValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_26 $$ if (javaReturnType == Long.class)[ FD ]
Line_48 $$ result = rNumber.doubleValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_44 $$ result = rNumber.longValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_38 $$ result = rNumber.intValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_22 $$ if (result instanceof Number) -->Line_23 $$ Number rNumber = (Number) result[ CD ]
Line_38 $$ result = rNumber.intValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_4 $$ for (int i = 0; i < params.length; i++) params[i] = compose(protocolVersion, i, parameters.get(i))-->Line_8 $$ bindings.put(argNames.get(i).toString(), params[i])[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_46 $$ result = rNumber.floatValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_24 $$ if (javaReturnType == Integer.class)[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_49 $$ if (javaReturnType == BigInteger.class) [ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_29 $$ result = rNumber.shortValue()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_27 $$ result = rNumber.longValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_39 $$ if (javaReturnType == Short.class)-->Line_40 $$ result = rNumber.shortValue()[ CD ]
Line_31 $$ result = rNumber.byteValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_5 $$ ScriptContext scriptContext = new SimpleScriptContext()-->Line_7 $$ Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE)[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_4 $$ params[i] = compose(protocolVersion, i, parameters.get(i))[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_32 $$ if (javaReturnType == Float.class)[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_24 $$ if (javaReturnType == Integer.class)-->Line_25 $$ result = rNumber.intValue()[ CD ]
Line_33 $$ result = rNumber.floatValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_43 $$ if (javaReturnType == Long.class)-->Line_44 $$ result = rNumber.longValue()[ CD ]
Line_38 $$ result = rNumber.intValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_38 $$ result = rNumber.intValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_29 $$ result = rNumber.shortValue()[ FD ]
Line_32 $$ if (javaReturnType == Float.class)-->Line_33 $$ result = rNumber.floatValue()[ CD ]
Line_25 $$ result = rNumber.intValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_20 $$ Class<?> resultType = result.getClass()-->Line_21 $$ if (!javaReturnType.isAssignableFrom(resultType)) [ FD ]
Line_32 $$ if (javaReturnType == Float.class)-->Line_34 $$ if (javaReturnType == Double.class)[ CD ]
Line_38 $$ result = rNumber.intValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_9 $$ Object result-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_9 $$ Object result-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_44 $$ result = rNumber.longValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_27 $$ result = rNumber.longValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_30 $$ if (javaReturnType == Byte.class)[ FD ]
Line_17 $$ if (result == null)-->Line_18 $$ return null[ CD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_56 $$ if (javaReturnType == BigDecimal.class)[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_20 $$ Class<?> resultType = result.getClass()[ CD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_44 $$ result = rNumber.longValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_38 $$ result = rNumber.intValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_37 $$ if (javaReturnType == Integer.class)-->Line_38 $$ result = rNumber.intValue()[ CD ]
Line_40 $$ result = rNumber.shortValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_41 $$ if (javaReturnType == Byte.class)[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_5 $$ ScriptContext scriptContext = new SimpleScriptContext()[ CD ]
Line_27 $$ result = rNumber.longValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_45 $$ if (javaReturnType == Float.class)-->Line_47 $$ if (javaReturnType == Double.class)[ CD ]
Line_9 $$ Object result-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_39 $$ if (javaReturnType == Short.class)[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_43 $$ if (javaReturnType == Long.class)-->Line_45 $$ if (javaReturnType == Float.class)[ CD ]
Line_27 $$ result = rNumber.longValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_37 $$ if (javaReturnType == Integer.class)-->Line_39 $$ if (javaReturnType == Short.class)[ CD ]
Line_48 $$ result = rNumber.doubleValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_47 $$ if (javaReturnType == Double.class)-->Line_49 $$ if (javaReturnType == BigInteger.class) [ CD ]
Line_4 $$ for (int i = 0; i < params.length; i++) params[i] = compose(protocolVersion, i, parameters.get(i))-->Line_8 $$ for (int i = 0; i < params.length; i++) bindings.put(argNames.get(i).toString(), params[i])[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_9 $$ Object result-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_52 $$ if (rNumber instanceof Double || rNumber instanceof Float)-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ CD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)[ CD ]
Line_9 $$ Object result-->Line_25 $$ result = rNumber.intValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_9 $$ Object result-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_21 $$ if (!javaReturnType.isAssignableFrom(resultType)) [ CD ]
Line_21 $$ if (!javaReturnType.isAssignableFrom(resultType)) -->Line_22 $$ if (result instanceof Number) [ CD ]
Line_29 $$ result = rNumber.shortValue()-->Line_31 $$ result = rNumber.byteValue()[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_9 $$ Object result-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_4 $$ for (int i = 0; i < params.length; i++) params[i] = compose(protocolVersion, i, parameters.get(i))[ CD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_47 $$ if (javaReturnType == Double.class)[ FD ]
Line_41 $$ if (javaReturnType == Byte.class)-->Line_42 $$ result = rNumber.byteValue()[ CD ]
Line_46 $$ result = rNumber.floatValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_8 $$ for (int i = 0; i < params.length; i++) bindings.put(argNames.get(i).toString(), params[i])[ CD ]
Line_9 $$ Object result-->Line_27 $$ result = rNumber.longValue()[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_9 $$ Object result-->Line_31 $$ result = rNumber.byteValue()[ FD ]
Line_9 $$ Object result-->Line_22 $$ if (result instanceof Number) [ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_7 $$ Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE)-->Line_8 $$ bindings.put(argNames.get(i).toString(), params[i])[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_7 $$ Bindings bindings = scriptContext.getBindings(ScriptContext.ENGINE_SCOPE)[ CD ]
Line_9 $$ Object result-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_9 $$ Object result-->Line_20 $$ Class<?> resultType = result.getClass()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_34 $$ if (javaReturnType == Double.class)[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_5 $$ ScriptContext scriptContext = new SimpleScriptContext()-->Line_6 $$ scriptContext.setAttribute("javax.script.filename", this.name.toString(), ScriptContext.ENGINE_SCOPE)[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_41 $$ if (javaReturnType == Byte.class)-->Line_43 $$ if (javaReturnType == Long.class)[ CD ]
Line_42 $$ result = rNumber.byteValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_26 $$ if (javaReturnType == Long.class)-->Line_28 $$ if (javaReturnType == Short.class)[ CD ]
Line_46 $$ result = rNumber.floatValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_37 $$ if (javaReturnType == Integer.class)[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_33 $$ result = rNumber.floatValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_43 $$ if (javaReturnType == Long.class)[ FD ]
Line_28 $$ if (javaReturnType == Short.class)-->Line_29 $$ result = rNumber.shortValue()[ CD ]
Line_29 $$ result = rNumber.shortValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_24 $$ if (javaReturnType == Integer.class)-->Line_26 $$ if (javaReturnType == Long.class)[ CD ]
Line_23 $$ Number rNumber = (Number) result-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_31 $$ result = rNumber.byteValue()[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_6 $$ scriptContext.setAttribute("javax.script.filename", this.name.toString(), ScriptContext.ENGINE_SCOPE)[ CD ]
Line_44 $$ result = rNumber.longValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_38 $$ result = rNumber.intValue()-->Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_3 $$ Object[] params = new Object[argTypes.size()][ CD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_64 $$ return decompose(protocolVersion, result)[ CD ]
Line_50 $$ if (rNumber instanceof BigDecimal)-->Line_52 $$ if (rNumber instanceof Double || rNumber instanceof Float)[ CD ]
Line_51 $$ result = ((BigDecimal) rNumber).toBigInteger()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_31 $$ result = rNumber.byteValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_22 $$ if (result instanceof Number) -->Line_24 $$ if (javaReturnType == Integer.class)[ CD ]
Line_9 $$ Object result-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_26 $$ if (javaReturnType == Long.class)-->Line_27 $$ result = rNumber.longValue()[ CD ]
Line_29 $$ result = rNumber.shortValue()-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_38 $$ result = rNumber.intValue()[ FD ]
Line_34 $$ if (javaReturnType == Double.class)-->Line_36 $$ if (javaReturnType == BigInteger.class) [ CD ]
Line_29 $$ result = rNumber.shortValue()-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_31 $$ result = rNumber.byteValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_40 $$ result = rNumber.shortValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
Line_36 $$ if (javaReturnType == BigInteger.class) -->Line_37 $$ if (javaReturnType == Integer.class)[ CD ]
Line_23 $$ Number rNumber = (Number) result-->Line_40 $$ result = rNumber.shortValue()[ FD ]
Line_25 $$ result = rNumber.intValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_9 $$ Object result-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_42 $$ result = rNumber.byteValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_25 $$ result = rNumber.intValue()[ FD ]
Line_48 $$ result = rNumber.doubleValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_23 $$ Number rNumber = (Number) result-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_21 $$ if (!javaReturnType.isAssignableFrom(resultType)) [ FD ]
Line_9 $$ Object result-->Line_17 $$ if (result == null)[ FD ]
Line_29 $$ result = rNumber.shortValue()-->Line_46 $$ result = rNumber.floatValue()[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_27 $$ result = rNumber.longValue()-->Line_35 $$ result = rNumber.doubleValue()[ FD ]
Line_19 $$ Class<?> javaReturnType = UDHelper.asJavaClass(returnDataType)-->Line_36 $$ if (javaReturnType == BigInteger.class) [ FD ]
Line_44 $$ result = rNumber.longValue()-->Line_48 $$ result = rNumber.doubleValue()[ FD ]
Line_49 $$ if (javaReturnType == BigInteger.class) -->Line_56 $$ if (javaReturnType == BigDecimal.class)[ CD ]
Line_36 $$ if (javaReturnType == BigInteger.class) -->Line_59 $$ if (javaReturnType == BigDecimal.class)[ CD ]
Line_29 $$ result = rNumber.shortValue()-->Line_44 $$ result = rNumber.longValue()[ FD ]
Line_35 $$ result = rNumber.doubleValue()-->Line_55 $$ result = BigInteger.valueOf(rNumber.longValue())[ FD ]
Line_2 $$ public ByteBuffer executeUserDefined(int protocolVersion, List<ByteBuffer> parameters) -->Line_17 $$ if (result == null)[ CD ]
Line_25 $$ result = rNumber.intValue()-->Line_42 $$ result = rNumber.byteValue()[ FD ]
Line_33 $$ result = rNumber.floatValue()-->Line_53 $$ result = new BigDecimal(rNumber.toString()).toBigInteger()[ FD ]
Line_28 $$ if (javaReturnType == Short.class)-->Line_30 $$ if (javaReturnType == Byte.class)[ CD ]
Line_38 $$ result = rNumber.intValue()-->Line_64 $$ return decompose(protocolVersion, result)[ FD ]
