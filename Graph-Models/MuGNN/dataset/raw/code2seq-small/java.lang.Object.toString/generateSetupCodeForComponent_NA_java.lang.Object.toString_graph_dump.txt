Line_96 $$ if (propertyClass.equals(Double.class.getName())) -->Line_98 $$ if (propertyClass.equals(Float.class.getName())) [ CD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_58 $$ push(descriptor)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_77 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ FD ]
Line_135 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_137 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ CD ]
Line_76 $$ if (property instanceof LwIntroListModelProperty) -->Line_77 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_137 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_27 $$ final LwContainer container = (LwContainer) component-->Line_154 $$ for (int i = 0; i < container.getComponentCount(); i++) [ FD ]
Line_92 $$ if (propertyClass.equals(Dimension.class.getName())) -->Line_94 $$ if (propertyClass.equals(Integer.class.getName())) [ CD ]
Line_53 $$ if (isTextWithMnemonicProperty) -->Line_70 $$ endMethod()[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_141 $$ generateClientProperties(component, variable)[ FD ]
Line_100 $$ if (propertyClass.equals(Long.class.getName())) -->Line_101 $$ push(((Long) value).longValue())[ CD ]
Line_26 $$ if (component instanceof LwContainer) -->Line_27 $$ final LwContainer container = (LwContainer) component[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_8 $$ if (component.isCustomCreate() && component.getBinding() == null) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_77 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_21 $$ myBuffer.append('=')[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_26 $$ if (component instanceof LwContainer) [ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_12 $$ final String binding = component.getBinding()[ CD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_63 $$ pushVar(variable)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_149 $$ getComponentLayoutGenerator(component.getParent()).generateComponentLayout(component, this, componentVar, parentVariable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_155 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_98 $$ if (propertyClass.equals(Float.class.getName())) -->Line_99 $$ push(((Float) value).floatValue())[ CD ]
Line_118 $$ if (propertyClass.equals(Font.class.getName())) -->Line_120 $$ if (propertyClass.equals(Icon.class.getName())) [ CD ]
Line_108 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_110 $$ if (propertyClass.equals(Rectangle.class.getName())) [ CD ]
Line_110 $$ if (propertyClass.equals(Rectangle.class.getName())) -->Line_111 $$ newRectangle((Rectangle) value)[ CD ]
Line_118 $$ if (propertyClass.equals(Font.class.getName())) -->Line_119 $$ pushFont(variable, (FontDescriptor) value, property.getReadMethodName())[ CD ]
Line_53 $$ if (isTextWithMnemonicProperty) -->Line_69 $$ push(descriptor)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_9 $$ throw new CodeGenerationException(component.getId(), UIDesignerBundle.message("error.custom.create.no.binding"))[ FD ]
Line_110 $$ if (propertyClass.equals(Rectangle.class.getName())) -->Line_112 $$ if (propertyClass.equals(Insets.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_5 $$ final LwContainer parent = component.getParent()[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_12 $$ final String binding = component.getBinding()[ FD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_57 $$ pushVar(variable)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_3 $$ id2component.put(component.getId(), component)[ CD ]
Line_27 $$ final LwContainer container = (LwContainer) component-->Line_155 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_52 $$ if (descriptor.getValue() == null) -->Line_53 $$ if (isTextWithMnemonicProperty) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_144 $$ final String parentVariable = getVariable(parent, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_5 $$ final LwContainer parent = component.getParent()[ CD ]
Line_112 $$ if (propertyClass.equals(Insets.class.getName())) -->Line_113 $$ newInsets((Insets) value)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_146 $$ if (component instanceof LwNestedForm) [ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_19 $$ myBuffer.append(variable)[ FD ]
Line_108 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_109 $$ push(((Boolean) value).booleanValue())[ CD ]
Line_154 $$ for (int i = 0; i < container.getComponentCount(); i++) -->Line_155 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_13 $$ if (binding != null) -->Line_17 $$ myBuffer.append(componentClass)[ CD ]
Line_137 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) -->Line_138 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_138 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ FD ]
Line_12 $$ final String binding = component.getBinding()-->Line_13 $$ if (binding != null) [ FD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_22 $$ startConstructor(componentClass)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_29 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)[ CD ]
Line_12 $$ final String binding = component.getBinding()-->Line_14 $$ myBuffer.append(binding)[ FD ]
Line_52 $$ if (descriptor.getValue() == null) -->Line_74 $$ value = descriptor.getValue()[ CD ]
Line_100 $$ if (propertyClass.equals(Long.class.getName())) -->Line_102 $$ if (propertyClass.equals(Short.class.getName())) [ CD ]
Line_92 $$ if (propertyClass.equals(Dimension.class.getName())) -->Line_93 $$ newDimension((Dimension) value)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_26 $$ if (component instanceof LwContainer) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_138 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_68 $$ startMethodCall(variable, property.getWriteMethodName())[ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_22 $$ startConstructor(componentClass)[ CD ]
Line_120 $$ if (propertyClass.equals(Icon.class.getName())) -->Line_122 $$ if (property instanceof LwIntroEnumProperty) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_136 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ FD ]
Line_13 $$ if (binding != null) -->Line_16 $$ myBuffer.append("final ")[ CD ]
Line_96 $$ if (propertyClass.equals(Double.class.getName())) -->Line_97 $$ push(((Double) value).doubleValue())[ CD ]
Line_53 $$ if (isTextWithMnemonicProperty) -->Line_68 $$ startMethodCall(variable, property.getWriteMethodName())[ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_137 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_104 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_105 $$ push(((Byte) value).byteValue())[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_141 $$ generateClientProperties(component, variable)[ FD ]
Line_102 $$ if (propertyClass.equals(Short.class.getName())) -->Line_104 $$ if (propertyClass.equals(Byte.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_151 $$ if (component instanceof LwContainer) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_11 $$ if (!component.isCustomCreate()) [ FD ]
Line_151 $$ if (component instanceof LwContainer) -->Line_153 $$ generateBorder(container, variable)[ CD ]
Line_104 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_106 $$ if (propertyClass.equals(Character.class.getName())) [ CD ]
Line_135 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_136 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_59 $$ endMethod()[ CD ]
Line_122 $$ if (property instanceof LwIntroEnumProperty) -->Line_123 $$ pushVar(propertyClass.replace('$', '.') + "." + value.toString())[ CD ]
Line_116 $$ if (propertyClass.equals(Color.class.getName())) -->Line_118 $$ if (propertyClass.equals(Font.class.getName())) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_63 $$ pushVar(variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())[ FD ]
Line_102 $$ if (propertyClass.equals(Short.class.getName())) -->Line_103 $$ push(((Short) value).shortValue())[ CD ]
Line_114 $$ if (propertyClass.equals(String.class.getName())) -->Line_115 $$ push((String) value)[ CD ]
Line_114 $$ if (propertyClass.equals(String.class.getName())) -->Line_116 $$ if (propertyClass.equals(Color.class.getName())) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_153 $$ generateBorder(container, variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_46 $$ Object value = component.getPropertyValue(property)[ FD ]
Line_154 $$ for (int i = 0; i < container.getComponentCount(); i++) -->Line_155 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_119 $$ pushFont(variable, (FontDescriptor) value, property.getReadMethodName())[ FD ]
Line_53 $$ if (isTextWithMnemonicProperty) -->Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_141 $$ generateClientProperties(component, variable)[ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_8 $$ if (component.isCustomCreate() && component.getBinding() == null) [ FD ]
Line_94 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_95 $$ push(((Integer) value).intValue())[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_91 $$ startMethodCall(variable, property.getWriteMethodName())[ FD ]
Line_106 $$ if (propertyClass.equals(Character.class.getName())) -->Line_108 $$ if (propertyClass.equals(Boolean.class.getName())) [ CD ]
Line_26 $$ if (component instanceof LwContainer) -->Line_28 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) [ CD ]
Line_120 $$ if (propertyClass.equals(Icon.class.getName())) -->Line_121 $$ pushIcon((IconDescriptor) value)[ CD ]
Line_151 $$ if (component instanceof LwContainer) -->Line_154 $$ for (int i = 0; i < container.getComponentCount(); i++) [ CD ]
Line_28 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) -->Line_29 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ CD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_65 $$ endMethod()[ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_135 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_13 $$ if (binding != null) -->Line_14 $$ myBuffer.append(binding)[ CD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_56 $$ startMethodCall("this", AsmCodeGenerator.LOAD_BUTTON_TEXT_METHOD)[ CD ]
Line_81 $$ if (isTextWithMnemonicProperty) -->Line_82 $$ textWithMnemonic = SupportCode.parseText((String) value)[ CD ]
Line_94 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_96 $$ if (propertyClass.equals(Double.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_11 $$ if (!component.isCustomCreate()) [ CD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_13 $$ if (binding != null) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_136 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ FD ]
Line_86 $$ if (propertyClass.equals(Color.class.getName())) -->Line_88 $$ if (!descriptor.isColorSet())[ CD ]
Line_98 $$ if (propertyClass.equals(Float.class.getName())) -->Line_100 $$ if (propertyClass.equals(Long.class.getName())) [ CD ]
Line_112 $$ if (propertyClass.equals(Insets.class.getName())) -->Line_114 $$ if (propertyClass.equals(String.class.getName())) [ CD ]
Line_116 $$ if (propertyClass.equals(Color.class.getName())) -->Line_117 $$ pushColor((ColorDescriptor) value)[ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_135 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_3 $$ id2component.put(component.getId(), component)[ FD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_62 $$ startMethodCall("this", AsmCodeGenerator.LOAD_LABEL_TEXT_METHOD)[ CD ]
Line_27 $$ final LwContainer container = (LwContainer) component-->Line_153 $$ generateBorder(container, variable)[ FD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_17 $$ myBuffer.append(componentClass)[ FD ]
Line_13 $$ if (binding != null) -->Line_18 $$ myBuffer.append(" ")[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_151 $$ if (component instanceof LwContainer) [ FD ]
Line_13 $$ if (binding != null) -->Line_19 $$ myBuffer.append(variable)[ CD ]
Line_54 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_64 $$ push(descriptor)[ CD ]
Line_27 $$ final LwContainer container = (LwContainer) component-->Line_28 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) [ FD ]
Line_5 $$ final LwContainer parent = component.getParent()-->Line_144 $$ final String parentVariable = getVariable(parent, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_106 $$ if (propertyClass.equals(Character.class.getName())) -->Line_107 $$ push(((Character) value).charValue())[ CD ]
Line_27 $$ final LwContainer container = (LwContainer) component-->Line_29 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_57 $$ pushVar(variable)[ FD ]
