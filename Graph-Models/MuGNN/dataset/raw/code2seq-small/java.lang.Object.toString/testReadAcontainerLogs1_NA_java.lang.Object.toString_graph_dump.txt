Line_34 $$ for (int i = 0; i < numChars; i++) -->Line_35 $$ sb.append(filler)[ CD ]
Line_8 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")-->Line_17 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())[ FD ]
Line_11 $$ Path srcFilePath = new Path(t, testContainerId.toString())-->Line_13 $$ writeSrcFile(srcFilePath, "stdout", numChars)[ FD ]
Line_15 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_19 $$ logWriter.close()[ FD ]
Line_37 $$ String expectedContent = sb.toString()-->Line_38 $$ Assert.assertTrue("Log content incorrect", s.contains(expectedContent))[ FD ]
Line_26 $$ Writer writer = new StringWriter()-->Line_27 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_14 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_17 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())[ FD ]
Line_6 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_8 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ FD ]
Line_28 $$ String s = writer.toString()-->Line_39 $$ Assert.assertEquals(expectedLength, s.length())[ FD ]
Line_28 $$ String s = writer.toString()-->Line_31 $$ Assert.assertTrue("LogLength not matched", s.contains("LogLength:" + numChars))[ FD ]
Line_33 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ String expectedContent = sb.toString()[ FD ]
Line_28 $$ String s = writer.toString()-->Line_38 $$ Assert.assertTrue("Log content incorrect", s.contains(expectedContent))[ FD ]
Line_23 $$ LogReader logReader = new LogReader(conf, remoteAppLogFile)-->Line_25 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_16 $$ LogKey logKey = new LogKey(testContainerId)-->Line_18 $$ logWriter.append(logKey, logValue)[ FD ]
Line_12 $$ int numChars = 80000-->Line_34 $$ for (int i = 0; i < numChars; i++) [ FD ]
Line_33 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ sb.append(filler)[ FD ]
Line_25 $$ DataInputStream dis = logReader.next(rLogKey)-->Line_27 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_17 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())-->Line_18 $$ logWriter.append(logKey, logValue)[ FD ]
Line_12 $$ int numChars = 80000-->Line_13 $$ writeSrcFile(srcFilePath, "stdout", numChars)[ FD ]
Line_28 $$ String s = writer.toString()-->Line_30 $$ Assert.assertTrue("LogType not matched", s.contains("LogType:stdout"))[ FD ]
Line_28 $$ String s = writer.toString()-->Line_32 $$ Assert.assertTrue("Log Contents not matched", s.contains("Log Contents"))[ FD ]
Line_26 $$ Writer writer = new StringWriter()-->Line_28 $$ String s = writer.toString()[ FD ]
Line_29 $$ int expectedLength = "\n\nLogType:stdout".length() + ("\nLogLength:" + numChars).length() + "\nLog Contents:\n".length() + numChars-->Line_39 $$ Assert.assertEquals(expectedLength, s.length())[ FD ]
Line_6 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_7 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ FD ]
Line_24 $$ LogKey rLogKey = new LogKey()-->Line_25 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_15 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_18 $$ logWriter.append(logKey, logValue)[ FD ]
Line_9 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_11 $$ Path srcFilePath = new Path(t, testContainerId.toString())[ FD ]
Line_9 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_10 $$ Path t = new Path(srcFileRoot, testContainerId.getApplicationAttemptId().getApplicationId().toString())[ FD ]
