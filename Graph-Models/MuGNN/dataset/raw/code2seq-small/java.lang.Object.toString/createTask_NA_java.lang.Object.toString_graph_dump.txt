Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_23 $$ Object action = actualArgs.get(Task.TASK_ACTION)[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_4 $$ checkTaskArgsAndCreateDefaultValues(actualArgs)[ CD ]
Line_24 $$ if (action instanceof Action) -->Line_26 $$ task.doFirst(taskAction)[ CD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_5 $$ String name = actualArgs.get(Task.TASK_NAME).toString()[ FD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_9 $$ Class<? extends TaskInternal> type = (Class) actualArgs.get(Task.TASK_TYPE)[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_19 $$ Object group = actualArgs.get(Task.TASK_GROUP)[ CD ]
Line_23 $$ Object action = actualArgs.get(Task.TASK_ACTION)-->Line_24 $$ if (action instanceof Action) [ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_10 $$ TaskInternal task = create(name, type)[ CD ]
Line_10 $$ TaskInternal task = create(name, type)-->Line_17 $$ task.setDescription(description.toString())[ FD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_4 $$ checkTaskArgsAndCreateDefaultValues(actualArgs)[ FD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_11 $$ Object dependsOnTasks = actualArgs.get(Task.TASK_DEPENDS_ON)[ FD ]
Line_11 $$ Object dependsOnTasks = actualArgs.get(Task.TASK_DEPENDS_ON)-->Line_13 $$ task.dependsOn(dependsOnTasks)[ FD ]
Line_11 $$ Object dependsOnTasks = actualArgs.get(Task.TASK_DEPENDS_ON)-->Line_12 $$ if (dependsOnTasks != null) [ FD ]
Line_9 $$ Class<? extends TaskInternal> type = (Class) actualArgs.get(Task.TASK_TYPE)-->Line_10 $$ TaskInternal task = create(name, type)[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_20 $$ if (group != null) [ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_24 $$ if (action instanceof Action) [ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_9 $$ Class<? extends TaskInternal> type = (Class) actualArgs.get(Task.TASK_TYPE)[ CD ]
Line_24 $$ if (action instanceof Action) -->Line_27 $$ if (action != null) [ CD ]
Line_23 $$ Object action = actualArgs.get(Task.TASK_ACTION)-->Line_27 $$ if (action != null) [ FD ]
Line_15 $$ Object description = actualArgs.get(Task.TASK_DESCRIPTION)-->Line_17 $$ task.setDescription(description.toString())[ FD ]
Line_19 $$ Object group = actualArgs.get(Task.TASK_GROUP)-->Line_20 $$ if (group != null) [ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_12 $$ if (dependsOnTasks != null) [ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_23 $$ Object action = actualArgs.get(Task.TASK_ACTION)[ CD ]
Line_5 $$ String name = actualArgs.get(Task.TASK_NAME).toString()-->Line_6 $$ if (!GUtil.isTrue(name)) [ FD ]
Line_10 $$ TaskInternal task = create(name, type)-->Line_26 $$ task.doFirst(taskAction)[ FD ]
Line_12 $$ if (dependsOnTasks != null) -->Line_13 $$ task.dependsOn(dependsOnTasks)[ CD ]
Line_5 $$ String name = actualArgs.get(Task.TASK_NAME).toString()-->Line_10 $$ TaskInternal task = create(name, type)[ FD ]
Line_28 $$ Closure closure = (Closure) action-->Line_29 $$ task.doFirst(closure)[ FD ]
Line_10 $$ TaskInternal task = create(name, type)-->Line_29 $$ task.doFirst(closure)[ FD ]
Line_19 $$ Object group = actualArgs.get(Task.TASK_GROUP)-->Line_21 $$ task.setGroup(group.toString())[ FD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_19 $$ Object group = actualArgs.get(Task.TASK_GROUP)[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)[ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_16 $$ if (description != null) [ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_31 $$ return task[ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_5 $$ String name = actualArgs.get(Task.TASK_NAME).toString()[ CD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_6 $$ if (!GUtil.isTrue(name)) [ CD ]
Line_24 $$ if (action instanceof Action) -->Line_25 $$ Action<? super Task> taskAction = (Action<? super Task>) action[ CD ]
Line_15 $$ Object description = actualArgs.get(Task.TASK_DESCRIPTION)-->Line_16 $$ if (description != null) [ FD ]
Line_20 $$ if (group != null) -->Line_21 $$ task.setGroup(group.toString())[ CD ]
Line_27 $$ if (action != null) -->Line_29 $$ task.doFirst(closure)[ CD ]
Line_25 $$ Action<? super Task> taskAction = (Action<? super Task>) action-->Line_26 $$ task.doFirst(taskAction)[ FD ]
Line_16 $$ if (description != null) -->Line_17 $$ task.setDescription(description.toString())[ CD ]
Line_10 $$ TaskInternal task = create(name, type)-->Line_13 $$ task.dependsOn(dependsOnTasks)[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_11 $$ Object dependsOnTasks = actualArgs.get(Task.TASK_DEPENDS_ON)[ CD ]
Line_27 $$ if (action != null) -->Line_28 $$ Closure closure = (Closure) action[ CD ]
Line_3 $$ Map<String, Object> actualArgs = new HashMap<String, Object>(args)-->Line_15 $$ Object description = actualArgs.get(Task.TASK_DESCRIPTION)[ FD ]
Line_10 $$ TaskInternal task = create(name, type)-->Line_21 $$ task.setGroup(group.toString())[ FD ]
Line_2 $$ public TaskInternal createTask(Map<String, ?> args) -->Line_15 $$ Object description = actualArgs.get(Task.TASK_DESCRIPTION)[ CD ]
