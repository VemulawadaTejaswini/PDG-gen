Line_26 $$ if (containsAllBetween(matches, first, last)) -->Line_29 $$ if (first >= myOldClassName.length || last >= myOldClassName.length) [ CD ]
Line_29 $$ if (first >= myOldClassName.length || last >= myOldClassName.length) -->Line_30 $$ LOG.error("old class name = " + myOldClassNameAsGiven + ", new class name = " + myNewClassNameAsGiven + ", propertyWords = " + Arrays.asList(propertyWords).toString())[ CD ]
Line_26 $$ if (containsAllBetween(matches, first, last)) -->Line_27 $$ final String newString = change.getNewString()[ CD ]
Line_15 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_33 $$ replacements.put(Pair.create(propertyWordFirst, matches.get(last)), replacement)[ FD ]
Line_26 $$ if (containsAllBetween(matches, first, last)) -->Line_33 $$ replacements.put(Pair.create(propertyWordFirst, matches.get(last)), replacement)[ CD ]
Line_25 $$ if (change.getOldLength() > 0) -->Line_38 $$ if (matches.containsKey(first)) [ CD ]
Line_26 $$ if (containsAllBetween(matches, first, last)) -->Line_32 $$ final String replacement = suggestReplacement(propertyWords[propertyWordFirst], newString)[ CD ]
Line_38 $$ if (matches.containsKey(first)) -->Line_41 $$ if (matches.contains(last)) [ CD ]
Line_25 $$ if (change.getOldLength() > 0) -->Line_47 $$ replacements.put(Pair.create(propertyWordToInsertBefore, propertyWordToInsertBefore - 1), newString)[ CD ]
Line_15 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_47 $$ replacements.put(Pair.create(propertyWordToInsertBefore, propertyWordToInsertBefore - 1), newString)[ FD ]
Line_38 $$ if (matches.containsKey(first)) -->Line_39 $$ propertyWordToInsertBefore = matches.get(first)[ CD ]
Line_15 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_19 $$ return pair.getFirst().compareTo(pair1.getFirst())[ CD ]
Line_15 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_19 $$ return pair.getFirst().compareTo(pair1.getFirst())[ FD ]
Line_26 $$ if (containsAllBetween(matches, first, last)) -->Line_28 $$ final int propertyWordFirst = matches.get(first)[ CD ]
Line_25 $$ if (change.getOldLength() > 0) -->Line_26 $$ if (containsAllBetween(matches, first, last)) [ CD ]
Line_25 $$ if (change.getOldLength() > 0) -->Line_36 $$ final String newString = change.getNewString()[ CD ]
