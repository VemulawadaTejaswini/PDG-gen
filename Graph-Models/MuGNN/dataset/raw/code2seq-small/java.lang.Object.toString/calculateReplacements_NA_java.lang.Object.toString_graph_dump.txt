Line_12 $$ if (containsAllBetween(matches, first, last)) -->Line_19 $$ replacements.put(Pair.create(propertyWordFirst, matches.get(last)), replacement)[ CD ]
Line_24 $$ if (matches.containsKey(first)) -->Line_27 $$ if (matches.contains(last)) [ CD ]
Line_11 $$ if (change.getOldLength() > 0) -->Line_22 $$ final String newString = change.getNewString()[ CD ]
Line_3 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_33 $$ replacements.put(Pair.create(propertyWordToInsertBefore, propertyWordToInsertBefore - 1), newString)[ FD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_28 $$ propertyWordToInsertBefore = matches.get(last) + 1[ FD ]
Line_12 $$ if (containsAllBetween(matches, first, last)) -->Line_18 $$ final String replacement = suggestReplacement(propertyWords[propertyWordFirst], newString)[ CD ]
Line_12 $$ if (containsAllBetween(matches, first, last)) -->Line_14 $$ final int propertyWordFirst = matches.get(first)[ CD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_3 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() [ CD ]
Line_15 $$ if (first >= myOldClassName.length || last >= myOldClassName.length) -->Line_16 $$ LOG.error("old class name = " + myOldClassNameAsGiven + ", new class name = " + myNewClassNameAsGiven + ", propertyWords = " + Arrays.asList(propertyWords).toString())[ CD ]
Line_3 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_5 $$ return pair.getFirst().compareTo(pair1.getFirst())[ FD ]
Line_11 $$ if (change.getOldLength() > 0) -->Line_33 $$ replacements.put(Pair.create(propertyWordToInsertBefore, propertyWordToInsertBefore - 1), newString)[ CD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_27 $$ if (matches.contains(last)) [ FD ]
Line_24 $$ if (matches.containsKey(first)) -->Line_25 $$ propertyWordToInsertBefore = matches.get(first)[ CD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_25 $$ propertyWordToInsertBefore = matches.get(first)[ FD ]
Line_12 $$ if (containsAllBetween(matches, first, last)) -->Line_15 $$ if (first >= myOldClassName.length || last >= myOldClassName.length) [ CD ]
Line_11 $$ if (change.getOldLength() > 0) -->Line_12 $$ if (containsAllBetween(matches, first, last)) [ CD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_24 $$ if (matches.containsKey(first)) [ FD ]
Line_3 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_19 $$ replacements.put(Pair.create(propertyWordFirst, matches.get(last)), replacement)[ FD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_16 $$ LOG.error("old class name = " + myOldClassNameAsGiven + ", new class name = " + myNewClassNameAsGiven + ", propertyWords = " + Arrays.asList(propertyWords).toString())[ FD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_36 $$ return replacements[ CD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_14 $$ final int propertyWordFirst = matches.get(first)[ FD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_12 $$ if (containsAllBetween(matches, first, last)) [ FD ]
Line_2 $$ private TreeMap<Pair<Integer, Integer>, String> calculateReplacements(String[] propertyWords, TIntIntHashMap matches) -->Line_19 $$ replacements.put(Pair.create(propertyWordFirst, matches.get(last)), replacement)[ FD ]
Line_11 $$ if (change.getOldLength() > 0) -->Line_24 $$ if (matches.containsKey(first)) [ CD ]
Line_3 $$ TreeMap<Pair<Integer, Integer>, String> replacements = new TreeMap<Pair<Integer, Integer>, String>(new Comparator<Pair<Integer, Integer>>() -->Line_5 $$ return pair.getFirst().compareTo(pair1.getFirst())[ CD ]
Line_12 $$ if (containsAllBetween(matches, first, last)) -->Line_13 $$ final String newString = change.getNewString()[ CD ]
