Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_18 $$ return GroovyToJavaGenerator.getDefaultValueText(declaredType.getCanonicalText())[ FD ]
Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_18 $$ return GroovyToJavaGenerator.getDefaultValueText(declaredType.getCanonicalText())[ CD ]
Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_5 $$ if (eval instanceof Float || PsiType.FLOAT.equals(TypesUtil.unboxPrimitiveTypeWrapper(variable.getType())) && eval instanceof Number) [ FD ]
Line_7 $$ if (eval instanceof Character) -->Line_11 $$ buffer.append('\'')[ CD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_9 $$ buffer.append('\'')[ FD ]
Line_3 $$ if (declaredType instanceof PsiPrimitiveType) -->Line_5 $$ if (eval instanceof Float || PsiType.FLOAT.equals(TypesUtil.unboxPrimitiveTypeWrapper(variable.getType())) && eval instanceof Number) [ CD ]
Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_4 $$ Object eval = GroovyConstantExpressionEvaluator.evaluate(variable.getInitializerGroovy())[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_12 $$ return buffer.toString()[ FD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_10 $$ StringUtil.escapeStringCharacters(1, Character.toString(((Character) eval).charValue()), buffer)[ FD ]
Line_7 $$ if (eval instanceof Character) -->Line_8 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder buffer = new StringBuilder()-->Line_11 $$ buffer.append('\'')[ FD ]
Line_3 $$ if (declaredType instanceof PsiPrimitiveType) -->Line_4 $$ Object eval = GroovyConstantExpressionEvaluator.evaluate(variable.getInitializerGroovy())[ CD ]
Line_5 $$ if (eval instanceof Float || PsiType.FLOAT.equals(TypesUtil.unboxPrimitiveTypeWrapper(variable.getType())) && eval instanceof Number) -->Line_7 $$ if (eval instanceof Character) [ CD ]
Line_4 $$ Object eval = GroovyConstantExpressionEvaluator.evaluate(variable.getInitializerGroovy())-->Line_15 $$ return eval.toString()[ FD ]
Line_14 $$ if (eval instanceof Number || eval instanceof Boolean) -->Line_15 $$ return eval.toString()[ CD ]
Line_3 $$ if (declaredType instanceof PsiPrimitiveType) -->Line_14 $$ if (eval instanceof Number || eval instanceof Boolean) [ CD ]
Line_7 $$ if (eval instanceof Character) -->Line_12 $$ return buffer.toString()[ CD ]
Line_7 $$ if (eval instanceof Character) -->Line_9 $$ buffer.append('\'')[ CD ]
Line_4 $$ Object eval = GroovyConstantExpressionEvaluator.evaluate(variable.getInitializerGroovy())-->Line_6 $$ return eval.toString() + "f"[ FD ]
Line_5 $$ if (eval instanceof Float || PsiType.FLOAT.equals(TypesUtil.unboxPrimitiveTypeWrapper(variable.getType())) && eval instanceof Number) -->Line_6 $$ return eval.toString() + "f"[ CD ]
Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_3 $$ if (declaredType instanceof PsiPrimitiveType) [ CD ]
Line_2 $$ private static String getVariableInitializer(GrVariable variable, PsiType declaredType) -->Line_3 $$ if (declaredType instanceof PsiPrimitiveType) [ FD ]
Line_7 $$ if (eval instanceof Character) -->Line_10 $$ StringUtil.escapeStringCharacters(1, Character.toString(((Character) eval).charValue()), buffer)[ CD ]
Line_4 $$ Object eval = GroovyConstantExpressionEvaluator.evaluate(variable.getInitializerGroovy())-->Line_7 $$ if (eval instanceof Character) [ FD ]
