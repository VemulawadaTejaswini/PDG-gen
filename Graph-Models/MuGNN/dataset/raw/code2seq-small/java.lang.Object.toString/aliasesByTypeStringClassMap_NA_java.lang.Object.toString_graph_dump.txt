Line_3 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()-->Line_7 $$ marshaller.setAliasesByType(aliases)[ FD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_4 $$ aliases.put("flight", Flight.class)[ CD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_8 $$ Writer writer = new StringWriter()[ CD ]
Line_5 $$ FlightSubclass flight = new FlightSubclass()-->Line_6 $$ flight.setFlightNumber(42)[ FD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_6 $$ flight.setFlightNumber(42)[ CD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_5 $$ FlightSubclass flight = new FlightSubclass()[ CD ]
Line_8 $$ Writer writer = new StringWriter()-->Line_10 $$ assertXMLEqual("Marshaller does not use attributes", EXPECTED_STRING, writer.toString())[ FD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_9 $$ marshaller.marshal(flight, new StreamResult(writer))[ CD ]
Line_3 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()-->Line_4 $$ aliases.put("flight", Flight.class)[ FD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_10 $$ assertXMLEqual("Marshaller does not use attributes", EXPECTED_STRING, writer.toString())[ CD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_7 $$ marshaller.setAliasesByType(aliases)[ CD ]
Line_5 $$ FlightSubclass flight = new FlightSubclass()-->Line_9 $$ marshaller.marshal(flight, new StreamResult(writer))[ FD ]
Line_2 $$ public void aliasesByTypeStringClassMap() throws Exception -->Line_3 $$ Map<String, Class<?>> aliases = new HashMap<String, Class<?>>()[ CD ]
