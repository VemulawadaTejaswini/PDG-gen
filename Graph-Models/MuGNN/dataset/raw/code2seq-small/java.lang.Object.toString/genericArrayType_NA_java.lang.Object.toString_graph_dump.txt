Line_2 $$ public void genericArrayType() throws Exception -->Line_5 $$ assertSerialzable(type)[ CD ]
Line_3 $$ GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField("genericArrayType"))-->Line_5 $$ assertSerialzable(type)[ FD ]
Line_2 $$ public void genericArrayType() throws Exception -->Line_6 $$ assertSerialzable(type.getGenericComponentType())[ CD ]
Line_2 $$ public void genericArrayType() throws Exception -->Line_3 $$ GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField("genericArrayType"))[ CD ]
Line_3 $$ GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField("genericArrayType"))-->Line_6 $$ assertSerialzable(type.getGenericComponentType())[ FD ]
Line_2 $$ public void genericArrayType() throws Exception -->Line_4 $$ assertThat(type.toString(), equalTo("java.util.List<java.lang.String>[]"))[ CD ]
Line_3 $$ GenericArrayType type = (GenericArrayType) SerializableTypeWrapper.forField(Fields.class.getField("genericArrayType"))-->Line_4 $$ assertThat(type.toString(), equalTo("java.util.List<java.lang.String>[]"))[ FD ]
