Line_10 $$ Object aliasValue = getRawAttributeValue(aliasName)-->Line_13 $$ throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)))[ FD ]
Line_10 $$ Object aliasValue = getRawAttributeValue(aliasName)-->Line_11 $$ if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && !ObjectUtils.nullSafeEquals(attributeValue, defaultValue) && !ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) [ FD ]
Line_5 $$ Object attributeValue = getRawAttributeValue(attributeMethod)-->Line_18 $$ attributeValue = aliasValue[ FD ]
Line_8 $$ Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName)-->Line_11 $$ if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && !ObjectUtils.nullSafeEquals(attributeValue, defaultValue) && !ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) [ FD ]
Line_6 $$ List<String> aliasNames = this.attributeAliasMap.get(attributeName)-->Line_7 $$ if (aliasNames != null) [ FD ]
Line_12 $$ String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element")-->Line_13 $$ throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)))[ FD ]
Line_10 $$ Object aliasValue = getRawAttributeValue(aliasName)-->Line_18 $$ attributeValue = aliasValue[ FD ]
Line_5 $$ Object attributeValue = getRawAttributeValue(attributeMethod)-->Line_11 $$ if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && !ObjectUtils.nullSafeEquals(attributeValue, defaultValue) && !ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) [ FD ]
Line_9 $$ for (String aliasName : aliasNames) -->Line_10 $$ Object aliasValue = getRawAttributeValue(aliasName)[ FD ]
Line_11 $$ if (!ObjectUtils.nullSafeEquals(attributeValue, aliasValue) && !ObjectUtils.nullSafeEquals(attributeValue, defaultValue) && !ObjectUtils.nullSafeEquals(aliasValue, defaultValue)) -->Line_12 $$ String elementName = (getAnnotatedElement() != null ? getAnnotatedElement().toString() : "unknown element")[ CD ]
Line_4 $$ String attributeName = attributeMethod.getName()-->Line_8 $$ Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName)[ FD ]
Line_7 $$ if (aliasNames != null) -->Line_8 $$ Object defaultValue = AnnotationUtils.getDefaultValue(getAnnotationType(), attributeName)[ CD ]
Line_4 $$ String attributeName = attributeMethod.getName()-->Line_13 $$ throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)))[ FD ]
Line_9 $$ for (String aliasName : aliasNames) -->Line_13 $$ throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)))[ FD ]
Line_5 $$ Object attributeValue = getRawAttributeValue(attributeMethod)-->Line_13 $$ throw new AnnotationConfigurationException(String.format("In annotation [%s] declared on %s and synthesized from [%s], attribute '%s' and its " + "alias '%s' are present with values of [%s] and [%s], but only one is permitted.", getAnnotationType().getName(), elementName, getSource(), attributeName, aliasName, ObjectUtils.nullSafeToString(attributeValue), ObjectUtils.nullSafeToString(aliasValue)))[ FD ]
Line_4 $$ String attributeName = attributeMethod.getName()-->Line_6 $$ List<String> aliasNames = this.attributeAliasMap.get(attributeName)[ FD ]
