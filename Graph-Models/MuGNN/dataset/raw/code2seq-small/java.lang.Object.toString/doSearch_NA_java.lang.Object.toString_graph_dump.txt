Line_4 $$ Session session = getSession()-->Line_22 $$ ItemIterable<QueryResult> queryResults = session.query(queryString, searchAllVersions)[ FD ]
Line_18 $$ if (_log.isDebugEnabled()) -->Line_19 $$ _log.debug("CMIS search query: " + queryString)[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_3 $$ long startTime = System.currentTimeMillis()[ CD ]
Line_14 $$ String queryString = _cmisSearchQueryBuilder.buildQuery(searchContext, query)-->Line_16 $$ queryString += " AND (" + PropertyIds.IS_LATEST_VERSION + " = true)"[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_24 $$ int end = searchContext.getEnd()[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_22 $$ ItemIterable<QueryResult> queryResults = session.query(queryString, searchAllVersions)[ CD ]
Line_69 $$ if (scoreObj != null) -->Line_72 $$ scores.add(1.0f)[ CD ]
Line_30 $$ List<String> snippets = new ArrayList()-->Line_87 $$ hits.setSnippets(snippets.toArray(new String[snippets.size()]))[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_79 $$ float searchTime = (float) (System.currentTimeMillis() - startTime) / Time.SECOND[ CD ]
Line_50 $$ Throwable cause = e.getCause()-->Line_52 $$ cause = cause.getCause()[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_12 $$ queryConfig.setAttribute("repositoryProductName", productName)[ CD ]
Line_30 $$ List<String> snippets = new ArrayList()-->Line_77 $$ snippets.add(StringPool.BLANK)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_6 $$ RepositoryCapabilities repositoryCapabilities = repositoryInfo.getCapabilities()[ CD ]
Line_23 $$ int start = searchContext.getStart()-->Line_34 $$ if (total <= start) [ FD ]
Line_54 $$ if (cause instanceof CmisObjectNotFoundException) -->Line_57 $$ _log.debug("Search result ignored for invalid object ID", e)[ CD ]
Line_49 $$ if (_log.isDebugEnabled()) -->Line_50 $$ Throwable cause = e.getCause()[ CD ]
Line_26 $$ start = 0-->Line_34 $$ if (total <= start) [ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_10 $$ String productName = repositoryInfo.getProductName()[ CD ]
Line_45 $$ FileEntry fileEntry = null-->Line_64 $$ documentHelper.setEntryKey(fileEntry.getModelClassName(), fileEntry.getFileEntryId())[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_28 $$ int total = 0[ CD ]
Line_63 $$ DocumentHelper documentHelper = new DocumentHelper(document)-->Line_64 $$ documentHelper.setEntryKey(fileEntry.getModelClassName(), fileEntry.getFileEntryId())[ FD ]
Line_25 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) -->Line_26 $$ start = 0[ CD ]
Line_40 $$ com.liferay.portal.kernel.search.Document document = new DocumentImpl()-->Line_65 $$ document.addKeyword(Field.TITLE, fileEntry.getTitle())[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_83 $$ hits.setQuery(query)[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_30 $$ List<String> snippets = new ArrayList()[ CD ]
Line_32 $$ for (QueryResult queryResult : queryResults) -->Line_68 $$ Object scoreObj = queryResult.getPropertyValueByQueryName("HITS")[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_31 $$ List<Float> scores = new ArrayList()[ CD ]
Line_40 $$ com.liferay.portal.kernel.search.Document document = new DocumentImpl()-->Line_66 $$ documents.add(document)[ FD ]
Line_31 $$ List<Float> scores = new ArrayList()-->Line_70 $$ scores.add(Float.valueOf(scoreObj.toString()))[ FD ]
Line_50 $$ Throwable cause = e.getCause()-->Line_51 $$ if (cause != null) [ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_89 $$ return hits[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_21 $$ boolean searchAllVersions = _cmisRepositoryDetector.isNuxeo5_5OrHigher()[ CD ]
Line_5 $$ RepositoryInfo repositoryInfo = session.getRepositoryInfo()-->Line_11 $$ String productVersion = repositoryInfo.getProductVersion()[ FD ]
Line_29 $$ List<com.liferay.portal.kernel.search.Document> documents = new ArrayList()-->Line_81 $$ hits.setDocs(documents.toArray(new com.liferay.portal.kernel.search.Document[documents.size()]))[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_24 $$ int end = searchContext.getEnd()[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_13 $$ queryConfig.setAttribute("repositoryProductVersion", productVersion)[ CD ]
Line_49 $$ if (_log.isDebugEnabled()) -->Line_51 $$ if (cause != null) [ CD ]
Line_31 $$ List<Float> scores = new ArrayList()-->Line_72 $$ scores.add(1.0f)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_8 $$ CapabilityQuery capabilityQuery = repositoryCapabilities.getQueryCapability()[ CD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_81 $$ hits.setDocs(documents.toArray(new com.liferay.portal.kernel.search.Document[documents.size()]))[ FD ]
Line_29 $$ List<com.liferay.portal.kernel.search.Document> documents = new ArrayList()-->Line_66 $$ documents.add(document)[ FD ]
Line_67 $$ if (queryConfig.isScoreEnabled()) -->Line_68 $$ Object scoreObj = queryResult.getPropertyValueByQueryName("HITS")[ CD ]
Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()-->Line_67 $$ if (queryConfig.isScoreEnabled()) [ FD ]
Line_52 $$ cause = cause.getCause()-->Line_55 $$ _log.debug("Search result ignored for CMIS document which " + "has a version with an invalid object ID " + cause.getMessage())[ FD ]
Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()-->Line_9 $$ queryConfig.setAttribute("capabilityQuery", capabilityQuery.value())[ FD ]
Line_49 $$ if (_log.isDebugEnabled()) -->Line_54 $$ if (cause instanceof CmisObjectNotFoundException) [ CD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_83 $$ hits.setQuery(query)[ FD ]
Line_67 $$ if (queryConfig.isScoreEnabled()) -->Line_69 $$ if (scoreObj != null) [ CD ]
Line_54 $$ if (cause instanceof CmisObjectNotFoundException) -->Line_55 $$ _log.debug("Search result ignored for CMIS document which " + "has a version with an invalid object ID " + cause.getMessage())[ CD ]
Line_6 $$ RepositoryCapabilities repositoryCapabilities = repositoryInfo.getCapabilities()-->Line_8 $$ CapabilityQuery capabilityQuery = repositoryCapabilities.getQueryCapability()[ FD ]
Line_47 $$ fileEntry = toFileEntry(objectId, true)-->Line_64 $$ documentHelper.setEntryKey(fileEntry.getModelClassName(), fileEntry.getFileEntryId())[ FD ]
Line_31 $$ List<Float> scores = new ArrayList()-->Line_85 $$ hits.setScores(ArrayUtil.toFloatArray(scores))[ FD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_84 $$ hits.setQueryTerms(new String[0])[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_14 $$ String queryString = _cmisSearchQueryBuilder.buildQuery(searchContext, query)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_87 $$ hits.setSnippets(snippets.toArray(new String[snippets.size()]))[ CD ]
Line_42 $$ if (_log.isDebugEnabled()) -->Line_43 $$ _log.debug("Search result object ID " + objectId)[ CD ]
Line_28 $$ int total = 0-->Line_82 $$ hits.setLength(total)[ FD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_86 $$ hits.setSearchTime(searchTime)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()[ CD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_82 $$ hits.setLength(total)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_4 $$ Session session = getSession()[ CD ]
Line_45 $$ FileEntry fileEntry = null-->Line_47 $$ fileEntry = toFileEntry(objectId, true)[ FD ]
Line_21 $$ boolean searchAllVersions = _cmisRepositoryDetector.isNuxeo5_5OrHigher()-->Line_22 $$ ItemIterable<QueryResult> queryResults = session.query(queryString, searchAllVersions)[ FD ]
Line_51 $$ if (cause != null) -->Line_52 $$ cause = cause.getCause()[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_88 $$ hits.setStart(startTime)[ CD ]
Line_5 $$ RepositoryInfo repositoryInfo = session.getRepositoryInfo()-->Line_6 $$ RepositoryCapabilities repositoryCapabilities = repositoryInfo.getCapabilities()[ FD ]
Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()-->Line_13 $$ queryConfig.setAttribute("repositoryProductVersion", productVersion)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_5 $$ RepositoryInfo repositoryInfo = session.getRepositoryInfo()[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_82 $$ hits.setLength(total)[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()[ FD ]
Line_52 $$ cause = cause.getCause()-->Line_54 $$ if (cause instanceof CmisObjectNotFoundException) [ FD ]
Line_69 $$ if (scoreObj != null) -->Line_70 $$ scores.add(Float.valueOf(scoreObj.toString()))[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_15 $$ if (_cmisRepositoryDetector.isNuxeo5_4()) [ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_86 $$ hits.setSearchTime(searchTime)[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_11 $$ String productVersion = repositoryInfo.getProductVersion()[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_80 $$ Hits hits = new HitsImpl()[ CD ]
Line_11 $$ String productVersion = repositoryInfo.getProductVersion()-->Line_13 $$ queryConfig.setAttribute("repositoryProductVersion", productVersion)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_85 $$ hits.setScores(ArrayUtil.toFloatArray(scores))[ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_81 $$ hits.setDocs(documents.toArray(new com.liferay.portal.kernel.search.Document[documents.size()]))[ CD ]
Line_8 $$ CapabilityQuery capabilityQuery = repositoryCapabilities.getQueryCapability()-->Line_9 $$ queryConfig.setAttribute("capabilityQuery", capabilityQuery.value())[ FD ]
Line_79 $$ float searchTime = (float) (System.currentTimeMillis() - startTime) / Time.SECOND-->Line_86 $$ hits.setSearchTime(searchTime)[ FD ]
Line_7 $$ QueryConfig queryConfig = searchContext.getQueryConfig()-->Line_12 $$ queryConfig.setAttribute("repositoryProductName", productName)[ FD ]
Line_68 $$ Object scoreObj = queryResult.getPropertyValueByQueryName("HITS")-->Line_70 $$ scores.add(Float.valueOf(scoreObj.toString()))[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_84 $$ hits.setQueryTerms(new String[0])[ CD ]
Line_50 $$ Throwable cause = e.getCause()-->Line_54 $$ if (cause instanceof CmisObjectNotFoundException) [ FD ]
Line_16 $$ queryString += " AND (" + PropertyIds.IS_LATEST_VERSION + " = true)"-->Line_22 $$ ItemIterable<QueryResult> queryResults = session.query(queryString, searchAllVersions)[ FD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_87 $$ hits.setSnippets(snippets.toArray(new String[snippets.size()]))[ FD ]
Line_32 $$ for (QueryResult queryResult : queryResults) -->Line_41 $$ String objectId = queryResult.getPropertyValueByQueryName(PropertyIds.OBJECT_ID)[ FD ]
Line_31 $$ List<Float> scores = new ArrayList()-->Line_75 $$ scores.add(1.0f)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_23 $$ int start = searchContext.getStart()[ CD ]
Line_10 $$ String productName = repositoryInfo.getProductName()-->Line_12 $$ queryConfig.setAttribute("repositoryProductName", productName)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_14 $$ String queryString = _cmisSearchQueryBuilder.buildQuery(searchContext, query)[ CD ]
Line_41 $$ String objectId = queryResult.getPropertyValueByQueryName(PropertyIds.OBJECT_ID)-->Line_47 $$ fileEntry = toFileEntry(objectId, true)[ FD ]
Line_68 $$ Object scoreObj = queryResult.getPropertyValueByQueryName("HITS")-->Line_69 $$ if (scoreObj != null) [ FD ]
Line_23 $$ int start = searchContext.getStart()-->Line_26 $$ start = 0[ FD ]
Line_50 $$ Throwable cause = e.getCause()-->Line_55 $$ _log.debug("Search result ignored for CMIS document which " + "has a version with an invalid object ID " + cause.getMessage())[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_25 $$ if ((start == QueryUtil.ALL_POS) && (end == QueryUtil.ALL_POS)) [ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_9 $$ queryConfig.setAttribute("capabilityQuery", capabilityQuery.value())[ CD ]
Line_45 $$ FileEntry fileEntry = null-->Line_65 $$ document.addKeyword(Field.TITLE, fileEntry.getTitle())[ FD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_85 $$ hits.setScores(ArrayUtil.toFloatArray(scores))[ FD ]
Line_4 $$ Session session = getSession()-->Line_5 $$ RepositoryInfo repositoryInfo = session.getRepositoryInfo()[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_83 $$ hits.setQuery(query)[ FD ]
Line_5 $$ RepositoryInfo repositoryInfo = session.getRepositoryInfo()-->Line_10 $$ String productName = repositoryInfo.getProductName()[ FD ]
Line_47 $$ fileEntry = toFileEntry(objectId, true)-->Line_65 $$ document.addKeyword(Field.TITLE, fileEntry.getTitle())[ FD ]
Line_28 $$ int total = 0-->Line_60 $$ total--[ FD ]
Line_80 $$ Hits hits = new HitsImpl()-->Line_88 $$ hits.setStart(startTime)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_23 $$ int start = searchContext.getStart()[ FD ]
Line_28 $$ int total = 0-->Line_34 $$ if (total <= start) [ FD ]
Line_28 $$ int total = 0-->Line_33 $$ total++[ FD ]
Line_15 $$ if (_cmisRepositoryDetector.isNuxeo5_4()) -->Line_16 $$ queryString += " AND (" + PropertyIds.IS_LATEST_VERSION + " = true)"[ CD ]
Line_14 $$ String queryString = _cmisSearchQueryBuilder.buildQuery(searchContext, query)-->Line_22 $$ ItemIterable<QueryResult> queryResults = session.query(queryString, searchAllVersions)[ FD ]
Line_3 $$ long startTime = System.currentTimeMillis()-->Line_88 $$ hits.setStart(startTime)[ FD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_18 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ protected Hits doSearch(SearchContext searchContext, Query query) throws Exception -->Line_29 $$ List<com.liferay.portal.kernel.search.Document> documents = new ArrayList()[ CD ]
Line_67 $$ if (queryConfig.isScoreEnabled()) -->Line_75 $$ scores.add(1.0f)[ CD ]
