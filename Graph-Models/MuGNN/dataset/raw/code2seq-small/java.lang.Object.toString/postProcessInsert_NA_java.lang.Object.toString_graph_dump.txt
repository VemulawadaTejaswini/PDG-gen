Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_72 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ CD ]
Line_77 $$ if (isIntegral(versionType)) -->Line_84 $$ if (isDatabaseGeneratedTimestamp(versionType)) [ CD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_5 $$ insertStatement.validate()[ FD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_71 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_74 $$ versionValueNode = versionMethodNode[ FD ]
Line_60 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)-->Line_62 $$ parameters.add(0, paramSpec)[ FD ]
Line_16 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)-->Line_20 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())[ FD ]
Line_66 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_67 $$ versionMethodNode.addChild(methodIdentNode)[ FD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_47 $$ if (includeVersionProperty) -->Line_94 $$ insertStatement.getIntoClause().prependVersionColumnSpec()[ CD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_46 $$ final boolean includeVersionProperty = persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable()[ FD ]
Line_21 $$ if (fragment != null) -->Line_29 $$ fragmentNode.setNextSibling(originalFirstSelectExprNode)[ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_66 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")[ CD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_97 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()[ FD ]
Line_47 $$ if (includeVersionProperty) -->Line_50 $$ AST versionValueNode = null[ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_69 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")[ CD ]
Line_98 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)-->Line_99 $$ insertStatement.getSelectClause().addChild(discrimValue)[ FD ]
Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_74 $$ versionValueNode = versionMethodNode-->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_37 $$ while (child != null) -->Line_43 $$ child = child.getNextSibling()[ CD ]
Line_50 $$ AST versionValueNode = null-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_34 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_35 $$ AST child = selectClause.getFirstChild()[ CD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_77 $$ if (isIntegral(versionType)) [ CD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_60 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)[ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_67 $$ versionMethodNode.addChild(methodIdentNode)[ CD ]
Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_20 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())[ CD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")[ CD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) [ FD ]
Line_96 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_97 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()[ CD ]
Line_47 $$ if (includeVersionProperty) -->Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) [ CD ]
Line_50 $$ AST versionValueNode = null-->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_60 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)-->Line_61 $$ ((ParameterNode) versionValueNode).setHqlParameterSpecification(paramSpec)[ FD ]
Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_17 $$ if (!capableGenerator.supportsBulkInsertionIdentifierGeneration()) [ CD ]
Line_84 $$ if (isDatabaseGeneratedTimestamp(versionType)) -->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_73 $$ processFunction(versionMethodNode, true)[ CD ]
Line_66 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_68 $$ versionMethodNode.initializeMethodNode(methodIdentNode, true)[ FD ]
Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_16 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)[ CD ]
Line_50 $$ AST versionValueNode = null-->Line_74 $$ versionValueNode = versionMethodNode[ FD ]
Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_6 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_91 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()[ FD ]
Line_69 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")-->Line_71 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) [ CD ]
Line_50 $$ AST versionValueNode = null-->Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")[ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_53 $$ if (sqlTypes == null || sqlTypes.length == 0) [ CD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_66 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_70 $$ methodIdentNode.setNextSibling(castExprListNode)[ FD ]
Line_6 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_6 $$ SelectClause selectClause = insertStatement.getSelectClause()[ FD ]
Line_96 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_98 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)[ CD ]
Line_79 $$ Object seedValue = versionType.seed(null)-->Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_56 $$ if (sqlTypes.length > 1) [ CD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_96 $$ if (insertStatement.getIntoClause().isDiscriminated()) [ FD ]
Line_37 $$ while (child != null) -->Line_38 $$ if (child instanceof ParameterNode) [ CD ]
Line_6 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_35 $$ AST child = selectClause.getFirstChild()[ FD ]
Line_34 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_36 $$ int i = 0[ CD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_72 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ FD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_94 $$ insertStatement.getIntoClause().prependVersionColumnSpec()[ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_52 $$ int[] sqlTypes = versionType.sqlTypes(sessionFactoryHelper.getFactory())[ CD ]
Line_97 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()-->Line_98 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)[ FD ]
Line_35 $$ AST child = selectClause.getFirstChild()-->Line_43 $$ child = child.getNextSibling()[ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_62 $$ parameters.add(0, paramSpec)[ CD ]
Line_47 $$ if (includeVersionProperty) -->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ CD ]
Line_47 $$ if (includeVersionProperty) -->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ CD ]
Line_16 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)-->Line_17 $$ if (!capableGenerator.supportsBulkInsertionIdentifierGeneration()) [ FD ]
Line_59 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_96 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_99 $$ insertStatement.getSelectClause().addChild(discrimValue)[ CD ]
Line_34 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_37 $$ while (child != null) [ CD ]
Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_21 $$ if (fragment != null) [ CD ]
Line_43 $$ child = child.getNextSibling()-->Line_38 $$ if (child instanceof ParameterNode) [ FD ]
Line_38 $$ if (child instanceof ParameterNode) -->Line_41 $$ i++[ CD ]
Line_8 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_13 $$ if (!BulkInsertionCapableIdentifierGenerator.class.isInstance(generator)) [ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_68 $$ versionMethodNode.initializeMethodNode(methodIdentNode, true)[ CD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_71 $$ castExprListNode.addChild(versionValueNode)[ CD ]
Line_20 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())-->Line_21 $$ if (fragment != null) [ FD ]
Line_50 $$ AST versionValueNode = null-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_69 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")-->Line_70 $$ methodIdentNode.setNextSibling(castExprListNode)[ FD ]
Line_74 $$ versionValueNode = versionMethodNode-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_74 $$ versionValueNode = versionMethodNode[ CD ]
Line_47 $$ if (includeVersionProperty) -->Line_91 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()[ CD ]
Line_6 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_28 $$ selectClause.setFirstChild(fragmentNode)[ FD ]
Line_50 $$ AST versionValueNode = null-->Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_43 $$ child = child.getNextSibling()-->Line_37 $$ while (child != null) [ FD ]
Line_51 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_61 $$ ((ParameterNode) versionValueNode).setHqlParameterSpecification(paramSpec)[ CD ]
Line_74 $$ versionValueNode = versionMethodNode-->Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_91 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_35 $$ AST child = selectClause.getFirstChild()-->Line_38 $$ if (child instanceof ParameterNode) [ FD ]
Line_35 $$ AST child = selectClause.getFirstChild()-->Line_37 $$ while (child != null) [ FD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_7 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()[ FD ]
Line_74 $$ versionValueNode = versionMethodNode-->Line_93 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_85 $$ String functionName = sessionFactoryHelper.getFactory().getDialect().getCurrentTimestampSQLFunctionName()-->Line_86 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_36 $$ int i = 0-->Line_41 $$ i++[ FD ]
Line_4 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_99 $$ insertStatement.getSelectClause().addChild(discrimValue)[ FD ]
Line_63 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_70 $$ methodIdentNode.setNextSibling(castExprListNode)[ CD ]
Line_84 $$ if (isDatabaseGeneratedTimestamp(versionType)) -->Line_85 $$ String functionName = sessionFactoryHelper.getFactory().getDialect().getCurrentTimestampSQLFunctionName()[ CD ]
Line_80 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_92 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_50 $$ AST versionValueNode = null-->Line_72 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ FD ]
Line_50 $$ AST versionValueNode = null-->Line_71 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_7 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()-->Line_46 $$ final boolean includeVersionProperty = persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable()[ FD ]
Line_21 $$ if (fragment != null) -->Line_28 $$ selectClause.setFirstChild(fragmentNode)[ CD ]
