Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_16 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())[ CD ]
Line_12 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)-->Line_13 $$ if (!capableGenerator.supportsBulkInsertionIdentifierGeneration()) [ FD ]
Line_17 $$ if (fragment != null) -->Line_22 $$ insertStatement.getIntoClause().prependIdColumnSpec()[ CD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()[ CD ]
Line_18 $$ AST fragmentNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, fragment)-->Line_21 $$ fragmentNode.setNextSibling(originalFirstSelectExprNode)[ FD ]
Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_8 $$ final IdentifierGenerator generator = persister.getIdentifierGenerator()[ CD ]
Line_49 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)-->Line_50 $$ ((ParameterNode) versionValueNode).setHqlParameterSpecification(paramSpec)[ FD ]
Line_62 $$ versionValueNode = versionMethodNode-->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_4 $$ insertStatement.validate()[ FD ]
Line_8 $$ final IdentifierGenerator generator = persister.getIdentifierGenerator()-->Line_12 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_82 $$ insertStatement.getIntoClause().prependVersionColumnSpec()[ FD ]
Line_6 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()-->Line_38 $$ VersionType versionType = persister.getVersionType()[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_26 $$ AST child = selectClause.getFirstChild()-->Line_33 $$ child = child.getNextSibling()[ FD ]
Line_72 $$ if (isDatabaseGeneratedTimestamp(versionType)) -->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ CD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_26 $$ AST child = selectClause.getFirstChild()[ FD ]
Line_53 $$ MethodNode versionMethodNode = (MethodNode) getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL, "(")-->Line_55 $$ versionMethodNode.addChild(methodIdentNode)[ FD ]
Line_67 $$ Object seedValue = versionType.seed(null)-->Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_60 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ FD ]
Line_6 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()-->Line_36 $$ final boolean includeVersionProperty = persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable()[ FD ]
Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_12 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)[ CD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_28 $$ while (child != null) -->Line_33 $$ child = child.getNextSibling()[ CD ]
Line_33 $$ child = child.getNextSibling()-->Line_29 $$ if (child instanceof ParameterNode) [ FD ]
Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_9 $$ if (!BulkInsertionCapableIdentifierGenerator.class.isInstance(generator)) [ CD ]
Line_53 $$ MethodNode versionMethodNode = (MethodNode) getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL, "(")-->Line_56 $$ versionMethodNode.initializeMethodNode(methodIdentNode, true)[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_84 $$ if (insertStatement.getIntoClause().isDiscriminated()) [ FD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_45 $$ if (sqlTypes.length > 1) [ CD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_41 $$ int[] sqlTypes = versionType.sqlTypes(sessionFactoryHelper.getFactory())[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) [ FD ]
Line_8 $$ final IdentifierGenerator generator = persister.getIdentifierGenerator()-->Line_9 $$ if (!BulkInsertionCapableIdentifierGenerator.class.isInstance(generator)) [ FD ]
Line_39 $$ AST versionValueNode = null-->Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_46 $$ throw new IllegalStateException(versionType.getClass() + ".sqlTypes() returns > 1 element; only single-valued versions are allowed.")[ FD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_6 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()[ CD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_55 $$ versionMethodNode.addChild(methodIdentNode)[ CD ]
Line_62 $$ versionValueNode = versionMethodNode-->Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_58 $$ methodIdentNode.setNextSibling(castExprListNode)[ CD ]
Line_62 $$ versionValueNode = versionMethodNode-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_37 $$ if (includeVersionProperty) -->Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) [ CD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_59 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert[ CD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_6 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_85 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_57 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")[ CD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_37 $$ if (includeVersionProperty) [ CD ]
Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_62 $$ versionValueNode = versionMethodNode[ CD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_67 $$ Object seedValue = versionType.seed(null)[ FD ]
Line_84 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_86 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)[ CD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) [ CD ]
Line_17 $$ if (fragment != null) -->Line_18 $$ AST fragmentNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, fragment)[ CD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_25 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) [ CD ]
Line_39 $$ AST versionValueNode = null-->Line_59 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_61 $$ processFunction(versionMethodNode, true)[ CD ]
Line_62 $$ versionValueNode = versionMethodNode-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_17 $$ if (fragment != null) -->Line_19 $$ AST originalFirstSelectExprNode = selectClause.getFirstChild()[ CD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_51 $$ parameters.add(0, paramSpec)[ CD ]
Line_73 $$ String functionName = sessionFactoryHelper.getFactory().getDialect().getCurrentTimestampSQLFunctionName()-->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_49 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)-->Line_51 $$ parameters.add(0, paramSpec)[ FD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_84 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_85 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()[ CD ]
Line_72 $$ if (isDatabaseGeneratedTimestamp(versionType)) -->Line_73 $$ String functionName = sessionFactoryHelper.getFactory().getDialect().getCurrentTimestampSQLFunctionName()[ CD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_87 $$ insertStatement.getSelectClause().addChild(discrimValue)[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_36 $$ final boolean includeVersionProperty = persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable()[ FD ]
Line_65 $$ if (isIntegral(versionType)) -->Line_72 $$ if (isDatabaseGeneratedTimestamp(versionType)) [ CD ]
Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)[ FD ]
Line_37 $$ if (includeVersionProperty) -->Line_39 $$ AST versionValueNode = null[ CD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_43 $$ throw new IllegalStateException(versionType.getClass() + ".sqlTypes() returns null or empty array")[ FD ]
Line_29 $$ if (child instanceof ParameterNode) -->Line_31 $$ i++[ CD ]
Line_25 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_26 $$ AST child = selectClause.getFirstChild()[ CD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_79 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()[ FD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_36 $$ final boolean includeVersionProperty = persister.isVersioned() && !insertStatement.getIntoClause().isExplicitVersionInsertion() && persister.isVersionPropertyInsertable()[ CD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_84 $$ if (insertStatement.getIntoClause().isDiscriminated()) [ CD ]
Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_54 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")[ CD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_65 $$ if (isIntegral(versionType)) [ CD ]
Line_6 $$ Queryable persister = insertStatement.getIntoClause().getQueryable()-->Line_8 $$ final IdentifierGenerator generator = persister.getIdentifierGenerator()[ FD ]
Line_25 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_27 $$ int i = 0[ CD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) [ CD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_62 $$ versionValueNode = versionMethodNode[ FD ]
Line_74 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, functionName)-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_56 $$ versionMethodNode.initializeMethodNode(methodIdentNode, true)[ CD ]
Line_37 $$ if (includeVersionProperty) -->Line_79 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()[ CD ]
Line_26 $$ AST child = selectClause.getFirstChild()-->Line_29 $$ if (child instanceof ParameterNode) [ FD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_49 $$ ParameterSpecification paramSpec = new VersionTypeSeedParameterSpecification(versionType)[ CD ]
Line_54 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_58 $$ methodIdentNode.setNextSibling(castExprListNode)[ FD ]
Line_39 $$ AST versionValueNode = null-->Line_62 $$ versionValueNode = versionMethodNode[ FD ]
Line_85 $$ String sqlValue = insertStatement.getIntoClause().getQueryable().getDiscriminatorSQLValue()-->Line_86 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)[ FD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_50 $$ ((ParameterNode) versionValueNode).setHqlParameterSpecification(paramSpec)[ CD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_59 $$ castExprListNode.addChild(versionValueNode)[ CD ]
Line_26 $$ AST child = selectClause.getFirstChild()-->Line_28 $$ while (child != null) [ FD ]
Line_2 $$ protected void postProcessInsert(AST insert) throws SemanticException, QueryException -->Line_4 $$ insertStatement.validate()[ CD ]
Line_37 $$ if (includeVersionProperty) -->Line_38 $$ VersionType versionType = persister.getVersionType()[ CD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_60 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ CD ]
Line_18 $$ AST fragmentNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, fragment)-->Line_20 $$ selectClause.setFirstChild(fragmentNode)[ FD ]
Line_37 $$ if (includeVersionProperty) -->Line_82 $$ insertStatement.getIntoClause().prependVersionColumnSpec()[ CD ]
Line_54 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_55 $$ versionMethodNode.addChild(methodIdentNode)[ FD ]
Line_53 $$ MethodNode versionMethodNode = (MethodNode) getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL, "(")-->Line_61 $$ processFunction(versionMethodNode, true)[ FD ]
Line_17 $$ if (fragment != null) -->Line_21 $$ fragmentNode.setNextSibling(originalFirstSelectExprNode)[ CD ]
Line_19 $$ AST originalFirstSelectExprNode = selectClause.getFirstChild()-->Line_21 $$ fragmentNode.setNextSibling(originalFirstSelectExprNode)[ FD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_16 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())-->Line_18 $$ AST fragmentNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, fragment)[ FD ]
Line_17 $$ if (fragment != null) -->Line_20 $$ selectClause.setFirstChild(fragmentNode)[ CD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_20 $$ selectClause.setFirstChild(fragmentNode)[ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_30 $$ ((ParameterNode) child).setExpectedType(insertStatement.getIntoClause().getInsertionTypes()[selectClause.getParameterPositions().get(i)])[ FD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_72 $$ if (isDatabaseGeneratedTimestamp(versionType)) [ FD ]
Line_27 $$ int i = 0-->Line_30 $$ ((ParameterNode) child).setExpectedType(insertStatement.getIntoClause().getInsertionTypes()[selectClause.getParameterPositions().get(i)])[ FD ]
Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")-->Line_60 $$ versionValueNode.setNextSibling(getASTFactory().create(HqlSqlTokenTypes.IDENT, sessionFactoryHelper.getFactory().getDialect().getTypeName(sqlTypes[0])))[ FD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_19 $$ AST originalFirstSelectExprNode = selectClause.getFirstChild()[ FD ]
Line_37 $$ if (includeVersionProperty) -->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ CD ]
Line_28 $$ while (child != null) -->Line_29 $$ if (child instanceof ParameterNode) [ CD ]
Line_86 $$ AST discrimValue = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, sqlValue)-->Line_87 $$ insertStatement.getSelectClause().addChild(discrimValue)[ FD ]
Line_27 $$ int i = 0-->Line_31 $$ i++[ FD ]
Line_53 $$ MethodNode versionMethodNode = (MethodNode) getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL, "(")-->Line_62 $$ versionValueNode = versionMethodNode[ FD ]
Line_52 $$ if (sessionFactoryHelper.getFactory().getDialect().requiresCastingOfParametersInSelectClause()) -->Line_53 $$ MethodNode versionMethodNode = (MethodNode) getASTFactory().create(HqlSqlTokenTypes.METHOD_CALL, "(")[ CD ]
Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_17 $$ if (fragment != null) [ CD ]
Line_68 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.SQL_TOKEN, seedValue.toString())-->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ FD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_48 $$ versionValueNode = getASTFactory().create(HqlSqlTokenTypes.PARAM, "?")[ CD ]
Line_57 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")-->Line_59 $$ castExprListNode.addChild(versionValueNode)[ FD ]
Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()-->Line_30 $$ ((ParameterNode) child).setExpectedType(insertStatement.getIntoClause().getInsertionTypes()[selectClause.getParameterPositions().get(i)])[ FD ]
Line_33 $$ child = child.getNextSibling()-->Line_28 $$ while (child != null) [ FD ]
Line_84 $$ if (insertStatement.getIntoClause().isDiscriminated()) -->Line_87 $$ insertStatement.getSelectClause().addChild(discrimValue)[ CD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_5 $$ SelectClause selectClause = insertStatement.getSelectClause()[ FD ]
Line_7 $$ if (!insertStatement.getIntoClause().isExplicitIdInsertion()) -->Line_13 $$ if (!capableGenerator.supportsBulkInsertionIdentifierGeneration()) [ CD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_41 $$ int[] sqlTypes = versionType.sqlTypes(sessionFactoryHelper.getFactory())[ CD ]
Line_25 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_28 $$ while (child != null) [ CD ]
Line_40 $$ if (sessionFactoryHelper.getFactory().getDialect().supportsParametersInInsertSelect()) -->Line_42 $$ if (sqlTypes == null || sqlTypes.length == 0) [ CD ]
Line_57 $$ AST castExprListNode = getASTFactory().create(HqlSqlTokenTypes.EXPR_LIST, "exprList")-->Line_58 $$ methodIdentNode.setNextSibling(castExprListNode)[ FD ]
Line_37 $$ if (includeVersionProperty) -->Line_80 $$ selectClause.setFirstChild(versionValueNode)[ CD ]
Line_54 $$ AST methodIdentNode = getASTFactory().create(HqlSqlTokenTypes.IDENT, "cast")-->Line_56 $$ versionMethodNode.initializeMethodNode(methodIdentNode, true)[ FD ]
Line_38 $$ VersionType versionType = persister.getVersionType()-->Line_65 $$ if (isIntegral(versionType)) [ FD ]
Line_29 $$ if (child instanceof ParameterNode) -->Line_30 $$ ((ParameterNode) child).setExpectedType(insertStatement.getIntoClause().getInsertionTypes()[selectClause.getParameterPositions().get(i)])[ CD ]
Line_16 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())-->Line_17 $$ if (fragment != null) [ FD ]
Line_3 $$ InsertStatement insertStatement = (InsertStatement) insert-->Line_22 $$ insertStatement.getIntoClause().prependIdColumnSpec()[ FD ]
Line_79 $$ AST currentFirstSelectExprNode = selectClause.getFirstChild()-->Line_81 $$ versionValueNode.setNextSibling(currentFirstSelectExprNode)[ FD ]
Line_12 $$ final BulkInsertionCapableIdentifierGenerator capableGenerator = BulkInsertionCapableIdentifierGenerator.class.cast(generator)-->Line_16 $$ final String fragment = capableGenerator.determineBulkInsertionIdentifierGenerationSelectFragment(sessionFactoryHelper.getFactory().getDialect())[ FD ]
