Line_9 $$ Map<String, Object> map-->Line_14 $$ map = (Map<String, Object>) map.get("foo")[ FD ]
Line_4 $$ XContentBuilder builder = jsonBuilder()-->Line_5 $$ builder.startObject()[ FD ]
Line_9 $$ Map<String, Object> map-->Line_16 $$ assertThat(map.get("queue_size").toString(), is("1000"))[ FD ]
Line_9 $$ Map<String, Object> map-->Line_11 $$ map = parser.map()[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_13 $$ assertThat(map, hasKey("foo"))[ CD ]
Line_4 $$ XContentBuilder builder = jsonBuilder()-->Line_8 $$ BytesReference bytesReference = builder.bytes()[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_14 $$ map = (Map<String, Object>) map.get("foo")[ CD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_8 $$ BytesReference bytesReference = builder.bytes()[ CD ]
Line_3 $$ ThreadPool.Info info = new ThreadPool.Info("foo", threadPoolType, 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"))-->Line_6 $$ info.toXContent(builder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_8 $$ BytesReference bytesReference = builder.bytes()-->Line_10 $$ try (XContentParser parser = XContentFactory.xContent(bytesReference).createParser(bytesReference)) [ FD ]
Line_9 $$ Map<String, Object> map-->Line_15 $$ assertThat(map, hasKey("queue_size"))[ FD ]
Line_4 $$ XContentBuilder builder = jsonBuilder()-->Line_6 $$ info.toXContent(builder, ToXContent.EMPTY_PARAMS)[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_9 $$ Map<String, Object> map[ CD ]
Line_10 $$ try (XContentParser parser = XContentFactory.xContent(bytesReference).createParser(bytesReference)) -->Line_11 $$ map = parser.map()[ FD ]
Line_11 $$ map = parser.map()-->Line_13 $$ assertThat(map, hasKey("foo"))[ FD ]
Line_11 $$ map = parser.map()-->Line_16 $$ assertThat(map.get("queue_size").toString(), is("1000"))[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_3 $$ ThreadPool.Info info = new ThreadPool.Info("foo", threadPoolType, 1, 10, TimeValue.timeValueMillis(3000), SizeValue.parseSizeValue("1k"))[ CD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_5 $$ builder.startObject()[ CD ]
Line_11 $$ map = parser.map()-->Line_14 $$ map = (Map<String, Object>) map.get("foo")[ FD ]
Line_11 $$ map = parser.map()-->Line_15 $$ assertThat(map, hasKey("queue_size"))[ FD ]
Line_14 $$ map = (Map<String, Object>) map.get("foo")-->Line_16 $$ assertThat(map.get("queue_size").toString(), is("1000"))[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_7 $$ builder.endObject()[ CD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_15 $$ assertThat(map, hasKey("queue_size"))[ CD ]
Line_14 $$ map = (Map<String, Object>) map.get("foo")-->Line_15 $$ assertThat(map, hasKey("queue_size"))[ FD ]
Line_4 $$ XContentBuilder builder = jsonBuilder()-->Line_7 $$ builder.endObject()[ FD ]
Line_9 $$ Map<String, Object> map-->Line_13 $$ assertThat(map, hasKey("foo"))[ FD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_16 $$ assertThat(map.get("queue_size").toString(), is("1000"))[ CD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_6 $$ info.toXContent(builder, ToXContent.EMPTY_PARAMS)[ CD ]
Line_2 $$ public void testThatToXContentWritesInteger() throws Exception -->Line_4 $$ XContentBuilder builder = jsonBuilder()[ CD ]
