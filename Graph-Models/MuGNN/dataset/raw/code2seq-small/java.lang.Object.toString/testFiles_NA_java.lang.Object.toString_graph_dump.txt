Line_2 $$ public void testFiles() throws IOException -->Line_5 $$ IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_4 $$ dir.setEnableVirusScanner(false)[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_27 $$ assertTrue(files.toString(), files.contains("_0.si"))[ CD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_34 $$ writer.commit()[ FD ]
Line_20 $$ if (simpleTextCFS) -->Line_25 $$ assertTrue(files.toString(), files.contains("_0.cfe"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_49 $$ if (simpleTextCFS) [ CD ]
Line_10 $$ Document doc = new Document()-->Line_11 $$ doc.add(new TextField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_30 $$ writer.addDocument(doc)[ CD ]
Line_20 $$ if (simpleTextCFS) -->Line_22 $$ assertFalse(files.toString(), files.contains("_0.cfe"))[ CD ]
Line_41 $$ if (simpleTextCFS) -->Line_45 $$ assertTrue(files.toString(), files.contains("_0.cfs"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_20 $$ if (simpleTextCFS) [ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_24 $$ assertTrue(files.toString(), files.contains("_0.cfs"))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_31 $$ doc = new Document()[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_39 $$ assertFalse(files.toString(), files.contains("segments_1"))[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_25 $$ assertTrue(files.toString(), files.contains("_0.cfe"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_40 $$ assertTrue(files.toString(), files.contains("segments_2"))[ FD ]
Line_3 $$ MockDirectoryWrapper dir = newMockDirectory()-->Line_15 $$ for (String f : Lucene.files(Lucene.readSegmentInfos(dir))) [ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_57 $$ writer.close()[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_29 $$ doc.add(new TextField("id", "2", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ CD ]
Line_28 $$ doc = new Document()-->Line_31 $$ doc = new Document()[ FD ]
Line_3 $$ MockDirectoryWrapper dir = newMockDirectory()-->Line_58 $$ dir.close()[ FD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_57 $$ writer.close()[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_56 $$ assertTrue(files.toString(), files.contains("_1.si"))[ CD ]
Line_49 $$ if (simpleTextCFS) -->Line_53 $$ assertTrue(files.toString(), files.contains("_1.cfs"))[ CD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_13 $$ writer.commit()[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_45 $$ assertTrue(files.toString(), files.contains("_0.cfs"))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_35 $$ files.clear()[ CD ]
Line_3 $$ MockDirectoryWrapper dir = newMockDirectory()-->Line_36 $$ for (String f : Lucene.files(Lucene.readSegmentInfos(dir))) [ FD ]
Line_28 $$ doc = new Document()-->Line_30 $$ writer.addDocument(doc)[ FD ]
Line_5 $$ IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))-->Line_6 $$ iwc.setMergePolicy(NoMergePolicy.INSTANCE)[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_53 $$ assertTrue(files.toString(), files.contains("_1.cfs"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_27 $$ assertTrue(files.toString(), files.contains("_0.si"))[ FD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_30 $$ writer.addDocument(doc)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_58 $$ dir.close()[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_21 $$ assertFalse(files.toString(), files.contains("_0.cfs"))[ FD ]
Line_10 $$ Document doc = new Document()-->Line_12 $$ writer.addDocument(doc)[ FD ]
Line_10 $$ Document doc = new Document()-->Line_29 $$ doc.add(new TextField("id", "2", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_14 $$ Set<String> files = new HashSet()[ CD ]
Line_49 $$ if (simpleTextCFS) -->Line_51 $$ assertFalse(files.toString(), files.contains("_1.cfe"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_11 $$ doc.add(new TextField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ CD ]
Line_15 $$ for (String f : Lucene.files(Lucene.readSegmentInfos(dir))) -->Line_37 $$ files.add(f)[ FD ]
Line_10 $$ Document doc = new Document()-->Line_28 $$ doc = new Document()[ FD ]
Line_10 $$ Document doc = new Document()-->Line_33 $$ writer.addDocument(doc)[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_42 $$ assertFalse(files.toString(), files.contains("_0.cfs"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_18 $$ final boolean simpleTextCFS = files.contains("_0.scf")[ FD ]
Line_28 $$ doc = new Document()-->Line_32 $$ doc.add(new TextField("id", "3", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_41 $$ if (simpleTextCFS) -->Line_43 $$ assertFalse(files.toString(), files.contains("_0.cfe"))[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_56 $$ assertTrue(files.toString(), files.contains("_1.si"))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_7 $$ iwc.setMaxBufferedDocs(2)[ CD ]
Line_49 $$ if (simpleTextCFS) -->Line_54 $$ assertTrue(files.toString(), files.contains("_1.cfe"))[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_39 $$ assertFalse(files.toString(), files.contains("segments_1"))[ FD ]
Line_31 $$ doc = new Document()-->Line_33 $$ writer.addDocument(doc)[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_46 $$ assertTrue(files.toString(), files.contains("_0.cfe"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_22 $$ assertFalse(files.toString(), files.contains("_0.cfe"))[ FD ]
Line_10 $$ Document doc = new Document()-->Line_30 $$ writer.addDocument(doc)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)[ CD ]
Line_10 $$ Document doc = new Document()-->Line_31 $$ doc = new Document()[ FD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_33 $$ writer.addDocument(doc)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_40 $$ assertTrue(files.toString(), files.contains("segments_2"))[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_43 $$ assertFalse(files.toString(), files.contains("_0.cfe"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_16 $$ files.add(f)[ FD ]
Line_20 $$ if (simpleTextCFS) -->Line_21 $$ assertFalse(files.toString(), files.contains("_0.cfs"))[ CD ]
Line_28 $$ doc = new Document()-->Line_33 $$ writer.addDocument(doc)[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_54 $$ assertTrue(files.toString(), files.contains("_1.cfe"))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_28 $$ doc = new Document()[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_48 $$ assertTrue(files.toString(), files.contains("_0.si"))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_18 $$ final boolean simpleTextCFS = files.contains("_0.scf")[ CD ]
Line_20 $$ if (simpleTextCFS) -->Line_24 $$ assertTrue(files.toString(), files.contains("_0.cfs"))[ CD ]
Line_49 $$ if (simpleTextCFS) -->Line_50 $$ assertFalse(files.toString(), files.contains("_1.cfs"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_32 $$ doc.add(new TextField("id", "3", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ CD ]
Line_5 $$ IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))-->Line_7 $$ iwc.setMaxBufferedDocs(2)[ FD ]
Line_5 $$ IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()))-->Line_8 $$ iwc.setUseCompoundFile(true)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_12 $$ writer.addDocument(doc)[ CD ]
Line_3 $$ MockDirectoryWrapper dir = newMockDirectory()-->Line_4 $$ dir.setEnableVirusScanner(false)[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_37 $$ files.add(f)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_10 $$ Document doc = new Document()[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_8 $$ iwc.setUseCompoundFile(true)[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_33 $$ writer.addDocument(doc)[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_13 $$ writer.commit()[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_50 $$ assertFalse(files.toString(), files.contains("_1.cfs"))[ FD ]
Line_15 $$ for (String f : Lucene.files(Lucene.readSegmentInfos(dir))) -->Line_16 $$ files.add(f)[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_19 $$ assertTrue(files.toString(), files.contains("segments_1"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_41 $$ if (simpleTextCFS) [ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_3 $$ MockDirectoryWrapper dir = newMockDirectory()[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_35 $$ files.clear()[ FD ]
Line_41 $$ if (simpleTextCFS) -->Line_42 $$ assertFalse(files.toString(), files.contains("_0.cfs"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_6 $$ iwc.setMergePolicy(NoMergePolicy.INSTANCE)[ CD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_19 $$ assertTrue(files.toString(), files.contains("segments_1"))[ FD ]
Line_14 $$ Set<String> files = new HashSet()-->Line_51 $$ assertFalse(files.toString(), files.contains("_1.cfe"))[ FD ]
Line_41 $$ if (simpleTextCFS) -->Line_46 $$ assertTrue(files.toString(), files.contains("_0.cfe"))[ CD ]
Line_2 $$ public void testFiles() throws IOException -->Line_34 $$ writer.commit()[ CD ]
Line_28 $$ doc = new Document()-->Line_29 $$ doc.add(new TextField("id", "2", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_10 $$ Document doc = new Document()-->Line_32 $$ doc.add(new TextField("id", "3", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_31 $$ doc = new Document()-->Line_32 $$ doc.add(new TextField("id", "3", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ FD ]
Line_2 $$ public void testFiles() throws IOException -->Line_48 $$ assertTrue(files.toString(), files.contains("_0.si"))[ CD ]
Line_9 $$ IndexWriter writer = new IndexWriter(dir, iwc)-->Line_12 $$ writer.addDocument(doc)[ FD ]
