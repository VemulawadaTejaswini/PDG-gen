Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_3 $$ int count = 0[ CD ]
Line_8 $$ while (source.incrementToken()) -->Line_10 $$ query.add(new Term(field, builder.toBytesRef()))[ CD ]
Line_4 $$ try (TokenStream source = analyzer.tokenStream(field, queryString.toString())) -->Line_8 $$ while (source.incrementToken()) [ FD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_18 $$ query.setHighFreqMinimumNumberShouldMatch(highFreqMinimumShouldMatch)[ FD ]
Line_4 $$ try (TokenStream source = analyzer.tokenStream(field, queryString.toString())) -->Line_6 $$ CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class)[ FD ]
Line_14 $$ if (count == 0) -->Line_15 $$ return null[ CD ]
Line_8 $$ while (source.incrementToken()) -->Line_11 $$ count++[ CD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_14 $$ if (count == 0) [ CD ]
Line_8 $$ while (source.incrementToken()) -->Line_9 $$ builder.copyChars(termAtt)[ CD ]
Line_7 $$ BytesRefBuilder builder = new BytesRefBuilder()-->Line_10 $$ query.add(new Term(field, builder.toBytesRef()))[ FD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_19 $$ return query[ CD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_17 $$ query.setLowFreqMinimumNumberShouldMatch(lowFreqMinimumShouldMatch)[ FD ]
Line_6 $$ CharTermAttribute termAtt = source.addAttribute(CharTermAttribute.class)-->Line_9 $$ builder.copyChars(termAtt)[ FD ]
Line_4 $$ try (TokenStream source = analyzer.tokenStream(field, queryString.toString())) -->Line_5 $$ source.reset()[ FD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_4 $$ try (TokenStream source = analyzer.tokenStream(field, queryString.toString())) [ FD ]
Line_7 $$ BytesRefBuilder builder = new BytesRefBuilder()-->Line_9 $$ builder.copyChars(termAtt)[ FD ]
Line_3 $$ int count = 0-->Line_14 $$ if (count == 0) [ FD ]
Line_3 $$ int count = 0-->Line_11 $$ count++[ FD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_18 $$ query.setHighFreqMinimumNumberShouldMatch(highFreqMinimumShouldMatch)[ CD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_10 $$ query.add(new Term(field, builder.toBytesRef()))[ FD ]
Line_2 $$ static Query parseQueryString(ExtendedCommonTermsQuery query, Object queryString, String field, Analyzer analyzer, String lowFreqMinimumShouldMatch, String highFreqMinimumShouldMatch) throws IOException -->Line_17 $$ query.setLowFreqMinimumNumberShouldMatch(lowFreqMinimumShouldMatch)[ CD ]
