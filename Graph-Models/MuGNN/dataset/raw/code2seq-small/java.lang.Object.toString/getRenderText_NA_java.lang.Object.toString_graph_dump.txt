Line_17 $$ if (String.class.equals(converterType.getJdbcType())) -->Line_18 $$ return "'" + value + "'"[ CD ]
Line_7 $$ if (LiteralType.class.isInstance(type)) -->Line_9 $$ final Dialect dialect = factory.getDialect()[ CD ]
Line_12 $$ final AttributeConverterTypeAdapter converterType = (AttributeConverterTypeAdapter) type-->Line_14 $$ throw new QueryException(String.format(Locale.ENGLISH, "Recognized query constant expression [%s] was not resolved to type [%s] expected by defined AttributeConverter [%s]", constantExpression, constantValue.getClass().getName(), converterType.getModelType().getName()))[ FD ]
Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) -->Line_13 $$ if (!converterType.getModelType().isInstance(constantValue)) [ CD ]
Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) -->Line_17 $$ if (String.class.equals(converterType.getJdbcType())) [ CD ]
Line_9 $$ final Dialect dialect = factory.getDialect()-->Line_10 $$ return literalType.objectToSQLString(constantValue, dialect)[ FD ]
Line_8 $$ final LiteralType literalType = (LiteralType) type-->Line_10 $$ return literalType.objectToSQLString(constantValue, dialect)[ FD ]
Line_5 $$ final Type type = expectedType == null ? heuristicType : Number.class.isAssignableFrom(heuristicType.getReturnedClass()) ? heuristicType : expectedType-->Line_7 $$ if (LiteralType.class.isInstance(type)) [ FD ]
Line_7 $$ if (LiteralType.class.isInstance(type)) -->Line_8 $$ final LiteralType literalType = (LiteralType) type[ CD ]
Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) -->Line_16 $$ final Object value = converterType.getAttributeConverter().convertToDatabaseColumn(constantValue)[ CD ]
Line_7 $$ if (LiteralType.class.isInstance(type)) -->Line_10 $$ return literalType.objectToSQLString(constantValue, dialect)[ CD ]
Line_7 $$ if (LiteralType.class.isInstance(type)) -->Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) [ CD ]
Line_12 $$ final AttributeConverterTypeAdapter converterType = (AttributeConverterTypeAdapter) type-->Line_13 $$ if (!converterType.getModelType().isInstance(constantValue)) [ FD ]
Line_16 $$ final Object value = converterType.getAttributeConverter().convertToDatabaseColumn(constantValue)-->Line_20 $$ return value.toString()[ FD ]
Line_5 $$ final Type type = expectedType == null ? heuristicType : Number.class.isAssignableFrom(heuristicType.getReturnedClass()) ? heuristicType : expectedType-->Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) [ FD ]
Line_17 $$ if (String.class.equals(converterType.getJdbcType())) -->Line_20 $$ return value.toString()[ CD ]
Line_12 $$ final AttributeConverterTypeAdapter converterType = (AttributeConverterTypeAdapter) type-->Line_16 $$ final Object value = converterType.getAttributeConverter().convertToDatabaseColumn(constantValue)[ FD ]
Line_12 $$ final AttributeConverterTypeAdapter converterType = (AttributeConverterTypeAdapter) type-->Line_17 $$ if (String.class.equals(converterType.getJdbcType())) [ FD ]
Line_11 $$ if (AttributeConverterTypeAdapter.class.isInstance(type)) -->Line_12 $$ final AttributeConverterTypeAdapter converterType = (AttributeConverterTypeAdapter) type[ CD ]
