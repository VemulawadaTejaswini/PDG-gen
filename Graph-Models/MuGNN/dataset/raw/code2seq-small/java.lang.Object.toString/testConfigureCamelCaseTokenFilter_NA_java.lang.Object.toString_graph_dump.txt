Line_14 $$ while (tokenStream.incrementToken()) -->Line_15 $$ token.add(charTermAttribute.toString())[ CD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_17 $$ assertEquals(token.toString(), 2, token.size())[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_35 $$ assertEquals("2", token.get(4))[ FD ]
Line_12 $$ CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)-->Line_15 $$ token.add(charTermAttribute.toString())[ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_27 $$ while (tokenStream.incrementToken()) [ FD ]
Line_2 $$ public void testConfigureCamelCaseTokenFilter() throws IOException -->Line_6 $$ IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(new Index("index"), indexSettings)[ CD ]
Line_12 $$ CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)-->Line_28 $$ token.add(charTermAttribute.toString())[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_30 $$ assertEquals(token.toString(), 6, token.size())[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_19 $$ assertEquals("j2ee", token.get(1))[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_36 $$ assertEquals("ee", token.get(5))[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_15 $$ token.add(charTermAttribute.toString())[ FD ]
Line_8 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer")) -->Line_22 $$ assertNotNull(custom_analyser)[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_31 $$ assertEquals("j", token.get(0))[ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_14 $$ while (tokenStream.incrementToken()) [ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_24 $$ tokenStream.reset()[ FD ]
Line_6 $$ IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(new Index("index"), indexSettings)-->Line_7 $$ AnalysisService analysisService = new AnalysisRegistry(null, new Environment(settings)).build(idxSettings)[ FD ]
Line_5 $$ Settings indexSettings = settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.wordDelimiter.type", "word_delimiter").put("index.analysis.filter.wordDelimiter.split_on_numerics", false).put("index.analysis.analyzer.custom_analyzer.tokenizer", "whitespace").putArray("index.analysis.analyzer.custom_analyzer.filter", "lowercase", "wordDelimiter").put("index.analysis.analyzer.custom_analyzer_1.tokenizer", "whitespace").putArray("index.analysis.analyzer.custom_analyzer_1.filter", "lowercase", "word_delimiter").build()-->Line_6 $$ IndexSettings idxSettings = IndexSettingsModule.newIndexSettings(new Index("index"), indexSettings)[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_18 $$ assertEquals("j2se", token.get(0))[ FD ]
Line_7 $$ AnalysisService analysisService = new AnalysisRegistry(null, new Environment(settings)).build(idxSettings)-->Line_8 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer")) [ FD ]
Line_8 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer")) -->Line_9 $$ assertNotNull(custom_analyser)[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_34 $$ assertEquals("j", token.get(3))[ FD ]
Line_7 $$ AnalysisService analysisService = new AnalysisRegistry(null, new Environment(settings)).build(idxSettings)-->Line_21 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer_1")) [ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_11 $$ tokenStream.reset()[ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_12 $$ CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)[ FD ]
Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")-->Line_25 $$ CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class)[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_28 $$ token.add(charTermAttribute.toString())[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_33 $$ assertEquals("se", token.get(2))[ FD ]
Line_27 $$ while (tokenStream.incrementToken()) -->Line_28 $$ token.add(charTermAttribute.toString())[ CD ]
Line_2 $$ public void testConfigureCamelCaseTokenFilter() throws IOException -->Line_7 $$ AnalysisService analysisService = new AnalysisRegistry(null, new Environment(settings)).build(idxSettings)[ CD ]
Line_8 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer")) -->Line_10 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")[ FD ]
Line_8 $$ try (NamedAnalyzer custom_analyser = analysisService.analyzer("custom_analyzer")) -->Line_23 $$ TokenStream tokenStream = custom_analyser.tokenStream("foo", "J2SE j2ee")[ FD ]
Line_13 $$ List<String> token = new ArrayList()-->Line_32 $$ assertEquals("2", token.get(1))[ FD ]
Line_2 $$ public void testConfigureCamelCaseTokenFilter() throws IOException -->Line_5 $$ Settings indexSettings = settingsBuilder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT).put("index.analysis.filter.wordDelimiter.type", "word_delimiter").put("index.analysis.filter.wordDelimiter.split_on_numerics", false).put("index.analysis.analyzer.custom_analyzer.tokenizer", "whitespace").putArray("index.analysis.analyzer.custom_analyzer.filter", "lowercase", "wordDelimiter").put("index.analysis.analyzer.custom_analyzer_1.tokenizer", "whitespace").putArray("index.analysis.analyzer.custom_analyzer_1.filter", "lowercase", "word_delimiter").build()[ CD ]
