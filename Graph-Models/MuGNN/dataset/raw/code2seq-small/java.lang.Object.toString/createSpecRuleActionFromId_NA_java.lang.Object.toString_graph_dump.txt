Line_2 $$ private SpecRuleAction<? super ComponentSelection> createSpecRuleActionFromId(Object id, RuleAction<? super ComponentSelection> ruleAction) -->Line_3 $$ final ModuleIdentifier moduleIdentifier[ CD ]
Line_3 $$ final ModuleIdentifier moduleIdentifier-->Line_5 $$ moduleIdentifier = moduleIdentifierNotationParser.parseNotation(id)[ FD ]
Line_2 $$ private SpecRuleAction<? super ComponentSelection> createSpecRuleActionFromId(Object id, RuleAction<? super ComponentSelection> ruleAction) -->Line_10 $$ return new SpecRuleAction<ComponentSelection>(ruleAction, spec)[ CD ]
Line_2 $$ private SpecRuleAction<? super ComponentSelection> createSpecRuleActionFromId(Object id, RuleAction<? super ComponentSelection> ruleAction) -->Line_5 $$ moduleIdentifier = moduleIdentifierNotationParser.parseNotation(id)[ FD ]
Line_2 $$ private SpecRuleAction<? super ComponentSelection> createSpecRuleActionFromId(Object id, RuleAction<? super ComponentSelection> ruleAction) -->Line_9 $$ Spec<ComponentSelection> spec = new ComponentSelectionMatchingSpec(moduleIdentifier)[ CD ]
Line_2 $$ private SpecRuleAction<? super ComponentSelection> createSpecRuleActionFromId(Object id, RuleAction<? super ComponentSelection> ruleAction) -->Line_7 $$ throw new InvalidUserCodeException(String.format(INVALID_SPEC_ERROR, id == null ? "null" : id.toString()), e)[ FD ]
