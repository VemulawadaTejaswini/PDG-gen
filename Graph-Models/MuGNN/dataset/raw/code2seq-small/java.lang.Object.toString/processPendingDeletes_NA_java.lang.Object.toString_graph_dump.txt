Line_20 $$ final List<PendingDelete> remove-->Line_31 $$ if (remove.isEmpty()) [ FD ]
Line_30 $$ do -->Line_35 $$ while (iterator.hasNext()) [ CD ]
Line_22 $$ remove = pendingDeletes.remove(index)-->Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()[ FD ]
Line_48 $$ ShardLock shardLock = locks.get(new ShardId(delete.index, delete.shardId))-->Line_49 $$ if (shardLock != null) [ FD ]
Line_20 $$ final List<PendingDelete> remove-->Line_62 $$ if (remove.isEmpty() == false) [ FD ]
Line_20 $$ final List<PendingDelete> remove-->Line_63 $$ logger.warn("[ FD ]
Line_62 $$ if (remove.isEmpty() == false) -->Line_67 $$ logger.debug("[ CD ]
Line_22 $$ remove = pendingDeletes.remove(index)-->Line_62 $$ if (remove.isEmpty() == false) [ FD ]
Line_20 $$ final List<PendingDelete> remove-->Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()[ FD ]
Line_16 $$ Map<ShardId, ShardLock> locks = new HashMap()-->Line_18 $$ locks.put(lock.getShardId(), lock)[ FD ]
Line_22 $$ remove = pendingDeletes.remove(index)-->Line_24 $$ if (remove != null && remove.isEmpty() == false) [ FD ]
Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()-->Line_42 $$ iterator.remove()[ FD ]
Line_62 $$ if (remove.isEmpty() == false) -->Line_63 $$ logger.warn("[ CD ]
Line_49 $$ if (shardLock != null) -->Line_58 $$ iterator.remove()[ CD ]
Line_37 $$ if (delete.deleteIndex) -->Line_48 $$ ShardLock shardLock = locks.get(new ShardId(delete.index, delete.shardId))[ CD ]
Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()-->Line_52 $$ iterator.remove()[ FD ]
Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()-->Line_58 $$ iterator.remove()[ FD ]
Line_36 $$ PendingDelete delete = iterator.next()-->Line_37 $$ if (delete.deleteIndex) [ FD ]
Line_14 $$ final List<ShardLock> shardLocks = nodeEnv.lockAllForIndex(index, indexSettings, timeout.millis())-->Line_72 $$ IOUtils.close(shardLocks)[ FD ]
Line_35 $$ while (iterator.hasNext()) -->Line_37 $$ if (delete.deleteIndex) [ CD ]
Line_49 $$ if (shardLock != null) -->Line_57 $$ logger.warn("[ CD ]
Line_30 $$ do -->Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()[ CD ]
Line_37 $$ if (delete.deleteIndex) -->Line_49 $$ if (shardLock != null) [ CD ]
Line_29 $$ long sleepTime = 10-->Line_67 $$ logger.debug("[ FD ]
Line_24 $$ if (remove != null && remove.isEmpty() == false) -->Line_29 $$ long sleepTime = 10[ CD ]
Line_48 $$ ShardLock shardLock = locks.get(new ShardId(delete.index, delete.shardId))-->Line_51 $$ deleteShardStore("pending delete", shardLock, delete.settings)[ FD ]
Line_30 $$ do -->Line_31 $$ if (remove.isEmpty()) [ CD ]
Line_30 $$ do -->Line_62 $$ if (remove.isEmpty() == false) [ CD ]
Line_22 $$ remove = pendingDeletes.remove(index)-->Line_31 $$ if (remove.isEmpty()) [ FD ]
Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()-->Line_35 $$ while (iterator.hasNext()) [ FD ]
Line_35 $$ while (iterator.hasNext()) -->Line_36 $$ PendingDelete delete = iterator.next()[ CD ]
Line_22 $$ remove = pendingDeletes.remove(index)-->Line_63 $$ logger.warn("[ FD ]
Line_20 $$ final List<PendingDelete> remove-->Line_24 $$ if (remove != null && remove.isEmpty() == false) [ FD ]
Line_62 $$ if (remove.isEmpty() == false) -->Line_64 $$ Thread.sleep(sleepTime)[ CD ]
Line_20 $$ final List<PendingDelete> remove-->Line_22 $$ remove = pendingDeletes.remove(index)[ FD ]
Line_37 $$ if (delete.deleteIndex) -->Line_39 $$ logger.debug("[ CD ]
Line_34 $$ Iterator<PendingDelete> iterator = remove.iterator()-->Line_36 $$ PendingDelete delete = iterator.next()[ FD ]
Line_17 $$ for (ShardLock lock : shardLocks) -->Line_18 $$ locks.put(lock.getShardId(), lock)[ FD ]
Line_16 $$ Map<ShardId, ShardLock> locks = new HashMap()-->Line_48 $$ ShardLock shardLock = locks.get(new ShardId(delete.index, delete.shardId))[ FD ]
Line_29 $$ long sleepTime = 10-->Line_64 $$ Thread.sleep(sleepTime)[ FD ]
Line_48 $$ ShardLock shardLock = locks.get(new ShardId(delete.index, delete.shardId))-->Line_54 $$ logger.debug("[ FD ]
Line_24 $$ if (remove != null && remove.isEmpty() == false) -->Line_30 $$ do [ CD ]
