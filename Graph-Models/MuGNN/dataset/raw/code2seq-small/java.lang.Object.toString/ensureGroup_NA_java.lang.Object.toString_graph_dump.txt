Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_11 $$ root.add(groupNode)[ CD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_4 $$ for (int i = 0; i < root.getChildCount(); i++) [ FD ]
Line_3 $$ String groupName = path.get(index++)-->Line_6 $$ if (child instanceof MyTreeNode && groupName.equals(child.toString())) [ FD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_10 $$ MyTreeNode groupNode = new MyTreeNode(groupName)[ CD ]
Line_6 $$ if (child instanceof MyTreeNode && groupName.equals(child.toString())) -->Line_7 $$ return index < path.size() - 1 ? ensureGroup((MyTreeNode) child, path, index) : (MyTreeNode) child[ CD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_12 $$ return index < path.size() - 1 ? ensureGroup(groupNode, path, index) : groupNode[ CD ]
Line_10 $$ MyTreeNode groupNode = new MyTreeNode(groupName)-->Line_12 $$ return index < path.size() - 1 ? ensureGroup(groupNode, path, index) : groupNode[ FD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_3 $$ String groupName = path.get(index++)[ CD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_11 $$ root.add(groupNode)[ FD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_4 $$ for (int i = 0; i < root.getChildCount(); i++) [ CD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_7 $$ return index < path.size() - 1 ? ensureGroup((MyTreeNode) child, path, index) : (MyTreeNode) child[ FD ]
Line_10 $$ MyTreeNode groupNode = new MyTreeNode(groupName)-->Line_11 $$ root.add(groupNode)[ FD ]
Line_4 $$ for (int i = 0; i < root.getChildCount(); i++) -->Line_5 $$ TreeNode child = root.getChildAt(i)[ FD ]
Line_5 $$ TreeNode child = root.getChildAt(i)-->Line_6 $$ if (child instanceof MyTreeNode && groupName.equals(child.toString())) [ FD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_12 $$ return index < path.size() - 1 ? ensureGroup(groupNode, path, index) : groupNode[ FD ]
Line_4 $$ for (int i = 0; i < root.getChildCount(); i++) -->Line_5 $$ TreeNode child = root.getChildAt(i)[ CD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_3 $$ String groupName = path.get(index++)[ FD ]
Line_2 $$ private static MyTreeNode ensureGroup(@NotNull DefaultMutableTreeNode root, @NotNull List<String> path, int index) -->Line_5 $$ TreeNode child = root.getChildAt(i)[ FD ]
Line_4 $$ for (int i = 0; i < root.getChildCount(); i++) -->Line_6 $$ if (child instanceof MyTreeNode && groupName.equals(child.toString())) [ CD ]
