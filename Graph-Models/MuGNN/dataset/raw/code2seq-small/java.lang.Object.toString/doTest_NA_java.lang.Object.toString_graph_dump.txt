Line_31 $$ for (int i = 0, typesLength = types.length; i < typesLength; i++) -->Line_33 $$ assertEquals(type, model.getElementAt(i).toString())[ FD ]
Line_7 $$ int startOffset = editor.getSelectionModel().getSelectionStart()-->Line_10 $$ PsiExpression expr = CodeInsightUtil.findExpressionInRange(file, startOffset, endOffset)[ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_4 $$ final Editor editor = getEditor()[ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_16 $$ assertTrue(elements.length > 0)[ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_9 $$ PsiElement[] elements[ CD ]
Line_7 $$ int startOffset = editor.getSelectionModel().getSelectionStart()-->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ FD ]
Line_11 $$ if (expr != null) -->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ CD ]
Line_27 $$ if (types.length > 1) -->Line_31 $$ for (int i = 0, typesLength = types.length; i < typesLength; i++) [ CD ]
Line_8 $$ int endOffset = editor.getSelectionModel().getSelectionEnd()-->Line_10 $$ PsiExpression expr = CodeInsightUtil.findExpressionInRange(file, startOffset, endOffset)[ FD ]
Line_11 $$ if (expr != null) -->Line_12 $$ elements = new PsiElement[] [ CD ]
Line_17 $$ final ExtractMethodProcessor processor = new ExtractMethodProcessor(project, editor, elements, null, "Extract Method", "newMethod", null)-->Line_18 $$ processor.prepare()[ FD ]
Line_4 $$ final Editor editor = getEditor()-->Line_7 $$ int startOffset = editor.getSelectionModel().getSelectionStart()[ FD ]
Line_4 $$ final Editor editor = getEditor()-->Line_8 $$ int endOffset = editor.getSelectionModel().getSelectionEnd()[ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_8 $$ int endOffset = editor.getSelectionModel().getSelectionEnd()[ CD ]
Line_32 $$ String type = types[i]-->Line_33 $$ assertEquals(type, model.getElementAt(i).toString())[ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_18 $$ processor.prepare()[ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_6 $$ final Project project = getProject()[ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_7 $$ int startOffset = editor.getSelectionModel().getSelectionStart()[ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_5 $$ final PsiFile file = getFile()[ CD ]
Line_9 $$ PsiElement[] elements-->Line_12 $$ elements = new PsiElement[] [ FD ]
Line_9 $$ PsiElement[] elements-->Line_20 $$ final PsiExpression[] occurrences = ParameterTablePanel.findVariableOccurrences(elements, data.variable)[ FD ]
Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)-->Line_20 $$ final PsiExpression[] occurrences = ParameterTablePanel.findVariableOccurrences(elements, data.variable)[ FD ]
Line_5 $$ final PsiFile file = getFile()-->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ FD ]
Line_27 $$ if (types.length > 1) -->Line_35 $$ if (types.length == 1) [ CD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_17 $$ final ExtractMethodProcessor processor = new ExtractMethodProcessor(project, editor, elements, null, "Extract Method", "newMethod", null)[ CD ]
Line_5 $$ final PsiFile file = getFile()-->Line_10 $$ PsiExpression expr = CodeInsightUtil.findExpressionInRange(file, startOffset, endOffset)[ FD ]
Line_17 $$ final ExtractMethodProcessor processor = new ExtractMethodProcessor(project, editor, elements, null, "Extract Method", "newMethod", null)-->Line_19 $$ for (final VariableData data : processor.getInputVariables().getInputVariables()) [ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_3 $$ configureByFile(BASE_PATH + getTestName(false) + ".java")[ CD ]
Line_31 $$ for (int i = 0, typesLength = types.length; i < typesLength; i++) -->Line_33 $$ assertEquals(type, model.getElementAt(i).toString())[ CD ]
Line_35 $$ if (types.length == 1) -->Line_37 $$ assertEquals(types[0], ((JLabel) component).getText())[ CD ]
Line_27 $$ if (types.length > 1) -->Line_28 $$ assertTrue("One type suggested", component instanceof JComboBox)[ CD ]
Line_10 $$ PsiExpression expr = CodeInsightUtil.findExpressionInRange(file, startOffset, endOffset)-->Line_11 $$ if (expr != null) [ FD ]
Line_21 $$ final TypeSelectorManager manager = new TypeSelectorManagerImpl(project, data.type, occurrences, true) -->Line_26 $$ final JComponent component = manager.getTypeSelector().getComponent()[ FD ]
Line_35 $$ if (types.length == 1) -->Line_36 $$ assertTrue("Multiple types suggested", component instanceof JLabel)[ CD ]
Line_12 $$ elements = new PsiElement[] -->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_10 $$ PsiExpression expr = CodeInsightUtil.findExpressionInRange(file, startOffset, endOffset)[ CD ]
Line_12 $$ elements = new PsiElement[] -->Line_20 $$ final PsiExpression[] occurrences = ParameterTablePanel.findVariableOccurrences(elements, data.variable)[ FD ]
Line_17 $$ final ExtractMethodProcessor processor = new ExtractMethodProcessor(project, editor, elements, null, "Extract Method", "newMethod", null)-->Line_23 $$ return processor.isOutputVariable(data.variable)[ FD ]
Line_27 $$ if (types.length > 1) -->Line_30 $$ assertEquals(types.length, model.getSize())[ CD ]
Line_21 $$ final TypeSelectorManager manager = new TypeSelectorManagerImpl(project, data.type, occurrences, true) -->Line_23 $$ return processor.isOutputVariable(data.variable)[ CD ]
Line_9 $$ PsiElement[] elements-->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ FD ]
Line_2 $$ private void doTest(String... types) throws Exception -->Line_11 $$ if (expr != null) [ CD ]
Line_31 $$ for (int i = 0, typesLength = types.length; i < typesLength; i++) -->Line_32 $$ String type = types[i][ CD ]
Line_8 $$ int endOffset = editor.getSelectionModel().getSelectionEnd()-->Line_14 $$ elements = CodeInsightUtil.findStatementsInRange(file, startOffset, endOffset)[ FD ]
