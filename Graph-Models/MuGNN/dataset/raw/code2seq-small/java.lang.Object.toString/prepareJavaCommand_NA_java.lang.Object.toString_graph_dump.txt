Line_7 $$ Collection<URL> workerClassPath = classPathRegistry.getClassPath("WORKER_PROCESS").getAsURLs()-->Line_20 $$ outstr.writeInt(workerClassPath.size())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_8 $$ ActionExecutionWorker worker = create()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_10 $$ LogLevel logLevel = processBuilder.getLogLevel()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_40 $$ execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()))[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_7 $$ Collection<URL> workerClassPath = classPathRegistry.getClassPath("WORKER_PROCESS").getAsURLs()[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_6 $$ execSpec.systemProperty("java.security.manager", "jarjar." + BootstrapSecurityManager.class.getName())[ CD ]
Line_21 $$ for (URL entry : workerClassPath) -->Line_22 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_20 $$ outstr.writeInt(workerClassPath.size())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_36 $$ outstr.flush()[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")[ CD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_24 $$ outstr.writeInt(logLevel.ordinal())[ FD ]
Line_11 $$ Set<String> sharedPackages = processBuilder.getSharedPackages()-->Line_25 $$ outstr.writeInt(sharedPackages.size())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_25 $$ outstr.writeInt(sharedPackages.size())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_17 $$ outstr.writeUTF(file.getAbsolutePath())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_15 $$ outstr.writeInt(applicationClasspath.size())[ FD ]
Line_16 $$ for (File file : applicationClasspath) -->Line_17 $$ outstr.writeUTF(file.getAbsolutePath())[ FD ]
Line_12 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_40 $$ execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()))[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_4 $$ execSpec.classpath(classPathRegistry.getClassPath("WORKER_MAIN").getAsFiles())[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_4 $$ execSpec.classpath(classPathRegistry.getClassPath("WORKER_MAIN").getAsFiles())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_40 $$ execSpec.setStandardInput(new ByteArrayInputStream(bytes.toByteArray()))[ CD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_12 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()[ CD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_31 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_19 $$ outstr.writeUTF(requestedSecurityManager == null ? "" : requestedSecurityManager.toString())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_3 $$ execSpec.setMain("jarjar." + GradleWorkerMain.class.getName())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_6 $$ execSpec.systemProperty("java.security.manager", "jarjar." + BootstrapSecurityManager.class.getName())[ FD ]
Line_21 $$ for (URL entry : workerClassPath) -->Line_31 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")-->Line_19 $$ outstr.writeUTF(requestedSecurityManager == null ? "" : requestedSecurityManager.toString())[ FD ]
Line_26 $$ for (String str : sharedPackages) -->Line_27 $$ outstr.writeUTF(str)[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_11 $$ Set<String> sharedPackages = processBuilder.getSharedPackages()[ CD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_35 $$ outstr.write(serializedWorker)[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_27 $$ outstr.writeUTF(str)[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_29 $$ outstr.writeInt(implementationClassPath.size())[ FD ]
Line_33 $$ byte[] serializedWorker = GUtil.serialize(worker)-->Line_35 $$ outstr.write(serializedWorker)[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_22 $$ outstr.writeUTF(entry.toString())[ FD ]
Line_10 $$ LogLevel logLevel = processBuilder.getLogLevel()-->Line_24 $$ outstr.writeInt(logLevel.ordinal())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_3 $$ execSpec.setMain("jarjar." + GradleWorkerMain.class.getName())[ CD ]
Line_8 $$ ActionExecutionWorker worker = create()-->Line_33 $$ byte[] serializedWorker = GUtil.serialize(worker)[ FD ]
Line_14 $$ DataOutputStream outstr = new DataOutputStream(new EncodedStream.EncodedOutput(bytes))-->Line_34 $$ outstr.writeInt(serializedWorker.length)[ FD ]
Line_9 $$ Collection<File> applicationClasspath = processBuilder.getApplicationClasspath()-->Line_15 $$ outstr.writeInt(applicationClasspath.size())[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_5 $$ Object requestedSecurityManager = execSpec.getSystemProperties().get("java.security.manager")[ FD ]
Line_2 $$ public void prepareJavaCommand(JavaExecSpec execSpec) -->Line_9 $$ Collection<File> applicationClasspath = processBuilder.getApplicationClasspath()[ CD ]
