Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_25 $$ if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) [ FD ]
Line_11 $$ for (ListenerHolder holder : holders) -->Line_21 $$ holdersToFire.add(holder)[ FD ]
Line_26 $$ for (int i = 1; i < name.size(); i++) -->Line_30 $$ if (holders != null) [ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_5 $$ final NamingEvent event = new NamingEvent(context, type, newBinding, existingBinding, changeInfo)[ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_37 $$ executor.execute(new FireEventTask(holdersToFire, event))[ CD ]
Line_8 $$ final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE)-->Line_29 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ FD ]
Line_4 $$ final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes))-->Line_25 $$ if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) [ FD ]
Line_9 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)-->Line_30 $$ if (holders != null) [ FD ]
Line_9 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)-->Line_19 $$ if (holders != null) [ FD ]
Line_9 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)-->Line_10 $$ if (holders != null) [ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_7 $$ if (scopeSet.contains(EventContext.OBJECT_SCOPE)) [ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_6 $$ final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>()[ CD ]
Line_16 $$ if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) -->Line_18 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ CD ]
Line_31 $$ for (ListenerHolder holder : holders) -->Line_32 $$ holdersToFire.add(holder)[ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_4 $$ final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes))[ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_16 $$ if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) [ FD ]
Line_6 $$ final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>()-->Line_21 $$ holdersToFire.add(holder)[ FD ]
Line_8 $$ final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE)-->Line_18 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ FD ]
Line_28 $$ final TargetScope targetScope = new TargetScope(parentName.toString(), EventContext.SUBTREE_SCOPE)-->Line_29 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ FD ]
Line_26 $$ for (int i = 1; i < name.size(); i++) -->Line_27 $$ final Name parentName = name.getPrefix(i)[ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_17 $$ final TargetScope targetScope = new TargetScope(name.getPrefix(name.size() - 1).toString(), EventContext.ONELEVEL_SCOPE)[ FD ]
Line_8 $$ final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE)-->Line_9 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ FD ]
Line_26 $$ for (int i = 1; i < name.size(); i++) -->Line_28 $$ final TargetScope targetScope = new TargetScope(parentName.toString(), EventContext.SUBTREE_SCOPE)[ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_4 $$ final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes))[ CD ]
Line_25 $$ if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) -->Line_26 $$ for (int i = 1; i < name.size(); i++) [ CD ]
Line_7 $$ if (scopeSet.contains(EventContext.OBJECT_SCOPE)) -->Line_10 $$ if (holders != null) [ CD ]
Line_11 $$ for (ListenerHolder holder : holders) -->Line_32 $$ holdersToFire.add(holder)[ FD ]
Line_4 $$ final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes))-->Line_16 $$ if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) [ FD ]
Line_7 $$ if (scopeSet.contains(EventContext.OBJECT_SCOPE)) -->Line_8 $$ final TargetScope targetScope = new TargetScope(target, EventContext.OBJECT_SCOPE)[ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_26 $$ for (int i = 1; i < name.size(); i++) [ FD ]
Line_4 $$ final Set<Integer> scopeSet = new HashSet<Integer>(Arrays.asList(scopes))-->Line_7 $$ if (scopeSet.contains(EventContext.OBJECT_SCOPE)) [ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_3 $$ final String target = name.toString()[ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_3 $$ final String target = name.toString()[ FD ]
Line_26 $$ for (int i = 1; i < name.size(); i++) -->Line_29 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ CD ]
Line_7 $$ if (scopeSet.contains(EventContext.OBJECT_SCOPE)) -->Line_9 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)[ CD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_16 $$ if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) [ CD ]
Line_27 $$ final Name parentName = name.getPrefix(i)-->Line_28 $$ final TargetScope targetScope = new TargetScope(parentName.toString(), EventContext.SUBTREE_SCOPE)[ FD ]
Line_29 $$ final List<ListenerHolder> holders = holdersByTarget.get(targetScope)-->Line_30 $$ if (holders != null) [ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_27 $$ final Name parentName = name.getPrefix(i)[ FD ]
Line_6 $$ final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>()-->Line_12 $$ holdersToFire.add(holder)[ FD ]
Line_26 $$ for (int i = 1; i < name.size(); i++) -->Line_27 $$ final Name parentName = name.getPrefix(i)[ CD ]
Line_16 $$ if (scopeSet.contains(EventContext.ONELEVEL_SCOPE) && !name.isEmpty()) -->Line_19 $$ if (holders != null) [ CD ]
Line_6 $$ final Set<ListenerHolder> holdersToFire = new HashSet<ListenerHolder>()-->Line_32 $$ holdersToFire.add(holder)[ FD ]
Line_11 $$ for (ListenerHolder holder : holders) -->Line_12 $$ holdersToFire.add(holder)[ FD ]
Line_2 $$ void fireEvent(final EventContext context, final Name name, final Binding existingBinding, final Binding newBinding, int type, final String changeInfo, final Integer... scopes) -->Line_25 $$ if (scopeSet.contains(EventContext.SUBTREE_SCOPE) && !name.isEmpty()) [ CD ]
