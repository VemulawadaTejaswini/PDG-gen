Line_2 $$ public void testDistCh() throws Exception -->Line_7 $$ final FileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testDistCh() throws Exception -->Line_6 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).format(true).build()[ CD ]
Line_7 $$ final FileSystem fs = cluster.getFileSystem()-->Line_38 $$ for (FileStatus status : fs.listStatus(sub)) [ FD ]
Line_2 $$ public void testDistCh() throws Exception -->Line_4 $$ conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + "." + CapacitySchedulerConfiguration.QUEUES, "default")[ CD ]
Line_6 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).format(true).build()-->Line_43 $$ cluster.shutdown()[ FD ]
Line_36 $$ Path sub = new Path(tree.root + "/sub" + i)-->Line_37 $$ checkFileStatus(newstatus[i], fs.getFileStatus(sub))[ FD ]
Line_38 $$ for (FileStatus status : fs.listStatus(sub)) -->Line_39 $$ checkFileStatus(newstatus[i], status)[ FD ]
Line_6 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).format(true).build()-->Line_7 $$ final FileSystem fs = cluster.getFileSystem()[ FD ]
Line_14 $$ final ChPermissionStatus[] newstatus = new ChPermissionStatus[NUN_SUBS]-->Line_30 $$ System.out.println("newstatus=" + Arrays.asList(newstatus).toString().replace(",", ",\n  "))[ FD ]
Line_7 $$ final FileSystem fs = cluster.getFileSystem()-->Line_11 $$ final FileStatus rootstatus = fs.getFileStatus(tree.rootdir)[ FD ]
Line_2 $$ public void testDistCh() throws Exception -->Line_5 $$ conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".default." + CapacitySchedulerConfiguration.CAPACITY, "100")[ CD ]
Line_7 $$ final FileSystem fs = cluster.getFileSystem()-->Line_37 $$ checkFileStatus(newstatus[i], fs.getFileStatus(sub))[ FD ]
Line_13 $$ final String[] args = new String[NUN_SUBS]-->Line_29 $$ System.out.println("args=" + Arrays.asList(args).toString().replace(",", ",\n  "))[ FD ]
Line_2 $$ public void testDistCh() throws Exception -->Line_8 $$ final FsShell shell = new FsShell(conf)[ CD ]
Line_36 $$ Path sub = new Path(tree.root + "/sub" + i)-->Line_38 $$ for (FileStatus status : fs.listStatus(sub)) [ FD ]
Line_8 $$ final FsShell shell = new FsShell(conf)-->Line_33 $$ runLsr(shell, tree.root, 0)[ FD ]
Line_3 $$ final Configuration conf = new Configuration()-->Line_4 $$ conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + "." + CapacitySchedulerConfiguration.QUEUES, "default")[ FD ]
Line_3 $$ final Configuration conf = new Configuration()-->Line_5 $$ conf.set(CapacitySchedulerConfiguration.PREFIX + CapacitySchedulerConfiguration.ROOT + ".default." + CapacitySchedulerConfiguration.CAPACITY, "100")[ FD ]
Line_8 $$ final FsShell shell = new FsShell(conf)-->Line_12 $$ runLsr(shell, tree.root, 0)[ FD ]
Line_2 $$ public void testDistCh() throws Exception -->Line_3 $$ final Configuration conf = new Configuration()[ CD ]
