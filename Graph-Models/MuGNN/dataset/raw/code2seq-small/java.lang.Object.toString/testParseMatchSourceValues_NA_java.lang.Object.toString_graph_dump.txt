Line_9 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")[ FD ]
Line_9 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_14 $$ o = expectedValue.get("foo")[ FD ]
Line_4 $$ MatchParser matchParser = new MatchParser()-->Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_7 $$ assertThat(matchAssertion.getField(), equalTo("_source"))[ CD ]
Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_15 $$ assertThat(o, instanceOf(String.class))[ FD ]
Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_9 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()[ FD ]
Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_8 $$ assertThat(matchAssertion.getExpectedValue(), instanceOf(Map.class))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_6 $$ assertThat(matchAssertion, notNullValue())[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_8 $$ assertThat(matchAssertion.getExpectedValue(), instanceOf(Map.class))[ CD ]
Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_6 $$ assertThat(matchAssertion, notNullValue())[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_12 $$ assertThat(o, instanceOf(Integer.class))[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_13 $$ assertThat((Integer) o, equalTo(3))[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_4 $$ MatchParser matchParser = new MatchParser()[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_15 $$ assertThat(o, instanceOf(String.class))[ CD ]
Line_5 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_7 $$ assertThat(matchAssertion.getField(), equalTo("_source"))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_14 $$ o = expectedValue.get("foo")[ CD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_10 $$ assertThat(expectedValue.size(), equalTo(2))[ CD ]
Line_14 $$ o = expectedValue.get("foo")-->Line_15 $$ assertThat(o, instanceOf(String.class))[ FD ]
Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_16 $$ assertThat(o.toString(), equalTo("bar"))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_9 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()[ CD ]
Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_14 $$ o = expectedValue.get("foo")[ FD ]
Line_11 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_12 $$ assertThat(o, instanceOf(Integer.class))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_16 $$ assertThat(o.toString(), equalTo("bar"))[ CD ]
Line_14 $$ o = expectedValue.get("foo")-->Line_16 $$ assertThat(o.toString(), equalTo("bar"))[ FD ]
Line_2 $$ public void testParseMatchSourceValues() throws Exception -->Line_3 $$ parser = YamlXContent.yamlXContent.createParser("[ CD ]
Line_9 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_10 $$ assertThat(expectedValue.size(), equalTo(2))[ FD ]
