Line_6 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_10 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()[ FD ]
Line_10 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_12 $$ Object o = expectedValue.get("responses.0.hits.total")[ FD ]
Line_10 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_11 $$ assertThat(expectedValue.size(), equalTo(2))[ FD ]
Line_12 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_15 $$ o = expectedValue.get("foo")[ FD ]
Line_12 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_13 $$ assertThat(o, instanceOf(Integer.class))[ FD ]
Line_12 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_17 $$ assertThat(o.toString(), equalTo("bar"))[ FD ]
Line_5 $$ MatchParser matchParser = new MatchParser()-->Line_6 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))[ FD ]
Line_6 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_8 $$ assertThat(matchAssertion.getField(), equalTo("_source"))[ FD ]
Line_12 $$ Object o = expectedValue.get("responses.0.hits.total")-->Line_16 $$ assertThat(o, instanceOf(String.class))[ FD ]
Line_6 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_7 $$ assertThat(matchAssertion, notNullValue())[ FD ]
Line_10 $$ Map<String, Object> expectedValue = (Map<String, Object>) matchAssertion.getExpectedValue()-->Line_15 $$ o = expectedValue.get("foo")[ FD ]
Line_6 $$ MatchAssertion matchAssertion = matchParser.parse(new RestTestSuiteParseContext("api", "suite", parser))-->Line_9 $$ assertThat(matchAssertion.getExpectedValue(), instanceOf(Map.class))[ FD ]
Line_15 $$ o = expectedValue.get("foo")-->Line_16 $$ assertThat(o, instanceOf(String.class))[ FD ]
Line_15 $$ o = expectedValue.get("foo")-->Line_17 $$ assertThat(o.toString(), equalTo("bar"))[ FD ]
