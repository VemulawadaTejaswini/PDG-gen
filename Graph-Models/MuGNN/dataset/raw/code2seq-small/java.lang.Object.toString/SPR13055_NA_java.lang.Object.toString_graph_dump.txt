Line_15 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_21 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_5 $$ List<Map<String, Object>> myPayload = new ArrayList<Map<String, Object>>()-->Line_13 $$ myPayload.add(v2)[ FD ]
Line_14 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_14 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_18 $$ assertEquals("[test12,test11, test22,test21]", res.toString())[ FD ]
Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_21 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_14 $$ EvaluationContext context = new StandardEvaluationContext(myPayload)-->Line_21 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_15 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_7 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_11 $$ v2.put("test22", "test22")[ FD ]
Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_22 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_6 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_8 $$ v1.put("test11", "test11")[ FD ]
Line_6 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_9 $$ v1.put("test12", "test12")[ FD ]
Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_15 $$ ExpressionParser parser = new SpelExpressionParser()-->Line_21 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)[ FD ]
Line_16 $$ String ex = "#root.![T(org.springframework.util.StringUtils).collectionToCommaDelimitedString(#this.values())]"-->Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)[ FD ]
Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_22 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_6 $$ Map<String, Object> v1 = new HashMap<String, Object>()-->Line_12 $$ myPayload.add(v1)[ FD ]
Line_21 $$ res = parser.parseExpression("#root.![values()]").getValue(context, List.class)-->Line_22 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_5 $$ List<Map<String, Object>> myPayload = new ArrayList<Map<String, Object>>()-->Line_12 $$ myPayload.add(v1)[ FD ]
Line_17 $$ List res = parser.parseExpression(ex).getValue(context, List.class)-->Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)[ FD ]
Line_7 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_13 $$ myPayload.add(v2)[ FD ]
Line_19 $$ res = parser.parseExpression("#root.![#this.values()]").getValue(context, List.class)-->Line_20 $$ assertEquals("[[test12, test11], [test22, test21]]", res.toString())[ FD ]
Line_7 $$ Map<String, Object> v2 = new HashMap<String, Object>()-->Line_10 $$ v2.put("test21", "test21")[ FD ]
