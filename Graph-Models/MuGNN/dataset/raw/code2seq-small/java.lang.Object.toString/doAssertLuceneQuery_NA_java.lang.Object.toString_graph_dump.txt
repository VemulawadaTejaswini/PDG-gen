Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_5 $$ if (queryBuilder.fieldName().equals(INT_FIELD_NAME) || queryBuilder.fieldName().equals(DOUBLE_FIELD_NAME) || queryBuilder.fieldName().equals(BOOLEAN_FIELD_NAME) || queryBuilder.fieldName().equals(DATE_FIELD_NAME)) [ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_12 $$ terms = queryBuilder.values()[ FD ]
Line_22 $$ List<Term> expectedTerms = new ArrayList()-->Line_25 $$ expectedTerms.add(new Term(queryBuilder.fieldName(), term.toString()))[ FD ]
Line_24 $$ if (term != null) -->Line_25 $$ expectedTerms.add(new Term(queryBuilder.fieldName(), term.toString()))[ CD ]
Line_9 $$ if (queryBuilder.termsLookup() != null) -->Line_10 $$ terms = randomTerms[ CD ]
Line_15 $$ for (BooleanClause booleanClause : booleanQuery) -->Line_16 $$ assertThat(booleanClause.getOccur(), equalTo(BooleanClause.Occur.SHOULD))[ FD ]
Line_15 $$ for (BooleanClause booleanClause : booleanQuery) -->Line_17 $$ assertThat(booleanClause.getQuery(), instanceOf(TermQuery.class))[ FD ]
Line_18 $$ Term term = ((TermQuery) booleanClause.getQuery()).getTerm()-->Line_24 $$ if (term != null) [ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_9 $$ if (queryBuilder.termsLookup() != null) [ CD ]
Line_14 $$ final List<Term> booleanTerms = new ArrayList()-->Line_19 $$ booleanTerms.add(term)[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_4 $$ BooleanQuery booleanQuery = (BooleanQuery) query[ CD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_25 $$ expectedTerms.add(new Term(queryBuilder.fieldName(), term.toString()))[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_21 $$ CollectionUtil.timSort(booleanTerms)[ CD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_5 $$ if (queryBuilder.fieldName().equals(INT_FIELD_NAME) || queryBuilder.fieldName().equals(DOUBLE_FIELD_NAME) || queryBuilder.fieldName().equals(BOOLEAN_FIELD_NAME) || queryBuilder.fieldName().equals(DATE_FIELD_NAME)) [ CD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_14 $$ final List<Term> booleanTerms = new ArrayList()[ CD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_30 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms, booleanTerms)[ CD ]
Line_18 $$ Term term = ((TermQuery) booleanClause.getQuery()).getTerm()-->Line_19 $$ booleanTerms.add(term)[ FD ]
Line_18 $$ Term term = ((TermQuery) booleanClause.getQuery()).getTerm()-->Line_25 $$ expectedTerms.add(new Term(queryBuilder.fieldName(), term.toString()))[ FD ]
Line_22 $$ List<Term> expectedTerms = new ArrayList()-->Line_29 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms.size(), booleanTerms.size())[ FD ]
Line_14 $$ final List<Term> booleanTerms = new ArrayList()-->Line_21 $$ CollectionUtil.timSort(booleanTerms)[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_22 $$ List<Term> expectedTerms = new ArrayList()[ CD ]
Line_14 $$ final List<Term> booleanTerms = new ArrayList()-->Line_29 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms.size(), booleanTerms.size())[ FD ]
Line_14 $$ final List<Term> booleanTerms = new ArrayList()-->Line_30 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms, booleanTerms)[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_9 $$ if (queryBuilder.termsLookup() != null) [ FD ]
Line_15 $$ for (BooleanClause booleanClause : booleanQuery) -->Line_18 $$ Term term = ((TermQuery) booleanClause.getQuery()).getTerm()[ FD ]
Line_22 $$ List<Term> expectedTerms = new ArrayList()-->Line_28 $$ CollectionUtil.timSort(expectedTerms)[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_29 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms.size(), booleanTerms.size())[ CD ]
Line_5 $$ if (queryBuilder.fieldName().equals(INT_FIELD_NAME) || queryBuilder.fieldName().equals(DOUBLE_FIELD_NAME) || queryBuilder.fieldName().equals(BOOLEAN_FIELD_NAME) || queryBuilder.fieldName().equals(DATE_FIELD_NAME)) -->Line_6 $$ return[ CD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_3 $$ assertThat(query, instanceOf(BooleanQuery.class))[ CD ]
Line_8 $$ List<Object> terms-->Line_10 $$ terms = randomTerms[ FD ]
Line_9 $$ if (queryBuilder.termsLookup() != null) -->Line_12 $$ terms = queryBuilder.values()[ CD ]
Line_22 $$ List<Term> expectedTerms = new ArrayList()-->Line_30 $$ assertEquals(expectedTerms + " vs. " + booleanTerms, expectedTerms, booleanTerms)[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_8 $$ List<Object> terms[ CD ]
Line_10 $$ terms = randomTerms-->Line_12 $$ terms = queryBuilder.values()[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_3 $$ assertThat(query, instanceOf(BooleanQuery.class))[ FD ]
Line_2 $$ protected void doAssertLuceneQuery(TermsQueryBuilder queryBuilder, Query query, QueryShardContext context) throws IOException -->Line_28 $$ CollectionUtil.timSort(expectedTerms)[ CD ]
Line_8 $$ List<Object> terms-->Line_12 $$ terms = queryBuilder.values()[ FD ]
