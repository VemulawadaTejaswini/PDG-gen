Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_16 $$ beanFactory.getBean("trusted-spring-factory")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_26 $$ return null[ CD ]
Line_8 $$ final Subject subject = new Subject()-->Line_9 $$ subject.getPrincipals().add(new TestPrincipal("user1"))[ FD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_17 $$ beanFactory.getBean("trusted-spring-factory")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_18 $$ beanFactory.getBean("trusted-spring-factory")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_25 $$ assertEquals(true, NonPrivilegedBean.destroyed)[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_19 $$ beanFactory.getBean("trusted-factory-bean")[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() [ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_21 $$ beanFactory.getBean("trusted-factory-method")[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_8 $$ final Subject subject = new Subject()[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_12 $$ assertEquals("user1", getCurrentSubjectName())[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_4 $$ Permissions perms = new Permissions()[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_3 $$ beanFactory.setSecurityContextProvider(null)[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_6 $$ ProtectionDomain pd = new ProtectionDomain(null, perms)[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_13 $$ assertEquals(false, NonPrivilegedBean.destroyed)[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_20 $$ beanFactory.getBean("trusted-static-factory-method")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_15 $$ beanFactory.getBean("trusted-custom-init-destroy")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_24 $$ beanFactory.destroySingletons()[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_14 $$ beanFactory.getBean("trusted-spring-callbacks")[ CD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_9 $$ subject.getPrincipals().add(new TestPrincipal("user1"))[ CD ]
Line_4 $$ Permissions perms = new Permissions()-->Line_5 $$ perms.add(new AuthPermission("getSubject"))[ FD ]
Line_2 $$ public void testTrustedExecution() throws Exception -->Line_5 $$ perms.add(new AuthPermission("getSubject"))[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_22 $$ beanFactory.getBean("trusted-property-injection")[ CD ]
Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() -->Line_23 $$ beanFactory.getBean("trusted-working-property-injection")[ CD ]
Line_8 $$ final Subject subject = new Subject()-->Line_10 $$ Subject.doAsPrivileged(subject, new PrivilegedAction<Object>() [ FD ]
