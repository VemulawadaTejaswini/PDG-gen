Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_7 $$ expected.add(new RuntimePermission("getClassLoader"))[ CD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_9 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ CD ]
Line_6 $$ Permissions expected = new Permissions()-->Line_8 $$ expected.add(new RuntimePermission("closeClassLoader"))[ FD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_8 $$ expected.add(new RuntimePermission("closeClassLoader"))[ CD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_6 $$ Permissions expected = new Permissions()[ CD ]
Line_4 $$ Path scratch = createTempDir()-->Line_9 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ FD ]
Line_6 $$ Permissions expected = new Permissions()-->Line_10 $$ assertEquals(expected, actual)[ FD ]
Line_9 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)-->Line_10 $$ assertEquals(expected, actual)[ FD ]
Line_5 $$ Path testFile = this.getDataPath("security/complex-plugin-security.policy")-->Line_9 $$ PermissionCollection actual = PluginSecurity.parsePermissions(Terminal.DEFAULT, testFile, scratch)[ FD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_10 $$ assertEquals(expected, actual)[ CD ]
Line_6 $$ Permissions expected = new Permissions()-->Line_7 $$ expected.add(new RuntimePermission("getClassLoader"))[ FD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_5 $$ Path testFile = this.getDataPath("security/complex-plugin-security.policy")[ CD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_4 $$ Path scratch = createTempDir()[ CD ]
Line_2 $$ public void testParseTwoPermissions() throws Exception -->Line_3 $$ assumeTrue("test cannot run with security manager enabled", System.getSecurityManager() == null)[ CD ]
