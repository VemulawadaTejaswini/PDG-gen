Line_10 $$ for (Map.Entry<String, Settings> entry : profiles.entrySet()) -->Line_12 $$ String name = entry.getKey()[ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)[ CD ]
Line_10 $$ for (Map.Entry<String, Settings> entry : profiles.entrySet()) -->Line_11 $$ Settings profileSettings = entry.getValue()[ FD ]
Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)-->Line_6 $$ if (!profiles.containsKey(NettyTransport.DEFAULT_PROFILE)) [ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_6 $$ if (!profiles.containsKey(NettyTransport.DEFAULT_PROFILE)) [ CD ]
Line_6 $$ if (!profiles.containsKey(NettyTransport.DEFAULT_PROFILE)) -->Line_7 $$ profiles = new HashMap(profiles)[ CD ]
Line_15 $$ if (valid) -->Line_16 $$ policy.add(new SocketPermission("*:" + transportRange, "listen,resolve"))[ CD ]
Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)-->Line_7 $$ profiles = new HashMap(profiles)[ FD ]
Line_11 $$ Settings profileSettings = entry.getValue()-->Line_13 $$ String transportRange = profileSettings.get("port", settings.get("transport.tcp.port", NettyTransport.DEFAULT_PORT_RANGE))[ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_4 $$ policy.add(new SocketPermission("*:" + httpRange, "listen,resolve"))[ FD ]
Line_7 $$ profiles = new HashMap(profiles)-->Line_8 $$ profiles.put(NettyTransport.DEFAULT_PROFILE, Settings.EMPTY)[ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_3 $$ String httpRange = settings.get("http.netty.port", settings.get("http.port", NettyHttpServerTransport.DEFAULT_PORT_RANGE))[ CD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_13 $$ String transportRange = profileSettings.get("port", settings.get("transport.tcp.port", NettyTransport.DEFAULT_PORT_RANGE))[ FD ]
Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)-->Line_10 $$ for (Map.Entry<String, Settings> entry : profiles.entrySet()) [ FD ]
Line_12 $$ String name = entry.getKey()-->Line_14 $$ boolean valid = NettyTransport.DEFAULT_PROFILE.equals(name) || (Strings.hasLength(name) && profileSettings.get("port") != null)[ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_4 $$ policy.add(new SocketPermission("*:" + httpRange, "listen,resolve"))[ CD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_3 $$ String httpRange = settings.get("http.netty.port", settings.get("http.port", NettyHttpServerTransport.DEFAULT_PORT_RANGE))[ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)[ FD ]
Line_7 $$ profiles = new HashMap(profiles)-->Line_10 $$ for (Map.Entry<String, Settings> entry : profiles.entrySet()) [ FD ]
Line_2 $$ static void addBindPermissions(Permissions policy, Settings settings) throws IOException -->Line_16 $$ policy.add(new SocketPermission("*:" + transportRange, "listen,resolve"))[ FD ]
Line_11 $$ Settings profileSettings = entry.getValue()-->Line_14 $$ boolean valid = NettyTransport.DEFAULT_PROFILE.equals(name) || (Strings.hasLength(name) && profileSettings.get("port") != null)[ FD ]
Line_6 $$ if (!profiles.containsKey(NettyTransport.DEFAULT_PROFILE)) -->Line_8 $$ profiles.put(NettyTransport.DEFAULT_PROFILE, Settings.EMPTY)[ CD ]
Line_5 $$ Map<String, Settings> profiles = settings.getGroups("transport.profiles", true)-->Line_8 $$ profiles.put(NettyTransport.DEFAULT_PROFILE, Settings.EMPTY)[ FD ]
