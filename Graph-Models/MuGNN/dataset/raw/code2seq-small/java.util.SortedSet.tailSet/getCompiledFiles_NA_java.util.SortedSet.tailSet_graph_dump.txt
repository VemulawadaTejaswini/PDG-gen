Line_12 $$ List<OutputItem> compiledFiles = new ArrayList<OutputItem>()-->Line_26 $$ compiledFiles.add(new OutputItem(targetDirectory, className.replace('.', '/') + ".class", fileName))[ FD ]
Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) -->Line_26 $$ compiledFiles.add(new OutputItem(targetDirectory, className.replace('.', '/') + ".class", fileName))[ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_8 $$ List<GroovyClass> listOfClasses = compilationUnit.getClasses()[ FD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) [ FD ]
Line_23 $$ String className = tailItr.next()-->Line_26 $$ compiledFiles.add(new OutputItem(targetDirectory, className.replace('.', '/') + ".class", fileName))[ FD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_8 $$ List<GroovyClass> listOfClasses = compilationUnit.getClasses()[ CD ]
Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) -->Line_17 $$ final List<ClassNode> topLevelClasses = ast.getClasses()[ CD ]
Line_22 $$ for (Iterator<String> tailItr = tail.iterator(); tailItr.hasNext(); ) -->Line_23 $$ String className = tailItr.next()[ FD ]
Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) -->Line_16 $$ final ModuleNode ast = sourceUnit.getAST()[ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_4 $$ if (forStubs) [ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_5 $$ return getStubOutputItems(compilationUnit, targetDirectory)[ FD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_12 $$ List<OutputItem> compiledFiles = new ArrayList<OutputItem>()[ CD ]
Line_3 $$ File targetDirectory = compilationUnit.getConfiguration().getTargetDirectory()-->Line_5 $$ return getStubOutputItems(compilationUnit, targetDirectory)[ FD ]
Line_16 $$ final ModuleNode ast = sourceUnit.getAST()-->Line_17 $$ final List<ClassNode> topLevelClasses = ast.getClasses()[ FD ]
Line_23 $$ String className = tailItr.next()-->Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) [ FD ]
Line_20 $$ final String nested = topLevel + "$"-->Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) [ FD ]
Line_19 $$ final String topLevel = classNode.getName()-->Line_21 $$ final SortedSet<String> tail = allClasses.tailSet(topLevel)[ FD ]
Line_22 $$ for (Iterator<String> tailItr = tail.iterator(); tailItr.hasNext(); ) -->Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) [ CD ]
Line_7 $$ final SortedSet<String> allClasses = new TreeSet<String>()-->Line_21 $$ final SortedSet<String> tail = allClasses.tailSet(topLevel)[ FD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_3 $$ File targetDirectory = compilationUnit.getConfiguration().getTargetDirectory()[ FD ]
Line_7 $$ final SortedSet<String> allClasses = new TreeSet<String>()-->Line_10 $$ allClasses.add(listOfClass.getName())[ FD ]
Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) -->Line_14 $$ SourceUnit sourceUnit = (SourceUnit) iterator.next()[ FD ]
Line_14 $$ SourceUnit sourceUnit = (SourceUnit) iterator.next()-->Line_15 $$ String fileName = sourceUnit.getName()[ FD ]
Line_4 $$ if (forStubs) -->Line_5 $$ return getStubOutputItems(compilationUnit, targetDirectory)[ CD ]
Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) -->Line_14 $$ SourceUnit sourceUnit = (SourceUnit) iterator.next()[ CD ]
Line_14 $$ SourceUnit sourceUnit = (SourceUnit) iterator.next()-->Line_16 $$ final ModuleNode ast = sourceUnit.getAST()[ FD ]
Line_9 $$ for (GroovyClass listOfClass : listOfClasses) -->Line_10 $$ allClasses.add(listOfClass.getName())[ FD ]
Line_22 $$ for (Iterator<String> tailItr = tail.iterator(); tailItr.hasNext(); ) -->Line_23 $$ String className = tailItr.next()[ CD ]
Line_22 $$ for (Iterator<String> tailItr = tail.iterator(); tailItr.hasNext(); ) -->Line_25 $$ tailItr.remove()[ FD ]
Line_21 $$ final SortedSet<String> tail = allClasses.tailSet(topLevel)-->Line_22 $$ for (Iterator<String> tailItr = tail.iterator(); tailItr.hasNext(); ) [ FD ]
Line_18 $$ for (ClassNode classNode : topLevelClasses) -->Line_19 $$ final String topLevel = classNode.getName()[ FD ]
Line_13 $$ for (Iterator iterator = compilationUnit.iterator(); iterator.hasNext(); ) -->Line_15 $$ String fileName = sourceUnit.getName()[ CD ]
Line_19 $$ final String topLevel = classNode.getName()-->Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) [ FD ]
Line_24 $$ if (className.equals(topLevel) || className.startsWith(nested)) -->Line_25 $$ tailItr.remove()[ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_33 $$ return compiledFiles[ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_3 $$ File targetDirectory = compilationUnit.getConfiguration().getTargetDirectory()[ CD ]
Line_2 $$ private List<OutputItem> getCompiledFiles(CompilationUnit compilationUnit) throws IOException -->Line_7 $$ final SortedSet<String> allClasses = new TreeSet<String>()[ CD ]
