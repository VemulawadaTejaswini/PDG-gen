Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_8 $$ allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false))[ FD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_15 $$ long curStartTxId = fromTxId[ CD ]
Line_5 $$ if (j.getManager() instanceof FileJournalManager) -->Line_6 $$ FileJournalManager fjm = (FileJournalManager) j.getManager()[ CD ]
Line_19 $$ if (logGroup.isEmpty()) -->Line_20 $$ SortedSet<Long> startTxIds = Sets.newTreeSet(logsByStartTxId.keySet())[ CD ]
Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1-->Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)[ FD ]
Line_4 $$ for (JournalAndStream j : journals) -->Line_6 $$ FileJournalManager fjm = (FileJournalManager) j.getManager()[ FD ]
Line_17 $$ while (true) -->Line_19 $$ if (logGroup.isEmpty()) [ CD ]
Line_15 $$ long curStartTxId = fromTxId-->Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)[ FD ]
Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)-->Line_22 $$ if (startTxIds.isEmpty()) [ FD ]
Line_17 $$ while (true) -->Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)[ CD ]
Line_22 $$ if (startTxIds.isEmpty()) -->Line_25 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_15 $$ long curStartTxId = fromTxId-->Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)[ FD ]
Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)-->Line_29 $$ curStartTxId = startTxIds.first()[ FD ]
Line_16 $$ List<RemoteEditLog> logs = Lists.newArrayList()-->Line_34 $$ logs.add(bestLog)[ FD ]
Line_33 $$ RemoteEditLog bestLog = Collections.max(logGroup)-->Line_34 $$ logs.add(bestLog)[ FD ]
Line_4 $$ for (JournalAndStream j : journals) -->Line_5 $$ if (j.getManager() instanceof FileJournalManager) [ FD ]
Line_16 $$ List<RemoteEditLog> logs = Lists.newArrayList()-->Line_28 $$ logs.clear()[ FD ]
Line_20 $$ SortedSet<Long> startTxIds = Sets.newTreeSet(logsByStartTxId.keySet())-->Line_22 $$ if (startTxIds.isEmpty()) [ FD ]
Line_20 $$ SortedSet<Long> startTxIds = Sets.newTreeSet(logsByStartTxId.keySet())-->Line_29 $$ curStartTxId = startTxIds.first()[ FD ]
Line_3 $$ List<RemoteEditLog> allLogs = Lists.newArrayList()-->Line_8 $$ allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false))[ FD ]
Line_17 $$ while (true) -->Line_33 $$ RemoteEditLog bestLog = Collections.max(logGroup)[ CD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_38 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_19 $$ if (logGroup.isEmpty()) -->Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)[ CD ]
Line_33 $$ RemoteEditLog bestLog = Collections.max(logGroup)-->Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1[ FD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_3 $$ List<RemoteEditLog> allLogs = Lists.newArrayList()[ CD ]
Line_17 $$ while (true) -->Line_34 $$ logs.add(bestLog)[ CD ]
Line_6 $$ FileJournalManager fjm = (FileJournalManager) j.getManager()-->Line_8 $$ allLogs.addAll(fjm.getRemoteEditLogs(fromTxId, false))[ FD ]
Line_3 $$ List<RemoteEditLog> allLogs = Lists.newArrayList()-->Line_14 $$ ImmutableListMultimap<Long, RemoteEditLog> logsByStartTxId = Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID)[ FD ]
Line_17 $$ while (true) -->Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1[ CD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_17 $$ while (true) [ CD ]
Line_29 $$ curStartTxId = startTxIds.first()-->Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1[ FD ]
Line_38 $$ if (LOG.isDebugEnabled()) -->Line_39 $$ LOG.debug("Generated manifest for logs since " + fromTxId + ":" + ret)[ CD ]
Line_20 $$ SortedSet<Long> startTxIds = Sets.newTreeSet(logsByStartTxId.keySet())-->Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)[ FD ]
Line_29 $$ curStartTxId = startTxIds.first()-->Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)[ FD ]
Line_22 $$ if (startTxIds.isEmpty()) -->Line_29 $$ curStartTxId = startTxIds.first()[ CD ]
Line_14 $$ ImmutableListMultimap<Long, RemoteEditLog> logsByStartTxId = Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID)-->Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)[ FD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_14 $$ ImmutableListMultimap<Long, RemoteEditLog> logsByStartTxId = Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID)[ CD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_37 $$ RemoteEditLogManifest ret = new RemoteEditLogManifest(logs)[ CD ]
Line_25 $$ if (LOG.isDebugEnabled()) -->Line_26 $$ LOG.debug("Found gap in logs at " + curStartTxId + ": " + "not returning previous logs in manifest.")[ CD ]
Line_29 $$ curStartTxId = startTxIds.first()-->Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)[ FD ]
Line_14 $$ ImmutableListMultimap<Long, RemoteEditLog> logsByStartTxId = Multimaps.index(allLogs, RemoteEditLog.GET_START_TXID)-->Line_20 $$ SortedSet<Long> startTxIds = Sets.newTreeSet(logsByStartTxId.keySet())[ FD ]
Line_15 $$ long curStartTxId = fromTxId-->Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1[ FD ]
Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)-->Line_33 $$ RemoteEditLog bestLog = Collections.max(logGroup)[ FD ]
Line_22 $$ if (startTxIds.isEmpty()) -->Line_28 $$ logs.clear()[ CD ]
Line_35 $$ curStartTxId = bestLog.getEndTxId() + 1-->Line_21 $$ startTxIds = startTxIds.tailSet(curStartTxId)[ FD ]
Line_18 $$ ImmutableList<RemoteEditLog> logGroup = logsByStartTxId.get(curStartTxId)-->Line_19 $$ if (logGroup.isEmpty()) [ FD ]
Line_15 $$ long curStartTxId = fromTxId-->Line_29 $$ curStartTxId = startTxIds.first()[ FD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_16 $$ List<RemoteEditLog> logs = Lists.newArrayList()[ CD ]
Line_19 $$ if (logGroup.isEmpty()) -->Line_22 $$ if (startTxIds.isEmpty()) [ CD ]
Line_2 $$ public synchronized RemoteEditLogManifest getEditLogManifest(long fromTxId) -->Line_41 $$ return ret[ CD ]
