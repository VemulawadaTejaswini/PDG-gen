Line_3 $$ FSDataInputStream fis = null-->Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_8 $$ Path file1 = new Path(sub, file1Name)-->Line_9 $$ DFSTestUtil.createFile(hdfs, file1, BLOCKSIZE, REPLICATION, SEED)[ FD ]
Line_8 $$ Path file1 = new Path(sub, file1Name)-->Line_12 $$ DFSTestUtil.appendFile(hdfs, file1, BLOCKSIZE)[ FD ]
Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)-->Line_17 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE * 2, bytesRead)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_17 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE * 2, bytesRead)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_25 $$ fis.close()[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_26 $$ PrintStream outBackup = System.out[ CD ]
Line_3 $$ FSDataInputStream fis = null-->Line_20 $$ fis = hdfs.open(file1snap1)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_22 $$ assertEquals(fileStatus.getLen(), BLOCKSIZE)[ CD ]
Line_13 $$ fileStatus = hdfs.getFileStatus(file1)-->Line_22 $$ assertEquals(fileStatus.getLen(), BLOCKSIZE)[ FD ]
Line_8 $$ Path file1 = new Path(sub, file1Name)-->Line_15 $$ fis = hdfs.open(file1)[ FD ]
Line_15 $$ fis = hdfs.open(file1)-->Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_15 $$ fis = hdfs.open(file1)[ CD ]
Line_4 $$ FileStatus fileStatus = null-->Line_13 $$ fileStatus = hdfs.getFileStatus(file1)[ FD ]
Line_3 $$ FSDataInputStream fis = null-->Line_15 $$ fis = hdfs.open(file1)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_20 $$ fis = hdfs.open(file1snap1)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_9 $$ DFSTestUtil.createFile(hdfs, file1, BLOCKSIZE, REPLICATION, SEED)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_8 $$ Path file1 = new Path(sub, file1Name)[ CD ]
Line_19 $$ Path file1snap1 = SnapshotTestHelper.getSnapshotPath(sub, snapshot1, file1Name)-->Line_20 $$ fis = hdfs.open(file1snap1)[ FD ]
Line_4 $$ FileStatus fileStatus = null-->Line_21 $$ fileStatus = hdfs.getFileStatus(file1snap1)[ FD ]
Line_3 $$ FSDataInputStream fis = null-->Line_25 $$ fis.close()[ FD ]
Line_31 $$ FsShell shell = new FsShell()-->Line_33 $$ ToolRunner.run(conf, shell, new String[] [ FD ]
Line_13 $$ fileStatus = hdfs.getFileStatus(file1)-->Line_14 $$ assertEquals("Unexpected file length", BLOCKSIZE * 2, fileStatus.getLen())[ FD ]
Line_15 $$ fis = hdfs.open(file1)-->Line_25 $$ fis.close()[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_13 $$ fileStatus = hdfs.getFileStatus(file1)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_24 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE, bytesRead)[ CD ]
Line_5 $$ int bytesRead-->Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_7 $$ hdfs.mkdirs(sub)[ CD ]
Line_15 $$ fis = hdfs.open(file1)-->Line_18 $$ fis.close()[ FD ]
Line_3 $$ FSDataInputStream fis = null-->Line_18 $$ fis.close()[ FD ]
Line_5 $$ int bytesRead-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_11 $$ hdfs.createSnapshot(sub, snapshot1)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_27 $$ PrintStream errBackup = System.err[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_14 $$ assertEquals("Unexpected file length", BLOCKSIZE * 2, fileStatus.getLen())[ CD ]
Line_6 $$ byte[] buffer = new byte[BLOCKSIZE * 8]-->Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)-->Line_24 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE, bytesRead)[ FD ]
Line_26 $$ PrintStream outBackup = System.out-->Line_36 $$ System.setOut(outBackup)[ FD ]
Line_4 $$ FileStatus fileStatus = null-->Line_14 $$ assertEquals("Unexpected file length", BLOCKSIZE * 2, fileStatus.getLen())[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_30 $$ System.setErr(new PrintStream(bao))[ CD ]
Line_27 $$ PrintStream errBackup = System.err-->Line_37 $$ System.setErr(errBackup)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_28 $$ ByteArrayOutputStream bao = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_10 $$ hdfs.allowSnapshot(sub)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_5 $$ int bytesRead[ CD ]
Line_20 $$ fis = hdfs.open(file1snap1)-->Line_25 $$ fis.close()[ FD ]
Line_13 $$ fileStatus = hdfs.getFileStatus(file1)-->Line_21 $$ fileStatus = hdfs.getFileStatus(file1snap1)[ FD ]
Line_21 $$ fileStatus = hdfs.getFileStatus(file1snap1)-->Line_22 $$ assertEquals(fileStatus.getLen(), BLOCKSIZE)[ FD ]
Line_5 $$ int bytesRead-->Line_24 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE, bytesRead)[ FD ]
Line_19 $$ Path file1snap1 = SnapshotTestHelper.getSnapshotPath(sub, snapshot1, file1Name)-->Line_21 $$ fileStatus = hdfs.getFileStatus(file1snap1)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_19 $$ Path file1snap1 = SnapshotTestHelper.getSnapshotPath(sub, snapshot1, file1Name)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_4 $$ FileStatus fileStatus = null[ CD ]
Line_8 $$ Path file1 = new Path(sub, file1Name)-->Line_13 $$ fileStatus = hdfs.getFileStatus(file1)[ FD ]
Line_5 $$ int bytesRead-->Line_17 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE * 2, bytesRead)[ FD ]
Line_3 $$ FSDataInputStream fis = null-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_15 $$ fis = hdfs.open(file1)-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_29 $$ System.setOut(new PrintStream(bao))[ CD ]
Line_20 $$ fis = hdfs.open(file1snap1)-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_28 $$ ByteArrayOutputStream bao = new ByteArrayOutputStream()-->Line_34 $$ assertEquals("Unexpected # bytes from -cat", BLOCKSIZE, bao.size())[ FD ]
Line_4 $$ FileStatus fileStatus = null-->Line_22 $$ assertEquals(fileStatus.getLen(), BLOCKSIZE)[ FD ]
Line_6 $$ byte[] buffer = new byte[BLOCKSIZE * 8]-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_18 $$ fis.close()[ CD ]
Line_16 $$ bytesRead = fis.read(buffer, 0, buffer.length)-->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ FD ]
Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)-->Line_24 $$ assertEquals("Unexpected # bytes read", BLOCKSIZE, bytesRead)[ FD ]
Line_15 $$ fis = hdfs.open(file1)-->Line_20 $$ fis = hdfs.open(file1snap1)[ FD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_12 $$ DFSTestUtil.appendFile(hdfs, file1, BLOCKSIZE)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_6 $$ byte[] buffer = new byte[BLOCKSIZE * 8][ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_21 $$ fileStatus = hdfs.getFileStatus(file1snap1)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_23 $$ bytesRead = fis.read(buffer, 0, buffer.length)[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_31 $$ FsShell shell = new FsShell()[ CD ]
Line_2 $$ public void testSnapshotFileLengthWithCatCommand() throws Exception -->Line_3 $$ FSDataInputStream fis = null[ CD ]
