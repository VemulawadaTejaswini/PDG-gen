Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_32 $$ while (strToken.hasMoreTokens()) [ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_37 $$ Assert.assertEquals("JobName does not match", "test", jobSummaryElements.get("jobName"))[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_104 $$ AMInfo amInfo = jobInfo.getAMInfos().get(0)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_106 $$ Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_8 $$ MRApp app = new MRAppWithHistory(numMaps, numReduces, true, this.getClass().getName(), true)[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_43 $$ Assert.assertEquals("Mismatch in num map slots", numSuccessfulMaps, Integer.parseInt(jobSummaryElements.get("numMaps")))[ FD ]
Line_74 $$ if (event instanceof TaskFinishedEvent) -->Line_75 $$ numFinishedEvents.incrementAndGet()[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_40 $$ Assert.assertTrue("firstMapTaskLaunchTime should not be 0", Long.parseLong(jobSummaryElements.get("firstMapTaskLaunchTime")) != 0)[ FD ]
Line_56 $$ FSDataInputStream in = null-->Line_59 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_31 $$ StringTokenizer strToken = new StringTokenizer(jobSummaryString, ",")[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_97 $$ Assert.assertEquals("incorrect finishedReduces ", numReduces, jobInfo.getFinishedReduces())[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_93 $$ Assert.assertEquals("Incorrect jobName ", "test", jobInfo.getJobname())[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_38 $$ Assert.assertTrue("submitTime should not be 0", Long.parseLong(jobSummaryElements.get("submitTime")) != 0)[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_98 $$ Assert.assertEquals("incorrect uberized ", job.isUber(), jobInfo.getUberized())[ FD ]
Line_125 $$ if (numMaps == numSuccessfulMaps) -->Line_127 $$ Assert.assertEquals(MRApp.NM_PORT, taskAttemptInfo.getPort())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_11 $$ JobId jobId = job.getID()[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_15 $$ String jobhistoryDir = JobHistoryUtils.getHistoryIntermediateDoneDirForUser(conf)[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_36 $$ Assert.assertEquals("JobId does not match", jobId.toString(), jobSummaryElements.get("jobId"))[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_37 $$ Assert.assertEquals("JobName does not match", "test", jobSummaryElements.get("jobName"))[ FD ]
Line_64 $$ JobHistoryParser parser = new JobHistoryParser(in)-->Line_85 $$ jobInfo = parser.parse(reader)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)-->Line_28 $$ Assert.assertTrue(jobSummaryString.contains("resourcesPerMap=100"))[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_46 $$ Assert.assertEquals("Queue does not match", "default", jobSummaryElements.get("queue"))[ CD ]
Line_70 $$ final AtomicInteger numFinishedEvents = new AtomicInteger(0)-->Line_77 $$ if (numFinishedEvents.get() <= numSuccessfulMaps) [ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_27 $$ Assert.assertNotNull(jobSummaryString)[ CD ]
Line_87 $$ if (numFinishedMaps != numMaps) -->Line_88 $$ Exception parseException = parser.getParseException()[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_99 $$ Map<TaskID, TaskInfo> allTasks = jobInfo.getAllTasks()[ CD ]
Line_55 $$ Path historyFilePath = fileInfo.getHistoryFile()-->Line_59 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_7 $$ RackResolver.init(conf)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_43 $$ Assert.assertEquals("Mismatch in num map slots", numSuccessfulMaps, Integer.parseInt(jobSummaryElements.get("numMaps")))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_96 $$ Assert.assertEquals("incorrect finishedMap ", numSuccessfulMaps, numFinishedMaps)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_97 $$ Assert.assertEquals("incorrect finishedReduces ", numReduces, jobInfo.getFinishedReduces())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_125 $$ if (numMaps == numSuccessfulMaps) [ FD ]
Line_53 $$ long numFinishedMaps-->Line_87 $$ if (numFinishedMaps != numMaps) [ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_77 $$ if (numFinishedEvents.get() <= numSuccessfulMaps) [ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_50 $$ jobHistory.init(conf)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_107 $$ Assert.assertEquals(1, amInfo.getAppAttemptId().getAttemptId())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_98 $$ Assert.assertEquals("incorrect uberized ", job.isUber(), jobInfo.getUberized())[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_39 $$ Assert.assertTrue("launchTime should not be 0", Long.parseLong(jobSummaryElements.get("launchTime")) != 0)[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_29 $$ Assert.assertTrue(jobSummaryString.contains("resourcesPerReduce=100"))[ CD ]
Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)-->Line_27 $$ Assert.assertNotNull(jobSummaryString)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_42 $$ Assert.assertTrue("finishTime should not be 0", Long.parseLong(jobSummaryElements.get("finishTime")) != 0)[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_99 $$ Map<TaskID, TaskInfo> allTasks = jobInfo.getAllTasks()[ FD ]
Line_64 $$ JobHistoryParser parser = new JobHistoryParser(in)-->Line_88 $$ Exception parseException = parser.getParseException()[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_110 $$ ContainerId fakeCid = MRApp.newContainerId(-1, -1, -1, -1)[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_38 $$ Assert.assertTrue("submitTime should not be 0", Long.parseLong(jobSummaryElements.get("submitTime")) != 0)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_4 $$ conf.set(MRJobConfig.USER_NAME, System.getProperty("user.name"))[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ RackResolver.init(conf)[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_86 $$ numFinishedMaps = computeFinishedMaps(jobInfo, numMaps, numSuccessfulMaps)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_86 $$ numFinishedMaps = computeFinishedMaps(jobInfo, numMaps, numSuccessfulMaps)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_12 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_24 $$ String summaryFileName = JobHistoryUtils.getIntermediateSummaryFileName(jobId)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_95 $$ Assert.assertEquals("incorrect conf path", "test", jobInfo.getJobConfPath())[ CD ]
Line_66 $$ EventReader reader = Mockito.mock(EventReader.class)-->Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() [ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_118 $$ for (Task task : job.getTasks().values()) [ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_18 $$ fc = FileContext.getFileContext(conf)[ FD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_39 $$ Assert.assertTrue("launchTime should not be 0", Long.parseLong(jobSummaryElements.get("launchTime")) != 0)[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_47 $$ Assert.assertEquals("Status does not match", "SUCCEEDED", jobSummaryElements.get("status"))[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_41 $$ Assert.assertTrue("firstReduceTaskLaunchTime should not be 0", Long.parseLong(jobSummaryElements.get("firstReduceTaskLaunchTime")) != 0)[ CD ]
Line_32 $$ while (strToken.hasMoreTokens()) -->Line_34 $$ jobSummaryElements.put(keypair.split("=")[0], keypair.split("=")[1])[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_42 $$ Assert.assertTrue("finishTime should not be 0", Long.parseLong(jobSummaryElements.get("finishTime")) != 0)[ CD ]
Line_8 $$ MRApp app = new MRAppWithHistory(numMaps, numReduces, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_51 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)-->Line_55 $$ Path historyFilePath = fileInfo.getHistoryFile()[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_102 $$ Assert.assertEquals(1, jobInfo.getAMInfos().size())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_16 $$ FileContext fc = null[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_25 $$ Path summaryFile = new Path(jobhistoryDir, summaryFileName)[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_28 $$ Assert.assertTrue(jobSummaryString.contains("resourcesPerMap=100"))[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_92 $$ Assert.assertEquals("Incorrect username ", System.getProperty("user.name"), jobInfo.getUsername())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_108 $$ Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId().getApplicationAttemptId())[ CD ]
Line_11 $$ JobId jobId = job.getID()-->Line_24 $$ String summaryFileName = JobHistoryUtils.getIntermediateSummaryFileName(jobId)[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_94 $$ Assert.assertEquals("Incorrect queuename ", "default", jobInfo.getJobQueueName())[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_49 $$ JobHistory jobHistory = new JobHistory()[ CD ]
Line_65 $$ final EventReader realReader = new EventReader(in)-->Line_73 $$ HistoryEvent event = realReader.getNextEvent()[ FD ]
Line_31 $$ StringTokenizer strToken = new StringTokenizer(jobSummaryString, ",")-->Line_33 $$ String keypair = strToken.nextToken()[ FD ]
Line_67 $$ if (numMaps == numSuccessfulMaps) -->Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() [ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_45 $$ Assert.assertEquals("User does not match", System.getProperty("user.name"), jobSummaryElements.get("user"))[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_52 $$ JobInfo jobInfo[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_67 $$ if (numMaps == numSuccessfulMaps) [ FD ]
Line_53 $$ long numFinishedMaps-->Line_96 $$ Assert.assertEquals("incorrect finishedMap ", numSuccessfulMaps, numFinishedMaps)[ FD ]
Line_18 $$ fc = FileContext.getFileContext(conf)-->Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)[ FD ]
Line_67 $$ if (numMaps == numSuccessfulMaps) -->Line_70 $$ final AtomicInteger numFinishedEvents = new AtomicInteger(0)[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_44 $$ Assert.assertEquals("Mismatch in num reduce slots", numReduces, Integer.parseInt(jobSummaryElements.get("numReduces")))[ CD ]
Line_8 $$ MRApp app = new MRAppWithHistory(numMaps, numReduces, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_95 $$ Assert.assertEquals("incorrect conf path", "test", jobInfo.getJobConfPath())[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ CD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_109 $$ Assert.assertTrue(amInfo.getStartTime() <= System.currentTimeMillis() && amInfo.getStartTime() >= amStartTimeEst)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_105 $$ Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort())[ CD ]
Line_52 $$ JobInfo jobInfo-->Line_104 $$ AMInfo amInfo = jobInfo.getAMInfos().get(0)[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_43 $$ Assert.assertEquals("Mismatch in num map slots", numSuccessfulMaps, Integer.parseInt(jobSummaryElements.get("numMaps")))[ CD ]
Line_70 $$ final AtomicInteger numFinishedEvents = new AtomicInteger(0)-->Line_75 $$ numFinishedEvents.incrementAndGet()[ FD ]
Line_67 $$ if (numMaps == numSuccessfulMaps) -->Line_68 $$ reader = realReader[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_41 $$ Assert.assertTrue("firstReduceTaskLaunchTime should not be 0", Long.parseLong(jobSummaryElements.get("firstReduceTaskLaunchTime")) != 0)[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_97 $$ Assert.assertEquals("incorrect finishedReduces ", numReduces, jobInfo.getFinishedReduces())[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(numMaps, numReduces, true, this.getClass().getName(), true)-->Line_14 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_66 $$ EventReader reader = Mockito.mock(EventReader.class)-->Line_85 $$ jobInfo = parser.parse(reader)[ FD ]
Line_33 $$ String keypair = strToken.nextToken()-->Line_34 $$ jobSummaryElements.put(keypair.split("=")[0], keypair.split("=")[1])[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(numMaps, numReduces, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(conf)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_101 $$ Assert.assertEquals("total number of tasks is incorrect  ", (numMaps + numReduces), totalTasks)[ CD ]
Line_31 $$ StringTokenizer strToken = new StringTokenizer(jobSummaryString, ",")-->Line_32 $$ while (strToken.hasMoreTokens()) [ FD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_46 $$ Assert.assertEquals("Queue does not match", "default", jobSummaryElements.get("queue"))[ FD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)[ CD ]
Line_49 $$ JobHistory jobHistory = new JobHistory()-->Line_51 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_9 $$ app.submit(conf)[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_51 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ CD ]
Line_16 $$ FileContext fc = null-->Line_59 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_100 $$ int totalTasks = allTasks.size()[ CD ]
Line_11 $$ JobId jobId = job.getID()-->Line_36 $$ Assert.assertEquals("JobId does not match", jobId.toString(), jobSummaryElements.get("jobId"))[ FD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_34 $$ jobSummaryElements.put(keypair.split("=")[0], keypair.split("=")[1])[ FD ]
Line_87 $$ if (numFinishedMaps != numMaps) -->Line_89 $$ Assert.assertNotNull("Didn't get expected parse exception", parseException)[ CD ]
Line_52 $$ JobInfo jobInfo-->Line_102 $$ Assert.assertEquals(1, jobInfo.getAMInfos().size())[ FD ]
Line_77 $$ if (numFinishedEvents.get() <= numSuccessfulMaps) -->Line_78 $$ return event[ CD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_49 $$ JobHistory jobHistory = new JobHistory()-->Line_50 $$ jobHistory.init(conf)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_103 $$ Assert.assertEquals(MRApp.NM_HOST, jobInfo.getAMInfos().get(0).getNodeManagerHost())[ CD ]
Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() -->Line_73 $$ HistoryEvent event = realReader.getNextEvent()[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_47 $$ Assert.assertEquals("Status does not match", "SUCCEEDED", jobSummaryElements.get("status"))[ FD ]
Line_18 $$ fc = FileContext.getFileContext(conf)-->Line_59 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_14 $$ app.waitForState(Service.STATE.STOPPED)[ CD ]
Line_52 $$ JobInfo jobInfo-->Line_93 $$ Assert.assertEquals("Incorrect jobName ", "test", jobInfo.getJobname())[ FD ]
Line_66 $$ EventReader reader = Mockito.mock(EventReader.class)-->Line_68 $$ reader = realReader[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_68 $$ reader = realReader-->Line_85 $$ jobInfo = parser.parse(reader)[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_103 $$ Assert.assertEquals(MRApp.NM_HOST, jobInfo.getAMInfos().get(0).getNodeManagerHost())[ FD ]
Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() -->Line_77 $$ if (numFinishedEvents.get() <= numSuccessfulMaps) [ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_23 $$ if (numMaps == numSuccessfulMaps) [ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_87 $$ if (numFinishedMaps != numMaps) [ FD ]
Line_125 $$ if (numMaps == numSuccessfulMaps) -->Line_126 $$ Assert.assertEquals(MRApp.NM_HOST, taskAttemptInfo.getHostname())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_5 $$ long amStartTimeEst = System.currentTimeMillis()[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_23 $$ if (numMaps == numSuccessfulMaps) [ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_45 $$ Assert.assertEquals("User does not match", System.getProperty("user.name"), jobSummaryElements.get("user"))[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_51 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
Line_51 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)-->Line_137 $$ viewer = new HistoryViewer(fc.makeQualified(fileInfo.getHistoryFile()).toString(), conf, true)[ FD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_44 $$ Assert.assertEquals("Mismatch in num reduce slots", numReduces, Integer.parseInt(jobSummaryElements.get("numReduces")))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_15 $$ String jobhistoryDir = JobHistoryUtils.getHistoryIntermediateDoneDirForUser(conf)[ FD ]
Line_18 $$ fc = FileContext.getFileContext(conf)-->Line_137 $$ viewer = new HistoryViewer(fc.makeQualified(fileInfo.getHistoryFile()).toString(), conf, true)[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_50 $$ jobHistory.init(conf)[ CD ]
Line_125 $$ if (numMaps == numSuccessfulMaps) -->Line_128 $$ Assert.assertEquals("rack-name is incorrect", taskAttemptInfo.getRackname(), RACK_NAME)[ CD ]
Line_30 $$ Map<String, String> jobSummaryElements = new HashMap<String, String>()-->Line_36 $$ Assert.assertEquals("JobId does not match", jobId.toString(), jobSummaryElements.get("jobId"))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_94 $$ Assert.assertEquals("Incorrect queuename ", "default", jobInfo.getJobQueueName())[ CD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_44 $$ Assert.assertEquals("Mismatch in num reduce slots", numReduces, Integer.parseInt(jobSummaryElements.get("numReduces")))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ CD ]
Line_32 $$ while (strToken.hasMoreTokens()) -->Line_33 $$ String keypair = strToken.nextToken()[ CD ]
Line_23 $$ if (numMaps == numSuccessfulMaps) -->Line_40 $$ Assert.assertTrue("firstMapTaskLaunchTime should not be 0", Long.parseLong(jobSummaryElements.get("firstMapTaskLaunchTime")) != 0)[ CD ]
Line_25 $$ Path summaryFile = new Path(jobhistoryDir, summaryFileName)-->Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)[ FD ]
Line_65 $$ final EventReader realReader = new EventReader(in)-->Line_68 $$ reader = realReader[ FD ]
Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)-->Line_29 $$ Assert.assertTrue(jobSummaryString.contains("resourcesPerReduce=100"))[ FD ]
Line_52 $$ JobInfo jobInfo-->Line_98 $$ Assert.assertEquals("incorrect uberized ", job.isUber(), jobInfo.getUberized())[ FD ]
Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() -->Line_74 $$ if (event instanceof TaskFinishedEvent) [ CD ]
Line_52 $$ JobInfo jobInfo-->Line_92 $$ Assert.assertEquals("Incorrect username ", System.getProperty("user.name"), jobInfo.getUsername())[ FD ]
Line_16 $$ FileContext fc = null-->Line_26 $$ String jobSummaryString = getJobSummary(fc, summaryFile)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_9 $$ app.submit(conf)[ FD ]
Line_16 $$ FileContext fc = null-->Line_137 $$ viewer = new HistoryViewer(fc.makeQualified(fileInfo.getHistoryFile()).toString(), conf, true)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(MRJobConfig.USER_NAME, System.getProperty("user.name"))[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_53 $$ long numFinishedMaps[ CD ]
Line_68 $$ reader = realReader-->Line_71 $$ Mockito.when(reader.getNextEvent()).thenAnswer(new Answer<HistoryEvent>() [ FD ]
Line_73 $$ HistoryEvent event = realReader.getNextEvent()-->Line_74 $$ if (event instanceof TaskFinishedEvent) [ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_12 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_2 $$ private void checkHistoryParsing(final int numMaps, final int numReduces, final int numSuccessfulMaps) throws Exception -->Line_96 $$ Assert.assertEquals("incorrect finishedMap ", numSuccessfulMaps, numFinishedMaps)[ CD ]
Line_16 $$ FileContext fc = null-->Line_18 $$ fc = FileContext.getFileContext(conf)[ FD ]
