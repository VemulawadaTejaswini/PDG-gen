Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_108 $$ mkdir(fs, myPath)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_86 $$ writeFile(trashRootFs, toErase, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_86 $$ writeFile(trashRootFs, toErase, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_8 $$ FsShell shell = new FsShell()[ CD ]
Line_157 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_207 $$ int count = countSameDeletedFiles(fs, trashDir, myFile)[ CD ]
Line_21 $$ String[] args = new String[1]-->Line_101 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_209 $$ assertTrue(count == num_runs)[ CD ]
Line_14 $$ trashRootFs = fs-->Line_132 $$ checkTrash(trashRootFs, trashRoot, myPath)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_64 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_22 $$ args[0] = "-expunge"[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_163 $$ assertFalse(fs.exists(myFile))[ FD ]
Line_14 $$ trashRootFs = fs-->Line_247 $$ assertTrue("old checkpoint format directory should not be removed", trashRootFs.exists(dirToKeep))[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_166 $$ mkdir(fs, myPath)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_175 $$ assertEquals(0, shell.run(new String[] [ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_74 $$ args[1] = new Path(base, "test/mkdirs").toString()[ CD ]
Line_101 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_197 $$ writeFile(fs, myFile, 10)[ FD ]
Line_25 $$ val = shell.run(args)-->Line_51 $$ val = shell.run(args)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ FD ]
Line_64 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_147 $$ mkdir(fs, myPath)[ FD ]
Line_196 $$ for (int i = 0; i < num_runs; i++) -->Line_203 $$ assertTrue(val == 0)[ CD ]
Line_140 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_51 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_189 $$ assertEquals(0, shell.run(new String[] [ FD ]
Line_64 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_101 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_241 $$ rc = shell.run(new String[] [ FD ]
Line_14 $$ trashRootFs = fs-->Line_238 $$ mkdir(trashRootFs, dirToKeep)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_167 $$ writeFile(fs, myFile, 10)[ FD ]
Line_140 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_226 $$ String output = byteStream.toString()-->Line_229 $$ assertTrue("skipTrash wasn't suggested as remedy to failed rm command" + " or we deleted / even though we could not get server defaults", output.indexOf("Consider using -skipTrash option") != -1 || output.indexOf("Failed to determine server trash configuration") != -1)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_197 $$ writeFile(fs, myFile, 10)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_34 $$ args[1] = myFile.toString()[ CD ]
Line_14 $$ trashRootFs = fs-->Line_93 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString())[ FD ]
Line_101 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_11 $$ trashRoot = shell.getCurrentTrashDir()[ FD ]
Line_125 $$ val = -1-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_4 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 0)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_180 $$ assertFalse(trashRootFs.exists(trashRoot))[ FD ]
Line_37 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_101 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_35 $$ int val = -1[ CD ]
Line_77 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_123 $$ args[0] = "-rmr"[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_226 $$ String output = byteStream.toString()[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_182 $$ assertFalse(fs.exists(myFile))[ FD ]
Line_140 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_93 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString())[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_161 $$ assertFalse("Expected TrashRoot (" + trashRoot + ") to exist in file system:" + trashRootFs.getUri(), trashRootFs.exists(trashRoot))[ FD ]
Line_37 $$ val = shell.run(args)-->Line_51 $$ val = shell.run(args)[ FD ]
Line_239 $$ int rc = -1-->Line_241 $$ rc = shell.run(new String[] [ FD ]
Line_23 $$ int val = -1-->Line_140 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_232 $$ long trashInterval = conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT)[ CD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_166 $$ mkdir(fs, myPath)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_147 $$ mkdir(fs, myPath)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_219 $$ System.setOut(newOut)[ CD ]
Line_176 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_140 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_44 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_108 $$ mkdir(fs, myPath)[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_127 $$ val = shell.run(args)[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_17 $$ mkdir(fs, myPath)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_145 $$ assertTrue(trashRootFs.exists(trashRoot))[ FD ]
Line_25 $$ val = shell.run(args)-->Line_37 $$ val = shell.run(args)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_207 $$ int count = countSameDeletedFiles(fs, trashDir, myFile)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_207 $$ int count = countSameDeletedFiles(fs, trashDir, myFile)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_222 $$ shell.run(args)[ FD ]
Line_101 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))-->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_187 $$ mkdir(fs, myPath)[ FD ]
Line_23 $$ int val = -1-->Line_25 $$ val = shell.run(args)[ FD ]
Line_64 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_154 $$ int val = -1[ CD ]
Line_23 $$ int val = -1-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_167 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_246 $$ assertFalse("old checkpoint format not recognized", trashRootFs.exists(dirToDelete))[ CD ]
Line_13 $$ if (trashRootFs == null) -->Line_14 $$ trashRootFs = fs[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_140 $$ val = shell.run(args)[ FD ]
Line_101 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_64 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_187 $$ mkdir(fs, myPath)[ CD ]
Line_14 $$ trashRootFs = fs-->Line_237 $$ mkdir(trashRootFs, dirToDelete)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_10 $$ if (trashRoot == null) [ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_132 $$ checkTrash(trashRootFs, trashRoot, myPath)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_70 $$ mkdir(fs, myPath)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_247 $$ assertTrue("old checkpoint format directory should not be removed", trashRootFs.exists(dirToKeep))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_217 $$ ByteArrayOutputStream byteStream = new ByteArrayOutputStream()[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_156 $$ assertEquals("-expunge failed", 0, shell.run(new String[] [ FD ]
Line_125 $$ val = -1-->Line_127 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_121 $$ checkTrash(trashRootFs, trashRoot, myFile)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_197 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_238 $$ mkdir(trashRootFs, dirToKeep)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_107 $$ checkNotInTrash(trashRootFs, trashRoot, new Path(base, "test/mkdirs/myFile").toString())[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_166 $$ mkdir(fs, myPath)[ CD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_161 $$ assertFalse("Expected TrashRoot (" + trashRoot + ") to exist in file system:" + trashRootFs.getUri(), trashRootFs.exists(trashRoot))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_194 $$ String[] args = new String[] [ FD ]
Line_116 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_98 $$ args[0] = "-expunge"[ CD ]
Line_122 $$ args = new String[2]-->Line_127 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_9 $$ shell.setConf(conf)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_247 $$ assertTrue("old checkpoint format directory should not be removed", trashRootFs.exists(dirToKeep))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_131 $$ assertTrue(val == 0)[ CD ]
Line_234 $$ DateFormat oldCheckpointFormat = new SimpleDateFormat("yyMMddHHmm")-->Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))[ FD ]
Line_125 $$ val = -1-->Line_199 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_57 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_239 $$ int rc = -1[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_122 $$ args = new String[2][ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_215 $$ PrintStream stdout = System.out[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_232 $$ long trashInterval = conf.getLong(FS_TRASH_INTERVAL_KEY, FS_TRASH_INTERVAL_DEFAULT)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_199 $$ val = shell.run(args)[ FD ]
Line_23 $$ int val = -1-->Line_51 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_145 $$ assertTrue(trashRootFs.exists(trashRoot))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_137 $$ args[1] = trashRoot.getParent().getParent().toString()[ FD ]
Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))-->Line_207 $$ int count = countSameDeletedFiles(fs, trashDir, myFile)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_5 $$ assertFalse(new Trash(conf).isEnabled())[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_180 $$ assertFalse(trashRootFs.exists(trashRoot))[ CD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_113 $$ args[1] = myFile.toString()[ FD ]
Line_25 $$ val = shell.run(args)-->Line_77 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_138 $$ int val = -1[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_145 $$ assertTrue(trashRootFs.exists(trashRoot))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_132 $$ checkTrash(trashRootFs, trashRoot, myPath)[ CD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_137 $$ args[1] = trashRoot.getParent().getParent().toString()[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_44 $$ writeFile(fs, myFile, 10)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_14 $$ trashRootFs = fs[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_64 $$ val = shell.run(args)[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_181 $$ assertFalse(fs.exists(myPath))[ FD ]
Line_84 $$ Path toErase = new Path(trashRoot, "toErase")-->Line_94 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString() + ".1")[ FD ]
Line_14 $$ trashRootFs = fs-->Line_121 $$ checkTrash(trashRootFs, trashRoot, myFile)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_132 $$ checkTrash(trashRootFs, trashRoot, myPath)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_6 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 10)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_25 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_237 $$ mkdir(trashRootFs, dirToDelete)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_222 $$ shell.run(args)[ FD ]
Line_116 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_195 $$ int num_runs = 10-->Line_196 $$ for (int i = 0; i < num_runs; i++) [ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_62 $$ int val = -1[ CD ]
Line_23 $$ int val = -1-->Line_37 $$ val = shell.run(args)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))[ FD ]
Line_64 $$ val = shell.run(args)-->Line_101 $$ val = shell.run(args)[ FD ]
Line_77 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_116 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_13 $$ if (trashRootFs == null) [ FD ]
Line_23 $$ int val = -1-->Line_125 $$ val = -1[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_21 $$ String[] args = new String[1][ CD ]
Line_64 $$ val = shell.run(args)-->Line_77 $$ val = shell.run(args)[ FD ]
Line_127 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_6 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 10)[ CD ]
Line_25 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_77 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_64 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_122 $$ args = new String[2]-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_49 $$ int val = -1[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_73 $$ args[0] = "-rmr"[ CD ]
Line_25 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))-->Line_237 $$ mkdir(trashRootFs, dirToDelete)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_10 $$ if (trashRoot == null) [ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_233 $$ long now = Time.now()[ CD ]
Line_84 $$ Path toErase = new Path(trashRoot, "toErase")-->Line_93 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString())[ FD ]
Line_116 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_19 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_57 $$ writeFile(fs, myFile, 10)[ CD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_70 $$ mkdir(fs, myPath)[ FD ]
Line_23 $$ int val = -1-->Line_101 $$ val = shell.run(args)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_107 $$ checkNotInTrash(trashRootFs, trashRoot, new Path(base, "test/mkdirs/myFile").toString())[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_208 $$ System.out.println("counted " + count + " files " + myFile.getName() + "* in " + trashDir)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_122 $$ args = new String[2][ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_218 $$ PrintStream newOut = new PrintStream(byteStream)[ CD ]
Line_51 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_94 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString() + ".1")[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_114 $$ int val = -1[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_213 $$ args[0] = "-rmr"[ CD ]
Line_21 $$ String[] args = new String[1]-->Line_25 $$ val = shell.run(args)[ FD ]
Line_23 $$ int val = -1-->Line_64 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_55 $$ assertTrue(val == 0)[ CD ]
Line_25 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_77 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_229 $$ assertTrue("skipTrash wasn't suggested as remedy to failed rm command" + " or we deleted / even though we could not get server defaults", output.indexOf("Consider using -skipTrash option") != -1 || output.indexOf("Failed to determine server trash configuration") != -1)[ CD ]
Line_85 $$ int retVal = -1-->Line_88 $$ retVal = shell.run(new String[] [ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_161 $$ assertFalse("Expected TrashRoot (" + trashRoot + ") to exist in file system:" + trashRootFs.getUri(), trashRootFs.exists(trashRoot))[ CD ]
Line_116 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_94 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString() + ".1")[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_108 $$ mkdir(fs, myPath)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_145 $$ assertTrue(trashRootFs.exists(trashRoot))[ FD ]
Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))-->Line_247 $$ assertTrue("old checkpoint format directory should not be removed", trashRootFs.exists(dirToKeep))[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_19 $$ writeFile(fs, myFile, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_121 $$ checkTrash(trashRootFs, trashRoot, myFile)[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_116 $$ val = shell.run(args)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_207 $$ int count = countSameDeletedFiles(fs, trashDir, myFile)[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_51 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_109 $$ writeFile(fs, myFile, 10)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_180 $$ assertFalse(trashRootFs.exists(trashRoot))[ FD ]
Line_77 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_19 $$ writeFile(fs, myFile, 10)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_94 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString() + ".1")[ CD ]
Line_21 $$ String[] args = new String[1]-->Line_127 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_41 $$ assertTrue(val == 0)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_92 $$ assertTrue(retVal == 0)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_238 $$ mkdir(trashRootFs, dirToKeep)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_125 $$ val = -1[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_37 $$ val = shell.run(args)[ FD ]
Line_125 $$ val = -1-->Line_140 $$ val = shell.run(args)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_47 $$ args[0] = "-rm"[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_171 $$ args[1] = "-skipTrash"[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_68 $$ assertTrue(val == 0)[ CD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_182 $$ assertFalse(fs.exists(myFile))[ FD ]
Line_116 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_217 $$ ByteArrayOutputStream byteStream = new ByteArrayOutputStream()-->Line_226 $$ String output = byteStream.toString()[ FD ]
Line_77 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_51 $$ val = shell.run(args)[ FD ]
Line_234 $$ DateFormat oldCheckpointFormat = new SimpleDateFormat("yyMMddHHmm")-->Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))[ FD ]
Line_127 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_208 $$ System.out.println("counted " + count + " files " + myFile.getName() + "* in " + trashDir)[ CD ]
Line_51 $$ val = shell.run(args)-->Line_64 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_173 $$ int val = -1[ CD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))[ FD ]
Line_218 $$ PrintStream newOut = new PrintStream(byteStream)-->Line_219 $$ System.setOut(newOut)[ FD ]
Line_25 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_127 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_246 $$ assertFalse("old checkpoint format not recognized", trashRootFs.exists(dirToDelete))[ FD ]
Line_37 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_163 $$ assertFalse(fs.exists(myFile))[ CD ]
Line_21 $$ String[] args = new String[1]-->Line_37 $$ val = shell.run(args)[ FD ]
Line_64 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_23 $$ int val = -1[ CD ]
Line_101 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))[ FD ]
Line_241 $$ rc = shell.run(new String[] -->Line_245 $$ assertEquals(0, rc)[ FD ]
Line_157 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_42 $$ checkTrash(trashRootFs, trashRoot, fs.makeQualified(myFile))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_84 $$ Path toErase = new Path(trashRoot, "toErase")[ CD ]
Line_51 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_183 $$ assertTrue(val == 0)[ CD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_208 $$ System.out.println("counted " + count + " files " + myFile.getName() + "* in " + trashDir)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_124 $$ args[1] = myPath.toString()[ CD ]
Line_127 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_51 $$ val = shell.run(args)-->Line_127 $$ val = shell.run(args)[ FD ]
Line_10 $$ if (trashRoot == null) -->Line_11 $$ trashRoot = shell.getCurrentTrashDir()[ CD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_107 $$ checkNotInTrash(trashRootFs, trashRoot, new Path(base, "test/mkdirs/myFile").toString())[ FD ]
Line_23 $$ int val = -1-->Line_116 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_33 $$ args[0] = "-rm"[ CD ]
Line_23 $$ int val = -1-->Line_176 $$ val = shell.run(args)[ FD ]
Line_51 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_4 $$ conf.setLong(FS_TRASH_INTERVAL_KEY, 0)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_136 $$ args[0] = "-rmr"[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_16 $$ Path myPath = new Path(base, "test/mkdirs")[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_9 $$ shell.setConf(conf)[ CD ]
Line_125 $$ val = -1-->Line_157 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_163 $$ assertFalse(fs.exists(myFile))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_93 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString())[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_88 $$ retVal = shell.run(new String[] [ FD ]
Line_101 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_64 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_167 $$ writeFile(fs, myFile, 10)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_109 $$ writeFile(fs, myFile, 10)[ CD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_121 $$ checkTrash(trashRootFs, trashRoot, myFile)[ FD ]
Line_25 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_196 $$ for (int i = 0; i < num_runs; i++) [ CD ]
Line_77 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_14 $$ trashRootFs = fs[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_101 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_3 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_84 $$ Path toErase = new Path(trashRoot, "toErase")-->Line_88 $$ retVal = shell.run(new String[] [ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_228 $$ System.setErr(stderr)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_120 $$ assertTrue(val == 0)[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_77 $$ val = shell.run(args)[ FD ]
Line_51 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_34 $$ args[1] = myFile.toString()[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_48 $$ args[1] = new Path(base, "test/mkdirs/myFile").toString()[ CD ]
Line_25 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_153 $$ args[2] = myFile.toString()[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_17 $$ mkdir(fs, myPath)[ CD ]
Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))-->Line_238 $$ mkdir(trashRootFs, dirToKeep)[ FD ]
Line_196 $$ for (int i = 0; i < num_runs; i++) -->Line_197 $$ writeFile(fs, myFile, 10)[ CD ]
Line_127 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_122 $$ args = new String[2]-->Line_140 $$ val = shell.run(args)[ FD ]
Line_215 $$ PrintStream stdout = System.out-->Line_227 $$ System.setOut(stdout)[ FD ]
Line_51 $$ val = shell.run(args)-->Line_77 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_214 $$ args[1] = "/"[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_147 $$ mkdir(fs, myPath)[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_124 $$ args[1] = myPath.toString()[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_153 $$ args[2] = myFile.toString()[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_227 $$ System.setOut(stdout)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_205 $$ Path trashDir = Path.mergePaths(new Path(trashRoot.toUri().getPath()), new Path(myFile.getParent().toUri().getPath()))[ CD ]
Line_216 $$ PrintStream stderr = System.err-->Line_228 $$ System.setErr(stderr)[ FD ]
Line_14 $$ trashRootFs = fs-->Line_246 $$ assertFalse("old checkpoint format not recognized", trashRootFs.exists(dirToDelete))[ FD ]
Line_37 $$ val = shell.run(args)-->Line_101 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_216 $$ PrintStream stderr = System.err[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_237 $$ mkdir(trashRootFs, dirToDelete)[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_17 $$ mkdir(fs, myPath)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_93 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString())[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_181 $$ assertFalse(fs.exists(myPath))[ FD ]
Line_23 $$ int val = -1-->Line_127 $$ val = shell.run(args)[ FD ]
Line_239 $$ int rc = -1-->Line_245 $$ assertEquals(0, rc)[ FD ]
Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))-->Line_246 $$ assertFalse("old checkpoint format not recognized", trashRootFs.exists(dirToDelete))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_13 $$ if (trashRootFs == null) [ CD ]
Line_51 $$ val = shell.run(args)-->Line_101 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_182 $$ assertFalse(fs.exists(myFile))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))[ CD ]
Line_25 $$ val = shell.run(args)-->Line_64 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_186 $$ int val = -1[ CD ]
Line_23 $$ int val = -1-->Line_77 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_245 $$ assertEquals(0, rc)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_11 $$ trashRoot = shell.getCurrentTrashDir()[ FD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_9 $$ shell.setConf(conf)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_107 $$ checkNotInTrash(trashRootFs, trashRoot, new Path(base, "test/mkdirs/myFile").toString())[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_144 $$ assertEquals("exit code", 1, val)[ CD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_151 $$ args[0] = "-rm"[ CD ]
Line_122 $$ args = new String[2]-->Line_222 $$ shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_180 $$ assertFalse(trashRootFs.exists(trashRoot))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_172 $$ args[2] = myPath.toString()[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_148 $$ writeFile(fs, myFile, 10)[ CD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_148 $$ writeFile(fs, myFile, 10)[ FD ]
Line_25 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_116 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_220 $$ System.setErr(newOut)[ CD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_187 $$ mkdir(fs, myPath)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_109 $$ writeFile(fs, myFile, 10)[ FD ]
Line_122 $$ args = new String[2]-->Line_199 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_152 $$ args[1] = "-skipTrash"[ CD ]
Line_116 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_23 $$ int val = -1-->Line_157 $$ val = shell.run(args)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_235 $$ Path dirToDelete = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1))[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_60 $$ args[0] = "-rmr"[ CD ]
Line_8 $$ FsShell shell = new FsShell()-->Line_199 $$ val = shell.run(args)[ FD ]
Line_23 $$ int val = -1-->Line_199 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_99 $$ int val = -1[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_44 $$ writeFile(fs, myFile, 10)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_81 $$ assertTrue(val == 0)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_195 $$ int num_runs = 10[ CD ]
Line_37 $$ val = shell.run(args)-->Line_77 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_170 $$ args[0] = "-rmr"[ CD ]
Line_193 $$ myFile = new Path(base, "test/mkdirs/myFile")-->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_121 $$ checkTrash(trashRootFs, trashRoot, myFile)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_234 $$ DateFormat oldCheckpointFormat = new SimpleDateFormat("yyMMddHHmm")[ CD ]
Line_64 $$ val = shell.run(args)-->Line_199 $$ val = shell.run(args)[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_132 $$ checkTrash(trashRootFs, trashRoot, myPath)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_105 $$ assertTrue(val == 0)[ CD ]
Line_51 $$ val = shell.run(args)-->Line_125 $$ val = -1[ FD ]
Line_3 $$ FileSystem fs = FileSystem.get(conf)-->Line_57 $$ writeFile(fs, myFile, 10)[ FD ]
Line_77 $$ val = shell.run(args)-->Line_101 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_194 $$ String[] args = new String[] [ FD ]
Line_233 $$ long now = Time.now()-->Line_236 $$ Path dirToKeep = new Path(trashRoot.getParent(), oldCheckpointFormat.format(now))[ FD ]
Line_25 $$ val = shell.run(args)-->Line_176 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_181 $$ assertFalse(fs.exists(myPath))[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_137 $$ args[1] = trashRoot.getParent().getParent().toString()[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_85 $$ int retVal = -1[ CD ]
Line_14 $$ trashRootFs = fs-->Line_161 $$ assertFalse("Expected TrashRoot (" + trashRoot + ") to exist in file system:" + trashRootFs.getUri(), trashRootFs.exists(trashRoot))[ FD ]
Line_218 $$ PrintStream newOut = new PrintStream(byteStream)-->Line_220 $$ System.setErr(newOut)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_29 $$ assertTrue(val == 0)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_113 $$ args[1] = myFile.toString()[ CD ]
Line_140 $$ val = shell.run(args)-->Line_157 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_7 $$ assertTrue(new Trash(conf).isEnabled())[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_75 $$ int val = -1[ CD ]
Line_125 $$ val = -1-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_37 $$ val = shell.run(args)-->Line_140 $$ val = shell.run(args)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_70 $$ mkdir(fs, myPath)[ CD ]
Line_51 $$ val = shell.run(args)-->Line_144 $$ assertEquals("exit code", 1, val)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_206 $$ System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot=" + trashRoot.toUri().getPath() + "; trashDir=" + trashDir.toUri().getPath())[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_112 $$ args[0] = "-rm"[ CD ]
Line_77 $$ val = shell.run(args)-->Line_116 $$ val = shell.run(args)[ FD ]
Line_18 $$ Path myFile = new Path(base, "test/mkdirs/myFile")-->Line_148 $$ writeFile(fs, myFile, 10)[ FD ]
Line_21 $$ String[] args = new String[1]-->Line_77 $$ val = shell.run(args)[ FD ]
Line_122 $$ args = new String[2]-->Line_176 $$ val = shell.run(args)[ FD ]
Line_25 $$ val = shell.run(args)-->Line_101 $$ val = shell.run(args)[ FD ]
Line_11 $$ trashRoot = shell.getCurrentTrashDir()-->Line_94 $$ checkNotInTrash(trashRootFs, trashRoot, toErase.toString() + ".1")[ FD ]
Line_16 $$ Path myPath = new Path(base, "test/mkdirs")-->Line_172 $$ args[2] = myPath.toString()[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_86 $$ writeFile(trashRootFs, toErase, 10)[ CD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_164 $$ assertTrue(val == 0)[ CD ]
Line_84 $$ Path toErase = new Path(trashRoot, "toErase")-->Line_86 $$ writeFile(trashRootFs, toErase, 10)[ FD ]
Line_2 $$ public static void trashShell(final Configuration conf, final Path base, FileSystem trashRootFs, Path trashRoot) throws IOException -->Line_61 $$ args[1] = new Path(base, "test/mkdirs").toString()[ CD ]
Line_21 $$ String[] args = new String[1]-->Line_64 $$ val = shell.run(args)[ FD ]
