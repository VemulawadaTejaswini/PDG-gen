Line_25 $$ for (StringTokenizer t = new StringTokenizer(results, "\n"); t.hasMoreTokens(); ) -->Line_28 $$ if (i >= 0) [ CD ]
Line_22 $$ dirname = dir.substring(dir.lastIndexOf(Path.SEPARATOR))-->Line_29 $$ paths.add(s.substring(i + dirname.length()))[ FD ]
Line_5 $$ final PrintStream out = new PrintStream(bytes)-->Line_8 $$ System.setOut(out)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_24 $$ final List<String> paths = new ArrayList<String>()[ CD ]
Line_7 $$ final PrintStream oldErr = System.err-->Line_17 $$ System.setErr(oldErr)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_22 $$ dirname = dir.substring(dir.lastIndexOf(Path.SEPARATOR))[ FD ]
Line_22 $$ dirname = dir.substring(dir.lastIndexOf(Path.SEPARATOR))-->Line_27 $$ final int i = s.indexOf(dirname)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_6 $$ final PrintStream oldOut = System.out[ CD ]
Line_25 $$ for (StringTokenizer t = new StringTokenizer(results, "\n"); t.hasMoreTokens(); ) -->Line_26 $$ final String s = t.nextToken()[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_19 $$ System.out.println("lsr results:\n" + results)[ CD ]
Line_26 $$ final String s = t.nextToken()-->Line_29 $$ paths.add(s.substring(i + dirname.length()))[ FD ]
Line_25 $$ for (StringTokenizer t = new StringTokenizer(results, "\n"); t.hasMoreTokens(); ) -->Line_26 $$ final String s = t.nextToken()[ CD ]
Line_21 $$ if (dir.lastIndexOf(Path.SEPARATOR) != -1) -->Line_22 $$ dirname = dir.substring(dir.lastIndexOf(Path.SEPARATOR))[ CD ]
Line_5 $$ final PrintStream out = new PrintStream(bytes)-->Line_15 $$ IOUtils.closeStream(out)[ FD ]
Line_24 $$ final List<String> paths = new ArrayList<String>()-->Line_32 $$ Collections.sort(paths)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_32 $$ Collections.sort(paths)[ CD ]
Line_20 $$ String dirname = dir-->Line_22 $$ dirname = dir.substring(dir.lastIndexOf(Path.SEPARATOR))[ FD ]
Line_24 $$ final List<String> paths = new ArrayList<String>()-->Line_33 $$ System.out.println("lsr paths = " + paths.toString().replace(", ", ",\n  "))[ FD ]
Line_25 $$ for (StringTokenizer t = new StringTokenizer(results, "\n"); t.hasMoreTokens(); ) -->Line_27 $$ final int i = s.indexOf(dirname)[ CD ]
Line_20 $$ String dirname = dir-->Line_29 $$ paths.add(s.substring(i + dirname.length()))[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_20 $$ String dirname = dir[ CD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_10 $$ final String results[ CD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_34 $$ return paths[ CD ]
Line_24 $$ final List<String> paths = new ArrayList<String>()-->Line_29 $$ paths.add(s.substring(i + dirname.length()))[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_7 $$ final PrintStream oldErr = System.err[ CD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_3 $$ System.out.println("lsr root=" + dir)[ CD ]
Line_26 $$ final String s = t.nextToken()-->Line_27 $$ final int i = s.indexOf(dirname)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_33 $$ System.out.println("lsr paths = " + paths.toString().replace(", ", ",\n  "))[ CD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_8 $$ System.setOut(out)[ CD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_21 $$ if (dir.lastIndexOf(Path.SEPARATOR) != -1) [ CD ]
Line_5 $$ final PrintStream out = new PrintStream(bytes)-->Line_9 $$ System.setErr(out)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_21 $$ if (dir.lastIndexOf(Path.SEPARATOR) != -1) [ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_12 $$ Assert.assertEquals(0, shell.run(new String[] [ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_5 $$ final PrintStream out = new PrintStream(bytes)[ CD ]
Line_10 $$ final String results-->Line_13 $$ results = bytes.toString()[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_9 $$ System.setErr(out)[ CD ]
Line_6 $$ final PrintStream oldOut = System.out-->Line_16 $$ System.setOut(oldOut)[ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_25 $$ for (StringTokenizer t = new StringTokenizer(results, "\n"); t.hasMoreTokens(); ) [ CD ]
Line_28 $$ if (i >= 0) -->Line_29 $$ paths.add(s.substring(i + dirname.length()))[ CD ]
Line_4 $$ final ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_13 $$ results = bytes.toString()[ FD ]
Line_27 $$ final int i = s.indexOf(dirname)-->Line_28 $$ if (i >= 0) [ FD ]
Line_2 $$ private static List<String> lsr(final FsShell shell, String dir) throws Exception -->Line_4 $$ final ByteArrayOutputStream bytes = new ByteArrayOutputStream()[ CD ]
Line_20 $$ String dirname = dir-->Line_27 $$ final int i = s.indexOf(dirname)[ FD ]
