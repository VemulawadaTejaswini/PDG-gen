Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_20 $$ return new JUnitForkedSplitter(ourWorkingDirs, ourForkMode, printOutputStream, printErrStream, newArgs).startSplitting(args, name, ourCommandFileName)[ CD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_3 $$ PrintStream oldOut = System.out[ CD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_6 $$ IdeaTestRunner testRunner = (IdeaTestRunner) getAgentClass(isJUnit4).newInstance()[ FD ]
Line_15 $$ final List newArgs = new ArrayList()-->Line_17 $$ newArgs.addAll(listeners)[ FD ]
Line_4 $$ PrintStream oldErr = System.err-->Line_30 $$ System.setErr(oldErr)[ FD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_24 $$ return testRunner.startRunnerWithArgs(args, listeners, name, ourCount, true)[ FD ]
Line_3 $$ PrintStream oldOut = System.out-->Line_29 $$ System.setOut(oldOut)[ FD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_17 $$ newArgs.addAll(listeners)[ FD ]
Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_16 $$ newArgs.add(String.valueOf(isJUnit4))[ CD ]
Line_9 $$ if (!SM_RUNNER) -->Line_11 $$ System.setErr(new PrintStream((OutputStream) err))[ CD ]
Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_19 $$ PrintStream printErrStream = SM_RUNNER ? ((PrintStream) err) : ((SegmentedOutputStream) err).getPrintStream()[ CD ]
Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_18 $$ PrintStream printOutputStream = SM_RUNNER ? ((PrintStream) out) : ((SegmentedOutputStream) out).getPrintStream()[ CD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_4 $$ PrintStream oldErr = System.err[ CD ]
Line_13 $$ if (ourCommandFileName != null) -->Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) [ CD ]
Line_9 $$ if (!SM_RUNNER) -->Line_10 $$ System.setOut(new PrintStream((OutputStream) out))[ CD ]
Line_7 $$ Object out = SM_RUNNER ? System.out : (Object) new SegmentedOutputStream(System.out)-->Line_23 $$ testRunner.setStreams(out, err, 0)[ FD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_16 $$ newArgs.add(String.valueOf(isJUnit4))[ FD ]
Line_6 $$ IdeaTestRunner testRunner = (IdeaTestRunner) getAgentClass(isJUnit4).newInstance()-->Line_24 $$ return testRunner.startRunnerWithArgs(args, listeners, name, ourCount, true)[ FD ]
Line_8 $$ Object err = SM_RUNNER ? System.err : (Object) new SegmentedOutputStream(System.err)-->Line_23 $$ testRunner.setStreams(out, err, 0)[ FD ]
Line_15 $$ final List newArgs = new ArrayList()-->Line_16 $$ newArgs.add(String.valueOf(isJUnit4))[ FD ]
Line_6 $$ IdeaTestRunner testRunner = (IdeaTestRunner) getAgentClass(isJUnit4).newInstance()-->Line_23 $$ testRunner.setStreams(out, err, 0)[ FD ]
Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_15 $$ final List newArgs = new ArrayList()[ CD ]
Line_14 $$ if (!"none".equals(ourForkMode) || ourWorkingDirs != null && new File(ourWorkingDirs).length() > 0) -->Line_17 $$ newArgs.addAll(listeners)[ CD ]
Line_2 $$ private static int prepareStreamsAndStart(String[] args, final boolean isJUnit4, ArrayList listeners, String name) -->Line_20 $$ return new JUnitForkedSplitter(ourWorkingDirs, ourForkMode, printOutputStream, printErrStream, newArgs).startSplitting(args, name, ourCommandFileName)[ FD ]
