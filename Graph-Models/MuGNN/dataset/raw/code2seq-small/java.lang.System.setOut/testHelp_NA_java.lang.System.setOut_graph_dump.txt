Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_17 $$ assertTrue(dataOut.toString().contains("-refreshUserToGroupsMappings: Refresh user-to-groups mappings"))[ FD ]
Line_10 $$ String[] args = -->Line_36 $$ assertEquals(0, rmAdminCLIWithHAEnabled.run(args))[ FD ]
Line_2 $$ public void testHelp() throws Exception -->Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()[ CD ]
Line_3 $$ PrintStream oldOutPrintStream = System.out-->Line_12 $$ oldOutPrintStream.println(dataOut)[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_14 $$ assertTrue(dataOut.toString().contains("yarn rmadmin [-refreshQueues] [-refreshNodes] [-refreshSuper" + "UserGroupsConfiguration] [-refreshUserToGroupsMappings] " + "[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup" + " [username]] [-help [cmd]]"))[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_12 $$ oldOutPrintStream.println(dataOut)[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_13 $$ assertTrue(dataOut.toString().contains("rmadmin is the command to execute YARN administrative commands."))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_34 $$ testError(new String[] [ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_25 $$ testError(new String[] [ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_15 $$ assertTrue(dataOut.toString().contains("-refreshQueues: Reload the queues' acls, states and scheduler " + "specific properties."))[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_18 $$ assertTrue(dataOut.toString().contains("-refreshSuperUserGroupsConfiguration: Refresh superuser proxy" + " groups mappings"))[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_16 $$ assertTrue(dataOut.toString().contains("-refreshNodes: Refresh the hosts information at the " + "ResourceManager."))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_32 $$ testError(new String[] [ FD ]
Line_2 $$ public void testHelp() throws Exception -->Line_8 $$ System.setErr(new PrintStream(dataErr))[ CD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_21 $$ assertTrue(dataOut.toString().contains("-help [cmd]: Displays help for the given command or all " + "commands if none"))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_26 $$ testError(new String[] [ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_31 $$ testError(new String[] [ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_33 $$ testError(new String[] [ FD ]
Line_2 $$ public void testHelp() throws Exception -->Line_7 $$ System.setOut(new PrintStream(dataOut))[ CD ]
Line_2 $$ public void testHelp() throws Exception -->Line_4 $$ PrintStream oldErrPrintStream = System.err[ CD ]
Line_3 $$ PrintStream oldOutPrintStream = System.out-->Line_40 $$ System.setOut(oldOutPrintStream)[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_37 $$ oldOutPrintStream.println(dataOut)[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_24 $$ testError(new String[] [ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_35 $$ testError(new String[] [ FD ]
Line_2 $$ public void testHelp() throws Exception -->Line_3 $$ PrintStream oldOutPrintStream = System.out[ CD ]
Line_2 $$ public void testHelp() throws Exception -->Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()[ CD ]
Line_4 $$ PrintStream oldErrPrintStream = System.err-->Line_41 $$ System.setErr(oldErrPrintStream)[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_30 $$ testError(new String[] [ FD ]
Line_10 $$ String[] args = -->Line_11 $$ assertEquals(0, rmAdminCLI.run(args))[ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_20 $$ assertTrue(dataOut.toString().contains("-refreshServiceAcl: Reload the service-level authorization" + " policy file"))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_23 $$ testError(new String[] [ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_38 $$ assertTrue(dataOut.toString().contains("yarn rmadmin [-refreshQueues] [-refreshNodes] [-refreshSuper" + "UserGroupsConfiguration] [-refreshUserToGroupsMappings] " + "[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup" + " [username]] [-help [cmd]] [-transitionToActive <serviceId>" + " [--forceactive]] [-transitionToStandby <serviceId>] [-failover" + " [--forcefence] [--forceactive] <serviceId> <serviceId>] " + "[-getServiceState <serviceId>] [-checkHealth <serviceId>]"))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_27 $$ testError(new String[] [ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_22 $$ testError(new String[] [ FD ]
Line_3 $$ PrintStream oldOutPrintStream = System.out-->Line_37 $$ oldOutPrintStream.println(dataOut)[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_28 $$ testError(new String[] [ FD ]
Line_5 $$ ByteArrayOutputStream dataOut = new ByteArrayOutputStream()-->Line_19 $$ assertTrue(dataOut.toString().contains("-refreshAdminAcls: Refresh acls for administration of " + "ResourceManager"))[ FD ]
Line_6 $$ ByteArrayOutputStream dataErr = new ByteArrayOutputStream()-->Line_29 $$ testError(new String[] [ FD ]
