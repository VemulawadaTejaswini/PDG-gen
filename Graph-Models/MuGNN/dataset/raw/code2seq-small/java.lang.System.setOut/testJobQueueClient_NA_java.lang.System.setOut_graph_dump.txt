Line_9 $$ fileSys = FileSystem.get(job)-->Line_10 $$ fileSys.delete(testDir, true)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_37 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_36 $$ assertTrue(bytes.toString().contains("default  ADMINISTER_QUEUE,SUBMIT_APPLICATIONS"))[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_21 $$ JobClient client = new JobClient(mr.getConfig())[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_15 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_39 $$ String[] arg2 = -->Line_40 $$ jobClient.run(arg2)[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_34 $$ assertTrue(bytes.toString().contains("Queue acls for user :"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_44 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_16 $$ job.setInputFormat(TextInputFormat.class)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_51 $$ assertTrue(bytes.toString().contains("job_1"))[ FD ]
Line_26 $$ String[] arg = -->Line_27 $$ jobClient.run(arg)[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_7 $$ mr = createMiniClusterWithCapacityScheduler()[ FD ]
Line_56 $$ if (fileSys != null) -->Line_57 $$ fileSys.delete(testDir, true)[ CD ]
Line_44 $$ bytes = new ByteArrayOutputStream()-->Line_51 $$ assertTrue(bytes.toString().contains("job_1"))[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_42 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_37 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_60 $$ mr.stop()[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_14 $$ FileInputFormat.setInputPaths(job, inFile)[ FD ]
Line_11 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_13 $$ out.close()[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_22 $$ client.submitJob(job)[ FD ]
Line_7 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_60 $$ mr.stop()[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_9 $$ fileSys = FileSystem.get(job)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_30 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_23 $$ JobQueueClient jobClient = new JobQueueClient(job)-->Line_27 $$ jobClient.run(arg)[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_43 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_49 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_17 $$ job.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_50 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_23 $$ JobQueueClient jobClient = new JobQueueClient(job)-->Line_40 $$ jobClient.run(arg2)[ FD ]
Line_44 $$ bytes = new ByteArrayOutputStream()-->Line_49 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_23 $$ JobQueueClient jobClient = new JobQueueClient(job)-->Line_33 $$ jobClient.run(arg1)[ FD ]
Line_59 $$ if (mr != null) -->Line_60 $$ mr.stop()[ CD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_35 $$ assertTrue(bytes.toString().contains("root  ADMINISTER_QUEUE,SUBMIT_APPLICATIONS"))[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_41 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_34 $$ assertTrue(bytes.toString().contains("Queue acls for user :"))[ FD ]
Line_7 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_8 $$ JobConf job = new JobConf(mr.getConfig())[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_28 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_36 $$ assertTrue(bytes.toString().contains("default  ADMINISTER_QUEUE,SUBMIT_APPLICATIONS"))[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_42 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_50 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_19 $$ job.setReducerClass(IdentityReducer.class)[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_44 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_9 $$ fileSys = FileSystem.get(job)-->Line_57 $$ fileSys.delete(testDir, true)[ FD ]
Line_23 $$ JobQueueClient jobClient = new JobQueueClient(job)-->Line_53 $$ jobClient.run(arg4)[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_48 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_51 $$ assertTrue(bytes.toString().contains("job_1"))[ FD ]
Line_21 $$ JobClient client = new JobClient(mr.getConfig())-->Line_22 $$ client.submitJob(job)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_41 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_59 $$ if (mr != null) [ FD ]
Line_2 $$ public void testJobQueueClient() throws Exception -->Line_4 $$ FileSystem fileSys = null[ CD ]
Line_46 $$ String[] arg3 = -->Line_47 $$ jobClient.run(arg3)[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_49 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_29 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_35 $$ assertTrue(bytes.toString().contains("root  ADMINISTER_QUEUE,SUBMIT_APPLICATIONS"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_42 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_2 $$ public void testJobQueueClient() throws Exception -->Line_3 $$ MiniMRClientCluster mr = null[ CD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_50 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_20 $$ job.setNumReduceTasks(0)[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_57 $$ fileSys.delete(testDir, true)[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_11 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_49 $$ assertTrue(bytes.toString().contains("Queue State : running"))[ FD ]
Line_2 $$ public void testJobQueueClient() throws Exception -->Line_5 $$ PrintStream oldOut = System.out[ CD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_44 $$ bytes = new ByteArrayOutputStream()[ FD ]
Line_5 $$ PrintStream oldOut = System.out-->Line_55 $$ System.setOut(oldOut)[ FD ]
Line_7 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_21 $$ JobClient client = new JobClient(mr.getConfig())[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_10 $$ fileSys.delete(testDir, true)[ FD ]
Line_52 $$ String[] arg4 = -->Line_53 $$ jobClient.run(arg4)[ FD ]
Line_8 $$ JobConf job = new JobConf(mr.getConfig())-->Line_18 $$ job.setMapperClass(IdentityMapper.class)[ FD ]
Line_32 $$ String[] arg1 = -->Line_33 $$ jobClient.run(arg1)[ FD ]
Line_30 $$ bytes = new ByteArrayOutputStream()-->Line_48 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_11 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_12 $$ out.writeBytes("This is a test file")[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_48 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_56 $$ if (fileSys != null) [ FD ]
Line_44 $$ bytes = new ByteArrayOutputStream()-->Line_48 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_43 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_51 $$ assertTrue(bytes.toString().contains("job_1"))[ FD ]
Line_24 $$ ByteArrayOutputStream bytes = new ByteArrayOutputStream()-->Line_43 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_3 $$ MiniMRClientCluster mr = null-->Line_8 $$ JobConf job = new JobConf(mr.getConfig())[ FD ]
Line_9 $$ fileSys = FileSystem.get(job)-->Line_56 $$ if (fileSys != null) [ FD ]
Line_23 $$ JobQueueClient jobClient = new JobQueueClient(job)-->Line_47 $$ jobClient.run(arg3)[ FD ]
Line_7 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_59 $$ if (mr != null) [ FD ]
Line_9 $$ fileSys = FileSystem.get(job)-->Line_11 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_44 $$ bytes = new ByteArrayOutputStream()-->Line_50 $$ assertTrue(bytes.toString().contains("Scheduling Info"))[ FD ]
Line_4 $$ FileSystem fileSys = null-->Line_9 $$ fileSys = FileSystem.get(job)[ FD ]
Line_37 $$ bytes = new ByteArrayOutputStream()-->Line_41 $$ assertTrue(bytes.toString().contains("Queue Name : default"))[ FD ]
