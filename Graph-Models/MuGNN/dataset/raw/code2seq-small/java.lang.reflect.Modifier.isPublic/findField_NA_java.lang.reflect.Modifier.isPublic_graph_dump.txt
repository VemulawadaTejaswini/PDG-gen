Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_17 $$ assertEquals(String.class, field.getType())[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_10 $$ assertNotNull(field)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_7 $$ assertEquals(String.class, field.getType())[ FD ]
Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_16 $$ assertEquals("name", field.getName())[ FD ]
Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_15 $$ assertNotNull(field)[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_8 $$ assertTrue("Field should be public.", Modifier.isPublic(field.getModifiers()))[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_5 $$ assertNotNull(field)[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_12 $$ assertEquals(String.class, field.getType())[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_16 $$ assertEquals("name", field.getName())[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_13 $$ assertTrue("Field should be protected.", Modifier.isProtected(field.getModifiers()))[ FD ]
Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_18 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_17 $$ assertEquals(String.class, field.getType())[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_11 $$ assertEquals("prot", field.getName())[ FD ]
Line_14 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_17 $$ assertEquals(String.class, field.getType())[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_13 $$ assertTrue("Field should be protected.", Modifier.isProtected(field.getModifiers()))[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_15 $$ assertNotNull(field)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_6 $$ assertEquals("publicField", field.getName())[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_18 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_11 $$ assertEquals("prot", field.getName())[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_12 $$ assertEquals(String.class, field.getType())[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_18 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_9 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_15 $$ assertNotNull(field)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_10 $$ assertNotNull(field)[ FD ]
Line_4 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_16 $$ assertEquals("name", field.getName())[ FD ]
