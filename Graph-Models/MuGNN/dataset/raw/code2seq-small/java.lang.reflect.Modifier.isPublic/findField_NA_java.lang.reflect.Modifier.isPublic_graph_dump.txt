Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_16 $$ assertEquals(String.class, field.getType())[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_15 $$ assertEquals("name", field.getName())[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_16 $$ assertEquals(String.class, field.getType())[ FD ]
Line_2 $$ public void findField() -->Line_4 $$ assertNotNull(field)[ CD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_9 $$ assertNotNull(field)[ FD ]
Line_2 $$ public void findField() -->Line_15 $$ assertEquals("name", field.getName())[ CD ]
Line_2 $$ public void findField() -->Line_9 $$ assertNotNull(field)[ CD ]
Line_2 $$ public void findField() -->Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)[ CD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_11 $$ assertEquals(String.class, field.getType())[ FD ]
Line_2 $$ public void findField() -->Line_16 $$ assertEquals(String.class, field.getType())[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_4 $$ assertNotNull(field)[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_14 $$ assertNotNull(field)[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_14 $$ assertNotNull(field)[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_7 $$ assertTrue("Field should be public.", Modifier.isPublic(field.getModifiers()))[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_11 $$ assertEquals(String.class, field.getType())[ FD ]
Line_2 $$ public void findField() -->Line_14 $$ assertNotNull(field)[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_6 $$ assertEquals(String.class, field.getType())[ FD ]
Line_2 $$ public void findField() -->Line_6 $$ assertEquals(String.class, field.getType())[ CD ]
Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_16 $$ assertEquals(String.class, field.getType())[ FD ]
Line_2 $$ public void findField() -->Line_12 $$ assertTrue("Field should be protected.", Modifier.isProtected(field.getModifiers()))[ CD ]
Line_2 $$ public void findField() -->Line_17 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ CD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)[ FD ]
Line_2 $$ public void findField() -->Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_10 $$ assertEquals("prot", field.getName())[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_17 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_17 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_17 $$ assertTrue("Field should be private.", Modifier.isPrivate(field.getModifiers()))[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_12 $$ assertTrue("Field should be protected.", Modifier.isProtected(field.getModifiers()))[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_12 $$ assertTrue("Field should be protected.", Modifier.isProtected(field.getModifiers()))[ FD ]
Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_14 $$ assertNotNull(field)[ FD ]
Line_2 $$ public void findField() -->Line_11 $$ assertEquals(String.class, field.getType())[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_9 $$ assertNotNull(field)[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_5 $$ assertEquals("publicField", field.getName())[ FD ]
Line_2 $$ public void findField() -->Line_7 $$ assertTrue("Field should be public.", Modifier.isPublic(field.getModifiers()))[ CD ]
Line_2 $$ public void findField() -->Line_5 $$ assertEquals("publicField", field.getName())[ CD ]
Line_2 $$ public void findField() -->Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)[ FD ]
Line_13 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "name", String.class)-->Line_15 $$ assertEquals("name", field.getName())[ FD ]
Line_8 $$ field = ReflectionUtils.findField(TestObjectSubclassWithNewField.class, "prot", String.class)-->Line_10 $$ assertEquals("prot", field.getName())[ FD ]
Line_3 $$ Field field = ReflectionUtils.findField(TestObjectSubclassWithPublicField.class, "publicField", String.class)-->Line_15 $$ assertEquals("name", field.getName())[ FD ]
Line_2 $$ public void findField() -->Line_10 $$ assertEquals("prot", field.getName())[ CD ]
