Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_27 $$ printMethodDeclaration(method, sb.append("  "), classes)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_9 $$ sb.append(" extends ")[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_8 $$ if (superClass != null && classes.containsKey(rawSuperClass)) [ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_12 $$ int implementsIdx = 1[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_13 $$ for (Type superInterface : aClass.getGenericInterfaces()) [ FD ]
Line_12 $$ int implementsIdx = 1-->Line_16 $$ if (implementsIdx++ == 1)[ FD ]
Line_24 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_25 $$ if (Modifier.isStatic(method.getModifiers()) || !Modifier.isPublic(method.getModifiers()) || Modifier.isVolatile(method.getModifiers()))[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_29 $$ final Collection<Class> innerClasses = classes.get(aClass)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_23 $$ sb.append(" [ FD ]
Line_15 $$ if (classes.containsKey(rawSuperInterface)) -->Line_16 $$ if (implementsIdx++ == 1)[ CD ]
Line_16 $$ if (implementsIdx++ == 1)-->Line_17 $$ sb.append(isInterface ? " extends " : " implements ")[ CD ]
Line_6 $$ final Type superClass = aClass.getGenericSuperclass()-->Line_10 $$ dumpType(null, superClass, sb, classes)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_5 $$ dumpType(aClass, aClass, sb, classes)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_24 $$ for (Method method : aClass.getDeclaredMethods()) [ FD ]
Line_24 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_27 $$ printMethodDeclaration(method, sb.append("  "), classes)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_29 $$ final Collection<Class> innerClasses = classes.get(aClass)[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_8 $$ if (superClass != null && classes.containsKey(rawSuperClass)) [ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_6 $$ final Type superClass = aClass.getGenericSuperclass()[ FD ]
Line_14 $$ final Class rawSuperInterface = (Class) (superInterface instanceof ParameterizedType ? ((ParameterizedType) superInterface).getRawType() : superClass)-->Line_15 $$ if (classes.containsKey(rawSuperInterface)) [ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_17 $$ sb.append(isInterface ? " extends " : " implements ")[ FD ]
Line_32 $$ for (Class innerClass : innerClasses) -->Line_33 $$ printClass(innerClass, classes, sb)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_31 $$ if (innerClasses != null) [ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_5 $$ dumpType(aClass, aClass, sb, classes)[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_4 $$ sb.append(isInterface ? "interface " : "class ")[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_15 $$ if (classes.containsKey(rawSuperInterface)) [ FD ]
Line_29 $$ final Collection<Class> innerClasses = classes.get(aClass)-->Line_31 $$ if (innerClasses != null) [ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_4 $$ sb.append(isInterface ? "interface " : "class ")[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_10 $$ dumpType(null, superClass, sb, classes)[ FD ]
Line_15 $$ if (classes.containsKey(rawSuperInterface)) -->Line_20 $$ dumpType(null, superInterface, sb, classes)[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_23 $$ sb.append(" [ CD ]
Line_13 $$ for (Type superInterface : aClass.getGenericInterfaces()) -->Line_20 $$ dumpType(null, superInterface, sb, classes)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_7 $$ final Class rawSuperClass = (Class) (superClass instanceof ParameterizedType ? ((ParameterizedType) superClass).getRawType() : superClass)[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_3 $$ final boolean isInterface = aClass.isInterface()[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_6 $$ final Type superClass = aClass.getGenericSuperclass()[ CD ]
Line_7 $$ final Class rawSuperClass = (Class) (superClass instanceof ParameterizedType ? ((ParameterizedType) superClass).getRawType() : superClass)-->Line_8 $$ if (superClass != null && classes.containsKey(rawSuperClass)) [ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_30 $$ sb.append("}\n")[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_30 $$ sb.append("}\n")[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_3 $$ final boolean isInterface = aClass.isInterface()[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_33 $$ printClass(innerClass, classes, sb)[ FD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_19 $$ sb.append(", ")[ FD ]
Line_16 $$ if (implementsIdx++ == 1)-->Line_19 $$ sb.append(", ")[ CD ]
Line_8 $$ if (superClass != null && classes.containsKey(rawSuperClass)) -->Line_10 $$ dumpType(null, superClass, sb, classes)[ CD ]
Line_8 $$ if (superClass != null && classes.containsKey(rawSuperClass)) -->Line_9 $$ sb.append(" extends ")[ CD ]
Line_2 $$ private static void printClass(Class aClass, Map<Class, Collection<Class>> classes, StringBuilder sb) -->Line_20 $$ dumpType(null, superInterface, sb, classes)[ FD ]
