Line_8 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_9 $$ Method method = methodExecutor.getMethod()[ FD ]
Line_9 $$ Method method = methodExecutor.getMethod()-->Line_33 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ FD ]
Line_27 $$ if (!isStaticMethod) -->Line_28 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ CD ]
Line_26 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))-->Line_28 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ FD ]
Line_9 $$ Method method = methodExecutor.getMethod()-->Line_10 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())[ FD ]
Line_10 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())-->Line_27 $$ if (!isStaticMethod) [ FD ]
Line_26 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))-->Line_33 $$ mv.visitMethodInsn((isStaticMethod ? INVOKESTATIC : INVOKEVIRTUAL), classDesc, method.getName(), CodeFlow.createSignatureDescriptor(method), method.getDeclaringClass().isInterface())[ FD ]
Line_11 $$ String descriptor = cf.lastDescriptor()-->Line_23 $$ if (CodeFlow.isPrimitive(descriptor)) [ FD ]
Line_8 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()-->Line_26 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))[ FD ]
Line_11 $$ String descriptor = cf.lastDescriptor()-->Line_12 $$ if (descriptor == null) [ FD ]
Line_28 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) -->Line_29 $$ CodeFlow.insertCheckCast(mv, "L" + classDesc)[ CD ]
Line_9 $$ Method method = methodExecutor.getMethod()-->Line_26 $$ String classDesc = (Modifier.isPublic(method.getDeclaringClass().getModifiers()) ? method.getDeclaringClass().getName().replace('.', '/') : methodExecutor.getPublicDeclaringClass().getName().replace('.', '/'))[ FD ]
Line_4 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_8 $$ ReflectiveMethodExecutor methodExecutor = (ReflectiveMethodExecutor) executorToCheck.get()[ FD ]
Line_10 $$ boolean isStaticMethod = Modifier.isStatic(method.getModifiers())-->Line_13 $$ if (!isStaticMethod) [ FD ]
Line_4 $$ CachedMethodExecutor executorToCheck = this.cachedExecutor-->Line_5 $$ if (executorToCheck == null || !(executorToCheck.get() instanceof ReflectiveMethodExecutor)) [ FD ]
Line_11 $$ String descriptor = cf.lastDescriptor()-->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, descriptor.charAt(0))[ FD ]
Line_9 $$ Method method = methodExecutor.getMethod()-->Line_32 $$ generateCodeForArguments(mv, cf, method, this.children)[ FD ]
Line_11 $$ String descriptor = cf.lastDescriptor()-->Line_28 $$ if (descriptor == null || !descriptor.substring(1).equals(classDesc)) [ FD ]
Line_12 $$ if (descriptor == null) -->Line_18 $$ if (isStaticMethod) [ CD ]
Line_12 $$ if (descriptor == null) -->Line_13 $$ if (!isStaticMethod) [ CD ]
Line_23 $$ if (CodeFlow.isPrimitive(descriptor)) -->Line_24 $$ CodeFlow.insertBoxIfNecessary(mv, descriptor.charAt(0))[ CD ]
