Line_4 $$ for (Method method : clazz.getMethods()) -->Line_8 $$ methods.add(method)[ FD ]
Line_4 $$ for (Method method : clazz.getMethods()) -->Line_7 $$ checkArgument(Modifier.isStatic(method.getModifiers()) && Modifier.isPublic(method.getModifiers()), "%s annotated with %s must be static and public", method.getName(), annotationClass.getSimpleName())[ FD ]
Line_5 $$ for (Annotation annotation : method.getAnnotations()) -->Line_6 $$ if (annotationClass.isInstance(annotation)) [ FD ]
Line_6 $$ if (annotationClass.isInstance(annotation)) -->Line_7 $$ checkArgument(Modifier.isStatic(method.getModifiers()) && Modifier.isPublic(method.getModifiers()), "%s annotated with %s must be static and public", method.getName(), annotationClass.getSimpleName())[ CD ]
Line_2 $$ private static List<Method> findPublicStaticMethodsWithAnnotation(Class<?> clazz, Class<?> annotationClass) -->Line_3 $$ ImmutableList.Builder<Method> methods = ImmutableList.builder()[ CD ]
Line_3 $$ ImmutableList.Builder<Method> methods = ImmutableList.builder()-->Line_8 $$ methods.add(method)[ FD ]
Line_2 $$ private static List<Method> findPublicStaticMethodsWithAnnotation(Class<?> clazz, Class<?> annotationClass) -->Line_4 $$ for (Method method : clazz.getMethods()) [ FD ]
Line_2 $$ private static List<Method> findPublicStaticMethodsWithAnnotation(Class<?> clazz, Class<?> annotationClass) -->Line_6 $$ if (annotationClass.isInstance(annotation)) [ FD ]
Line_4 $$ for (Method method : clazz.getMethods()) -->Line_5 $$ for (Annotation annotation : method.getAnnotations()) [ FD ]
Line_6 $$ if (annotationClass.isInstance(annotation)) -->Line_8 $$ methods.add(method)[ CD ]
Line_2 $$ private static List<Method> findPublicStaticMethodsWithAnnotation(Class<?> clazz, Class<?> annotationClass) -->Line_7 $$ checkArgument(Modifier.isStatic(method.getModifiers()) && Modifier.isPublic(method.getModifiers()), "%s annotated with %s must be static and public", method.getName(), annotationClass.getSimpleName())[ FD ]
Line_3 $$ ImmutableList.Builder<Method> methods = ImmutableList.builder()-->Line_12 $$ return methods.build()[ FD ]
Line_2 $$ private static List<Method> findPublicStaticMethodsWithAnnotation(Class<?> clazz, Class<?> annotationClass) -->Line_12 $$ return methods.build()[ CD ]
