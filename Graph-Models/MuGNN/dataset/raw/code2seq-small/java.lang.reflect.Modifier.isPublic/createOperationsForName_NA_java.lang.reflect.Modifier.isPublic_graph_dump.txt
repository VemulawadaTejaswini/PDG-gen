Line_16 $$ Method method = methods[i]-->Line_17 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) [ FD ]
Line_21 $$ Class superClass = implClass.getSuperclass()-->Line_23 $$ createOperationsForName(superClass, methodName)[ FD ]
Line_15 $$ for (int i = 0; i < methods.length; i++) -->Line_16 $$ Method method = methods[i][ CD ]
Line_22 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_23 $$ createOperationsForName(superClass, methodName)[ CD ]
Line_17 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) -->Line_18 $$ createOperationForMethod(method)[ CD ]
Line_21 $$ Class superClass = implClass.getSuperclass()-->Line_22 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_16 $$ Method method = methods[i]-->Line_18 $$ createOperationForMethod(method)[ FD ]
Line_11 $$ if (methodName.equals("getOperationDescByName") || methodName.equals("getOperationDescs"))-->Line_12 $$ return[ CD ]
Line_15 $$ for (int i = 0; i < methods.length; i++) -->Line_17 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(methodName) && !isServiceLifeCycleMethod(implClass, method)) [ CD ]
