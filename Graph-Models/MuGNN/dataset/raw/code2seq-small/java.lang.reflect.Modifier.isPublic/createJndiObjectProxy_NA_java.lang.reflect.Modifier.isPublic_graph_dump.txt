Line_17 $$ Class<?> targetClass = targetSource.getTargetClass()-->Line_21 $$ Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader)[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_5 $$ targetSource.setJndiTemplate(jof.getJndiTemplate())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_9 $$ targetSource.setLookupOnStartup(jof.lookupOnStartup)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_29 $$ proxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()))[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_11 $$ targetSource.afterPropertiesSet()[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_8 $$ targetSource.setResourceRef(jof.isResourceRef())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_7 $$ targetSource.setExpectedType(jof.getExpectedType())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_14 $$ if (jof.proxyInterfaces != null) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_31 $$ proxyFactory.setTargetSource(targetSource)[ CD ]
Line_23 $$ if (Modifier.isPublic(ifc.getModifiers())) -->Line_24 $$ proxyFactory.addInterface(ifc)[ CD ]
Line_22 $$ for (Class<?> ifc : ifcs) -->Line_23 $$ if (Modifier.isPublic(ifc.getModifiers())) [ FD ]
Line_14 $$ if (jof.proxyInterfaces != null) -->Line_21 $$ Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(targetClass, jof.beanClassLoader)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_10 $$ targetSource.setCache(jof.cache)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_8 $$ targetSource.setResourceRef(jof.isResourceRef())[ CD ]
Line_22 $$ for (Class<?> ifc : ifcs) -->Line_24 $$ proxyFactory.addInterface(ifc)[ FD ]
Line_14 $$ if (jof.proxyInterfaces != null) -->Line_15 $$ proxyFactory.setInterfaces(jof.proxyInterfaces)[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_28 $$ if (jof.exposeAccessContext) [ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_6 $$ targetSource.setJndiName(jof.getJndiName())[ FD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_28 $$ if (jof.exposeAccessContext) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_32 $$ return proxyFactory.getProxy(jof.beanClassLoader)[ CD ]
Line_14 $$ if (jof.proxyInterfaces != null) -->Line_18 $$ if (targetClass == null) [ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_5 $$ targetSource.setJndiTemplate(jof.getJndiTemplate())[ CD ]
Line_17 $$ Class<?> targetClass = targetSource.getTargetClass()-->Line_18 $$ if (targetClass == null) [ FD ]
Line_28 $$ if (jof.exposeAccessContext) -->Line_29 $$ proxyFactory.addAdvice(new JndiContextExposingInterceptor(jof.getJndiTemplate()))[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_7 $$ targetSource.setExpectedType(jof.getExpectedType())[ CD ]
Line_14 $$ if (jof.proxyInterfaces != null) -->Line_17 $$ Class<?> targetClass = targetSource.getTargetClass()[ CD ]
Line_2 $$ private static Object createJndiObjectProxy(JndiObjectFactoryBean jof) throws NamingException -->Line_6 $$ targetSource.setJndiName(jof.getJndiName())[ CD ]
