Line_26 $$ Map.Entry<String, Couple<Method>> candidate = iterator.next()-->Line_30 $$ accessors.add(new PropertyAccessor(candidate.getKey(), methods.first.getReturnType(), methods.first, methods.second))[ FD ]
Line_15 $$ Couple<Method> candidate = candidates.get(propertyData.first)-->Line_22 $$ candidate = Couple.of(propertyData.second ? candidate.first : method, propertyData.second ? method : candidate.second)[ FD ]
Line_6 $$ for (Method method : aClass.getMethods()) -->Line_12 $$ if (propertyData == null || propertyData.first.equals("class") || method.getParameterTypes().length != (propertyData.second ? 1 : 0)) [ FD ]
Line_29 $$ if (methods.first != null && methods.second != null && methods.first.getReturnType().equals(methods.second.getParameterTypes()[0]) && methods.first.getAnnotation(Transient.class) == null && methods.second.getAnnotation(Transient.class) == null) -->Line_30 $$ accessors.add(new PropertyAccessor(candidate.getKey(), methods.first.getReturnType(), methods.first, methods.second))[ CD ]
Line_15 $$ Couple<Method> candidate = candidates.get(propertyData.first)-->Line_16 $$ if (candidate == null) [ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, Couple<Method>>> iterator = candidates.entrySet().iterator(); iterator.hasNext(); ) -->Line_29 $$ if (methods.first != null && methods.second != null && methods.first.getReturnType().equals(methods.second.getParameterTypes()[0]) && methods.first.getAnnotation(Transient.class) == null && methods.second.getAnnotation(Transient.class) == null) [ CD ]
Line_15 $$ Couple<Method> candidate = candidates.get(propertyData.first)-->Line_23 $$ candidates.put(propertyData.first, candidate)[ FD ]
Line_17 $$ candidate = Couple.getEmpty()-->Line_30 $$ accessors.add(new PropertyAccessor(candidate.getKey(), methods.first.getReturnType(), methods.first, methods.second))[ FD ]
Line_15 $$ Couple<Method> candidate = candidates.get(propertyData.first)-->Line_17 $$ candidate = Couple.getEmpty()[ FD ]
Line_22 $$ candidate = Couple.of(propertyData.second ? candidate.first : method, propertyData.second ? method : candidate.second)-->Line_23 $$ candidates.put(propertyData.first, candidate)[ FD ]
Line_29 $$ if (methods.first != null && methods.second != null && methods.first.getReturnType().equals(methods.second.getParameterTypes()[0]) && methods.first.getAnnotation(Transient.class) == null && methods.second.getAnnotation(Transient.class) == null) -->Line_32 $$ iterator.remove()[ CD ]
Line_22 $$ candidate = Couple.of(propertyData.second ? candidate.first : method, propertyData.second ? method : candidate.second)-->Line_30 $$ accessors.add(new PropertyAccessor(candidate.getKey(), methods.first.getReturnType(), methods.first, methods.second))[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, Couple<Method>>> iterator = candidates.entrySet().iterator(); iterator.hasNext(); ) -->Line_26 $$ Map.Entry<String, Couple<Method>> candidate = iterator.next()[ FD ]
Line_15 $$ Couple<Method> candidate = candidates.get(propertyData.first)-->Line_30 $$ accessors.add(new PropertyAccessor(candidate.getKey(), methods.first.getReturnType(), methods.first, methods.second))[ FD ]
Line_17 $$ candidate = Couple.getEmpty()-->Line_23 $$ candidates.put(propertyData.first, candidate)[ FD ]
Line_6 $$ for (Method method : aClass.getMethods()) -->Line_7 $$ if (!Modifier.isPublic(method.getModifiers())) [ FD ]
Line_16 $$ if (candidate == null) -->Line_17 $$ candidate = Couple.getEmpty()[ CD ]
Line_25 $$ for (Iterator<Map.Entry<String, Couple<Method>>> iterator = candidates.entrySet().iterator(); iterator.hasNext(); ) -->Line_32 $$ iterator.remove()[ FD ]
Line_25 $$ for (Iterator<Map.Entry<String, Couple<Method>>> iterator = candidates.entrySet().iterator(); iterator.hasNext(); ) -->Line_26 $$ Map.Entry<String, Couple<Method>> candidate = iterator.next()[ CD ]
Line_17 $$ candidate = Couple.getEmpty()-->Line_22 $$ candidate = Couple.of(propertyData.second ? candidate.first : method, propertyData.second ? method : candidate.second)[ FD ]
