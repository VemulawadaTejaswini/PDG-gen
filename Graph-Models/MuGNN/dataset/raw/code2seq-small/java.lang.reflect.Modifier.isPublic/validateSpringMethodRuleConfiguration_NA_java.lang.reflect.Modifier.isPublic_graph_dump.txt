Line_9 $$ for (Field field : testClass.getFields()) -->Line_12 $$ ruleField = field[ FD ]
Line_10 $$ int modifiers = field.getModifiers()-->Line_11 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) [ FD ]
Line_9 $$ for (Field field : testClass.getFields()) -->Line_11 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) [ FD ]
Line_11 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) -->Line_12 $$ ruleField = field[ CD ]
Line_8 $$ Field ruleField = null-->Line_19 $$ if (!ruleField.isAnnotationPresent(Rule.class)) [ FD ]
Line_8 $$ Field ruleField = null-->Line_16 $$ if (ruleField == null) [ FD ]
Line_12 $$ ruleField = field-->Line_19 $$ if (!ruleField.isAnnotationPresent(Rule.class)) [ FD ]
Line_12 $$ ruleField = field-->Line_20 $$ throw new IllegalStateException(String.format("SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " + "Consult the javadoc for SpringClassRule for details.", ruleField))[ FD ]
Line_8 $$ Field ruleField = null-->Line_20 $$ throw new IllegalStateException(String.format("SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " + "Consult the javadoc for SpringClassRule for details.", ruleField))[ FD ]
Line_8 $$ Field ruleField = null-->Line_12 $$ ruleField = field[ FD ]
Line_12 $$ ruleField = field-->Line_16 $$ if (ruleField == null) [ FD ]
Line_9 $$ for (Field field : testClass.getFields()) -->Line_10 $$ int modifiers = field.getModifiers()[ FD ]
