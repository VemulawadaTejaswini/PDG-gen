Line_2 $$ private static void validateSpringMethodRuleConfiguration(Class<?> testClass) -->Line_14 $$ if (!ruleField.isAnnotationPresent(Rule.class)) [ CD ]
Line_7 $$ ruleField = field-->Line_11 $$ if (ruleField == null) [ FD ]
Line_3 $$ Field ruleField = null-->Line_15 $$ throw new IllegalStateException(String.format("SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " + "Consult the javadoc for SpringClassRule for details.", ruleField))[ FD ]
Line_7 $$ ruleField = field-->Line_14 $$ if (!ruleField.isAnnotationPresent(Rule.class)) [ FD ]
Line_3 $$ Field ruleField = null-->Line_14 $$ if (!ruleField.isAnnotationPresent(Rule.class)) [ FD ]
Line_2 $$ private static void validateSpringMethodRuleConfiguration(Class<?> testClass) -->Line_4 $$ for (Field field : testClass.getFields()) [ FD ]
Line_3 $$ Field ruleField = null-->Line_7 $$ ruleField = field[ FD ]
Line_2 $$ private static void validateSpringMethodRuleConfiguration(Class<?> testClass) -->Line_3 $$ Field ruleField = null[ CD ]
Line_4 $$ for (Field field : testClass.getFields()) -->Line_5 $$ int modifiers = field.getModifiers()[ FD ]
Line_2 $$ private static void validateSpringMethodRuleConfiguration(Class<?> testClass) -->Line_12 $$ throw new IllegalStateException(String.format("Failed to find 'public SpringMethodRule' field in test class [%s]. " + "Consult the javadoc for SpringClassRule for details.", testClass.getName()))[ FD ]
Line_3 $$ Field ruleField = null-->Line_11 $$ if (ruleField == null) [ FD ]
Line_2 $$ private static void validateSpringMethodRuleConfiguration(Class<?> testClass) -->Line_11 $$ if (ruleField == null) [ CD ]
Line_4 $$ for (Field field : testClass.getFields()) -->Line_7 $$ ruleField = field[ FD ]
Line_7 $$ ruleField = field-->Line_15 $$ throw new IllegalStateException(String.format("SpringMethodRule field [%s] must be annotated with JUnit's @Rule annotation. " + "Consult the javadoc for SpringClassRule for details.", ruleField))[ FD ]
Line_5 $$ int modifiers = field.getModifiers()-->Line_6 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) [ FD ]
Line_6 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) -->Line_7 $$ ruleField = field[ CD ]
Line_4 $$ for (Field field : testClass.getFields()) -->Line_6 $$ if (!Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers) && SpringMethodRule.class.isAssignableFrom(field.getType())) [ FD ]
