Line_28 $$ if (parameterTypes.length > 0 && parameterTypes[parameterTypes.length - 1].equals(Action.class)) -->Line_29 $$ classMetaData.addActionMethod(method)[ CD ]
Line_25 $$ if (parameterTypes.length == 1) -->Line_26 $$ classMetaData.addCandidateSetMethod(method)[ CD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_6 $$ if (!Modifier.isPublic(method.getModifiers()) && !Modifier.isProtected(method.getModifiers())) [ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_17 $$ propertyMetaData.addGetter(method)[ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_24 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_5 $$ if (method.getAnnotation(Inject.class) != null) -->Line_6 $$ if (!Modifier.isPublic(method.getModifiers()) && !Modifier.isProtected(method.getModifiers())) [ CD ]
Line_14 $$ for (PropertyDetails property : classDetails.getProperties()) -->Line_16 $$ for (Method method : property.getGetters()) [ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_31 $$ classMetaData.addClosureMethod(method)[ FD ]
Line_30 $$ if (parameterTypes.length > 0 && parameterTypes[parameterTypes.length - 1].equals(Closure.class)) -->Line_31 $$ classMetaData.addClosureMethod(method)[ CD ]
Line_15 $$ PropertyMetaData propertyMetaData = classMetaData.property(property.getName())-->Line_17 $$ propertyMetaData.addGetter(method)[ FD ]
Line_3 $$ ClassDetails classDetails = ClassInspector.inspect(type)-->Line_23 $$ for (Method method : classDetails.getInstanceMethods()) [ FD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_3 $$ ClassDetails classDetails = ClassInspector.inspect(type)[ CD ]
Line_14 $$ for (PropertyDetails property : classDetails.getProperties()) -->Line_15 $$ PropertyMetaData propertyMetaData = classMetaData.property(property.getName())[ FD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_29 $$ classMetaData.addActionMethod(method)[ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_29 $$ classMetaData.addActionMethod(method)[ FD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_26 $$ classMetaData.addCandidateSetMethod(method)[ FD ]
Line_3 $$ ClassDetails classDetails = ClassInspector.inspect(type)-->Line_14 $$ for (PropertyDetails property : classDetails.getProperties()) [ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_10 $$ throw new UnsupportedOperationException(String.format("Cannot attach @Inject to method %s.%s() as it is static.", method.getDeclaringClass().getSimpleName(), method.getName()))[ FD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_31 $$ classMetaData.addClosureMethod(method)[ FD ]
Line_3 $$ ClassDetails classDetails = ClassInspector.inspect(type)-->Line_4 $$ for (Method method : classDetails.getAllMethods()) [ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_9 $$ if (Modifier.isStatic(method.getModifiers())) [ FD ]
Line_15 $$ PropertyMetaData propertyMetaData = classMetaData.property(property.getName())-->Line_20 $$ propertyMetaData.addSetter(method)[ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_20 $$ propertyMetaData.addSetter(method)[ FD ]
Line_14 $$ for (PropertyDetails property : classDetails.getProperties()) -->Line_19 $$ for (Method method : property.getSetters()) [ FD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_3 $$ ClassDetails classDetails = ClassInspector.inspect(type)[ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_5 $$ if (method.getAnnotation(Inject.class) != null) [ FD ]
Line_5 $$ if (method.getAnnotation(Inject.class) != null) -->Line_9 $$ if (Modifier.isStatic(method.getModifiers())) [ CD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_26 $$ classMetaData.addCandidateSetMethod(method)[ FD ]
Line_28 $$ if (parameterTypes.length > 0 && parameterTypes[parameterTypes.length - 1].equals(Action.class)) -->Line_30 $$ if (parameterTypes.length > 0 && parameterTypes[parameterTypes.length - 1].equals(Closure.class)) [ CD ]
Line_2 $$ private void inspectType(Class<?> type, ClassMetaData classMetaData) -->Line_15 $$ PropertyMetaData propertyMetaData = classMetaData.property(property.getName())[ FD ]
Line_4 $$ for (Method method : classDetails.getAllMethods()) -->Line_7 $$ throw new UnsupportedOperationException(String.format("Cannot attach @Inject to method %s.%s() as it is not public or protected.", method.getDeclaringClass().getSimpleName(), method.getName()))[ FD ]
