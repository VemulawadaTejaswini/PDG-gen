Line_15 $$ if (clazz.isAssignableFrom(valueClass))-->Line_16 $$ return value[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_15 $$ if (clazz.isAssignableFrom(valueClass))[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_7 $$ Class<?> valueClass = value.getClass()[ FD ]
Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_39 $$ return constructor.newInstance(value)[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_7 $$ Class<?> valueClass = value.getClass()[ CD ]
Line_23 $$ if (editor != null) -->Line_25 $$ return editor.getValue()[ CD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_29 $$ Method method = clazz.getMethod("valueOf", valueClass)[ FD ]
Line_29 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_31 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))[ FD ]
Line_29 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_30 $$ int modifiers = method.getModifiers()[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_3 $$ if (clazz == null)[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_17 $$ if (clazz.isEnum()) [ FD ]
Line_10 $$ if (trim)-->Line_11 $$ string = string.trim()[ CD ]
Line_17 $$ if (clazz.isEnum()) -->Line_18 $$ Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class)[ CD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_15 $$ if (clazz.isAssignableFrom(valueClass))[ FD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_21 $$ if (valueClass == String.class) [ FD ]
Line_38 $$ if (Modifier.isPublic(constructor.getModifiers()))-->Line_39 $$ return constructor.newInstance(value)[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_3 $$ if (clazz == null)[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_18 $$ Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class)[ FD ]
Line_8 $$ if (valueClass == String.class) -->Line_10 $$ if (trim)[ CD ]
Line_5 $$ if (value == null)-->Line_6 $$ return null[ CD ]
Line_21 $$ if (valueClass == String.class) -->Line_22 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)[ CD ]
Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_32 $$ return method.invoke(null, value)[ FD ]
Line_8 $$ if (valueClass == String.class) -->Line_12 $$ if (replaceProperties)[ CD ]
Line_37 $$ Constructor constructor = clazz.getConstructor(valueClass)-->Line_39 $$ return constructor.newInstance(value)[ FD ]
Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_19 $$ return Enum.valueOf(eclazz, value.toString())[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_22 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)[ FD ]
Line_37 $$ Constructor constructor = clazz.getConstructor(valueClass)-->Line_38 $$ if (Modifier.isPublic(constructor.getModifiers()))[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_37 $$ Constructor constructor = clazz.getConstructor(valueClass)[ FD ]
Line_8 $$ if (valueClass == String.class) -->Line_9 $$ String string = (String) value[ CD ]
Line_11 $$ string = string.trim()-->Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_17 $$ if (clazz.isEnum()) [ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_29 $$ Method method = clazz.getMethod("valueOf", valueClass)[ FD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_35 $$ if (valueClass == String.class) [ FD ]
Line_3 $$ if (clazz == null)-->Line_4 $$ return value[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_5 $$ if (value == null)[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_35 $$ if (valueClass == String.class) [ CD ]
Line_9 $$ String string = (String) value-->Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)[ FD ]
Line_22 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_25 $$ return editor.getValue()[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_21 $$ if (valueClass == String.class) [ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_31 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_32 $$ return method.invoke(null, value)[ FD ]
Line_17 $$ if (clazz.isEnum()) -->Line_19 $$ return Enum.valueOf(eclazz, value.toString())[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_19 $$ return Enum.valueOf(eclazz, value.toString())[ FD ]
Line_22 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_23 $$ if (editor != null) [ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_39 $$ return constructor.newInstance(value)[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_8 $$ if (valueClass == String.class) [ CD ]
Line_29 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_32 $$ return method.invoke(null, value)[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_5 $$ if (value == null)[ FD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_8 $$ if (valueClass == String.class) [ FD ]
Line_18 $$ Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class)-->Line_19 $$ return Enum.valueOf(eclazz, value.toString())[ FD ]
Line_21 $$ if (valueClass == String.class) -->Line_23 $$ if (editor != null) [ CD ]
Line_9 $$ String string = (String) value-->Line_11 $$ string = string.trim()[ FD ]
Line_22 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_24 $$ editor.setAsText((String) value)[ FD ]
Line_12 $$ if (replaceProperties)-->Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_43 $$ return value[ CD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_15 $$ if (clazz.isAssignableFrom(valueClass))[ CD ]
Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_15 $$ if (clazz.isAssignableFrom(valueClass))[ FD ]
Line_2 $$ public static Object convertValue(Class<?> clazz, Object value, boolean replaceProperties, boolean trim) throws Throwable -->Line_13 $$ value = PropertiesValueResolver.replaceProperties(string)[ FD ]
Line_23 $$ if (editor != null) -->Line_24 $$ editor.setAsText((String) value)[ CD ]
Line_30 $$ int modifiers = method.getModifiers()-->Line_31 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))[ FD ]
Line_31 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))-->Line_32 $$ return method.invoke(null, value)[ CD ]
Line_7 $$ Class<?> valueClass = value.getClass()-->Line_37 $$ Constructor constructor = clazz.getConstructor(valueClass)[ FD ]
