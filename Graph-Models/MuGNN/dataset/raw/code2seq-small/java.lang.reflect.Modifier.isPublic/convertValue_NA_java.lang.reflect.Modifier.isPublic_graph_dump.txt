Line_52 $$ Constructor constructor = clazz.getConstructor(valueClass)-->Line_54 $$ return constructor.newInstance(value)[ FD ]
Line_18 $$ Class<?> valueClass = value.getClass()-->Line_50 $$ if (valueClass == String.class) [ FD ]
Line_46 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))-->Line_47 $$ return method.invoke(null, value)[ CD ]
Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_27 $$ if (clazz.isAssignableFrom(valueClass))[ FD ]
Line_37 $$ if (editor != null) -->Line_38 $$ editor.setAsText((String) value)[ CD ]
Line_18 $$ Class<?> valueClass = value.getClass()-->Line_44 $$ Method method = clazz.getMethod("valueOf", valueClass)[ FD ]
Line_36 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_37 $$ if (editor != null) [ FD ]
Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_32 $$ return Enum.valueOf(eclazz, value.toString())[ FD ]
Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_47 $$ return method.invoke(null, value)[ FD ]
Line_21 $$ String string = (String) value-->Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)[ FD ]
Line_18 $$ Class<?> valueClass = value.getClass()-->Line_27 $$ if (clazz.isAssignableFrom(valueClass))[ FD ]
Line_22 $$ if (trim)-->Line_23 $$ string = string.trim()[ CD ]
Line_36 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_38 $$ editor.setAsText((String) value)[ FD ]
Line_16 $$ if (value == null)-->Line_17 $$ return null[ CD ]
Line_44 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_47 $$ return method.invoke(null, value)[ FD ]
Line_23 $$ string = string.trim()-->Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)[ FD ]
Line_27 $$ if (clazz.isAssignableFrom(valueClass))-->Line_28 $$ return value[ CD ]
Line_21 $$ String string = (String) value-->Line_23 $$ string = string.trim()[ FD ]
Line_36 $$ PropertyEditor editor = PropertyEditorManager.findEditor(clazz)-->Line_39 $$ return editor.getValue()[ FD ]
Line_44 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_46 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))[ FD ]
Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)-->Line_54 $$ return constructor.newInstance(value)[ FD ]
Line_31 $$ Class<? extends Enum> eclazz = clazz.asSubclass(Enum.class)-->Line_32 $$ return Enum.valueOf(eclazz, value.toString())[ FD ]
Line_53 $$ if (Modifier.isPublic(constructor.getModifiers()))-->Line_54 $$ return constructor.newInstance(value)[ CD ]
Line_52 $$ Constructor constructor = clazz.getConstructor(valueClass)-->Line_53 $$ if (Modifier.isPublic(constructor.getModifiers()))[ FD ]
Line_14 $$ if (clazz == null)-->Line_15 $$ return value[ CD ]
Line_44 $$ Method method = clazz.getMethod("valueOf", valueClass)-->Line_45 $$ int modifiers = method.getModifiers()[ FD ]
Line_45 $$ int modifiers = method.getModifiers()-->Line_46 $$ if (Modifier.isPublic(modifiers) && Modifier.isStatic(modifiers) && clazz.isAssignableFrom(method.getReturnType()))[ FD ]
Line_18 $$ Class<?> valueClass = value.getClass()-->Line_52 $$ Constructor constructor = clazz.getConstructor(valueClass)[ FD ]
Line_24 $$ if (replaceProperties)-->Line_25 $$ value = PropertiesValueResolver.replaceProperties(string)[ CD ]
Line_37 $$ if (editor != null) -->Line_39 $$ return editor.getValue()[ CD ]
