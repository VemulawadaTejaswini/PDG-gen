Line_19 $$ if (register) -->Line_20 $$ registerDistributed(name, distributed.direction(), distributed.matchType())[ CD ]
Line_2 $$ protected static void processDistributed(Class<?> clazz, boolean register) -->Line_6 $$ while ((currentClass = queue.poll()) != null) [ CD ]
Line_28 $$ Class<?> supperClass = currentClass.getSuperclass()-->Line_30 $$ queue.offer(supperClass)[ FD ]
Line_3 $$ Queue<Class<?>> queue = new LinkedList()-->Line_30 $$ queue.offer(supperClass)[ FD ]
Line_3 $$ Queue<Class<?>> queue = new LinkedList()-->Line_35 $$ queue.offer(interfaceClass)[ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_7 $$ Field[] fields = currentClass.getDeclaredFields()[ CD ]
Line_19 $$ if (register) -->Line_22 $$ unregisterDistributed(name, distributed.direction(), distributed.matchType())[ CD ]
Line_2 $$ protected static void processDistributed(Class<?> clazz, boolean register) -->Line_4 $$ queue.offer(clazz)[ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_29 $$ if ((supperClass != null) && (supperClass != Object.class)) [ CD ]
Line_2 $$ protected static void processDistributed(Class<?> clazz, boolean register) -->Line_3 $$ Queue<Class<?>> queue = new LinkedList()[ CD ]
Line_5 $$ Class<?> currentClass = null-->Line_32 $$ Class<?>[] interfaceClasses = currentClass.getInterfaces()[ FD ]
Line_29 $$ if ((supperClass != null) && (supperClass != Object.class)) -->Line_30 $$ queue.offer(supperClass)[ CD ]
Line_9 $$ Distributed distributed = field.getAnnotation(Distributed.class)-->Line_10 $$ if (distributed == null) [ FD ]
Line_2 $$ protected static void processDistributed(Class<?> clazz, boolean register) -->Line_4 $$ queue.offer(clazz)[ CD ]
Line_8 $$ for (Field field : fields) -->Line_13 $$ int modifiers = field.getModifiers()[ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_32 $$ Class<?>[] interfaceClasses = currentClass.getInterfaces()[ FD ]
Line_8 $$ for (Field field : fields) -->Line_9 $$ Distributed distributed = field.getAnnotation(Distributed.class)[ FD ]
Line_5 $$ Class<?> currentClass = null-->Line_6 $$ while ((currentClass = queue.poll()) != null) [ FD ]
Line_3 $$ Queue<Class<?>> queue = new LinkedList()-->Line_6 $$ while ((currentClass = queue.poll()) != null) [ FD ]
Line_9 $$ Distributed distributed = field.getAnnotation(Distributed.class)-->Line_22 $$ unregisterDistributed(name, distributed.direction(), distributed.matchType())[ FD ]
Line_8 $$ for (Field field : fields) -->Line_18 $$ String name = (String) field.get(null)[ FD ]
Line_2 $$ protected static void processDistributed(Class<?> clazz, boolean register) -->Line_5 $$ Class<?> currentClass = null[ CD ]
Line_5 $$ Class<?> currentClass = null-->Line_28 $$ Class<?> supperClass = currentClass.getSuperclass()[ FD ]
Line_5 $$ Class<?> currentClass = null-->Line_7 $$ Field[] fields = currentClass.getDeclaredFields()[ FD ]
Line_13 $$ int modifiers = field.getModifiers()-->Line_14 $$ if (!Modifier.isPublic(modifiers) || !Modifier.isStatic(modifiers) || !Modifier.isFinal(modifiers) || (field.getType() != String.class)) [ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_32 $$ Class<?>[] interfaceClasses = currentClass.getInterfaces()[ CD ]
Line_8 $$ for (Field field : fields) -->Line_14 $$ if (!Modifier.isPublic(modifiers) || !Modifier.isStatic(modifiers) || !Modifier.isFinal(modifiers) || (field.getType() != String.class)) [ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_28 $$ Class<?> supperClass = currentClass.getSuperclass()[ FD ]
Line_3 $$ Queue<Class<?>> queue = new LinkedList()-->Line_34 $$ if (!queue.contains(interfaceClass)) [ FD ]
Line_9 $$ Distributed distributed = field.getAnnotation(Distributed.class)-->Line_20 $$ registerDistributed(name, distributed.direction(), distributed.matchType())[ FD ]
Line_18 $$ String name = (String) field.get(null)-->Line_22 $$ unregisterDistributed(name, distributed.direction(), distributed.matchType())[ FD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_28 $$ Class<?> supperClass = currentClass.getSuperclass()[ CD ]
Line_6 $$ while ((currentClass = queue.poll()) != null) -->Line_7 $$ Field[] fields = currentClass.getDeclaredFields()[ FD ]
Line_3 $$ Queue<Class<?>> queue = new LinkedList()-->Line_4 $$ queue.offer(clazz)[ FD ]
Line_33 $$ for (Class<?> interfaceClass : interfaceClasses) -->Line_35 $$ queue.offer(interfaceClass)[ FD ]
Line_33 $$ for (Class<?> interfaceClass : interfaceClasses) -->Line_34 $$ if (!queue.contains(interfaceClass)) [ FD ]
Line_34 $$ if (!queue.contains(interfaceClass)) -->Line_35 $$ queue.offer(interfaceClass)[ CD ]
Line_18 $$ String name = (String) field.get(null)-->Line_20 $$ registerDistributed(name, distributed.direction(), distributed.matchType())[ FD ]
