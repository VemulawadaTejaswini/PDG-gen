Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_113 $$ ParameterDesc param = oper.getParameter(j)[ CD ]
Line_111 $$ actualType = JavaUtils.getHolderValueType(type)-->Line_146 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_108 $$ Class type = paramTypes[j][ CD ]
Line_115 $$ if (typeQName == null) -->Line_124 $$ param.setTypeQName(typeQName)[ CD ]
Line_139 $$ if (paramClass != null && paramClass != Object.class) -->Line_146 $$ if (!actualType.isAssignableFrom(paramClass)) [ CD ]
Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_146 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_113 $$ ParameterDesc param = oper.getParameter(j)-->Line_114 $$ QName typeQName = param.getTypeQName()[ FD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_113 $$ ParameterDesc param = oper.getParameter(j)[ FD ]
Line_175 $$ Class returnClass = possibleMatch.getReturnType()-->Line_179 $$ oper.setReturnType(getTypeMapping().getTypeQName(returnClass))[ FD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_103 $$ if (paramTypes.length != oper.getNumParams())[ CD ]
Line_113 $$ ParameterDesc param = oper.getParameter(j)-->Line_124 $$ param.setTypeQName(typeQName)[ FD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_157 $$ if (j != paramTypes.length) [ FD ]
Line_109 $$ Class actualType = type-->Line_111 $$ actualType = JavaUtils.getHolderValueType(type)[ FD ]
Line_105 $$ int j-->Line_157 $$ if (j != paramTypes.length) [ FD ]
Line_108 $$ Class type = paramTypes[j]-->Line_110 $$ if (Holder.class.isAssignableFrom(type)) [ FD ]
Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ FD ]
Line_90 $$ int messageOperType = checkMessageMethod(method)-->Line_96 $$ oper.setMessageOperationStyle(messageOperType)[ FD ]
Line_90 $$ int messageOperType = checkMessageMethod(method)-->Line_91 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ FD ]
Line_90 $$ int messageOperType = checkMessageMethod(method)-->Line_93 $$ if (messageOperType == -1) [ FD ]
Line_89 $$ if (style == Style.MESSAGE) -->Line_91 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ CD ]
Line_83 $$ for (int i = 0; i < methods.length; i++) -->Line_85 $$ if (method2OperationMap == null) [ CD ]
Line_175 $$ Class returnClass = possibleMatch.getReturnType()-->Line_176 $$ oper.setReturnClass(returnClass)[ FD ]
Line_115 $$ if (typeQName == null) -->Line_139 $$ if (paramClass != null && paramClass != Object.class) [ CD ]
Line_114 $$ QName typeQName = param.getTypeQName()-->Line_124 $$ param.setTypeQName(typeQName)[ FD ]
Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)[ FD ]
Line_109 $$ Class actualType = type-->Line_146 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_109 $$ Class actualType = type[ CD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_114 $$ QName typeQName = param.getTypeQName()[ CD ]
Line_84 $$ Method method = methods[i]-->Line_90 $$ int messageOperType = checkMessageMethod(method)[ FD ]
Line_110 $$ if (Holder.class.isAssignableFrom(type)) -->Line_111 $$ actualType = JavaUtils.getHolderValueType(type)[ CD ]
Line_89 $$ if (style == Style.MESSAGE) -->Line_96 $$ oper.setMessageOperationStyle(messageOperType)[ CD ]
Line_136 $$ if (paramClass == null) -->Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ CD ]
Line_83 $$ for (int i = 0; i < methods.length; i++) -->Line_84 $$ Method method = methods[i][ CD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_107 $$ for (j = 0; j < paramTypes.length; j++) [ CD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_115 $$ if (typeQName == null) [ CD ]
Line_84 $$ Method method = methods[i]-->Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) [ FD ]
Line_178 $$ if (returnType == null) -->Line_179 $$ oper.setReturnType(getTypeMapping().getTypeQName(returnClass))[ CD ]
Line_189 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_190 $$ syncOperationToClass(oper, superClass)[ CD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_89 $$ if (style == Style.MESSAGE) [ CD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_106 $$ boolean conversionNecessary = false[ CD ]
Line_115 $$ if (typeQName == null) -->Line_133 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ CD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_105 $$ int j[ CD ]
Line_115 $$ if (typeQName == null) -->Line_136 $$ if (paramClass == null) [ CD ]
Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_133 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ FD ]
Line_107 $$ for (j = 0; j < paramTypes.length; j++) -->Line_110 $$ if (Holder.class.isAssignableFrom(type)) [ CD ]
Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_146 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_113 $$ ParameterDesc param = oper.getParameter(j)-->Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ FD ]
Line_105 $$ int j-->Line_107 $$ for (j = 0; j < paramTypes.length; j++) [ FD ]
Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_136 $$ if (paramClass == null) [ FD ]
Line_105 $$ int j-->Line_113 $$ ParameterDesc param = oper.getParameter(j)[ FD ]
Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_157 $$ if (j != paramTypes.length) [ CD ]
Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_133 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ FD ]
Line_114 $$ QName typeQName = param.getTypeQName()-->Line_115 $$ if (typeQName == null) [ FD ]
Line_137 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_136 $$ if (paramClass == null) [ FD ]
Line_89 $$ if (style == Style.MESSAGE) -->Line_93 $$ if (messageOperType == -1) [ CD ]
Line_108 $$ Class type = paramTypes[j]-->Line_111 $$ actualType = JavaUtils.getHolderValueType(type)[ FD ]
Line_133 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) -->Line_134 $$ paramClass = JavaUtils.getHolderValueType(paramClass)[ CD ]
Line_83 $$ for (int i = 0; i < methods.length; i++) -->Line_88 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) [ CD ]
Line_177 $$ QName returnType = oper.getReturnType()-->Line_178 $$ if (returnType == null) [ FD ]
Line_89 $$ if (style == Style.MESSAGE) -->Line_90 $$ int messageOperType = checkMessageMethod(method)[ CD ]
