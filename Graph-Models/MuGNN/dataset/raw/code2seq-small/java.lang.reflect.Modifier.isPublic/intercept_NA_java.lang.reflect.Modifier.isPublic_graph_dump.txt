Line_18 $$ if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) -->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ CD ]
Line_5 $$ Class<?> targetClass = null-->Line_14 $$ targetClass = target.getClass()[ FD ]
Line_22 $$ retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed()-->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_3 $$ Object oldProxy = null[ CD ]
Line_18 $$ if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) -->Line_19 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)[ CD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ FD ]
Line_6 $$ Object target = null-->Line_13 $$ if (target != null) [ FD ]
Line_19 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)-->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ FD ]
Line_5 $$ Class<?> targetClass = null-->Line_16 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_12 $$ target = getTarget()-->Line_14 $$ targetClass = target.getClass()[ FD ]
Line_9 $$ oldProxy = AopContext.setCurrentProxy(proxy)-->Line_31 $$ AopContext.setCurrentProxy(oldProxy)[ FD ]
Line_8 $$ if (this.advised.exposeProxy) -->Line_9 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ CD ]
Line_16 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)-->Line_18 $$ if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) [ FD ]
Line_12 $$ target = getTarget()-->Line_13 $$ if (target != null) [ FD ]
Line_17 $$ Object retVal-->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_4 $$ boolean setProxyContext = false-->Line_10 $$ setProxyContext = true[ FD ]
Line_6 $$ Object target = null-->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ FD ]
Line_6 $$ Object target = null-->Line_14 $$ targetClass = target.getClass()[ FD ]
Line_3 $$ Object oldProxy = null-->Line_9 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ FD ]
Line_18 $$ if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) -->Line_22 $$ retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed()[ CD ]
Line_12 $$ target = getTarget()-->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_8 $$ if (this.advised.exposeProxy) -->Line_10 $$ setProxyContext = true[ CD ]
Line_12 $$ target = getTarget()-->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ FD ]
Line_6 $$ Object target = null-->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_6 $$ Object target = null-->Line_27 $$ if (target != null) [ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_9 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ FD ]
Line_17 $$ Object retVal-->Line_22 $$ retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed()[ FD ]
Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)-->Line_22 $$ retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed()[ FD ]
Line_17 $$ Object retVal-->Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)[ FD ]
Line_30 $$ if (setProxyContext) -->Line_31 $$ AopContext.setCurrentProxy(oldProxy)[ CD ]
Line_14 $$ targetClass = target.getClass()-->Line_16 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_18 $$ if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) [ FD ]
Line_12 $$ target = getTarget()-->Line_28 $$ releaseTarget(target)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_12 $$ target = getTarget()-->Line_27 $$ if (target != null) [ FD ]
Line_3 $$ Object oldProxy = null-->Line_31 $$ AopContext.setCurrentProxy(oldProxy)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_19 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)[ FD ]
Line_6 $$ Object target = null-->Line_28 $$ releaseTarget(target)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_6 $$ Object target = null[ CD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_5 $$ Class<?> targetClass = null[ CD ]
Line_13 $$ if (target != null) -->Line_14 $$ targetClass = target.getClass()[ CD ]
Line_20 $$ retVal = methodProxy.invoke(target, argsToUse)-->Line_24 $$ retVal = processReturnType(proxy, target, method, retVal)[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_16 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_27 $$ if (target != null) -->Line_28 $$ releaseTarget(target)[ CD ]
Line_6 $$ Object target = null-->Line_12 $$ target = getTarget()[ FD ]
Line_2 $$ public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable -->Line_4 $$ boolean setProxyContext = false[ CD ]
