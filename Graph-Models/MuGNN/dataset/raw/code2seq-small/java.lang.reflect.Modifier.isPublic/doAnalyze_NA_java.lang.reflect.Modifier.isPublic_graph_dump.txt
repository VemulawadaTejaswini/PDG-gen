Line_59 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_63 $$ if (wo != null) [ FD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_109 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ CD ]
Line_32 $$ type = type.getComponentType()-->Line_33 $$ if (type != ObjectStreamField.class)[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_10 $$ if (cls.getName().indexOf('$') != -1)[ CD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_104 $$ int mods = fields[i].getModifiers()[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_116 $$ if (superClass == java.lang.Object.class)[ CD ]
Line_17 $$ spf = cls.getField("serialPersistentFields")-->Line_21 $$ if (spf != null) [ FD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_110 $$ m.add(vma)[ CD ]
Line_13 $$ if (!externalizable) -->Line_40 $$ if (spf != null) [ CD ]
Line_116 $$ if (superClass == java.lang.Object.class)-->Line_117 $$ superClass = null[ CD ]
Line_76 $$ if (wo != null) -->Line_79 $$ if (paramTypes.length != 1)[ CD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_101 $$ if (f_flags[i] != 0)[ CD ]
Line_104 $$ int mods = fields[i].getModifiers()-->Line_105 $$ if (Modifier.isStatic(mods) || Modifier.isTransient(mods))[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_3 $$ super.doAnalyze()[ CD ]
Line_13 $$ if (!externalizable) -->Line_21 $$ if (spf != null) [ CD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_108 $$ ValueMemberAnalysis vma[ CD ]
Line_17 $$ spf = cls.getField("serialPersistentFields")-->Line_50 $$ if (fields[i] == spf) [ FD ]
Line_79 $$ if (paramTypes.length != 1)-->Line_82 $$ if (paramTypes[0] != java.io.OutputStream.class)[ CD ]
Line_59 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_86 $$ if (wo != null) [ FD ]
Line_13 $$ if (!externalizable) -->Line_28 $$ if (spf != null) [ CD ]
Line_28 $$ if (spf != null) -->Line_31 $$ if (type.isArray()) [ CD ]
Line_59 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_91 $$ if (methods[i] == wo) [ FD ]
Line_100 $$ for (int i = 0; i < fields.length; ++i) -->Line_105 $$ if (Modifier.isStatic(mods) || Modifier.isTransient(mods))[ CD ]
Line_104 $$ int mods = fields[i].getModifiers()-->Line_109 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ FD ]
Line_108 $$ ValueMemberAnalysis vma-->Line_110 $$ m.add(vma)[ FD ]
Line_13 $$ if (!externalizable) -->Line_63 $$ if (wo != null) [ CD ]
Line_17 $$ spf = cls.getField("serialPersistentFields")-->Line_28 $$ if (spf != null) [ FD ]
Line_13 $$ if (!externalizable) -->Line_76 $$ if (wo != null) [ CD ]
Line_13 $$ if (!externalizable) -->Line_86 $$ if (wo != null) [ CD ]
Line_109 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))-->Line_110 $$ m.add(vma)[ FD ]
Line_117 $$ superClass = null-->Line_118 $$ if (superClass == null)[ FD ]
Line_108 $$ ValueMemberAnalysis vma-->Line_109 $$ vma = new ValueMemberAnalysis(fields[i].getName(), fields[i].getType(), Modifier.isPublic(mods))[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_12 $$ externalizable = Externalizable.class.isAssignableFrom(cls)[ CD ]
Line_21 $$ if (spf != null) -->Line_24 $$ if (!Modifier.isFinal(mods) || !Modifier.isStatic(mods) || !Modifier.isPrivate(mods))[ CD ]
Line_17 $$ spf = cls.getField("serialPersistentFields")-->Line_44 $$ serialPersistentFields = (ObjectStreamField[]) spf.get(null)[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_8 $$ if (Remote.class.isAssignableFrom(cls))[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_123 $$ if (!Serializable.class.isAssignableFrom(cls))[ CD ]
Line_118 $$ if (superClass == null)-->Line_121 $$ superAnalysis = getValueAnalysis(superClass)[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_4 $$ if (cls == String.class)[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_100 $$ for (int i = 0; i < fields.length; ++i) [ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_118 $$ if (superClass == null)[ CD ]
Line_117 $$ superClass = null-->Line_121 $$ superAnalysis = getValueAnalysis(superClass)[ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_13 $$ if (!externalizable) [ CD ]
Line_69 $$ if (wo != null) -->Line_72 $$ if (!Modifier.isPrivate(mods))[ CD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_125 $$ fixupCaseNames()[ CD ]
Line_31 $$ if (type.isArray()) -->Line_33 $$ if (type != ObjectStreamField.class)[ CD ]
Line_59 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_76 $$ if (wo != null) [ FD ]
Line_31 $$ if (type.isArray()) -->Line_32 $$ type = type.getComponentType()[ CD ]
Line_59 $$ wo = cls.getMethod("writeObject", new Class[] -->Line_69 $$ if (wo != null) [ FD ]
Line_2 $$ protected void doAnalyze() throws RMIIIOPViolationException -->Line_6 $$ if (cls == Class.class)[ CD ]
Line_17 $$ spf = cls.getField("serialPersistentFields")-->Line_40 $$ if (spf != null) [ FD ]
Line_13 $$ if (!externalizable) -->Line_69 $$ if (wo != null) [ CD ]
