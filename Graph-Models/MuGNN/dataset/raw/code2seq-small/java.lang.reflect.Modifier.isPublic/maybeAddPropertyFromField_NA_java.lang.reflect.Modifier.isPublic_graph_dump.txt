Line_20 $$ String propertyName = extractIdent(t)-->Line_23 $$ MethodMetaData getterMethod = currentClass.addMethod(String.format("get%s", StringUtils.capitalize(propertyName)), propertyType, "")[ FD ]
Line_10 $$ if (isConst) -->Line_11 $$ visitConst(t)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_8 $$ int modifiers = extractModifiers(t)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_26 $$ if (!Modifier.isFinal(modifiers)) [ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_22 $$ ClassMetaData currentClass = getCurrentClass()[ CD ]
Line_22 $$ ClassMetaData currentClass = getCurrentClass()-->Line_27 $$ MethodMetaData setterMethod = currentClass.addMethod(String.format("set%s", StringUtils.capitalize(propertyName)), TypeMetaData.VOID, "")[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_14 $$ boolean isProp = groovy && !Modifier.isStatic(modifiers) && !Modifier.isPublic(modifiers) && !Modifier.isProtected(modifiers) && !Modifier.isPrivate(modifiers)[ CD ]
Line_3 $$ GroovySourceAST parentNode = getParentNode()-->Line_4 $$ boolean isField = parentNode != null && parentNode.getType() == OBJBLOCK[ FD ]
Line_8 $$ int modifiers = extractModifiers(t)-->Line_9 $$ boolean isConst = getCurrentClass().isInterface() || (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers))[ FD ]
Line_22 $$ ClassMetaData currentClass = getCurrentClass()-->Line_23 $$ MethodMetaData getterMethod = currentClass.addMethod(String.format("get%s", StringUtils.capitalize(propertyName)), propertyType, "")[ FD ]
Line_26 $$ if (!Modifier.isFinal(modifiers)) -->Line_28 $$ setterMethod.addParameter(propertyName, propertyType)[ CD ]
Line_20 $$ String propertyName = extractIdent(t)-->Line_28 $$ setterMethod.addParameter(propertyName, propertyType)[ FD ]
Line_14 $$ boolean isProp = groovy && !Modifier.isStatic(modifiers) && !Modifier.isPublic(modifiers) && !Modifier.isProtected(modifiers) && !Modifier.isPrivate(modifiers)-->Line_15 $$ if (!isProp) [ FD ]
Line_5 $$ if (!isField) -->Line_6 $$ return[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_5 $$ if (!isField) [ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_4 $$ boolean isField = parentNode != null && parentNode.getType() == OBJBLOCK[ CD ]
Line_18 $$ ASTIterator children = new ASTIterator(t)-->Line_19 $$ children.skip(MODIFIERS)[ FD ]
Line_27 $$ MethodMetaData setterMethod = currentClass.addMethod(String.format("set%s", StringUtils.capitalize(propertyName)), TypeMetaData.VOID, "")-->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_23 $$ MethodMetaData getterMethod = currentClass.addMethod(String.format("get%s", StringUtils.capitalize(propertyName)), propertyType, "")[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_21 $$ TypeMetaData propertyType = extractTypeName(children.current)[ CD ]
Line_4 $$ boolean isField = parentNode != null && parentNode.getType() == OBJBLOCK-->Line_5 $$ if (!isField) [ FD ]
Line_20 $$ String propertyName = extractIdent(t)-->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ FD ]
Line_20 $$ String propertyName = extractIdent(t)-->Line_27 $$ MethodMetaData setterMethod = currentClass.addMethod(String.format("set%s", StringUtils.capitalize(propertyName)), TypeMetaData.VOID, "")[ FD ]
Line_26 $$ if (!Modifier.isFinal(modifiers)) -->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ CD ]
Line_21 $$ TypeMetaData propertyType = extractTypeName(children.current)-->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_9 $$ boolean isConst = getCurrentClass().isInterface() || (Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers))[ CD ]
Line_26 $$ if (!Modifier.isFinal(modifiers)) -->Line_27 $$ MethodMetaData setterMethod = currentClass.addMethod(String.format("set%s", StringUtils.capitalize(propertyName)), TypeMetaData.VOID, "")[ CD ]
Line_10 $$ if (isConst) -->Line_12 $$ return[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ FD ]
Line_8 $$ int modifiers = extractModifiers(t)-->Line_14 $$ boolean isProp = groovy && !Modifier.isStatic(modifiers) && !Modifier.isPublic(modifiers) && !Modifier.isProtected(modifiers) && !Modifier.isPrivate(modifiers)[ FD ]
Line_23 $$ MethodMetaData getterMethod = currentClass.addMethod(String.format("get%s", StringUtils.capitalize(propertyName)), propertyType, "")-->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ FD ]
Line_22 $$ ClassMetaData currentClass = getCurrentClass()-->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ FD ]
Line_15 $$ if (!isProp) -->Line_16 $$ return[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_25 $$ findAnnotations(t, property)[ FD ]
Line_21 $$ TypeMetaData propertyType = extractTypeName(children.current)-->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ FD ]
Line_21 $$ TypeMetaData propertyType = extractTypeName(children.current)-->Line_28 $$ setterMethod.addParameter(propertyName, propertyType)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_11 $$ visitConst(t)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ FD ]
Line_27 $$ MethodMetaData setterMethod = currentClass.addMethod(String.format("set%s", StringUtils.capitalize(propertyName)), TypeMetaData.VOID, "")-->Line_28 $$ setterMethod.addParameter(propertyName, propertyType)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_20 $$ String propertyName = extractIdent(t)[ FD ]
Line_8 $$ int modifiers = extractModifiers(t)-->Line_26 $$ if (!Modifier.isFinal(modifiers)) [ FD ]
Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)-->Line_25 $$ findAnnotations(t, property)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_25 $$ findAnnotations(t, property)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_20 $$ String propertyName = extractIdent(t)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_3 $$ GroovySourceAST parentNode = getParentNode()[ CD ]
Line_22 $$ ClassMetaData currentClass = getCurrentClass()-->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_15 $$ if (!isProp) [ CD ]
Line_20 $$ String propertyName = extractIdent(t)-->Line_29 $$ currentClass.addWriteableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), setterMethod)[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_18 $$ ASTIterator children = new ASTIterator(t)[ CD ]
Line_21 $$ TypeMetaData propertyType = extractTypeName(children.current)-->Line_23 $$ MethodMetaData getterMethod = currentClass.addMethod(String.format("get%s", StringUtils.capitalize(propertyName)), propertyType, "")[ FD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_24 $$ PropertyMetaData property = currentClass.addReadableProperty(propertyName, propertyType, getJavaDocCommentsBeforeNode(t), getterMethod)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_19 $$ children.skip(MODIFIERS)[ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_10 $$ if (isConst) [ CD ]
Line_2 $$ private void maybeAddPropertyFromField(GroovySourceAST t) -->Line_8 $$ int modifiers = extractModifiers(t)[ FD ]
