Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_28 $$ if (backgrnd == null)[ CD ]
Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) -->Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_3 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value[ CD ]
Line_14 $$ ConfigurationTypeDescriptor configurationTypeDescriptor = (ConfigurationTypeDescriptor) descriptor-->Line_21 $$ myLabel.setText(configurationTypeDescriptor.getName())[ FD ]
Line_3 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) [ FD ]
Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) -->Line_17 $$ myLabel.setIcon(configurationTypeDescriptor.getIcon())[ CD ]
Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) -->Line_21 $$ myLabel.setText(configurationTypeDescriptor.getName())[ CD ]
Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) -->Line_14 $$ ConfigurationTypeDescriptor configurationTypeDescriptor = (ConfigurationTypeDescriptor) descriptor[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_12 $$ myCheckbox.setEnabled(true)[ CD ]
Line_3 $$ DefaultMutableTreeNode node = (DefaultMutableTreeNode) value-->Line_4 $$ Descriptor descriptor = (Descriptor) node.getUserObject()[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_5 $$ myCheckbox.setSelected(descriptor.isChecked())[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_15 $$ myLabel.setFont(tree.getFont())[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_24 $$ Color foregrnd = tree.getForeground()[ CD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_25 $$ Color backgrnd = tree.getBackground()[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_25 $$ Color backgrnd = tree.getBackground()[ FD ]
Line_25 $$ Color backgrnd = tree.getBackground()-->Line_32 $$ int blue = (foregrnd.getBlue() + backgrnd.getBlue()) / 2[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_35 $$ myCheckbox.setForeground(halftone)[ CD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_36 $$ myLabel.setForeground(halftone)[ CD ]
Line_26 $$ if (foregrnd == null)-->Line_27 $$ foregrnd = Color.black[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) [ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ Descriptor descriptor = (Descriptor) node.getUserObject()[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_24 $$ Color foregrnd = tree.getForeground()[ FD ]
Line_24 $$ Color foregrnd = tree.getForeground()-->Line_27 $$ foregrnd = Color.black[ FD ]
Line_4 $$ Descriptor descriptor = (Descriptor) node.getUserObject()-->Line_5 $$ myCheckbox.setSelected(descriptor.isChecked())[ FD ]
Line_29 $$ backgrnd = Color.white-->Line_31 $$ int green = (foregrnd.getGreen() + backgrnd.getGreen()) / 2[ FD ]
Line_29 $$ backgrnd = Color.white-->Line_32 $$ int blue = (foregrnd.getBlue() + backgrnd.getBlue()) / 2[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_34 $$ setForeground(halftone)[ CD ]
Line_4 $$ Descriptor descriptor = (Descriptor) node.getUserObject()-->Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) [ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_37 $$ myCheckbox.setEnabled(false)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_7 $$ setBackground(selected ? UIUtil.getTreeSelectionBackground() : UIUtil.getTreeTextBackground())[ CD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_32 $$ int blue = (foregrnd.getBlue() + backgrnd.getBlue()) / 2[ CD ]
Line_27 $$ foregrnd = Color.black-->Line_31 $$ int green = (foregrnd.getGreen() + backgrnd.getGreen()) / 2[ FD ]
Line_33 $$ Color halftone = new Color(red, green, blue)-->Line_36 $$ myLabel.setForeground(halftone)[ FD ]
Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) -->Line_20 $$ myLabel.setFont(tree.getFont())[ CD ]
Line_25 $$ Color backgrnd = tree.getBackground()-->Line_29 $$ backgrnd = Color.white[ FD ]
Line_25 $$ Color backgrnd = tree.getBackground()-->Line_30 $$ int red = (foregrnd.getRed() + backgrnd.getRed()) / 2[ FD ]
Line_33 $$ Color halftone = new Color(red, green, blue)-->Line_34 $$ setForeground(halftone)[ FD ]
Line_14 $$ ConfigurationTypeDescriptor configurationTypeDescriptor = (ConfigurationTypeDescriptor) descriptor-->Line_16 $$ myLabel.setText(configurationTypeDescriptor.getConfigurationType().getDisplayName())[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_10 $$ myCheckbox.setForeground(foreground)[ CD ]
Line_14 $$ ConfigurationTypeDescriptor configurationTypeDescriptor = (ConfigurationTypeDescriptor) descriptor-->Line_17 $$ myLabel.setIcon(configurationTypeDescriptor.getIcon())[ FD ]
Line_8 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()-->Line_10 $$ myCheckbox.setForeground(foreground)[ FD ]
Line_4 $$ Descriptor descriptor = (Descriptor) node.getUserObject()-->Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) [ FD ]
Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) -->Line_15 $$ myLabel.setFont(tree.getFont())[ CD ]
Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) -->Line_22 $$ myLabel.setIcon(null)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_40 $$ return this[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_20 $$ myLabel.setFont(tree.getFont())[ FD ]
Line_24 $$ Color foregrnd = tree.getForeground()-->Line_26 $$ if (foregrnd == null)[ FD ]
Line_24 $$ Color foregrnd = tree.getForeground()-->Line_32 $$ int blue = (foregrnd.getBlue() + backgrnd.getBlue()) / 2[ FD ]
Line_8 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()-->Line_9 $$ setForeground(foreground)[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_11 $$ myLabel.setForeground(foreground)[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_9 $$ setForeground(foreground)[ CD ]
Line_24 $$ Color foregrnd = tree.getForeground()-->Line_30 $$ int red = (foregrnd.getRed() + backgrnd.getRed()) / 2[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_6 $$ myCheckbox.setBackground(UIUtil.getTreeTextBackground())[ CD ]
Line_28 $$ if (backgrnd == null)-->Line_29 $$ backgrnd = Color.white[ CD ]
Line_27 $$ foregrnd = Color.black-->Line_30 $$ int red = (foregrnd.getRed() + backgrnd.getRed()) / 2[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_31 $$ int green = (foregrnd.getGreen() + backgrnd.getGreen()) / 2[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_8 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()[ CD ]
Line_27 $$ foregrnd = Color.black-->Line_32 $$ int blue = (foregrnd.getBlue() + backgrnd.getBlue()) / 2[ FD ]
Line_33 $$ Color halftone = new Color(red, green, blue)-->Line_35 $$ myCheckbox.setForeground(halftone)[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_26 $$ if (foregrnd == null)[ CD ]
Line_24 $$ Color foregrnd = tree.getForeground()-->Line_31 $$ int green = (foregrnd.getGreen() + backgrnd.getGreen()) / 2[ FD ]
Line_25 $$ Color backgrnd = tree.getBackground()-->Line_31 $$ int green = (foregrnd.getGreen() + backgrnd.getGreen()) / 2[ FD ]
Line_29 $$ backgrnd = Color.white-->Line_30 $$ int red = (foregrnd.getRed() + backgrnd.getRed()) / 2[ FD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_33 $$ Color halftone = new Color(red, green, blue)[ CD ]
Line_23 $$ if (((ConfigurationTypeDescriptor) ((DefaultMutableTreeNode) node.getParent()).getUserObject()).isChecked()) -->Line_30 $$ int red = (foregrnd.getRed() + backgrnd.getRed()) / 2[ CD ]
Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) -->Line_16 $$ myLabel.setText(configurationTypeDescriptor.getConfigurationType().getDisplayName())[ CD ]
Line_8 $$ final Color foreground = selected ? UIUtil.getTreeSelectionForeground() : UIUtil.getTreeTextForeground()-->Line_11 $$ myLabel.setForeground(foreground)[ FD ]
Line_13 $$ if (descriptor instanceof ConfigurationTypeDescriptor) -->Line_18 $$ if (descriptor instanceof ConfigurationDescriptor) [ CD ]
Line_25 $$ Color backgrnd = tree.getBackground()-->Line_28 $$ if (backgrnd == null)[ FD ]
