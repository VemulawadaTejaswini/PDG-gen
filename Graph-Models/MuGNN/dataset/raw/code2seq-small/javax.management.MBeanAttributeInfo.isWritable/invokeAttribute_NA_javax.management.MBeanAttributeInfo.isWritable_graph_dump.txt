Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_6 $$ throw new InvalidInvocationException("Attribute '" + pd.getName() + "' is not exposed on the management interface")[ FD ]
Line_9 $$ if (inf.isReadable()) -->Line_10 $$ return this.serverToUse.getAttribute(this.objectName, attributeName)[ CD ]
Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)-->Line_15 $$ if (inf.isWritable()) [ FD ]
Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)-->Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_8 $$ if (invocation.getMethod().equals(pd.getReadMethod())) [ FD ]
Line_8 $$ if (invocation.getMethod().equals(pd.getReadMethod())) -->Line_14 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) [ CD ]
Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)-->Line_5 $$ if (inf == null) [ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_5 $$ if (inf == null) [ CD ]
Line_8 $$ if (invocation.getMethod().equals(pd.getReadMethod())) -->Line_9 $$ if (inf.isReadable()) [ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_8 $$ if (invocation.getMethod().equals(pd.getReadMethod())) [ CD ]
Line_14 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) -->Line_15 $$ if (inf.isWritable()) [ CD ]
Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)-->Line_10 $$ return this.serverToUse.getAttribute(this.objectName, attributeName)[ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)[ FD ]
Line_15 $$ if (inf.isWritable()) -->Line_17 $$ return null[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_16 $$ this.serverToUse.setAttribute(this.objectName, new Attribute(attributeName, invocation.getArguments()[0]))[ FD ]
Line_4 $$ MBeanAttributeInfo inf = this.allowedAttributes.get(attributeName)-->Line_9 $$ if (inf.isReadable()) [ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_22 $$ throw new IllegalStateException("Method [" + invocation.getMethod() + "] is neither a bean property getter nor a setter")[ FD ]
Line_15 $$ if (inf.isWritable()) -->Line_16 $$ this.serverToUse.setAttribute(this.objectName, new Attribute(attributeName, invocation.getArguments()[0]))[ CD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_14 $$ if (invocation.getMethod().equals(pd.getWriteMethod())) [ FD ]
Line_2 $$ private Object invokeAttribute(PropertyDescriptor pd, MethodInvocation invocation) throws JMException, IOException -->Line_3 $$ String attributeName = JmxUtils.getAttributeName(pd, this.useStrictCasing)[ CD ]
