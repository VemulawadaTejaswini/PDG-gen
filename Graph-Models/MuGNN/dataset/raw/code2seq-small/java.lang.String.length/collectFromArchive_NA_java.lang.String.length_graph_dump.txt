Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_11 $$ final String separator = myUseZipFileIndex ? File.separator : "/"[ CD ]
Line_11 $$ final String separator = myUseZipFileIndex ? File.separator : "/"-->Line_25 $$ s += separator[ FD ]
Line_14 $$ relativePath = relativePath.replace('\\', '/')-->Line_17 $$ relativePath = relativePath + separator[ FD ]
Line_16 $$ if (!relativePath.endsWith(separator)) -->Line_17 $$ relativePath = relativePath + separator[ CD ]
Line_13 $$ if (!myUseZipFileIndex) -->Line_14 $$ relativePath = relativePath.replace('\\', '/')[ CD ]
Line_11 $$ final String separator = myUseZipFileIndex ? File.separator : "/"-->Line_17 $$ relativePath = relativePath + separator[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_20 $$ collectArchiveFiles(archive, relativePath, kinds, result)[ CD ]
Line_14 $$ relativePath = relativePath.replace('\\', '/')-->Line_20 $$ collectArchiveFiles(archive, relativePath, kinds, result)[ FD ]
Line_12 $$ if (relativePath.length() != 0) -->Line_13 $$ if (!myUseZipFileIndex) [ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_3 $$ if (archive == null) [ FD ]
Line_11 $$ final String separator = myUseZipFileIndex ? File.separator : "/"-->Line_16 $$ if (!relativePath.endsWith(separator)) [ FD ]
Line_5 $$ archive = openArchive(root)-->Line_27 $$ collectArchiveFiles(archive, s, kinds, result)[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_27 $$ collectArchiveFiles(archive, s, kinds, result)[ FD ]
Line_12 $$ if (relativePath.length() != 0) -->Line_16 $$ if (!relativePath.endsWith(separator)) [ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_12 $$ if (relativePath.length() != 0) [ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_16 $$ if (!relativePath.endsWith(separator)) [ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_17 $$ relativePath = relativePath + separator[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_20 $$ collectArchiveFiles(archive, relativePath, kinds, result)[ FD ]
Line_22 $$ for (String s : archive.getSubdirectories()) -->Line_27 $$ collectArchiveFiles(archive, s, kinds, result)[ FD ]
Line_14 $$ relativePath = relativePath.replace('\\', '/')-->Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) [ FD ]
Line_24 $$ if (!s.endsWith(separator)) -->Line_25 $$ s += separator[ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_12 $$ if (relativePath.length() != 0) [ FD ]
Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) -->Line_27 $$ collectArchiveFiles(archive, s, kinds, result)[ CD ]
Line_17 $$ relativePath = relativePath + separator-->Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) [ FD ]
Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) -->Line_24 $$ if (!s.endsWith(separator)) [ CD ]
Line_11 $$ final String separator = myUseZipFileIndex ? File.separator : "/"-->Line_24 $$ if (!s.endsWith(separator)) [ FD ]
Line_22 $$ for (String s : archive.getSubdirectories()) -->Line_24 $$ if (!s.endsWith(separator)) [ FD ]
Line_22 $$ for (String s : archive.getSubdirectories()) -->Line_25 $$ s += separator[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) [ FD ]
Line_17 $$ relativePath = relativePath + separator-->Line_20 $$ collectArchiveFiles(archive, relativePath, kinds, result)[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_21 $$ if (recurse) [ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_5 $$ archive = openArchive(root)[ FD ]
Line_5 $$ archive = openArchive(root)-->Line_20 $$ collectArchiveFiles(archive, relativePath, kinds, result)[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_3 $$ if (archive == null) [ CD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_22 $$ for (String s : archive.getSubdirectories()) [ FD ]
Line_5 $$ archive = openArchive(root)-->Line_22 $$ for (String s : archive.getSubdirectories()) [ FD ]
Line_14 $$ relativePath = relativePath.replace('\\', '/')-->Line_16 $$ if (!relativePath.endsWith(separator)) [ FD ]
Line_25 $$ s += separator-->Line_27 $$ collectArchiveFiles(archive, s, kinds, result)[ FD ]
Line_22 $$ for (String s : archive.getSubdirectories()) -->Line_23 $$ if (s.startsWith(relativePath) && !s.equals(relativePath)) [ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_7 $$ log.error("error.reading.file", root, ex.getLocalizedMessage())[ FD ]
Line_2 $$ private void collectFromArchive(File root, Archive archive, String relativePath, Set<JavaFileObject.Kind> kinds, boolean recurse, ListBuffer<JavaFileObject> result) -->Line_14 $$ relativePath = relativePath.replace('\\', '/')[ FD ]
