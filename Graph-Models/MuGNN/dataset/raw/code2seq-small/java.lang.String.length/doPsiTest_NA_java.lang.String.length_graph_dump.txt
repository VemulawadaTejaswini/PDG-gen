Line_7 $$ int start = 0-->Line_31 $$ start = i[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_50 $$ int i = children.indexOf(current)[ CD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_71 $$ TabPostFormatProcessor.processViaPsi(root, pair.second, helper, useTabs, smartTabs, tabWidth)[ FD ]
Line_7 $$ int start = 0-->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_50 $$ int i = children.indexOf(current)[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)[ CD ]
Line_6 $$ final String text = pair.first-->Line_41 $$ will(returnValue(text.length()))[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_76 $$ assertEquals(expected, actual.toString())[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_15 $$ children.add(child)[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_5 $$ Pair<String, TextRange> pair = parse(initial)[ CD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_15 $$ children.add(child)[ CD ]
Line_56 $$ int i = children.indexOf(current)-->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_57 $$ return i < children.size() - 1 ? children.get(i + 1) : null[ CD ]
Line_9 $$ for (int i = 1; i <= text.length(); i++) -->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ CD ]
Line_4 $$ final List<StringBuilder> childrenText = new ArrayList<StringBuilder>()-->Line_23 $$ will(returnValue(childrenText.get(childIndex)))[ FD ]
Line_11 $$ final int childIndex = children.size()-->Line_23 $$ will(returnValue(childrenText.get(childIndex)))[ FD ]
Line_31 $$ start = i-->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ FD ]
Line_16 $$ final IElementType type = inWhiteSpace ? TokenType.WHITE_SPACE : TokenType.CODE_FRAGMENT-->Line_21 $$ will(returnValue(type))[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_67 $$ int i = children.indexOf(leaf)[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_8 $$ boolean inWhiteSpace = initial.charAt(0) == ' ' || initial.charAt(0) == '\t'[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_17 $$ myMockery.checking(new Expectations() [ CD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_62 $$ return root == startNode ? children.get(0) : null[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_34 $$ final ASTNode root = myMockery.mock(ASTNode.class)[ CD ]
Line_9 $$ for (int i = 1; i <= text.length(); i++) -->Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) [ FD ]
Line_4 $$ final List<StringBuilder> childrenText = new ArrayList<StringBuilder>()-->Line_25 $$ will(returnValue(childrenText.get(childIndex).length()))[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_35 $$ myMockery.checking(new Expectations() [ CD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()[ CD ]
Line_6 $$ final String text = pair.first-->Line_9 $$ for (int i = 1; i <= text.length(); i++) [ FD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_20 $$ allowing(child).getElementType()[ FD ]
Line_4 $$ final List<StringBuilder> childrenText = new ArrayList<StringBuilder>()-->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_24 $$ allowing(child).getTextLength()[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_5 $$ Pair<String, TextRange> pair = parse(initial)[ FD ]
Line_67 $$ int i = children.indexOf(leaf)-->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
Line_50 $$ int i = children.indexOf(current)-->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() [ CD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_11 $$ final int childIndex = children.size()[ CD ]
Line_6 $$ final String text = pair.first-->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ CD ]
Line_8 $$ boolean inWhiteSpace = initial.charAt(0) == ' ' || initial.charAt(0) == '\t'-->Line_30 $$ inWhiteSpace = !inWhiteSpace[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_56 $$ int i = children.indexOf(current)[ FD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_22 $$ allowing(child).getChars()[ FD ]
Line_34 $$ final ASTNode root = myMockery.mock(ASTNode.class)-->Line_38 $$ allowing(root).getFirstChildNode()[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_30 $$ inWhiteSpace = !inWhiteSpace[ CD ]
Line_11 $$ final int childIndex = children.size()-->Line_25 $$ will(returnValue(childrenText.get(childIndex).length()))[ FD ]
Line_34 $$ final ASTNode root = myMockery.mock(ASTNode.class)-->Line_42 $$ allowing(root).getStartOffset()[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_12 $$ final int startOffset = start[ CD ]
Line_34 $$ final ASTNode root = myMockery.mock(ASTNode.class)-->Line_40 $$ allowing(root).getTextLength()[ FD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_15 $$ children.add(child)[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_50 $$ int i = children.indexOf(current)[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_8 $$ boolean inWhiteSpace = initial.charAt(0) == ' ' || initial.charAt(0) == '\t'[ CD ]
Line_9 $$ for (int i = 1; i <= text.length(); i++) -->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_11 $$ final int childIndex = children.size()[ FD ]
Line_4 $$ final List<StringBuilder> childrenText = new ArrayList<StringBuilder>()-->Line_13 $$ childrenText.add(new StringBuilder(text.substring(start, i)))[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_6 $$ final String text = pair.first[ CD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_67 $$ int i = children.indexOf(leaf)[ FD ]
Line_9 $$ for (int i = 1; i <= text.length(); i++) -->Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) [ CD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_51 $$ return i > 0 ? children.get(i - 1) : null[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_71 $$ TabPostFormatProcessor.processViaPsi(root, pair.second, helper, useTabs, smartTabs, tabWidth)[ FD ]
Line_6 $$ final String text = pair.first-->Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) [ FD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_26 $$ allowing(child).getStartOffset()[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_39 $$ will(returnValue(children.get(0)))[ FD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_9 $$ for (int i = 1; i <= text.length(); i++) [ CD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_4 $$ final List<StringBuilder> childrenText = new ArrayList<StringBuilder>()[ CD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_71 $$ TabPostFormatProcessor.processViaPsi(root, pair.second, helper, useTabs, smartTabs, tabWidth)[ CD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_7 $$ int start = 0[ CD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_62 $$ return root == startNode ? children.get(0) : null[ CD ]
Line_14 $$ final ASTNode child = myMockery.mock(ASTNode.class, "child" + childIndex)-->Line_74 $$ actual.append(child.getChars())[ FD ]
Line_34 $$ final ASTNode root = myMockery.mock(ASTNode.class)-->Line_71 $$ TabPostFormatProcessor.processViaPsi(root, pair.second, helper, useTabs, smartTabs, tabWidth)[ FD ]
Line_9 $$ for (int i = 1; i <= text.length(); i++) -->Line_31 $$ start = i[ FD ]
Line_3 $$ final List<ASTNode> children = new ArrayList<ASTNode>()-->Line_57 $$ return i < children.size() - 1 ? children.get(i + 1) : null[ FD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_31 $$ start = i[ CD ]
Line_10 $$ if (i == text.length() || ((StringUtil.isWhiteSpace(text.charAt(i))) ^ inWhiteSpace)) -->Line_16 $$ final IElementType type = inWhiteSpace ? TokenType.WHITE_SPACE : TokenType.CODE_FRAGMENT[ CD ]
Line_2 $$ private void doPsiTest(@NotNull String initial, @NotNull String expected, boolean useTabs, boolean smartTabs, int tabWidth) -->Line_76 $$ assertEquals(expected, actual.toString())[ CD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_67 $$ int i = children.indexOf(leaf)[ CD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_56 $$ int i = children.indexOf(current)[ CD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_51 $$ return i > 0 ? children.get(i - 1) : null[ CD ]
Line_12 $$ final int startOffset = start-->Line_27 $$ will(returnValue(startOffset))[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_56 $$ int i = children.indexOf(current)[ FD ]
Line_46 $$ TabPostFormatProcessor.TreeHelper helper = new TabPostFormatProcessor.TreeHelper() -->Line_68 $$ childrenText.get(i).replace(range.getStartOffset() - leaf.getStartOffset(), range.getEndOffset() - leaf.getStartOffset(), newText)[ FD ]
