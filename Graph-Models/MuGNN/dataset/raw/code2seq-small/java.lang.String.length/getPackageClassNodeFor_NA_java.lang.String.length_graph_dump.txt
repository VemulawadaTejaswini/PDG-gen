Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_4 $$ final String packageName1 = StringUtil.getPackageName(result.getTestClass())[ CD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_7 $$ if (owner.getPsiElement() == null) [ CD ]
Line_3 $$ TestProxy owner = treeBuilder.getRoot()-->Line_7 $$ if (owner.getPsiElement() == null) [ FD ]
Line_3 $$ TestProxy owner = treeBuilder.getRoot()-->Line_11 $$ if (owner.getPsiElement() == null) [ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_10 $$ owner = getChildNodeNamed(owner, StringUtil.getShortName(result.getTestClass()))[ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_11 $$ if (owner.getPsiElement() == null) [ CD ]
Line_3 $$ TestProxy owner = treeBuilder.getRoot()-->Line_10 $$ owner = getChildNodeNamed(owner, StringUtil.getShortName(result.getTestClass()))[ FD ]
Line_5 $$ String packageName = packageName1.length() == 0 ? NO_PACKAGE : packageName1-->Line_8 $$ owner.setPsiElement(JavaPsiFacade.getInstance(project).findPackage(packageName))[ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_10 $$ owner = getChildNodeNamed(owner, StringUtil.getShortName(result.getTestClass()))[ CD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_6 $$ owner = getChildNodeNamed(owner, packageName)[ CD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_5 $$ String packageName = packageName1.length() == 0 ? NO_PACKAGE : packageName1[ CD ]
Line_6 $$ owner = getChildNodeNamed(owner, packageName)-->Line_10 $$ owner = getChildNodeNamed(owner, StringUtil.getShortName(result.getTestClass()))[ FD ]
Line_6 $$ owner = getChildNodeNamed(owner, packageName)-->Line_7 $$ if (owner.getPsiElement() == null) [ FD ]
Line_11 $$ if (owner.getPsiElement() == null) -->Line_12 $$ final TestProxy finalOwner = owner[ CD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_19 $$ return owner[ CD ]
Line_3 $$ TestProxy owner = treeBuilder.getRoot()-->Line_8 $$ owner.setPsiElement(JavaPsiFacade.getInstance(project).findPackage(packageName))[ FD ]
Line_5 $$ String packageName = packageName1.length() == 0 ? NO_PACKAGE : packageName1-->Line_6 $$ owner = getChildNodeNamed(owner, packageName)[ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_4 $$ final String packageName1 = StringUtil.getPackageName(result.getTestClass())[ FD ]
Line_6 $$ owner = getChildNodeNamed(owner, packageName)-->Line_11 $$ if (owner.getPsiElement() == null) [ FD ]
Line_10 $$ owner = getChildNodeNamed(owner, StringUtil.getShortName(result.getTestClass()))-->Line_11 $$ if (owner.getPsiElement() == null) [ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_3 $$ TestProxy owner = treeBuilder.getRoot()[ CD ]
Line_6 $$ owner = getChildNodeNamed(owner, packageName)-->Line_8 $$ owner.setPsiElement(JavaPsiFacade.getInstance(project).findPackage(packageName))[ FD ]
Line_12 $$ final TestProxy finalOwner = owner-->Line_15 $$ finalOwner.setPsiElement(ClassUtil.findPsiClass(PsiManager.getInstance(project), result.getTestClass()))[ FD ]
Line_4 $$ final String packageName1 = StringUtil.getPackageName(result.getTestClass())-->Line_5 $$ String packageName = packageName1.length() == 0 ? NO_PACKAGE : packageName1[ FD ]
Line_3 $$ TestProxy owner = treeBuilder.getRoot()-->Line_6 $$ owner = getChildNodeNamed(owner, packageName)[ FD ]
Line_2 $$ private TestProxy getPackageClassNodeFor(final TestResultMessage result) -->Line_15 $$ finalOwner.setPsiElement(ClassUtil.findPsiClass(PsiManager.getInstance(project), result.getTestClass()))[ FD ]
Line_11 $$ if (owner.getPsiElement() == null) -->Line_13 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_7 $$ if (owner.getPsiElement() == null) -->Line_8 $$ owner.setPsiElement(JavaPsiFacade.getInstance(project).findPackage(packageName))[ CD ]
Line_13 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_15 $$ finalOwner.setPsiElement(ClassUtil.findPsiClass(PsiManager.getInstance(project), result.getTestClass()))[ CD ]
