Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_10 $$ startOffset += delimiterLength[ CD ]
Line_7 $$ delimiterLength = 3-->Line_10 $$ startOffset += delimiterLength[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) [ CD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_5 $$ final String afterPrefix = text.substring(startOffset)[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_11 $$ int endOffset = text.length()[ FD ]
Line_10 $$ startOffset += delimiterLength-->Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) [ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) [ FD ]
Line_7 $$ delimiterLength = 3-->Line_13 $$ endOffset -= delimiterLength[ FD ]
Line_4 $$ int delimiterLength = 1-->Line_7 $$ delimiterLength = 3[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_6 $$ if (afterPrefix.startsWith("\"\"\"") || afterPrefix.startsWith("'''")) [ CD ]
Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) -->Line_13 $$ endOffset -= delimiterLength[ CD ]
Line_4 $$ int delimiterLength = 1-->Line_13 $$ endOffset -= delimiterLength[ FD ]
Line_6 $$ if (afterPrefix.startsWith("\"\"\"") || afterPrefix.startsWith("'''")) -->Line_7 $$ delimiterLength = 3[ CD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_9 $$ final String delimiter = text.substring(startOffset, startOffset + delimiterLength)[ CD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_3 $$ int startOffset = getPrefixLength(text)[ CD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_5 $$ final String afterPrefix = text.substring(startOffset)[ CD ]
Line_3 $$ int startOffset = getPrefixLength(text)-->Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) [ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_4 $$ int delimiterLength = 1[ CD ]
Line_3 $$ int startOffset = getPrefixLength(text)-->Line_9 $$ final String delimiter = text.substring(startOffset, startOffset + delimiterLength)[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_11 $$ int endOffset = text.length()[ CD ]
Line_3 $$ int startOffset = getPrefixLength(text)-->Line_5 $$ final String afterPrefix = text.substring(startOffset)[ FD ]
Line_3 $$ int startOffset = getPrefixLength(text)-->Line_10 $$ startOffset += delimiterLength[ FD ]
Line_4 $$ int delimiterLength = 1-->Line_10 $$ startOffset += delimiterLength[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_9 $$ final String delimiter = text.substring(startOffset, startOffset + delimiterLength)[ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_15 $$ return new TextRange(startOffset, endOffset)[ CD ]
Line_11 $$ int endOffset = text.length()-->Line_13 $$ endOffset -= delimiterLength[ FD ]
Line_5 $$ final String afterPrefix = text.substring(startOffset)-->Line_6 $$ if (afterPrefix.startsWith("\"\"\"") || afterPrefix.startsWith("'''")) [ FD ]
Line_9 $$ final String delimiter = text.substring(startOffset, startOffset + delimiterLength)-->Line_12 $$ if (text.substring(startOffset).endsWith(delimiter)) [ FD ]
Line_2 $$ public static TextRange getNodeTextRange(final String text) -->Line_3 $$ int startOffset = getPrefixLength(text)[ FD ]
