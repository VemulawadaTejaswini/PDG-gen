Line_8 $$ if (!normalizedPattern.startsWith("/")) -->Line_10 $$ final PrefixItem[] items = new PrefixItem[patDirs.length][ CD ]
Line_6 $$ normalizedPattern = normalizedPattern.substring(1, normalizedPattern.length())-->Line_9 $$ final String[] patDirs = normalizedPattern.split(ourSeparatorPattern)[ FD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_8 $$ if (!normalizedPattern.startsWith("/")) [ CD ]
Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')-->Line_5 $$ if (normalizedPattern.startsWith("/") && normalizedPattern.length() > 1) [ FD ]
Line_8 $$ if (!normalizedPattern.startsWith("/")) -->Line_11 $$ for (int i = 0; i < patDirs.length; i++) [ CD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_3 $$ myIncludePatterns.add(convertToRegexPattern(antPattern, myCaseSensitive))[ CD ]
Line_5 $$ if (normalizedPattern.startsWith("/") && normalizedPattern.length() > 1) -->Line_6 $$ normalizedPattern = normalizedPattern.substring(1, normalizedPattern.length())[ CD ]
Line_6 $$ normalizedPattern = normalizedPattern.substring(1, normalizedPattern.length())-->Line_8 $$ if (!normalizedPattern.startsWith("/")) [ FD ]
Line_10 $$ final PrefixItem[] items = new PrefixItem[patDirs.length]-->Line_14 $$ myCouldBeIncludedPatterns.add(items)[ FD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')[ FD ]
Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')-->Line_9 $$ final String[] patDirs = normalizedPattern.split(ourSeparatorPattern)[ FD ]
Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')-->Line_8 $$ if (!normalizedPattern.startsWith("/")) [ FD ]
Line_11 $$ for (int i = 0; i < patDirs.length; i++) -->Line_12 $$ items[i] = new PrefixItem(patDirs[i])[ CD ]
Line_8 $$ if (!normalizedPattern.startsWith("/")) -->Line_14 $$ myCouldBeIncludedPatterns.add(items)[ CD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_5 $$ if (normalizedPattern.startsWith("/") && normalizedPattern.length() > 1) [ CD ]
Line_8 $$ if (!normalizedPattern.startsWith("/")) -->Line_9 $$ final String[] patDirs = normalizedPattern.split(ourSeparatorPattern)[ CD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')[ CD ]
Line_2 $$ public final void addIncludePattern(final String antPattern) -->Line_3 $$ myIncludePatterns.add(convertToRegexPattern(antPattern, myCaseSensitive))[ FD ]
Line_4 $$ String normalizedPattern = antPattern.endsWith("/") || antPattern.endsWith(File.separator) ? antPattern.replace(File.separatorChar, '/') + "**" : antPattern.replace(File.separatorChar, '/')-->Line_6 $$ normalizedPattern = normalizedPattern.substring(1, normalizedPattern.length())[ FD ]
