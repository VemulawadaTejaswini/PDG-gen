Line_2 $$ protected void addPatternFilter() -->Line_3 $$ PackageChooser chooser = new PackageChooserDialog(CodeInsightBundle.message("coverage.pattern.filter.editor.choose.package.title"), myProject)[ CD ]
Line_2 $$ protected void addPatternFilter() -->Line_4 $$ if (chooser.showAndGet()) [ CD ]
Line_3 $$ PackageChooser chooser = new PackageChooserDialog(CodeInsightBundle.message("coverage.pattern.filter.editor.choose.package.title"), myProject)-->Line_5 $$ List<PsiPackage> packages = chooser.getSelectedPackages()[ FD ]
Line_4 $$ if (chooser.showAndGet()) -->Line_6 $$ if (!packages.isEmpty()) [ CD ]
Line_9 $$ final String pattern = fqName.length() > 0 ? fqName + ".*" : "*"-->Line_10 $$ myTableModel.addRow(createFilter(pattern))[ FD ]
Line_7 $$ for (final PsiPackage aPackage : packages) -->Line_8 $$ final String fqName = aPackage.getQualifiedName()[ FD ]
Line_8 $$ final String fqName = aPackage.getQualifiedName()-->Line_9 $$ final String pattern = fqName.length() > 0 ? fqName + ".*" : "*"[ FD ]
Line_6 $$ if (!packages.isEmpty()) -->Line_12 $$ int row = myTableModel.getRowCount() - 1[ CD ]
Line_5 $$ List<PsiPackage> packages = chooser.getSelectedPackages()-->Line_6 $$ if (!packages.isEmpty()) [ FD ]
Line_4 $$ if (chooser.showAndGet()) -->Line_5 $$ List<PsiPackage> packages = chooser.getSelectedPackages()[ CD ]
Line_6 $$ if (!packages.isEmpty()) -->Line_15 $$ myTable.requestFocus()[ CD ]
Line_3 $$ PackageChooser chooser = new PackageChooserDialog(CodeInsightBundle.message("coverage.pattern.filter.editor.choose.package.title"), myProject)-->Line_4 $$ if (chooser.showAndGet()) [ FD ]
Line_12 $$ int row = myTableModel.getRowCount() - 1-->Line_13 $$ myTable.getSelectionModel().setSelectionInterval(row, row)[ FD ]
Line_6 $$ if (!packages.isEmpty()) -->Line_14 $$ myTable.scrollRectToVisible(myTable.getCellRect(row, 0, true))[ CD ]
Line_12 $$ int row = myTableModel.getRowCount() - 1-->Line_14 $$ myTable.scrollRectToVisible(myTable.getCellRect(row, 0, true))[ FD ]
Line_6 $$ if (!packages.isEmpty()) -->Line_13 $$ myTable.getSelectionModel().setSelectionInterval(row, row)[ CD ]
