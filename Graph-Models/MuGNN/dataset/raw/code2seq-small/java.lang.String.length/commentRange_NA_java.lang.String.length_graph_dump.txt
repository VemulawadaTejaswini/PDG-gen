Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_31 $$ LogicalPosition pos = new LogicalPosition(caretPosition.line + 1, caretPosition.column)[ CD ]
Line_3 $$ final CharSequence chars = myDocument.getCharsSequence()-->Line_5 $$ if (startOffset == 0 || chars.charAt(startOffset - 1) == '\n') [ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_3 $$ final CharSequence chars = myDocument.getCharsSequence()[ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_27 $$ nestingSuffix.append(commentSuffix.startsWith("\n") ? commentSuffix.substring(1) : commentSuffix)[ CD ]
Line_22 $$ final StringBuilder nestingPrefix = new StringBuilder(space).append(commentPrefix)-->Line_24 $$ nestingPrefix.append("\n")[ FD ]
Line_11 $$ final FileType fileType = myFile.getFileType()-->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_7 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(myProject)-->Line_16 $$ minIndent = codeStyleManager.zeroIndent()[ FD ]
Line_15 $$ if (minIndent == null) -->Line_16 $$ minIndent = codeStyleManager.zeroIndent()[ CD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_11 $$ final FileType fileType = myFile.getFileType()[ CD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_12 $$ int line1 = myEditor.offsetToLogicalPosition(startOffset).line[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_27 $$ nestingSuffix.append(commentSuffix.startsWith("\n") ? commentSuffix.substring(1) : commentSuffix)[ FD ]
Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)-->Line_20 $$ space = ""[ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_39 $$ myCaret.moveToLogicalPosition(pos)[ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_33 $$ return[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_38 $$ LogicalPosition pos = new LogicalPosition(caretPosition.line, caretPosition.column + commentPrefix.length())[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_30 $$ myCaret.setSelection(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_13 $$ int line2 = myEditor.offsetToLogicalPosition(endOffset - 1).line[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_22 $$ final StringBuilder nestingPrefix = new StringBuilder(space).append(commentPrefix)[ FD ]
Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)-->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_23 $$ if (!commentPrefix.endsWith("\n")) -->Line_24 $$ nestingPrefix.append("\n")[ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_26 $$ final StringBuilder nestingSuffix = new StringBuilder(space)[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_12 $$ int line1 = myEditor.offsetToLogicalPosition(startOffset).line[ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_36 $$ TextRange range = insertNestedComments(startOffset, endOffset, commentPrefix, commentSuffix, commenter)[ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_22 $$ final StringBuilder nestingPrefix = new StringBuilder(space).append(commentPrefix)[ CD ]
Line_12 $$ int line1 = myEditor.offsetToLogicalPosition(startOffset).line-->Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)[ FD ]
Line_5 $$ if (startOffset == 0 || chars.charAt(startOffset - 1) == '\n') -->Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') [ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_8 $$ CommonCodeStyleSettings settings = CodeStyleSettingsManager.getSettings(myProject).getCommonSettings(myFile.getLanguage())[ CD ]
Line_22 $$ final StringBuilder nestingPrefix = new StringBuilder(space).append(commentPrefix)-->Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)[ FD ]
Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)-->Line_16 $$ minIndent = codeStyleManager.zeroIndent()[ FD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ CD ]
Line_26 $$ final StringBuilder nestingSuffix = new StringBuilder(space)-->Line_27 $$ nestingSuffix.append(commentSuffix.startsWith("\n") ? commentSuffix.substring(1) : commentSuffix)[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_28 $$ nestingSuffix.append("\n")[ CD ]
Line_26 $$ final StringBuilder nestingSuffix = new StringBuilder(space)-->Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)[ FD ]
Line_31 $$ LogicalPosition pos = new LogicalPosition(caretPosition.line + 1, caretPosition.column)-->Line_39 $$ myCaret.moveToLogicalPosition(pos)[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_7 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(myProject)[ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_23 $$ if (!commentPrefix.endsWith("\n")) [ CD ]
Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)-->Line_37 $$ myCaret.setSelection(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_32 $$ myCaret.moveToLogicalPosition(pos)[ CD ]
Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)-->Line_30 $$ myCaret.setSelection(range.getStartOffset(), range.getEndOffset())[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) [ CD ]
Line_26 $$ final StringBuilder nestingSuffix = new StringBuilder(space)-->Line_28 $$ nestingSuffix.append("\n")[ FD ]
Line_7 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(myProject)-->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_16 $$ minIndent = codeStyleManager.zeroIndent()-->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_5 $$ if (startOffset == 0 || chars.charAt(startOffset - 1) == '\n') [ CD ]
Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') -->Line_9 $$ String space[ CD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)[ CD ]
Line_11 $$ final FileType fileType = myFile.getFileType()-->Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)[ FD ]
Line_9 $$ String space-->Line_18 $$ space = codeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_20 $$ space = ""[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_23 $$ if (!commentPrefix.endsWith("\n")) [ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_4 $$ LogicalPosition caretPosition = myCaret.getLogicalPosition()[ CD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_29 $$ TextRange range = insertNestedComments(startOffset, endOffset, nestingPrefix.toString(), nestingSuffix.toString(), commenter)[ FD ]
Line_9 $$ String space-->Line_20 $$ space = ""[ FD ]
Line_10 $$ if (!settings.BLOCK_COMMENT_AT_FIRST_COLUMN) -->Line_15 $$ if (minIndent == null) [ CD ]
Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)-->Line_15 $$ if (minIndent == null) [ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_36 $$ TextRange range = insertNestedComments(startOffset, endOffset, commentPrefix, commentSuffix, commenter)[ FD ]
Line_13 $$ int line2 = myEditor.offsetToLogicalPosition(endOffset - 1).line-->Line_14 $$ Indent minIndent = CommentUtil.getMinLineIndent(myProject, myDocument, line1, line2, fileType)[ FD ]
Line_2 $$ public void commentRange(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_37 $$ myCaret.setSelection(range.getStartOffset(), range.getEndOffset())[ CD ]
Line_3 $$ final CharSequence chars = myDocument.getCharsSequence()-->Line_6 $$ if (endOffset == myDocument.getTextLength() || endOffset > 0 && chars.charAt(endOffset - 1) == '\n') [ FD ]
Line_31 $$ LogicalPosition pos = new LogicalPosition(caretPosition.line + 1, caretPosition.column)-->Line_32 $$ myCaret.moveToLogicalPosition(pos)[ FD ]
