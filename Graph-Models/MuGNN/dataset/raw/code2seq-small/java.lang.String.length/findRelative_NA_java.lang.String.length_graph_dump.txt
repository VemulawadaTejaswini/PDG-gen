Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_8 $$ final int childNameEnd = separatorIdx >= 0 ? separatorIdx : textLen[ CD ]
Line_10 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))-->Line_15 $$ return child.findRelative(text, childNameEnd + 1, create, table)[ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_6 $$ final int textLen = text.length()[ CD ]
Line_18 $$ if (create) -->Line_19 $$ return addChild(table, text, nameStartIndex, childNameEnd)[ CD ]
Line_8 $$ final int childNameEnd = separatorIdx >= 0 ? separatorIdx : textLen-->Line_19 $$ return addChild(table, text, nameStartIndex, childNameEnd)[ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_21 $$ return null[ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_7 $$ final int separatorIdx = text.indexOf(mySeparator, nameStartIndex)[ FD ]
Line_11 $$ if (child != null) -->Line_12 $$ if (separatorIdx < 0) [ CD ]
Line_7 $$ final int separatorIdx = text.indexOf(mySeparator, nameStartIndex)-->Line_12 $$ if (separatorIdx < 0) [ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_6 $$ final int textLen = text.length()[ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_3 $$ if (myChildren == null && !create) [ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_9 $$ if (myChildren != null) [ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_15 $$ return child.findRelative(text, childNameEnd + 1, create, table)[ FD ]
Line_10 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))-->Line_11 $$ if (child != null) [ FD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_18 $$ if (create) [ CD ]
Line_3 $$ if (myChildren == null && !create) -->Line_4 $$ return null[ CD ]
Line_9 $$ if (myChildren != null) -->Line_10 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))[ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_19 $$ return addChild(table, text, nameStartIndex, childNameEnd)[ FD ]
Line_12 $$ if (separatorIdx < 0) -->Line_13 $$ return child[ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_3 $$ if (myChildren == null && !create) [ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_7 $$ final int separatorIdx = text.indexOf(mySeparator, nameStartIndex)[ CD ]
Line_8 $$ final int childNameEnd = separatorIdx >= 0 ? separatorIdx : textLen-->Line_10 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))[ FD ]
Line_9 $$ if (myChildren != null) -->Line_11 $$ if (child != null) [ CD ]
Line_2 $$ private Node<T> findRelative(final String text, final int nameStartIndex, final boolean create, final StringInterner table) -->Line_10 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))[ FD ]
Line_11 $$ if (child != null) -->Line_15 $$ return child.findRelative(text, childNameEnd + 1, create, table)[ CD ]
