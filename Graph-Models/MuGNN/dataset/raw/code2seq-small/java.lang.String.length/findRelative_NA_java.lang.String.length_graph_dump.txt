Line_12 $$ if (child != null) -->Line_16 $$ return child.findRelative(text, childNameEnd + 1, create, table)[ CD ]
Line_10 $$ if (myChildren != null) -->Line_12 $$ if (child != null) [ CD ]
Line_9 $$ final int childNameEnd = separatorIdx >= 0 ? separatorIdx : textLen-->Line_20 $$ return addChild(table, text, nameStartIndex, childNameEnd)[ FD ]
Line_13 $$ if (separatorIdx < 0) -->Line_14 $$ return child[ CD ]
Line_11 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))-->Line_16 $$ return child.findRelative(text, childNameEnd + 1, create, table)[ FD ]
Line_11 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))-->Line_12 $$ if (child != null) [ FD ]
Line_9 $$ final int childNameEnd = separatorIdx >= 0 ? separatorIdx : textLen-->Line_11 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))[ FD ]
Line_19 $$ if (create) -->Line_20 $$ return addChild(table, text, nameStartIndex, childNameEnd)[ CD ]
Line_12 $$ if (child != null) -->Line_13 $$ if (separatorIdx < 0) [ CD ]
Line_10 $$ if (myChildren != null) -->Line_11 $$ final Node<T> child = myChildren.get(text.substring(nameStartIndex, childNameEnd))[ CD ]
Line_4 $$ if (myChildren == null && !create) -->Line_5 $$ return null[ CD ]
Line_8 $$ final int separatorIdx = text.indexOf(mySeparator, nameStartIndex)-->Line_13 $$ if (separatorIdx < 0) [ FD ]
