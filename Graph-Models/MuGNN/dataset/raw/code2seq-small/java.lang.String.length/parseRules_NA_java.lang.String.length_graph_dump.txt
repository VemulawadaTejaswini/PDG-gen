Line_3 $$ List<Rule> result = new ArrayList<Rule>()-->Line_11 $$ result.add(new Rule())[ FD ]
Line_5 $$ while (remaining.length() > 0) -->Line_15 $$ remaining = remaining.substring(matcher.end())[ CD ]
Line_10 $$ if (matcher.group(2) != null) -->Line_13 $$ result.add(new Rule(Integer.parseInt(matcher.group(4)), matcher.group(5), matcher.group(7), matcher.group(9), matcher.group(10), "g".equals(matcher.group(11)), "L".equals(matcher.group(12))))[ CD ]
Line_4 $$ String remaining = rules.trim()-->Line_5 $$ while (remaining.length() > 0) [ FD ]
Line_15 $$ remaining = remaining.substring(matcher.end())-->Line_5 $$ while (remaining.length() > 0) [ FD ]
Line_5 $$ while (remaining.length() > 0) -->Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)[ CD ]
Line_4 $$ String remaining = rules.trim()-->Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)[ FD ]
Line_2 $$ static List<Rule> parseRules(String rules) -->Line_4 $$ String remaining = rules.trim()[ FD ]
Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)-->Line_15 $$ remaining = remaining.substring(matcher.end())[ FD ]
Line_2 $$ static List<Rule> parseRules(String rules) -->Line_4 $$ String remaining = rules.trim()[ CD ]
Line_2 $$ static List<Rule> parseRules(String rules) -->Line_3 $$ List<Rule> result = new ArrayList<Rule>()[ CD ]
Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)-->Line_10 $$ if (matcher.group(2) != null) [ FD ]
Line_4 $$ String remaining = rules.trim()-->Line_15 $$ remaining = remaining.substring(matcher.end())[ FD ]
Line_2 $$ static List<Rule> parseRules(String rules) -->Line_5 $$ while (remaining.length() > 0) [ CD ]
Line_5 $$ while (remaining.length() > 0) -->Line_10 $$ if (matcher.group(2) != null) [ CD ]
Line_5 $$ while (remaining.length() > 0) -->Line_7 $$ if (!matcher.lookingAt()) [ CD ]
Line_2 $$ static List<Rule> parseRules(String rules) -->Line_17 $$ return result[ CD ]
Line_15 $$ remaining = remaining.substring(matcher.end())-->Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)[ FD ]
Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)-->Line_13 $$ result.add(new Rule(Integer.parseInt(matcher.group(4)), matcher.group(5), matcher.group(7), matcher.group(9), matcher.group(10), "g".equals(matcher.group(11)), "L".equals(matcher.group(12))))[ FD ]
Line_3 $$ List<Rule> result = new ArrayList<Rule>()-->Line_13 $$ result.add(new Rule(Integer.parseInt(matcher.group(4)), matcher.group(5), matcher.group(7), matcher.group(9), matcher.group(10), "g".equals(matcher.group(11)), "L".equals(matcher.group(12))))[ FD ]
Line_6 $$ Matcher matcher = ruleParser.matcher(remaining)-->Line_7 $$ if (!matcher.lookingAt()) [ FD ]
Line_10 $$ if (matcher.group(2) != null) -->Line_11 $$ result.add(new Rule())[ CD ]
