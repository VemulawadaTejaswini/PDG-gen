Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)[ CD ]
Line_11 $$ if (c == '/') -->Line_12 $$ round = true[ CD ]
Line_78 $$ if (round) -->Line_81 $$ dateTime.addHours(sign * num)[ CD ]
Line_16 $$ if (c == '+') -->Line_18 $$ if (c == '-') [ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_81 $$ dateTime.addHours(sign * num)[ FD ]
Line_92 $$ if (round) -->Line_93 $$ propertyToRound = dateTime.secondOfMinute()[ CD ]
Line_102 $$ if (roundUp) -->Line_107 $$ propertyToRound.roundFloor()[ CD ]
Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))-->Line_41 $$ if (num != 1) [ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_86 $$ propertyToRound = dateTime.minuteOfHour()[ FD ]
Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) -->Line_35 $$ if (i >= mathString.length()) [ CD ]
Line_8 $$ char c = mathString.charAt(i++)-->Line_16 $$ if (c == '+') [ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_45 $$ char unit = mathString.charAt(i++)[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_3 $$ if (timeZone == null) [ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_7 $$ for (int i = 0; i < mathString.length(); ) [ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_10 $$ final int sign[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_27 $$ final int num[ CD ]
Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) -->Line_32 $$ while (i < mathString.length() && Character.isDigit(mathString.charAt(i))) [ CD ]
Line_3 $$ if (timeZone == null) -->Line_4 $$ timeZone = DateTimeZone.UTC[ CD ]
Line_56 $$ if (round) -->Line_57 $$ propertyToRound = dateTime.monthOfYear()[ CD ]
Line_70 $$ if (round) -->Line_71 $$ propertyToRound = dateTime.dayOfMonth()[ CD ]
Line_27 $$ final int num-->Line_29 $$ num = 1[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_9 $$ final boolean round[ CD ]
Line_49 $$ if (round) -->Line_52 $$ dateTime.addYears(sign * num)[ CD ]
Line_13 $$ sign = 1-->Line_19 $$ sign = -1[ FD ]
Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) -->Line_31 $$ int numFrom = i[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_8 $$ char c = mathString.charAt(i++)[ FD ]
Line_11 $$ if (c == '/') -->Line_13 $$ sign = 1[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_24 $$ if (i >= mathString.length()) [ FD ]
Line_18 $$ if (c == '-') -->Line_19 $$ sign = -1[ CD ]
Line_27 $$ final int num-->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_66 $$ dateTime.addWeeks(sign * num)[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_7 $$ for (int i = 0; i < mathString.length(); ) [ FD ]
Line_11 $$ if (c == '/') -->Line_15 $$ round = false[ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_45 $$ char unit = mathString.charAt(i++)[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_11 $$ if (c == '/') [ CD ]
Line_78 $$ if (round) -->Line_79 $$ propertyToRound = dateTime.hourOfDay()[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_8 $$ char c = mathString.charAt(i++)[ CD ]
Line_102 $$ if (roundUp) -->Line_104 $$ propertyToRound.roundFloor()[ CD ]
Line_16 $$ if (c == '+') -->Line_17 $$ sign = 1[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_73 $$ dateTime.addDays(sign * num)[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_105 $$ dateTime.addMillis(-1)[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_59 $$ dateTime.addMonths(sign * num)[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_8 $$ char c = mathString.charAt(i++)[ FD ]
Line_13 $$ sign = 1-->Line_17 $$ sign = 1[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_52 $$ dateTime.addYears(sign * num)[ FD ]
Line_70 $$ if (round) -->Line_73 $$ dateTime.addDays(sign * num)[ CD ]
Line_11 $$ if (c == '/') -->Line_16 $$ if (c == '+') [ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_24 $$ if (i >= mathString.length()) [ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_57 $$ propertyToRound = dateTime.monthOfYear()[ FD ]
Line_85 $$ if (round) -->Line_88 $$ dateTime.addMinutes(sign * num)[ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_95 $$ dateTime.addSeconds(sign * num)[ FD ]
Line_102 $$ if (roundUp) -->Line_105 $$ dateTime.addMillis(-1)[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_101 $$ if (propertyToRound != null) [ CD ]
Line_49 $$ if (round) -->Line_50 $$ propertyToRound = dateTime.yearOfCentury()[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_45 $$ char unit = mathString.charAt(i++)[ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_93 $$ propertyToRound = dateTime.secondOfMinute()[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) [ FD ]
Line_40 $$ if (round) -->Line_41 $$ if (num != 1) [ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_24 $$ if (i >= mathString.length()) [ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_111 $$ return dateTime.getMillis()[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_40 $$ if (round) [ CD ]
Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) -->Line_29 $$ num = 1[ CD ]
Line_9 $$ final boolean round-->Line_12 $$ round = true[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_64 $$ propertyToRound = dateTime.weekOfWeekyear()[ FD ]
Line_8 $$ char c = mathString.charAt(i++)-->Line_18 $$ if (c == '-') [ FD ]
Line_10 $$ final int sign-->Line_17 $$ sign = 1[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_35 $$ if (i >= mathString.length()) [ FD ]
Line_10 $$ final int sign-->Line_19 $$ sign = -1[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) [ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_32 $$ while (i < mathString.length() && Character.isDigit(mathString.charAt(i))) [ FD ]
Line_8 $$ char c = mathString.charAt(i++)-->Line_11 $$ if (c == '/') [ FD ]
Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) -->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ CD ]
Line_12 $$ round = true-->Line_15 $$ round = false[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_3 $$ if (timeZone == null) [ FD ]
Line_17 $$ sign = 1-->Line_19 $$ sign = -1[ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_50 $$ propertyToRound = dateTime.yearOfCentury()[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_4 $$ timeZone = DateTimeZone.UTC[ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_35 $$ if (i >= mathString.length()) [ FD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_71 $$ propertyToRound = dateTime.dayOfMonth()[ FD ]
Line_63 $$ if (round) -->Line_66 $$ dateTime.addWeeks(sign * num)[ CD ]
Line_85 $$ if (round) -->Line_86 $$ propertyToRound = dateTime.minuteOfHour()[ CD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_32 $$ while (i < mathString.length() && Character.isDigit(mathString.charAt(i))) [ FD ]
Line_27 $$ final int num-->Line_41 $$ if (num != 1) [ FD ]
Line_7 $$ for (int i = 0; i < mathString.length(); ) -->Line_33 $$ i++[ FD ]
Line_63 $$ if (round) -->Line_64 $$ propertyToRound = dateTime.weekOfWeekyear()[ CD ]
Line_92 $$ if (round) -->Line_95 $$ dateTime.addSeconds(sign * num)[ CD ]
Line_9 $$ final boolean round-->Line_15 $$ round = false[ FD ]
Line_10 $$ final int sign-->Line_13 $$ sign = 1[ FD ]
Line_32 $$ while (i < mathString.length() && Character.isDigit(mathString.charAt(i))) -->Line_33 $$ i++[ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_28 $$ if (!Character.isDigit(mathString.charAt(i))) [ FD ]
Line_56 $$ if (round) -->Line_59 $$ dateTime.addMonths(sign * num)[ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_79 $$ propertyToRound = dateTime.hourOfDay()[ FD ]
Line_29 $$ num = 1-->Line_41 $$ if (num != 1) [ FD ]
Line_29 $$ num = 1-->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ FD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ FD ]
Line_31 $$ int numFrom = i-->Line_38 $$ num = Integer.parseInt(mathString.substring(numFrom, i))[ FD ]
Line_102 $$ if (roundUp) -->Line_103 $$ propertyToRound.add(1)[ CD ]
Line_101 $$ if (propertyToRound != null) -->Line_102 $$ if (roundUp) [ CD ]
Line_2 $$ private long parseMath(String mathString, long time, boolean roundUp, DateTimeZone timeZone) throws ElasticsearchParseException -->Line_111 $$ return dateTime.getMillis()[ CD ]
Line_6 $$ MutableDateTime dateTime = new MutableDateTime(time, timeZone)-->Line_88 $$ dateTime.addMinutes(sign * num)[ FD ]
