Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_19 $$ record.setUsedHandler(h)[ FD ]
Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_20 $$ return new GitRevisionNumber(record.getHash(), record.getDate())[ FD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_6 $$ h.setSilent(true)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_3 $$ filePath = getLastCommitName(project, filePath)[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_11 $$ String result = h.run()[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_8 $$ h.addParameters(!StringUtil.isEmpty(branch) ? branch : "--all")[ FD ]
Line_11 $$ String result = h.run()-->Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_12 $$ if (result.length() == 0) [ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_11 $$ String result = h.run()[ FD ]
Line_12 $$ if (result.length() == 0) -->Line_13 $$ return null[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_16 $$ if (record == null) [ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_9 $$ h.endOptions()[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_19 $$ record.setUsedHandler(h)[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_10 $$ h.addRelativePaths(filePath)[ FD ]
Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME)-->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_16 $$ if (record == null) -->Line_17 $$ return null[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_3 $$ filePath = getLastCommitName(project, filePath)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME)[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_9 $$ h.endOptions()[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_8 $$ h.addParameters(!StringUtil.isEmpty(branch) ? branch : "--all")[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_10 $$ h.addRelativePaths(filePath)[ CD ]
Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME)-->Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ CD ]
Line_11 $$ String result = h.run()-->Line_12 $$ if (result.length() == 0) [ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_6 $$ h.setSilent(true)[ CD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ CD ]
Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_16 $$ if (record == null) [ FD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_20 $$ return new GitRevisionNumber(record.getHash(), record.getDate())[ CD ]
Line_15 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_19 $$ record.setUsedHandler(h)[ FD ]
Line_2 $$ public static VcsRevisionNumber getCurrentRevision(@NotNull Project project, @NotNull FilePath filePath, @Nullable String branch) throws VcsException -->Line_8 $$ h.addParameters(!StringUtil.isEmpty(branch) ? branch : "--all")[ FD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_10 $$ h.addRelativePaths(filePath)[ FD ]
