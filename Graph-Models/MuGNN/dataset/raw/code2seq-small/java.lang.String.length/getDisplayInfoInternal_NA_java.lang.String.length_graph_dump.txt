Line_4 $$ final int lineNumber = myXBreakpoint.getSourcePosition().getLine() + 1-->Line_48 $$ return DebuggerBundle.message("line.breakpoint.display.name", lineNumber)[ FD ]
Line_3 $$ if (isValid()) -->Line_6 $$ final boolean hasClassInfo = className != null && className.length() > 0[ CD ]
Line_21 $$ if (totalTextLength != -1) -->Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) [ CD ]
Line_8 $$ final String displayName = methodName != null ? methodName + "()" : null-->Line_23 $$ int offset = totalTextLength - (hasMethodInfo ? displayName.length() : 0)[ FD ]
Line_8 $$ final String displayName = methodName != null ? methodName + "()" : null-->Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) [ FD ]
Line_3 $$ if (isValid()) -->Line_9 $$ final boolean hasMethodInfo = displayName != null && displayName.length() > 0[ CD ]
Line_14 $$ String packageName = null-->Line_18 $$ packageName = className.substring(0, dotIndex)[ FD ]
Line_33 $$ if (isFile) -->Line_35 $$ if (hasClassInfo) [ CD ]
Line_3 $$ if (isValid()) -->Line_48 $$ return DebuggerBundle.message("line.breakpoint.display.name", lineNumber)[ CD ]
Line_6 $$ final boolean hasClassInfo = className != null && className.length() > 0-->Line_10 $$ if (hasClassInfo || hasMethodInfo) [ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_30 $$ info.append(className)[ FD ]
Line_5 $$ String className = getClassName()-->Line_30 $$ info.append(className)[ FD ]
Line_2 $$ private String getDisplayInfoInternal(boolean showPackageInfo, int totalTextLength) -->Line_3 $$ if (isValid()) [ CD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_38 $$ info.append(displayName)[ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_34 $$ info.append(":")[ FD ]
Line_16 $$ final int dotIndex = className.lastIndexOf(".")-->Line_18 $$ packageName = className.substring(0, dotIndex)[ FD ]
Line_9 $$ final boolean hasMethodInfo = displayName != null && displayName.length() > 0-->Line_10 $$ if (hasClassInfo || hasMethodInfo) [ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_41 $$ info.append(" (").append(packageName).append(")")[ FD ]
Line_17 $$ if (dotIndex >= 0 && !isFile) -->Line_18 $$ packageName = className.substring(0, dotIndex)[ CD ]
Line_3 $$ if (isValid()) -->Line_7 $$ final String methodName = getMethodName()[ CD ]
Line_3 $$ if (isValid()) -->Line_5 $$ String className = getClassName()[ CD ]
Line_8 $$ final String displayName = methodName != null ? methodName + "()" : null-->Line_9 $$ final boolean hasMethodInfo = displayName != null && displayName.length() > 0[ FD ]
Line_19 $$ className = className.substring(dotIndex + 1)-->Line_30 $$ info.append(className)[ FD ]
Line_2 $$ private String getDisplayInfoInternal(boolean showPackageInfo, int totalTextLength) -->Line_50 $$ return DebuggerBundle.message("status.breakpoint.invalid")[ CD ]
Line_19 $$ className = className.substring(dotIndex + 1)-->Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) [ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_26 $$ info.append("...")[ FD ]
Line_15 $$ if (hasClassInfo) -->Line_30 $$ info.append(className)[ CD ]
Line_5 $$ String className = getClassName()-->Line_19 $$ className = className.substring(dotIndex + 1)[ FD ]
Line_14 $$ String packageName = null-->Line_41 $$ info.append(" (").append(packageName).append(")")[ FD ]
Line_2 $$ private String getDisplayInfoInternal(boolean showPackageInfo, int totalTextLength) -->Line_21 $$ if (totalTextLength != -1) [ FD ]
Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) -->Line_24 $$ if (offset > 0 && offset < className.length()) [ CD ]
Line_24 $$ if (offset > 0 && offset < className.length()) -->Line_25 $$ className = className.substring(className.length() - offset)[ CD ]
Line_24 $$ if (offset > 0 && offset < className.length()) -->Line_26 $$ info.append("...")[ CD ]
Line_5 $$ String className = getClassName()-->Line_24 $$ if (offset > 0 && offset < className.length()) [ FD ]
Line_32 $$ if (hasMethodInfo) -->Line_33 $$ if (isFile) [ CD ]
Line_32 $$ if (hasMethodInfo) -->Line_38 $$ info.append(displayName)[ CD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_43 $$ return DebuggerBundle.message("line.breakpoint.display.name.with.class.or.method", lineNumber, info.toString())[ FD ]
Line_15 $$ if (hasClassInfo) -->Line_21 $$ if (totalTextLength != -1) [ CD ]
Line_13 $$ boolean isFile = myXBreakpoint.getSourcePosition().getFile().getName().equals(className)-->Line_17 $$ if (dotIndex >= 0 && !isFile) [ FD ]
Line_2 $$ private String getDisplayInfoInternal(boolean showPackageInfo, int totalTextLength) -->Line_40 $$ if (showPackageInfo && packageName != null) [ FD ]
Line_3 $$ if (isValid()) -->Line_8 $$ final String displayName = methodName != null ? methodName + "()" : null[ CD ]
Line_17 $$ if (dotIndex >= 0 && !isFile) -->Line_19 $$ className = className.substring(dotIndex + 1)[ CD ]
Line_5 $$ String className = getClassName()-->Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) [ FD ]
Line_3 $$ if (isValid()) -->Line_10 $$ if (hasClassInfo || hasMethodInfo) [ CD ]
Line_33 $$ if (isFile) -->Line_34 $$ info.append(":")[ CD ]
Line_5 $$ String className = getClassName()-->Line_16 $$ final int dotIndex = className.lastIndexOf(".")[ FD ]
Line_3 $$ if (isValid()) -->Line_4 $$ final int lineNumber = myXBreakpoint.getSourcePosition().getLine() + 1[ CD ]
Line_15 $$ if (hasClassInfo) -->Line_17 $$ if (dotIndex >= 0 && !isFile) [ CD ]
Line_5 $$ String className = getClassName()-->Line_25 $$ className = className.substring(className.length() - offset)[ FD ]
Line_5 $$ String className = getClassName()-->Line_18 $$ packageName = className.substring(0, dotIndex)[ FD ]
Line_5 $$ String className = getClassName()-->Line_13 $$ boolean isFile = myXBreakpoint.getSourcePosition().getFile().getName().equals(className)[ FD ]
Line_25 $$ className = className.substring(className.length() - offset)-->Line_30 $$ info.append(className)[ FD ]
Line_35 $$ if (hasClassInfo) -->Line_36 $$ info.append(".")[ CD ]
Line_5 $$ String className = getClassName()-->Line_6 $$ final boolean hasClassInfo = className != null && className.length() > 0[ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_36 $$ info.append(".")[ FD ]
Line_15 $$ if (hasClassInfo) -->Line_16 $$ final int dotIndex = className.lastIndexOf(".")[ CD ]
Line_6 $$ final boolean hasClassInfo = className != null && className.length() > 0-->Line_33 $$ if (isFile) [ FD ]
Line_19 $$ className = className.substring(dotIndex + 1)-->Line_24 $$ if (offset > 0 && offset < className.length()) [ FD ]
Line_18 $$ packageName = className.substring(0, dotIndex)-->Line_41 $$ info.append(" (").append(packageName).append(")")[ FD ]
Line_40 $$ if (showPackageInfo && packageName != null) -->Line_41 $$ info.append(" (").append(packageName).append(")")[ CD ]
Line_8 $$ final String displayName = methodName != null ? methodName + "()" : null-->Line_38 $$ info.append(displayName)[ FD ]
Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()-->Line_45 $$ StringBuilderSpinAllocator.dispose(info)[ FD ]
Line_10 $$ if (hasClassInfo || hasMethodInfo) -->Line_11 $$ final StringBuilder info = StringBuilderSpinAllocator.alloc()[ CD ]
Line_4 $$ final int lineNumber = myXBreakpoint.getSourcePosition().getLine() + 1-->Line_43 $$ return DebuggerBundle.message("line.breakpoint.display.name.with.class.or.method", lineNumber, info.toString())[ FD ]
Line_19 $$ className = className.substring(dotIndex + 1)-->Line_25 $$ className = className.substring(className.length() - offset)[ FD ]
Line_22 $$ if (className.length() + (hasMethodInfo ? displayName.length() : 0) > totalTextLength + 3) -->Line_23 $$ int offset = totalTextLength - (hasMethodInfo ? displayName.length() : 0)[ CD ]
