Line_12 $$ QueueMapping.MappingType mappingType-->Line_14 $$ mappingType = QueueMapping.MappingType.USER[ FD ]
Line_13 $$ if (mapping[0].equals("u")) -->Line_15 $$ if (mapping[0].equals("g")) [ CD ]
Line_15 $$ if (mapping[0].equals("g")) -->Line_16 $$ mappingType = QueueMapping.MappingType.GROUP[ CD ]
Line_10 $$ QueueMapping m-->Line_20 $$ m = new QueueMapping(mappingType, mapping[1], mapping[2])[ FD ]
Line_2 $$ public List<QueueMapping> getQueueMappings() -->Line_4 $$ Collection<String> mappingsString = getTrimmedStringCollection(QUEUE_MAPPING)[ CD ]
Line_14 $$ mappingType = QueueMapping.MappingType.USER-->Line_16 $$ mappingType = QueueMapping.MappingType.GROUP[ FD ]
Line_10 $$ QueueMapping m-->Line_24 $$ if (m != null) [ FD ]
Line_20 $$ m = new QueueMapping(mappingType, mapping[1], mapping[2])-->Line_24 $$ if (m != null) [ FD ]
Line_20 $$ m = new QueueMapping(mappingType, mapping[1], mapping[2])-->Line_25 $$ mappings.add(m)[ FD ]
Line_5 $$ for (String mappingValue : mappingsString) -->Line_6 $$ String[] mapping = getTrimmedStringCollection(mappingValue, ":").toArray(new String[] [ FD ]
Line_12 $$ QueueMapping.MappingType mappingType-->Line_16 $$ mappingType = QueueMapping.MappingType.GROUP[ FD ]
Line_10 $$ QueueMapping m-->Line_25 $$ mappings.add(m)[ FD ]
Line_2 $$ public List<QueueMapping> getQueueMappings() -->Line_28 $$ return mappings[ CD ]
Line_24 $$ if (m != null) -->Line_25 $$ mappings.add(m)[ CD ]
Line_2 $$ public List<QueueMapping> getQueueMappings() -->Line_3 $$ List<QueueMapping> mappings = new ArrayList<CapacitySchedulerConfiguration.QueueMapping>()[ CD ]
Line_3 $$ List<QueueMapping> mappings = new ArrayList<CapacitySchedulerConfiguration.QueueMapping>()-->Line_25 $$ mappings.add(m)[ FD ]
Line_13 $$ if (mapping[0].equals("u")) -->Line_14 $$ mappingType = QueueMapping.MappingType.USER[ CD ]
