Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_20 $$ return !q.forEach(new Processor<PsiReference>() [ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_17 $$ final String prefix = attr.getLocalName()[ CD ]
Line_20 $$ return !q.forEach(new Processor<PsiReference>() -->Line_25 $$ return false[ CD ]
Line_6 $$ final XmlAttribute attr = (XmlAttribute) element-->Line_17 $$ final String prefix = attr.getLocalName()[ FD ]
Line_22 $$ if (psiReference.getElement() == attr) -->Line_23 $$ return true[ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_11 $$ if (!(file instanceof XmlFile)) [ CD ]
Line_14 $$ if (!ContextProvider.hasXPathInjections((XmlFile) file) && !XsltSupport.isXsltFile(file)) -->Line_15 $$ return false[ CD ]
Line_6 $$ final XmlAttribute attr = (XmlAttribute) element-->Line_19 $$ final Query<PsiReference> q = ReferencesSearch.search(target, new LocalSearchScope(attr.getParent()))[ FD ]
Line_3 $$ if (!(element instanceof XmlAttribute)) -->Line_4 $$ return false[ CD ]
Line_6 $$ final XmlAttribute attr = (XmlAttribute) element-->Line_7 $$ if (!attr.isNamespaceDeclaration()) [ FD ]
Line_19 $$ final Query<PsiReference> q = ReferencesSearch.search(target, new LocalSearchScope(attr.getParent()))-->Line_20 $$ return !q.forEach(new Processor<PsiReference>() [ FD ]
Line_20 $$ return !q.forEach(new Processor<PsiReference>() -->Line_22 $$ if (psiReference.getElement() == attr) [ CD ]
Line_20 $$ return !q.forEach(new Processor<PsiReference>() -->Line_22 $$ if (psiReference.getElement() == attr) [ FD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_7 $$ if (!attr.isNamespaceDeclaration()) [ CD ]
Line_18 $$ final SchemaPrefix target = new SchemaPrefix(attr, TextRange.from("xmlns:".length(), prefix.length()), prefix)-->Line_19 $$ final Query<PsiReference> q = ReferencesSearch.search(target, new LocalSearchScope(attr.getParent()))[ FD ]
Line_17 $$ final String prefix = attr.getLocalName()-->Line_18 $$ final SchemaPrefix target = new SchemaPrefix(attr, TextRange.from("xmlns:".length(), prefix.length()), prefix)[ FD ]
Line_6 $$ final XmlAttribute attr = (XmlAttribute) element-->Line_22 $$ if (psiReference.getElement() == attr) [ FD ]
Line_11 $$ if (!(file instanceof XmlFile)) -->Line_12 $$ return false[ CD ]
Line_6 $$ final XmlAttribute attr = (XmlAttribute) element-->Line_10 $$ final PsiFile file = attr.getContainingFile()[ FD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_3 $$ if (!(element instanceof XmlAttribute)) [ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_10 $$ final PsiFile file = attr.getContainingFile()[ CD ]
Line_7 $$ if (!attr.isNamespaceDeclaration()) -->Line_8 $$ return false[ CD ]
Line_10 $$ final PsiFile file = attr.getContainingFile()-->Line_14 $$ if (!ContextProvider.hasXPathInjections((XmlFile) file) && !XsltSupport.isXsltFile(file)) [ FD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_14 $$ if (!ContextProvider.hasXPathInjections((XmlFile) file) && !XsltSupport.isXsltFile(file)) [ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_19 $$ final Query<PsiReference> q = ReferencesSearch.search(target, new LocalSearchScope(attr.getParent()))[ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_6 $$ final XmlAttribute attr = (XmlAttribute) element[ CD ]
Line_2 $$ public boolean isImplicitUsage(PsiElement element) -->Line_18 $$ final SchemaPrefix target = new SchemaPrefix(attr, TextRange.from("xmlns:".length(), prefix.length()), prefix)[ CD ]
