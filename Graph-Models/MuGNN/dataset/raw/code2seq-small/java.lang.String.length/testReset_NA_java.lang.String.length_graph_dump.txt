Line_32 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_40 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_30 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_7 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_32 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_32 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_40 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_26 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark())[ FD ]
Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_18 $$ FileMark mark = reader.mark()-->Line_20 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_20 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_27 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_39 $$ assertFalse(reader.isEOF())[ FD ]
Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_25 $$ assertTrue(reader.isEOF())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_34 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_36 $$ reader.reset()[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_23 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_23 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_37 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_17 $$ assertEquals((numIterations - 1) * expected.length(), reader.bytesRemaining())[ FD ]
Line_40 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_21 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_23 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_7 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_21 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_31 $$ assertFalse(reader.isEOF())[ FD ]
Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_34 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_16 $$ assertFalse(reader.isEOF())[ FD ]
Line_3 $$ File f = File.createTempFile("testMark", "1")-->Line_10 $$ assert f.exists()[ FD ]
Line_6 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_8 $$ writer.finish()[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_26 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_38 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_18 $$ FileMark mark = reader.mark()-->Line_30 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_18 $$ FileMark mark = reader.mark()[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_28 $$ reader.reset(mark)[ FD ]
Line_5 $$ final int numIterations = 10-->Line_7 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())[ FD ]
Line_2 $$ public void testReset() throws IOException -->Line_3 $$ File f = File.createTempFile("testMark", "1")[ CD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_18 $$ FileMark mark = reader.mark()-->Line_28 $$ reader.reset(mark)[ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_32 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_34 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_23 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_15 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_15 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_7 $$ writer.write(expected.getBytes())[ FD ]
Line_3 $$ File f = File.createTempFile("testMark", "1")-->Line_6 $$ try (SequentialWriter writer = SequentialWriter.open(f)) [ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_2 $$ public void testReset() throws IOException -->Line_5 $$ final int numIterations = 10[ CD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_19 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_34 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_14 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_34 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_6 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_7 $$ writer.write(expected.getBytes())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_27 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_44 $$ assertTrue(reader.isEOF())[ FD ]
Line_2 $$ public void testReset() throws IOException -->Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"[ CD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_33 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_21 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_40 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_21 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_32 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_13 $$ assertEquals(expected.length() * numIterations, reader.length())[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_29 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_11 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_17 $$ assertEquals((numIterations - 1) * expected.length(), reader.bytesRemaining())[ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_41 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_18 $$ FileMark mark = reader.mark()-->Line_27 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_21 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_22 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_7 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_40 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_4 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_13 $$ assertEquals(expected.length() * numIterations, reader.length())[ FD ]
Line_18 $$ FileMark mark = reader.mark()-->Line_38 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
