Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_27 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_17 $$ assertFalse(reader.isEOF())[ FD ]
Line_19 $$ FileMark mark = reader.mark()-->Line_28 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_33 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_35 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_21 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_28 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_39 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_19 $$ FileMark mark = reader.mark()[ FD ]
Line_41 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_14 $$ assertEquals(expected.length() * numIterations, reader.length())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_26 $$ assertTrue(reader.isEOF())[ FD ]
Line_22 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_33 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_18 $$ assertEquals((numIterations - 1) * expected.length(), reader.bytesRemaining())[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_24 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_14 $$ assertEquals(expected.length() * numIterations, reader.length())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_35 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_33 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_41 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_29 $$ reader.reset(mark)[ FD ]
Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_35 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_41 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_40 $$ assertFalse(reader.isEOF())[ FD ]
Line_8 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_33 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_31 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_22 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_41 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_37 $$ reader.reset()[ FD ]
Line_7 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_9 $$ writer.finish()[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_19 $$ FileMark mark = reader.mark()-->Line_29 $$ reader.reset(mark)[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_7 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_8 $$ writer.write(expected.getBytes())[ FD ]
Line_22 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_24 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ CD ]
Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_35 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_30 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_45 $$ assertTrue(reader.isEOF())[ FD ]
Line_4 $$ File f = File.createTempFile("testMark", "1")-->Line_7 $$ try (SequentialWriter writer = SequentialWriter.open(f)) [ FD ]
Line_4 $$ File f = File.createTempFile("testMark", "1")-->Line_11 $$ assert f.exists()[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_18 $$ assertEquals((numIterations - 1) * expected.length(), reader.bytesRemaining())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_33 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_20 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_38 $$ assertEquals(0, reader.bytesPastMark())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_16 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_19 $$ FileMark mark = reader.mark()-->Line_31 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_35 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_19 $$ FileMark mark = reader.mark()-->Line_21 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_6 $$ final int numIterations = 10-->Line_8 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_8 $$ writer.write(expected.getBytes())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_24 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_24 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_27 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark())[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_42 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())-->Line_43 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_34 $$ b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())-->Line_16 $$ assertEquals(expected, new String(b.array(), Charset.forName("UTF-8")))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())[ FD ]
Line_19 $$ FileMark mark = reader.mark()-->Line_39 $$ assertEquals(0, reader.bytesPastMark(mark))[ FD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_28 $$ assertEquals(expected.length() * (numIterations - 1), reader.bytesPastMark(mark))[ FD ]
Line_12 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_32 $$ assertFalse(reader.isEOF())[ FD ]
Line_8 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_22 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_8 $$ for (int i = 0; i < numIterations; i++) writer.write(expected.getBytes())-->Line_41 $$ for (int i = 0; i < (numIterations - 1); i++) [ FD ]
Line_22 $$ for (int i = 0; i < (numIterations - 1); i++) -->Line_23 $$ b = ByteBufferUtil.read(reader, expected.length())[ CD ]
Line_5 $$ final String expected = "The quick brown fox jumps over the lazy dog"-->Line_15 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length())[ FD ]
