Line_35 $$ nextLineOffset = CharArrayUtil.shiftForward(chars, nextLineOffset, " \t")-->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ FD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_44 $$ docAsterisk = usesAstersk[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_9 $$ final TextRange textRange = atLineStart.getTextRange()[ CD ]
Line_31 $$ if (commentLine < myDocument.getLineCount() - 1 && textRange.getEndOffset() >= myOffset) -->Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) [ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_26 $$ docAsterisk = false[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_8 $$ final String text = atLineStart.getText()[ CD ]
Line_31 $$ if (commentLine < myDocument.getLineCount() - 1 && textRange.getEndOffset() >= myOffset) -->Line_32 $$ int nextLineOffset = myDocument.getLineStartOffset(commentLine + 1)[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_44 $$ docAsterisk = usesAstersk[ FD ]
Line_15 $$ if (comment != null) -->Line_16 $$ int commentEnd = comment.getTextRange().getEndOffset()[ CD ]
Line_9 $$ final TextRange textRange = atLineStart.getTextRange()-->Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) [ FD ]
Line_9 $$ final TextRange textRange = atLineStart.getTextRange()-->Line_30 $$ int commentLine = myDocument.getLineNumber(textRange.getStartOffset())[ FD ]
Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) -->Line_12 $$ if (element == null)[ CD ]
Line_29 $$ boolean usesAstersk = false-->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) [ CD ]
Line_15 $$ if (comment != null) -->Line_26 $$ docAsterisk = false[ CD ]
Line_4 $$ if (atLineStart == null)-->Line_5 $$ return false[ CD ]
Line_3 $$ PsiElement atLineStart = myFile.findElementAt(lineStart)-->Line_9 $$ final TextRange textRange = atLineStart.getTextRange()[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_18 $$ docAsterisk = false[ FD ]
Line_11 $$ PsiElement element = myFile.findElementAt(myOffset)-->Line_14 $$ PsiComment comment = element instanceof PsiComment ? (PsiComment) element : PsiTreeUtil.getParentOfType(element, PsiComment.class, false)[ FD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_30 $$ int commentLine = myDocument.getLineNumber(textRange.getStartOffset())[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_6 $$ final String linePrefix = commenter.getDocumentationCommentLinePrefix()[ CD ]
Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) -->Line_34 $$ final CharSequence chars = myDocument.getCharsSequence()[ CD ]
Line_26 $$ docAsterisk = false-->Line_46 $$ docAsterisk = false[ FD ]
Line_26 $$ docAsterisk = false-->Line_44 $$ docAsterisk = usesAstersk[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_3 $$ PsiElement atLineStart = myFile.findElementAt(lineStart)[ FD ]
Line_21 $$ String toInsert = previousLineIndentUsed ? "*" : CodeDocumentationUtil.createDocCommentLine("", getProject(), commenter)-->Line_22 $$ myDocument.insertString(myOffset, toInsert)[ FD ]
Line_34 $$ final CharSequence chars = myDocument.getCharsSequence()-->Line_35 $$ nextLineOffset = CharArrayUtil.shiftForward(chars, nextLineOffset, " \t")[ FD ]
Line_39 $$ if (usesAstersk) -->Line_40 $$ removeTrailingSpaces(myDocument, myOffset)[ CD ]
Line_9 $$ final TextRange textRange = atLineStart.getTextRange()-->Line_31 $$ if (commentLine < myDocument.getLineCount() - 1 && textRange.getEndOffset() >= myOffset) [ FD ]
Line_6 $$ final String linePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) [ FD ]
Line_39 $$ if (usesAstersk) -->Line_42 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_8 $$ final String text = atLineStart.getText()-->Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) [ FD ]
Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) -->Line_15 $$ if (comment != null) [ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_21 $$ String toInsert = previousLineIndentUsed ? "*" : CodeDocumentationUtil.createDocCommentLine("", getProject(), commenter)[ FD ]
Line_32 $$ int nextLineOffset = myDocument.getLineStartOffset(commentLine + 1)-->Line_35 $$ nextLineOffset = CharArrayUtil.shiftForward(chars, nextLineOffset, " \t")[ FD ]
Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) -->Line_14 $$ PsiComment comment = element instanceof PsiComment ? (PsiComment) element : PsiTreeUtil.getParentOfType(element, PsiComment.class, false)[ CD ]
Line_39 $$ if (usesAstersk) -->Line_41 $$ myDocument.insertString(myOffset, linePrefix + " ")[ CD ]
Line_3 $$ PsiElement atLineStart = myFile.findElementAt(lineStart)-->Line_4 $$ if (atLineStart == null)[ FD ]
Line_3 $$ PsiElement atLineStart = myFile.findElementAt(lineStart)-->Line_8 $$ final String text = atLineStart.getText()[ FD ]
Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) -->Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) [ CD ]
Line_17 $$ if (myOffset >= commentEnd) -->Line_18 $$ docAsterisk = false[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_7 $$ final String docPrefix = commenter.getDocumentationCommentPrefix()[ CD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_46 $$ docAsterisk = false[ CD ]
Line_17 $$ if (myOffset >= commentEnd) -->Line_22 $$ myDocument.insertString(myOffset, toInsert)[ CD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_29 $$ boolean usesAstersk = false[ CD ]
Line_6 $$ final String linePrefix = commenter.getDocumentationCommentLinePrefix()-->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ FD ]
Line_16 $$ int commentEnd = comment.getTextRange().getEndOffset()-->Line_17 $$ if (myOffset >= commentEnd) [ FD ]
Line_32 $$ int nextLineOffset = myDocument.getLineStartOffset(commentLine + 1)-->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ FD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_31 $$ if (commentLine < myDocument.getLineCount() - 1 && textRange.getEndOffset() >= myOffset) [ CD ]
Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) -->Line_11 $$ PsiElement element = myFile.findElementAt(myOffset)[ CD ]
Line_18 $$ docAsterisk = false-->Line_44 $$ docAsterisk = usesAstersk[ FD ]
Line_17 $$ if (myOffset >= commentEnd) -->Line_21 $$ String toInsert = previousLineIndentUsed ? "*" : CodeDocumentationUtil.createDocCommentLine("", getProject(), commenter)[ CD ]
Line_18 $$ docAsterisk = false-->Line_26 $$ docAsterisk = false[ FD ]
Line_11 $$ PsiElement element = myFile.findElementAt(myOffset)-->Line_12 $$ if (element == null)[ FD ]
Line_17 $$ if (myOffset >= commentEnd) -->Line_20 $$ removeTrailingSpaces(myDocument, myOffset)[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_6 $$ final String linePrefix = commenter.getDocumentationCommentLinePrefix()[ FD ]
Line_44 $$ docAsterisk = usesAstersk-->Line_46 $$ docAsterisk = false[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_48 $$ return docAsterisk[ CD ]
Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) -->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ CD ]
Line_34 $$ final CharSequence chars = myDocument.getCharsSequence()-->Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)[ FD ]
Line_14 $$ PsiComment comment = element instanceof PsiComment ? (PsiComment) element : PsiTreeUtil.getParentOfType(element, PsiComment.class, false)-->Line_16 $$ int commentEnd = comment.getTextRange().getEndOffset()[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_46 $$ docAsterisk = false[ FD ]
Line_29 $$ boolean usesAstersk = false-->Line_44 $$ docAsterisk = usesAstersk[ FD ]
Line_7 $$ final String docPrefix = commenter.getDocumentationCommentPrefix()-->Line_10 $$ if (text.equals(linePrefix) || text.equals(docPrefix) || docPrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), docPrefix, 0, docPrefix.length()) || linePrefix != null && text.regionMatches(lineStart - textRange.getStartOffset(), linePrefix, 0, linePrefix.length())) [ FD ]
Line_14 $$ PsiComment comment = element instanceof PsiComment ? (PsiComment) element : PsiTreeUtil.getParentOfType(element, PsiComment.class, false)-->Line_15 $$ if (comment != null) [ FD ]
Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) -->Line_39 $$ if (usesAstersk) [ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_3 $$ PsiElement atLineStart = myFile.findElementAt(lineStart)[ CD ]
Line_17 $$ if (myOffset >= commentEnd) -->Line_23 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_32 $$ int nextLineOffset = myDocument.getLineStartOffset(commentLine + 1)-->Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) [ FD ]
Line_18 $$ docAsterisk = false-->Line_46 $$ docAsterisk = false[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_4 $$ if (atLineStart == null)[ CD ]
Line_9 $$ final TextRange textRange = atLineStart.getTextRange()-->Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) [ FD ]
Line_36 $$ usesAstersk = CharArrayUtil.regionMatches(chars, nextLineOffset, linePrefix)-->Line_44 $$ docAsterisk = usesAstersk[ FD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_7 $$ final String docPrefix = commenter.getDocumentationCommentPrefix()[ FD ]
Line_15 $$ if (comment != null) -->Line_17 $$ if (myOffset >= commentEnd) [ CD ]
Line_12 $$ if (element == null)-->Line_13 $$ return false[ CD ]
Line_2 $$ private boolean insertDocAsterisk(int lineStart, boolean docAsterisk, boolean previousLineIndentUsed, CodeDocumentationAwareCommenter commenter) -->Line_28 $$ if (linePrefix != null && atLineStart instanceof PsiComment && ((PsiComment) atLineStart).getTokenType() == commenter.getBlockCommentTokenType()) [ FD ]
Line_33 $$ if (nextLineOffset < textRange.getEndOffset()) -->Line_35 $$ nextLineOffset = CharArrayUtil.shiftForward(chars, nextLineOffset, " \t")[ CD ]
