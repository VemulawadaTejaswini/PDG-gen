Line_14 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)-->Line_16 $$ if (matchesFilter(reader, readerFactory)) [ FD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_34 $$ if (this.mappingResources != null) [ CD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_36 $$ scannedUnit.addMappingFileName(mappingFileName)[ FD ]
Line_11 $$ MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_16 $$ if (matchesFilter(reader, readerFactory)) [ FD ]
Line_16 $$ if (matchesFilter(reader, readerFactory)) -->Line_18 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) [ CD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_4 $$ scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)[ CD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_18 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) [ FD ]
Line_19 $$ URL url = resource.getURL()-->Line_20 $$ if (ResourceUtils.isJarURL(url)) [ FD ]
Line_18 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) -->Line_19 $$ URL url = resource.getURL()[ CD ]
Line_35 $$ for (String mappingFileName : this.mappingResources) -->Line_36 $$ scannedUnit.addMappingFileName(mappingFileName)[ FD ]
Line_34 $$ if (this.mappingResources != null) -->Line_38 $$ if (useOrmXmlForDefaultPersistenceUnit()) [ CD ]
Line_16 $$ if (matchesFilter(reader, readerFactory)) -->Line_17 $$ scannedUnit.addManagedClassName(className)[ CD ]
Line_19 $$ URL url = resource.getURL()-->Line_21 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ FD ]
Line_12 $$ for (Resource resource : resources) -->Line_13 $$ if (resource.isReadable()) [ FD ]
Line_14 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)-->Line_15 $$ String className = reader.getClassMetadata().getClassName()[ FD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_39 $$ scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)[ FD ]
Line_16 $$ if (matchesFilter(reader, readerFactory)) -->Line_24 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) [ CD ]
Line_12 $$ for (Resource resource : resources) -->Line_19 $$ URL url = resource.getURL()[ FD ]
Line_15 $$ String className = reader.getClassMetadata().getClassName()-->Line_25 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ FD ]
Line_24 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) -->Line_25 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ CD ]
Line_15 $$ String className = reader.getClassMetadata().getClassName()-->Line_24 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) [ FD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_6 $$ if (this.packagesToScan != null) [ CD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_17 $$ scannedUnit.addManagedClassName(className)[ FD ]
Line_11 $$ MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_14 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_4 $$ scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)[ FD ]
Line_12 $$ for (Resource resource : resources) -->Line_14 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ FD ]
Line_13 $$ if (resource.isReadable()) -->Line_14 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ CD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_5 $$ scannedUnit.setExcludeUnlistedClasses(true)[ CD ]
Line_9 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN-->Line_10 $$ Resource[] resources = this.resourcePatternResolver.getResources(pattern)[ FD ]
Line_20 $$ if (ResourceUtils.isJarURL(url)) -->Line_21 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ CD ]
Line_7 $$ for (String pkg : this.packagesToScan) -->Line_9 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN[ FD ]
Line_18 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) -->Line_20 $$ if (ResourceUtils.isJarURL(url)) [ CD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_41 $$ return scannedUnit[ CD ]
Line_2 $$ private SpringPersistenceUnitInfo buildDefaultPersistenceUnitInfo() -->Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()[ CD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_25 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ FD ]
Line_15 $$ String className = reader.getClassMetadata().getClassName()-->Line_17 $$ scannedUnit.addManagedClassName(className)[ FD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_21 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ FD ]
Line_3 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_5 $$ scannedUnit.setExcludeUnlistedClasses(true)[ FD ]
Line_13 $$ if (resource.isReadable()) -->Line_16 $$ if (matchesFilter(reader, readerFactory)) [ CD ]
Line_38 $$ if (useOrmXmlForDefaultPersistenceUnit()) -->Line_39 $$ scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)[ CD ]
Line_13 $$ if (resource.isReadable()) -->Line_15 $$ String className = reader.getClassMetadata().getClassName()[ CD ]
