Line_17 $$ if (resource.isReadable()) -->Line_20 $$ if (matchesFilter(reader, readerFactory)) [ CD ]
Line_24 $$ if (ResourceUtils.isJarURL(url)) -->Line_25 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ CD ]
Line_20 $$ if (matchesFilter(reader, readerFactory)) -->Line_28 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) [ CD ]
Line_18 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)-->Line_19 $$ String className = reader.getClassMetadata().getClassName()[ FD ]
Line_15 $$ MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_20 $$ if (matchesFilter(reader, readerFactory)) [ FD ]
Line_39 $$ for (String mappingFileName : this.mappingResources) -->Line_40 $$ scannedUnit.addMappingFileName(mappingFileName)[ FD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_22 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) [ FD ]
Line_17 $$ if (resource.isReadable()) -->Line_18 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ CD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_21 $$ scannedUnit.addManagedClassName(className)[ FD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_9 $$ scannedUnit.setExcludeUnlistedClasses(true)[ FD ]
Line_15 $$ MetadataReaderFactory readerFactory = new CachingMetadataReaderFactory(this.resourcePatternResolver)-->Line_18 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ FD ]
Line_11 $$ for (String pkg : this.packagesToScan) -->Line_13 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN[ FD ]
Line_17 $$ if (resource.isReadable()) -->Line_19 $$ String className = reader.getClassMetadata().getClassName()[ CD ]
Line_22 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) -->Line_24 $$ if (ResourceUtils.isJarURL(url)) [ CD ]
Line_19 $$ String className = reader.getClassMetadata().getClassName()-->Line_21 $$ scannedUnit.addManagedClassName(className)[ FD ]
Line_23 $$ URL url = resource.getURL()-->Line_24 $$ if (ResourceUtils.isJarURL(url)) [ FD ]
Line_23 $$ URL url = resource.getURL()-->Line_25 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ FD ]
Line_13 $$ String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(pkg) + CLASS_RESOURCE_PATTERN-->Line_14 $$ Resource[] resources = this.resourcePatternResolver.getResources(pattern)[ FD ]
Line_28 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) -->Line_29 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ CD ]
Line_16 $$ for (Resource resource : resources) -->Line_23 $$ URL url = resource.getURL()[ FD ]
Line_22 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) -->Line_23 $$ URL url = resource.getURL()[ CD ]
Line_16 $$ for (Resource resource : resources) -->Line_18 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)[ FD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_8 $$ scannedUnit.setPersistenceUnitName(this.defaultPersistenceUnitName)[ FD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_40 $$ scannedUnit.addMappingFileName(mappingFileName)[ FD ]
Line_20 $$ if (matchesFilter(reader, readerFactory)) -->Line_21 $$ scannedUnit.addManagedClassName(className)[ CD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_29 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ FD ]
Line_18 $$ MetadataReader reader = readerFactory.getMetadataReader(resource)-->Line_20 $$ if (matchesFilter(reader, readerFactory)) [ FD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_43 $$ scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)[ FD ]
Line_19 $$ String className = reader.getClassMetadata().getClassName()-->Line_28 $$ if (className.endsWith(PACKAGE_INFO_SUFFIX)) [ FD ]
Line_42 $$ if (useOrmXmlForDefaultPersistenceUnit()) -->Line_43 $$ scannedUnit.addMappingFileName(DEFAULT_ORM_XML_RESOURCE)[ CD ]
Line_16 $$ for (Resource resource : resources) -->Line_17 $$ if (resource.isReadable()) [ FD ]
Line_19 $$ String className = reader.getClassMetadata().getClassName()-->Line_29 $$ scannedUnit.addManagedPackage(className.substring(0, className.length() - PACKAGE_INFO_SUFFIX.length()))[ FD ]
Line_20 $$ if (matchesFilter(reader, readerFactory)) -->Line_22 $$ if (scannedUnit.getPersistenceUnitRootUrl() == null) [ CD ]
Line_7 $$ SpringPersistenceUnitInfo scannedUnit = new SpringPersistenceUnitInfo()-->Line_25 $$ scannedUnit.setPersistenceUnitRootUrl(ResourceUtils.extractJarFileURL(url))[ FD ]
Line_38 $$ if (this.mappingResources != null) -->Line_42 $$ if (useOrmXmlForDefaultPersistenceUnit()) [ CD ]
