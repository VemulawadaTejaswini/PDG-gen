Line_16 $$ StreamGobbler gobbler = new StreamGobbler(process.getInputStream())-->Line_21 $$ LOG.info("shell process output: " + StringUtil.trimEnd(gobbler.getText(), '\n'))[ FD ]
Line_7 $$ File reader = FileUtil.findFirstThatExist(PathManager.getBinPath() + "/printenv.py", PathManager.getHomePath() + "/community/bin/mac/printenv.py", PathManager.getHomePath() + "/bin/mac/printenv.py")-->Line_13 $$ String[] command = [ FD ]
Line_7 $$ File reader = FileUtil.findFirstThatExist(PathManager.getBinPath() + "/printenv.py", PathManager.getHomePath() + "/community/bin/mac/printenv.py", PathManager.getHomePath() + "/bin/mac/printenv.py")-->Line_8 $$ if (reader == null) [ FD ]
Line_20 $$ if (rv != 0 || lines.isEmpty()) -->Line_21 $$ LOG.info("shell process output: " + StringUtil.trimEnd(gobbler.getText(), '\n'))[ CD ]
Line_19 $$ String lines = FileUtil.loadFile(envFile)-->Line_24 $$ return parseEnv(lines)[ FD ]
Line_11 $$ File envFile = FileUtil.createTempFile("intellij-shell-env.", ".tmp", false)-->Line_19 $$ String lines = FileUtil.loadFile(envFile)[ FD ]
Line_2 $$ private static Map<String, String> getShellEnv() throws Exception -->Line_3 $$ String shell = System.getenv("SHELL")[ CD ]
Line_15 $$ Process process = new ProcessBuilder(command).redirectErrorStream(true).start()-->Line_17 $$ int rv = waitAndTerminateAfter(process, SHELL_ENV_READING_TIMEOUT)[ FD ]
Line_2 $$ private static Map<String, String> getShellEnv() throws Exception -->Line_7 $$ File reader = FileUtil.findFirstThatExist(PathManager.getBinPath() + "/printenv.py", PathManager.getHomePath() + "/community/bin/mac/printenv.py", PathManager.getHomePath() + "/bin/mac/printenv.py")[ CD ]
Line_19 $$ String lines = FileUtil.loadFile(envFile)-->Line_20 $$ if (rv != 0 || lines.isEmpty()) [ FD ]
Line_13 $$ String[] command = -->Line_14 $$ LOG.info("loading shell env: " + StringUtil.join(command, " "))[ FD ]
Line_11 $$ File envFile = FileUtil.createTempFile("intellij-shell-env.", ".tmp", false)-->Line_13 $$ String[] command = [ FD ]
Line_11 $$ File envFile = FileUtil.createTempFile("intellij-shell-env.", ".tmp", false)-->Line_26 $$ FileUtil.delete(envFile)[ FD ]
Line_19 $$ String lines = FileUtil.loadFile(envFile)-->Line_22 $$ throw new Exception("rv:" + rv + " text:" + lines.length())[ FD ]
Line_16 $$ StreamGobbler gobbler = new StreamGobbler(process.getInputStream())-->Line_18 $$ gobbler.stop()[ FD ]
Line_2 $$ private static Map<String, String> getShellEnv() throws Exception -->Line_11 $$ File envFile = FileUtil.createTempFile("intellij-shell-env.", ".tmp", false)[ CD ]
Line_15 $$ Process process = new ProcessBuilder(command).redirectErrorStream(true).start()-->Line_16 $$ StreamGobbler gobbler = new StreamGobbler(process.getInputStream())[ FD ]
Line_2 $$ private static Map<String, String> getShellEnv() throws Exception -->Line_4 $$ if (shell == null || !new File(shell).canExecute()) [ CD ]
Line_2 $$ private static Map<String, String> getShellEnv() throws Exception -->Line_8 $$ if (reader == null) [ CD ]
