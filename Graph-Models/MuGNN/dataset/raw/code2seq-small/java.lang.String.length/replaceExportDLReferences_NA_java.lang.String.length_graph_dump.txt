Line_23 $$ endPos = beginPos - 1-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder(content)-->Line_36 $$ deleteTimestampParameters(sb, beginPos)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_53 $$ return sb.toString()[ CD ]
Line_15 $$ while (true) -->Line_22 $$ if (fileEntry == null) [ CD ]
Line_7 $$ if (group.isStaged() && !group.isStagedRemotely() && !group.isStagedPortlet(PortletKeys.DOCUMENT_LIBRARY)) -->Line_8 $$ return content[ CD ]
Line_28 $$ if (exportReferencedContent) -->Line_32 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ CD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_47 $$ exceptionSB.append(stagedModel.getPrimaryKeyObj())[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_7 $$ if (group.isStaged() && !group.isStagedRemotely() && !group.isStagedPortlet(PortletKeys.DOCUMENT_LIBRARY)) [ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder(content)-->Line_53 $$ return sb.toString()[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_13 $$ int beginPos = -1[ CD ]
Line_14 $$ int endPos = content.length()-->Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")[ FD ]
Line_14 $$ int endPos = content.length()-->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_23 $$ endPos = beginPos - 1-->Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_48 $$ _log.warn(exceptionSB.toString())[ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_31 $$ Element entityElement = portletDataContext.getExportDataElement(stagedModel)[ FD ]
Line_13 $$ int beginPos = -1-->Line_17 $$ if (beginPos == -1) [ FD ]
Line_28 $$ if (exportReferencedContent) -->Line_31 $$ Element entityElement = portletDataContext.getExportDataElement(stagedModel)[ CD ]
Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")-->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)-->Line_32 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_38 $$ if (_log.isDebugEnabled()) -->Line_39 $$ _log.debug(e, e)[ CD ]
Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)-->Line_43 $$ exceptionSB.append(fileEntry.getFileEntryId())[ FD ]
Line_15 $$ while (true) -->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_11 $$ String contextPath = PortalUtil.getPathContext()-->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_43 $$ exceptionSB.append(fileEntry.getFileEntryId())[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_46 $$ exceptionSB.append(" with primary key ")[ CD ]
Line_23 $$ endPos = beginPos - 1-->Line_51 $$ endPos = beginPos - 1[ FD ]
Line_51 $$ endPos = beginPos - 1-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_10 $$ StringBuilder sb = new StringBuilder(content)[ CD ]
Line_12 $$ String[] patterns = -->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_3 $$ Group group = GroupLocalServiceUtil.getGroup(portletDataContext.getGroupId())-->Line_5 $$ group = group.getLiveGroup()[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_4 $$ if (group.isStagingGroup()) [ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_15 $$ while (true) [ CD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_48 $$ _log.warn(exceptionSB.toString())[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_42 $$ exceptionSB.append("Unable to process file entry ")[ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_14 $$ int endPos = content.length()[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_32 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)-->Line_51 $$ endPos = beginPos - 1[ FD ]
Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_13 $$ int beginPos = -1-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_14 $$ int endPos = content.length()-->Line_51 $$ endPos = beginPos - 1[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_3 $$ Group group = GroupLocalServiceUtil.getGroup(portletDataContext.getGroupId())[ CD ]
Line_5 $$ group = group.getLiveGroup()-->Line_7 $$ if (group.isStaged() && !group.isStagedRemotely() && !group.isStagedPortlet(PortletKeys.DOCUMENT_LIBRARY)) [ FD ]
Line_13 $$ int beginPos = -1-->Line_51 $$ endPos = beginPos - 1[ FD ]
Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)-->Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")[ FD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_45 $$ exceptionSB.append(stagedModel.getModelClassName())[ FD ]
Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_15 $$ while (true) -->Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)[ CD ]
Line_51 $$ endPos = beginPos - 1-->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_4 $$ if (group.isStagingGroup()) -->Line_5 $$ group = group.getLiveGroup()[ CD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_44 $$ exceptionSB.append(" for ")[ CD ]
Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")-->Line_51 $$ endPos = beginPos - 1[ FD ]
Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)-->Line_36 $$ deleteTimestampParameters(sb, beginPos)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_45 $$ exceptionSB.append(stagedModel.getModelClassName())[ FD ]
Line_13 $$ int beginPos = -1-->Line_36 $$ deleteTimestampParameters(sb, beginPos)[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_45 $$ exceptionSB.append(stagedModel.getModelClassName())[ CD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_47 $$ exceptionSB.append(stagedModel.getPrimaryKeyObj())[ CD ]
Line_11 $$ String contextPath = PortalUtil.getPathContext()-->Line_12 $$ String[] patterns = [ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder(content)-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_42 $$ exceptionSB.append("Unable to process file entry ")[ FD ]
Line_3 $$ Group group = GroupLocalServiceUtil.getGroup(portletDataContext.getGroupId())-->Line_4 $$ if (group.isStagingGroup()) [ FD ]
Line_15 $$ while (true) -->Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")[ CD ]
Line_15 $$ while (true) -->Line_51 $$ endPos = beginPos - 1[ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_47 $$ exceptionSB.append(stagedModel.getPrimaryKeyObj())[ FD ]
Line_14 $$ int endPos = content.length()-->Line_35 $$ sb.replace(beginPos, endPos, "[$dl-reference=" + path + "$]")[ FD ]
Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)-->Line_29 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, stagedModel, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY)[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_41 $$ StringBundler exceptionSB = new StringBundler(6)[ CD ]
Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)-->Line_22 $$ if (fileEntry == null) [ FD ]
Line_38 $$ if (_log.isDebugEnabled()) -->Line_40 $$ if (_log.isWarnEnabled()) [ CD ]
Line_22 $$ if (fileEntry == null) -->Line_23 $$ endPos = beginPos - 1[ CD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_12 $$ String[] patterns = [ CD ]
Line_23 $$ endPos = beginPos - 1-->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_14 $$ int endPos = content.length()[ CD ]
Line_15 $$ while (true) -->Line_17 $$ if (beginPos == -1) [ CD ]
Line_3 $$ Group group = GroupLocalServiceUtil.getGroup(portletDataContext.getGroupId())-->Line_7 $$ if (group.isStaged() && !group.isStagedRemotely() && !group.isStagedPortlet(PortletKeys.DOCUMENT_LIBRARY)) [ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_29 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, stagedModel, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY)[ FD ]
Line_13 $$ int beginPos = -1-->Line_23 $$ endPos = beginPos - 1[ FD ]
Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)-->Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)[ FD ]
Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)-->Line_17 $$ if (beginPos == -1) [ FD ]
Line_14 $$ int endPos = content.length()-->Line_23 $$ endPos = beginPos - 1[ FD ]
Line_13 $$ int beginPos = -1-->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_44 $$ exceptionSB.append(" for ")[ FD ]
Line_26 $$ endPos = MapUtil.getInteger(dlReferenceParameters, "endPos")-->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_3 $$ Group group = GroupLocalServiceUtil.getGroup(portletDataContext.getGroupId())[ FD ]
Line_14 $$ int endPos = content.length()-->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_41 $$ StringBundler exceptionSB = new StringBundler(6)-->Line_46 $$ exceptionSB.append(" with primary key ")[ FD ]
Line_40 $$ if (_log.isWarnEnabled()) -->Line_43 $$ exceptionSB.append(fileEntry.getFileEntryId())[ CD ]
Line_31 $$ Element entityElement = portletDataContext.getExportDataElement(stagedModel)-->Line_32 $$ portletDataContext.addReferenceElement(stagedModel, entityElement, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY, true)[ FD ]
Line_28 $$ if (exportReferencedContent) -->Line_29 $$ StagedModelDataHandlerUtil.exportReferenceStagedModel(portletDataContext, stagedModel, fileEntry, PortletDataContext.REFERENCE_TYPE_DEPENDENCY)[ CD ]
Line_15 $$ while (true) -->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ CD ]
Line_23 $$ endPos = beginPos - 1-->Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)[ FD ]
Line_51 $$ endPos = beginPos - 1-->Line_20 $$ Map<String, String[]> dlReferenceParameters = getDLReferenceParameters(portletDataContext.getScopeGroupId(), content, beginPos + contextPath.length(), endPos)[ FD ]
Line_16 $$ beginPos = StringUtil.lastIndexOfAny(content, patterns, endPos)-->Line_23 $$ endPos = beginPos - 1[ FD ]
Line_21 $$ FileEntry fileEntry = getFileEntry(dlReferenceParameters)-->Line_34 $$ String path = ExportImportPathUtil.getModelPath(fileEntry)[ FD ]
Line_2 $$ protected String replaceExportDLReferences(PortletDataContext portletDataContext, StagedModel stagedModel, String content, boolean exportReferencedContent) throws Exception -->Line_11 $$ String contextPath = PortalUtil.getPathContext()[ CD ]
