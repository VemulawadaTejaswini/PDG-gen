Line_6 $$ final String newExpression = newParameterName + '.' + parameterSetterName + '(' + newParameterName + '.' + parameterGetterName + "()" + strippedOperator + "1)"-->Line_13 $$ MutationUtils.replaceExpression(newExpression, expression)[ FD ]
Line_2 $$ public void fixUsage() throws IncorrectOperationException -->Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) [ CD ]
Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) -->Line_13 $$ MutationUtils.replaceExpression(newExpression, expression)[ CD ]
Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) -->Line_9 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(expression, PsiStatement.class)[ CD ]
Line_2 $$ public void fixUsage() throws IncorrectOperationException -->Line_3 $$ final PsiJavaToken sign = expression instanceof PsiPrefixExpression ? ((PsiPrefixExpression) expression).getOperationSign() : ((PsiPostfixExpression) expression).getOperationSign()[ CD ]
Line_2 $$ public void fixUsage() throws IncorrectOperationException -->Line_4 $$ final String operator = sign.getText()[ CD ]
Line_9 $$ final PsiStatement statement = PsiTreeUtil.getParentOfType(expression, PsiStatement.class)-->Line_10 $$ statement.getParent().addBefore(factory.createStatementFromText(newExpression + ";", expression), statement)[ FD ]
Line_2 $$ public void fixUsage() throws IncorrectOperationException -->Line_5 $$ final String strippedOperator = operator.substring(0, operator.length() - 1)[ CD ]
Line_8 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(expression.getProject()).getElementFactory()-->Line_10 $$ statement.getParent().addBefore(factory.createStatementFromText(newExpression + ";", expression), statement)[ FD ]
Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) -->Line_11 $$ expression.replace(factory.createExpressionFromText(newParameterName + "." + parameterGetterName + "()", expression))[ CD ]
Line_4 $$ final String operator = sign.getText()-->Line_5 $$ final String strippedOperator = operator.substring(0, operator.length() - 1)[ FD ]
Line_2 $$ public void fixUsage() throws IncorrectOperationException -->Line_6 $$ final String newExpression = newParameterName + '.' + parameterSetterName + '(' + newParameterName + '.' + parameterGetterName + "()" + strippedOperator + "1)"[ CD ]
Line_3 $$ final PsiJavaToken sign = expression instanceof PsiPrefixExpression ? ((PsiPrefixExpression) expression).getOperationSign() : ((PsiPostfixExpression) expression).getOperationSign()-->Line_4 $$ final String operator = sign.getText()[ FD ]
Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) -->Line_10 $$ statement.getParent().addBefore(factory.createStatementFromText(newExpression + ";", expression), statement)[ CD ]
Line_7 $$ if (expression.getParent() instanceof PsiBinaryExpression) -->Line_8 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(expression.getProject()).getElementFactory()[ CD ]
Line_8 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(expression.getProject()).getElementFactory()-->Line_11 $$ expression.replace(factory.createExpressionFromText(newParameterName + "." + parameterGetterName + "()", expression))[ FD ]
