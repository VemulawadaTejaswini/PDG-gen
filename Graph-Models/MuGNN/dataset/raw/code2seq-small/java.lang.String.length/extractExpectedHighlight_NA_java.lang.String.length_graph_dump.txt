Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_38 $$ if (foregroundColor != null) [ CD ]
Line_4 $$ int groupIdx = 1-->Line_6 $$ String descr = matcher.group(groupIdx++)[ FD ]
Line_42 $$ final int rangeStart = textOffset.get()-->Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)[ FD ]
Line_25 $$ descr = descr.replaceAll("\\\\\"", "\"")-->Line_73 $$ builder.description(descr)[ FD ]
Line_37 $$ TextAttributes forcedAttributes = null-->Line_69 $$ builder.textAttributes(forcedAttributes)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_3 $$ document.deleteString(textOffset.get(), textOffset.get() + matcher.end() - matcher.start())[ FD ]
Line_25 $$ descr = descr.replaceAll("\\\\\"", "\"")-->Line_74 $$ builder.unescapedToolTip(descr)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_6 $$ String descr = matcher.group(groupIdx++)[ CD ]
Line_72 $$ if (descr != null) -->Line_73 $$ builder.description(descr)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_55 $$ textOffset.set(textOffset.get() + closingTagMatcher.start() - pos)[ FD ]
Line_49 $$ while (true) -->Line_50 $$ if (!closingTagMatcher.find(pos)) [ CD ]
Line_13 $$ final String attrKey = matcher.group(groupIdx++)-->Line_66 $$ TextAttributesKey forcedTextAttributesKey = attrKey == null ? null : TextAttributesKey.createTextAttributesKey(attrKey)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_8 $$ final String foregroundColor = matcher.group(groupIdx++)[ FD ]
Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)-->Line_54 $$ if (closingTagMatcher.start() < nextTagStart) [ FD ]
Line_4 $$ int groupIdx = 1-->Line_9 $$ final String backgroundColor = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_7 $$ final String typeString = matcher.group(groupIdx++)[ FD ]
Line_44 $$ if (closed) -->Line_45 $$ toContinueFrom = matcher.end()[ CD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_18 $$ if (descr.equals("null")) [ FD ]
Line_28 $$ if (typeString != null) -->Line_35 $$ LOG.assertTrue(type != null, "Wrong highlight type: " + typeString)[ CD ]
Line_4 $$ int groupIdx = 1-->Line_13 $$ final String attrKey = matcher.group(groupIdx++)[ FD ]
Line_47 $$ int pos = matcher.end()-->Line_61 $$ pos = extractExpectedHighlight(matcher, text, document, textOffset)[ FD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_70 $$ if (forcedTextAttributesKey != null)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_42 $$ final int rangeStart = textOffset.get()[ FD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_74 $$ builder.unescapedToolTip(descr)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_28 $$ if (typeString != null) [ CD ]
Line_70 $$ if (forcedTextAttributesKey != null)-->Line_71 $$ builder.textAttributes(forcedTextAttributesKey)[ CD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_68 $$ if (forcedAttributes != null)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_6 $$ String descr = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_47 $$ int pos = matcher.end()[ FD ]
Line_66 $$ TextAttributesKey forcedTextAttributesKey = attrKey == null ? null : TextAttributesKey.createTextAttributesKey(attrKey)-->Line_71 $$ builder.textAttributes(forcedTextAttributesKey)[ FD ]
Line_25 $$ descr = descr.replaceAll("\\\\\"", "\"")-->Line_72 $$ if (descr != null) [ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_5 $$ final String marker = matcher.group(groupIdx++)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_56 $$ document.deleteString(textOffset.get(), textOffset.get() + closingTagMatcher.end() - closingTagMatcher.start())[ FD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_78 $$ HighlightInfo highlightInfo = builder.createUnconditionally()[ CD ]
Line_15 $$ if (descr == null) -->Line_18 $$ if (descr.equals("null")) [ CD ]
Line_64 $$ final ExpectedHighlightingSet expectedHighlightingSet = myHighlightingTypes.get(marker)-->Line_76 $$ if (expectedHighlightingSet.endOfLine)[ FD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_69 $$ builder.textAttributes(forcedAttributes)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_7 $$ final String typeString = matcher.group(groupIdx++)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_13 $$ final String attrKey = matcher.group(groupIdx++)[ CD ]
Line_72 $$ if (descr != null) -->Line_74 $$ builder.unescapedToolTip(descr)[ CD ]
Line_8 $$ final String foregroundColor = matcher.group(groupIdx++)-->Line_38 $$ if (foregroundColor != null) [ FD ]
Line_27 $$ HighlightInfoType type = WHATEVER-->Line_31 $$ type = (HighlightInfoType) field.get(null)[ FD ]
Line_4 $$ int groupIdx = 1-->Line_8 $$ final String foregroundColor = matcher.group(groupIdx++)[ FD ]
Line_43 $$ final int toContinueFrom-->Line_57 $$ toContinueFrom = closingTagMatcher.end()[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_11 $$ final String effectType = matcher.group(groupIdx++)[ CD ]
Line_4 $$ int groupIdx = 1-->Line_7 $$ final String typeString = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_11 $$ final String effectType = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_43 $$ final int toContinueFrom[ CD ]
Line_76 $$ if (expectedHighlightingSet.endOfLine)-->Line_77 $$ builder.endOfLine()[ CD ]
Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)-->Line_57 $$ toContinueFrom = closingTagMatcher.end()[ FD ]
Line_53 $$ final int nextTagStart = matcher.find(pos) ? matcher.start() : text.length()-->Line_54 $$ if (closingTagMatcher.start() < nextTagStart) [ FD ]
Line_30 $$ Field field = HighlightInfoType.class.getField(typeString)-->Line_31 $$ type = (HighlightInfoType) field.get(null)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)[ FD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_72 $$ if (descr != null) [ CD ]
Line_68 $$ if (forcedAttributes != null)-->Line_69 $$ builder.textAttributes(forcedAttributes)[ CD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_78 $$ HighlightInfo highlightInfo = builder.createUnconditionally()[ FD ]
Line_44 $$ if (closed) -->Line_47 $$ int pos = matcher.end()[ CD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_76 $$ if (expectedHighlightingSet.endOfLine)[ CD ]
Line_44 $$ if (closed) -->Line_49 $$ while (true) [ CD ]
Line_54 $$ if (closingTagMatcher.start() < nextTagStart) -->Line_55 $$ textOffset.set(textOffset.get() + closingTagMatcher.start() - pos)[ CD ]
Line_49 $$ while (true) -->Line_60 $$ textOffset.set(textOffset.get() + nextTagStart - pos)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_13 $$ final String attrKey = matcher.group(groupIdx++)[ FD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_73 $$ builder.description(descr)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_14 $$ final boolean closed = matcher.group(groupIdx) != null[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_10 $$ final String effectColor = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_37 $$ TextAttributes forcedAttributes = null[ CD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_15 $$ if (descr == null) [ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_53 $$ final int nextTagStart = matcher.find(pos) ? matcher.start() : text.length()[ FD ]
Line_61 $$ pos = extractExpectedHighlight(matcher, text, document, textOffset)-->Line_50 $$ if (!closingTagMatcher.find(pos)) [ FD ]
Line_44 $$ if (closed) -->Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)[ CD ]
Line_31 $$ type = (HighlightInfoType) field.get(null)-->Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_10 $$ final String effectColor = matcher.group(groupIdx++)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_45 $$ toContinueFrom = matcher.end()[ FD ]
Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)-->Line_56 $$ document.deleteString(textOffset.get(), textOffset.get() + closingTagMatcher.end() - closingTagMatcher.start())[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_9 $$ final String backgroundColor = matcher.group(groupIdx++)[ FD ]
Line_4 $$ int groupIdx = 1-->Line_10 $$ final String effectColor = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_42 $$ final int rangeStart = textOffset.get()[ CD ]
Line_54 $$ if (closingTagMatcher.start() < nextTagStart) -->Line_57 $$ toContinueFrom = closingTagMatcher.end()[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_12 $$ final String fontType = matcher.group(groupIdx++)[ FD ]
Line_22 $$ if (descr != null) -->Line_25 $$ descr = descr.replaceAll("\\\\\"", "\"")[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_4 $$ int groupIdx = 1[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_3 $$ document.deleteString(textOffset.get(), textOffset.get() + matcher.end() - matcher.start())[ CD ]
Line_4 $$ int groupIdx = 1-->Line_5 $$ final String marker = matcher.group(groupIdx++)[ FD ]
Line_50 $$ if (!closingTagMatcher.find(pos)) -->Line_51 $$ LOG.error("Cannot find closing </" + marker + "> in position " + pos)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_60 $$ textOffset.set(textOffset.get() + nextTagStart - pos)[ FD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_72 $$ if (descr != null) [ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_8 $$ final String foregroundColor = matcher.group(groupIdx++)[ CD ]
Line_64 $$ final ExpectedHighlightingSet expectedHighlightingSet = myHighlightingTypes.get(marker)-->Line_65 $$ if (expectedHighlightingSet.enabled) [ FD ]
Line_27 $$ HighlightInfoType type = WHATEVER-->Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)[ FD ]
Line_7 $$ final String typeString = matcher.group(groupIdx++)-->Line_28 $$ if (typeString != null) [ FD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_66 $$ TextAttributesKey forcedTextAttributesKey = attrKey == null ? null : TextAttributesKey.createTextAttributesKey(attrKey)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_81 $$ return toContinueFrom[ CD ]
Line_4 $$ int groupIdx = 1-->Line_11 $$ final String effectType = matcher.group(groupIdx++)[ FD ]
Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)-->Line_50 $$ if (!closingTagMatcher.find(pos)) [ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_15 $$ if (descr == null) [ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_61 $$ pos = extractExpectedHighlight(matcher, text, document, textOffset)[ FD ]
Line_5 $$ final String marker = matcher.group(groupIdx++)-->Line_64 $$ final ExpectedHighlightingSet expectedHighlightingSet = myHighlightingTypes.get(marker)[ FD ]
Line_45 $$ toContinueFrom = matcher.end()-->Line_57 $$ toContinueFrom = closingTagMatcher.end()[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_9 $$ final String backgroundColor = matcher.group(groupIdx++)[ CD ]
Line_4 $$ int groupIdx = 1-->Line_12 $$ final String fontType = matcher.group(groupIdx++)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_64 $$ final ExpectedHighlightingSet expectedHighlightingSet = myHighlightingTypes.get(marker)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_12 $$ final String fontType = matcher.group(groupIdx++)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_5 $$ final String marker = matcher.group(groupIdx++)[ FD ]
Line_43 $$ final int toContinueFrom-->Line_45 $$ toContinueFrom = matcher.end()[ FD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_71 $$ builder.textAttributes(forcedTextAttributesKey)[ FD ]
Line_48 $$ final Matcher closingTagMatcher = Pattern.compile("</" + marker + ">").matcher(text)-->Line_55 $$ textOffset.set(textOffset.get() + closingTagMatcher.start() - pos)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_14 $$ final boolean closed = matcher.group(groupIdx) != null[ CD ]
Line_49 $$ while (true) -->Line_61 $$ pos = extractExpectedHighlight(matcher, text, document, textOffset)[ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_27 $$ HighlightInfoType type = WHATEVER[ CD ]
Line_47 $$ int pos = matcher.end()-->Line_53 $$ final int nextTagStart = matcher.find(pos) ? matcher.start() : text.length()[ FD ]
Line_54 $$ if (closingTagMatcher.start() < nextTagStart) -->Line_56 $$ document.deleteString(textOffset.get(), textOffset.get() + closingTagMatcher.end() - closingTagMatcher.start())[ CD ]
Line_61 $$ pos = extractExpectedHighlight(matcher, text, document, textOffset)-->Line_53 $$ final int nextTagStart = matcher.find(pos) ? matcher.start() : text.length()[ FD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_25 $$ descr = descr.replaceAll("\\\\\"", "\"")[ FD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)[ CD ]
Line_65 $$ if (expectedHighlightingSet.enabled) -->Line_79 $$ expectedHighlightingSet.infos.add(highlightInfo)[ CD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_22 $$ if (descr != null) [ FD ]
Line_49 $$ while (true) -->Line_53 $$ final int nextTagStart = matcher.find(pos) ? matcher.start() : text.length()[ CD ]
Line_66 $$ TextAttributesKey forcedTextAttributesKey = attrKey == null ? null : TextAttributesKey.createTextAttributesKey(attrKey)-->Line_70 $$ if (forcedTextAttributesKey != null)[ FD ]
Line_78 $$ HighlightInfo highlightInfo = builder.createUnconditionally()-->Line_79 $$ expectedHighlightingSet.infos.add(highlightInfo)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_65 $$ if (expectedHighlightingSet.enabled) [ CD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_73 $$ builder.description(descr)[ FD ]
Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)-->Line_77 $$ builder.endOfLine()[ FD ]
Line_6 $$ String descr = matcher.group(groupIdx++)-->Line_74 $$ builder.unescapedToolTip(descr)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_22 $$ if (descr != null) [ CD ]
Line_4 $$ int groupIdx = 1-->Line_14 $$ final boolean closed = matcher.group(groupIdx) != null[ FD ]
Line_7 $$ final String typeString = matcher.group(groupIdx++)-->Line_30 $$ Field field = HighlightInfoType.class.getField(typeString)[ FD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_44 $$ if (closed) [ CD ]
Line_47 $$ int pos = matcher.end()-->Line_50 $$ if (!closingTagMatcher.find(pos)) [ FD ]
Line_49 $$ while (true) -->Line_54 $$ if (closingTagMatcher.start() < nextTagStart) [ CD ]
Line_2 $$ private int extractExpectedHighlight(final Matcher matcher, final String text, final Document document, final Ref<Integer> textOffset) -->Line_67 $$ HighlightInfo.Builder builder = HighlightInfo.newHighlightInfo(type).range(rangeStart, textOffset.get()).severity(expectedHighlightingSet.severity)[ FD ]
Line_37 $$ TextAttributes forcedAttributes = null-->Line_68 $$ if (forcedAttributes != null)[ FD ]
