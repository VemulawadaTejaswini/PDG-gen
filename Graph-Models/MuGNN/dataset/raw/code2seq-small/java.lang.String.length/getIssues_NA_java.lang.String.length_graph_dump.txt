Line_4 $$ if (StringUtil.isNotEmpty(request)) -->Line_5 $$ query += " " + request[ CD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_4 $$ if (StringUtil.isNotEmpty(request)) [ FD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_7 $$ String requestUrl = "/rest/project/issues/?filter=" + encodeUrl(query) + "&max=" + max + "&updatedAfter" + since[ CD ]
Line_13 $$ for (int i = 0; i < s.length(); i++) -->Line_14 $$ if (!XMLChar.isValid(s.charAt(i))) [ CD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_3 $$ String query = getDefaultSearch()[ CD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_5 $$ query += " " + request[ FD ]
Line_3 $$ String query = getDefaultSearch()-->Line_5 $$ query += " " + request[ FD ]
Line_8 $$ HttpMethod method = doREST(requestUrl, false)-->Line_40 $$ method.releaseConnection()[ FD ]
Line_31 $$ List<Element> children = element.getChildren("issue")-->Line_32 $$ final List<Task> tasks = ContainerUtil.mapNotNull(children, new NullableFunction<Element, Task>() [ FD ]
Line_14 $$ if (!XMLChar.isValid(s.charAt(i))) -->Line_15 $$ s = s.replace(s.charAt(i), ' ')[ CD ]
Line_18 $$ Element element-->Line_28 $$ if ("error".equals(element.getName())) [ FD ]
Line_18 $$ Element element-->Line_31 $$ List<Element> children = element.getChildren("issue")[ FD ]
Line_15 $$ s = s.replace(s.charAt(i), ' ')-->Line_14 $$ if (!XMLChar.isValid(s.charAt(i))) [ FD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_4 $$ if (StringUtil.isNotEmpty(request)) [ CD ]
Line_32 $$ final List<Task> tasks = ContainerUtil.mapNotNull(children, new NullableFunction<Element, Task>() -->Line_35 $$ return createIssue(o)[ CD ]
Line_15 $$ s = s.replace(s.charAt(i), ' ')-->Line_13 $$ for (int i = 0; i < s.length(); i++) [ FD ]
Line_2 $$ public Task[] getIssues(@Nullable String request, int max, long since) throws Exception -->Line_8 $$ HttpMethod method = doREST(requestUrl, false)[ CD ]
Line_7 $$ String requestUrl = "/rest/project/issues/?filter=" + encodeUrl(query) + "&max=" + max + "&updatedAfter" + since-->Line_8 $$ HttpMethod method = doREST(requestUrl, false)[ FD ]
Line_5 $$ query += " " + request-->Line_7 $$ String requestUrl = "/rest/project/issues/?filter=" + encodeUrl(query) + "&max=" + max + "&updatedAfter" + since[ FD ]
Line_13 $$ for (int i = 0; i < s.length(); i++) -->Line_15 $$ s = s.replace(s.charAt(i), ' ')[ FD ]
Line_3 $$ String query = getDefaultSearch()-->Line_7 $$ String requestUrl = "/rest/project/issues/?filter=" + encodeUrl(query) + "&max=" + max + "&updatedAfter" + since[ FD ]
Line_18 $$ Element element-->Line_29 $$ throw new Exception("Error from YouTrack for " + requestUrl + ": '" + element.getText() + "'")[ FD ]
Line_32 $$ final List<Task> tasks = ContainerUtil.mapNotNull(children, new NullableFunction<Element, Task>() -->Line_35 $$ return createIssue(o)[ FD ]
Line_8 $$ HttpMethod method = doREST(requestUrl, false)-->Line_10 $$ InputStream stream = method.getResponseBodyAsStream()[ FD ]
Line_32 $$ final List<Task> tasks = ContainerUtil.mapNotNull(children, new NullableFunction<Element, Task>() -->Line_38 $$ return tasks.toArray(new Task[tasks.size()])[ FD ]
Line_13 $$ for (int i = 0; i < s.length(); i++) -->Line_14 $$ if (!XMLChar.isValid(s.charAt(i))) [ FD ]
