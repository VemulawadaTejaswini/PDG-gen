Line_3 $$ TestSimpleBeanFiltered bean = new TestSimpleBeanFiltered()-->Line_4 $$ bean.setProperty1("value")[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_14 $$ assertTrue(content.length() > 0)[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_11 $$ view.setUpdateContentLength(true)[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_3 $$ TestSimpleBeanFiltered bean = new TestSimpleBeanFiltered()[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_8 $$ model.put("foo", bean)[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_13 $$ String content = response.getContentAsString()[ CD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_8 $$ model.put("foo", bean)[ FD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_7 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ FD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_12 $$ view.render(model, request, response)[ FD ]
Line_13 $$ String content = response.getContentAsString()-->Line_17 $$ assertThat(content, not(containsString("\"property2\":\"value\"")))[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_7 $$ model.put("bindingResult", mock(BindingResult.class, "binding_result"))[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_18 $$ assertFalse(content.contains(FilterProvider.class.getName()))[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_12 $$ view.render(model, request, response)[ CD ]
Line_3 $$ TestSimpleBeanFiltered bean = new TestSimpleBeanFiltered()-->Line_8 $$ model.put("foo", bean)[ FD ]
Line_13 $$ String content = response.getContentAsString()-->Line_14 $$ assertTrue(content.length() > 0)[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_9 $$ FilterProvider filters = new SimpleFilterProvider().addFilter("myJacksonFilter", SimpleBeanPropertyFilter.serializeAllExcept("property2"))[ CD ]
Line_13 $$ String content = response.getContentAsString()-->Line_15 $$ assertEquals(content.length(), response.getContentLength())[ FD ]
Line_13 $$ String content = response.getContentAsString()-->Line_18 $$ assertFalse(content.contains(FilterProvider.class.getName()))[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_10 $$ model.put(FilterProvider.class.getName(), filters)[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_16 $$ assertThat(content, containsString("\"property1\":\"value\""))[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_5 $$ bean.setProperty2("value")[ CD ]
Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()-->Line_10 $$ model.put(FilterProvider.class.getName(), filters)[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_4 $$ bean.setProperty1("value")[ CD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_17 $$ assertThat(content, not(containsString("\"property2\":\"value\"")))[ CD ]
Line_3 $$ TestSimpleBeanFiltered bean = new TestSimpleBeanFiltered()-->Line_5 $$ bean.setProperty2("value")[ FD ]
Line_9 $$ FilterProvider filters = new SimpleFilterProvider().addFilter("myJacksonFilter", SimpleBeanPropertyFilter.serializeAllExcept("property2"))-->Line_10 $$ model.put(FilterProvider.class.getName(), filters)[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_15 $$ assertEquals(content.length(), response.getContentLength())[ CD ]
Line_13 $$ String content = response.getContentAsString()-->Line_16 $$ assertThat(content, containsString("\"property1\":\"value\""))[ FD ]
Line_2 $$ public void renderSimpleBeanWithFilters() throws Exception -->Line_6 $$ Map<String, Object> model = new HashMap<String, Object>()[ CD ]
