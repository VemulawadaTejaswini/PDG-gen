Line_10 $$ for (File root : locationRoots) -->Line_19 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_22 $$ if (recurse) -->Line_23 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ CD ]
Line_13 $$ if (archive != null) -->Line_14 $$ isFile = true[ CD ]
Line_9 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_25 $$ collectFromDirectory(directory, kinds, results)[ FD ]
Line_13 $$ if (archive != null) -->Line_16 $$ isFile = isFile(root)[ CD ]
Line_14 $$ isFile = true-->Line_16 $$ isFile = isFile(root)[ FD ]
Line_18 $$ if (isFile) -->Line_22 $$ if (recurse) [ CD ]
Line_10 $$ for (File root : locationRoots) -->Line_16 $$ isFile = isFile(root)[ FD ]
Line_12 $$ final boolean isFile-->Line_14 $$ isFile = true[ FD ]
Line_8 $$ final String relativePath = packageName.replace('.', File.separatorChar)-->Line_21 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root[ FD ]
Line_22 $$ if (recurse) -->Line_25 $$ collectFromDirectory(directory, kinds, results)[ CD ]
Line_9 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_19 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_5 $$ if (locationRoots == null) -->Line_6 $$ return Collections.emptyList()[ CD ]
Line_9 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_23 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ FD ]
Line_21 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root-->Line_23 $$ collectFromDirectoryRecursively(directory, kinds, results, true)[ FD ]
Line_18 $$ if (isFile) -->Line_19 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ CD ]
Line_8 $$ final String relativePath = packageName.replace('.', File.separatorChar)-->Line_19 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_21 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root-->Line_25 $$ collectFromDirectory(directory, kinds, results)[ FD ]
Line_4 $$ Iterable<? extends File> locationRoots = getLocation(location)-->Line_5 $$ if (locationRoots == null) [ FD ]
Line_10 $$ for (File root : locationRoots) -->Line_11 $$ final Archive archive = myArchives.get(root)[ FD ]
Line_11 $$ final Archive archive = myArchives.get(root)-->Line_19 $$ collectFromArchive(root, archive, relativePath, kinds, recurse, results)[ FD ]
Line_18 $$ if (isFile) -->Line_21 $$ final File directory = relativePath.length() != 0 ? new File(root, relativePath) : root[ CD ]
Line_9 $$ ListBuffer<JavaFileObject> results = new ListBuffer<JavaFileObject>()-->Line_29 $$ return results.toList()[ FD ]
Line_11 $$ final Archive archive = myArchives.get(root)-->Line_13 $$ if (archive != null) [ FD ]
Line_12 $$ final boolean isFile-->Line_16 $$ isFile = isFile(root)[ FD ]
