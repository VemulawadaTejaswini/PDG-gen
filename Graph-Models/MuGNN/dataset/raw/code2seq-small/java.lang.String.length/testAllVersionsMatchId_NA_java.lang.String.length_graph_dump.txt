Line_9 $$ String constantName = field.getName().substring(0, field.getName().length() - 3)-->Line_26 $$ assertEquals("V_" + v.number().replace('.', '_'), constantName)[ FD ]
Line_10 $$ java.lang.reflect.Field versionConstant = Version.class.getField(constantName)-->Line_13 $$ Version v = (Version) versionConstant.get(Version.class)[ FD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_5 $$ if (field.getName().endsWith("_ID")) [ FD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_21 $$ if (v.isRC()) [ FD ]
Line_28 $$ String branchName = "" + v.major + "." + v.minor-->Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)[ FD ]
Line_17 $$ if (v.major >= 2) -->Line_24 $$ assertEquals("V_" + number.replace('.', '_'), constantName)[ CD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_31 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_18 $$ String number = v.number()-->Line_22 $$ number = number.replace("-rc", "_rc")[ FD ]
Line_28 $$ String branchName = "" + v.major + "." + v.minor-->Line_34 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_11 $$ assertTrue(constantName + " should be static", Modifier.isStatic(versionConstant.getModifiers()))[ CD ]
Line_28 $$ String branchName = "" + v.major + "." + v.minor-->Line_31 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_10 $$ java.lang.reflect.Field versionConstant = Version.class.getField(constantName)-->Line_12 $$ assertTrue(constantName + " should be final", Modifier.isFinal(versionConstant.getModifiers()))[ FD ]
Line_17 $$ if (v.major >= 2) -->Line_26 $$ assertEquals("V_" + v.number().replace('.', '_'), constantName)[ CD ]
Line_32 $$ if (v.after(maxBranchVersion)) -->Line_33 $$ assertFalse("Version " + maxBranchVersion + " cannot be a snapshot because version " + v + " exists", maxBranchVersion.snapshot())[ CD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_32 $$ if (v.after(maxBranchVersion)) [ FD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_19 $$ if (v.isBeta()) [ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_16 $$ assertEquals("Version " + constantName + " does not have correct id", versionId, v.id)[ CD ]
Line_21 $$ if (v.isRC()) -->Line_22 $$ number = number.replace("-rc", "_rc")[ CD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_15 $$ assertEquals("Version id " + field.getName() + " does not point to " + constantName, v, Version.fromId(versionId))[ FD ]
Line_30 $$ if (maxBranchVersion == null) -->Line_32 $$ if (v.after(maxBranchVersion)) [ CD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_9 $$ String constantName = field.getName().substring(0, field.getName().length() - 3)[ FD ]
Line_20 $$ number = number.replace("-beta", "_beta")-->Line_22 $$ number = number.replace("-rc", "_rc")[ FD ]
Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)-->Line_30 $$ if (maxBranchVersion == null) [ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_9 $$ String constantName = field.getName().substring(0, field.getName().length() - 3)[ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_14 $$ logger.info("Checking " + v)[ CD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_15 $$ assertEquals("Version id " + field.getName() + " does not point to " + constantName, v, Version.fromId(versionId))[ FD ]
Line_8 $$ int versionId = (Integer) field.get(Version.class)-->Line_15 $$ assertEquals("Version id " + field.getName() + " does not point to " + constantName, v, Version.fromId(versionId))[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_7 $$ assertTrue(field.getName() + " should be final", Modifier.isFinal(field.getModifiers()))[ CD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_8 $$ int versionId = (Integer) field.get(Version.class)[ FD ]
Line_17 $$ if (v.major >= 2) -->Line_19 $$ if (v.isBeta()) [ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_10 $$ java.lang.reflect.Field versionConstant = Version.class.getField(constantName)[ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_30 $$ if (maxBranchVersion == null) [ CD ]
Line_9 $$ String constantName = field.getName().substring(0, field.getName().length() - 3)-->Line_10 $$ java.lang.reflect.Field versionConstant = Version.class.getField(constantName)[ FD ]
Line_3 $$ Map<String, Version> maxBranchVersions = new HashMap()-->Line_34 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_17 $$ if (v.major >= 2) -->Line_18 $$ String number = v.number()[ CD ]
Line_10 $$ java.lang.reflect.Field versionConstant = Version.class.getField(constantName)-->Line_11 $$ assertTrue(constantName + " should be static", Modifier.isStatic(versionConstant.getModifiers()))[ FD ]
Line_3 $$ Map<String, Version> maxBranchVersions = new HashMap()-->Line_31 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_6 $$ assertTrue(field.getName() + " should be static", Modifier.isStatic(field.getModifiers()))[ CD ]
Line_32 $$ if (v.after(maxBranchVersion)) -->Line_34 $$ maxBranchVersions.put(branchName, v)[ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_12 $$ assertTrue(constantName + " should be final", Modifier.isFinal(versionConstant.getModifiers()))[ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_15 $$ assertEquals("Version id " + field.getName() + " does not point to " + constantName, v, Version.fromId(versionId))[ CD ]
Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)-->Line_32 $$ if (v.after(maxBranchVersion)) [ FD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_18 $$ String number = v.number()[ FD ]
Line_19 $$ if (v.isBeta()) -->Line_21 $$ if (v.isRC()) [ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_13 $$ Version v = (Version) versionConstant.get(Version.class)[ CD ]
Line_19 $$ if (v.isBeta()) -->Line_20 $$ number = number.replace("-beta", "_beta")[ CD ]
Line_18 $$ String number = v.number()-->Line_20 $$ number = number.replace("-beta", "_beta")[ FD ]
Line_3 $$ Map<String, Version> maxBranchVersions = new HashMap()-->Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)[ FD ]
Line_18 $$ String number = v.number()-->Line_24 $$ assertEquals("V_" + number.replace('.', '_'), constantName)[ FD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_6 $$ assertTrue(field.getName() + " should be static", Modifier.isStatic(field.getModifiers()))[ FD ]
Line_8 $$ int versionId = (Integer) field.get(Version.class)-->Line_16 $$ assertEquals("Version " + constantName + " does not have correct id", versionId, v.id)[ FD ]
Line_22 $$ number = number.replace("-rc", "_rc")-->Line_24 $$ assertEquals("V_" + number.replace('.', '_'), constantName)[ FD ]
Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)-->Line_33 $$ assertFalse("Version " + maxBranchVersion + " cannot be a snapshot because version " + v + " exists", maxBranchVersion.snapshot())[ FD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_34 $$ maxBranchVersions.put(branchName, v)[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_8 $$ int versionId = (Integer) field.get(Version.class)[ CD ]
Line_20 $$ number = number.replace("-beta", "_beta")-->Line_24 $$ assertEquals("V_" + number.replace('.', '_'), constantName)[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_29 $$ Version maxBranchVersion = maxBranchVersions.get(branchName)[ CD ]
Line_2 $$ public void testAllVersionsMatchId() throws Exception -->Line_3 $$ Map<String, Version> maxBranchVersions = new HashMap()[ CD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_17 $$ if (v.major >= 2) [ CD ]
Line_13 $$ Version v = (Version) versionConstant.get(Version.class)-->Line_26 $$ assertEquals("V_" + v.number().replace('.', '_'), constantName)[ FD ]
Line_5 $$ if (field.getName().endsWith("_ID")) -->Line_28 $$ String branchName = "" + v.major + "." + v.minor[ CD ]
Line_30 $$ if (maxBranchVersion == null) -->Line_31 $$ maxBranchVersions.put(branchName, v)[ CD ]
Line_4 $$ for (java.lang.reflect.Field field : Version.class.getFields()) -->Line_7 $$ assertTrue(field.getName() + " should be final", Modifier.isFinal(field.getModifiers()))[ FD ]
Line_9 $$ String constantName = field.getName().substring(0, field.getName().length() - 3)-->Line_24 $$ assertEquals("V_" + number.replace('.', '_'), constantName)[ FD ]
