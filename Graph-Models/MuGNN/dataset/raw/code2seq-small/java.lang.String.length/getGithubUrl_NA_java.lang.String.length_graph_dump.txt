Line_18 $$ final String rootPath = repository.getRoot().getPath()-->Line_20 $$ if (!path.startsWith(rootPath)) [ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_3 $$ GitRepositoryManager manager = GitUtil.getRepositoryManager(project)[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_29 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't get last revision.")[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_5 $$ if (repository == null) [ CD ]
Line_7 $$ for (GitRepository repo : manager.getRepositories()) -->Line_8 $$ details.append(repo.getPresentableUrl()).append("; ")[ FD ]
Line_14 $$ if (githubRemoteUrl == null) -->Line_15 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't find github remote")[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_15 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't find github remote")[ FD ]
Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)-->Line_5 $$ if (repository == null) [ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_19 $$ final String path = virtualFile.getPath()[ FD ]
Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)-->Line_13 $$ final String githubRemoteUrl = GithubUtil.findGithubRemoteUrl(repository)[ FD ]
Line_20 $$ if (!path.startsWith(rootPath)) -->Line_21 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "File is not under repository root", "Root: " + rootPath + ", file: " + path)[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_30 $$ return null[ CD ]
Line_5 $$ if (repository == null) -->Line_11 $$ return null[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_13 $$ final String githubRemoteUrl = GithubUtil.findGithubRemoteUrl(repository)[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)[ CD ]
Line_5 $$ if (repository == null) -->Line_10 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't find git repository", details.toString())[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_24 $$ String relativePath = path.substring(rootPath.length())[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_20 $$ if (!path.startsWith(rootPath)) [ CD ]
Line_3 $$ GitRepositoryManager manager = GitUtil.getRepositoryManager(project)-->Line_7 $$ for (GitRepository repo : manager.getRepositories()) [ FD ]
Line_19 $$ final String path = virtualFile.getPath()-->Line_24 $$ String relativePath = path.substring(rootPath.length())[ FD ]
Line_25 $$ String hash = getCurrentFileRevisionHash(project, virtualFile)-->Line_27 $$ return makeUrlToOpen(editor, relativePath, hash, githubRemoteUrl)[ FD ]
Line_18 $$ final String rootPath = repository.getRoot().getPath()-->Line_24 $$ String relativePath = path.substring(rootPath.length())[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_21 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "File is not under repository root", "Root: " + rootPath + ", file: " + path)[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_25 $$ String hash = getCurrentFileRevisionHash(project, virtualFile)[ FD ]
Line_20 $$ if (!path.startsWith(rootPath)) -->Line_22 $$ return null[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_25 $$ String hash = getCurrentFileRevisionHash(project, virtualFile)[ CD ]
Line_5 $$ if (repository == null) -->Line_6 $$ StringBuilder details = new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ")[ CD ]
Line_25 $$ String hash = getCurrentFileRevisionHash(project, virtualFile)-->Line_26 $$ if (hash != null) [ FD ]
Line_3 $$ GitRepositoryManager manager = GitUtil.getRepositoryManager(project)-->Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)[ FD ]
Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)-->Line_18 $$ final String rootPath = repository.getRoot().getPath()[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_3 $$ GitRepositoryManager manager = GitUtil.getRepositoryManager(project)[ CD ]
Line_13 $$ final String githubRemoteUrl = GithubUtil.findGithubRemoteUrl(repository)-->Line_14 $$ if (githubRemoteUrl == null) [ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_26 $$ if (hash != null) [ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_4 $$ final GitRepository repository = manager.getRepositoryForFile(virtualFile)[ FD ]
Line_13 $$ final String githubRemoteUrl = GithubUtil.findGithubRemoteUrl(repository)-->Line_27 $$ return makeUrlToOpen(editor, relativePath, hash, githubRemoteUrl)[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_14 $$ if (githubRemoteUrl == null) [ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_6 $$ StringBuilder details = new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ")[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_19 $$ final String path = virtualFile.getPath()[ CD ]
Line_19 $$ final String path = virtualFile.getPath()-->Line_20 $$ if (!path.startsWith(rootPath)) [ FD ]
Line_24 $$ String relativePath = path.substring(rootPath.length())-->Line_27 $$ return makeUrlToOpen(editor, relativePath, hash, githubRemoteUrl)[ FD ]
Line_14 $$ if (githubRemoteUrl == null) -->Line_16 $$ return null[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_10 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't find git repository", details.toString())[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_29 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't get last revision.")[ FD ]
Line_6 $$ StringBuilder details = new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ")-->Line_8 $$ details.append(repo.getPresentableUrl()).append("; ")[ FD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_18 $$ final String rootPath = repository.getRoot().getPath()[ CD ]
Line_2 $$ private static String getGithubUrl(@NotNull Project project, @NotNull VirtualFile virtualFile, @Nullable Editor editor) -->Line_27 $$ return makeUrlToOpen(editor, relativePath, hash, githubRemoteUrl)[ FD ]
Line_26 $$ if (hash != null) -->Line_27 $$ return makeUrlToOpen(editor, relativePath, hash, githubRemoteUrl)[ CD ]
Line_6 $$ StringBuilder details = new StringBuilder("file: " + virtualFile.getPresentableUrl() + "; Git repositories: ")-->Line_10 $$ GithubNotifications.showError(project, CANNOT_OPEN_IN_BROWSER, "Can't find git repository", details.toString())[ FD ]
