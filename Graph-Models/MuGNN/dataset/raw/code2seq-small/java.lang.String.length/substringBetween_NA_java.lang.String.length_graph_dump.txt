Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_7 $$ return end != -1 ? str.substring(start + open.length(), end) : null[ CD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_6 $$ int end = str.indexOf(close, start + open.length())[ CD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_7 $$ return end != -1 ? str.substring(start + open.length(), end) : null[ FD ]
Line_6 $$ int end = str.indexOf(close, start + open.length())-->Line_7 $$ return end != -1 ? str.substring(start + open.length(), end) : null[ FD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_6 $$ int end = str.indexOf(close, start + open.length())[ FD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_3 $$ int start = str.indexOf(open)[ CD ]
Line_4 $$ if (start == -1)-->Line_5 $$ return null[ CD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_4 $$ if (start == -1)[ CD ]
Line_2 $$ private static String substringBetween(@NotNull String str, @NotNull String open, @NotNull String close) -->Line_3 $$ int start = str.indexOf(open)[ FD ]
Line_3 $$ int start = str.indexOf(open)-->Line_4 $$ if (start == -1)[ FD ]
