Line_23 $$ octalPerms = octalPerms.substring(len - 4, len)-->Line_25 $$ FsPermission perms = new FsPermission(Short.parseShort(octalPerms, 8))[ FD ]
Line_20 $$ String octalPerms = tokens.nextToken()-->Line_21 $$ if (octalPerms.length() > 4) [ FD ]
Line_34 $$ if (!target.isEmpty()) -->Line_35 $$ symlink = new Path(target)[ CD ]
Line_21 $$ if (octalPerms.length() > 4) -->Line_23 $$ octalPerms = octalPerms.substring(len - 4, len)[ CD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_11 $$ if (line.endsWith("Too many levels of symbolic links")) [ CD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_28 $$ String symStr = tokens.nextToken()[ FD ]
Line_4 $$ String line = lines.readLine()-->Line_11 $$ if (line.endsWith("Too many levels of symbolic links")) [ FD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_8 $$ if (line.endsWith("No such file or directory") || line.endsWith("Not a directory")) [ CD ]
Line_29 $$ Path symlink = null-->Line_35 $$ symlink = new Path(target)[ FD ]
Line_20 $$ String octalPerms = tokens.nextToken()-->Line_23 $$ octalPerms = octalPerms.substring(len - 4, len)[ FD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")[ CD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_4 $$ String line = lines.readLine()[ FD ]
Line_4 $$ String line = lines.readLine()-->Line_5 $$ if (line == null) [ FD ]
Line_22 $$ int len = octalPerms.length()-->Line_23 $$ octalPerms = octalPerms.substring(len - 4, len)[ FD ]
Line_28 $$ String symStr = tokens.nextToken()-->Line_30 $$ String[] parts = symStr.split(" -> ")[ FD ]
Line_33 $$ target = target.substring(1, target.length() - 1)-->Line_34 $$ if (!target.isEmpty()) [ FD ]
Line_21 $$ if (octalPerms.length() > 4) -->Line_22 $$ int len = octalPerms.length()[ CD ]
Line_20 $$ String octalPerms = tokens.nextToken()-->Line_25 $$ FsPermission perms = new FsPermission(Short.parseShort(octalPerms, 8))[ FD ]
Line_32 $$ String target = parts[1]-->Line_34 $$ if (!target.isEmpty()) [ FD ]
Line_32 $$ String target = parts[1]-->Line_33 $$ target = target.substring(1, target.length() - 1)[ FD ]
Line_20 $$ String octalPerms = tokens.nextToken()-->Line_22 $$ int len = octalPerms.length()[ FD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_19 $$ long accessTime = Long.parseLong(tokens.nextToken()) * 1000[ FD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_5 $$ if (line == null) [ CD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_26 $$ String owner = tokens.nextToken()[ FD ]
Line_4 $$ String line = lines.readLine()-->Line_8 $$ if (line.endsWith("No such file or directory") || line.endsWith("Not a directory")) [ FD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_18 $$ long modTime = Long.parseLong(tokens.nextToken()) * 1000[ FD ]
Line_2 $$ protected void parseExecResult(BufferedReader lines) throws IOException -->Line_4 $$ String line = lines.readLine()[ CD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_27 $$ String group = tokens.nextToken()[ FD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_16 $$ long length = Long.parseLong(tokens.nextToken())[ FD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_17 $$ boolean isDir = tokens.nextToken().equalsIgnoreCase("directory") ? true : false[ FD ]
Line_14 $$ StringTokenizer tokens = new StringTokenizer(line, ",")-->Line_20 $$ String octalPerms = tokens.nextToken()[ FD ]
