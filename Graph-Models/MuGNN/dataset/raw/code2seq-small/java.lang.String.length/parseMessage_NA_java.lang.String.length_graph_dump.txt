Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_37 $$ return new CompilerMessage(myBuilderName, kind, msgText)[ CD ]
Line_6 $$ if (dotIndex > 0) -->Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) [ CD ]
Line_10 $$ dotIndex += ". WARNING in ".length()-->Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) [ FD ]
Line_26 $$ int parenIndex = firstLine.indexOf(" (")-->Line_27 $$ String file = firstLine.substring(dotIndex, parenIndex)[ FD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_27 $$ String file = firstLine.substring(dotIndex, parenIndex)[ FD ]
Line_10 $$ dotIndex += ". WARNING in ".length()-->Line_14 $$ dotIndex += ". ERROR in ".length()[ FD ]
Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText-->Line_28 $$ int line = Integer.parseInt(firstLine.substring(parenIndex + " (at line ".length(), firstLine.indexOf(')')))[ FD ]
Line_12 $$ kind = BuildMessage.Kind.ERROR-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_23 $$ String rest = firstNewline > 0 ? msgText.substring(firstNewline + 1).trim() : ""-->Line_30 $$ return new CompilerMessage(myBuilderName, kind, rest.substring(lastLineIndex + 1), file, -1, -1, -1, line, -1)[ FD ]
Line_9 $$ isNormal = true-->Line_13 $$ isNormal = true[ FD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_6 $$ if (dotIndex > 0) [ FD ]
Line_34 $$ if (msgText.trim().matches("(\\d)+ problem(s)? \\((\\d)+ (error|warning)(s)?\\)")) -->Line_35 $$ return null[ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText[ CD ]
Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) -->Line_10 $$ dotIndex += ". WARNING in ".length()[ CD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) [ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_5 $$ boolean isNormal = false[ CD ]
Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) -->Line_16 $$ kind = BuildMessage.Kind.INFO[ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_21 $$ int firstNewline = msgText.indexOf('\n')[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_34 $$ if (msgText.trim().matches("(\\d)+ problem(s)? \\((\\d)+ (error|warning)(s)?\\)")) [ FD ]
Line_10 $$ dotIndex += ". WARNING in ".length()-->Line_27 $$ String file = firstLine.substring(dotIndex, parenIndex)[ FD ]
Line_23 $$ String rest = firstNewline > 0 ? msgText.substring(firstNewline + 1).trim() : ""-->Line_29 $$ int lastLineIndex = rest.lastIndexOf("\n")[ FD ]
Line_8 $$ kind = BuildMessage.Kind.WARNING-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_14 $$ dotIndex += ". ERROR in ".length()-->Line_27 $$ String file = firstLine.substring(dotIndex, parenIndex)[ FD ]
Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) -->Line_12 $$ kind = BuildMessage.Kind.ERROR[ CD ]
Line_4 $$ BuildMessage.Kind kind-->Line_8 $$ kind = BuildMessage.Kind.WARNING[ FD ]
Line_4 $$ BuildMessage.Kind kind-->Line_16 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_34 $$ if (msgText.trim().matches("(\\d)+ problem(s)? \\((\\d)+ (error|warning)(s)?\\)")) [ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_21 $$ int firstNewline = msgText.indexOf('\n')[ CD ]
Line_8 $$ kind = BuildMessage.Kind.WARNING-->Line_19 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_6 $$ if (dotIndex > 0) -->Line_19 $$ kind = BuildMessage.Kind.INFO[ CD ]
Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) -->Line_14 $$ dotIndex += ". ERROR in ".length()[ CD ]
Line_4 $$ BuildMessage.Kind kind-->Line_19 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_21 $$ int firstNewline = msgText.indexOf('\n')-->Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_3 $$ int dotIndex = msgText.indexOf('.')[ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) [ FD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_14 $$ dotIndex += ". ERROR in ".length()[ FD ]
Line_5 $$ boolean isNormal = false-->Line_9 $$ isNormal = true[ FD ]
Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText-->Line_26 $$ int parenIndex = firstLine.indexOf(" (")[ FD ]
Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) -->Line_13 $$ isNormal = true[ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_3 $$ int dotIndex = msgText.indexOf('.')[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_23 $$ String rest = firstNewline > 0 ? msgText.substring(firstNewline + 1).trim() : ""[ FD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) [ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_4 $$ BuildMessage.Kind kind[ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_6 $$ if (dotIndex > 0) [ CD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_23 $$ String rest = firstNewline > 0 ? msgText.substring(firstNewline + 1).trim() : ""[ CD ]
Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) -->Line_8 $$ kind = BuildMessage.Kind.WARNING[ CD ]
Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) -->Line_11 $$ if (msgText.substring(dotIndex, dotIndex + ". ERROR".length()).equals(". ERROR")) [ CD ]
Line_4 $$ BuildMessage.Kind kind-->Line_12 $$ kind = BuildMessage.Kind.ERROR[ FD ]
Line_8 $$ kind = BuildMessage.Kind.WARNING-->Line_12 $$ kind = BuildMessage.Kind.ERROR[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) [ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_24 $$ if (isNormal) [ CD ]
Line_7 $$ if (msgText.substring(dotIndex, dotIndex + ". WARNING".length()).equals(". WARNING")) -->Line_9 $$ isNormal = true[ CD ]
Line_16 $$ kind = BuildMessage.Kind.INFO-->Line_19 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_3 $$ int dotIndex = msgText.indexOf('.')-->Line_10 $$ dotIndex += ". WARNING in ".length()[ FD ]
Line_5 $$ boolean isNormal = false-->Line_13 $$ isNormal = true[ FD ]
Line_12 $$ kind = BuildMessage.Kind.ERROR-->Line_19 $$ kind = BuildMessage.Kind.INFO[ FD ]
Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText-->Line_27 $$ String file = firstLine.substring(dotIndex, parenIndex)[ FD ]
Line_2 $$ private CompilerMessage parseMessage(String msgText) -->Line_22 $$ String firstLine = firstNewline > 0 ? msgText.substring(0, firstNewline) : msgText[ FD ]
