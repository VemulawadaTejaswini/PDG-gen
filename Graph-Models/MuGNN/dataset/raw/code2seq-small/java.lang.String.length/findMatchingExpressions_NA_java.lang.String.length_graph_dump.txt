Line_8 $$ boolean typeMatch = true-->Line_13 $$ typeMatch &= Comparing.equal(parameterType, argumentType)[ FD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_4 $$ final PsiParameter[] parameters = parameterList.getParameters()[ CD ]
Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) -->Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) [ CD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_5 $$ if (arguments.length != parameters.length) [ CD ]
Line_11 $$ final PsiType parameterType = parameter.getType()-->Line_13 $$ typeMatch &= Comparing.equal(parameterType, argumentType)[ FD ]
Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) -->Line_13 $$ typeMatch &= Comparing.equal(parameterType, argumentType)[ CD ]
Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) -->Line_12 $$ final PsiType argumentType = arguments[i].getType()[ CD ]
Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) -->Line_15 $$ final String value = String.valueOf(((PsiLiteralExpression) arguments[i]).getValue())[ CD ]
Line_3 $$ final PsiParameterList parameterList = existingMethod.getParameterList()-->Line_4 $$ final PsiParameter[] parameters = parameterList.getParameters()[ FD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_8 $$ boolean typeMatch = true[ CD ]
Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) -->Line_10 $$ final PsiParameter parameter = parameters[i][ CD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_21 $$ return typeMatch[ CD ]
Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) -->Line_16 $$ if (value != null && value.length() == 1) [ CD ]
Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) -->Line_11 $$ final PsiType parameterType = parameter.getType()[ CD ]
Line_16 $$ if (value != null && value.length() == 1) -->Line_17 $$ result.add((PsiLiteralExpression) arguments[i])[ CD ]
Line_11 $$ final PsiType parameterType = parameter.getType()-->Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) [ FD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_3 $$ final PsiParameterList parameterList = existingMethod.getParameterList()[ FD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_3 $$ final PsiParameterList parameterList = existingMethod.getParameterList()[ CD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) [ FD ]
Line_15 $$ final String value = String.valueOf(((PsiLiteralExpression) arguments[i]).getValue())-->Line_16 $$ if (value != null && value.length() == 1) [ FD ]
Line_10 $$ final PsiParameter parameter = parameters[i]-->Line_11 $$ final PsiType parameterType = parameter.getType()[ FD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_17 $$ result.add((PsiLiteralExpression) arguments[i])[ FD ]
Line_5 $$ if (arguments.length != parameters.length) -->Line_6 $$ return false[ CD ]
Line_2 $$ private static boolean findMatchingExpressions(final PsiExpression[] arguments, final PsiMethod existingMethod, final Set<PsiLiteralExpression> result) -->Line_9 $$ for (int i = 0; i < parameters.length && i < arguments.length; i++) [ CD ]
Line_12 $$ final PsiType argumentType = arguments[i].getType()-->Line_13 $$ typeMatch &= Comparing.equal(parameterType, argumentType)[ FD ]
Line_12 $$ final PsiType argumentType = arguments[i].getType()-->Line_14 $$ if (arguments[i] instanceof PsiLiteralExpression && !result.contains(arguments[i]) && (charToString(parameterType, argumentType) || charToString(argumentType, parameterType))) [ FD ]
