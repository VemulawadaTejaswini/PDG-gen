Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()-->Line_20 $$ final int ws = whiteSpace.getStartOffset() + CharArrayUtil.shiftForward(newWS, Math.max(0, lineStartOffset - whiteSpace.getStartOffset()), " \t")[ FD ]
Line_4 $$ int lineStartOffset = getLineStartOffset(offset, whiteSpace, documentModel)-->Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_9 $$ if (model instanceof FormattingModelEx) [ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_4 $$ int lineStartOffset = getLineStartOffset(offset, whiteSpace, documentModel)[ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_7 $$ if (!whiteSpace.equalsToString(newWS)) [ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_5 $$ final IndentInfo indent = calcIndent(offset, documentModel, processor, whiteSpace)[ CD ]
Line_18 $$ final int defaultOffset = offset - whiteSpace.getLength() + newWS.length()-->Line_21 $$ return Math.max(defaultOffset, ws)[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_7 $$ if (!whiteSpace.equalsToString(newWS)) [ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_5 $$ final IndentInfo indent = calcIndent(offset, documentModel, processor, whiteSpace)[ FD ]
Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()-->Line_12 $$ model.replaceWhiteSpace(whiteSpace.getTextRange(), newWS)[ FD ]
Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()-->Line_10 $$ ((FormattingModelEx) model).replaceWhiteSpace(whiteSpace.getTextRange(), nodeAfter, newWS)[ FD ]
Line_19 $$ if (wsContainsCaret) -->Line_20 $$ final int ws = whiteSpace.getStartOffset() + CharArrayUtil.shiftForward(newWS, Math.max(0, lineStartOffset - whiteSpace.getStartOffset()), " \t")[ CD ]
Line_20 $$ final int ws = whiteSpace.getStartOffset() + CharArrayUtil.shiftForward(newWS, Math.max(0, lineStartOffset - whiteSpace.getStartOffset()), " \t")-->Line_21 $$ return Math.max(defaultOffset, ws)[ FD ]
Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()-->Line_18 $$ final int defaultOffset = offset - whiteSpace.getLength() + newWS.length()[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_12 $$ model.replaceWhiteSpace(whiteSpace.getTextRange(), newWS)[ FD ]
Line_9 $$ if (model instanceof FormattingModelEx) -->Line_10 $$ ((FormattingModelEx) model).replaceWhiteSpace(whiteSpace.getTextRange(), nodeAfter, newWS)[ CD ]
Line_5 $$ final IndentInfo indent = calcIndent(offset, documentModel, processor, whiteSpace)-->Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()[ FD ]
Line_9 $$ if (model instanceof FormattingModelEx) -->Line_12 $$ model.replaceWhiteSpace(whiteSpace.getTextRange(), newWS)[ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()[ CD ]
Line_19 $$ if (wsContainsCaret) -->Line_21 $$ return Math.max(defaultOffset, ws)[ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_3 $$ boolean wsContainsCaret = whiteSpace.getStartOffset() <= offset && offset < whiteSpace.getEndOffset()[ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_4 $$ int lineStartOffset = getLineStartOffset(offset, whiteSpace, documentModel)[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_3 $$ boolean wsContainsCaret = whiteSpace.getStartOffset() <= offset && offset < whiteSpace.getEndOffset()[ FD ]
Line_19 $$ if (wsContainsCaret) -->Line_23 $$ return defaultOffset[ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_20 $$ final int ws = whiteSpace.getStartOffset() + CharArrayUtil.shiftForward(newWS, Math.max(0, lineStartOffset - whiteSpace.getStartOffset()), " \t")[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_19 $$ if (wsContainsCaret) [ CD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_10 $$ ((FormattingModelEx) model).replaceWhiteSpace(whiteSpace.getTextRange(), nodeAfter, newWS)[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_18 $$ final int defaultOffset = offset - whiteSpace.getLength() + newWS.length()[ FD ]
Line_6 $$ final String newWS = whiteSpace.generateWhiteSpace(indentOptions, lineStartOffset, indent).toString()-->Line_7 $$ if (!whiteSpace.equalsToString(newWS)) [ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_15 $$ model.commitChanges()[ FD ]
Line_2 $$ private static int adjustLineIndent(final int offset, final FormattingDocumentModel documentModel, final FormatProcessor processor, final CommonCodeStyleSettings.IndentOptions indentOptions, final FormattingModel model, final WhiteSpace whiteSpace, ASTNode nodeAfter) -->Line_18 $$ final int defaultOffset = offset - whiteSpace.getLength() + newWS.length()[ CD ]
