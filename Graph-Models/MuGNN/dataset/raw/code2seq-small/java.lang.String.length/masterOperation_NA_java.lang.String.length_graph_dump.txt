Line_3 $$ String cause = request.cause()-->Line_4 $$ if (cause.length() == 0) [ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_8 $$ final CreateIndexClusterStateUpdateRequest updateRequest = new CreateIndexClusterStateUpdateRequest(request, cause, indexName, request.updateAllTypes()).ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout()).settings(request.settings()).mappings(request.mappings()).aliases(request.aliases()).customs(request.customs())[ CD ]
Line_4 $$ if (cause.length() == 0) -->Line_5 $$ cause = "api"[ CD ]
Line_3 $$ String cause = request.cause()-->Line_5 $$ cause = "api"[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_7 $$ final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index())[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_15 $$ logger.trace("[[ FD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_11 $$ listener.onResponse(new CreateIndexResponse(response.isAcknowledged()))[ CD ]
Line_8 $$ final CreateIndexClusterStateUpdateRequest updateRequest = new CreateIndexClusterStateUpdateRequest(request, cause, indexName, request.updateAllTypes()).ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout()).settings(request.settings()).mappings(request.mappings()).aliases(request.aliases()).customs(request.customs())-->Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() [ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_17 $$ logger.debug("[[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_19 $$ listener.onFailure(t)[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_11 $$ listener.onResponse(new CreateIndexResponse(response.isAcknowledged()))[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() [ CD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_19 $$ listener.onFailure(t)[ CD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_17 $$ logger.debug("[[ FD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_15 $$ logger.trace("[[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_4 $$ if (cause.length() == 0) [ CD ]
Line_14 $$ if (t instanceof IndexAlreadyExistsException) -->Line_15 $$ logger.trace("[[ CD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_8 $$ final CreateIndexClusterStateUpdateRequest updateRequest = new CreateIndexClusterStateUpdateRequest(request, cause, indexName, request.updateAllTypes()).ackTimeout(request.timeout()).masterNodeTimeout(request.masterNodeTimeout()).settings(request.settings()).mappings(request.mappings()).aliases(request.aliases()).customs(request.customs())[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_3 $$ String cause = request.cause()[ FD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_14 $$ if (t instanceof IndexAlreadyExistsException) [ FD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_11 $$ listener.onResponse(new CreateIndexResponse(response.isAcknowledged()))[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_7 $$ final String indexName = indexNameExpressionResolver.resolveDateMathExpression(request.index())[ CD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_14 $$ if (t instanceof IndexAlreadyExistsException) [ CD ]
Line_9 $$ createIndexService.createIndex(updateRequest, new ActionListener<ClusterStateUpdateResponse>() -->Line_19 $$ listener.onFailure(t)[ FD ]
Line_2 $$ protected void masterOperation(final CreateIndexRequest request, final ClusterState state, final ActionListener<CreateIndexResponse> listener) -->Line_3 $$ String cause = request.cause()[ CD ]
Line_14 $$ if (t instanceof IndexAlreadyExistsException) -->Line_17 $$ logger.debug("[[ CD ]
