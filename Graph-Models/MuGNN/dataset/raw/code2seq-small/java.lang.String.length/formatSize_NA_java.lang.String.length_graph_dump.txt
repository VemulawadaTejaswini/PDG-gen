Line_18 $$ int charsToAdd = 5 - result.length()-->Line_19 $$ if (charsToAdd < 0) [ FD ]
Line_8 $$ result = "0k"-->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ FD ]
Line_6 $$ String result-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_6 $$ String result-->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ FD ]
Line_6 $$ String result-->Line_8 $$ result = "0k"[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_4 $$ return new DecimalFormat("#,##0").format(size)[ FD ]
Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"-->Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)[ FD ]
Line_8 $$ result = "0k"-->Line_10 $$ result = "1k"[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_3 $$ if (format.equalsIgnoreCase("bytes")) [ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_19 $$ if (charsToAdd < 0) [ CD ]
Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_25 $$ StringBuilder buf = new StringBuilder()-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_6 $$ String result-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_7 $$ if (size == 0) -->Line_9 $$ if (size < ONE_KILOBYTE) [ CD ]
Line_13 $$ if (size < 99 * ONE_MEGABYTE) -->Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)[ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_7 $$ if (size == 0) [ CD ]
Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_22 $$ if (charsToAdd == 0) -->Line_23 $$ return result[ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_11 $$ if (size < ONE_MEGABYTE) [ FD ]
Line_10 $$ result = "1k"-->Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)[ FD ]
Line_13 $$ if (size < 99 * ONE_MEGABYTE) -->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_26 $$ for (int i = 0; i < charsToAdd; i++) [ CD ]
Line_25 $$ StringBuilder buf = new StringBuilder()-->Line_27 $$ buf.append(' ')[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_29 $$ return buf.append(result).toString()[ CD ]
Line_8 $$ result = "0k"-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"-->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ FD ]
Line_10 $$ result = "1k"-->Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"[ FD ]
Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_3 $$ if (format.equalsIgnoreCase("bytes")) -->Line_4 $$ return new DecimalFormat("#,##0").format(size)[ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_6 $$ String result[ CD ]
Line_7 $$ if (size == 0) -->Line_8 $$ result = "0k"[ CD ]
Line_9 $$ if (size < ONE_KILOBYTE) -->Line_11 $$ if (size < ONE_MEGABYTE) [ CD ]
Line_10 $$ result = "1k"-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_3 $$ if (format.equalsIgnoreCase("bytes")) [ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_9 $$ if (size < ONE_KILOBYTE) [ FD ]
Line_26 $$ for (int i = 0; i < charsToAdd; i++) -->Line_27 $$ buf.append(' ')[ CD ]
Line_10 $$ result = "1k"-->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ FD ]
Line_9 $$ if (size < ONE_KILOBYTE) -->Line_10 $$ result = "1k"[ CD ]
Line_8 $$ result = "0k"-->Line_18 $$ int charsToAdd = 5 - result.length()[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_25 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_18 $$ int charsToAdd = 5 - result.length()-->Line_26 $$ for (int i = 0; i < charsToAdd; i++) [ FD ]
Line_18 $$ int charsToAdd = 5 - result.length()-->Line_22 $$ if (charsToAdd == 0) [ FD ]
Line_10 $$ result = "1k"-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_7 $$ if (size == 0) [ FD ]
Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_22 $$ if (charsToAdd == 0) [ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_13 $$ if (size < 99 * ONE_MEGABYTE) [ FD ]
Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)-->Line_29 $$ return buf.append(result).toString()[ FD ]
Line_11 $$ if (size < ONE_MEGABYTE) -->Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"[ CD ]
Line_2 $$ private static String formatSize(long size, @NotNull String format) -->Line_18 $$ int charsToAdd = 5 - result.length()[ CD ]
Line_8 $$ result = "0k"-->Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)[ FD ]
Line_8 $$ result = "0k"-->Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"[ FD ]
Line_11 $$ if (size < ONE_MEGABYTE) -->Line_13 $$ if (size < 99 * ONE_MEGABYTE) [ CD ]
Line_6 $$ String result-->Line_10 $$ result = "1k"[ FD ]
Line_6 $$ String result-->Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)[ FD ]
Line_14 $$ result = new DecimalFormat("0.0M").format(size / (double) ONE_MEGABYTE)-->Line_16 $$ result = Long.toString((size + (529 * ONE_KILOBYTE)) / ONE_MEGABYTE) + "M"[ FD ]
Line_6 $$ String result-->Line_12 $$ result = Long.toString((size + 512) / ONE_KILOBYTE) + "k"[ FD ]
