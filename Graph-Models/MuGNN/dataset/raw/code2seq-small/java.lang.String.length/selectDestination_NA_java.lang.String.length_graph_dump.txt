Line_2 $$ private MoveDestination selectDestination() -->Line_3 $$ final String packageName = getTargetPackage().trim()[ CD ]
Line_4 $$ if (packageName.length() > 0 && !PsiNameHelper.getInstance(myManager.getProject()).isQualifiedName(packageName)) -->Line_6 $$ return null[ CD ]
Line_2 $$ private MoveDestination selectDestination() -->Line_9 $$ PackageWrapper targetPackage = new PackageWrapper(myManager, packageName)[ CD ]
Line_12 $$ if (ret != Messages.YES)-->Line_13 $$ return null[ CD ]
Line_3 $$ final String packageName = getTargetPackage().trim()-->Line_11 $$ final int ret = Messages.showYesNoDialog(myProject, RefactoringBundle.message("package.does.not.exist", packageName), RefactoringBundle.message("move.title"), Messages.getQuestionIcon())[ FD ]
Line_10 $$ if (!targetPackage.exists()) -->Line_12 $$ if (ret != Messages.YES)[ CD ]
Line_2 $$ private MoveDestination selectDestination() -->Line_8 $$ RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY, packageName)[ CD ]
Line_2 $$ private MoveDestination selectDestination() -->Line_15 $$ return ((DestinationFolderComboBox) myDestinationFolderCB).selectDirectory(targetPackage, mySuggestToMoveToAnotherRoot)[ CD ]
Line_11 $$ final int ret = Messages.showYesNoDialog(myProject, RefactoringBundle.message("package.does.not.exist", packageName), RefactoringBundle.message("move.title"), Messages.getQuestionIcon())-->Line_12 $$ if (ret != Messages.YES)[ FD ]
Line_2 $$ private MoveDestination selectDestination() -->Line_4 $$ if (packageName.length() > 0 && !PsiNameHelper.getInstance(myManager.getProject()).isQualifiedName(packageName)) [ CD ]
Line_4 $$ if (packageName.length() > 0 && !PsiNameHelper.getInstance(myManager.getProject()).isQualifiedName(packageName)) -->Line_5 $$ Messages.showErrorDialog(myProject, RefactoringBundle.message("please.enter.a.valid.target.package.name"), RefactoringBundle.message("move.title"))[ CD ]
Line_9 $$ PackageWrapper targetPackage = new PackageWrapper(myManager, packageName)-->Line_10 $$ if (!targetPackage.exists()) [ FD ]
Line_9 $$ PackageWrapper targetPackage = new PackageWrapper(myManager, packageName)-->Line_15 $$ return ((DestinationFolderComboBox) myDestinationFolderCB).selectDirectory(targetPackage, mySuggestToMoveToAnotherRoot)[ FD ]
Line_10 $$ if (!targetPackage.exists()) -->Line_11 $$ final int ret = Messages.showYesNoDialog(myProject, RefactoringBundle.message("package.does.not.exist", packageName), RefactoringBundle.message("move.title"), Messages.getQuestionIcon())[ CD ]
Line_3 $$ final String packageName = getTargetPackage().trim()-->Line_4 $$ if (packageName.length() > 0 && !PsiNameHelper.getInstance(myManager.getProject()).isQualifiedName(packageName)) [ FD ]
Line_3 $$ final String packageName = getTargetPackage().trim()-->Line_8 $$ RecentsManager.getInstance(myProject).registerRecentEntry(RECENTS_KEY, packageName)[ FD ]
Line_2 $$ private MoveDestination selectDestination() -->Line_10 $$ if (!targetPackage.exists()) [ CD ]
