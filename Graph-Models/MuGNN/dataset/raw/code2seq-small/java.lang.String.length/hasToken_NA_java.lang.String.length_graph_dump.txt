Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_17 $$ if (tokenInfo != null) [ FD ]
Line_14 $$ String testKeyword = myIgnoreCase ? StringUtil.toUpperCase(keyword) : keyword-->Line_16 $$ if (myKeywordSets.get(i).contains(testKeyword)) [ FD ]
Line_17 $$ if (tokenInfo != null) -->Line_18 $$ tokenInfo.updateData(position, position + keyword.length(), getToken(i))[ CD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_4 $$ int offset = position[ CD ]
Line_5 $$ while (offset < myBuffer.length()) -->Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)[ CD ]
Line_3 $$ int index = 0-->Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) [ FD ]
Line_11 $$ index = nextIndex-->Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)[ FD ]
Line_3 $$ int index = 0-->Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)[ FD ]
Line_4 $$ int offset = position-->Line_13 $$ String keyword = myBuffer.subSequence(position, offset).toString()[ FD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_5 $$ while (offset < myBuffer.length()) [ FD ]
Line_5 $$ while (offset < myBuffer.length()) -->Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) [ CD ]
Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)-->Line_8 $$ if (nextIndex == 0) [ FD ]
Line_5 $$ while (offset < myBuffer.length()) -->Line_6 $$ char c = myBuffer.charAt(offset++)[ CD ]
Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) -->Line_13 $$ String keyword = myBuffer.subSequence(position, offset).toString()[ CD ]
Line_15 $$ for (int i = 0; i < CustomHighlighterTokenType.KEYWORD_TYPE_COUNT; i++) -->Line_16 $$ if (myKeywordSets.get(i).contains(testKeyword)) [ CD ]
Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)-->Line_11 $$ index = nextIndex[ FD ]
Line_6 $$ char c = myBuffer.charAt(offset++)-->Line_7 $$ int nextIndex = myTrie.findSubNode(index, myIgnoreCase ? Character.toUpperCase(c) : c)[ FD ]
Line_3 $$ int index = 0-->Line_11 $$ index = nextIndex[ FD ]
Line_15 $$ for (int i = 0; i < CustomHighlighterTokenType.KEYWORD_TYPE_COUNT; i++) -->Line_16 $$ if (myKeywordSets.get(i).contains(testKeyword)) [ FD ]
Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) -->Line_14 $$ String testKeyword = myIgnoreCase ? StringUtil.toUpperCase(keyword) : keyword[ CD ]
Line_4 $$ int offset = position-->Line_5 $$ while (offset < myBuffer.length()) [ FD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_5 $$ while (offset < myBuffer.length()) [ CD ]
Line_16 $$ if (myKeywordSets.get(i).contains(testKeyword)) -->Line_20 $$ return true[ CD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_25 $$ return false[ CD ]
Line_13 $$ String keyword = myBuffer.subSequence(position, offset).toString()-->Line_18 $$ tokenInfo.updateData(position, position + keyword.length(), getToken(i))[ FD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_6 $$ char c = myBuffer.charAt(offset++)[ FD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) [ FD ]
Line_5 $$ while (offset < myBuffer.length()) -->Line_8 $$ if (nextIndex == 0) [ CD ]
Line_16 $$ if (myKeywordSets.get(i).contains(testKeyword)) -->Line_17 $$ if (tokenInfo != null) [ CD ]
Line_13 $$ String keyword = myBuffer.subSequence(position, offset).toString()-->Line_14 $$ String testKeyword = myIgnoreCase ? StringUtil.toUpperCase(keyword) : keyword[ FD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_18 $$ tokenInfo.updateData(position, position + keyword.length(), getToken(i))[ FD ]
Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) -->Line_15 $$ for (int i = 0; i < CustomHighlighterTokenType.KEYWORD_TYPE_COUNT; i++) [ CD ]
Line_15 $$ for (int i = 0; i < CustomHighlighterTokenType.KEYWORD_TYPE_COUNT; i++) -->Line_18 $$ tokenInfo.updateData(position, position + keyword.length(), getToken(i))[ FD ]
Line_4 $$ int offset = position-->Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) [ FD ]
Line_5 $$ while (offset < myBuffer.length()) -->Line_11 $$ index = nextIndex[ CD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_3 $$ int index = 0[ CD ]
Line_2 $$ public boolean hasToken(int position, CharSequence myBuffer, @Nullable TokenInfo tokenInfo) -->Line_13 $$ String keyword = myBuffer.subSequence(position, offset).toString()[ FD ]
Line_11 $$ index = nextIndex-->Line_12 $$ if (myHashCodes.contains(index) && isWordEnd(offset, myBuffer)) [ FD ]
Line_4 $$ int offset = position-->Line_6 $$ char c = myBuffer.charAt(offset++)[ FD ]
