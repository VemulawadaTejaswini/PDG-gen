Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) [ CD ]
Line_17 $$ Matcher matcher = pattern.matcher(adjustedText)-->Line_18 $$ while (matcher.find()) [ FD ]
Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) -->Line_8 $$ if (nodeText.startsWith("[ CD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_22 $$ return adjustedText[ CD ]
Line_8 $$ if (nodeText.startsWith("-->Line_18 $$ while (matcher.find()) [ CD ]
Line_18 $$ while (matcher.find()) -->Line_19 $$ columnReferences.add(matcher.group(1))[ CD ]
Line_8 $$ if (nodeText.startsWith("-->Line_17 $$ Matcher matcher = pattern.matcher(adjustedText)[ CD ]
Line_8 $$ if (nodeText.startsWith("-->Line_9 $$ columnReferences.add(nodeText.substring(1, nodeText.length() - 1))[ CD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_3 $$ final String nodeText = argumentNode.getText()[ FD ]
Line_4 $$ final String adjustedText-->Line_17 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_8 $$ if (nodeText.startsWith("[ FD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_3 $$ final String nodeText = argumentNode.getText()[ CD ]
Line_8 $$ if (nodeText.startsWith("-->Line_12 $$ adjustedText = nodeText[ CD ]
Line_17 $$ Matcher matcher = pattern.matcher(adjustedText)-->Line_19 $$ columnReferences.add(matcher.group(1))[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_12 $$ adjustedText = nodeText[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_9 $$ columnReferences.add(nodeText.substring(1, nodeText.length() - 1))[ FD ]
Line_3 $$ final String nodeText = argumentNode.getText()-->Line_5 $$ if (nodeText.contains(Template.TEMPLATE)) [ FD ]
Line_2 $$ private String resolveFunctionArgument(AST argumentNode) -->Line_4 $$ final String adjustedText[ CD ]
Line_12 $$ adjustedText = nodeText-->Line_17 $$ Matcher matcher = pattern.matcher(adjustedText)[ FD ]
Line_8 $$ if (nodeText.startsWith("-->Line_10 $$ return nodeText[ CD ]
Line_4 $$ final String adjustedText-->Line_12 $$ adjustedText = nodeText[ FD ]
