Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_8 $$ final String word = words[i][ CD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_16 $$ return Pair.create(starts, prevEnds)[ CD ]
Line_8 $$ final String word = words[i]-->Line_9 $$ final int index = s.indexOf(word, pos)[ FD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_9 $$ final int index = s.indexOf(word, pos)[ FD ]
Line_4 $$ int[] prevEnds = new int[words.length + 1]-->Line_16 $$ return Pair.create(starts, prevEnds)[ FD ]
Line_12 $$ pos = index + word.length()-->Line_9 $$ final int index = s.indexOf(word, pos)[ FD ]
Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_13 $$ prevEnds[i + 1] = pos - 1[ CD ]
Line_9 $$ final int index = s.indexOf(word, pos)-->Line_11 $$ starts[i] = index[ FD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_4 $$ int[] prevEnds = new int[words.length + 1][ CD ]
Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_11 $$ starts[i] = index[ CD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_6 $$ int pos = 0[ CD ]
Line_6 $$ int pos = 0-->Line_9 $$ final int index = s.indexOf(word, pos)[ FD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_7 $$ for (int i = 0; i < words.length; i++) [ CD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_15 $$ starts[words.length] = s.length()[ FD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_3 $$ int[] starts = new int[words.length + 1][ CD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_5 $$ prevEnds[0] = -1[ CD ]
Line_6 $$ int pos = 0-->Line_13 $$ prevEnds[i + 1] = pos - 1[ FD ]
Line_2 $$ private static Pair<int[], int[]> calculateWordPositions(String s, String[] words) -->Line_15 $$ starts[words.length] = s.length()[ CD ]
Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_9 $$ final int index = s.indexOf(word, pos)[ CD ]
Line_12 $$ pos = index + word.length()-->Line_13 $$ prevEnds[i + 1] = pos - 1[ FD ]
Line_9 $$ final int index = s.indexOf(word, pos)-->Line_12 $$ pos = index + word.length()[ FD ]
Line_3 $$ int[] starts = new int[words.length + 1]-->Line_16 $$ return Pair.create(starts, prevEnds)[ FD ]
Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_10 $$ LOG.assertTrue(index >= 0)[ CD ]
Line_6 $$ int pos = 0-->Line_12 $$ pos = index + word.length()[ FD ]
Line_8 $$ final String word = words[i]-->Line_12 $$ pos = index + word.length()[ FD ]
Line_7 $$ for (int i = 0; i < words.length; i++) -->Line_12 $$ pos = index + word.length()[ CD ]
