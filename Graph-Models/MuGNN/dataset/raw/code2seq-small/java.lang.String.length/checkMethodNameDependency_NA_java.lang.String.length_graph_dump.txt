Line_13 $$ final List<PsiMethod> methods = ContainerUtil.filter(psiClass.getMethods(), new Condition<PsiMethod>() -->Line_18 $$ foundMethods = methods.toArray(new PsiMethod[methods.size()])[ FD ]
Line_6 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' should not include () characters.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)-->Line_25 $$ problemDescriptors.add(descriptor)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_13 $$ final List<PsiMethod> methods = ContainerUtil.filter(psiClass.getMethods(), new Condition<PsiMethod>() [ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_25 $$ problemDescriptors.add(descriptor)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_5 $$ LOGGER.debug("dependsOnMethods contains ()" + psiClass.getName())[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_9 $$ final String configAnnotation = TestNGUtil.getConfigAnnotation(PsiTreeUtil.getParentOfType(value, PsiMethod.class))[ FD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_9 $$ final String configAnnotation = TestNGUtil.getConfigAnnotation(PsiTreeUtil.getParentOfType(value, PsiMethod.class))[ CD ]
Line_9 $$ final String configAnnotation = TestNGUtil.getConfigAnnotation(PsiTreeUtil.getParentOfType(value, PsiMethod.class))-->Line_29 $$ if (configAnnotation != null) [ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_36 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, configAnnotation == null ? "Method '" + methodName + "' is not a test or configuration method." : "Method '" + methodName + "' is not annotated with @" + configAnnotation, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ FD ]
Line_11 $$ if (methodName.endsWith("*")) -->Line_18 $$ foundMethods = methods.toArray(new PsiMethod[methods.size()])[ CD ]
Line_22 $$ if (foundMethods.length == 0) -->Line_25 $$ problemDescriptors.add(descriptor)[ CD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_22 $$ if (foundMethods.length == 0) [ CD ]
Line_11 $$ if (methodName.endsWith("*")) -->Line_20 $$ foundMethods = psiClass.findMethodsByName(methodName, true)[ CD ]
Line_35 $$ if (!hasTestsOrConfigs) -->Line_37 $$ problemDescriptors.add(descriptor)[ CD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_7 $$ problemDescriptors.add(descriptor)[ CD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_12 $$ final String methodNameMask = StringUtil.trimEnd(methodName, "*")[ FD ]
Line_22 $$ if (foundMethods.length == 0) -->Line_35 $$ if (!hasTestsOrConfigs) [ CD ]
Line_35 $$ if (!hasTestsOrConfigs) -->Line_36 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, configAnnotation == null ? "Method '" + methodName + "' is not a test or configuration method." : "Method '" + methodName + "' is not annotated with @" + configAnnotation, (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ CD ]
Line_29 $$ if (configAnnotation != null) -->Line_30 $$ hasTestsOrConfigs |= AnnotationUtil.isAnnotated(foundMethod, configAnnotation, true)[ CD ]
Line_9 $$ final String configAnnotation = TestNGUtil.getConfigAnnotation(PsiTreeUtil.getParentOfType(value, PsiMethod.class))-->Line_30 $$ hasTestsOrConfigs |= AnnotationUtil.isAnnotated(foundMethod, configAnnotation, true)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_3 $$ LOGGER.debug("Found dependsOnMethods with text: " + methodName)[ CD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_11 $$ if (methodName.endsWith("*")) [ CD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_37 $$ problemDescriptors.add(descriptor)[ FD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_10 $$ final PsiMethod[] foundMethods[ CD ]
Line_22 $$ if (foundMethods.length == 0) -->Line_23 $$ LOGGER.debug("dependsOnMethods method doesn't exist:" + methodName)[ CD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_5 $$ LOGGER.debug("dependsOnMethods contains ()" + psiClass.getName())[ CD ]
Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') -->Line_6 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' should not include () characters.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ CD ]
Line_29 $$ if (configAnnotation != null) -->Line_32 $$ hasTestsOrConfigs |= TestNGUtil.hasTest(foundMethod)[ CD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') [ CD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_4 $$ if (methodName.length() > 0 && methodName.charAt(methodName.length() - 1) == ')') [ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_11 $$ if (methodName.endsWith("*")) [ FD ]
Line_13 $$ final List<PsiMethod> methods = ContainerUtil.filter(psiClass.getMethods(), new Condition<PsiMethod>() -->Line_15 $$ return method.getName().startsWith(methodNameMask)[ FD ]
Line_11 $$ if (methodName.endsWith("*")) -->Line_13 $$ final List<PsiMethod> methods = ContainerUtil.filter(psiClass.getMethods(), new Condition<PsiMethod>() [ CD ]
Line_6 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' should not include () characters.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)-->Line_37 $$ problemDescriptors.add(descriptor)[ FD ]
Line_22 $$ if (foundMethods.length == 0) -->Line_24 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' unknown.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ CD ]
Line_12 $$ final String methodNameMask = StringUtil.trimEnd(methodName, "*")-->Line_15 $$ return method.getName().startsWith(methodNameMask)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_20 $$ foundMethods = psiClass.findMethodsByName(methodName, true)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_7 $$ problemDescriptors.add(descriptor)[ FD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_6 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' should not include () characters.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ FD ]
Line_13 $$ final List<PsiMethod> methods = ContainerUtil.filter(psiClass.getMethods(), new Condition<PsiMethod>() -->Line_15 $$ return method.getName().startsWith(methodNameMask)[ CD ]
Line_2 $$ private static void checkMethodNameDependency(InspectionManager manager, PsiClass psiClass, String methodName, PsiAnnotationMemberValue value, List<ProblemDescriptor> problemDescriptors, boolean onTheFly) -->Line_24 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' unknown.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)[ FD ]
Line_11 $$ if (methodName.endsWith("*")) -->Line_12 $$ final String methodNameMask = StringUtil.trimEnd(methodName, "*")[ CD ]
Line_6 $$ ProblemDescriptor descriptor = manager.createProblemDescriptor(value, "Method '" + methodName + "' should not include () characters.", (LocalQuickFix) null, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, onTheFly)-->Line_7 $$ problemDescriptors.add(descriptor)[ FD ]
