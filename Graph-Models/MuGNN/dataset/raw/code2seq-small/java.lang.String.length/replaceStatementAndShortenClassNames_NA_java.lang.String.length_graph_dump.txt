Line_36 $$ final Language baseLanguage = viewProvider.getBaseLanguage()-->Line_37 $$ final PsiFile element = viewProvider.getPsi(baseLanguage)[ FD ]
Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)-->Line_26 $$ while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) [ FD ]
Line_37 $$ final PsiFile element = viewProvider.getPsi(baseLanguage)-->Line_38 $$ if (element != null) [ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_43 $$ final PsiElementFactory factory = facade.getElementFactory()[ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_4 $$ final CodeStyleManager styleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) [ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) [ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_17 $$ final TextRange textRange = statement.getTextRange()[ FD ]
Line_12 $$ final Document document = documentManager.getDocument(jspFile)-->Line_16 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_3 $$ final Project project = statement.getProject()[ CD ]
Line_3 $$ final Project project = statement.getProject()-->Line_5 $$ final JavaCodeStyleManager javaStyleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)-->Line_22 $$ if (elementAt == null) [ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_8 $$ final PsiFile jspFile = PsiUtilCore.getTemplateLanguageFile(statement)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_46 $$ javaStyleManager.shortenClassReferences(newStatement)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_35 $$ final TextRange newTextRange = newStatement.getTextRange()[ CD ]
Line_3 $$ final Project project = statement.getProject()-->Line_42 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ FD ]
Line_4 $$ final CodeStyleManager styleManager = CodeStyleManager.getInstance(project)-->Line_39 $$ styleManager.reformatRange(element, newTextRange.getStartOffset(), newTextRange.getEndOffset())[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_34 $$ javaStyleManager.shortenClassReferences(newStatement)[ CD ]
Line_12 $$ final Document document = documentManager.getDocument(jspFile)-->Line_18 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), newStatementText)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_37 $$ final PsiFile element = viewProvider.getPsi(baseLanguage)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_25 $$ final int endOffset = textRange.getStartOffset() + newStatementText.length()[ CD ]
Line_35 $$ final TextRange newTextRange = newStatement.getTextRange()-->Line_39 $$ styleManager.reformatRange(element, newTextRange.getStartOffset(), newTextRange.getEndOffset())[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_38 $$ if (element != null) [ CD ]
Line_7 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_16 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_3 $$ final Project project = statement.getProject()[ FD ]
Line_20 $$ final FileViewProvider viewProvider = jspFile.getViewProvider()-->Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)[ FD ]
Line_7 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_12 $$ final Document document = documentManager.getDocument(jspFile)[ FD ]
Line_20 $$ final FileViewProvider viewProvider = jspFile.getViewProvider()-->Line_37 $$ final PsiFile element = viewProvider.getPsi(baseLanguage)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_19 $$ documentManager.commitDocument(document)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_16 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_36 $$ final Language baseLanguage = viewProvider.getBaseLanguage()[ CD ]
Line_8 $$ final PsiFile jspFile = PsiUtilCore.getTemplateLanguageFile(statement)-->Line_9 $$ if (jspFile == null) [ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_45 $$ newStatement = (PsiStatement) statement.replace(newStatement)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_47 $$ styleManager.reformat(newStatement)[ CD ]
Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)-->Line_27 $$ elementAt = elementAt.getParent()[ FD ]
Line_37 $$ final PsiFile element = viewProvider.getPsi(baseLanguage)-->Line_39 $$ styleManager.reformatRange(element, newTextRange.getStartOffset(), newTextRange.getEndOffset())[ FD ]
Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt-->Line_46 $$ javaStyleManager.shortenClassReferences(newStatement)[ FD ]
Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)-->Line_28 $$ if (elementAt == null) [ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_18 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), newStatementText)[ CD ]
Line_7 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_19 $$ documentManager.commitDocument(document)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_13 $$ if (document == null) [ CD ]
Line_45 $$ newStatement = (PsiStatement) statement.replace(newStatement)-->Line_46 $$ javaStyleManager.shortenClassReferences(newStatement)[ FD ]
Line_5 $$ final JavaCodeStyleManager javaStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_34 $$ javaStyleManager.shortenClassReferences(newStatement)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_9 $$ if (jspFile == null) [ CD ]
Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt-->Line_34 $$ javaStyleManager.shortenClassReferences(newStatement)[ FD ]
Line_8 $$ final PsiFile jspFile = PsiUtilCore.getTemplateLanguageFile(statement)-->Line_12 $$ final Document document = documentManager.getDocument(jspFile)[ FD ]
Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt-->Line_45 $$ newStatement = (PsiStatement) statement.replace(newStatement)[ FD ]
Line_28 $$ if (elementAt == null) -->Line_30 $$ return[ CD ]
Line_4 $$ final CodeStyleManager styleManager = CodeStyleManager.getInstance(project)-->Line_47 $$ styleManager.reformat(newStatement)[ FD ]
Line_27 $$ elementAt = elementAt.getParent()-->Line_28 $$ if (elementAt == null) [ FD ]
Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt-->Line_47 $$ styleManager.reformat(newStatement)[ FD ]
Line_5 $$ final JavaCodeStyleManager javaStyleManager = JavaCodeStyleManager.getInstance(project)-->Line_46 $$ javaStyleManager.shortenClassReferences(newStatement)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_8 $$ final PsiFile jspFile = PsiUtilCore.getTemplateLanguageFile(statement)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt[ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_18 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), newStatementText)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_44 $$ PsiStatement newStatement = factory.createStatementFromText(newStatementText, statement)[ CD ]
Line_20 $$ final FileViewProvider viewProvider = jspFile.getViewProvider()-->Line_36 $$ final Language baseLanguage = viewProvider.getBaseLanguage()[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_42 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_22 $$ if (elementAt == null) [ CD ]
Line_3 $$ final Project project = statement.getProject()-->Line_7 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_33 $$ final PsiStatement newStatement = (PsiStatement) elementAt-->Line_35 $$ final TextRange newTextRange = newStatement.getTextRange()[ FD ]
Line_12 $$ final Document document = documentManager.getDocument(jspFile)-->Line_13 $$ if (document == null) [ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_7 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_17 $$ final TextRange textRange = statement.getTextRange()[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)[ CD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_12 $$ final Document document = documentManager.getDocument(jspFile)[ CD ]
Line_26 $$ while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) -->Line_28 $$ if (elementAt == null) [ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_25 $$ final int endOffset = textRange.getStartOffset() + newStatementText.length()[ FD ]
Line_43 $$ final PsiElementFactory factory = facade.getElementFactory()-->Line_44 $$ PsiStatement newStatement = factory.createStatementFromText(newStatementText, statement)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_26 $$ while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) [ CD ]
Line_26 $$ while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) -->Line_27 $$ elementAt = elementAt.getParent()[ CD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_44 $$ PsiStatement newStatement = factory.createStatementFromText(newStatementText, statement)[ FD ]
Line_27 $$ elementAt = elementAt.getParent()-->Line_26 $$ while (elementAt.getTextRange().getEndOffset() < endOffset || !(elementAt instanceof PsiStatement)) [ FD ]
Line_17 $$ final TextRange textRange = statement.getTextRange()-->Line_21 $$ PsiElement elementAt = viewProvider.findElementAt(textRange.getStartOffset(), JavaLanguage.INSTANCE)[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_20 $$ final FileViewProvider viewProvider = jspFile.getViewProvider()[ CD ]
Line_45 $$ newStatement = (PsiStatement) statement.replace(newStatement)-->Line_47 $$ styleManager.reformat(newStatement)[ FD ]
Line_42 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_43 $$ final PsiElementFactory factory = facade.getElementFactory()[ FD ]
Line_17 $$ final TextRange textRange = statement.getTextRange()-->Line_18 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), newStatementText)[ FD ]
Line_2 $$ public static void replaceStatementAndShortenClassNames(@NotNull PsiStatement statement, @NotNull @NonNls String newStatementText) -->Line_5 $$ final JavaCodeStyleManager javaStyleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_8 $$ final PsiFile jspFile = PsiUtilCore.getTemplateLanguageFile(statement)-->Line_20 $$ final FileViewProvider viewProvider = jspFile.getViewProvider()[ FD ]
Line_6 $$ if (FileTypeUtils.isInServerPageFile(statement)) -->Line_45 $$ newStatement = (PsiStatement) statement.replace(newStatement)[ CD ]
Line_12 $$ final Document document = documentManager.getDocument(jspFile)-->Line_19 $$ documentManager.commitDocument(document)[ FD ]
Line_3 $$ final Project project = statement.getProject()-->Line_4 $$ final CodeStyleManager styleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_9 $$ if (jspFile == null) -->Line_10 $$ return[ CD ]
Line_13 $$ if (document == null) -->Line_14 $$ return[ CD ]
Line_22 $$ if (elementAt == null) -->Line_23 $$ return[ CD ]
Line_17 $$ final TextRange textRange = statement.getTextRange()-->Line_25 $$ final int endOffset = textRange.getStartOffset() + newStatementText.length()[ FD ]
Line_28 $$ if (elementAt == null) -->Line_29 $$ LOG.error("Cannot decode statement")[ CD ]
Line_38 $$ if (element != null) -->Line_39 $$ styleManager.reformatRange(element, newTextRange.getStartOffset(), newTextRange.getEndOffset())[ CD ]
