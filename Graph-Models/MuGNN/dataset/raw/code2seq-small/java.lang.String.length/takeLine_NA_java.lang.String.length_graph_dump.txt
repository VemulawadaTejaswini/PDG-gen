Line_6 $$ if (text.length() == 0)-->Line_7 $$ return[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_4 $$ sb.setLength(0)[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_14 $$ h.cancel()[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_3 $$ final String text = sb.toString()[ FD ]
Line_9 $$ final GitHeavyCommit gitCommit-->Line_11 $$ gitCommit = createCommit(project, refs, root, record)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_17 $$ gitCommitConsumer.consume(gitCommit)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_9 $$ final GitHeavyCommit gitCommit[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_3 $$ final String text = sb.toString()[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_8 $$ GitLogRecord record = parser.parseOneRecord(text)[ CD ]
Line_3 $$ final String text = sb.toString()-->Line_6 $$ if (text.length() == 0)[ FD ]
Line_9 $$ final GitHeavyCommit gitCommit-->Line_17 $$ gitCommitConsumer.consume(gitCommit)[ FD ]
Line_8 $$ GitLogRecord record = parser.parseOneRecord(text)-->Line_11 $$ gitCommit = createCommit(project, refs, root, record)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_6 $$ if (text.length() == 0)[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_4 $$ sb.setLength(0)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_5 $$ sb.append(line)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_5 $$ sb.append(line)[ CD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_11 $$ gitCommit = createCommit(project, refs, root, record)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_8 $$ GitLogRecord record = parser.parseOneRecord(text)[ FD ]
Line_2 $$ private static void takeLine(final Project project, String line, StringBuilder sb, GitLogParser parser, SymbolicRefsI refs, VirtualFile root, VcsException[] exc, GitLineHandler h, AsynchConsumer<GitHeavyCommit> gitCommitConsumer) -->Line_17 $$ gitCommitConsumer.consume(gitCommit)[ CD ]
Line_11 $$ gitCommit = createCommit(project, refs, root, record)-->Line_17 $$ gitCommitConsumer.consume(gitCommit)[ FD ]
Line_3 $$ final String text = sb.toString()-->Line_8 $$ GitLogRecord record = parser.parseOneRecord(text)[ FD ]
