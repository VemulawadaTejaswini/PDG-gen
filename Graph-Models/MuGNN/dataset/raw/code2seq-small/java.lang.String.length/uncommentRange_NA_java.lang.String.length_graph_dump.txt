Line_26 $$ while (true) -->Line_28 $$ if (start == text.length()) [ CD ]
Line_3 $$ if (commenter instanceof SelfManagingCommenter) -->Line_4 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_27 $$ int start = getNearest(text, commentPrefix, position)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_9 $$ int startOffset = range.getStartOffset()[ FD ]
Line_45 $$ if (commenter.getCommentedBlockCommentPrefix() != null) -->Line_46 $$ commentNestedComments(myDocument, new TextRange(toDelete.first.getEndOffset() - shift, toDelete.second.getStartOffset() - shift), commenter)[ CD ]
Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()-->Line_28 $$ if (start == text.length()) [ FD ]
Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()-->Line_27 $$ int start = getNearest(text, commentPrefix, position)[ FD ]
Line_12 $$ if (commenter instanceof CustomUncommenter) -->Line_26 $$ while (true) [ CD ]
Line_33 $$ position = end-->Line_27 $$ int start = getNearest(text, commentPrefix, position)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()[ CD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()[ FD ]
Line_34 $$ Couple<TextRange> pair = findCommentBlock(new TextRange(start + startOffset, end + startOffset), commentPrefix, commentSuffix)-->Line_35 $$ ranges.add(pair)[ FD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_41 $$ Couple<TextRange> toDelete = ranges.get(i)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_3 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_45 $$ if (commenter.getCommentedBlockCommentPrefix() != null) [ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_46 $$ commentNestedComments(myDocument, new TextRange(toDelete.first.getEndOffset() - shift, toDelete.second.getStartOffset() - shift), commenter)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_34 $$ Couple<TextRange> pair = findCommentBlock(new TextRange(start + startOffset, end + startOffset), commentPrefix, commentSuffix)[ FD ]
Line_4 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_5 $$ selfManagingCommenter.uncommentBlockComment(range.getStartOffset(), range.getEndOffset(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_5 $$ selfManagingCommenter.uncommentBlockComment(range.getStartOffset(), range.getEndOffset(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_12 $$ if (commenter instanceof CustomUncommenter) [ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_38 $$ RangeMarker marker = myDocument.createRangeMarker(range)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_32 $$ int end = getNearest(text, commentSuffix, position + commentPrefix.length()) + commentSuffix.length()[ FD ]
Line_3 $$ if (commenter instanceof SelfManagingCommenter) -->Line_5 $$ selfManagingCommenter.uncommentBlockComment(range.getStartOffset(), range.getEndOffset(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()-->Line_32 $$ int end = getNearest(text, commentSuffix, position + commentPrefix.length()) + commentSuffix.length()[ FD ]
Line_27 $$ int start = getNearest(text, commentPrefix, position)-->Line_28 $$ if (start == text.length()) [ FD ]
Line_31 $$ position = start-->Line_33 $$ position = end[ FD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_41 $$ Couple<TextRange> toDelete = ranges.get(i)[ CD ]
Line_26 $$ while (true) -->Line_34 $$ Couple<TextRange> pair = findCommentBlock(new TextRange(start + startOffset, end + startOffset), commentPrefix, commentSuffix)[ CD ]
Line_3 $$ if (commenter instanceof SelfManagingCommenter) -->Line_6 $$ return[ CD ]
Line_26 $$ while (true) -->Line_35 $$ ranges.add(pair)[ CD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_9 $$ int startOffset = range.getStartOffset()[ CD ]
Line_26 $$ while (true) -->Line_33 $$ position = end[ CD ]
Line_26 $$ while (true) -->Line_27 $$ int start = getNearest(text, commentPrefix, position)[ CD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_43 $$ int shift = toDelete.first.getEndOffset() - toDelete.first.getStartOffset()[ CD ]
Line_32 $$ int end = getNearest(text, commentSuffix, position + commentPrefix.length()) + commentSuffix.length()-->Line_33 $$ position = end[ FD ]
Line_38 $$ RangeMarker marker = myDocument.createRangeMarker(range)-->Line_51 $$ marker.dispose()[ FD ]
Line_19 $$ TextRange openComment = coupleFromCommenter.first.shiftRight(startOffset)-->Line_21 $$ ranges.add(Couple.of(openComment, closeComment))[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_49 $$ processDocument(myDocument, marker, commenter, false)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_38 $$ RangeMarker marker = myDocument.createRangeMarker(range)[ CD ]
Line_26 $$ while (true) -->Line_31 $$ position = start[ CD ]
Line_26 $$ while (true) -->Line_32 $$ int end = getNearest(text, commentSuffix, position + commentPrefix.length()) + commentSuffix.length()[ CD ]
Line_8 $$ String text = myDocument.getCharsSequence().subSequence(range.getStartOffset(), range.getEndOffset()).toString()-->Line_18 $$ for (Couple<TextRange> coupleFromCommenter : customUncommenter.getCommentRangesToDelete(text)) [ FD ]
Line_9 $$ int startOffset = range.getStartOffset()-->Line_20 $$ TextRange closeComment = coupleFromCommenter.second.shiftRight(startOffset)[ FD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_3 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_44 $$ myDocument.deleteString(toDelete.second.getStartOffset() - shift, toDelete.second.getEndOffset() - shift)[ CD ]
Line_38 $$ RangeMarker marker = myDocument.createRangeMarker(range)-->Line_49 $$ processDocument(myDocument, marker, commenter, false)[ FD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_42 $$ myDocument.deleteString(toDelete.first.getStartOffset(), toDelete.first.getEndOffset())[ CD ]
Line_31 $$ position = start-->Line_27 $$ int start = getNearest(text, commentPrefix, position)[ FD ]
Line_40 $$ for (int i = ranges.size() - 1; i >= 0; i--) -->Line_45 $$ if (commenter.getCommentedBlockCommentPrefix() != null) [ CD ]
Line_2 $$ public void uncommentRange(TextRange range, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_12 $$ if (commenter instanceof CustomUncommenter) [ CD ]
Line_20 $$ TextRange closeComment = coupleFromCommenter.second.shiftRight(startOffset)-->Line_21 $$ ranges.add(Couple.of(openComment, closeComment))[ FD ]
Line_9 $$ int startOffset = range.getStartOffset()-->Line_19 $$ TextRange openComment = coupleFromCommenter.first.shiftRight(startOffset)[ FD ]
Line_27 $$ int start = getNearest(text, commentPrefix, position)-->Line_31 $$ position = start[ FD ]
