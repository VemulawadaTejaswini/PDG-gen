Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_17 $$ if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) [ FD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_5 $$ toXContent(builder, params, this)[ FD ]
Line_17 $$ if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) -->Line_18 $$ builder.field("stack_trace", ExceptionsHelper.stackTrace(this))[ CD ]
Line_11 $$ List<String> values = headers.get(key)-->Line_12 $$ xContentHeader(builder, key.substring("es.".length()), values)[ FD ]
Line_10 $$ if (key.startsWith("es.")) -->Line_11 $$ List<String> values = headers.get(key)[ CD ]
Line_9 $$ for (String key : headers.keySet()) -->Line_11 $$ List<String> values = headers.get(key)[ FD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_8 $$ builder.field("reason", getMessage())[ FD ]
Line_4 $$ if (ex != this) -->Line_8 $$ builder.field("reason", getMessage())[ CD ]
Line_4 $$ if (ex != this) -->Line_16 $$ renderHeader(builder, params)[ CD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_3 $$ Throwable ex = ExceptionsHelper.unwrapCause(this)[ CD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_15 $$ innerToXContent(builder, params)[ FD ]
Line_3 $$ Throwable ex = ExceptionsHelper.unwrapCause(this)-->Line_4 $$ if (ex != this) [ FD ]
Line_9 $$ for (String key : headers.keySet()) -->Line_12 $$ xContentHeader(builder, key.substring("es.".length()), values)[ FD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_18 $$ builder.field("stack_trace", ExceptionsHelper.stackTrace(this))[ FD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_21 $$ return builder[ CD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_12 $$ xContentHeader(builder, key.substring("es.".length()), values)[ FD ]
Line_4 $$ if (ex != this) -->Line_7 $$ builder.field("type", getExceptionName())[ CD ]
Line_9 $$ for (String key : headers.keySet()) -->Line_10 $$ if (key.startsWith("es.")) [ FD ]
Line_4 $$ if (ex != this) -->Line_15 $$ innerToXContent(builder, params)[ CD ]
Line_4 $$ if (ex != this) -->Line_5 $$ toXContent(builder, params, this)[ CD ]
Line_4 $$ if (ex != this) -->Line_17 $$ if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) [ CD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_4 $$ if (ex != this) [ CD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_7 $$ builder.field("type", getExceptionName())[ FD ]
Line_2 $$ public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException -->Line_16 $$ renderHeader(builder, params)[ FD ]
Line_10 $$ if (key.startsWith("es.")) -->Line_12 $$ xContentHeader(builder, key.substring("es.".length()), values)[ CD ]
