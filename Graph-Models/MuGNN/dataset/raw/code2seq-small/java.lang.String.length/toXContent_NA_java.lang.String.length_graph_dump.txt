Line_10 $$ for (String key : headers.keySet()) -->Line_11 $$ if (key.startsWith("es.")) [ FD ]
Line_18 $$ if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) -->Line_19 $$ builder.field("stack_trace", ExceptionsHelper.stackTrace(this))[ CD ]
Line_4 $$ Throwable ex = ExceptionsHelper.unwrapCause(this)-->Line_5 $$ if (ex != this) [ FD ]
Line_5 $$ if (ex != this) -->Line_16 $$ innerToXContent(builder, params)[ CD ]
Line_5 $$ if (ex != this) -->Line_17 $$ renderHeader(builder, params)[ CD ]
Line_5 $$ if (ex != this) -->Line_8 $$ builder.field("type", getExceptionName())[ CD ]
Line_5 $$ if (ex != this) -->Line_9 $$ builder.field("reason", getMessage())[ CD ]
Line_11 $$ if (key.startsWith("es.")) -->Line_12 $$ List<String> values = headers.get(key)[ CD ]
Line_10 $$ for (String key : headers.keySet()) -->Line_12 $$ List<String> values = headers.get(key)[ FD ]
Line_12 $$ List<String> values = headers.get(key)-->Line_13 $$ xContentHeader(builder, key.substring("es.".length()), values)[ FD ]
Line_5 $$ if (ex != this) -->Line_6 $$ toXContent(builder, params, this)[ CD ]
Line_11 $$ if (key.startsWith("es.")) -->Line_13 $$ xContentHeader(builder, key.substring("es.".length()), values)[ CD ]
Line_5 $$ if (ex != this) -->Line_18 $$ if (params.paramAsBoolean(REST_EXCEPTION_SKIP_STACK_TRACE, REST_EXCEPTION_SKIP_STACK_TRACE_DEFAULT) == false) [ CD ]
Line_10 $$ for (String key : headers.keySet()) -->Line_13 $$ xContentHeader(builder, key.substring("es.".length()), values)[ FD ]
