Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_3 $$ final Map<String, PsiPackage> packagesMap = new HashMap<String, PsiPackage>()[ CD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_14 $$ packagesMap.remove(qualifiedName)[ CD ]
Line_4 $$ final String qualifiedName = psiPackage.getQualifiedName()-->Line_14 $$ packagesMap.remove(qualifiedName)[ FD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_15 $$ return packagesMap.values().toArray(new PsiPackage[packagesMap.size()])[ CD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_4 $$ final String qualifiedName = psiPackage.getQualifiedName()[ CD ]
Line_6 $$ if (StringUtil.isEmpty(qualifiedName) || StringUtil.startsWithConcatenation(prefix, qualifiedName, ".")) -->Line_8 $$ String childName = i >= 0 ? prefix.substring(0, i) : prefix[ CD ]
Line_8 $$ String childName = i >= 0 ? prefix.substring(0, i) : prefix-->Line_10 $$ packagesMap.put(childName, new PsiPackageImpl(psiPackage.getManager(), childName))[ FD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_5 $$ for (final String prefix : myPackagePrefixIndex.getAllPackagePrefixes(scope)) [ FD ]
Line_8 $$ String childName = i >= 0 ? prefix.substring(0, i) : prefix-->Line_9 $$ if (!packagesMap.containsKey(childName)) [ FD ]
Line_3 $$ final Map<String, PsiPackage> packagesMap = new HashMap<String, PsiPackage>()-->Line_14 $$ packagesMap.remove(qualifiedName)[ FD ]
Line_5 $$ for (final String prefix : myPackagePrefixIndex.getAllPackagePrefixes(scope)) -->Line_6 $$ if (StringUtil.isEmpty(qualifiedName) || StringUtil.startsWithConcatenation(prefix, qualifiedName, ".")) [ FD ]
Line_4 $$ final String qualifiedName = psiPackage.getQualifiedName()-->Line_6 $$ if (StringUtil.isEmpty(qualifiedName) || StringUtil.startsWithConcatenation(prefix, qualifiedName, ".")) [ FD ]
Line_7 $$ final int i = prefix.indexOf('.', qualifiedName.length() + 1)-->Line_8 $$ String childName = i >= 0 ? prefix.substring(0, i) : prefix[ FD ]
Line_6 $$ if (StringUtil.isEmpty(qualifiedName) || StringUtil.startsWithConcatenation(prefix, qualifiedName, ".")) -->Line_7 $$ final int i = prefix.indexOf('.', qualifiedName.length() + 1)[ CD ]
Line_5 $$ for (final String prefix : myPackagePrefixIndex.getAllPackagePrefixes(scope)) -->Line_8 $$ String childName = i >= 0 ? prefix.substring(0, i) : prefix[ FD ]
Line_5 $$ for (final String prefix : myPackagePrefixIndex.getAllPackagePrefixes(scope)) -->Line_7 $$ final int i = prefix.indexOf('.', qualifiedName.length() + 1)[ FD ]
Line_4 $$ final String qualifiedName = psiPackage.getQualifiedName()-->Line_7 $$ final int i = prefix.indexOf('.', qualifiedName.length() + 1)[ FD ]
Line_6 $$ if (StringUtil.isEmpty(qualifiedName) || StringUtil.startsWithConcatenation(prefix, qualifiedName, ".")) -->Line_9 $$ if (!packagesMap.containsKey(childName)) [ CD ]
Line_9 $$ if (!packagesMap.containsKey(childName)) -->Line_10 $$ packagesMap.put(childName, new PsiPackageImpl(psiPackage.getManager(), childName))[ CD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_4 $$ final String qualifiedName = psiPackage.getQualifiedName()[ FD ]
Line_3 $$ final Map<String, PsiPackage> packagesMap = new HashMap<String, PsiPackage>()-->Line_10 $$ packagesMap.put(childName, new PsiPackageImpl(psiPackage.getManager(), childName))[ FD ]
Line_3 $$ final Map<String, PsiPackage> packagesMap = new HashMap<String, PsiPackage>()-->Line_9 $$ if (!packagesMap.containsKey(childName)) [ FD ]
Line_2 $$ public PsiPackage[] getSubPackages(@NotNull PsiPackage psiPackage, @NotNull GlobalSearchScope scope) -->Line_10 $$ packagesMap.put(childName, new PsiPackageImpl(psiPackage.getManager(), childName))[ FD ]
Line_3 $$ final Map<String, PsiPackage> packagesMap = new HashMap<String, PsiPackage>()-->Line_15 $$ return packagesMap.values().toArray(new PsiPackage[packagesMap.size()])[ FD ]
