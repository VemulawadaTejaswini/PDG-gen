Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)-->Line_23 $$ value = _trimMultilineText(value)[ FD ]
Line_11 $$ value = curValue-->Line_23 $$ value = _trimMultilineText(value)[ FD ]
Line_4 $$ String name = javaClass.getName()-->Line_19 $$ value = value.substring(name.length())[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_15 $$ Element throwsElement = methodElement.addElement("throws")[ CD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_17 $$ Dom4jDocUtil.add(throwsElement, "type", exceptionType.getValue())[ CD ]
Line_5 $$ String value = null-->Line_23 $$ value = _trimMultilineText(value)[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_16 $$ Dom4jDocUtil.add(throwsElement, "name", name)[ CD ]
Line_19 $$ value = value.substring(name.length())-->Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ CD ]
Line_5 $$ String value = null-->Line_19 $$ value = value.substring(name.length())[ FD ]
Line_4 $$ String name = javaClass.getName()-->Line_8 $$ if (!curValue.startsWith(name)) [ FD ]
Line_15 $$ Element throwsElement = methodElement.addElement("throws")-->Line_16 $$ Dom4jDocUtil.add(throwsElement, "name", name)[ FD ]
Line_15 $$ Element throwsElement = methodElement.addElement("throws")-->Line_20 $$ Dom4jDocUtil.add(throwsElement, "required", true)[ FD ]
Line_8 $$ if (!curValue.startsWith(name)) -->Line_11 $$ value = curValue[ CD ]
Line_7 $$ String curValue = throwsDocletTag.getValue()-->Line_11 $$ value = curValue[ FD ]
Line_7 $$ String curValue = throwsDocletTag.getValue()-->Line_8 $$ if (!curValue.startsWith(name)) [ FD ]
Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_3 $$ JavaClass javaClass = exceptionType.getJavaClass()-->Line_4 $$ String name = javaClass.getName()[ FD ]
Line_6 $$ for (DocletTag throwsDocletTag : throwsDocletTags) -->Line_7 $$ String curValue = throwsDocletTag.getValue()[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_24 $$ Element commentElement = throwsElement.addElement("comment")[ CD ]
Line_5 $$ String value = null-->Line_11 $$ value = curValue[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_23 $$ value = _trimMultilineText(value)[ CD ]
Line_18 $$ if (value != null) -->Line_19 $$ value = value.substring(name.length())[ CD ]
Line_24 $$ Element commentElement = throwsElement.addElement("comment")-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ CD ]
Line_4 $$ String name = javaClass.getName()-->Line_16 $$ Dom4jDocUtil.add(throwsElement, "name", name)[ FD ]
Line_5 $$ String value = null-->Line_18 $$ if (value != null) [ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_4 $$ String name = javaClass.getName()[ CD ]
Line_11 $$ value = curValue-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_11 $$ value = curValue-->Line_18 $$ if (value != null) [ FD ]
Line_18 $$ if (value != null) -->Line_20 $$ Dom4jDocUtil.add(throwsElement, "required", true)[ CD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_17 $$ Dom4jDocUtil.add(throwsElement, "type", exceptionType.getValue())[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_15 $$ Element throwsElement = methodElement.addElement("throws")[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_3 $$ JavaClass javaClass = exceptionType.getJavaClass()[ CD ]
Line_11 $$ value = curValue-->Line_19 $$ value = value.substring(name.length())[ FD ]
Line_19 $$ value = value.substring(name.length())-->Line_23 $$ value = _trimMultilineText(value)[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_5 $$ String value = null[ CD ]
Line_19 $$ value = value.substring(name.length())-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_15 $$ Element throwsElement = methodElement.addElement("throws")-->Line_24 $$ Element commentElement = throwsElement.addElement("comment")[ FD ]
Line_5 $$ String value = null-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_23 $$ value = _trimMultilineText(value)-->Line_25 $$ commentElement.addCDATA(_getCDATA(value))[ FD ]
Line_5 $$ String value = null-->Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_11 $$ value = curValue-->Line_22 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_15 $$ Element throwsElement = methodElement.addElement("throws")-->Line_17 $$ Dom4jDocUtil.add(throwsElement, "type", exceptionType.getValue())[ FD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_18 $$ if (value != null) [ CD ]
Line_2 $$ private void _addThrowsElement(Element methodElement, Type exceptionType, DocletTag[] throwsDocletTags) throws Exception -->Line_3 $$ JavaClass javaClass = exceptionType.getJavaClass()[ FD ]
