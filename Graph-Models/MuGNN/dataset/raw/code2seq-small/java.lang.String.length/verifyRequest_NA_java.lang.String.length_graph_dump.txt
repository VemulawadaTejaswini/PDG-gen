Line_4 $$ if (null == tokenSecret) -->Line_5 $$ LOG.info("Request for unknown token " + appid)[ CD ]
Line_8 $$ String enc_str = SecureShuffleUtils.buildMsgFrom(requestUri)-->Line_18 $$ SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_4 $$ if (null == tokenSecret) [ CD ]
Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)-->Line_18 $$ SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret)[ FD ]
Line_3 $$ SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid)-->Line_18 $$ SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)[ FD ]
Line_14 $$ if (LOG.isDebugEnabled()) -->Line_16 $$ LOG.debug("verifying request. enc_str=" + enc_str + "; hash=..." + urlHashStr.substring(len - len / 2, len - 1))[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_10 $$ if (urlHashStr == null) [ CD ]
Line_23 $$ if (LOG.isDebugEnabled()) -->Line_25 $$ LOG.debug("Fetcher request verfied. enc_str=" + enc_str + ";reply=" + reply.substring(len - len / 2, len - 1))[ CD ]
Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)-->Line_16 $$ LOG.debug("verifying request. enc_str=" + enc_str + "; hash=..." + urlHashStr.substring(len - len / 2, len - 1))[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_21 $$ response.setHeader(ShuffleHeader.HTTP_HEADER_NAME, ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_22 $$ response.setHeader(ShuffleHeader.HTTP_HEADER_VERSION, ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ CD ]
Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)-->Line_20 $$ response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply)[ FD ]
Line_14 $$ if (LOG.isDebugEnabled()) -->Line_15 $$ int len = urlHashStr.length()[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_20 $$ response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply)[ CD ]
Line_3 $$ SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid)-->Line_4 $$ if (null == tokenSecret) [ FD ]
Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)-->Line_15 $$ int len = urlHashStr.length()[ FD ]
Line_23 $$ if (LOG.isDebugEnabled()) -->Line_24 $$ int len = reply.length()[ CD ]
Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)-->Line_24 $$ int len = reply.length()[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_8 $$ String enc_str = SecureShuffleUtils.buildMsgFrom(requestUri)[ FD ]
Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)-->Line_25 $$ LOG.debug("Fetcher request verfied. enc_str=" + enc_str + ";reply=" + reply.substring(len - len / 2, len - 1))[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_18 $$ SecureShuffleUtils.verifyReply(urlHashStr, enc_str, tokenSecret)[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_3 $$ SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid)[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_3 $$ SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid)[ FD ]
Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)-->Line_10 $$ if (urlHashStr == null) [ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_23 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_22 $$ response.setHeader(ShuffleHeader.HTTP_HEADER_VERSION, ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ FD ]
Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)-->Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_20 $$ response.setHeader(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH, reply)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_21 $$ response.setHeader(ShuffleHeader.HTTP_HEADER_NAME, ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ CD ]
Line_10 $$ if (urlHashStr == null) -->Line_11 $$ LOG.info("Missing header hash for " + appid)[ CD ]
Line_3 $$ SecretKey tokenSecret = secretManager.retrieveTokenSecret(appid)-->Line_19 $$ String reply = SecureShuffleUtils.generateHash(urlHashStr.getBytes(Charsets.UTF_8), tokenSecret)[ FD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_9 $$ String urlHashStr = request.getHeader(SecureShuffleUtils.HTTP_HEADER_URL_HASH)[ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_14 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ protected void verifyRequest(String appid, ChannelHandlerContext ctx, HttpRequest request, HttpResponse response, URL requestUri) throws IOException -->Line_8 $$ String enc_str = SecureShuffleUtils.buildMsgFrom(requestUri)[ CD ]
