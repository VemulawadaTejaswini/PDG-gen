Line_7 $$ iter = new LeveldbIterator(db)-->Line_10 $$ Entry<byte[], byte[]> entry = iter.next()[ FD ]
Line_23 $$ attempt = ConverterUtils.toApplicationAttemptId(key)-->Line_27 $$ state.applicationMasterKeys.put(attempt, parseMasterKey(entry.getValue()))[ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_16 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) [ CD ]
Line_16 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) -->Line_18 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) [ CD ]
Line_11 $$ String fullKey = asString(entry.getKey())-->Line_12 $$ if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) [ FD ]
Line_10 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_17 $$ state.currentMasterKey = parseMasterKey(entry.getValue())[ FD ]
Line_18 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) -->Line_19 $$ state.previousMasterKey = parseMasterKey(entry.getValue())[ CD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_9 $$ while (iter.hasNext()) [ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_33 $$ if (iter != null) [ FD ]
Line_10 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_27 $$ state.applicationMasterKeys.put(attempt, parseMasterKey(entry.getValue()))[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_10 $$ Entry<byte[], byte[]> entry = iter.next()[ FD ]
Line_33 $$ if (iter != null) -->Line_34 $$ iter.close()[ CD ]
Line_2 $$ public RecoveredNMTokensState loadNMTokensState() throws IOException -->Line_3 $$ RecoveredNMTokensState state = new RecoveredNMTokensState()[ CD ]
Line_9 $$ while (iter.hasNext()) -->Line_10 $$ Entry<byte[], byte[]> entry = iter.next()[ CD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_8 $$ iter.seek(bytes(NM_TOKENS_KEY_PREFIX))[ FD ]
Line_2 $$ public RecoveredNMTokensState loadNMTokensState() throws IOException -->Line_4 $$ state.applicationMasterKeys = new HashMap<ApplicationAttemptId, MasterKey>()[ CD ]
Line_5 $$ LeveldbIterator iter = null-->Line_9 $$ while (iter.hasNext()) [ FD ]
Line_21 $$ ApplicationAttemptId attempt-->Line_23 $$ attempt = ConverterUtils.toApplicationAttemptId(key)[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_8 $$ iter.seek(bytes(NM_TOKENS_KEY_PREFIX))[ FD ]
Line_16 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) -->Line_17 $$ state.currentMasterKey = parseMasterKey(entry.getValue())[ CD ]
Line_2 $$ public RecoveredNMTokensState loadNMTokensState() throws IOException -->Line_5 $$ LeveldbIterator iter = null[ CD ]
Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())-->Line_18 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) [ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_33 $$ if (iter != null) [ FD ]
Line_21 $$ ApplicationAttemptId attempt-->Line_27 $$ state.applicationMasterKeys.put(attempt, parseMasterKey(entry.getValue()))[ FD ]
Line_20 $$ if (key.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) -->Line_21 $$ ApplicationAttemptId attempt[ CD ]
Line_11 $$ String fullKey = asString(entry.getKey())-->Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_7 $$ iter = new LeveldbIterator(db)[ FD ]
Line_18 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) -->Line_20 $$ if (key.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) [ CD ]
Line_5 $$ LeveldbIterator iter = null-->Line_34 $$ iter.close()[ FD ]
Line_10 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_19 $$ state.previousMasterKey = parseMasterKey(entry.getValue())[ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_12 $$ if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) [ CD ]
Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())-->Line_20 $$ if (key.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) [ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_34 $$ iter.close()[ FD ]
Line_10 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_11 $$ String fullKey = asString(entry.getKey())[ FD ]
Line_9 $$ while (iter.hasNext()) -->Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())[ CD ]
Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())-->Line_16 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) [ FD ]
Line_20 $$ if (key.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) -->Line_27 $$ state.applicationMasterKeys.put(attempt, parseMasterKey(entry.getValue()))[ CD ]
Line_15 $$ String key = fullKey.substring(NM_TOKENS_KEY_PREFIX.length())-->Line_23 $$ attempt = ConverterUtils.toApplicationAttemptId(key)[ FD ]
Line_2 $$ public RecoveredNMTokensState loadNMTokensState() throws IOException -->Line_37 $$ return state[ CD ]
Line_9 $$ while (iter.hasNext()) -->Line_11 $$ String fullKey = asString(entry.getKey())[ CD ]
