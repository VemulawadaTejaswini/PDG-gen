Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_41 $$ CacheLibraryInfo libraryInfo = info.get(filePath)[ FD ]
Line_18 $$ int lastDotPosition = name.lastIndexOf('.')-->Line_19 $$ if (lastDotPosition == -1)[ FD ]
Line_28 $$ for (int i = 0; i < extension.length(); ++i) -->Line_29 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_35 $$ final List<String> invalidLibraryFilePaths = ContainerUtil.newArrayList()[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_38 $$ Set<String> validLibraryFilePathToJarSnapshotFilePaths = ContainerUtil.newTroveSet()[ CD ]
Line_45 $$ if (new File(filePath).exists()) -->Line_46 $$ validLibraryFilePathToJarSnapshotFilePaths.add(filePath)[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_5 $$ if ((System.currentTimeMillis() - lastModified) < 30 * 24 * 60 * 60 * 1000L) [ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_39 $$ info.processKeys(new CommonProcessors.CollectProcessor<String>(allLibraryFilePaths))[ FD ]
Line_19 $$ if (lastDotPosition == -1)-->Line_20 $$ return false[ CD ]
Line_22 $$ if (extension.length() != 40 || !consistsOfHexLetters(extension))-->Line_23 $$ return false[ CD ]
Line_21 $$ String extension = name.substring(lastDotPosition + 1)-->Line_28 $$ for (int i = 0; i < extension.length(); ++i) [ FD ]
Line_21 $$ String extension = name.substring(lastDotPosition + 1)-->Line_29 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_39 $$ info.processKeys(new CommonProcessors.CollectProcessor<String>(allLibraryFilePaths))[ CD ]
Line_5 $$ if ((System.currentTimeMillis() - lastModified) < 30 * 24 * 60 * 60 * 1000L) -->Line_6 $$ return[ CD ]
Line_57 $$ if (validLibraryFilePathToJarSnapshotFilePaths.contains(libraryFilePath)) -->Line_58 $$ availableLibrarySnapshots.remove(e.getKey())[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_4 $$ long lastModified = versionFile.lastModified()[ CD ]
Line_29 $$ if (Character.digit(extension.charAt(i), 16) == -1)-->Line_30 $$ return false[ CD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)[ CD ]
Line_28 $$ for (int i = 0; i < extension.length(); ++i) -->Line_29 $$ if (Character.digit(extension.charAt(i), 16) == -1)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_64 $$ File librarySnapshotFileToDelete = new File(snapshotInfoFile.getParentFile(), availableLibrarySnapshot)[ FD ]
Line_3 $$ File versionFile = getVersionFile(snapshotInfoFile)-->Line_4 $$ long lastModified = versionFile.lastModified()[ FD ]
Line_21 $$ String extension = name.substring(lastDotPosition + 1)-->Line_22 $$ if (extension.length() != 40 || !consistsOfHexLetters(extension))[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_53 $$ info.remove(invalidLibraryFilePath)[ FD ]
Line_2 $$ private static void removeStaleJarFilesIfNeeded(File snapshotInfoFile, PersistentHashMap<String, CacheLibraryInfo> info) throws IOException -->Line_36 $$ final List<String> allLibraryFilePaths = ContainerUtil.newArrayList()[ CD ]
Line_45 $$ if (new File(filePath).exists()) -->Line_48 $$ invalidLibraryFilePaths.add(filePath)[ CD ]
