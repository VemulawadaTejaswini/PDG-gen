Line_17 $$ if (!StringUtils.hasText(arg)) -->Line_33 $$ cvs.addIndexedArgumentValue(index, valueHolder)[ CD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_9 $$ if (argName.endsWith(REF_SUFFIX)) [ FD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) [ FD ]
Line_4 $$ Attr attr = (Attr) node-->Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))[ FD ]
Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()-->Line_33 $$ cvs.addIndexedArgumentValue(index, valueHolder)[ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))[ FD ]
Line_8 $$ boolean ref = false-->Line_10 $$ ref = true[ FD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_41 $$ valueHolder.setName(Conventions.attributeNameToPropertyName(argName))[ CD ]
Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)-->Line_42 $$ cvs.addGenericArgumentValue(valueHolder)[ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_3 $$ if (node instanceof Attr) [ CD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_28 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' specifies a negative index", attr)[ FD ]
Line_30 $$ if (cvs.hasIndexedArgumentValue(index)) -->Line_31 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' with index " + index + " already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ CD ]
Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()-->Line_30 $$ if (cvs.hasIndexedArgumentValue(index)) [ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_3 $$ if (node instanceof Attr) [ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_31 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' with index " + index + " already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_25 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' specifies an invalid integer", attr)[ FD ]
Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())-->Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) [ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_14 $$ valueHolder.setSource(parserContext.getReaderContext().extractSource(attr))[ FD ]
Line_9 $$ if (argName.endsWith(REF_SUFFIX)) -->Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())[ CD ]
Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)-->Line_18 $$ cvs.addGenericArgumentValue(valueHolder)[ FD ]
Line_23 $$ index = Integer.parseInt(arg)-->Line_33 $$ cvs.addIndexedArgumentValue(index, valueHolder)[ FD ]
Line_21 $$ int index = -1-->Line_27 $$ if (index < 0) [ FD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_16 $$ String arg = argName.substring(1).trim()[ CD ]
Line_4 $$ Attr attr = (Attr) node-->Line_6 $$ String argValue = StringUtils.trimWhitespace(attr.getValue())[ FD ]
Line_17 $$ if (!StringUtils.hasText(arg)) -->Line_27 $$ if (index < 0) [ CD ]
Line_3 $$ if (node instanceof Attr) -->Line_6 $$ String argValue = StringUtils.trimWhitespace(attr.getValue())[ CD ]
Line_3 $$ if (node instanceof Attr) -->Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) [ CD ]
Line_21 $$ int index = -1-->Line_33 $$ cvs.addIndexedArgumentValue(index, valueHolder)[ FD ]
Line_3 $$ if (node instanceof Attr) -->Line_4 $$ Attr attr = (Attr) node[ CD ]
Line_21 $$ int index = -1-->Line_30 $$ if (cvs.hasIndexedArgumentValue(index)) [ FD ]
Line_3 $$ if (node instanceof Attr) -->Line_9 $$ if (argName.endsWith(REF_SUFFIX)) [ CD ]
Line_4 $$ Attr attr = (Attr) node-->Line_25 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' specifies an invalid integer", attr)[ FD ]
Line_23 $$ index = Integer.parseInt(arg)-->Line_30 $$ if (cvs.hasIndexedArgumentValue(index)) [ FD ]
Line_3 $$ if (node instanceof Attr) -->Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)[ CD ]
Line_4 $$ Attr attr = (Attr) node-->Line_31 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' with index " + index + " already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ FD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_39 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ FD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_41 $$ valueHolder.setName(Conventions.attributeNameToPropertyName(argName))[ FD ]
Line_17 $$ if (!StringUtils.hasText(arg)) -->Line_30 $$ if (cvs.hasIndexedArgumentValue(index)) [ CD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_45 $$ return definition[ CD ]
Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)-->Line_14 $$ valueHolder.setSource(parserContext.getReaderContext().extractSource(attr))[ FD ]
Line_23 $$ index = Integer.parseInt(arg)-->Line_27 $$ if (index < 0) [ FD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_38 $$ if (containsArgWithName(name, cvs)) [ CD ]
Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)-->Line_41 $$ valueHolder.setName(Conventions.attributeNameToPropertyName(argName))[ FD ]
Line_4 $$ Attr attr = (Attr) node-->Line_14 $$ valueHolder.setSource(parserContext.getReaderContext().extractSource(attr))[ FD ]
Line_13 $$ ValueHolder valueHolder = new ValueHolder(ref ? new RuntimeBeanReference(argValue) : argValue)-->Line_33 $$ cvs.addIndexedArgumentValue(index, valueHolder)[ FD ]
Line_16 $$ String arg = argName.substring(1).trim()-->Line_17 $$ if (!StringUtils.hasText(arg)) [ FD ]
Line_3 $$ if (node instanceof Attr) -->Line_8 $$ boolean ref = false[ CD ]
Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())-->Line_41 $$ valueHolder.setName(Conventions.attributeNameToPropertyName(argName))[ FD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_37 $$ String name = Conventions.attributeNameToPropertyName(argName)[ CD ]
Line_4 $$ Attr attr = (Attr) node-->Line_28 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' specifies a negative index", attr)[ FD ]
Line_17 $$ if (!StringUtils.hasText(arg)) -->Line_21 $$ int index = -1[ CD ]
Line_2 $$ public BeanDefinitionHolder decorate(Node node, BeanDefinitionHolder definition, ParserContext parserContext) -->Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()[ FD ]
Line_38 $$ if (containsArgWithName(name, cvs)) -->Line_39 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ CD ]
Line_17 $$ if (!StringUtils.hasText(arg)) -->Line_18 $$ cvs.addGenericArgumentValue(valueHolder)[ CD ]
Line_21 $$ int index = -1-->Line_23 $$ index = Integer.parseInt(arg)[ FD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_37 $$ String name = Conventions.attributeNameToPropertyName(argName)[ FD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_17 $$ if (!StringUtils.hasText(arg)) [ CD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())[ FD ]
Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()-->Line_18 $$ cvs.addGenericArgumentValue(valueHolder)[ FD ]
Line_37 $$ String name = Conventions.attributeNameToPropertyName(argName)-->Line_38 $$ if (containsArgWithName(name, cvs)) [ FD ]
Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()-->Line_42 $$ cvs.addGenericArgumentValue(valueHolder)[ FD ]
Line_3 $$ if (node instanceof Attr) -->Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))[ CD ]
Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())-->Line_37 $$ String name = Conventions.attributeNameToPropertyName(argName)[ FD ]
Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()-->Line_38 $$ if (containsArgWithName(name, cvs)) [ FD ]
Line_4 $$ Attr attr = (Attr) node-->Line_39 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' already defined using <constructor-arg>." + " Only one approach may be used per argument.", attr)[ FD ]
Line_27 $$ if (index < 0) -->Line_28 $$ parserContext.getReaderContext().error("Constructor argument '" + argName + "' specifies a negative index", attr)[ CD ]
Line_3 $$ if (node instanceof Attr) -->Line_7 $$ ConstructorArgumentValues cvs = definition.getBeanDefinition().getConstructorArgumentValues()[ CD ]
Line_9 $$ if (argName.endsWith(REF_SUFFIX)) -->Line_10 $$ ref = true[ CD ]
Line_3 $$ if (node instanceof Attr) -->Line_14 $$ valueHolder.setSource(parserContext.getReaderContext().extractSource(attr))[ CD ]
Line_15 $$ if (argName.startsWith(DELIMITER_PREFIX)) -->Line_42 $$ cvs.addGenericArgumentValue(valueHolder)[ CD ]
Line_16 $$ String arg = argName.substring(1).trim()-->Line_23 $$ index = Integer.parseInt(arg)[ FD ]
Line_11 $$ argName = argName.substring(0, argName.length() - REF_SUFFIX.length())-->Line_16 $$ String arg = argName.substring(1).trim()[ FD ]
Line_5 $$ String argName = StringUtils.trimWhitespace(parserContext.getDelegate().getLocalName(attr))-->Line_16 $$ String arg = argName.substring(1).trim()[ FD ]
