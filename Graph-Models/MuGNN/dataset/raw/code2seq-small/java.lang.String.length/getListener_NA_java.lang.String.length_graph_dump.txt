Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_28 $$ return RefactoringListeners.getClassOrPackageListener(element, configuration.myClass)[ FD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_17 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1[ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_12 $$ configuration.getPersistentData().setTestMethod(PsiLocation.fromPsiElement((PsiMethod) newElement))[ FD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_13 $$ if (generatedName)[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_18 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())[ FD ]
Line_3 $$ if (element instanceof PsiMethod) -->Line_4 $$ final PsiMethod method = (PsiMethod) element[ CD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_5 $$ if (!method.getName().equals(configuration.getPersistentData().getMethodName()))[ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_23 $$ configuration.setGeneratedName()[ FD ]
Line_5 $$ if (!method.getName().equals(configuration.getPersistentData().getMethodName()))-->Line_6 $$ return null[ CD ]
Line_4 $$ final PsiMethod method = (PsiMethod) element-->Line_5 $$ if (!method.getName().equals(configuration.getPersistentData().getMethodName()))[ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_3 $$ if (element instanceof PsiMethod) [ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_18 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())[ CD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_14 $$ configuration.setGeneratedName()[ FD ]
Line_3 $$ if (element instanceof PsiMethod) -->Line_28 $$ return RefactoringListeners.getClassOrPackageListener(element, configuration.myClass)[ CD ]
Line_3 $$ if (element instanceof PsiMethod) -->Line_5 $$ if (!method.getName().equals(configuration.getPersistentData().getMethodName()))[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_17 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1[ CD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_3 $$ if (element instanceof PsiMethod) [ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_20 $$ final boolean generatedName = configuration.isGeneratedName()[ FD ]
Line_13 $$ if (generatedName)-->Line_14 $$ configuration.setGeneratedName()[ CD ]
Line_4 $$ final PsiMethod method = (PsiMethod) element-->Line_7 $$ if (!method.getContainingClass().equals(configuration.myClass.getPsiElement()))[ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_21 $$ configuration.getPersistentData().METHOD_NAME = oldQualifiedName.substring(methodIdx)[ FD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_12 $$ configuration.getPersistentData().setTestMethod(PsiLocation.fromPsiElement((PsiMethod) newElement))[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_22 $$ if (generatedName)[ CD ]
Line_7 $$ if (!method.getContainingClass().equals(configuration.myClass.getPsiElement()))-->Line_8 $$ return null[ CD ]
Line_3 $$ if (element instanceof PsiMethod) -->Line_7 $$ if (!method.getContainingClass().equals(configuration.myClass.getPsiElement()))[ CD ]
Line_18 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())-->Line_19 $$ return[ CD ]
Line_17 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1-->Line_21 $$ configuration.getPersistentData().METHOD_NAME = oldQualifiedName.substring(methodIdx)[ FD ]
Line_3 $$ if (element instanceof PsiMethod) -->Line_26 $$ return new Listener()[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_21 $$ configuration.getPersistentData().METHOD_NAME = oldQualifiedName.substring(methodIdx)[ FD ]
Line_2 $$ public RefactoringElementListener getListener(final PsiElement element, final JUnitConfiguration configuration) -->Line_11 $$ final boolean generatedName = configuration.isGeneratedName()[ FD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_11 $$ final boolean generatedName = configuration.isGeneratedName()[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_21 $$ configuration.getPersistentData().METHOD_NAME = oldQualifiedName.substring(methodIdx)[ CD ]
Line_9 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_20 $$ final boolean generatedName = configuration.isGeneratedName()[ CD ]
Line_22 $$ if (generatedName)-->Line_23 $$ configuration.setGeneratedName()[ CD ]
