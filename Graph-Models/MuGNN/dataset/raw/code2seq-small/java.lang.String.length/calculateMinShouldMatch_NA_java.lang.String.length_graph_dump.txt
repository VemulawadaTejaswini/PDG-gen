Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")-->Line_7 $$ for (String s : spacePattern.split(spec)) [ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_3 $$ int result = optionalClauseCount[ CD ]
Line_5 $$ if (-1 < spec.indexOf("<")) -->Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")[ CD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_18 $$ if (-1 < spec.indexOf('%')) [ FD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_19 $$ spec = spec.substring(0, spec.length() - 1)[ CD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_4 $$ spec = spec.trim()[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_7 $$ for (String s : spacePattern.split(spec)) [ FD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_20 $$ int percent = Integer.parseInt(spec)[ CD ]
Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")-->Line_18 $$ if (-1 < spec.indexOf('%')) [ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_10 $$ if (optionalClauseCount <= upperBound) [ FD ]
Line_5 $$ if (-1 < spec.indexOf("<")) -->Line_16 $$ return result[ CD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_21 $$ float calc = (result * percent) * (1 / 100f)[ CD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_25 $$ result = calc < 0 ? result + calc : calc[ CD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_5 $$ if (-1 < spec.indexOf("<")) [ CD ]
Line_3 $$ int result = optionalClauseCount-->Line_22 $$ result = calc < 0 ? result + (int) calc : (int) calc[ FD ]
Line_19 $$ spec = spec.substring(0, spec.length() - 1)-->Line_20 $$ int percent = Integer.parseInt(spec)[ FD ]
Line_10 $$ if (optionalClauseCount <= upperBound) -->Line_11 $$ return result[ CD ]
Line_13 $$ result = calculateMinShouldMatch(optionalClauseCount, parts[1])-->Line_22 $$ result = calc < 0 ? result + (int) calc : (int) calc[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_19 $$ spec = spec.substring(0, spec.length() - 1)[ FD ]
Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")-->Line_19 $$ spec = spec.substring(0, spec.length() - 1)[ FD ]
Line_3 $$ int result = optionalClauseCount-->Line_25 $$ result = calc < 0 ? result + calc : calc[ FD ]
Line_19 $$ spec = spec.substring(0, spec.length() - 1)-->Line_24 $$ int calc = Integer.parseInt(spec)[ FD ]
Line_4 $$ spec = spec.trim()-->Line_24 $$ int calc = Integer.parseInt(spec)[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_27 $$ return result < 0 ? 0 : result[ CD ]
Line_4 $$ spec = spec.trim()-->Line_19 $$ spec = spec.substring(0, spec.length() - 1)[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_4 $$ spec = spec.trim()[ CD ]
Line_3 $$ int result = optionalClauseCount-->Line_13 $$ result = calculateMinShouldMatch(optionalClauseCount, parts[1])[ FD ]
Line_7 $$ for (String s : spacePattern.split(spec)) -->Line_8 $$ String[] parts = lessThanPattern.split(s, 0)[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_13 $$ result = calculateMinShouldMatch(optionalClauseCount, parts[1])[ FD ]
Line_4 $$ spec = spec.trim()-->Line_18 $$ if (-1 < spec.indexOf('%')) [ FD ]
Line_9 $$ int upperBound = Integer.parseInt(parts[0])-->Line_10 $$ if (optionalClauseCount <= upperBound) [ FD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_22 $$ result = calc < 0 ? result + (int) calc : (int) calc[ CD ]
Line_10 $$ if (optionalClauseCount <= upperBound) -->Line_13 $$ result = calculateMinShouldMatch(optionalClauseCount, parts[1])[ CD ]
Line_4 $$ spec = spec.trim()-->Line_20 $$ int percent = Integer.parseInt(spec)[ FD ]
Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")-->Line_24 $$ int calc = Integer.parseInt(spec)[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_24 $$ int calc = Integer.parseInt(spec)[ FD ]
Line_18 $$ if (-1 < spec.indexOf('%')) -->Line_24 $$ int calc = Integer.parseInt(spec)[ CD ]
Line_22 $$ result = calc < 0 ? result + (int) calc : (int) calc-->Line_25 $$ result = calc < 0 ? result + calc : calc[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_18 $$ if (-1 < spec.indexOf('%')) [ CD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")[ FD ]
Line_4 $$ spec = spec.trim()-->Line_7 $$ for (String s : spacePattern.split(spec)) [ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_20 $$ int percent = Integer.parseInt(spec)[ FD ]
Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")-->Line_20 $$ int percent = Integer.parseInt(spec)[ FD ]
Line_2 $$ public static int calculateMinShouldMatch(int optionalClauseCount, String spec) -->Line_5 $$ if (-1 < spec.indexOf("<")) [ FD ]
Line_4 $$ spec = spec.trim()-->Line_5 $$ if (-1 < spec.indexOf("<")) [ FD ]
Line_4 $$ spec = spec.trim()-->Line_6 $$ spec = spaceAroundLessThanPattern.matcher(spec).replaceAll("<")[ FD ]
Line_13 $$ result = calculateMinShouldMatch(optionalClauseCount, parts[1])-->Line_25 $$ result = calc < 0 ? result + calc : calc[ FD ]
