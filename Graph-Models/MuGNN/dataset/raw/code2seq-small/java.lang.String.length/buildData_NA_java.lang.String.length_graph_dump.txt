Line_4 $$ byte even = (byte) (length % 2)-->Line_11 $$ if (even == 1) [ FD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_15 $$ return data[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_4 $$ byte even = (byte) (length % 2)[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_3 $$ int length = inputStr.length()[ FD ]
Line_4 $$ byte even = (byte) (length % 2)-->Line_6 $$ data[0] = even[ FD ]
Line_11 $$ if (even == 1) -->Line_12 $$ int k = parseChar(inputStr, length - 1)[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_12 $$ int k = parseChar(inputStr, length - 1)[ FD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_6 $$ data[0] = even[ CD ]
Line_11 $$ if (even == 1) -->Line_13 $$ data[length / 2 + 1] = (byte) (k - 128)[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_8 $$ int k = parseChar(inputStr, 2 * i) * BASE + parseChar(inputStr, 2 * i + 1)[ FD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_11 $$ if (even == 1) [ CD ]
Line_7 $$ for (int i = 0; i < length / 2; i++) -->Line_9 $$ data[i + 1] = (byte) (k - 128)[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_5 $$ byte[] data = new byte[length / 2 + 1 + even][ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_7 $$ for (int i = 0; i < length / 2; i++) [ CD ]
Line_7 $$ for (int i = 0; i < length / 2; i++) -->Line_8 $$ int k = parseChar(inputStr, 2 * i) * BASE + parseChar(inputStr, 2 * i + 1)[ CD ]
Line_2 $$ private static byte[] buildData(@NotNull String inputStr) -->Line_3 $$ int length = inputStr.length()[ CD ]
