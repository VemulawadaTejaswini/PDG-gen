Line_5 $$ if (Boolean.valueOf(IDEA_MAVEN_DISABLE_MANIFEST)) -->Line_6 $$ resourceConfig.manifest = null[ CD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_11 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()[ FD ]
Line_10 $$ String jdkVersion = null-->Line_13 $$ final int quoteIndex = jdkVersion.indexOf('"')[ FD ]
Line_10 $$ String jdkVersion = null-->Line_18 $$ Manifest manifest = new ManifestBuilder(mavenProject).withJdkVersion(jdkVersion).build()[ FD ]
Line_3 $$ if (mavenProject.isAggregator())-->Line_4 $$ return[ CD ]
Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) -->Line_14 $$ if (quoteIndex != -1) [ CD ]
Line_15 $$ jdkVersion = jdkVersion.substring(quoteIndex + 1, jdkVersion.length() - 1)-->Line_18 $$ Manifest manifest = new ManifestBuilder(mavenProject).withJdkVersion(jdkVersion).build()[ FD ]
Line_10 $$ String jdkVersion = null-->Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) [ FD ]
Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) -->Line_13 $$ final int quoteIndex = jdkVersion.indexOf('"')[ FD ]
Line_5 $$ if (Boolean.valueOf(IDEA_MAVEN_DISABLE_MANIFEST)) -->Line_7 $$ return[ CD ]
Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) -->Line_15 $$ jdkVersion = jdkVersion.substring(quoteIndex + 1, jdkVersion.length() - 1)[ FD ]
Line_19 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_23 $$ final String resolvedText = MavenPropertyResolver.resolve(outputStream.toString(CharsetToolkit.UTF8), domModel)[ FD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_3 $$ if (mavenProject.isAggregator())[ CD ]
Line_23 $$ final String resolvedText = MavenPropertyResolver.resolve(outputStream.toString(CharsetToolkit.UTF8), domModel)-->Line_24 $$ resourceConfig.manifest = Base64.encode(resolvedText.getBytes(CharsetToolkit.UTF8))[ FD ]
Line_10 $$ String jdkVersion = null-->Line_15 $$ jdkVersion = jdkVersion.substring(quoteIndex + 1, jdkVersion.length() - 1)[ FD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_22 $$ MavenDomProjectModel domModel = MavenDomUtil.getMavenDomProjectModel(module.getProject(), mavenProject.getFile())[ FD ]
Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) -->Line_13 $$ final int quoteIndex = jdkVersion.indexOf('"')[ CD ]
Line_19 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_26 $$ StreamUtil.closeStream(outputStream)[ FD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_28 $$ resourceConfig.classpath = ManifestBuilder.getClasspath(mavenProject)[ FD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_5 $$ if (Boolean.valueOf(IDEA_MAVEN_DISABLE_MANIFEST)) [ CD ]
Line_18 $$ Manifest manifest = new ManifestBuilder(mavenProject).withJdkVersion(jdkVersion).build()-->Line_21 $$ manifest.write(outputStream)[ FD ]
Line_13 $$ final int quoteIndex = jdkVersion.indexOf('"')-->Line_14 $$ if (quoteIndex != -1) [ FD ]
Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) -->Line_18 $$ Manifest manifest = new ManifestBuilder(mavenProject).withJdkVersion(jdkVersion).build()[ FD ]
Line_14 $$ if (quoteIndex != -1) -->Line_15 $$ jdkVersion = jdkVersion.substring(quoteIndex + 1, jdkVersion.length() - 1)[ CD ]
Line_2 $$ private static void generateManifest(@NotNull MavenProject mavenProject, @NotNull Module module, @NotNull MavenModuleResourceConfiguration resourceConfig) -->Line_3 $$ if (mavenProject.isAggregator())[ FD ]
Line_11 $$ Sdk sdk = ModuleRootManager.getInstance(module).getSdk()-->Line_12 $$ if (sdk != null && (jdkVersion = sdk.getVersionString()) != null) [ FD ]
Line_22 $$ MavenDomProjectModel domModel = MavenDomUtil.getMavenDomProjectModel(module.getProject(), mavenProject.getFile())-->Line_23 $$ final String resolvedText = MavenPropertyResolver.resolve(outputStream.toString(CharsetToolkit.UTF8), domModel)[ FD ]
Line_19 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_21 $$ manifest.write(outputStream)[ FD ]
