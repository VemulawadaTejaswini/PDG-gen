Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_5 $$ final String patternInContext = context.replace(PATTERN_PLACEHOLDER, pattern)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_5 $$ final String patternInContext = context.replace(PATTERN_PLACEHOLDER, pattern)[ CD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_20 $$ while (element != null) [ FD ]
Line_24 $$ element = element.getParent()-->Line_22 $$ topElement = element[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_20 $$ while (element != null) [ CD ]
Line_18 $$ PsiElement topElement = element-->Line_34 $$ topElement = topElement.getNextSibling()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_4 $$ final int patternLength = pattern.length()[ FD ]
Line_20 $$ while (element != null) -->Line_24 $$ element = element.getParent()[ CD ]
Line_19 $$ element = element.getParent()-->Line_22 $$ topElement = element[ FD ]
Line_18 $$ PsiElement topElement = element-->Line_26 $$ if (topElement instanceof PsiFile) [ FD ]
Line_20 $$ while (element != null) -->Line_21 $$ if (element.getTextRange().getStartOffset() == offset && element.getTextLength() <= patternLength) [ CD ]
Line_18 $$ PsiElement topElement = element-->Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) [ FD ]
Line_18 $$ PsiElement topElement = element-->Line_22 $$ topElement = element[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_10 $$ if (file == null) [ CD ]
Line_13 $$ final List<PsiElement> result = new ArrayList<PsiElement>()-->Line_33 $$ result.add(topElement)[ FD ]
Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) -->Line_33 $$ result.add(topElement)[ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_7 $$ final String name = "__dummy." + ext[ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_15 $$ if (element == null) [ CD ]
Line_18 $$ PsiElement topElement = element-->Line_30 $$ result.add(topElement)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_31 $$ topElement = topElement.getNextSibling()[ CD ]
Line_31 $$ topElement = topElement.getNextSibling()-->Line_34 $$ topElement = topElement.getNextSibling()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_19 $$ element = element.getParent()[ CD ]
Line_22 $$ topElement = element-->Line_30 $$ result.add(topElement)[ FD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_24 $$ element = element.getParent()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) [ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)[ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_6 $$ final String ext = extension != null ? extension : fileType.getDefaultExtension()[ CD ]
Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)-->Line_14 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_22 $$ topElement = element-->Line_34 $$ topElement = topElement.getNextSibling()[ FD ]
Line_21 $$ if (element.getTextRange().getStartOffset() == offset && element.getTextLength() <= patternLength) -->Line_22 $$ topElement = element[ CD ]
Line_19 $$ element = element.getParent()-->Line_21 $$ if (element.getTextRange().getStartOffset() == offset && element.getTextLength() <= patternLength) [ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_6 $$ final String ext = extension != null ? extension : fileType.getDefaultExtension()[ FD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_22 $$ topElement = element[ FD ]
Line_24 $$ element = element.getParent()-->Line_21 $$ if (element.getTextRange().getStartOffset() == offset && element.getTextLength() <= patternLength) [ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_36 $$ return result.toArray(new PsiElement[result.size()])[ CD ]
Line_22 $$ topElement = element-->Line_31 $$ topElement = topElement.getNextSibling()[ FD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_21 $$ if (element.getTextRange().getStartOffset() == offset && element.getTextLength() <= patternLength) [ FD ]
Line_22 $$ topElement = element-->Line_27 $$ return topElement.getChildren()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_8 $$ final PsiFileFactory factory = PsiFileFactory.getInstance(project)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_13 $$ final List<PsiElement> result = new ArrayList<PsiElement>()[ CD ]
Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)-->Line_10 $$ if (file == null) [ FD ]
Line_22 $$ topElement = element-->Line_26 $$ if (topElement instanceof PsiFile) [ FD ]
Line_19 $$ element = element.getParent()-->Line_20 $$ while (element != null) [ FD ]
Line_26 $$ if (topElement instanceof PsiFile) -->Line_27 $$ return topElement.getChildren()[ CD ]
Line_31 $$ topElement = topElement.getNextSibling()-->Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) [ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_30 $$ result.add(topElement)[ CD ]
Line_22 $$ topElement = element-->Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) [ FD ]
Line_31 $$ topElement = topElement.getNextSibling()-->Line_33 $$ result.add(topElement)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_3 $$ int offset = context.indexOf(PATTERN_PLACEHOLDER)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)[ FD ]
Line_34 $$ topElement = topElement.getNextSibling()-->Line_33 $$ result.add(topElement)[ FD ]
Line_5 $$ final String patternInContext = context.replace(PATTERN_PLACEHOLDER, pattern)-->Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)[ FD ]
Line_18 $$ PsiElement topElement = element-->Line_27 $$ return topElement.getChildren()[ FD ]
Line_24 $$ element = element.getParent()-->Line_20 $$ while (element != null) [ FD ]
Line_3 $$ int offset = context.indexOf(PATTERN_PLACEHOLDER)-->Line_14 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_10 $$ if (file == null) -->Line_11 $$ return PsiElement.EMPTY_ARRAY[ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_8 $$ final PsiFileFactory factory = PsiFileFactory.getInstance(project)[ CD ]
Line_13 $$ final List<PsiElement> result = new ArrayList<PsiElement>()-->Line_36 $$ return result.toArray(new PsiElement[result.size()])[ FD ]
Line_19 $$ element = element.getParent()-->Line_24 $$ element = element.getParent()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_14 $$ PsiElement element = file.findElementAt(offset)[ CD ]
Line_34 $$ topElement = topElement.getNextSibling()-->Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) [ FD ]
Line_7 $$ final String name = "__dummy." + ext-->Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_4 $$ final int patternLength = pattern.length()[ CD ]
Line_13 $$ final List<PsiElement> result = new ArrayList<PsiElement>()-->Line_30 $$ result.add(topElement)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_3 $$ int offset = context.indexOf(PATTERN_PLACEHOLDER)[ CD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_19 $$ element = element.getParent()[ FD ]
Line_32 $$ while (topElement != null && topElement.getTextRange().getEndOffset() <= endOffset) -->Line_34 $$ topElement = topElement.getNextSibling()[ CD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_18 $$ PsiElement topElement = element[ CD ]
Line_15 $$ if (element == null) -->Line_16 $$ return PsiElement.EMPTY_ARRAY[ CD ]
Line_22 $$ topElement = element-->Line_33 $$ result.add(topElement)[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_29 $$ final int endOffset = offset + patternLength[ CD ]
Line_8 $$ final PsiFileFactory factory = PsiFileFactory.getInstance(project)-->Line_9 $$ final PsiFile file = language == null ? factory.createFileFromText(name, fileType, patternInContext, LocalTimeCounter.currentTime(), physical, true) : factory.createFileFromText(name, language, patternInContext, physical, true)[ FD ]
Line_18 $$ PsiElement topElement = element-->Line_31 $$ topElement = topElement.getNextSibling()[ FD ]
Line_2 $$ public static PsiElement[] parsePattern(Project project, String context, String pattern, FileType fileType, Language language, String extension, boolean physical) -->Line_26 $$ if (topElement instanceof PsiFile) [ CD ]
Line_18 $$ PsiElement topElement = element-->Line_33 $$ result.add(topElement)[ FD ]
Line_14 $$ PsiElement element = file.findElementAt(offset)-->Line_15 $$ if (element == null) [ FD ]
