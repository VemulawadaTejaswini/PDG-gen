Line_41 $$ final PrintWriter writer = new PrintWriter(new FileWriter(sourcePathTempFile))-->Line_62 $$ writer.println(StringUtil.wrapWithDoubleQuote(source))[ FD ]
Line_19 $$ if (myConfiguration.OPTION_SEPARATE_INDEX) -->Line_20 $$ parameters.add("-splitindex")[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()[ CD ]
Line_22 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_USE) -->Line_23 $$ parameters.add("-use")[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_94 $$ parameters.add("-link")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_22 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_USE) [ CD ]
Line_43 $$ final Collection<String> packages = new HashSet<String>()-->Line_55 $$ if (packages.size() + sources.size() == 0) [ FD ]
Line_41 $$ final PrintWriter writer = new PrintWriter(new FileWriter(sourcePathTempFile))-->Line_64 $$ writer.println("-sourcepath")[ FD ]
Line_52 $$ if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findRunnable, "Search for sources to generate javadoc in...", true, myProject)) -->Line_53 $$ return[ CD ]
Line_39 $$ final File sourcePathTempFile = FileUtil.createTempFile("javadoc", "args.txt", true)-->Line_40 $$ parameters.add("@" + sourcePathTempFile.getCanonicalPath())[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_29 $$ parameters.add("-version")[ FD ]
Line_110 $$ if (myConfiguration.OUTPUT_DIRECTORY != null) -->Line_111 $$ parameters.add("-d")[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_92 $$ VirtualFile[] docUrls = jdk.getRootProvider().getFiles(JavadocOrderRootType.getInstance())[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_36 $$ parameters.addParametersString(myConfiguration.OTHER_OPTIONS)[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_23 $$ parameters.add("-use")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_14 $$ if (!myConfiguration.OPTION_NAVIGATOR) [ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_112 $$ parameters.add(myConfiguration.OUTPUT_DIRECTORY.replace('/', File.separatorChar))[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_18 $$ parameters.add("-noindex")[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_40 $$ parameters.add("@" + sourcePathTempFile.getCanonicalPath())[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_6 $$ parameters.add(myConfiguration.LOCALE)[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_8 $$ if (myConfiguration.OPTION_SCOPE != null) [ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_110 $$ if (myConfiguration.OUTPUT_DIRECTORY != null) [ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_107 $$ parameters.add("-classpath")[ FD ]
Line_28 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_VERSION) -->Line_29 $$ parameters.add("-version")[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_26 $$ parameters.add("-author")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_4 $$ if (myConfiguration.LOCALE != null && myConfiguration.LOCALE.length() > 0) [ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_25 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_AUTHOR) [ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_106 $$ if (classPathString.length() > 0) [ CD ]
Line_11 $$ if (!myConfiguration.OPTION_HIERARCHY) -->Line_12 $$ parameters.add("-notree")[ CD ]
Line_106 $$ if (classPathString.length() > 0) -->Line_107 $$ parameters.add("-classpath")[ CD ]
Line_110 $$ if (myConfiguration.OUTPUT_DIRECTORY != null) -->Line_112 $$ parameters.add(myConfiguration.OUTPUT_DIRECTORY.replace('/', File.separatorChar))[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_99 $$ final OrderEnumerator orderEnumerator = ProjectRootManager.getInstance(myProject).orderEntries(modules)[ CD ]
Line_31 $$ if (!myConfiguration.OPTION_DOCUMENT_TAG_DEPRECATED) -->Line_32 $$ parameters.add("-nodeprecated")[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_100 $$ if (jdk.getSdkType() instanceof JavaSdk) [ CD ]
Line_8 $$ if (myConfiguration.OPTION_SCOPE != null) -->Line_9 $$ parameters.add("-" + myConfiguration.OPTION_SCOPE)[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_34 $$ parameters.add("-nodeprecatedlist")[ FD ]
Line_45 $$ final Runnable findRunnable = new Runnable() -->Line_47 $$ final int scopeType = myGenerationOptions.getScopeType()[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_95 $$ parameters.add(VfsUtil.toUri(docUrl).toString())[ FD ]
Line_31 $$ if (!myConfiguration.OPTION_DOCUMENT_TAG_DEPRECATED) -->Line_33 $$ if (!myConfiguration.OPTION_DEPRECATED_LIST) [ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_111 $$ parameters.add("-d")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_11 $$ if (!myConfiguration.OPTION_HIERARCHY) [ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_28 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_VERSION) [ CD ]
Line_33 $$ if (!myConfiguration.OPTION_DEPRECATED_LIST) -->Line_34 $$ parameters.add("-nodeprecatedlist")[ CD ]
Line_91 $$ if (myConfiguration.OPTION_LINK_TO_JDK_DOCS) -->Line_92 $$ VirtualFile[] docUrls = jdk.getRootProvider().getFiles(JavadocOrderRootType.getInstance())[ CD ]
Line_17 $$ if (!myConfiguration.OPTION_INDEX) -->Line_19 $$ if (myConfiguration.OPTION_SEPARATE_INDEX) [ CD ]
Line_77 $$ if (start) -->Line_80 $$ sourcePath.append(File.pathSeparator)[ CD ]
Line_66 $$ if (!myConfiguration.OPTION_INCLUDE_LIBS) -->Line_67 $$ enumerator = enumerator.withoutSdk().withoutLibraries()[ CD ]
Line_45 $$ final Runnable findRunnable = new Runnable() -->Line_52 $$ if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findRunnable, "Search for sources to generate javadoc in...", true, myProject)) [ FD ]
Line_106 $$ if (classPathString.length() > 0) -->Line_108 $$ parameters.add(classPathString)[ CD ]
Line_4 $$ if (myConfiguration.LOCALE != null && myConfiguration.LOCALE.length() > 0) -->Line_5 $$ parameters.add("-locale")[ CD ]
Line_25 $$ if (myConfiguration.OPTION_DOCUMENT_TAG_AUTHOR) -->Line_26 $$ parameters.add("-author")[ CD ]
Line_14 $$ if (!myConfiguration.OPTION_NAVIGATOR) -->Line_15 $$ parameters.add("-nonavbar")[ CD ]
Line_44 $$ final Collection<String> sources = new HashSet<String>()-->Line_55 $$ if (packages.size() + sources.size() == 0) [ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_32 $$ parameters.add("-nodeprecated")[ FD ]
Line_41 $$ final PrintWriter writer = new PrintWriter(new FileWriter(sourcePathTempFile))-->Line_86 $$ writer.close()[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_36 $$ parameters.addParametersString(myConfiguration.OTHER_OPTIONS)[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_12 $$ parameters.add("-notree")[ FD ]
Line_100 $$ if (jdk.getSdkType() instanceof JavaSdk) -->Line_101 $$ classPath = orderEnumerator.withoutSdk().withoutModuleSourceEntries().getPathsList()[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_108 $$ parameters.add(classPathString)[ FD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_15 $$ parameters.add("-nonavbar")[ FD ]
Line_45 $$ final Runnable findRunnable = new Runnable() -->Line_49 $$ myGenerationOptions.accept(new MyContentIterator(myProject, packages, sources, modules, usePackageNotation))[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_5 $$ parameters.add("-locale")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_91 $$ if (myConfiguration.OPTION_LINK_TO_JDK_DOCS) [ CD ]
Line_17 $$ if (!myConfiguration.OPTION_INDEX) -->Line_18 $$ parameters.add("-noindex")[ CD ]
Line_41 $$ final PrintWriter writer = new PrintWriter(new FileWriter(sourcePathTempFile))-->Line_84 $$ writer.println(StringUtil.wrapWithDoubleQuote(sourcePath.toString()))[ FD ]
Line_41 $$ final PrintWriter writer = new PrintWriter(new FileWriter(sourcePathTempFile))-->Line_59 $$ writer.println(aPackage)[ FD ]
Line_100 $$ if (jdk.getSdkType() instanceof JavaSdk) -->Line_103 $$ classPath = orderEnumerator.withoutModuleSourceEntries().getPathsList()[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()[ FD ]
Line_45 $$ final Runnable findRunnable = new Runnable() -->Line_48 $$ final boolean usePackageNotation = scopeType == AnalysisScope.MODULE || scopeType == AnalysisScope.MODULES || scopeType == AnalysisScope.PROJECT || scopeType == AnalysisScope.DIRECTORY[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_37 $$ final Set<Module> modules = new LinkedHashSet<Module>()[ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_9 $$ parameters.add("-" + myConfiguration.OPTION_SCOPE)[ FD ]
Line_4 $$ if (myConfiguration.LOCALE != null && myConfiguration.LOCALE.length() > 0) -->Line_6 $$ parameters.add(myConfiguration.LOCALE)[ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_31 $$ if (!myConfiguration.OPTION_DOCUMENT_TAG_DEPRECATED) [ CD ]
Line_3 $$ final ParametersList parameters = cmdLine.getParametersList()-->Line_20 $$ parameters.add("-splitindex")[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_100 $$ if (jdk.getSdkType() instanceof JavaSdk) [ FD ]
Line_37 $$ final Set<Module> modules = new LinkedHashSet<Module>()-->Line_99 $$ final OrderEnumerator orderEnumerator = ProjectRootManager.getInstance(myProject).orderEntries(modules)[ FD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_17 $$ if (!myConfiguration.OPTION_INDEX) [ CD ]
Line_2 $$ private void setupProgramParameters(final Sdk jdk, final GeneralCommandLine cmdLine) throws CantRunException -->Line_105 $$ final String classPathString = classPath.getPathsString()[ CD ]
