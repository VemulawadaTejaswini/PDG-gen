Line_14 $$ List<LocalFileSystem.WatchRequest> requestsToRemove = new ArrayList<LocalFileSystem.WatchRequest>()-->Line_19 $$ Set<LocalFileSystem.WatchRequest> newRequests = LocalFileSystem.getInstance().replaceWatchedRoots(requestsToRemove, toAdd, null)[ FD ]
Line_7 $$ if (path != null && path.length() > 0) -->Line_9 $$ if (!myWatchedOutputs.containsKey(path)) [ CD ]
Line_2 $$ private void updateWatchedRoots() -->Line_19 $$ Set<LocalFileSystem.WatchRequest> newRequests = LocalFileSystem.getInstance().replaceWatchedRoots(requestsToRemove, toAdd, null)[ CD ]
Line_4 $$ Set<String> toAdd = new HashSet<String>()-->Line_10 $$ toAdd.add(path)[ FD ]
Line_16 $$ final LocalFileSystem.WatchRequest request = myWatchedOutputs.remove(path)-->Line_21 $$ myWatchedOutputs.put(request.getRootPath(), request)[ FD ]
Line_2 $$ private void updateWatchedRoots() -->Line_4 $$ Set<String> toAdd = new HashSet<String>()[ CD ]
Line_5 $$ for (Artifact artifact : getArtifacts()) -->Line_6 $$ final String path = artifact.getOutputPath()[ FD ]
Line_2 $$ private void updateWatchedRoots() -->Line_3 $$ Set<String> pathsToRemove = new HashSet<String>(myWatchedOutputs.keySet())[ CD ]
Line_6 $$ final String path = artifact.getOutputPath()-->Line_9 $$ if (!myWatchedOutputs.containsKey(path)) [ FD ]
Line_2 $$ private void updateWatchedRoots() -->Line_14 $$ List<LocalFileSystem.WatchRequest> requestsToRemove = new ArrayList<LocalFileSystem.WatchRequest>()[ CD ]
Line_4 $$ Set<String> toAdd = new HashSet<String>()-->Line_19 $$ Set<LocalFileSystem.WatchRequest> newRequests = LocalFileSystem.getInstance().replaceWatchedRoots(requestsToRemove, toAdd, null)[ FD ]
Line_6 $$ final String path = artifact.getOutputPath()-->Line_7 $$ if (path != null && path.length() > 0) [ FD ]
Line_6 $$ final String path = artifact.getOutputPath()-->Line_10 $$ toAdd.add(path)[ FD ]
Line_3 $$ Set<String> pathsToRemove = new HashSet<String>(myWatchedOutputs.keySet())-->Line_8 $$ pathsToRemove.remove(path)[ FD ]
Line_6 $$ final String path = artifact.getOutputPath()-->Line_16 $$ final LocalFileSystem.WatchRequest request = myWatchedOutputs.remove(path)[ FD ]
Line_14 $$ List<LocalFileSystem.WatchRequest> requestsToRemove = new ArrayList<LocalFileSystem.WatchRequest>()-->Line_17 $$ ContainerUtil.addIfNotNull(request, requestsToRemove)[ FD ]
Line_6 $$ final String path = artifact.getOutputPath()-->Line_8 $$ pathsToRemove.remove(path)[ FD ]
Line_16 $$ final LocalFileSystem.WatchRequest request = myWatchedOutputs.remove(path)-->Line_17 $$ ContainerUtil.addIfNotNull(request, requestsToRemove)[ FD ]
Line_7 $$ if (path != null && path.length() > 0) -->Line_8 $$ pathsToRemove.remove(path)[ CD ]
Line_9 $$ if (!myWatchedOutputs.containsKey(path)) -->Line_10 $$ toAdd.add(path)[ CD ]
