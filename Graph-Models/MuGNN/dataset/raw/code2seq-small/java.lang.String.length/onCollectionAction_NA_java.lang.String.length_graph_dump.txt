Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_17 $$ generateBidirectionalCollectionChangeWorkUnits(auditProcess, event, workUnit, rd)[ FD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_3 $$ if (shouldGenerateRevision(event)) [ CD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_8 $$ final String referencingPropertyName = collectionEntry.getRole().substring(ownerEntityName.length() + 1)[ CD ]
Line_15 $$ if (workUnit.containsWork()) -->Line_16 $$ auditProcess.addWorkUnit(new CollectionChangeWorkUnit(event.getSession(), event.getAffectedOwnerEntityName(), referencingPropertyName, getEnversService(), event.getAffectedOwnerIdOrNull(), event.getAffectedOwnerOrNull()))[ CD ]
Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())-->Line_16 $$ auditProcess.addWorkUnit(new CollectionChangeWorkUnit(event.getSession(), event.getAffectedOwnerEntityName(), referencingPropertyName, getEnversService(), event.getAffectedOwnerIdOrNull(), event.getAffectedOwnerOrNull()))[ FD ]
Line_7 $$ final String ownerEntityName = ((AbstractCollectionPersister) collectionEntry.getLoadedPersister()).getOwnerEntityName()-->Line_8 $$ final String referencingPropertyName = collectionEntry.getRole().substring(ownerEntityName.length() + 1)[ FD ]
Line_8 $$ final String referencingPropertyName = collectionEntry.getRole().substring(ownerEntityName.length() + 1)-->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ FD ]
Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) -->Line_13 $$ final PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(), entityName, getEnversService(), newColl, collectionEntry, oldColl, event.getAffectedOwnerIdOrNull(), referencingPropertyName)[ CD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_4 $$ checkIfTransactionInProgress(event.getSession())[ FD ]
Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) -->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ CD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_6 $$ final String entityName = event.getAffectedOwnerEntityName()[ CD ]
Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)-->Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) [ FD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_16 $$ auditProcess.addWorkUnit(new CollectionChangeWorkUnit(event.getSession(), event.getAffectedOwnerEntityName(), referencingPropertyName, getEnversService(), event.getAffectedOwnerIdOrNull(), event.getAffectedOwnerOrNull()))[ FD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_13 $$ final PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(), entityName, getEnversService(), newColl, collectionEntry, oldColl, event.getAffectedOwnerIdOrNull(), referencingPropertyName)[ FD ]
Line_6 $$ final String entityName = event.getAffectedOwnerEntityName()-->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ FD ]
Line_15 $$ if (workUnit.containsWork()) -->Line_17 $$ generateBidirectionalCollectionChangeWorkUnits(auditProcess, event, workUnit, rd)[ CD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_7 $$ final String ownerEntityName = ((AbstractCollectionPersister) collectionEntry.getLoadedPersister()).getOwnerEntityName()[ FD ]
Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)-->Line_17 $$ generateBidirectionalCollectionChangeWorkUnits(auditProcess, event, workUnit, rd)[ FD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)[ CD ]
Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())-->Line_14 $$ auditProcess.addWorkUnit(workUnit)[ FD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_4 $$ checkIfTransactionInProgress(event.getSession())[ CD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ FD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_8 $$ final String referencingPropertyName = collectionEntry.getRole().substring(ownerEntityName.length() + 1)[ FD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_7 $$ final String ownerEntityName = ((AbstractCollectionPersister) collectionEntry.getLoadedPersister()).getOwnerEntityName()[ CD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_6 $$ final String entityName = event.getAffectedOwnerEntityName()[ FD ]
Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())-->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ FD ]
Line_6 $$ final String entityName = event.getAffectedOwnerEntityName()-->Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)[ FD ]
Line_13 $$ final PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(), entityName, getEnversService(), newColl, collectionEntry, oldColl, event.getAffectedOwnerIdOrNull(), referencingPropertyName)-->Line_17 $$ generateBidirectionalCollectionChangeWorkUnits(auditProcess, event, workUnit, rd)[ FD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_3 $$ if (shouldGenerateRevision(event)) [ FD ]
Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)-->Line_11 $$ generateFakeBidirecationalRelationWorkUnits(auditProcess, newColl, oldColl, entityName, referencingPropertyName, event, rd)[ FD ]
Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())-->Line_17 $$ generateBidirectionalCollectionChangeWorkUnits(auditProcess, event, workUnit, rd)[ FD ]
Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) -->Line_14 $$ auditProcess.addWorkUnit(workUnit)[ CD ]
Line_2 $$ protected final void onCollectionAction(AbstractCollectionEvent event, PersistentCollection newColl, Serializable oldColl, CollectionEntry collectionEntry) -->Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())[ FD ]
Line_8 $$ final String referencingPropertyName = collectionEntry.getRole().substring(ownerEntityName.length() + 1)-->Line_9 $$ final RelationDescription rd = searchForRelationDescription(entityName, referencingPropertyName)[ FD ]
Line_13 $$ final PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(), entityName, getEnversService(), newColl, collectionEntry, oldColl, event.getAffectedOwnerIdOrNull(), referencingPropertyName)-->Line_14 $$ auditProcess.addWorkUnit(workUnit)[ FD ]
Line_13 $$ final PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(), entityName, getEnversService(), newColl, collectionEntry, oldColl, event.getAffectedOwnerIdOrNull(), referencingPropertyName)-->Line_15 $$ if (workUnit.containsWork()) [ FD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_5 $$ final AuditProcess auditProcess = getEnversService().getAuditProcessManager().get(event.getSession())[ CD ]
Line_3 $$ if (shouldGenerateRevision(event)) -->Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) [ CD ]
Line_10 $$ if (rd != null && rd.getMappedByPropertyName() != null) -->Line_15 $$ if (workUnit.containsWork()) [ CD ]
