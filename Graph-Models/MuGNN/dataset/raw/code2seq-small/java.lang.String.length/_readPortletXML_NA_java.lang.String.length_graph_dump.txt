Line_106 $$ Set<QName> processingEvents = new HashSet()-->Line_116 $$ processingEvents.addAll(qNames)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_20 $$ portletModel.setPortletApp(portletApp)[ FD ]
Line_4 $$ String portletId = portletName-->Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)[ FD ]
Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")-->Line_85 $$ portletPreferencesElement.remove(preferencesValidatorElement)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_77 $$ portletModel.setPortletInfo(portletInfo)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_5 $$ if (Validator.isNotNull(servletContextName)) [ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_21 $$ portletModel.setPortletName(portletName)[ FD ]
Line_36 $$ String mimeType = supportsElement.elementText("mime-type")-->Line_42 $$ portletModes.put(mimeType, mimeTypePortletModes)[ FD ]
Line_81 $$ if (portletPreferencesElement != null) -->Line_82 $$ Element preferencesValidatorElement = portletPreferencesElement.element("preferences-validator")[ CD ]
Line_82 $$ Element preferencesValidatorElement = portletPreferencesElement.element("preferences-validator")-->Line_83 $$ if (preferencesValidatorElement != null) [ FD ]
Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())-->Line_115 $$ if (qNames.contains(qName)) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_102 $$ for (Element roleElement : portletElement.elements("security-role-ref")) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")[ CD ]
Line_79 $$ String defaultPreferences = null-->Line_89 $$ portletModel.setDefaultPreferences(defaultPreferences)[ FD ]
Line_67 $$ String portletInfoTitle = null-->Line_72 $$ portletInfoTitle = portletInfoElement.elementText("title")[ FD ]
Line_16 $$ if (portletModel == null) -->Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_57 $$ portletModel.setPortletModes(portletModes)[ FD ]
Line_96 $$ if (_log.isWarnEnabled()) -->Line_97 $$ _log.warn("Portlet with the name " + portletId + " does not have valid default preferences")[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_120 $$ portletModel.setProcessingEvents(processingEvents)[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_120 $$ portletModel.setProcessingEvents(processingEvents)[ FD ]
Line_46 $$ if (windowStateElements.isEmpty()) -->Line_48 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(WindowState.MINIMIZED.toString()))[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_58 $$ portletModel.setWindowStates(windowStates)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_130 $$ for (Element supportedPublicRenderParameter : portletElement.elements("supported-public-render-parameter")) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_79 $$ String defaultPreferences = null[ CD ]
Line_39 $$ for (Element portletModeElement : supportsElement.elements("portlet-mode")) -->Line_40 $$ mimeTypePortletModes.add(StringUtil.toLowerCase(portletModeElement.getTextTrim()))[ FD ]
Line_107 $$ for (Element supportedProcessingEventElement : portletElement.elements("supported-processing-event")) -->Line_108 $$ Element qNameElement = supportedProcessingEventElement.element("qname")[ FD ]
Line_46 $$ if (windowStateElements.isEmpty()) -->Line_49 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(LiferayWindowState.EXCLUSIVE.toString()))[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_120 $$ portletModel.setProcessingEvents(processingEvents)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)[ FD ]
Line_4 $$ String portletId = portletName-->Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)[ FD ]
Line_4 $$ String portletId = portletName-->Line_9 $$ if (portletId.length() > PortletInstance.PORTLET_INSTANCE_KEY_MAX_LENGTH) [ FD ]
Line_101 $$ Set<String> unlinkedRoles = new HashSet()-->Line_103 $$ unlinkedRoles.add(roleElement.elementText("role-name"))[ FD ]
Line_108 $$ Element qNameElement = supportedProcessingEventElement.element("qname")-->Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_89 $$ portletModel.setDefaultPreferences(defaultPreferences)[ CD ]
Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")-->Line_82 $$ Element preferencesValidatorElement = portletPreferencesElement.element("preferences-validator")[ FD ]
Line_129 $$ Set<PublicRenderParameter> publicRenderParameters = new HashSet()-->Line_137 $$ publicRenderParameters.add(publicRenderParameter)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_122 $$ for (Element supportedPublishingEventElement : portletElement.elements("supported-publishing-event")) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_34 $$ Map<String, Set<String>> windowStates = new HashMap()[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_31 $$ portletModel.setExpCache(GetterUtil.getInteger(expirationCacheElement.getText()))[ FD ]
Line_4 $$ String portletId = portletName-->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_70 $$ String portletInfoDescription = null[ CD ]
Line_107 $$ for (Element supportedProcessingEventElement : portletElement.elements("supported-processing-event")) -->Line_109 $$ Element nameElement = supportedProcessingEventElement.element("name")[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_12 $$ if (_log.isDebugEnabled()) [ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_19 $$ portletModel.setPluginPackage(pluginPackage)[ FD ]
Line_80 $$ String preferencesValidator = null-->Line_90 $$ portletModel.setPreferencesValidator(preferencesValidator)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_28 $$ portletModel.setInitParams(initParams)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_20 $$ portletModel.setPortletApp(portletApp)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_107 $$ for (Element supportedProcessingEventElement : portletElement.elements("supported-processing-event")) [ FD ]
Line_35 $$ for (Element supportsElement : portletElement.elements("supports")) -->Line_36 $$ String mimeType = supportsElement.elementText("mime-type")[ FD ]
Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)-->Line_9 $$ if (portletId.length() > PortletInstance.PORTLET_INSTANCE_KEY_MAX_LENGTH) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_3 $$ String portletName = portletElement.elementText("portlet-name")[ FD ]
Line_29 $$ Element expirationCacheElement = portletElement.element("expiration-cache")-->Line_31 $$ portletModel.setExpCache(GetterUtil.getInteger(expirationCacheElement.getText()))[ FD ]
Line_93 $$ PreferencesValidator preferencesValidatorObj = PortalUtil.getPreferencesValidator(portletModel)-->Line_94 $$ preferencesValidatorObj.validate(PortletPreferencesFactoryUtil.fromDefaultXML(defaultPreferences))[ FD ]
Line_87 $$ defaultPreferences = portletPreferencesElement.asXML()-->Line_94 $$ preferencesValidatorObj.validate(PortletPreferencesFactoryUtil.fromDefaultXML(defaultPreferences))[ FD ]
Line_132 $$ PublicRenderParameter publicRenderParameter = portletApp.getPublicRenderParameter(identifier)-->Line_133 $$ if (publicRenderParameter == null) [ FD ]
Line_61 $$ String supportedLocale = supportedLocaleElement.getText()-->Line_62 $$ supportedLocales.add(supportedLocale)[ FD ]
Line_82 $$ Element preferencesValidatorElement = portletPreferencesElement.element("preferences-validator")-->Line_84 $$ preferencesValidator = preferencesValidatorElement.getText()[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_9 $$ if (portletId.length() > PortletInstance.PORTLET_INSTANCE_KEY_MAX_LENGTH) [ CD ]
Line_133 $$ if (publicRenderParameter == null) -->Line_134 $$ _log.error("Supported public render parameter references " + "unknown identifier " + identifier)[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_93 $$ PreferencesValidator preferencesValidatorObj = PortalUtil.getPreferencesValidator(portletModel)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_58 $$ portletModel.setWindowStates(windowStates)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_23 $$ portletModel.setPortletClass(GetterUtil.getString(portletElement.elementText("portlet-class")))[ CD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_48 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(WindowState.MINIMIZED.toString()))[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_31 $$ portletModel.setExpCache(GetterUtil.getInteger(expirationCacheElement.getText()))[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_90 $$ portletModel.setPreferencesValidator(preferencesValidator)[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_128 $$ portletModel.setPublishingEvents(publishingEvents)[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_16 $$ if (portletModel == null) [ FD ]
Line_37 $$ Set<String> mimeTypePortletModes = new HashSet()-->Line_40 $$ mimeTypePortletModes.add(StringUtil.toLowerCase(portletModeElement.getTextTrim()))[ FD ]
Line_34 $$ Map<String, Set<String>> windowStates = new HashMap()-->Line_55 $$ windowStates.put(mimeType, mimeTypeWindowStates)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_65 $$ portletModel.setResourceBundle(portletElement.elementText("resource-bundle"))[ FD ]
Line_84 $$ preferencesValidator = preferencesValidatorElement.getText()-->Line_90 $$ portletModel.setPreferencesValidator(preferencesValidator)[ FD ]
Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)-->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_71 $$ if (portletInfoElement != null) -->Line_74 $$ portletInfoKeyWords = portletInfoElement.elementText("keywords")[ CD ]
Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())-->Line_126 $$ publishingEvents.add(qName)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_106 $$ Set<QName> processingEvents = new HashSet()[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_20 $$ portletModel.setPortletApp(portletApp)[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_90 $$ portletModel.setPreferencesValidator(preferencesValidator)[ FD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_44 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(WindowState.NORMAL.toString()))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_105 $$ portletModel.setUnlinkedRoles(unlinkedRoles)[ CD ]
Line_45 $$ List<Element> windowStateElements = supportsElement.elements("window-state")-->Line_46 $$ if (windowStateElements.isEmpty()) [ FD ]
Line_106 $$ Set<QName> processingEvents = new HashSet()-->Line_120 $$ portletModel.setProcessingEvents(processingEvents)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_69 $$ String portletInfoKeyWords = null[ CD ]
Line_122 $$ for (Element supportedPublishingEventElement : portletElement.elements("supported-publishing-event")) -->Line_123 $$ Element qNameElement = supportedPublishingEventElement.element("qname")[ FD ]
Line_35 $$ for (Element supportsElement : portletElement.elements("supports")) -->Line_45 $$ List<Element> windowStateElements = supportsElement.elements("window-state")[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_64 $$ portletModel.setSupportedLocales(supportedLocales)[ CD ]
Line_36 $$ String mimeType = supportsElement.elementText("mime-type")-->Line_55 $$ windowStates.put(mimeType, mimeTypeWindowStates)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_101 $$ Set<String> unlinkedRoles = new HashSet()[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_22 $$ portletModel.setDisplayName(GetterUtil.getString(portletElement.elementText("display-name"), portletModel.getDisplayName()))[ CD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_53 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(windowStateElement.getTextTrim()))[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_21 $$ portletModel.setPortletName(portletName)[ FD ]
Line_12 $$ if (_log.isDebugEnabled()) -->Line_13 $$ _log.debug("Reading portlet " + portletId)[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_105 $$ portletModel.setUnlinkedRoles(unlinkedRoles)[ FD ]
Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)-->Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)[ FD ]
Line_24 $$ Map<String, String> initParams = new HashMap()-->Line_26 $$ initParams.put(initParamElement.elementText("name"), initParamElement.elementText("value"))[ FD ]
Line_109 $$ Element nameElement = supportedProcessingEventElement.element("name")-->Line_125 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_52 $$ for (Element windowStateElement : windowStateElements) -->Line_53 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(windowStateElement.getTextTrim()))[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_19 $$ portletModel.setPluginPackage(pluginPackage)[ FD ]
Line_3 $$ String portletName = portletElement.elementText("portlet-name")-->Line_21 $$ portletModel.setPortletName(portletName)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_24 $$ Map<String, String> initParams = new HashMap()[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_4 $$ String portletId = portletName[ CD ]
Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")-->Line_72 $$ portletInfoTitle = portletInfoElement.elementText("title")[ FD ]
Line_33 $$ Map<String, Set<String>> portletModes = new HashMap()-->Line_42 $$ portletModes.put(mimeType, mimeTypePortletModes)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_139 $$ portletModel.setPublicRenderParameters(publicRenderParameters)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_21 $$ portletModel.setPortletName(portletName)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_67 $$ String portletInfoTitle = null[ CD ]
Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)-->Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)[ FD ]
Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")-->Line_74 $$ portletInfoKeyWords = portletInfoElement.elementText("keywords")[ FD ]
Line_60 $$ for (Element supportedLocaleElement : portletElement.elements("supported-locale")) -->Line_61 $$ String supportedLocale = supportedLocaleElement.getText()[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_28 $$ portletModel.setInitParams(initParams)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_57 $$ portletModel.setPortletModes(portletModes)[ CD ]
Line_80 $$ String preferencesValidator = null-->Line_91 $$ if (!portletApp.isWARFile() && Validator.isNotNull(preferencesValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) [ FD ]
Line_113 $$ for (EventDefinition eventDefinition : eventDefinitions) -->Line_114 $$ Set<QName> qNames = eventDefinition.getQNames()[ FD ]
Line_130 $$ for (Element supportedPublicRenderParameter : portletElement.elements("supported-public-render-parameter")) -->Line_131 $$ String identifier = supportedPublicRenderParameter.getTextTrim()[ FD ]
Line_24 $$ Map<String, String> initParams = new HashMap()-->Line_28 $$ portletModel.setInitParams(initParams)[ FD ]
Line_34 $$ Map<String, Set<String>> windowStates = new HashMap()-->Line_58 $$ portletModel.setWindowStates(windowStates)[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_105 $$ portletModel.setUnlinkedRoles(unlinkedRoles)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_60 $$ for (Element supportedLocaleElement : portletElement.elements("supported-locale")) [ FD ]
Line_122 $$ for (Element supportedPublishingEventElement : portletElement.elements("supported-publishing-event")) -->Line_124 $$ Element nameElement = supportedPublishingEventElement.element("name")[ FD ]
Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")-->Line_73 $$ portletInfoShortTitle = portletInfoElement.elementText("short-title")[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_19 $$ portletModel.setPluginPackage(pluginPackage)[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)-->Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_121 $$ Set<QName> publishingEvents = new HashSet()[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_23 $$ portletModel.setPortletClass(GetterUtil.getString(portletElement.elementText("portlet-class")))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_19 $$ portletModel.setPluginPackage(pluginPackage)[ FD ]
Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")-->Line_81 $$ if (portletPreferencesElement != null) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_25 $$ for (Element initParamElement : portletElement.elements("init-param")) [ FD ]
Line_59 $$ Set<String> supportedLocales = new HashSet()-->Line_62 $$ supportedLocales.add(supportedLocale)[ FD ]
Line_109 $$ Element nameElement = supportedProcessingEventElement.element("name")-->Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_4 $$ String portletId = portletName-->Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_91 $$ if (!portletApp.isWARFile() && Validator.isNotNull(preferencesValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) [ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")[ FD ]
Line_69 $$ String portletInfoKeyWords = null-->Line_74 $$ portletInfoKeyWords = portletInfoElement.elementText("keywords")[ FD ]
Line_37 $$ Set<String> mimeTypePortletModes = new HashSet()-->Line_42 $$ portletModes.put(mimeType, mimeTypePortletModes)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_65 $$ portletModel.setResourceBundle(portletElement.elementText("resource-bundle"))[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_29 $$ Element expirationCacheElement = portletElement.element("expiration-cache")[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_22 $$ portletModel.setDisplayName(GetterUtil.getString(portletElement.elementText("display-name"), portletModel.getDisplayName()))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_16 $$ if (portletModel == null) [ CD ]
Line_108 $$ Element qNameElement = supportedProcessingEventElement.element("qname")-->Line_125 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_140 $$ portletsMap.put(portletId, portletModel)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_90 $$ portletModel.setPreferencesValidator(preferencesValidator)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_128 $$ portletModel.setPublishingEvents(publishingEvents)[ CD ]
Line_84 $$ preferencesValidator = preferencesValidatorElement.getText()-->Line_91 $$ if (!portletApp.isWARFile() && Validator.isNotNull(preferencesValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) [ FD ]
Line_131 $$ String identifier = supportedPublicRenderParameter.getTextTrim()-->Line_132 $$ PublicRenderParameter publicRenderParameter = portletApp.getPublicRenderParameter(identifier)[ FD ]
Line_29 $$ Element expirationCacheElement = portletElement.element("expiration-cache")-->Line_30 $$ if (expirationCacheElement != null) [ FD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_50 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(LiferayWindowState.POP_UP.toString()))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_81 $$ if (portletPreferencesElement != null) [ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)[ FD ]
Line_83 $$ if (preferencesValidatorElement != null) -->Line_85 $$ portletPreferencesElement.remove(preferencesValidatorElement)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_125 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_101 $$ Set<String> unlinkedRoles = new HashSet()-->Line_105 $$ portletModel.setUnlinkedRoles(unlinkedRoles)[ FD ]
Line_5 $$ if (Validator.isNotNull(servletContextName)) -->Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)[ CD ]
Line_59 $$ Set<String> supportedLocales = new HashSet()-->Line_64 $$ portletModel.setSupportedLocales(supportedLocales)[ FD ]
Line_6 $$ portletId = portletId.concat(PortletConstants.WAR_SEPARATOR).concat(servletContextName)-->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_58 $$ portletModel.setWindowStates(windowStates)[ FD ]
Line_35 $$ for (Element supportsElement : portletElement.elements("supports")) -->Line_39 $$ for (Element portletModeElement : supportsElement.elements("portlet-mode")) [ FD ]
Line_25 $$ for (Element initParamElement : portletElement.elements("init-param")) -->Line_26 $$ initParams.put(initParamElement.elementText("name"), initParamElement.elementText("value"))[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_89 $$ portletModel.setDefaultPreferences(defaultPreferences)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_139 $$ portletModel.setPublicRenderParameters(publicRenderParameters)[ CD ]
Line_81 $$ if (portletPreferencesElement != null) -->Line_83 $$ if (preferencesValidatorElement != null) [ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_23 $$ portletModel.setPortletClass(GetterUtil.getString(portletElement.elementText("portlet-class")))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_28 $$ portletModel.setInitParams(initParams)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_35 $$ for (Element supportsElement : portletElement.elements("supports")) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_80 $$ String preferencesValidator = null[ CD ]
Line_121 $$ Set<QName> publishingEvents = new HashSet()-->Line_128 $$ portletModel.setPublishingEvents(publishingEvents)[ FD ]
Line_79 $$ String defaultPreferences = null-->Line_87 $$ defaultPreferences = portletPreferencesElement.asXML()[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)[ CD ]
Line_79 $$ String defaultPreferences = null-->Line_94 $$ preferencesValidatorObj.validate(PortletPreferencesFactoryUtil.fromDefaultXML(defaultPreferences))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_112 $$ Set<EventDefinition> eventDefinitions = portletApp.getEventDefinitions()[ FD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_47 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(WindowState.MAXIMIZED.toString()))[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_77 $$ portletModel.setPortletInfo(portletInfo)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_33 $$ Map<String, Set<String>> portletModes = new HashMap()[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_65 $$ portletModel.setResourceBundle(portletElement.elementText("resource-bundle"))[ FD ]
Line_33 $$ Map<String, Set<String>> portletModes = new HashMap()-->Line_57 $$ portletModel.setPortletModes(portletModes)[ FD ]
Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")-->Line_87 $$ defaultPreferences = portletPreferencesElement.asXML()[ FD ]
Line_129 $$ Set<PublicRenderParameter> publicRenderParameters = new HashSet()-->Line_139 $$ portletModel.setPublicRenderParameters(publicRenderParameters)[ FD ]
Line_46 $$ if (windowStateElements.isEmpty()) -->Line_50 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(LiferayWindowState.POP_UP.toString()))[ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_57 $$ portletModel.setPortletModes(portletModes)[ FD ]
Line_66 $$ Element portletInfoElement = portletElement.element("portlet-info")-->Line_71 $$ if (portletInfoElement != null) [ FD ]
Line_83 $$ if (preferencesValidatorElement != null) -->Line_84 $$ preferencesValidator = preferencesValidatorElement.getText()[ CD ]
Line_106 $$ Set<QName> processingEvents = new HashSet()-->Line_111 $$ processingEvents.add(qName)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_128 $$ portletModel.setPublishingEvents(publishingEvents)[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_139 $$ portletModel.setPublicRenderParameters(publicRenderParameters)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_76 $$ PortletInfo portletInfo = new PortletInfo(portletInfoTitle, portletInfoShortTitle, portletInfoKeyWords, portletInfoDescription)[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_140 $$ portletsMap.put(portletId, portletModel)[ FD ]
Line_114 $$ Set<QName> qNames = eventDefinition.getQNames()-->Line_116 $$ processingEvents.addAll(qNames)[ FD ]
Line_30 $$ if (expirationCacheElement != null) -->Line_31 $$ portletModel.setExpCache(GetterUtil.getInteger(expirationCacheElement.getText()))[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_22 $$ portletModel.setDisplayName(GetterUtil.getString(portletElement.elementText("display-name"), portletModel.getDisplayName()))[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_64 $$ portletModel.setSupportedLocales(supportedLocales)[ FD ]
Line_81 $$ if (portletPreferencesElement != null) -->Line_87 $$ defaultPreferences = portletPreferencesElement.asXML()[ CD ]
Line_114 $$ Set<QName> qNames = eventDefinition.getQNames()-->Line_115 $$ if (qNames.contains(qName)) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_23 $$ portletModel.setPortletClass(GetterUtil.getString(portletElement.elementText("portlet-class")))[ FD ]
Line_71 $$ if (portletInfoElement != null) -->Line_73 $$ portletInfoShortTitle = portletInfoElement.elementText("short-title")[ CD ]
Line_102 $$ for (Element roleElement : portletElement.elements("security-role-ref")) -->Line_103 $$ unlinkedRoles.add(roleElement.elementText("role-name"))[ FD ]
Line_87 $$ defaultPreferences = portletPreferencesElement.asXML()-->Line_89 $$ portletModel.setDefaultPreferences(defaultPreferences)[ FD ]
Line_115 $$ if (qNames.contains(qName)) -->Line_116 $$ processingEvents.addAll(qNames)[ CD ]
Line_132 $$ PublicRenderParameter publicRenderParameter = portletApp.getPublicRenderParameter(identifier)-->Line_137 $$ publicRenderParameters.add(publicRenderParameter)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_129 $$ Set<PublicRenderParameter> publicRenderParameters = new HashSet()[ CD ]
Line_46 $$ if (windowStateElements.isEmpty()) -->Line_47 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(WindowState.MAXIMIZED.toString()))[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_68 $$ String portletInfoShortTitle = null[ CD ]
Line_68 $$ String portletInfoShortTitle = null-->Line_73 $$ portletInfoShortTitle = portletInfoElement.elementText("short-title")[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_5 $$ if (Validator.isNotNull(servletContextName)) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_30 $$ if (expirationCacheElement != null) [ CD ]
Line_8 $$ portletId = PortalUtil.getJsSafePortletId(portletId)-->Line_9 $$ if (portletId.length() > PortletInstance.PORTLET_INSTANCE_KEY_MAX_LENGTH) [ FD ]
Line_37 $$ Set<String> mimeTypePortletModes = new HashSet()-->Line_38 $$ mimeTypePortletModes.add(StringUtil.toLowerCase(PortletMode.VIEW.toString()))[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_65 $$ portletModel.setResourceBundle(portletElement.elementText("resource-bundle"))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_78 $$ Element portletPreferencesElement = portletElement.element("portlet-preferences")[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_77 $$ portletModel.setPortletInfo(portletInfo)[ CD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_64 $$ portletModel.setSupportedLocales(supportedLocales)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_59 $$ Set<String> supportedLocales = new HashSet()[ CD ]
Line_71 $$ if (portletInfoElement != null) -->Line_72 $$ portletInfoTitle = portletInfoElement.elementText("title")[ CD ]
Line_110 $$ QName qName = PortletQNameUtil.getQName(qNameElement, nameElement, portletApp.getDefaultNamespace())-->Line_111 $$ processingEvents.add(qName)[ FD ]
Line_82 $$ Element preferencesValidatorElement = portletPreferencesElement.element("preferences-validator")-->Line_85 $$ portletPreferencesElement.remove(preferencesValidatorElement)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_71 $$ if (portletInfoElement != null) [ CD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_22 $$ portletModel.setDisplayName(GetterUtil.getString(portletElement.elementText("display-name"), portletModel.getDisplayName()))[ FD ]
Line_80 $$ String preferencesValidator = null-->Line_84 $$ preferencesValidator = preferencesValidatorElement.getText()[ FD ]
Line_15 $$ Portlet portletModel = _portletsMap.get(portletId)-->Line_93 $$ PreferencesValidator preferencesValidatorObj = PortalUtil.getPreferencesValidator(portletModel)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_89 $$ portletModel.setDefaultPreferences(defaultPreferences)[ FD ]
Line_76 $$ PortletInfo portletInfo = new PortletInfo(portletInfoTitle, portletInfoShortTitle, portletInfoKeyWords, portletInfoDescription)-->Line_77 $$ portletModel.setPortletInfo(portletInfo)[ FD ]
Line_121 $$ Set<QName> publishingEvents = new HashSet()-->Line_126 $$ publishingEvents.add(qName)[ FD ]
Line_17 $$ portletModel = new PortletImpl(CompanyConstants.SYSTEM, portletId)-->Line_20 $$ portletModel.setPortletApp(portletApp)[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_132 $$ PublicRenderParameter publicRenderParameter = portletApp.getPublicRenderParameter(identifier)[ FD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_49 $$ mimeTypeWindowStates.add(StringUtil.toLowerCase(LiferayWindowState.EXCLUSIVE.toString()))[ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_91 $$ if (!portletApp.isWARFile() && Validator.isNotNull(preferencesValidator) && PropsValues.PREFERENCE_VALIDATE_ON_STARTUP) [ FD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_29 $$ Element expirationCacheElement = portletElement.element("expiration-cache")[ CD ]
Line_2 $$ private void _readPortletXML(String servletContextName, PluginPackage pluginPackage, PortletApp portletApp, Element portletElement, Map<String, Portlet> portletsMap) throws PortletIdException -->Line_3 $$ String portletName = portletElement.elementText("portlet-name")[ CD ]
Line_43 $$ Set<String> mimeTypeWindowStates = new HashSet()-->Line_55 $$ windowStates.put(mimeType, mimeTypeWindowStates)[ FD ]
