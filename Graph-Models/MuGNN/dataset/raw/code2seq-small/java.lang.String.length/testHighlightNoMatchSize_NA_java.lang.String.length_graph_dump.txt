Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_32 $$ field.highlighterType("postings")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_56 $$ field.highlighterType("fvh")[ CD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ CD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ CD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_50 $$ field.highlighterType("postings")[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_7 $$ refresh()[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_70 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_41 $$ field.highlighterType("postings")[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_16 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_44 $$ field.highlighterType("plain").noMatchSize(text.length())[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_11 $$ field.highlighterType("fvh")[ CD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_64 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_20 $$ field.highlighterType("fvh")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_16 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_13 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_14 $$ field.highlighterType("postings")[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_6 $$ index("test", "type1", "1", "text", text)[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_19 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_22 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_35 $$ field.highlighterType("plain").noMatchSize(text.length() * 2)[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_14 $$ field.highlighterType("postings")[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_19 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ CD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_41 $$ field.highlighterType("postings")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_38 $$ field.highlighterType("fvh")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ CD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_50 $$ field.highlighterType("postings")[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"[ CD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ CD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_16 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ CD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_53 $$ field.highlighterType("plain").noMatchSize(null)[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ CD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_22 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_19 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ CD ]
Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_62 $$ field.highlighterType("plain").noMatchSize(randomIntBetween(Integer.MIN_VALUE, -1))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")[ CD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_10 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_44 $$ field.highlighterType("plain").noMatchSize(text.length())[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_17 $$ field.highlighterType("plain").noMatchSize(0)[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_22 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_65 $$ field.highlighterType("fvh")[ CD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_38 $$ field.highlighterType("fvh")[ CD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_25 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_20 $$ field.highlighterType("fvh")[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_13 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_68 $$ field.highlighterType("postings")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_35 $$ field.highlighterType("plain").noMatchSize(text.length() * 2)[ CD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ CD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_47 $$ field.highlighterType("fvh")[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_29 $$ field.highlighterType("fvh")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_11 $$ field.highlighterType("fvh")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_13 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_23 $$ field.highlighterType("postings")[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ CD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_35 $$ field.highlighterType("plain").noMatchSize(text.length() * 2)[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_19 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_62 $$ field.highlighterType("plain").noMatchSize(randomIntBetween(Integer.MIN_VALUE, -1))[ CD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_44 $$ field.highlighterType("plain").noMatchSize(text.length())[ CD ]
Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ CD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_53 $$ field.highlighterType("plain").noMatchSize(null)[ CD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_26 $$ field.highlighterType("plain").noMatchSize(21)[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_3 $$ assertAcked(prepareCreate("test").addMapping("type1", "text", "type=string," + randomStoreField() + "term_vector=with_positions_offsets,index_options=offsets"))[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_26 $$ field.highlighterType("plain").noMatchSize(21)[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_17 $$ field.highlighterType("plain").noMatchSize(0)[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ CD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_22 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_65 $$ field.highlighterType("fvh")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_6 $$ index("test", "type1", "1", "text", text)[ CD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_47 $$ field.highlighterType("fvh")[ CD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_67 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_56 $$ field.highlighterType("fvh")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_32 $$ field.highlighterType("postings")[ CD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_59 $$ field.highlighterType("postings")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ CD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_5 $$ String text = "I am pretty long so some of me should get cut off. Second sentence"-->Line_37 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_19 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_61 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_22 $$ assertNotHighlighted(response, 0, "text")[ CD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_10 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_28 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_29 $$ field.highlighterType("fvh")[ CD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_60 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_22 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_30 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_40 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_54 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_12 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_59 $$ field.highlighterType("postings")[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_16 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_51 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_43 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_67 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_66 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_39 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_48 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_69 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_57 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field).noMatchSize(21)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_45 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_63 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_52 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_8 $$ HighlightBuilder.Field field = new HighlightBuilder.Field("text").fragmentSize(21).numOfFragments(1).highlighterType("plain")-->Line_23 $$ field.highlighterType("postings")[ FD ]
Line_18 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_31 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_68 $$ field.highlighterType("postings")[ CD ]
Line_15 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_27 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_34 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some of me should get cut off."))[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ CD ]
Line_9 $$ SearchResponse response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_49 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_46 $$ assertHighlight(response, 0, "text", 0, 1, equalTo(text))[ FD ]
Line_21 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_70 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_36 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_64 $$ assertNotHighlighted(response, 0, "text")[ FD ]
Line_2 $$ public void testHighlightNoMatchSize() throws IOException -->Line_55 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so"))[ CD ]
Line_42 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_58 $$ assertHighlight(response, 0, "text", 0, 1, equalTo("I am pretty long so some"))[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_33 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()[ FD ]
Line_24 $$ response = client().prepareSearch("test").highlighter(new HighlightBuilder().field(field)).get()-->Line_25 $$ assertNotHighlighted(response, 0, "text")[ FD ]
