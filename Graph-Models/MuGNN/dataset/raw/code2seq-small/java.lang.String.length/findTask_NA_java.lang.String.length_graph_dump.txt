Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_8 $$ moduleNode = findModuleById(projectNode, path)[ CD ]
Line_8 $$ moduleNode = findModuleById(projectNode, path)-->Line_17 $$ if (moduleNode == null)[ FD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ FD ]
Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_21 $$ return node.getData().getName().equals(taskName)[ CD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_8 $$ moduleNode = findModuleById(projectNode, path)[ FD ]
Line_8 $$ moduleNode = findModuleById(projectNode, path)-->Line_9 $$ if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(), modulePath, false)) [ FD ]
Line_12 $$ taskName = (i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath-->Line_15 $$ taskName = taskPath[ FD ]
Line_8 $$ moduleNode = findModuleById(projectNode, path)-->Line_14 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_7 $$ String path = taskPath.substring(0, i)[ CD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_8 $$ moduleNode = findModuleById(projectNode, path)[ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_9 $$ if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(), modulePath, false)) [ CD ]
Line_10 $$ moduleNode = findModule(projectNode, modulePath)-->Line_14 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) [ CD ]
Line_15 $$ taskName = taskPath-->Line_21 $$ return node.getData().getName().equals(taskName)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_17 $$ if (moduleNode == null)[ CD ]
Line_17 $$ if (moduleNode == null)-->Line_18 $$ return null[ CD ]
Line_4 $$ final String taskName-->Line_21 $$ return node.getData().getName().equals(taskName)[ FD ]
Line_4 $$ final String taskName-->Line_12 $$ taskName = (i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath[ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_14 $$ moduleNode = findModule(projectNode, modulePath)[ CD ]
Line_14 $$ moduleNode = findModule(projectNode, modulePath)-->Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_15 $$ taskName = taskPath[ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_12 $$ taskName = (i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath[ CD ]
Line_10 $$ moduleNode = findModule(projectNode, modulePath)-->Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_3 $$ DataNode<ModuleData> moduleNode[ CD ]
Line_10 $$ moduleNode = findModule(projectNode, modulePath)-->Line_17 $$ if (moduleNode == null)[ FD ]
Line_9 $$ if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(), modulePath, false)) -->Line_10 $$ moduleNode = findModule(projectNode, modulePath)[ CD ]
Line_14 $$ moduleNode = findModule(projectNode, modulePath)-->Line_17 $$ if (moduleNode == null)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_12 $$ taskName = (i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath[ FD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_10 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_8 $$ moduleNode = findModuleById(projectNode, path)-->Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ FD ]
Line_7 $$ String path = taskPath.substring(0, i)-->Line_8 $$ moduleNode = findModuleById(projectNode, path)[ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_15 $$ taskName = taskPath[ CD ]
Line_12 $$ taskName = (i + 1) <= taskPath.length() ? taskPath.substring(i + 1) : taskPath-->Line_21 $$ return node.getData().getName().equals(taskName)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() [ CD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) [ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_4 $$ final String taskName[ CD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_14 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_9 $$ if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(), modulePath, false)) [ FD ]
Line_5 $$ if (StringUtil.startsWith(taskPath, ":")) -->Line_6 $$ final int i = taskPath.lastIndexOf(':')[ CD ]
Line_4 $$ final String taskName-->Line_15 $$ taskName = taskPath[ FD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_17 $$ if (moduleNode == null)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_7 $$ String path = taskPath.substring(0, i)[ FD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_9 $$ if (moduleNode == null || !FileUtil.isAncestor(moduleNode.getData().getLinkedExternalProjectPath(), modulePath, false)) [ FD ]
Line_8 $$ moduleNode = findModuleById(projectNode, path)-->Line_10 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_3 $$ DataNode<ModuleData> moduleNode-->Line_14 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_6 $$ final int i = taskPath.lastIndexOf(':')[ FD ]
Line_6 $$ final int i = taskPath.lastIndexOf(':')-->Line_7 $$ String path = taskPath.substring(0, i)[ FD ]
Line_2 $$ public static DataNode<TaskData> findTask(@Nullable final DataNode<ProjectData> projectNode, @NotNull final String modulePath, @NotNull final String taskPath) -->Line_10 $$ moduleNode = findModule(projectNode, modulePath)[ FD ]
Line_19 $$ return ExternalSystemApiUtil.find(moduleNode, ProjectKeys.TASK, new BooleanFunction<DataNode<TaskData>>() -->Line_21 $$ return node.getData().getName().equals(taskName)[ FD ]
