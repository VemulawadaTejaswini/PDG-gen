Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_6 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()[ CD ]
Line_11 $$ if (lastArgument instanceof PsiBinaryExpression) -->Line_13 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ CD ]
Line_18 $$ final String literal = postfix.toLowerCase()-->Line_22 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name1", methodName, literal)[ FD ]
Line_7 $$ final String methodName = methodExpression.getReferenceName()-->Line_14 $$ if (("assertTrue".equals(methodName) && JavaTokenType.EQEQ.equals(tokenType)) || ("assertFalse".equals(methodName) && JavaTokenType.NE.equals(tokenType))) [ FD ]
Line_10 $$ final PsiExpression lastArgument = arguments[arguments.length - 1]-->Line_11 $$ if (lastArgument instanceof PsiBinaryExpression) [ FD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_19 $$ if (arguments.length == 1) [ CD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_10 $$ final PsiExpression lastArgument = arguments[arguments.length - 1][ CD ]
Line_3 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) element-->Line_6 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()[ FD ]
Line_7 $$ final String methodName = methodExpression.getReferenceName()-->Line_9 $$ final String postfix = methodName.substring("assert".length())[ FD ]
Line_11 $$ if (lastArgument instanceof PsiBinaryExpression) -->Line_12 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) lastArgument[ CD ]
Line_7 $$ final String methodName = methodExpression.getReferenceName()-->Line_22 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name1", methodName, literal)[ FD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_7 $$ final String methodName = methodExpression.getReferenceName()[ CD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_11 $$ if (lastArgument instanceof PsiBinaryExpression) [ CD ]
Line_4 $$ final PsiExpressionList argumentList = call.getArgumentList()-->Line_5 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ FD ]
Line_7 $$ final String methodName = methodExpression.getReferenceName()-->Line_15 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name2", methodName)[ FD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_4 $$ final PsiExpressionList argumentList = call.getArgumentList()[ CD ]
Line_9 $$ final String postfix = methodName.substring("assert".length())-->Line_18 $$ final String literal = postfix.toLowerCase()[ FD ]
Line_12 $$ final PsiBinaryExpression binaryExpression = (PsiBinaryExpression) lastArgument-->Line_13 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()[ FD ]
Line_6 $$ final PsiReferenceExpression methodExpression = call.getMethodExpression()-->Line_7 $$ final String methodName = methodExpression.getReferenceName()[ FD ]
Line_19 $$ if (arguments.length == 1) -->Line_22 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name1", methodName, literal)[ CD ]
Line_11 $$ if (lastArgument instanceof PsiBinaryExpression) -->Line_14 $$ if (("assertTrue".equals(methodName) && JavaTokenType.EQEQ.equals(tokenType)) || ("assertFalse".equals(methodName) && JavaTokenType.NE.equals(tokenType))) [ CD ]
Line_3 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) element-->Line_4 $$ final PsiExpressionList argumentList = call.getArgumentList()[ FD ]
Line_14 $$ if (("assertTrue".equals(methodName) && JavaTokenType.EQEQ.equals(tokenType)) || ("assertFalse".equals(methodName) && JavaTokenType.NE.equals(tokenType))) -->Line_15 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name2", methodName)[ CD ]
Line_19 $$ if (arguments.length == 1) -->Line_20 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name", methodName, literal)[ CD ]
Line_18 $$ final String literal = postfix.toLowerCase()-->Line_20 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name", methodName, literal)[ FD ]
Line_13 $$ final IElementType tokenType = binaryExpression.getOperationTokenType()-->Line_14 $$ if (("assertTrue".equals(methodName) && JavaTokenType.EQEQ.equals(tokenType)) || ("assertFalse".equals(methodName) && JavaTokenType.NE.equals(tokenType))) [ FD ]
Line_7 $$ final String methodName = methodExpression.getReferenceName()-->Line_20 $$ return IntentionPowerPackBundle.message("replace.assert.literal.with.assert.equals.intention.name", methodName, literal)[ FD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_9 $$ final String postfix = methodName.substring("assert".length())[ CD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_5 $$ final PsiExpression[] arguments = argumentList.getExpressions()[ CD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_3 $$ final PsiMethodCallExpression call = (PsiMethodCallExpression) element[ CD ]
Line_2 $$ protected String getTextForElement(PsiElement element) -->Line_18 $$ final String literal = postfix.toLowerCase()[ CD ]
