Line_55 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_57 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_73 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_43 $$ useDefaultDataSource = false-->Line_48 $$ useDefaultDataSource = false[ FD ]
Line_25 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_62 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_25 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_47 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_46 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_48 $$ useDefaultDataSource = false[ CD ]
Line_34 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_48 $$ useDefaultDataSource = false[ FD ]
Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_62 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_18 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_73 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_54 $$ if (eeModuleDescription != null) -->Line_55 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ CD ]
Line_25 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_42 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_35 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_37 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) [ FD ]
Line_38 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_42 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_42 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_37 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) -->Line_38 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ CD ]
Line_46 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_47 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ CD ]
Line_55 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_63 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_36 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_46 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) [ FD ]
Line_25 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_77 $$ ROOT_LOGGER.tracef("added PersistenceUnitService (phase 1 of 2) for '%s'.  PU is ready for injector action.", puServiceName)[ FD ]
Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_76 $$ builder.install()[ FD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_38 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_43 $$ useDefaultDataSource = false[ CD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_31 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_36 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_47 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_55 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_62 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_33 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_47 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_61 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_63 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ CD ]
Line_19 $$ ProxyBeanManager proxyBeanManager = null-->Line_23 $$ proxyBeanManager = new ProxyBeanManager()[ FD ]
Line_61 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_62 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_25 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_73 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_55 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_61 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_63 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_30 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_35 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_42 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_35 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_38 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ FD ]
Line_34 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_43 $$ useDefaultDataSource = false[ FD ]
Line_29 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_32 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
