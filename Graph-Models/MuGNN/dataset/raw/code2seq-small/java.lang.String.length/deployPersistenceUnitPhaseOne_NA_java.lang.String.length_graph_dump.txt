Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_12 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_14 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_19 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_25 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_57 $$ throw JpaLogger.ROOT_LOGGER.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName())[ FD ]
Line_33 $$ if (useDefaultDataSource) -->Line_34 $$ String defaultJtaDataSource = null[ CD ]
Line_19 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_21 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) [ FD ]
Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_43 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ CD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_55 $$ ROOT_LOGGER.tracef("added PersistenceUnitService (phase 1 of 2) for '%s'.  PU is ready for injector action.", puServiceName)[ FD ]
Line_22 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_25 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_23 $$ useDefaultDataSource = true-->Line_26 $$ useDefaultDataSource = false[ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_43 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_20 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_30 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_16 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_7 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) -->Line_8 $$ proxyBeanManager = new ProxyBeanManager()[ CD ]
Line_33 $$ if (useDefaultDataSource) -->Line_38 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ CD ]
Line_18 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_26 $$ useDefaultDataSource = false[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_3 $$ pu.setClassLoader(classLoader)[ CD ]
Line_22 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_26 $$ useDefaultDataSource = false[ CD ]
Line_22 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_23 $$ useDefaultDataSource = true[ CD ]
Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_38 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_20 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_29 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) [ FD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_25 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_15 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_18 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)[ FD ]
Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_20 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())[ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_16 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_3 $$ pu.setClassLoader(classLoader)[ FD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_43 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_48 $$ adaptor.addProviderDependencies(pu)[ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_54 $$ builder.install()[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_19 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_35 $$ if (eeModuleDescription != null) [ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_47 $$ CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder)[ FD ]
Line_29 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_31 $$ useDefaultDataSource = false[ CD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_15 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_30 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_43 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_5 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_12 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_53 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_30 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_53 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_33 $$ if (useDefaultDataSource) -->Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ CD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_52 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_38 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_38 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) -->Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ CD ]
Line_35 $$ if (eeModuleDescription != null) -->Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ CD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_25 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_43 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_29 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_30 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_25 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)-->Line_52 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_19 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_22 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_41 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_18 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_23 $$ useDefaultDataSource = true[ FD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_30 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_10 $$ final PhaseOnePersistenceUnitServiceImpl service = new PhaseOnePersistenceUnitServiceImpl(classLoader, pu, adaptor, deploymentUnit.getServiceName(), proxyBeanManager)-->Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_18 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_31 $$ useDefaultDataSource = false[ FD ]
Line_34 $$ String defaultJtaDataSource = null-->Line_36 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_11 $$ deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_14 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_26 $$ useDefaultDataSource = false-->Line_31 $$ useDefaultDataSource = false[ FD ]
Line_33 $$ if (useDefaultDataSource) -->Line_35 $$ if (eeModuleDescription != null) [ CD ]
Line_13 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu).append(FIRST_PHASE)-->Line_17 $$ ServiceBuilder<PhaseOnePersistenceUnitServiceImpl> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_23 $$ useDefaultDataSource = true-->Line_31 $$ useDefaultDataSource = false[ FD ]
Line_5 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_52 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_21 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) -->Line_22 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ CD ]
Line_39 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_42 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseOne(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_7 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_6 $$ ProxyBeanManager proxyBeanManager = null-->Line_8 $$ proxyBeanManager = new ProxyBeanManager()[ FD ]
