Line_7 $$ if (file.isDirectory()) -->Line_8 $$ final String directoryPath = relativePath.length() == 0 ? "" : relativePath + "/"[ CD ]
Line_3 $$ final String filePath = FileUtil.toSystemIndependentName(file.getAbsolutePath())-->Line_4 $$ if (!filter.accept(filePath) || !filter.shouldBeCopied(filePath, myContext.getProjectDescriptor())) [ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_7 $$ if (file.isDirectory()) [ CD ]
Line_7 $$ if (file.isDirectory()) -->Line_18 $$ return[ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_7 $$ if (file.isDirectory()) [ FD ]
Line_9 $$ if (!directoryPath.isEmpty()) -->Line_10 $$ addDirectoryEntry(jarOutputStream, directoryPath, writtenItemRelativePaths)[ CD ]
Line_7 $$ if (file.isDirectory()) -->Line_13 $$ if (children != null) [ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_21 $$ if (rootIndex != -1) [ CD ]
Line_8 $$ final String directoryPath = relativePath.length() == 0 ? "" : relativePath + "/"-->Line_9 $$ if (!directoryPath.isEmpty()) [ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_12 $$ final File[] children = file.listFiles()[ FD ]
Line_4 $$ if (!filter.accept(filePath) || !filter.shouldBeCopied(filePath, myContext.getProjectDescriptor())) -->Line_5 $$ return[ CD ]
Line_7 $$ if (file.isDirectory()) -->Line_9 $$ if (!directoryPath.isEmpty()) [ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_4 $$ if (!filter.accept(filePath) || !filter.shouldBeCopied(filePath, myContext.getProjectDescriptor())) [ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_20 $$ final boolean added = ZipUtil.addFileToZip(jarOutputStream, file, relativePath, writtenItemRelativePaths, null)[ CD ]
Line_3 $$ final String filePath = FileUtil.toSystemIndependentName(file.getAbsolutePath())-->Line_24 $$ packedFilePaths.add(filePath)[ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_3 $$ final String filePath = FileUtil.toSystemIndependentName(file.getAbsolutePath())[ CD ]
Line_12 $$ final File[] children = file.listFiles()-->Line_13 $$ if (children != null) [ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_20 $$ final boolean added = ZipUtil.addFileToZip(jarOutputStream, file, relativePath, writtenItemRelativePaths, null)[ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_21 $$ if (rootIndex != -1) [ FD ]
Line_21 $$ if (rootIndex != -1) -->Line_23 $$ if (added) [ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_22 $$ myOutSrcMapping.appendData(targetJarPath, rootIndex, filePath)[ FD ]
Line_7 $$ if (file.isDirectory()) -->Line_12 $$ final File[] children = file.listFiles()[ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_8 $$ final String directoryPath = relativePath.length() == 0 ? "" : relativePath + "/"[ FD ]
Line_3 $$ final String filePath = FileUtil.toSystemIndependentName(file.getAbsolutePath())-->Line_22 $$ myOutSrcMapping.appendData(targetJarPath, rootIndex, filePath)[ FD ]
Line_8 $$ final String directoryPath = relativePath.length() == 0 ? "" : relativePath + "/"-->Line_10 $$ addDirectoryEntry(jarOutputStream, directoryPath, writtenItemRelativePaths)[ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_4 $$ if (!filter.accept(filePath) || !filter.shouldBeCopied(filePath, myContext.getProjectDescriptor())) [ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_10 $$ addDirectoryEntry(jarOutputStream, directoryPath, writtenItemRelativePaths)[ FD ]
Line_21 $$ if (rootIndex != -1) -->Line_22 $$ myOutSrcMapping.appendData(targetJarPath, rootIndex, filePath)[ CD ]
Line_14 $$ for (File child : children) -->Line_15 $$ addFileOrDirRecursively(jarOutputStream, child, filter, directoryPath + child.getName(), targetJarPath, writtenItemRelativePaths, packedFilePaths, rootIndex)[ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_24 $$ packedFilePaths.add(filePath)[ FD ]
Line_23 $$ if (added) -->Line_24 $$ packedFilePaths.add(filePath)[ CD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_3 $$ final String filePath = FileUtil.toSystemIndependentName(file.getAbsolutePath())[ FD ]
Line_2 $$ private void addFileOrDirRecursively(@NotNull ZipOutputStream jarOutputStream, @NotNull File file, SourceFileFilter filter, @NotNull String relativePath, String targetJarPath, @NotNull Set<String> writtenItemRelativePaths, List<String> packedFilePaths, int rootIndex) throws IOException -->Line_15 $$ addFileOrDirRecursively(jarOutputStream, child, filter, directoryPath + child.getName(), targetJarPath, writtenItemRelativePaths, packedFilePaths, rootIndex)[ FD ]
