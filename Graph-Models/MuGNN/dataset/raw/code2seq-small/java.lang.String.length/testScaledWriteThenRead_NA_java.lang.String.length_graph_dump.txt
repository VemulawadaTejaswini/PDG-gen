Line_4 $$ Duration rm1 = new Duration()-->Line_47 $$ LOG.info(String.format("'rm1',%d,'ls1',%d", rm1.value(), ls1.value()))[ FD ]
Line_13 $$ DurationStats writeStats = new DurationStats("write")-->Line_45 $$ LOG.info(writeStats.toString())[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_25 $$ SwiftTestUtils.noteAction("Beginning ls")[ CD ]
Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())-->Line_36 $$ assertEquals(name, result)[ FD ]
Line_3 $$ Path dir = new Path("/test/manysmallfiles")-->Line_27 $$ FileStatus[] status2 = (FileStatus[]) fs.listStatus(dir)[ FD ]
Line_33 $$ Path p = new Path(dir, "part-" + name)-->Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())[ FD ]
Line_14 $$ DurationStats readStats = new DurationStats("read")-->Line_38 $$ readStats.add(d)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_8 $$ Duration ls1 = new Duration()[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_22 $$ writeStats.add(d)[ CD ]
Line_18 $$ Path p = new Path(dir, "part-" + name)-->Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())[ FD ]
Line_3 $$ Path dir = new Path("/test/manysmallfiles")-->Line_5 $$ fs.delete(dir, true)[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_32 $$ String name = String.format(format, l)[ CD ]
Line_17 $$ String name = String.format(format, l)-->Line_20 $$ SwiftTestUtils.writeTextFile(fs, p, name, false)[ FD ]
Line_19 $$ Duration d = new Duration()-->Line_37 $$ d.finished()[ FD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_32 $$ String name = String.format(format, l)[ FD ]
Line_11 $$ long count = getOperationCount()-->Line_29 $$ assertEquals("Not enough entries in the directory", count, status2.length)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_29 $$ assertEquals("Not enough entries in the directory", count, status2.length)[ CD ]
Line_32 $$ String name = String.format(format, l)-->Line_36 $$ assertEquals(name, result)[ FD ]
Line_41 $$ Duration rm2 = new Duration()-->Line_48 $$ LOG.info(String.format("'rm2',%d,'ls2',%d", rm2.value(), ls2.value()))[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_44 $$ LOG.info(String.format("'filesystem','%s'", fs.getUri()))[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_43 $$ rm2.finished()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_14 $$ DurationStats readStats = new DurationStats("read")[ CD ]
Line_17 $$ String name = String.format(format, l)-->Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_7 $$ fs.mkdirs(dir)[ CD ]
Line_34 $$ Duration d = new Duration()-->Line_38 $$ readStats.add(d)[ FD ]
Line_8 $$ Duration ls1 = new Duration()-->Line_47 $$ LOG.info(String.format("'rm1',%d,'ls1',%d", rm1.value(), ls1.value()))[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_4 $$ Duration rm1 = new Duration()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_16 $$ for (long l = 0; l < count; l++) [ CD ]
Line_18 $$ Path p = new Path(dir, "part-" + name)-->Line_20 $$ SwiftTestUtils.writeTextFile(fs, p, name, false)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_15 $$ String format = "%08d"[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_31 $$ for (long l = 0; l < count; l++) [ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_46 $$ LOG.info(readStats.toString())[ CD ]
Line_19 $$ Duration d = new Duration()-->Line_22 $$ writeStats.add(d)[ FD ]
Line_11 $$ long count = getOperationCount()-->Line_16 $$ for (long l = 0; l < count; l++) [ FD ]
Line_32 $$ String name = String.format(format, l)-->Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())[ FD ]
Line_14 $$ DurationStats readStats = new DurationStats("read")-->Line_46 $$ LOG.info(readStats.toString())[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_32 $$ String name = String.format(format, l)[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_34 $$ Duration d = new Duration()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_47 $$ LOG.info(String.format("'rm1',%d,'ls1',%d", rm1.value(), ls1.value()))[ CD ]
Line_19 $$ Duration d = new Duration()-->Line_21 $$ d.finished()[ FD ]
Line_3 $$ Path dir = new Path("/test/manysmallfiles")-->Line_7 $$ fs.mkdirs(dir)[ FD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_17 $$ String name = String.format(format, l)[ CD ]
Line_17 $$ String name = String.format(format, l)-->Line_36 $$ assertEquals(name, result)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_31 $$ for (long l = 0; l < count; l++) [ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_18 $$ Path p = new Path(dir, "part-" + name)[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_26 $$ Duration ls2 = new Duration()[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_17 $$ String name = String.format(format, l)[ FD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_21 $$ d.finished()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_30 $$ SwiftTestUtils.noteAction("Beginning read")[ CD ]
Line_3 $$ Path dir = new Path("/test/manysmallfiles")-->Line_42 $$ fs.delete(dir, true)[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_35 $$ String result = SwiftTestUtils.readBytesToString(fs, p, name.length())[ CD ]
Line_4 $$ Duration rm1 = new Duration()-->Line_6 $$ rm1.finished()[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_13 $$ DurationStats writeStats = new DurationStats("write")[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_45 $$ LOG.info(writeStats.toString())[ CD ]
Line_26 $$ Duration ls2 = new Duration()-->Line_28 $$ ls2.finished()[ FD ]
Line_26 $$ Duration ls2 = new Duration()-->Line_48 $$ LOG.info(String.format("'rm2',%d,'ls2',%d", rm2.value(), ls2.value()))[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_36 $$ assertEquals(name, result)[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_20 $$ SwiftTestUtils.writeTextFile(fs, p, name, false)[ CD ]
Line_3 $$ Path dir = new Path("/test/manysmallfiles")-->Line_9 $$ fs.listStatus(dir)[ FD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_33 $$ Path p = new Path(dir, "part-" + name)[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_19 $$ Duration d = new Duration()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_6 $$ rm1.finished()[ CD ]
Line_16 $$ for (long l = 0; l < count; l++) -->Line_23 $$ Thread.sleep(1000)[ CD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_37 $$ d.finished()[ CD ]
Line_41 $$ Duration rm2 = new Duration()-->Line_43 $$ rm2.finished()[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_10 $$ ls1.finished()[ CD ]
Line_15 $$ String format = "%08d"-->Line_17 $$ String name = String.format(format, l)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_48 $$ LOG.info(String.format("'rm2',%d,'ls2',%d", rm2.value(), ls2.value()))[ CD ]
Line_34 $$ Duration d = new Duration()-->Line_37 $$ d.finished()[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_5 $$ fs.delete(dir, true)[ CD ]
Line_31 $$ for (long l = 0; l < count; l++) -->Line_38 $$ readStats.add(d)[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_28 $$ ls2.finished()[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_11 $$ long count = getOperationCount()[ CD ]
Line_19 $$ Duration d = new Duration()-->Line_38 $$ readStats.add(d)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_3 $$ Path dir = new Path("/test/manysmallfiles")[ CD ]
Line_11 $$ long count = getOperationCount()-->Line_31 $$ for (long l = 0; l < count; l++) [ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_9 $$ fs.listStatus(dir)[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_12 $$ SwiftTestUtils.noteAction("Beginning Write of " + count + " files ")[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_42 $$ fs.delete(dir, true)[ CD ]
Line_13 $$ DurationStats writeStats = new DurationStats("write")-->Line_22 $$ writeStats.add(d)[ FD ]
Line_15 $$ String format = "%08d"-->Line_32 $$ String name = String.format(format, l)[ FD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_27 $$ FileStatus[] status2 = (FileStatus[]) fs.listStatus(dir)[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_40 $$ SwiftTestUtils.noteAction("Beginning delete")[ CD ]
Line_2 $$ public void testScaledWriteThenRead() throws Throwable -->Line_41 $$ Duration rm2 = new Duration()[ CD ]
Line_8 $$ Duration ls1 = new Duration()-->Line_10 $$ ls1.finished()[ FD ]
