Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_18 $$ if (searchInStringsAndComments && searchForInComments != null) [ FD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_21 $$ final String stringToReplace = getStringToReplace(element, newName, false, processor)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_18 $$ if (searchInStringsAndComments && searchForInComments != null) [ CD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_7 $$ Collection<PsiReference> refs = processor.findReferences(element, searchInStringsAndComments)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_7 $$ Collection<PsiReference> refs = processor.findReferences(element, searchInStringsAndComments)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_5 $$ GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject())[ CD ]
Line_18 $$ if (searchInStringsAndComments && searchForInComments != null) -->Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)[ CD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_14 $$ result.add(new MoveRenameUsageInfo(referenceElement, ref, ref.getRangeInElement().getStartOffset(), ref.getRangeInElement().getEndOffset(), element, ref.resolve() == null && !(ref instanceof PsiPolyVariantReference && ((PsiPolyVariantReference) ref).multiResolve(true).length > 0)))[ FD ]
Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) -->Line_27 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.NON_JAVA)[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_4 $$ PsiManager manager = element.getManager()[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_32 $$ final Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(searchForInComments, newName)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)[ FD ]
Line_9 $$ if (ref == null) -->Line_10 $$ LOG.error("null reference from processor " + processor)[ CD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_23 $$ TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_29 $$ final String stringToReplace = getStringToReplace(element, newName, true, processor)[ FD ]
Line_28 $$ if (stringToSearch.length() > 0) -->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_7 $$ Collection<PsiReference> refs = processor.findReferences(element, searchInStringsAndComments)[ CD ]
Line_4 $$ PsiManager manager = element.getManager()-->Line_5 $$ GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject())[ FD ]
Line_22 $$ UsageInfoFactory factory = new NonCodeUsageInfoFactory(searchForInComments, stringToReplace)-->Line_23 $$ TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory)[ FD ]
Line_18 $$ if (searchInStringsAndComments && searchForInComments != null) -->Line_20 $$ if (stringToSearch.length() > 0) [ CD ]
Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)-->Line_28 $$ if (stringToSearch.length() > 0) [ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_37 $$ return result.toArray(new UsageInfo[result.size()])[ CD ]
Line_8 $$ for (final PsiReference ref : refs) -->Line_13 $$ PsiElement referenceElement = ref.getElement()[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_21 $$ final String stringToReplace = getStringToReplace(element, newName, false, processor)[ FD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_32 $$ final Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(searchForInComments, newName)[ FD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)[ FD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_32 $$ final Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(searchForInComments, newName)[ FD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_16 $$ processor.findCollisions(element, newName, allRenames, result)[ FD ]
Line_8 $$ for (final PsiReference ref : refs) -->Line_9 $$ if (ref == null) [ FD ]
Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) -->Line_33 $$ if (additionalStringToSearch != null && additionalStringToSearch.first.length() > 0) [ CD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ FD ]
Line_33 $$ if (additionalStringToSearch != null && additionalStringToSearch.first.length() > 0) -->Line_34 $$ addTextOccurrence(searchForInComments, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second)[ CD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_27 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.NON_JAVA)[ FD ]
Line_5 $$ GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject())-->Line_34 $$ addTextOccurrence(searchForInComments, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second)[ FD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_37 $$ return result.toArray(new UsageInfo[result.size()])[ FD ]
Line_6 $$ RenamePsiElementProcessor processor = RenamePsiElementProcessor.forElement(element)-->Line_29 $$ final String stringToReplace = getStringToReplace(element, newName, true, processor)[ FD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) [ FD ]
Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) -->Line_32 $$ final Pair<String, String> additionalStringToSearch = processor.getTextOccurrenceSearchStrings(searchForInComments, newName)[ CD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)[ FD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_16 $$ processor.findCollisions(element, newName, allRenames, result)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_16 $$ processor.findCollisions(element, newName, allRenames, result)[ FD ]
Line_20 $$ if (stringToSearch.length() > 0) -->Line_21 $$ final String stringToReplace = getStringToReplace(element, newName, false, processor)[ CD ]
Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)-->Line_23 $$ TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory)[ FD ]
Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)-->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ FD ]
Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) -->Line_28 $$ if (stringToSearch.length() > 0) [ CD ]
Line_5 $$ GlobalSearchScope projectScope = GlobalSearchScope.projectScope(manager.getProject())-->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ FD ]
Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)-->Line_34 $$ addTextOccurrence(searchForInComments, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second)[ FD ]
Line_8 $$ for (final PsiReference ref : refs) -->Line_14 $$ result.add(new MoveRenameUsageInfo(referenceElement, ref, ref.getRangeInElement().getStartOffset(), ref.getRangeInElement().getEndOffset(), element, ref.resolve() == null && !(ref instanceof PsiPolyVariantReference && ((PsiPolyVariantReference) ref).multiResolve(true).length > 0)))[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_17 $$ final PsiElement searchForInComments = processor.getElementToSearchInStringsAndComments(element)[ CD ]
Line_20 $$ if (stringToSearch.length() > 0) -->Line_22 $$ UsageInfoFactory factory = new NonCodeUsageInfoFactory(searchForInComments, stringToReplace)[ CD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_23 $$ TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory)[ FD ]
Line_28 $$ if (stringToSearch.length() > 0) -->Line_29 $$ final String stringToReplace = getStringToReplace(element, newName, true, processor)[ CD ]
Line_3 $$ final List<UsageInfo> result = Collections.synchronizedList(new ArrayList<UsageInfo>())-->Line_34 $$ addTextOccurrence(searchForInComments, result, projectScope, additionalStringToSearch.first, additionalStringToSearch.second)[ FD ]
Line_19 $$ String stringToSearch = ElementDescriptionUtil.getElementDescription(searchForInComments, NonCodeSearchDescriptionLocation.STRINGS_AND_COMMENTS)-->Line_20 $$ if (stringToSearch.length() > 0) [ FD ]
Line_20 $$ if (stringToSearch.length() > 0) -->Line_23 $$ TextOccurrencesUtil.addUsagesInStringsAndComments(searchForInComments, stringToSearch, result, factory)[ CD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_16 $$ processor.findCollisions(element, newName, allRenames, result)[ CD ]
Line_21 $$ final String stringToReplace = getStringToReplace(element, newName, false, processor)-->Line_30 $$ addTextOccurrence(searchForInComments, result, projectScope, stringToSearch, stringToReplace)[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_4 $$ PsiManager manager = element.getManager()[ FD ]
Line_2 $$ public static UsageInfo[] findUsages(@NotNull final PsiElement element, final String newName, boolean searchInStringsAndComments, boolean searchForTextOccurrences, Map<? extends PsiElement, String> allRenames) -->Line_26 $$ if (searchForTextOccurrences && searchForInComments != null) [ CD ]
