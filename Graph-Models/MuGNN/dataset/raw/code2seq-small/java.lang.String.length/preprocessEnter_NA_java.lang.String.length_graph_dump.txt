Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)[ CD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_24 $$ int afterPrefix = offset + prefix.length()[ CD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_10 $$ final Commenter languageCommenter = LanguageCommenters.INSTANCE.forLanguage(language)[ CD ]
Line_15 $$ String prefix = commenter.getLineCommentPrefix()-->Line_24 $$ int afterPrefix = offset + prefix.length()[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_25 $$ if (afterPrefix < document.getTextLength() && text.charAt(afterPrefix) != ' ') [ FD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_12 $$ if (commenter != null && token.getElementType() == commenter.getLineCommentTokenType()) [ CD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()[ FD ]
Line_18 $$ if (text.charAt(caretOffset) != ' ' && !prefix.endsWith(" ")) -->Line_19 $$ prefix += " "[ CD ]
Line_24 $$ int afterPrefix = offset + prefix.length()-->Line_25 $$ if (afterPrefix < document.getTextLength() && text.charAt(afterPrefix) != ' ') [ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_21 $$ document.insertString(caretOffset, prefix)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') [ FD ]
Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")-->Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) [ FD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_22 $$ return Result.Default[ CD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_7 $$ Document document = editor.getDocument()[ CD ]
Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)-->Line_9 $$ final Language language = psiAtOffset.getLanguage()[ FD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_6 $$ ASTNode token = psiAtOffset.getNode()[ CD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_8 $$ CharSequence text = document.getText()[ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_8 $$ CharSequence text = document.getText()[ FD ]
Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")-->Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') [ FD ]
Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') -->Line_15 $$ String prefix = commenter.getLineCommentPrefix()[ CD ]
Line_24 $$ int afterPrefix = offset + prefix.length()-->Line_26 $$ document.insertString(afterPrefix, " ")[ FD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_11 $$ final CodeDocumentationAwareCommenter commenter = languageCommenter instanceof CodeDocumentationAwareCommenter ? (CodeDocumentationAwareCommenter) languageCommenter : null[ CD ]
Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()-->Line_21 $$ document.insertString(caretOffset, prefix)[ FD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_28 $$ caretOffsetRef.set(offset)[ CD ]
Line_19 $$ prefix += " "-->Line_24 $$ int afterPrefix = offset + prefix.length()[ FD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_25 $$ if (afterPrefix < document.getTextLength() && text.charAt(afterPrefix) != ' ') [ CD ]
Line_8 $$ CharSequence text = document.getText()-->Line_25 $$ if (afterPrefix < document.getTextLength() && text.charAt(afterPrefix) != ' ') [ FD ]
Line_15 $$ String prefix = commenter.getLineCommentPrefix()-->Line_21 $$ document.insertString(caretOffset, prefix)[ FD ]
Line_19 $$ prefix += " "-->Line_21 $$ document.insertString(caretOffset, prefix)[ FD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_18 $$ if (text.charAt(caretOffset) != ' ' && !prefix.endsWith(" ")) [ CD ]
Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()-->Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)[ FD ]
Line_8 $$ CharSequence text = document.getText()-->Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') [ FD ]
Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) -->Line_21 $$ document.insertString(caretOffset, prefix)[ CD ]
Line_9 $$ final Language language = psiAtOffset.getLanguage()-->Line_10 $$ final Commenter languageCommenter = LanguageCommenters.INSTANCE.forLanguage(language)[ FD ]
Line_6 $$ ASTNode token = psiAtOffset.getNode()-->Line_12 $$ if (commenter != null && token.getElementType() == commenter.getLineCommentTokenType()) [ FD ]
Line_8 $$ CharSequence text = document.getText()-->Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) [ FD ]
Line_15 $$ String prefix = commenter.getLineCommentPrefix()-->Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) [ FD ]
Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()-->Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")[ FD ]
Line_8 $$ CharSequence text = document.getText()-->Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")[ FD ]
Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()-->Line_18 $$ if (text.charAt(caretOffset) != ' ' && !prefix.endsWith(" ")) [ FD ]
Line_15 $$ String prefix = commenter.getLineCommentPrefix()-->Line_19 $$ prefix += " "[ FD ]
Line_15 $$ String prefix = commenter.getLineCommentPrefix()-->Line_18 $$ if (text.charAt(caretOffset) != ' ' && !prefix.endsWith(" ")) [ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) [ CD ]
Line_11 $$ final CodeDocumentationAwareCommenter commenter = languageCommenter instanceof CodeDocumentationAwareCommenter ? (CodeDocumentationAwareCommenter) languageCommenter : null-->Line_15 $$ String prefix = commenter.getLineCommentPrefix()[ FD ]
Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)-->Line_6 $$ ASTNode token = psiAtOffset.getNode()[ FD ]
Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) -->Line_9 $$ final Language language = psiAtOffset.getLanguage()[ CD ]
Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")-->Line_28 $$ caretOffsetRef.set(offset)[ FD ]
Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') -->Line_30 $$ return Result.Default[ CD ]
Line_4 $$ PsiElement psiAtOffset = file.findElementAt(caretOffset)-->Line_5 $$ if (psiAtOffset != null && psiAtOffset.getTextOffset() < caretOffset) [ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_7 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_28 $$ caretOffsetRef.set(offset)[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_34 $$ return Result.Continue[ CD ]
Line_25 $$ if (afterPrefix < document.getTextLength() && text.charAt(afterPrefix) != ' ') -->Line_26 $$ document.insertString(afterPrefix, " ")[ CD ]
Line_8 $$ CharSequence text = document.getText()-->Line_18 $$ if (text.charAt(caretOffset) != ' ' && !prefix.endsWith(" ")) [ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_26 $$ document.insertString(afterPrefix, " ")[ FD ]
Line_2 $$ public Result preprocessEnter(@NotNull final PsiFile file, @NotNull final Editor editor, @NotNull final Ref<Integer> caretOffsetRef, @NotNull final Ref<Integer> caretAdvance, @NotNull final DataContext dataContext, final EditorActionHandler originalHandler) -->Line_3 $$ int caretOffset = caretOffsetRef.get().intValue()[ CD ]
Line_12 $$ if (commenter != null && token.getElementType() == commenter.getLineCommentTokenType()) -->Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') [ CD ]
Line_14 $$ if (offset < document.getTextLength() && text.charAt(offset) != '\n') -->Line_17 $$ if (!StringUtil.startsWith(text, offset, prefix)) [ CD ]
Line_12 $$ if (commenter != null && token.getElementType() == commenter.getLineCommentTokenType()) -->Line_13 $$ final int offset = CharArrayUtil.shiftForward(text, caretOffset, " \t")[ CD ]
Line_11 $$ final CodeDocumentationAwareCommenter commenter = languageCommenter instanceof CodeDocumentationAwareCommenter ? (CodeDocumentationAwareCommenter) languageCommenter : null-->Line_12 $$ if (commenter != null && token.getElementType() == commenter.getLineCommentTokenType()) [ FD ]
