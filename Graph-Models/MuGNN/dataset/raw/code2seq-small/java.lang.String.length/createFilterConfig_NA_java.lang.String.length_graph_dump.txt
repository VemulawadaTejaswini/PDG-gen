Line_14 $$ String signatureSecretFile = filterConfig.get(signatureSecretFileProperty)-->Line_15 $$ if (signatureSecretFile != null) [ FD ]
Line_8 $$ if (name.startsWith(configPrefix)) -->Line_10 $$ name = name.substring(configPrefix.length())[ CD ]
Line_16 $$ Reader reader = null-->Line_19 $$ reader = new InputStreamReader(new FileInputStream(signatureSecretFile), "UTF-8")[ FD ]
Line_16 $$ Reader reader = null-->Line_34 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_39 $$ String principal = filterConfig.get(kerberosPrincipalProperty)[ CD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_46 $$ filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal)[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_11 $$ filterConfig.put(name, value)[ FD ]
Line_42 $$ principal = SecurityUtil.getServerPrincipal(principal, bindAddress)-->Line_46 $$ filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal)[ FD ]
Line_20 $$ int c = reader.read()-->Line_23 $$ c = reader.read()[ FD ]
Line_18 $$ StringBuilder secret = new StringBuilder()-->Line_25 $$ filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString())[ FD ]
Line_19 $$ reader = new InputStreamReader(new FileInputStream(signatureSecretFile), "UTF-8")-->Line_20 $$ int c = reader.read()[ FD ]
Line_7 $$ String name = entry.getKey()-->Line_11 $$ filterConfig.put(name, value)[ FD ]
Line_9 $$ String value = conf.get(name)-->Line_11 $$ filterConfig.put(name, value)[ FD ]
Line_21 $$ while (c > -1) -->Line_23 $$ c = reader.read()[ CD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_40 $$ if (principal != null) [ CD ]
Line_18 $$ StringBuilder secret = new StringBuilder()-->Line_22 $$ secret.append((char) c)[ FD ]
Line_40 $$ if (principal != null) -->Line_46 $$ filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal)[ CD ]
Line_6 $$ for (Map.Entry<String, String> entry : conf) -->Line_7 $$ String name = entry.getKey()[ FD ]
Line_20 $$ int c = reader.read()-->Line_21 $$ while (c > -1) [ FD ]
Line_7 $$ String name = entry.getKey()-->Line_10 $$ name = name.substring(configPrefix.length())[ FD ]
Line_8 $$ if (name.startsWith(configPrefix)) -->Line_9 $$ String value = conf.get(name)[ CD ]
Line_19 $$ reader = new InputStreamReader(new FileInputStream(signatureSecretFile), "UTF-8")-->Line_34 $$ IOUtils.closeQuietly(reader)[ FD ]
Line_7 $$ String name = entry.getKey()-->Line_9 $$ String value = conf.get(name)[ FD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()[ CD ]
Line_8 $$ if (name.startsWith(configPrefix)) -->Line_11 $$ filterConfig.put(name, value)[ CD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_25 $$ filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET, secret.toString())[ FD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_48 $$ return filterConfig[ CD ]
Line_23 $$ c = reader.read()-->Line_21 $$ while (c > -1) [ FD ]
Line_19 $$ reader = new InputStreamReader(new FileInputStream(signatureSecretFile), "UTF-8")-->Line_23 $$ c = reader.read()[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_14 $$ String signatureSecretFile = filterConfig.get(signatureSecretFileProperty)[ FD ]
Line_3 $$ Map<String, String> filterConfig = new HashMap<String, String>()-->Line_39 $$ String principal = filterConfig.get(kerberosPrincipalProperty)[ FD ]
Line_39 $$ String principal = filterConfig.get(kerberosPrincipalProperty)-->Line_46 $$ filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL, principal)[ FD ]
Line_15 $$ if (signatureSecretFile != null) -->Line_16 $$ Reader reader = null[ CD ]
Line_10 $$ name = name.substring(configPrefix.length())-->Line_11 $$ filterConfig.put(name, value)[ FD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_15 $$ if (signatureSecretFile != null) [ CD ]
Line_21 $$ while (c > -1) -->Line_22 $$ secret.append((char) c)[ CD ]
Line_39 $$ String principal = filterConfig.get(kerberosPrincipalProperty)-->Line_40 $$ if (principal != null) [ FD ]
Line_7 $$ String name = entry.getKey()-->Line_8 $$ if (name.startsWith(configPrefix)) [ FD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_14 $$ String signatureSecretFile = filterConfig.get(signatureSecretFileProperty)[ CD ]
Line_2 $$ protected Map<String, String> createFilterConfig(Configuration conf) -->Line_9 $$ String value = conf.get(name)[ FD ]
Line_16 $$ Reader reader = null-->Line_23 $$ c = reader.read()[ FD ]
Line_39 $$ String principal = filterConfig.get(kerberosPrincipalProperty)-->Line_42 $$ principal = SecurityUtil.getServerPrincipal(principal, bindAddress)[ FD ]
Line_16 $$ Reader reader = null-->Line_20 $$ int c = reader.read()[ FD ]
