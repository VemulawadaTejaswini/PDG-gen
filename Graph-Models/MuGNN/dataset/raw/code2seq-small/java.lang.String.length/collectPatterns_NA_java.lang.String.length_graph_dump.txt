Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_3 $$ final TestDiscoveryIndex discoveryIndex = TestDiscoveryIndex.getInstance(project)[ FD ]
Line_6 $$ for (String pattern : ContainerUtil.filter(testsByMethodName, new Condition<String>() -->Line_11 $$ patterns.add(pattern.substring(frameworkId.length()).replace('-', ','))[ FD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_4 $$ final Collection<String> testsByMethodName = discoveryIndex.getTestsByMethodName(classFQName, methodName)[ FD ]
Line_6 $$ for (String pattern : ContainerUtil.filter(testsByMethodName, new Condition<String>() -->Line_8 $$ return s.startsWith(frameworkId)[ FD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_8 $$ return s.startsWith(frameworkId)[ FD ]
Line_4 $$ final Collection<String> testsByMethodName = discoveryIndex.getTestsByMethodName(classFQName, methodName)-->Line_6 $$ for (String pattern : ContainerUtil.filter(testsByMethodName, new Condition<String>() [ FD ]
Line_3 $$ final TestDiscoveryIndex discoveryIndex = TestDiscoveryIndex.getInstance(project)-->Line_4 $$ final Collection<String> testsByMethodName = discoveryIndex.getTestsByMethodName(classFQName, methodName)[ FD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_3 $$ final TestDiscoveryIndex discoveryIndex = TestDiscoveryIndex.getInstance(project)[ CD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_4 $$ final Collection<String> testsByMethodName = discoveryIndex.getTestsByMethodName(classFQName, methodName)[ CD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_5 $$ if (testsByMethodName != null) [ CD ]
Line_6 $$ for (String pattern : ContainerUtil.filter(testsByMethodName, new Condition<String>() -->Line_8 $$ return s.startsWith(frameworkId)[ CD ]
Line_2 $$ private static void collectPatterns(final Project project, final Set<String> patterns, final String classFQName, final String methodName, final String frameworkId) throws IOException -->Line_11 $$ patterns.add(pattern.substring(frameworkId.length()).replace('-', ','))[ FD ]
Line_4 $$ final Collection<String> testsByMethodName = discoveryIndex.getTestsByMethodName(classFQName, methodName)-->Line_5 $$ if (testsByMethodName != null) [ FD ]
