Line_12 $$ newType = method.getReturnType()-->Line_15 $$ newType = null[ FD ]
Line_15 $$ newType = null-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_14 $$ if (newReturnType.length() == 0) -->Line_15 $$ newType = null[ CD ]
Line_7 $$ PsiType newType-->Line_10 $$ newType = null[ FD ]
Line_8 $$ if (newReturnType == null) -->Line_14 $$ if (newReturnType.length() == 0) [ CD ]
Line_5 $$ GrMethod method = (GrMethod) targetElement-->Line_9 $$ if (method.getReturnTypeElement() == null) [ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(getProject()).getElementFactory()[ CD ]
Line_5 $$ GrMethod method = (GrMethod) targetElement-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_12 $$ newType = method.getReturnType()-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ CD ]
Line_8 $$ if (newReturnType == null) -->Line_9 $$ if (method.getReturnTypeElement() == null) [ CD ]
Line_9 $$ if (method.getReturnTypeElement() == null) -->Line_12 $$ newType = method.getReturnType()[ CD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_5 $$ GrMethod method = (GrMethod) targetElement-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_8 $$ if (newReturnType == null) [ CD ]
Line_10 $$ newType = null-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_9 $$ if (method.getReturnTypeElement() == null) -->Line_10 $$ newType = null[ CD ]
Line_7 $$ PsiType newType-->Line_15 $$ newType = null[ FD ]
Line_7 $$ PsiType newType-->Line_12 $$ newType = method.getReturnType()[ FD ]
Line_12 $$ newType = method.getReturnType()-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_14 $$ if (newReturnType.length() == 0) [ FD ]
Line_7 $$ PsiType newType-->Line_19 $$ GrChangeInfoImpl changeInfo = new GrChangeInfoImpl(method, newVisibility, newType != null ? CanonicalTypes.createTypeWrapper(newType) : null, newName != null ? newName : method.getName(), Arrays.asList(genParams.genParams(method)), genExceptions.genExceptions(method), generateDelegate)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_3 $$ final PsiElement targetElement = new GrChangeSignatureHandler().findTargetMember(myFixture.getFile(), myFixture.getEditor())[ CD ]
Line_5 $$ GrMethod method = (GrMethod) targetElement-->Line_12 $$ newType = method.getReturnType()[ FD ]
Line_15 $$ newType = null-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_10 $$ newType = null-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_5 $$ GrMethod method = (GrMethod) targetElement[ CD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_20 $$ new GrChangeSignatureProcessor(getProject(), changeInfo).run()[ CD ]
Line_10 $$ newType = null-->Line_15 $$ newType = null[ FD ]
Line_6 $$ final PsiElementFactory factory = JavaPsiFacade.getInstance(getProject()).getElementFactory()-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_7 $$ PsiType newType[ CD ]
Line_10 $$ newType = null-->Line_12 $$ newType = method.getReturnType()[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_7 $$ PsiType newType-->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ FD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_8 $$ if (newReturnType == null) [ FD ]
Line_14 $$ if (newReturnType.length() == 0) -->Line_17 $$ newType = factory.createTypeFromText(newReturnType, method)[ CD ]
Line_2 $$ void executeRefactoring(@Nullable @PsiModifier.ModifierConstant String newVisibility, @Nullable String newName, @Nullable String newReturnType, @NotNull GenParams genParams, @NotNull GenExceptions genExceptions, boolean generateDelegate) -->Line_4 $$ assertTrue("<caret> is not on method name", targetElement instanceof GrMethod)[ CD ]
