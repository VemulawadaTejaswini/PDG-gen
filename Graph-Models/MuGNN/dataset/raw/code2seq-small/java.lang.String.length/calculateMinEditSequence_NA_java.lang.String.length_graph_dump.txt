Line_22 $$ if (i + 1 == j) -->Line_23 $$ String suffix = myShreds.get(i).getSuffix()[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_33 $$ String commonPrefix = StringUtil.commonPrefix(rangeText1, newText)[ FD ]
Line_33 $$ String commonPrefix = StringUtil.commonPrefix(rangeText1, newText)-->Line_34 $$ result[i] = commonPrefix[ FD ]
Line_9 $$ if (StringUtil.startsWith(newText, rangeText1)) -->Line_13 $$ return[ CD ]
Line_47 $$ m = newText.lastIndexOf(middleText)-->Line_51 $$ calculateMinEditSequence(hostText, newText.substring(0, m), result, i, j - 2)[ FD ]
Line_4 $$ String rangeText1 = getRangeText(hostText, i)-->Line_6 $$ result[i] = rangeText1.equals(newText) ? null : newText[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_29 $$ result[i] = newText.substring(0, sep + suffix.length())[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_6 $$ result[i] = rangeText1.equals(newText) ? null : newText[ FD ]
Line_26 $$ if (!separator.isEmpty()) -->Line_27 $$ int sep = newText.indexOf(separator)[ CD ]
Line_46 $$ middleText = getRangeText(hostText, j - 1)-->Line_49 $$ result[j] = newText.substring(m + middleText.length())[ FD ]
Line_22 $$ if (i + 1 == j) -->Line_24 $$ String prefix = myShreds.get(j).getPrefix()[ CD ]
Line_40 $$ if (m != -1) -->Line_44 $$ return[ CD ]
Line_22 $$ if (i + 1 == j) -->Line_25 $$ String separator = suffix + prefix[ CD ]
Line_26 $$ if (!separator.isEmpty()) -->Line_29 $$ result[i] = newText.substring(0, sep + suffix.length())[ CD ]
Line_22 $$ if (i + 1 == j) -->Line_36 $$ return[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_22 $$ if (i + 1 == j) [ FD ]
Line_48 $$ if (m != -1) -->Line_51 $$ calculateMinEditSequence(hostText, newText.substring(0, m), result, i, j - 2)[ CD ]
Line_26 $$ if (!separator.isEmpty()) -->Line_31 $$ return[ CD ]
Line_22 $$ if (i + 1 == j) -->Line_26 $$ if (!separator.isEmpty()) [ CD ]
Line_22 $$ if (i + 1 == j) -->Line_35 $$ result[j] = newText.substring(commonPrefix.length())[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_9 $$ if (StringUtil.startsWith(newText, rangeText1)) [ FD ]
Line_15 $$ String rangeText2 = getRangeText(hostText, j)-->Line_19 $$ calculateMinEditSequence(hostText, newText.substring(0, newText.length() - rangeText2.length()), result, i, j - 1)[ FD ]
Line_38 $$ String middleText = getRangeText(hostText, i + 1)-->Line_43 $$ calculateMinEditSequence(hostText, newText.substring(m + middleText.length(), newText.length()), result, i + 2, j)[ FD ]
Line_39 $$ int m = newText.indexOf(middleText)-->Line_48 $$ if (m != -1) [ FD ]
Line_24 $$ String prefix = myShreds.get(j).getPrefix()-->Line_30 $$ result[j] = newText.substring(sep + suffix.length() + prefix.length(), newText.length())[ FD ]
Line_38 $$ String middleText = getRangeText(hostText, i + 1)-->Line_46 $$ middleText = getRangeText(hostText, j - 1)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_15 $$ String rangeText2 = getRangeText(hostText, j)[ FD ]
Line_4 $$ String rangeText1 = getRangeText(hostText, i)-->Line_12 $$ calculateMinEditSequence(hostText, newText.substring(rangeText1.length()), result, i + 1, j)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_27 $$ int sep = newText.indexOf(separator)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_49 $$ result[j] = newText.substring(m + middleText.length())[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_47 $$ m = newText.lastIndexOf(middleText)[ FD ]
Line_38 $$ String middleText = getRangeText(hostText, i + 1)-->Line_39 $$ int m = newText.indexOf(middleText)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_4 $$ String rangeText1 = getRangeText(hostText, i)[ FD ]
Line_25 $$ String separator = suffix + prefix-->Line_27 $$ int sep = newText.indexOf(separator)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_12 $$ calculateMinEditSequence(hostText, newText.substring(rangeText1.length()), result, i + 1, j)[ FD ]
Line_5 $$ if (i == j) -->Line_6 $$ result[i] = rangeText1.equals(newText) ? null : newText[ CD ]
Line_48 $$ if (m != -1) -->Line_50 $$ result[j - 1] = null[ CD ]
Line_46 $$ middleText = getRangeText(hostText, j - 1)-->Line_47 $$ m = newText.lastIndexOf(middleText)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_41 $$ result[i] = newText.substring(0, m)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_24 $$ String prefix = myShreds.get(j).getPrefix()[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_38 $$ String middleText = getRangeText(hostText, i + 1)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_46 $$ middleText = getRangeText(hostText, j - 1)[ FD ]
Line_16 $$ if (StringUtil.endsWith(newText, rangeText2)) -->Line_19 $$ calculateMinEditSequence(hostText, newText.substring(0, newText.length() - rangeText2.length()), result, i, j - 1)[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_30 $$ result[j] = newText.substring(sep + suffix.length() + prefix.length(), newText.length())[ FD ]
Line_40 $$ if (m != -1) -->Line_42 $$ result[i + 1] = null[ CD ]
Line_40 $$ if (m != -1) -->Line_41 $$ result[i] = newText.substring(0, m)[ CD ]
Line_15 $$ String rangeText2 = getRangeText(hostText, j)-->Line_16 $$ if (StringUtil.endsWith(newText, rangeText2)) [ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_16 $$ if (StringUtil.endsWith(newText, rangeText2)) [ FD ]
Line_22 $$ if (i + 1 == j) -->Line_33 $$ String commonPrefix = StringUtil.commonPrefix(rangeText1, newText)[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_39 $$ int m = newText.indexOf(middleText)[ FD ]
Line_38 $$ String middleText = getRangeText(hostText, i + 1)-->Line_47 $$ m = newText.lastIndexOf(middleText)[ FD ]
Line_23 $$ String suffix = myShreds.get(i).getSuffix()-->Line_29 $$ result[i] = newText.substring(0, sep + suffix.length())[ FD ]
Line_48 $$ if (m != -1) -->Line_52 $$ return[ CD ]
Line_22 $$ if (i + 1 == j) -->Line_34 $$ result[i] = commonPrefix[ CD ]
Line_39 $$ int m = newText.indexOf(middleText)-->Line_40 $$ if (m != -1) [ FD ]
Line_5 $$ if (i == j) -->Line_7 $$ return[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_35 $$ result[j] = newText.substring(commonPrefix.length())[ FD ]
Line_47 $$ m = newText.lastIndexOf(middleText)-->Line_48 $$ if (m != -1) [ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_19 $$ calculateMinEditSequence(hostText, newText.substring(0, newText.length() - rangeText2.length()), result, i, j - 1)[ FD ]
Line_39 $$ int m = newText.indexOf(middleText)-->Line_51 $$ calculateMinEditSequence(hostText, newText.substring(0, m), result, i, j - 2)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_43 $$ calculateMinEditSequence(hostText, newText.substring(m + middleText.length(), newText.length()), result, i + 2, j)[ FD ]
Line_9 $$ if (StringUtil.startsWith(newText, rangeText1)) -->Line_12 $$ calculateMinEditSequence(hostText, newText.substring(rangeText1.length()), result, i + 1, j)[ CD ]
Line_4 $$ String rangeText1 = getRangeText(hostText, i)-->Line_9 $$ if (StringUtil.startsWith(newText, rangeText1)) [ FD ]
Line_40 $$ if (m != -1) -->Line_43 $$ calculateMinEditSequence(hostText, newText.substring(m + middleText.length(), newText.length()), result, i + 2, j)[ CD ]
Line_16 $$ if (StringUtil.endsWith(newText, rangeText2)) -->Line_20 $$ return[ CD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_5 $$ if (i == j) [ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_56 $$ calculateMinEditSequence(hostText, newText, result, i + 1, j - 1)[ FD ]
Line_48 $$ if (m != -1) -->Line_49 $$ result[j] = newText.substring(m + middleText.length())[ CD ]
Line_26 $$ if (!separator.isEmpty()) -->Line_30 $$ result[j] = newText.substring(sep + suffix.length() + prefix.length(), newText.length())[ CD ]
Line_23 $$ String suffix = myShreds.get(i).getSuffix()-->Line_30 $$ result[j] = newText.substring(sep + suffix.length() + prefix.length(), newText.length())[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_23 $$ String suffix = myShreds.get(i).getSuffix()[ FD ]
Line_25 $$ String separator = suffix + prefix-->Line_26 $$ if (!separator.isEmpty()) [ FD ]
Line_39 $$ int m = newText.indexOf(middleText)-->Line_47 $$ m = newText.lastIndexOf(middleText)[ FD ]
Line_2 $$ private void calculateMinEditSequence(String hostText, String newText, String[] result, int i, int j) -->Line_51 $$ calculateMinEditSequence(hostText, newText.substring(0, m), result, i, j - 2)[ FD ]
Line_33 $$ String commonPrefix = StringUtil.commonPrefix(rangeText1, newText)-->Line_35 $$ result[j] = newText.substring(commonPrefix.length())[ FD ]
Line_4 $$ String rangeText1 = getRangeText(hostText, i)-->Line_33 $$ String commonPrefix = StringUtil.commonPrefix(rangeText1, newText)[ FD ]
Line_38 $$ String middleText = getRangeText(hostText, i + 1)-->Line_49 $$ result[j] = newText.substring(m + middleText.length())[ FD ]
Line_39 $$ int m = newText.indexOf(middleText)-->Line_41 $$ result[i] = newText.substring(0, m)[ FD ]
