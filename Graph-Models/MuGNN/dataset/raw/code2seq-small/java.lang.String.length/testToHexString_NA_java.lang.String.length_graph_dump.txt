Line_8 $$ String expectedAsString = expected.toString(16)-->Line_9 $$ String expectedHex = zeros.substring(expectedAsString.length()) + expectedAsString[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_5 $$ byte[] bytes = expected.toByteArray()[ CD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_12 $$ assertEquals(expected, actual)[ CD ]
Line_11 $$ BigInteger actual = new BigInteger(hex, 16)-->Line_12 $$ assertEquals(expected, actual)[ FD ]
Line_4 $$ BigInteger expected = BigInteger.probablePrime(256, random())-->Line_5 $$ byte[] bytes = expected.toByteArray()[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_9 $$ String expectedHex = zeros.substring(expectedAsString.length()) + expectedAsString[ CD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_7 $$ String zeros = new String(new char[2 * bytes.length]).replace("\0", "0")[ CD ]
Line_4 $$ BigInteger expected = BigInteger.probablePrime(256, random())-->Line_12 $$ assertEquals(expected, actual)[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_8 $$ String expectedAsString = expected.toString(16)[ CD ]
Line_4 $$ BigInteger expected = BigInteger.probablePrime(256, random())-->Line_8 $$ String expectedAsString = expected.toString(16)[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_11 $$ BigInteger actual = new BigInteger(hex, 16)[ CD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_4 $$ BigInteger expected = BigInteger.probablePrime(256, random())[ CD ]
Line_7 $$ String zeros = new String(new char[2 * bytes.length]).replace("\0", "0")-->Line_9 $$ String expectedHex = zeros.substring(expectedAsString.length()) + expectedAsString[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_6 $$ String hex = MessageDigests.toHexString(bytes)[ CD ]
Line_5 $$ byte[] bytes = expected.toByteArray()-->Line_6 $$ String hex = MessageDigests.toHexString(bytes)[ FD ]
Line_9 $$ String expectedHex = zeros.substring(expectedAsString.length()) + expectedAsString-->Line_10 $$ assertEquals(expectedHex, hex)[ FD ]
Line_2 $$ public void testToHexString() throws Exception -->Line_3 $$ for (int i = 0; i < 1024; i++) [ CD ]
Line_6 $$ String hex = MessageDigests.toHexString(bytes)-->Line_10 $$ assertEquals(expectedHex, hex)[ FD ]
Line_3 $$ for (int i = 0; i < 1024; i++) -->Line_10 $$ assertEquals(expectedHex, hex)[ CD ]
