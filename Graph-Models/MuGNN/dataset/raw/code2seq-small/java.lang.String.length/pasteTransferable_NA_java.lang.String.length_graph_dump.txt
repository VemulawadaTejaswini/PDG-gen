Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_34 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_3 $$ String text = EditorModificationUtil.getStringContent(content)[ CD ]
Line_12 $$ for (int i = 0; i < pastedLineCount - 1; i++) -->Line_14 $$ if (caret == null) [ CD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) [ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() [ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_40 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, text)[ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_40 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, text)[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_18 $$ caretCount = editor.getCaretModel().getCaretCount()[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_10 $$ EditorModificationUtil.deleteSelectedText(editor)[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) [ CD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_42 $$ return new TextRange[] [ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_7 $$ int caretCount = editor.getCaretModel().getCaretCount()[ FD ]
Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() -->Line_33 $$ ranges[index[0]++] = new TextRange(caretOffset, caretOffset + normalizedText.length())[ CD ]
Line_20 $$ CaretStateTransferableData caretData = null-->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ FD ]
Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) -->Line_10 $$ EditorModificationUtil.deleteSelectedText(editor)[ CD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_28 $$ final int[] index = [ CD ]
Line_3 $$ String text = EditorModificationUtil.getStringContent(content)-->Line_40 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, text)[ FD ]
Line_22 $$ caretData = content.isDataFlavorSupported(CaretStateTransferableData.FLAVOR) ? (CaretStateTransferableData) content.getTransferData(CaretStateTransferableData.FLAVOR) : null-->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ FD ]
Line_3 $$ String text = EditorModificationUtil.getStringContent(content)-->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ FD ]
Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() -->Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())[ CD ]
Line_11 $$ Caret caret = editor.getCaretModel().getPrimaryCaret()-->Line_14 $$ if (caret == null) [ FD ]
Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())-->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_7 $$ int caretCount = editor.getCaretModel().getCaretCount()[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) [ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_26 $$ final TextRange[] ranges = new TextRange[caretCount][ CD ]
Line_13 $$ caret = caret.clone(false)-->Line_32 $$ int caretOffset = caret.getOffset()[ FD ]
Line_11 $$ Caret caret = editor.getCaretModel().getPrimaryCaret()-->Line_32 $$ int caretOffset = caret.getOffset()[ FD ]
Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) -->Line_11 $$ Caret caret = editor.getCaretModel().getPrimaryCaret()[ CD ]
Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())-->Line_33 $$ ranges[index[0]++] = new TextRange(caretOffset, caretOffset + normalizedText.length())[ FD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_3 $$ String text = EditorModificationUtil.getStringContent(content)[ FD ]
Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() -->Line_34 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_22 $$ caretData = content.isDataFlavorSupported(CaretStateTransferableData.FLAVOR) ? (CaretStateTransferableData) content.getTransferData(CaretStateTransferableData.FLAVOR) : null[ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_37 $$ return ranges[ CD ]
Line_7 $$ int caretCount = editor.getCaretModel().getCaretCount()-->Line_18 $$ caretCount = editor.getCaretModel().getCaretCount()[ FD ]
Line_7 $$ int caretCount = editor.getCaretModel().getCaretCount()-->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ FD ]
Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())-->Line_34 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ FD ]
Line_13 $$ caret = caret.clone(false)-->Line_14 $$ if (caret == null) [ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_41 $$ EditorModificationUtil.insertStringAtCaret(editor, normalizedText, false, true)[ CD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_39 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_11 $$ Caret caret = editor.getCaretModel().getPrimaryCaret()-->Line_13 $$ caret = caret.clone(false)[ FD ]
Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()-->Line_31 $$ String normalizedText = TextBlockTransferable.convertLineSeparators(editor, segments.next())[ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_20 $$ CaretStateTransferableData caretData = null[ CD ]
Line_18 $$ caretCount = editor.getCaretModel().getCaretCount()-->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ FD ]
Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() -->Line_32 $$ int caretOffset = caret.getOffset()[ FD ]
Line_20 $$ CaretStateTransferableData caretData = null-->Line_22 $$ caretData = content.isDataFlavorSupported(CaretStateTransferableData.FLAVOR) ? (CaretStateTransferableData) content.getTransferData(CaretStateTransferableData.FLAVOR) : null[ FD ]
Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) -->Line_12 $$ for (int i = 0; i < pastedLineCount - 1; i++) [ CD ]
Line_12 $$ for (int i = 0; i < pastedLineCount - 1; i++) -->Line_13 $$ caret = caret.clone(false)[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_4 $$ if (text == null)[ CD ]
Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) -->Line_9 $$ int pastedLineCount = LineTokenizer.calcLineCount(text, true)[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_11 $$ Caret caret = editor.getCaretModel().getPrimaryCaret()[ FD ]
Line_8 $$ if (caretCount == 1 && editor.isColumnMode()) -->Line_18 $$ caretCount = editor.getCaretModel().getCaretCount()[ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_39 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_3 $$ String text = EditorModificationUtil.getStringContent(content)-->Line_42 $$ return new TextRange[] [ FD ]
Line_3 $$ String text = EditorModificationUtil.getStringContent(content)-->Line_9 $$ int pastedLineCount = LineTokenizer.calcLineCount(text, true)[ FD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_27 $$ final Iterator<String> segments = new ClipboardTextPerCaretSplitter().split(text, caretData, caretCount).iterator()[ CD ]
Line_4 $$ if (text == null)-->Line_5 $$ return null[ CD ]
Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) -->Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() [ CD ]
Line_2 $$ public TextRange[] pasteTransferable(@NotNull final Editor editor, @NotNull Transferable content) -->Line_6 $$ if (editor.getCaretModel().supportsMultipleCarets()) [ FD ]
Line_3 $$ String text = EditorModificationUtil.getStringContent(content)-->Line_4 $$ if (text == null)[ FD ]
Line_29 $$ editor.getCaretModel().runForEachCaret(new CaretAction() -->Line_32 $$ int caretOffset = caret.getOffset()[ CD ]
