Line_6 $$ String parentPath = myParent.getPath()-->Line_8 $$ answer.append(parentPath)[ FD ]
Line_9 $$ if (answer.charAt(answer.length() - 1) != '/') -->Line_10 $$ answer.append('/')[ CD ]
Line_2 $$ public String getPath() -->Line_6 $$ String parentPath = myParent.getPath()[ CD ]
Line_2 $$ public String getPath() -->Line_8 $$ answer.append(parentPath)[ CD ]
Line_6 $$ String parentPath = myParent.getPath()-->Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())[ FD ]
Line_2 $$ public String getPath() -->Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())[ CD ]
Line_2 $$ public String getPath() -->Line_3 $$ if (myParent == null) [ CD ]
Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())-->Line_12 $$ answer.append(myName)[ FD ]
Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())-->Line_13 $$ return answer.toString()[ FD ]
Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())-->Line_9 $$ if (answer.charAt(answer.length() - 1) != '/') [ FD ]
Line_2 $$ public String getPath() -->Line_13 $$ return answer.toString()[ CD ]
Line_2 $$ public String getPath() -->Line_12 $$ answer.append(myName)[ CD ]
Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())-->Line_8 $$ answer.append(parentPath)[ FD ]
Line_7 $$ StringBuilder answer = new StringBuilder(parentPath.length() + 1 + myName.length())-->Line_10 $$ answer.append('/')[ FD ]
Line_2 $$ public String getPath() -->Line_9 $$ if (answer.charAt(answer.length() - 1) != '/') [ CD ]
Line_3 $$ if (myParent == null) -->Line_4 $$ return FileUtil.toSystemIndependentName(myHandler.getFile().getPath()) + "!/"[ CD ]
