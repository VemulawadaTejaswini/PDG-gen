Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) -->Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) [ CD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) -->Line_70 $$ coerce = parser.booleanValue()[ CD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_24 $$ if (token == XContentParser.Token.START_OBJECT) [ FD ]
Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())-->Line_79 $$ if (fieldName == null) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) [ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_27 $$ fieldName = currentFieldName[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_37 $$ point.resetFromGeoHash(parser.text())[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_61 $$ point.resetFromGeoHash(parser.text())[ FD ]
Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) -->Line_64 $$ queryName = parser.text()[ CD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_106 $$ qb.queryName(queryName)[ FD ]
Line_46 $$ vDistance = parser.text()-->Line_48 $$ vDistance = parser.numberValue()[ FD ]
Line_21 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_24 $$ if (token == XContentParser.Token.START_OBJECT) [ CD ]
Line_46 $$ vDistance = parser.text()-->Line_88 $$ if (vDistance == null) [ FD ]
Line_70 $$ coerce = parser.booleanValue()-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_4 $$ XContentParser.Token token-->Line_18 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_51 $$ unit = DistanceUnit.fromString(parser.text())[ FD ]
Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) -->Line_55 $$ point.resetLat(parser.doubleValue())[ CD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) -->Line_71 $$ if (coerce == true) [ CD ]
Line_64 $$ queryName = parser.text()-->Line_106 $$ qb.queryName(queryName)[ FD ]
Line_4 $$ XContentParser.Token token-->Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_20 $$ if (parseContext.isDeprecatedSetting(currentFieldName)) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_70 $$ coerce = parser.booleanValue()[ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_33 $$ point.resetLat(parser.doubleValue())[ FD ]
Line_72 $$ ignoreMalformed = true-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_10 $$ Object vDistance = null[ CD ]
Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) -->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ CD ]
Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_22 $$ fieldName = currentFieldName[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ FD ]
Line_13 $$ String optimizeBbox = GeoDistanceQueryBuilder.DEFAULT_OPTIMIZE_BBOX-->Line_68 $$ optimizeBbox = parser.textOrNull()[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) [ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())-->Line_79 $$ if (fieldName == null) [ FD ]
Line_48 $$ vDistance = parser.numberValue()-->Line_92 $$ if (vDistance instanceof Number) [ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_103 $$ qb.optimizeBbox(optimizeBbox)[ FD ]
Line_7 $$ String currentFieldName = null-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_58 $$ point.resetLon(parser.doubleValue())[ FD ]
Line_12 $$ GeoDistance geoDistance = GeoDistanceQueryBuilder.DEFAULT_GEO_DISTANCE-->Line_104 $$ qb.geoDistance(geoDistance)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_14 $$ boolean coerce = GeoValidationMethod.DEFAULT_LENIENT_PARSING[ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_103 $$ qb.optimizeBbox(optimizeBbox)[ CD ]
Line_32 $$ if (currentName.equals(GeoPointFieldMapper.Names.LAT)) -->Line_33 $$ point.resetLat(parser.doubleValue())[ CD ]
Line_71 $$ if (coerce == true) -->Line_72 $$ ignoreMalformed = true[ CD ]
Line_48 $$ vDistance = parser.numberValue()-->Line_88 $$ if (vDistance == null) [ FD ]
Line_75 $$ ignoreMalformed = parser.booleanValue()-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_5 $$ float boost = AbstractQueryBuilder.DEFAULT_BOOST-->Line_66 $$ boost = parser.floatValue()[ FD ]
Line_27 $$ fieldName = currentFieldName-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) [ FD ]
Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_46 $$ vDistance = parser.text()[ CD ]
Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_30 $$ currentName = parser.currentName()[ CD ]
Line_77 $$ validationMethod = GeoValidationMethod.fromString(parser.text())-->Line_98 $$ if (validationMethod != null) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_9 $$ String fieldName = null[ CD ]
Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) -->Line_51 $$ unit = DistanceUnit.fromString(parser.text())[ CD ]
Line_4 $$ XContentParser.Token token-->Line_31 $$ if (token.isValue()) [ FD ]
Line_32 $$ if (currentName.equals(GeoPointFieldMapper.Names.LAT)) -->Line_34 $$ if (currentName.equals(GeoPointFieldMapper.Names.LON)) [ CD ]
Line_15 $$ boolean ignoreMalformed = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_25 $$ String currentName = parser.currentName()-->Line_32 $$ if (currentName.equals(GeoPointFieldMapper.Names.LAT)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) [ FD ]
Line_22 $$ fieldName = currentFieldName-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) -->Line_61 $$ point.resetFromGeoHash(parser.text())[ CD ]
Line_70 $$ coerce = parser.booleanValue()-->Line_71 $$ if (coerce == true) [ FD ]
Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) -->Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) [ CD ]
Line_98 $$ if (validationMethod != null) -->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ CD ]
Line_21 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_23 $$ GeoUtils.parseGeoPoint(parser, point)[ CD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_95 $$ qb.distance((String) vDistance, unit)[ FD ]
Line_9 $$ String fieldName = null-->Line_22 $$ fieldName = currentFieldName[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_30 $$ currentName = parser.currentName()[ FD ]
Line_51 $$ unit = DistanceUnit.fromString(parser.text())-->Line_95 $$ qb.distance((String) vDistance, unit)[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_75 $$ ignoreMalformed = parser.booleanValue()[ FD ]
Line_9 $$ String fieldName = null-->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) [ FD ]
Line_16 $$ GeoValidationMethod validationMethod = null-->Line_77 $$ validationMethod = GeoValidationMethod.fromString(parser.text())[ FD ]
Line_7 $$ String currentFieldName = null-->Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_22 $$ fieldName = currentFieldName[ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_93 $$ qb.distance(((Number) vDistance).doubleValue(), unit)[ FD ]
Line_11 $$ DistanceUnit unit = GeoDistanceQueryBuilder.DEFAULT_DISTANCE_UNIT-->Line_95 $$ qb.distance((String) vDistance, unit)[ FD ]
Line_36 $$ if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) -->Line_37 $$ point.resetFromGeoHash(parser.text())[ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_55 $$ point.resetLat(parser.doubleValue())[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_23 $$ GeoUtils.parseGeoPoint(parser, point)[ FD ]
Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) -->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_98 $$ if (validationMethod != null) [ CD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ FD ]
Line_46 $$ vDistance = parser.text()-->Line_92 $$ if (vDistance instanceof Number) [ FD ]
Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_31 $$ if (token.isValue()) [ FD ]
Line_16 $$ GeoValidationMethod validationMethod = null-->Line_98 $$ if (validationMethod != null) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_13 $$ String optimizeBbox = GeoDistanceQueryBuilder.DEFAULT_OPTIMIZE_BBOX[ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_39 $$ throw new ParsingException(parser.getTokenLocation(), "[geo_distance] query does not support [" + currentFieldName + "]")[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ FD ]
Line_14 $$ boolean coerce = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_71 $$ if (coerce == true) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_83 $$ throw new ParsingException(parser.getTokenLocation(), "[" + GeoDistanceQueryBuilder.NAME + "] field name already set to [" + fieldName + "] but found [" + currentFieldName + "]")[ FD ]
Line_9 $$ String fieldName = null-->Line_27 $$ fieldName = currentFieldName[ FD ]
Line_7 $$ String currentFieldName = null-->Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_80 $$ point.resetFromString(parser.text())[ FD ]
Line_15 $$ boolean ignoreMalformed = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_72 $$ ignoreMalformed = true[ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_31 $$ if (token.isValue()) [ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_35 $$ point.resetLon(parser.doubleValue())[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_88 $$ if (vDistance == null) [ CD ]
Line_12 $$ GeoDistance geoDistance = GeoDistanceQueryBuilder.DEFAULT_GEO_DISTANCE-->Line_53 $$ geoDistance = GeoDistance.fromString(parser.text())[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_92 $$ if (vDistance instanceof Number) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) [ FD ]
Line_24 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_27 $$ fieldName = currentFieldName[ CD ]
Line_24 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ CD ]
Line_10 $$ Object vDistance = null-->Line_92 $$ if (vDistance instanceof Number) [ FD ]
Line_16 $$ GeoValidationMethod validationMethod = null-->Line_99 $$ qb.setValidationMethod(validationMethod)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_104 $$ qb.geoDistance(geoDistance)[ CD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_18 $$ if (token == XContentParser.Token.FIELD_NAME) [ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_25 $$ String currentName = parser.currentName()[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_53 $$ geoDistance = GeoDistance.fromString(parser.text())[ FD ]
Line_7 $$ String currentFieldName = null-->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_23 $$ GeoUtils.parseGeoPoint(parser, point)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_15 $$ boolean ignoreMalformed = GeoValidationMethod.DEFAULT_LENIENT_PARSING[ CD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_60 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.GEOHASH_SUFFIX)) [ FD ]
Line_30 $$ currentName = parser.currentName()-->Line_36 $$ if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) [ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_21 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) [ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_35 $$ point.resetLon(parser.doubleValue())[ FD ]
Line_7 $$ String currentFieldName = null-->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_97 $$ qb.point(point)[ FD ]
Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_10 $$ Object vDistance = null-->Line_46 $$ vDistance = parser.text()[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_7 $$ String currentFieldName = null[ CD ]
Line_92 $$ if (vDistance instanceof Number) -->Line_93 $$ qb.distance(((Number) vDistance).doubleValue(), unit)[ CD ]
Line_4 $$ XContentParser.Token token-->Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_10 $$ Object vDistance = null-->Line_88 $$ if (vDistance == null) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_106 $$ qb.queryName(queryName)[ CD ]
Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) -->Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_12 $$ GeoDistance geoDistance = GeoDistanceQueryBuilder.DEFAULT_GEO_DISTANCE[ CD ]
Line_24 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_25 $$ String currentName = parser.currentName()[ CD ]
Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) -->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ CD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())-->Line_79 $$ if (fieldName == null) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) [ FD ]
Line_22 $$ fieldName = currentFieldName-->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ FD ]
Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) -->Line_53 $$ geoDistance = GeoDistance.fromString(parser.text())[ CD ]
Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) -->Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) [ CD ]
Line_22 $$ fieldName = currentFieldName-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_48 $$ vDistance = parser.numberValue()[ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_64 $$ queryName = parser.text()[ FD ]
Line_9 $$ String fieldName = null-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_25 $$ String currentName = parser.currentName()-->Line_34 $$ if (currentName.equals(GeoPointFieldMapper.Names.LON)) [ FD ]
Line_27 $$ fieldName = currentFieldName-->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ FD ]
Line_6 $$ String queryName = null-->Line_106 $$ qb.queryName(queryName)[ FD ]
Line_22 $$ fieldName = currentFieldName-->Line_79 $$ if (fieldName == null) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_48 $$ vDistance = parser.numberValue()[ FD ]
Line_34 $$ if (currentName.equals(GeoPointFieldMapper.Names.LON)) -->Line_35 $$ point.resetLon(parser.doubleValue())[ CD ]
Line_79 $$ if (fieldName == null) -->Line_81 $$ fieldName = currentFieldName[ CD ]
Line_7 $$ String currentFieldName = null-->Line_27 $$ fieldName = currentFieldName[ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_61 $$ point.resetFromGeoHash(parser.text())[ FD ]
Line_11 $$ DistanceUnit unit = GeoDistanceQueryBuilder.DEFAULT_DISTANCE_UNIT-->Line_51 $$ unit = DistanceUnit.fromString(parser.text())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())[ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) -->Line_66 $$ boost = parser.floatValue()[ CD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) [ FD ]
Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) -->Line_58 $$ point.resetLon(parser.doubleValue())[ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_4 $$ XContentParser.Token token[ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_68 $$ optimizeBbox = parser.textOrNull()[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) [ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) [ FD ]
Line_51 $$ unit = DistanceUnit.fromString(parser.text())-->Line_93 $$ qb.distance(((Number) vDistance).doubleValue(), unit)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_89 $$ throw new ParsingException(parser.getTokenLocation(), "geo_distance requires 'distance' to be specified")[ FD ]
Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) -->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) [ CD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_99 $$ qb.setValidationMethod(validationMethod)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) [ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_3 $$ XContentParser parser = parseContext.parser()[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_33 $$ point.resetLat(parser.doubleValue())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) [ FD ]
Line_66 $$ boost = parser.floatValue()-->Line_105 $$ qb.boost(boost)[ FD ]
Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) [ CD ]
Line_18 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_20 $$ if (parseContext.isDeprecatedSetting(currentFieldName)) [ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_19 $$ currentFieldName = parser.currentName()[ FD ]
Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)[ CD ]
Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) -->Line_75 $$ ignoreMalformed = parser.booleanValue()[ CD ]
Line_9 $$ String fieldName = null-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_53 $$ geoDistance = GeoDistance.fromString(parser.text())-->Line_104 $$ qb.geoDistance(geoDistance)[ FD ]
Line_72 $$ ignoreMalformed = true-->Line_75 $$ ignoreMalformed = parser.booleanValue()[ FD ]
Line_7 $$ String currentFieldName = null-->Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) [ FD ]
Line_25 $$ String currentName = parser.currentName()-->Line_30 $$ currentName = parser.currentName()[ FD ]
Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) [ FD ]
Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) -->Line_79 $$ if (fieldName == null) [ CD ]
Line_4 $$ XContentParser.Token token-->Line_29 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_79 $$ if (fieldName == null) -->Line_80 $$ point.resetFromString(parser.text())[ CD ]
Line_7 $$ String currentFieldName = null-->Line_19 $$ currentFieldName = parser.currentName()[ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_43 $$ if (token.isValue()) [ FD ]
Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) -->Line_77 $$ validationMethod = GeoValidationMethod.fromString(parser.text())[ CD ]
Line_34 $$ if (currentName.equals(GeoPointFieldMapper.Names.LON)) -->Line_36 $$ if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_11 $$ DistanceUnit unit = GeoDistanceQueryBuilder.DEFAULT_DISTANCE_UNIT[ CD ]
Line_4 $$ XContentParser.Token token-->Line_21 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_18 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_19 $$ currentFieldName = parser.currentName()[ CD ]
Line_22 $$ fieldName = currentFieldName-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_55 $$ point.resetLat(parser.doubleValue())[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_77 $$ validationMethod = GeoValidationMethod.fromString(parser.text())[ FD ]
Line_68 $$ optimizeBbox = parser.textOrNull()-->Line_103 $$ qb.optimizeBbox(optimizeBbox)[ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_105 $$ qb.boost(boost)[ FD ]
Line_67 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, OPTIMIZE_BBOX_FIELD)) -->Line_68 $$ optimizeBbox = parser.textOrNull()[ CD ]
Line_56 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LAT_SUFFIX.length())-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_7 $$ String currentFieldName = null-->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_66 $$ boost = parser.floatValue()[ FD ]
Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_45 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_7 $$ String currentFieldName = null-->Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_6 $$ String queryName = null[ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_97 $$ qb.point(point)[ CD ]
Line_22 $$ fieldName = currentFieldName-->Line_27 $$ fieldName = currentFieldName[ FD ]
Line_7 $$ String currentFieldName = null-->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ FD ]
Line_31 $$ if (token.isValue()) -->Line_32 $$ if (currentName.equals(GeoPointFieldMapper.Names.LAT)) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_16 $$ GeoValidationMethod validationMethod = null[ CD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_97 $$ qb.point(point)[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_20 $$ if (parseContext.isDeprecatedSetting(currentFieldName)) [ FD ]
Line_24 $$ if (token == XContentParser.Token.START_OBJECT) -->Line_43 $$ if (token.isValue()) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_105 $$ qb.boost(boost)[ CD ]
Line_9 $$ String fieldName = null-->Line_79 $$ if (fieldName == null) [ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_20 $$ if (parseContext.isDeprecatedSetting(currentFieldName)) -->Line_21 $$ if (token == XContentParser.Token.START_ARRAY) [ CD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_31 $$ if (token.isValue()) [ FD ]
Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) -->Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) [ CD ]
Line_9 $$ String fieldName = null-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_80 $$ point.resetFromString(parser.text())[ FD ]
Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)-->Line_104 $$ qb.geoDistance(geoDistance)[ FD ]
Line_27 $$ fieldName = currentFieldName-->Line_79 $$ if (fieldName == null) [ FD ]
Line_25 $$ String currentName = parser.currentName()-->Line_36 $$ if (currentName.equals(GeoPointFieldMapper.Names.GEOHASH)) [ FD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_14 $$ boolean coerce = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_101 $$ qb.setValidationMethod(GeoValidationMethod.infer(coerce, ignoreMalformed))[ FD ]
Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_18 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_57 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LON_SUFFIX)) -->Line_59 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.LON_SUFFIX.length())[ CD ]
Line_5 $$ float boost = AbstractQueryBuilder.DEFAULT_BOOST-->Line_105 $$ qb.boost(boost)[ FD ]
Line_14 $$ boolean coerce = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_70 $$ coerce = parser.booleanValue()[ FD ]
Line_15 $$ boolean ignoreMalformed = GeoValidationMethod.DEFAULT_LENIENT_PARSING-->Line_75 $$ ignoreMalformed = parser.booleanValue()[ FD ]
Line_6 $$ String queryName = null-->Line_64 $$ queryName = parser.text()[ FD ]
Line_69 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, COERCE_FIELD)) -->Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) [ CD ]
Line_4 $$ XContentParser.Token token-->Line_17 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_13 $$ String optimizeBbox = GeoDistanceQueryBuilder.DEFAULT_OPTIMIZE_BBOX-->Line_103 $$ qb.optimizeBbox(optimizeBbox)[ FD ]
Line_11 $$ DistanceUnit unit = GeoDistanceQueryBuilder.DEFAULT_DISTANCE_UNIT-->Line_93 $$ qb.distance(((Number) vDistance).doubleValue(), unit)[ FD ]
Line_4 $$ XContentParser.Token token-->Line_24 $$ if (token == XContentParser.Token.START_OBJECT) [ FD ]
Line_81 $$ fieldName = currentFieldName-->Line_79 $$ if (fieldName == null) [ FD ]
Line_77 $$ validationMethod = GeoValidationMethod.fromString(parser.text())-->Line_99 $$ qb.setValidationMethod(validationMethod)[ FD ]
Line_27 $$ fieldName = currentFieldName-->Line_62 $$ fieldName = currentFieldName.substring(0, currentFieldName.length() - GeoPointFieldMapper.Names.GEOHASH_SUFFIX.length())[ FD ]
Line_19 $$ currentFieldName = parser.currentName()-->Line_20 $$ if (parseContext.isDeprecatedSetting(currentFieldName)) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_107 $$ return qb[ CD ]
Line_3 $$ XContentParser parser = parseContext.parser()-->Line_46 $$ vDistance = parser.text()[ FD ]
Line_21 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_22 $$ fieldName = currentFieldName[ CD ]
Line_52 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_TYPE_FIELD)) -->Line_54 $$ if (currentFieldName.endsWith(GeoPointFieldMapper.Names.LAT_SUFFIX)) [ CD ]
Line_30 $$ currentName = parser.currentName()-->Line_32 $$ if (currentName.equals(GeoPointFieldMapper.Names.LAT)) [ FD ]
Line_28 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_43 $$ if (token.isValue()) [ FD ]
Line_4 $$ XContentParser.Token token-->Line_43 $$ if (token.isValue()) [ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_58 $$ point.resetLon(parser.doubleValue())[ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_5 $$ float boost = AbstractQueryBuilder.DEFAULT_BOOST[ CD ]
Line_43 $$ if (token.isValue()) -->Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) [ CD ]
Line_63 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.NAME_FIELD)) -->Line_65 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, AbstractQueryBuilder.BOOST_FIELD)) [ CD ]
Line_74 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, IGNORE_MALFORMED_FIELD)) -->Line_76 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, VALIDATION_METHOD_FIELD)) [ CD ]
Line_27 $$ fieldName = currentFieldName-->Line_81 $$ fieldName = currentFieldName[ FD ]
Line_98 $$ if (validationMethod != null) -->Line_99 $$ qb.setValidationMethod(validationMethod)[ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_91 $$ GeoDistanceQueryBuilder qb = new GeoDistanceQueryBuilder(fieldName)[ CD ]
Line_30 $$ currentName = parser.currentName()-->Line_34 $$ if (currentName.equals(GeoPointFieldMapper.Names.LON)) [ FD ]
Line_8 $$ GeoPoint point = new GeoPoint(Double.NaN, Double.NaN)-->Line_37 $$ point.resetFromGeoHash(parser.text())[ FD ]
Line_92 $$ if (vDistance instanceof Number) -->Line_95 $$ qb.distance((String) vDistance, unit)[ CD ]
Line_10 $$ Object vDistance = null-->Line_48 $$ vDistance = parser.numberValue()[ FD ]
Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) -->Line_50 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, UNIT_FIELD)) [ CD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_44 $$ if (parseContext.parseFieldMatcher().match(currentFieldName, DISTANCE_FIELD)) [ FD ]
Line_2 $$ public GeoDistanceQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException -->Line_3 $$ XContentParser parser = parseContext.parser()[ CD ]
