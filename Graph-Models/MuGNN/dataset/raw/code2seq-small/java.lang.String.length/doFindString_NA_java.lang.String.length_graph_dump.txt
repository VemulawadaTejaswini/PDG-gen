Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_5 $$ if (toFind.isEmpty()) [ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)[ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_14 $$ return findStringByRegularExpression(text, offset, model)[ FD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_4 $$ String toFind = model.getStringToFind()[ FD ]
Line_8 $$ if (model.isInCommentsOnly() || model.isInStringLiteralsOnly()) -->Line_9 $$ if (file == null)[ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_4 $$ String toFind = model.getStringToFind()[ CD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_11 $$ return findInCommentsAndLiterals(text, textArray, offset, model, file)[ FD ]
Line_18 $$ if (model.isForward()) -->Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)[ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_13 $$ if (model.isRegularExpressions()) [ CD ]
Line_4 $$ String toFind = model.getStringToFind()-->Line_27 $$ return new FindResultImpl(index, index + toFind.length())[ FD ]
Line_20 $$ index = res < 0 ? -1 : res-->Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)[ FD ]
Line_4 $$ String toFind = model.getStringToFind()-->Line_5 $$ if (toFind.isEmpty()) [ FD ]
Line_13 $$ if (model.isRegularExpressions()) -->Line_14 $$ return findStringByRegularExpression(text, offset, model)[ CD ]
Line_18 $$ if (model.isForward()) -->Line_20 $$ index = res < 0 ? -1 : res[ CD ]
Line_18 $$ if (model.isForward()) -->Line_19 $$ final int res = searcher.scan(text, textArray, offset, text.length())[ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)[ FD ]
Line_8 $$ if (model.isInCommentsOnly() || model.isInStringLiteralsOnly()) -->Line_11 $$ return findInCommentsAndLiterals(text, textArray, offset, model, file)[ CD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_8 $$ if (model.isInCommentsOnly() || model.isInStringLiteralsOnly()) [ FD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_14 $$ return findStringByRegularExpression(text, offset, model)[ FD ]
Line_16 $$ final StringSearcher searcher = createStringSearcher(model)-->Line_19 $$ final int res = searcher.scan(text, textArray, offset, text.length())[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_9 $$ if (file == null)[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_11 $$ return findInCommentsAndLiterals(text, textArray, offset, model, file)[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_16 $$ final StringSearcher searcher = createStringSearcher(model)[ CD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_24 $$ if (index < 0) [ CD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_16 $$ final StringSearcher searcher = createStringSearcher(model)[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_19 $$ final int res = searcher.scan(text, textArray, offset, text.length())[ FD ]
Line_24 $$ if (index < 0) -->Line_25 $$ return NOT_FOUND_RESULT[ CD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_13 $$ if (model.isRegularExpressions()) [ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_17 $$ int index[ CD ]
Line_9 $$ if (file == null)-->Line_10 $$ return NOT_FOUND_RESULT[ CD ]
Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)-->Line_24 $$ if (index < 0) [ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_8 $$ if (model.isInCommentsOnly() || model.isInStringLiteralsOnly()) [ CD ]
Line_17 $$ int index-->Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)[ FD ]
Line_5 $$ if (toFind.isEmpty()) -->Line_6 $$ return NOT_FOUND_RESULT[ CD ]
Line_20 $$ index = res < 0 ? -1 : res-->Line_24 $$ if (index < 0) [ FD ]
Line_17 $$ int index-->Line_20 $$ index = res < 0 ? -1 : res[ FD ]
Line_17 $$ int index-->Line_24 $$ if (index < 0) [ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_18 $$ if (model.isForward()) [ CD ]
Line_16 $$ final StringSearcher searcher = createStringSearcher(model)-->Line_22 $$ index = offset == 0 ? -1 : searcher.scan(text, textArray, 0, offset - 1)[ FD ]
Line_2 $$ private FindResult doFindString(@NotNull CharSequence text, @Nullable char[] textArray, int offset, @NotNull FindModel findmodel, @Nullable VirtualFile file) -->Line_27 $$ return new FindResultImpl(index, index + toFind.length())[ CD ]
Line_3 $$ FindModel model = normalizeIfMultilined(findmodel)-->Line_18 $$ if (model.isForward()) [ FD ]
