Line_2 $$ public String getShortPath(T key) -->Line_5 $$ return key.toString()[ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_7 $$ Node firstDirNode = null[ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_28 $$ final Node firstCharacterOfDirectoryName = // firstDirNodeWithSingleChildAfterNodeWithManyChildren.myChar == /[ CD ]
Line_8 $$ boolean searchingForManyChildren = current.myChildren.size() == 1-->Line_17 $$ searchingForManyChildren = false[ FD ]
Line_19 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = node-->Line_23 $$ if (firstDirNodeWithSingleChildAfterNodeWithManyChildren == null) [ FD ]
Line_17 $$ searchingForManyChildren = false-->Line_16 $$ if (searchingForManyChildren && node.myChildren.size() > 1) [ FD ]
Line_27 $$ StringBuilder b = new StringBuilder()-->Line_34 $$ b.append(n.myChar)[ FD ]
Line_35 $$ if (skipDirs && n.myChar == INTERNAL_PATH_DELIMITER && n != firstDirNode) -->Line_38 $$ while (n != firstDirNode) n = n.myParentNode[ CD ]
Line_7 $$ Node firstDirNode = null-->Line_38 $$ while (n != firstDirNode) n = n.myParentNode[ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_8 $$ boolean searchingForManyChildren = current.myChildren.size() == 1[ CD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_41 $$ n = n.myParentNode[ FD ]
Line_8 $$ boolean searchingForManyChildren = current.myChildren.size() == 1-->Line_16 $$ if (searchingForManyChildren && node.myChildren.size() > 1) [ FD ]
Line_38 $$ n = n.myParentNode-->Line_41 $$ n = n.myParentNode[ FD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_10 $$ Node node = current.myChildren.get(path.charAt(i))[ FD ]
Line_13 $$ if (firstDirNode == null && node.myChar == INTERNAL_PATH_DELIMITER) -->Line_14 $$ firstDirNode = node[ CD ]
Line_4 $$ if (path == null)-->Line_5 $$ return key.toString()[ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_26 $$ final boolean skipDirs = firstDirNodeWithSingleChildAfterNodeWithManyChildren != firstDirNode[ CD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_16 $$ if (searchingForManyChildren && node.myChildren.size() > 1) [ CD ]
Line_35 $$ if (skipDirs && n.myChar == INTERNAL_PATH_DELIMITER && n != firstDirNode) -->Line_39 $$ b.append("…").append(mySeparator)[ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_3 $$ String path = myPaths.get(key)[ CD ]
Line_10 $$ Node node = current.myChildren.get(path.charAt(i))-->Line_19 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = node[ FD ]
Line_10 $$ Node node = current.myChildren.get(path.charAt(i))-->Line_11 $$ if (node == null)[ FD ]
Line_23 $$ if (firstDirNodeWithSingleChildAfterNodeWithManyChildren == null) -->Line_24 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = current[ CD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_35 $$ if (skipDirs && n.myChar == INTERNAL_PATH_DELIMITER && n != firstDirNode) [ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_3 $$ String path = myPaths.get(key)[ FD ]
Line_11 $$ if (node == null)-->Line_12 $$ return path[ CD ]
Line_16 $$ if (searchingForManyChildren && node.myChildren.size() > 1) -->Line_17 $$ searchingForManyChildren = false[ CD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_21 $$ current = node[ CD ]
Line_14 $$ firstDirNode = node-->Line_38 $$ while (n != firstDirNode) n = n.myParentNode[ FD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_11 $$ if (node == null)[ CD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_13 $$ if (firstDirNode == null && node.myChar == INTERNAL_PATH_DELIMITER) [ CD ]
Line_3 $$ String path = myPaths.get(key)-->Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) [ FD ]
Line_19 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = node-->Line_24 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = current[ FD ]
Line_27 $$ StringBuilder b = new StringBuilder()-->Line_32 $$ b.append(mySeparator)[ FD ]
Line_6 $$ Node current = myRootNode, firstDirNodeWithSingleChildAfterNodeWithManyChildren = null-->Line_21 $$ current = node[ FD ]
Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) -->Line_10 $$ Node node = current.myChildren.get(path.charAt(i))[ CD ]
Line_27 $$ StringBuilder b = new StringBuilder()-->Line_43 $$ return b.toString()[ FD ]
Line_3 $$ String path = myPaths.get(key)-->Line_10 $$ Node node = current.myChildren.get(path.charAt(i))[ FD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_38 $$ while (n != firstDirNode) n = n.myParentNode[ FD ]
Line_7 $$ Node firstDirNode = null-->Line_14 $$ firstDirNode = node[ FD ]
Line_6 $$ Node current = myRootNode, firstDirNodeWithSingleChildAfterNodeWithManyChildren = null-->Line_19 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = node[ FD ]
Line_6 $$ Node current = myRootNode, firstDirNodeWithSingleChildAfterNodeWithManyChildren = null-->Line_23 $$ if (firstDirNodeWithSingleChildAfterNodeWithManyChildren == null) [ FD ]
Line_21 $$ current = node-->Line_24 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = current[ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_43 $$ return b.toString()[ CD ]
Line_17 $$ searchingForManyChildren = false-->Line_18 $$ if (!searchingForManyChildren && firstDirNodeWithSingleChildAfterNodeWithManyChildren == null && node.myChildren.size() == 1 && node.myChar == INTERNAL_PATH_DELIMITER) [ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) [ CD ]
Line_41 $$ n = n.myParentNode-->Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) [ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_23 $$ if (firstDirNodeWithSingleChildAfterNodeWithManyChildren == null) [ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_27 $$ StringBuilder b = new StringBuilder()[ CD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_31 $$ if (n.myChar == INTERNAL_PATH_DELIMITER)[ CD ]
Line_16 $$ if (searchingForManyChildren && node.myChildren.size() > 1) -->Line_18 $$ if (!searchingForManyChildren && firstDirNodeWithSingleChildAfterNodeWithManyChildren == null && node.myChildren.size() == 1 && node.myChar == INTERNAL_PATH_DELIMITER) [ CD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_38 $$ n = n.myParentNode[ FD ]
Line_3 $$ String path = myPaths.get(key)-->Line_11 $$ if (node == null)[ FD ]
Line_31 $$ if (n.myChar == INTERNAL_PATH_DELIMITER)-->Line_34 $$ b.append(n.myChar)[ CD ]
Line_3 $$ String path = myPaths.get(key)-->Line_4 $$ if (path == null)[ FD ]
Line_6 $$ Node current = myRootNode, firstDirNodeWithSingleChildAfterNodeWithManyChildren = null-->Line_24 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = current[ FD ]
Line_31 $$ if (n.myChar == INTERNAL_PATH_DELIMITER)-->Line_32 $$ b.append(mySeparator)[ CD ]
Line_2 $$ public String getShortPath(T key) -->Line_6 $$ Node current = myRootNode, firstDirNodeWithSingleChildAfterNodeWithManyChildren = null[ CD ]
Line_8 $$ boolean searchingForManyChildren = current.myChildren.size() == 1-->Line_18 $$ if (!searchingForManyChildren && firstDirNodeWithSingleChildAfterNodeWithManyChildren == null && node.myChildren.size() == 1 && node.myChar == INTERNAL_PATH_DELIMITER) [ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_4 $$ if (path == null)[ CD ]
Line_30 $$ for (Node n = firstCharacterOfDirectoryName; n != myRootNode; ) -->Line_41 $$ n = n.myParentNode[ CD ]
Line_10 $$ Node node = current.myChildren.get(path.charAt(i))-->Line_14 $$ firstDirNode = node[ FD ]
Line_18 $$ if (!searchingForManyChildren && firstDirNodeWithSingleChildAfterNodeWithManyChildren == null && node.myChildren.size() == 1 && node.myChar == INTERNAL_PATH_DELIMITER) -->Line_19 $$ firstDirNodeWithSingleChildAfterNodeWithManyChildren = node[ CD ]
Line_10 $$ Node node = current.myChildren.get(path.charAt(i))-->Line_21 $$ current = node[ FD ]
Line_2 $$ public String getShortPath(T key) -->Line_9 $$ for (int i = path.length() - 1; i >= 0; --i) [ CD ]
Line_27 $$ StringBuilder b = new StringBuilder()-->Line_39 $$ b.append("…").append(mySeparator)[ FD ]
