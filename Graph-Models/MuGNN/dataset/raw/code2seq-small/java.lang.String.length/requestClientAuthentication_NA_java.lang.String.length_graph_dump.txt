Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_16 $$ setTitle(dialog, errorMessage)[ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_44 $$ int port = dialog.getPortNumber()[ FD ]
Line_46 $$ if (agentConnector != null) -->Line_47 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new TrileadAgentProxy(agentConnector), port, url, false)[ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_9 $$ final boolean authCredsOn = authMayBeStored && myManager.getHostOptionsProvider().getHostOptions(url).isAuthStorageEnabled()[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_8 $$ Runnable command = null[ CD ]
Line_50 $$ String passphrase = dialog.getPassphrase()-->Line_52 $$ passphrase = null[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_7 $$ final SVNAuthentication[] result = new SVNAuthentication[1][ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_30 $$ setTitle(dialog, errorMessage)[ FD ]
Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) -->Line_56 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), dialog.getPassword(), port, dialog.isSaveAllowed(), url, false)[ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_54 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new File(dialog.getKeyFile()), passphrase, port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_68 $$ dialog.setFile(file)[ FD ]
Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) -->Line_51 $$ if (passphrase != null && passphrase.length() == 0) [ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_10 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : myManager.getDefaultUsername(kind, url)[ FD ]
Line_77 $$ if (command != null) -->Line_78 $$ showAndWait(command)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_68 $$ dialog.setFile(file)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_11 $$ if (ISVNAuthenticationManager.PASSWORD.equals(kind)) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_64 $$ final ISVNHostOptions options = myManager.getHostOptionsProvider().getHostOptions(url)[ FD ]
Line_62 $$ command = new Runnable() -->Line_64 $$ final ISVNHostOptions options = myManager.getHostOptionsProvider().getHostOptions(url)[ CD ]
Line_10 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : myManager.getDefaultUsername(kind, url)-->Line_15 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_71 $$ if (dialog.showAndGet()) [ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_70 $$ setTitle(dialog, errorMessage)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_42 $$ setTitle(dialog, errorMessage)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_47 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new TrileadAgentProxy(agentConnector), port, url, false)[ FD ]
Line_71 $$ if (dialog.showAndGet()) -->Line_72 $$ result[0] = new SVNSSLAuthentication(new File(dialog.getCertificatePath()), String.valueOf(dialog.getCertificatePassword()), dialog.getSaveAuth(), url, false)[ CD ]
Line_43 $$ if (dialog.showAndGet()) -->Line_44 $$ int port = dialog.getPortNumber()[ CD ]
Line_11 $$ if (ISVNAuthenticationManager.PASSWORD.equals(kind)) -->Line_12 $$ command = new Runnable() [ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_3 $$ final MyCallState callState = new MyCallState(true, false)[ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_72 $$ result[0] = new SVNSSLAuthentication(new File(dialog.getCertificatePath()), String.valueOf(dialog.getCertificatePassword()), dialog.getSaveAuth(), url, false)[ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_50 $$ String passphrase = dialog.getPassphrase()[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_71 $$ if (dialog.showAndGet()) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_12 $$ command = new Runnable() -->Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_72 $$ result[0] = new SVNSSLAuthentication(new File(dialog.getCertificatePath()), String.valueOf(dialog.getCertificatePassword()), dialog.getSaveAuth(), url, false)[ FD ]
Line_66 $$ final SSLCredentialsDialog dialog = new SSLCredentialsDialog(myProject, realm, authCredsOn)-->Line_70 $$ setTitle(dialog, errorMessage)[ FD ]
Line_5 $$ final SvnConfiguration configuration = SvnConfiguration.getInstance(myProject)-->Line_6 $$ configuration.clearCredentials(kind, realm)[ FD ]
Line_31 $$ if (dialog.showAndGet()) -->Line_32 $$ result[0] = new SVNUserNameAuthentication(dialog.getUserName(), dialog.isSaveAllowed(), url, false)[ CD ]
Line_77 $$ if (command != null) -->Line_79 $$ log("3 authentication result: " + result[0])[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_77 $$ if (command != null) [ CD ]
Line_26 $$ command = new Runnable() -->Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_36 $$ if (ISVNAuthenticationManager.SSH.equals(kind)) [ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_18 $$ result[0] = new SVNPasswordAuthentication(dialog.getUserName(), dialog.getPassword(), dialog.isSaveAllowed(), url, false)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_17 $$ if (dialog.showAndGet()) [ FD ]
Line_50 $$ String passphrase = dialog.getPassphrase()-->Line_51 $$ if (passphrase != null && passphrase.length() == 0) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_83 $$ myManager.requested(ProviderType.interactive, url, realm, kind, wasCanceled)[ CD ]
Line_65 $$ final String file = options.getSSLClientCertFile()-->Line_68 $$ dialog.setFile(file)[ FD ]
Line_22 $$ if (ISVNAuthenticationManager.USERNAME.equals(kind)) -->Line_36 $$ if (ISVNAuthenticationManager.SSH.equals(kind)) [ CD ]
Line_62 $$ command = new Runnable() -->Line_70 $$ setTitle(dialog, errorMessage)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_45 $$ if (dialog.isSshAgentSelected()) [ FD ]
Line_67 $$ if (!StringUtil.isEmptyOrSpaces(file)) -->Line_68 $$ dialog.setFile(file)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_70 $$ setTitle(dialog, errorMessage)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_42 $$ setTitle(dialog, errorMessage)[ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_68 $$ dialog.setFile(file)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_30 $$ setTitle(dialog, errorMessage)[ FD ]
Line_3 $$ final MyCallState callState = new MyCallState(true, false)-->Line_4 $$ myCallState.set(callState)[ FD ]
Line_9 $$ final boolean authCredsOn = authMayBeStored && myManager.getHostOptionsProvider().getHostOptions(url).isAuthStorageEnabled()-->Line_15 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_22 $$ if (ISVNAuthenticationManager.USERNAME.equals(kind)) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_6 $$ configuration.clearCredentials(kind, realm)[ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_43 $$ if (dialog.showAndGet()) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_42 $$ setTitle(dialog, errorMessage)[ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_45 $$ if (dialog.isSshAgentSelected()) [ FD ]
Line_8 $$ Runnable command = null-->Line_12 $$ command = new Runnable() [ FD ]
Line_39 $$ command = new Runnable() -->Line_42 $$ setTitle(dialog, errorMessage)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_15 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_82 $$ callState.setWasCancelled(wasCanceled)[ CD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_54 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new File(dialog.getKeyFile()), passphrase, port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_44 $$ int port = dialog.getPortNumber()[ FD ]
Line_39 $$ command = new Runnable() -->Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_11 $$ if (ISVNAuthenticationManager.PASSWORD.equals(kind)) [ CD ]
Line_8 $$ Runnable command = null-->Line_77 $$ if (command != null) [ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_6 $$ configuration.clearCredentials(kind, realm)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_83 $$ myManager.requested(ProviderType.interactive, url, realm, kind, wasCanceled)[ FD ]
Line_45 $$ if (dialog.isSshAgentSelected()) -->Line_46 $$ if (agentConnector != null) [ CD ]
Line_66 $$ final SSLCredentialsDialog dialog = new SSLCredentialsDialog(myProject, realm, authCredsOn)-->Line_72 $$ result[0] = new SVNSSLAuthentication(new File(dialog.getCertificatePath()), String.valueOf(dialog.getCertificatePassword()), dialog.getSaveAuth(), url, false)[ FD ]
Line_39 $$ command = new Runnable() -->Line_43 $$ if (dialog.showAndGet()) [ CD ]
Line_65 $$ final String file = options.getSSLClientCertFile()-->Line_67 $$ if (!StringUtil.isEmptyOrSpaces(file)) [ FD ]
Line_36 $$ if (ISVNAuthenticationManager.SSH.equals(kind)) -->Line_61 $$ if (ISVNAuthenticationManager.SSL.equals(kind)) [ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_44 $$ int port = dialog.getPortNumber()[ FD ]
Line_64 $$ final ISVNHostOptions options = myManager.getHostOptionsProvider().getHostOptions(url)-->Line_65 $$ final String file = options.getSSLClientCertFile()[ FD ]
Line_12 $$ command = new Runnable() -->Line_17 $$ if (dialog.showAndGet()) [ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_50 $$ String passphrase = dialog.getPassphrase()[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_56 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), dialog.getPassword(), port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_84 $$ return result[0][ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_43 $$ if (dialog.showAndGet()) [ FD ]
Line_26 $$ command = new Runnable() -->Line_31 $$ if (dialog.showAndGet()) [ CD ]
Line_43 $$ if (dialog.showAndGet()) -->Line_45 $$ if (dialog.isSshAgentSelected()) [ CD ]
Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) -->Line_54 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new File(dialog.getKeyFile()), passphrase, port, dialog.isSaveAllowed(), url, false)[ CD ]
Line_45 $$ if (dialog.isSshAgentSelected()) -->Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) [ CD ]
Line_12 $$ command = new Runnable() -->Line_15 $$ dialog.setup(realm, userName, authCredsOn)[ CD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_72 $$ result[0] = new SVNSSLAuthentication(new File(dialog.getCertificatePath()), String.valueOf(dialog.getCertificatePassword()), dialog.getSaveAuth(), url, false)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_15 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_22 $$ if (ISVNAuthenticationManager.USERNAME.equals(kind)) -->Line_23 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_31 $$ if (dialog.showAndGet()) [ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_47 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new TrileadAgentProxy(agentConnector), port, url, false)[ FD ]
Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) -->Line_50 $$ String passphrase = dialog.getPassphrase()[ CD ]
Line_12 $$ command = new Runnable() -->Line_78 $$ showAndWait(command)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_43 $$ if (dialog.showAndGet()) [ FD ]
Line_62 $$ command = new Runnable() -->Line_65 $$ final String file = options.getSSLClientCertFile()[ CD ]
Line_62 $$ command = new Runnable() -->Line_67 $$ if (!StringUtil.isEmptyOrSpaces(file)) [ CD ]
Line_26 $$ command = new Runnable() -->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ CD ]
Line_62 $$ command = new Runnable() -->Line_71 $$ if (dialog.showAndGet()) [ CD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_56 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), dialog.getPassword(), port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_56 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), dialog.getPassword(), port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_54 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new File(dialog.getKeyFile()), passphrase, port, dialog.isSaveAllowed(), url, false)[ FD ]
Line_11 $$ if (ISVNAuthenticationManager.PASSWORD.equals(kind)) -->Line_22 $$ if (ISVNAuthenticationManager.USERNAME.equals(kind)) [ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_10 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : myManager.getDefaultUsername(kind, url)[ CD ]
Line_66 $$ final SSLCredentialsDialog dialog = new SSLCredentialsDialog(myProject, realm, authCredsOn)-->Line_68 $$ dialog.setFile(file)[ FD ]
Line_3 $$ final MyCallState callState = new MyCallState(true, false)-->Line_82 $$ callState.setWasCancelled(wasCanceled)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_16 $$ setTitle(dialog, errorMessage)[ FD ]
Line_17 $$ if (dialog.showAndGet()) -->Line_18 $$ result[0] = new SVNPasswordAuthentication(dialog.getUserName(), dialog.getPassword(), dialog.isSaveAllowed(), url, false)[ CD ]
Line_26 $$ command = new Runnable() -->Line_30 $$ setTitle(dialog, errorMessage)[ CD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_71 $$ if (dialog.showAndGet()) [ FD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) [ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_32 $$ result[0] = new SVNUserNameAuthentication(dialog.getUserName(), dialog.isSaveAllowed(), url, false)[ FD ]
Line_23 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_24 $$ return new SVNUserNameAuthentication(userName, false)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_30 $$ setTitle(dialog, errorMessage)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_5 $$ final SvnConfiguration configuration = SvnConfiguration.getInstance(myProject)[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_9 $$ final boolean authCredsOn = authMayBeStored && myManager.getHostOptionsProvider().getHostOptions(url).isAuthStorageEnabled()[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_70 $$ setTitle(dialog, errorMessage)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) [ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_70 $$ setTitle(dialog, errorMessage)[ FD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_61 $$ if (ISVNAuthenticationManager.SSL.equals(kind)) [ FD ]
Line_9 $$ final boolean authCredsOn = authMayBeStored && myManager.getHostOptionsProvider().getHostOptions(url).isAuthStorageEnabled()-->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_31 $$ if (dialog.showAndGet()) [ FD ]
Line_51 $$ if (passphrase != null && passphrase.length() == 0) -->Line_52 $$ passphrase = null[ CD ]
Line_41 $$ SSHCredentialsDialog dialog = new SSHCredentialsDialog(myProject, realm, userName, authCredsOn, url.getPort(), isAgentAvailable)-->Line_42 $$ setTitle(dialog, errorMessage)[ FD ]
Line_8 $$ Runnable command = null-->Line_78 $$ showAndWait(command)[ FD ]
Line_36 $$ if (ISVNAuthenticationManager.SSH.equals(kind)) -->Line_37 $$ final Connector agentConnector = createSshAgentConnector()[ CD ]
Line_2 $$ public SVNAuthentication requestClientAuthentication(final String kind, final SVNURL url, final String realm, final SVNErrorMessage errorMessage, final SVNAuthentication previousAuth, final boolean authMayBeStored) -->Line_4 $$ myCallState.set(callState)[ CD ]
Line_12 $$ command = new Runnable() -->Line_16 $$ setTitle(dialog, errorMessage)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_49 $$ if (dialog.getKeyFile() != null && dialog.getKeyFile().trim().length() > 0) [ FD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_32 $$ result[0] = new SVNUserNameAuthentication(dialog.getUserName(), dialog.isSaveAllowed(), url, false)[ FD ]
Line_12 $$ command = new Runnable() -->Line_77 $$ if (command != null) [ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_45 $$ if (dialog.isSshAgentSelected()) [ FD ]
Line_10 $$ final String userName = previousAuth != null && previousAuth.getUserName() != null ? previousAuth.getUserName() : myManager.getDefaultUsername(kind, url)-->Line_29 $$ dialog.setup(realm, userName, authCredsOn)[ FD ]
Line_62 $$ command = new Runnable() -->Line_66 $$ final SSLCredentialsDialog dialog = new SSLCredentialsDialog(myProject, realm, authCredsOn)[ CD ]
Line_28 $$ UserNameCredentialsDialog dialog = new UserNameCredentialsDialog(myProject)-->Line_47 $$ result[0] = new SVNSSHAuthentication(dialog.getUserName(), new TrileadAgentProxy(agentConnector), port, url, false)[ FD ]
Line_14 $$ SimpleCredentialsDialog dialog = new SimpleCredentialsDialog(myProject)-->Line_50 $$ String passphrase = dialog.getPassphrase()[ FD ]
Line_66 $$ final SSLCredentialsDialog dialog = new SSLCredentialsDialog(myProject, realm, authCredsOn)-->Line_71 $$ if (dialog.showAndGet()) [ FD ]
