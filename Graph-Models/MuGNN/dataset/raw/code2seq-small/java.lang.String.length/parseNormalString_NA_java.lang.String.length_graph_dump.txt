Line_28 $$ expectedAction = EventAction.UPDATE_ADD-->Line_32 $$ expectedAction = EventAction.UPDATE_UPDATE[ FD ]
Line_18 $$ final String path = line.substring(4).trim()-->Line_21 $$ final File file = SvnUtil.resolvePath(myBase, path)[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_27 $$ if (StatusType.STATUS_ADDED.equals(contentsStatus)) [ CD ]
Line_26 $$ EventAction expectedAction-->Line_34 $$ action = expectedAction[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_11 $$ final char lock = line.charAt(2)[ CD ]
Line_6 $$ if (' ' != first && !ourActions.contains(first))-->Line_7 $$ return null[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_11 $$ final char lock = line.charAt(2)[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_10 $$ final StatusType propertiesStatus = CommandUtil.getStatusType(second)[ CD ]
Line_8 $$ final StatusType contentsStatus = CommandUtil.getStatusType(first)-->Line_29 $$ if (StatusType.STATUS_DELETED.equals(contentsStatus)) [ FD ]
Line_28 $$ expectedAction = EventAction.UPDATE_ADD-->Line_34 $$ action = expectedAction[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_35 $$ if (haveTreeConflict) [ CD ]
Line_26 $$ EventAction expectedAction-->Line_32 $$ expectedAction = EventAction.UPDATE_UPDATE[ FD ]
Line_9 $$ final char second = line.charAt(1)-->Line_10 $$ final StatusType propertiesStatus = CommandUtil.getStatusType(second)[ FD ]
Line_15 $$ if (' ' != treeConflict && 'C' != treeConflict)-->Line_16 $$ return null[ CD ]
Line_32 $$ expectedAction = EventAction.UPDATE_UPDATE-->Line_34 $$ action = expectedAction[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_5 $$ final char first = line.charAt(0)[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_8 $$ final StatusType contentsStatus = CommandUtil.getStatusType(first)[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_38 $$ return new ProgressEvent(file, -1, contentsStatus, propertiesStatus, action, null, null)[ CD ]
Line_25 $$ EventAction action-->Line_34 $$ action = expectedAction[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_5 $$ final char first = line.charAt(0)[ CD ]
Line_27 $$ if (StatusType.STATUS_ADDED.equals(contentsStatus)) -->Line_29 $$ if (StatusType.STATUS_DELETED.equals(contentsStatus)) [ CD ]
Line_34 $$ action = expectedAction-->Line_36 $$ action = EventAction.TREE_CONFLICT[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_9 $$ final char second = line.charAt(1)[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_19 $$ if (StringUtil.isEmptyOrSpaces(path))[ CD ]
Line_35 $$ if (haveTreeConflict) -->Line_36 $$ action = EventAction.TREE_CONFLICT[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_17 $$ final boolean haveTreeConflict = 'C' == treeConflict[ CD ]
Line_18 $$ final String path = line.substring(4).trim()-->Line_19 $$ if (StringUtil.isEmptyOrSpaces(path))[ FD ]
Line_25 $$ EventAction action-->Line_36 $$ action = EventAction.TREE_CONFLICT[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_18 $$ final String path = line.substring(4).trim()[ FD ]
Line_22 $$ if (StatusType.STATUS_OBSTRUCTED.equals(contentsStatus)) -->Line_23 $$ return new ProgressEvent(file, -1, contentsStatus, propertiesStatus, EventAction.UPDATE_SKIP_OBSTRUCTION, null, null)[ CD ]
Line_26 $$ EventAction expectedAction-->Line_30 $$ expectedAction = EventAction.UPDATE_DELETE[ FD ]
Line_28 $$ expectedAction = EventAction.UPDATE_ADD-->Line_30 $$ expectedAction = EventAction.UPDATE_DELETE[ FD ]
Line_19 $$ if (StringUtil.isEmptyOrSpaces(path))-->Line_20 $$ return null[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_34 $$ action = expectedAction[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_26 $$ EventAction expectedAction[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_9 $$ final char second = line.charAt(1)[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_18 $$ final String path = line.substring(4).trim()[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_21 $$ final File file = SvnUtil.resolvePath(myBase, path)[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_14 $$ final char treeConflict = line.charAt(3)[ FD ]
Line_8 $$ final StatusType contentsStatus = CommandUtil.getStatusType(first)-->Line_22 $$ if (StatusType.STATUS_OBSTRUCTED.equals(contentsStatus)) [ FD ]
Line_26 $$ EventAction expectedAction-->Line_28 $$ expectedAction = EventAction.UPDATE_ADD[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_22 $$ if (StatusType.STATUS_OBSTRUCTED.equals(contentsStatus)) [ CD ]
Line_3 $$ if (line.length() < 5)-->Line_4 $$ return null[ CD ]
Line_5 $$ final char first = line.charAt(0)-->Line_8 $$ final StatusType contentsStatus = CommandUtil.getStatusType(first)[ FD ]
Line_30 $$ expectedAction = EventAction.UPDATE_DELETE-->Line_34 $$ action = expectedAction[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_25 $$ EventAction action[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_3 $$ if (line.length() < 5)[ FD ]
Line_27 $$ if (StatusType.STATUS_ADDED.equals(contentsStatus)) -->Line_28 $$ expectedAction = EventAction.UPDATE_ADD[ CD ]
Line_8 $$ final StatusType contentsStatus = CommandUtil.getStatusType(first)-->Line_27 $$ if (StatusType.STATUS_ADDED.equals(contentsStatus)) [ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_15 $$ if (' ' != treeConflict && 'C' != treeConflict)[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_6 $$ if (' ' != first && !ourActions.contains(first))[ CD ]
Line_29 $$ if (StatusType.STATUS_DELETED.equals(contentsStatus)) -->Line_30 $$ expectedAction = EventAction.UPDATE_DELETE[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_3 $$ if (line.length() < 5)[ CD ]
Line_29 $$ if (StatusType.STATUS_DELETED.equals(contentsStatus)) -->Line_32 $$ expectedAction = EventAction.UPDATE_UPDATE[ CD ]
Line_12 $$ if (' ' != lock && 'B' != lock)-->Line_13 $$ return null[ CD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_14 $$ final char treeConflict = line.charAt(3)[ CD ]
Line_30 $$ expectedAction = EventAction.UPDATE_DELETE-->Line_32 $$ expectedAction = EventAction.UPDATE_UPDATE[ FD ]
Line_2 $$ private ProgressEvent parseNormalString(final String line) -->Line_12 $$ if (' ' != lock && 'B' != lock)[ CD ]
Line_5 $$ final char first = line.charAt(0)-->Line_6 $$ if (' ' != first && !ourActions.contains(first))[ FD ]
