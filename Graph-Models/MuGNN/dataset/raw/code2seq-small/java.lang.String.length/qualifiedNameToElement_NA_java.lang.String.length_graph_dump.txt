Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_3 $$ final PsiPackage psiPackage = JavaPsiFacade.getInstance(project).findPackage(fqn)[ FD ]
Line_16 $$ if (aClass != null) -->Line_17 $$ String memberName = fqn.substring(endIndex + 1, paramIndex < 0 ? fqn.length() : paramIndex)[ CD ]
Line_30 $$ VirtualFile file = findFile(fqn, project)-->Line_32 $$ return PsiManager.getInstance(project).findFile(file)[ FD ]
Line_12 $$ if (endIndex != -1) -->Line_16 $$ if (aClass != null) [ CD ]
Line_16 $$ if (aClass != null) -->Line_22 $$ String paramString = paramIndex < 0 ? "" : fqn.substring(paramIndex)[ CD ]
Line_19 $$ if (field != null) -->Line_20 $$ return field[ CD ]
Line_18 $$ PsiField field = aClass.findFieldByName(memberName, false)-->Line_19 $$ if (field != null) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_17 $$ String memberName = fqn.substring(endIndex + 1, paramIndex < 0 ? fqn.length() : paramIndex)[ FD ]
Line_12 $$ if (endIndex != -1) -->Line_14 $$ int paramIndex = fqn.indexOf('(', endIndex)[ CD ]
Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))-->Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))[ FD ]
Line_11 $$ final int endIndex = fqn.indexOf('#')-->Line_12 $$ if (endIndex != -1) [ FD ]
Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))-->Line_23 $$ for (PsiMethod overload : aClass.findMethodsByName(memberName, false)) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_34 $$ return null[ CD ]
Line_14 $$ int paramIndex = fqn.indexOf('(', endIndex)-->Line_22 $$ String paramString = paramIndex < 0 ? "" : fqn.substring(paramIndex)[ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_4 $$ if (psiPackage != null) [ CD ]
Line_12 $$ if (endIndex != -1) -->Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))[ CD ]
Line_17 $$ String memberName = fqn.substring(endIndex + 1, paramIndex < 0 ? fqn.length() : paramIndex)-->Line_18 $$ PsiField field = aClass.findFieldByName(memberName, false)[ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_30 $$ VirtualFile file = findFile(fqn, project)[ FD ]
Line_11 $$ final int endIndex = fqn.indexOf('#')-->Line_13 $$ String className = fqn.substring(0, endIndex)[ FD ]
Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))-->Line_23 $$ for (PsiMethod overload : aClass.findMethodsByName(memberName, false)) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_11 $$ final int endIndex = fqn.indexOf('#')[ CD ]
Line_17 $$ String memberName = fqn.substring(endIndex + 1, paramIndex < 0 ? fqn.length() : paramIndex)-->Line_23 $$ for (PsiMethod overload : aClass.findMethodsByName(memberName, false)) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_13 $$ String className = fqn.substring(0, endIndex)[ FD ]
Line_11 $$ final int endIndex = fqn.indexOf('#')-->Line_14 $$ int paramIndex = fqn.indexOf('(', endIndex)[ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))-->Line_18 $$ PsiField field = aClass.findFieldByName(memberName, false)[ FD ]
Line_23 $$ for (PsiMethod overload : aClass.findMethodsByName(memberName, false)) -->Line_24 $$ if (StringUtil.isEmpty(paramString) || paramString.equals(getParameterString(overload))) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))[ CD ]
Line_16 $$ if (aClass != null) -->Line_19 $$ if (field != null) [ CD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_31 $$ if (file != null) [ CD ]
Line_16 $$ if (aClass != null) -->Line_18 $$ PsiField field = aClass.findFieldByName(memberName, false)[ CD ]
Line_4 $$ if (psiPackage != null) -->Line_5 $$ return psiPackage[ CD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_14 $$ int paramIndex = fqn.indexOf('(', endIndex)[ FD ]
Line_22 $$ String paramString = paramIndex < 0 ? "" : fqn.substring(paramIndex)-->Line_24 $$ if (StringUtil.isEmpty(paramString) || paramString.equals(getParameterString(overload))) [ FD ]
Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))-->Line_16 $$ if (aClass != null) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_12 $$ if (endIndex != -1) [ CD ]
Line_31 $$ if (file != null) -->Line_32 $$ return PsiManager.getInstance(project).findFile(file)[ CD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_11 $$ final int endIndex = fqn.indexOf('#')[ FD ]
Line_3 $$ final PsiPackage psiPackage = JavaPsiFacade.getInstance(project).findPackage(fqn)-->Line_4 $$ if (psiPackage != null) [ FD ]
Line_13 $$ String className = fqn.substring(0, endIndex)-->Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_30 $$ VirtualFile file = findFile(fqn, project)[ CD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_3 $$ final PsiPackage psiPackage = JavaPsiFacade.getInstance(project).findPackage(fqn)[ CD ]
Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))-->Line_18 $$ PsiField field = aClass.findFieldByName(memberName, false)[ FD ]
Line_30 $$ VirtualFile file = findFile(fqn, project)-->Line_31 $$ if (file != null) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_8 $$ if (aClass != null) [ CD ]
Line_8 $$ if (aClass != null) -->Line_9 $$ return aClass[ CD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_22 $$ String paramString = paramIndex < 0 ? "" : fqn.substring(paramIndex)[ FD ]
Line_15 $$ aClass = JavaPsiFacade.getInstance(project).findClass(className, GlobalSearchScope.allScope(project))-->Line_16 $$ if (aClass != null) [ FD ]
Line_12 $$ if (endIndex != -1) -->Line_13 $$ String className = fqn.substring(0, endIndex)[ CD ]
Line_7 $$ PsiClass aClass = JavaPsiFacade.getInstance(project).findClass(fqn, GlobalSearchScope.allScope(project))-->Line_8 $$ if (aClass != null) [ FD ]
Line_2 $$ public PsiElement qualifiedNameToElement(final String fqn, final Project project) -->Line_32 $$ return PsiManager.getInstance(project).findFile(file)[ FD ]
Line_24 $$ if (StringUtil.isEmpty(paramString) || paramString.equals(getParameterString(overload))) -->Line_25 $$ return overload[ CD ]
