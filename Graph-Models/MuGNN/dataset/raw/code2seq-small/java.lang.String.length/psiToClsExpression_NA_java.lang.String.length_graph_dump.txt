Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_59 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) [ FD ]
Line_64 $$ if (value != null) -->Line_65 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), expr.getType(), value)[ CD ]
Line_33 $$ if (expr instanceof PsiReferenceExpression) -->Line_34 $$ return new ClsReferenceExpressionImpl(parent, (PsiReferenceExpression) expr)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_67 $$ LOG.error("Unable to compute expression value: " + expr + " [" + expr.getText() + "]")[ FD ]
Line_59 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) -->Line_60 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), PsiType.NULL, null)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_62 $$ final PsiConstantEvaluationHelper evaluator = JavaPsiFacade.getInstance(expr.getProject()).getConstantEvaluationHelper()[ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_27 $$ String exprText = expr.getText()[ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_9 $$ if (expr instanceof PsiPrefixExpression) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_68 $$ return null[ CD ]
Line_28 $$ if (StringUtil.endsWith(exprText, ".class")) -->Line_29 $$ String classText = exprText.substring(0, exprText.length() - 6)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_36 $$ if (expr instanceof PsiBinaryExpression) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_33 $$ if (expr instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_7 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), expr.getType(), ((PsiLiteralExpression) expr).getValue())[ FD ]
Line_26 $$ if (expr instanceof PsiClassObjectAccessExpression) -->Line_28 $$ if (StringUtil.endsWith(exprText, ".class")) [ CD ]
Line_38 $$ return new ClsBinaryExpressionImpl(parent) -->Line_55 $$ return (ClsLiteralExpressionImpl) psiToClsExpression(binaryExpr.getROperand(), this)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_3 $$ if (expr instanceof PsiLiteralExpression) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_4 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_33 $$ if (expr instanceof PsiReferenceExpression) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_5 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), PsiType.NULL, null)[ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_36 $$ if (expr instanceof PsiBinaryExpression) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_64 $$ if (value != null) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_9 $$ if (expr instanceof PsiPrefixExpression) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_65 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), expr.getType(), value)[ FD ]
Line_10 $$ final PsiPrefixExpression prefixExpr = (PsiPrefixExpression) expr-->Line_22 $$ return psiToClsExpression(prefixExpr.getOperand(), this)[ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_59 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) [ CD ]
Line_3 $$ if (expr instanceof PsiLiteralExpression) -->Line_4 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) [ CD ]
Line_9 $$ if (expr instanceof PsiPrefixExpression) -->Line_10 $$ final PsiPrefixExpression prefixExpr = (PsiPrefixExpression) expr[ CD ]
Line_36 $$ if (expr instanceof PsiBinaryExpression) -->Line_38 $$ return new ClsBinaryExpressionImpl(parent) [ CD ]
Line_38 $$ return new ClsBinaryExpressionImpl(parent) -->Line_49 $$ return psiToClsExpression(binaryExpr.getLOperand(), this)[ CD ]
Line_11 $$ return new ClsPrefixExpressionImpl(parent) -->Line_16 $$ return new ClsJavaTokenImpl(this, prefixExpr.getOperationTokenType(), prefixExpr.getOperationSign().getText())[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_26 $$ if (expr instanceof PsiClassObjectAccessExpression) [ CD ]
Line_28 $$ if (StringUtil.endsWith(exprText, ".class")) -->Line_30 $$ return new ClsClassObjectAccessExpressionImpl(parent, classText)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_26 $$ if (expr instanceof PsiClassObjectAccessExpression) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_63 $$ final Object value = evaluator.computeConstantExpression(expr)[ FD ]
Line_26 $$ if (expr instanceof PsiClassObjectAccessExpression) -->Line_27 $$ String exprText = expr.getText()[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_67 $$ LOG.error("Unable to compute expression value: " + expr + " [" + expr.getText() + "]")[ CD ]
Line_3 $$ if (expr instanceof PsiLiteralExpression) -->Line_7 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), expr.getType(), ((PsiLiteralExpression) expr).getValue())[ CD ]
Line_38 $$ return new ClsBinaryExpressionImpl(parent) -->Line_43 $$ return new ClsJavaTokenImpl(this, binaryExpr.getOperationTokenType(), binaryExpr.getOperationSign().getText())[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_63 $$ final Object value = evaluator.computeConstantExpression(expr)[ CD ]
Line_9 $$ if (expr instanceof PsiPrefixExpression) -->Line_11 $$ return new ClsPrefixExpressionImpl(parent) [ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_3 $$ if (expr instanceof PsiLiteralExpression) [ FD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_62 $$ final PsiConstantEvaluationHelper evaluator = JavaPsiFacade.getInstance(expr.getProject()).getConstantEvaluationHelper()[ CD ]
Line_4 $$ if (parent != null && ((ClsFileImpl) parent.getContainingFile()).isForDecompiling()) -->Line_5 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), PsiType.NULL, null)[ CD ]
Line_10 $$ final PsiPrefixExpression prefixExpr = (PsiPrefixExpression) expr-->Line_16 $$ return new ClsJavaTokenImpl(this, prefixExpr.getOperationTokenType(), prefixExpr.getOperationSign().getText())[ FD ]
Line_11 $$ return new ClsPrefixExpressionImpl(parent) -->Line_22 $$ return psiToClsExpression(prefixExpr.getOperand(), this)[ CD ]
Line_2 $$ private static PsiExpression psiToClsExpression(@NotNull PsiExpression expr, @Nullable ClsElementImpl parent) -->Line_60 $$ return new ClsLiteralExpressionImpl(parent, expr.getText(), PsiType.NULL, null)[ FD ]
