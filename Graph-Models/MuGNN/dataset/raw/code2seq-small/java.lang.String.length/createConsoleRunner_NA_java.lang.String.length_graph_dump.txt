Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_49 $$ Map<String, String> envs = Maps.newHashMap(settingsProvider.getEnvs())-->Line_51 $$ envs.put(PythonEnvUtil.IPYTHONENABLE, ipythonEnabled)[ FD ]
Line_21 $$ if (module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0) -->Line_24 $$ if (ModuleManager.getInstance(project).getModules().length > 0) [ CD ]
Line_45 $$ setupFragment = new String[] -->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_4 $$ Module module = sdkAndModule.second[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_39 $$ if (facet != null) [ CD ]
Line_5 $$ Sdk sdk = sdkAndModule.first-->Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)[ FD ]
Line_14 $$ String customStartScript = settingsProvider.getCustomStartScript()-->Line_16 $$ customStartScript = "\n" + customStartScript[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_49 $$ Map<String, String> envs = Maps.newHashMap(settingsProvider.getEnvs())[ CD ]
Line_39 $$ if (facet != null) -->Line_47 $$ setupFragment = new String[] [ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_25 $$ VirtualFile[] roots = ModuleRootManager.getInstance(ModuleManager.getInstance(project).getModules()[0]).getContentRoots()[ FD ]
Line_39 $$ if (facet != null) -->Line_40 $$ List<String> path = facet.getAdditionalPythonPath()[ CD ]
Line_14 $$ String customStartScript = settingsProvider.getCustomStartScript()-->Line_18 $$ String selfPathAppend = PydevConsoleRunner.constructPythonPathCommand(pythonPath, customStartScript)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_36 $$ if (module != null) [ CD ]
Line_27 $$ workingDir = roots[0].getPath()-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_27 $$ workingDir = roots[0].getPath()-->Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)[ FD ]
Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)-->Line_11 $$ if (pathMapper != null) [ FD ]
Line_45 $$ setupFragment = new String[] -->Line_47 $$ setupFragment = new String[] [ FD ]
Line_15 $$ if (customStartScript.trim().length() > 0) -->Line_16 $$ customStartScript = "\n" + customStartScript[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_24 $$ if (ModuleManager.getInstance(project).getModules().length > 0) [ FD ]
Line_39 $$ if (facet != null) -->Line_45 $$ setupFragment = new String[] [ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_3 $$ Pair<Sdk, Module> sdkAndModule = PydevConsoleRunner.findPythonSdkAndModule(project, contextModule)[ CD ]
Line_37 $$ facet = BuildoutFacet.getInstance(module)-->Line_44 $$ String prependStatement = facet.getPathPrependStatement(path)[ FD ]
Line_4 $$ Module module = sdkAndModule.second-->Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()[ FD ]
Line_35 $$ BuildoutFacet facet = null-->Line_39 $$ if (facet != null) [ FD ]
Line_24 $$ if (ModuleManager.getInstance(project).getModules().length > 0) -->Line_26 $$ if (roots.length > 0) [ CD ]
Line_24 $$ if (ModuleManager.getInstance(project).getModules().length > 0) -->Line_25 $$ VirtualFile[] roots = ModuleRootManager.getInstance(ModuleManager.getInstance(project).getModules()[0]).getContentRoots()[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_15 $$ if (customStartScript.trim().length() > 0) [ CD ]
Line_4 $$ Module module = sdkAndModule.second-->Line_10 $$ Collection<String> pythonPath = PythonCommandLineState.collectPythonPath(module, settingsProvider.shouldAddContentRoots(), settingsProvider.shouldAddSourceRoots())[ FD ]
Line_4 $$ Module module = sdkAndModule.second-->Line_37 $$ facet = BuildoutFacet.getInstance(module)[ FD ]
Line_16 $$ customStartScript = "\n" + customStartScript-->Line_18 $$ String selfPathAppend = PydevConsoleRunner.constructPythonPathCommand(pythonPath, customStartScript)[ FD ]
Line_36 $$ if (module != null) -->Line_37 $$ facet = BuildoutFacet.getInstance(module)[ CD ]
Line_50 $$ String ipythonEnabled = PyConsoleOptions.getInstance(project).isIpythonEnabled() ? "True" : "False"-->Line_51 $$ envs.put(PythonEnvUtil.IPYTHONENABLE, ipythonEnabled)[ FD ]
Line_40 $$ List<String> path = facet.getAdditionalPythonPath()-->Line_42 $$ path = pathMapper.convertToRemote(path)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_35 $$ BuildoutFacet facet = null[ CD ]
Line_11 $$ if (pathMapper != null) -->Line_12 $$ pythonPath = pathMapper.convertToRemote(pythonPath)[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_50 $$ String ipythonEnabled = PyConsoleOptions.getInstance(project).isIpythonEnabled() ? "True" : "False"[ FD ]
Line_4 $$ Module module = sdkAndModule.second-->Line_21 $$ if (module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0) [ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_18 $$ String selfPathAppend = PydevConsoleRunner.constructPythonPathCommand(pythonPath, customStartScript)[ CD ]
Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()-->Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()[ FD ]
Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()-->Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)[ FD ]
Line_49 $$ Map<String, String> envs = Maps.newHashMap(settingsProvider.getEnvs())-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_37 $$ facet = BuildoutFacet.getInstance(module)-->Line_40 $$ List<String> path = facet.getAdditionalPythonPath()[ FD ]
Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()-->Line_10 $$ Collection<String> pythonPath = PythonCommandLineState.collectPythonPath(module, settingsProvider.shouldAddContentRoots(), settingsProvider.shouldAddSourceRoots())[ FD ]
Line_35 $$ BuildoutFacet facet = null-->Line_44 $$ String prependStatement = facet.getPathPrependStatement(path)[ FD ]
Line_8 $$ String[] setupFragment-->Line_45 $$ setupFragment = new String[] [ FD ]
Line_12 $$ pythonPath = pathMapper.convertToRemote(pythonPath)-->Line_18 $$ String selfPathAppend = PydevConsoleRunner.constructPythonPathCommand(pythonPath, customStartScript)[ FD ]
Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_26 $$ if (roots.length > 0) -->Line_27 $$ workingDir = roots[0].getPath()[ CD ]
Line_4 $$ Module module = sdkAndModule.second-->Line_36 $$ if (module != null) [ FD ]
Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()-->Line_20 $$ if (StringUtil.isEmpty(workingDir)) [ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_14 $$ String customStartScript = settingsProvider.getCustomStartScript()[ CD ]
Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)-->Line_12 $$ pythonPath = pathMapper.convertToRemote(pythonPath)[ FD ]
Line_42 $$ path = pathMapper.convertToRemote(path)-->Line_44 $$ String prependStatement = facet.getPathPrependStatement(path)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_5 $$ Sdk sdk = sdkAndModule.first[ CD ]
Line_8 $$ String[] setupFragment-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_51 $$ envs.put(PythonEnvUtil.IPYTHONENABLE, ipythonEnabled)[ CD ]
Line_10 $$ Collection<String> pythonPath = PythonCommandLineState.collectPythonPath(module, settingsProvider.shouldAddContentRoots(), settingsProvider.shouldAddSourceRoots())-->Line_18 $$ String selfPathAppend = PydevConsoleRunner.constructPythonPathCommand(pythonPath, customStartScript)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_10 $$ Collection<String> pythonPath = PythonCommandLineState.collectPythonPath(module, settingsProvider.shouldAddContentRoots(), settingsProvider.shouldAddSourceRoots())[ CD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()[ CD ]
Line_8 $$ String[] setupFragment-->Line_47 $$ setupFragment = new String[] [ FD ]
Line_47 $$ setupFragment = new String[] -->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)[ FD ]
Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()-->Line_14 $$ String customStartScript = settingsProvider.getCustomStartScript()[ FD ]
Line_37 $$ facet = BuildoutFacet.getInstance(module)-->Line_39 $$ if (facet != null) [ FD ]
Line_41 $$ if (pathMapper != null) -->Line_42 $$ path = pathMapper.convertToRemote(path)[ CD ]
Line_35 $$ BuildoutFacet facet = null-->Line_40 $$ List<String> path = facet.getAdditionalPythonPath()[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_50 $$ String ipythonEnabled = PyConsoleOptions.getInstance(project).isIpythonEnabled() ? "True" : "False"[ CD ]
Line_39 $$ if (facet != null) -->Line_41 $$ if (pathMapper != null) [ CD ]
Line_40 $$ List<String> path = facet.getAdditionalPythonPath()-->Line_44 $$ String prependStatement = facet.getPathPrependStatement(path)[ FD ]
Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)-->Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)[ FD ]
Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()-->Line_27 $$ workingDir = roots[0].getPath()[ FD ]
Line_32 $$ if (pathMapper != null && workingDir != null) -->Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)[ CD ]
Line_21 $$ if (module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0) -->Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()[ CD ]
Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)[ CD ]
Line_39 $$ if (facet != null) -->Line_44 $$ String prependStatement = facet.getPathPrependStatement(path)[ CD ]
Line_10 $$ Collection<String> pythonPath = PythonCommandLineState.collectPythonPath(module, settingsProvider.shouldAddContentRoots(), settingsProvider.shouldAddSourceRoots())-->Line_12 $$ pythonPath = pathMapper.convertToRemote(pythonPath)[ FD ]
Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)-->Line_41 $$ if (pathMapper != null) [ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_8 $$ String[] setupFragment[ CD ]
Line_14 $$ String customStartScript = settingsProvider.getCustomStartScript()-->Line_15 $$ if (customStartScript.trim().length() > 0) [ FD ]
Line_35 $$ BuildoutFacet facet = null-->Line_37 $$ facet = BuildoutFacet.getInstance(module)[ FD ]
Line_7 $$ PathMapper pathMapper = PydevConsoleRunner.getPathMapper(project, sdk)-->Line_42 $$ path = pathMapper.convertToRemote(path)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_11 $$ if (pathMapper != null) [ CD ]
Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()-->Line_19 $$ String workingDir = settingsProvider.getWorkingDirectory()[ FD ]
Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()-->Line_33 $$ workingDir = pathMapper.convertToRemote(workingDir)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_32 $$ if (pathMapper != null && workingDir != null) [ CD ]
Line_5 $$ Sdk sdk = sdkAndModule.first-->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_3 $$ Pair<Sdk, Module> sdkAndModule = PydevConsoleRunner.findPythonSdkAndModule(project, contextModule)[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_52 $$ return createConsoleRunner(project, sdk, workingDir, envs, PyConsoleType.PYTHON, setupFragment)[ CD ]
Line_22 $$ workingDir = ModuleRootManager.getInstance(module).getContentRoots()[0].getPath()-->Line_27 $$ workingDir = roots[0].getPath()[ FD ]
Line_2 $$ public PydevConsoleRunner createConsoleRunner(@NotNull Project project, @Nullable Module contextModule) -->Line_20 $$ if (StringUtil.isEmpty(workingDir)) [ CD ]
Line_9 $$ PyConsoleOptions.PyConsoleSettings settingsProvider = PyConsoleOptions.getInstance(project).getPythonConsoleSettings()-->Line_49 $$ Map<String, String> envs = Maps.newHashMap(settingsProvider.getEnvs())[ FD ]
Line_20 $$ if (StringUtil.isEmpty(workingDir)) -->Line_21 $$ if (module != null && ModuleRootManager.getInstance(module).getContentRoots().length > 0) [ CD ]
