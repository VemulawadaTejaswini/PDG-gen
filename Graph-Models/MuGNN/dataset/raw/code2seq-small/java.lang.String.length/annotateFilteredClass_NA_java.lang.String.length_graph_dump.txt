Line_16 $$ final File packageRoot = findRelativeFile(packageVMName, outputPath)-->Line_19 $$ final File[] files = packageRoot.listFiles()[ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_4 $$ if (data == null)[ CD ]
Line_25 $$ final String toplevelClassSrcFQName = getSourceToplevelFQName(classFqVMName)-->Line_26 $$ if (toplevelClassSrcFQName.equals(qualifiedName)) [ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()[ FD ]
Line_24 $$ final String classFqVMName = packageVMName.length() > 0 ? packageVMName + "/" + childName : childName-->Line_25 $$ final String toplevelClassSrcFQName = getSourceToplevelFQName(classFqVMName)[ FD ]
Line_17 $$ if (packageRoot != null && packageRoot.exists()) -->Line_19 $$ final File[] files = packageRoot.listFiles()[ CD ]
Line_17 $$ if (packageRoot != null && packageRoot.exists()) -->Line_20 $$ if (files != null) [ CD ]
Line_21 $$ for (File child : files) -->Line_22 $$ if (isClassFile(child)) [ FD ]
Line_3 $$ final ProjectData data = bundle.getCoverageData()-->Line_4 $$ if (data == null)[ FD ]
Line_22 $$ if (isClassFile(child)) -->Line_24 $$ final String classFqVMName = packageVMName.length() > 0 ? packageVMName + "/" + childName : childName[ CD ]
Line_18 $$ Map<String, ClassCoverageInfo> toplevelClassCoverage = new HashMap<String, ClassCoverageInfo>()-->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_16 $$ final File packageRoot = findRelativeFile(packageVMName, outputPath)-->Line_17 $$ if (packageRoot != null && packageRoot.exists()) [ FD ]
Line_10 $$ final VirtualFile outputPath = isInTests ? moduleExtension.getCompilerOutputPathForTests() : moduleExtension.getCompilerOutputPath()-->Line_16 $$ final File packageRoot = findRelativeFile(packageVMName, outputPath)[ FD ]
Line_3 $$ final ProjectData data = bundle.getCoverageData()-->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_19 $$ final File[] files = packageRoot.listFiles()-->Line_20 $$ if (files != null) [ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_3 $$ final ProjectData data = bundle.getCoverageData()[ FD ]
Line_13 $$ if (qualifiedName == null)-->Line_14 $$ return[ CD ]
Line_4 $$ if (data == null)-->Line_5 $$ return[ CD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_6 $$ final Module module = ModuleUtil.findModuleForPsiElement(psiClass)[ CD ]
Line_22 $$ if (isClassFile(child)) -->Line_23 $$ final String childName = getClassName(child)[ CD ]
Line_11 $$ if (outputPath != null) -->Line_17 $$ if (packageRoot != null && packageRoot.exists()) [ CD ]
Line_15 $$ final String packageVMName = StringUtil.getPackageName(qualifiedName).replace('.', '/')-->Line_24 $$ final String classFqVMName = packageVMName.length() > 0 ? packageVMName + "/" + childName : childName[ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_6 $$ final Module module = ModuleUtil.findModuleForPsiElement(psiClass)[ FD ]
Line_6 $$ final Module module = ModuleUtil.findModuleForPsiElement(psiClass)-->Line_9 $$ final CompilerModuleExtension moduleExtension = CompilerModuleExtension.getInstance(module)[ FD ]
Line_10 $$ final VirtualFile outputPath = isInTests ? moduleExtension.getCompilerOutputPathForTests() : moduleExtension.getCompilerOutputPath()-->Line_11 $$ if (outputPath != null) [ FD ]
Line_18 $$ Map<String, ClassCoverageInfo> toplevelClassCoverage = new HashMap<String, ClassCoverageInfo>()-->Line_32 $$ for (ClassCoverageInfo coverageInfo : toplevelClassCoverage.values()) [ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_8 $$ final boolean isInTests = ProjectRootManager.getInstance(module.getProject()).getFileIndex().isInTestSourceContent(psiClass.getContainingFile().getVirtualFile())[ FD ]
Line_7 $$ if (module != null) -->Line_11 $$ if (outputPath != null) [ CD ]
Line_26 $$ if (toplevelClassSrcFQName.equals(qualifiedName)) -->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ CD ]
Line_24 $$ final String classFqVMName = packageVMName.length() > 0 ? packageVMName + "/" + childName : childName-->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_7 $$ if (module != null) -->Line_8 $$ final boolean isInTests = ProjectRootManager.getInstance(module.getProject()).getFileIndex().isInTestSourceContent(psiClass.getContainingFile().getVirtualFile())[ CD ]
Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_15 $$ final String packageVMName = StringUtil.getPackageName(qualifiedName).replace('.', '/')[ FD ]
Line_6 $$ final Module module = ModuleUtil.findModuleForPsiElement(psiClass)-->Line_8 $$ final boolean isInTests = ProjectRootManager.getInstance(module.getProject()).getFileIndex().isInTestSourceContent(psiClass.getContainingFile().getVirtualFile())[ FD ]
Line_25 $$ final String toplevelClassSrcFQName = getSourceToplevelFQName(classFqVMName)-->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_32 $$ for (ClassCoverageInfo coverageInfo : toplevelClassCoverage.values()) -->Line_33 $$ annotator.annotateClass(qualifiedName, coverageInfo)[ FD ]
Line_21 $$ for (File child : files) -->Line_23 $$ final String childName = getClassName(child)[ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_7 $$ if (module != null) [ CD ]
Line_6 $$ final Module module = ModuleUtil.findModuleForPsiElement(psiClass)-->Line_7 $$ if (module != null) [ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_9 $$ final CompilerModuleExtension moduleExtension = CompilerModuleExtension.getInstance(module)-->Line_10 $$ final VirtualFile outputPath = isInTests ? moduleExtension.getCompilerOutputPathForTests() : moduleExtension.getCompilerOutputPath()[ FD ]
Line_7 $$ if (module != null) -->Line_10 $$ final VirtualFile outputPath = isInTests ? moduleExtension.getCompilerOutputPathForTests() : moduleExtension.getCompilerOutputPath()[ CD ]
Line_22 $$ if (isClassFile(child)) -->Line_26 $$ if (toplevelClassSrcFQName.equals(qualifiedName)) [ CD ]
Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_26 $$ if (toplevelClassSrcFQName.equals(qualifiedName)) [ FD ]
Line_11 $$ if (outputPath != null) -->Line_13 $$ if (qualifiedName == null)[ CD ]
Line_17 $$ if (packageRoot != null && packageRoot.exists()) -->Line_18 $$ Map<String, ClassCoverageInfo> toplevelClassCoverage = new HashMap<String, ClassCoverageInfo>()[ CD ]
Line_11 $$ if (outputPath != null) -->Line_16 $$ final File packageRoot = findRelativeFile(packageVMName, outputPath)[ CD ]
Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_13 $$ if (qualifiedName == null)[ FD ]
Line_15 $$ final String packageVMName = StringUtil.getPackageName(qualifiedName).replace('.', '/')-->Line_16 $$ final File packageRoot = findRelativeFile(packageVMName, outputPath)[ FD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_3 $$ final ProjectData data = bundle.getCoverageData()[ CD ]
Line_22 $$ if (isClassFile(child)) -->Line_25 $$ final String toplevelClassSrcFQName = getSourceToplevelFQName(classFqVMName)[ CD ]
Line_11 $$ if (outputPath != null) -->Line_15 $$ final String packageVMName = StringUtil.getPackageName(qualifiedName).replace('.', '/')[ CD ]
Line_2 $$ public void annotateFilteredClass(PsiClass psiClass, CoverageSuitesBundle bundle, Annotator annotator) -->Line_33 $$ annotator.annotateClass(qualifiedName, coverageInfo)[ FD ]
Line_21 $$ for (File child : files) -->Line_27 $$ collectClassCoverageInformation(child, psiClass, new PackageCoverageInfo(), data, toplevelClassCoverage, classFqVMName.replace("/", "."), toplevelClassSrcFQName)[ FD ]
Line_11 $$ if (outputPath != null) -->Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()[ CD ]
Line_12 $$ final String qualifiedName = psiClass.getQualifiedName()-->Line_33 $$ annotator.annotateClass(qualifiedName, coverageInfo)[ FD ]
Line_7 $$ if (module != null) -->Line_9 $$ final CompilerModuleExtension moduleExtension = CompilerModuleExtension.getInstance(module)[ CD ]
