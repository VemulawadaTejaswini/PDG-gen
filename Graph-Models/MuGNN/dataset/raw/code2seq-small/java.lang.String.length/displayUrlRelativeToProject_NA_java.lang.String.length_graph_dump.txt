Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_10 $$ if (SystemInfo.isMac && file.getFileSystem() instanceof LocalFileProvider) [ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_10 $$ if (SystemInfo.isMac && file.getFileSystem() instanceof LocalFileProvider) [ FD ]
Line_10 $$ if (SystemInfo.isMac && file.getFileSystem() instanceof LocalFileProvider) -->Line_12 $$ if (fileForJar != null) [ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_28 $$ return !keepModuleAlwaysOnTheLeft && SystemInfo.isMac ? url + " - [" + module.getName() + "]" : "[" + module.getName() + "] - " + url[ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_11 $$ final VirtualFile fileForJar = ((LocalFileProvider) file.getFileSystem()).getLocalVirtualFileFor(file)[ FD ]
Line_4 $$ if (baseDir != null && includeFilePath) -->Line_6 $$ if (url.startsWith(projectHomeUrl)) [ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_3 $$ final VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_25 $$ final Module module = ModuleUtilCore.findModuleForFile(file, project)[ CD ]
Line_5 $$ final String projectHomeUrl = baseDir.getPresentableUrl()-->Line_7 $$ url = "..." + url.substring(projectHomeUrl.length())[ FD ]
Line_13 $$ final OrderEntry libraryEntry = LibraryUtil.findLibraryEntry(file, project)-->Line_14 $$ if (libraryEntry != null) [ FD ]
Line_12 $$ if (fileForJar != null) -->Line_13 $$ final OrderEntry libraryEntry = LibraryUtil.findLibraryEntry(file, project)[ CD ]
Line_14 $$ if (libraryEntry != null) -->Line_15 $$ if (libraryEntry instanceof JdkOrderEntry) [ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_13 $$ final OrderEntry libraryEntry = LibraryUtil.findLibraryEntry(file, project)[ FD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_7 $$ url = "..." + url.substring(projectHomeUrl.length())[ FD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_28 $$ return !keepModuleAlwaysOnTheLeft && SystemInfo.isMac ? url + " - [" + module.getName() + "]" : "[" + module.getName() + "] - " + url[ FD ]
Line_25 $$ final Module module = ModuleUtilCore.findModuleForFile(file, project)-->Line_26 $$ if (module == null)[ FD ]
Line_4 $$ if (baseDir != null && includeFilePath) -->Line_5 $$ final String projectHomeUrl = baseDir.getPresentableUrl()[ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_25 $$ final Module module = ModuleUtilCore.findModuleForFile(file, project)[ FD ]
Line_3 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_5 $$ final String projectHomeUrl = baseDir.getPresentableUrl()[ FD ]
Line_12 $$ if (fileForJar != null) -->Line_14 $$ if (libraryEntry != null) [ CD ]
Line_10 $$ if (SystemInfo.isMac && file.getFileSystem() instanceof LocalFileProvider) -->Line_11 $$ final VirtualFile fileForJar = ((LocalFileProvider) file.getFileSystem()).getLocalVirtualFileFor(file)[ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_6 $$ if (url.startsWith(projectHomeUrl)) [ FD ]
Line_5 $$ final String projectHomeUrl = baseDir.getPresentableUrl()-->Line_6 $$ if (url.startsWith(projectHomeUrl)) [ FD ]
Line_26 $$ if (module == null)-->Line_27 $$ return url[ CD ]
Line_11 $$ final VirtualFile fileForJar = ((LocalFileProvider) file.getFileSystem()).getLocalVirtualFileFor(file)-->Line_12 $$ if (fileForJar != null) [ FD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_4 $$ if (baseDir != null && includeFilePath) [ FD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_4 $$ if (baseDir != null && includeFilePath) [ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_26 $$ if (module == null)[ CD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_26 $$ if (module == null)[ FD ]
Line_13 $$ final OrderEntry libraryEntry = LibraryUtil.findLibraryEntry(file, project)-->Line_18 $$ url = url + " - [" + libraryEntry.getPresentableName() + "]"[ FD ]
Line_13 $$ final OrderEntry libraryEntry = LibraryUtil.findLibraryEntry(file, project)-->Line_15 $$ if (libraryEntry instanceof JdkOrderEntry) [ FD ]
Line_11 $$ final VirtualFile fileForJar = ((LocalFileProvider) file.getFileSystem()).getLocalVirtualFileFor(file)-->Line_21 $$ url = url + " - [" + fileForJar.getName() + "]"[ FD ]
Line_2 $$ public static String displayUrlRelativeToProject(@NotNull VirtualFile file, @NotNull String url, @NotNull Project project, boolean includeFilePath, boolean keepModuleAlwaysOnTheLeft) -->Line_3 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_25 $$ final Module module = ModuleUtilCore.findModuleForFile(file, project)-->Line_28 $$ return !keepModuleAlwaysOnTheLeft && SystemInfo.isMac ? url + " - [" + module.getName() + "]" : "[" + module.getName() + "] - " + url[ FD ]
