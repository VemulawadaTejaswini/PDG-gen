Line_9 $$ for (final SourceFolder sourceFolder : contentEntry.getSourceFolders(JavaModuleSourceRootTypes.SOURCES)) -->Line_10 $$ final String packagePrefix = sourceFolder.getPackagePrefix()[ FD ]
Line_6 $$ boolean anyChange = false-->Line_13 $$ anyChange = true[ FD ]
Line_23 $$ if (!modelsToCommit.isEmpty()) -->Line_30 $$ return false[ CD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_4 $$ List<ModifiableRootModel> modelsToCommit = new ArrayList<ModifiableRootModel>()[ CD ]
Line_17 $$ if (anyChange) -->Line_18 $$ modelsToCommit.add(rootModel)[ CD ]
Line_23 $$ if (!modelsToCommit.isEmpty()) -->Line_28 $$ return true[ CD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_23 $$ if (!modelsToCommit.isEmpty()) [ CD ]
Line_17 $$ if (anyChange) -->Line_20 $$ rootModel.dispose()[ CD ]
Line_7 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()-->Line_18 $$ modelsToCommit.add(rootModel)[ FD ]
Line_7 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()-->Line_20 $$ rootModel.dispose()[ FD ]
Line_10 $$ final String packagePrefix = sourceFolder.getPackagePrefix()-->Line_12 $$ sourceFolder.setPackagePrefix(newQualifiedName + packagePrefix.substring(oldQualifiedName.length()))[ FD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_11 $$ if (packagePrefix.startsWith(oldQualifiedName)) [ FD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_3 $$ final Module[] modules = ModuleManager.getInstance(psiPackage.getProject()).getModules()[ FD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_3 $$ final Module[] modules = ModuleManager.getInstance(psiPackage.getProject()).getModules()[ CD ]
Line_8 $$ for (final ContentEntry contentEntry : rootModel.getContentEntries()) -->Line_9 $$ for (final SourceFolder sourceFolder : contentEntry.getSourceFolders(JavaModuleSourceRootTypes.SOURCES)) [ FD ]
Line_4 $$ List<ModifiableRootModel> modelsToCommit = new ArrayList<ModifiableRootModel>()-->Line_18 $$ modelsToCommit.add(rootModel)[ FD ]
Line_11 $$ if (packagePrefix.startsWith(oldQualifiedName)) -->Line_13 $$ anyChange = true[ CD ]
Line_9 $$ for (final SourceFolder sourceFolder : contentEntry.getSourceFolders(JavaModuleSourceRootTypes.SOURCES)) -->Line_12 $$ sourceFolder.setPackagePrefix(newQualifiedName + packagePrefix.substring(oldQualifiedName.length()))[ FD ]
Line_7 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()-->Line_8 $$ for (final ContentEntry contentEntry : rootModel.getContentEntries()) [ FD ]
Line_11 $$ if (packagePrefix.startsWith(oldQualifiedName)) -->Line_12 $$ sourceFolder.setPackagePrefix(newQualifiedName + packagePrefix.substring(oldQualifiedName.length()))[ CD ]
Line_10 $$ final String packagePrefix = sourceFolder.getPackagePrefix()-->Line_11 $$ if (packagePrefix.startsWith(oldQualifiedName)) [ FD ]
Line_23 $$ if (!modelsToCommit.isEmpty()) -->Line_25 $$ if (rootModels.length > 0) [ CD ]
Line_23 $$ if (!modelsToCommit.isEmpty()) -->Line_24 $$ ModifiableRootModel[] rootModels = modelsToCommit.toArray(new ModifiableRootModel[modelsToCommit.size()])[ CD ]
Line_4 $$ List<ModifiableRootModel> modelsToCommit = new ArrayList<ModifiableRootModel>()-->Line_23 $$ if (!modelsToCommit.isEmpty()) [ FD ]
Line_4 $$ List<ModifiableRootModel> modelsToCommit = new ArrayList<ModifiableRootModel>()-->Line_24 $$ ModifiableRootModel[] rootModels = modelsToCommit.toArray(new ModifiableRootModel[modelsToCommit.size()])[ FD ]
Line_25 $$ if (rootModels.length > 0) -->Line_26 $$ ModifiableModelCommitter.multiCommit(rootModels, ModuleManager.getInstance(rootModels[0].getProject()).getModifiableModel())[ CD ]
Line_24 $$ ModifiableRootModel[] rootModels = modelsToCommit.toArray(new ModifiableRootModel[modelsToCommit.size()])-->Line_26 $$ ModifiableModelCommitter.multiCommit(rootModels, ModuleManager.getInstance(rootModels[0].getProject()).getModifiableModel())[ FD ]
Line_5 $$ for (final Module module : modules) -->Line_7 $$ final ModifiableRootModel rootModel = ModuleRootManager.getInstance(module).getModifiableModel()[ FD ]
Line_2 $$ private static boolean changePackagePrefixes(@NotNull PsiPackage psiPackage, @NotNull String oldQualifiedName, @NotNull String newQualifiedName) -->Line_12 $$ sourceFolder.setPackagePrefix(newQualifiedName + packagePrefix.substring(oldQualifiedName.length()))[ FD ]
