Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_24 $$ editor.getCaretModel().moveToOffset(caretOffset)[ CD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_5 $$ int i = line.lastIndexOf('\n')[ CD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_6 $$ if (i > 0) [ CD ]
Line_9 $$ final String toInsert-->Line_11 $$ toInsert = "\n  "[ FD ]
Line_11 $$ toInsert = "\n  "-->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) [ CD ]
Line_5 $$ int i = line.lastIndexOf('\n')-->Line_6 $$ if (i > 0) [ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_13 $$ final IElementType elementType = psiAtOffset == null ? null : psiAtOffset.getNode().getElementType()[ FD ]
Line_11 $$ toInsert = "\n  "-->Line_17 $$ toInsert = "\n#"[ FD ]
Line_7 $$ line = line.substring(i)-->Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) [ FD ]
Line_11 $$ toInsert = "\n  "-->Line_19 $$ toInsert = "\n"[ FD ]
Line_9 $$ final String toInsert-->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_15 $$ toInsert = "\\\n  "-->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_9 $$ final String toInsert[ CD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_16 $$ if (elementType == PropertiesTokenTypes.END_OF_LINE_COMMENT && "#!".indexOf(document.getText().charAt(caretOffset)) == -1) [ FD ]
Line_15 $$ toInsert = "\\\n  "-->Line_17 $$ toInsert = "\n#"[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_26 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_9 $$ final String toInsert-->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_16 $$ if (elementType == PropertiesTokenTypes.END_OF_LINE_COMMENT && "#!".indexOf(document.getText().charAt(caretOffset)) == -1) -->Line_17 $$ toInsert = "\n#"[ CD ]
Line_17 $$ toInsert = "\n#"-->Line_19 $$ toInsert = "\n"[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_26 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_9 $$ final String toInsert-->Line_15 $$ toInsert = "\\\n  "[ FD ]
Line_19 $$ toInsert = "\n"-->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_3 $$ String text = document.getText()[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_4 $$ String line = text.substring(0, caretOffset)[ CD ]
Line_14 $$ if (elementType == PropertiesTokenTypes.VALUE_CHARACTERS) -->Line_15 $$ toInsert = "\\\n  "[ CD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_4 $$ String line = text.substring(0, caretOffset)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_22 $$ document.insertString(caretOffset, toInsert)[ CD ]
Line_19 $$ toInsert = "\n"-->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_15 $$ toInsert = "\\\n  "-->Line_19 $$ toInsert = "\n"[ FD ]
Line_14 $$ if (elementType == PropertiesTokenTypes.VALUE_CHARACTERS) -->Line_16 $$ if (elementType == PropertiesTokenTypes.END_OF_LINE_COMMENT && "#!".indexOf(document.getText().charAt(caretOffset)) == -1) [ CD ]
Line_16 $$ if (elementType == PropertiesTokenTypes.END_OF_LINE_COMMENT && "#!".indexOf(document.getText().charAt(caretOffset)) == -1) -->Line_19 $$ toInsert = "\n"[ CD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_9 $$ final String toInsert-->Line_19 $$ toInsert = "\n"[ FD ]
Line_23 $$ caretOffset += toInsert.length()-->Line_24 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_4 $$ String line = text.substring(0, caretOffset)-->Line_7 $$ line = line.substring(i)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_3 $$ String text = document.getText()[ CD ]
Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) -->Line_11 $$ toInsert = "\n  "[ CD ]
Line_11 $$ toInsert = "\n  "-->Line_15 $$ toInsert = "\\\n  "[ FD ]
Line_17 $$ toInsert = "\n#"-->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_9 $$ final String toInsert-->Line_17 $$ toInsert = "\n#"[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_25 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_11 $$ toInsert = "\n  "-->Line_22 $$ document.insertString(caretOffset, toInsert)[ FD ]
Line_4 $$ String line = text.substring(0, caretOffset)-->Line_5 $$ int i = line.lastIndexOf('\n')[ FD ]
Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) -->Line_13 $$ final IElementType elementType = psiAtOffset == null ? null : psiAtOffset.getNode().getElementType()[ CD ]
Line_6 $$ if (i > 0) -->Line_7 $$ line = line.substring(i)[ CD ]
Line_4 $$ String line = text.substring(0, caretOffset)-->Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) [ FD ]
Line_5 $$ int i = line.lastIndexOf('\n')-->Line_7 $$ line = line.substring(i)[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_25 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_13 $$ final IElementType elementType = psiAtOffset == null ? null : psiAtOffset.getNode().getElementType()-->Line_14 $$ if (elementType == PropertiesTokenTypes.VALUE_CHARACTERS) [ FD ]
Line_17 $$ toInsert = "\n#"-->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_23 $$ caretOffset += toInsert.length()[ CD ]
Line_15 $$ toInsert = "\\\n  "-->Line_23 $$ caretOffset += toInsert.length()[ FD ]
Line_2 $$ private static void handleEnterInPropertiesFile(final Editor editor, final Document document, final PsiElement psiAtOffset, int caretOffset) -->Line_24 $$ editor.getCaretModel().moveToOffset(caretOffset)[ FD ]
Line_10 $$ if (PropertiesUtil.isUnescapedBackSlashAtTheEnd(line)) -->Line_14 $$ if (elementType == PropertiesTokenTypes.VALUE_CHARACTERS) [ CD ]
Line_3 $$ String text = document.getText()-->Line_4 $$ String line = text.substring(0, caretOffset)[ FD ]
