Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_8 $$ final String contents = FileUtil.loadFile(servers)[ CD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_6 $$ myAuthenticationManager.addListener(savedOnceListener)[ CD ]
Line_8 $$ final String contents = FileUtil.loadFile(servers)-->Line_10 $$ final int idx = contents.indexOf(groups)[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_50 $$ Assert.assertEquals(6, listener.getCnt())[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_28 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.persistent, url, Type.without_pasword_save))[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()[ CD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_30 $$ Assert.assertEquals(3, listener.getCnt())[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_14 $$ FileUtil.rename(servers, oldServers)[ CD ]
Line_13 $$ final File oldServers = new File(myConfiguration.getConfigurationDirectory(), "config_old")-->Line_14 $$ FileUtil.rename(servers, oldServers)[ FD ]
Line_8 $$ final String contents = FileUtil.loadFile(servers)-->Line_12 $$ final String newContents = contents.substring(0, idx + groups.length()) + "\nsomegroup=some*\n" + contents.substring(idx + groups.length()) + "\n[somegroup]\nstore-passwords=no\n"[ FD ]
Line_12 $$ final String newContents = contents.substring(0, idx + groups.length()) + "\nsomegroup=some*\n" + contents.substring(idx + groups.length()) + "\n[somegroup]\nstore-passwords=no\n"-->Line_17 $$ FileUtil.appendToFile(servers, newContents)[ FD ]
Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()-->Line_34 $$ savedOnceListener.reset()[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_40 $$ Assert.assertEquals(6, listener.getCnt())[ FD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_59 $$ FileUtil.rename(oldServers, servers)[ FD ]
Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()-->Line_33 $$ savedOnceListener.assertForAwt()[ FD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_58 $$ FileUtil.delete(servers)[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")[ CD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_12 $$ final String newContents = contents.substring(0, idx + groups.length()) + "\nsomegroup=some*\n" + contents.substring(idx + groups.length()) + "\n[somegroup]\nstore-passwords=no\n"[ CD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_16 $$ servers.createNewFile()[ FD ]
Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()-->Line_53 $$ savedOnceListener.assertSaved(url, ISVNAuthenticationManager.PASSWORD)[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_38 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.persistent, url, Type.without_pasword_save))[ FD ]
Line_13 $$ final File oldServers = new File(myConfiguration.getConfigurationDirectory(), "config_old")-->Line_59 $$ FileUtil.rename(oldServers, servers)[ FD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_14 $$ FileUtil.rename(servers, oldServers)[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_26 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.persistent, url, Type.request))[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_51 $$ listener.assertForAwt()[ FD ]
Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()-->Line_6 $$ myAuthenticationManager.addListener(savedOnceListener)[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_4 $$ myAuthenticationManager.addListener(listener)[ CD ]
Line_18 $$ final SVNURL url = SVNURL.parseURIEncoded("http://some.host.com/repo")-->Line_53 $$ savedOnceListener.assertSaved(url, ISVNAuthenticationManager.PASSWORD)[ FD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_17 $$ FileUtil.appendToFile(servers, newContents)[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_36 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.persistent, url, Type.request))[ FD ]
Line_7 $$ final File servers = new File(myConfiguration.getConfigurationDirectory(), "servers")-->Line_8 $$ final String contents = FileUtil.loadFile(servers)[ FD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_37 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.interactive, url, Type.request))[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_11 $$ Assert.assertTrue(idx != -1)[ CD ]
Line_5 $$ final SavedOnceListener savedOnceListener = new SavedOnceListener()-->Line_52 $$ savedOnceListener.assertForAwt()[ FD ]
Line_9 $$ final String groups = "[groups]"-->Line_10 $$ final int idx = contents.indexOf(groups)[ FD ]
Line_9 $$ final String groups = "[groups]"-->Line_12 $$ final String newContents = contents.substring(0, idx + groups.length()) + "\nsomegroup=some*\n" + contents.substring(idx + groups.length()) + "\n[somegroup]\nstore-passwords=no\n"[ FD ]
Line_18 $$ final SVNURL url = SVNURL.parseURIEncoded("http://some.host.com/repo")-->Line_29 $$ commonScheme(url, false, null)[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_3 $$ final TestListener listener = new TestListener(mySynchObject)[ CD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_10 $$ final int idx = contents.indexOf(groups)[ CD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_27 $$ listener.addStep(new Trinity<ProviderType, SVNURL, Type>(ProviderType.interactive, url, Type.request))[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_9 $$ final String groups = "[groups]"[ CD ]
Line_21 $$ synchronousBackground(new Runnable() -->Line_45 $$ result[0] = true[ CD ]
Line_3 $$ final TestListener listener = new TestListener(mySynchObject)-->Line_4 $$ myAuthenticationManager.addListener(listener)[ FD ]
Line_18 $$ final SVNURL url = SVNURL.parseURIEncoded("http://some.host.com/repo")-->Line_39 $$ commonScheme(url, false, null)[ FD ]
Line_2 $$ public void testWhenPassSaveNoForGroup() throws Exception -->Line_13 $$ final File oldServers = new File(myConfiguration.getConfigurationDirectory(), "config_old")[ CD ]
