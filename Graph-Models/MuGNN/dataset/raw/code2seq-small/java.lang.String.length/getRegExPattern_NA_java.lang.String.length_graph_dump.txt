Line_5 $$ char next = pattern.charAt(i)-->Line_12 $$ result.append(next)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_11 $$ result.append('\\')[ FD ]
Line_8 $$ if (next == '?') -->Line_9 $$ result.append(".")[ CD ]
Line_4 $$ for (int i = 0; i < pattern.length(); i++) -->Line_6 $$ if (next == '*') [ CD ]
Line_6 $$ if (next == '*') -->Line_7 $$ result.append(".*")[ CD ]
Line_2 $$ protected static String getRegExPattern(String pattern) -->Line_17 $$ return result.toString()[ CD ]
Line_5 $$ char next = pattern.charAt(i)-->Line_14 $$ result.append(next)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_14 $$ result.append(next)[ FD ]
Line_8 $$ if (next == '?') -->Line_10 $$ if (ESCAPE_CHARS.indexOf(next) >= 0) [ CD ]
Line_10 $$ if (ESCAPE_CHARS.indexOf(next) >= 0) -->Line_11 $$ result.append('\\')[ CD ]
Line_4 $$ for (int i = 0; i < pattern.length(); i++) -->Line_5 $$ char next = pattern.charAt(i)[ FD ]
Line_2 $$ protected static String getRegExPattern(String pattern) -->Line_4 $$ for (int i = 0; i < pattern.length(); i++) [ FD ]
Line_2 $$ protected static String getRegExPattern(String pattern) -->Line_4 $$ for (int i = 0; i < pattern.length(); i++) [ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_17 $$ return result.toString()[ FD ]
Line_5 $$ char next = pattern.charAt(i)-->Line_8 $$ if (next == '?') [ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_12 $$ result.append(next)[ FD ]
Line_2 $$ protected static String getRegExPattern(String pattern) -->Line_5 $$ char next = pattern.charAt(i)[ FD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_7 $$ result.append(".*")[ FD ]
Line_10 $$ if (ESCAPE_CHARS.indexOf(next) >= 0) -->Line_12 $$ result.append(next)[ CD ]
Line_6 $$ if (next == '*') -->Line_8 $$ if (next == '?') [ CD ]
Line_5 $$ char next = pattern.charAt(i)-->Line_6 $$ if (next == '*') [ FD ]
Line_10 $$ if (ESCAPE_CHARS.indexOf(next) >= 0) -->Line_14 $$ result.append(next)[ CD ]
Line_3 $$ StringBuilder result = new StringBuilder()-->Line_9 $$ result.append(".")[ FD ]
Line_5 $$ char next = pattern.charAt(i)-->Line_10 $$ if (ESCAPE_CHARS.indexOf(next) >= 0) [ FD ]
Line_2 $$ protected static String getRegExPattern(String pattern) -->Line_3 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_4 $$ for (int i = 0; i < pattern.length(); i++) -->Line_5 $$ char next = pattern.charAt(i)[ CD ]
