Line_10 $$ int index = Math.min(index1, index2)-->Line_12 $$ text = text.substring(0, index)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_7 $$ int index2 = text.indexOf('\r')[ CD ]
Line_15 $$ if (trunc) -->Line_16 $$ buffer.append("...")[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_13 $$ buffer.append(label)[ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_9 $$ index2 = text.length()[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_8 $$ if (index2 < 0)[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_12 $$ text = text.substring(0, index)[ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_11 $$ boolean trunc = index < text.length()[ FD ]
Line_9 $$ index2 = text.length()-->Line_10 $$ int index = Math.min(index1, index2)[ FD ]
Line_7 $$ int index2 = text.indexOf('\r')-->Line_8 $$ if (index2 < 0)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_3 $$ String text = initializer.getText().trim()[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_10 $$ int index = Math.min(index1, index2)[ CD ]
Line_8 $$ if (index2 < 0)-->Line_9 $$ index2 = text.length()[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_14 $$ buffer.append(StringUtil.escapeXml(text))[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_5 $$ if (index1 < 0)[ CD ]
Line_12 $$ text = text.substring(0, index)-->Line_14 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_15 $$ if (trunc) [ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_4 $$ int index1 = text.indexOf('\n')[ FD ]
Line_4 $$ int index1 = text.indexOf('\n')-->Line_5 $$ if (index1 < 0)[ FD ]
Line_4 $$ int index1 = text.indexOf('\n')-->Line_6 $$ index1 = text.length()[ FD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_12 $$ text = text.substring(0, index)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_11 $$ boolean trunc = index < text.length()[ CD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_13 $$ buffer.append(label)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_18 $$ return trunc[ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_7 $$ int index2 = text.indexOf('\r')[ FD ]
Line_6 $$ index1 = text.length()-->Line_10 $$ int index = Math.min(index1, index2)[ FD ]
Line_5 $$ if (index1 < 0)-->Line_6 $$ index1 = text.length()[ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_6 $$ index1 = text.length()[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_4 $$ int index1 = text.indexOf('\n')[ CD ]
Line_3 $$ String text = initializer.getText().trim()-->Line_14 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_7 $$ int index2 = text.indexOf('\r')-->Line_9 $$ index2 = text.length()[ FD ]
Line_7 $$ int index2 = text.indexOf('\r')-->Line_10 $$ int index = Math.min(index1, index2)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_14 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_3 $$ String text = initializer.getText().trim()[ FD ]
Line_4 $$ int index1 = text.indexOf('\n')-->Line_10 $$ int index = Math.min(index1, index2)[ FD ]
Line_2 $$ public static boolean appendExpressionValue(StringBuilder buffer, PsiExpression initializer, String label) -->Line_16 $$ buffer.append("...")[ FD ]
