Line_18 $$ if (tempQueryBuilder.should().size() > 0) -->Line_20 $$ contentString += "should: " + should.toString() + ","[ CD ]
Line_20 $$ contentString += "should: " + should.toString() + ","-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_23 $$ if (tempQueryBuilder.filter().size() > 0) [ FD ]
Line_7 $$ String contentString = "-->Line_10 $$ contentString += "must: " + must.toString() + ","[ FD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_6 $$ BoolQueryBuilder expectedQuery = new BoolQueryBuilder()-->Line_26 $$ expectedQuery.filter(filter)[ FD ]
Line_25 $$ contentString += "filter: " + filter.toString() + ","-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_23 $$ if (tempQueryBuilder.filter().size() > 0) -->Line_26 $$ expectedQuery.filter(filter)[ CD ]
Line_18 $$ if (tempQueryBuilder.should().size() > 0) -->Line_21 $$ expectedQuery.should(should)[ CD ]
Line_23 $$ if (tempQueryBuilder.filter().size() > 0) -->Line_24 $$ QueryBuilder filter = tempQueryBuilder.filter().get(0)[ CD ]
Line_4 $$ Map<String, BoolQueryBuilder> alternateVersions = new HashMap()-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_9 $$ QueryBuilder must = tempQueryBuilder.must().get(0)-->Line_10 $$ contentString += "must: " + must.toString() + ","[ FD ]
Line_23 $$ if (tempQueryBuilder.filter().size() > 0) -->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ CD ]
Line_9 $$ QueryBuilder must = tempQueryBuilder.must().get(0)-->Line_11 $$ expectedQuery.must(must)[ FD ]
Line_7 $$ String contentString = "-->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ FD ]
Line_14 $$ QueryBuilder mustNot = tempQueryBuilder.mustNot().get(0)-->Line_16 $$ expectedQuery.mustNot(mustNot)[ FD ]
Line_6 $$ BoolQueryBuilder expectedQuery = new BoolQueryBuilder()-->Line_16 $$ expectedQuery.mustNot(mustNot)[ FD ]
Line_7 $$ String contentString = "-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)[ FD ]
Line_24 $$ QueryBuilder filter = tempQueryBuilder.filter().get(0)-->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ FD ]
Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","-->Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)[ FD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_14 $$ QueryBuilder mustNot = tempQueryBuilder.mustNot().get(0)[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_18 $$ if (tempQueryBuilder.should().size() > 0) [ FD ]
Line_20 $$ contentString += "should: " + should.toString() + ","-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_7 $$ String contentString = "-->Line_20 $$ contentString += "should: " + should.toString() + ","[ FD ]
Line_13 $$ if (tempQueryBuilder.mustNot().size() > 0) -->Line_16 $$ expectedQuery.mustNot(mustNot)[ CD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_8 $$ if (tempQueryBuilder.must().size() > 0) [ FD ]
Line_19 $$ QueryBuilder should = tempQueryBuilder.should().get(0)-->Line_21 $$ expectedQuery.should(should)[ FD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_20 $$ contentString += "should: " + should.toString() + ","[ FD ]
Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","-->Line_20 $$ contentString += "should: " + should.toString() + ","[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_13 $$ if (tempQueryBuilder.mustNot().size() > 0) [ FD ]
Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_14 $$ QueryBuilder mustNot = tempQueryBuilder.mustNot().get(0)-->Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_9 $$ QueryBuilder must = tempQueryBuilder.must().get(0)[ FD ]
Line_7 $$ String contentString = "-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_24 $$ QueryBuilder filter = tempQueryBuilder.filter().get(0)-->Line_26 $$ expectedQuery.filter(filter)[ FD ]
Line_25 $$ contentString += "filter: " + filter.toString() + ","-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_18 $$ if (tempQueryBuilder.should().size() > 0) -->Line_19 $$ QueryBuilder should = tempQueryBuilder.should().get(0)[ CD ]
Line_6 $$ BoolQueryBuilder expectedQuery = new BoolQueryBuilder()-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","-->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ FD ]
Line_8 $$ if (tempQueryBuilder.must().size() > 0) -->Line_10 $$ contentString += "must: " + must.toString() + ","[ CD ]
Line_20 $$ contentString += "should: " + should.toString() + ","-->Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)[ FD ]
Line_8 $$ if (tempQueryBuilder.must().size() > 0) -->Line_9 $$ QueryBuilder must = tempQueryBuilder.must().get(0)[ CD ]
Line_7 $$ String contentString = "-->Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","[ FD ]
Line_13 $$ if (tempQueryBuilder.mustNot().size() > 0) -->Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","[ CD ]
Line_20 $$ contentString += "should: " + should.toString() + ","-->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ FD ]
Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","-->Line_29 $$ contentString += "    }    \n" + "}"[ FD ]
Line_6 $$ BoolQueryBuilder expectedQuery = new BoolQueryBuilder()-->Line_21 $$ expectedQuery.should(should)[ FD ]
Line_8 $$ if (tempQueryBuilder.must().size() > 0) -->Line_11 $$ expectedQuery.must(must)[ CD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_15 $$ contentString += (randomBoolean() ? "must_not: " : "mustNot: ") + mustNot.toString() + ","[ FD ]
Line_6 $$ BoolQueryBuilder expectedQuery = new BoolQueryBuilder()-->Line_11 $$ expectedQuery.must(must)[ FD ]
Line_7 $$ String contentString = "-->Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)[ FD ]
Line_29 $$ contentString += "    }    \n" + "}"-->Line_30 $$ alternateVersions.put(contentString, expectedQuery)[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_19 $$ QueryBuilder should = tempQueryBuilder.should().get(0)[ FD ]
Line_19 $$ QueryBuilder should = tempQueryBuilder.should().get(0)-->Line_20 $$ contentString += "should: " + should.toString() + ","[ FD ]
Line_10 $$ contentString += "must: " + must.toString() + ","-->Line_25 $$ contentString += "filter: " + filter.toString() + ","[ FD ]
Line_5 $$ BoolQueryBuilder tempQueryBuilder = createTestQueryBuilder()-->Line_24 $$ QueryBuilder filter = tempQueryBuilder.filter().get(0)[ FD ]
Line_25 $$ contentString += "filter: " + filter.toString() + ","-->Line_28 $$ contentString = contentString.substring(0, contentString.length() - 1)[ FD ]
Line_13 $$ if (tempQueryBuilder.mustNot().size() > 0) -->Line_14 $$ QueryBuilder mustNot = tempQueryBuilder.mustNot().get(0)[ CD ]
