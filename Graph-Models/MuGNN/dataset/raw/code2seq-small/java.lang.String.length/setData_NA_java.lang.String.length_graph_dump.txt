Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_26 $$ myCbSearchTextOccurences.setSelected(searchForTextOccurences)[ FD ]
Line_35 $$ ((DestinationFolderComboBox) myDestinationFolderCB).setData(myProject, initialTargetDirectory, new Pass<String>() -->Line_37 $$ setErrorText(s)[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_5 $$ if (targetPackageName.length() != 0) [ CD ]
Line_12 $$ if (psiElements.length == 1) -->Line_13 $$ PsiElement firstElement = psiElements[0][ CD ]
Line_13 $$ PsiElement firstElement = psiElements[0]-->Line_20 $$ myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label", UsageViewUtil.getType(firstElement), UsageViewUtil.getLongName(firstElement)))[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_30 $$ collectSourceRoots(psiElements, fileIndex, initialRoots)[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_24 $$ selectInitialCard()[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_10 $$ if (nameFromCallback != null) [ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_25 $$ myCbSearchInComments.setSelected(searchInComments)[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_35 $$ ((DestinationFolderComboBox) myDestinationFolderCB).setData(myProject, initialTargetDirectory, new Pass<String>() [ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_35 $$ ((DestinationFolderComboBox) myDestinationFolderCB).setData(myProject, initialTargetDirectory, new Pass<String>() [ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_25 $$ myCbSearchInComments.setSelected(searchInComments)[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_6 $$ myWithBrowseButtonReference.prependItem(targetPackageName)[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) [ CD ]
Line_14 $$ if (firstElement instanceof PsiClass) -->Line_18 $$ LOG.assertTrue(parent != null)[ CD ]
Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) -->Line_29 $$ final Set<VirtualFile> initialRoots = new HashSet<VirtualFile>()[ CD ]
Line_32 $$ initialTargetDirectory = null-->Line_35 $$ ((DestinationFolderComboBox) myDestinationFolderCB).setData(myProject, initialTargetDirectory, new Pass<String>() [ FD ]
Line_12 $$ if (psiElements.length == 1) -->Line_21 $$ if (psiElements.length > 1) [ CD ]
Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) -->Line_30 $$ collectSourceRoots(psiElements, fileIndex, initialRoots)[ CD ]
Line_13 $$ PsiElement firstElement = psiElements[0]-->Line_17 $$ PsiElement parent = firstElement.getParent()[ FD ]
Line_21 $$ if (psiElements.length > 1) -->Line_22 $$ myNameLabel.setText(psiElements[0] instanceof PsiClass ? RefactoringBundle.message("move.specified.classes") : RefactoringBundle.message("move.specified.packages"))[ CD ]
Line_10 $$ if (nameFromCallback != null) -->Line_11 $$ myNameLabel.setText(nameFromCallback)[ CD ]
Line_13 $$ PsiElement firstElement = psiElements[0]-->Line_14 $$ if (firstElement instanceof PsiClass) [ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_5 $$ if (targetPackageName.length() != 0) [ FD ]
Line_9 $$ String nameFromCallback = myMoveCallback instanceof MoveClassesOrPackagesCallback ? ((MoveClassesOrPackagesCallback) myMoveCallback).getElementsToMoveName() : null-->Line_10 $$ if (nameFromCallback != null) [ FD ]
Line_31 $$ if (initialRoots.size() > 1) -->Line_32 $$ initialTargetDirectory = null[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_9 $$ String nameFromCallback = myMoveCallback instanceof MoveClassesOrPackagesCallback ? ((MoveClassesOrPackagesCallback) myMoveCallback).getElementsToMoveName() : null[ CD ]
Line_9 $$ String nameFromCallback = myMoveCallback instanceof MoveClassesOrPackagesCallback ? ((MoveClassesOrPackagesCallback) myMoveCallback).getElementsToMoveName() : null-->Line_11 $$ myNameLabel.setText(nameFromCallback)[ FD ]
Line_10 $$ if (nameFromCallback != null) -->Line_12 $$ if (psiElements.length == 1) [ CD ]
Line_12 $$ if (psiElements.length == 1) -->Line_20 $$ myNameLabel.setText(RefactoringBundle.message("move.single.class.or.package.name.label", UsageViewUtil.getType(firstElement), UsageViewUtil.getLongName(firstElement)))[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_32 $$ initialTargetDirectory = null[ FD ]
Line_5 $$ if (targetPackageName.length() != 0) -->Line_6 $$ myWithBrowseButtonReference.prependItem(targetPackageName)[ CD ]
Line_29 $$ final Set<VirtualFile> initialRoots = new HashSet<VirtualFile>()-->Line_31 $$ if (initialRoots.size() > 1) [ FD ]
Line_12 $$ if (psiElements.length == 1) -->Line_14 $$ if (firstElement instanceof PsiClass) [ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_7 $$ myClassPackageChooser.prependItem(targetPackageName)[ FD ]
Line_29 $$ final Set<VirtualFile> initialRoots = new HashSet<VirtualFile>()-->Line_30 $$ collectSourceRoots(psiElements, fileIndex, initialRoots)[ FD ]
Line_35 $$ ((DestinationFolderComboBox) myDestinationFolderCB).setData(myProject, initialTargetDirectory, new Pass<String>() -->Line_37 $$ setErrorText(s)[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_41 $$ validateButtons()[ CD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_26 $$ myCbSearchTextOccurences.setSelected(searchForTextOccurences)[ CD ]
Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) -->Line_28 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()[ CD ]
Line_14 $$ if (firstElement instanceof PsiClass) -->Line_17 $$ PsiElement parent = firstElement.getParent()[ CD ]
Line_14 $$ if (firstElement instanceof PsiClass) -->Line_15 $$ LOG.assertTrue(!MoveClassesOrPackagesImpl.isClassInnerOrLocal((PsiClass) firstElement))[ CD ]
Line_28 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_30 $$ collectSourceRoots(psiElements, fileIndex, initialRoots)[ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) [ FD ]
Line_2 $$ public void setData(PsiElement[] psiElements, String targetPackageName, PsiDirectory initialTargetDirectory, boolean isTargetDirectoryFixed, boolean suggestToMoveToAnotherRoot, boolean searchInComments, boolean searchForTextOccurences, String helpID) -->Line_40 $$ UIUtil.setEnabled(myTargetPanel, !getSourceRoots().isEmpty() && isMoveToPackage() && !isTargetDirectoryFixed, true)[ CD ]
Line_27 $$ if (initialTargetDirectory != null && JavaMoveClassesOrPackagesHandler.packageHasMultipleDirectoriesInModule(myProject, initialTargetDirectory)) -->Line_31 $$ if (initialRoots.size() > 1) [ CD ]
Line_5 $$ if (targetPackageName.length() != 0) -->Line_7 $$ myClassPackageChooser.prependItem(targetPackageName)[ CD ]
