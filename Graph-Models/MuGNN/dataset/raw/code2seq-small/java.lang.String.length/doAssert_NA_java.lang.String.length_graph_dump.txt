Line_17 $$ if (actualValue instanceof Number && expectedValue instanceof Number) -->Line_19 $$ return[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_16 $$ if (!actualValue.getClass().equals(safeClass(expectedValue))) [ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_15 $$ logger.trace("assert that [[ FD ]
Line_3 $$ if (expectedValue instanceof String) -->Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) [ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ if (expectedValue instanceof String) [ CD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_9 $$ logger.trace("assert that [[ CD ]
Line_3 $$ if (expectedValue instanceof String) -->Line_4 $$ String expValue = ((String) expectedValue).trim()[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_3 $$ if (expectedValue instanceof String) [ FD ]
Line_8 $$ String regex = expValue.substring(1, expValue.length() - 1)-->Line_9 $$ logger.trace("assert that [[ FD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_10 $$ assertThat("field [" + getField() + "] was expected to match the provided regex but didn't", stringValue, matches(regex, Pattern.COMMENTS))[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_16 $$ if (!actualValue.getClass().equals(safeClass(expectedValue))) [ CD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_6 $$ assertThat("field [" + getField() + "] was expected to be of type String but is an instanceof [" + safeClass(actualValue) + "]", actualValue, instanceOf(String.class))[ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_14 $$ assertThat(errorMessage(), actualValue, notNullValue())[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_15 $$ logger.trace("assert that [[ CD ]
Line_8 $$ String regex = expValue.substring(1, expValue.length() - 1)-->Line_10 $$ assertThat("field [" + getField() + "] was expected to match the provided regex but didn't", stringValue, matches(regex, Pattern.COMMENTS))[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_22 $$ assertThat(errorMessage(), actualValue, equalTo(expectedValue))[ CD ]
Line_17 $$ if (actualValue instanceof Number && expectedValue instanceof Number) -->Line_18 $$ assertThat(errorMessage(), ((Number) actualValue).doubleValue(), equalTo(((Number) expectedValue).doubleValue()))[ CD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_8 $$ String regex = expValue.substring(1, expValue.length() - 1)[ CD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_11 $$ return[ CD ]
Line_7 $$ String stringValue = (String) actualValue-->Line_9 $$ logger.trace("assert that [[ FD ]
Line_4 $$ String expValue = ((String) expectedValue).trim()-->Line_8 $$ String regex = expValue.substring(1, expValue.length() - 1)[ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_22 $$ assertThat(errorMessage(), actualValue, equalTo(expectedValue))[ FD ]
Line_7 $$ String stringValue = (String) actualValue-->Line_10 $$ assertThat("field [" + getField() + "] was expected to match the provided regex but didn't", stringValue, matches(regex, Pattern.COMMENTS))[ FD ]
Line_16 $$ if (!actualValue.getClass().equals(safeClass(expectedValue))) -->Line_17 $$ if (actualValue instanceof Number && expectedValue instanceof Number) [ CD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_6 $$ assertThat("field [" + getField() + "] was expected to be of type String but is an instanceof [" + safeClass(actualValue) + "]", actualValue, instanceOf(String.class))[ FD ]
Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) -->Line_7 $$ String stringValue = (String) actualValue[ CD ]
Line_4 $$ String expValue = ((String) expectedValue).trim()-->Line_5 $$ if (expValue.length() > 2 && expValue.startsWith("/") && expValue.endsWith("/")) [ FD ]
Line_2 $$ protected void doAssert(Object actualValue, Object expectedValue) -->Line_14 $$ assertThat(errorMessage(), actualValue, notNullValue())[ CD ]
