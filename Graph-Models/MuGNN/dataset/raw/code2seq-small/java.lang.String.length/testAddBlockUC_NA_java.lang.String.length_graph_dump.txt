Line_7 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_9 $$ DFSTestUtil.createFile(fs, file1, BLOCKSIZE - 1, REPLICATION, 0L)[ FD ]
Line_8 $$ final Path file1 = new Path("/file1")-->Line_9 $$ DFSTestUtil.createFile(fs, file1, BLOCKSIZE - 1, REPLICATION, 0L)[ FD ]
Line_14 $$ String appendContent = "appending-content"-->Line_15 $$ out.writeBytes(appendContent)[ FD ]
Line_19 $$ FSDirectory fsdir = cluster.getNamesystem().getFSDirectory()-->Line_20 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()[ FD ]
Line_10 $$ FSDataOutputStream out = null-->Line_28 $$ if (out != null) [ FD ]
Line_8 $$ final Path file1 = new Path("/file1")-->Line_20 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()[ FD ]
Line_20 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()-->Line_21 $$ BlockInfo[] fileBlocks = fileNode.getBlocks()[ FD ]
Line_28 $$ if (out != null) -->Line_29 $$ out.close()[ CD ]
Line_14 $$ String appendContent = "appending-content"-->Line_25 $$ assertEquals(appendContent.length() - 1, fileBlocks[1].getNumBytes())[ FD ]
Line_10 $$ FSDataOutputStream out = null-->Line_15 $$ out.writeBytes(appendContent)[ FD ]
Line_10 $$ FSDataOutputStream out = null-->Line_16 $$ ((DFSOutputStream) out.getWrappedStream()).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH))[ FD ]
Line_10 $$ FSDataOutputStream out = null-->Line_29 $$ out.close()[ FD ]
