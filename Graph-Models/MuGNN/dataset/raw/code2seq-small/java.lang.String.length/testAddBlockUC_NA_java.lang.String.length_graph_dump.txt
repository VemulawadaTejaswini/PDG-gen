Line_9 $$ String appendContent = "appending-content"-->Line_10 $$ out.writeBytes(appendContent)[ FD ]
Line_8 $$ out = fs.append(file1)-->Line_10 $$ out.writeBytes(appendContent)[ FD ]
Line_2 $$ public void testAddBlockUC() throws Exception -->Line_4 $$ final Path file1 = new Path("/file1")[ CD ]
Line_2 $$ public void testAddBlockUC() throws Exception -->Line_3 $$ DistributedFileSystem fs = cluster.getFileSystem()[ CD ]
Line_8 $$ out = fs.append(file1)-->Line_22 $$ if (out != null) [ FD ]
Line_8 $$ out = fs.append(file1)-->Line_11 $$ ((DFSOutputStream) out.getWrappedStream()).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH))[ FD ]
Line_6 $$ FSDataOutputStream out = null-->Line_11 $$ ((DFSOutputStream) out.getWrappedStream()).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH))[ FD ]
Line_3 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_8 $$ out = fs.append(file1)[ FD ]
Line_4 $$ final Path file1 = new Path("/file1")-->Line_8 $$ out = fs.append(file1)[ FD ]
Line_13 $$ FSDirectory fsdir = cluster.getNamesystem().getFSDirectory()-->Line_14 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()[ FD ]
Line_4 $$ final Path file1 = new Path("/file1")-->Line_5 $$ DFSTestUtil.createFile(fs, file1, BLOCKSIZE - 1, REPLICATION, 0L)[ FD ]
Line_9 $$ String appendContent = "appending-content"-->Line_19 $$ assertEquals(appendContent.length() - 1, fileBlocks[1].getNumBytes())[ FD ]
Line_6 $$ FSDataOutputStream out = null-->Line_23 $$ out.close()[ FD ]
Line_6 $$ FSDataOutputStream out = null-->Line_8 $$ out = fs.append(file1)[ FD ]
Line_2 $$ public void testAddBlockUC() throws Exception -->Line_5 $$ DFSTestUtil.createFile(fs, file1, BLOCKSIZE - 1, REPLICATION, 0L)[ CD ]
Line_14 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()-->Line_15 $$ BlockInfo[] fileBlocks = fileNode.getBlocks()[ FD ]
Line_22 $$ if (out != null) -->Line_23 $$ out.close()[ CD ]
Line_8 $$ out = fs.append(file1)-->Line_23 $$ out.close()[ FD ]
Line_4 $$ final Path file1 = new Path("/file1")-->Line_14 $$ INodeFile fileNode = fsdir.getINode4Write(file1.toString()).asFile()[ FD ]
Line_6 $$ FSDataOutputStream out = null-->Line_10 $$ out.writeBytes(appendContent)[ FD ]
Line_3 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_5 $$ DFSTestUtil.createFile(fs, file1, BLOCKSIZE - 1, REPLICATION, 0L)[ FD ]
Line_2 $$ public void testAddBlockUC() throws Exception -->Line_6 $$ FSDataOutputStream out = null[ CD ]
Line_6 $$ FSDataOutputStream out = null-->Line_22 $$ if (out != null) [ FD ]
