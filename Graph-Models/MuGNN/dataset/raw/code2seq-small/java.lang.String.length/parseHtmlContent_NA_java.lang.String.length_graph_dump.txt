Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_4 $$ int initialLen = document.getTextLength()[ FD ]
Line_18 $$ if (linkEnd > 0) -->Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())[ CD ]
Line_18 $$ if (linkEnd > 0) -->Line_22 $$ links.put(document.createRangeMarker(new TextRange(linkStart, document.getTextLength())), new NotificationHyperlinkInfo(notification, href))[ CD ]
Line_39 $$ if (next.getEndOffset() == document.getTextLength()) -->Line_40 $$ iterator.remove()[ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_43 $$ return hasHtml[ CD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ FD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)[ FD ]
Line_6 $$ while (true) -->Line_28 $$ if (NEW_LINES.contains(tagStart)) [ CD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_9 $$ appendText(document, content)[ FD ]
Line_18 $$ if (linkEnd > 0) -->Line_20 $$ int linkStart = document.getTextLength()[ CD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_35 $$ content = content.substring(tagMatcher.end())[ FD ]
Line_6 $$ while (true) -->Line_27 $$ hasHtml = true[ CD ]
Line_15 $$ if (aMatcher.matches()) -->Line_18 $$ if (linkEnd > 0) [ CD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ FD ]
Line_14 $$ Matcher aMatcher = A_PATTERN.matcher(tagStart)-->Line_15 $$ if (aMatcher.matches()) [ FD ]
Line_18 $$ if (linkEnd > 0) -->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ CD ]
Line_8 $$ if (!tagMatcher.find()) -->Line_9 $$ appendText(document, content)[ CD ]
Line_6 $$ while (true) -->Line_8 $$ if (!tagMatcher.find()) [ CD ]
Line_32 $$ if (!"<html>".equals(tagStart) && !"</html>".equals(tagStart) && !"<body>".equals(tagStart) && !"</body>".equals(tagStart)) -->Line_33 $$ showMore.set(true)[ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_22 $$ links.put(document.createRangeMarker(new TextRange(linkStart, document.getTextLength())), new NotificationHyperlinkInfo(notification, href))[ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_9 $$ appendText(document, content)[ FD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_35 $$ content = content.substring(tagMatcher.end())[ FD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ FD ]
Line_28 $$ if (NEW_LINES.contains(tagStart)) -->Line_29 $$ if (initialLen != document.getTextLength()) [ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) [ FD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_12 $$ String tagStart = tagMatcher.group()[ FD ]
Line_15 $$ if (aMatcher.matches()) -->Line_16 $$ final String href = aMatcher.group(2)[ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_20 $$ int linkStart = document.getTextLength()[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_39 $$ if (next.getEndOffset() == document.getTextLength()) [ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ FD ]
Line_12 $$ String tagStart = tagMatcher.group()-->Line_28 $$ if (NEW_LINES.contains(tagStart)) [ FD ]
Line_28 $$ if (NEW_LINES.contains(tagStart)) -->Line_32 $$ if (!"<html>".equals(tagStart) && !"</html>".equals(tagStart) && !"<body>".equals(tagStart) && !"</body>".equals(tagStart)) [ CD ]
Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) -->Line_40 $$ iterator.remove()[ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())[ FD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_8 $$ if (!tagMatcher.find()) [ FD ]
Line_15 $$ if (aMatcher.matches()) -->Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())[ CD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ FD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_33 $$ showMore.set(true)[ FD ]
Line_38 $$ RangeMarker next = iterator.next()-->Line_39 $$ if (next.getEndOffset() == document.getTextLength()) [ FD ]
Line_6 $$ while (true) -->Line_15 $$ if (aMatcher.matches()) [ CD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_3 $$ String content = StringUtil.convertLineSeparators(text)[ FD ]
Line_6 $$ while (true) -->Line_35 $$ content = content.substring(tagMatcher.end())[ CD ]
Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())-->Line_18 $$ if (linkEnd > 0) [ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) [ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_9 $$ appendText(document, content)[ FD ]
Line_5 $$ boolean hasHtml = false-->Line_27 $$ hasHtml = true[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_5 $$ boolean hasHtml = false[ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_6 $$ while (true) [ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_29 $$ if (initialLen != document.getTextLength()) [ FD ]
Line_6 $$ while (true) -->Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)[ CD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_9 $$ appendText(document, content)[ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())[ FD ]
Line_4 $$ int initialLen = document.getTextLength()-->Line_29 $$ if (initialLen != document.getTextLength()) [ FD ]
Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())-->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ FD ]
Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) -->Line_38 $$ RangeMarker next = iterator.next()[ CD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())[ FD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ FD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())[ FD ]
Line_23 $$ content = content.substring(linkEnd + A_CLOSING.length())-->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_3 $$ String content = StringUtil.convertLineSeparators(text)[ CD ]
Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)-->Line_17 $$ int linkEnd = content.indexOf(A_CLOSING, tagMatcher.end())[ FD ]
Line_6 $$ while (true) -->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ CD ]
Line_29 $$ if (initialLen != document.getTextLength()) -->Line_30 $$ lineSeparators.add(document.createRangeMarker(TextRange.from(document.getTextLength(), 0)))[ CD ]
Line_14 $$ Matcher aMatcher = A_PATTERN.matcher(tagStart)-->Line_16 $$ final String href = aMatcher.group(2)[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_21 $$ appendText(document, linkText)[ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_4 $$ int initialLen = document.getTextLength()[ CD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_30 $$ lineSeparators.add(document.createRangeMarker(TextRange.from(document.getTextLength(), 0)))[ FD ]
Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) -->Line_39 $$ if (next.getEndOffset() == document.getTextLength()) [ CD ]
Line_6 $$ while (true) -->Line_12 $$ String tagStart = tagMatcher.group()[ CD ]
Line_37 $$ for (Iterator<RangeMarker> iterator = lineSeparators.iterator(); iterator.hasNext(); ) -->Line_38 $$ RangeMarker next = iterator.next()[ FD ]
Line_6 $$ while (true) -->Line_14 $$ Matcher aMatcher = A_PATTERN.matcher(tagStart)[ CD ]
Line_19 $$ String linkText = content.substring(tagMatcher.end(), linkEnd).replaceAll(TAG_PATTERN.pattern(), "")-->Line_21 $$ appendText(document, linkText)[ FD ]
Line_12 $$ String tagStart = tagMatcher.group()-->Line_14 $$ Matcher aMatcher = A_PATTERN.matcher(tagStart)[ FD ]
Line_3 $$ String content = StringUtil.convertLineSeparators(text)-->Line_35 $$ content = content.substring(tagMatcher.end())[ FD ]
Line_35 $$ content = content.substring(tagMatcher.end())-->Line_7 $$ Matcher tagMatcher = TAG_PATTERN.matcher(content)[ FD ]
Line_12 $$ String tagStart = tagMatcher.group()-->Line_32 $$ if (!"<html>".equals(tagStart) && !"</html>".equals(tagStart) && !"<body>".equals(tagStart) && !"</body>".equals(tagStart)) [ FD ]
Line_2 $$ private static boolean parseHtmlContent(String text, Notification notification, Document document, AtomicBoolean showMore, Map<RangeMarker, HyperlinkInfo> links, List<RangeMarker> lineSeparators) -->Line_13 $$ appendText(document, content.substring(0, tagMatcher.start()))[ FD ]
Line_18 $$ if (linkEnd > 0) -->Line_21 $$ appendText(document, linkText)[ CD ]
