Line_4 $$ String prefix = rd.getPackagePrefix()-->Line_7 $$ prefix += "."[ FD ]
Line_3 $$ String clsName = className-->Line_13 $$ return clsName.replace('.', '/') + JAVA_EXTENSION[ FD ]
Line_2 $$ private static String suggestRelativePath(@NotNull JavaSourceRootDescriptor rd, @NotNull String className) -->Line_3 $$ String clsName = className[ CD ]
Line_3 $$ String clsName = className-->Line_10 $$ clsName = clsName.substring(prefix.length())[ FD ]
Line_4 $$ String prefix = rd.getPackagePrefix()-->Line_5 $$ if (!StringUtil.isEmpty(prefix)) [ FD ]
Line_2 $$ private static String suggestRelativePath(@NotNull JavaSourceRootDescriptor rd, @NotNull String className) -->Line_5 $$ if (!StringUtil.isEmpty(prefix)) [ CD ]
Line_5 $$ if (!StringUtil.isEmpty(prefix)) -->Line_9 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.startsWith(clsName, prefix) : StringUtil.startsWithIgnoreCase(clsName, prefix)) [ CD ]
Line_3 $$ String clsName = className-->Line_9 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.startsWith(clsName, prefix) : StringUtil.startsWithIgnoreCase(clsName, prefix)) [ FD ]
Line_10 $$ clsName = clsName.substring(prefix.length())-->Line_13 $$ return clsName.replace('.', '/') + JAVA_EXTENSION[ FD ]
Line_7 $$ prefix += "."-->Line_9 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.startsWith(clsName, prefix) : StringUtil.startsWithIgnoreCase(clsName, prefix)) [ FD ]
Line_4 $$ String prefix = rd.getPackagePrefix()-->Line_10 $$ clsName = clsName.substring(prefix.length())[ FD ]
Line_5 $$ if (!StringUtil.isEmpty(prefix)) -->Line_6 $$ if (!StringUtil.endsWith(prefix, ".")) [ CD ]
Line_4 $$ String prefix = rd.getPackagePrefix()-->Line_6 $$ if (!StringUtil.endsWith(prefix, ".")) [ FD ]
Line_2 $$ private static String suggestRelativePath(@NotNull JavaSourceRootDescriptor rd, @NotNull String className) -->Line_4 $$ String prefix = rd.getPackagePrefix()[ CD ]
Line_4 $$ String prefix = rd.getPackagePrefix()-->Line_9 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.startsWith(clsName, prefix) : StringUtil.startsWithIgnoreCase(clsName, prefix)) [ FD ]
Line_2 $$ private static String suggestRelativePath(@NotNull JavaSourceRootDescriptor rd, @NotNull String className) -->Line_4 $$ String prefix = rd.getPackagePrefix()[ FD ]
Line_6 $$ if (!StringUtil.endsWith(prefix, ".")) -->Line_7 $$ prefix += "."[ CD ]
Line_9 $$ if (SystemInfo.isFileSystemCaseSensitive ? StringUtil.startsWith(clsName, prefix) : StringUtil.startsWithIgnoreCase(clsName, prefix)) -->Line_10 $$ clsName = clsName.substring(prefix.length())[ CD ]
Line_2 $$ private static String suggestRelativePath(@NotNull JavaSourceRootDescriptor rd, @NotNull String className) -->Line_13 $$ return clsName.replace('.', '/') + JAVA_EXTENSION[ CD ]
Line_7 $$ prefix += "."-->Line_10 $$ clsName = clsName.substring(prefix.length())[ FD ]
