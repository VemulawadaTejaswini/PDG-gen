Line_10 $$ XmlTag tag = XmlElementFactory.getInstance(getProject()).createXHTMLTagFromText("<a>" + tagText + "</a>")-->Line_11 $$ final PsiElement[] children = tag.getValue().getTextElements()[ FD ]
Line_13 $$ final XmlText xmlText = (XmlText) children[0]-->Line_18 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ FD ]
Line_19 $$ final String expectedText = toEscapedText(expectedDisplay.toString())-->Line_20 $$ assertEquals(expectedText, xmlText.getText())[ FD ]
Line_16 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))-->Line_18 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ FD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_15 $$ xmlText.removeText(i, j)[ FD ]
Line_3 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_7 $$ String tagText = toEscapedText(text)[ CD ]
Line_7 $$ String tagText = toEscapedText(text)-->Line_14 $$ assertEquals(tagText, xmlText.getText())[ FD ]
Line_2 $$ private static void doTestEscapedDeletion(final String text) throws IncorrectOperationException -->Line_9 $$ for (int j = i; j < text.length(); j++) [ FD ]
Line_8 $$ for (int i = 0; i < text.length(); i++) -->Line_15 $$ xmlText.removeText(i, j)[ FD ]
Line_3 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_8 $$ for (int i = 0; i < text.length(); i++) [ CD ]
Line_13 $$ final XmlText xmlText = (XmlText) children[0]-->Line_15 $$ xmlText.removeText(i, j)[ FD ]
Line_16 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))-->Line_19 $$ final String expectedText = toEscapedText(expectedDisplay.toString())[ FD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_19 $$ final String expectedText = toEscapedText(expectedDisplay.toString())[ CD ]
Line_2 $$ private static void doTestEscapedDeletion(final String text) throws IncorrectOperationException -->Line_3 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_15 $$ xmlText.removeText(i, j)[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_17 $$ expectedDisplay.delete(i, j)[ CD ]
Line_8 $$ for (int i = 0; i < text.length(); i++) -->Line_9 $$ for (int j = i; j < text.length(); j++) [ CD ]
Line_16 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))-->Line_17 $$ expectedDisplay.delete(i, j)[ FD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_13 $$ final XmlText xmlText = (XmlText) children[0][ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_16 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_14 $$ assertEquals(tagText, xmlText.getText())[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_10 $$ XmlTag tag = XmlElementFactory.getInstance(getProject()).createXHTMLTagFromText("<a>" + tagText + "</a>")[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_17 $$ expectedDisplay.delete(i, j)[ FD ]
Line_13 $$ final XmlText xmlText = (XmlText) children[0]-->Line_20 $$ assertEquals(expectedText, xmlText.getText())[ FD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_12 $$ assertEquals(1, children.length)[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_20 $$ assertEquals(expectedText, xmlText.getText())[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_11 $$ final PsiElement[] children = tag.getValue().getTextElements()[ CD ]
Line_9 $$ for (int j = i; j < text.length(); j++) -->Line_18 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ CD ]
Line_2 $$ private static void doTestEscapedDeletion(final String text) throws IncorrectOperationException -->Line_16 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))[ FD ]
Line_13 $$ final XmlText xmlText = (XmlText) children[0]-->Line_14 $$ assertEquals(tagText, xmlText.getText())[ FD ]
Line_8 $$ for (int i = 0; i < text.length(); i++) -->Line_17 $$ expectedDisplay.delete(i, j)[ FD ]
Line_2 $$ private static void doTestEscapedDeletion(final String text) throws IncorrectOperationException -->Line_7 $$ String tagText = toEscapedText(text)[ FD ]
Line_2 $$ private static void doTestEscapedDeletion(final String text) throws IncorrectOperationException -->Line_8 $$ for (int i = 0; i < text.length(); i++) [ FD ]
