Line_26 $$ if (writeAccess)-->Line_27 $$ element.setAttribute(WRITE, TRUE)[ CD ]
Line_10 $$ if (nameOfFormalArgType.length() > 0)-->Line_11 $$ element.setAttribute(NAME_OF_FORMALTYPE, nameOfFormalArgType)[ CD ]
Line_36 $$ if (invertWriteAccess)-->Line_37 $$ element.setAttribute(NEGATE_WRITE_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_21 $$ element.setAttribute(MAX_OCCURS, String.valueOf(maxCount))[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_33 $$ element.setAttribute(NEGATE_FORMALTYPE_CONDITION, TRUE)[ FD ]
Line_12 $$ if (withinHierarchy)-->Line_13 $$ element.setAttribute(WITHIN_HIERARCHY, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_14 $$ if (exprTypeWithinHierarchy)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_25 $$ element.setAttribute(READ, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_16 $$ if (formalArgTypeWithinHierarchy)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_32 $$ if (invertFormalType)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_13 $$ element.setAttribute(WITHIN_HIERARCHY, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_44 $$ element.setAttribute(WITHIN_CONDITION, withinConstraint)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_27 $$ element.setAttribute(WRITE, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_24 $$ if (readAccess)[ CD ]
Line_4 $$ if (regExp.length() > 0)-->Line_5 $$ element.setAttribute(REGEXP, regExp)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_19 $$ element.setAttribute(MIN_OCCURS, String.valueOf(minCount))[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_6 $$ if (nameOfExprType.length() > 0)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_20 $$ if (maxCount != 1)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_30 $$ if (invertExprType)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_9 $$ element.setAttribute(NAME_OF_REFEENCE_VAR, nameOfReferenceVar)[ FD ]
Line_18 $$ if (minCount != 1)-->Line_19 $$ element.setAttribute(MIN_OCCURS, String.valueOf(minCount))[ CD ]
Line_38 $$ if (wholeWordsOnly)-->Line_39 $$ element.setAttribute(WHOLE_WORDS_ONLY, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_41 $$ element.setAttribute(NEGATE_CONTAINS_CONDITION, TRUE)[ FD ]
Line_34 $$ if (invertReadAccess)-->Line_35 $$ element.setAttribute(NEGATE_READ_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_37 $$ element.setAttribute(NEGATE_WRITE_CONDITION, TRUE)[ FD ]
Line_40 $$ if (invertContainsConstraint)-->Line_41 $$ element.setAttribute(NEGATE_CONTAINS_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_38 $$ if (wholeWordsOnly)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_3 $$ super.writeExternal(element)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_5 $$ element.setAttribute(REGEXP, regExp)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_22 $$ if (partOfSearchResults)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_3 $$ super.writeExternal(element)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_29 $$ element.setAttribute(NEGATE_NAME_CONDITION, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_40 $$ if (invertContainsConstraint)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_11 $$ element.setAttribute(NAME_OF_FORMALTYPE, nameOfFormalArgType)[ FD ]
Line_28 $$ if (invertRegExp)-->Line_29 $$ element.setAttribute(NEGATE_NAME_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_8 $$ if (nameOfReferenceVar.length() > 0)[ CD ]
Line_32 $$ if (invertFormalType)-->Line_33 $$ element.setAttribute(NEGATE_FORMALTYPE_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_18 $$ if (minCount != 1)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_36 $$ if (invertWriteAccess)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_35 $$ element.setAttribute(NEGATE_READ_CONDITION, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_39 $$ element.setAttribute(WHOLE_WORDS_ONLY, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_4 $$ if (regExp.length() > 0)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_12 $$ if (withinHierarchy)[ CD ]
Line_14 $$ if (exprTypeWithinHierarchy)-->Line_15 $$ element.setAttribute(EXPRTYPE_WITHIN_HIERARCHY, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_43 $$ element.setAttribute(NEGATE_WITHIN_CONDITION, TRUE)[ FD ]
Line_6 $$ if (nameOfExprType.length() > 0)-->Line_7 $$ element.setAttribute(NAME_OF_EXPRTYPE, nameOfExprType)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_26 $$ if (writeAccess)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_7 $$ element.setAttribute(NAME_OF_EXPRTYPE, nameOfExprType)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_17 $$ element.setAttribute(FORMALTYPE_WITHIN_HIERARCHY, TRUE)[ FD ]
Line_42 $$ if (invertWithinConstraint)-->Line_43 $$ element.setAttribute(NEGATE_WITHIN_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_45 $$ element.setAttribute(CONTAINS_CONDITION, containsConstraint)[ CD ]
Line_8 $$ if (nameOfReferenceVar.length() > 0)-->Line_9 $$ element.setAttribute(NAME_OF_REFEENCE_VAR, nameOfReferenceVar)[ CD ]
Line_22 $$ if (partOfSearchResults)-->Line_23 $$ element.setAttribute(TARGET, TRUE)[ CD ]
Line_24 $$ if (readAccess)-->Line_25 $$ element.setAttribute(READ, TRUE)[ CD ]
Line_20 $$ if (maxCount != 1)-->Line_21 $$ element.setAttribute(MAX_OCCURS, String.valueOf(maxCount))[ CD ]
Line_30 $$ if (invertExprType)-->Line_31 $$ element.setAttribute(NEGATE_EXPRTYPE_CONDITION, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_42 $$ if (invertWithinConstraint)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_31 $$ element.setAttribute(NEGATE_EXPRTYPE_CONDITION, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_34 $$ if (invertReadAccess)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_15 $$ element.setAttribute(EXPRTYPE_WITHIN_HIERARCHY, TRUE)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_10 $$ if (nameOfFormalArgType.length() > 0)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_28 $$ if (invertRegExp)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_23 $$ element.setAttribute(TARGET, TRUE)[ FD ]
Line_16 $$ if (formalArgTypeWithinHierarchy)-->Line_17 $$ element.setAttribute(FORMALTYPE_WITHIN_HIERARCHY, TRUE)[ CD ]
Line_2 $$ public void writeExternal(Element element) -->Line_45 $$ element.setAttribute(CONTAINS_CONDITION, containsConstraint)[ FD ]
Line_2 $$ public void writeExternal(Element element) -->Line_44 $$ element.setAttribute(WITHIN_CONDITION, withinConstraint)[ CD ]
