Line_31 $$ while (true) -->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ CD ]
Line_19 $$ while (matcher.find()) -->Line_24 $$ String strippedMatch = stripQuotes(match, CharPool.QUOTE)[ CD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ FD ]
Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)[ FD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)-->Line_40 $$ if (y == -1) [ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ FD ]
Line_13 $$ if (group3.startsWith(StringPool.SPACE)) -->Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))[ CD ]
Line_4 $$ while (matcher.find()) -->Line_5 $$ String match = matcher.group()[ CD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_20 $$ String match = matcher.group()-->Line_21 $$ if (match.contains("><")) [ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_7 $$ String group1 = matcher.group(1)[ FD ]
Line_31 $$ while (true) -->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ CD ]
Line_16 $$ content = StringUtil.replace(content, match, replacement)-->Line_18 $$ matcher = _multiParameterTag.matcher(content)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_50 $$ return trimContent(content, false)[ CD ]
Line_5 $$ String match = matcher.group()-->Line_21 $$ if (match.contains("><")) [ FD ]
Line_30 $$ int x = -1-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_6 $$ String replacement = match-->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ FD ]
Line_5 $$ String match = matcher.group()-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_19 $$ while (matcher.find()) [ FD ]
Line_28 $$ String replacement = match-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_6 $$ String replacement = match-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_28 $$ String replacement = match-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_5 $$ String match = matcher.group()[ FD ]
Line_8 $$ String group2 = matcher.group(2)-->Line_9 $$ if (group2 != null) [ FD ]
Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_5 $$ String match = matcher.group()-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_45 $$ if (!match.equals(replacement)) -->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ CD ]
Line_4 $$ while (matcher.find()) -->Line_6 $$ String replacement = match[ CD ]
Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)-->Line_33 $$ if (x == -1) [ FD ]
Line_19 $$ while (matcher.find()) -->Line_31 $$ while (true) [ CD ]
Line_29 $$ String tabs = matcher.group(1)-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_31 $$ while (true) -->Line_40 $$ if (y == -1) [ CD ]
Line_6 $$ String replacement = match-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_4 $$ while (matcher.find()) [ FD ]
Line_4 $$ while (matcher.find()) -->Line_12 $$ String group3 = matcher.group(3)[ CD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_12 $$ String group3 = matcher.group(3)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_25 $$ if (StringUtil.count(strippedMatch, StringPool.EQUAL) <= 1) [ CD ]
Line_6 $$ String replacement = match-->Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))[ FD ]
Line_7 $$ String group1 = matcher.group(1)-->Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_9 $$ if (group2 != null) -->Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_50 $$ return trimContent(content, false)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_8 $$ String group2 = matcher.group(2)[ CD ]
Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)-->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ FD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_5 $$ String match = matcher.group()-->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_6 $$ String replacement = match-->Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_28 $$ String replacement = match[ CD ]
Line_6 $$ String replacement = match-->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ FD ]
Line_30 $$ int x = -1-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_12 $$ String group3 = matcher.group(3)-->Line_13 $$ if (group3.startsWith(StringPool.SPACE)) [ FD ]
Line_18 $$ matcher = _multiParameterTag.matcher(content)-->Line_19 $$ while (matcher.find()) [ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))[ FD ]
Line_18 $$ matcher = _multiParameterTag.matcher(content)-->Line_29 $$ String tabs = matcher.group(1)[ FD ]
Line_31 $$ while (true) -->Line_33 $$ if (x == -1) [ CD ]
Line_20 $$ String match = matcher.group()-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_30 $$ int x = -1-->Line_33 $$ if (x == -1) [ FD ]
Line_19 $$ while (matcher.find()) -->Line_29 $$ String tabs = matcher.group(1)[ CD ]
Line_30 $$ int x = -1-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_20 $$ String match = matcher.group()-->Line_24 $$ String strippedMatch = stripQuotes(match, CharPool.QUOTE)[ FD ]
Line_16 $$ content = StringUtil.replace(content, match, replacement)-->Line_50 $$ return trimContent(content, false)[ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)[ FD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_16 $$ content = StringUtil.replace(content, match, replacement)-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_9 $$ if (group2 != null) [ CD ]
Line_28 $$ String replacement = match-->Line_46 $$ replacement = StringUtil.replaceLast(replacement, "/>", StringPool.NEW_LINE + tabs + "/>")[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_18 $$ matcher = _multiParameterTag.matcher(content)[ FD ]
Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_8 $$ String group2 = matcher.group(2)[ FD ]
Line_28 $$ String replacement = match-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_28 $$ String replacement = match-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_47 $$ content = StringUtil.replace(content, match, replacement)-->Line_50 $$ return trimContent(content, false)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_30 $$ int x = -1[ CD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_20 $$ String match = matcher.group()[ FD ]
Line_19 $$ while (matcher.find()) -->Line_45 $$ if (!match.equals(replacement)) [ CD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_4 $$ while (matcher.find()) [ CD ]
Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)-->Line_45 $$ if (!match.equals(replacement)) [ FD ]
Line_31 $$ while (true) -->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ CD ]
Line_19 $$ while (matcher.find()) -->Line_20 $$ String match = matcher.group()[ CD ]
Line_45 $$ if (!match.equals(replacement)) -->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ CD ]
Line_24 $$ String strippedMatch = stripQuotes(match, CharPool.QUOTE)-->Line_25 $$ if (StringUtil.count(strippedMatch, StringPool.EQUAL) <= 1) [ FD ]
Line_20 $$ String match = matcher.group()-->Line_47 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_28 $$ String replacement = match-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)[ CD ]
Line_10 $$ replacement = StringUtil.replaceFirst(replacement, group1 + StringPool.SPACE, group1)-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_18 $$ matcher = _multiParameterTag.matcher(content)[ CD ]
Line_6 $$ String replacement = match-->Line_16 $$ content = StringUtil.replace(content, match, replacement)[ FD ]
Line_5 $$ String match = matcher.group()-->Line_24 $$ String strippedMatch = stripQuotes(match, CharPool.QUOTE)[ FD ]
Line_31 $$ while (true) -->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ CD ]
Line_4 $$ while (matcher.find()) -->Line_13 $$ if (group3.startsWith(StringPool.SPACE)) [ CD ]
Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_6 $$ String replacement = match-->Line_36 $$ if (ToolsUtil.isInsideQuotes(replacement, x)) [ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_19 $$ while (matcher.find()) [ CD ]
Line_3 $$ Matcher matcher = _singleParameterTag.matcher(content)-->Line_29 $$ String tabs = matcher.group(1)[ FD ]
Line_12 $$ String group3 = matcher.group(3)-->Line_14 $$ replacement = StringUtil.replaceLast(replacement, group3, group3.substring(1))[ FD ]
Line_28 $$ String replacement = match-->Line_43 $$ replacement = replacement.substring(0, y) + StringPool.NEW_LINE + tabs + StringPool.TAB + replacement.substring(y + 1)[ FD ]
Line_4 $$ while (matcher.find()) -->Line_7 $$ String group1 = matcher.group(1)[ CD ]
Line_6 $$ String replacement = match-->Line_39 $$ int y = replacement.lastIndexOf(StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String doFormat(File file, String fileName, String absolutePath, String content) throws Exception -->Line_18 $$ matcher = _multiParameterTag.matcher(content)[ FD ]
Line_6 $$ String replacement = match-->Line_32 $$ x = replacement.indexOf(StringPool.EQUAL, x + tabs.length() + 2)[ FD ]
Line_19 $$ while (matcher.find()) -->Line_21 $$ if (match.contains("><")) [ CD ]
Line_18 $$ matcher = _multiParameterTag.matcher(content)-->Line_20 $$ String match = matcher.group()[ FD ]
