Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()-->Line_21 $$ return new DirectoryListing(listing, snapshots.size() - skipSize - numOfListing)[ FD ]
Line_8 $$ final DirectorySnapshottableFeature sf = dirNode.getDirectorySnapshottableFeature()-->Line_9 $$ if (sf == null) [ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_5 $$ final String dirPath = normalizePath(src.substring(0, src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()))[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_3 $$ Preconditions.checkState(hasReadLock())[ CD ]
Line_6 $$ final INode node = this.getINode(dirPath)-->Line_7 $$ final INodeDirectory dirNode = INodeDirectory.valueOf(node, dirPath)[ FD ]
Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()-->Line_15 $$ int numOfListing = Math.min(snapshots.size() - skipSize, this.lsLimit)[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_8 $$ final DirectorySnapshottableFeature sf = dirNode.getDirectorySnapshottableFeature()[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_6 $$ final INode node = this.getINode(dirPath)[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_4 $$ Preconditions.checkArgument(src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR), "%s does not end with %s", src, HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR)[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_17 $$ for (int i = 0; i < numOfListing; i++) [ CD ]
Line_7 $$ final INodeDirectory dirNode = INodeDirectory.valueOf(node, dirPath)-->Line_8 $$ final DirectorySnapshottableFeature sf = dirNode.getDirectorySnapshottableFeature()[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_13 $$ int skipSize = ReadOnlyList.Util.binarySearch(snapshots, startAfter)[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_16 $$ final HdfsFileStatus[] listing = new HdfsFileStatus[numOfListing][ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_4 $$ Preconditions.checkArgument(src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR), "%s does not end with %s", src, HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR)[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_21 $$ return new DirectoryListing(listing, snapshots.size() - skipSize - numOfListing)[ CD ]
Line_13 $$ int skipSize = ReadOnlyList.Util.binarySearch(snapshots, startAfter)-->Line_14 $$ skipSize = skipSize < 0 ? -skipSize - 1 : skipSize + 1[ FD ]
Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()-->Line_18 $$ Root sRoot = snapshots.get(i + skipSize).getRoot()[ FD ]
Line_8 $$ final DirectorySnapshottableFeature sf = dirNode.getDirectorySnapshottableFeature()-->Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_15 $$ int numOfListing = Math.min(snapshots.size() - skipSize, this.lsLimit)[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_9 $$ if (sf == null) [ CD ]
Line_17 $$ for (int i = 0; i < numOfListing; i++) -->Line_19 $$ listing[i] = createFileStatus(sRoot.getLocalNameBytes(), sRoot, Snapshot.CURRENT_STATE_ID, false)[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_5 $$ final String dirPath = normalizePath(src.substring(0, src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()))[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_14 $$ skipSize = skipSize < 0 ? -skipSize - 1 : skipSize + 1[ CD ]
Line_5 $$ final String dirPath = normalizePath(src.substring(0, src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()))-->Line_7 $$ final INodeDirectory dirNode = INodeDirectory.valueOf(node, dirPath)[ FD ]
Line_18 $$ Root sRoot = snapshots.get(i + skipSize).getRoot()-->Line_19 $$ listing[i] = createFileStatus(sRoot.getLocalNameBytes(), sRoot, Snapshot.CURRENT_STATE_ID, false)[ FD ]
Line_17 $$ for (int i = 0; i < numOfListing; i++) -->Line_18 $$ Root sRoot = snapshots.get(i + skipSize).getRoot()[ CD ]
Line_15 $$ int numOfListing = Math.min(snapshots.size() - skipSize, this.lsLimit)-->Line_17 $$ for (int i = 0; i < numOfListing; i++) [ FD ]
Line_5 $$ final String dirPath = normalizePath(src.substring(0, src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()))-->Line_6 $$ final INode node = this.getINode(dirPath)[ FD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_7 $$ final INodeDirectory dirNode = INodeDirectory.valueOf(node, dirPath)[ CD ]
Line_2 $$ private DirectoryListing getSnapshotsListing(String src, byte[] startAfter) throws UnresolvedLinkException, IOException -->Line_13 $$ int skipSize = ReadOnlyList.Util.binarySearch(snapshots, startAfter)[ CD ]
Line_12 $$ final ReadOnlyList<Snapshot> snapshots = sf.getSnapshotList()-->Line_13 $$ int skipSize = ReadOnlyList.Util.binarySearch(snapshots, startAfter)[ FD ]
