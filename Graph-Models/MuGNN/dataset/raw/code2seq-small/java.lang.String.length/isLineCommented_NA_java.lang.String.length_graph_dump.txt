Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_31 $$ if (commented) -->Line_33 $$ block.endOffsets[line - block.startLine] = lineEndForBlockCommenting[ CD ]
Line_9 $$ if (commenter instanceof SelfManagingCommenter) -->Line_14 $$ if (prefix != null) [ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_6 $$ int lineStart = document.getLineStartOffset(line)[ CD ]
Line_5 $$ Document document = block.editor.getDocument()-->Line_6 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_6 $$ int lineStart = document.getLineStartOffset(line)-->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_17 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_6 $$ int lineStart = document.getLineStartOffset(line)-->Line_32 $$ block.startOffsets[line - block.startLine] = lineStart[ FD ]
Line_4 $$ int lineEndForBlockCommenting = -1-->Line_33 $$ block.endOffsets[line - block.startLine] = lineEndForBlockCommenting[ FD ]
Line_22 $$ final int shifted = CharArrayUtil.shiftBackward(chars, textLength - 1, " \t")-->Line_23 $$ if (shifted < textLength - 1)[ FD ]
Line_13 $$ String prefix = commenter.getLineCommentPrefix()-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_7 $$ CharSequence chars = document.getCharsSequence()-->Line_22 $$ final int shifted = CharArrayUtil.shiftBackward(chars, textLength - 1, " \t")[ FD ]
Line_6 $$ int lineStart = document.getLineStartOffset(line)-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)-->Line_24 $$ lineEndForBlockCommenting = shifted[ FD ]
Line_22 $$ final int shifted = CharArrayUtil.shiftBackward(chars, textLength - 1, " \t")-->Line_24 $$ lineEndForBlockCommenting = shifted[ FD ]
Line_9 $$ if (commenter instanceof SelfManagingCommenter) -->Line_13 $$ String prefix = commenter.getLineCommentPrefix()[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_5 $$ Document document = block.editor.getDocument()[ CD ]
Line_19 $$ final int textLength = document.getTextLength()-->Line_21 $$ if (lineEndForBlockCommenting == textLength) [ FD ]
Line_3 $$ boolean commented-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_35 $$ return commented[ CD ]
Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_5 $$ Document document = block.editor.getDocument()-->Line_7 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_5 $$ Document document = block.editor.getDocument()-->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_3 $$ boolean commented[ CD ]
Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)-->Line_21 $$ if (lineEndForBlockCommenting == textLength) [ FD ]
Line_7 $$ CharSequence chars = document.getCharsSequence()-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_18 $$ String suffix = commenter.getBlockCommentSuffix()[ FD ]
Line_14 $$ if (prefix != null) -->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ CD ]
Line_5 $$ Document document = block.editor.getDocument()-->Line_19 $$ final int textLength = document.getTextLength()[ FD ]
Line_14 $$ if (prefix != null) -->Line_17 $$ prefix = commenter.getBlockCommentPrefix()[ CD ]
Line_13 $$ String prefix = commenter.getLineCommentPrefix()-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)[ FD ]
Line_5 $$ Document document = block.editor.getDocument()-->Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_9 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_23 $$ if (shifted < textLength - 1)-->Line_24 $$ lineEndForBlockCommenting = shifted[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_31 $$ if (commented) [ CD ]
Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_6 $$ int lineStart = document.getLineStartOffset(line)-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_14 $$ if (prefix != null) -->Line_21 $$ if (lineEndForBlockCommenting == textLength) [ CD ]
Line_13 $$ String prefix = commenter.getLineCommentPrefix()-->Line_14 $$ if (prefix != null) [ FD ]
Line_7 $$ CharSequence chars = document.getCharsSequence()-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_6 $$ int lineStart = document.getLineStartOffset(line)-->Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ FD ]
Line_14 $$ if (prefix != null) -->Line_19 $$ final int textLength = document.getTextLength()[ CD ]
Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)-->Line_33 $$ block.endOffsets[line - block.startLine] = lineEndForBlockCommenting[ FD ]
Line_9 $$ if (commenter instanceof SelfManagingCommenter) -->Line_10 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_14 $$ if (prefix != null) -->Line_18 $$ String suffix = commenter.getBlockCommentSuffix()[ CD ]
Line_14 $$ if (prefix != null) -->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_4 $$ int lineEndForBlockCommenting = -1[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_13 $$ String prefix = commenter.getLineCommentPrefix()[ FD ]
Line_21 $$ if (lineEndForBlockCommenting == textLength) -->Line_22 $$ final int shifted = CharArrayUtil.shiftBackward(chars, textLength - 1, " \t")[ CD ]
Line_18 $$ String suffix = commenter.getBlockCommentSuffix()-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_13 $$ String prefix = commenter.getLineCommentPrefix()-->Line_17 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_21 $$ if (lineEndForBlockCommenting == textLength) -->Line_23 $$ if (shifted < textLength - 1)[ CD ]
Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)-->Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_9 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_7 $$ CharSequence chars = document.getCharsSequence()-->Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ FD ]
Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_15 $$ commented = CharArrayUtil.regionMatches(chars, lineStart, StringUtil.trimTrailing(prefix))[ FD ]
Line_10 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_31 $$ if (commented) -->Line_32 $$ block.startOffsets[line - block.startLine] = lineStart[ CD ]
Line_9 $$ if (commenter instanceof SelfManagingCommenter) -->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ CD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_7 $$ CharSequence chars = document.getCharsSequence()[ CD ]
Line_4 $$ int lineEndForBlockCommenting = -1-->Line_24 $$ lineEndForBlockCommenting = shifted[ FD ]
Line_4 $$ int lineEndForBlockCommenting = -1-->Line_21 $$ if (lineEndForBlockCommenting == textLength) [ FD ]
Line_17 $$ prefix = commenter.getBlockCommentPrefix()-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_7 $$ CharSequence chars = document.getCharsSequence()-->Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")[ FD ]
Line_4 $$ int lineEndForBlockCommenting = -1-->Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")[ FD ]
Line_21 $$ if (lineEndForBlockCommenting == textLength) -->Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")[ CD ]
Line_8 $$ lineStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_32 $$ block.startOffsets[line - block.startLine] = lineStart[ FD ]
Line_24 $$ lineEndForBlockCommenting = shifted-->Line_33 $$ block.endOffsets[line - block.startLine] = lineEndForBlockCommenting[ FD ]
Line_4 $$ int lineEndForBlockCommenting = -1-->Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)[ FD ]
Line_24 $$ lineEndForBlockCommenting = shifted-->Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")[ FD ]
Line_3 $$ boolean commented-->Line_11 $$ commented = selfManagingCommenter.isLineCommented(line, lineStart, document, block.commenterStateMap.get(selfManagingCommenter))[ FD ]
Line_26 $$ lineEndForBlockCommenting = CharArrayUtil.shiftBackward(chars, lineEndForBlockCommenting, " \t")-->Line_33 $$ block.endOffsets[line - block.startLine] = lineEndForBlockCommenting[ FD ]
Line_14 $$ if (prefix != null) -->Line_20 $$ lineEndForBlockCommenting = document.getLineEndOffset(line)[ CD ]
Line_3 $$ boolean commented-->Line_28 $$ commented = lineStart == lineEndForBlockCommenting && block.startLine != block.endLine || CharArrayUtil.regionMatches(chars, lineStart, prefix) && CharArrayUtil.regionMatches(chars, lineEndForBlockCommenting - suffix.length(), suffix)[ FD ]
Line_2 $$ private static boolean isLineCommented(Block block, final int line, final Commenter commenter) -->Line_6 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
