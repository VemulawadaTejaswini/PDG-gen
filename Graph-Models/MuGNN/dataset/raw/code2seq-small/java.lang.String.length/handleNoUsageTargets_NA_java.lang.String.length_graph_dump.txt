Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_3 $$ if (file.findElementAt(editor.getCaretModel().getOffset()) instanceof PsiWhiteSpace)[ FD ]
Line_6 $$ String selection = selectionModel.getSelectedText()-->Line_8 $$ for (int i = 0; i < selection.length(); i++) [ FD ]
Line_3 $$ if (file.findElementAt(editor.getCaretModel().getOffset()) instanceof PsiWhiteSpace)-->Line_4 $$ return[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_5 $$ selectionModel.selectWordAtCaret(false)[ FD ]
Line_9 $$ if (!Character.isJavaIdentifierPart(selection.charAt(i))) -->Line_10 $$ selectionModel.removeSelection()[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_13 $$ doRangeHighlighting(editor, project)[ FD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_5 $$ selectionModel.selectWordAtCaret(false)[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_14 $$ selectionModel.removeSelection()[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_13 $$ doRangeHighlighting(editor, project)[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_6 $$ String selection = selectionModel.getSelectedText()[ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_14 $$ selectionModel.removeSelection()[ FD ]
Line_8 $$ for (int i = 0; i < selection.length(); i++) -->Line_9 $$ if (!Character.isJavaIdentifierPart(selection.charAt(i))) [ CD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_3 $$ if (file.findElementAt(editor.getCaretModel().getOffset()) instanceof PsiWhiteSpace)[ CD ]
Line_6 $$ String selection = selectionModel.getSelectedText()-->Line_9 $$ if (!Character.isJavaIdentifierPart(selection.charAt(i))) [ FD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_8 $$ for (int i = 0; i < selection.length(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < selection.length(); i++) -->Line_9 $$ if (!Character.isJavaIdentifierPart(selection.charAt(i))) [ FD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_10 $$ selectionModel.removeSelection()[ FD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_6 $$ String selection = selectionModel.getSelectedText()[ FD ]
Line_2 $$ private static void handleNoUsageTargets(PsiFile file, @NotNull Editor editor, SelectionModel selectionModel, @NotNull Project project) -->Line_7 $$ LOG.assertTrue(selection != null)[ CD ]
