Line_34 $$ String expectedContent = sb.toString()-->Line_35 $$ Assert.assertTrue("Log content incorrect", s.contains(expectedContent))[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_15 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_24 $$ LogReader.readAcontainerLogs(dis, writer)[ CD ]
Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())[ FD ]
Line_23 $$ Writer writer = new StringWriter()-->Line_25 $$ String s = writer.toString()[ FD ]
Line_25 $$ String s = writer.toString()-->Line_35 $$ Assert.assertTrue("Log content incorrect", s.contains(expectedContent))[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_23 $$ Writer writer = new StringWriter()[ CD ]
Line_22 $$ DataInputStream dis = logReader.next(rLogKey)-->Line_24 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_18 $$ FileStatus fsStatus = fs.getFileStatus(remoteAppLogFile)[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_29 $$ Assert.assertTrue("Log Contents not matched", s.contains("Log Contents"))[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_13 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)[ CD ]
Line_13 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_17 $$ logWriter.close()[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_31 $$ for (int i = 0; i < numChars; i++) [ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_36 $$ Assert.assertEquals(expectedLength, s.length())[ CD ]
Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_17 $$ logWriter.close()[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_14 $$ LogKey logKey = new LogKey(testContainerId)[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_16 $$ logWriter.append(logKey, logValue)[ CD ]
Line_25 $$ String s = writer.toString()-->Line_28 $$ Assert.assertTrue("LogLength not matched", s.contains("LogLength:" + numChars))[ FD ]
Line_12 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()-->Line_15 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_30 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_26 $$ int expectedLength = "\n\nLogType:stdout".length() + ("\nLogLength:" + numChars).length() + "\nLog Contents:\n".length() + numChars-->Line_36 $$ Assert.assertEquals(expectedLength, s.length())[ FD ]
Line_25 $$ String s = writer.toString()-->Line_36 $$ Assert.assertEquals(expectedLength, s.length())[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_10 $$ int numChars = 80000[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_34 $$ String expectedContent = sb.toString()[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_20 $$ LogReader logReader = new LogReader(conf, remoteAppLogFile)[ CD ]
Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")-->Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ FD ]
Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())-->Line_11 $$ writeSrcFile(srcFilePath, "stdout", numChars)[ FD ]
Line_10 $$ int numChars = 80000-->Line_11 $$ writeSrcFile(srcFilePath, "stdout", numChars)[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_35 $$ Assert.assertTrue("Log content incorrect", s.contains(expectedContent))[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_9 $$ Path srcFilePath = new Path(t, testContainerId.toString())[ CD ]
Line_25 $$ String s = writer.toString()-->Line_29 $$ Assert.assertTrue("Log Contents not matched", s.contains("Log Contents"))[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_22 $$ DataInputStream dis = logReader.next(rLogKey)[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_8 $$ Path t = new Path(srcFileRoot, testContainerId.getApplicationAttemptId().getApplicationId().toString())[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_28 $$ Assert.assertTrue("LogLength not matched", s.contains("LogLength:" + numChars))[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_19 $$ Assert.assertEquals("permissions on log aggregation file are wrong", FsPermission.createImmutable((short) 0640), fsStatus.getPermission())[ CD ]
Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")-->Line_15 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())[ FD ]
Line_21 $$ LogKey rLogKey = new LogKey()-->Line_22 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_10 $$ int numChars = 80000-->Line_31 $$ for (int i = 0; i < numChars; i++) [ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_34 $$ String expectedContent = sb.toString()[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_11 $$ writeSrcFile(srcFilePath, "stdout", numChars)[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_12 $$ UserGroupInformation ugi = UserGroupInformation.getCurrentUser()[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_26 $$ int expectedLength = "\n\nLogType:stdout".length() + ("\nLogLength:" + numChars).length() + "\nLog Contents:\n".length() + numChars[ CD ]
Line_14 $$ LogKey logKey = new LogKey(testContainerId)-->Line_16 $$ logWriter.append(logKey, logValue)[ FD ]
Line_7 $$ ContainerId testContainerId = TestContainerId.newContainerId(1, 1, 1, 1)-->Line_8 $$ Path t = new Path(srcFileRoot, testContainerId.getApplicationAttemptId().getApplicationId().toString())[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_21 $$ LogKey rLogKey = new LogKey()[ CD ]
Line_20 $$ LogReader logReader = new LogReader(conf, remoteAppLogFile)-->Line_22 $$ DataInputStream dis = logReader.next(rLogKey)[ FD ]
Line_30 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(filler)[ FD ]
Line_15 $$ LogValue logValue = new LogValue(Collections.singletonList(srcFileRoot.toString()), testContainerId, ugi.getShortUserName())-->Line_16 $$ logWriter.append(logKey, logValue)[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_6 $$ Path srcFileRoot = new Path(workDir.getAbsolutePath(), "srcFiles")[ CD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_25 $$ String s = writer.toString()[ CD ]
Line_25 $$ String s = writer.toString()-->Line_27 $$ Assert.assertTrue("LogType not matched", s.contains("LogType:stdout"))[ FD ]
Line_18 $$ FileStatus fsStatus = fs.getFileStatus(remoteAppLogFile)-->Line_19 $$ Assert.assertEquals("permissions on log aggregation file are wrong", FsPermission.createImmutable((short) 0640), fsStatus.getPermission())[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_4 $$ File workDir = new File(testWorkDir, "testReadAcontainerLogs1")[ CD ]
Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")-->Line_18 $$ FileStatus fsStatus = fs.getFileStatus(remoteAppLogFile)[ FD ]
Line_31 $$ for (int i = 0; i < numChars; i++) -->Line_32 $$ sb.append(filler)[ CD ]
Line_23 $$ Writer writer = new StringWriter()-->Line_24 $$ LogReader.readAcontainerLogs(dis, writer)[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_5 $$ Path remoteAppLogFile = new Path(workDir.getAbsolutePath(), "aggregatedLogFile")[ CD ]
Line_13 $$ LogWriter logWriter = new LogWriter(conf, remoteAppLogFile, ugi)-->Line_16 $$ logWriter.append(logKey, logValue)[ FD ]
Line_2 $$ public void testReadAcontainerLogs1() throws Exception -->Line_27 $$ Assert.assertTrue("LogType not matched", s.contains("LogType:stdout"))[ CD ]
