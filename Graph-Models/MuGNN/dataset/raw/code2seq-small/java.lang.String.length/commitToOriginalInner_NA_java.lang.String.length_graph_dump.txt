Line_2 $$ private void commitToOriginalInner() -->Line_11 $$ documentManager.commitDocument(myOrigDocument)[ CD ]
Line_4 $$ final Map<PsiLanguageInjectionHost, Set<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>>> map = ContainerUtil.classify(myMarkers.iterator(), new Convertor<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>, PsiLanguageInjectionHost>() -->Line_13 $$ for (PsiLanguageInjectionHost host : map.keySet()) [ FD ]
Line_2 $$ private void commitToOriginalInner() -->Line_3 $$ final String text = myNewDocument.getText()[ CD ]
Line_2 $$ private void commitToOriginalInner() -->Line_10 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(myProject)[ CD ]
Line_4 $$ final Map<PsiLanguageInjectionHost, Set<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>>> map = ContainerUtil.classify(myMarkers.iterator(), new Convertor<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>, PsiLanguageInjectionHost>() -->Line_6 $$ final PsiElement element = o.third.getElement()[ CD ]
Line_4 $$ final Map<PsiLanguageInjectionHost, Set<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>>> map = ContainerUtil.classify(myMarkers.iterator(), new Convertor<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>, PsiLanguageInjectionHost>() -->Line_19 $$ for (Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer> entry : map.get(host)) [ FD ]
Line_25 $$ if (insideHost != null) -->Line_26 $$ sb.append(hostText.substring(insideHost.getEndOffset(), localInsideHost.getStartOffset()))[ CD ]
Line_3 $$ final String text = myNewDocument.getText()-->Line_28 $$ sb.append(localInsideFile.getEndOffset() <= text.length() && !localInsideFile.isEmpty() ? localInsideFile.substring(text) : "")[ FD ]
Line_4 $$ final Map<PsiLanguageInjectionHost, Set<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>>> map = ContainerUtil.classify(myMarkers.iterator(), new Convertor<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>, PsiLanguageInjectionHost>() -->Line_7 $$ return (PsiLanguageInjectionHost) element[ CD ]
Line_2 $$ private void commitToOriginalInner() -->Line_4 $$ final Map<PsiLanguageInjectionHost, Set<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>>> map = ContainerUtil.classify(myMarkers.iterator(), new Convertor<Trinity<RangeMarker, RangeMarker, SmartPsiElementPointer>, PsiLanguageInjectionHost>() [ CD ]
