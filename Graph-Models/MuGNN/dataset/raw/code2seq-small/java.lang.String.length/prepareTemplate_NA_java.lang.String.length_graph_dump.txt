Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) -->Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)[ CD ]
Line_26 $$ return new Runnable() -->Line_28 $$ customLiveTemplate.expand(key, callback)[ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, myProject)[ FD ]
Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, myProject)-->Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)[ FD ]
Line_3 $$ if (editor.getSelectionModel().hasSelection()) -->Line_4 $$ return null[ CD ]
Line_21 $$ if (key != null) -->Line_24 $$ CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_11 $$ for (final CustomLiveTemplate customLiveTemplate : CustomLiveTemplate.EP_NAME.getExtensions()) -->Line_13 $$ if (editor.getCaretModel().getCaretCount() > 1 && !supportsMultiCaretMode(customLiveTemplate)) [ FD ]
Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)-->Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) [ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_16 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)[ CD ]
Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) -->Line_19 $$ final CustomTemplateCallback callback = new CustomTemplateCallback(editor, file)[ CD ]
Line_21 $$ if (key != null) -->Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) [ CD ]
Line_24 $$ CharSequence text = document.getImmutableCharSequence()-->Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) [ FD ]
Line_21 $$ if (key != null) -->Line_23 $$ int offsetBeforeKey = caretOffset - key.length()[ CD ]
Line_23 $$ int offsetBeforeKey = caretOffset - key.length()-->Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) [ FD ]
Line_22 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) [ FD ]
Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)-->Line_28 $$ customLiveTemplate.expand(key, callback)[ FD ]
Line_21 $$ if (key != null) -->Line_22 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)-->Line_36 $$ return startNonCustomTemplates(template2argument, editor, processor)[ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)[ FD ]
Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)-->Line_21 $$ if (key != null) [ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_3 $$ if (editor.getSelectionModel().hasSelection()) [ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) [ FD ]
Line_11 $$ for (final CustomLiveTemplate customLiveTemplate : CustomLiveTemplate.EP_NAME.getExtensions()) -->Line_28 $$ customLiveTemplate.expand(key, callback)[ FD ]
Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) -->Line_17 $$ PsiDocumentManager.getInstance(myProject).commitDocument(document)[ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_7 $$ if (file == null)[ CD ]
Line_11 $$ for (final CustomLiveTemplate customLiveTemplate : CustomLiveTemplate.EP_NAME.getExtensions()) -->Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)[ FD ]
Line_19 $$ final CustomTemplateCallback callback = new CustomTemplateCallback(editor, file)-->Line_28 $$ customLiveTemplate.expand(key, callback)[ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_36 $$ return startNonCustomTemplates(template2argument, editor, processor)[ FD ]
Line_7 $$ if (file == null)-->Line_8 $$ return null[ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_13 $$ if (editor.getCaretModel().getCaretCount() > 1 && !supportsMultiCaretMode(customLiveTemplate)) [ FD ]
Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) -->Line_16 $$ final Document document = editor.getDocument()[ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_9 $$ TemplateSettings templateSettings = TemplateSettings.getInstance()[ CD ]
Line_16 $$ final Document document = editor.getDocument()-->Line_24 $$ CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) -->Line_13 $$ if (editor.getCaretModel().getCaretCount() > 1 && !supportsMultiCaretMode(customLiveTemplate)) [ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_3 $$ if (editor.getSelectionModel().hasSelection()) [ CD ]
Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, myProject)-->Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) [ FD ]
Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)-->Line_23 $$ int offsetBeforeKey = caretOffset - key.length()[ FD ]
Line_19 $$ final CustomTemplateCallback callback = new CustomTemplateCallback(editor, file)-->Line_20 $$ final String key = customLiveTemplate.computeTemplateKey(callback)[ FD ]
Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) -->Line_21 $$ if (key != null) [ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_22 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) [ FD ]
Line_25 $$ if (template2argument == null || !containsTemplateStartingBefore(template2argument, offsetBeforeKey, caretOffset, text)) -->Line_26 $$ return new Runnable() [ CD ]
Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, myProject)-->Line_7 $$ if (file == null)[ FD ]
Line_16 $$ final Document document = editor.getDocument()-->Line_17 $$ PsiDocumentManager.getInstance(myProject).commitDocument(document)[ FD ]
Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) -->Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) [ CD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_36 $$ return startNonCustomTemplates(template2argument, editor, processor)[ CD ]
Line_9 $$ TemplateSettings templateSettings = TemplateSettings.getInstance()-->Line_10 $$ Map<TemplateImpl, String> template2argument = findMatchingTemplates(file, editor, shortcutChar, templateSettings)[ FD ]
Line_11 $$ for (final CustomLiveTemplate customLiveTemplate : CustomLiveTemplate.EP_NAME.getExtensions()) -->Line_12 $$ if (shortcutChar == customLiveTemplate.getShortcut()) [ FD ]
Line_2 $$ public Runnable prepareTemplate(final Editor editor, char shortcutChar, @Nullable final PairProcessor<String, String> processor) -->Line_6 $$ PsiFile file = PsiUtilBase.getPsiFileInEditor(editor, myProject)[ CD ]
Line_11 $$ for (final CustomLiveTemplate customLiveTemplate : CustomLiveTemplate.EP_NAME.getExtensions()) -->Line_18 $$ if (isApplicable(customLiveTemplate, editor, file)) [ FD ]
