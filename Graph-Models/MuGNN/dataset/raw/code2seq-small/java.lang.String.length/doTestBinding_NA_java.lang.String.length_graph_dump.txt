Line_11 $$ CommonsMultipartFile file1b = (CommonsMultipartFile) file1List.get(1)-->Line_14 $$ assertEquals(file1b, mtb1.getField1()[1])[ FD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_39 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_26 $$ resolver.cleanupMultipart(request)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_7 $$ binder.registerCustomEditor(byte[].class, new ByteArrayMultipartFileEditor())[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_22 $$ binder.bind(request)[ CD ]
Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()-->Line_4 $$ assertArrayEquals(null, mtb1.getField1())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_25 $$ assertEquals(new String(file2.getBytes(), "UTF-16"), mtb2.getField2())[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_34 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_40 $$ assertTrue(mtb2.getField2().length() == 0)[ CD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_38 $$ binder.setBindEmptyMultipartFiles(true)[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_34 $$ binder.bind(request)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_32 $$ binder.setBindEmptyMultipartFiles(false)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_30 $$ resolver.setEmpty(true)[ CD ]
Line_12 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_15 $$ assertEquals(new String(file2.getBytes()), new String(mtb1.getField2()))[ FD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_24 $$ assertEquals(new String(file1b.getBytes()), mtb2.getField1()[1])[ FD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_20 $$ binder.registerCustomEditor(String.class, "field1", new StringMultipartFileEditor())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_10 $$ CommonsMultipartFile file1a = (CommonsMultipartFile) file1List.get(0)[ CD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_34 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_12 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_30 $$ resolver.setEmpty(true)[ FD ]
Line_31 $$ request = resolver.resolveMultipart(originalRequest)-->Line_39 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_21 $$ binder.registerCustomEditor(String.class, "field2", new StringMultipartFileEditor("UTF-16"))[ CD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_34 $$ binder.bind(request)[ FD ]
Line_31 $$ request = resolver.resolveMultipart(originalRequest)-->Line_37 $$ request = resolver.resolveMultipart(originalRequest)[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_32 $$ binder.setBindEmptyMultipartFiles(false)[ FD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_22 $$ binder.bind(request)[ FD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_21 $$ binder.registerCustomEditor(String.class, "field2", new StringMultipartFileEditor("UTF-16"))[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_14 $$ assertEquals(file1b, mtb1.getField1()[1])[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_33 $$ String firstBound = mtb2.getField2()[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_23 $$ assertEquals(new String(file1a.getBytes()), mtb2.getField1()[0])[ CD ]
Line_10 $$ CommonsMultipartFile file1a = (CommonsMultipartFile) file1List.get(0)-->Line_13 $$ assertEquals(file1a, mtb1.getField1()[0])[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_31 $$ request = resolver.resolveMultipart(originalRequest)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_15 $$ assertEquals(new String(file2.getBytes()), new String(mtb1.getField2()))[ CD ]
Line_12 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_25 $$ assertEquals(new String(file2.getBytes(), "UTF-16"), mtb2.getField2())[ FD ]
Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")-->Line_32 $$ binder.setBindEmptyMultipartFiles(false)[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_22 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_22 $$ binder.bind(request)[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_7 $$ binder.registerCustomEditor(byte[].class, new ByteArrayMultipartFileEditor())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_39 $$ binder.bind(request)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_8 $$ binder.bind(request)[ CD ]
Line_10 $$ CommonsMultipartFile file1a = (CommonsMultipartFile) file1List.get(0)-->Line_23 $$ assertEquals(new String(file1a.getBytes()), mtb2.getField1()[0])[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_20 $$ binder.registerCustomEditor(String.class, "field1", new StringMultipartFileEditor())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_8 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_4 $$ assertArrayEquals(null, mtb1.getField1())[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_18 $$ assertEquals(null, mtb2.getField2())[ CD ]
Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()-->Line_13 $$ assertEquals(file1a, mtb1.getField1()[0])[ FD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_17 $$ assertArrayEquals(null, mtb2.getField1())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_20 $$ binder.registerCustomEditor(String.class, "field1", new StringMultipartFileEditor())[ CD ]
Line_9 $$ List<MultipartFile> file1List = request.getFiles("field1")-->Line_10 $$ CommonsMultipartFile file1a = (CommonsMultipartFile) file1List.get(0)[ FD ]
Line_37 $$ request = resolver.resolveMultipart(originalRequest)-->Line_39 $$ binder.bind(request)[ FD ]
Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()-->Line_5 $$ assertEquals(null, mtb1.getField2())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_11 $$ CommonsMultipartFile file1b = (CommonsMultipartFile) file1List.get(1)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_37 $$ request = resolver.resolveMultipart(originalRequest)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_35 $$ assertTrue(mtb2.getField2().length() > 0)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_29 $$ assertTrue(((MockFileItem) file2.getFileItem()).deleted)[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_19 $$ binder = new ServletRequestDataBinder(mtb2, "mybean")[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_39 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_9 $$ List<MultipartFile> file1List = request.getFiles("field1")[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_28 $$ assertTrue(((MockFileItem) file1b.getFileItem()).deleted)[ CD ]
Line_11 $$ CommonsMultipartFile file1b = (CommonsMultipartFile) file1List.get(1)-->Line_28 $$ assertTrue(((MockFileItem) file1b.getFileItem()).deleted)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_27 $$ assertTrue(((MockFileItem) file1a.getFileItem()).deleted)[ CD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_23 $$ assertEquals(new String(file1a.getBytes()), mtb2.getField1()[0])[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_31 $$ request = resolver.resolveMultipart(originalRequest)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_24 $$ assertEquals(new String(file1b.getBytes()), mtb2.getField1()[1])[ CD ]
Line_31 $$ request = resolver.resolveMultipart(originalRequest)-->Line_34 $$ binder.bind(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_36 $$ assertEquals(firstBound, mtb2.getField2())[ CD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_40 $$ assertTrue(mtb2.getField2().length() == 0)[ FD ]
Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()-->Line_15 $$ assertEquals(new String(file2.getBytes()), new String(mtb1.getField2()))[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_26 $$ resolver.cleanupMultipart(request)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_9 $$ List<MultipartFile> file1List = request.getFiles("field1")[ CD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_39 $$ binder.bind(request)[ FD ]
Line_9 $$ List<MultipartFile> file1List = request.getFiles("field1")-->Line_11 $$ CommonsMultipartFile file1b = (CommonsMultipartFile) file1List.get(1)[ FD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_36 $$ assertEquals(firstBound, mtb2.getField2())[ FD ]
Line_10 $$ CommonsMultipartFile file1a = (CommonsMultipartFile) file1List.get(0)-->Line_27 $$ assertTrue(((MockFileItem) file1a.getFileItem()).deleted)[ FD ]
Line_12 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")-->Line_29 $$ assertTrue(((MockFileItem) file2.getFileItem()).deleted)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_37 $$ request = resolver.resolveMultipart(originalRequest)[ CD ]
Line_33 $$ String firstBound = mtb2.getField2()-->Line_36 $$ assertEquals(firstBound, mtb2.getField2())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_13 $$ assertEquals(file1a, mtb1.getField1()[0])[ CD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_17 $$ assertArrayEquals(null, mtb2.getField1())[ CD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_33 $$ String firstBound = mtb2.getField2()[ FD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_35 $$ assertTrue(mtb2.getField2().length() > 0)[ FD ]
Line_3 $$ MultipartTestBean1 mtb1 = new MultipartTestBean1()-->Line_14 $$ assertEquals(file1b, mtb1.getField1()[1])[ FD ]
Line_11 $$ CommonsMultipartFile file1b = (CommonsMultipartFile) file1List.get(1)-->Line_24 $$ assertEquals(new String(file1b.getBytes()), mtb2.getField1()[1])[ FD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_25 $$ assertEquals(new String(file2.getBytes(), "UTF-16"), mtb2.getField2())[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_12 $$ CommonsMultipartFile file2 = (CommonsMultipartFile) request.getFile("field2")[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_8 $$ binder.bind(request)[ FD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_21 $$ binder.registerCustomEditor(String.class, "field2", new StringMultipartFileEditor("UTF-16"))[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_38 $$ binder.setBindEmptyMultipartFiles(true)[ CD ]
Line_6 $$ ServletRequestDataBinder binder = new ServletRequestDataBinder(mtb1, "mybean")-->Line_38 $$ binder.setBindEmptyMultipartFiles(true)[ FD ]
Line_2 $$ private void doTestBinding(MockCommonsMultipartResolver resolver, MockHttpServletRequest originalRequest, MultipartHttpServletRequest request) throws UnsupportedEncodingException -->Line_5 $$ assertEquals(null, mtb1.getField2())[ CD ]
Line_16 $$ MultipartTestBean2 mtb2 = new MultipartTestBean2()-->Line_18 $$ assertEquals(null, mtb2.getField2())[ FD ]
