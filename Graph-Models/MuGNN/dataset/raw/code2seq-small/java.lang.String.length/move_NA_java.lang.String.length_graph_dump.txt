Line_5 $$ final Document document = editor.getDocument()-->Line_45 $$ document.deleteString(myInfo.range1.getStartOffset() + textToInsert2.length(), myInfo.range1.getEndOffset())[ FD ]
Line_11 $$ final int start2 = document.getLineStartOffset(myInfo.toMove2.startLine)-->Line_23 $$ myInfo.range2 = document.createRangeMarker(start2, end2)[ FD ]
Line_48 $$ int e = myInfo.range2.getEndOffset()-->Line_49 $$ if (e > s) [ FD ]
Line_16 $$ TextRange range = new TextRange(start, end)-->Line_18 $$ if (range.intersectsStrict(range2) && !range.equals(range2)) [ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_5 $$ final Document document = editor.getDocument()[ FD ]
Line_9 $$ if (!StringUtil.endsWithChar(textToInsert, '\n'))-->Line_10 $$ textToInsert += '\n'[ CD ]
Line_52 $$ final Project project = file.getProject()-->Line_76 $$ indentLinesIn(editor, file, document, project, myInfo.range2)[ FD ]
Line_6 $$ final int start = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.startLine)-->Line_70 $$ restoreSelection(editor, selectionStart, selectionEnd, start, myInfo.range2.getStartOffset())[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_40 $$ final boolean hasSelection = selectionModel.hasSelection()[ CD ]
Line_6 $$ final int start = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.startLine)-->Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_74 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_79 $$ indentLinesIn(editor, file, document, project, myInfo.range1)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_52 $$ final Project project = file.getProject()[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_44 $$ document.insertString(myInfo.range1.getStartOffset(), textToInsert2)[ FD ]
Line_11 $$ final int start2 = document.getLineStartOffset(myInfo.toMove2.startLine)-->Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_58 $$ FoldRegion newTopRegion = findTopLevelRegionInRange(editor, myInfo.range1)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_45 $$ document.deleteString(myInfo.range1.getStartOffset() + textToInsert2.length(), myInfo.range1.getEndOffset())[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_48 $$ int e = myInfo.range2.getEndOffset()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) [ CD ]
Line_47 $$ int s = myInfo.range2.getStartOffset() + textToInsert.length()-->Line_49 $$ if (e > s) [ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() [ FD ]
Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()-->Line_46 $$ document.insertString(myInfo.range2.getStartOffset(), textToInsert)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_6 $$ final int start = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.startLine)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_81 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_10 $$ textToInsert += '\n'-->Line_47 $$ int s = myInfo.range2.getStartOffset() + textToInsert.length()[ FD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_28 $$ myInfo.range2.setGreedyToRight(true)[ CD ]
Line_63 $$ if (newBottomRegion != null) -->Line_64 $$ newBottomRegion.setExpanded(topRegion.isExpanded())[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_37 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_79 $$ indentLinesIn(editor, file, document, project, myInfo.range1)[ FD ]
Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() -->Line_62 $$ FoldRegion newBottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)[ CD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_32 $$ myInfo.range2.setGreedyToLeft(true)[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()[ FD ]
Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()-->Line_9 $$ if (!StringUtil.endsWithChar(textToInsert, '\n'))[ FD ]
Line_10 $$ textToInsert += '\n'-->Line_46 $$ document.insertString(myInfo.range2.getStartOffset(), textToInsert)[ FD ]
Line_42 $$ final FoldRegion topRegion = findTopLevelRegionInRange(editor, myInfo.range1)-->Line_64 $$ newBottomRegion.setExpanded(topRegion.isExpanded())[ FD ]
Line_48 $$ int e = myInfo.range2.getEndOffset()-->Line_50 $$ document.deleteString(s, e)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_42 $$ final FoldRegion topRegion = findTopLevelRegionInRange(editor, myInfo.range1)[ CD ]
Line_35 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_72 $$ caretModel.moveToOffset(myInfo.range2.getStartOffset() + caretRelativePos)[ FD ]
Line_62 $$ FoldRegion newBottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)-->Line_63 $$ if (newBottomRegion != null) [ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()[ CD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_25 $$ myInfo.range1.setGreedyToLeft(true)[ CD ]
Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() -->Line_58 $$ FoldRegion newTopRegion = findTopLevelRegionInRange(editor, myInfo.range1)[ CD ]
Line_12 $$ final int end2 = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove2.endLine)-->Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()[ FD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_26 $$ myInfo.range1.setGreedyToRight(false)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_78 $$ if (myInfo.indentSource) [ CD ]
Line_43 $$ final FoldRegion bottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)-->Line_60 $$ newTopRegion.setExpanded(bottomRegion.isExpanded())[ FD ]
Line_49 $$ if (e > s) -->Line_50 $$ document.deleteString(s, e)[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_39 $$ final int selectionEnd = selectionModel.getSelectionEnd()-->Line_70 $$ restoreSelection(editor, selectionStart, selectionEnd, start, myInfo.range2.getStartOffset())[ FD ]
Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()-->Line_10 $$ textToInsert += '\n'[ FD ]
Line_54 $$ if (topRegion != null && bottomRegion != null) -->Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() [ CD ]
Line_75 $$ if (myInfo.indentTarget) -->Line_76 $$ indentLinesIn(editor, file, document, project, myInfo.range2)[ CD ]
Line_6 $$ final int start = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.startLine)-->Line_22 $$ myInfo.range1 = document.createRangeMarker(start, end)[ FD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_27 $$ myInfo.range2.setGreedyToLeft(true)[ CD ]
Line_14 $$ if (!StringUtil.endsWithChar(textToInsert2, '\n'))-->Line_15 $$ textToInsert2 += '\n'[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_6 $$ final int start = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.startLine)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_44 $$ document.insertString(myInfo.range1.getStartOffset(), textToInsert2)[ CD ]
Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()-->Line_14 $$ if (!StringUtil.endsWithChar(textToInsert2, '\n'))[ FD ]
Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() -->Line_59 $$ if (newTopRegion != null) [ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_14 $$ if (!StringUtil.endsWithChar(textToInsert2, '\n'))[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_69 $$ if (hasSelection) [ CD ]
Line_52 $$ final Project project = file.getProject()-->Line_53 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_35 $$ final CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_11 $$ final int start2 = document.getLineStartOffset(myInfo.toMove2.startLine)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_39 $$ final int selectionEnd = selectionModel.getSelectionEnd()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_4 $$ myMover.beforeMove(editor, myInfo, myIsDown)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_47 $$ int s = myInfo.range2.getStartOffset() + textToInsert.length()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_9 $$ if (!StringUtil.endsWithChar(textToInsert, '\n'))[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_5 $$ final Document document = editor.getDocument()[ CD ]
Line_37 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_38 $$ final int selectionStart = selectionModel.getSelectionStart()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_38 $$ final int selectionStart = selectionModel.getSelectionStart()[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_76 $$ indentLinesIn(editor, file, document, project, myInfo.range2)[ FD ]
Line_15 $$ textToInsert2 += '\n'-->Line_45 $$ document.deleteString(myInfo.range1.getStartOffset() + textToInsert2.length(), myInfo.range1.getEndOffset())[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_55 $$ CodeFoldingManager.getInstance(project).updateFoldRegions(editor)[ FD ]
Line_18 $$ if (range.intersectsStrict(range2) && !range.equals(range2)) -->Line_20 $$ return[ CD ]
Line_37 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_39 $$ final int selectionEnd = selectionModel.getSelectionEnd()[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_22 $$ myInfo.range1 = document.createRangeMarker(start, end)[ FD ]
Line_54 $$ if (topRegion != null && bottomRegion != null) -->Line_55 $$ CodeFoldingManager.getInstance(project).updateFoldRegions(editor)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_11 $$ final int start2 = document.getLineStartOffset(myInfo.toMove2.startLine)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_23 $$ myInfo.range2 = document.createRangeMarker(start2, end2)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_73 $$ myMover.afterMove(editor, file, myInfo, myIsDown)[ CD ]
Line_35 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_36 $$ final int caretRelativePos = caretModel.getOffset() - start[ FD ]
Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()-->Line_45 $$ document.deleteString(myInfo.range1.getStartOffset() + textToInsert2.length(), myInfo.range1.getEndOffset())[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_17 $$ TextRange range2 = new TextRange(start2, end2)[ CD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_33 $$ myInfo.range2.setGreedyToRight(false)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_52 $$ final Project project = file.getProject()[ CD ]
Line_56 $$ editor.getFoldingModel().runBatchFoldingOperation(new Runnable() -->Line_63 $$ if (newBottomRegion != null) [ CD ]
Line_37 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_40 $$ final boolean hasSelection = selectionModel.hasSelection()[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_12 $$ final int end2 = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove2.endLine)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_12 $$ final int end2 = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove2.endLine)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_43 $$ final FoldRegion bottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)[ CD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_50 $$ document.deleteString(s, e)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_72 $$ caretModel.moveToOffset(myInfo.range2.getStartOffset() + caretRelativePos)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_75 $$ if (myInfo.indentTarget) [ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_41 $$ caretModel.moveToOffset(0)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_81 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_18 $$ if (range.intersectsStrict(range2) && !range.equals(range2)) -->Line_19 $$ LOGGER.error("Wrong move ranges: " + start + ":" + end + "(" + textToInsert + "), " + start2 + ":" + end2 + "(" + textToInsert2 + "), mover: " + myMover)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_7 $$ final int end = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.endLine)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_62 $$ FoldRegion newBottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_42 $$ final FoldRegion topRegion = findTopLevelRegionInRange(editor, myInfo.range1)[ FD ]
Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()-->Line_15 $$ textToInsert2 += '\n'[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_70 $$ restoreSelection(editor, selectionStart, selectionEnd, start, myInfo.range2.getStartOffset())[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_35 $$ final CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_47 $$ int s = myInfo.range2.getStartOffset() + textToInsert.length()-->Line_50 $$ document.deleteString(s, e)[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_23 $$ myInfo.range2 = document.createRangeMarker(start2, end2)[ FD ]
Line_13 $$ String textToInsert2 = document.getCharsSequence().subSequence(start2, end2).toString()-->Line_44 $$ document.insertString(myInfo.range1.getStartOffset(), textToInsert2)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_16 $$ TextRange range = new TextRange(start, end)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_46 $$ document.insertString(myInfo.range2.getStartOffset(), textToInsert)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_43 $$ final FoldRegion bottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)[ FD ]
Line_17 $$ TextRange range2 = new TextRange(start2, end2)-->Line_18 $$ if (range.intersectsStrict(range2) && !range.equals(range2)) [ FD ]
Line_35 $$ final CaretModel caretModel = editor.getCaretModel()-->Line_41 $$ caretModel.moveToOffset(0)[ FD ]
Line_7 $$ final int end = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.endLine)-->Line_22 $$ myInfo.range1 = document.createRangeMarker(start, end)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_22 $$ myInfo.range1 = document.createRangeMarker(start, end)[ CD ]
Line_69 $$ if (hasSelection) -->Line_70 $$ restoreSelection(editor, selectionStart, selectionEnd, start, myInfo.range2.getStartOffset())[ CD ]
Line_15 $$ textToInsert2 += '\n'-->Line_44 $$ document.insertString(myInfo.range1.getStartOffset(), textToInsert2)[ FD ]
Line_78 $$ if (myInfo.indentSource) -->Line_79 $$ indentLinesIn(editor, file, document, project, myInfo.range1)[ CD ]
Line_38 $$ final int selectionStart = selectionModel.getSelectionStart()-->Line_70 $$ restoreSelection(editor, selectionStart, selectionEnd, start, myInfo.range2.getStartOffset())[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_76 $$ indentLinesIn(editor, file, document, project, myInfo.range2)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_4 $$ myMover.beforeMove(editor, myInfo, myIsDown)[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_46 $$ document.insertString(myInfo.range2.getStartOffset(), textToInsert)[ FD ]
Line_59 $$ if (newTopRegion != null) -->Line_60 $$ newTopRegion.setExpanded(bottomRegion.isExpanded())[ CD ]
Line_52 $$ final Project project = file.getProject()-->Line_74 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_7 $$ final int end = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.endLine)[ FD ]
Line_52 $$ final Project project = file.getProject()-->Line_55 $$ CodeFoldingManager.getInstance(project).updateFoldRegions(editor)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_54 $$ if (topRegion != null && bottomRegion != null) [ CD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_31 $$ myInfo.range1.setGreedyToRight(true)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_49 $$ if (e > s) [ CD ]
Line_58 $$ FoldRegion newTopRegion = findTopLevelRegionInRange(editor, myInfo.range1)-->Line_59 $$ if (newTopRegion != null) [ FD ]
Line_62 $$ FoldRegion newBottomRegion = findTopLevelRegionInRange(editor, myInfo.range2)-->Line_64 $$ newBottomRegion.setExpanded(topRegion.isExpanded())[ FD ]
Line_24 $$ if (myInfo.range1.getStartOffset() < myInfo.range2.getStartOffset()) -->Line_30 $$ myInfo.range1.setGreedyToLeft(true)[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_36 $$ final int caretRelativePos = caretModel.getOffset() - start[ CD ]
Line_12 $$ final int end2 = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove2.endLine)-->Line_23 $$ myInfo.range2 = document.createRangeMarker(start2, end2)[ FD ]
Line_58 $$ FoldRegion newTopRegion = findTopLevelRegionInRange(editor, myInfo.range1)-->Line_60 $$ newTopRegion.setExpanded(bottomRegion.isExpanded())[ FD ]
Line_7 $$ final int end = StatementUpDownMover.getLineStartSafeOffset(document, myInfo.toMove.endLine)-->Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_53 $$ PsiDocumentManager.getInstance(project).commitAllDocuments()[ CD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_73 $$ myMover.afterMove(editor, file, myInfo, myIsDown)[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_74 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_52 $$ final Project project = file.getProject()-->Line_79 $$ indentLinesIn(editor, file, document, project, myInfo.range1)[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_37 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ FD ]
Line_8 $$ String textToInsert = document.getCharsSequence().subSequence(start, end).toString()-->Line_47 $$ int s = myInfo.range2.getStartOffset() + textToInsert.length()[ FD ]
Line_2 $$ public final void move(final Editor editor, final PsiFile file) -->Line_18 $$ if (range.intersectsStrict(range2) && !range.equals(range2)) [ CD ]
