Line_2 $$ private Map<String, String> _generateVariables(Set<String> requiredFileNames) -->Line_4 $$ Set<String> generatedVariables = new HashSet()[ CD ]
Line_18 $$ if (!matcher.matches()) -->Line_28 $$ sb.append(currentCharSequence)[ CD ]
Line_2 $$ private Map<String, String> _generateVariables(Set<String> requiredFileNames) -->Line_3 $$ Map<String, Integer> indexes = new HashMap()[ CD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_35 $$ index = indexes.get(generatedVariable) + 1[ FD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_8 $$ CharSequence firstCharSequence = requiredFileName.subSequence(0, 1)[ FD ]
Line_16 $$ CharSequence currentCharSequence = requiredFileName.subSequence(i, i + 1)-->Line_28 $$ sb.append(currentCharSequence)[ FD ]
Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)-->Line_18 $$ if (!matcher.matches()) [ FD ]
Line_16 $$ CharSequence currentCharSequence = requiredFileName.subSequence(i, i + 1)-->Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)[ FD ]
Line_22 $$ if (matcher.matches()) -->Line_23 $$ sb.append(StringUtil.toUpperCase(nextCharSequence.toString()))[ CD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_34 $$ if (indexes.containsKey(generatedVariable)) [ FD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_41 $$ generatedVariablesMap.put(requiredFileName, generatedVariable)[ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_20 $$ CharSequence nextCharSequence = requiredFileName.subSequence(i, i + 1)[ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_16 $$ CharSequence currentCharSequence = requiredFileName.subSequence(i, i + 1)[ FD ]
Line_33 $$ int index = 1-->Line_35 $$ index = indexes.get(generatedVariable) + 1[ FD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_19 $$ while (++i < requiredFileName.length()) [ FD ]
Line_7 $$ StringBundler sb = new StringBundler()-->Line_23 $$ sb.append(StringUtil.toUpperCase(nextCharSequence.toString()))[ FD ]
Line_35 $$ index = indexes.get(generatedVariable) + 1-->Line_38 $$ generatedVariable += index[ FD ]
Line_18 $$ if (!matcher.matches()) -->Line_19 $$ while (++i < requiredFileName.length()) [ CD ]
Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)-->Line_22 $$ if (matcher.matches()) [ FD ]
Line_10 $$ if (!matcher.matches()) -->Line_11 $$ sb.append(StringPool.UNDERLINE)[ CD ]
Line_32 $$ if (generatedVariables.contains(generatedVariable)) -->Line_34 $$ if (indexes.containsKey(generatedVariable)) [ CD ]
Line_20 $$ CharSequence nextCharSequence = requiredFileName.subSequence(i, i + 1)-->Line_21 $$ matcher = _validCharactersPattern.matcher(nextCharSequence)[ FD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_20 $$ CharSequence nextCharSequence = requiredFileName.subSequence(i, i + 1)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler()-->Line_28 $$ sb.append(currentCharSequence)[ FD ]
Line_19 $$ while (++i < requiredFileName.length()) -->Line_20 $$ CharSequence nextCharSequence = requiredFileName.subSequence(i, i + 1)[ CD ]
Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)-->Line_21 $$ matcher = _validCharactersPattern.matcher(nextCharSequence)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler()-->Line_13 $$ sb.append(firstCharSequence)[ FD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_32 $$ if (generatedVariables.contains(generatedVariable)) [ FD ]
Line_20 $$ CharSequence nextCharSequence = requiredFileName.subSequence(i, i + 1)-->Line_23 $$ sb.append(StringUtil.toUpperCase(nextCharSequence.toString()))[ FD ]
Line_32 $$ if (generatedVariables.contains(generatedVariable)) -->Line_33 $$ int index = 1[ CD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_37 $$ indexes.put(generatedVariable, index)[ FD ]
Line_4 $$ Set<String> generatedVariables = new HashSet()-->Line_40 $$ generatedVariables.add(generatedVariable)[ FD ]
Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)-->Line_22 $$ if (matcher.matches()) [ FD ]
Line_19 $$ while (++i < requiredFileName.length()) -->Line_21 $$ matcher = _validCharactersPattern.matcher(nextCharSequence)[ CD ]
Line_38 $$ generatedVariable += index-->Line_40 $$ generatedVariables.add(generatedVariable)[ FD ]
Line_8 $$ CharSequence firstCharSequence = requiredFileName.subSequence(0, 1)-->Line_13 $$ sb.append(firstCharSequence)[ FD ]
Line_33 $$ int index = 1-->Line_37 $$ indexes.put(generatedVariable, index)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler()-->Line_31 $$ String generatedVariable = sb.toString()[ FD ]
Line_5 $$ Map<String, String> generatedVariablesMap = new HashMap()-->Line_41 $$ generatedVariablesMap.put(requiredFileName, generatedVariable)[ FD ]
Line_33 $$ int index = 1-->Line_38 $$ generatedVariable += index[ FD ]
Line_10 $$ if (!matcher.matches()) -->Line_13 $$ sb.append(firstCharSequence)[ CD ]
Line_19 $$ while (++i < requiredFileName.length()) -->Line_22 $$ if (matcher.matches()) [ CD ]
Line_2 $$ private Map<String, String> _generateVariables(Set<String> requiredFileNames) -->Line_5 $$ Map<String, String> generatedVariablesMap = new HashMap()[ CD ]
Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)-->Line_10 $$ if (!matcher.matches()) [ FD ]
Line_35 $$ index = indexes.get(generatedVariable) + 1-->Line_37 $$ indexes.put(generatedVariable, index)[ FD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_38 $$ generatedVariable += index[ FD ]
Line_2 $$ private Map<String, String> _generateVariables(Set<String> requiredFileNames) -->Line_43 $$ return generatedVariablesMap[ CD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_16 $$ CharSequence currentCharSequence = requiredFileName.subSequence(i, i + 1)[ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)[ CD ]
Line_32 $$ if (generatedVariables.contains(generatedVariable)) -->Line_37 $$ indexes.put(generatedVariable, index)[ CD ]
Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)-->Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)[ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_16 $$ CharSequence currentCharSequence = requiredFileName.subSequence(i, i + 1)[ CD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) [ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_19 $$ while (++i < requiredFileName.length()) [ FD ]
Line_34 $$ if (indexes.containsKey(generatedVariable)) -->Line_35 $$ index = indexes.get(generatedVariable) + 1[ CD ]
Line_3 $$ Map<String, Integer> indexes = new HashMap()-->Line_35 $$ index = indexes.get(generatedVariable) + 1[ FD ]
Line_31 $$ String generatedVariable = sb.toString()-->Line_40 $$ generatedVariables.add(generatedVariable)[ FD ]
Line_6 $$ for (String requiredFileName : requiredFileNames) -->Line_41 $$ generatedVariablesMap.put(requiredFileName, generatedVariable)[ FD ]
Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)-->Line_18 $$ if (!matcher.matches()) [ FD ]
Line_3 $$ Map<String, Integer> indexes = new HashMap()-->Line_37 $$ indexes.put(generatedVariable, index)[ FD ]
Line_15 $$ for (int i = 1; i < requiredFileName.length(); i++) -->Line_18 $$ if (!matcher.matches()) [ CD ]
Line_17 $$ matcher = _validCharactersPattern.matcher(currentCharSequence)-->Line_21 $$ matcher = _validCharactersPattern.matcher(nextCharSequence)[ FD ]
Line_32 $$ if (generatedVariables.contains(generatedVariable)) -->Line_38 $$ generatedVariable += index[ CD ]
Line_8 $$ CharSequence firstCharSequence = requiredFileName.subSequence(0, 1)-->Line_9 $$ Matcher matcher = _validFirstCharacterPattern.matcher(firstCharSequence)[ FD ]
Line_3 $$ Map<String, Integer> indexes = new HashMap()-->Line_34 $$ if (indexes.containsKey(generatedVariable)) [ FD ]
Line_38 $$ generatedVariable += index-->Line_41 $$ generatedVariablesMap.put(requiredFileName, generatedVariable)[ FD ]
Line_7 $$ StringBundler sb = new StringBundler()-->Line_11 $$ sb.append(StringPool.UNDERLINE)[ FD ]
Line_21 $$ matcher = _validCharactersPattern.matcher(nextCharSequence)-->Line_22 $$ if (matcher.matches()) [ FD ]
Line_4 $$ Set<String> generatedVariables = new HashSet()-->Line_32 $$ if (generatedVariables.contains(generatedVariable)) [ FD ]
