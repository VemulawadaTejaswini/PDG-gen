Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_14 $$ delete(fs, path)[ FD ]
Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_11 $$ String result = readBytesToString(fs, path, text2.length())[ FD ]
Line_5 $$ String text = "Testing a put to a file " + System.currentTimeMillis()-->Line_6 $$ writeTextFile(fs, path, text, false)[ FD ]
Line_8 $$ String text2 = "Overwriting a file " + System.currentTimeMillis()-->Line_12 $$ assertEquals(text2, result)[ FD ]
Line_2 $$ public void testOverwrite() throws Throwable -->Line_3 $$ Path path = new Path("/test/Overwrite")[ CD ]
Line_8 $$ String text2 = "Overwriting a file " + System.currentTimeMillis()-->Line_9 $$ writeTextFile(fs, path, text2, true)[ FD ]
Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_10 $$ assertFileHasLength(fs, path, text2.length())[ FD ]
Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_7 $$ assertFileHasLength(fs, path, text.length())[ FD ]
Line_11 $$ String result = readBytesToString(fs, path, text2.length())-->Line_12 $$ assertEquals(text2, result)[ FD ]
Line_8 $$ String text2 = "Overwriting a file " + System.currentTimeMillis()-->Line_10 $$ assertFileHasLength(fs, path, text2.length())[ FD ]
Line_8 $$ String text2 = "Overwriting a file " + System.currentTimeMillis()-->Line_11 $$ String result = readBytesToString(fs, path, text2.length())[ FD ]
Line_5 $$ String text = "Testing a put to a file " + System.currentTimeMillis()-->Line_7 $$ assertFileHasLength(fs, path, text.length())[ FD ]
Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_9 $$ writeTextFile(fs, path, text2, true)[ FD ]
Line_3 $$ Path path = new Path("/test/Overwrite")-->Line_6 $$ writeTextFile(fs, path, text, false)[ FD ]
