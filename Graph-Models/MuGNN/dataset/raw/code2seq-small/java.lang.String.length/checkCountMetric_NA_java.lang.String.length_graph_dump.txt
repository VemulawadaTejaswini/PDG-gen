Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_9 $$ while (System.currentTimeMillis() < timeout) [ CD ]
Line_7 $$ long timeout = 30_000L + System.currentTimeMillis()-->Line_9 $$ while (System.currentTimeMillis() < timeout) [ FD ]
Line_12 $$ value = result.asString()-->Line_13 $$ assertThat("We have found " + result, value.length(), is(1))[ FD ]
Line_9 $$ while (System.currentTimeMillis() < timeout) -->Line_12 $$ value = result.asString()[ CD ]
Line_9 $$ while (System.currentTimeMillis() < timeout) -->Line_11 $$ ModelNode result = DomainTestSupport.validateResponse(attribute)[ CD ]
Line_14 $$ if (result.asInt() > 0) -->Line_15 $$ return result.asInt()[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_8 $$ String value = "-1"[ CD ]
Line_9 $$ while (System.currentTimeMillis() < timeout) -->Line_14 $$ if (result.asInt() > 0) [ CD ]
Line_9 $$ while (System.currentTimeMillis() < timeout) -->Line_13 $$ assertThat("We have found " + result, value.length(), is(1))[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_10 $$ ModelNode attribute = client.execute(readAttribute)[ FD ]
Line_9 $$ while (System.currentTimeMillis() < timeout) -->Line_10 $$ ModelNode attribute = client.execute(readAttribute)[ CD ]
Line_11 $$ ModelNode result = DomainTestSupport.validateResponse(attribute)-->Line_15 $$ return result.asInt()[ FD ]
Line_3 $$ final ModelNode readAttribute = new ModelNode()-->Line_6 $$ readAttribute.get(ModelDescriptionConstants.NAME).set(metricName)[ FD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_7 $$ long timeout = 30_000L + System.currentTimeMillis()[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_4 $$ readAttribute.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION)[ CD ]
Line_11 $$ ModelNode result = DomainTestSupport.validateResponse(attribute)-->Line_14 $$ if (result.asInt() > 0) [ FD ]
Line_8 $$ String value = "-1"-->Line_12 $$ value = result.asString()[ FD ]
Line_10 $$ ModelNode attribute = client.execute(readAttribute)-->Line_11 $$ ModelNode result = DomainTestSupport.validateResponse(attribute)[ FD ]
Line_11 $$ ModelNode result = DomainTestSupport.validateResponse(attribute)-->Line_12 $$ value = result.asString()[ FD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_3 $$ final ModelNode readAttribute = new ModelNode()[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_5 $$ readAttribute.get(ModelDescriptionConstants.OP_ADDR).set(endpointResult.get(ModelDescriptionConstants.OP_ADDR))[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_6 $$ readAttribute.get(ModelDescriptionConstants.NAME).set(metricName)[ FD ]
Line_8 $$ String value = "-1"-->Line_13 $$ assertThat("We have found " + result, value.length(), is(1))[ FD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_18 $$ fail("We have found " + value + " for metric " + metricName + " instead of some positive value")[ CD ]
Line_3 $$ final ModelNode readAttribute = new ModelNode()-->Line_10 $$ ModelNode attribute = client.execute(readAttribute)[ FD ]
Line_3 $$ final ModelNode readAttribute = new ModelNode()-->Line_5 $$ readAttribute.get(ModelDescriptionConstants.OP_ADDR).set(endpointResult.get(ModelDescriptionConstants.OP_ADDR))[ FD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_6 $$ readAttribute.get(ModelDescriptionConstants.NAME).set(metricName)[ CD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_5 $$ readAttribute.get(ModelDescriptionConstants.OP_ADDR).set(endpointResult.get(ModelDescriptionConstants.OP_ADDR))[ FD ]
Line_2 $$ private int checkCountMetric(final ModelNode endpointResult, final ModelControllerClient client, final String metricName) throws IOException -->Line_19 $$ return -1[ CD ]
Line_3 $$ final ModelNode readAttribute = new ModelNode()-->Line_4 $$ readAttribute.get(ModelDescriptionConstants.OP).set(ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION)[ FD ]
