Line_26 $$ final ModelNode operation = new ModelNode()-->Line_28 $$ operation.get(OP_ADDR).set(address)[ FD ]
Line_20 $$ if (bridgeName == null || bridgeName.length() == 0) -->Line_21 $$ bridgeName = DEFAULT[ CD ]
Line_11 $$ bridgeName = reader.getAttributeValue(n)-->Line_20 $$ if (bridgeName == null || bridgeName.length() == 0) [ FD ]
Line_34 $$ final Element element = Element.forName(reader.getLocalName())-->Line_38 $$ processJmsBridgeResource(reader, operation, element.getLocalName())[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_4 $$ String moduleName = null[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_5 $$ final int count = reader.getAttributeCount()[ FD ]
Line_5 $$ final int count = reader.getAttributeCount()-->Line_6 $$ for (int n = 0; n < count; n++) [ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_30 $$ if (moduleName != null && moduleName.length() > 0) [ CD ]
Line_34 $$ final Element element = Element.forName(reader.getLocalName())-->Line_48 $$ handleElementText(reader, element, operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_28 $$ operation.get(OP_ADDR).set(address)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_48 $$ handleElementText(reader, element, operation)[ FD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_14 $$ moduleName = reader.getAttributeValue(n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_48 $$ handleElementText(reader, element, operation)[ FD ]
Line_3 $$ String bridgeName = null-->Line_21 $$ bridgeName = DEFAULT[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_53 $$ SELECTOR.parseAndSetParameter(selector, operation, reader)[ FD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_7 $$ String attrName = reader.getAttributeLocalName(n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_20 $$ if (bridgeName == null || bridgeName.length() == 0) [ CD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_31 $$ JMSBridgeDefinition.MODULE.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_34 $$ final Element element = Element.forName(reader.getLocalName())[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_14 $$ moduleName = reader.getAttributeValue(n)[ FD ]
Line_7 $$ String attrName = reader.getAttributeLocalName(n)-->Line_8 $$ Attribute attribute = Attribute.forName(attrName)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_24 $$ address.add(JMS_BRIDGE, bridgeName)[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_7 $$ String attrName = reader.getAttributeLocalName(n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_5 $$ final int count = reader.getAttributeCount()[ CD ]
Line_11 $$ bridgeName = reader.getAttributeValue(n)-->Line_21 $$ bridgeName = DEFAULT[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_23 $$ final ModelNode address = subsystemAddress.clone()[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_29 $$ list.add(operation)[ FD ]
Line_4 $$ String moduleName = null-->Line_30 $$ if (moduleName != null && moduleName.length() > 0) [ FD ]
Line_14 $$ moduleName = reader.getAttributeValue(n)-->Line_30 $$ if (moduleName != null && moduleName.length() > 0) [ FD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_7 $$ String attrName = reader.getAttributeLocalName(n)[ CD ]
Line_14 $$ moduleName = reader.getAttributeValue(n)-->Line_31 $$ JMSBridgeDefinition.MODULE.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_33 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) -->Line_34 $$ final Element element = Element.forName(reader.getLocalName())[ CD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_17 $$ throw unexpectedAttribute(reader, n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_51 $$ requireSingleAttribute(reader, CommonAttributes.STRING)[ FD ]
Line_3 $$ String bridgeName = null-->Line_11 $$ bridgeName = reader.getAttributeValue(n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_23 $$ final ModelNode address = subsystemAddress.clone()[ CD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_11 $$ bridgeName = reader.getAttributeValue(n)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_27 $$ operation.get(OP).set(ADD)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_31 $$ JMSBridgeDefinition.MODULE.parseAndSetParameter(moduleName, operation, reader)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_29 $$ list.add(operation)[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_56 $$ throw ParseUtils.unexpectedElement(reader)[ FD ]
Line_4 $$ String moduleName = null-->Line_14 $$ moduleName = reader.getAttributeValue(n)[ FD ]
Line_3 $$ String bridgeName = null-->Line_24 $$ address.add(JMS_BRIDGE, bridgeName)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_3 $$ String bridgeName = null[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_26 $$ final ModelNode operation = new ModelNode()[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_33 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) [ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_28 $$ operation.get(OP_ADDR).set(address)[ CD ]
Line_21 $$ bridgeName = DEFAULT-->Line_24 $$ address.add(JMS_BRIDGE, bridgeName)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_53 $$ SELECTOR.parseAndSetParameter(selector, operation, reader)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_6 $$ for (int n = 0; n < count; n++) [ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_25 $$ address.protect()[ FD ]
Line_30 $$ if (moduleName != null && moduleName.length() > 0) -->Line_31 $$ JMSBridgeDefinition.MODULE.parseAndSetParameter(moduleName, operation, reader)[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_29 $$ list.add(operation)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_38 $$ processJmsBridgeResource(reader, operation, element.getLocalName())[ FD ]
Line_6 $$ for (int n = 0; n < count; n++) -->Line_8 $$ Attribute attribute = Attribute.forName(attrName)[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_52 $$ final String selector = readStringAttributeElement(reader, CommonAttributes.STRING)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_33 $$ while (reader.hasNext() && reader.nextTag() != END_ELEMENT) [ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_24 $$ address.add(JMS_BRIDGE, bridgeName)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_11 $$ bridgeName = reader.getAttributeValue(n)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_25 $$ address.protect()[ CD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_27 $$ operation.get(OP).set(ADD)[ CD ]
Line_3 $$ String bridgeName = null-->Line_20 $$ if (bridgeName == null || bridgeName.length() == 0) [ FD ]
Line_11 $$ bridgeName = reader.getAttributeValue(n)-->Line_24 $$ address.add(JMS_BRIDGE, bridgeName)[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_38 $$ processJmsBridgeResource(reader, operation, element.getLocalName())[ FD ]
Line_2 $$ private void processJmsBridge(XMLExtendedStreamReader reader, ModelNode subsystemAddress, List<ModelNode> list) throws XMLStreamException -->Line_17 $$ throw unexpectedAttribute(reader, n)[ FD ]
Line_52 $$ final String selector = readStringAttributeElement(reader, CommonAttributes.STRING)-->Line_53 $$ SELECTOR.parseAndSetParameter(selector, operation, reader)[ FD ]
Line_4 $$ String moduleName = null-->Line_31 $$ JMSBridgeDefinition.MODULE.parseAndSetParameter(moduleName, operation, reader)[ FD ]
