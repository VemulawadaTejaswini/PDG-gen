Line_13 $$ if (element instanceof PsiFile) -->Line_18 $$ PsiFile moving = myNewParent.findFile(movedFile.getName())[ CD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_22 $$ moving = myNewParent.findFile(movedFile.getName())[ CD ]
Line_2 $$ protected void performRefactoring(@NotNull UsageInfo[] usages) -->Line_27 $$ CommonRefactoringUtil.sortDepthFirstRightLeftOrder(usages)[ FD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_14 $$ final PsiFile movedFile = (PsiFile) element[ CD ]
Line_44 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_47 $$ Messages.showMessageDialog(myProject, cause, RefactoringBundle.message("error.title"), Messages.getErrorIcon())[ CD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_20 $$ MoveFilesOrDirectoriesUtil.doMoveFile(movedFile, myNewParent)[ FD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_7 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(element)[ FD ]
Line_43 $$ if (index >= 0 && message != null) -->Line_51 $$ LOG.error(e)[ CD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_15 $$ if (mySearchForReferences)[ CD ]
Line_15 $$ if (mySearchForReferences)-->Line_16 $$ FileReferenceContextUtil.encodeFileReferences(element)[ CD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_31 $$ FileReferenceContextUtil.decodeFileReferences(movedFile)[ FD ]
Line_41 $$ final String message = e.getMessage()-->Line_46 $$ String cause = message.substring(index + "java.io.IOException".length())[ FD ]
Line_34 $$ if (MoveFilesOrDirectoriesDialog.isOpenInEditor()) -->Line_35 $$ EditorHelper.openFilesInEditor(movedFiles.toArray(new PsiFile[movedFiles.size()]))[ CD ]
Line_19 $$ if (moving == null) -->Line_20 $$ MoveFilesOrDirectoriesUtil.doMoveFile(movedFile, myNewParent)[ CD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_22 $$ moving = myNewParent.findFile(movedFile.getName())[ FD ]
Line_10 $$ for (PsiElement psiElement : element.getChildren()) -->Line_11 $$ processDirectoryFiles(movedFiles, oldToNewMap, psiElement)[ FD ]
Line_18 $$ PsiFile moving = myNewParent.findFile(movedFile.getName())-->Line_23 $$ movedFiles.add(moving)[ FD ]
Line_4 $$ final List<PsiFile> movedFiles = new ArrayList<PsiFile>()-->Line_11 $$ processDirectoryFiles(movedFiles, oldToNewMap, psiElement)[ FD ]
Line_4 $$ final List<PsiFile> movedFiles = new ArrayList<PsiFile>()-->Line_35 $$ EditorHelper.openFilesInEditor(movedFiles.toArray(new PsiFile[movedFiles.size()]))[ FD ]
Line_43 $$ if (index >= 0 && message != null) -->Line_44 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_30 $$ if (mySearchForReferences)-->Line_31 $$ FileReferenceContextUtil.decodeFileReferences(movedFile)[ CD ]
Line_5 $$ final Map<PsiElement, PsiElement> oldToNewMap = new HashMap<PsiElement, PsiElement>()-->Line_33 $$ retargetUsages(usages, oldToNewMap)[ FD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_17 $$ MoveFileHandler.forElement(movedFile).prepareMovedFile(movedFile, myNewParent, oldToNewMap)[ FD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_29 $$ MoveFileHandler.forElement(movedFile).updateMovedFile(movedFile)[ FD ]
Line_8 $$ if (element instanceof PsiDirectory) -->Line_13 $$ if (element instanceof PsiFile) [ CD ]
Line_5 $$ final Map<PsiElement, PsiElement> oldToNewMap = new HashMap<PsiElement, PsiElement>()-->Line_17 $$ MoveFileHandler.forElement(movedFile).prepareMovedFile(movedFile, myNewParent, oldToNewMap)[ FD ]
Line_5 $$ final Map<PsiElement, PsiElement> oldToNewMap = new HashMap<PsiElement, PsiElement>()-->Line_11 $$ processDirectoryFiles(movedFiles, oldToNewMap, psiElement)[ FD ]
Line_41 $$ final String message = e.getMessage()-->Line_42 $$ final int index = message != null ? message.indexOf("java.io.IOException") : -1[ FD ]
Line_37 $$ if (myMoveCallback != null) -->Line_38 $$ myMoveCallback.refactoringCompleted()[ CD ]
Line_46 $$ String cause = message.substring(index + "java.io.IOException".length())-->Line_47 $$ Messages.showMessageDialog(myProject, cause, RefactoringBundle.message("error.title"), Messages.getErrorIcon())[ FD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_19 $$ if (moving == null) [ CD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_8 $$ if (element instanceof PsiDirectory) [ FD ]
Line_2 $$ protected void performRefactoring(@NotNull UsageInfo[] usages) -->Line_33 $$ retargetUsages(usages, oldToNewMap)[ FD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_10 $$ for (PsiElement psiElement : element.getChildren()) [ FD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_16 $$ FileReferenceContextUtil.encodeFileReferences(element)[ FD ]
Line_14 $$ final PsiFile movedFile = (PsiFile) element-->Line_18 $$ PsiFile moving = myNewParent.findFile(movedFile.getName())[ FD ]
Line_22 $$ moving = myNewParent.findFile(movedFile.getName())-->Line_23 $$ movedFiles.add(moving)[ FD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_25 $$ elementListener.elementMoved(element)[ FD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_23 $$ movedFiles.add(moving)[ CD ]
Line_4 $$ final List<PsiFile> movedFiles = new ArrayList<PsiFile>()-->Line_23 $$ movedFiles.add(moving)[ FD ]
Line_7 $$ final RefactoringElementListener elementListener = getTransaction().getElementListener(element)-->Line_25 $$ elementListener.elementMoved(element)[ FD ]
Line_18 $$ PsiFile moving = myNewParent.findFile(movedFile.getName())-->Line_19 $$ if (moving == null) [ FD ]
Line_13 $$ if (element instanceof PsiFile) -->Line_17 $$ MoveFileHandler.forElement(movedFile).prepareMovedFile(movedFile, myNewParent, oldToNewMap)[ CD ]
Line_8 $$ if (element instanceof PsiDirectory) -->Line_9 $$ MoveFilesOrDirectoriesUtil.doMoveDirectory((PsiDirectory) element, myNewParent)[ CD ]
Line_44 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_46 $$ String cause = message.substring(index + "java.io.IOException".length())[ CD ]
Line_6 $$ for (final PsiElement element : myElementsToMove) -->Line_13 $$ if (element instanceof PsiFile) [ FD ]
Line_18 $$ PsiFile moving = myNewParent.findFile(movedFile.getName())-->Line_22 $$ moving = myNewParent.findFile(movedFile.getName())[ FD ]
