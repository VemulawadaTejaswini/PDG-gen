Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_9 $$ final PsiParameterList superParameterList = superMethod.getParameterList()[ FD ]
Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_9 $$ final PsiParameterList superParameterList = superMethod.getParameterList()[ CD ]
Line_12 $$ final PsiParameter parameter = parameters[i]-->Line_13 $$ final String parameterName = parameter.getName()[ FD ]
Line_13 $$ final String parameterName = parameter.getName()-->Line_18 $$ if (superParameterName.equals(parameterName)) [ FD ]
Line_4 $$ final PsiClass containingClass = superMethod.getContainingClass()-->Line_5 $$ if (containingClass != null && LibraryUtil.classIsInLibrary(containingClass)) [ FD ]
Line_9 $$ final PsiParameterList superParameterList = superMethod.getParameterList()-->Line_10 $$ final PsiParameter[] superParameters = superParameterList.getParameters()[ FD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_21 $$ if (m_ignoreSingleCharacterNames && superParameterName.length() == 1) [ CD ]
Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_4 $$ final PsiClass containingClass = superMethod.getContainingClass()[ FD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_24 $$ registerVariableError(parameter, superParameterName)[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_15 $$ if (superParameterName == null) [ CD ]
Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_11 $$ for (int i = 0; i < parameters.length; i++) [ CD ]
Line_14 $$ final String superParameterName = superParameters[i].getName()-->Line_24 $$ registerVariableError(parameter, superParameterName)[ FD ]
Line_12 $$ final PsiParameter parameter = parameters[i]-->Line_24 $$ registerVariableError(parameter, superParameterName)[ FD ]
Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_3 $$ if (m_ignoreOverridesOfLibraryMethods) [ CD ]
Line_5 $$ if (containingClass != null && LibraryUtil.classIsInLibrary(containingClass)) -->Line_6 $$ return[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_13 $$ final String parameterName = parameter.getName()[ CD ]
Line_2 $$ private void checkParameters(@NotNull PsiMethod superMethod, PsiParameter[] parameters) -->Line_10 $$ final PsiParameter[] superParameters = superParameterList.getParameters()[ CD ]
Line_3 $$ if (m_ignoreOverridesOfLibraryMethods) -->Line_5 $$ if (containingClass != null && LibraryUtil.classIsInLibrary(containingClass)) [ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_14 $$ final String superParameterName = superParameters[i].getName()[ CD ]
Line_3 $$ if (m_ignoreOverridesOfLibraryMethods) -->Line_4 $$ final PsiClass containingClass = superMethod.getContainingClass()[ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_12 $$ final PsiParameter parameter = parameters[i][ CD ]
Line_11 $$ for (int i = 0; i < parameters.length; i++) -->Line_18 $$ if (superParameterName.equals(parameterName)) [ CD ]
Line_14 $$ final String superParameterName = superParameters[i].getName()-->Line_21 $$ if (m_ignoreSingleCharacterNames && superParameterName.length() == 1) [ FD ]
Line_14 $$ final String superParameterName = superParameters[i].getName()-->Line_15 $$ if (superParameterName == null) [ FD ]
Line_14 $$ final String superParameterName = superParameters[i].getName()-->Line_18 $$ if (superParameterName.equals(parameterName)) [ FD ]
