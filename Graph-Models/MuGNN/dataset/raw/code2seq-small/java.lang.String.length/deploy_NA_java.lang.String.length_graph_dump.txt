Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_86 $$ if (libDir.equals(moduleParentFile)) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_38 $$ final Closeable closable = child.isFile() ? mount(child, false) : null[ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_115 $$ childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_WEB_DEPLOYMENT_DESCRIPTOR, alternateDeploymentDescriptor)[ FD ]
Line_11 $$ String libDirName = DEFAULT_LIB_DIR-->Line_20 $$ libDirName = xmlLibDirName[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_126 $$ final String fileName = child.getName().toLowerCase(Locale.ENGLISH)[ FD ]
Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()-->Line_81 $$ throw EeLogger.ROOT_LOGGER.cannotProcessEarModule(virtualFile, module.getFileName())[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_42 $$ if (child.getName().toLowerCase(Locale.ENGLISH).endsWith(JAR_EXTENSION)) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_13 $$ final EarMetaData earMetaData = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA)[ CD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_31 $$ String relativeName = child.getPathNameRelativeTo(deploymentRoot.getRoot())[ FD ]
Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.EAR, deploymentUnit)) -->Line_5 $$ return[ CD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_10 $$ ModuleRootMarker.mark(deploymentRoot, false)[ FD ]
Line_15 $$ final String xmlLibDirName = earMetaData.getLibraryDirectory()-->Line_20 $$ libDirName = xmlLibDirName[ FD ]
Line_13 $$ final EarMetaData earMetaData = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA)-->Line_14 $$ if (earMetaData != null) [ FD ]
Line_32 $$ MountedDeploymentOverlay overlay = overlays.get(relativeName)-->Line_34 $$ if (overlay != null) [ FD ]
Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()-->Line_133 $$ throw EeLogger.ROOT_LOGGER.failedToProcessChild(e, virtualFile)[ FD ]
Line_11 $$ String libDirName = DEFAULT_LIB_DIR-->Line_26 $$ if (!libDirName.isEmpty()) [ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_44 $$ deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS, childResource)[ FD ]
Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()-->Line_79 $$ final VirtualFile moduleFile = virtualFile.getChild(module.getFileName())[ FD ]
Line_13 $$ final EarMetaData earMetaData = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA)-->Line_15 $$ final String xmlLibDirName = earMetaData.getLibraryDirectory()[ FD ]
Line_15 $$ final String xmlLibDirName = earMetaData.getLibraryDirectory()-->Line_17 $$ if (xmlLibDirName.length() == 1 && xmlLibDirName.charAt(0) == '/') [ FD ]
Line_25 $$ final VirtualFile libDir-->Line_29 $$ List<VirtualFile> libArchives = libDir.getChildren(CHILD_ARCHIVE_FILTER)[ FD ]
Line_33 $$ final MountHandle mountHandle-->Line_36 $$ mountHandle = new MountHandle(null)[ FD ]
Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() -->Line_56 $$ if (file.equals(libDir)) [ FD ]
Line_20 $$ libDirName = xmlLibDirName-->Line_87 $$ throw EeLogger.ROOT_LOGGER.earModuleChildOfLibraryDirectory(libDirName, module.getFileName())[ FD ]
Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() -->Line_56 $$ if (file.equals(libDir)) [ CD ]
Line_25 $$ final VirtualFile libDir-->Line_28 $$ if (libDir.exists()) [ FD ]
Line_16 $$ if (xmlLibDirName != null) -->Line_20 $$ libDirName = xmlLibDirName[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_83 $$ if (libDir != null) -->Line_85 $$ if (moduleParentFile != null) [ CD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_31 $$ String relativeName = child.getPathNameRelativeTo(deploymentRoot.getRoot())[ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_43 $$ ModuleRootMarker.mark(childResource)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_71 $$ this.createResourceRoot(deploymentUnit, child, isWarFile || isRarFile, isWarFile)[ FD ]
Line_99 $$ if (alternativeDD != null && alternativeDD.trim().length() > 0) -->Line_101 $$ if (!alternateDeploymentDescriptor.exists()) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ deploymentRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT, false)[ CD ]
Line_26 $$ if (!libDirName.isEmpty()) -->Line_28 $$ if (libDir.exists()) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_34 $$ if (overlay != null) -->Line_35 $$ overlay.remountAsZip(false)[ CD ]
Line_34 $$ if (overlay != null) -->Line_39 $$ mountHandle = new MountHandle(closable)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()[ CD ]
Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_56 $$ if (file.equals(libDir)) [ FD ]
Line_59 $$ for (String suffix : CHILD_ARCHIVE_EXTENSIONS) -->Line_60 $$ if (file.getName().endsWith(suffix)) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_13 $$ final EarMetaData earMetaData = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA)[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_70 $$ final boolean isRarFile = child.getName().toLowerCase(Locale.ENGLISH).endsWith(RAR_EXTENSION)[ FD ]
Line_49 $$ libDir = null-->Line_86 $$ if (libDir.equals(moduleParentFile)) [ FD ]
Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() -->Line_64 $$ return true[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_93 $$ final ResourceRoot childResource = this.createResourceRoot(deploymentUnit, moduleFile, true, webArchive)[ FD ]
Line_28 $$ if (libDir.exists()) -->Line_29 $$ List<VirtualFile> libArchives = libDir.getChildren(CHILD_ARCHIVE_FILTER)[ CD ]
Line_26 $$ if (!libDirName.isEmpty()) -->Line_49 $$ libDir = null[ CD ]
Line_11 $$ String libDirName = DEFAULT_LIB_DIR-->Line_87 $$ throw EeLogger.ROOT_LOGGER.earModuleChildOfLibraryDirectory(libDirName, module.getFileName())[ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_112 $$ childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_EJB_DEPLOYMENT_DESCRIPTOR, alternateDeploymentDescriptor)[ FD ]
Line_49 $$ libDir = null-->Line_56 $$ if (file.equals(libDir)) [ FD ]
Line_36 $$ mountHandle = new MountHandle(null)-->Line_39 $$ mountHandle = new MountHandle(closable)[ FD ]
Line_26 $$ if (!libDirName.isEmpty()) -->Line_27 $$ libDir = virtualFile.getChild(libDirName)[ CD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()[ FD ]
Line_32 $$ MountedDeploymentOverlay overlay = overlays.get(relativeName)-->Line_35 $$ overlay.remountAsZip(false)[ FD ]
Line_25 $$ final VirtualFile libDir-->Line_83 $$ if (libDir != null) [ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_96 $$ ModuleRootMarker.mark(childResource)[ FD ]
Line_85 $$ if (moduleParentFile != null) -->Line_86 $$ if (libDir.equals(moduleParentFile)) [ CD ]
Line_25 $$ final VirtualFile libDir-->Line_49 $$ libDir = null[ FD ]
Line_31 $$ String relativeName = child.getPathNameRelativeTo(deploymentRoot.getRoot())-->Line_32 $$ MountedDeploymentOverlay overlay = overlays.get(relativeName)[ FD ]
Line_15 $$ final String xmlLibDirName = earMetaData.getLibraryDirectory()-->Line_16 $$ if (xmlLibDirName != null) [ FD ]
Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() -->Line_53 $$ return false[ CD ]
Line_25 $$ final VirtualFile libDir-->Line_56 $$ if (file.equals(libDir)) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_10 $$ ModuleRootMarker.mark(deploymentRoot, false)[ CD ]
Line_56 $$ if (file.equals(libDir)) -->Line_57 $$ return false[ CD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_123 $$ if (subDeploymentFiles.contains(child)) [ FD ]
Line_42 $$ if (child.getName().toLowerCase(Locale.ENGLISH).endsWith(JAR_EXTENSION)) -->Line_43 $$ ModuleRootMarker.mark(childResource)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_11 $$ String libDirName = DEFAULT_LIB_DIR[ CD ]
Line_14 $$ if (earMetaData != null) -->Line_15 $$ final String xmlLibDirName = earMetaData.getLibraryDirectory()[ CD ]
Line_23 $$ Map<String, MountedDeploymentOverlay> overlays = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_OVERLAY_LOCATIONS)-->Line_32 $$ MountedDeploymentOverlay overlay = overlays.get(relativeName)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_44 $$ deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS, childResource)[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_71 $$ this.createResourceRoot(deploymentUnit, child, isWarFile || isRarFile, isWarFile)[ FD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_128 $$ this.createResourceRoot(deploymentUnit, child, false, false)[ FD ]
Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_49 $$ libDir = null[ FD ]
Line_34 $$ if (overlay != null) -->Line_36 $$ mountHandle = new MountHandle(null)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_12 $$ final boolean appXmlPresent = deploymentRoot.getRoot().getChild("META-INF/application.xml").exists()[ CD ]
Line_11 $$ String libDirName = DEFAULT_LIB_DIR-->Line_27 $$ libDir = virtualFile.getChild(libDirName)[ FD ]
Line_99 $$ if (alternativeDD != null && alternativeDD.trim().length() > 0) -->Line_100 $$ final VirtualFile alternateDeploymentDescriptor = deploymentRoot.getRoot().getChild(alternativeDD)[ CD ]
Line_33 $$ final MountHandle mountHandle-->Line_39 $$ mountHandle = new MountHandle(closable)[ FD ]
Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()-->Line_27 $$ libDir = virtualFile.getChild(libDirName)[ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_94 $$ childResource.putAttachment(org.jboss.as.ee.structure.Attachments.MODULE_META_DATA, module)[ FD ]
Line_13 $$ final EarMetaData earMetaData = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EAR_METADATA)-->Line_75 $$ for (final ModuleMetaData module : earMetaData.getModules()) [ FD ]
Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_29 $$ List<VirtualFile> libArchives = libDir.getChildren(CHILD_ARCHIVE_FILTER)[ FD ]
Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() -->Line_60 $$ if (file.getName().endsWith(suffix)) [ FD ]
Line_25 $$ final VirtualFile libDir-->Line_27 $$ libDir = virtualFile.getChild(libDirName)[ FD ]
Line_83 $$ if (libDir != null) -->Line_84 $$ VirtualFile moduleParentFile = moduleFile.getParent()[ CD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_100 $$ final VirtualFile alternateDeploymentDescriptor = deploymentRoot.getRoot().getChild(alternativeDD)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_23 $$ Map<String, MountedDeploymentOverlay> overlays = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_OVERLAY_LOCATIONS)[ FD ]
Line_42 $$ if (child.getName().toLowerCase(Locale.ENGLISH).endsWith(JAR_EXTENSION)) -->Line_44 $$ deploymentUnit.addToAttachmentList(Attachments.RESOURCE_ROOTS, childResource)[ CD ]
Line_127 $$ if (fileName.endsWith(SAR_EXTENSION) || fileName.endsWith(JAR_EXTENSION)) -->Line_128 $$ this.createResourceRoot(deploymentUnit, child, false, false)[ CD ]
Line_20 $$ libDirName = xmlLibDirName-->Line_27 $$ libDir = virtualFile.getChild(libDirName)[ FD ]
Line_12 $$ final boolean appXmlPresent = deploymentRoot.getRoot().getChild("META-INF/application.xml").exists()-->Line_67 $$ if (!appXmlPresent) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_23 $$ Map<String, MountedDeploymentOverlay> overlays = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_OVERLAY_LOCATIONS)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.EAR, deploymentUnit)) [ CD ]
Line_30 $$ for (final VirtualFile child : libArchives) -->Line_69 $$ final boolean isWarFile = child.getName().toLowerCase(Locale.ENGLISH).endsWith(WAR_EXTENSION)[ FD ]
Line_14 $$ if (earMetaData != null) -->Line_16 $$ if (xmlLibDirName != null) [ CD ]
Line_8 $$ final VirtualFile virtualFile = deploymentRoot.getRoot()-->Line_51 $$ final List<VirtualFile> childArchives = new ArrayList<VirtualFile>(virtualFile.getChildren(new SuffixMatchFilter(CHILD_ARCHIVE_EXTENSIONS, new VisitorAttributes() [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_128 $$ this.createResourceRoot(deploymentUnit, child, false, false)[ FD ]
Line_16 $$ if (xmlLibDirName != null) -->Line_17 $$ if (xmlLibDirName.length() == 1 && xmlLibDirName.charAt(0) == '/') [ CD ]
Line_25 $$ final VirtualFile libDir-->Line_86 $$ if (libDir.equals(moduleParentFile)) [ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_106 $$ childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_CLIENT_DEPLOYMENT_DESCRIPTOR, alternateDeploymentDescriptor)[ FD ]
Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_28 $$ if (libDir.exists()) [ FD ]
Line_49 $$ libDir = null-->Line_83 $$ if (libDir != null) [ FD ]
Line_60 $$ if (file.getName().endsWith(suffix)) -->Line_61 $$ return false[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)[ CD ]
Line_34 $$ if (overlay != null) -->Line_38 $$ final Closeable closable = child.isFile() ? mount(child, false) : null[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ if (!DeploymentTypeMarker.isType(DeploymentType.EAR, deploymentUnit)) [ FD ]
Line_41 $$ final ResourceRoot childResource = new ResourceRoot(child, mountHandle)-->Line_109 $$ childResource.putAttachment(org.jboss.as.ee.structure.Attachments.ALTERNATE_CONNECTOR_DEPLOYMENT_DESCRIPTOR, alternateDeploymentDescriptor)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_14 $$ if (earMetaData != null) [ CD ]
Line_95 $$ if (!webArchive) -->Line_96 $$ ModuleRootMarker.mark(childResource)[ CD ]
Line_20 $$ libDirName = xmlLibDirName-->Line_26 $$ if (!libDirName.isEmpty()) [ FD ]
Line_27 $$ libDir = virtualFile.getChild(libDirName)-->Line_83 $$ if (libDir != null) [ FD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_9 $$ deploymentRoot.putAttachment(Attachments.INDEX_RESOURCE_ROOT, false)[ FD ]
Line_7 $$ final ResourceRoot deploymentRoot = phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT)-->Line_12 $$ final boolean appXmlPresent = deploymentRoot.getRoot().getChild("META-INF/application.xml").exists()[ FD ]
