Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))-->Line_16 $$ key.add(interned)[ FD ]
Line_4 $$ boolean asBytes = forAddition && IOUtil.isAscii(path)-->Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))[ FD ]
Line_6 $$ SubstringWrapper flyweightKey = new SubstringWrapper()-->Line_8 $$ flyweightKey.findSubStringUntilNextSeparator(path, start)[ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_7 $$ while (start < path.length()) [ CD ]
Line_7 $$ while (start < path.length()) -->Line_9 $$ SubstringWrapper interned = myInternMap.get(flyweightKey)[ CD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_5 $$ List<SubstringWrapper> key = new ArrayList<SubstringWrapper>()[ CD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_4 $$ boolean asBytes = forAddition && IOUtil.isAscii(path)[ FD ]
Line_3 $$ int start = 0-->Line_8 $$ flyweightKey.findSubStringUntilNextSeparator(path, start)[ FD ]
Line_9 $$ SubstringWrapper interned = myInternMap.get(flyweightKey)-->Line_10 $$ if (interned == null) [ FD ]
Line_17 $$ start += flyweightKey.len-->Line_8 $$ flyweightKey.findSubStringUntilNextSeparator(path, start)[ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_3 $$ int start = 0[ CD ]
Line_9 $$ SubstringWrapper interned = myInternMap.get(flyweightKey)-->Line_16 $$ key.add(interned)[ FD ]
Line_3 $$ int start = 0-->Line_17 $$ start += flyweightKey.len[ FD ]
Line_3 $$ int start = 0-->Line_7 $$ while (start < path.length()) [ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_7 $$ while (start < path.length()) [ FD ]
Line_17 $$ start += flyweightKey.len-->Line_7 $$ while (start < path.length()) [ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_4 $$ boolean asBytes = forAddition && IOUtil.isAscii(path)[ CD ]
Line_10 $$ if (interned == null) -->Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))[ CD ]
Line_11 $$ if (!forAddition) -->Line_12 $$ return null[ CD ]
Line_5 $$ List<SubstringWrapper> key = new ArrayList<SubstringWrapper>()-->Line_19 $$ return key.toArray(new SubstringWrapper[key.size()])[ FD ]
Line_7 $$ while (start < path.length()) -->Line_8 $$ flyweightKey.findSubStringUntilNextSeparator(path, start)[ CD ]
Line_7 $$ while (start < path.length()) -->Line_10 $$ if (interned == null) [ CD ]
Line_7 $$ while (start < path.length()) -->Line_16 $$ key.add(interned)[ CD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_19 $$ return key.toArray(new SubstringWrapper[key.size()])[ CD ]
Line_5 $$ List<SubstringWrapper> key = new ArrayList<SubstringWrapper>()-->Line_16 $$ key.add(interned)[ FD ]
Line_9 $$ SubstringWrapper interned = myInternMap.get(flyweightKey)-->Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))[ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_6 $$ SubstringWrapper flyweightKey = new SubstringWrapper()[ CD ]
Line_10 $$ if (interned == null) -->Line_11 $$ if (!forAddition) [ CD ]
Line_6 $$ SubstringWrapper flyweightKey = new SubstringWrapper()-->Line_9 $$ SubstringWrapper interned = myInternMap.get(flyweightKey)[ FD ]
Line_7 $$ while (start < path.length()) -->Line_17 $$ start += flyweightKey.len[ CD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_8 $$ flyweightKey.findSubStringUntilNextSeparator(path, start)[ FD ]
Line_6 $$ SubstringWrapper flyweightKey = new SubstringWrapper()-->Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))[ FD ]
Line_2 $$ protected SubstringWrapper[] internParts(String path, boolean forAddition) -->Line_11 $$ if (!forAddition) [ FD ]
Line_14 $$ myInternMap.add(interned = flyweightKey.createPersistentCopy(asBytes))-->Line_10 $$ if (interned == null) [ FD ]
