Line_6 $$ final RegExpLanguageHost host = findRegExpHost(ch)-->Line_7 $$ if (host != null) [ FD ]
Line_8 $$ final char c = text.charAt(1)-->Line_9 $$ final boolean needsEscaping = host.characterNeedsEscaping(c)[ FD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_3 $$ if (text.length() <= 1) [ CD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_7 $$ if (host != null) [ CD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_8 $$ final char c = text.charAt(1)[ FD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_6 $$ final RegExpLanguageHost host = findRegExpHost(ch)[ FD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_12 $$ return !("\\]".equals(text) || "\\}".equals(text))[ FD ]
Line_7 $$ if (host != null) -->Line_8 $$ final char c = text.charAt(1)[ CD ]
Line_7 $$ if (host != null) -->Line_9 $$ final boolean needsEscaping = host.characterNeedsEscaping(c)[ CD ]
Line_3 $$ if (text.length() <= 1) -->Line_4 $$ return false[ CD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_6 $$ final RegExpLanguageHost host = findRegExpHost(ch)[ CD ]
Line_6 $$ final RegExpLanguageHost host = findRegExpHost(ch)-->Line_9 $$ final boolean needsEscaping = host.characterNeedsEscaping(c)[ FD ]
Line_7 $$ if (host != null) -->Line_12 $$ return !("\\]".equals(text) || "\\}".equals(text))[ CD ]
Line_9 $$ final boolean needsEscaping = host.characterNeedsEscaping(c)-->Line_10 $$ return !needsEscaping[ FD ]
Line_7 $$ if (host != null) -->Line_10 $$ return !needsEscaping[ CD ]
Line_2 $$ public boolean isRedundantEscape(@NotNull final RegExpChar ch, @NotNull final String text) -->Line_3 $$ if (text.length() <= 1) [ FD ]
