Line_11 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_13 $$ final String projectHomeUrl = baseDir.getPresentableUrl()[ FD ]
Line_13 $$ final String projectHomeUrl = baseDir.getPresentableUrl()-->Line_15 $$ final String cont = url.substring(projectHomeUrl.length())[ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_3 $$ String url = virtualFile.getPresentableUrl()[ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_8 $$ if (root != null) [ CD ]
Line_7 $$ VirtualFile root = ProjectFileIndex.SERVICE.getInstance(project).getContentRootForFile(virtualFile)-->Line_8 $$ if (root != null) [ FD ]
Line_3 $$ String url = virtualFile.getPresentableUrl()-->Line_14 $$ if (url.startsWith(projectHomeUrl)) [ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_11 $$ final VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_13 $$ final String projectHomeUrl = baseDir.getPresentableUrl()-->Line_14 $$ if (url.startsWith(projectHomeUrl)) [ FD ]
Line_7 $$ VirtualFile root = ProjectFileIndex.SERVICE.getInstance(project).getContentRootForFile(virtualFile)-->Line_9 $$ return root.getName() + File.separatorChar + VfsUtilCore.getRelativePath(virtualFile, root, File.separatorChar)[ FD ]
Line_11 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_12 $$ if (baseDir != null) [ FD ]
Line_16 $$ if (cont.isEmpty())-->Line_17 $$ return null[ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_4 $$ if (project == null) [ CD ]
Line_4 $$ if (project == null) -->Line_5 $$ return url[ CD ]
Line_15 $$ final String cont = url.substring(projectHomeUrl.length())-->Line_16 $$ if (cont.isEmpty())[ FD ]
Line_12 $$ if (baseDir != null) -->Line_13 $$ final String projectHomeUrl = baseDir.getPresentableUrl()[ CD ]
Line_3 $$ String url = virtualFile.getPresentableUrl()-->Line_18 $$ url = "..." + cont[ FD ]
Line_15 $$ final String cont = url.substring(projectHomeUrl.length())-->Line_18 $$ url = "..." + cont[ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_4 $$ if (project == null) [ FD ]
Line_14 $$ if (url.startsWith(projectHomeUrl)) -->Line_16 $$ if (cont.isEmpty())[ CD ]
Line_8 $$ if (root != null) -->Line_9 $$ return root.getName() + File.separatorChar + VfsUtilCore.getRelativePath(virtualFile, root, File.separatorChar)[ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_9 $$ return root.getName() + File.separatorChar + VfsUtilCore.getRelativePath(virtualFile, root, File.separatorChar)[ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_7 $$ VirtualFile root = ProjectFileIndex.SERVICE.getInstance(project).getContentRootForFile(virtualFile)[ FD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_21 $$ return url[ CD ]
Line_12 $$ if (baseDir != null) -->Line_14 $$ if (url.startsWith(projectHomeUrl)) [ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_3 $$ String url = virtualFile.getPresentableUrl()[ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_11 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_3 $$ String url = virtualFile.getPresentableUrl()-->Line_15 $$ final String cont = url.substring(projectHomeUrl.length())[ FD ]
Line_14 $$ if (url.startsWith(projectHomeUrl)) -->Line_15 $$ final String cont = url.substring(projectHomeUrl.length())[ CD ]
Line_14 $$ if (url.startsWith(projectHomeUrl)) -->Line_18 $$ url = "..." + cont[ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_12 $$ if (baseDir != null) [ CD ]
Line_2 $$ String getRelativePath(final VirtualFile virtualFile, final Project project) -->Line_7 $$ VirtualFile root = ProjectFileIndex.SERVICE.getInstance(project).getContentRootForFile(virtualFile)[ CD ]
