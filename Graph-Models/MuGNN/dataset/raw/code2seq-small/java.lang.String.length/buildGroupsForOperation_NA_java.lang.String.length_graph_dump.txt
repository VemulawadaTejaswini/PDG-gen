Line_16 $$ List<Class<?>> groupsList = new ArrayList<Class<?>>(groupNames.length)-->Line_27 $$ return groupsList.toArray(new Class<?>[groupsList.size()])[ FD ]
Line_10 $$ if (property instanceof String) -->Line_11 $$ String stringProperty = (String) property[ CD ]
Line_10 $$ if (property instanceof String) -->Line_27 $$ return groupsList.toArray(new Class<?>[groupsList.size()])[ CD ]
Line_10 $$ if (property instanceof String) -->Line_12 $$ String[] groupNames = stringProperty.split(",")[ CD ]
Line_18 $$ String cleanedGroupName = groupName.trim()-->Line_19 $$ if (cleanedGroupName.length() > 0) [ FD ]
Line_3 $$ final Object property = settings.get(operation.getGroupPropertyName())-->Line_4 $$ if (property == null) [ FD ]
Line_4 $$ if (property == null) -->Line_5 $$ return operation == Operation.DELETE ? EMPTY_GROUPS : DEFAULT_GROUPS[ CD ]
Line_17 $$ for (String groupName : groupNames) -->Line_18 $$ String cleanedGroupName = groupName.trim()[ FD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_21 $$ groupsList.add(classLoaderAccess.classForName(cleanedGroupName))[ FD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_10 $$ if (property instanceof String) [ CD ]
Line_11 $$ String stringProperty = (String) property-->Line_12 $$ String[] groupNames = stringProperty.split(",")[ FD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ final Object property = settings.get(operation.getGroupPropertyName())[ CD ]
Line_10 $$ if (property instanceof String) -->Line_13 $$ if (groupNames.length == 1 && groupNames[0].equals("")) [ CD ]
Line_3 $$ final Object property = settings.get(operation.getGroupPropertyName())-->Line_10 $$ if (property instanceof String) [ FD ]
Line_16 $$ List<Class<?>> groupsList = new ArrayList<Class<?>>(groupNames.length)-->Line_21 $$ groupsList.add(classLoaderAccess.classForName(cleanedGroupName))[ FD ]
Line_10 $$ if (property instanceof String) -->Line_16 $$ List<Class<?>> groupsList = new ArrayList<Class<?>>(groupNames.length)[ CD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_7 $$ if (property instanceof Class<?>[]) [ CD ]
Line_7 $$ if (property instanceof Class<?>[]) -->Line_8 $$ return (Class<?>[]) property[ CD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_3 $$ final Object property = settings.get(operation.getGroupPropertyName())[ FD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_29 $$ throw new HibernateException(JPA_GROUP_PREFIX + operation.getGroupPropertyName() + " is of unknown type: String or Class<?>[] only")[ FD ]
Line_3 $$ final Object property = settings.get(operation.getGroupPropertyName())-->Line_7 $$ if (property instanceof Class<?>[]) [ FD ]
Line_18 $$ String cleanedGroupName = groupName.trim()-->Line_21 $$ groupsList.add(classLoaderAccess.classForName(cleanedGroupName))[ FD ]
Line_2 $$ public static Class<?>[] buildGroupsForOperation(Operation operation, Map settings, ClassLoaderAccess classLoaderAccess) -->Line_4 $$ if (property == null) [ CD ]
Line_13 $$ if (groupNames.length == 1 && groupNames[0].equals("")) -->Line_14 $$ return EMPTY_GROUPS[ CD ]
