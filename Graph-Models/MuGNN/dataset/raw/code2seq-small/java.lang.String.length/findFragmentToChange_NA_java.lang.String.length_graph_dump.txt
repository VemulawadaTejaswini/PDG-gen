Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_7 $$ final int newLength = newText.length()[ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_13 $$ while (true) [ CD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_21 $$ final char c1 = oldText.charAt(endOffset - 1)[ FD ]
Line_8 $$ int startOffset = 0-->Line_28 $$ return new ReplaceInfo(startOffset, endOffset, newText.substring(startOffset, newLength - (oldLength - endOffset)))[ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_3 $$ if (oldText.equals(newText)) [ CD ]
Line_9 $$ while (startOffset < oldLength && startOffset < newLength && oldText.charAt(startOffset) == newText.charAt(startOffset)) -->Line_10 $$ startOffset++[ CD ]
Line_13 $$ while (true) -->Line_18 $$ if (idxInNew < startOffset) [ CD ]
Line_13 $$ while (true) -->Line_23 $$ if (c1 != c2) [ CD ]
Line_21 $$ final char c1 = oldText.charAt(endOffset - 1)-->Line_23 $$ if (c1 != c2) [ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_22 $$ final char c2 = newText.charAt(idxInNew)[ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_6 $$ final int oldLength = oldText.length()[ CD ]
Line_8 $$ int startOffset = 0-->Line_10 $$ startOffset++[ FD ]
Line_13 $$ while (true) -->Line_14 $$ if (endOffset <= startOffset) [ CD ]
Line_3 $$ if (oldText.equals(newText)) -->Line_4 $$ return new ReplaceInfo(-1, -1, null)[ CD ]
Line_13 $$ while (true) -->Line_22 $$ final char c2 = newText.charAt(idxInNew)[ CD ]
Line_8 $$ int startOffset = 0-->Line_14 $$ if (endOffset <= startOffset) [ FD ]
Line_12 $$ int endOffset = oldLength-->Line_14 $$ if (endOffset <= startOffset) [ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_7 $$ final int newLength = newText.length()[ CD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_28 $$ return new ReplaceInfo(startOffset, endOffset, newText.substring(startOffset, newLength - (oldLength - endOffset)))[ FD ]
Line_13 $$ while (true) -->Line_21 $$ final char c1 = oldText.charAt(endOffset - 1)[ CD ]
Line_22 $$ final char c2 = newText.charAt(idxInNew)-->Line_23 $$ if (c1 != c2) [ FD ]
Line_13 $$ while (true) -->Line_26 $$ endOffset--[ CD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_3 $$ if (oldText.equals(newText)) [ FD ]
Line_13 $$ while (true) -->Line_17 $$ final int idxInNew = newLength - (oldLength - endOffset) - 1[ CD ]
Line_17 $$ final int idxInNew = newLength - (oldLength - endOffset) - 1-->Line_18 $$ if (idxInNew < startOffset) [ FD ]
Line_17 $$ final int idxInNew = newLength - (oldLength - endOffset) - 1-->Line_22 $$ final char c2 = newText.charAt(idxInNew)[ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_28 $$ return new ReplaceInfo(startOffset, endOffset, newText.substring(startOffset, newLength - (oldLength - endOffset)))[ CD ]
Line_8 $$ int startOffset = 0-->Line_18 $$ if (idxInNew < startOffset) [ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_12 $$ int endOffset = oldLength[ CD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_9 $$ while (startOffset < oldLength && startOffset < newLength && oldText.charAt(startOffset) == newText.charAt(startOffset)) [ CD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_6 $$ final int oldLength = oldText.length()[ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_9 $$ while (startOffset < oldLength && startOffset < newLength && oldText.charAt(startOffset) == newText.charAt(startOffset)) [ FD ]
Line_2 $$ public static ReplaceInfo findFragmentToChange(@NotNull final String oldText, @NotNull final String newText) -->Line_8 $$ int startOffset = 0[ CD ]
Line_8 $$ int startOffset = 0-->Line_9 $$ while (startOffset < oldLength && startOffset < newLength && oldText.charAt(startOffset) == newText.charAt(startOffset)) [ FD ]
Line_12 $$ int endOffset = oldLength-->Line_26 $$ endOffset--[ FD ]
