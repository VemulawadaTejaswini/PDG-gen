Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_29 $$ tempJar = new File(tempJar.getAbsolutePath() + ".jar")[ CD ]
Line_11 $$ if (path.startsWith("file:")) -->Line_12 $$ path = path.substring("file:".length())[ CD ]
Line_12 $$ path = path.substring("file:".length())-->Line_17 $$ return path.replaceAll("!.*$", "")[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_4 $$ ClassLoader loader = klass.getClassLoader()[ CD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_14 $$ path = URLDecoder.decode(path, "UTF-8")[ CD ]
Line_29 $$ tempJar = new File(tempJar.getAbsolutePath() + ".jar")-->Line_31 $$ return tempJar.getAbsolutePath()[ FD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_19 $$ String klassName = klass.getName()[ CD ]
Line_21 $$ path = path.substring(0, path.length() - klassName.length())-->Line_14 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_10 $$ String path = url.getPath()-->Line_11 $$ if (path.startsWith("file:")) [ FD ]
Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)-->Line_31 $$ return tempJar.getAbsolutePath()[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_6 $$ String class_file = klass.getName().replaceAll("\\.", "/") + ".class"[ FD ]
Line_22 $$ File baseDir = new File(path)-->Line_30 $$ createJar(baseDir, tempJar)[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_3 $$ Preconditions.checkNotNull(klass, "klass")[ CD ]
Line_9 $$ URL url = (URL) itr.nextElement()-->Line_15 $$ if ("jar".equals(url.getProtocol())) [ FD ]
Line_16 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_14 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_15 $$ if ("jar".equals(url.getProtocol())) [ CD ]
Line_21 $$ path = path.substring(0, path.length() - klassName.length())-->Line_12 $$ path = path.substring("file:".length())[ FD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_9 $$ URL url = (URL) itr.nextElement()[ CD ]
Line_15 $$ if ("jar".equals(url.getProtocol())) -->Line_16 $$ path = URLDecoder.decode(path, "UTF-8")[ CD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_23 $$ File testDir = new File(System.getProperty("test.build.dir", "target/test-dir"))[ CD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_31 $$ return tempJar.getAbsolutePath()[ CD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_25 $$ if (!testDir.exists()) [ CD ]
Line_10 $$ String path = url.getPath()-->Line_16 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_14 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_11 $$ if (path.startsWith("file:")) [ FD ]
Line_25 $$ if (!testDir.exists()) -->Line_26 $$ testDir.mkdirs()[ CD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_30 $$ createJar(baseDir, tempJar)[ CD ]
Line_14 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_38 $$ return null[ CD ]
Line_2 $$ public static String getJar(Class klass) -->Line_19 $$ String klassName = klass.getName()[ FD ]
Line_16 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_17 $$ return path.replaceAll("!.*$", "")[ FD ]
Line_24 $$ testDir = testDir.getAbsoluteFile()-->Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)[ FD ]
Line_12 $$ path = path.substring("file:".length())-->Line_16 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)-->Line_30 $$ createJar(baseDir, tempJar)[ FD ]
Line_21 $$ path = path.substring(0, path.length() - klassName.length())-->Line_11 $$ if (path.startsWith("file:")) [ FD ]
Line_24 $$ testDir = testDir.getAbsoluteFile()-->Line_26 $$ testDir.mkdirs()[ FD ]
Line_4 $$ ClassLoader loader = klass.getClassLoader()-->Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) [ FD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_20 $$ klassName = klassName.replace(".", "/") + ".class"[ CD ]
Line_15 $$ if ("jar".equals(url.getProtocol())) -->Line_18 $$ if ("file".equals(url.getProtocol())) [ CD ]
Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)-->Line_29 $$ tempJar = new File(tempJar.getAbsolutePath() + ".jar")[ FD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_9 $$ URL url = (URL) itr.nextElement()[ FD ]
Line_16 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_24 $$ testDir = testDir.getAbsoluteFile()[ CD ]
Line_14 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_17 $$ return path.replaceAll("!.*$", "")[ FD ]
Line_10 $$ String path = url.getPath()-->Line_12 $$ path = path.substring("file:".length())[ FD ]
Line_29 $$ tempJar = new File(tempJar.getAbsolutePath() + ".jar")-->Line_30 $$ createJar(baseDir, tempJar)[ FD ]
Line_12 $$ path = path.substring("file:".length())-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_6 $$ String class_file = klass.getName().replaceAll("\\.", "/") + ".class"-->Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) [ FD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_11 $$ if (path.startsWith("file:")) [ CD ]
Line_19 $$ String klassName = klass.getName()-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_23 $$ File testDir = new File(System.getProperty("test.build.dir", "target/test-dir"))-->Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)[ FD ]
Line_8 $$ for (Enumeration itr = loader.getResources(class_file); itr.hasMoreElements(); ) -->Line_10 $$ String path = url.getPath()[ CD ]
Line_23 $$ File testDir = new File(System.getProperty("test.build.dir", "target/test-dir"))-->Line_24 $$ testDir = testDir.getAbsoluteFile()[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_4 $$ ClassLoader loader = klass.getClassLoader()[ FD ]
Line_20 $$ klassName = klassName.replace(".", "/") + ".class"-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_5 $$ if (loader != null) -->Line_6 $$ String class_file = klass.getName().replaceAll("\\.", "/") + ".class"[ CD ]
Line_14 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_12 $$ path = path.substring("file:".length())[ FD ]
Line_24 $$ testDir = testDir.getAbsoluteFile()-->Line_25 $$ if (!testDir.exists()) [ FD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ CD ]
Line_4 $$ ClassLoader loader = klass.getClassLoader()-->Line_5 $$ if (loader != null) [ FD ]
Line_9 $$ URL url = (URL) itr.nextElement()-->Line_10 $$ String path = url.getPath()[ FD ]
Line_10 $$ String path = url.getPath()-->Line_17 $$ return path.replaceAll("!.*$", "")[ FD ]
Line_14 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_16 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_16 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_11 $$ if (path.startsWith("file:")) [ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_3 $$ Preconditions.checkNotNull(klass, "klass")[ FD ]
Line_23 $$ File testDir = new File(System.getProperty("test.build.dir", "target/test-dir"))-->Line_26 $$ testDir.mkdirs()[ FD ]
Line_19 $$ String klassName = klass.getName()-->Line_20 $$ klassName = klassName.replace(".", "/") + ".class"[ FD ]
Line_21 $$ path = path.substring(0, path.length() - klassName.length())-->Line_17 $$ return path.replaceAll("!.*$", "")[ FD ]
Line_16 $$ path = URLDecoder.decode(path, "UTF-8")-->Line_12 $$ path = path.substring("file:".length())[ FD ]
Line_10 $$ String path = url.getPath()-->Line_21 $$ path = path.substring(0, path.length() - klassName.length())[ FD ]
Line_21 $$ path = path.substring(0, path.length() - klassName.length())-->Line_16 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_12 $$ path = path.substring("file:".length())-->Line_14 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_2 $$ public static String getJar(Class klass) -->Line_5 $$ if (loader != null) [ CD ]
Line_10 $$ String path = url.getPath()-->Line_14 $$ path = URLDecoder.decode(path, "UTF-8")[ FD ]
Line_12 $$ path = path.substring("file:".length())-->Line_11 $$ if (path.startsWith("file:")) [ FD ]
Line_23 $$ File testDir = new File(System.getProperty("test.build.dir", "target/test-dir"))-->Line_25 $$ if (!testDir.exists()) [ FD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_22 $$ File baseDir = new File(path)[ CD ]
Line_18 $$ if ("file".equals(url.getProtocol())) -->Line_28 $$ File tempJar = File.createTempFile("hadoop-", "", testDir)[ CD ]
Line_15 $$ if ("jar".equals(url.getProtocol())) -->Line_17 $$ return path.replaceAll("!.*$", "")[ CD ]
Line_9 $$ URL url = (URL) itr.nextElement()-->Line_18 $$ if ("file".equals(url.getProtocol())) [ FD ]
