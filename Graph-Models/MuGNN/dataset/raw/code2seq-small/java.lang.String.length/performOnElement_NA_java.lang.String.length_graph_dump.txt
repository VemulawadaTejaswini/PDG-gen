Line_21 $$ final String replacementText = stringBuilder.toString()-->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_4 $$ final TextRange textRange = getTextRange(element, editor)[ FD ]
Line_13 $$ for (String string : subStrings) -->Line_14 $$ final String startTrimmed = StringUtil.trimStart(string.trim(), prefix.trim())[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_5 $$ if (textRange.isEmpty())[ CD ]
Line_5 $$ if (textRange.isEmpty())-->Line_6 $$ return[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_20 $$ appendPostfix(element, text, stringBuilder)[ CD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_12 $$ appendPrefix(element, text, stringBuilder)[ FD ]
Line_4 $$ final TextRange textRange = getTextRange(element, editor)-->Line_5 $$ if (textRange.isEmpty())[ FD ]
Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())-->Line_20 $$ appendPostfix(element, text, stringBuilder)[ FD ]
Line_16 $$ final String finalString = str.trim()-->Line_17 $$ if (!StringUtil.isEmptyOrSpaces(finalString))[ FD ]
Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() -->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ CD ]
Line_4 $$ final TextRange textRange = getTextRange(element, editor)-->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_10 $$ final String postfix = getPostfix(element)[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() [ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_20 $$ appendPostfix(element, text, stringBuilder)[ FD ]
Line_25 $$ final CodeFormatterFacade codeFormatter = new CodeFormatterFacade(CodeStyleSettingsManager.getSettings(element.getProject()), element.getLanguage())-->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_4 $$ final TextRange textRange = getTextRange(element, editor)[ CD ]
Line_14 $$ final String startTrimmed = StringUtil.trimStart(string.trim(), prefix.trim())-->Line_15 $$ final String str = StringUtil.trimEnd(startTrimmed, postfix.trim())[ FD ]
Line_4 $$ final TextRange textRange = getTextRange(element, editor)-->Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())[ FD ]
Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())-->Line_8 $$ final List<String> subStrings = StringUtil.split(text, "\n", true)[ FD ]
Line_10 $$ final String postfix = getPostfix(element)-->Line_15 $$ final String str = StringUtil.trimEnd(startTrimmed, postfix.trim())[ FD ]
Line_11 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_12 $$ appendPrefix(element, text, stringBuilder)[ FD ]
Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())-->Line_12 $$ appendPrefix(element, text, stringBuilder)[ FD ]
Line_15 $$ final String str = StringUtil.trimEnd(startTrimmed, postfix.trim())-->Line_16 $$ final String finalString = str.trim()[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_9 $$ final String prefix = getPrefix(element)[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_24 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), replacementText)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_3 $$ final Document document = editor.getDocument()[ FD ]
Line_11 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_21 $$ final String replacementText = stringBuilder.toString()[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_10 $$ final String postfix = getPostfix(element)[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_12 $$ appendPrefix(element, text, stringBuilder)[ CD ]
Line_11 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_18 $$ stringBuilder.append(finalString).append(" ")[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() [ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_3 $$ final Document document = editor.getDocument()[ CD ]
Line_4 $$ final TextRange textRange = getTextRange(element, editor)-->Line_24 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), replacementText)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_8 $$ final List<String> subStrings = StringUtil.split(text, "\n", true)[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_21 $$ final String replacementText = stringBuilder.toString()[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_7 $$ final String text = textRange.substring(element.getContainingFile().getText())[ FD ]
Line_21 $$ final String replacementText = stringBuilder.toString()-->Line_24 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), replacementText)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_25 $$ final CodeFormatterFacade codeFormatter = new CodeFormatterFacade(CodeStyleSettingsManager.getSettings(element.getProject()), element.getLanguage())[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() [ CD ]
Line_16 $$ final String finalString = str.trim()-->Line_18 $$ stringBuilder.append(finalString).append(" ")[ FD ]
Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() -->Line_24 $$ document.replaceString(textRange.getStartOffset(), textRange.getEndOffset(), replacementText)[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_9 $$ final String prefix = getPrefix(element)[ CD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_11 $$ final StringBuilder stringBuilder = new StringBuilder()[ CD ]
Line_17 $$ if (!StringUtil.isEmptyOrSpaces(finalString))-->Line_18 $$ stringBuilder.append(finalString).append(" ")[ CD ]
Line_11 $$ final StringBuilder stringBuilder = new StringBuilder()-->Line_20 $$ appendPostfix(element, text, stringBuilder)[ FD ]
Line_2 $$ protected void performOnElement(@NotNull final PsiElement element, @NotNull final Editor editor) -->Line_26 $$ codeFormatter.doWrapLongLinesIfNecessary(editor, element.getProject(), document, textRange.getStartOffset(), textRange.getStartOffset() + replacementText.length() + 1)[ FD ]
Line_9 $$ final String prefix = getPrefix(element)-->Line_14 $$ final String startTrimmed = StringUtil.trimStart(string.trim(), prefix.trim())[ FD ]
Line_22 $$ CommandProcessor.getInstance().executeCommand(element.getProject(), new Runnable() -->Line_25 $$ final CodeFormatterFacade codeFormatter = new CodeFormatterFacade(CodeStyleSettingsManager.getSettings(element.getProject()), element.getLanguage())[ CD ]
