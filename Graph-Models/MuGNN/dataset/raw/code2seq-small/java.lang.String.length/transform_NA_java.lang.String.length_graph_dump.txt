Line_19 $$ StringWriter contentWriter = new StringWriter()-->Line_34 $$ contentWriter.write("\n" + "# Hash: " + hash)[ FD ]
Line_21 $$ Scanner scanner = new Scanner(content)-->Line_24 $$ String line = scanner.nextLine()[ FD ]
Line_21 $$ Scanner scanner = new Scanner(content)-->Line_23 $$ while (scanner.hasNextLine()) [ FD ]
Line_19 $$ StringWriter contentWriter = new StringWriter()-->Line_27 $$ contentWriter.write(line + "\n")[ FD ]
Line_24 $$ String line = scanner.nextLine()-->Line_26 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ FD ]
Line_10 $$ if (!content.startsWith(MANIFEST_HEADER)) -->Line_11 $$ if (logger.isTraceEnabled()) [ CD ]
Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_26 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ CD ]
Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_27 $$ contentWriter.write(line + "\n")[ CD ]
Line_24 $$ String line = scanner.nextLine()-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_11 $$ if (logger.isTraceEnabled()) -->Line_12 $$ logger.trace("AppCache manifest does not start with 'CACHE MANIFEST', skipping: " + resource)[ CD ]
Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ CD ]
Line_16 $$ if (logger.isTraceEnabled()) -->Line_17 $$ logger.trace("Transforming resource: " + resource)[ CD ]
Line_4 $$ resource = transformerChain.transform(request, resource)-->Line_8 $$ byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream())[ FD ]
Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_28 $$ hashBuilder.appendString(line)[ CD ]
Line_4 $$ resource = transformerChain.transform(request, resource)-->Line_36 $$ logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]")[ FD ]
Line_9 $$ String content = new String(bytes, DEFAULT_CHARSET)-->Line_20 $$ HashBuilder hashBuilder = new HashBuilder(content.length())[ FD ]
Line_20 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_33 $$ String hash = hashBuilder.build()[ FD ]
Line_19 $$ StringWriter contentWriter = new StringWriter()-->Line_38 $$ return new TransformedResource(resource, contentWriter.toString().getBytes(DEFAULT_CHARSET))[ FD ]
Line_22 $$ SectionTransformer currentTransformer = this.sectionTransformers.get(MANIFEST_HEADER)-->Line_26 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ FD ]
Line_23 $$ while (scanner.hasNextLine()) -->Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) [ CD ]
Line_4 $$ resource = transformerChain.transform(request, resource)-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_22 $$ SectionTransformer currentTransformer = this.sectionTransformers.get(MANIFEST_HEADER)-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_20 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_9 $$ String content = new String(bytes, DEFAULT_CHARSET)-->Line_10 $$ if (!content.startsWith(MANIFEST_HEADER)) [ FD ]
Line_20 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_28 $$ hashBuilder.appendString(line)[ FD ]
Line_4 $$ resource = transformerChain.transform(request, resource)-->Line_5 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) [ FD ]
Line_26 $$ currentTransformer = this.sectionTransformers.get(line.trim())-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_24 $$ String line = scanner.nextLine()-->Line_25 $$ if (this.sectionTransformers.containsKey(line.trim())) [ FD ]
Line_23 $$ while (scanner.hasNextLine()) -->Line_24 $$ String line = scanner.nextLine()[ CD ]
Line_5 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) -->Line_6 $$ return resource[ CD ]
Line_24 $$ String line = scanner.nextLine()-->Line_28 $$ hashBuilder.appendString(line)[ FD ]
Line_35 $$ if (logger.isTraceEnabled()) -->Line_36 $$ logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]")[ CD ]
Line_10 $$ if (!content.startsWith(MANIFEST_HEADER)) -->Line_14 $$ return resource[ CD ]
Line_19 $$ StringWriter contentWriter = new StringWriter()-->Line_30 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
