Line_21 $$ SectionTransformer currentTransformer = this.sectionTransformers.get(MANIFEST_HEADER)-->Line_25 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ FD ]
Line_3 $$ resource = transformerChain.transform(request, resource)-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_19 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_32 $$ String hash = hashBuilder.build()[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_4 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) [ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_9 $$ if (!content.startsWith(MANIFEST_HEADER)) [ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_21 $$ SectionTransformer currentTransformer = this.sectionTransformers.get(MANIFEST_HEADER)[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_34 $$ if (logger.isTraceEnabled()) [ CD ]
Line_3 $$ resource = transformerChain.transform(request, resource)-->Line_35 $$ logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]")[ FD ]
Line_18 $$ StringWriter contentWriter = new StringWriter()-->Line_37 $$ return new TransformedResource(resource, contentWriter.toString().getBytes(DEFAULT_CHARSET))[ FD ]
Line_18 $$ StringWriter contentWriter = new StringWriter()-->Line_33 $$ contentWriter.write("\n" + "# Hash: " + hash)[ FD ]
Line_10 $$ if (logger.isTraceEnabled()) -->Line_11 $$ logger.trace("AppCache manifest does not start with 'CACHE MANIFEST', skipping: " + resource)[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_22 $$ while (scanner.hasNextLine()) [ CD ]
Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_27 $$ hashBuilder.appendString(line)[ CD ]
Line_4 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) -->Line_5 $$ return resource[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_7 $$ byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream())[ FD ]
Line_22 $$ while (scanner.hasNextLine()) -->Line_23 $$ String line = scanner.nextLine()[ CD ]
Line_21 $$ SectionTransformer currentTransformer = this.sectionTransformers.get(MANIFEST_HEADER)-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_23 $$ String line = scanner.nextLine()-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_9 $$ if (!content.startsWith(MANIFEST_HEADER)) -->Line_13 $$ return resource[ CD ]
Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_25 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ CD ]
Line_8 $$ String content = new String(bytes, DEFAULT_CHARSET)-->Line_9 $$ if (!content.startsWith(MANIFEST_HEADER)) [ FD ]
Line_8 $$ String content = new String(bytes, DEFAULT_CHARSET)-->Line_19 $$ HashBuilder hashBuilder = new HashBuilder(content.length())[ FD ]
Line_25 $$ currentTransformer = this.sectionTransformers.get(line.trim())-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_15 $$ if (logger.isTraceEnabled()) -->Line_16 $$ logger.trace("Transforming resource: " + resource)[ CD ]
Line_23 $$ String line = scanner.nextLine()-->Line_25 $$ currentTransformer = this.sectionTransformers.get(line.trim())[ FD ]
Line_19 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_27 $$ hashBuilder.appendString(line)[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_20 $$ Scanner scanner = new Scanner(content)[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_32 $$ String hash = hashBuilder.build()[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_37 $$ return new TransformedResource(resource, contentWriter.toString().getBytes(DEFAULT_CHARSET))[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_4 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) [ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_3 $$ resource = transformerChain.transform(request, resource)[ FD ]
Line_34 $$ if (logger.isTraceEnabled()) -->Line_35 $$ logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]")[ CD ]
Line_9 $$ if (!content.startsWith(MANIFEST_HEADER)) -->Line_10 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_19 $$ HashBuilder hashBuilder = new HashBuilder(content.length())[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_18 $$ StringWriter contentWriter = new StringWriter()[ CD ]
Line_19 $$ HashBuilder hashBuilder = new HashBuilder(content.length())-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_3 $$ resource = transformerChain.transform(request, resource)-->Line_4 $$ if (!this.fileExtension.equals(StringUtils.getFilenameExtension(resource.getFilename()))) [ FD ]
Line_3 $$ resource = transformerChain.transform(request, resource)-->Line_7 $$ byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream())[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_3 $$ resource = transformerChain.transform(request, resource)[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_33 $$ contentWriter.write("\n" + "# Hash: " + hash)[ CD ]
Line_23 $$ String line = scanner.nextLine()-->Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) [ FD ]
Line_20 $$ Scanner scanner = new Scanner(content)-->Line_22 $$ while (scanner.hasNextLine()) [ FD ]
Line_20 $$ Scanner scanner = new Scanner(content)-->Line_23 $$ String line = scanner.nextLine()[ FD ]
Line_18 $$ StringWriter contentWriter = new StringWriter()-->Line_26 $$ contentWriter.write(line + "\n")[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_15 $$ if (logger.isTraceEnabled()) [ CD ]
Line_22 $$ while (scanner.hasNextLine()) -->Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) [ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_7 $$ byte[] bytes = FileCopyUtils.copyToByteArray(resource.getInputStream())[ CD ]
Line_18 $$ StringWriter contentWriter = new StringWriter()-->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_8 $$ String content = new String(bytes, DEFAULT_CHARSET)[ CD ]
Line_23 $$ String line = scanner.nextLine()-->Line_27 $$ hashBuilder.appendString(line)[ FD ]
Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_26 $$ contentWriter.write(line + "\n")[ CD ]
Line_24 $$ if (this.sectionTransformers.containsKey(line.trim())) -->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ CD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_29 $$ contentWriter.write(currentTransformer.transform(line, hashBuilder, resource, transformerChain, request) + "\n")[ FD ]
Line_2 $$ public Resource transform(HttpServletRequest request, Resource resource, ResourceTransformerChain transformerChain) throws IOException -->Line_35 $$ logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]")[ FD ]
