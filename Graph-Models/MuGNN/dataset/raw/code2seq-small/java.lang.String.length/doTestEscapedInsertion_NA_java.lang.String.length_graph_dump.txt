Line_3 $$ String tagText = toEscapedText(text)-->Line_9 $$ assertEquals(tagText, xmlText.getText())[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_10 $$ xmlText.insertText(textToInsert, i)[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_5 $$ XmlTag tag = XmlElementFactory.getInstance(getProject()).createXHTMLTagFromText("<a>" + tagText + "</a>")[ CD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_7 $$ assertEquals(1, children.length)[ CD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_8 $$ final XmlText xmlText = (XmlText) children[0][ CD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_10 $$ xmlText.insertText(textToInsert, i)[ CD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_11 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))[ FD ]
Line_8 $$ final XmlText xmlText = (XmlText) children[0]-->Line_9 $$ assertEquals(tagText, xmlText.getText())[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_12 $$ expectedDisplay.insert(i, textToInsert)[ CD ]
Line_8 $$ final XmlText xmlText = (XmlText) children[0]-->Line_10 $$ xmlText.insertText(textToInsert, i)[ FD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_3 $$ String tagText = toEscapedText(text)[ CD ]
Line_5 $$ XmlTag tag = XmlElementFactory.getInstance(getProject()).createXHTMLTagFromText("<a>" + tagText + "</a>")-->Line_6 $$ final PsiElement[] children = tag.getValue().getTextElements()[ FD ]
Line_11 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))-->Line_13 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_9 $$ assertEquals(tagText, xmlText.getText())[ CD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_12 $$ expectedDisplay.insert(i, textToInsert)[ FD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_12 $$ expectedDisplay.insert(i, textToInsert)[ FD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_10 $$ xmlText.insertText(textToInsert, i)[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_11 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))[ CD ]
Line_8 $$ final XmlText xmlText = (XmlText) children[0]-->Line_13 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ FD ]
Line_11 $$ final StringBuilder expectedDisplay = new StringBuilder(text.replace('_', ' '))-->Line_12 $$ expectedDisplay.insert(i, textToInsert)[ FD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_6 $$ final PsiElement[] children = tag.getValue().getTextElements()[ CD ]
Line_4 $$ for (int i = 0; i <= text.length(); i++) -->Line_13 $$ assertEquals(expectedDisplay.toString(), xmlText.getValue())[ CD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_3 $$ String tagText = toEscapedText(text)[ FD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_4 $$ for (int i = 0; i <= text.length(); i++) [ CD ]
Line_2 $$ private static void doTestEscapedInsertion(final String text, final String textToInsert) throws IncorrectOperationException -->Line_4 $$ for (int i = 0; i <= text.length(); i++) [ FD ]
