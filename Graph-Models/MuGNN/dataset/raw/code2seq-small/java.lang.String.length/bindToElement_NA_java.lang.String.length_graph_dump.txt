Line_10 $$ if (element instanceof PsiPackage) -->Line_11 $$ PsiPackage psiPackage = (PsiPackage) element[ CD ]
Line_5 $$ final String newName-->Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()[ FD ]
Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)-->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ FD ]
Line_18 $$ String text = getElement().getText()-->Line_19 $$ int lt = text.indexOf('<', getRangeInElement().getStartOffset())[ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_23 $$ TextRange range = new TextRange(myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset(), end)[ CD ]
Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()-->Line_12 $$ newName = psiPackage.getQualifiedName()[ FD ]
Line_12 $$ newName = psiPackage.getQualifiedName()-->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ FD ]
Line_5 $$ final String newName-->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ FD ]
Line_7 $$ PsiClass psiClass = (PsiClass) element-->Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()[ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_20 $$ if (lt >= 0 && lt < end) [ CD ]
Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()-->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_6 $$ if (element instanceof PsiClass) [ CD ]
Line_20 $$ if (lt >= 0 && lt < end) -->Line_21 $$ end = CharArrayUtil.shiftBackward(text, lt - 1, "\n\t ") + 1[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_24 $$ final ElementManipulator<PsiElement> manipulator = getManipulator(getElement())[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_6 $$ if (element instanceof PsiClass) [ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_3 $$ if (isReferenceTo(element))[ FD ]
Line_18 $$ String text = getElement().getText()-->Line_21 $$ end = CharArrayUtil.shiftBackward(text, lt - 1, "\n\t ") + 1[ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_3 $$ if (isReferenceTo(element))[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_18 $$ String text = getElement().getText()[ CD ]
Line_23 $$ TextRange range = new TextRange(myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset(), end)-->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ FD ]
Line_11 $$ PsiPackage psiPackage = (PsiPackage) element-->Line_12 $$ newName = psiPackage.getQualifiedName()[ FD ]
Line_24 $$ final ElementManipulator<PsiElement> manipulator = getManipulator(getElement())-->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ FD ]
Line_6 $$ if (element instanceof PsiClass) -->Line_8 $$ final boolean jvmFormat = Boolean.TRUE.equals(JavaClassReferenceProvider.JVM_FORMAT.getValue(getOptions()))[ CD ]
Line_5 $$ final String newName-->Line_12 $$ newName = psiPackage.getQualifiedName()[ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_17 $$ int end = getRangeInElement().getEndOffset()[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_19 $$ int lt = text.indexOf('<', getRangeInElement().getStartOffset())[ CD ]
Line_6 $$ if (element instanceof PsiClass) -->Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_10 $$ if (element instanceof PsiPackage) [ FD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_27 $$ return finalElement[ CD ]
Line_6 $$ if (element instanceof PsiClass) -->Line_7 $$ PsiClass psiClass = (PsiClass) element[ CD ]
Line_2 $$ public PsiElement bindToElement(@NotNull PsiElement element) throws IncorrectOperationException -->Line_5 $$ final String newName[ CD ]
Line_17 $$ int end = getRangeInElement().getEndOffset()-->Line_21 $$ end = CharArrayUtil.shiftBackward(text, lt - 1, "\n\t ") + 1[ FD ]
Line_3 $$ if (isReferenceTo(element))-->Line_4 $$ return getElement()[ CD ]
Line_12 $$ newName = psiPackage.getQualifiedName()-->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ FD ]
Line_6 $$ if (element instanceof PsiClass) -->Line_10 $$ if (element instanceof PsiPackage) [ CD ]
Line_10 $$ if (element instanceof PsiPackage) -->Line_12 $$ newName = psiPackage.getQualifiedName()[ CD ]
Line_23 $$ TextRange range = new TextRange(myJavaClassReferenceSet.getReference(0).getRangeInElement().getStartOffset(), end)-->Line_25 $$ final PsiElement finalElement = manipulator.handleContentChange(getElement(), range, newName)[ FD ]
Line_9 $$ newName = jvmFormat ? ClassUtil.getJVMClassName(psiClass) : psiClass.getQualifiedName()-->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ FD ]
Line_5 $$ final String newName-->Line_26 $$ myJavaClassReferenceSet.reparse(finalElement, TextRange.from(range.getStartOffset(), newName.length()))[ FD ]
