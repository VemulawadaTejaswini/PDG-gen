Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_13 $$ return StringUtil.decapitalize(name.substring(3))[ FD ]
Line_10 $$ if (name.startsWith("to") && name.length() > 2) -->Line_11 $$ return StringUtil.decapitalize(name.substring(2))[ CD ]
Line_27 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression-->Line_28 $$ final PsiExpression innerExpression = parenthesizedExpression.getExpression()[ FD ]
Line_28 $$ final PsiExpression innerExpression = parenthesizedExpression.getExpression()-->Line_29 $$ return getVariableName(innerExpression)[ FD ]
Line_22 $$ final PsiArrayAccessExpression arrayAccessExpression = (PsiArrayAccessExpression) expression-->Line_23 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()[ FD ]
Line_21 $$ if (expression instanceof PsiArrayAccessExpression) -->Line_25 $$ return (name == null) ? null : StringUtil.unpluralize(name)[ CD ]
Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) -->Line_36 $$ return referenceName[ CD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_7 $$ if (name == null) [ CD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_26 $$ if (expression instanceof PsiParenthesizedExpression) [ FD ]
Line_23 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()-->Line_24 $$ final String name = getVariableName(arrayExpression)[ FD ]
Line_17 $$ if (expression instanceof PsiTypeCastExpression) -->Line_20 $$ return getVariableName(operand)[ CD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) [ FD ]
Line_26 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) [ CD ]
Line_17 $$ if (expression instanceof PsiTypeCastExpression) -->Line_21 $$ if (expression instanceof PsiArrayAccessExpression) [ CD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_3 $$ if (expression instanceof PsiMethodCallExpression) [ CD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_17 $$ if (expression instanceof PsiTypeCastExpression) [ CD ]
Line_32 $$ final String referenceName = referenceElement.getReferenceName()-->Line_33 $$ if (referenceName == null) [ FD ]
Line_19 $$ final PsiExpression operand = castExpression.getOperand()-->Line_20 $$ return getVariableName(operand)[ FD ]
Line_21 $$ if (expression instanceof PsiArrayAccessExpression) -->Line_22 $$ final PsiArrayAccessExpression arrayAccessExpression = (PsiArrayAccessExpression) expression[ CD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_38 $$ return null[ CD ]
Line_26 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_29 $$ return getVariableName(innerExpression)[ CD ]
Line_17 $$ if (expression instanceof PsiTypeCastExpression) -->Line_19 $$ final PsiExpression operand = castExpression.getOperand()[ CD ]
Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) -->Line_31 $$ final PsiJavaCodeReferenceElement referenceElement = (PsiJavaCodeReferenceElement) expression[ CD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_10 $$ if (name.startsWith("to") && name.length() > 2) [ CD ]
Line_21 $$ if (expression instanceof PsiArrayAccessExpression) -->Line_24 $$ final String name = getVariableName(arrayExpression)[ CD ]
Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_25 $$ return (name == null) ? null : StringUtil.unpluralize(name)[ FD ]
Line_5 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()-->Line_6 $$ final String name = methodExpression.getReferenceName()[ FD ]
Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_10 $$ if (name.startsWith("to") && name.length() > 2) [ FD ]
Line_17 $$ if (expression instanceof PsiTypeCastExpression) -->Line_18 $$ final PsiTypeCastExpression castExpression = (PsiTypeCastExpression) expression[ CD ]
Line_7 $$ if (name == null) -->Line_8 $$ return null[ CD ]
Line_18 $$ final PsiTypeCastExpression castExpression = (PsiTypeCastExpression) expression-->Line_19 $$ final PsiExpression operand = castExpression.getOperand()[ FD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_3 $$ if (expression instanceof PsiMethodCallExpression) [ FD ]
Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_7 $$ if (name == null) [ FD ]
Line_10 $$ if (name.startsWith("to") && name.length() > 2) -->Line_12 $$ if (name.startsWith("get") && name.length() > 3) [ CD ]
Line_26 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_27 $$ final PsiParenthesizedExpression parenthesizedExpression = (PsiParenthesizedExpression) expression[ CD ]
Line_4 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) expression-->Line_5 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ FD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_34 $$ return expression.getText()[ FD ]
Line_33 $$ if (referenceName == null) -->Line_34 $$ return expression.getText()[ CD ]
Line_31 $$ final PsiJavaCodeReferenceElement referenceElement = (PsiJavaCodeReferenceElement) expression-->Line_32 $$ final String referenceName = referenceElement.getReferenceName()[ FD ]
Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) -->Line_32 $$ final String referenceName = referenceElement.getReferenceName()[ CD ]
Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_11 $$ return StringUtil.decapitalize(name.substring(2))[ FD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_21 $$ if (expression instanceof PsiArrayAccessExpression) [ FD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_6 $$ final String name = methodExpression.getReferenceName()[ CD ]
Line_6 $$ final String name = methodExpression.getReferenceName()-->Line_12 $$ if (name.startsWith("get") && name.length() > 3) [ FD ]
Line_12 $$ if (name.startsWith("get") && name.length() > 3) -->Line_15 $$ return name[ CD ]
Line_2 $$ private static String getVariableName(PsiExpression expression) -->Line_17 $$ if (expression instanceof PsiTypeCastExpression) [ FD ]
Line_21 $$ if (expression instanceof PsiArrayAccessExpression) -->Line_26 $$ if (expression instanceof PsiParenthesizedExpression) [ CD ]
Line_21 $$ if (expression instanceof PsiArrayAccessExpression) -->Line_23 $$ final PsiExpression arrayExpression = arrayAccessExpression.getArrayExpression()[ CD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_4 $$ final PsiMethodCallExpression methodCallExpression = (PsiMethodCallExpression) expression[ CD ]
Line_26 $$ if (expression instanceof PsiParenthesizedExpression) -->Line_28 $$ final PsiExpression innerExpression = parenthesizedExpression.getExpression()[ CD ]
Line_12 $$ if (name.startsWith("get") && name.length() > 3) -->Line_13 $$ return StringUtil.decapitalize(name.substring(3))[ CD ]
Line_3 $$ if (expression instanceof PsiMethodCallExpression) -->Line_5 $$ final PsiReferenceExpression methodExpression = methodCallExpression.getMethodExpression()[ CD ]
Line_30 $$ if (expression instanceof PsiJavaCodeReferenceElement) -->Line_33 $$ if (referenceName == null) [ CD ]
