Line_114 $$ if (!inputIsDirectory) -->Line_136 $$ if (!setNextDirectoryInputStream()) [ CD ]
Line_132 $$ String[] new_inputDirectoryFiles = new String[dropPoint]-->Line_133 $$ System.arraycopy(inputDirectoryFiles, 0, new_inputDirectoryFiles, 0, dropPoint)[ FD ]
Line_114 $$ if (!inputIsDirectory) -->Line_131 $$ LOG.info("We dropped " + (inputDirectoryFiles.length - dropPoint) + " crc files.")[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_95 $$ sortTimeSpreadDists = newDistributionBlock()[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_33 $$ ++i[ FD ]
Line_110 $$ for (int i = 0; i < 19; ++i) -->Line_121 $$ for (int i = 0; i < statuses.length; ++i) [ FD ]
Line_126 $$ String name = inputDirectoryFiles[i]-->Line_128 $$ inputDirectoryFiles[dropPoint++] = name[ FD ]
Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) -->Line_127 $$ if (!(name.length() >= 4 && ".crc".equals(name.substring(name.length() - 4)))) [ CD ]
Line_69 $$ i += 2-->Line_33 $$ ++i[ FD ]
Line_32 $$ if ("-write-topology".equals(args[i].toLowerCase())) -->Line_34 $$ topologyFilename = new Path(args[i])[ CD ]
Line_69 $$ i += 2-->Line_39 $$ ++i[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) [ CD ]
Line_140 $$ if (jobTraceFilename != null) -->Line_143 $$ if (topologyFilename != null) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_11 $$ if ("-h".equals(args[i].toLowerCase()) || "-help".equals(args[i].toLowerCase())) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_19 $$ if ("-write-job-trace".equals(args[i].toLowerCase())) [ CD ]
Line_34 $$ topologyFilename = new Path(args[i])-->Line_143 $$ if (topologyFilename != null) [ FD ]
Line_62 $$ if ("-spreads".equals(args[i].toLowerCase())) -->Line_64 $$ int max = Integer.parseInt(args[i + 2])[ CD ]
Line_21 $$ jobTraceFilename = new Path(args[i])-->Line_140 $$ if (jobTraceFilename != null) [ FD ]
Line_69 $$ i += 2-->Line_20 $$ ++i[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_110 $$ for (int i = 0; i < 19; ++i) [ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_55 $$ --i[ FD ]
Line_127 $$ if (!(name.length() >= 4 && ".crc".equals(name.substring(name.length() - 4)))) -->Line_128 $$ inputDirectoryFiles[dropPoint++] = name[ CD ]
Line_19 $$ if ("-write-job-trace".equals(args[i].toLowerCase())) -->Line_21 $$ jobTraceFilename = new Path(args[i])[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_32 $$ if ("-write-topology".equals(args[i].toLowerCase())) [ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_3 $$ Path jobTraceFilename = null[ CD ]
Line_3 $$ Path jobTraceFilename = null-->Line_140 $$ if (jobTraceFilename != null) [ FD ]
Line_65 $$ if (min < max && min < 1000 && max < 1000) -->Line_69 $$ i += 2[ CD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()[ CD ]
Line_106 $$ final Path inputPath = new Path(inputFilename)-->Line_119 $$ FileStatus[] statuses = fs.listStatus(inputPath)[ FD ]
Line_32 $$ if ("-write-topology".equals(args[i].toLowerCase())) -->Line_33 $$ ++i[ CD ]
Line_118 $$ FileSystem fs = inputPath.getFileSystem(getConf())-->Line_119 $$ FileStatus[] statuses = fs.listStatus(inputPath)[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_81 $$ if ("-tasktimes".equals(args[i].toLowerCase())) [ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_92 $$ delayTimeDists = newDistributionBlock()[ CD ]
Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()-->Line_53 $$ attemptTimesPercentiles[j] = values.get(j)[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_121 $$ for (int i = 0; i < statuses.length; ++i) [ FD ]
Line_40 $$ while (i < args.length && Character.isDigit(args[i].charAt(0))) -->Line_42 $$ ++i[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_4 $$ Path topologyFilename = null[ CD ]
Line_11 $$ if ("-h".equals(args[i].toLowerCase()) || "-help".equals(args[i].toLowerCase())) -->Line_13 $$ return 0[ CD ]
Line_69 $$ i += 2-->Line_121 $$ for (int i = 0; i < statuses.length; ++i) [ FD ]
Line_143 $$ if (topologyFilename != null) -->Line_145 $$ topologyGen.init(topologyFilename, getConf())[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_106 $$ final Path inputPath = new Path(inputFilename)[ CD ]
Line_140 $$ if (jobTraceFilename != null) -->Line_142 $$ jobTraceGen.init(jobTraceFilename, getConf())[ CD ]
Line_21 $$ jobTraceFilename = new Path(args[i])-->Line_142 $$ jobTraceGen.init(jobTraceFilename, getConf())[ FD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_49 $$ for (int j = 0; j < attemptTimesPercentiles.length; ++j) [ CD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_39 $$ ++i[ CD ]
Line_69 $$ i += 2-->Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) [ FD ]
Line_106 $$ final Path inputPath = new Path(inputFilename)-->Line_115 $$ input = maybeUncompressedPath(inputPath)[ FD ]
Line_4 $$ Path topologyFilename = null-->Line_143 $$ if (topologyFilename != null) [ FD ]
Line_4 $$ Path topologyFilename = null-->Line_145 $$ topologyGen.init(topologyFilename, getConf())[ FD ]
Line_124 $$ int dropPoint = 0-->Line_128 $$ inputDirectoryFiles[dropPoint++] = name[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_39 $$ ++i[ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_58 $$ if ("-d".equals(args[i].toLowerCase()) || "-debug".equals(args[i].toLowerCase())) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_42 $$ ++i[ FD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_99 $$ sortTimeDists = newDistributionBlock()[ CD ]
Line_106 $$ final Path inputPath = new Path(inputFilename)-->Line_118 $$ FileSystem fs = inputPath.getFileSystem(getConf())[ FD ]
Line_114 $$ if (!inputIsDirectory) -->Line_115 $$ input = maybeUncompressedPath(inputPath)[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_15 $$ if ("-c".equals(args[i].toLowerCase()) || "-collect-prefixes".equals(args[i].toLowerCase())) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_28 $$ if ("-omit-task-details".equals(args[i].toLowerCase())) [ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_98 $$ shuffleTimeDists = newDistributionBlock()[ CD ]
Line_3 $$ Path jobTraceFilename = null-->Line_21 $$ jobTraceFilename = new Path(args[i])[ FD ]
Line_3 $$ Path jobTraceFilename = null-->Line_142 $$ jobTraceGen.init(jobTraceFilename, getConf())[ FD ]
Line_69 $$ i += 2-->Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) [ FD ]
Line_110 $$ for (int i = 0; i < 19; ++i) -->Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) [ FD ]
Line_19 $$ if ("-write-job-trace".equals(args[i].toLowerCase())) -->Line_20 $$ ++i[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_85 $$ if ("-v1".equals(args[i].toLowerCase())) [ CD ]
Line_69 $$ i += 2-->Line_110 $$ for (int i = 0; i < 19; ++i) [ FD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_5 $$ if (args.length == 0 || args[args.length - 1].charAt(0) == '-') [ CD ]
Line_114 $$ if (!inputIsDirectory) -->Line_135 $$ Arrays.sort(inputDirectoryFiles)[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_96 $$ reduceTimeSpreadDists = newDistributionBlock()[ CD ]
Line_4 $$ Path topologyFilename = null-->Line_34 $$ topologyFilename = new Path(args[i])[ FD ]
Line_114 $$ if (!inputIsDirectory) -->Line_121 $$ for (int i = 0; i < statuses.length; ++i) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_77 $$ if ("-runtimes".equals(args[i].toLowerCase())) [ CD ]
Line_126 $$ String name = inputDirectoryFiles[i]-->Line_127 $$ if (!(name.length() >= 4 && ".crc".equals(name.substring(name.length() - 4)))) [ FD ]
Line_49 $$ for (int j = 0; j < attemptTimesPercentiles.length; ++j) -->Line_50 $$ if (values.get(j) <= lastValue || values.get(j) >= 100) [ CD ]
Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) -->Line_126 $$ String name = inputDirectoryFiles[i][ CD ]
Line_121 $$ for (int i = 0; i < statuses.length; ++i) -->Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) [ FD ]
Line_49 $$ for (int j = 0; j < attemptTimesPercentiles.length; ++j) -->Line_53 $$ attemptTimesPercentiles[j] = values.get(j)[ FD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_69 $$ i += 2[ FD ]
Line_114 $$ if (!inputIsDirectory) -->Line_133 $$ System.arraycopy(inputDirectoryFiles, 0, new_inputDirectoryFiles, 0, dropPoint)[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_97 $$ mapTimeDists = newDistributionBlock()[ CD ]
Line_114 $$ if (!inputIsDirectory) -->Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) [ CD ]
Line_114 $$ if (!inputIsDirectory) -->Line_132 $$ String[] new_inputDirectoryFiles = new String[dropPoint][ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_108 $$ if (jobTraceFilename != null && attemptTimesPercentiles == null) [ CD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_55 $$ --i[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_107 $$ inputIsDirectory = pathIsDirectory(inputPath)[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_100 $$ reduceTimeDists = newDistributionBlock()[ CD ]
Line_108 $$ if (jobTraceFilename != null && attemptTimesPercentiles == null) -->Line_110 $$ for (int i = 0; i < 19; ++i) [ CD ]
Line_34 $$ topologyFilename = new Path(args[i])-->Line_145 $$ topologyGen.init(topologyFilename, getConf())[ FD ]
Line_62 $$ if ("-spreads".equals(args[i].toLowerCase())) -->Line_63 $$ int min = Integer.parseInt(args[i + 1])[ CD ]
Line_11 $$ if ("-h".equals(args[i].toLowerCase()) || "-help".equals(args[i].toLowerCase())) -->Line_12 $$ usage()[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_91 $$ runTimeDists = newDistributionBlock()[ CD ]
Line_114 $$ if (!inputIsDirectory) -->Line_118 $$ FileSystem fs = inputPath.getFileSystem(getConf())[ CD ]
Line_114 $$ if (!inputIsDirectory) -->Line_124 $$ int dropPoint = 0[ CD ]
Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()-->Line_47 $$ attemptTimesPercentiles = new int[values.size()][ FD ]
Line_62 $$ if ("-spreads".equals(args[i].toLowerCase())) -->Line_65 $$ if (min < max && min < 1000 && max < 1000) [ CD ]
Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()-->Line_44 $$ if (values.size() == 0) [ FD ]
Line_110 $$ for (int i = 0; i < 19; ++i) -->Line_111 $$ attemptTimesPercentiles[i] = (i + 1) * 5[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_148 $$ return 0[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_125 $$ for (int i = 0; i < inputDirectoryFiles.length; ++i) [ FD ]
Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()-->Line_41 $$ values.add(Integer.parseInt(args[i]))[ FD ]
Line_114 $$ if (!inputIsDirectory) -->Line_119 $$ FileStatus[] statuses = fs.listStatus(inputPath)[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_20 $$ ++i[ FD ]
Line_49 $$ for (int j = 0; j < attemptTimesPercentiles.length; ++j) -->Line_53 $$ attemptTimesPercentiles[j] = values.get(j)[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_93 $$ mapTimeSpreadDists = newDistributionBlock("map-time-spreads")[ CD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_40 $$ while (i < args.length && Character.isDigit(args[i].charAt(0))) [ CD ]
Line_124 $$ int dropPoint = 0-->Line_133 $$ System.arraycopy(inputDirectoryFiles, 0, new_inputDirectoryFiles, 0, dropPoint)[ FD ]
Line_49 $$ for (int j = 0; j < attemptTimesPercentiles.length; ++j) -->Line_50 $$ if (values.get(j) <= lastValue || values.get(j) >= 100) [ FD ]
Line_121 $$ for (int i = 0; i < statuses.length; ++i) -->Line_122 $$ inputDirectoryFiles[i] = statuses[i].getPath().getName()[ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_140 $$ if (jobTraceFilename != null) [ CD ]
Line_106 $$ final Path inputPath = new Path(inputFilename)-->Line_107 $$ inputIsDirectory = pathIsDirectory(inputPath)[ FD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_114 $$ if (!inputIsDirectory) [ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_62 $$ if ("-spreads".equals(args[i].toLowerCase())) [ CD ]
Line_69 $$ i += 2-->Line_55 $$ --i[ FD ]
Line_38 $$ ArrayList<Integer> values = new ArrayList<Integer>()-->Line_50 $$ if (values.get(j) <= lastValue || values.get(j) >= 100) [ FD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_24 $$ if ("-single-line-job-traces".equals(args[i].toLowerCase())) [ CD ]
Line_2 $$ private int initializeHadoopLogsAnalyzer(String[] args) throws FileNotFoundException, IOException -->Line_94 $$ shuffleTimeSpreadDists = newDistributionBlock()[ CD ]
Line_10 $$ for (int i = 0; i < args.length - (inputFilename == null ? 0 : 1); ++i) -->Line_73 $$ if ("-delays".equals(args[i].toLowerCase())) [ CD ]
Line_37 $$ if ("-job-digest-spectra".equals(args[i].toLowerCase())) -->Line_44 $$ if (values.size() == 0) [ CD ]
Line_40 $$ while (i < args.length && Character.isDigit(args[i].charAt(0))) -->Line_41 $$ values.add(Integer.parseInt(args[i]))[ CD ]
