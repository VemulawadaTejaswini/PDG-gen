Line_17 $$ FileStatus thisNodeFile = nodeFiles.next()-->Line_24 $$ String containerString = "\n\nContainer: " + key + " on " + thisNodeFile.getPath().getName()[ FD ]
Line_20 $$ DataInputStream valueStream-->Line_29 $$ LogReader.readAContainerLogsForALogType(valueStream, out)[ FD ]
Line_7 $$ RemoteIterator<FileStatus> nodeFiles-->Line_17 $$ FileStatus thisNodeFile = nodeFiles.next()[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)[ CD ]
Line_10 $$ nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), getConf()).listStatus(remoteAppLogDir)-->Line_17 $$ FileStatus thisNodeFile = nodeFiles.next()[ FD ]
Line_35 $$ valueStream = reader.next(key)-->Line_23 $$ while (valueStream != null) [ FD ]
Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)-->Line_10 $$ nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), getConf()).listStatus(remoteAppLogDir)[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_3 $$ Path remoteRootLogDir = new Path(getConf().get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR))[ CD ]
Line_3 $$ Path remoteRootLogDir = new Path(getConf().get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR))-->Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)[ FD ]
Line_10 $$ nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), getConf()).listStatus(remoteAppLogDir)-->Line_16 $$ while (nodeFiles.hasNext()) [ FD ]
Line_21 $$ LogKey key = new LogKey()-->Line_35 $$ valueStream = reader.next(key)[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_29 $$ LogReader.readAContainerLogsForALogType(valueStream, out)[ FD ]
Line_24 $$ String containerString = "\n\nContainer: " + key + " on " + thisNodeFile.getPath().getName()-->Line_26 $$ out.println(StringUtils.repeat("=", containerString.length()))[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_5 $$ String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf())[ CD ]
Line_21 $$ LogKey key = new LogKey()-->Line_34 $$ key = new LogKey()[ FD ]
Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)-->Line_9 $$ Path qualifiedLogDir = FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir)[ FD ]
Line_23 $$ while (valueStream != null) -->Line_26 $$ out.println(StringUtils.repeat("=", containerString.length()))[ CD ]
Line_5 $$ String logDirSuffix = LogAggregationUtils.getRemoteNodeLogDirSuffix(getConf())-->Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)[ FD ]
Line_7 $$ RemoteIterator<FileStatus> nodeFiles-->Line_16 $$ while (nodeFiles.hasNext()) [ FD ]
Line_23 $$ while (valueStream != null) -->Line_35 $$ valueStream = reader.next(key)[ CD ]
Line_18 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()))-->Line_22 $$ valueStream = reader.next(key)[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_41 $$ return 0[ CD ]
Line_21 $$ LogKey key = new LogKey()-->Line_22 $$ valueStream = reader.next(key)[ FD ]
Line_4 $$ String user = appOwner-->Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)[ FD ]
Line_34 $$ key = new LogKey()-->Line_35 $$ valueStream = reader.next(key)[ FD ]
Line_23 $$ while (valueStream != null) -->Line_24 $$ String containerString = "\n\nContainer: " + key + " on " + thisNodeFile.getPath().getName()[ CD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_16 $$ while (nodeFiles.hasNext()) [ CD ]
Line_20 $$ DataInputStream valueStream-->Line_23 $$ while (valueStream != null) [ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_25 $$ out.println(containerString)[ FD ]
Line_20 $$ DataInputStream valueStream-->Line_35 $$ valueStream = reader.next(key)[ FD ]
Line_18 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()))-->Line_38 $$ reader.close()[ FD ]
Line_22 $$ valueStream = reader.next(key)-->Line_35 $$ valueStream = reader.next(key)[ FD ]
Line_16 $$ while (nodeFiles.hasNext()) -->Line_18 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()))[ CD ]
Line_23 $$ while (valueStream != null) -->Line_34 $$ key = new LogKey()[ CD ]
Line_22 $$ valueStream = reader.next(key)-->Line_29 $$ LogReader.readAContainerLogsForALogType(valueStream, out)[ FD ]
Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)-->Line_12 $$ System.out.println("Logs not available at " + remoteAppLogDir.toString())[ FD ]
Line_22 $$ valueStream = reader.next(key)-->Line_23 $$ while (valueStream != null) [ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_6 $$ Path remoteAppLogDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, logDirSuffix)[ FD ]
Line_23 $$ while (valueStream != null) -->Line_25 $$ out.println(containerString)[ CD ]
Line_23 $$ while (valueStream != null) -->Line_27 $$ while (true) [ CD ]
Line_17 $$ FileStatus thisNodeFile = nodeFiles.next()-->Line_18 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()))[ FD ]
Line_18 $$ AggregatedLogFormat.LogReader reader = new AggregatedLogFormat.LogReader(getConf(), new Path(remoteAppLogDir, thisNodeFile.getPath().getName()))-->Line_35 $$ valueStream = reader.next(key)[ FD ]
Line_16 $$ while (nodeFiles.hasNext()) -->Line_17 $$ FileStatus thisNodeFile = nodeFiles.next()[ CD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_4 $$ String user = appOwner[ CD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_26 $$ out.println(StringUtils.repeat("=", containerString.length()))[ FD ]
Line_2 $$ public int dumpAllContainersLogs(ApplicationId appId, String appOwner, PrintStream out) throws IOException -->Line_7 $$ RemoteIterator<FileStatus> nodeFiles[ CD ]
Line_7 $$ RemoteIterator<FileStatus> nodeFiles-->Line_10 $$ nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), getConf()).listStatus(remoteAppLogDir)[ FD ]
Line_20 $$ DataInputStream valueStream-->Line_22 $$ valueStream = reader.next(key)[ FD ]
Line_9 $$ Path qualifiedLogDir = FileContext.getFileContext(getConf()).makeQualified(remoteAppLogDir)-->Line_10 $$ nodeFiles = FileContext.getFileContext(qualifiedLogDir.toUri(), getConf()).listStatus(remoteAppLogDir)[ FD ]
Line_24 $$ String containerString = "\n\nContainer: " + key + " on " + thisNodeFile.getPath().getName()-->Line_25 $$ out.println(containerString)[ FD ]
