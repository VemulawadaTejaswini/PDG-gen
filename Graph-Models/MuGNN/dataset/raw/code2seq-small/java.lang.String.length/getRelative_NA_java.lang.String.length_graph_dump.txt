Line_3 $$ baseRoot = normalize(baseRoot)-->Line_9 $$ if (baseRoot.length() != 0) [ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_11 $$ if (path.length() != 0) [ FD ]
Line_11 $$ if (path.length() != 0) -->Line_12 $$ return path.substring(1)[ CD ]
Line_8 $$ path = path.substring(prefix)-->Line_11 $$ if (path.length() != 0) [ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_10 $$ return normalize(revertRelativePath(baseRoot.substring(1)) + path)[ FD ]
Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)-->Line_8 $$ path = path.substring(prefix)[ FD ]
Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)-->Line_6 $$ if (prefix != 0) [ FD ]
Line_8 $$ path = path.substring(prefix)-->Line_16 $$ if (FileUtil.isAbsolute(path)) [ FD ]
Line_8 $$ path = path.substring(prefix)-->Line_12 $$ return path.substring(1)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)[ CD ]
Line_4 $$ path = normalize(path)-->Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_9 $$ if (baseRoot.length() != 0) [ FD ]
Line_7 $$ baseRoot = baseRoot.substring(prefix)-->Line_9 $$ if (baseRoot.length() != 0) [ FD ]
Line_4 $$ path = normalize(path)-->Line_12 $$ return path.substring(1)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_19 $$ return normalize(revertRelativePath(baseRoot) + "/" + path)[ FD ]
Line_6 $$ if (prefix != 0) -->Line_16 $$ if (FileUtil.isAbsolute(path)) [ CD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_6 $$ if (prefix != 0) [ CD ]
Line_4 $$ path = normalize(path)-->Line_16 $$ if (FileUtil.isAbsolute(path)) [ FD ]
Line_9 $$ if (baseRoot.length() != 0) -->Line_10 $$ return normalize(revertRelativePath(baseRoot.substring(1)) + path)[ CD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_3 $$ baseRoot = normalize(baseRoot)[ FD ]
Line_4 $$ path = normalize(path)-->Line_8 $$ path = path.substring(prefix)[ FD ]
Line_3 $$ baseRoot = normalize(baseRoot)-->Line_7 $$ baseRoot = baseRoot.substring(prefix)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_16 $$ if (FileUtil.isAbsolute(path)) [ FD ]
Line_3 $$ baseRoot = normalize(baseRoot)-->Line_19 $$ return normalize(revertRelativePath(baseRoot) + "/" + path)[ FD ]
Line_7 $$ baseRoot = baseRoot.substring(prefix)-->Line_10 $$ return normalize(revertRelativePath(baseRoot.substring(1)) + path)[ FD ]
Line_3 $$ baseRoot = normalize(baseRoot)-->Line_10 $$ return normalize(revertRelativePath(baseRoot.substring(1)) + path)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_8 $$ path = path.substring(prefix)[ FD ]
Line_9 $$ if (baseRoot.length() != 0) -->Line_11 $$ if (path.length() != 0) [ CD ]
Line_4 $$ path = normalize(path)-->Line_11 $$ if (path.length() != 0) [ FD ]
Line_16 $$ if (FileUtil.isAbsolute(path)) -->Line_17 $$ return path[ CD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_7 $$ baseRoot = baseRoot.substring(prefix)[ FD ]
Line_11 $$ if (path.length() != 0) -->Line_14 $$ return "."[ CD ]
Line_6 $$ if (prefix != 0) -->Line_8 $$ path = path.substring(prefix)[ CD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_12 $$ return path.substring(1)[ FD ]
Line_6 $$ if (prefix != 0) -->Line_7 $$ baseRoot = baseRoot.substring(prefix)[ CD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_4 $$ path = normalize(path)[ CD ]
Line_7 $$ baseRoot = baseRoot.substring(prefix)-->Line_19 $$ return normalize(revertRelativePath(baseRoot) + "/" + path)[ FD ]
Line_6 $$ if (prefix != 0) -->Line_9 $$ if (baseRoot.length() != 0) [ CD ]
Line_16 $$ if (FileUtil.isAbsolute(path)) -->Line_19 $$ return normalize(revertRelativePath(baseRoot) + "/" + path)[ CD ]
Line_3 $$ baseRoot = normalize(baseRoot)-->Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)[ FD ]
Line_5 $$ int prefix = findCommonPathPrefixLength(baseRoot, path)-->Line_7 $$ baseRoot = baseRoot.substring(prefix)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_4 $$ path = normalize(path)[ FD ]
Line_2 $$ public static String getRelative(String baseRoot, String path) -->Line_3 $$ baseRoot = normalize(baseRoot)[ CD ]
