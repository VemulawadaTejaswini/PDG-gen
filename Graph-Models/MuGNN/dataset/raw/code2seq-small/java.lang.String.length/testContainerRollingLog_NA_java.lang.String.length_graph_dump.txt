Line_63 $$ if (foundAppMaster) -->Line_64 $$ Assert.assertSame("Unexpected number of AM sylog* files", sleepConf.getInt(MRJobConfig.MR_AM_LOG_BACKUPS, 0) + 1, sysSiblings.length)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_23 $$ final ApplicationId appID = jobId.getAppId()[ CD ]
Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)-->Line_21 $$ job.waitForCompletion(true)[ FD ]
Line_10 $$ final long userLogKb = 4-->Line_11 $$ sleepConf.setLong(MRJobConfig.TASK_USERLOG_LIMIT, userLogKb)[ FD ]
Line_56 $$ final FileStatus[] sysSiblings = localFs.globStatus(new Path(containerPathComponent, TaskLog.LogName.SYSLOG + "*"))-->Line_57 $$ Arrays.sort(sysSiblings)[ FD ]
Line_63 $$ if (foundAppMaster) -->Line_65 $$ Assert.assertTrue("AM syslog.1 length kb should be >= " + amLogKb, sysSiblings[1].getLen() >= amLogKb * 1024)[ CD ]
Line_63 $$ if (foundAppMaster) -->Line_67 $$ Assert.assertSame("Unexpected number of MR task sylog* files", sleepConf.getInt(MRJobConfig.TASK_LOG_BACKUPS, 0) + 1, sysSiblings.length)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_74 $$ if (sleepConf.getBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)) [ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_16 $$ sleepConf.setInt(MRJobConfig.MR_AM_LOG_BACKUPS, 7)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)[ CD ]
Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) -->Line_4 $$ LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.")[ CD ]
Line_54 $$ foundAppMaster = (cid.getId() == 1)-->Line_52 $$ if (!foundAppMaster) [ FD ]
Line_58 $$ if (foundAppMaster) -->Line_59 $$ numAppMasters++[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_21 $$ job.waitForCompletion(true)[ CD ]
Line_74 $$ if (sleepConf.getBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)) -->Line_75 $$ Assert.assertEquals("MapTask log with uber found!", 0, numMapTasks)[ CD ]
Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) -->Line_5 $$ return[ CD ]
Line_27 $$ pollElapsed += 1000-->Line_31 $$ if (pollElapsed >= 60000) [ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_22 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())[ CD ]
Line_49 $$ for (FileStatus slog : syslogs) -->Line_51 $$ final Path containerPathComponent = slog.getPath().getParent()[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_3 $$ if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) [ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_16 $$ sleepConf.setInt(MRJobConfig.MR_AM_LOG_BACKUPS, 7)[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_9 $$ sleepConf.set(MRJobConfig.MAP_LOG_LEVEL, Level.ALL.toString())[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_14 $$ final long amLogKb = 7[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_12 $$ sleepConf.setInt(MRJobConfig.TASK_LOG_BACKUPS, 3)[ CD ]
Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)-->Line_50 $$ boolean foundAppMaster = job.isUber()[ FD ]
Line_42 $$ int numMapTasks = 0-->Line_75 $$ Assert.assertEquals("MapTask log with uber found!", 0, numMapTasks)[ FD ]
Line_44 $$ final Configuration nmConf = mrCluster.getNodeManager(i).getConfig()-->Line_45 $$ for (String logDir : nmConf.getTrimmedStrings(YarnConfiguration.NM_LOG_DIRS)) [ FD ]
Line_41 $$ int numAppMasters = 0-->Line_73 $$ Assert.assertEquals("No AppMaster log found!", 1, numAppMasters)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_10 $$ final long userLogKb = 4[ CD ]
Line_7 $$ final SleepJob sleepJob = new SleepJob()-->Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)[ FD ]
Line_63 $$ if (foundAppMaster) -->Line_68 $$ Assert.assertTrue("MR syslog.1 length kb should be >= " + userLogKb, sysSiblings[1].getLen() >= userLogKb * 1024)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_43 $$ for (int i = 0; i < NUM_NODE_MGRS; i++) [ CD ]
Line_53 $$ final ContainerId cid = ConverterUtils.toContainerId(containerPathComponent.getName())-->Line_54 $$ foundAppMaster = (cid.getId() == 1)[ FD ]
Line_42 $$ int numMapTasks = 0-->Line_61 $$ numMapTasks++[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_20 $$ job.addFileToClassPath(APP_JAR)[ CD ]
Line_46 $$ final Path absSyslogGlob = new Path(logDir + Path.SEPARATOR + syslogGlob)-->Line_48 $$ final FileStatus[] syslogs = localFs.globStatus(absSyslogGlob)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_42 $$ int numMapTasks = 0[ CD ]
Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)-->Line_20 $$ job.addFileToClassPath(APP_JAR)[ FD ]
Line_24 $$ int pollElapsed = 0-->Line_31 $$ if (pollElapsed >= 60000) [ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_7 $$ final SleepJob sleepJob = new SleepJob()[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_38 $$ final String appIdSuffix = appIdStr.substring("application_".length(), appIdStr.length())[ CD ]
Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)-->Line_19 $$ job.setJarByClass(SleepJob.class)[ FD ]
Line_43 $$ for (int i = 0; i < NUM_NODE_MGRS; i++) -->Line_44 $$ final Configuration nmConf = mrCluster.getNodeManager(i).getConfig()[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_37 $$ final String appIdStr = appID.toString()[ CD ]
Line_25 $$ while (true) -->Line_27 $$ pollElapsed += 1000[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_11 $$ sleepConf.setLong(MRJobConfig.TASK_USERLOG_LIMIT, userLogKb)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_17 $$ sleepJob.setConf(sleepConf)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_24 $$ int pollElapsed = 0[ CD ]
Line_23 $$ final ApplicationId appID = jobId.getAppId()-->Line_28 $$ if (TERMINAL_RM_APP_STATES.contains(mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())) [ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_9 $$ sleepConf.set(MRJobConfig.MAP_LOG_LEVEL, Level.ALL.toString())[ CD ]
Line_7 $$ final SleepJob sleepJob = new SleepJob()-->Line_17 $$ sleepJob.setConf(sleepConf)[ FD ]
Line_25 $$ while (true) -->Line_26 $$ Thread.sleep(1000)[ CD ]
Line_22 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())-->Line_23 $$ final ApplicationId appID = jobId.getAppId()[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_39 $$ final String containerGlob = "container_" + appIdSuffix + "_*_*"[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_40 $$ final String syslogGlob = appIdStr + Path.SEPARATOR + containerGlob + Path.SEPARATOR + TaskLog.LogName.SYSLOG[ CD ]
Line_18 $$ final Job job = sleepJob.createJob(1, 0, 1L, 100, 0L, 0)-->Line_22 $$ final JobId jobId = TypeConverter.toYarn(job.getJobID())[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_15 $$ sleepConf.setLong(MRJobConfig.MR_AM_LOG_KB, amLogKb)[ CD ]
Line_74 $$ if (sleepConf.getBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)) -->Line_77 $$ Assert.assertEquals("No MapTask log found!", 1, numMapTasks)[ CD ]
Line_42 $$ int numMapTasks = 0-->Line_77 $$ Assert.assertEquals("No MapTask log found!", 1, numMapTasks)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_73 $$ Assert.assertEquals("No AppMaster log found!", 1, numAppMasters)[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_15 $$ sleepConf.setLong(MRJobConfig.MR_AM_LOG_KB, amLogKb)[ FD ]
Line_41 $$ int numAppMasters = 0-->Line_59 $$ numAppMasters++[ FD ]
Line_52 $$ if (!foundAppMaster) -->Line_54 $$ foundAppMaster = (cid.getId() == 1)[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_12 $$ sleepConf.setInt(MRJobConfig.TASK_LOG_BACKUPS, 3)[ FD ]
Line_31 $$ if (pollElapsed >= 60000) -->Line_32 $$ LOG.warn("application did not reach terminal state within 60 seconds")[ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_64 $$ Assert.assertSame("Unexpected number of AM sylog* files", sleepConf.getInt(MRJobConfig.MR_AM_LOG_BACKUPS, 0) + 1, sysSiblings.length)[ FD ]
Line_52 $$ if (!foundAppMaster) -->Line_53 $$ final ContainerId cid = ConverterUtils.toContainerId(containerPathComponent.getName())[ CD ]
Line_50 $$ boolean foundAppMaster = job.isUber()-->Line_52 $$ if (!foundAppMaster) [ FD ]
Line_25 $$ while (true) -->Line_28 $$ if (TERMINAL_RM_APP_STATES.contains(mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())) [ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_19 $$ job.setJarByClass(SleepJob.class)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_25 $$ while (true) [ CD ]
Line_58 $$ if (foundAppMaster) -->Line_61 $$ numMapTasks++[ CD ]
Line_23 $$ final ApplicationId appID = jobId.getAppId()-->Line_37 $$ final String appIdStr = appID.toString()[ FD ]
Line_50 $$ boolean foundAppMaster = job.isUber()-->Line_54 $$ foundAppMaster = (cid.getId() == 1)[ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_13 $$ sleepConf.set(MRJobConfig.MR_AM_LOG_LEVEL, Level.ALL.toString())[ CD ]
Line_51 $$ final Path containerPathComponent = slog.getPath().getParent()-->Line_53 $$ final ContainerId cid = ConverterUtils.toContainerId(containerPathComponent.getName())[ FD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_74 $$ if (sleepConf.getBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)) [ FD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_11 $$ sleepConf.setLong(MRJobConfig.TASK_USERLOG_LIMIT, userLogKb)[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_36 $$ Assert.assertEquals(RMAppState.FINISHED, mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())[ CD ]
Line_2 $$ public void testContainerRollingLog() throws IOException, InterruptedException, ClassNotFoundException -->Line_41 $$ int numAppMasters = 0[ CD ]
Line_25 $$ while (true) -->Line_31 $$ if (pollElapsed >= 60000) [ CD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_13 $$ sleepConf.set(MRJobConfig.MR_AM_LOG_LEVEL, Level.ALL.toString())[ FD ]
Line_23 $$ final ApplicationId appID = jobId.getAppId()-->Line_36 $$ Assert.assertEquals(RMAppState.FINISHED, mrCluster.getResourceManager().getRMContext().getRMApps().get(appID).getState())[ FD ]
Line_43 $$ for (int i = 0; i < NUM_NODE_MGRS; i++) -->Line_44 $$ final Configuration nmConf = mrCluster.getNodeManager(i).getConfig()[ FD ]
Line_24 $$ int pollElapsed = 0-->Line_27 $$ pollElapsed += 1000[ FD ]
Line_37 $$ final String appIdStr = appID.toString()-->Line_38 $$ final String appIdSuffix = appIdStr.substring("application_".length(), appIdStr.length())[ FD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_67 $$ Assert.assertSame("Unexpected number of MR task sylog* files", sleepConf.getInt(MRJobConfig.TASK_LOG_BACKUPS, 0) + 1, sysSiblings.length)[ FD ]
Line_8 $$ final JobConf sleepConf = new JobConf(mrCluster.getConfig())-->Line_17 $$ sleepJob.setConf(sleepConf)[ FD ]
Line_14 $$ final long amLogKb = 7-->Line_15 $$ sleepConf.setLong(MRJobConfig.MR_AM_LOG_KB, amLogKb)[ FD ]
