Line_25 $$ final StringTokenizer customOptsTokenizer = new StringTokenizer(customArgs, " \t\r\n")-->Line_29 $$ final String userOption = customOptsTokenizer.nextToken()[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_6 $$ final JpsJavaCompilerConfiguration compilerConfig = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_3 $$ final List<String> options = new ArrayList<String>()[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_23 $$ final String customArgs = compilerOptions.ADDITIONAL_OPTIONS_STRING[ CD ]
Line_28 $$ while (customOptsTokenizer.hasMoreTokens()) -->Line_35 $$ if (skip) [ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_39 $$ USER_DEFINED_BYTECODE_TARGET.set(context, userOption)[ FD ]
Line_25 $$ final StringTokenizer customOptsTokenizer = new StringTokenizer(customArgs, " \t\r\n")-->Line_28 $$ while (customOptsTokenizer.hasMoreTokens()) [ FD ]
Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()-->Line_11 $$ if (compilerOptions.DEPRECATION) [ FD ]
Line_27 $$ boolean targetOptionFound = false-->Line_38 $$ targetOptionFound = false[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_53 $$ JAVAC_OPTIONS.set(context, options)[ FD ]
Line_5 $$ final JpsProject project = context.getProjectDescriptor().getProject()-->Line_6 $$ final JpsJavaCompilerConfiguration compilerConfig = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ FD ]
Line_6 $$ final JpsJavaCompilerConfiguration compilerConfig = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)-->Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_52 $$ compilingTool.processCompilerOptions(context, options)[ FD ]
Line_24 $$ if (customArgs != null) -->Line_28 $$ while (customOptsTokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_5 $$ final JpsProject project = context.getProjectDescriptor().getProject()[ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_43 $$ if (userOption.startsWith("-J-")) [ FD ]
Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()-->Line_17 $$ if (compilerOptions instanceof EclipseCompilerOptions) [ FD ]
Line_37 $$ if (targetOptionFound) -->Line_39 $$ USER_DEFINED_BYTECODE_TARGET.set(context, userOption)[ CD ]
Line_23 $$ final String customArgs = compilerOptions.ADDITIONAL_OPTIONS_STRING-->Line_24 $$ if (customArgs != null) [ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_14 $$ if (compilerOptions.GENERATE_NO_WARNINGS) [ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_30 $$ if (FILTERED_OPTIONS.contains(userOption)) [ FD ]
Line_14 $$ if (compilerOptions.GENERATE_NO_WARNINGS) -->Line_15 $$ options.add("-nowarn")[ CD ]
Line_18 $$ final EclipseCompilerOptions eclipseOptions = (EclipseCompilerOptions) compilerOptions-->Line_19 $$ if (eclipseOptions.PROCEED_ON_ERROR) [ FD ]
Line_8 $$ if (compilerOptions.DEBUGGING_INFO) -->Line_9 $$ options.add("-g")[ CD ]
Line_17 $$ if (compilerOptions instanceof EclipseCompilerOptions) -->Line_19 $$ if (eclipseOptions.PROCEED_ON_ERROR) [ CD ]
Line_26 $$ boolean skip = false-->Line_36 $$ skip = false[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_17 $$ if (compilerOptions instanceof EclipseCompilerOptions) [ CD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_20 $$ options.add("-proceedOnError")[ FD ]
Line_24 $$ if (customArgs != null) -->Line_25 $$ final StringTokenizer customOptsTokenizer = new StringTokenizer(customArgs, " \t\r\n")[ CD ]
Line_24 $$ if (customArgs != null) -->Line_27 $$ boolean targetOptionFound = false[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_5 $$ final JpsProject project = context.getProjectDescriptor().getProject()[ FD ]
Line_27 $$ boolean targetOptionFound = false-->Line_32 $$ targetOptionFound = "-target".equals(userOption)[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_52 $$ compilingTool.processCompilerOptions(context, options)[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_54 $$ JAVAC_VM_OPTIONS.set(context, vmOptions)[ FD ]
Line_30 $$ if (FILTERED_OPTIONS.contains(userOption)) -->Line_32 $$ targetOptionFound = "-target".equals(userOption)[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_24 $$ if (customArgs != null) [ CD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_15 $$ options.add("-nowarn")[ FD ]
Line_24 $$ if (customArgs != null) -->Line_26 $$ boolean skip = false[ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_44 $$ vmOptions.add(userOption.substring("-J".length()))[ FD ]
Line_35 $$ if (skip) -->Line_37 $$ if (targetOptionFound) [ CD ]
Line_30 $$ if (FILTERED_OPTIONS.contains(userOption)) -->Line_31 $$ skip = true[ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_53 $$ JAVAC_OPTIONS.set(context, options)[ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_42 $$ if (!FILTERED_SINGLE_OPTIONS.contains(userOption)) [ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_8 $$ if (compilerOptions.DEBUGGING_INFO) [ CD ]
Line_28 $$ while (customOptsTokenizer.hasMoreTokens()) -->Line_30 $$ if (FILTERED_OPTIONS.contains(userOption)) [ CD ]
Line_4 $$ final List<String> vmOptions = new ArrayList<String>()-->Line_54 $$ JAVAC_VM_OPTIONS.set(context, vmOptions)[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()[ CD ]
Line_32 $$ targetOptionFound = "-target".equals(userOption)-->Line_38 $$ targetOptionFound = false[ FD ]
Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()-->Line_8 $$ if (compilerOptions.DEBUGGING_INFO) [ FD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_53 $$ JAVAC_OPTIONS.set(context, options)[ FD ]
Line_31 $$ skip = true-->Line_36 $$ skip = false[ FD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_46 $$ options.add(userOption)[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_54 $$ JAVAC_VM_OPTIONS.set(context, vmOptions)[ CD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_9 $$ options.add("-g")[ FD ]
Line_35 $$ if (skip) -->Line_36 $$ skip = false[ CD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_52 $$ compilingTool.processCompilerOptions(context, options)[ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_11 $$ if (compilerOptions.DEPRECATION) [ CD ]
Line_19 $$ if (eclipseOptions.PROCEED_ON_ERROR) -->Line_20 $$ options.add("-proceedOnError")[ CD ]
Line_26 $$ boolean skip = false-->Line_31 $$ skip = true[ FD ]
Line_42 $$ if (!FILTERED_SINGLE_OPTIONS.contains(userOption)) -->Line_43 $$ if (userOption.startsWith("-J-")) [ CD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_4 $$ final List<String> vmOptions = new ArrayList<String>()[ CD ]
Line_4 $$ final List<String> vmOptions = new ArrayList<String>()-->Line_44 $$ vmOptions.add(userOption.substring("-J".length()))[ FD ]
Line_17 $$ if (compilerOptions instanceof EclipseCompilerOptions) -->Line_18 $$ final EclipseCompilerOptions eclipseOptions = (EclipseCompilerOptions) compilerOptions[ CD ]
Line_37 $$ if (targetOptionFound) -->Line_38 $$ targetOptionFound = false[ CD ]
Line_11 $$ if (compilerOptions.DEPRECATION) -->Line_12 $$ options.add("-deprecation")[ CD ]
Line_28 $$ while (customOptsTokenizer.hasMoreTokens()) -->Line_29 $$ final String userOption = customOptsTokenizer.nextToken()[ CD ]
Line_43 $$ if (userOption.startsWith("-J-")) -->Line_44 $$ vmOptions.add(userOption.substring("-J".length()))[ CD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_46 $$ options.add(userOption)[ FD ]
Line_29 $$ final String userOption = customOptsTokenizer.nextToken()-->Line_32 $$ targetOptionFound = "-target".equals(userOption)[ FD ]
Line_35 $$ if (skip) -->Line_42 $$ if (!FILTERED_SINGLE_OPTIONS.contains(userOption)) [ CD ]
Line_43 $$ if (userOption.startsWith("-J-")) -->Line_46 $$ options.add(userOption)[ CD ]
Line_3 $$ final List<String> options = new ArrayList<String>()-->Line_12 $$ options.add("-deprecation")[ FD ]
Line_7 $$ final JpsJavaCompilerOptions compilerOptions = compilerConfig.getCurrentCompilerOptions()-->Line_14 $$ if (compilerOptions.GENERATE_NO_WARNINGS) [ FD ]
Line_2 $$ private static void loadCommonJavacOptions(@NotNull CompileContext context, @NotNull JavaCompilingTool compilingTool) -->Line_39 $$ USER_DEFINED_BYTECODE_TARGET.set(context, userOption)[ FD ]
