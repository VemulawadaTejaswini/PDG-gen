Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)-->Line_17 $$ if (ranges != null) [ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_21 $$ if (nameIndex + i + 1 == name.length() || patternIndex + i + 1 < myPattern.length && !isLowerCase[patternIndex + i + 1]) [ FD ]
Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)-->Line_34 $$ if (ranges != null) [ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_8 $$ boolean ignoreCase = myOptions != NameUtil.MatchingCaseSensitivity.ALL[ CD ]
Line_7 $$ int i = 1-->Line_12 $$ if (i < minFragment) [ FD ]
Line_33 $$ FList<TextRange> ranges = isWildcard(patternIndex + i) ? matchWildcards(name, patternIndex + i, nameIndex + i, matchingState) : matchSkippingWords(name, patternIndex + i, nameIndex + i, false, matchingState)-->Line_35 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_32 $$ while (i >= minFragment || isWildcard(patternIndex + i)) [ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_30 $$ return FList.<TextRange>emptyList().prepend(TextRange.from(nameIndex, i))[ FD ]
Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) -->Line_12 $$ if (i < minFragment) [ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_9 $$ while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i], patternIndex + i, name.charAt(nameIndex + i), ignoreCase)) [ FD ]
Line_29 $$ if (patternIndex + i >= myPattern.length) -->Line_30 $$ return FList.<TextRange>emptyList().prepend(TextRange.from(nameIndex, i))[ CD ]
Line_9 $$ while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i], patternIndex + i, name.charAt(nameIndex + i), ignoreCase)) -->Line_27 $$ i++[ CD ]
Line_6 $$ int minFragment = isPatternChar(patternIndex - 1, '*') && !isWildcard(patternIndex + 1) && Character.isLetterOrDigit(name.charAt(nameIndex)) && !isWordStart(name, nameIndex) ? 3 : 1-->Line_12 $$ if (i < minFragment) [ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_3 $$ if (!isFirstCharMatching(name, nameIndex, patternIndex)) [ CD ]
Line_32 $$ while (i >= minFragment || isWildcard(patternIndex + i)) -->Line_37 $$ i--[ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)[ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_9 $$ while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i], patternIndex + i, name.charAt(nameIndex + i), ignoreCase)) [ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_6 $$ int minFragment = isPatternChar(patternIndex - 1, '*') && !isWildcard(patternIndex + 1) && Character.isLetterOrDigit(name.charAt(nameIndex)) && !isWordStart(name, nameIndex) ? 3 : 1[ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_15 $$ int nextWordStart = indexOfWordStart(name, patternIndex + i, nameIndex + i)[ FD ]
Line_15 $$ int nextWordStart = indexOfWordStart(name, patternIndex + i, nameIndex + i)-->Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)[ FD ]
Line_21 $$ if (nameIndex + i + 1 == name.length() || patternIndex + i + 1 < myPattern.length && !isLowerCase[patternIndex + i + 1]) -->Line_22 $$ return null[ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_35 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_34 $$ if (ranges != null) -->Line_35 $$ return prependRange(ranges, nameIndex, i)[ CD ]
Line_9 $$ while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i], patternIndex + i, name.charAt(nameIndex + i), ignoreCase)) -->Line_10 $$ if (isUpperCase[patternIndex + i] && myHasHumps) [ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_6 $$ int minFragment = isPatternChar(patternIndex - 1, '*') && !isWildcard(patternIndex + 1) && Character.isLetterOrDigit(name.charAt(nameIndex)) && !isWordStart(name, nameIndex) ? 3 : 1[ FD ]
Line_7 $$ int i = 1-->Line_18 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_7 $$ int i = 1-->Line_37 $$ i--[ FD ]
Line_7 $$ int i = 1-->Line_35 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) -->Line_17 $$ if (ranges != null) [ CD ]
Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)-->Line_18 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_8 $$ boolean ignoreCase = myOptions != NameUtil.MatchingCaseSensitivity.ALL-->Line_9 $$ while (nameIndex + i < name.length() && patternIndex + i < myPattern.length && charEquals(myPattern[patternIndex + i], patternIndex + i, name.charAt(nameIndex + i), ignoreCase)) [ FD ]
Line_32 $$ while (i >= minFragment || isWildcard(patternIndex + i)) -->Line_34 $$ if (ranges != null) [ CD ]
Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) -->Line_20 $$ if (i > 1 && isUpperCase[patternIndex + i - 1] && isUpperCase[patternIndex + i - 2]) [ CD ]
Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)-->Line_35 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_20 $$ if (i > 1 && isUpperCase[patternIndex + i - 1] && isUpperCase[patternIndex + i - 2]) -->Line_21 $$ if (nameIndex + i + 1 == name.length() || patternIndex + i + 1 < myPattern.length && !isLowerCase[patternIndex + i + 1]) [ CD ]
Line_10 $$ if (isUpperCase[patternIndex + i] && myHasHumps) -->Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) [ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_39 $$ return null[ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_7 $$ int i = 1[ CD ]
Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) -->Line_16 $$ FList<TextRange> ranges = matchWildcards(name, patternIndex + i, nextWordStart, matchingState)[ CD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_3 $$ if (!isFirstCharMatching(name, nameIndex, patternIndex)) [ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_29 $$ if (patternIndex + i >= myPattern.length) [ CD ]
Line_7 $$ int i = 1-->Line_27 $$ i++[ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) [ FD ]
Line_33 $$ FList<TextRange> ranges = isWildcard(patternIndex + i) ? matchWildcards(name, patternIndex + i, nameIndex + i, matchingState) : matchSkippingWords(name, patternIndex + i, nameIndex + i, false, matchingState)-->Line_34 $$ if (ranges != null) [ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_18 $$ return prependRange(ranges, nameIndex, i)[ FD ]
Line_2 $$ private FList<TextRange> doMatchFragments(String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_33 $$ FList<TextRange> ranges = isWildcard(patternIndex + i) ? matchWildcards(name, patternIndex + i, nameIndex + i, matchingState) : matchSkippingWords(name, patternIndex + i, nameIndex + i, false, matchingState)[ FD ]
Line_17 $$ if (ranges != null) -->Line_18 $$ return prependRange(ranges, nameIndex, i)[ CD ]
Line_11 $$ if (myPattern[patternIndex + i] != name.charAt(nameIndex + i)) -->Line_15 $$ int nextWordStart = indexOfWordStart(name, patternIndex + i, nameIndex + i)[ CD ]
Line_12 $$ if (i < minFragment) -->Line_13 $$ return null[ CD ]
Line_32 $$ while (i >= minFragment || isWildcard(patternIndex + i)) -->Line_33 $$ FList<TextRange> ranges = isWildcard(patternIndex + i) ? matchWildcards(name, patternIndex + i, nameIndex + i, matchingState) : matchSkippingWords(name, patternIndex + i, nameIndex + i, false, matchingState)[ CD ]
Line_3 $$ if (!isFirstCharMatching(name, nameIndex, patternIndex)) -->Line_4 $$ return null[ CD ]
Line_7 $$ int i = 1-->Line_30 $$ return FList.<TextRange>emptyList().prepend(TextRange.from(nameIndex, i))[ FD ]
