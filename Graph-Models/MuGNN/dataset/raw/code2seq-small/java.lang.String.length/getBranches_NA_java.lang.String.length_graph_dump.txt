Line_6 $$ boolean remoteOnly = false-->Line_12 $$ remoteOnly = true[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_4 $$ handler.setSilent(true)[ CD ]
Line_7 $$ if (remoteWanted && localWanted) -->Line_8 $$ handler.addParameters("-a")[ CD ]
Line_14 $$ if (containingCommit != null) -->Line_15 $$ handler.addParameters("--contains", containingCommit)[ CD ]
Line_29 $$ Collection<String> branches = ContainerUtil.newArrayList()-->Line_52 $$ branches.add(b)[ FD ]
Line_36 $$ String remotePrefix = null-->Line_40 $$ remotePrefix = GitBranch.REFS_REMOTES_PREFIX[ FD ]
Line_32 $$ b = b.substring(2).trim()-->Line_52 $$ branches.add(b)[ FD ]
Line_36 $$ String remotePrefix = null-->Line_45 $$ b = b.substring(remotePrefix.length())[ FD ]
Line_32 $$ b = b.substring(2).trim()-->Line_47 $$ final int idx = b.indexOf("HEAD ->")[ FD ]
Line_36 $$ String remotePrefix = null-->Line_38 $$ remotePrefix = "remotes/"[ FD ]
Line_31 $$ for (String b : split) -->Line_39 $$ if (b.startsWith(GitBranch.REFS_REMOTES_PREFIX)) [ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_7 $$ if (remoteWanted && localWanted) [ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)[ CD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_18 $$ if (output.trim().length() == 0) [ CD ]
Line_9 $$ remoteOnly = false-->Line_12 $$ remoteOnly = true[ FD ]
Line_7 $$ if (remoteWanted && localWanted) -->Line_9 $$ remoteOnly = false[ CD ]
Line_10 $$ if (remoteWanted) -->Line_11 $$ handler.addParameters("-r")[ CD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_15 $$ handler.addParameters("--contains", containingCommit)[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_14 $$ if (containingCommit != null) [ CD ]
Line_37 $$ if (b.startsWith("remotes/")) -->Line_38 $$ remotePrefix = "remotes/"[ CD ]
Line_10 $$ if (remoteWanted) -->Line_12 $$ remoteOnly = true[ CD ]
Line_43 $$ if (isRemote) -->Line_47 $$ final int idx = b.indexOf("HEAD ->")[ CD ]
Line_40 $$ remotePrefix = GitBranch.REFS_REMOTES_PREFIX-->Line_45 $$ b = b.substring(remotePrefix.length())[ FD ]
Line_6 $$ boolean remoteOnly = false-->Line_44 $$ if (!remoteOnly) [ FD ]
Line_44 $$ if (!remoteOnly) -->Line_45 $$ b = b.substring(remotePrefix.length())[ CD ]
Line_37 $$ if (b.startsWith("remotes/")) -->Line_39 $$ if (b.startsWith(GitBranch.REFS_REMOTES_PREFIX)) [ CD ]
Line_18 $$ if (output.trim().length() == 0) -->Line_19 $$ String head[ CD ]
Line_7 $$ if (remoteWanted && localWanted) -->Line_10 $$ if (remoteWanted) [ CD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_17 $$ final String output = handler.run()[ CD ]
Line_32 $$ b = b.substring(2).trim()-->Line_33 $$ if (b.equals(NO_BRANCH_NAME)) [ FD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_4 $$ handler.setSilent(true)[ FD ]
Line_39 $$ if (b.startsWith(GitBranch.REFS_REMOTES_PREFIX)) -->Line_40 $$ remotePrefix = GitBranch.REFS_REMOTES_PREFIX[ CD ]
Line_9 $$ remoteOnly = false-->Line_44 $$ if (!remoteOnly) [ FD ]
Line_45 $$ b = b.substring(remotePrefix.length())-->Line_47 $$ final int idx = b.indexOf("HEAD ->")[ FD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_8 $$ handler.addParameters("-a")[ FD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_15 $$ handler.addParameters("--contains", containingCommit)[ FD ]
Line_17 $$ final String output = handler.run()-->Line_30 $$ final String[] split = output.split("\n")[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_14 $$ if (containingCommit != null) [ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_6 $$ boolean remoteOnly = false[ CD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_29 $$ Collection<String> branches = ContainerUtil.newArrayList()[ CD ]
Line_32 $$ b = b.substring(2).trim()-->Line_37 $$ if (b.startsWith("remotes/")) [ FD ]
Line_31 $$ for (String b : split) -->Line_52 $$ branches.add(b)[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_54 $$ return branches[ CD ]
Line_21 $$ head = FileUtil.loadFile(new File(root.getPath(), GitRepositoryFiles.GIT_HEAD), CharsetToolkit.UTF8_CHARSET).trim()-->Line_23 $$ return head.startsWith(prefix) ? Collections.singletonList(head.substring(prefix.length())) : Collections.<String>emptyList()[ FD ]
Line_32 $$ b = b.substring(2).trim()-->Line_45 $$ b = b.substring(remotePrefix.length())[ FD ]
Line_47 $$ final int idx = b.indexOf("HEAD ->")-->Line_48 $$ if (idx > 0) [ FD ]
Line_45 $$ b = b.substring(remotePrefix.length())-->Line_52 $$ branches.add(b)[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_21 $$ head = FileUtil.loadFile(new File(root.getPath(), GitRepositoryFiles.GIT_HEAD), CharsetToolkit.UTF8_CHARSET).trim()[ FD ]
Line_43 $$ if (isRemote) -->Line_44 $$ if (!remoteOnly) [ CD ]
Line_43 $$ if (isRemote) -->Line_48 $$ if (idx > 0) [ CD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_11 $$ handler.addParameters("-r")[ FD ]
Line_31 $$ for (String b : split) -->Line_32 $$ b = b.substring(2).trim()[ FD ]
Line_31 $$ for (String b : split) -->Line_33 $$ if (b.equals(NO_BRANCH_NAME)) [ FD ]
Line_31 $$ for (String b : split) -->Line_37 $$ if (b.startsWith("remotes/")) [ FD ]
Line_31 $$ for (String b : split) -->Line_45 $$ b = b.substring(remotePrefix.length())[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_30 $$ final String[] split = output.split("\n")[ CD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_5 $$ handler.addParameters("--no-color")[ FD ]
Line_32 $$ b = b.substring(2).trim()-->Line_39 $$ if (b.startsWith(GitBranch.REFS_REMOTES_PREFIX)) [ FD ]
Line_19 $$ String head-->Line_23 $$ return head.startsWith(prefix) ? Collections.singletonList(head.substring(prefix.length())) : Collections.<String>emptyList()[ FD ]
Line_38 $$ remotePrefix = "remotes/"-->Line_40 $$ remotePrefix = GitBranch.REFS_REMOTES_PREFIX[ FD ]
Line_19 $$ String head-->Line_21 $$ head = FileUtil.loadFile(new File(root.getPath(), GitRepositoryFiles.GIT_HEAD), CharsetToolkit.UTF8_CHARSET).trim()[ FD ]
Line_12 $$ remoteOnly = true-->Line_44 $$ if (!remoteOnly) [ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_5 $$ handler.addParameters("--no-color")[ CD ]
Line_22 $$ final String prefix = "ref: refs/heads/"-->Line_23 $$ return head.startsWith(prefix) ? Collections.singletonList(head.substring(prefix.length())) : Collections.<String>emptyList()[ FD ]
Line_38 $$ remotePrefix = "remotes/"-->Line_45 $$ b = b.substring(remotePrefix.length())[ FD ]
Line_6 $$ boolean remoteOnly = false-->Line_9 $$ remoteOnly = false[ FD ]
Line_17 $$ final String output = handler.run()-->Line_18 $$ if (output.trim().length() == 0) [ FD ]
Line_31 $$ for (String b : split) -->Line_47 $$ final int idx = b.indexOf("HEAD ->")[ FD ]
Line_3 $$ final GitSimpleHandler handler = new GitSimpleHandler(project, root, GitCommand.BRANCH)-->Line_17 $$ final String output = handler.run()[ FD ]
Line_2 $$ public static Collection<String> getBranches(@NotNull Project project, @NotNull VirtualFile root, boolean localWanted, boolean remoteWanted, @Nullable String containingCommit) throws VcsException -->Line_7 $$ if (remoteWanted && localWanted) [ CD ]
