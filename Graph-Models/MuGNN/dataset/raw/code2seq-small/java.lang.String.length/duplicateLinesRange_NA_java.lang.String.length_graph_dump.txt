Line_9 $$ if (end <= start) -->Line_10 $$ return null[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_3 $$ Pair<LogicalPosition, LogicalPosition> lines = EditorUtil.calcSurroundingRange(editor, rangeStart, rangeEnd)[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_21 $$ document.insertString(end, s)[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_21 $$ document.insertString(end, s)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_7 $$ int start = editor.logicalPositionToOffset(lineStart)[ CD ]
Line_6 $$ LogicalPosition nextLineStart = lines.second-->Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)[ FD ]
Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)-->Line_24 $$ return Couple.of(end, end + s.length())[ FD ]
Line_18 $$ s = "\n" + s-->Line_21 $$ document.insertString(end, s)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_5 $$ LogicalPosition lineStart = lines.first[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_6 $$ LogicalPosition nextLineStart = lines.second[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()[ CD ]
Line_15 $$ if (lineToCheck == document.getLineCount() || lineStart.line == document.getLineCount() - 1 || document.getLineSeparatorLength(lineToCheck) == 0) -->Line_19 $$ newOffset++[ CD ]
Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()-->Line_21 $$ document.insertString(end, s)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_23 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()-->Line_18 $$ s = "\n" + s[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_23 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_22 $$ editor.getCaretModel().moveToOffset(newOffset)[ CD ]
Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()-->Line_24 $$ return Couple.of(end, end + s.length())[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_9 $$ if (end <= start) [ CD ]
Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)-->Line_9 $$ if (end <= start) [ FD ]
Line_18 $$ s = "\n" + s-->Line_24 $$ return Couple.of(end, end + s.length())[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)[ CD ]
Line_14 $$ int newOffset = end + offset - start-->Line_22 $$ editor.getCaretModel().moveToOffset(newOffset)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_7 $$ int start = editor.logicalPositionToOffset(lineStart)[ FD ]
Line_7 $$ int start = editor.logicalPositionToOffset(lineStart)-->Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_13 $$ final int lineToCheck = nextLineStart.line - 1[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_4 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_7 $$ int start = editor.logicalPositionToOffset(lineStart)-->Line_9 $$ if (end <= start) [ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_22 $$ editor.getCaretModel().moveToOffset(newOffset)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_15 $$ if (lineToCheck == document.getLineCount() || lineStart.line == document.getLineCount() - 1 || document.getLineSeparatorLength(lineToCheck) == 0) [ FD ]
Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)-->Line_12 $$ String s = document.getCharsSequence().subSequence(start, end).toString()[ FD ]
Line_5 $$ LogicalPosition lineStart = lines.first-->Line_7 $$ int start = editor.logicalPositionToOffset(lineStart)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_3 $$ Pair<LogicalPosition, LogicalPosition> lines = EditorUtil.calcSurroundingRange(editor, rangeStart, rangeEnd)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_15 $$ if (lineToCheck == document.getLineCount() || lineStart.line == document.getLineCount() - 1 || document.getLineSeparatorLength(lineToCheck) == 0) [ CD ]
Line_13 $$ final int lineToCheck = nextLineStart.line - 1-->Line_15 $$ if (lineToCheck == document.getLineCount() || lineStart.line == document.getLineCount() - 1 || document.getLineSeparatorLength(lineToCheck) == 0) [ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_24 $$ return Couple.of(end, end + s.length())[ CD ]
Line_14 $$ int newOffset = end + offset - start-->Line_19 $$ newOffset++[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)[ FD ]
Line_15 $$ if (lineToCheck == document.getLineCount() || lineStart.line == document.getLineCount() - 1 || document.getLineSeparatorLength(lineToCheck) == 0) -->Line_18 $$ s = "\n" + s[ CD ]
Line_8 $$ int end = editor.logicalPositionToOffset(nextLineStart)-->Line_21 $$ document.insertString(end, s)[ FD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_14 $$ int newOffset = end + offset - start[ CD ]
Line_2 $$ static Couple<Integer> duplicateLinesRange(Editor editor, Document document, VisualPosition rangeStart, VisualPosition rangeEnd) -->Line_4 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
