Line_9 $$ final PsiLanguageInjectionHost elementWithInjection = ((PsiLanguageInjectionHost) stringLiteralLeaf.getParent())-->Line_14 $$ assertTrue(InjectedLanguageUtil.hasInjections(elementWithInjection))[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_14 $$ assertTrue(InjectedLanguageUtil.hasInjections(elementWithInjection))[ CD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_10 $$ InjectedLanguageUtil.enumerate(elementWithInjection, file, false, new PsiLanguageInjectionHost.InjectedPsiVisitor() [ CD ]
Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)-->Line_6 $$ assertNotNull(stringLiteralLeaf)[ FD ]
Line_9 $$ final PsiLanguageInjectionHost elementWithInjection = ((PsiLanguageInjectionHost) stringLiteralLeaf.getParent())-->Line_15 $$ final PsiElement elementInInjected = InjectedLanguageUtil.findElementInInjected(elementWithInjection, offsetWithRegexp)[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_18 $$ return regexpFile[ CD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_8 $$ assertTrue(stringLiteralLeaf.getParent() instanceof PsiLanguageInjectionHost)[ CD ]
Line_4 $$ int offsetWithRegexp = file.getText().indexOf("Pattern.compile(\"") + "Pattern.compile(\"".length()-->Line_15 $$ final PsiElement elementInInjected = InjectedLanguageUtil.findElementInInjected(elementWithInjection, offsetWithRegexp)[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_7 $$ assertNotNull(stringLiteralLeaf.getParent())[ CD ]
Line_4 $$ int offsetWithRegexp = file.getText().indexOf("Pattern.compile(\"") + "Pattern.compile(\"".length()-->Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)[ FD ]
Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)-->Line_9 $$ final PsiLanguageInjectionHost elementWithInjection = ((PsiLanguageInjectionHost) stringLiteralLeaf.getParent())[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_16 $$ final PsiFile regexpFile = PsiTreeUtil.getParentOfType(elementInInjected, PsiFile.class)[ CD ]
Line_3 $$ final PsiFile file = getFile()-->Line_10 $$ InjectedLanguageUtil.enumerate(elementWithInjection, file, false, new PsiLanguageInjectionHost.InjectedPsiVisitor() [ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_3 $$ final PsiFile file = getFile()[ CD ]
Line_9 $$ final PsiLanguageInjectionHost elementWithInjection = ((PsiLanguageInjectionHost) stringLiteralLeaf.getParent())-->Line_10 $$ InjectedLanguageUtil.enumerate(elementWithInjection, file, false, new PsiLanguageInjectionHost.InjectedPsiVisitor() [ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_4 $$ int offsetWithRegexp = file.getText().indexOf("Pattern.compile(\"") + "Pattern.compile(\"".length()[ CD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_6 $$ assertNotNull(stringLiteralLeaf)[ CD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)[ CD ]
Line_3 $$ final PsiFile file = getFile()-->Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_17 $$ assertNotNull(regexpFile)[ CD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_9 $$ final PsiLanguageInjectionHost elementWithInjection = ((PsiLanguageInjectionHost) stringLiteralLeaf.getParent())[ CD ]
Line_3 $$ final PsiFile file = getFile()-->Line_4 $$ int offsetWithRegexp = file.getText().indexOf("Pattern.compile(\"") + "Pattern.compile(\"".length()[ FD ]
Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)-->Line_7 $$ assertNotNull(stringLiteralLeaf.getParent())[ FD ]
Line_5 $$ final PsiElement stringLiteralLeaf = file.findElementAt(offsetWithRegexp)-->Line_8 $$ assertTrue(stringLiteralLeaf.getParent() instanceof PsiLanguageInjectionHost)[ FD ]
Line_2 $$ private PsiFile setUpRegexpInjectionAndGetRegexpFile() -->Line_15 $$ final PsiElement elementInInjected = InjectedLanguageUtil.findElementInInjected(elementWithInjection, offsetWithRegexp)[ CD ]
