Line_37 $$ for (int i = 0; i < blankLines; i++) -->Line_38 $$ lines[lineNumber - i - 2] = null[ CD ]
Line_25 $$ line = lines[--pos]-->Line_28 $$ line = line.trim()[ FD ]
Line_35 $$ line = lines[--pos].trim()-->Line_44 $$ if (line != null) [ FD ]
Line_28 $$ line = line.trim()-->Line_32 $$ if (line.startsWith("/**") || line.startsWith("/*")) [ FD ]
Line_19 $$ String line = lines[pos]-->Line_32 $$ if (line.startsWith("/**") || line.startsWith("/*")) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_13 $$ String[] lines = StringUtil.splitLines(content)[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_49 $$ content = sb.toString()[ CD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_49 $$ content = sb.toString()[ FD ]
Line_42 $$ StringBundler sb = new StringBundler(content.length())-->Line_49 $$ content = sb.toString()[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_9 $$ JavaField[] javaFields = javaClass.getFields()[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_42 $$ StringBundler sb = new StringBundler(content.length())[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_9 $$ JavaField[] javaFields = javaClass.getFields()[ CD ]
Line_44 $$ if (line != null) -->Line_46 $$ sb.append("\n")[ CD ]
Line_19 $$ String line = lines[pos]-->Line_20 $$ if (line == null) [ FD ]
Line_14 $$ for (int lineNumber : lineNumbers) -->Line_15 $$ if (lineNumber == 0) [ FD ]
Line_24 $$ while (line.equals(StringPool.BLANK)) -->Line_25 $$ line = lines[--pos][ CD ]
Line_29 $$ if (line.endsWith("*/")) -->Line_30 $$ while (true) [ CD ]
Line_29 $$ if (line.endsWith("*/")) -->Line_37 $$ for (int i = 0; i < blankLines; i++) [ CD ]
Line_19 $$ String line = lines[pos]-->Line_44 $$ if (line != null) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_50 $$ return content.trim()[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_42 $$ StringBundler sb = new StringBundler(content.length())[ CD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_3 $$ Set<Integer> lineNumbers = new HashSet()[ CD ]
Line_3 $$ Set<Integer> lineNumbers = new HashSet()-->Line_4 $$ lineNumbers.add(_getJavaClassLineNumber(javaClass))[ FD ]
Line_28 $$ line = line.trim()-->Line_35 $$ line = lines[--pos].trim()[ FD ]
Line_19 $$ String line = lines[pos]-->Line_28 $$ line = line.trim()[ FD ]
Line_10 $$ for (JavaField javaField : javaFields) -->Line_11 $$ lineNumbers.add(javaField.getLineNumber())[ FD ]
Line_18 $$ int pos = lineNumber - 2-->Line_25 $$ line = lines[--pos][ FD ]
Line_19 $$ String line = lines[pos]-->Line_25 $$ line = lines[--pos][ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_4 $$ lineNumbers.add(_getJavaClassLineNumber(javaClass))[ CD ]
Line_23 $$ int blankLines = 0-->Line_37 $$ for (int i = 0; i < blankLines; i++) [ FD ]
Line_28 $$ line = line.trim()-->Line_44 $$ if (line != null) [ FD ]
Line_44 $$ if (line != null) -->Line_45 $$ sb.append(line)[ CD ]
Line_3 $$ Set<Integer> lineNumbers = new HashSet()-->Line_7 $$ lineNumbers.add(javaMethod.getLineNumber())[ FD ]
Line_30 $$ while (true) -->Line_35 $$ line = lines[--pos].trim()[ CD ]
Line_42 $$ StringBundler sb = new StringBundler(content.length())-->Line_45 $$ sb.append(line)[ FD ]
Line_49 $$ content = sb.toString()-->Line_50 $$ return content.trim()[ FD ]
Line_25 $$ line = lines[--pos]-->Line_44 $$ if (line != null) [ FD ]
Line_25 $$ line = lines[--pos]-->Line_24 $$ while (line.equals(StringPool.BLANK)) [ FD ]
Line_6 $$ for (JavaMethod javaMethod : javaMethods) -->Line_7 $$ lineNumbers.add(javaMethod.getLineNumber())[ FD ]
Line_19 $$ String line = lines[pos]-->Line_45 $$ sb.append(line)[ FD ]
Line_25 $$ line = lines[--pos]-->Line_32 $$ if (line.startsWith("/**") || line.startsWith("/*")) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_5 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ FD ]
Line_19 $$ String line = lines[pos]-->Line_29 $$ if (line.endsWith("*/")) [ FD ]
Line_23 $$ int blankLines = 0-->Line_26 $$ blankLines++[ FD ]
Line_25 $$ line = lines[--pos]-->Line_45 $$ sb.append(line)[ FD ]
Line_24 $$ while (line.equals(StringPool.BLANK)) -->Line_26 $$ blankLines++[ CD ]
Line_3 $$ Set<Integer> lineNumbers = new HashSet()-->Line_11 $$ lineNumbers.add(javaField.getLineNumber())[ FD ]
Line_30 $$ while (true) -->Line_32 $$ if (line.startsWith("/**") || line.startsWith("/*")) [ CD ]
Line_28 $$ line = line.trim()-->Line_45 $$ sb.append(line)[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_13 $$ String[] lines = StringUtil.splitLines(content)[ CD ]
Line_35 $$ line = lines[--pos].trim()-->Line_45 $$ sb.append(line)[ FD ]
Line_30 $$ while (true) -->Line_31 $$ lines[pos] = null[ CD ]
Line_18 $$ int pos = lineNumber - 2-->Line_35 $$ line = lines[--pos].trim()[ FD ]
Line_19 $$ String line = lines[pos]-->Line_24 $$ while (line.equals(StringPool.BLANK)) [ FD ]
Line_19 $$ String line = lines[pos]-->Line_35 $$ line = lines[--pos].trim()[ FD ]
Line_42 $$ StringBundler sb = new StringBundler(content.length())-->Line_46 $$ sb.append("\n")[ FD ]
Line_25 $$ line = lines[--pos]-->Line_29 $$ if (line.endsWith("*/")) [ FD ]
Line_35 $$ line = lines[--pos].trim()-->Line_32 $$ if (line.startsWith("/**") || line.startsWith("/*")) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_5 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ CD ]
Line_25 $$ line = lines[--pos]-->Line_35 $$ line = lines[--pos].trim()[ FD ]
Line_28 $$ line = line.trim()-->Line_29 $$ if (line.endsWith("*/")) [ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_4 $$ lineNumbers.add(_getJavaClassLineNumber(javaClass))[ FD ]
Line_2 $$ private String _removeJavadocFromJava(JavaClass javaClass, String content) -->Line_50 $$ return content.trim()[ CD ]
