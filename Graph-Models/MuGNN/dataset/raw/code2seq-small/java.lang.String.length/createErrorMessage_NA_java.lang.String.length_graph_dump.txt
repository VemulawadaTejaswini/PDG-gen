Line_14 $$ final VirtualFile result = ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>() -->Line_16 $$ String url = VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL, file.getAbsolutePath().replace(File.separatorChar, '/'))[ CD ]
Line_13 $$ final File file = new File(fileName)-->Line_16 $$ String url = VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL, file.getAbsolutePath().replace(File.separatorChar, '/'))[ FD ]
Line_16 $$ String url = VirtualFileManager.constructUrl(LocalFileSystem.PROTOCOL, file.getAbsolutePath().replace(File.separatorChar, '/'))-->Line_17 $$ return VirtualFileManager.getInstance().findFileByUrl(url)[ FD ]
Line_9 $$ String fileName = fileAndLineNumber.substring(0, index)-->Line_20 $$ text = fileName.replace('/', File.separatorChar) + ':' + line + text.substring(afterLineNumberIndex)[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")[ CD ]
Line_5 $$ if (afterLineNumberIndex != -1) -->Line_7 $$ int index = fileAndLineNumber.lastIndexOf(':')[ CD ]
Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")-->Line_20 $$ text = fileName.replace('/', File.separatorChar) + ':' + line + text.substring(afterLineNumberIndex)[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)[ FD ]
Line_3 $$ text = StringUtil.trimStart(text, FILE_PREFIX)-->Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")[ FD ]
Line_8 $$ if (index != -1) -->Line_9 $$ String fileName = fileAndLineNumber.substring(0, index)[ CD ]
Line_5 $$ if (afterLineNumberIndex != -1) -->Line_8 $$ if (index != -1) [ CD ]
Line_7 $$ int index = fileAndLineNumber.lastIndexOf(':')-->Line_9 $$ String fileName = fileAndLineNumber.substring(0, index)[ FD ]
Line_14 $$ final VirtualFile result = ApplicationManager.getApplication().runReadAction(new Computable<VirtualFile>() -->Line_17 $$ return VirtualFileManager.getInstance().findFileByUrl(url)[ CD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_5 $$ if (afterLineNumberIndex != -1) [ CD ]
Line_5 $$ if (afterLineNumberIndex != -1) -->Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)[ CD ]
Line_10 $$ String lineNumberStr = fileAndLineNumber.substring(index + 1, fileAndLineNumber.length()).trim()-->Line_12 $$ int line = Integer.parseInt(lineNumberStr)[ FD ]
Line_8 $$ if (index != -1) -->Line_10 $$ String lineNumberStr = fileAndLineNumber.substring(index + 1, fileAndLineNumber.length()).trim()[ CD ]
Line_3 $$ text = StringUtil.trimStart(text, FILE_PREFIX)-->Line_20 $$ text = fileName.replace('/', File.separatorChar) + ':' + line + text.substring(afterLineNumberIndex)[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_3 $$ text = StringUtil.trimStart(text, FILE_PREFIX)[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")[ FD ]
Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")-->Line_5 $$ if (afterLineNumberIndex != -1) [ FD ]
Line_4 $$ int afterLineNumberIndex = text.indexOf(": ")-->Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)[ FD ]
Line_7 $$ int index = fileAndLineNumber.lastIndexOf(':')-->Line_8 $$ if (index != -1) [ FD ]
Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)-->Line_10 $$ String lineNumberStr = fileAndLineNumber.substring(index + 1, fileAndLineNumber.length()).trim()[ FD ]
Line_3 $$ text = StringUtil.trimStart(text, FILE_PREFIX)-->Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_26 $$ return new AntMessage(MessageType.ERROR, priority, text, null, 0, 0)[ CD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_20 $$ text = fileName.replace('/', File.separatorChar) + ':' + line + text.substring(afterLineNumberIndex)[ FD ]
Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)-->Line_9 $$ String fileName = fileAndLineNumber.substring(0, index)[ FD ]
Line_6 $$ String fileAndLineNumber = text.substring(0, afterLineNumberIndex)-->Line_7 $$ int index = fileAndLineNumber.lastIndexOf(':')[ FD ]
Line_2 $$ private static AntMessage createErrorMessage(int priority, String text) -->Line_3 $$ text = StringUtil.trimStart(text, FILE_PREFIX)[ CD ]
