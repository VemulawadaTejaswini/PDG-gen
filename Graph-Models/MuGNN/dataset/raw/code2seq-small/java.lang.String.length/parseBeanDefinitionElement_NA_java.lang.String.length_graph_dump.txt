Line_17 $$ beanName = aliases.remove(0)-->Line_27 $$ if (!StringUtils.hasText(beanName)) [ FD ]
Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)-->Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_16 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) -->Line_17 $$ beanName = aliases.remove(0)[ CD ]
Line_17 $$ beanName = aliases.remove(0)-->Line_23 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_15 $$ String beanName = id-->Line_16 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) [ FD ]
Line_15 $$ String beanName = id-->Line_25 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ FD ]
Line_15 $$ String beanName = id-->Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_49 $$ String[] aliasesArray = StringUtils.toStringArray(aliases)[ FD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_13 $$ aliases.addAll(Arrays.asList(nameArr))[ FD ]
Line_11 $$ if (StringUtils.hasLength(nameAttr)) -->Line_13 $$ aliases.addAll(Arrays.asList(nameArr))[ CD ]
Line_11 $$ if (StringUtils.hasLength(nameAttr)) -->Line_12 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)[ CD ]
Line_17 $$ beanName = aliases.remove(0)-->Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_23 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)-->Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) -->Line_38 $$ aliases.add(beanClassName)[ CD ]
Line_26 $$ if (beanDefinition != null) -->Line_50 $$ return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray)[ CD ]
Line_17 $$ beanName = aliases.remove(0)-->Line_25 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)[ FD ]
Line_17 $$ beanName = aliases.remove(0)-->Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_25 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_26 $$ if (beanDefinition != null) [ FD ]
Line_18 $$ if (logger.isDebugEnabled()) -->Line_19 $$ logger.debug("No XML 'id' specified - using '" + beanName + "' as bean name and " + aliases + " as aliases")[ CD ]
Line_29 $$ if (containingBean != null) -->Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ CD ]
Line_26 $$ if (beanDefinition != null) -->Line_49 $$ String[] aliasesArray = StringUtils.toStringArray(aliases)[ CD ]
Line_26 $$ if (beanDefinition != null) -->Line_27 $$ if (!StringUtils.hasText(beanName)) [ CD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_17 $$ beanName = aliases.remove(0)[ FD ]
Line_41 $$ if (logger.isDebugEnabled()) -->Line_42 $$ logger.debug("Neither XML 'id' nor 'name' specified - " + "using generated bean name [" + beanName + "]")[ CD ]
Line_9 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)-->Line_11 $$ if (StringUtils.hasLength(nameAttr)) [ FD ]
Line_16 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) -->Line_18 $$ if (logger.isDebugEnabled()) [ CD ]
Line_25 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_25 $$ AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean)-->Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
Line_15 $$ String beanName = id-->Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ FD ]
Line_15 $$ String beanName = id-->Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_22 $$ if (containingBean == null) -->Line_23 $$ checkNameUniqueness(beanName, aliases, ele)[ CD ]
Line_12 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)-->Line_13 $$ aliases.addAll(Arrays.asList(nameArr))[ FD ]
Line_9 $$ String nameAttr = ele.getAttribute(NAME_ATTRIBUTE)-->Line_12 $$ String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS)[ FD ]
Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)-->Line_37 $$ if (beanClassName != null && beanName.startsWith(beanClassName) && beanName.length() > beanClassName.length() && !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) [ FD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_38 $$ aliases.add(beanClassName)[ FD ]
Line_15 $$ String beanName = id-->Line_23 $$ checkNameUniqueness(beanName, aliases, ele)[ FD ]
Line_29 $$ if (containingBean != null) -->Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ CD ]
Line_10 $$ List<String> aliases = new ArrayList<String>()-->Line_16 $$ if (!StringUtils.hasText(beanName) && !aliases.isEmpty()) [ FD ]
Line_15 $$ String beanName = id-->Line_27 $$ if (!StringUtils.hasText(beanName)) [ FD ]
Line_15 $$ String beanName = id-->Line_17 $$ beanName = aliases.remove(0)[ FD ]
Line_29 $$ if (containingBean != null) -->Line_30 $$ beanName = BeanDefinitionReaderUtils.generateBeanName(beanDefinition, this.readerContext.getRegistry(), true)[ CD ]
Line_17 $$ beanName = aliases.remove(0)-->Line_32 $$ beanName = this.readerContext.generateBeanName(beanDefinition)[ FD ]
