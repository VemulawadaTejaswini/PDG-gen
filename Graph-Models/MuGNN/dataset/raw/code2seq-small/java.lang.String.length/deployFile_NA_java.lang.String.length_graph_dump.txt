Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_45 $$ String deployDir = null[ CD ]
Line_45 $$ String deployDir = null-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_26 $$ overwrite = true-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_61 $$ String destDir = this.destDir-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_29 $$ if (preliminaryContext == null) [ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_69 $$ String name = pluginPackage.getName()[ FD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_46 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_45 $$ String deployDir = null-->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_45 $$ String deployDir = null-->Line_49 $$ deployDir = srcFile.getName()[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_32 $$ if (pluginPackage != null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_29 $$ if (preliminaryContext == null) [ CD ]
Line_32 $$ if (pluginPackage != null) -->Line_39 $$ if (Validator.isNull(displayName)) [ CD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) -->Line_76 $$ if (_log.isInfoEnabled()) [ CD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_50 $$ displayName = getDisplayName(srcFile)-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_18 $$ boolean overwrite = false-->Line_26 $$ overwrite = true[ FD ]
Line_27 $$ preliminaryContext = displayName-->Line_30 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_40 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_65 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_33 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_40 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_27 $$ preliminaryContext = displayName-->Line_29 $$ if (preliminaryContext == null) [ FD ]
Line_81 $$ overwrite = true-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_50 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_16 $$ String specifiedContext = autoDeploymentContext.getContext()[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_83 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_9 $$ if (_log.isInfoEnabled()) [ CD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_46 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_53 $$ deployDir = jbossPrefix + deployDir-->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_71 $$ String version = pluginPackage.getVersion()[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_3 $$ File srcFile = autoDeploymentContext.getFile()[ CD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_72 $$ if (_log.isInfoEnabled()) [ CD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_39 $$ if (Validator.isNull(displayName)) [ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_71 $$ String version = pluginPackage.getVersion()[ FD ]
Line_83 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_45 $$ String deployDir = null-->Line_53 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_30 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_76 $$ if (_log.isInfoEnabled()) -->Line_77 $$ _log.info("Not updating " + name + " because version " + previousVersion + " is newer than version " + version)[ CD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_47 $$ deployDir = displayName + ".war"[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_50 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_39 $$ if (Validator.isNull(displayName)) [ FD ]
Line_65 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_67 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()[ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_40 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_101 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_46 $$ if (Validator.isNotNull(displayName)) [ CD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_30 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_47 $$ deployDir = displayName + ".war"-->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_84 $$ if (srcFile.isDirectory()) -->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_47 $$ deployDir = displayName + ".war"[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_5 $$ if (pluginPackage == null) [ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_62 $$ if (autoDeploymentContext.getDestDir() != null) [ FD ]
Line_32 $$ if (pluginPackage != null) -->Line_33 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_91 $$ context = pluginPackage.getContext()[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)[ FD ]
Line_53 $$ deployDir = jbossPrefix + deployDir-->Line_55 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_62 $$ if (autoDeploymentContext.getDestDir() != null) -->Line_63 $$ destDir = autoDeploymentContext.getDestDir()[ CD ]
Line_49 $$ deployDir = srcFile.getName()-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_34 $$ throw new AutoDeployException(srcFile.getName() + " does not support this version of Liferay")[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_49 $$ deployDir = srcFile.getName()[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_36 $$ if (displayName == null) [ FD ]
Line_18 $$ boolean overwrite = false-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_40 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_84 $$ if (srcFile.isDirectory()) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_62 $$ if (autoDeploymentContext.getDestDir() != null) [ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_101 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ FD ]
Line_88 $$ if (!deployed) -->Line_89 $$ String context = preliminaryContext[ CD ]
Line_39 $$ if (Validator.isNull(displayName)) -->Line_40 $$ displayName = getDisplayName(srcFile)[ CD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_45 $$ String deployDir = null-->Line_47 $$ deployDir = displayName + ".war"[ FD ]
Line_46 $$ if (Validator.isNotNull(displayName)) -->Line_49 $$ deployDir = srcFile.getName()[ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_47 $$ deployDir = displayName + ".war"-->Line_49 $$ deployDir = srcFile.getName()[ FD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_26 $$ overwrite = true-->Line_81 $$ overwrite = true[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()[ FD ]
Line_49 $$ deployDir = srcFile.getName()-->Line_55 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_54 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) -->Line_56 $$ if (appServerType.equals(ServerDetector.GLASSFISH_ID) || appServerType.equals(ServerDetector.JETTY_ID) || appServerType.equals(ServerDetector.JONAS_ID) || appServerType.equals(ServerDetector.OC4J_ID) || appServerType.equals(ServerDetector.RESIN_ID) || appServerType.equals(ServerDetector.TOMCAT_ID) || appServerType.equals(ServerDetector.WEBLOGIC_ID)) [ CD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_89 $$ String context = preliminaryContext-->Line_93 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ FD ]
Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_61 $$ String destDir = this.destDir-->Line_63 $$ destDir = autoDeploymentContext.getDestDir()[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_50 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_88 $$ if (!deployed) -->Line_90 $$ if (pluginPackage != null) [ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_13 $$ if (Validator.isNotNull(autoDeploymentContextAppServerType)) [ CD ]
Line_47 $$ deployDir = displayName + ".war"-->Line_55 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_100 $$ if (pluginPackage != null) [ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ FD ]
Line_5 $$ if (pluginPackage == null) -->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_52 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) [ CD ]
Line_52 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) -->Line_53 $$ deployDir = jbossPrefix + deployDir[ CD ]
Line_50 $$ displayName = getDisplayName(srcFile)-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_100 $$ if (pluginPackage != null) [ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_27 $$ preliminaryContext = displayName[ FD ]
Line_53 $$ deployDir = jbossPrefix + deployDir-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_32 $$ if (pluginPackage != null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_16 $$ String specifiedContext = autoDeploymentContext.getContext()[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_33 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ FD ]
Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()-->Line_13 $$ if (Validator.isNotNull(autoDeploymentContextAppServerType)) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_5 $$ if (pluginPackage == null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_32 $$ if (pluginPackage != null) [ CD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_36 $$ if (displayName == null) [ FD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_71 $$ String version = pluginPackage.getVersion()[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_3 $$ File srcFile = autoDeploymentContext.getFile()[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_55 $$ deployDir = wildflyPrefix + deployDir-->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_90 $$ if (pluginPackage != null) -->Line_91 $$ context = pluginPackage.getContext()[ CD ]
Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)-->Line_88 $$ if (!deployed) [ FD ]
Line_32 $$ if (pluginPackage != null) -->Line_42 $$ pluginPackage.setContext(displayName)[ CD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_50 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_83 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_69 $$ String name = pluginPackage.getName()[ FD ]
Line_9 $$ if (_log.isInfoEnabled()) -->Line_10 $$ _log.info("Deploying " + srcFile.getName())[ CD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_27 $$ preliminaryContext = displayName[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_18 $$ boolean overwrite = false[ CD ]
Line_52 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) -->Line_54 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) [ CD ]
Line_89 $$ String context = preliminaryContext-->Line_91 $$ context = pluginPackage.getContext()[ FD ]
Line_32 $$ if (pluginPackage != null) -->Line_36 $$ if (displayName == null) [ CD ]
Line_40 $$ displayName = getDisplayName(srcFile)-->Line_46 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) -->Line_79 $$ return AutoDeployer.CODE_SKIP_NEWER_VERSION[ CD ]
Line_81 $$ overwrite = true-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_61 $$ String destDir = this.destDir[ CD ]
Line_49 $$ deployDir = srcFile.getName()-->Line_53 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_70 $$ String previousVersion = previousPluginPackage.getVersion()[ CD ]
Line_30 $$ preliminaryContext = getDisplayName(srcFile)-->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_63 $$ destDir = autoDeploymentContext.getDestDir()[ FD ]
Line_5 $$ if (pluginPackage == null) -->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ CD ]
Line_72 $$ if (_log.isInfoEnabled()) -->Line_73 $$ _log.info("Updating " + name + " from version " + previousVersion + " to version " + version)[ CD ]
Line_29 $$ if (preliminaryContext == null) -->Line_30 $$ preliminaryContext = getDisplayName(srcFile)[ CD ]
Line_49 $$ deployDir = srcFile.getName()-->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_18 $$ boolean overwrite = false-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_27 $$ preliminaryContext = displayName-->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_47 $$ deployDir = displayName + ".war"[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_39 $$ if (Validator.isNull(displayName)) [ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_27 $$ preliminaryContext = displayName[ FD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_81 $$ overwrite = true[ CD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_26 $$ overwrite = true-->Line_85 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_45 $$ String deployDir = null-->Line_55 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_100 $$ if (pluginPackage != null) -->Line_101 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ FD ]
Line_46 $$ if (Validator.isNotNull(displayName)) -->Line_50 $$ displayName = getDisplayName(srcFile)[ CD ]
Line_56 $$ if (appServerType.equals(ServerDetector.GLASSFISH_ID) || appServerType.equals(ServerDetector.JETTY_ID) || appServerType.equals(ServerDetector.JONAS_ID) || appServerType.equals(ServerDetector.OC4J_ID) || appServerType.equals(ServerDetector.RESIN_ID) || appServerType.equals(ServerDetector.TOMCAT_ID) || appServerType.equals(ServerDetector.WEBLOGIC_ID)) -->Line_57 $$ if (unpackWar) [ CD ]
Line_63 $$ destDir = autoDeploymentContext.getDestDir()-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_19 $$ String preliminaryContext = specifiedContext[ CD ]
Line_36 $$ if (displayName == null) -->Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ CD ]
Line_47 $$ deployDir = displayName + ".war"-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_46 $$ if (Validator.isNotNull(displayName)) -->Line_47 $$ deployDir = displayName + ".war"[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_91 $$ context = pluginPackage.getContext()[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_90 $$ if (pluginPackage != null) [ FD ]
Line_57 $$ if (unpackWar) -->Line_58 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ CD ]
Line_32 $$ if (pluginPackage != null) -->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_43 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_10 $$ _log.info("Deploying " + srcFile.getName())[ FD ]
Line_91 $$ context = pluginPackage.getContext()-->Line_93 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_90 $$ if (pluginPackage != null) [ FD ]
Line_47 $$ deployDir = displayName + ".war"-->Line_53 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_17 $$ String displayName = specifiedContext[ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_42 $$ pluginPackage.setContext(displayName)[ FD ]
Line_88 $$ if (!deployed) -->Line_95 $$ postDeploy(destDir, deployDir)[ CD ]
Line_55 $$ deployDir = wildflyPrefix + deployDir-->Line_95 $$ postDeploy(destDir, deployDir)[ FD ]
Line_84 $$ if (srcFile.isDirectory()) -->Line_88 $$ if (!deployed) [ CD ]
Line_65 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_67 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)-->Line_70 $$ String previousVersion = previousPluginPackage.getVersion()[ FD ]
Line_67 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)-->Line_75 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_54 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) -->Line_55 $$ deployDir = wildflyPrefix + deployDir[ CD ]
Line_68 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_69 $$ String name = pluginPackage.getName()[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_25 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_47 $$ deployDir = displayName + ".war"[ FD ]
Line_18 $$ boolean overwrite = false-->Line_81 $$ overwrite = true[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_65 $$ File deployDirFile = new File(destDir + "/" + deployDir)[ CD ]
Line_37 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_50 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_88 $$ if (!deployed) -->Line_93 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ CD ]
Line_84 $$ if (srcFile.isDirectory()) -->Line_87 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_46 $$ if (Validator.isNotNull(displayName)) [ FD ]
