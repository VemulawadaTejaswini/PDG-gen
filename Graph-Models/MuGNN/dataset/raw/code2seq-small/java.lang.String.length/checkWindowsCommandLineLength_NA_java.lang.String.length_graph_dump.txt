Line_3 $$ int len = 0-->Line_5 $$ len += s.length()[ FD ]
Line_4 $$ for (String s : commands) -->Line_5 $$ len += s.length()[ FD ]
Line_5 $$ len += s.length()-->Line_7 $$ if (len > WINDOWS_MAX_SHELL_LENGHT) [ FD ]
Line_5 $$ len += s.length()-->Line_8 $$ throw new IOException(String.format("The command line has a length of %d exceeds maximum allowed length of %d. " + "Command starts with: %s", len, WINDOWS_MAX_SHELL_LENGHT, StringUtils.join("", commands).substring(0, 100)))[ FD ]
Line_2 $$ public static void checkWindowsCommandLineLength(String... commands) throws IOException -->Line_8 $$ throw new IOException(String.format("The command line has a length of %d exceeds maximum allowed length of %d. " + "Command starts with: %s", len, WINDOWS_MAX_SHELL_LENGHT, StringUtils.join("", commands).substring(0, 100)))[ FD ]
Line_3 $$ int len = 0-->Line_8 $$ throw new IOException(String.format("The command line has a length of %d exceeds maximum allowed length of %d. " + "Command starts with: %s", len, WINDOWS_MAX_SHELL_LENGHT, StringUtils.join("", commands).substring(0, 100)))[ FD ]
Line_2 $$ public static void checkWindowsCommandLineLength(String... commands) throws IOException -->Line_3 $$ int len = 0[ CD ]
Line_2 $$ public static void checkWindowsCommandLineLength(String... commands) throws IOException -->Line_7 $$ if (len > WINDOWS_MAX_SHELL_LENGHT) [ CD ]
Line_3 $$ int len = 0-->Line_7 $$ if (len > WINDOWS_MAX_SHELL_LENGHT) [ FD ]
