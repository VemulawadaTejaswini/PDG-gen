Line_2 $$ public void testOverflowComplex() throws Exception -->Line_8 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ CD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_9 $$ queue.add(alphabet.substring(0, 4))[ CD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_14 $$ Assert.assertEquals("wxyzabcd12", queue.getText())[ CD ]
Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"-->Line_7 $$ queue.add(alphabet)[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_6 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ FD ]
Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"-->Line_5 $$ queue.add(alphabet)[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)[ CD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_5 $$ queue.add(alphabet)[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_9 $$ queue.add(alphabet.substring(0, 4))[ FD ]
Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"-->Line_6 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_12 $$ Assert.assertEquals("vwxyzabcd", queue.getText())[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_8 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_13 $$ queue.add("12")[ CD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_10 $$ Assert.assertEquals("uvwxyzabcd", queue.getText())[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_5 $$ queue.add(alphabet)[ CD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_11 $$ queue.poll()[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_7 $$ queue.add(alphabet)[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_11 $$ queue.poll()[ CD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_14 $$ Assert.assertEquals("wxyzabcd12", queue.getText())[ FD ]
Line_3 $$ CircularCharBuffer queue = new CircularCharBuffer(1, 10)-->Line_13 $$ queue.add("12")[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_10 $$ Assert.assertEquals("uvwxyzabcd", queue.getText())[ CD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_7 $$ queue.add(alphabet)[ CD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_6 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ CD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"[ CD ]
Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"-->Line_9 $$ queue.add(alphabet.substring(0, 4))[ FD ]
Line_4 $$ String alphabet = "abcdefghijklmnopqrstuvwxyz"-->Line_8 $$ Assert.assertEquals(alphabet.substring(alphabet.length() - 10), queue.getText())[ FD ]
Line_2 $$ public void testOverflowComplex() throws Exception -->Line_12 $$ Assert.assertEquals("vwxyzabcd", queue.getText())[ CD ]
