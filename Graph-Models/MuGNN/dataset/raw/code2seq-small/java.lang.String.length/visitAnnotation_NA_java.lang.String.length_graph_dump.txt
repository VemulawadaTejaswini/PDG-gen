Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))-->Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) [ FD ]
Line_24 $$ if (gClass != null) -->Line_26 $$ if (gClass.findFieldByName(fieldName, true) != null) [ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_15 $$ if (containsFieldOrMethod(containingClass, guardValue))[ CD ]
Line_36 $$ if (thisIdx == 0) -->Line_37 $$ lockClass = containingClass[ CD ]
Line_34 $$ if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) -->Line_36 $$ if (thisIdx == 0) [ CD ]
Line_25 $$ final String fieldName = StringUtil.getShortName(guardValue)-->Line_26 $$ if (gClass.findFieldByName(fieldName, true) != null) [ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_8 $$ if (guardValue == null || "this".equals(guardValue) || "itself".equals(guardValue)) [ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_3 $$ super.visitAnnotation(annotation)[ FD ]
Line_35 $$ final PsiClass lockClass-->Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) [ FD ]
Line_18 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_19 $$ if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) [ FD ]
Line_37 $$ lockClass = containingClass-->Line_42 $$ if (lockClass != null) [ FD ]
Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)-->Line_37 $$ lockClass = containingClass[ FD ]
Line_17 $$ final Project project = containingClass.getProject()-->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_49 $$ final PsiAnnotationMemberValue member = annotation.findAttributeValue("value")[ CD ]
Line_25 $$ final String fieldName = StringUtil.getShortName(guardValue)-->Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) [ FD ]
Line_36 $$ if (thisIdx == 0) -->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ CD ]
Line_24 $$ if (gClass != null) -->Line_29 $$ if (fieldName.equals("this")) [ CD ]
Line_39 $$ final String fqn = guardValue.substring(0, thisIdx - 1)-->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_53 $$ myHolder.registerProblem(member, "Unknown @GuardedBy field #ref #loc")[ CD ]
Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) -->Line_45 $$ return[ CD ]
Line_35 $$ final PsiClass lockClass-->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))-->Line_42 $$ if (lockClass != null) [ FD ]
Line_49 $$ final PsiAnnotationMemberValue member = annotation.findAttributeValue("value")-->Line_53 $$ myHolder.registerProblem(member, "Unknown @GuardedBy field #ref #loc")[ FD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_34 $$ if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) [ FD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_39 $$ final String fqn = guardValue.substring(0, thisIdx - 1)[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_24 $$ if (gClass != null) [ CD ]
Line_4 $$ if (!JCiPUtil.isGuardedByAnnotation(annotation)) -->Line_5 $$ return[ CD ]
Line_34 $$ if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) -->Line_42 $$ if (lockClass != null) [ CD ]
Line_17 $$ final Project project = containingClass.getProject()-->Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))[ FD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_8 $$ if (guardValue == null || "this".equals(guardValue) || "itself".equals(guardValue)) [ FD ]
Line_25 $$ final String fieldName = StringUtil.getShortName(guardValue)-->Line_29 $$ if (fieldName.equals("this")) [ FD ]
Line_42 $$ if (lockClass != null) -->Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) [ CD ]
Line_22 $$ final String classFQName = StringUtil.getPackageName(guardValue)-->Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_3 $$ super.visitAnnotation(annotation)[ CD ]
Line_36 $$ if (thisIdx == 0) -->Line_39 $$ final String fqn = guardValue.substring(0, thisIdx - 1)[ CD ]
Line_50 $$ if (member == null) -->Line_51 $$ return[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)[ FD ]
Line_18 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_17 $$ final Project project = containingClass.getProject()[ CD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_19 $$ if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) [ FD ]
Line_17 $$ final Project project = containingClass.getProject()-->Line_19 $$ if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) [ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_18 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_22 $$ final String classFQName = StringUtil.getPackageName(guardValue)[ CD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_33 $$ final int thisIdx = guardValue.indexOf("this")[ FD ]
Line_17 $$ final Project project = containingClass.getProject()-->Line_18 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_12 $$ if (containingClass == null) [ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_4 $$ if (!JCiPUtil.isGuardedByAnnotation(annotation)) [ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_50 $$ if (member == null) [ CD ]
Line_26 $$ if (gClass.findFieldByName(fieldName, true) != null) -->Line_27 $$ return[ CD ]
Line_18 $$ final JavaPsiFacade facade = JavaPsiFacade.getInstance(project)-->Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))[ FD ]
Line_19 $$ if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) -->Line_20 $$ return[ CD ]
Line_49 $$ final PsiAnnotationMemberValue member = annotation.findAttributeValue("value")-->Line_50 $$ if (member == null) [ FD ]
Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)-->Line_12 $$ if (containingClass == null) [ FD ]
Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))-->Line_24 $$ if (gClass != null) [ FD ]
Line_34 $$ if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) -->Line_35 $$ final PsiClass lockClass[ CD ]
Line_42 $$ if (lockClass != null) -->Line_43 $$ final String fieldName = guardValue.substring(thisIdx + "this".length() + 1)[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_4 $$ if (!JCiPUtil.isGuardedByAnnotation(annotation)) [ FD ]
Line_8 $$ if (guardValue == null || "this".equals(guardValue) || "itself".equals(guardValue)) -->Line_9 $$ return[ CD ]
Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)-->Line_15 $$ if (containsFieldOrMethod(containingClass, guardValue))[ FD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_25 $$ final String fieldName = StringUtil.getShortName(guardValue)[ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_33 $$ final int thisIdx = guardValue.indexOf("this")[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)[ CD ]
Line_37 $$ lockClass = containingClass-->Line_44 $$ if (containsFieldOrMethod(lockClass, fieldName)) [ FD ]
Line_37 $$ lockClass = containingClass-->Line_40 $$ lockClass = facade.findClass(fqn, GlobalSearchScope.allScope(project))[ FD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_43 $$ final String fieldName = guardValue.substring(thisIdx + "this".length() + 1)[ FD ]
Line_23 $$ final PsiClass gClass = facade.findClass(classFQName, GlobalSearchScope.allScope(project))-->Line_26 $$ if (gClass.findFieldByName(fieldName, true) != null) [ FD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_34 $$ if (thisIdx > -1 && thisIdx + 1 < guardValue.length()) [ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_19 $$ if (guardValue.endsWith(".class") && facade.findClass(StringUtil.getPackageName(guardValue), GlobalSearchScope.allScope(project)) != null) [ CD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_15 $$ if (containsFieldOrMethod(containingClass, guardValue))[ FD ]
Line_12 $$ if (containingClass == null) -->Line_13 $$ return[ CD ]
Line_15 $$ if (containsFieldOrMethod(containingClass, guardValue))-->Line_16 $$ return[ CD ]
Line_11 $$ final PsiClass containingClass = PsiTreeUtil.getParentOfType(annotation, PsiClass.class)-->Line_17 $$ final Project project = containingClass.getProject()[ FD ]
Line_24 $$ if (gClass != null) -->Line_25 $$ final String fieldName = StringUtil.getShortName(guardValue)[ CD ]
Line_2 $$ public void visitAnnotation(PsiAnnotation annotation) -->Line_49 $$ final PsiAnnotationMemberValue member = annotation.findAttributeValue("value")[ FD ]
Line_33 $$ final int thisIdx = guardValue.indexOf("this")-->Line_36 $$ if (thisIdx == 0) [ FD ]
Line_29 $$ if (fieldName.equals("this")) -->Line_30 $$ return[ CD ]
Line_7 $$ final String guardValue = JCiPUtil.getGuardValue(annotation)-->Line_22 $$ final String classFQName = StringUtil.getPackageName(guardValue)[ FD ]
Line_35 $$ final PsiClass lockClass-->Line_37 $$ lockClass = containingClass[ FD ]
Line_35 $$ final PsiClass lockClass-->Line_42 $$ if (lockClass != null) [ FD ]
