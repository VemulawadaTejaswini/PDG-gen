Line_29 $$ final String state = token.nextToken()-->Line_31 $$ revision.setState(state.substring(STATE.length()))[ FD ]
Line_28 $$ if (token.hasMoreTokens()) -->Line_30 $$ if (state.startsWith(STATE)) [ CD ]
Line_6 $$ final String dateString = date.substring(DATE.length())-->Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)[ FD ]
Line_28 $$ if (token.hasMoreTokens()) -->Line_29 $$ final String state = token.nextToken()[ CD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_34 $$ if (token.hasMoreTokens()) [ CD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_34 $$ if (token.hasMoreTokens()) [ FD ]
Line_4 $$ if (token.hasMoreTokens()) -->Line_16 $$ if (parsedDate != null) [ CD ]
Line_7 $$ Date parsedDate = null-->Line_13 $$ if (parsedDate != null)[ FD ]
Line_16 $$ if (parsedDate != null) -->Line_17 $$ revision.setDate(parsedDate)[ CD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_22 $$ if (token.hasMoreTokens()) [ FD ]
Line_34 $$ if (token.hasMoreTokens()) -->Line_35 $$ final String linesModified = token.nextToken()[ CD ]
Line_7 $$ Date parsedDate = null-->Line_17 $$ revision.setDate(parsedDate)[ FD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)[ CD ]
Line_4 $$ if (token.hasMoreTokens()) -->Line_6 $$ final String dateString = date.substring(DATE.length())[ CD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_29 $$ final String state = token.nextToken()[ FD ]
Line_4 $$ if (token.hasMoreTokens()) -->Line_5 $$ final String date = token.nextToken()[ CD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_5 $$ final String date = token.nextToken()[ FD ]
Line_29 $$ final String state = token.nextToken()-->Line_30 $$ if (state.startsWith(STATE)) [ FD ]
Line_16 $$ if (parsedDate != null) -->Line_19 $$ BugLog.getInstance().showException(new Exception(JavaCvsSrcBundle.message("line.could.not.be.parsed.error.message", line)))[ CD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_22 $$ if (token.hasMoreTokens()) [ CD ]
Line_7 $$ Date parsedDate = null-->Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)[ FD ]
Line_35 $$ final String linesModified = token.nextToken()-->Line_36 $$ if (linesModified.startsWith(LINES)) [ FD ]
Line_4 $$ if (token.hasMoreTokens()) -->Line_7 $$ Date parsedDate = null[ CD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_19 $$ BugLog.getInstance().showException(new Exception(JavaCvsSrcBundle.message("line.could.not.be.parsed.error.message", line)))[ FD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_28 $$ if (token.hasMoreTokens()) [ FD ]
Line_22 $$ if (token.hasMoreTokens()) -->Line_23 $$ final String author = token.nextToken()[ CD ]
Line_22 $$ if (token.hasMoreTokens()) -->Line_24 $$ if (author.startsWith(AUTHOR)) [ CD ]
Line_36 $$ if (linesModified.startsWith(LINES)) -->Line_37 $$ revision.setLines(linesModified.substring(LINES.length()))[ CD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_4 $$ if (token.hasMoreTokens()) [ FD ]
Line_23 $$ final String author = token.nextToken()-->Line_24 $$ if (author.startsWith(AUTHOR)) [ FD ]
Line_7 $$ Date parsedDate = null-->Line_16 $$ if (parsedDate != null) [ FD ]
Line_8 $$ for (SyncDateFormat expectedDateFormat : EXPECTED_DATE_FORMATS) -->Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)[ FD ]
Line_35 $$ final String linesModified = token.nextToken()-->Line_37 $$ revision.setLines(linesModified.substring(LINES.length()))[ FD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_23 $$ final String author = token.nextToken()[ FD ]
Line_23 $$ final String author = token.nextToken()-->Line_25 $$ revision.setAuthor(author.substring(AUTHOR.length()))[ FD ]
Line_30 $$ if (state.startsWith(STATE)) -->Line_31 $$ revision.setState(state.substring(STATE.length()))[ CD ]
Line_5 $$ final String date = token.nextToken()-->Line_6 $$ final String dateString = date.substring(DATE.length())[ FD ]
Line_3 $$ final StringTokenizer token = new StringTokenizer(line, ";", false)-->Line_35 $$ final String linesModified = token.nextToken()[ FD ]
Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)-->Line_16 $$ if (parsedDate != null) [ FD ]
Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)-->Line_17 $$ revision.setDate(parsedDate)[ FD ]
Line_34 $$ if (token.hasMoreTokens()) -->Line_36 $$ if (linesModified.startsWith(LINES)) [ CD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_28 $$ if (token.hasMoreTokens()) [ CD ]
Line_2 $$ private void processRevisionDate(String line) -->Line_4 $$ if (token.hasMoreTokens()) [ CD ]
Line_24 $$ if (author.startsWith(AUTHOR)) -->Line_25 $$ revision.setAuthor(author.substring(AUTHOR.length()))[ CD ]
Line_10 $$ parsedDate = expectedDateFormat.parse(dateString)-->Line_13 $$ if (parsedDate != null)[ FD ]
