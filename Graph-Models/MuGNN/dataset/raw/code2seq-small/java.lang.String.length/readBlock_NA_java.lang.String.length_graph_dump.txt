Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_9 $$ final String clientTraceFmt = clientName.length() > 0 && ClientTraceLog.isInfoEnabled() ? String.format(DN_CLIENTTRACE_FORMAT, localAddress, remoteAddress, "%d", "HDFS_READ", clientName, "%d", dnR.getDatanodeUuid(), block, "%d") : dnR + " Served block " + block + " to " + remoteAddress[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_27 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_50 $$ datanode.metrics.addReadBlockOp(elapsed())[ CD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_43 $$ IOUtils.closeStream(out)[ FD ]
Line_4 $$ OutputStream baseStream = getOutputStream()-->Line_21 $$ long read = blockSender.sendBlock(out, baseStream, null)[ FD ]
Line_7 $$ BlockSender blockSender = null-->Line_13 $$ blockSender = new BlockSender(block, blockOffset, length, true, false, sendChecksum, datanode, clientTraceFmt, cachingStrategy)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_6 $$ checkAccess(out, true, block, blockToken, Op.READ_BLOCK, BlockTokenSecretManager.AccessMode.READ)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_4 $$ OutputStream baseStream = getOutputStream()[ CD ]
Line_13 $$ blockSender = new BlockSender(block, blockOffset, length, true, false, sendChecksum, datanode, clientTraceFmt, cachingStrategy)-->Line_20 $$ writeSuccessWithChecksumInfo(blockSender, new DataOutputStream(getOutputStream()))[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_31 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_10 $$ updateCurrentThreadName("Sending block " + block)[ CD ]
Line_15 $$ String msg = "opReadBlock " + block + " received exception " + e-->Line_16 $$ LOG.info(msg)[ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_6 $$ checkAccess(out, true, block, blockToken, Op.READ_BLOCK, BlockTokenSecretManager.AccessMode.READ)[ FD ]
Line_8 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(block.getBlockPoolId())-->Line_9 $$ final String clientTraceFmt = clientName.length() > 0 && ClientTraceLog.isInfoEnabled() ? String.format(DN_CLIENTTRACE_FORMAT, localAddress, remoteAddress, "%d", "HDFS_READ", clientName, "%d", dnR.getDatanodeUuid(), block, "%d") : dnR + " Served block " + block + " to " + remoteAddress[ FD ]
Line_7 $$ BlockSender blockSender = null-->Line_48 $$ IOUtils.closeStream(blockSender)[ FD ]
Line_22 $$ if (blockSender.didSendEntireByteRange()) -->Line_34 $$ IOUtils.closeStream(out)[ CD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_21 $$ long read = blockSender.sendBlock(out, baseStream, null)[ FD ]
Line_7 $$ BlockSender blockSender = null-->Line_22 $$ if (blockSender.didSendEntireByteRange()) [ FD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_34 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_8 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(block.getBlockPoolId())[ FD ]
Line_24 $$ ClientReadStatusProto stat = ClientReadStatusProto.parseFrom(PBHelper.vintPrefixed(in))-->Line_25 $$ if (!stat.hasStatus()) [ FD ]
Line_7 $$ BlockSender blockSender = null-->Line_20 $$ writeSuccessWithChecksumInfo(blockSender, new DataOutputStream(getOutputStream()))[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_51 $$ datanode.metrics.incrReadsFromClient(peer.isLocal())[ CD ]
Line_13 $$ blockSender = new BlockSender(block, blockOffset, length, true, false, sendChecksum, datanode, clientTraceFmt, cachingStrategy)-->Line_22 $$ if (blockSender.didSendEntireByteRange()) [ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_6 $$ checkAccess(out, true, block, blockToken, Op.READ_BLOCK, BlockTokenSecretManager.AccessMode.READ)[ CD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_7 $$ BlockSender blockSender = null[ CD ]
Line_15 $$ String msg = "opReadBlock " + block + " received exception " + e-->Line_17 $$ sendResponse(ERROR, msg)[ FD ]
Line_7 $$ BlockSender blockSender = null-->Line_21 $$ long read = blockSender.sendBlock(out, baseStream, null)[ FD ]
Line_25 $$ if (!stat.hasStatus()) -->Line_26 $$ LOG.warn("Client " + peer.getRemoteAddressString() + " did not send a valid status code after reading. " + "Will close connection.")[ CD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_5 $$ DataOutputStream out = new DataOutputStream(new BufferedOutputStream(baseStream, HdfsConstants.SMALL_BUFFER_SIZE))[ CD ]
Line_13 $$ blockSender = new BlockSender(block, blockOffset, length, true, false, sendChecksum, datanode, clientTraceFmt, cachingStrategy)-->Line_48 $$ IOUtils.closeStream(blockSender)[ FD ]
Line_25 $$ if (!stat.hasStatus()) -->Line_27 $$ IOUtils.closeStream(out)[ CD ]
Line_39 $$ if (LOG.isTraceEnabled()) -->Line_40 $$ LOG.trace(dnR + ":Ignoring exception while serving " + block + " to " + remoteAddress, ignored)[ CD ]
Line_13 $$ blockSender = new BlockSender(block, blockOffset, length, true, false, sendChecksum, datanode, clientTraceFmt, cachingStrategy)-->Line_21 $$ long read = blockSender.sendBlock(out, baseStream, null)[ FD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_8 $$ DatanodeRegistration dnR = datanode.getDNRegistrationForBP(block.getBlockPoolId())[ CD ]
Line_2 $$ public void readBlock(final ExtendedBlock block, final Token<BlockTokenIdentifier> blockToken, final String clientName, final long blockOffset, final long length, final boolean sendChecksum, final CachingStrategy cachingStrategy) throws IOException -->Line_9 $$ final String clientTraceFmt = clientName.length() > 0 && ClientTraceLog.isInfoEnabled() ? String.format(DN_CLIENTTRACE_FORMAT, localAddress, remoteAddress, "%d", "HDFS_READ", clientName, "%d", dnR.getDatanodeUuid(), block, "%d") : dnR + " Served block " + block + " to " + remoteAddress[ CD ]
