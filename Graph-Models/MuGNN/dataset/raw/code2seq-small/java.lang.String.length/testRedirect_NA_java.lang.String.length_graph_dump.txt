Line_22 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_43 $$ for (int c; (c = in.read()) != -1; ) [ FD ]
Line_23 $$ for (int c, j = 0; (c = in.read()) != -1; j++) -->Line_43 $$ for (int c; (c = in.read()) != -1; ) [ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_18 $$ Assert.assertEquals(expected, webhdfs[i].getFileStatus(p).getLen())[ FD ]
Line_11 $$ final FSDataOutputStream out = webhdfs[i].create(p)-->Line_32 $$ out.close()[ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_42 $$ final FSDataInputStream in = webhdfs[i].open(p)[ FD ]
Line_43 $$ for (int c; (c = in.read()) != -1; ) -->Line_44 $$ b.append((char) c)[ CD ]
Line_23 $$ for (int c, j = 0; (c = in.read()) != -1; j++) -->Line_24 $$ Assert.assertEquals(writeStrings[i].charAt(j), c)[ CD ]
Line_42 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_49 $$ in.close()[ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_30 $$ final FSDataOutputStream out = webhdfs[i].append(p)[ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_37 $$ Assert.assertEquals(expected, webhdfs[i].getFileStatus(p).getLen())[ FD ]
Line_41 $$ final StringBuilder b = new StringBuilder()-->Line_44 $$ b.append((char) c)[ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_11 $$ final FSDataOutputStream out = webhdfs[i].create(p)[ FD ]
Line_23 $$ for (int c, j = 0; (c = in.read()) != -1; j++) -->Line_24 $$ Assert.assertEquals(writeStrings[i].charAt(j), c)[ FD ]
Line_41 $$ final StringBuilder b = new StringBuilder()-->Line_48 $$ Assert.assertEquals(appendStrings[i], b.substring(wlen))[ FD ]
Line_34 $$ for (int i = 0; i < webhdfs.length; i++) -->Line_37 $$ Assert.assertEquals(expected, webhdfs[i].getFileStatus(p).getLen())[ CD ]
Line_41 $$ final StringBuilder b = new StringBuilder()-->Line_47 $$ Assert.assertEquals(writeStrings[i], b.substring(0, wlen))[ FD ]
Line_15 $$ for (int i = 0; i < webhdfs.length; i++) -->Line_18 $$ Assert.assertEquals(expected, webhdfs[i].getFileStatus(p).getLen())[ CD ]
Line_11 $$ final FSDataOutputStream out = webhdfs[i].create(p)-->Line_31 $$ out.write(appendStrings[i].getBytes())[ FD ]
Line_30 $$ final FSDataOutputStream out = webhdfs[i].append(p)-->Line_31 $$ out.write(appendStrings[i].getBytes())[ FD ]
Line_15 $$ for (int i = 0; i < webhdfs.length; i++) -->Line_34 $$ for (int i = 0; i < webhdfs.length; i++) [ FD ]
Line_22 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_49 $$ in.close()[ FD ]
Line_22 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_23 $$ for (int c, j = 0; (c = in.read()) != -1; j++) [ FD ]
Line_42 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_43 $$ for (int c; (c = in.read()) != -1; ) [ FD ]
Line_11 $$ final FSDataOutputStream out = webhdfs[i].create(p)-->Line_13 $$ out.close()[ FD ]
Line_11 $$ final FSDataOutputStream out = webhdfs[i].create(p)-->Line_12 $$ out.write(writeStrings[i].getBytes())[ FD ]
Line_22 $$ final FSDataInputStream in = webhdfs[i].open(p)-->Line_26 $$ in.close()[ FD ]
Line_6 $$ final Path p = new Path(dir, filename)-->Line_22 $$ final FSDataInputStream in = webhdfs[i].open(p)[ FD ]
Line_30 $$ final FSDataOutputStream out = webhdfs[i].append(p)-->Line_32 $$ out.close()[ FD ]
