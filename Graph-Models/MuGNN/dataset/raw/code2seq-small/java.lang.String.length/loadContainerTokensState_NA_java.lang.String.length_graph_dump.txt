Line_7 $$ iter = new LeveldbIterator(db)-->Line_29 $$ iter.close()[ FD ]
Line_11 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_20 $$ state.previousMasterKey = parseMasterKey(entry.getValue())[ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_10 $$ while (iter.hasNext()) [ FD ]
Line_3 $$ RecoveredContainerTokensState state = new RecoveredContainerTokensState()-->Line_22 $$ loadContainerToken(state, fullKey, key, entry.getValue())[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_28 $$ if (iter != null) [ FD ]
Line_11 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_12 $$ String fullKey = asString(entry.getKey())[ FD ]
Line_19 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) -->Line_20 $$ state.previousMasterKey = parseMasterKey(entry.getValue())[ CD ]
Line_12 $$ String fullKey = asString(entry.getKey())-->Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_29 $$ iter.close()[ FD ]
Line_10 $$ while (iter.hasNext()) -->Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)[ CD ]
Line_2 $$ public RecoveredContainerTokensState loadContainerTokensState() throws IOException -->Line_5 $$ LeveldbIterator iter = null[ CD ]
Line_5 $$ LeveldbIterator iter = null-->Line_11 $$ Entry<byte[], byte[]> entry = iter.next()[ FD ]
Line_2 $$ public RecoveredContainerTokensState loadContainerTokensState() throws IOException -->Line_3 $$ RecoveredContainerTokensState state = new RecoveredContainerTokensState()[ CD ]
Line_10 $$ while (iter.hasNext()) -->Line_17 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) [ CD ]
Line_10 $$ while (iter.hasNext()) -->Line_12 $$ String fullKey = asString(entry.getKey())[ CD ]
Line_12 $$ String fullKey = asString(entry.getKey())-->Line_22 $$ loadContainerToken(state, fullKey, key, entry.getValue())[ FD ]
Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)-->Line_21 $$ if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) [ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_8 $$ iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX))[ FD ]
Line_12 $$ String fullKey = asString(entry.getKey())-->Line_13 $$ if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) [ FD ]
Line_17 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) -->Line_18 $$ state.currentMasterKey = parseMasterKey(entry.getValue())[ CD ]
Line_10 $$ while (iter.hasNext()) -->Line_11 $$ Entry<byte[], byte[]> entry = iter.next()[ CD ]
Line_21 $$ if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) -->Line_22 $$ loadContainerToken(state, fullKey, key, entry.getValue())[ CD ]
Line_28 $$ if (iter != null) -->Line_29 $$ iter.close()[ CD ]
Line_5 $$ LeveldbIterator iter = null-->Line_10 $$ while (iter.hasNext()) [ FD ]
Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)-->Line_17 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) [ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_8 $$ iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX))[ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_28 $$ if (iter != null) [ FD ]
Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)-->Line_19 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) [ FD ]
Line_9 $$ final int containerTokensKeyPrefixLength = CONTAINER_TOKENS_KEY_PREFIX.length()-->Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)[ FD ]
Line_11 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_22 $$ loadContainerToken(state, fullKey, key, entry.getValue())[ FD ]
Line_7 $$ iter = new LeveldbIterator(db)-->Line_11 $$ Entry<byte[], byte[]> entry = iter.next()[ FD ]
Line_5 $$ LeveldbIterator iter = null-->Line_7 $$ iter = new LeveldbIterator(db)[ FD ]
Line_10 $$ while (iter.hasNext()) -->Line_13 $$ if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) [ CD ]
Line_17 $$ if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) -->Line_19 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) [ CD ]
Line_2 $$ public RecoveredContainerTokensState loadContainerTokensState() throws IOException -->Line_32 $$ return state[ CD ]
Line_11 $$ Entry<byte[], byte[]> entry = iter.next()-->Line_18 $$ state.currentMasterKey = parseMasterKey(entry.getValue())[ FD ]
Line_19 $$ if (key.equals(PREV_MASTER_KEY_SUFFIX)) -->Line_21 $$ if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) [ CD ]
Line_16 $$ String key = fullKey.substring(containerTokensKeyPrefixLength)-->Line_22 $$ loadContainerToken(state, fullKey, key, entry.getValue())[ FD ]
Line_2 $$ public RecoveredContainerTokensState loadContainerTokensState() throws IOException -->Line_4 $$ state.activeTokens = new HashMap<ContainerId, Long>()[ CD ]
