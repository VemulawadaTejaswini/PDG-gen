Line_25 $$ final VirtualFile sources = artifactDir.findChild("sources")-->Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)[ FD ]
Line_29 $$ VirtualFile jarRoot = JarFileSystem.getInstance().getJarRootForLocalFile(srcFile)-->Line_30 $$ if (jarRoot == null || ArrayUtil.contains(jarRoot, library.getFiles(OrderRootType.SOURCES))) [ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_4 $$ if (jar == null)[ CD ]
Line_18 $$ VirtualFile propertiesFile = artifactDir.findChild("ivydata-" + version + ".properties")-->Line_19 $$ if (propertiesFile == null)[ FD ]
Line_21 $$ final Library library = getLibraryFromOrderEntriesList(orderEntries)-->Line_30 $$ if (jarRoot == null || ArrayUtil.contains(jarRoot, library.getFiles(OrderRootType.SOURCES))) [ FD ]
Line_3 $$ VirtualFile jar = getJarByPsiFile(psiFile)-->Line_4 $$ if (jar == null)[ FD ]
Line_11 $$ if (artifactDir == null)-->Line_12 $$ return Collections.emptyList()[ CD ]
Line_18 $$ VirtualFile propertiesFile = artifactDir.findChild("ivydata-" + version + ".properties")-->Line_36 $$ PsiFile propertiesFileFile = psiFile.getManager().findFile(propertiesFile)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_42 $$ return Collections.<AttachSourcesAction>singleton(new DownloadSourcesAction(psiFile.getProject(), "Downloading Ivy Sources", url) [ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_13 $$ String artifactName = artifactDir.getName()[ CD ]
Line_9 $$ String jarNameWithoutExt = jar.getNameWithoutExtension()-->Line_17 $$ String version = jarNameWithoutExt.substring(artifactName.length() + 1)[ FD ]
Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)-->Line_50 $$ srcFile.setBinaryContent(content)[ FD ]
Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)-->Line_51 $$ addSourceFile(JarFileSystem.getInstance().getJarRootForLocalFile(srcFile), library)[ FD ]
Line_26 $$ if (sources != null) -->Line_28 $$ if (srcFile != null) [ CD ]
Line_47 $$ existingSourcesFolder = artifactDir.createChildDirectory(this, "sources")-->Line_49 $$ VirtualFile srcFile = existingSourcesFolder.createChildData(this, sourceFileName)[ FD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_47 $$ existingSourcesFolder = artifactDir.createChildDirectory(this, "sources")[ FD ]
Line_45 $$ VirtualFile existingSourcesFolder = sources-->Line_46 $$ if (existingSourcesFolder == null) [ FD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_18 $$ VirtualFile propertiesFile = artifactDir.findChild("ivydata-" + version + ".properties")[ FD ]
Line_22 $$ if (library == null)-->Line_23 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_36 $$ PsiFile propertiesFileFile = psiFile.getManager().findFile(propertiesFile)[ CD ]
Line_21 $$ final Library library = getLibraryFromOrderEntriesList(orderEntries)-->Line_51 $$ addSourceFile(JarFileSystem.getInstance().getJarRootForLocalFile(srcFile), library)[ FD ]
Line_24 $$ final String sourceFileName = artifactName + '-' + version + "-sources.jar"-->Line_49 $$ VirtualFile srcFile = existingSourcesFolder.createChildData(this, sourceFileName)[ FD ]
Line_19 $$ if (propertiesFile == null)-->Line_20 $$ return Collections.emptyList()[ CD ]
Line_13 $$ String artifactName = artifactDir.getName()-->Line_14 $$ if (!jarNameWithoutExt.startsWith(artifactName) || !jarNameWithoutExt.substring(artifactName.length()).startsWith("-")) [ FD ]
Line_26 $$ if (sources != null) -->Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)[ CD ]
Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)-->Line_29 $$ VirtualFile jarRoot = JarFileSystem.getInstance().getJarRootForLocalFile(srcFile)[ FD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_13 $$ String artifactName = artifactDir.getName()[ FD ]
Line_46 $$ if (existingSourcesFolder == null) -->Line_47 $$ existingSourcesFolder = artifactDir.createChildDirectory(this, "sources")[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_7 $$ if (jarsDir == null || !jarsDir.getName().equals("jars"))[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_24 $$ final String sourceFileName = artifactName + '-' + version + "-sources.jar"[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_36 $$ PsiFile propertiesFileFile = psiFile.getManager().findFile(propertiesFile)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_19 $$ if (propertiesFile == null)[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_39 $$ final String url = extractUrl((PropertiesFile) propertiesFileFile, artifactName)[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_21 $$ final Library library = getLibraryFromOrderEntriesList(orderEntries)[ CD ]
Line_4 $$ if (jar == null)-->Line_5 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_42 $$ return Collections.<AttachSourcesAction>singleton(new DownloadSourcesAction(psiFile.getProject(), "Downloading Ivy Sources", url) [ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_18 $$ VirtualFile propertiesFile = artifactDir.findChild("ivydata-" + version + ".properties")[ CD ]
Line_3 $$ VirtualFile jar = getJarByPsiFile(psiFile)-->Line_9 $$ String jarNameWithoutExt = jar.getNameWithoutExtension()[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_17 $$ String version = jarNameWithoutExt.substring(artifactName.length() + 1)[ CD ]
Line_3 $$ VirtualFile jar = getJarByPsiFile(psiFile)-->Line_6 $$ VirtualFile jarsDir = jar.getParent()[ FD ]
Line_49 $$ VirtualFile srcFile = existingSourcesFolder.createChildData(this, sourceFileName)-->Line_51 $$ addSourceFile(JarFileSystem.getInstance().getJarRootForLocalFile(srcFile), library)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_14 $$ if (!jarNameWithoutExt.startsWith(artifactName) || !jarNameWithoutExt.substring(artifactName.length()).startsWith("-")) [ CD ]
Line_25 $$ final VirtualFile sources = artifactDir.findChild("sources")-->Line_26 $$ if (sources != null) [ FD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_11 $$ if (artifactDir == null)[ FD ]
Line_13 $$ String artifactName = artifactDir.getName()-->Line_39 $$ final String url = extractUrl((PropertiesFile) propertiesFileFile, artifactName)[ FD ]
Line_21 $$ final Library library = getLibraryFromOrderEntriesList(orderEntries)-->Line_22 $$ if (library == null)[ FD ]
Line_6 $$ VirtualFile jarsDir = jar.getParent()-->Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_6 $$ VirtualFile jarsDir = jar.getParent()[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_37 $$ if (!(propertiesFileFile instanceof PropertiesFile))[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()[ CD ]
Line_28 $$ if (srcFile != null) -->Line_30 $$ if (jarRoot == null || ArrayUtil.contains(jarRoot, library.getFiles(OrderRootType.SOURCES))) [ CD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_53 $$ new Notification(myMessageGroupId, "IO Error", "Failed to save " + artifactDir.getPath() + "/sources/" + sourceFileName, NotificationType.ERROR).notify(myProject)[ FD ]
Line_24 $$ final String sourceFileName = artifactName + '-' + version + "-sources.jar"-->Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)[ FD ]
Line_30 $$ if (jarRoot == null || ArrayUtil.contains(jarRoot, library.getFiles(OrderRootType.SOURCES))) -->Line_31 $$ return Collections.emptyList()[ CD ]
Line_40 $$ if (StringUtil.isEmptyOrSpaces(url))-->Line_41 $$ return Collections.emptyList()[ CD ]
Line_10 $$ final VirtualFile artifactDir = jarsDir.getParent()-->Line_25 $$ final VirtualFile sources = artifactDir.findChild("sources")[ FD ]
Line_6 $$ VirtualFile jarsDir = jar.getParent()-->Line_7 $$ if (jarsDir == null || !jarsDir.getName().equals("jars"))[ FD ]
Line_28 $$ if (srcFile != null) -->Line_33 $$ return Collections.<AttachSourcesAction>singleton(new AttachExistingSourceAction(jarRoot, library, "Attache sources from Ivy repository"))[ CD ]
Line_7 $$ if (jarsDir == null || !jarsDir.getName().equals("jars"))-->Line_8 $$ return Collections.emptyList()[ CD ]
Line_13 $$ String artifactName = artifactDir.getName()-->Line_17 $$ String version = jarNameWithoutExt.substring(artifactName.length() + 1)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_26 $$ if (sources != null) [ CD ]
Line_45 $$ VirtualFile existingSourcesFolder = sources-->Line_47 $$ existingSourcesFolder = artifactDir.createChildDirectory(this, "sources")[ FD ]
Line_28 $$ if (srcFile != null) -->Line_29 $$ VirtualFile jarRoot = JarFileSystem.getInstance().getJarRootForLocalFile(srcFile)[ CD ]
Line_37 $$ if (!(propertiesFileFile instanceof PropertiesFile))-->Line_38 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_22 $$ if (library == null)[ CD ]
Line_45 $$ VirtualFile existingSourcesFolder = sources-->Line_49 $$ VirtualFile srcFile = existingSourcesFolder.createChildData(this, sourceFileName)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_3 $$ VirtualFile jar = getJarByPsiFile(psiFile)[ FD ]
Line_14 $$ if (!jarNameWithoutExt.startsWith(artifactName) || !jarNameWithoutExt.substring(artifactName.length()).startsWith("-")) -->Line_15 $$ return Collections.emptyList()[ CD ]
Line_9 $$ String jarNameWithoutExt = jar.getNameWithoutExtension()-->Line_14 $$ if (!jarNameWithoutExt.startsWith(artifactName) || !jarNameWithoutExt.substring(artifactName.length()).startsWith("-")) [ FD ]
Line_27 $$ VirtualFile srcFile = sources.findChild(sourceFileName)-->Line_28 $$ if (srcFile != null) [ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_40 $$ if (StringUtil.isEmptyOrSpaces(url))[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_11 $$ if (artifactDir == null)[ CD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_25 $$ final VirtualFile sources = artifactDir.findChild("sources")[ CD ]
Line_39 $$ final String url = extractUrl((PropertiesFile) propertiesFileFile, artifactName)-->Line_40 $$ if (StringUtil.isEmptyOrSpaces(url))[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_21 $$ final Library library = getLibraryFromOrderEntriesList(orderEntries)[ FD ]
Line_49 $$ VirtualFile srcFile = existingSourcesFolder.createChildData(this, sourceFileName)-->Line_50 $$ srcFile.setBinaryContent(content)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_9 $$ String jarNameWithoutExt = jar.getNameWithoutExtension()[ CD ]
Line_42 $$ return Collections.<AttachSourcesAction>singleton(new DownloadSourcesAction(psiFile.getProject(), "Downloading Ivy Sources", url) -->Line_50 $$ srcFile.setBinaryContent(content)[ FD ]
Line_2 $$ public Collection<AttachSourcesAction> getActions(List<LibraryOrderEntry> orderEntries, final PsiFile psiFile) -->Line_3 $$ VirtualFile jar = getJarByPsiFile(psiFile)[ CD ]
