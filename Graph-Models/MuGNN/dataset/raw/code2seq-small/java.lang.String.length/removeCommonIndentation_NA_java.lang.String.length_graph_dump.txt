Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_25 $$ if (cutWidth > 0 && cutWidth < Integer.MAX_VALUE) [ CD ]
Line_4 $$ boolean isFirst = true-->Line_16 $$ isFirst = false[ FD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_5 $$ int cutWidth = Integer.MAX_VALUE[ CD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_38 $$ return ArrayUtil.toStringArray(result)[ CD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_6 $$ int firstIndentedLine = 0[ CD ]
Line_10 $$ int padWidth = 0-->Line_13 $$ padWidth = matcher.end()[ FD ]
Line_6 $$ int firstIndentedLine = 0-->Line_18 $$ firstIndentedLine = 1[ FD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_3 $$ final String[] lines = LineTokenizer.tokenize(docstring, false)[ CD ]
Line_27 $$ if (lines[i].length() >= cutWidth) -->Line_28 $$ lines[i] = lines[i].substring(cutWidth)[ CD ]
Line_25 $$ if (cutWidth > 0 && cutWidth < Integer.MAX_VALUE) -->Line_26 $$ for (int i = firstIndentedLine; i < lines.length; i += 1) [ CD ]
Line_17 $$ if (padWidth == 0) -->Line_18 $$ firstIndentedLine = 1[ CD ]
Line_15 $$ if (isFirst) -->Line_16 $$ isFirst = false[ CD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_3 $$ final String[] lines = LineTokenizer.tokenize(docstring, false)[ FD ]
Line_32 $$ final List<String> result = new ArrayList<String>()-->Line_36 $$ result.add(line)[ FD ]
Line_7 $$ for (String frag : lines) -->Line_8 $$ if (frag.length() == 0)[ FD ]
Line_11 $$ final Matcher matcher = ourSpacesPattern.matcher(frag)-->Line_12 $$ if (matcher.find()) [ FD ]
Line_10 $$ int padWidth = 0-->Line_22 $$ if (padWidth < cutWidth)[ FD ]
Line_23 $$ cutWidth = padWidth-->Line_27 $$ if (lines[i].length() >= cutWidth) [ FD ]
Line_11 $$ final Matcher matcher = ourSpacesPattern.matcher(frag)-->Line_13 $$ padWidth = matcher.end()[ FD ]
Line_13 $$ padWidth = matcher.end()-->Line_17 $$ if (padWidth == 0) [ FD ]
Line_23 $$ cutWidth = padWidth-->Line_28 $$ lines[i] = lines[i].substring(cutWidth)[ FD ]
Line_7 $$ for (String frag : lines) -->Line_11 $$ final Matcher matcher = ourSpacesPattern.matcher(frag)[ FD ]
Line_5 $$ int cutWidth = Integer.MAX_VALUE-->Line_27 $$ if (lines[i].length() >= cutWidth) [ FD ]
Line_15 $$ if (isFirst) -->Line_17 $$ if (padWidth == 0) [ CD ]
Line_22 $$ if (padWidth < cutWidth)-->Line_23 $$ cutWidth = padWidth[ CD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_32 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_33 $$ for (String line : lines) -->Line_36 $$ result.add(line)[ FD ]
Line_12 $$ if (matcher.find()) -->Line_13 $$ padWidth = matcher.end()[ CD ]
Line_10 $$ int padWidth = 0-->Line_23 $$ cutWidth = padWidth[ FD ]
Line_5 $$ int cutWidth = Integer.MAX_VALUE-->Line_22 $$ if (padWidth < cutWidth)[ FD ]
Line_10 $$ int padWidth = 0-->Line_17 $$ if (padWidth == 0) [ FD ]
Line_2 $$ public static String[] removeCommonIndentation(@NotNull final String docstring) -->Line_4 $$ boolean isFirst = true[ CD ]
Line_26 $$ for (int i = firstIndentedLine; i < lines.length; i += 1) -->Line_27 $$ if (lines[i].length() >= cutWidth) [ CD ]
Line_33 $$ for (String line : lines) -->Line_34 $$ if (line.startsWith(PyConsoleUtil.ORDINARY_PROMPT))[ FD ]
Line_13 $$ padWidth = matcher.end()-->Line_23 $$ cutWidth = padWidth[ FD ]
Line_32 $$ final List<String> result = new ArrayList<String>()-->Line_38 $$ return ArrayUtil.toStringArray(result)[ FD ]
Line_13 $$ padWidth = matcher.end()-->Line_22 $$ if (padWidth < cutWidth)[ FD ]
Line_5 $$ int cutWidth = Integer.MAX_VALUE-->Line_28 $$ lines[i] = lines[i].substring(cutWidth)[ FD ]
Line_5 $$ int cutWidth = Integer.MAX_VALUE-->Line_23 $$ cutWidth = padWidth[ FD ]
