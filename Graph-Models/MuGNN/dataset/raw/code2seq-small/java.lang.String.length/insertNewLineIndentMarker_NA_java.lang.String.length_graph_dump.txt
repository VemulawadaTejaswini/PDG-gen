Line_10 $$ int end = offset-->Line_15 $$ if (!isWhiteSpaceSymbol(text.charAt(end))) [ FD ]
Line_10 $$ int end = offset-->Line_12 $$ if (text.charAt(end) == '\n') [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_22 $$ return new TextRange(offset, offset + dummy.length())[ CD ]
Line_7 $$ if (!isWhiteSpaceSymbol(text.charAt(offset - 1))) -->Line_8 $$ return null[ CD ]
Line_4 $$ if (offset <= 0 || offset >= text.length() || !isWhiteSpaceSymbol(text.charAt(offset))) -->Line_5 $$ return null[ CD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_21 $$ document.insertString(offset, dummy)[ CD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_3 $$ CharSequence text = document.getImmutableCharSequence()[ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_11 $$ for (; end < text.length(); end++) [ CD ]
Line_3 $$ CharSequence text = document.getImmutableCharSequence()-->Line_11 $$ for (; end < text.length(); end++) [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_20 $$ String dummy = createDummy(file)[ FD ]
Line_10 $$ int end = offset-->Line_11 $$ for (; end < text.length(); end++) [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_7 $$ if (!isWhiteSpaceSymbol(text.charAt(offset - 1))) [ CD ]
Line_3 $$ CharSequence text = document.getImmutableCharSequence()-->Line_7 $$ if (!isWhiteSpaceSymbol(text.charAt(offset - 1))) [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_19 $$ setSequentialProcessingAllowed(false)[ CD ]
Line_11 $$ for (; end < text.length(); end++) -->Line_12 $$ if (text.charAt(end) == '\n') [ CD ]
Line_15 $$ if (!isWhiteSpaceSymbol(text.charAt(end))) -->Line_16 $$ return null[ CD ]
Line_3 $$ CharSequence text = document.getImmutableCharSequence()-->Line_12 $$ if (text.charAt(end) == '\n') [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_4 $$ if (offset <= 0 || offset >= text.length() || !isWhiteSpaceSymbol(text.charAt(offset))) [ FD ]
Line_11 $$ for (; end < text.length(); end++) -->Line_15 $$ if (!isWhiteSpaceSymbol(text.charAt(end))) [ CD ]
Line_3 $$ CharSequence text = document.getImmutableCharSequence()-->Line_15 $$ if (!isWhiteSpaceSymbol(text.charAt(end))) [ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_3 $$ CharSequence text = document.getImmutableCharSequence()[ CD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_4 $$ if (offset <= 0 || offset >= text.length() || !isWhiteSpaceSymbol(text.charAt(offset))) [ CD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_10 $$ int end = offset[ CD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_21 $$ document.insertString(offset, dummy)[ FD ]
Line_20 $$ String dummy = createDummy(file)-->Line_22 $$ return new TextRange(offset, offset + dummy.length())[ FD ]
Line_20 $$ String dummy = createDummy(file)-->Line_21 $$ document.insertString(offset, dummy)[ FD ]
Line_2 $$ public static TextRange insertNewLineIndentMarker(@NotNull PsiFile file, @NotNull Document document, int offset) -->Line_20 $$ String dummy = createDummy(file)[ CD ]
Line_3 $$ CharSequence text = document.getImmutableCharSequence()-->Line_4 $$ if (offset <= 0 || offset >= text.length() || !isWhiteSpaceSymbol(text.charAt(offset))) [ FD ]
