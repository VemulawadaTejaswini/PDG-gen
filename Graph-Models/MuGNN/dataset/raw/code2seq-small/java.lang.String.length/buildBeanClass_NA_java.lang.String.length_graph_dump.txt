Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_20 $$ out.append('\n')[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_25 $$ outputSetters(out)[ CD ]
Line_8 $$ if (!typeParams.isEmpty()) -->Line_10 $$ boolean first = true[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_25 $$ outputSetters(out)[ FD ]
Line_12 $$ if (!first) -->Line_13 $$ out.append(',')[ CD ]
Line_2 $$ public String buildBeanClass() -->Line_24 $$ outputGetters(out)[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_24 $$ outputGetters(out)[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_6 $$ out.append('\n')[ CD ]
Line_2 $$ public String buildBeanClass() -->Line_22 $$ outputFields(out)[ CD ]
Line_2 $$ public String buildBeanClass() -->Line_27 $$ return out.toString()[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_7 $$ out.append(myVisibility + " class " + className)[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_21 $$ out.append('[ CD ]
Line_2 $$ public String buildBeanClass() -->Line_4 $$ if (packageName.length() > 0)[ CD ]
Line_8 $$ if (!typeParams.isEmpty()) -->Line_9 $$ out.append('<')[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_26 $$ out.append("}\n")[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_15 $$ out.append(typeParam.getText())[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_26 $$ out.append("}\n")[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_22 $$ outputFields(out)[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_7 $$ out.append(myVisibility + " class " + className)[ CD ]
Line_10 $$ boolean first = true-->Line_12 $$ if (!first) [ FD ]
Line_11 $$ for (PsiTypeParameter typeParam : typeParams) -->Line_15 $$ out.append(typeParam.getText())[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_9 $$ out.append('<')[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_8 $$ if (!typeParams.isEmpty()) [ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_21 $$ out.append('[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_3 $$ final StringBuffer out = new StringBuffer(1024)[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_27 $$ return out.toString()[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_18 $$ out.append('>')[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_13 $$ out.append(',')[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_6 $$ out.append('\n')[ FD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_5 $$ out.append("package " + packageName + ';')[ FD ]
Line_4 $$ if (packageName.length() > 0)-->Line_5 $$ out.append("package " + packageName + ';')[ CD ]
Line_8 $$ if (!typeParams.isEmpty()) -->Line_18 $$ out.append('>')[ CD ]
Line_3 $$ final StringBuffer out = new StringBuffer(1024)-->Line_23 $$ outputConstructor(out)[ FD ]
Line_2 $$ public String buildBeanClass() -->Line_20 $$ out.append('\n')[ CD ]
Line_2 $$ public String buildBeanClass() -->Line_23 $$ outputConstructor(out)[ CD ]
Line_10 $$ boolean first = true-->Line_16 $$ first = false[ FD ]
