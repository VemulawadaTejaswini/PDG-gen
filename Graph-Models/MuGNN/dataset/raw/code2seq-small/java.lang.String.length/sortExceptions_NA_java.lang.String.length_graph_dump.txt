Line_2 $$ protected String sortExceptions(String line) -->Line_6 $$ int x = line.indexOf("throws ")[ CD ]
Line_18 $$ exception = exception.substring(0, exception.length() - 1)-->Line_14 $$ if (exception.equals(StringPool.OPEN_CURLY_BRACE)) [ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_11 $$ String[] exceptions = StringUtil.split(line.substring(x), CharPool.SPACE)[ CD ]
Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) -->Line_21 $$ line = StringUtil.replace(line, previousException + ", " + exception, exception + ", " + previousException)[ CD ]
Line_10 $$ String previousException = StringPool.BLANK-->Line_24 $$ previousException = exception[ FD ]
Line_18 $$ exception = exception.substring(0, exception.length() - 1)-->Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) [ FD ]
Line_21 $$ line = StringUtil.replace(line, previousException + ", " + exception, exception + ", " + previousException)-->Line_22 $$ return sortExceptions(line)[ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_7 $$ if (x == -1) [ CD ]
Line_13 $$ String exception = exceptions[i]-->Line_17 $$ if (exception.endsWith(StringPool.COMMA) || exception.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_13 $$ String exception = exceptions[i]-->Line_18 $$ exception = exception.substring(0, exception.length() - 1)[ FD ]
Line_18 $$ exception = exception.substring(0, exception.length() - 1)-->Line_24 $$ previousException = exception[ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_3 $$ if (!line.endsWith(StringPool.OPEN_CURLY_BRACE) && !line.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_24 $$ previousException = exception-->Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) [ FD ]
Line_12 $$ for (int i = 1; i < exceptions.length; i++) -->Line_17 $$ if (exception.endsWith(StringPool.COMMA) || exception.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_3 $$ if (!line.endsWith(StringPool.OPEN_CURLY_BRACE) && !line.endsWith(StringPool.SEMICOLON)) -->Line_4 $$ return line[ CD ]
Line_12 $$ for (int i = 1; i < exceptions.length; i++) -->Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) [ CD ]
Line_12 $$ for (int i = 1; i < exceptions.length; i++) -->Line_14 $$ if (exception.equals(StringPool.OPEN_CURLY_BRACE)) [ CD ]
Line_13 $$ String exception = exceptions[i]-->Line_24 $$ previousException = exception[ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_6 $$ int x = line.indexOf("throws ")[ FD ]
Line_13 $$ String exception = exceptions[i]-->Line_14 $$ if (exception.equals(StringPool.OPEN_CURLY_BRACE)) [ FD ]
Line_10 $$ String previousException = StringPool.BLANK-->Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) [ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_21 $$ line = StringUtil.replace(line, previousException + ", " + exception, exception + ", " + previousException)[ FD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_11 $$ String[] exceptions = StringUtil.split(line.substring(x), CharPool.SPACE)[ FD ]
Line_6 $$ int x = line.indexOf("throws ")-->Line_11 $$ String[] exceptions = StringUtil.split(line.substring(x), CharPool.SPACE)[ FD ]
Line_17 $$ if (exception.endsWith(StringPool.COMMA) || exception.endsWith(StringPool.SEMICOLON)) -->Line_18 $$ exception = exception.substring(0, exception.length() - 1)[ CD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_12 $$ for (int i = 1; i < exceptions.length; i++) [ CD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_26 $$ return line[ CD ]
Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) -->Line_22 $$ return sortExceptions(line)[ CD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_22 $$ return sortExceptions(line)[ FD ]
Line_12 $$ for (int i = 1; i < exceptions.length; i++) -->Line_24 $$ previousException = exception[ CD ]
Line_13 $$ String exception = exceptions[i]-->Line_20 $$ if (Validator.isNotNull(previousException) && (previousException.compareToIgnoreCase(exception) > 0)) [ FD ]
Line_7 $$ if (x == -1) -->Line_8 $$ return line[ CD ]
Line_18 $$ exception = exception.substring(0, exception.length() - 1)-->Line_17 $$ if (exception.endsWith(StringPool.COMMA) || exception.endsWith(StringPool.SEMICOLON)) [ FD ]
Line_12 $$ for (int i = 1; i < exceptions.length; i++) -->Line_13 $$ String exception = exceptions[i][ CD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_10 $$ String previousException = StringPool.BLANK[ CD ]
Line_2 $$ protected String sortExceptions(String line) -->Line_3 $$ if (!line.endsWith(StringPool.OPEN_CURLY_BRACE) && !line.endsWith(StringPool.SEMICOLON)) [ CD ]
Line_6 $$ int x = line.indexOf("throws ")-->Line_7 $$ if (x == -1) [ FD ]
