Line_5 $$ if (lexer.getTokenType() != left.getElementType())-->Line_6 $$ return ParserDefinition.SpaceRequirements.MUST[ CD ]
Line_12 $$ if (lexer.getTokenType() != right.getElementType())-->Line_13 $$ return ParserDefinition.SpaceRequirements.MUST[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_3 $$ String textStr = left.getText() + right.getText()[ FD ]
Line_3 $$ String textStr = left.getText() + right.getText()-->Line_10 $$ if (lexer.getTokenEnd() != textStr.length())[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_4 $$ lexer.start(textStr, 0, textStr.length())[ FD ]
Line_7 $$ if (lexer.getTokenEnd() != left.getTextLength())-->Line_8 $$ return ParserDefinition.SpaceRequirements.MUST[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_9 $$ lexer.advance()[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_7 $$ if (lexer.getTokenEnd() != left.getTextLength())[ CD ]
Line_3 $$ String textStr = left.getText() + right.getText()-->Line_4 $$ lexer.start(textStr, 0, textStr.length())[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_12 $$ if (lexer.getTokenType() != right.getElementType())[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_3 $$ String textStr = left.getText() + right.getText()[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_12 $$ if (lexer.getTokenType() != right.getElementType())[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_4 $$ lexer.start(textStr, 0, textStr.length())[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_14 $$ return ParserDefinition.SpaceRequirements.MAY[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_9 $$ lexer.advance()[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_5 $$ if (lexer.getTokenType() != left.getElementType())[ FD ]
Line_10 $$ if (lexer.getTokenEnd() != textStr.length())-->Line_11 $$ return ParserDefinition.SpaceRequirements.MUST[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_10 $$ if (lexer.getTokenEnd() != textStr.length())[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_10 $$ if (lexer.getTokenEnd() != textStr.length())[ CD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_7 $$ if (lexer.getTokenEnd() != left.getTextLength())[ FD ]
Line_2 $$ public static ParserDefinition.SpaceRequirements canStickTokensTogetherByLexer(ASTNode left, ASTNode right, Lexer lexer) -->Line_5 $$ if (lexer.getTokenType() != left.getElementType())[ CD ]
