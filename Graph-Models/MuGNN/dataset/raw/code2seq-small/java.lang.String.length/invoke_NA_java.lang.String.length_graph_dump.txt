Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_21 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_39 $$ int selectionEnd = commentEnd-->Line_57 $$ selectionEnd = myDocument.getLineEndOffset(myDocument.getLineNumber(selectionEnd))[ FD ]
Line_63 $$ int caretOffset = myCaret.getOffset()-->Line_67 $$ final int lineNumber = myDocument.getLineNumber(caretOffset)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_30 $$ suffix = commenter.getBlockCommentSuffix()[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_64 $$ if (commenter instanceof IndentedCommenter) [ FD ]
Line_34 $$ TextRange commentedRange = findCommentedRange(commenter)-->Line_37 $$ final int commentEnd = commentedRange.getEndOffset()[ FD ]
Line_56 $$ selectionStart = myDocument.getLineStartOffset(myDocument.getLineNumber(selectionStart))-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_19 $$ final String suffix-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_35 $$ if (commentedRange != null) -->Line_39 $$ int selectionEnd = commentEnd[ CD ]
Line_11 $$ if (!FileDocumentManager.getInstance().requestWriting(myDocument, project)) -->Line_12 $$ return[ CD ]
Line_66 $$ if (value != null && value == Boolean.TRUE) -->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ CD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_35 $$ if (commentedRange != null) -->Line_37 $$ final int commentEnd = commentedRange.getEndOffset()[ CD ]
Line_63 $$ int caretOffset = myCaret.getOffset()-->Line_74 $$ myDocument.insertString(caretOffset, prefix + suffix)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_53 $$ if (commenter instanceof IndentedCommenter) [ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_16 $$ if (commenter == null)[ FD ]
Line_38 $$ int selectionStart = commentStart-->Line_56 $$ selectionStart = myDocument.getLineStartOffset(myDocument.getLineNumber(selectionStart))[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_51 $$ int selectionStart = myCaret.getSelectionStart()[ CD ]
Line_19 $$ final String suffix-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_66 $$ if (value != null && value == Boolean.TRUE) -->Line_71 $$ return[ CD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_34 $$ TextRange commentedRange = findCommentedRange(commenter)-->Line_35 $$ if (commentedRange != null) [ FD ]
Line_64 $$ if (commenter instanceof IndentedCommenter) -->Line_66 $$ if (value != null && value == Boolean.TRUE) [ CD ]
Line_55 $$ if (value != null && value == Boolean.TRUE) -->Line_56 $$ selectionStart = myDocument.getLineStartOffset(myDocument.getLineNumber(selectionStart))[ CD ]
Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_30 $$ suffix = commenter.getBlockCommentSuffix()[ FD ]
Line_66 $$ if (value != null && value == Boolean.TRUE) -->Line_68 $$ final int start = myDocument.getLineStartOffset(lineNumber)[ CD ]
Line_35 $$ if (commentedRange != null) -->Line_40 $$ if (myCaret.hasSelection()) [ CD ]
Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ CD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_75 $$ myCaret.moveToOffset(caretOffset + prefix.length())[ CD ]
Line_30 $$ suffix = commenter.getBlockCommentSuffix()-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_18 $$ final String prefix-->Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_53 $$ if (commenter instanceof IndentedCommenter) -->Line_54 $$ final Boolean value = ((IndentedCommenter) commenter).forceIndentedLineComment()[ CD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_64 $$ if (commenter instanceof IndentedCommenter) [ CD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_62 $$ EditorUtil.fillVirtualSpaceUntilCaret(editor)[ CD ]
Line_29 $$ prefix = commenter.getBlockCommentPrefix()-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_38 $$ int selectionStart = commentStart-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_74 $$ myDocument.insertString(caretOffset, prefix + suffix)[ CD ]
Line_35 $$ if (commentedRange != null) -->Line_50 $$ if (myCaret.hasSelection()) [ CD ]
Line_66 $$ if (value != null && value == Boolean.TRUE) -->Line_67 $$ final int lineNumber = myDocument.getLineNumber(caretOffset)[ CD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_18 $$ final String prefix-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_41 $$ selectionStart = myCaret.getSelectionStart()-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_32 $$ if (prefix == null || suffix == null)-->Line_33 $$ return[ CD ]
Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_29 $$ prefix = commenter.getBlockCommentPrefix()-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_39 $$ int selectionEnd = commentEnd-->Line_42 $$ selectionEnd = myCaret.getSelectionEnd()[ FD ]
Line_19 $$ final String suffix-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_41 $$ selectionStart = myCaret.getSelectionStart()-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_34 $$ TextRange commentedRange = findCommentedRange(commenter)-->Line_36 $$ final int commentStart = commentedRange.getStartOffset()[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_63 $$ int caretOffset = myCaret.getOffset()[ CD ]
Line_19 $$ final String suffix-->Line_30 $$ suffix = commenter.getBlockCommentSuffix()[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_52 $$ int selectionEnd = myCaret.getSelectionEnd()[ CD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_29 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_20 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_29 $$ prefix = commenter.getBlockCommentPrefix()[ CD ]
Line_4 $$ if (!CodeInsightUtilBase.prepareEditorForWrite(editor))-->Line_5 $$ return[ CD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_22 $$ mySelfManagedCommenterData = selfManagingCommenter.createBlockCommentingState(caret.getSelectionStart(), caret.getSelectionEnd(), myDocument, myFile)[ CD ]
Line_57 $$ selectionEnd = myDocument.getLineEndOffset(myDocument.getLineNumber(selectionEnd))-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_64 $$ if (commenter instanceof IndentedCommenter) -->Line_65 $$ final Boolean value = ((IndentedCommenter) commenter).forceIndentedLineComment()[ CD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_75 $$ myCaret.moveToOffset(caretOffset + prefix.length())[ FD ]
Line_40 $$ if (myCaret.hasSelection()) -->Line_42 $$ selectionEnd = myCaret.getSelectionEnd()[ CD ]
Line_30 $$ suffix = commenter.getBlockCommentSuffix()-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_55 $$ if (value != null && value == Boolean.TRUE) -->Line_57 $$ selectionEnd = myDocument.getLineEndOffset(myDocument.getLineNumber(selectionEnd))[ CD ]
Line_44 $$ if ((commentStart < selectionStart || commentStart >= selectionEnd) && (commentEnd <= selectionStart || commentEnd > selectionEnd)) -->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ CD ]
Line_18 $$ final String prefix-->Line_29 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_19 $$ final String suffix-->Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ CD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_34 $$ TextRange commentedRange = findCommentedRange(commenter)-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_23 $$ if (mySelfManagedCommenterData == null) [ CD ]
Line_38 $$ int selectionStart = commentStart-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_44 $$ if ((commentStart < selectionStart || commentStart >= selectionEnd) && (commentEnd <= selectionStart || commentEnd > selectionEnd)) -->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ CD ]
Line_69 $$ final int end = myDocument.getLineEndOffset(lineNumber)-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_35 $$ if (commentedRange != null) -->Line_36 $$ final int commentStart = commentedRange.getStartOffset()[ CD ]
Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_18 $$ final String prefix-->Line_75 $$ myCaret.moveToOffset(caretOffset + prefix.length())[ FD ]
Line_41 $$ selectionStart = myCaret.getSelectionStart()-->Line_56 $$ selectionStart = myDocument.getLineStartOffset(myDocument.getLineNumber(selectionStart))[ FD ]
Line_67 $$ final int lineNumber = myDocument.getLineNumber(caretOffset)-->Line_68 $$ final int start = myDocument.getLineStartOffset(lineNumber)[ FD ]
Line_16 $$ if (commenter == null)-->Line_17 $$ return[ CD ]
Line_42 $$ selectionEnd = myCaret.getSelectionEnd()-->Line_57 $$ selectionEnd = myDocument.getLineEndOffset(myDocument.getLineNumber(selectionEnd))[ FD ]
Line_67 $$ final int lineNumber = myDocument.getLineNumber(caretOffset)-->Line_69 $$ final int end = myDocument.getLineEndOffset(lineNumber)[ FD ]
Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_21 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_26 $$ prefix = selfManagingCommenter.getBlockCommentPrefix(caret.getSelectionStart(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_30 $$ suffix = commenter.getBlockCommentSuffix()-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_38 $$ int selectionStart = commentStart-->Line_41 $$ selectionStart = myCaret.getSelectionStart()[ FD ]
Line_66 $$ if (value != null && value == Boolean.TRUE) -->Line_69 $$ final int end = myDocument.getLineEndOffset(lineNumber)[ CD ]
Line_68 $$ final int start = myDocument.getLineStartOffset(lineNumber)-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_42 $$ selectionEnd = myCaret.getSelectionEnd()-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_50 $$ if (myCaret.hasSelection()) -->Line_53 $$ if (commenter instanceof IndentedCommenter) [ CD ]
Line_39 $$ int selectionEnd = commentEnd-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_42 $$ selectionEnd = myCaret.getSelectionEnd()-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_21 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_27 $$ suffix = selfManagingCommenter.getBlockCommentSuffix(caret.getSelectionEnd(), myDocument, mySelfManagedCommenterData)[ FD ]
Line_40 $$ if (myCaret.hasSelection()) -->Line_41 $$ selectionStart = myCaret.getSelectionStart()[ CD ]
Line_39 $$ int selectionEnd = commentEnd-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_29 $$ prefix = commenter.getBlockCommentPrefix()-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_29 $$ prefix = commenter.getBlockCommentPrefix()-->Line_75 $$ myCaret.moveToOffset(caretOffset + prefix.length())[ FD ]
Line_18 $$ final String prefix-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_19 $$ final String suffix-->Line_70 $$ commentRange(start, end, prefix, suffix, commenter)[ FD ]
Line_18 $$ final String prefix-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_20 $$ if (commenter instanceof SelfManagingCommenter) -->Line_30 $$ suffix = commenter.getBlockCommentSuffix()[ CD ]
Line_18 $$ final String prefix-->Line_60 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_21 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_22 $$ mySelfManagedCommenterData = selfManagingCommenter.createBlockCommentingState(caret.getSelectionStart(), caret.getSelectionEnd(), myDocument, myFile)[ FD ]
Line_35 $$ if (commentedRange != null) -->Line_38 $$ int selectionStart = commentStart[ CD ]
Line_35 $$ if (commentedRange != null) -->Line_44 $$ if ((commentStart < selectionStart || commentStart >= selectionEnd) && (commentEnd <= selectionStart || commentEnd > selectionEnd)) [ CD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_29 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_29 $$ prefix = commenter.getBlockCommentPrefix()-->Line_45 $$ commentRange(selectionStart, selectionEnd, prefix, suffix, commenter)[ FD ]
Line_15 $$ final Commenter commenter = findCommenter(myFile, myEditor, caret)-->Line_34 $$ TextRange commentedRange = findCommentedRange(commenter)[ FD ]
Line_30 $$ suffix = commenter.getBlockCommentSuffix()-->Line_47 $$ uncommentRange(commentedRange, trim(prefix), trim(suffix), commenter)[ FD ]
Line_53 $$ if (commenter instanceof IndentedCommenter) -->Line_55 $$ if (value != null && value == Boolean.TRUE) [ CD ]
