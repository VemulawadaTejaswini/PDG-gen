Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_4 $$ String[] classPathEntries = inputClassPath.split(File.pathSeparator)[ CD ]
Line_8 $$ File workingDir = new File(pwd.toString())-->Line_43 $$ File classPathJar = File.createTempFile("classpath-", ".jar", workingDir)[ FD ]
Line_30 $$ fileCpEntry = new File(classPathEntry)-->Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_39 $$ String jarClassPath = StringUtils.join(" ", classPathEntryList)[ CD ]
Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()-->Line_34 $$ classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR[ FD ]
Line_12 $$ List<String> classPathEntryList = new ArrayList<String>(classPathEntries.length)-->Line_39 $$ String jarClassPath = StringUtils.join(" ", classPathEntryList)[ FD ]
Line_26 $$ File fileCpEntry = null-->Line_28 $$ fileCpEntry = new File(workingDir, classPathEntry)[ FD ]
Line_18 $$ Path globPath = new Path(classPathEntry).suffix("-->Line_19 $$ FileStatus[] wildcardJars = FileContext.getLocalFSFileContext().util().globStatus(globPath)[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_3 $$ Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) : callerEnv[ CD ]
Line_9 $$ if (!workingDir.mkdirs()) -->Line_10 $$ LOG.debug("mkdirs false for " + workingDir + ", execution will continue")[ CD ]
Line_8 $$ File workingDir = new File(pwd.toString())-->Line_9 $$ if (!workingDir.mkdirs()) [ FD ]
Line_27 $$ if (!new Path(classPathEntry).isAbsolute()) -->Line_28 $$ fileCpEntry = new File(workingDir, classPathEntry)[ CD ]
Line_27 $$ if (!new Path(classPathEntry).isAbsolute()) -->Line_30 $$ fileCpEntry = new File(classPathEntry)[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_40 $$ Manifest jarManifest = new Manifest()[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_46 $$ JarOutputStream jos = null[ CD ]
Line_45 $$ BufferedOutputStream bos = null-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_39 $$ String jarClassPath = StringUtils.join(" ", classPathEntryList)-->Line_42 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(), jarClassPath)[ FD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_26 $$ File fileCpEntry = null[ CD ]
Line_12 $$ List<String> classPathEntryList = new ArrayList<String>(classPathEntries.length)-->Line_36 $$ classPathEntryList.add(classPathEntryUrl)[ FD ]
Line_28 $$ fileCpEntry = new File(workingDir, classPathEntry)-->Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ FD ]
Line_48 $$ fos = new FileOutputStream(classPathJar)-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_43 $$ File classPathJar = File.createTempFile("classpath-", ".jar", workingDir)-->Line_54 $$ return classPathJar.getCanonicalPath()[ FD ]
Line_26 $$ File fileCpEntry = null-->Line_30 $$ fileCpEntry = new File(classPathEntry)[ FD ]
Line_21 $$ for (FileStatus wildcardJar : wildcardJars) -->Line_22 $$ classPathEntryList.add(wildcardJar.getPath().toUri().toURL().toExternalForm())[ FD ]
Line_40 $$ Manifest jarManifest = new Manifest()-->Line_42 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(), jarClassPath)[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_4 $$ String[] classPathEntries = inputClassPath.split(File.pathSeparator)[ FD ]
Line_50 $$ jos = new JarOutputStream(bos, jarManifest)-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_3 $$ Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) : callerEnv-->Line_6 $$ classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i], StringUtils.ENV_VAR_PATTERN, env)[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_8 $$ File workingDir = new File(pwd.toString())[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_45 $$ BufferedOutputStream bos = null[ CD ]
Line_44 $$ FileOutputStream fos = null-->Line_48 $$ fos = new FileOutputStream(classPathJar)[ FD ]
Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()-->Line_36 $$ classPathEntryList.add(classPathEntryUrl)[ FD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_33 $$ if (classPathEntry.endsWith(Path.SEPARATOR) && !classPathEntryUrl.endsWith(Path.SEPARATOR)) [ CD ]
Line_40 $$ Manifest jarManifest = new Manifest()-->Line_41 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0")[ FD ]
Line_44 $$ FileOutputStream fos = null-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_46 $$ JarOutputStream jos = null-->Line_50 $$ jos = new JarOutputStream(bos, jarManifest)[ FD ]
Line_46 $$ JarOutputStream jos = null-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_49 $$ bos = new BufferedOutputStream(fos)-->Line_52 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_8 $$ File workingDir = new File(pwd.toString())[ FD ]
Line_5 $$ for (int i = 0; i < classPathEntries.length; ++i) -->Line_6 $$ classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i], StringUtils.ENV_VAR_PATTERN, env)[ CD ]
Line_13 $$ for (String classPathEntry : classPathEntries) -->Line_33 $$ if (classPathEntry.endsWith(Path.SEPARATOR) && !classPathEntryUrl.endsWith(Path.SEPARATOR)) [ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_42 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(), jarClassPath)[ CD ]
Line_28 $$ fileCpEntry = new File(workingDir, classPathEntry)-->Line_30 $$ fileCpEntry = new File(classPathEntry)[ FD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ CD ]
Line_34 $$ classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR-->Line_36 $$ classPathEntryList.add(classPathEntryUrl)[ FD ]
Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()-->Line_33 $$ if (classPathEntry.endsWith(Path.SEPARATOR) && !classPathEntryUrl.endsWith(Path.SEPARATOR)) [ FD ]
Line_45 $$ BufferedOutputStream bos = null-->Line_49 $$ bos = new BufferedOutputStream(fos)[ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_12 $$ List<String> classPathEntryList = new ArrayList<String>(classPathEntries.length)[ CD ]
Line_13 $$ for (String classPathEntry : classPathEntries) -->Line_14 $$ if (classPathEntry.length() == 0) [ FD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_27 $$ if (!new Path(classPathEntry).isAbsolute()) [ CD ]
Line_33 $$ if (classPathEntry.endsWith(Path.SEPARATOR) && !classPathEntryUrl.endsWith(Path.SEPARATOR)) -->Line_34 $$ classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_43 $$ File classPathJar = File.createTempFile("classpath-", ".jar", workingDir)[ CD ]
Line_19 $$ FileStatus[] wildcardJars = FileContext.getLocalFSFileContext().util().globStatus(globPath)-->Line_20 $$ if (wildcardJars != null) [ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_54 $$ return classPathJar.getCanonicalPath()[ CD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_19 $$ FileStatus[] wildcardJars = FileContext.getLocalFSFileContext().util().globStatus(globPath)[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_41 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0")[ CD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_36 $$ classPathEntryList.add(classPathEntryUrl)[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_5 $$ for (int i = 0; i < classPathEntries.length; ++i) [ CD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_18 $$ Path globPath = new Path(classPathEntry).suffix("[ CD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_44 $$ FileOutputStream fos = null[ CD ]
Line_26 $$ File fileCpEntry = null-->Line_32 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ FD ]
Line_13 $$ for (String classPathEntry : classPathEntries) -->Line_17 $$ if (classPathEntry.endsWith("*")) [ FD ]
Line_2 $$ public static String createJarWithClassPath(String inputClassPath, Path pwd, Map<String, String> callerEnv) throws IOException -->Line_9 $$ if (!workingDir.mkdirs()) [ CD ]
Line_12 $$ List<String> classPathEntryList = new ArrayList<String>(classPathEntries.length)-->Line_22 $$ classPathEntryList.add(wildcardJar.getPath().toUri().toURL().toExternalForm())[ FD ]
Line_17 $$ if (classPathEntry.endsWith("*")) -->Line_20 $$ if (wildcardJars != null) [ CD ]
