Line_49 $$ for (String classPathEntry : classPathEntries) -->Line_53 $$ if (classPathEntry.endsWith("*")) [ FD ]
Line_58 $$ for (FileStatus wildcardJar : wildcardJars) -->Line_59 $$ classPathEntryList.add(wildcardJar.getPath().toUri().toURL().toExternalForm())[ FD ]
Line_53 $$ if (classPathEntry.endsWith("*")) -->Line_65 $$ if (!new Path(classPathEntry).isAbsolute()) [ CD ]
Line_68 $$ fileCpEntry = new File(classPathEntry)-->Line_70 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ FD ]
Line_39 $$ File workingDir = new File(pwd.toString())-->Line_40 $$ if (!workingDir.mkdirs()) [ FD ]
Line_79 $$ classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR-->Line_81 $$ classPathEntryList.add(classPathEntryUrl)[ FD ]
Line_66 $$ fileCpEntry = new File(workingDir, classPathEntry)-->Line_70 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ FD ]
Line_53 $$ if (classPathEntry.endsWith("*")) -->Line_56 $$ FileStatus[] wildcardJars = FileContext.getLocalFSFileContext().util().globStatus(globPath)[ CD ]
Line_95 $$ fos = new FileOutputStream(classPathJar)-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_65 $$ if (!new Path(classPathEntry).isAbsolute()) -->Line_66 $$ fileCpEntry = new File(workingDir, classPathEntry)[ CD ]
Line_92 $$ BufferedOutputStream bos = null-->Line_96 $$ bos = new BufferedOutputStream(fos)[ FD ]
Line_93 $$ JarOutputStream jos = null-->Line_97 $$ jos = new JarOutputStream(bos, jarManifest)[ FD ]
Line_70 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()-->Line_79 $$ classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR[ FD ]
Line_66 $$ fileCpEntry = new File(workingDir, classPathEntry)-->Line_68 $$ fileCpEntry = new File(classPathEntry)[ FD ]
Line_84 $$ String jarClassPath = StringUtils.join(" ", classPathEntryList)-->Line_88 $$ jarManifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(), jarClassPath)[ FD ]
Line_53 $$ if (classPathEntry.endsWith("*")) -->Line_70 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()[ CD ]
Line_56 $$ FileStatus[] wildcardJars = FileContext.getLocalFSFileContext().util().globStatus(globPath)-->Line_57 $$ if (wildcardJars != null) [ FD ]
Line_70 $$ String classPathEntryUrl = fileCpEntry.toURI().toURL().toExternalForm()-->Line_81 $$ classPathEntryList.add(classPathEntryUrl)[ FD ]
Line_91 $$ FileOutputStream fos = null-->Line_95 $$ fos = new FileOutputStream(classPathJar)[ FD ]
Line_49 $$ for (String classPathEntry : classPathEntries) -->Line_50 $$ if (classPathEntry.length() == 0) [ FD ]
Line_97 $$ jos = new JarOutputStream(bos, jarManifest)-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_53 $$ if (classPathEntry.endsWith("*")) -->Line_57 $$ if (wildcardJars != null) [ CD ]
Line_65 $$ if (!new Path(classPathEntry).isAbsolute()) -->Line_68 $$ fileCpEntry = new File(classPathEntry)[ CD ]
Line_53 $$ if (classPathEntry.endsWith("*")) -->Line_81 $$ classPathEntryList.add(classPathEntryUrl)[ CD ]
Line_36 $$ for (int i = 0; i < classPathEntries.length; ++i) -->Line_37 $$ classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i], StringUtils.ENV_VAR_PATTERN, env)[ CD ]
Line_91 $$ FileOutputStream fos = null-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_92 $$ BufferedOutputStream bos = null-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_96 $$ bos = new BufferedOutputStream(fos)-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
Line_93 $$ JarOutputStream jos = null-->Line_99 $$ IOUtils.cleanup(LOG, jos, bos, fos)[ FD ]
