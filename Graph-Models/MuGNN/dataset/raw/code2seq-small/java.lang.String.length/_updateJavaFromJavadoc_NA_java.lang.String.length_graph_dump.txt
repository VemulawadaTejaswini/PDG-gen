Line_30 $$ Map<String, Element> fieldElementsMap = new HashMap()-->Line_34 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_12 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_23 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ FD ]
Line_3 $$ File javadocFile = new File(_BASEDIR + fileName + "doc")-->Line_13 $$ Document document = _saxReader.read(javadocFile)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_11 $$ String[] lines = StringUtil.splitLines(oldContent)[ FD ]
Line_11 $$ String[] lines = StringUtil.splitLines(oldContent)-->Line_28 $$ commentsMap.put(javaMethod.getLineNumber(), _getJavaMethodComment(lines, methodElementsMap, javaMethod))[ FD ]
Line_46 $$ String comments = commentsMap.get(lineNumber)-->Line_48 $$ sb.append(comments)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_53 $$ String newContent = sb.toString().trim()[ CD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_25 $$ if (commentsMap.containsKey(javaMethod.getLineNumber())) [ FD ]
Line_47 $$ if (comments != null) -->Line_48 $$ sb.append(comments)[ CD ]
Line_32 $$ for (Element fieldElement : fieldElements) -->Line_34 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_17 $$ Map<String, Element> methodElementsMap = new HashMap()-->Line_21 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_16 $$ commentsMap.put(javaClass.getLineNumber(), _getJavaClassComment(rootElement))[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_16 $$ commentsMap.put(javaClass.getLineNumber(), _getJavaClassComment(rootElement))[ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_3 $$ File javadocFile = new File(_BASEDIR + fileName + "doc")[ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_30 $$ Map<String, Element> fieldElementsMap = new HashMap()[ CD ]
Line_32 $$ for (Element fieldElement : fieldElements) -->Line_33 $$ String fieldKey = _getFieldKey(fieldElement)[ FD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_41 $$ commentsMap.put(javaField.getLineNumber(), _getJavaFieldComment(lines, fieldElementsMap, javaField))[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_17 $$ Map<String, Element> methodElementsMap = new HashMap()[ CD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_47 $$ if (comments != null) [ CD ]
Line_37 $$ for (JavaField javaField : javaFields) -->Line_38 $$ if (commentsMap.containsKey(javaField.getLineNumber())) [ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_8 $$ if (oldContent == null) [ CD ]
Line_53 $$ String newContent = sb.toString().trim()-->Line_55 $$ _fileUtil.write(file, newContent)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_12 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) [ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ FD ]
Line_7 $$ File file = new File(_BASEDIR + fileName)-->Line_9 $$ oldContent = _fileUtil.read(file)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_13 $$ Document document = _saxReader.read(javadocFile)[ CD ]
Line_13 $$ Document document = _saxReader.read(javadocFile)-->Line_14 $$ Element rootElement = document.getRootElement()[ FD ]
Line_8 $$ if (oldContent == null) -->Line_9 $$ oldContent = _fileUtil.read(file)[ CD ]
Line_14 $$ Element rootElement = document.getRootElement()-->Line_16 $$ commentsMap.put(javaClass.getLineNumber(), _getJavaClassComment(rootElement))[ FD ]
Line_37 $$ for (JavaField javaField : javaFields) -->Line_41 $$ commentsMap.put(javaField.getLineNumber(), _getJavaFieldComment(lines, fieldElementsMap, javaField))[ FD ]
Line_20 $$ String methodKey = _getMethodKey(methodElement)-->Line_21 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_4 $$ if (!javadocFile.exists()) [ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_18 $$ List<Element> methodElements = rootElement.elements("method")[ CD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_45 $$ String line = lines[lineNumber - 1][ CD ]
Line_19 $$ for (Element methodElement : methodElements) -->Line_21 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_9 $$ oldContent = _fileUtil.read(file)-->Line_11 $$ String[] lines = StringUtil.splitLines(oldContent)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_23 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ CD ]
Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_53 $$ String newContent = sb.toString().trim()[ FD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_28 $$ commentsMap.put(javaMethod.getLineNumber(), _getJavaMethodComment(lines, methodElementsMap, javaMethod))[ FD ]
Line_30 $$ Map<String, Element> fieldElementsMap = new HashMap()-->Line_41 $$ commentsMap.put(javaField.getLineNumber(), _getJavaFieldComment(lines, fieldElementsMap, javaField))[ FD ]
Line_12 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_16 $$ commentsMap.put(javaClass.getLineNumber(), _getJavaClassComment(rootElement))[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_12 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))[ CD ]
Line_17 $$ Map<String, Element> methodElementsMap = new HashMap()-->Line_28 $$ commentsMap.put(javaMethod.getLineNumber(), _getJavaMethodComment(lines, methodElementsMap, javaMethod))[ FD ]
Line_12 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(oldContent))-->Line_36 $$ JavaField[] javaFields = javaClass.getFields()[ FD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_46 $$ String comments = commentsMap.get(lineNumber)[ CD ]
Line_4 $$ if (!javadocFile.exists()) -->Line_5 $$ return[ CD ]
Line_7 $$ File file = new File(_BASEDIR + fileName)-->Line_55 $$ _fileUtil.write(file, newContent)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()[ CD ]
Line_24 $$ for (JavaMethod javaMethod : javaMethods) -->Line_25 $$ if (commentsMap.containsKey(javaMethod.getLineNumber())) [ FD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_46 $$ String comments = commentsMap.get(lineNumber)[ FD ]
Line_53 $$ String newContent = sb.toString().trim()-->Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ FD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_50 $$ sb.append(line)[ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_8 $$ if (oldContent == null) [ FD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_46 $$ String comments = commentsMap.get(lineNumber)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_14 $$ Element rootElement = document.getRootElement()[ CD ]
Line_46 $$ String comments = commentsMap.get(lineNumber)-->Line_47 $$ if (comments != null) [ FD ]
Line_33 $$ String fieldKey = _getFieldKey(fieldElement)-->Line_34 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) -->Line_55 $$ _fileUtil.write(file, newContent)[ CD ]
Line_44 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_51 $$ sb.append("\n")[ CD ]
Line_9 $$ oldContent = _fileUtil.read(file)-->Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_9 $$ oldContent = _fileUtil.read(file)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_7 $$ File file = new File(_BASEDIR + fileName)[ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())[ CD ]
Line_14 $$ Element rootElement = document.getRootElement()-->Line_31 $$ List<Element> fieldElements = rootElement.elements("field")[ FD ]
Line_24 $$ for (JavaMethod javaMethod : javaMethods) -->Line_28 $$ commentsMap.put(javaMethod.getLineNumber(), _getJavaMethodComment(lines, methodElementsMap, javaMethod))[ FD ]
Line_15 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_38 $$ if (commentsMap.containsKey(javaField.getLineNumber())) [ FD ]
Line_45 $$ String line = lines[lineNumber - 1]-->Line_50 $$ sb.append(line)[ FD ]
Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_51 $$ sb.append("\n")[ FD ]
Line_19 $$ for (Element methodElement : methodElements) -->Line_20 $$ String methodKey = _getMethodKey(methodElement)[ FD ]
Line_11 $$ String[] lines = StringUtil.splitLines(oldContent)-->Line_41 $$ commentsMap.put(javaField.getLineNumber(), _getJavaFieldComment(lines, fieldElementsMap, javaField))[ FD ]
Line_14 $$ Element rootElement = document.getRootElement()-->Line_18 $$ List<Element> methodElements = rootElement.elements("method")[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_36 $$ JavaField[] javaFields = javaClass.getFields()[ CD ]
Line_9 $$ oldContent = _fileUtil.read(file)-->Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())[ FD ]
Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) -->Line_56 $$ System.out.println("Writing " + file)[ CD ]
Line_3 $$ File javadocFile = new File(_BASEDIR + fileName + "doc")-->Line_4 $$ if (!javadocFile.exists()) [ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_11 $$ String[] lines = StringUtil.splitLines(oldContent)[ CD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_31 $$ List<Element> fieldElements = rootElement.elements("field")[ CD ]
Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_48 $$ sb.append(comments)[ FD ]
Line_43 $$ StringBuilder sb = new StringBuilder(oldContent.length())-->Line_50 $$ sb.append(line)[ FD ]
Line_2 $$ private void _updateJavaFromJavadoc(String fileName, String oldContent) throws Exception -->Line_54 $$ if ((oldContent == null) || !oldContent.equals(newContent)) [ CD ]
