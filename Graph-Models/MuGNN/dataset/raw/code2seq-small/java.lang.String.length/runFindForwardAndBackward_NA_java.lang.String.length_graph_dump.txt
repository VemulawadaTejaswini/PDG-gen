Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ CD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_19 $$ previousOffset = findResult.getStartOffset()[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_10 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_16 $$ findModel.setForward(false)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_3 $$ findModel.setForward(true)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_15 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ CD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_11 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_15 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ FD ]
Line_19 $$ previousOffset = findResult.getStartOffset()-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_14 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_14 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_5 $$ int previousOffset[ CD ]
Line_8 $$ previousOffset = findResult.getStartOffset()-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_18 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_5 $$ int previousOffset-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ CD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_11 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ CD ]
Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_18 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ CD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_5 $$ int previousOffset-->Line_12 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ CD ]
Line_8 $$ previousOffset = findResult.getStartOffset()-->Line_12 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_19 $$ previousOffset = findResult.getStartOffset()-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ CD ]
Line_8 $$ previousOffset = findResult.getStartOffset()-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_10 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_23 $$ previousOffset = findResult.getStartOffset()[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_11 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_5 $$ int previousOffset-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_12 $$ previousOffset = findResult.getStartOffset()[ CD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_12 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_5 $$ int previousOffset-->Line_8 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_18 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)[ FD ]
Line_8 $$ previousOffset = findResult.getStartOffset()-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_10 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ CD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_3 $$ findModel.setForward(true)[ CD ]
Line_8 $$ previousOffset = findResult.getStartOffset()-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_18 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_5 $$ int previousOffset-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_12 $$ previousOffset = findResult.getStartOffset()-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_12 $$ previousOffset = findResult.getStartOffset()-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_7 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_14 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_5 $$ int previousOffset-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_21 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_15 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_12 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)[ CD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_16 $$ findModel.setForward(false)[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_18 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_8 $$ previousOffset = findResult.getStartOffset()[ CD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_26 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_22 $$ Assert.assertTrue(previousOffset > findResult.getStartOffset())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_4 $$ LightVirtualFile file = new LightVirtualFile("A." + ext, text)-->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_15 $$ Assert.assertTrue(findResult.getStartOffset() > previousOffset)[ FD ]
Line_12 $$ previousOffset = findResult.getStartOffset()-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_14 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)-->Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_7 $$ Assert.assertTrue(findResult.isStringFound())[ CD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_23 $$ previousOffset = findResult.getStartOffset()-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_8 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_20 $$ findResult = findManager.findString(text, previousOffset, findModel, file)-->Line_25 $$ Assert.assertTrue(findResult.isStringFound())[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_19 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_13 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_17 $$ findResult = findManager.findString(text, text.length(), findModel, file)[ FD ]
Line_9 $$ findResult = findManager.findString(text, findResult.getEndOffset(), findModel, file)-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_19 $$ previousOffset = findResult.getStartOffset()-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_6 $$ FindResult findResult = findManager.findString(text, 0, findModel, file)-->Line_23 $$ previousOffset = findResult.getStartOffset()[ FD ]
Line_2 $$ public static void runFindForwardAndBackward(FindManager findManager, FindModel findModel, String text, String ext) -->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
Line_12 $$ previousOffset = findResult.getStartOffset()-->Line_24 $$ findResult = findManager.findString(text, previousOffset, findModel, file)[ FD ]
