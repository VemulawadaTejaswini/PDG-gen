Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_11 $$ findModel.setRegularExpressions(true)[ CD ]
Line_4 $$ String prefix = "\""-->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_7 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)-->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_13 $$ assertTrue(findResult.isStringFound())[ CD ]
Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_13 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_4 $$ String prefix = "\""-->Line_10 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_5 $$ String text = prefix + "done\"done"-->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_11 $$ findModel.setRegularExpressions(true)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_14 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ CD ]
Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_14 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_13 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_9 $$ assertTrue(findResult.isStringFound())[ CD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_5 $$ String text = prefix + "done\"done"[ CD ]
Line_4 $$ String prefix = "\""-->Line_14 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")[ CD ]
Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_9 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_7 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)[ CD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_10 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ CD ]
Line_7 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)-->Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ CD ]
Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_14 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_5 $$ String text = prefix + "done\"done"-->Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_4 $$ String prefix = "\""[ CD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_6 $$ findModel.setSearchContext(FindModel.SearchContext.EXCEPT_STRING_LITERALS)[ FD ]
Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_10 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_12 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ CD ]
Line_4 $$ String prefix = "\""-->Line_8 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptLiterals() -->Line_6 $$ findModel.setSearchContext(FindModel.SearchContext.EXCEPT_STRING_LITERALS)[ CD ]
