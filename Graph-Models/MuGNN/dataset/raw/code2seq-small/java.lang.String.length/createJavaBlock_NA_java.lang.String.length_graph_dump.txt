Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) [ FD ]
Line_28 $$ if (child instanceof LeafElement) -->Line_31 $$ return block[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_25 $$ if (!isBuildIndentsOnly() && child instanceof PsiComment && child instanceof PsiLanguageInjectionHost && InjectedLanguageUtil.hasInjections((PsiLanguageInjectionHost) child)) [ CD ]
Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) -->Line_7 $$ String text = child.getText()[ CD ]
Line_16 $$ if (child.getElementType() == JavaElementType.METHOD) -->Line_17 $$ return new BlockContainingJavaBlock(child, actualIndent, alignmentStrategy, mySettings, myJavaSettings)[ CD ]
Line_28 $$ if (child instanceof LeafElement) -->Line_30 $$ block.setStartOffset(startOffset)[ CD ]
Line_28 $$ if (child instanceof LeafElement) -->Line_32 $$ if (isLikeExtendsList(elementType)) [ CD ]
Line_13 $$ if (child.getPsi() instanceof PsiClass) -->Line_14 $$ return new CodeBlockBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) -->Line_42 $$ simpleJavaBlock.setStartOffset(startOffset)[ CD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_19 $$ if (isBlockType(elementType)) [ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_16 $$ if (child.getElementType() == JavaElementType.METHOD) [ CD ]
Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) -->Line_11 $$ return new PartialWhitespaceBlock(child, new TextRange(start + child.getStartOffset(), end + child.getStartOffset()), wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_7 $$ String text = child.getText()-->Line_8 $$ int start = CharArrayUtil.shiftForward(text, 0, " \t\n")[ FD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_32 $$ if (isLikeExtendsList(elementType)) [ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_22 $$ if (isStatement(child, child.getTreeParent())) [ CD ]
Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) -->Line_9 $$ int end = CharArrayUtil.shiftBackward(text, text.length() - 1, " \t\n") + 1[ CD ]
Line_32 $$ if (isLikeExtendsList(elementType)) -->Line_34 $$ if (elementType == JavaElementType.CODE_BLOCK) [ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_13 $$ if (child.getPsi() instanceof PsiClass) [ FD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) [ FD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_36 $$ if (elementType == JavaElementType.LABELED_STATEMENT) [ FD ]
Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) -->Line_43 $$ return simpleJavaBlock[ CD ]
Line_36 $$ if (elementType == JavaElementType.LABELED_STATEMENT) -->Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) [ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_4 $$ final IElementType elementType = child.getElementType()[ CD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_34 $$ if (elementType == JavaElementType.CODE_BLOCK) [ FD ]
Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) -->Line_41 $$ final SimpleJavaBlock simpleJavaBlock = new SimpleJavaBlock(child, wrap, alignmentStrategy, actualIndent, settings, javaSettings)[ CD ]
Line_34 $$ if (elementType == JavaElementType.CODE_BLOCK) -->Line_36 $$ if (elementType == JavaElementType.LABELED_STATEMENT) [ CD ]
Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) -->Line_10 $$ LOG.assertTrue(start < end)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_22 $$ if (isStatement(child, child.getTreeParent())) [ FD ]
Line_28 $$ if (child instanceof LeafElement) -->Line_29 $$ final LeafBlock block = new LeafBlock(child, wrap, alignment, actualIndent)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_30 $$ block.setStartOffset(startOffset)[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_5 $$ Alignment alignment = alignmentStrategy.getAlignment(elementType)[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_16 $$ if (child.getElementType() == JavaElementType.METHOD) [ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) [ CD ]
Line_34 $$ if (elementType == JavaElementType.CODE_BLOCK) -->Line_35 $$ return new CodeBlockBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_36 $$ if (elementType == JavaElementType.LABELED_STATEMENT) -->Line_37 $$ return new LabeledJavaBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_4 $$ final IElementType elementType = child.getElementType()[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_7 $$ String text = child.getText()[ FD ]
Line_19 $$ if (isBlockType(elementType)) -->Line_20 $$ return new BlockContainingJavaBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_25 $$ if (!isBuildIndentsOnly() && child instanceof PsiComment && child instanceof PsiLanguageInjectionHost && InjectedLanguageUtil.hasInjections((PsiLanguageInjectionHost) child)) -->Line_26 $$ return new CommentWithInjectionBlock(child, wrap, alignment, indent, settings, javaSettings)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_42 $$ simpleJavaBlock.setStartOffset(startOffset)[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_3 $$ Indent actualIndent = indent == null ? getDefaultSubtreeIndent(child, getJavaIndentOptions(settings)) : indent[ CD ]
Line_29 $$ final LeafBlock block = new LeafBlock(child, wrap, alignment, actualIndent)-->Line_30 $$ block.setStartOffset(startOffset)[ FD ]
Line_41 $$ final SimpleJavaBlock simpleJavaBlock = new SimpleJavaBlock(child, wrap, alignmentStrategy, actualIndent, settings, javaSettings)-->Line_42 $$ simpleJavaBlock.setStartOffset(startOffset)[ FD ]
Line_22 $$ if (isStatement(child, child.getTreeParent())) -->Line_23 $$ return new CodeBlockBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_28 $$ if (child instanceof LeafElement) [ FD ]
Line_6 $$ if (child.getPsi() instanceof PsiWhiteSpace) -->Line_8 $$ int start = CharArrayUtil.shiftForward(text, 0, " \t\n")[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_13 $$ if (child.getPsi() instanceof PsiClass) [ CD ]
Line_32 $$ if (isLikeExtendsList(elementType)) -->Line_33 $$ return new ExtendsListBlock(child, wrap, alignmentStrategy, settings, javaSettings)[ CD ]
Line_7 $$ String text = child.getText()-->Line_9 $$ int end = CharArrayUtil.shiftBackward(text, text.length() - 1, " \t\n") + 1[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_28 $$ if (child instanceof LeafElement) [ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_11 $$ return new PartialWhitespaceBlock(child, new TextRange(start + child.getStartOffset(), end + child.getStartOffset()), wrap, alignment, actualIndent, settings, javaSettings)[ FD ]
Line_4 $$ final IElementType elementType = child.getElementType()-->Line_5 $$ Alignment alignment = alignmentStrategy.getAlignment(elementType)[ FD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_19 $$ if (isBlockType(elementType)) [ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_3 $$ Indent actualIndent = indent == null ? getDefaultSubtreeIndent(child, getJavaIndentOptions(settings)) : indent[ FD ]
Line_38 $$ if (elementType == JavaDocElementType.DOC_COMMENT) -->Line_39 $$ return new DocCommentBlock(child, wrap, alignment, actualIndent, settings, javaSettings)[ CD ]
Line_2 $$ private Block createJavaBlock(@NotNull ASTNode child, @NotNull CommonCodeStyleSettings settings, @NotNull JavaCodeStyleSettings javaSettings, @Nullable Indent indent, Wrap wrap, @NotNull AlignmentStrategy alignmentStrategy, int startOffset) -->Line_5 $$ Alignment alignment = alignmentStrategy.getAlignment(elementType)[ CD ]
