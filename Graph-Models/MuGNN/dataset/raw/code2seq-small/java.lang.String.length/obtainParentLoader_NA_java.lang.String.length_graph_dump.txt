Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_23 $$ if (!isCompilerCoreClass(aClass.getName()) || !(aClass.getClassLoader() instanceof UrlClassLoader)) [ CD ]
Line_33 $$ if (tail.startsWith("ast") || tail.startsWith("classgen") || tail.startsWith("tools.javac") || tail.startsWith("antlr") || tail.startsWith("vmplugin") || tail.startsWith("reflection") || tail.startsWith("control")) -->Line_34 $$ return true[ CD ]
Line_31 $$ if (name.startsWith("org.codehaus.groovy.")) -->Line_33 $$ if (tail.startsWith("ast") || tail.startsWith("classgen") || tail.startsWith("tools.javac") || tail.startsWith("antlr") || tail.startsWith("vmplugin") || tail.startsWith("reflection") || tail.startsWith("control")) [ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_31 $$ if (name.startsWith("org.codehaus.groovy.")) [ FD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_3 $$ if (!"true".equals(System.getProperty("groovyc.reuse.compiler.classes", "true"))) [ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_28 $$ if (name.startsWith("groovyjarjar")) [ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_24 $$ super.loadClassDependencies(aClass)[ FD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_54 $$ return checkWellFormed.loadDependencies(super.loadClass(name, resolve))[ FD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_36 $$ if (tail.startsWith("runtime") && name.contains("GroovyMethods")) [ FD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_32 $$ String tail = name.substring("org.codehaus.groovy.".length())[ FD ]
Line_13 $$ if (groovyJars.size() != 1 || !GROOVY_ALL_JAR_PATTERN.matcher(groovyJars.get(0)).matches()) -->Line_14 $$ return null[ CD ]
Line_48 $$ ClassLoader wrapper = new URLClassLoader(new URL[0], groovyAllLoader) -->Line_54 $$ return checkWellFormed.loadDependencies(super.loadClass(name, resolve))[ FD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() [ CD ]
Line_23 $$ if (!isCompilerCoreClass(aClass.getName()) || !(aClass.getClassLoader() instanceof UrlClassLoader)) -->Line_24 $$ super.loadClassDependencies(aClass)[ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() [ FD ]
Line_28 $$ if (name.startsWith("groovyjarjar")) -->Line_29 $$ return true[ CD ]
Line_18 $$ if (pair != null && pair.first.equals(groovyAll)) -->Line_19 $$ return pair.second[ CD ]
Line_8 $$ String fileName = StringUtil.getShortName(s, '/')-->Line_9 $$ return GROOVY_ALL_JAR_PATTERN.matcher(fileName).matches() || GROOVY_JAR_PATTERN.matcher(fileName).matches()[ FD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_28 $$ if (name.startsWith("groovyjarjar")) [ FD ]
Line_36 $$ if (tail.startsWith("runtime") && name.contains("GroovyMethods")) -->Line_37 $$ return true[ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_18 $$ if (pair != null && pair.first.equals(groovyAll)) [ CD ]
Line_32 $$ String tail = name.substring("org.codehaus.groovy.".length())-->Line_33 $$ if (tail.startsWith("ast") || tail.startsWith("classgen") || tail.startsWith("tools.javac") || tail.startsWith("antlr") || tail.startsWith("vmplugin") || tail.startsWith("reflection") || tail.startsWith("control")) [ FD ]
Line_31 $$ if (name.startsWith("org.codehaus.groovy.")) -->Line_32 $$ String tail = name.substring("org.codehaus.groovy.".length())[ CD ]
Line_3 $$ if (!"true".equals(System.getProperty("groovyc.reuse.compiler.classes", "true"))) -->Line_4 $$ return null[ CD ]
Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() -->Line_13 $$ if (groovyJars.size() != 1 || !GROOVY_ALL_JAR_PATTERN.matcher(groovyJars.get(0)).matches()) [ FD ]
Line_32 $$ String tail = name.substring("org.codehaus.groovy.".length())-->Line_36 $$ if (tail.startsWith("runtime") && name.contains("GroovyMethods")) [ FD ]
Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() -->Line_8 $$ String fileName = StringUtil.getShortName(s, '/')[ FD ]
Line_48 $$ ClassLoader wrapper = new URLClassLoader(new URL[0], groovyAllLoader) -->Line_50 $$ if (name.startsWith("groovy.grape.")) [ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_23 $$ if (!isCompilerCoreClass(aClass.getName()) || !(aClass.getClassLoader() instanceof UrlClassLoader)) [ FD ]
Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() -->Line_8 $$ String fileName = StringUtil.getShortName(s, '/')[ CD ]
Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() -->Line_16 $$ String groovyAll = groovyJars.get(0)[ FD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_50 $$ if (name.startsWith("groovy.grape.")) [ FD ]
Line_43 $$ UrlClassLoader groovyAllLoader = UrlClassLoader.build().urls(toUrls(ContainerUtil.concat(GroovyBuilder.getGroovyRtRoots(), Collections.singletonList(groovyAll)))).allowLock().useCache(ourLoaderCachePool, new UrlClassLoader.CachingCondition() -->Line_45 $$ return true[ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_61 $$ return wrapper[ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_12 $$ LOG.debug("Groovy jars: " + groovyJars)[ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_43 $$ UrlClassLoader groovyAllLoader = UrlClassLoader.build().urls(toUrls(ContainerUtil.concat(GroovyBuilder.getGroovyRtRoots(), Collections.singletonList(groovyAll)))).allowLock().useCache(ourLoaderCachePool, new UrlClassLoader.CachingCondition() [ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_17 $$ Pair<String, ClassLoader> pair = SoftReference.dereference(ourParentLoaderCache)[ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_31 $$ if (name.startsWith("org.codehaus.groovy.")) [ CD ]
Line_6 $$ List<String> groovyJars = ContainerUtil.findAll(compilationClassPath, new Condition<String>() -->Line_9 $$ return GROOVY_ALL_JAR_PATTERN.matcher(fileName).matches() || GROOVY_JAR_PATTERN.matcher(fileName).matches()[ CD ]
Line_21 $$ final ClassDependencyLoader checkWellFormed = new ClassDependencyLoader() -->Line_40 $$ return false[ CD ]
Line_31 $$ if (name.startsWith("org.codehaus.groovy.")) -->Line_36 $$ if (tail.startsWith("runtime") && name.contains("GroovyMethods")) [ CD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_13 $$ if (groovyJars.size() != 1 || !GROOVY_ALL_JAR_PATTERN.matcher(groovyJars.get(0)).matches()) [ CD ]
Line_48 $$ ClassLoader wrapper = new URLClassLoader(new URL[0], groovyAllLoader) -->Line_50 $$ if (name.startsWith("groovy.grape.")) [ FD ]
Line_2 $$ private static ClassLoader obtainParentLoader(Collection<String> compilationClassPath) throws MalformedURLException -->Line_16 $$ String groovyAll = groovyJars.get(0)[ CD ]
