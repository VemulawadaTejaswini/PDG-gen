Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) -->Line_11 $$ tail = relativePath[ CD ]
Line_5 $$ String tail-->Line_11 $$ tail = relativePath[ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_6 $$ if (endsWithSlash && startsWithSlash) [ CD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_7 $$ tail = trimForwardSlashes(relativePath)[ FD ]
Line_9 $$ tail = "/" + relativePath-->Line_11 $$ tail = relativePath[ FD ]
Line_5 $$ String tail-->Line_9 $$ tail = "/" + relativePath[ FD ]
Line_3 $$ final boolean endsWithSlash = StringUtilRt.endsWithChar(basePath, '/') || StringUtilRt.endsWithChar(basePath, '\\')-->Line_6 $$ if (endsWithSlash && startsWithSlash) [ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) [ FD ]
Line_5 $$ String tail-->Line_7 $$ tail = trimForwardSlashes(relativePath)[ FD ]
Line_4 $$ final boolean startsWithSlash = StringUtil.startsWithChar(relativePath, '/') || StringUtil.startsWithChar(relativePath, '\\')-->Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) [ FD ]
Line_4 $$ final boolean startsWithSlash = StringUtil.startsWithChar(relativePath, '/') || StringUtil.startsWithChar(relativePath, '\\')-->Line_6 $$ if (endsWithSlash && startsWithSlash) [ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_13 $$ return basePath + tail[ CD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_3 $$ final boolean endsWithSlash = StringUtilRt.endsWithChar(basePath, '/') || StringUtilRt.endsWithChar(basePath, '\\')[ CD ]
Line_7 $$ tail = trimForwardSlashes(relativePath)-->Line_11 $$ tail = relativePath[ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_9 $$ tail = "/" + relativePath[ FD ]
Line_6 $$ if (endsWithSlash && startsWithSlash) -->Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) [ CD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_4 $$ final boolean startsWithSlash = StringUtil.startsWithChar(relativePath, '/') || StringUtil.startsWithChar(relativePath, '\\')[ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_11 $$ tail = relativePath[ FD ]
Line_7 $$ tail = trimForwardSlashes(relativePath)-->Line_9 $$ tail = "/" + relativePath[ FD ]
Line_3 $$ final boolean endsWithSlash = StringUtilRt.endsWithChar(basePath, '/') || StringUtilRt.endsWithChar(basePath, '\\')-->Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) [ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_3 $$ final boolean endsWithSlash = StringUtilRt.endsWithChar(basePath, '/') || StringUtilRt.endsWithChar(basePath, '\\')[ FD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_5 $$ String tail[ CD ]
Line_2 $$ public static String appendToPath(@NotNull String basePath, @NotNull String relativePath) -->Line_4 $$ final boolean startsWithSlash = StringUtil.startsWithChar(relativePath, '/') || StringUtil.startsWithChar(relativePath, '\\')[ CD ]
Line_8 $$ if (!endsWithSlash && !startsWithSlash && basePath.length() > 0 && relativePath.length() > 0) -->Line_9 $$ tail = "/" + relativePath[ CD ]
Line_6 $$ if (endsWithSlash && startsWithSlash) -->Line_7 $$ tail = trimForwardSlashes(relativePath)[ CD ]
