Line_10 $$ node = peekToken()-->Line_13 $$ if (node == null) [ FD ]
Line_4 $$ Token node = peekToken()-->Line_10 $$ node = peekToken()[ FD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_4 $$ Token node = peekToken()[ CD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_5 $$ while (isValidQualifiedId(node)) [ CD ]
Line_5 $$ while (isValidQualifiedId(node)) -->Line_6 $$ nextToken()[ CD ]
Line_12 $$ if (qualifiedIdPieces.isEmpty()) -->Line_13 $$ if (node == null) [ CD ]
Line_4 $$ Token node = peekToken()-->Line_16 $$ raiseInternalException(node.startPos, SpelMessage.NOT_EXPECTED_TOKEN, "qualified ID", node.getKind().toString().toLowerCase())[ FD ]
Line_3 $$ LinkedList<SpelNodeImpl> qualifiedIdPieces = new LinkedList<SpelNodeImpl>()-->Line_19 $$ return new QualifiedIdentifier(pos, qualifiedIdPieces.toArray(new SpelNodeImpl[qualifiedIdPieces.size()]))[ FD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_18 $$ int pos = toPos(qualifiedIdPieces.getFirst().getStartPosition(), qualifiedIdPieces.getLast().getEndPosition())[ CD ]
Line_5 $$ while (isValidQualifiedId(node)) -->Line_7 $$ if (node.kind != TokenKind.DOT) [ CD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_12 $$ if (qualifiedIdPieces.isEmpty()) [ CD ]
Line_10 $$ node = peekToken()-->Line_5 $$ while (isValidQualifiedId(node)) [ FD ]
Line_10 $$ node = peekToken()-->Line_8 $$ qualifiedIdPieces.add(new Identifier(node.stringValue(), toPos(node)))[ FD ]
Line_7 $$ if (node.kind != TokenKind.DOT) -->Line_8 $$ qualifiedIdPieces.add(new Identifier(node.stringValue(), toPos(node)))[ CD ]
Line_3 $$ LinkedList<SpelNodeImpl> qualifiedIdPieces = new LinkedList<SpelNodeImpl>()-->Line_18 $$ int pos = toPos(qualifiedIdPieces.getFirst().getStartPosition(), qualifiedIdPieces.getLast().getEndPosition())[ FD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_3 $$ LinkedList<SpelNodeImpl> qualifiedIdPieces = new LinkedList<SpelNodeImpl>()[ CD ]
Line_5 $$ while (isValidQualifiedId(node)) -->Line_10 $$ node = peekToken()[ CD ]
Line_4 $$ Token node = peekToken()-->Line_13 $$ if (node == null) [ FD ]
Line_2 $$ private SpelNodeImpl eatPossiblyQualifiedId() -->Line_19 $$ return new QualifiedIdentifier(pos, qualifiedIdPieces.toArray(new SpelNodeImpl[qualifiedIdPieces.size()]))[ CD ]
Line_10 $$ node = peekToken()-->Line_16 $$ raiseInternalException(node.startPos, SpelMessage.NOT_EXPECTED_TOKEN, "qualified ID", node.getKind().toString().toLowerCase())[ FD ]
Line_3 $$ LinkedList<SpelNodeImpl> qualifiedIdPieces = new LinkedList<SpelNodeImpl>()-->Line_8 $$ qualifiedIdPieces.add(new Identifier(node.stringValue(), toPos(node)))[ FD ]
Line_4 $$ Token node = peekToken()-->Line_8 $$ qualifiedIdPieces.add(new Identifier(node.stringValue(), toPos(node)))[ FD ]
Line_3 $$ LinkedList<SpelNodeImpl> qualifiedIdPieces = new LinkedList<SpelNodeImpl>()-->Line_12 $$ if (qualifiedIdPieces.isEmpty()) [ FD ]
Line_12 $$ if (qualifiedIdPieces.isEmpty()) -->Line_16 $$ raiseInternalException(node.startPos, SpelMessage.NOT_EXPECTED_TOKEN, "qualified ID", node.getKind().toString().toLowerCase())[ CD ]
Line_13 $$ if (node == null) -->Line_14 $$ raiseInternalException(this.expressionString.length(), SpelMessage.OOD)[ CD ]
Line_4 $$ Token node = peekToken()-->Line_5 $$ while (isValidQualifiedId(node)) [ FD ]
