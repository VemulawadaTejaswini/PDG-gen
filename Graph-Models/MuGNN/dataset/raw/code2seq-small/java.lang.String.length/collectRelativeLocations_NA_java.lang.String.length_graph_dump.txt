Line_12 $$ if (relativePath != null) -->Line_14 $$ final List<String> words = StringUtil.getWordsIn(relativePath)[ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_13 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(project)[ FD ]
Line_11 $$ final String relativePath = VfsUtilCore.getRelativePath(parent, contentRoot, '/')-->Line_14 $$ final List<String> words = StringUtil.getWordsIn(relativePath)[ FD ]
Line_38 $$ if (!VfsUtilCore.isAncestor(contentRoot, iterator.next().getVirtualFile(), true)) -->Line_39 $$ iterator.remove()[ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_8 $$ final VirtualFile parent = file.getParent()[ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_5 $$ final List<Location> locations = new ArrayList<Location>()[ CD ]
Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_38 $$ if (!VfsUtilCore.isAncestor(contentRoot, iterator.next().getVirtualFile(), true)) [ FD ]
Line_37 $$ for (Iterator<PsiFile> iterator = resultFiles.iterator(); iterator.hasNext(); ) -->Line_39 $$ iterator.remove()[ FD ]
Line_45 $$ if (resultFile instanceof PsiClassOwner) -->Line_47 $$ if (classes.length > 0) [ CD ]
Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) -->Line_8 $$ final VirtualFile parent = file.getParent()[ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) [ CD ]
Line_3 $$ if (DumbService.isDumb(project))-->Line_4 $$ return Collections.emptyList()[ CD ]
Line_15 $$ Collections.sort(words, new Comparator<String>() -->Line_17 $$ return o2.length() - o1.length()[ CD ]
Line_14 $$ final List<String> words = StringUtil.getWordsIn(relativePath)-->Line_15 $$ Collections.sort(words, new Comparator<String>() [ FD ]
Line_12 $$ if (relativePath != null) -->Line_20 $$ final GlobalSearchScope testScope = GlobalSearchScopesCore.projectTestScope(project)[ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_20 $$ final GlobalSearchScope testScope = GlobalSearchScopesCore.projectTestScope(project)[ FD ]
Line_37 $$ for (Iterator<PsiFile> iterator = resultFiles.iterator(); iterator.hasNext(); ) -->Line_38 $$ if (!VfsUtilCore.isAncestor(contentRoot, iterator.next().getVirtualFile(), true)) [ FD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_48 $$ ContainerUtil.addIfNotNull(locations, getLocation(project, fileName, nameWithoutExtension, classes[0]))[ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_42 $$ final String fileName = file.getName()[ FD ]
Line_13 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(project)-->Line_27 $$ searchHelper.processAllFilesWithWordInLiterals(word, testScope, new CommonProcessors.CollectProcessor<PsiFile>(files))[ FD ]
Line_36 $$ if (resultFiles != null) -->Line_42 $$ final String fileName = file.getName()[ CD ]
Line_12 $$ if (relativePath != null) -->Line_36 $$ if (resultFiles != null) [ CD ]
Line_37 $$ for (Iterator<PsiFile> iterator = resultFiles.iterator(); iterator.hasNext(); ) -->Line_38 $$ if (!VfsUtilCore.isAncestor(contentRoot, iterator.next().getVirtualFile(), true)) [ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_43 $$ final String nameWithoutExtension = file.getNameWithoutExtension()[ FD ]
Line_8 $$ final VirtualFile parent = file.getParent()-->Line_11 $$ final String relativePath = VfsUtilCore.getRelativePath(parent, contentRoot, '/')[ FD ]
Line_36 $$ if (resultFiles != null) -->Line_43 $$ final String nameWithoutExtension = file.getNameWithoutExtension()[ CD ]
Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_11 $$ final String relativePath = VfsUtilCore.getRelativePath(parent, contentRoot, '/')[ FD ]
Line_47 $$ if (classes.length > 0) -->Line_48 $$ ContainerUtil.addIfNotNull(locations, getLocation(project, fileName, nameWithoutExtension, classes[0]))[ CD ]
Line_10 $$ if (contentRoot != null) -->Line_11 $$ final String relativePath = VfsUtilCore.getRelativePath(parent, contentRoot, '/')[ CD ]
Line_11 $$ final String relativePath = VfsUtilCore.getRelativePath(parent, contentRoot, '/')-->Line_12 $$ if (relativePath != null) [ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_3 $$ if (DumbService.isDumb(project))[ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) [ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_3 $$ if (DumbService.isDumb(project))[ CD ]
Line_15 $$ Collections.sort(words, new Comparator<String>() -->Line_17 $$ return o2.length() - o1.length()[ FD ]
Line_28 $$ if (resultFiles == null) -->Line_31 $$ resultFiles.retainAll(files)[ CD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) [ FD ]
Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) -->Line_10 $$ if (contentRoot != null) [ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_56 $$ return locations[ CD ]
Line_45 $$ if (resultFile instanceof PsiClassOwner) -->Line_46 $$ final PsiClass[] classes = ((PsiClassOwner) resultFile).getClasses()[ CD ]
Line_12 $$ if (relativePath != null) -->Line_13 $$ final PsiSearchHelper searchHelper = PsiSearchHelper.SERVICE.getInstance(project)[ CD ]
Line_7 $$ if (fileIndex.isInContent(file) && !fileIndex.isInSource(file) && !fileIndex.isInLibraryClasses(file)) -->Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)[ CD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_12 $$ if (relativePath != null) -->Line_15 $$ Collections.sort(words, new Comparator<String>() [ CD ]
Line_36 $$ if (resultFiles != null) -->Line_37 $$ for (Iterator<PsiFile> iterator = resultFiles.iterator(); iterator.hasNext(); ) [ CD ]
Line_5 $$ final List<Location> locations = new ArrayList<Location>()-->Line_48 $$ ContainerUtil.addIfNotNull(locations, getLocation(project, fileName, nameWithoutExtension, classes[0]))[ FD ]
Line_10 $$ if (contentRoot != null) -->Line_12 $$ if (relativePath != null) [ CD ]
Line_9 $$ final VirtualFile contentRoot = fileIndex.getContentRootForFile(file)-->Line_10 $$ if (contentRoot != null) [ FD ]
Line_2 $$ protected static List<Location> collectRelativeLocations(Project project, VirtualFile file) -->Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
