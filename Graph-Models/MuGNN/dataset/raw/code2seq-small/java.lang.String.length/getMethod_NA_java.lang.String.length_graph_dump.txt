Line_9 $$ if (getterName.equals(m.getName()) && m.getParameterTypes().length == 0) -->Line_10 $$ return m[ CD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_4 $$ if (propertyName.length() > 1) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder("get").append(Character.toUpperCase(propertyName.charAt(0)))-->Line_7 $$ final String getterName = sb.toString()[ FD ]
Line_8 $$ for (Method m : bean.getClass().getMethods()) -->Line_9 $$ if (getterName.equals(m.getName()) && m.getParameterTypes().length == 0) [ FD ]
Line_3 $$ final StringBuilder sb = new StringBuilder("get").append(Character.toUpperCase(propertyName.charAt(0)))-->Line_5 $$ sb.append(propertyName.substring(1))[ FD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_8 $$ for (Method m : bean.getClass().getMethods()) [ FD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_13 $$ return null[ CD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_5 $$ sb.append(propertyName.substring(1))[ FD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_7 $$ final String getterName = sb.toString()[ CD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_3 $$ final StringBuilder sb = new StringBuilder("get").append(Character.toUpperCase(propertyName.charAt(0)))[ CD ]
Line_7 $$ final String getterName = sb.toString()-->Line_9 $$ if (getterName.equals(m.getName()) && m.getParameterTypes().length == 0) [ FD ]
Line_4 $$ if (propertyName.length() > 1) -->Line_5 $$ sb.append(propertyName.substring(1))[ CD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_4 $$ if (propertyName.length() > 1) [ CD ]
Line_2 $$ private static Method getMethod(Object bean, String propertyName) -->Line_3 $$ final StringBuilder sb = new StringBuilder("get").append(Character.toUpperCase(propertyName.charAt(0)))[ FD ]
