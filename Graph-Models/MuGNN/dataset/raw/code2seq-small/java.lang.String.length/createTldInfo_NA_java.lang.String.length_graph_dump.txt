Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_20 $$ tagLibraryInfo.setJspversion(tldMetaData.getJspVersion())[ FD ]
Line_31 $$ for (ParamValueMetaData paramValueMetaData : tldMetaData.getValidator().getInitParams()) -->Line_32 $$ tagLibraryValidatorInfo.addInitParam(paramValueMetaData.getParamName(), paramValueMetaData.getParamValue())[ FD ]
Line_50 $$ Icon icon = descriptionGroup.getIcons().value()[0]-->Line_52 $$ tagInfo.setSmallIcon(icon.smallIcon())[ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_65 $$ tagVariableInfo.setScope(variableMetaData.getScope().toString())[ FD ]
Line_106 $$ FunctionInfo functionInfo = new FunctionInfo()-->Line_107 $$ functionInfo.setName(functionMetaData.getName())[ FD ]
Line_49 $$ if (descriptionGroup.getIcons() != null && descriptionGroup.getIcons().value() != null && (descriptionGroup.getIcons().value().length > 0)) -->Line_51 $$ tagInfo.setLargeIcon(icon.largeIcon())[ CD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_67 $$ tagInfo.addTagVariableInfo(tagVariableInfo)[ FD ]
Line_117 $$ if (jarPath == null) -->Line_130 $$ if (jarPath.equals("META-INF/taglib.tld")) [ CD ]
Line_117 $$ if (jarPath == null) -->Line_127 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_4 $$ String jarPath = null[ CD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_44 $$ tagInfo.setBodyContent(tagMetaData.getBodyContent().toString())[ FD ]
Line_5 $$ if (relativeLocation != null && relativeLocation.startsWith("/WEB-INF/lib/")) -->Line_7 $$ if (pos > 0) [ CD ]
Line_8 $$ jarPath = relativeLocation.substring(pos)-->Line_9 $$ if (jarPath.startsWith("/")) [ FD ]
Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()-->Line_50 $$ Icon icon = descriptionGroup.getIcons().value()[0][ FD ]
Line_84 $$ if (attributeMetaData.getDeferredMethod() != null) -->Line_85 $$ tagAttributeInfo.setDeferredMethod("true")[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_131 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_110 $$ tagLibraryInfo.addFunctionInfo(functionInfo)[ FD ]
Line_3 $$ String relativeLocation = location-->Line_125 $$ tagLibraryInfo.setLocation(relativeLocation)[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_118 $$ tagLibraryInfo.setLocation("")[ FD ]
Line_84 $$ if (attributeMetaData.getDeferredMethod() != null) -->Line_86 $$ tagAttributeInfo.setMethodSignature(attributeMetaData.getDeferredMethod().getMethodSignature())[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_18 $$ tagLibraryInfo.setJspversion(tldMetaData.getVersion())[ FD ]
Line_106 $$ FunctionInfo functionInfo = new FunctionInfo()-->Line_109 $$ functionInfo.setFunctionSignature(functionMetaData.getFunctionSignature())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_16 $$ tagLibraryInfo.setTlibversion(tldMetaData.getTlibVersion())[ CD ]
Line_43 $$ if (tagMetaData.getBodyContent() != null) -->Line_44 $$ tagInfo.setBodyContent(tagMetaData.getBodyContent().toString())[ CD ]
Line_8 $$ jarPath = relativeLocation.substring(pos)-->Line_130 $$ if (jarPath.equals("META-INF/taglib.tld")) [ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_67 $$ tagInfo.addTagVariableInfo(tagVariableInfo)[ FD ]
Line_98 $$ TagFileInfo tagFileInfo = new TagFileInfo()-->Line_99 $$ tagFileInfo.setName(tagFileMetaData.getName())[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_22 $$ tagLibraryInfo.setShortname(tldMetaData.getShortName())[ FD ]
Line_84 $$ if (attributeMetaData.getDeferredMethod() != null) -->Line_88 $$ tagAttributeInfo.setDeferredMethod("false")[ CD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_55 $$ tagInfo.setDisplayName(descriptionGroup.getDisplayName())[ FD ]
Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()-->Line_54 $$ tagInfo.setInfoString(descriptionGroup.getDescription())[ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_61 $$ tagVariableInfo.setNameFromAttribute(variableMetaData.getNameFromAttribute())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_114 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_27 $$ if (tldMetaData.getValidator() != null) [ FD ]
Line_28 $$ TagLibraryValidatorInfo tagLibraryValidatorInfo = new TagLibraryValidatorInfo()-->Line_32 $$ tagLibraryValidatorInfo.addInitParam(paramValueMetaData.getParamName(), paramValueMetaData.getParamValue())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_24 $$ if (tldMetaData.getDescriptionGroup() != null) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_22 $$ tagLibraryInfo.setShortname(tldMetaData.getShortName())[ FD ]
Line_47 $$ if (tagMetaData.getDescriptionGroup() != null) -->Line_49 $$ if (descriptionGroup.getIcons() != null && descriptionGroup.getIcons().value() != null && (descriptionGroup.getIcons().value().length > 0)) [ CD ]
Line_4 $$ String jarPath = null-->Line_8 $$ jarPath = relativeLocation.substring(pos)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_115 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_3 $$ String relativeLocation = location-->Line_131 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_42 $$ tagInfo.setTagExtraInfo(tagMetaData.getTeiClass())[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_126 $$ tagLibraryInfo.setPath(jarPath)[ FD ]
Line_27 $$ if (tldMetaData.getValidator() != null) -->Line_29 $$ tagLibraryValidatorInfo.setValidatorClass(tldMetaData.getValidator().getValidatorClass())[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_101 $$ tagLibraryInfo.addTagFileInfo(tagFileInfo)[ FD ]
Line_7 $$ if (pos > 0) -->Line_9 $$ if (jarPath.startsWith("/")) [ CD ]
Line_28 $$ TagLibraryValidatorInfo tagLibraryValidatorInfo = new TagLibraryValidatorInfo()-->Line_29 $$ tagLibraryValidatorInfo.setValidatorClass(tldMetaData.getValidator().getValidatorClass())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_104 $$ if (tldMetaData.getFunctions() != null) [ FD ]
Line_106 $$ FunctionInfo functionInfo = new FunctionInfo()-->Line_110 $$ tagLibraryInfo.addFunctionInfo(functionInfo)[ FD ]
Line_120 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) -->Line_121 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ CD ]
Line_4 $$ String jarPath = null-->Line_130 $$ if (jarPath.equals("META-INF/taglib.tld")) [ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_105 $$ for (FunctionMetaData functionMetaData : tldMetaData.getFunctions()) [ FD ]
Line_49 $$ if (descriptionGroup.getIcons() != null && descriptionGroup.getIcons().value() != null && (descriptionGroup.getIcons().value().length > 0)) -->Line_52 $$ tagInfo.setSmallIcon(icon.smallIcon())[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_120 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_86 $$ tagAttributeInfo.setMethodSignature(attributeMetaData.getDeferredMethod().getMethodSignature())[ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_62 $$ tagVariableInfo.setClassName(variableMetaData.getVariableClass())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_17 $$ if (tldMetaData.getJspVersion() == null) [ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_80 $$ tagAttributeInfo.setExpectedTypeName(attributeMetaData.getDeferredValue().getType())[ FD ]
Line_4 $$ String jarPath = null-->Line_9 $$ if (jarPath.startsWith("/")) [ FD ]
Line_27 $$ if (tldMetaData.getValidator() != null) -->Line_30 $$ if (tldMetaData.getValidator().getInitParams() != null) [ CD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_47 $$ if (tagMetaData.getDescriptionGroup() != null) [ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_60 $$ tagVariableInfo.setNameGiven(variableMetaData.getNameGiven())[ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_63 $$ tagVariableInfo.setDeclare(variableMetaData.getDeclare())[ FD ]
Line_106 $$ FunctionInfo functionInfo = new FunctionInfo()-->Line_108 $$ functionInfo.setFunctionClass(functionMetaData.getFunctionClass())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_25 $$ tagLibraryInfo.setInfo(tldMetaData.getDescriptionGroup().getDescription())[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_37 $$ if (tldMetaData.getTags() != null) [ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_23 $$ tagLibraryInfo.setUri(tldMetaData.getUri())[ FD ]
Line_117 $$ if (jarPath == null) -->Line_125 $$ tagLibraryInfo.setLocation(relativeLocation)[ CD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_77 $$ tagAttributeInfo.setFragment(attributeMetaData.getFragment())[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_90 $$ tagInfo.addTagAttributeInfo(tagAttributeInfo)[ FD ]
Line_17 $$ if (tldMetaData.getJspVersion() == null) -->Line_20 $$ tagLibraryInfo.setJspversion(tldMetaData.getJspVersion())[ CD ]
Line_27 $$ if (tldMetaData.getValidator() != null) -->Line_28 $$ TagLibraryValidatorInfo tagLibraryValidatorInfo = new TagLibraryValidatorInfo()[ CD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_79 $$ tagAttributeInfo.setDeferredValue("true")[ FD ]
Line_98 $$ TagFileInfo tagFileInfo = new TagFileInfo()-->Line_100 $$ tagFileInfo.setPath(tagFileMetaData.getPath())[ FD ]
Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)-->Line_123 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_96 $$ if (tldMetaData.getTagFiles() != null) [ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_113 $$ if (jarPath == null && relativeLocation == null) [ CD ]
Line_97 $$ for (TagFileMetaData tagFileMetaData : tldMetaData.getTagFiles()) -->Line_99 $$ tagFileInfo.setName(tagFileMetaData.getName())[ FD ]
Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)-->Line_131 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()-->Line_49 $$ if (descriptionGroup.getIcons() != null && descriptionGroup.getIcons().value() != null && (descriptionGroup.getIcons().value().length > 0)) [ FD ]
Line_50 $$ Icon icon = descriptionGroup.getIcons().value()[0]-->Line_51 $$ tagInfo.setLargeIcon(icon.largeIcon())[ FD ]
Line_47 $$ if (tagMetaData.getDescriptionGroup() != null) -->Line_54 $$ tagInfo.setInfoString(descriptionGroup.getDescription())[ CD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_90 $$ tagInfo.addTagAttributeInfo(tagAttributeInfo)[ FD ]
Line_117 $$ if (jarPath == null) -->Line_126 $$ tagLibraryInfo.setPath(jarPath)[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_115 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()-->Line_55 $$ tagInfo.setDisplayName(descriptionGroup.getDisplayName())[ FD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_61 $$ tagVariableInfo.setNameFromAttribute(variableMetaData.getNameFromAttribute())[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_35 $$ tagLibraryInfo.setValidator(tagLibraryValidatorInfo)[ FD ]
Line_47 $$ if (tagMetaData.getDescriptionGroup() != null) -->Line_48 $$ DescriptionGroupMetaData descriptionGroup = tagMetaData.getDescriptionGroup()[ CD ]
Line_3 $$ String relativeLocation = location-->Line_8 $$ jarPath = relativeLocation.substring(pos)[ FD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_63 $$ tagVariableInfo.setDeclare(variableMetaData.getDeclare())[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_114 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_22 $$ tagLibraryInfo.setShortname(tldMetaData.getShortName())[ CD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_86 $$ tagAttributeInfo.setMethodSignature(attributeMetaData.getDeferredMethod().getMethodSignature())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_131 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_73 $$ tagAttributeInfo.setName(attributeMetaData.getName())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_23 $$ tagLibraryInfo.setUri(tldMetaData.getUri())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_37 $$ if (tldMetaData.getTags() != null) [ FD ]
Line_28 $$ TagLibraryValidatorInfo tagLibraryValidatorInfo = new TagLibraryValidatorInfo()-->Line_35 $$ tagLibraryInfo.setValidator(tagLibraryValidatorInfo)[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_77 $$ tagAttributeInfo.setFragment(attributeMetaData.getFragment())[ FD ]
Line_3 $$ String relativeLocation = location-->Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_20 $$ tagLibraryInfo.setJspversion(tldMetaData.getJspVersion())[ FD ]
Line_27 $$ if (tldMetaData.getValidator() != null) -->Line_35 $$ tagLibraryInfo.setValidator(tagLibraryValidatorInfo)[ CD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_46 $$ tagInfo.setDynamicAttributes(tagMetaData.getDynamicAttributes())[ FD ]
Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)-->Line_119 $$ tagLibraryInfo.setPath(relativeLocation)[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_46 $$ tagInfo.setDynamicAttributes(tagMetaData.getDynamicAttributes())[ FD ]
Line_78 $$ if (attributeMetaData.getDeferredValue() != null) -->Line_79 $$ tagAttributeInfo.setDeferredValue("true")[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_25 $$ tagLibraryInfo.setInfo(tldMetaData.getDescriptionGroup().getDescription())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_3 $$ String relativeLocation = location[ CD ]
Line_117 $$ if (jarPath == null) -->Line_120 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_24 $$ if (tldMetaData.getDescriptionGroup() != null) [ CD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_41 $$ tagInfo.setTagClassName(tagMetaData.getTagClass())[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_123 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_10 $$ jarPath = jarPath.substring(1)-->Line_117 $$ if (jarPath == null) [ FD ]
Line_78 $$ if (attributeMetaData.getDeferredValue() != null) -->Line_80 $$ tagAttributeInfo.setExpectedTypeName(attributeMetaData.getDeferredValue().getType())[ CD ]
Line_6 $$ int pos = relativeLocation.indexOf('/', "/WEB-INF/lib/".length())-->Line_7 $$ if (pos > 0) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_96 $$ if (tldMetaData.getTagFiles() != null) [ FD ]
Line_105 $$ for (FunctionMetaData functionMetaData : tldMetaData.getFunctions()) -->Line_109 $$ functionInfo.setFunctionSignature(functionMetaData.getFunctionSignature())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_97 $$ for (TagFileMetaData tagFileMetaData : tldMetaData.getTagFiles()) [ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_42 $$ tagInfo.setTagExtraInfo(tagMetaData.getTeiClass())[ FD ]
Line_98 $$ TagFileInfo tagFileInfo = new TagFileInfo()-->Line_101 $$ tagLibraryInfo.addTagFileInfo(tagFileInfo)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_128 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_10 $$ jarPath = jarPath.substring(1)-->Line_130 $$ if (jarPath.equals("META-INF/taglib.tld")) [ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_84 $$ if (attributeMetaData.getDeferredMethod() != null) [ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_70 $$ if (tagMetaData.getAttributes() != null) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_104 $$ if (tldMetaData.getFunctions() != null) [ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_27 $$ if (tldMetaData.getValidator() != null) [ CD ]
Line_7 $$ if (pos > 0) -->Line_8 $$ jarPath = relativeLocation.substring(pos)[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_134 $$ return tagLibraryInfo[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()[ CD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_88 $$ tagAttributeInfo.setDeferredMethod("false")[ FD ]
Line_117 $$ if (jarPath == null) -->Line_119 $$ tagLibraryInfo.setPath(relativeLocation)[ CD ]
Line_3 $$ String relativeLocation = location-->Line_119 $$ tagLibraryInfo.setPath(relativeLocation)[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_40 $$ tagInfo.setTagName(tagMetaData.getName())[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_51 $$ tagInfo.setLargeIcon(icon.largeIcon())[ FD ]
Line_113 $$ if (jarPath == null && relativeLocation == null) -->Line_114 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ CD ]
Line_3 $$ String relativeLocation = location-->Line_123 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_54 $$ tagInfo.setInfoString(descriptionGroup.getDescription())[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_43 $$ if (tagMetaData.getBodyContent() != null) [ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_121 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_3 $$ String relativeLocation = location-->Line_5 $$ if (relativeLocation != null && relativeLocation.startsWith("/WEB-INF/lib/")) [ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_80 $$ tagAttributeInfo.setExpectedTypeName(attributeMetaData.getDeferredValue().getType())[ FD ]
Line_47 $$ if (tagMetaData.getDescriptionGroup() != null) -->Line_55 $$ tagInfo.setDisplayName(descriptionGroup.getDisplayName())[ CD ]
Line_113 $$ if (jarPath == null && relativeLocation == null) -->Line_117 $$ if (jarPath == null) [ CD ]
Line_6 $$ int pos = relativeLocation.indexOf('/', "/WEB-INF/lib/".length())-->Line_8 $$ jarPath = relativeLocation.substring(pos)[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_93 $$ tagLibraryInfo.addTagInfo(tagInfo)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_120 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_9 $$ if (jarPath.startsWith("/")) -->Line_10 $$ jarPath = jarPath.substring(1)[ CD ]
Line_7 $$ if (pos > 0) -->Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_127 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_93 $$ tagLibraryInfo.addTagInfo(tagInfo)[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_41 $$ tagInfo.setTagClassName(tagMetaData.getTagClass())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_5 $$ if (relativeLocation != null && relativeLocation.startsWith("/WEB-INF/lib/")) [ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_16 $$ tagLibraryInfo.setTlibversion(tldMetaData.getTlibVersion())[ FD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_65 $$ tagVariableInfo.setScope(variableMetaData.getScope().toString())[ FD ]
Line_3 $$ String relativeLocation = location-->Line_6 $$ int pos = relativeLocation.indexOf('/', "/WEB-INF/lib/".length())[ FD ]
Line_4 $$ String jarPath = null-->Line_117 $$ if (jarPath == null) [ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_75 $$ tagAttributeInfo.setReqTime(attributeMetaData.getRtexprvalue())[ FD ]
Line_5 $$ if (relativeLocation != null && relativeLocation.startsWith("/WEB-INF/lib/")) -->Line_6 $$ int pos = relativeLocation.indexOf('/', "/WEB-INF/lib/".length())[ CD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_62 $$ tagVariableInfo.setClassName(variableMetaData.getVariableClass())[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_85 $$ tagAttributeInfo.setDeferredMethod("true")[ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_78 $$ if (attributeMetaData.getDeferredValue() != null) [ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_127 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) [ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_31 $$ for (ParamValueMetaData paramValueMetaData : tldMetaData.getValidator().getInitParams()) [ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_44 $$ tagInfo.setBodyContent(tagMetaData.getBodyContent().toString())[ FD ]
Line_127 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) -->Line_128 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ CD ]
Line_8 $$ jarPath = relativeLocation.substring(pos)-->Line_126 $$ tagLibraryInfo.setPath(jarPath)[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_29 $$ tagLibraryValidatorInfo.setValidatorClass(tldMetaData.getValidator().getValidatorClass())[ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_128 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_40 $$ tagInfo.setTagName(tagMetaData.getName())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_121 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ FD ]
Line_8 $$ jarPath = relativeLocation.substring(pos)-->Line_10 $$ jarPath = jarPath.substring(1)[ FD ]
Line_117 $$ if (jarPath == null) -->Line_118 $$ tagLibraryInfo.setLocation("")[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_119 $$ tagLibraryInfo.setPath(relativeLocation)[ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_75 $$ tagAttributeInfo.setReqTime(attributeMetaData.getRtexprvalue())[ FD ]
Line_58 $$ for (VariableMetaData variableMetaData : tagMetaData.getVariables()) -->Line_64 $$ if (variableMetaData.getScope() != null) [ FD ]
Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)-->Line_125 $$ tagLibraryInfo.setLocation(relativeLocation)[ FD ]
Line_17 $$ if (tldMetaData.getJspVersion() == null) -->Line_18 $$ tagLibraryInfo.setJspversion(tldMetaData.getVersion())[ CD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_74 $$ tagAttributeInfo.setType(attributeMetaData.getType())[ FD ]
Line_117 $$ if (jarPath == null) -->Line_123 $$ ret.put(relativeLocation, tagLibraryInfo)[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_16 $$ tagLibraryInfo.setTlibversion(tldMetaData.getTlibVersion())[ FD ]
Line_49 $$ if (descriptionGroup.getIcons() != null && descriptionGroup.getIcons().value() != null && (descriptionGroup.getIcons().value().length > 0)) -->Line_50 $$ Icon icon = descriptionGroup.getIcons().value()[0][ CD ]
Line_10 $$ jarPath = jarPath.substring(1)-->Line_126 $$ tagLibraryInfo.setPath(jarPath)[ FD ]
Line_4 $$ String jarPath = null-->Line_10 $$ jarPath = jarPath.substring(1)[ FD ]
Line_38 $$ for (TagMetaData tagMetaData : tldMetaData.getTags()) -->Line_57 $$ if (tagMetaData.getVariables() != null) [ FD ]
Line_6 $$ int pos = relativeLocation.indexOf('/', "/WEB-INF/lib/".length())-->Line_12 $$ relativeLocation = relativeLocation.substring(0, pos)[ FD ]
Line_4 $$ String jarPath = null-->Line_126 $$ tagLibraryInfo.setPath(jarPath)[ FD ]
Line_130 $$ if (jarPath.equals("META-INF/taglib.tld")) -->Line_131 $$ ret.put(relativeLocation, tagLibraryInfo)[ CD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_125 $$ tagLibraryInfo.setLocation(relativeLocation)[ FD ]
Line_105 $$ for (FunctionMetaData functionMetaData : tldMetaData.getFunctions()) -->Line_107 $$ functionInfo.setName(functionMetaData.getName())[ FD ]
Line_105 $$ for (FunctionMetaData functionMetaData : tldMetaData.getFunctions()) -->Line_108 $$ functionInfo.setFunctionClass(functionMetaData.getFunctionClass())[ FD ]
Line_78 $$ if (attributeMetaData.getDeferredValue() != null) -->Line_82 $$ tagAttributeInfo.setDeferredValue("false")[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_17 $$ if (tldMetaData.getJspVersion() == null) [ CD ]
Line_8 $$ jarPath = relativeLocation.substring(pos)-->Line_117 $$ if (jarPath == null) [ FD ]
Line_15 $$ TagLibraryInfo tagLibraryInfo = new TagLibraryInfo()-->Line_123 $$ ret.put(relativeLocation, tagLibraryInfo)[ FD ]
Line_114 $$ if (!ret.containsKey(tagLibraryInfo.getUri())) -->Line_115 $$ ret.put(tagLibraryInfo.getUri(), tagLibraryInfo)[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_18 $$ tagLibraryInfo.setJspversion(tldMetaData.getVersion())[ FD ]
Line_24 $$ if (tldMetaData.getDescriptionGroup() != null) -->Line_25 $$ tagLibraryInfo.setInfo(tldMetaData.getDescriptionGroup().getDescription())[ CD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_23 $$ tagLibraryInfo.setUri(tldMetaData.getUri())[ CD ]
Line_39 $$ TagInfo tagInfo = new TagInfo()-->Line_52 $$ tagInfo.setSmallIcon(icon.smallIcon())[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_74 $$ tagAttributeInfo.setType(attributeMetaData.getType())[ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_73 $$ tagAttributeInfo.setName(attributeMetaData.getName())[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_76 $$ tagAttributeInfo.setRequired(attributeMetaData.getRequired())[ FD ]
Line_72 $$ TagAttributeInfo tagAttributeInfo = new TagAttributeInfo()-->Line_82 $$ tagAttributeInfo.setDeferredValue("false")[ FD ]
Line_59 $$ TagVariableInfo tagVariableInfo = new TagVariableInfo()-->Line_60 $$ tagVariableInfo.setNameGiven(variableMetaData.getNameGiven())[ FD ]
Line_71 $$ for (AttributeMetaData attributeMetaData : tagMetaData.getAttributes()) -->Line_76 $$ tagAttributeInfo.setRequired(attributeMetaData.getRequired())[ FD ]
Line_97 $$ for (TagFileMetaData tagFileMetaData : tldMetaData.getTagFiles()) -->Line_100 $$ tagFileInfo.setPath(tagFileMetaData.getPath())[ FD ]
Line_2 $$ private static TagLibraryInfo createTldInfo(final String location, final TldMetaData tldMetaData, final HashMap<String, TagLibraryInfo> ret) throws ClassNotFoundException -->Line_30 $$ if (tldMetaData.getValidator().getInitParams() != null) [ FD ]
Line_64 $$ if (variableMetaData.getScope() != null) -->Line_65 $$ tagVariableInfo.setScope(variableMetaData.getScope().toString())[ CD ]
