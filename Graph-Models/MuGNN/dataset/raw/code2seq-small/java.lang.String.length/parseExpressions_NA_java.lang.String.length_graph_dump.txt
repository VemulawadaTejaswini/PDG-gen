Line_13 $$ int afterPrefixIndex = prefixIndex + prefix.length()-->Line_18 $$ if (suffixIndex == afterPrefixIndex) [ FD ]
Line_4 $$ String prefix = context.getExpressionPrefix()-->Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)[ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_26 $$ expressions.add(doParseExpression(expr, context))[ CD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)[ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ CD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_15 $$ if (suffixIndex == -1) [ CD ]
Line_3 $$ List<Expression> expressions = new LinkedList<Expression>()-->Line_26 $$ expressions.add(doParseExpression(expr, context))[ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_22 $$ expr = expr.trim()[ CD ]
Line_6 $$ int startIdx = 0-->Line_27 $$ startIdx = suffixIndex + suffix.length()[ FD ]
Line_3 $$ List<Expression> expressions = new LinkedList<Expression>()-->Line_33 $$ return expressions.toArray(new Expression[expressions.size()])[ FD ]
Line_13 $$ int afterPrefixIndex = prefixIndex + prefix.length()-->Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)[ FD ]
Line_6 $$ int startIdx = 0-->Line_7 $$ while (startIdx < expressionString.length()) [ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_30 $$ startIdx = expressionString.length()-->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_30 $$ startIdx = expressionString.length()-->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ FD ]
Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)-->Line_16 $$ throw new ParseException(expressionString, prefixIndex, "No ending suffix '" + suffix + "' for expression starting at character " + prefixIndex + ": " + expressionString.substring(prefixIndex))[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_7 $$ while (startIdx < expressionString.length()) [ CD ]
Line_30 $$ startIdx = expressionString.length()-->Line_7 $$ while (startIdx < expressionString.length()) [ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)[ CD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_13 $$ int afterPrefixIndex = prefixIndex + prefix.length()[ CD ]
Line_7 $$ while (startIdx < expressionString.length()) -->Line_9 $$ if (prefixIndex >= startIdx) [ CD ]
Line_22 $$ expr = expr.trim()-->Line_26 $$ expressions.add(doParseExpression(expr, context))[ FD ]
Line_4 $$ String prefix = context.getExpressionPrefix()-->Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)[ FD ]
Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)-->Line_23 $$ if (expr.length() == 0) [ FD ]
Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)-->Line_26 $$ expressions.add(doParseExpression(expr, context))[ FD ]
Line_6 $$ int startIdx = 0-->Line_30 $$ startIdx = expressionString.length()[ FD ]
Line_22 $$ expr = expr.trim()-->Line_23 $$ if (expr.length() == 0) [ FD ]
Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)-->Line_27 $$ startIdx = suffixIndex + suffix.length()[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_5 $$ String suffix = context.getExpressionSuffix()[ CD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_23 $$ if (expr.length() == 0) [ CD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_7 $$ while (startIdx < expressionString.length()) [ FD ]
Line_4 $$ String prefix = context.getExpressionPrefix()-->Line_13 $$ int afterPrefixIndex = prefixIndex + prefix.length()[ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_3 $$ List<Expression> expressions = new LinkedList<Expression>()-->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ FD ]
Line_30 $$ startIdx = expressionString.length()-->Line_10 $$ if (prefixIndex > startIdx) [ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_26 $$ expressions.add(doParseExpression(expr, context))[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_33 $$ return expressions.toArray(new Expression[expressions.size()])[ CD ]
Line_30 $$ startIdx = expressionString.length()-->Line_9 $$ if (prefixIndex >= startIdx) [ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_10 $$ if (prefixIndex > startIdx) [ CD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ FD ]
Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)-->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_16 $$ throw new ParseException(expressionString, prefixIndex, "No ending suffix '" + suffix + "' for expression starting at character " + prefixIndex + ": " + expressionString.substring(prefixIndex))[ FD ]
Line_4 $$ String prefix = context.getExpressionPrefix()-->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ FD ]
Line_30 $$ startIdx = expressionString.length()-->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_18 $$ if (suffixIndex == afterPrefixIndex) [ CD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_5 $$ String suffix = context.getExpressionSuffix()[ FD ]
Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)-->Line_15 $$ if (suffixIndex == -1) [ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_3 $$ List<Expression> expressions = new LinkedList<Expression>()[ CD ]
Line_6 $$ int startIdx = 0-->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)-->Line_22 $$ expr = expr.trim()[ FD ]
Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)-->Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)[ FD ]
Line_6 $$ int startIdx = 0-->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_4 $$ String prefix = context.getExpressionPrefix()[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_30 $$ startIdx = expressionString.length()[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)[ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_30 $$ startIdx = expressionString.length()[ CD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ FD ]
Line_10 $$ if (prefixIndex > startIdx) -->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ CD ]
Line_7 $$ while (startIdx < expressionString.length()) -->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ CD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_21 $$ String expr = expressionString.substring(prefixIndex + prefix.length(), suffixIndex)[ CD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_29 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx)))[ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_30 $$ startIdx = expressionString.length()[ FD ]
Line_5 $$ String suffix = context.getExpressionSuffix()-->Line_27 $$ startIdx = suffixIndex + suffix.length()[ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_10 $$ if (prefixIndex > startIdx) [ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_4 $$ String prefix = context.getExpressionPrefix()[ CD ]
Line_3 $$ List<Expression> expressions = new LinkedList<Expression>()-->Line_11 $$ expressions.add(createLiteralExpression(context, expressionString.substring(startIdx, prefixIndex)))[ FD ]
Line_6 $$ int startIdx = 0-->Line_10 $$ if (prefixIndex > startIdx) [ FD ]
Line_6 $$ int startIdx = 0-->Line_9 $$ if (prefixIndex >= startIdx) [ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_7 $$ while (startIdx < expressionString.length()) [ FD ]
Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)-->Line_18 $$ if (suffixIndex == afterPrefixIndex) [ FD ]
Line_9 $$ if (prefixIndex >= startIdx) -->Line_27 $$ startIdx = suffixIndex + suffix.length()[ CD ]
Line_6 $$ int startIdx = 0-->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ FD ]
Line_2 $$ private Expression[] parseExpressions(String expressionString, ParserContext context) throws ParseException -->Line_6 $$ int startIdx = 0[ CD ]
Line_5 $$ String suffix = context.getExpressionSuffix()-->Line_14 $$ int suffixIndex = skipToCorrectEndSuffix(prefix, suffix, expressionString, afterPrefixIndex)[ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)[ FD ]
Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)-->Line_9 $$ if (prefixIndex >= startIdx) [ FD ]
Line_8 $$ int prefixIndex = expressionString.indexOf(prefix, startIdx)-->Line_10 $$ if (prefixIndex > startIdx) [ FD ]
Line_27 $$ startIdx = suffixIndex + suffix.length()-->Line_9 $$ if (prefixIndex >= startIdx) [ FD ]
