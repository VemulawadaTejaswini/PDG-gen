Line_23 $$ str = PAT_SCH.matcher(str).replaceFirst("SSS")-->Line_27 $$ str = PAT_DT_ETC.matcher(str).replaceFirst("D")[ FD ]
Line_22 $$ str = PAT_PH_PF.matcher(str).replaceFirst("FF")-->Line_23 $$ str = PAT_SCH.matcher(str).replaceFirst("SSS")[ FD ]
Line_21 $$ str = PAT_K.matcher(str).replaceFirst("C")-->Line_22 $$ str = PAT_PH_PF.matcher(str).replaceFirst("FF")[ FD ]
Line_9 $$ if (str == null) -->Line_10 $$ return null[ CD ]
Line_20 $$ str = PAT_KN.matcher(str).replaceFirst("NN")-->Line_27 $$ str = PAT_DT_ETC.matcher(str).replaceFirst("D")[ FD ]
Line_37 $$ final char[] transcoded = transcodeRemaining(chars[i - 1], chars[i], next, aNext)-->Line_38 $$ System.arraycopy(transcoded, 0, chars, i, transcoded.length)[ FD ]
Line_63 $$ final String string = key.toString()-->Line_64 $$ return this.isStrict() ? string.substring(0, Math.min(TRUE_LENGTH, string.length())) : string[ FD ]
Line_20 $$ str = PAT_KN.matcher(str).replaceFirst("NN")-->Line_30 $$ key.append(str.charAt(0))[ FD ]
Line_14 $$ if (str.length() == 0) -->Line_15 $$ return str[ CD ]
Line_22 $$ str = PAT_PH_PF.matcher(str).replaceFirst("FF")-->Line_30 $$ key.append(str.charAt(0))[ FD ]
Line_27 $$ str = PAT_DT_ETC.matcher(str).replaceFirst("D")-->Line_30 $$ key.append(str.charAt(0))[ FD ]
Line_21 $$ str = PAT_K.matcher(str).replaceFirst("C")-->Line_23 $$ str = PAT_SCH.matcher(str).replaceFirst("SSS")[ FD ]
Line_44 $$ if (key.length() > 1) -->Line_51 $$ if (key.length() > 2) [ CD ]
Line_34 $$ for (int i = 1; i < len; i++) -->Line_36 $$ final char aNext = i < len - 2 ? chars[i + 2] : SPACE[ CD ]
Line_45 $$ char lastChar = key.charAt(key.length() - 1)-->Line_49 $$ lastChar = key.charAt(key.length() - 1)[ FD ]
Line_21 $$ str = PAT_K.matcher(str).replaceFirst("C")-->Line_30 $$ key.append(str.charAt(0))[ FD ]
Line_34 $$ for (int i = 1; i < len; i++) -->Line_35 $$ final char next = i < len - 1 ? chars[i + 1] : SPACE[ CD ]
Line_20 $$ str = PAT_KN.matcher(str).replaceFirst("NN")-->Line_21 $$ str = PAT_K.matcher(str).replaceFirst("C")[ FD ]
Line_20 $$ str = PAT_KN.matcher(str).replaceFirst("NN")-->Line_22 $$ str = PAT_PH_PF.matcher(str).replaceFirst("FF")[ FD ]
Line_35 $$ final char next = i < len - 1 ? chars[i + 1] : SPACE-->Line_37 $$ final char[] transcoded = transcodeRemaining(chars[i - 1], chars[i], next, aNext)[ FD ]
Line_36 $$ final char aNext = i < len - 2 ? chars[i + 2] : SPACE-->Line_37 $$ final char[] transcoded = transcodeRemaining(chars[i - 1], chars[i], next, aNext)[ FD ]
Line_44 $$ if (key.length() > 1) -->Line_45 $$ char lastChar = key.charAt(key.length() - 1)[ CD ]
Line_34 $$ for (int i = 1; i < len; i++) -->Line_38 $$ System.arraycopy(transcoded, 0, chars, i, transcoded.length)[ FD ]
Line_34 $$ for (int i = 1; i < len; i++) -->Line_37 $$ final char[] transcoded = transcodeRemaining(chars[i - 1], chars[i], next, aNext)[ CD ]
Line_51 $$ if (key.length() > 2) -->Line_52 $$ final char last2Char = key.charAt(key.length() - 2)[ CD ]
Line_34 $$ for (int i = 1; i < len; i++) -->Line_38 $$ System.arraycopy(transcoded, 0, chars, i, transcoded.length)[ CD ]
Line_20 $$ str = PAT_KN.matcher(str).replaceFirst("NN")-->Line_23 $$ str = PAT_SCH.matcher(str).replaceFirst("SSS")[ FD ]
Line_23 $$ str = PAT_SCH.matcher(str).replaceFirst("SSS")-->Line_30 $$ key.append(str.charAt(0))[ FD ]
Line_22 $$ str = PAT_PH_PF.matcher(str).replaceFirst("FF")-->Line_27 $$ str = PAT_DT_ETC.matcher(str).replaceFirst("D")[ FD ]
Line_21 $$ str = PAT_K.matcher(str).replaceFirst("C")-->Line_27 $$ str = PAT_DT_ETC.matcher(str).replaceFirst("D")[ FD ]
Line_33 $$ final int len = chars.length-->Line_34 $$ for (int i = 1; i < len; i++) [ FD ]
