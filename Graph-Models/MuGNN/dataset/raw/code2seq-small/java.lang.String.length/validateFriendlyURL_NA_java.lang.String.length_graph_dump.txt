Line_15 $$ if (friendlyURL.contains(StringPool.DOUBLE_SLASH)) -->Line_16 $$ return LayoutFriendlyURLException.ADJACENT_SLASHES[ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_12 $$ if (friendlyURL.endsWith(StringPool.SLASH)) [ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_9 $$ if (!friendlyURL.startsWith(StringPool.SLASH)) [ FD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_18 $$ for (char c : friendlyURL.toCharArray()) [ FD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_15 $$ if (friendlyURL.contains(StringPool.DOUBLE_SLASH)) [ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_23 $$ return -1[ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_12 $$ if (friendlyURL.endsWith(StringPool.SLASH)) [ FD ]
Line_6 $$ if (checkMaxLength && (friendlyURL.length() > LayoutConstants.FRIENDLY_URL_MAX_LENGTH)) -->Line_7 $$ return LayoutFriendlyURLException.TOO_LONG[ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_3 $$ if (friendlyURL.length() < 2) [ FD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_15 $$ if (friendlyURL.contains(StringPool.DOUBLE_SLASH)) [ FD ]
Line_19 $$ if (!Validator.isChar(c) && !Validator.isDigit(c) && (c != CharPool.DASH) && (c != CharPool.PERCENT) && (c != CharPool.PERIOD) && (c != CharPool.PLUS) && (c != CharPool.SLASH) && (c != CharPool.STAR) && (c != CharPool.UNDERLINE)) -->Line_20 $$ return LayoutFriendlyURLException.INVALID_CHARACTERS[ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_9 $$ if (!friendlyURL.startsWith(StringPool.SLASH)) [ CD ]
Line_3 $$ if (friendlyURL.length() < 2) -->Line_4 $$ return LayoutFriendlyURLException.TOO_SHORT[ CD ]
Line_18 $$ for (char c : friendlyURL.toCharArray()) -->Line_19 $$ if (!Validator.isChar(c) && !Validator.isDigit(c) && (c != CharPool.DASH) && (c != CharPool.PERCENT) && (c != CharPool.PERIOD) && (c != CharPool.PLUS) && (c != CharPool.SLASH) && (c != CharPool.STAR) && (c != CharPool.UNDERLINE)) [ FD ]
Line_9 $$ if (!friendlyURL.startsWith(StringPool.SLASH)) -->Line_10 $$ return LayoutFriendlyURLException.DOES_NOT_START_WITH_SLASH[ CD ]
Line_12 $$ if (friendlyURL.endsWith(StringPool.SLASH)) -->Line_13 $$ return LayoutFriendlyURLException.ENDS_WITH_SLASH[ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_6 $$ if (checkMaxLength && (friendlyURL.length() > LayoutConstants.FRIENDLY_URL_MAX_LENGTH)) [ FD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_3 $$ if (friendlyURL.length() < 2) [ CD ]
Line_2 $$ public static int validateFriendlyURL(String friendlyURL, boolean checkMaxLength) -->Line_6 $$ if (checkMaxLength && (friendlyURL.length() > LayoutConstants.FRIENDLY_URL_MAX_LENGTH)) [ CD ]
