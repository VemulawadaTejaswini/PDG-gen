Line_8 $$ if (type == NUM_DOUBLE) -->Line_9 $$ if (literalValue.endsWith("d") || literalValue.endsWith("D")) [ CD ]
Line_3 $$ String literalValue = text-->Line_14 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ FD ]
Line_3 $$ String literalValue = text-->Line_13 $$ if (literalValue.endsWith("bd") || literalValue.endsWith("BD")) [ FD ]
Line_19 $$ number = new BigDecimal(literalValue)-->Line_23 $$ return DECIMAL_LITERAL_FORMAT.getFormatter().format(number)[ FD ]
Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_10 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ FD ]
Line_12 $$ if (type == NUM_BIG_DECIMAL) -->Line_13 $$ if (literalValue.endsWith("bd") || literalValue.endsWith("BD")) [ CD ]
Line_10 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_13 $$ if (literalValue.endsWith("bd") || literalValue.endsWith("BD")) [ FD ]
Line_13 $$ if (literalValue.endsWith("bd") || literalValue.endsWith("BD")) -->Line_14 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ CD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_4 $$ if (type == NUM_FLOAT) [ CD ]
Line_4 $$ if (type == NUM_FLOAT) -->Line_5 $$ if (literalValue.endsWith("f") || literalValue.endsWith("F")) [ CD ]
Line_3 $$ String literalValue = text-->Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ FD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_23 $$ return DECIMAL_LITERAL_FORMAT.getFormatter().format(number)[ CD ]
Line_3 $$ String literalValue = text-->Line_10 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ FD ]
Line_17 $$ final BigDecimal number-->Line_23 $$ return DECIMAL_LITERAL_FORMAT.getFormatter().format(number)[ FD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_3 $$ String literalValue = text[ CD ]
Line_4 $$ if (type == NUM_FLOAT) -->Line_8 $$ if (type == NUM_DOUBLE) [ CD ]
Line_10 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_14 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ FD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_12 $$ if (type == NUM_BIG_DECIMAL) [ FD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_8 $$ if (type == NUM_DOUBLE) [ FD ]
Line_9 $$ if (literalValue.endsWith("d") || literalValue.endsWith("D")) -->Line_10 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ CD ]
Line_3 $$ String literalValue = text-->Line_9 $$ if (literalValue.endsWith("d") || literalValue.endsWith("D")) [ FD ]
Line_5 $$ if (literalValue.endsWith("f") || literalValue.endsWith("F")) -->Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)[ CD ]
Line_17 $$ final BigDecimal number-->Line_19 $$ number = new BigDecimal(literalValue)[ FD ]
Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_14 $$ literalValue = literalValue.substring(0, literalValue.length() - 2)[ FD ]
Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_9 $$ if (literalValue.endsWith("d") || literalValue.endsWith("D")) [ FD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_17 $$ final BigDecimal number[ CD ]
Line_2 $$ public String determineDecimalRepresentation(String text, int type) -->Line_4 $$ if (type == NUM_FLOAT) [ FD ]
Line_3 $$ String literalValue = text-->Line_5 $$ if (literalValue.endsWith("f") || literalValue.endsWith("F")) [ FD ]
Line_6 $$ literalValue = literalValue.substring(0, literalValue.length() - 1)-->Line_13 $$ if (literalValue.endsWith("bd") || literalValue.endsWith("BD")) [ FD ]
Line_8 $$ if (type == NUM_DOUBLE) -->Line_12 $$ if (type == NUM_BIG_DECIMAL) [ CD ]
