Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_14 $$ return null[ CD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_3 $$ if (log.getRevisionList().isEmpty()) [ CD ]
Line_6 $$ final String rcsFileName = log.getRcsFileName()-->Line_7 $$ if (FileUtil.toSystemIndependentName(rcsFileName).startsWith(FileUtil.toSystemIndependentName(repository))) [ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_11 $$ if (index >= 0) [ CD ]
Line_10 $$ final int index = rcsFileName.indexOf(module)-->Line_12 $$ return buildWrapper(log, rcsFileName, index)[ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_7 $$ if (FileUtil.toSystemIndependentName(rcsFileName).startsWith(FileUtil.toSystemIndependentName(repository))) [ CD ]
Line_6 $$ final String rcsFileName = log.getRcsFileName()-->Line_12 $$ return buildWrapper(log, rcsFileName, index)[ FD ]
Line_7 $$ if (FileUtil.toSystemIndependentName(rcsFileName).startsWith(FileUtil.toSystemIndependentName(repository))) -->Line_8 $$ return buildWrapper(log, rcsFileName, repository.length())[ CD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_6 $$ final String rcsFileName = log.getRcsFileName()[ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_3 $$ if (log.getRevisionList().isEmpty()) [ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_10 $$ final int index = rcsFileName.indexOf(module)[ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_8 $$ return buildWrapper(log, rcsFileName, repository.length())[ FD ]
Line_3 $$ if (log.getRevisionList().isEmpty()) -->Line_4 $$ return null[ CD ]
Line_11 $$ if (index >= 0) -->Line_12 $$ return buildWrapper(log, rcsFileName, index)[ CD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_6 $$ final String rcsFileName = log.getRcsFileName()[ CD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_7 $$ if (FileUtil.toSystemIndependentName(rcsFileName).startsWith(FileUtil.toSystemIndependentName(repository))) [ FD ]
Line_6 $$ final String rcsFileName = log.getRcsFileName()-->Line_8 $$ return buildWrapper(log, rcsFileName, repository.length())[ FD ]
Line_6 $$ final String rcsFileName = log.getRcsFileName()-->Line_10 $$ final int index = rcsFileName.indexOf(module)[ FD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_10 $$ final int index = rcsFileName.indexOf(module)[ CD ]
Line_2 $$ public static LogInformationWrapper wrap(final String repository, String module, final LogInformation log) -->Line_12 $$ return buildWrapper(log, rcsFileName, index)[ FD ]
Line_10 $$ final int index = rcsFileName.indexOf(module)-->Line_11 $$ if (index >= 0) [ FD ]
