Line_6 $$ int offset = toSplit.indexOf(delimiter)-->Line_7 $$ if (offset < 0) [ FD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_7 $$ if (offset < 0) [ CD ]
Line_3 $$ if (!hasLength(toSplit) || !hasLength(delimiter)) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_10 $$ String beforeDelimiter = toSplit.substring(0, offset)[ FD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_6 $$ int offset = toSplit.indexOf(delimiter)[ CD ]
Line_6 $$ int offset = toSplit.indexOf(delimiter)-->Line_10 $$ String beforeDelimiter = toSplit.substring(0, offset)[ FD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_3 $$ if (!hasLength(toSplit) || !hasLength(delimiter)) [ CD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_6 $$ int offset = toSplit.indexOf(delimiter)[ FD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_12 $$ return new String[] [ CD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_3 $$ if (!hasLength(toSplit) || !hasLength(delimiter)) [ FD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_11 $$ String afterDelimiter = toSplit.substring(offset + delimiter.length())[ FD ]
Line_7 $$ if (offset < 0) -->Line_8 $$ return null[ CD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_10 $$ String beforeDelimiter = toSplit.substring(0, offset)[ CD ]
Line_2 $$ public static String[] split(String toSplit, String delimiter) -->Line_11 $$ String afterDelimiter = toSplit.substring(offset + delimiter.length())[ CD ]
