Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_5 $$ int prefixLen = prefix.length()[ CD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_4 $$ int propertyNameLen = propertyName.length()[ FD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_4 $$ int propertyNameLen = propertyName.length()[ CD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_6 $$ for (int j = 1; j < prefixLen && j < propertyNameLen; j++) [ CD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_11 $$ return overlap[ CD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_3 $$ int overlap = 0[ CD ]
Line_3 $$ int overlap = 0-->Line_8 $$ overlap = j[ FD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_5 $$ int prefixLen = prefix.length()[ FD ]
Line_7 $$ if (prefix.substring(prefixLen - j).equals(propertyName.substring(0, j))) -->Line_8 $$ overlap = j[ CD ]
Line_6 $$ for (int j = 1; j < prefixLen && j < propertyNameLen; j++) -->Line_8 $$ overlap = j[ FD ]
Line_6 $$ for (int j = 1; j < prefixLen && j < propertyNameLen; j++) -->Line_7 $$ if (prefix.substring(prefixLen - j).equals(propertyName.substring(0, j))) [ FD ]
Line_6 $$ for (int j = 1; j < prefixLen && j < propertyNameLen; j++) -->Line_7 $$ if (prefix.substring(prefixLen - j).equals(propertyName.substring(0, j))) [ CD ]
Line_2 $$ private static int getOverlap(final String propertyName, final String prefix) -->Line_7 $$ if (prefix.substring(prefixLen - j).equals(propertyName.substring(0, j))) [ FD ]
