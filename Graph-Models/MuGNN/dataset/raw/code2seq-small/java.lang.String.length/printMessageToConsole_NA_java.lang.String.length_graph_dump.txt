Line_22 $$ if (messagePrefix != null) -->Line_23 $$ String formattedPrefix = myFormatter.formatPrefix(messagePrefix)[ CD ]
Line_18 $$ if (key != null) -->Line_20 $$ if (type != null) [ CD ]
Line_20 $$ if (type != null) -->Line_27 $$ console.print(formattedMessage + "\n", type)[ CD ]
Line_20 $$ if (type != null) -->Line_21 $$ final String messagePrefix = processingResult.getMessagePrefix()[ CD ]
Line_15 $$ final LogFilterModel.MyProcessingResult processingResult = myModel.processLine(line)-->Line_16 $$ if (processingResult.isApplicable()) [ FD ]
Line_4 $$ if (myContentPreprocessor != null) -->Line_16 $$ if (processingResult.isApplicable()) [ CD ]
Line_23 $$ String formattedPrefix = myFormatter.formatPrefix(messagePrefix)-->Line_24 $$ console.print(formattedPrefix, type)[ FD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_4 $$ if (myContentPreprocessor != null) [ CD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_15 $$ final LogFilterModel.MyProcessingResult processingResult = myModel.processLine(line)[ FD ]
Line_6 $$ for (LogFragment fragment : fragments) -->Line_7 $$ ConsoleViewContentType consoleViewType = ConsoleViewContentType.getConsoleViewType(fragment.getOutputType())[ FD ]
Line_17 $$ final Key key = processingResult.getKey()-->Line_19 $$ ConsoleViewContentType type = ConsoleViewContentType.getConsoleViewType(key)[ FD ]
Line_9 $$ String formattedText = myFormatter.formatMessage(fragment.getText())-->Line_10 $$ console.print(formattedText, consoleViewType)[ FD ]
Line_8 $$ if (consoleViewType != null) -->Line_10 $$ console.print(formattedText, consoleViewType)[ CD ]
Line_8 $$ if (consoleViewType != null) -->Line_9 $$ String formattedText = myFormatter.formatMessage(fragment.getText())[ CD ]
Line_7 $$ ConsoleViewContentType consoleViewType = ConsoleViewContentType.getConsoleViewType(fragment.getOutputType())-->Line_8 $$ if (consoleViewType != null) [ FD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_13 $$ return line.length() + 1[ FD ]
Line_16 $$ if (processingResult.isApplicable()) -->Line_17 $$ final Key key = processingResult.getKey()[ CD ]
Line_20 $$ if (type != null) -->Line_28 $$ return (messagePrefix != null ? messagePrefix.length() : 0) + line.length() + 1[ CD ]
Line_3 $$ final ConsoleView console = getConsoleNotNull()-->Line_27 $$ console.print(formattedMessage + "\n", type)[ FD ]
Line_21 $$ final String messagePrefix = processingResult.getMessagePrefix()-->Line_28 $$ return (messagePrefix != null ? messagePrefix.length() : 0) + line.length() + 1[ FD ]
Line_19 $$ ConsoleViewContentType type = ConsoleViewContentType.getConsoleViewType(key)-->Line_24 $$ console.print(formattedPrefix, type)[ FD ]
Line_20 $$ if (type != null) -->Line_26 $$ String formattedMessage = myFormatter.formatMessage(line)[ CD ]
Line_4 $$ if (myContentPreprocessor != null) -->Line_15 $$ final LogFilterModel.MyProcessingResult processingResult = myModel.processLine(line)[ CD ]
Line_4 $$ if (myContentPreprocessor != null) -->Line_13 $$ return line.length() + 1[ CD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_3 $$ final ConsoleView console = getConsoleNotNull()[ CD ]
Line_7 $$ ConsoleViewContentType consoleViewType = ConsoleViewContentType.getConsoleViewType(fragment.getOutputType())-->Line_10 $$ console.print(formattedText, consoleViewType)[ FD ]
Line_4 $$ if (myContentPreprocessor != null) -->Line_32 $$ return 0[ CD ]
Line_3 $$ final ConsoleView console = getConsoleNotNull()-->Line_24 $$ console.print(formattedPrefix, type)[ FD ]
Line_15 $$ final LogFilterModel.MyProcessingResult processingResult = myModel.processLine(line)-->Line_21 $$ final String messagePrefix = processingResult.getMessagePrefix()[ FD ]
Line_19 $$ ConsoleViewContentType type = ConsoleViewContentType.getConsoleViewType(key)-->Line_20 $$ if (type != null) [ FD ]
Line_19 $$ ConsoleViewContentType type = ConsoleViewContentType.getConsoleViewType(key)-->Line_27 $$ console.print(formattedMessage + "\n", type)[ FD ]
Line_21 $$ final String messagePrefix = processingResult.getMessagePrefix()-->Line_23 $$ String formattedPrefix = myFormatter.formatPrefix(messagePrefix)[ FD ]
Line_21 $$ final String messagePrefix = processingResult.getMessagePrefix()-->Line_22 $$ if (messagePrefix != null) [ FD ]
Line_4 $$ if (myContentPreprocessor != null) -->Line_5 $$ List<LogFragment> fragments = myContentPreprocessor.parseLogLine(line + '\n')[ CD ]
Line_16 $$ if (processingResult.isApplicable()) -->Line_18 $$ if (key != null) [ CD ]
Line_20 $$ if (type != null) -->Line_22 $$ if (messagePrefix != null) [ CD ]
Line_22 $$ if (messagePrefix != null) -->Line_24 $$ console.print(formattedPrefix, type)[ CD ]
Line_18 $$ if (key != null) -->Line_19 $$ ConsoleViewContentType type = ConsoleViewContentType.getConsoleViewType(key)[ CD ]
Line_3 $$ final ConsoleView console = getConsoleNotNull()-->Line_10 $$ console.print(formattedText, consoleViewType)[ FD ]
Line_15 $$ final LogFilterModel.MyProcessingResult processingResult = myModel.processLine(line)-->Line_17 $$ final Key key = processingResult.getKey()[ FD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_28 $$ return (messagePrefix != null ? messagePrefix.length() : 0) + line.length() + 1[ FD ]
Line_2 $$ private int printMessageToConsole(String line) -->Line_26 $$ String formattedMessage = myFormatter.formatMessage(line)[ FD ]
Line_6 $$ for (LogFragment fragment : fragments) -->Line_9 $$ String formattedText = myFormatter.formatMessage(fragment.getText())[ FD ]
Line_17 $$ final Key key = processingResult.getKey()-->Line_18 $$ if (key != null) [ FD ]
