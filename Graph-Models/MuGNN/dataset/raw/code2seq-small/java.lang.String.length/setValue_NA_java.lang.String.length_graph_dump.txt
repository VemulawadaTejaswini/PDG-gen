Line_34 $$ if (sqlType == Types.DATE) -->Line_35 $$ if (inValue instanceof java.util.Date) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_30 $$ ps.setObject(paramIndex, inValue, sqlType, scale)[ FD ]
Line_49 $$ if (inValue instanceof java.sql.Time) -->Line_50 $$ ps.setTime(paramIndex, (java.sql.Time) inValue)[ CD ]
Line_78 $$ if (inValue instanceof Calendar) -->Line_82 $$ ps.setObject(paramIndex, inValue)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_3 $$ if (inValue instanceof SqlTypeValue) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_85 $$ ps.setObject(paramIndex, inValue, sqlType)[ FD ]
Line_62 $$ if (inValue instanceof java.sql.Timestamp) -->Line_65 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime()))[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_74 $$ if (isStringValue(inValue.getClass())) [ FD ]
Line_61 $$ if (inValue instanceof java.util.Date) -->Line_62 $$ if (inValue instanceof java.sql.Timestamp) [ CD ]
Line_47 $$ if (sqlType == Types.TIME) -->Line_48 $$ if (inValue instanceof java.util.Date) [ CD ]
Line_36 $$ if (inValue instanceof java.sql.Date) -->Line_37 $$ ps.setDate(paramIndex, (java.sql.Date) inValue)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_63 $$ ps.setTimestamp(paramIndex, (java.sql.Timestamp) inValue)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_47 $$ if (sqlType == Types.TIME) [ FD ]
Line_48 $$ if (inValue instanceof java.util.Date) -->Line_49 $$ if (inValue instanceof java.sql.Time) [ CD ]
Line_73 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && "Oracle".equals(ps.getConnection().getMetaData().getDatabaseProductName()))) -->Line_85 $$ ps.setObject(paramIndex, inValue, sqlType)[ CD ]
Line_26 $$ if (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) -->Line_34 $$ if (sqlType == Types.DATE) [ CD ]
Line_34 $$ if (sqlType == Types.DATE) -->Line_47 $$ if (sqlType == Types.TIME) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_67 $$ if (inValue instanceof Calendar) [ FD ]
Line_76 $$ if (isDateValue(inValue.getClass())) -->Line_77 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime()))[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_39 $$ ps.setDate(paramIndex, new java.sql.Date(((java.util.Date) inValue).getTime()))[ FD ]
Line_76 $$ if (isDateValue(inValue.getClass())) -->Line_78 $$ if (inValue instanceof Calendar) [ CD ]
Line_60 $$ if (sqlType == Types.TIMESTAMP) -->Line_61 $$ if (inValue instanceof java.util.Date) [ CD ]
Line_29 $$ if (scale != null) -->Line_32 $$ ps.setObject(paramIndex, inValue, sqlType)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_73 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && "Oracle".equals(ps.getConnection().getMetaData().getDatabaseProductName()))) [ FD ]
Line_35 $$ if (inValue instanceof java.util.Date) -->Line_36 $$ if (inValue instanceof java.sql.Date) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_76 $$ if (isDateValue(inValue.getClass())) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_56 $$ ps.setTime(paramIndex, new java.sql.Time(cal.getTime().getTime()), cal)[ FD ]
Line_26 $$ if (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) -->Line_27 $$ if (inValue instanceof BigDecimal) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_78 $$ if (inValue instanceof Calendar) [ FD ]
Line_5 $$ if (inValue instanceof SqlValue) -->Line_7 $$ if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR || sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_32 $$ ps.setObject(paramIndex, inValue, sqlType)[ FD ]
Line_78 $$ if (inValue instanceof Calendar) -->Line_80 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ CD ]
Line_36 $$ if (inValue instanceof java.sql.Date) -->Line_39 $$ ps.setDate(paramIndex, new java.sql.Date(((java.util.Date) inValue).getTime()))[ CD ]
Line_60 $$ if (sqlType == Types.TIMESTAMP) -->Line_73 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && "Oracle".equals(ps.getConnection().getMetaData().getDatabaseProductName()))) [ CD ]
Line_42 $$ Calendar cal = (Calendar) inValue-->Line_56 $$ ps.setTime(paramIndex, new java.sql.Time(cal.getTime().getTime()), cal)[ FD ]
Line_41 $$ if (inValue instanceof Calendar) -->Line_42 $$ Calendar cal = (Calendar) inValue[ CD ]
Line_27 $$ if (inValue instanceof BigDecimal) -->Line_28 $$ ps.setBigDecimal(paramIndex, (BigDecimal) inValue)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_65 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime()))[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_60 $$ if (sqlType == Types.TIMESTAMP) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_49 $$ if (inValue instanceof java.sql.Time) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_28 $$ ps.setBigDecimal(paramIndex, (BigDecimal) inValue)[ FD ]
Line_29 $$ if (scale != null) -->Line_30 $$ ps.setObject(paramIndex, inValue, sqlType, scale)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_4 $$ ((SqlTypeValue) inValue).setTypeValue(ps, paramIndex, sqlType, typeName)[ FD ]
Line_42 $$ Calendar cal = (Calendar) inValue-->Line_43 $$ ps.setDate(paramIndex, new java.sql.Date(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_5 $$ if (inValue instanceof SqlValue) [ FD ]
Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) -->Line_26 $$ if (sqlType == Types.DECIMAL || sqlType == Types.NUMERIC) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_50 $$ ps.setTime(paramIndex, (java.sql.Time) inValue)[ FD ]
Line_49 $$ if (inValue instanceof java.sql.Time) -->Line_52 $$ ps.setTime(paramIndex, new java.sql.Time(((java.util.Date) inValue).getTime()))[ CD ]
Line_41 $$ if (inValue instanceof Calendar) -->Line_45 $$ ps.setObject(paramIndex, inValue, Types.DATE)[ CD ]
Line_13 $$ if (sqlType == Types.NCLOB) -->Line_16 $$ ps.setClob(paramIndex, new StringReader(strVal), strVal.length())[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_25 $$ ps.setString(paramIndex, strVal)[ FD ]
Line_3 $$ if (inValue instanceof SqlTypeValue) -->Line_4 $$ ((SqlTypeValue) inValue).setTypeValue(ps, paramIndex, sqlType, typeName)[ CD ]
Line_42 $$ Calendar cal = (Calendar) inValue-->Line_80 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_34 $$ if (sqlType == Types.DATE) [ FD ]
Line_62 $$ if (inValue instanceof java.sql.Timestamp) -->Line_63 $$ ps.setTimestamp(paramIndex, (java.sql.Timestamp) inValue)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_77 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(((java.util.Date) inValue).getTime()))[ FD ]
Line_42 $$ Calendar cal = (Calendar) inValue-->Line_69 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_27 $$ if (inValue instanceof BigDecimal) [ FD ]
Line_54 $$ if (inValue instanceof Calendar) -->Line_56 $$ ps.setTime(paramIndex, new java.sql.Time(cal.getTime().getTime()), cal)[ CD ]
Line_10 $$ String strVal = inValue.toString()-->Line_25 $$ ps.setString(paramIndex, strVal)[ FD ]
Line_61 $$ if (inValue instanceof java.util.Date) -->Line_67 $$ if (inValue instanceof Calendar) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_29 $$ if (scale != null) [ FD ]
Line_48 $$ if (inValue instanceof java.util.Date) -->Line_54 $$ if (inValue instanceof Calendar) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_6 $$ ((SqlValue) inValue).setValue(ps, paramIndex)[ FD ]
Line_13 $$ if (sqlType == Types.NCLOB) -->Line_14 $$ ps.setNClob(paramIndex, new StringReader(strVal), strVal.length())[ CD ]
Line_74 $$ if (isStringValue(inValue.getClass())) -->Line_76 $$ if (isDateValue(inValue.getClass())) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_10 $$ String strVal = inValue.toString()[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_71 $$ ps.setObject(paramIndex, inValue, Types.TIMESTAMP)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_37 $$ ps.setDate(paramIndex, (java.sql.Date) inValue)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_36 $$ if (inValue instanceof java.sql.Date) [ FD ]
Line_5 $$ if (inValue instanceof SqlValue) -->Line_6 $$ ((SqlValue) inValue).setValue(ps, paramIndex)[ CD ]
Line_7 $$ if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR || sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR) -->Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) [ CD ]
Line_35 $$ if (inValue instanceof java.util.Date) -->Line_41 $$ if (inValue instanceof Calendar) [ CD ]
Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) -->Line_10 $$ String strVal = inValue.toString()[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_52 $$ ps.setTime(paramIndex, new java.sql.Time(((java.util.Date) inValue).getTime()))[ FD ]
Line_3 $$ if (inValue instanceof SqlTypeValue) -->Line_5 $$ if (inValue instanceof SqlValue) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_69 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_58 $$ ps.setObject(paramIndex, inValue, Types.TIME)[ FD ]
Line_41 $$ if (inValue instanceof Calendar) -->Line_43 $$ ps.setDate(paramIndex, new java.sql.Date(cal.getTime().getTime()), cal)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_43 $$ ps.setDate(paramIndex, new java.sql.Date(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_48 $$ if (inValue instanceof java.util.Date) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_80 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_45 $$ ps.setObject(paramIndex, inValue, Types.DATE)[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_62 $$ if (inValue instanceof java.sql.Timestamp) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_54 $$ if (inValue instanceof Calendar) [ FD ]
Line_10 $$ String strVal = inValue.toString()-->Line_16 $$ ps.setClob(paramIndex, new StringReader(strVal), strVal.length())[ FD ]
Line_7 $$ if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR || sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR) -->Line_8 $$ ps.setString(paramIndex, inValue.toString())[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_41 $$ if (inValue instanceof Calendar) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_14 $$ ps.setNClob(paramIndex, new StringReader(strVal), strVal.length())[ FD ]
Line_47 $$ if (sqlType == Types.TIME) -->Line_60 $$ if (sqlType == Types.TIMESTAMP) [ CD ]
Line_74 $$ if (isStringValue(inValue.getClass())) -->Line_75 $$ ps.setString(paramIndex, inValue.toString())[ CD ]
Line_10 $$ String strVal = inValue.toString()-->Line_11 $$ if (strVal.length() > 4000) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_3 $$ if (inValue instanceof SqlTypeValue) [ CD ]
Line_73 $$ if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && "Oracle".equals(ps.getConnection().getMetaData().getDatabaseProductName()))) -->Line_74 $$ if (isStringValue(inValue.getClass())) [ CD ]
Line_10 $$ String strVal = inValue.toString()-->Line_14 $$ ps.setNClob(paramIndex, new StringReader(strVal), strVal.length())[ FD ]
Line_27 $$ if (inValue instanceof BigDecimal) -->Line_29 $$ if (scale != null) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_13 $$ if (sqlType == Types.NCLOB) [ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_75 $$ ps.setString(paramIndex, inValue.toString())[ FD ]
Line_67 $$ if (inValue instanceof Calendar) -->Line_71 $$ ps.setObject(paramIndex, inValue, Types.TIMESTAMP)[ CD ]
Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) -->Line_25 $$ ps.setString(paramIndex, strVal)[ CD ]
Line_67 $$ if (inValue instanceof Calendar) -->Line_69 $$ ps.setTimestamp(paramIndex, new java.sql.Timestamp(cal.getTime().getTime()), cal)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_8 $$ ps.setString(paramIndex, inValue.toString())[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_16 $$ ps.setClob(paramIndex, new StringReader(strVal), strVal.length())[ FD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_35 $$ if (inValue instanceof java.util.Date) [ FD ]
Line_54 $$ if (inValue instanceof Calendar) -->Line_58 $$ ps.setObject(paramIndex, inValue, Types.TIME)[ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_61 $$ if (inValue instanceof java.util.Date) [ FD ]
Line_9 $$ if ((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass())) -->Line_11 $$ if (strVal.length() > 4000) [ CD ]
Line_2 $$ private static void setValue(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_82 $$ ps.setObject(paramIndex, inValue)[ FD ]
