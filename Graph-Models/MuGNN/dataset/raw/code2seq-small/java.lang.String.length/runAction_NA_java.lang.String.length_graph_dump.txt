Line_31 $$ if (hasMessage) -->Line_32 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ CD ]
Line_5 $$ final File messageFile-->Line_9 $$ messageFile.deleteOnExit()[ FD ]
Line_5 $$ final File messageFile-->Line_21 $$ messageFile = null[ FD ]
Line_3 $$ final String message = myMessageTextArea.getText()-->Line_4 $$ final boolean hasMessage = message.trim().length() != 0[ FD ]
Line_25 $$ if (hasMessage) -->Line_26 $$ h.addParameters("-a")[ CD ]
Line_2 $$ public void runAction(final List<VcsException> exceptions) -->Line_6 $$ if (hasMessage) [ CD ]
Line_10 $$ Writer out = new OutputStreamWriter(new FileOutputStream(messageFile), MESSAGE_FILE_ENCODING)-->Line_12 $$ out.write(message)[ FD ]
Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_32 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_10 $$ Writer out = new OutputStreamWriter(new FileOutputStream(messageFile), MESSAGE_FILE_ENCODING)-->Line_14 $$ out.close()[ FD ]
Line_43 $$ if (repository != null) -->Line_46 $$ LOG.error("No repository registered for root: " + getGitRoot())[ CD ]
Line_52 $$ if (messageFile != null) -->Line_53 $$ messageFile.delete()[ CD ]
Line_36 $$ if (object.length() != 0) -->Line_37 $$ h.addParameters(object)[ CD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_37 $$ h.addParameters(object)[ FD ]
Line_35 $$ String object = myCommitTextField.getText().trim()-->Line_37 $$ h.addParameters(object)[ FD ]
Line_42 $$ GitRepository repository = GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot())-->Line_43 $$ if (repository != null) [ FD ]
Line_28 $$ if (myForceCheckBox.isEnabled() && myForceCheckBox.isSelected()) -->Line_29 $$ h.addParameters("-f")[ CD ]
Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_52 $$ if (messageFile != null) [ FD ]
Line_2 $$ public void runAction(final List<VcsException> exceptions) -->Line_49 $$ exceptions.addAll(h.errors())[ FD ]
Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_9 $$ messageFile.deleteOnExit()[ FD ]
Line_21 $$ messageFile = null-->Line_32 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_26 $$ h.addParameters("-a")[ FD ]
Line_2 $$ public void runAction(final List<VcsException> exceptions) -->Line_5 $$ final File messageFile[ CD ]
Line_5 $$ final File messageFile-->Line_32 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_49 $$ exceptions.addAll(h.errors())[ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_29 $$ h.addParameters("-f")[ FD ]
Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_53 $$ messageFile.delete()[ FD ]
Line_42 $$ GitRepository repository = GitUtil.getRepositoryManager(myProject).getRepositoryForRoot(getGitRoot())-->Line_44 $$ VfsUtil.markDirtyAndRefresh(true, true, false, repository.getGitDir())[ FD ]
Line_6 $$ if (hasMessage) -->Line_21 $$ messageFile = null[ CD ]
Line_35 $$ String object = myCommitTextField.getText().trim()-->Line_36 $$ if (object.length() != 0) [ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_34 $$ h.addParameters(myTagNameTextField.getText())[ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_32 $$ h.addParameters("-F", messageFile.getAbsolutePath())[ FD ]
Line_21 $$ messageFile = null-->Line_53 $$ messageFile.delete()[ FD ]
Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)-->Line_21 $$ messageFile = null[ FD ]
Line_3 $$ final String message = myMessageTextArea.getText()-->Line_12 $$ out.write(message)[ FD ]
Line_24 $$ GitSimpleHandler h = new GitSimpleHandler(myProject, getGitRoot(), GitCommand.TAG)-->Line_40 $$ GitHandlerUtil.doSynchronously(h, GitBundle.getString("tagging.title"), h.printableCommandLine())[ FD ]
Line_43 $$ if (repository != null) -->Line_44 $$ VfsUtil.markDirtyAndRefresh(true, true, false, repository.getGitDir())[ CD ]
Line_2 $$ public void runAction(final List<VcsException> exceptions) -->Line_4 $$ final boolean hasMessage = message.trim().length() != 0[ CD ]
Line_2 $$ public void runAction(final List<VcsException> exceptions) -->Line_3 $$ final String message = myMessageTextArea.getText()[ CD ]
Line_5 $$ final File messageFile-->Line_8 $$ messageFile = FileUtil.createTempFile(MESSAGE_FILE_PREFIX, MESSAGE_FILE_SUFFIX)[ FD ]
Line_21 $$ messageFile = null-->Line_52 $$ if (messageFile != null) [ FD ]
Line_5 $$ final File messageFile-->Line_53 $$ messageFile.delete()[ FD ]
Line_5 $$ final File messageFile-->Line_52 $$ if (messageFile != null) [ FD ]
