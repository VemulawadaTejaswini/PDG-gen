Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) [ FD ]
Line_3 $$ final String packageName = StringUtil.getPackageName(qualifiedName)-->Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) [ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_3 $$ final String packageName = StringUtil.getPackageName(qualifiedName)[ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_3 $$ final String packageName = StringUtil.getPackageName(qualifiedName)[ CD ]
Line_3 $$ final String packageName = StringUtil.getPackageName(qualifiedName)-->Line_4 $$ final PsiPackage pkg = findPackage(packageName)[ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_7 $$ PsiClass[] containingClasses = findClassesInDumbMode(packageName, scope)[ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_16 $$ return pkg.findClassByShortName(className, scope)[ CD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_5 $$ final String className = StringUtil.getShortName(qualifiedName)[ FD ]
Line_5 $$ final String className = StringUtil.getShortName(qualifiedName)-->Line_9 $$ return PsiElementFinder.filterByName(className, containingClasses[0].getInnerClasses())[ FD ]
Line_8 $$ if (containingClasses.length == 1) -->Line_9 $$ return PsiElementFinder.filterByName(className, containingClasses[0].getInnerClasses())[ CD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_13 $$ if (pkg == null) [ CD ]
Line_5 $$ final String className = StringUtil.getShortName(qualifiedName)-->Line_16 $$ return pkg.findClassByShortName(className, scope)[ FD ]
Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) -->Line_8 $$ if (containingClasses.length == 1) [ CD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_16 $$ return pkg.findClassByShortName(className, scope)[ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_5 $$ final String className = StringUtil.getShortName(qualifiedName)[ CD ]
Line_4 $$ final PsiPackage pkg = findPackage(packageName)-->Line_16 $$ return pkg.findClassByShortName(className, scope)[ FD ]
Line_3 $$ final String packageName = StringUtil.getPackageName(qualifiedName)-->Line_7 $$ PsiClass[] containingClasses = findClassesInDumbMode(packageName, scope)[ FD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_4 $$ final PsiPackage pkg = findPackage(packageName)[ CD ]
Line_2 $$ private PsiClass[] findClassesInDumbMode(@NotNull String qualifiedName, @NotNull GlobalSearchScope scope) -->Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) [ CD ]
Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) -->Line_7 $$ PsiClass[] containingClasses = findClassesInDumbMode(packageName, scope)[ CD ]
Line_13 $$ if (pkg == null) -->Line_14 $$ return PsiClass.EMPTY_ARRAY[ CD ]
Line_6 $$ if (pkg == null && packageName.length() < qualifiedName.length()) -->Line_11 $$ return PsiClass.EMPTY_ARRAY[ CD ]
Line_4 $$ final PsiPackage pkg = findPackage(packageName)-->Line_13 $$ if (pkg == null) [ FD ]
