Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_3 $$ final int length1 = path.length()[ CD ]
Line_3 $$ final int length1 = path.length()-->Line_11 $$ if (length1 == length2)[ FD ]
Line_5 $$ if (length2 == 0)-->Line_6 $$ return true[ CD ]
Line_4 $$ final int length2 = start.length()-->Line_18 $$ next1 = path.charAt(length2)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_3 $$ final int length1 = path.length()[ FD ]
Line_16 $$ next1 = path.charAt(length2 - 1)-->Line_18 $$ next1 = path.charAt(length2)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_18 $$ next1 = path.charAt(length2)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_5 $$ if (length2 == 0)[ CD ]
Line_15 $$ if (last2 == '/' || last2 == File.separatorChar) -->Line_18 $$ next1 = path.charAt(length2)[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_7 $$ if (length2 > length1)[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_4 $$ final int length2 = start.length()[ CD ]
Line_11 $$ if (length1 == length2)-->Line_12 $$ return true[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_13 $$ char last2 = start.charAt(length2 - 1)[ FD ]
Line_4 $$ final int length2 = start.length()-->Line_11 $$ if (length1 == length2)[ FD ]
Line_7 $$ if (length2 > length1)-->Line_8 $$ return false[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_4 $$ final int length2 = start.length()[ FD ]
Line_3 $$ final int length1 = path.length()-->Line_7 $$ if (length2 > length1)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_15 $$ if (last2 == '/' || last2 == File.separatorChar) [ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_13 $$ char last2 = start.charAt(length2 - 1)[ CD ]
Line_15 $$ if (last2 == '/' || last2 == File.separatorChar) -->Line_16 $$ next1 = path.charAt(length2 - 1)[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_16 $$ next1 = path.charAt(length2 - 1)[ FD ]
Line_9 $$ if (!path.regionMatches(!caseSensitive, 0, start, 0, length2))-->Line_10 $$ return false[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_14 $$ char next1[ CD ]
Line_4 $$ final int length2 = start.length()-->Line_7 $$ if (length2 > length1)[ FD ]
Line_14 $$ char next1-->Line_16 $$ next1 = path.charAt(length2 - 1)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_20 $$ return next1 == '/' || next1 == File.separatorChar[ CD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_11 $$ if (length1 == length2)[ CD ]
Line_4 $$ final int length2 = start.length()-->Line_5 $$ if (length2 == 0)[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_9 $$ if (!path.regionMatches(!caseSensitive, 0, start, 0, length2))[ CD ]
Line_14 $$ char next1-->Line_18 $$ next1 = path.charAt(length2)[ FD ]
Line_4 $$ final int length2 = start.length()-->Line_9 $$ if (!path.regionMatches(!caseSensitive, 0, start, 0, length2))[ FD ]
Line_2 $$ public static boolean startsWith(@NotNull String path, @NotNull String start, final boolean caseSensitive) -->Line_9 $$ if (!path.regionMatches(!caseSensitive, 0, start, 0, length2))[ FD ]
