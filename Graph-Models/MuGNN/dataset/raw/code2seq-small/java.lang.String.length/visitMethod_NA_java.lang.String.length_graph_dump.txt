Line_11 $$ final String name = method.getName()-->Line_15 $$ if (name.length() == question.length()) [ FD ]
Line_19 $$ final char nextChar = name.charAt(question.length())-->Line_20 $$ if (Character.isUpperCase(nextChar) || nextChar == '_') [ FD ]
Line_11 $$ final String name = method.getName()-->Line_14 $$ if (name.startsWith(question)) [ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_36 $$ registerMethodError(method, method)[ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_11 $$ final String name = method.getName()[ CD ]
Line_29 $$ if (onlyWarnOnBaseMethods) -->Line_33 $$ if (LibraryUtil.isOverrideOfLibraryMethod(method)) [ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_8 $$ if (ignoreBooleanMethods && returnType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) [ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_4 $$ final PsiType returnType = method.getReturnType()[ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_4 $$ final PsiType returnType = method.getReturnType()[ CD ]
Line_13 $$ for (String question : questionList) -->Line_14 $$ if (name.startsWith(question)) [ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_29 $$ if (onlyWarnOnBaseMethods) [ CD ]
Line_33 $$ if (LibraryUtil.isOverrideOfLibraryMethod(method)) -->Line_34 $$ return[ CD ]
Line_5 $$ if (returnType == null || returnType.equals(PsiType.BOOLEAN)) -->Line_6 $$ return[ CD ]
Line_16 $$ startsWithQuestionWord = true-->Line_26 $$ if (!startsWithQuestionWord) [ FD ]
Line_29 $$ if (onlyWarnOnBaseMethods) -->Line_30 $$ if (MethodUtils.hasSuper(method)) [ CD ]
Line_15 $$ if (name.length() == question.length()) -->Line_16 $$ startsWithQuestionWord = true[ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_3 $$ super.visitMethod(method)[ FD ]
Line_14 $$ if (name.startsWith(question)) -->Line_19 $$ final char nextChar = name.charAt(question.length())[ CD ]
Line_11 $$ final String name = method.getName()-->Line_19 $$ final char nextChar = name.charAt(question.length())[ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_33 $$ if (LibraryUtil.isOverrideOfLibraryMethod(method)) [ FD ]
Line_14 $$ if (name.startsWith(question)) -->Line_20 $$ if (Character.isUpperCase(nextChar) || nextChar == '_') [ CD ]
Line_13 $$ for (String question : questionList) -->Line_19 $$ final char nextChar = name.charAt(question.length())[ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_36 $$ registerMethodError(method, method)[ FD ]
Line_14 $$ if (name.startsWith(question)) -->Line_15 $$ if (name.length() == question.length()) [ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_3 $$ super.visitMethod(method)[ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_12 $$ boolean startsWithQuestionWord = false[ CD ]
Line_8 $$ if (ignoreBooleanMethods && returnType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) -->Line_9 $$ return[ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_11 $$ final String name = method.getName()[ FD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_26 $$ if (!startsWithQuestionWord) [ CD ]
Line_13 $$ for (String question : questionList) -->Line_15 $$ if (name.length() == question.length()) [ FD ]
Line_20 $$ if (Character.isUpperCase(nextChar) || nextChar == '_') -->Line_21 $$ startsWithQuestionWord = true[ CD ]
Line_16 $$ startsWithQuestionWord = true-->Line_21 $$ startsWithQuestionWord = true[ FD ]
Line_26 $$ if (!startsWithQuestionWord) -->Line_27 $$ return[ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_5 $$ if (returnType == null || returnType.equals(PsiType.BOOLEAN)) [ CD ]
Line_2 $$ public void visitMethod(@NotNull PsiMethod method) -->Line_30 $$ if (MethodUtils.hasSuper(method)) [ FD ]
Line_30 $$ if (MethodUtils.hasSuper(method)) -->Line_31 $$ return[ CD ]
Line_4 $$ final PsiType returnType = method.getReturnType()-->Line_5 $$ if (returnType == null || returnType.equals(PsiType.BOOLEAN)) [ FD ]
Line_12 $$ boolean startsWithQuestionWord = false-->Line_21 $$ startsWithQuestionWord = true[ FD ]
Line_4 $$ final PsiType returnType = method.getReturnType()-->Line_8 $$ if (ignoreBooleanMethods && returnType.equalsToText(CommonClassNames.JAVA_LANG_BOOLEAN)) [ FD ]
Line_21 $$ startsWithQuestionWord = true-->Line_26 $$ if (!startsWithQuestionWord) [ FD ]
Line_12 $$ boolean startsWithQuestionWord = false-->Line_26 $$ if (!startsWithQuestionWord) [ FD ]
Line_12 $$ boolean startsWithQuestionWord = false-->Line_16 $$ startsWithQuestionWord = true[ FD ]
