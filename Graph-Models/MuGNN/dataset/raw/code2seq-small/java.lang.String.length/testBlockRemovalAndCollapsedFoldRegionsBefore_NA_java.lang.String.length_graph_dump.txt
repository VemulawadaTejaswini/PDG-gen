Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_9 $$ final LogicalPosition blockEnd = new LogicalPosition(4, column)[ CD ]
Line_10 $$ final SelectionModel selectionModel = myEditor.getSelectionModel()-->Line_11 $$ selectionModel.setBlockSelection(blockStart, blockEnd)[ FD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_14 $$ String expectedText = "fold line #1\n" + "fold line #2\n" + "initialText    line 1\n" + "initialText  line 2\n" + "initialText  line 3"[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_20 $$ assertEquals(foldEndOffset, foldRegion.getEndOffset())[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_4 $$ init(initialText, TestFileType.TEXT)[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_5 $$ final int foldEndOffset = initialText.indexOf("initialText")[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_17 $$ final FoldRegion foldRegion = getFoldRegion(0)[ CD ]
Line_3 $$ String initialText = "fold line #1\n" + "fold line #2\n" + "initialText    line 1\n" + "initialText    line 2\n" + "initialText    line 3"-->Line_5 $$ final int foldEndOffset = initialText.indexOf("initialText")[ FD ]
Line_9 $$ final LogicalPosition blockEnd = new LogicalPosition(4, column)-->Line_11 $$ selectionModel.setBlockSelection(blockStart, blockEnd)[ FD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_15 $$ assertEquals(expectedText, myEditor.getDocument().getText())[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_13 $$ delete()[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_3 $$ String initialText = "fold line #1\n" + "fold line #2\n" + "initialText    line 1\n" + "initialText    line 2\n" + "initialText    line 3"[ CD ]
Line_5 $$ final int foldEndOffset = initialText.indexOf("initialText")-->Line_20 $$ assertEquals(foldEndOffset, foldRegion.getEndOffset())[ FD ]
Line_8 $$ final LogicalPosition blockStart = new LogicalPosition(3, column)-->Line_11 $$ selectionModel.setBlockSelection(blockStart, blockEnd)[ FD ]
Line_3 $$ String initialText = "fold line #1\n" + "fold line #2\n" + "initialText    line 1\n" + "initialText    line 2\n" + "initialText    line 3"-->Line_4 $$ init(initialText, TestFileType.TEXT)[ FD ]
Line_17 $$ final FoldRegion foldRegion = getFoldRegion(0)-->Line_20 $$ assertEquals(foldEndOffset, foldRegion.getEndOffset())[ FD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_11 $$ selectionModel.setBlockSelection(blockStart, blockEnd)[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_6 $$ addCollapsedFoldRegion(0, foldEndOffset, "...")[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_12 $$ delete()[ CD ]
Line_14 $$ String expectedText = "fold line #1\n" + "fold line #2\n" + "initialText    line 1\n" + "initialText  line 2\n" + "initialText  line 3"-->Line_15 $$ assertEquals(expectedText, myEditor.getDocument().getText())[ FD ]
Line_5 $$ final int foldEndOffset = initialText.indexOf("initialText")-->Line_6 $$ addCollapsedFoldRegion(0, foldEndOffset, "...")[ FD ]
Line_17 $$ final FoldRegion foldRegion = getFoldRegion(0)-->Line_19 $$ assertEquals(0, foldRegion.getStartOffset())[ FD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_8 $$ final LogicalPosition blockStart = new LogicalPosition(3, column)[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_16 $$ assertSelectionRanges(new int[][] [ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_19 $$ assertEquals(0, foldRegion.getStartOffset())[ CD ]
Line_17 $$ final FoldRegion foldRegion = getFoldRegion(0)-->Line_18 $$ assertNotNull(foldRegion)[ FD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_10 $$ final SelectionModel selectionModel = myEditor.getSelectionModel()[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_18 $$ assertNotNull(foldRegion)[ CD ]
Line_2 $$ public void testBlockRemovalAndCollapsedFoldRegionsBefore() throws IOException -->Line_7 $$ int column = "initialText".length()[ CD ]
