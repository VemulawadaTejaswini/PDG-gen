Line_38 $$ File metadata = new File(filename + ".metadata")-->Line_39 $$ if (compressed && metadata.exists())[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_18 $$ CompressionMetadata compressionMetadata = compressed ? new CompressionMetadata(filename + ".metadata", f.length(), ChecksumType.CRC32) : null[ FD ]
Line_33 $$ if (usemmap)-->Line_34 $$ builder.regions.close()[ CD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) [ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_10 $$ for (int i = 0; i < junkSize; ++i) [ FD ]
Line_21 $$ if (compressed)-->Line_22 $$ builder.regions(MmappedRegions.map(channel, compressionMetadata))[ CD ]
Line_27 $$ String expected = "The quick brown fox jumps over the lazy dog"-->Line_29 $$ byte[] b = new byte[expected.length()][ FD ]
Line_39 $$ if (compressed && metadata.exists())-->Line_40 $$ metadata.delete()[ CD ]
Line_4 $$ try (ChannelProxy channel = new ChannelProxy(f)) -->Line_22 $$ builder.regions(MmappedRegions.map(channel, compressionMetadata))[ FD ]
Line_19 $$ RandomAccessReader.Builder builder = compressed ? new CompressedRandomAccessReader.Builder(channel, compressionMetadata) : new RandomAccessReader.Builder(channel)-->Line_24 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_15 $$ writer.finish()[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_37 $$ assertTrue(f.delete())[ FD ]
Line_21 $$ if (compressed)-->Line_24 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ CD ]
Line_27 $$ String expected = "The quick brown fox jumps over the lazy dog"-->Line_31 $$ assert new String(b).equals(expected) : "Expecting '" + expected + "', got '" + new String(b) + '\''[ FD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_8 $$ FileMark mark = writer.mark()[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_3 $$ final String filename = f.getAbsolutePath()[ FD ]
Line_29 $$ byte[] b = new byte[expected.length()]-->Line_30 $$ reader.readFully(b)[ FD ]
Line_27 $$ String expected = "The quick brown fox jumps over the lazy dog"-->Line_28 $$ assertEquals(expected.length(), reader.length())[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_36 $$ if (f.exists())[ FD ]
Line_8 $$ FileMark mark = writer.mark()-->Line_13 $$ writer.resetAndTruncate(mark)[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_3 $$ final String filename = f.getAbsolutePath()[ CD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_11 $$ writer.write((byte) 1)[ FD ]
Line_19 $$ RandomAccessReader.Builder builder = compressed ? new CompressedRandomAccessReader.Builder(channel, compressionMetadata) : new RandomAccessReader.Builder(channel)-->Line_22 $$ builder.regions(MmappedRegions.map(channel, compressionMetadata))[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_17 $$ assert f.exists()[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_24 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_4 $$ try (ChannelProxy channel = new ChannelProxy(f)) -->Line_24 $$ builder.regions(MmappedRegions.map(channel, f.length()))[ FD ]
Line_2 $$ private static void testResetAndTruncate(File f, boolean compressed, boolean usemmap, int junkSize) throws IOException -->Line_39 $$ if (compressed && metadata.exists())[ FD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_9 $$ writer.write("blue fox jumps over the lazy dog".getBytes())[ FD ]
Line_20 $$ if (usemmap) -->Line_21 $$ if (compressed)[ CD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_14 $$ writer.write("brown fox jumps over the lazy dog".getBytes())[ FD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_7 $$ writer.write("The quick ".getBytes())[ FD ]
Line_36 $$ if (f.exists())-->Line_37 $$ assertTrue(f.delete())[ CD ]
Line_19 $$ RandomAccessReader.Builder builder = compressed ? new CompressedRandomAccessReader.Builder(channel, compressionMetadata) : new RandomAccessReader.Builder(channel)-->Line_26 $$ try (RandomAccessReader reader = builder.build()) [ FD ]
Line_10 $$ for (int i = 0; i < junkSize; ++i) -->Line_11 $$ writer.write((byte) 1)[ CD ]
Line_6 $$ try (SequentialWriter writer = compressed ? new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(), sstableMetadataCollector) : SequentialWriter.open(f)) -->Line_13 $$ writer.resetAndTruncate(mark)[ FD ]
Line_18 $$ CompressionMetadata compressionMetadata = compressed ? new CompressionMetadata(filename + ".metadata", f.length(), ChecksumType.CRC32) : null-->Line_22 $$ builder.regions(MmappedRegions.map(channel, compressionMetadata))[ FD ]
Line_26 $$ try (RandomAccessReader reader = builder.build()) -->Line_30 $$ reader.readFully(b)[ FD ]
Line_26 $$ try (RandomAccessReader reader = builder.build()) -->Line_28 $$ assertEquals(expected.length(), reader.length())[ FD ]
Line_38 $$ File metadata = new File(filename + ".metadata")-->Line_40 $$ metadata.delete()[ FD ]
