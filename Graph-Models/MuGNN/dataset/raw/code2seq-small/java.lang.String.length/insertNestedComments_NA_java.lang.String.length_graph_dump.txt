Line_7 $$ String normalizedPrefix = commentPrefix.trim()-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_24 $$ if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) -->Line_25 $$ myDocument.insertString(endOffset, commentSuffix)[ CD ]
Line_8 $$ String normalizedSuffix = commentSuffix.trim()-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_36 $$ --i[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_47 $$ while (j >= 0) [ CD ]
Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()-->Line_52 $$ if (!(commentedPrefix == null && !nestedCommentPrefixes.isEmpty() && nestedCommentPrefixes.get(0) == startOffset)) [ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_7 $$ String normalizedPrefix = commentPrefix.trim()[ FD ]
Line_43 $$ final int prefixIndex = nestedCommentPrefixes.get(i)-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_3 $$ if (commenter instanceof SelfManagingCommenter) -->Line_4 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_7 $$ String normalizedPrefix = commentPrefix.trim()[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_13 $$ CharSequence chars = myDocument.getCharsSequence()[ CD ]
Line_47 $$ while (j >= 0) -->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ CD ]
Line_56 $$ RangeMarker marker = myDocument.createRangeMarker(startOffset, endOffset + shift)-->Line_60 $$ marker.dispose()[ FD ]
Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) -->Line_18 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedSuffix)) [ CD ]
Line_30 $$ final TextRange selection = new TextRange(startOffset, endOffset)-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_42 $$ while (i >= 0) -->Line_45 $$ --i[ CD ]
Line_12 $$ String commentedSuffix = commenter.getCommentedBlockCommentSuffix()-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_34 $$ if (prefixIndex > suffixIndex) -->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ CD ]
Line_29 $$ int j = nestedCommentSuffixes.size() - 1-->Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ FD ]
Line_47 $$ while (j >= 0) -->Line_48 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_29 $$ int j = nestedCommentSuffixes.size() - 1[ CD ]
Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_12 $$ String commentedSuffix = commenter.getCommentedBlockCommentSuffix()[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_58 $$ return processDocument(myDocument, marker, commenter, true)[ FD ]
Line_12 $$ String commentedSuffix = commenter.getCommentedBlockCommentSuffix()-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_29 $$ int j = nestedCommentSuffixes.size() - 1-->Line_39 $$ --j[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)-->Line_34 $$ if (prefixIndex > suffixIndex) [ FD ]
Line_4 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_5 $$ return selfManagingCommenter.insertBlockComment(startOffset, endOffset, myDocument, mySelfManagedCommenterData)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_8 $$ String normalizedSuffix = commentSuffix.trim()[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_28 $$ int i = nestedCommentPrefixes.size() - 1[ CD ]
Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) -->Line_16 $$ nestedCommentPrefixes.add(i)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_42 $$ while (i >= 0) [ CD ]
Line_8 $$ String normalizedSuffix = commentSuffix.trim()-->Line_18 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedSuffix)) [ FD ]
Line_29 $$ int j = nestedCommentSuffixes.size() - 1-->Line_48 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_14 $$ for (int i = startOffset; i < endOffset; ++i) [ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_24 $$ if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) [ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_24 $$ if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) -->Line_26 $$ shift += commentSuffix.length()[ CD ]
Line_31 $$ while (i >= 0 && j >= 0) -->Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_25 $$ myDocument.insertString(endOffset, commentSuffix)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_8 $$ String normalizedSuffix = commentSuffix.trim()[ CD ]
Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()-->Line_48 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ FD ]
Line_26 $$ shift += commentSuffix.length()-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_52 $$ if (!(commentedPrefix == null && !nestedCommentPrefixes.isEmpty() && nestedCommentPrefixes.get(0) == startOffset)) [ CD ]
Line_23 $$ int shift = 0-->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_47 $$ while (j >= 0) -->Line_50 $$ --j[ CD ]
Line_26 $$ shift += commentSuffix.length()-->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()-->Line_19 $$ nestedCommentSuffixes.add(i)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_24 $$ if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) [ FD ]
Line_23 $$ int shift = 0-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_13 $$ CharSequence chars = myDocument.getCharsSequence()-->Line_18 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedSuffix)) [ FD ]
Line_30 $$ final TextRange selection = new TextRange(startOffset, endOffset)-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)-->Line_34 $$ if (prefixIndex > suffixIndex) [ FD ]
Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)-->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_30 $$ final TextRange selection = new TextRange(startOffset, endOffset)[ CD ]
Line_8 $$ String normalizedSuffix = commentSuffix.trim()-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()[ CD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_19 $$ nestedCommentSuffixes.add(i)[ FD ]
Line_7 $$ String normalizedPrefix = commentPrefix.trim()-->Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) [ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_53 $$ myDocument.insertString(startOffset, commentPrefix)[ FD ]
Line_52 $$ if (!(commentedPrefix == null && !nestedCommentPrefixes.isEmpty() && nestedCommentPrefixes.get(0) == startOffset)) -->Line_53 $$ myDocument.insertString(startOffset, commentPrefix)[ CD ]
Line_26 $$ shift += commentSuffix.length()-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_23 $$ int shift = 0[ CD ]
Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_3 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()[ CD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_43 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_29 $$ int j = nestedCommentSuffixes.size() - 1-->Line_47 $$ while (j >= 0) [ FD ]
Line_34 $$ if (prefixIndex > suffixIndex) -->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ CD ]
Line_28 $$ int i = nestedCommentPrefixes.size() - 1-->Line_42 $$ while (i >= 0) [ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_45 $$ --i[ FD ]
Line_28 $$ int i = nestedCommentPrefixes.size() - 1-->Line_45 $$ --i[ FD ]
Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()-->Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_5 $$ return selfManagingCommenter.insertBlockComment(startOffset, endOffset, myDocument, mySelfManagedCommenterData)[ FD ]
Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_18 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedSuffix)) [ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_16 $$ nestedCommentPrefixes.add(i)[ FD ]
Line_23 $$ int shift = 0-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_7 $$ String normalizedPrefix = commentPrefix.trim()-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_23 $$ int shift = 0-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_56 $$ RangeMarker marker = myDocument.createRangeMarker(startOffset, endOffset + shift)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_56 $$ RangeMarker marker = myDocument.createRangeMarker(startOffset, endOffset + shift)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_11 $$ String commentedPrefix = commenter.getCommentedBlockCommentPrefix()[ CD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) [ CD ]
Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()-->Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ FD ]
Line_42 $$ while (i >= 0) -->Line_43 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ CD ]
Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()-->Line_29 $$ int j = nestedCommentSuffixes.size() - 1[ FD ]
Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()-->Line_43 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_29 $$ int j = nestedCommentSuffixes.size() - 1-->Line_50 $$ --j[ FD ]
Line_52 $$ if (!(commentedPrefix == null && !nestedCommentPrefixes.isEmpty() && nestedCommentPrefixes.get(0) == startOffset)) -->Line_54 $$ shift += commentPrefix.length()[ CD ]
Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()-->Line_16 $$ nestedCommentPrefixes.add(i)[ FD ]
Line_3 $$ if (commenter instanceof SelfManagingCommenter) -->Line_5 $$ return selfManagingCommenter.insertBlockComment(startOffset, endOffset, myDocument, mySelfManagedCommenterData)[ CD ]
Line_28 $$ int i = nestedCommentPrefixes.size() - 1-->Line_43 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_12 $$ String commentedSuffix = commenter.getCommentedBlockCommentSuffix()[ CD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) [ FD ]
Line_10 $$ IntArrayList nestedCommentSuffixes = new IntArrayList()-->Line_24 $$ if (!(commentedSuffix == null && !nestedCommentSuffixes.isEmpty() && nestedCommentSuffixes.get(nestedCommentSuffixes.size() - 1) + commentSuffix.length() == endOffset)) [ FD ]
Line_56 $$ RangeMarker marker = myDocument.createRangeMarker(startOffset, endOffset + shift)-->Line_58 $$ return processDocument(myDocument, marker, commenter, true)[ FD ]
Line_23 $$ int shift = 0-->Line_26 $$ shift += commentSuffix.length()[ FD ]
Line_26 $$ shift += commentSuffix.length()-->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_13 $$ CharSequence chars = myDocument.getCharsSequence()-->Line_15 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedPrefix)) [ FD ]
Line_30 $$ final TextRange selection = new TextRange(startOffset, endOffset)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_14 $$ for (int i = startOffset; i < endOffset; ++i) [ FD ]
Line_26 $$ shift += commentSuffix.length()-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_34 $$ if (prefixIndex > suffixIndex) -->Line_39 $$ --j[ CD ]
Line_42 $$ while (i >= 0) -->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ CD ]
Line_11 $$ String commentedPrefix = commenter.getCommentedBlockCommentPrefix()-->Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_28 $$ int i = nestedCommentPrefixes.size() - 1-->Line_36 $$ --i[ FD ]
Line_23 $$ int shift = 0-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_11 $$ String commentedPrefix = commenter.getCommentedBlockCommentPrefix()-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_34 $$ if (prefixIndex > suffixIndex) -->Line_36 $$ --i[ CD ]
Line_28 $$ int i = nestedCommentPrefixes.size() - 1-->Line_32 $$ final int prefixIndex = nestedCommentPrefixes.get(i)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_11 $$ String commentedPrefix = commenter.getCommentedBlockCommentPrefix()[ FD ]
Line_44 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)-->Line_54 $$ shift += commentPrefix.length()[ FD ]
Line_18 $$ if (CharArrayUtil.regionMatches(chars, i, normalizedSuffix)) -->Line_19 $$ nestedCommentSuffixes.add(i)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_26 $$ shift += commentSuffix.length()[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_31 $$ while (i >= 0 && j >= 0) [ CD ]
Line_48 $$ final int suffixIndex = nestedCommentSuffixes.get(j)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_31 $$ while (i >= 0 && j >= 0) -->Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)[ CD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_3 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_9 $$ IntArrayList nestedCommentPrefixes = new IntArrayList()-->Line_28 $$ int i = nestedCommentPrefixes.size() - 1[ FD ]
Line_31 $$ while (i >= 0 && j >= 0) -->Line_34 $$ if (prefixIndex > suffixIndex) [ CD ]
Line_33 $$ final int suffixIndex = nestedCommentSuffixes.get(j)-->Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_30 $$ final TextRange selection = new TextRange(startOffset, endOffset)-->Line_35 $$ shift += doBoundCommentingAndGetShift(prefixIndex, commentedPrefix, normalizedPrefix.length(), commentSuffix, false, selection)[ FD ]
Line_14 $$ for (int i = startOffset; i < endOffset; ++i) -->Line_42 $$ while (i >= 0) [ FD ]
Line_2 $$ private TextRange insertNestedComments(int startOffset, int endOffset, String commentPrefix, String commentSuffix, Commenter commenter) -->Line_38 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)[ FD ]
Line_49 $$ shift += doBoundCommentingAndGetShift(suffixIndex, commentedSuffix, normalizedSuffix.length(), commentPrefix, true, selection)-->Line_54 $$ shift += commentPrefix.length()[ FD ]
