Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_46 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ FD ]
Line_22 $$ final String firstWord = words[0]-->Line_23 $$ if (GET_PREFIX.equals(firstWord) || IS_PREFIX.equals(firstWord) || FIND_PREFIX.equals(firstWord) || CREATE_PREFIX.equals(firstWord)) [ FD ]
Line_24 $$ if (words.length > 1) -->Line_31 $$ return new NamesByExprInfo(propertyName, names)[ CD ]
Line_26 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)-->Line_29 $$ names = ArrayUtil.append(names, StringUtil.sanitizeJavaIdentifier(changeIfNotIdentifier(qualifierExpression.getText() + StringUtil.capitalize(propertyName))))[ FD ]
Line_25 $$ final String propertyName = methodName.substring(firstWord.length())-->Line_46 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ FD ]
Line_76 $$ if (expr instanceof PsiParenthesizedExpression) -->Line_77 $$ final PsiExpression expression = ((PsiParenthesizedExpression) expr).getExpression()[ CD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_15 $$ if ("map".equals(methodName) || "flatMap".equals(methodName) || "filter".equals(methodName)) [ FD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_20 $$ String[] words = NameUtil.nameToWords(methodName)[ FD ]
Line_86 $$ if (expr instanceof PsiLiteralExpression) -->Line_87 $$ final String text = StringUtil.unquoteString(expr.getText())[ CD ]
Line_49 $$ if (expr instanceof PsiArrayAccessExpression) -->Line_50 $$ PsiExpression arrayExpr = ((PsiArrayAccessExpression) expr).getArrayExpression()[ CD ]
Line_25 $$ final String propertyName = methodName.substring(firstWord.length())-->Line_29 $$ names = ArrayUtil.append(names, StringUtil.sanitizeJavaIdentifier(changeIfNotIdentifier(qualifierExpression.getText() + StringUtil.capitalize(propertyName))))[ FD ]
Line_25 $$ final String propertyName = methodName.substring(firstWord.length())-->Line_26 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ FD ]
Line_45 $$ if (refElement != null && propertyName != null) -->Line_46 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_91 $$ if (expr instanceof PsiFunctionalExpression) [ FD ]
Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) -->Line_54 $$ if (refElement instanceof PsiVariable) [ CD ]
Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) -->Line_52 $$ String arrayName = ((PsiReferenceExpression) arrayExpr).getReferenceName()[ CD ]
Line_59 $$ String name = StringUtil.unpluralize(arrayName)-->Line_61 $$ String[] names = getSuggestionsByName(name, variableKind, false, correctKeywords)[ FD ]
Line_6 $$ if (methodName != null) -->Line_15 $$ if ("map".equals(methodName) || "flatMap".equals(methodName) || "filter".equals(methodName)) [ CD ]
Line_49 $$ if (expr instanceof PsiArrayAccessExpression) -->Line_66 $$ if (expr instanceof PsiLiteralExpression && variableKind == VariableKind.STATIC_FINAL_FIELD) [ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_87 $$ final String text = StringUtil.unquoteString(expr.getText())[ FD ]
Line_58 $$ if (arrayName != null) -->Line_59 $$ String name = StringUtil.unpluralize(arrayName)[ CD ]
Line_4 $$ PsiReferenceExpression methodExpr = ((PsiMethodCallExpression) expr).getMethodExpression()-->Line_5 $$ String methodName = methodExpr.getReferenceName()[ FD ]
Line_21 $$ if (words.length > 0) -->Line_23 $$ if (GET_PREFIX.equals(firstWord) || IS_PREFIX.equals(firstWord) || FIND_PREFIX.equals(firstWord) || CREATE_PREFIX.equals(firstWord)) [ CD ]
Line_29 $$ names = ArrayUtil.append(names, StringUtil.sanitizeJavaIdentifier(changeIfNotIdentifier(qualifierExpression.getText() + StringUtil.capitalize(propertyName))))-->Line_73 $$ return new NamesByExprInfo(null, constantValueToConstantName(names))[ FD ]
Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) -->Line_53 $$ PsiElement refElement = ((PsiReferenceExpression) arrayExpr).resolve()[ CD ]
Line_66 $$ if (expr instanceof PsiLiteralExpression && variableKind == VariableKind.STATIC_FINAL_FIELD) -->Line_69 $$ if (value instanceof String) [ CD ]
Line_82 $$ final PsiExpression operand = ((PsiTypeCastExpression) expr).getOperand()-->Line_84 $$ return suggestVariableNameByExpressionOnly(operand, variableKind, correctKeywords, useAllMethodNames)[ FD ]
Line_54 $$ if (refElement instanceof PsiVariable) -->Line_55 $$ VariableKind refVariableKind = getVariableKind((PsiVariable) refElement)[ CD ]
Line_60 $$ if (name != null) -->Line_62 $$ return new NamesByExprInfo(name, names)[ CD ]
Line_28 $$ if (qualifierExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression) qualifierExpression).resolve() instanceof PsiVariable) -->Line_29 $$ names = ArrayUtil.append(names, StringUtil.sanitizeJavaIdentifier(changeIfNotIdentifier(qualifierExpression.getText() + StringUtil.capitalize(propertyName))))[ CD ]
Line_81 $$ if (expr instanceof PsiTypeCastExpression) -->Line_83 $$ if (operand != null) [ CD ]
Line_69 $$ if (value instanceof String) -->Line_70 $$ final String stringValue = (String) value[ CD ]
Line_22 $$ final String firstWord = words[0]-->Line_25 $$ final String propertyName = methodName.substring(firstWord.length())[ FD ]
Line_59 $$ String name = StringUtil.unpluralize(arrayName)-->Line_60 $$ if (name != null) [ FD ]
Line_40 $$ PsiElement refElement = ((PsiReferenceExpression) expr).resolve()-->Line_41 $$ if (refElement instanceof PsiVariable) [ FD ]
Line_81 $$ if (expr instanceof PsiTypeCastExpression) -->Line_86 $$ if (expr instanceof PsiLiteralExpression) [ CD ]
Line_38 $$ if (expr instanceof PsiReferenceExpression) -->Line_40 $$ PsiElement refElement = ((PsiReferenceExpression) expr).resolve()[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_49 $$ if (expr instanceof PsiArrayAccessExpression) [ FD ]
Line_40 $$ PsiElement refElement = ((PsiReferenceExpression) expr).resolve()-->Line_54 $$ if (refElement instanceof PsiVariable) [ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_3 $$ if (expr instanceof PsiMethodCallExpression) [ CD ]
Line_24 $$ if (words.length > 1) -->Line_26 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ CD ]
Line_6 $$ if (methodName != null) -->Line_20 $$ String[] words = NameUtil.nameToWords(methodName)[ CD ]
Line_76 $$ if (expr instanceof PsiParenthesizedExpression) -->Line_81 $$ if (expr instanceof PsiTypeCastExpression) [ CD ]
Line_23 $$ if (GET_PREFIX.equals(firstWord) || IS_PREFIX.equals(firstWord) || FIND_PREFIX.equals(firstWord) || CREATE_PREFIX.equals(firstWord)) -->Line_33 $$ if (words.length == 1 || useAllMethodNames) [ CD ]
Line_87 $$ final String text = StringUtil.unquoteString(expr.getText())-->Line_89 $$ return new NamesByExprInfo(text, getSuggestionsByName(text, variableKind, false, correctKeywords))[ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_79 $$ return suggestVariableNameByExpressionOnly(expression, variableKind, correctKeywords, useAllMethodNames)[ FD ]
Line_8 $$ if (isJavaUtilMethodCall((PsiMethodCallExpression) expr)) -->Line_9 $$ PsiExpression[] expressions = ((PsiMethodCallExpression) expr).getArgumentList().getExpressions()[ CD ]
Line_52 $$ String arrayName = ((PsiReferenceExpression) arrayExpr).getReferenceName()-->Line_58 $$ if (arrayName != null) [ FD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_34 $$ return new NamesByExprInfo(methodName, getSuggestionsByName(methodName, variableKind, false, correctKeywords))[ FD ]
Line_66 $$ if (expr instanceof PsiLiteralExpression && variableKind == VariableKind.STATIC_FINAL_FIELD) -->Line_76 $$ if (expr instanceof PsiParenthesizedExpression) [ CD ]
Line_7 $$ if ("of".equals(methodName) || "ofNullable".equals(methodName)) -->Line_8 $$ if (isJavaUtilMethodCall((PsiMethodCallExpression) expr)) [ CD ]
Line_78 $$ if (expression != null) -->Line_79 $$ return suggestVariableNameByExpressionOnly(expression, variableKind, correctKeywords, useAllMethodNames)[ CD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_7 $$ if ("of".equals(methodName) || "ofNullable".equals(methodName)) [ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_81 $$ if (expr instanceof PsiTypeCastExpression) [ FD ]
Line_3 $$ if (expr instanceof PsiMethodCallExpression) -->Line_38 $$ if (expr instanceof PsiReferenceExpression) [ CD ]
Line_52 $$ String arrayName = ((PsiReferenceExpression) arrayExpr).getReferenceName()-->Line_56 $$ arrayName = variableNameToPropertyName(arrayName, refVariableKind)[ FD ]
Line_45 $$ if (refElement != null && propertyName != null) -->Line_47 $$ return new NamesByExprInfo(propertyName, names)[ CD ]
Line_24 $$ if (words.length > 1) -->Line_28 $$ if (qualifierExpression instanceof PsiReferenceExpression && ((PsiReferenceExpression) qualifierExpression).resolve() instanceof PsiVariable) [ CD ]
Line_38 $$ if (expr instanceof PsiReferenceExpression) -->Line_49 $$ if (expr instanceof PsiArrayAccessExpression) [ CD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_6 $$ if (methodName != null) [ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_84 $$ return suggestVariableNameByExpressionOnly(operand, variableKind, correctKeywords, useAllMethodNames)[ FD ]
Line_6 $$ if (methodName != null) -->Line_21 $$ if (words.length > 0) [ CD ]
Line_70 $$ final String stringValue = (String) value-->Line_71 $$ String[] names = getSuggestionsByValue(stringValue)[ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_3 $$ if (expr instanceof PsiMethodCallExpression) [ FD ]
Line_68 $$ final Object value = literalExpression.getValue()-->Line_69 $$ if (value instanceof String) [ FD ]
Line_5 $$ String methodName = methodExpr.getReferenceName()-->Line_25 $$ final String propertyName = methodName.substring(firstWord.length())[ FD ]
Line_24 $$ if (words.length > 1) -->Line_27 $$ final PsiExpression qualifierExpression = methodExpr.getQualifierExpression()[ CD ]
Line_88 $$ if (isIdentifier(text)) -->Line_89 $$ return new NamesByExprInfo(text, getSuggestionsByName(text, variableKind, false, correctKeywords))[ CD ]
Line_60 $$ if (name != null) -->Line_61 $$ String[] names = getSuggestionsByName(name, variableKind, false, correctKeywords)[ CD ]
Line_81 $$ if (expr instanceof PsiTypeCastExpression) -->Line_82 $$ final PsiExpression operand = ((PsiTypeCastExpression) expr).getOperand()[ CD ]
Line_86 $$ if (expr instanceof PsiLiteralExpression) -->Line_88 $$ if (isIdentifier(text)) [ CD ]
Line_38 $$ if (expr instanceof PsiReferenceExpression) -->Line_45 $$ if (refElement != null && propertyName != null) [ CD ]
Line_42 $$ VariableKind refVariableKind = getVariableKind((PsiVariable) refElement)-->Line_43 $$ propertyName = variableNameToPropertyName(propertyName, refVariableKind)[ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_98 $$ return new NamesByExprInfo(null, ArrayUtil.EMPTY_STRING_ARRAY)[ CD ]
Line_66 $$ if (expr instanceof PsiLiteralExpression && variableKind == VariableKind.STATIC_FINAL_FIELD) -->Line_67 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expr[ CD ]
Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) -->Line_58 $$ if (arrayName != null) [ CD ]
Line_86 $$ if (expr instanceof PsiLiteralExpression) -->Line_91 $$ if (expr instanceof PsiFunctionalExpression) [ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_94 $$ final String[] namesByType = suggestVariableNameByType(functionalInterfaceType, variableKind, correctKeywords)[ FD ]
Line_41 $$ if (refElement instanceof PsiVariable) -->Line_43 $$ propertyName = variableNameToPropertyName(propertyName, refVariableKind)[ CD ]
Line_16 $$ if (isJavaUtilMethodCall((PsiMethodCallExpression) expr)) -->Line_17 $$ return new NamesByExprInfo(null)[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_33 $$ if (words.length == 1 || useAllMethodNames) [ FD ]
Line_33 $$ if (words.length == 1 || useAllMethodNames) -->Line_34 $$ return new NamesByExprInfo(methodName, getSuggestionsByName(methodName, variableKind, false, correctKeywords))[ CD ]
Line_41 $$ if (refElement instanceof PsiVariable) -->Line_42 $$ VariableKind refVariableKind = getVariableKind((PsiVariable) refElement)[ CD ]
Line_49 $$ if (expr instanceof PsiArrayAccessExpression) -->Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) [ CD ]
Line_58 $$ if (arrayName != null) -->Line_60 $$ if (name != null) [ CD ]
Line_52 $$ String arrayName = ((PsiReferenceExpression) arrayExpr).getReferenceName()-->Line_59 $$ String name = StringUtil.unpluralize(arrayName)[ FD ]
Line_3 $$ if (expr instanceof PsiMethodCallExpression) -->Line_6 $$ if (methodName != null) [ CD ]
Line_27 $$ final PsiExpression qualifierExpression = methodExpr.getQualifierExpression()-->Line_29 $$ names = ArrayUtil.append(names, StringUtil.sanitizeJavaIdentifier(changeIfNotIdentifier(qualifierExpression.getText() + StringUtil.capitalize(propertyName))))[ FD ]
Line_42 $$ VariableKind refVariableKind = getVariableKind((PsiVariable) refElement)-->Line_56 $$ arrayName = variableNameToPropertyName(arrayName, refVariableKind)[ FD ]
Line_72 $$ if (names.length > 0) -->Line_73 $$ return new NamesByExprInfo(null, constantValueToConstantName(names))[ CD ]
Line_56 $$ arrayName = variableNameToPropertyName(arrayName, refVariableKind)-->Line_59 $$ String name = StringUtil.unpluralize(arrayName)[ FD ]
Line_69 $$ if (value instanceof String) -->Line_71 $$ String[] names = getSuggestionsByValue(stringValue)[ CD ]
Line_3 $$ if (expr instanceof PsiMethodCallExpression) -->Line_5 $$ String methodName = methodExpr.getReferenceName()[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_38 $$ if (expr instanceof PsiReferenceExpression) [ FD ]
Line_26 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)-->Line_73 $$ return new NamesByExprInfo(null, constantValueToConstantName(names))[ FD ]
Line_21 $$ if (words.length > 0) -->Line_22 $$ final String firstWord = words[0][ CD ]
Line_23 $$ if (GET_PREFIX.equals(firstWord) || IS_PREFIX.equals(firstWord) || FIND_PREFIX.equals(firstWord) || CREATE_PREFIX.equals(firstWord)) -->Line_24 $$ if (words.length > 1) [ CD ]
Line_69 $$ if (value instanceof String) -->Line_72 $$ if (names.length > 0) [ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_34 $$ return new NamesByExprInfo(methodName, getSuggestionsByName(methodName, variableKind, false, correctKeywords))[ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_11 $$ return suggestVariableNameByExpressionOnly(expressions[0], variableKind, correctKeywords, useAllMethodNames)[ FD ]
Line_93 $$ if (functionalInterfaceType != null) -->Line_94 $$ final String[] namesByType = suggestVariableNameByType(functionalInterfaceType, variableKind, correctKeywords)[ CD ]
Line_10 $$ if (expressions.length > 0) -->Line_11 $$ return suggestVariableNameByExpressionOnly(expressions[0], variableKind, correctKeywords, useAllMethodNames)[ CD ]
Line_77 $$ final PsiExpression expression = ((PsiParenthesizedExpression) expr).getExpression()-->Line_78 $$ if (expression != null) [ FD ]
Line_38 $$ if (expr instanceof PsiReferenceExpression) -->Line_39 $$ String propertyName = ((PsiReferenceExpression) expr).getReferenceName()[ CD ]
Line_66 $$ if (expr instanceof PsiLiteralExpression && variableKind == VariableKind.STATIC_FINAL_FIELD) -->Line_68 $$ final Object value = literalExpression.getValue()[ CD ]
Line_91 $$ if (expr instanceof PsiFunctionalExpression) -->Line_93 $$ if (functionalInterfaceType != null) [ CD ]
Line_67 $$ final PsiLiteralExpression literalExpression = (PsiLiteralExpression) expr-->Line_68 $$ final Object value = literalExpression.getValue()[ FD ]
Line_50 $$ PsiExpression arrayExpr = ((PsiArrayAccessExpression) expr).getArrayExpression()-->Line_51 $$ if (arrayExpr instanceof PsiReferenceExpression) [ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_61 $$ String[] names = getSuggestionsByName(name, variableKind, false, correctKeywords)[ FD ]
Line_76 $$ if (expr instanceof PsiParenthesizedExpression) -->Line_78 $$ if (expression != null) [ CD ]
Line_15 $$ if ("map".equals(methodName) || "flatMap".equals(methodName) || "filter".equals(methodName)) -->Line_16 $$ if (isJavaUtilMethodCall((PsiMethodCallExpression) expr)) [ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_76 $$ if (expr instanceof PsiParenthesizedExpression) [ FD ]
Line_91 $$ if (expr instanceof PsiFunctionalExpression) -->Line_92 $$ final PsiType functionalInterfaceType = ((PsiFunctionalExpression) expr).getFunctionalInterfaceType()[ CD ]
Line_83 $$ if (operand != null) -->Line_84 $$ return suggestVariableNameByExpressionOnly(operand, variableKind, correctKeywords, useAllMethodNames)[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_26 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ FD ]
Line_82 $$ final PsiExpression operand = ((PsiTypeCastExpression) expr).getOperand()-->Line_83 $$ if (operand != null) [ FD ]
Line_77 $$ final PsiExpression expression = ((PsiParenthesizedExpression) expr).getExpression()-->Line_79 $$ return suggestVariableNameByExpressionOnly(expression, variableKind, correctKeywords, useAllMethodNames)[ FD ]
Line_92 $$ final PsiType functionalInterfaceType = ((PsiFunctionalExpression) expr).getFunctionalInterfaceType()-->Line_93 $$ if (functionalInterfaceType != null) [ FD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_89 $$ return new NamesByExprInfo(text, getSuggestionsByName(text, variableKind, false, correctKeywords))[ FD ]
Line_87 $$ final String text = StringUtil.unquoteString(expr.getText())-->Line_88 $$ if (isIdentifier(text)) [ FD ]
Line_54 $$ if (refElement instanceof PsiVariable) -->Line_56 $$ arrayName = variableNameToPropertyName(arrayName, refVariableKind)[ CD ]
Line_2 $$ private NamesByExprInfo suggestVariableNameByExpressionOnly(@NotNull PsiExpression expr, @NotNull VariableKind variableKind, boolean correctKeywords, boolean useAllMethodNames) -->Line_86 $$ if (expr instanceof PsiLiteralExpression) [ FD ]
Line_24 $$ if (words.length > 1) -->Line_25 $$ final String propertyName = methodName.substring(firstWord.length())[ CD ]
Line_92 $$ final PsiType functionalInterfaceType = ((PsiFunctionalExpression) expr).getFunctionalInterfaceType()-->Line_94 $$ final String[] namesByType = suggestVariableNameByType(functionalInterfaceType, variableKind, correctKeywords)[ FD ]
Line_6 $$ if (methodName != null) -->Line_7 $$ if ("of".equals(methodName) || "ofNullable".equals(methodName)) [ CD ]
Line_3 $$ if (expr instanceof PsiMethodCallExpression) -->Line_4 $$ PsiReferenceExpression methodExpr = ((PsiMethodCallExpression) expr).getMethodExpression()[ CD ]
Line_38 $$ if (expr instanceof PsiReferenceExpression) -->Line_41 $$ if (refElement instanceof PsiVariable) [ CD ]
Line_43 $$ propertyName = variableNameToPropertyName(propertyName, refVariableKind)-->Line_46 $$ String[] names = getSuggestionsByName(propertyName, variableKind, false, correctKeywords)[ FD ]
Line_4 $$ PsiReferenceExpression methodExpr = ((PsiMethodCallExpression) expr).getMethodExpression()-->Line_27 $$ final PsiExpression qualifierExpression = methodExpr.getQualifierExpression()[ FD ]
Line_56 $$ arrayName = variableNameToPropertyName(arrayName, refVariableKind)-->Line_58 $$ if (arrayName != null) [ FD ]
Line_93 $$ if (functionalInterfaceType != null) -->Line_95 $$ return new NamesByExprInfo(null, namesByType)[ CD ]
Line_8 $$ if (isJavaUtilMethodCall((PsiMethodCallExpression) expr)) -->Line_10 $$ if (expressions.length > 0) [ CD ]
Line_25 $$ final String propertyName = methodName.substring(firstWord.length())-->Line_43 $$ propertyName = variableNameToPropertyName(propertyName, refVariableKind)[ FD ]
