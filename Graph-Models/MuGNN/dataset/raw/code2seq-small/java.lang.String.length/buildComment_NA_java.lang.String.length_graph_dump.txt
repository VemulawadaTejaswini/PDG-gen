Line_58 $$ close = filler-->Line_70 $$ diff = close.length() - offset[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_21 $$ if (!allowSeparator) -->Line_22 $$ if (options.getFiller() == LanguageOptions.DEFAULT_FILLER) [ CD ]
Line_26 $$ boolean isBlock = options.isBlock()-->Line_68 $$ if (options.isSeparateBefore()) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_35 $$ StringBuilder pre = new StringBuilder(5)[ CD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_109 $$ preview.append(close)[ FD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_43 $$ int pos = open.length() - 1[ FD ]
Line_105 $$ if (!isBlock && !allowLine) -->Line_109 $$ preview.append(close)[ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_129 $$ return preview.substring(0, preview.length() - 1)[ FD ]
Line_62 $$ close = filler-->Line_126 $$ preview.append(close).append('\n')[ FD ]
Line_78 $$ if (isBlock) -->Line_79 $$ preview.append(open).append('\n')[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_26 $$ boolean isBlock = options.isBlock()[ CD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_64 $$ pre.append(open)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_116 $$ preview.append(pre)[ FD ]
Line_15 $$ if (allowLine && !allowBlock) -->Line_16 $$ bs = ls[ CD ]
Line_81 $$ if (template.length() > 0) -->Line_82 $$ String[] lines = template.split("\n", -1)[ CD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_89 $$ preview.append(leader).append(pre)[ FD ]
Line_58 $$ close = filler-->Line_109 $$ preview.append(close)[ FD ]
Line_41 $$ int offset = 0-->Line_47 $$ offset++[ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_81 $$ if (template.length() > 0) [ FD ]
Line_3 $$ Commenter commenter = getCommenter(type)-->Line_7 $$ String bs = commenter.getBlockCommentPrefix()[ FD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_72 $$ preview.append(open)[ FD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)[ FD ]
Line_83 $$ for (String line : lines) -->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_26 $$ boolean isBlock = options.isBlock()-->Line_105 $$ if (!isBlock && !allowLine) [ FD ]
Line_13 $$ boolean allowBlock = bs != null && be != null-->Line_123 $$ if (!allowBlock) [ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_120 $$ preview.append(close)[ FD ]
Line_23 $$ filler = "~"-->Line_118 $$ preview.append(filler)[ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_70 $$ diff = close.length() - offset[ FD ]
Line_62 $$ close = filler-->Line_70 $$ diff = close.length() - offset[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_124 $$ preview.append(pre).append('\n')[ FD ]
Line_85 $$ line = line.trim()-->Line_95 $$ preview.append(line)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_120 $$ preview.append(close)[ FD ]
Line_28 $$ if (isBlock && !allowBlock) -->Line_29 $$ isPrefix = true[ CD ]
Line_39 $$ filler = open.substring(open.length() - 1)-->Line_62 $$ close = filler[ FD ]
Line_105 $$ if (!isBlock && !allowLine) -->Line_106 $$ if (preview.charAt(preview.length() - 1) != ' ') [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_115 $$ if (options.isSeparateAfter()) [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_21 $$ if (!allowSeparator) [ CD ]
Line_42 $$ if (isBlock) -->Line_65 $$ post.append(close)[ CD ]
Line_13 $$ boolean allowBlock = bs != null && be != null-->Line_69 $$ if (isBlock && isBox && allowBlock) [ FD ]
Line_20 $$ String filler = options.getFiller()-->Line_53 $$ post.append(filler)[ FD ]
Line_36 $$ StringBuilder leader = new StringBuilder(5)-->Line_50 $$ leader.append(' ')[ FD ]
Line_39 $$ filler = open.substring(open.length() - 1)-->Line_53 $$ post.append(filler)[ FD ]
Line_23 $$ filler = "~"-->Line_38 $$ if (filler == LanguageOptions.DEFAULT_FILLER) [ FD ]
Line_42 $$ if (isBlock) -->Line_57 $$ if (!allowBlock) [ CD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_124 $$ preview.append(pre).append('\n')[ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_116 $$ preview.append(pre)[ FD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_64 $$ pre.append(open)[ FD ]
Line_13 $$ boolean allowBlock = bs != null && be != null-->Line_57 $$ if (!allowBlock) [ FD ]
Line_20 $$ String filler = options.getFiller()-->Line_58 $$ close = filler[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_76 $$ preview.append(post)[ FD ]
Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) -->Line_99 $$ preview.append(' ')[ CD ]
Line_8 $$ String be = commenter.getBlockCommentSuffix()-->Line_17 $$ be = ls[ FD ]
Line_106 $$ if (preview.charAt(preview.length() - 1) != ' ') -->Line_107 $$ preview.append(' ')[ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_79 $$ preview.append(open).append('\n')[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_107 $$ preview.append(' ')[ FD ]
Line_27 $$ boolean isPrefix = options.isPrefixLines()-->Line_29 $$ isPrefix = true[ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_124 $$ preview.append(pre).append('\n')[ FD ]
Line_90 $$ int len = 0-->Line_93 $$ len++[ FD ]
Line_62 $$ close = filler-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_81 $$ if (template.length() > 0) [ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_109 $$ preview.append(close)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_36 $$ StringBuilder leader = new StringBuilder(5)[ CD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_44 $$ pre.append(allowBlock ? filler : open.charAt(pos))[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_99 $$ preview.append(' ')[ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_102 $$ preview.append(post.substring(0, options.getLenBefore() - diff - len))[ FD ]
Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) -->Line_118 $$ preview.append(filler)[ CD ]
Line_115 $$ if (options.isSeparateAfter()) -->Line_120 $$ preview.append(close)[ CD ]
Line_115 $$ if (options.isSeparateAfter()) -->Line_121 $$ preview.append('\n')[ CD ]
Line_42 $$ if (isBlock) -->Line_43 $$ int pos = open.length() - 1[ CD ]
Line_42 $$ if (isBlock) -->Line_64 $$ pre.append(open)[ CD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_49 $$ while (open.length() > 1 && pos >= 0) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_38 $$ if (filler == LanguageOptions.DEFAULT_FILLER) [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_41 $$ int offset = 0[ CD ]
Line_58 $$ close = filler-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_27 $$ boolean isPrefix = options.isPrefixLines()[ CD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_55 $$ pre = new StringBuilder(0)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_32 $$ StringBuilder preview = new StringBuilder(80)[ CD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_53 $$ post.append(filler)[ FD ]
Line_38 $$ if (filler == LanguageOptions.DEFAULT_FILLER) -->Line_39 $$ filler = open.substring(open.length() - 1)[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs[ CD ]
Line_42 $$ if (isBlock) -->Line_54 $$ if (!isPrefix) [ CD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) [ CD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_69 $$ if (isBlock && isBox && allowBlock) [ CD ]
Line_36 $$ StringBuilder leader = new StringBuilder(5)-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_123 $$ if (!allowBlock) -->Line_124 $$ preview.append(pre).append('\n')[ CD ]
Line_62 $$ close = filler-->Line_120 $$ preview.append(close)[ FD ]
Line_20 $$ String filler = options.getFiller()-->Line_74 $$ preview.append(filler)[ FD ]
Line_84 $$ if (options.isTrim()) -->Line_85 $$ line = line.trim()[ CD ]
Line_62 $$ close = filler-->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_26 $$ boolean isBlock = options.isBlock()-->Line_28 $$ if (isBlock && !allowBlock) [ FD ]
Line_49 $$ while (open.length() > 1 && pos >= 0) -->Line_50 $$ leader.append(' ')[ CD ]
Line_10 $$ if ((bs == null || be == null) && ls == null) -->Line_11 $$ return "<No comments>"[ CD ]
Line_3 $$ Commenter commenter = getCommenter(type)-->Line_9 $$ String ls = commenter.getLineCommentPrefix()[ FD ]
Line_97 $$ if (isBox && len < options.getLenBefore() - diff) -->Line_101 $$ if (isBlock || allowLine) [ CD ]
Line_42 $$ if (isBlock) -->Line_44 $$ pre.append(allowBlock ? filler : open.charAt(pos))[ CD ]
Line_57 $$ if (!allowBlock) -->Line_58 $$ close = filler[ CD ]
Line_26 $$ boolean isBlock = options.isBlock()-->Line_101 $$ if (isBlock || allowLine) [ FD ]
Line_23 $$ filler = "~"-->Line_62 $$ close = filler[ FD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_102 $$ preview.append(post.substring(0, options.getLenBefore() - diff - len))[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_68 $$ if (options.isSeparateBefore()) [ FD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_77 $$ preview.append('\n')[ CD ]
Line_20 $$ String filler = options.getFiller()-->Line_38 $$ if (filler == LanguageOptions.DEFAULT_FILLER) [ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_88 $$ line = StringUtil.trimEnd(line, close)-->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)-->Line_95 $$ preview.append(line)[ FD ]
Line_67 $$ int diff = 0-->Line_70 $$ diff = close.length() - offset[ FD ]
Line_45 $$ while (pos > 0 && open.charAt(pos) == open.charAt(open.length() - 1)) -->Line_47 $$ offset++[ CD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_39 $$ filler = open.substring(open.length() - 1)[ FD ]
Line_42 $$ if (isBlock) -->Line_49 $$ while (open.length() > 1 && pos >= 0) [ CD ]
Line_54 $$ if (!isPrefix) -->Line_55 $$ pre = new StringBuilder(0)[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_7 $$ String bs = commenter.getBlockCommentPrefix()[ CD ]
Line_20 $$ String filler = options.getFiller()-->Line_62 $$ close = filler[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_84 $$ if (options.isTrim()) [ FD ]
Line_88 $$ line = StringUtil.trimEnd(line, close)-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_96 $$ len += line.length() + leader.length() + pre.length()-->Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) [ FD ]
Line_115 $$ if (options.isSeparateAfter()) -->Line_122 $$ if (isBlock) [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_13 $$ boolean allowBlock = bs != null && be != null[ CD ]
Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) -->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ FD ]
Line_58 $$ close = filler-->Line_120 $$ preview.append(close)[ FD ]
Line_58 $$ close = filler-->Line_126 $$ preview.append(close).append('\n')[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_4 $$ if (commenter == null) [ CD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_44 $$ pre.append(allowBlock ? filler : open.charAt(pos))[ FD ]
Line_3 $$ Commenter commenter = getCommenter(type)-->Line_8 $$ String be = commenter.getBlockCommentSuffix()[ FD ]
Line_26 $$ boolean isBlock = options.isBlock()-->Line_115 $$ if (options.isSeparateAfter()) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_37 $$ StringBuilder post = new StringBuilder(5)[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_28 $$ if (isBlock && !allowBlock) [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) [ FD ]
Line_90 $$ int len = 0-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_39 $$ filler = open.substring(open.length() - 1)-->Line_58 $$ close = filler[ FD ]
Line_58 $$ close = filler-->Line_62 $$ close = filler[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_42 $$ if (isBlock) [ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_82 $$ String[] lines = template.split("\n", -1)[ FD ]
Line_83 $$ for (String line : lines) -->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_83 $$ for (String line : lines) -->Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)[ FD ]
Line_39 $$ filler = open.substring(open.length() - 1)-->Line_74 $$ preview.append(filler)[ FD ]
Line_49 $$ while (open.length() > 1 && pos >= 0) -->Line_51 $$ pos--[ CD ]
Line_13 $$ boolean allowBlock = bs != null && be != null-->Line_15 $$ if (allowLine && !allowBlock) [ FD ]
Line_7 $$ String bs = commenter.getBlockCommentPrefix()-->Line_16 $$ bs = ls[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_31 $$ boolean isBox = options.isBox() && options.isSeparateBefore() && options.isSeparateAfter() && options.getLenBefore() == options.getLenAfter()[ CD ]
Line_90 $$ int len = 0-->Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) [ FD ]
Line_43 $$ int pos = open.length() - 1-->Line_45 $$ while (pos > 0 && open.charAt(pos) == open.charAt(open.length() - 1)) [ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_126 $$ preview.append(close).append('\n')[ FD ]
Line_62 $$ close = filler-->Line_109 $$ preview.append(close)[ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_89 $$ preview.append(leader).append(pre)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_74 $$ preview.append(filler)[ FD ]
Line_43 $$ int pos = open.length() - 1-->Line_44 $$ pre.append(allowBlock ? filler : open.charAt(pos))[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_14 $$ boolean allowLine = ls != null[ CD ]
Line_20 $$ String filler = options.getFiller()-->Line_39 $$ filler = open.substring(open.length() - 1)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_22 $$ if (options.getFiller() == LanguageOptions.DEFAULT_FILLER) [ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_77 $$ preview.append('\n')[ FD ]
Line_101 $$ if (isBlock || allowLine) -->Line_102 $$ preview.append(post.substring(0, options.getLenBefore() - diff - len))[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_9 $$ String ls = commenter.getLineCommentPrefix()[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_10 $$ if ((bs == null || be == null) && ls == null) [ CD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_45 $$ while (pos > 0 && open.charAt(pos) == open.charAt(open.length() - 1)) [ FD ]
Line_115 $$ if (options.isSeparateAfter()) -->Line_116 $$ preview.append(pre)[ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_114 $$ preview.append(leader)[ FD ]
Line_42 $$ if (isBlock) -->Line_45 $$ while (pos > 0 && open.charAt(pos) == open.charAt(open.length() - 1)) [ CD ]
Line_122 $$ if (isBlock) -->Line_123 $$ if (!allowBlock) [ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_121 $$ preview.append('\n')[ FD ]
Line_19 $$ boolean allowSeparator = getInstance().allowSeparators(type)-->Line_21 $$ if (!allowSeparator) [ FD ]
Line_36 $$ StringBuilder leader = new StringBuilder(5)-->Line_114 $$ preview.append(leader)[ FD ]
Line_23 $$ filler = "~"-->Line_39 $$ filler = open.substring(open.length() - 1)[ FD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_72 $$ preview.append(open)[ CD ]
Line_15 $$ if (allowLine && !allowBlock) -->Line_17 $$ be = ls[ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_118 $$ preview.append(filler)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_97 $$ if (isBox && len < options.getLenBefore() - diff) [ FD ]
Line_88 $$ line = StringUtil.trimEnd(line, close)-->Line_95 $$ preview.append(line)[ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_116 $$ preview.append(pre)[ FD ]
Line_45 $$ while (pos > 0 && open.charAt(pos) == open.charAt(open.length() - 1)) -->Line_46 $$ pos--[ CD ]
Line_83 $$ for (String line : lines) -->Line_85 $$ line = line.trim()[ FD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_76 $$ preview.append(post)[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_114 $$ preview.append(leader)[ CD ]
Line_41 $$ int offset = 0-->Line_70 $$ diff = close.length() - offset[ FD ]
Line_36 $$ StringBuilder leader = new StringBuilder(5)-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_65 $$ post.append(close)[ FD ]
Line_9 $$ String ls = commenter.getLineCommentPrefix()-->Line_17 $$ be = ls[ FD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_102 $$ preview.append(post.substring(0, options.getLenBefore() - diff - len))[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_3 $$ Commenter commenter = getCommenter(type)[ FD ]
Line_85 $$ line = line.trim()-->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_68 $$ if (options.isSeparateBefore()) [ CD ]
Line_58 $$ close = filler-->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_91 $$ if (pre.length() > 0 && line.length() > 0) -->Line_92 $$ preview.append(' ')[ CD ]
Line_20 $$ String filler = options.getFiller()-->Line_118 $$ preview.append(filler)[ FD ]
Line_97 $$ if (isBox && len < options.getLenBefore() - diff) -->Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) [ CD ]
Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)-->Line_88 $$ line = StringUtil.trimEnd(line, close)[ FD ]
Line_43 $$ int pos = open.length() - 1-->Line_46 $$ pos--[ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_64 $$ pre.append(open)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_15 $$ if (allowLine && !allowBlock) [ CD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_23 $$ filler = "~"-->Line_53 $$ post.append(filler)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_95 $$ preview.append(line)[ FD ]
Line_85 $$ line = line.trim()-->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_76 $$ preview.append(post)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_34 $$ String close = isBlock ? be : allowLine ? ls : be[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_31 $$ boolean isBox = options.isBox() && options.isSeparateBefore() && options.isSeparateAfter() && options.getLenBefore() == options.getLenAfter()[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_92 $$ preview.append(' ')[ FD ]
Line_83 $$ for (String line : lines) -->Line_95 $$ preview.append(line)[ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_39 $$ filler = open.substring(open.length() - 1)-->Line_118 $$ preview.append(filler)[ FD ]
Line_31 $$ boolean isBox = options.isBox() && options.isSeparateBefore() && options.isSeparateAfter() && options.getLenBefore() == options.getLenAfter()-->Line_97 $$ if (isBox && len < options.getLenBefore() - diff) [ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_106 $$ if (preview.charAt(preview.length() - 1) != ' ') [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_3 $$ Commenter commenter = getCommenter(type)[ CD ]
Line_13 $$ boolean allowBlock = bs != null && be != null-->Line_28 $$ if (isBlock && !allowBlock) [ FD ]
Line_22 $$ if (options.getFiller() == LanguageOptions.DEFAULT_FILLER) -->Line_23 $$ filler = "~"[ CD ]
Line_43 $$ int pos = open.length() - 1-->Line_51 $$ pos--[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_20 $$ String filler = options.getFiller()[ CD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) [ FD ]
Line_23 $$ filler = "~"-->Line_58 $$ close = filler[ FD ]
Line_123 $$ if (!allowBlock) -->Line_126 $$ preview.append(close).append('\n')[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_129 $$ return preview.substring(0, preview.length() - 1)[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) [ FD ]
Line_85 $$ line = line.trim()-->Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)[ FD ]
Line_62 $$ close = filler-->Line_65 $$ post.append(close)[ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_65 $$ post.append(close)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_8 $$ String be = commenter.getBlockCommentSuffix()[ CD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_67 $$ int diff = 0[ CD ]
Line_27 $$ boolean isPrefix = options.isPrefixLines()-->Line_54 $$ if (!isPrefix) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_26 $$ boolean isBlock = options.isBlock()[ FD ]
Line_36 $$ StringBuilder leader = new StringBuilder(5)-->Line_89 $$ preview.append(leader).append(pre)[ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_62 $$ close = filler[ FD ]
Line_73 $$ for (int i = open.length() + 1; i <= options.getLenBefore() - diff - post.length(); i++) -->Line_74 $$ preview.append(filler)[ CD ]
Line_42 $$ if (isBlock) -->Line_53 $$ post.append(filler)[ CD ]
Line_69 $$ if (isBlock && isBox && allowBlock) -->Line_70 $$ diff = close.length() - offset[ CD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_72 $$ preview.append(open)[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_20 $$ String filler = options.getFiller()[ FD ]
Line_3 $$ Commenter commenter = getCommenter(type)-->Line_4 $$ if (commenter == null) [ FD ]
Line_91 $$ if (pre.length() > 0 && line.length() > 0) -->Line_93 $$ len++[ CD ]
Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)-->Line_91 $$ if (pre.length() > 0 && line.length() > 0) [ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)[ FD ]
Line_37 $$ StringBuilder post = new StringBuilder(5)-->Line_98 $$ for (; len < options.getLenBefore() - diff - post.length(); len++) [ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_115 $$ if (options.isSeparateAfter()) [ FD ]
Line_4 $$ if (commenter == null) -->Line_5 $$ return "<No comments>"[ CD ]
Line_61 $$ if (allowLine) -->Line_62 $$ close = filler[ CD ]
Line_9 $$ String ls = commenter.getLineCommentPrefix()-->Line_16 $$ bs = ls[ FD ]
Line_35 $$ StringBuilder pre = new StringBuilder(5)-->Line_89 $$ preview.append(leader).append(pre)[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_126 $$ preview.append(close).append('\n')[ FD ]
Line_33 $$ String open = isBlock ? bs : allowLine ? ls : bs-->Line_79 $$ preview.append(open).append('\n')[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_19 $$ boolean allowSeparator = getInstance().allowSeparators(type)[ FD ]
Line_115 $$ if (options.isSeparateAfter()) -->Line_117 $$ for (int i = leader.length() + pre.length(); i < options.getLenAfter() - close.length(); i++) [ CD ]
Line_23 $$ filler = "~"-->Line_74 $$ preview.append(filler)[ FD ]
Line_68 $$ if (options.isSeparateBefore()) -->Line_78 $$ if (isBlock) [ CD ]
Line_87 $$ line = StringUtil.trimStart(StringUtil.trimStart(line, pre.toString()), open)-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_27 $$ boolean isPrefix = options.isPrefixLines()[ FD ]
Line_2 $$ public static String buildComment(FileType type, String template, LanguageOptions options) -->Line_19 $$ boolean allowSeparator = getInstance().allowSeparators(type)[ CD ]
Line_14 $$ boolean allowLine = ls != null-->Line_101 $$ if (isBlock || allowLine) [ FD ]
Line_14 $$ boolean allowLine = ls != null-->Line_15 $$ if (allowLine && !allowBlock) [ FD ]
Line_58 $$ close = filler-->Line_65 $$ post.append(close)[ FD ]
Line_29 $$ isPrefix = true-->Line_54 $$ if (!isPrefix) [ FD ]
Line_85 $$ line = line.trim()-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_14 $$ boolean allowLine = ls != null-->Line_105 $$ if (!isBlock && !allowLine) [ FD ]
Line_55 $$ pre = new StringBuilder(0)-->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_34 $$ String close = isBlock ? be : allowLine ? ls : be-->Line_58 $$ close = filler[ FD ]
Line_20 $$ String filler = options.getFiller()-->Line_23 $$ filler = "~"[ FD ]
Line_83 $$ for (String line : lines) -->Line_96 $$ len += line.length() + leader.length() + pre.length()[ FD ]
Line_32 $$ StringBuilder preview = new StringBuilder(80)-->Line_111 $$ preview.append('\n')[ FD ]
Line_42 $$ if (isBlock) -->Line_61 $$ if (allowLine) [ CD ]
