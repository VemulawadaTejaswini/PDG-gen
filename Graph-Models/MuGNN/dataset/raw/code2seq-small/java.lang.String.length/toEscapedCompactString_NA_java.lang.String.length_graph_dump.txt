Line_3 $$ String[] groupsArray-->Line_6 $$ groupsArray = new String[counters.countCounters()][ FD ]
Line_8 $$ for (G group : counters) -->Line_16 $$ builder.append(group)[ FD ]
Line_2 $$ public static <C extends Counter, G extends CounterGroupBase<C>, T extends AbstractCounters<C, G>> String toEscapedCompactString(T counters) -->Line_4 $$ int length = 0[ CD ]
Line_14 $$ StringBuilder builder = new StringBuilder(length)-->Line_18 $$ return builder.toString()[ FD ]
Line_9 $$ String escapedString = toEscapedCompactString(group)-->Line_11 $$ length += escapedString.length()[ FD ]
Line_2 $$ public static <C extends Counter, G extends CounterGroupBase<C>, T extends AbstractCounters<C, G>> String toEscapedCompactString(T counters) -->Line_14 $$ StringBuilder builder = new StringBuilder(length)[ CD ]
Line_9 $$ String escapedString = toEscapedCompactString(group)-->Line_10 $$ groupsArray[i++] = escapedString[ FD ]
Line_2 $$ public static <C extends Counter, G extends CounterGroupBase<C>, T extends AbstractCounters<C, G>> String toEscapedCompactString(T counters) -->Line_18 $$ return builder.toString()[ CD ]
Line_8 $$ for (G group : counters) -->Line_9 $$ String escapedString = toEscapedCompactString(group)[ FD ]
Line_7 $$ int i = 0-->Line_10 $$ groupsArray[i++] = escapedString[ FD ]
Line_14 $$ StringBuilder builder = new StringBuilder(length)-->Line_16 $$ builder.append(group)[ FD ]
Line_2 $$ public static <C extends Counter, G extends CounterGroupBase<C>, T extends AbstractCounters<C, G>> String toEscapedCompactString(T counters) -->Line_6 $$ groupsArray = new String[counters.countCounters()][ FD ]
Line_4 $$ int length = 0-->Line_11 $$ length += escapedString.length()[ FD ]
Line_2 $$ public static <C extends Counter, G extends CounterGroupBase<C>, T extends AbstractCounters<C, G>> String toEscapedCompactString(T counters) -->Line_3 $$ String[] groupsArray[ CD ]
