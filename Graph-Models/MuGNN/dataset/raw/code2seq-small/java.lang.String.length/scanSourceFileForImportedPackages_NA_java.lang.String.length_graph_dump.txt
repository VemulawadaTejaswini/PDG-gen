Line_11 $$ while (true) -->Line_12 $$ if (myLexer.getTokenType() == JavaTokenType.SEMICOLON) [ CD ]
Line_31 $$ int lastDot = packageName.lastIndexOf('.')-->Line_35 $$ lastDot = _packageName.lastIndexOf('.')[ FD ]
Line_12 $$ if (myLexer.getTokenType() == JavaTokenType.SEMICOLON) -->Line_13 $$ advanceLexer(myLexer)[ CD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_7 $$ if (readPackageName(chars, myLexer) == null) [ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_11 $$ while (true) [ CD ]
Line_11 $$ while (true) -->Line_20 $$ if (myLexer.getTokenType() == JavaTokenType.STATIC_KEYWORD) [ CD ]
Line_15 $$ if (myLexer.getTokenType() != JavaTokenType.IMPORT_KEYWORD) -->Line_16 $$ return[ CD ]
Line_11 $$ while (true) -->Line_25 $$ if (packageName == null) [ CD ]
Line_34 $$ if (isStaticImport) -->Line_35 $$ lastDot = _packageName.lastIndexOf('.')[ CD ]
Line_35 $$ lastDot = _packageName.lastIndexOf('.')-->Line_32 $$ if (lastDot > 0) [ FD ]
Line_28 $$ if (packageName.endsWith(".*")) -->Line_29 $$ result.consume(packageName.substring(0, packageName.length() - ".*".length()))[ CD ]
Line_28 $$ if (packageName.endsWith(".*")) -->Line_31 $$ int lastDot = packageName.lastIndexOf('.')[ CD ]
Line_11 $$ while (true) -->Line_28 $$ if (packageName.endsWith(".*")) [ CD ]
Line_28 $$ if (packageName.endsWith(".*")) -->Line_32 $$ if (lastDot > 0) [ CD ]
Line_34 $$ if (isStaticImport) -->Line_36 $$ if (lastDot > 0) [ CD ]
Line_34 $$ if (isStaticImport) -->Line_40 $$ result.consume(_packageName)[ CD ]
Line_33 $$ String _packageName = packageName.substring(0, lastDot)-->Line_35 $$ lastDot = _packageName.lastIndexOf('.')[ FD ]
Line_32 $$ if (lastDot > 0) -->Line_34 $$ if (isStaticImport) [ CD ]
Line_24 $$ final String packageName = readPackageName(chars, myLexer)-->Line_25 $$ if (packageName == null) [ FD ]
Line_5 $$ if (myLexer.getTokenType() == JavaTokenType.PACKAGE_KEYWORD) -->Line_6 $$ advanceLexer(myLexer)[ CD ]
Line_20 $$ if (myLexer.getTokenType() == JavaTokenType.STATIC_KEYWORD) -->Line_21 $$ isStaticImport = true[ CD ]
Line_11 $$ while (true) -->Line_18 $$ advanceLexer(myLexer)[ CD ]
Line_11 $$ while (true) -->Line_24 $$ final String packageName = readPackageName(chars, myLexer)[ CD ]
Line_31 $$ int lastDot = packageName.lastIndexOf('.')-->Line_33 $$ String _packageName = packageName.substring(0, lastDot)[ FD ]
Line_19 $$ boolean isStaticImport = false-->Line_21 $$ isStaticImport = true[ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_4 $$ JavaSourceRootDetectionUtil.skipWhiteSpaceAndComments(myLexer)[ CD ]
Line_32 $$ if (lastDot > 0) -->Line_33 $$ String _packageName = packageName.substring(0, lastDot)[ CD ]
Line_33 $$ String _packageName = packageName.substring(0, lastDot)-->Line_40 $$ result.consume(_packageName)[ FD ]
Line_25 $$ if (packageName == null) -->Line_26 $$ return[ CD ]
Line_31 $$ int lastDot = packageName.lastIndexOf('.')-->Line_37 $$ result.consume(_packageName.substring(0, lastDot))[ FD ]
Line_31 $$ int lastDot = packageName.lastIndexOf('.')-->Line_36 $$ if (lastDot > 0) [ FD ]
Line_24 $$ final String packageName = readPackageName(chars, myLexer)-->Line_33 $$ String _packageName = packageName.substring(0, lastDot)[ FD ]
Line_11 $$ while (true) -->Line_15 $$ if (myLexer.getTokenType() != JavaTokenType.IMPORT_KEYWORD) [ CD ]
Line_36 $$ if (lastDot > 0) -->Line_37 $$ result.consume(_packageName.substring(0, lastDot))[ CD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_3 $$ myLexer.start(chars)[ FD ]
Line_5 $$ if (myLexer.getTokenType() == JavaTokenType.PACKAGE_KEYWORD) -->Line_7 $$ if (readPackageName(chars, myLexer) == null) [ CD ]
Line_24 $$ final String packageName = readPackageName(chars, myLexer)-->Line_29 $$ result.consume(packageName.substring(0, packageName.length() - ".*".length()))[ FD ]
Line_11 $$ while (true) -->Line_19 $$ boolean isStaticImport = false[ CD ]
Line_24 $$ final String packageName = readPackageName(chars, myLexer)-->Line_28 $$ if (packageName.endsWith(".*")) [ FD ]
Line_20 $$ if (myLexer.getTokenType() == JavaTokenType.STATIC_KEYWORD) -->Line_22 $$ advanceLexer(myLexer)[ CD ]
Line_31 $$ int lastDot = packageName.lastIndexOf('.')-->Line_32 $$ if (lastDot > 0) [ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_24 $$ final String packageName = readPackageName(chars, myLexer)[ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_5 $$ if (myLexer.getTokenType() == JavaTokenType.PACKAGE_KEYWORD) [ CD ]
Line_7 $$ if (readPackageName(chars, myLexer) == null) -->Line_8 $$ return[ CD ]
Line_24 $$ final String packageName = readPackageName(chars, myLexer)-->Line_31 $$ int lastDot = packageName.lastIndexOf('.')[ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_29 $$ result.consume(packageName.substring(0, packageName.length() - ".*".length()))[ FD ]
Line_35 $$ lastDot = _packageName.lastIndexOf('.')-->Line_36 $$ if (lastDot > 0) [ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_40 $$ result.consume(_packageName)[ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_37 $$ result.consume(_packageName.substring(0, lastDot))[ FD ]
Line_35 $$ lastDot = _packageName.lastIndexOf('.')-->Line_33 $$ String _packageName = packageName.substring(0, lastDot)[ FD ]
Line_33 $$ String _packageName = packageName.substring(0, lastDot)-->Line_37 $$ result.consume(_packageName.substring(0, lastDot))[ FD ]
Line_35 $$ lastDot = _packageName.lastIndexOf('.')-->Line_37 $$ result.consume(_packageName.substring(0, lastDot))[ FD ]
Line_2 $$ protected void scanSourceFileForImportedPackages(final CharSequence chars, final Consumer<String> result) -->Line_3 $$ myLexer.start(chars)[ CD ]
