Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_9 $$ int patLen = oldPattern.length()[ CD ]
Line_3 $$ if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) -->Line_4 $$ return inString[ CD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_8 $$ int index = inString.indexOf(oldPattern)[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_9 $$ int patLen = oldPattern.length()[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_7 $$ int pos = 0[ CD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_3 $$ if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) [ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_16 $$ sb.append(inString.substring(pos))[ CD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_6 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(newPattern)[ FD ]
Line_8 $$ int index = inString.indexOf(oldPattern)-->Line_10 $$ while (index >= 0) [ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_16 $$ sb.append(inString.substring(pos))[ FD ]
Line_7 $$ int pos = 0-->Line_16 $$ sb.append(inString.substring(pos))[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_12 $$ sb.append(newPattern)[ FD ]
Line_7 $$ int pos = 0-->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_14 $$ index = inString.indexOf(oldPattern, pos)-->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_13 $$ pos = index + patLen-->Line_14 $$ index = inString.indexOf(oldPattern, pos)[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_8 $$ int index = inString.indexOf(oldPattern)[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(inString.substring(pos))[ FD ]
Line_8 $$ int index = inString.indexOf(oldPattern)-->Line_13 $$ pos = index + patLen[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ return sb.toString()[ FD ]
Line_14 $$ index = inString.indexOf(oldPattern, pos)-->Line_13 $$ pos = index + patLen[ FD ]
Line_10 $$ while (index >= 0) -->Line_14 $$ index = inString.indexOf(oldPattern, pos)[ CD ]
Line_10 $$ while (index >= 0) -->Line_12 $$ sb.append(newPattern)[ CD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_14 $$ index = inString.indexOf(oldPattern, pos)[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_3 $$ if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) [ CD ]
Line_8 $$ int index = inString.indexOf(oldPattern)-->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_9 $$ int patLen = oldPattern.length()-->Line_13 $$ pos = index + patLen[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_17 $$ return sb.toString()[ CD ]
Line_10 $$ while (index >= 0) -->Line_11 $$ sb.append(inString.substring(pos, index))[ CD ]
Line_10 $$ while (index >= 0) -->Line_13 $$ pos = index + patLen[ CD ]
Line_7 $$ int pos = 0-->Line_13 $$ pos = index + patLen[ FD ]
Line_14 $$ index = inString.indexOf(oldPattern, pos)-->Line_10 $$ while (index >= 0) [ FD ]
Line_8 $$ int index = inString.indexOf(oldPattern)-->Line_14 $$ index = inString.indexOf(oldPattern, pos)[ FD ]
Line_13 $$ pos = index + patLen-->Line_16 $$ sb.append(inString.substring(pos))[ FD ]
Line_7 $$ int pos = 0-->Line_14 $$ index = inString.indexOf(oldPattern, pos)[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_13 $$ pos = index + patLen-->Line_11 $$ sb.append(inString.substring(pos, index))[ FD ]
Line_2 $$ public static String replace(String inString, String oldPattern, String newPattern) -->Line_10 $$ while (index >= 0) [ CD ]
