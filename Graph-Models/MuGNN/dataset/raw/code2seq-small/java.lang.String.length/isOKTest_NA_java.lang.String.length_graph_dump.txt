Line_4 $$ String result = ""-->Line_15 $$ result = result.substring(0, result.length() - 1)[ FD ]
Line_5 $$ final String[] strings = ArrayUtil.toStringArray((Collection<String>) list.values())-->Line_6 $$ Arrays.sort(strings, new Comparator<String>() [ FD ]
Line_3 $$ MultiMap<PsiElement, String> list = isOKImpl(varName, allOccurences)-->Line_14 $$ if (!list.isEmpty()) [ FD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_5 $$ final String[] strings = ArrayUtil.toStringArray((Collection<String>) list.values())[ CD ]
Line_14 $$ if (!list.isEmpty()) -->Line_15 $$ result = result.substring(0, result.length() - 1)[ CD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_3 $$ MultiMap<PsiElement, String> list = isOKImpl(varName, allOccurences)[ FD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_6 $$ Arrays.sort(strings, new Comparator<String>() [ CD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_4 $$ String result = ""[ CD ]
Line_3 $$ MultiMap<PsiElement, String> list = isOKImpl(varName, allOccurences)-->Line_5 $$ final String[] strings = ArrayUtil.toStringArray((Collection<String>) list.values())[ FD ]
Line_6 $$ Arrays.sort(strings, new Comparator<String>() -->Line_8 $$ return o1.compareTo(o2)[ FD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_17 $$ if (result.isEmpty()) [ CD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_14 $$ if (!list.isEmpty()) [ CD ]
Line_4 $$ String result = ""-->Line_17 $$ if (result.isEmpty()) [ FD ]
Line_6 $$ Arrays.sort(strings, new Comparator<String>() -->Line_8 $$ return o1.compareTo(o2)[ CD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_3 $$ MultiMap<PsiElement, String> list = isOKImpl(varName, allOccurences)[ CD ]
Line_2 $$ public String isOKTest(String varName, boolean allOccurences) -->Line_20 $$ return result[ CD ]
