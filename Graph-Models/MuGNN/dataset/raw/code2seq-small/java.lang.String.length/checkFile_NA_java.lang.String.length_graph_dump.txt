Line_6 $$ MavenDomProjectModel projectModel = model.getRootElement()-->Line_9 $$ MavenDomParent parent = projectModel.getMavenParent()[ FD ]
Line_2 $$ public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ if (file instanceof XmlFile && (file.isPhysical() || ApplicationManager.getApplication().isUnitTestMode())) [ FD ]
Line_12 $$ XmlTag xmlTag = projectModel.getGroupId().getXmlTag()-->Line_16 $$ if (xmlTag.isValid() && FileModificationService.getInstance().preparePsiElementForWrite(xmlTag)) [ FD ]
Line_6 $$ MavenDomProjectModel projectModel = model.getRootElement()-->Line_7 $$ String groupId = projectModel.getGroupId().getStringValue()[ FD ]
Line_5 $$ if (model != null) -->Line_8 $$ if (groupId != null && groupId.length() > 0) [ CD ]
Line_16 $$ if (xmlTag.isValid() && FileModificationService.getInstance().preparePsiElementForWrite(xmlTag)) -->Line_17 $$ xmlTag.delete()[ CD ]
Line_4 $$ DomFileElement<MavenDomProjectModel> model = DomManager.getDomManager(file.getProject()).getFileElement((XmlFile) file, MavenDomProjectModel.class)-->Line_6 $$ MavenDomProjectModel projectModel = model.getRootElement()[ FD ]
Line_8 $$ if (groupId != null && groupId.length() > 0) -->Line_11 $$ if (groupId.equals(parentGroupId)) [ CD ]
Line_3 $$ if (file instanceof XmlFile && (file.isPhysical() || ApplicationManager.getApplication().isUnitTestMode())) -->Line_5 $$ if (model != null) [ CD ]
Line_13 $$ LocalQuickFix fix = new LocalQuickFixBase("Remove unnecessary <groupId>") -->Line_16 $$ if (xmlTag.isValid() && FileModificationService.getInstance().preparePsiElementForWrite(xmlTag)) [ CD ]
Line_11 $$ if (groupId.equals(parentGroupId)) -->Line_12 $$ XmlTag xmlTag = projectModel.getGroupId().getXmlTag()[ CD ]
Line_13 $$ LocalQuickFix fix = new LocalQuickFixBase("Remove unnecessary <groupId>") -->Line_15 $$ PsiElement xmlTag = descriptor.getPsiElement()[ FD ]
Line_2 $$ public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_26 $$ return null[ CD ]
Line_2 $$ public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_3 $$ if (file instanceof XmlFile && (file.isPhysical() || ApplicationManager.getApplication().isUnitTestMode())) [ CD ]
Line_13 $$ LocalQuickFix fix = new LocalQuickFixBase("Remove unnecessary <groupId>") -->Line_21 $$ return new ProblemDescriptor[] [ FD ]
Line_8 $$ if (groupId != null && groupId.length() > 0) -->Line_10 $$ String parentGroupId = parent.getGroupId().getStringValue()[ CD ]
Line_5 $$ if (model != null) -->Line_6 $$ MavenDomProjectModel projectModel = model.getRootElement()[ CD ]
Line_15 $$ PsiElement xmlTag = descriptor.getPsiElement()-->Line_21 $$ return new ProblemDescriptor[] [ FD ]
Line_2 $$ public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_4 $$ DomFileElement<MavenDomProjectModel> model = DomManager.getDomManager(file.getProject()).getFileElement((XmlFile) file, MavenDomProjectModel.class)[ FD ]
Line_12 $$ XmlTag xmlTag = projectModel.getGroupId().getXmlTag()-->Line_21 $$ return new ProblemDescriptor[] [ FD ]
Line_13 $$ LocalQuickFix fix = new LocalQuickFixBase("Remove unnecessary <groupId>") -->Line_15 $$ PsiElement xmlTag = descriptor.getPsiElement()[ CD ]
Line_15 $$ PsiElement xmlTag = descriptor.getPsiElement()-->Line_16 $$ if (xmlTag.isValid() && FileModificationService.getInstance().preparePsiElementForWrite(xmlTag)) [ FD ]
Line_9 $$ MavenDomParent parent = projectModel.getMavenParent()-->Line_10 $$ String parentGroupId = parent.getGroupId().getStringValue()[ FD ]
Line_11 $$ if (groupId.equals(parentGroupId)) -->Line_13 $$ LocalQuickFix fix = new LocalQuickFixBase("Remove unnecessary <groupId>") [ CD ]
Line_4 $$ DomFileElement<MavenDomProjectModel> model = DomManager.getDomManager(file.getProject()).getFileElement((XmlFile) file, MavenDomProjectModel.class)-->Line_5 $$ if (model != null) [ FD ]
Line_2 $$ public ProblemDescriptor[] checkFile(@NotNull PsiFile file, @NotNull InspectionManager manager, boolean isOnTheFly) -->Line_21 $$ return new ProblemDescriptor[] [ FD ]
Line_10 $$ String parentGroupId = parent.getGroupId().getStringValue()-->Line_11 $$ if (groupId.equals(parentGroupId)) [ FD ]
Line_15 $$ PsiElement xmlTag = descriptor.getPsiElement()-->Line_17 $$ xmlTag.delete()[ FD ]
Line_12 $$ XmlTag xmlTag = projectModel.getGroupId().getXmlTag()-->Line_17 $$ xmlTag.delete()[ FD ]
Line_7 $$ String groupId = projectModel.getGroupId().getStringValue()-->Line_11 $$ if (groupId.equals(parentGroupId)) [ FD ]
Line_5 $$ if (model != null) -->Line_7 $$ String groupId = projectModel.getGroupId().getStringValue()[ CD ]
Line_6 $$ MavenDomProjectModel projectModel = model.getRootElement()-->Line_12 $$ XmlTag xmlTag = projectModel.getGroupId().getXmlTag()[ FD ]
Line_7 $$ String groupId = projectModel.getGroupId().getStringValue()-->Line_8 $$ if (groupId != null && groupId.length() > 0) [ FD ]
Line_11 $$ if (groupId.equals(parentGroupId)) -->Line_21 $$ return new ProblemDescriptor[] [ CD ]
Line_3 $$ if (file instanceof XmlFile && (file.isPhysical() || ApplicationManager.getApplication().isUnitTestMode())) -->Line_4 $$ DomFileElement<MavenDomProjectModel> model = DomManager.getDomManager(file.getProject()).getFileElement((XmlFile) file, MavenDomProjectModel.class)[ CD ]
Line_8 $$ if (groupId != null && groupId.length() > 0) -->Line_9 $$ MavenDomParent parent = projectModel.getMavenParent()[ CD ]
