Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_7 $$ if (t.kind != expectedKind) [ CD ]
Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_3 $$ Token t = nextToken()[ CD ]
Line_3 $$ Token t = nextToken()-->Line_4 $$ if (t == null) [ FD ]
Line_7 $$ if (t.kind != expectedKind) -->Line_8 $$ raiseInternalException(t.startPos, SpelMessage.NOT_EXPECTED_TOKEN, expectedKind.toString().toLowerCase(), t.getKind().toString().toLowerCase())[ CD ]
Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_8 $$ raiseInternalException(t.startPos, SpelMessage.NOT_EXPECTED_TOKEN, expectedKind.toString().toLowerCase(), t.getKind().toString().toLowerCase())[ FD ]
Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_10 $$ return t[ CD ]
Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_4 $$ if (t == null) [ CD ]
Line_2 $$ private Token eatToken(TokenKind expectedKind) -->Line_7 $$ if (t.kind != expectedKind) [ FD ]
Line_4 $$ if (t == null) -->Line_5 $$ raiseInternalException(this.expressionString.length(), SpelMessage.OOD)[ CD ]
Line_3 $$ Token t = nextToken()-->Line_8 $$ raiseInternalException(t.startPos, SpelMessage.NOT_EXPECTED_TOKEN, expectedKind.toString().toLowerCase(), t.getKind().toString().toLowerCase())[ FD ]
