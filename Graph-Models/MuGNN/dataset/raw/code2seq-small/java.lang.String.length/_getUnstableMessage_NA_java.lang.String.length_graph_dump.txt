Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_49 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))[ CD ]
Line_7 $$ for (int i = 0; i < suitesJSONArray.length(); i++) -->Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) [ CD ]
Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")-->Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_31 $$ sb.append(testPackageName)[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_47 $$ sb.append(".")[ CD ]
Line_22 $$ String runBuildHREF = runBuildURL-->Line_26 $$ sb.append(runBuildHREF)[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_26 $$ sb.append(runBuildHREF)[ CD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_61 $$ if (description.length() > x) [ CD ]
Line_8 $$ JSONObject suiteJSONObject = suitesJSONArray.getJSONObject(i)-->Line_9 $$ JSONArray casesJSONArray = suiteJSONObject.getJSONArray("cases")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_48 $$ sb.append(testMethodName)[ FD ]
Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")-->Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")[ FD ]
Line_50 $$ String jobVariant = JenkinsResultsParserUtil.getJobVariant(runBuildURLJSONObject)-->Line_57 $$ if (jobVariant.contains("functional")) [ FD ]
Line_28 $$ String testClassName = caseJSONObject.getString("className")-->Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) [ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_3 $$ int failureCount = 0[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_45 $$ sb.append("\\\">")[ CD ]
Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)-->Line_36 $$ String testMethodName = caseJSONObject.getString("name")[ FD ]
Line_37 $$ String testMethodNameURL = testMethodName-->Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")[ FD ]
Line_16 $$ if (failureCount == 3) -->Line_17 $$ failureCount++[ CD ]
Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")-->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")-->Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_32 $$ sb.append("/")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_58 $$ sb.append(" - ")[ FD ]
Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")-->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_69 $$ sb.append("/console\\\">Console Output</a>")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_45 $$ sb.append("\\\">")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_34 $$ sb.append(testSimpleClassName)[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_21 $$ sb.append("<li><a href=\\\"")[ FD ]
Line_22 $$ String runBuildHREF = runBuildURL-->Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_29 $$ int x = testClassName.lastIndexOf(".")[ CD ]
Line_63 $$ description = description.replace("\"", "\\\"")-->Line_64 $$ sb.append(description)[ FD ]
Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")-->Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")[ FD ]
Line_30 $$ String testPackageName = testClassName.substring(0, x)-->Line_41 $$ if (testPackageName.equals("junit.framework")) [ FD ]
Line_16 $$ if (failureCount == 3) -->Line_19 $$ return failureCount[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_16 $$ if (failureCount == 3) [ CD ]
Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")-->Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_21 $$ sb.append("<li><a href=\\\"")[ CD ]
Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")-->Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")[ FD ]
Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")-->Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")[ FD ]
Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")-->Line_26 $$ sb.append(runBuildHREF)[ FD ]
Line_3 $$ int failureCount = 0-->Line_16 $$ if (failureCount == 3) [ FD ]
Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")-->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_68 $$ sb.append(runBuildURL)[ FD ]
Line_3 $$ int failureCount = 0-->Line_72 $$ failureCount++[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_46 $$ sb.append(testSimpleClassName)[ FD ]
Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")-->Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_56 $$ sb.append("</a>")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_26 $$ sb.append(runBuildHREF)[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_41 $$ if (testPackageName.equals("junit.framework")) [ CD ]
Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")-->Line_26 $$ sb.append(runBuildHREF)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_9 $$ JSONArray casesJSONArray = suiteJSONObject.getJSONArray("cases")-->Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)[ FD ]
Line_28 $$ String testClassName = caseJSONObject.getString("className")-->Line_30 $$ String testPackageName = testClassName.substring(0, x)[ FD ]
Line_9 $$ JSONArray casesJSONArray = suiteJSONObject.getJSONArray("cases")-->Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) [ FD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_68 $$ sb.append(runBuildURL)[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_56 $$ sb.append("</a>")[ CD ]
Line_28 $$ String testClassName = caseJSONObject.getString("className")-->Line_33 $$ String testSimpleClassName = testClassName.substring(x + 1)[ FD ]
Line_41 $$ if (testPackageName.equals("junit.framework")) -->Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_44 $$ sb.append(testMethodNameURL)[ CD ]
Line_7 $$ for (int i = 0; i < suitesJSONArray.length(); i++) -->Line_9 $$ JSONArray casesJSONArray = suiteJSONObject.getJSONArray("cases")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_37 $$ String testMethodNameURL = testMethodName[ CD ]
Line_5 $$ JSONObject testReportJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "testReport/api/json"))-->Line_6 $$ JSONArray suitesJSONArray = testReportJSONObject.getJSONArray("suites")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_32 $$ sb.append("/")[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_76 $$ return failureCount[ CD ]
Line_63 $$ description = description.replace("\"", "\\\"")-->Line_61 $$ if (description.length() > x) [ FD ]
Line_12 $$ String status = caseJSONObject.getString("status")-->Line_13 $$ if (status.equals("FIXED") || status.equals("PASSED") || status.equals("SKIPPED")) [ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")[ CD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_67 $$ sb.append("<a href=\\\"")[ CD ]
Line_62 $$ description = description.substring(x)-->Line_61 $$ if (description.length() > x) [ FD ]
Line_3 $$ int failureCount = 0-->Line_17 $$ failureCount++[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_65 $$ sb.append(" - ")[ FD ]
Line_50 $$ String jobVariant = JenkinsResultsParserUtil.getJobVariant(runBuildURLJSONObject)-->Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) [ FD ]
Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")-->Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")[ FD ]
Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")-->Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")[ FD ]
Line_59 $$ String description = runBuildURLJSONObject.getString("description")-->Line_62 $$ description = description.substring(x)[ FD ]
Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")-->Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")[ FD ]
Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")-->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) [ CD ]
Line_29 $$ int x = testClassName.lastIndexOf(".")-->Line_30 $$ String testPackageName = testClassName.substring(0, x)[ FD ]
Line_29 $$ int x = testClassName.lastIndexOf(".")-->Line_61 $$ if (description.length() > x) [ FD ]
Line_29 $$ int x = testClassName.lastIndexOf(".")-->Line_62 $$ description = description.substring(x)[ FD ]
Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")-->Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")[ FD ]
Line_4 $$ for (String runBuildURL : runBuildURLs) -->Line_68 $$ sb.append(runBuildURL)[ FD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_58 $$ sb.append(" - ")[ CD ]
Line_37 $$ String testMethodNameURL = testMethodName-->Line_44 $$ sb.append(testMethodNameURL)[ FD ]
Line_62 $$ description = description.substring(x)-->Line_64 $$ sb.append(description)[ FD ]
Line_61 $$ if (description.length() > x) -->Line_62 $$ description = description.substring(x)[ CD ]
Line_33 $$ String testSimpleClassName = testClassName.substring(x + 1)-->Line_46 $$ sb.append(testSimpleClassName)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_31 $$ sb.append(testPackageName)[ FD ]
Line_49 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))-->Line_50 $$ String jobVariant = JenkinsResultsParserUtil.getJobVariant(runBuildURLJSONObject)[ FD ]
Line_49 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))-->Line_53 $$ sb.append(JenkinsResultsParserUtil.getAxisVariable(runBuildURLJSONObject))[ FD ]
Line_62 $$ description = description.substring(x)-->Line_63 $$ description = description.replace("\"", "\\\"")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_71 $$ sb.append("</li>")[ FD ]
Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)-->Line_28 $$ String testClassName = caseJSONObject.getString("className")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_35 $$ sb.append("/")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")[ CD ]
Line_28 $$ String testClassName = caseJSONObject.getString("className")-->Line_29 $$ int x = testClassName.lastIndexOf(".")[ FD ]
Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) -->Line_54 $$ sb.append("]")[ CD ]
Line_22 $$ String runBuildHREF = runBuildURL-->Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")[ FD ]
Line_33 $$ String testSimpleClassName = testClassName.substring(x + 1)-->Line_34 $$ sb.append(testSimpleClassName)[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_27 $$ sb.append("/testReport/")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_36 $$ String testMethodName = caseJSONObject.getString("name")[ CD ]
Line_29 $$ int x = testClassName.lastIndexOf(".")-->Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_22 $$ String runBuildHREF = runBuildURL[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_47 $$ sb.append(".")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_71 $$ sb.append("</li>")[ CD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22[ CD ]
Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")-->Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")[ FD ]
Line_59 $$ String description = runBuildURLJSONObject.getString("description")-->Line_64 $$ sb.append(description)[ FD ]
Line_36 $$ String testMethodName = caseJSONObject.getString("name")-->Line_48 $$ sb.append(testMethodName)[ FD ]
Line_37 $$ String testMethodNameURL = testMethodName-->Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")[ FD ]
Line_49 $$ JSONObject runBuildURLJSONObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(runBuildURL + "api/json"))-->Line_59 $$ String description = runBuildURLJSONObject.getString("description")[ FD ]
Line_22 $$ String runBuildHREF = runBuildURL-->Line_23 $$ runBuildHREF = runBuildHREF.replace("[", "_")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)[ CD ]
Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")-->Line_26 $$ sb.append(runBuildHREF)[ FD ]
Line_16 $$ if (failureCount == 3) -->Line_18 $$ sb.append("<li>...</li>")[ CD ]
Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22-->Line_30 $$ String testPackageName = testClassName.substring(0, x)[ FD ]
Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22-->Line_62 $$ description = description.substring(x)[ FD ]
Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")-->Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")[ FD ]
Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) -->Line_52 $$ sb.append("[")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_30 $$ String testPackageName = testClassName.substring(0, x)[ CD ]
Line_37 $$ String testMethodNameURL = testMethodName-->Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")[ FD ]
Line_51 $$ if (jobVariant.contains("functional") && testClassName.contains("EvaluateLogTest")) -->Line_53 $$ sb.append(JenkinsResultsParserUtil.getAxisVariable(runBuildURLJSONObject))[ CD ]
Line_63 $$ description = description.replace("\"", "\\\"")-->Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22[ FD ]
Line_7 $$ for (int i = 0; i < suitesJSONArray.length(); i++) -->Line_8 $$ JSONObject suiteJSONObject = suitesJSONArray.getJSONObject(i)[ FD ]
Line_61 $$ if (description.length() > x) -->Line_64 $$ sb.append(description)[ CD ]
Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")-->Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")[ FD ]
Line_59 $$ String description = runBuildURLJSONObject.getString("description")-->Line_63 $$ description = description.replace("\"", "\\\"")[ FD ]
Line_61 $$ if (description.length() > x) -->Line_63 $$ description = description.replace("\"", "\\\"")[ CD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_59 $$ String description = runBuildURLJSONObject.getString("description")[ CD ]
Line_63 $$ description = description.replace("\"", "\\\"")-->Line_62 $$ description = description.substring(x)[ FD ]
Line_57 $$ if (jobVariant.contains("functional")) -->Line_69 $$ sb.append("/console\\\">Console Output</a>")[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_35 $$ sb.append("/")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_50 $$ String jobVariant = JenkinsResultsParserUtil.getJobVariant(runBuildURLJSONObject)[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_27 $$ sb.append("/testReport/")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_33 $$ String testSimpleClassName = testClassName.substring(x + 1)[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_57 $$ if (jobVariant.contains("functional")) [ CD ]
Line_61 $$ if (description.length() > x) -->Line_65 $$ sb.append(" - ")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_12 $$ String status = caseJSONObject.getString("status")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_28 $$ String testClassName = caseJSONObject.getString("className")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")[ CD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_72 $$ failureCount++[ CD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_67 $$ sb.append("<a href=\\\"")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_13 $$ if (status.equals("FIXED") || status.equals("PASSED") || status.equals("SKIPPED")) [ CD ]
Line_6 $$ JSONArray suitesJSONArray = testReportJSONObject.getJSONArray("suites")-->Line_8 $$ JSONObject suiteJSONObject = suitesJSONArray.getJSONObject(i)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_34 $$ sb.append(testSimpleClassName)[ FD ]
Line_30 $$ String testPackageName = testClassName.substring(0, x)-->Line_31 $$ sb.append(testPackageName)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_64 $$ sb.append(description)[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_54 $$ sb.append("]")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_46 $$ sb.append(testSimpleClassName)[ CD ]
Line_59 $$ String description = runBuildURLJSONObject.getString("description")-->Line_61 $$ if (description.length() > x) [ FD ]
Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22-->Line_61 $$ if (description.length() > x) [ FD ]
Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")-->Line_39 $$ testMethodNameURL = testMethodNameURL.replace("]", "_")[ FD ]
Line_37 $$ String testMethodNameURL = testMethodName-->Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")[ FD ]
Line_6 $$ JSONArray suitesJSONArray = testReportJSONObject.getJSONArray("suites")-->Line_7 $$ for (int i = 0; i < suitesJSONArray.length(); i++) [ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_48 $$ sb.append(testMethodName)[ CD ]
Line_62 $$ description = description.substring(x)-->Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22[ FD ]
Line_7 $$ for (int i = 0; i < suitesJSONArray.length(); i++) -->Line_8 $$ JSONObject suiteJSONObject = suitesJSONArray.getJSONObject(i)[ CD ]
Line_11 $$ JSONObject caseJSONObject = casesJSONArray.getJSONObject(j)-->Line_12 $$ String status = caseJSONObject.getString("status")[ FD ]
Line_10 $$ for (int j = 0; j < casesJSONArray.length(); j++) -->Line_38 $$ testMethodNameURL = testMethodNameURL.replace("[", "_")[ CD ]
Line_40 $$ testMethodNameURL = testMethodNameURL.replace("#", "_")-->Line_42 $$ testMethodNameURL = testMethodNameURL.replace(".", "_")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_52 $$ sb.append("[")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_18 $$ sb.append("<li>...</li>")[ FD ]
Line_59 $$ String description = runBuildURLJSONObject.getString("description")-->Line_60 $$ x = description.indexOf(">Jenkins Report<") + 22[ FD ]
Line_25 $$ runBuildHREF = runBuildHREF.replace("#", "_")-->Line_24 $$ runBuildHREF = runBuildHREF.replace("]", "_")[ FD ]
Line_2 $$ private static int _getUnstableMessage(StringBuilder sb, List<String> runBuildURLs) throws Exception -->Line_53 $$ sb.append(JenkinsResultsParserUtil.getAxisVariable(runBuildURLJSONObject))[ FD ]
