Line_5 $$ for (int ip = 0; ip < s.length(); ip++) -->Line_6 $$ char c = s.charAt(ip)[ CD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_5 $$ for (int ip = 0; ip < s.length(); ip++) [ CD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_6 $$ char c = s.charAt(ip)[ FD ]
Line_7 $$ if (c != ' ' && c != '\r' && c != '\n' && c != '\t') -->Line_8 $$ buf[p++] = c[ CD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_3 $$ char[] buf = new char[s.length()][ CD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_4 $$ int p = 0[ CD ]
Line_6 $$ char c = s.charAt(ip)-->Line_8 $$ buf[p++] = c[ FD ]
Line_4 $$ int p = 0-->Line_11 $$ return decode(buf, 0, p, inverseCharMap)[ FD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_3 $$ char[] buf = new char[s.length()][ FD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_5 $$ for (int ip = 0; ip < s.length(); ip++) [ FD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_11 $$ return decode(buf, 0, p, inverseCharMap)[ CD ]
Line_4 $$ int p = 0-->Line_8 $$ buf[p++] = c[ FD ]
Line_3 $$ char[] buf = new char[s.length()]-->Line_11 $$ return decode(buf, 0, p, inverseCharMap)[ FD ]
Line_5 $$ for (int ip = 0; ip < s.length(); ip++) -->Line_6 $$ char c = s.charAt(ip)[ FD ]
Line_5 $$ for (int ip = 0; ip < s.length(); ip++) -->Line_7 $$ if (c != ' ' && c != '\r' && c != '\n' && c != '\t') [ CD ]
Line_2 $$ public static byte[] decodeLines(String s, byte[] inverseCharMap) -->Line_11 $$ return decode(buf, 0, p, inverseCharMap)[ FD ]
