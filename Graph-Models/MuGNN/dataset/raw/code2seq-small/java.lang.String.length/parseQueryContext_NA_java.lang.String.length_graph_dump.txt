Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_37 $$ return queryContextList[ CD ]
Line_25 $$ for (Integer neighbourPrecision : queryContext.getNeighbours()) -->Line_26 $$ if (neighbourPrecision < geoHash.length()) [ FD ]
Line_22 $$ if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) -->Line_23 $$ GeoHashUtils.addNeighbors(geoHash, locations)[ CD ]
Line_26 $$ if (neighbourPrecision < geoHash.length()) -->Line_29 $$ GeoHashUtils.addNeighbors(truncatedGeoHash, locations)[ CD ]
Line_33 $$ for (String location : locations) -->Line_34 $$ queryContextList.add(new QueryContext(location, queryContext.getBoost(), location.length() < this.precision))[ FD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_3 $$ List<GeoQueryContext> queryContexts = new ArrayList()[ CD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_9 $$ queryContexts.add(GeoQueryContext.parse(parser))[ FD ]
Line_15 $$ if (queryContext.getPrecision() != -1) -->Line_16 $$ minPrecision = Math.min(minPrecision, queryContext.getPrecision())[ CD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_4 $$ Token token = parser.nextToken()[ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_25 $$ for (Integer neighbourPrecision : queryContext.getNeighbours()) [ FD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_8 $$ while (parser.nextToken() != Token.END_ARRAY) [ FD ]
Line_19 $$ final Collection<String> locations = new HashSet()-->Line_21 $$ locations.add(geoHash)[ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_22 $$ if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) [ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_34 $$ queryContextList.add(new QueryContext(location, queryContext.getBoost(), location.length() < this.precision))[ FD ]
Line_3 $$ List<GeoQueryContext> queryContexts = new ArrayList()-->Line_6 $$ queryContexts.add(GeoQueryContext.parse(parser))[ FD ]
Line_5 $$ if (token == Token.START_OBJECT || token == Token.VALUE_STRING) -->Line_7 $$ if (token == Token.START_ARRAY) [ CD ]
Line_19 $$ final Collection<String> locations = new HashSet()-->Line_23 $$ GeoHashUtils.addNeighbors(geoHash, locations)[ FD ]
Line_5 $$ if (token == Token.START_OBJECT || token == Token.VALUE_STRING) -->Line_6 $$ queryContexts.add(GeoQueryContext.parse(parser))[ CD ]
Line_18 $$ GeoPoint point = queryContext.getGeoPoint()-->Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)[ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_15 $$ if (queryContext.getPrecision() != -1) [ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_16 $$ minPrecision = Math.min(minPrecision, queryContext.getPrecision())[ FD ]
Line_14 $$ int minPrecision = this.precision-->Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)[ FD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_5 $$ if (token == Token.START_OBJECT || token == Token.VALUE_STRING) [ CD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_18 $$ GeoPoint point = queryContext.getGeoPoint()[ FD ]
Line_26 $$ if (neighbourPrecision < geoHash.length()) -->Line_28 $$ locations.add(truncatedGeoHash)[ CD ]
Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)-->Line_21 $$ locations.add(geoHash)[ FD ]
Line_8 $$ while (parser.nextToken() != Token.END_ARRAY) -->Line_9 $$ queryContexts.add(GeoQueryContext.parse(parser))[ CD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_6 $$ queryContexts.add(GeoQueryContext.parse(parser))[ FD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_4 $$ Token token = parser.nextToken()[ CD ]
Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)-->Line_23 $$ GeoHashUtils.addNeighbors(geoHash, locations)[ FD ]
Line_26 $$ if (neighbourPrecision < geoHash.length()) -->Line_27 $$ String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)[ CD ]
Line_14 $$ int minPrecision = this.precision-->Line_16 $$ minPrecision = Math.min(minPrecision, queryContext.getPrecision())[ FD ]
Line_27 $$ String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)-->Line_28 $$ locations.add(truncatedGeoHash)[ FD ]
Line_2 $$ public List<QueryContext> parseQueryContext(XContentParser parser) throws IOException, ElasticsearchParseException -->Line_12 $$ List<QueryContext> queryContextList = new ArrayList()[ CD ]
Line_16 $$ minPrecision = Math.min(minPrecision, queryContext.getPrecision())-->Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)[ FD ]
Line_25 $$ for (Integer neighbourPrecision : queryContext.getNeighbours()) -->Line_27 $$ String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)[ FD ]
Line_7 $$ if (token == Token.START_ARRAY) -->Line_8 $$ while (parser.nextToken() != Token.END_ARRAY) [ CD ]
Line_19 $$ final Collection<String> locations = new HashSet()-->Line_29 $$ GeoHashUtils.addNeighbors(truncatedGeoHash, locations)[ FD ]
Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)-->Line_22 $$ if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) [ FD ]
Line_12 $$ List<QueryContext> queryContextList = new ArrayList()-->Line_34 $$ queryContextList.add(new QueryContext(location, queryContext.getBoost(), location.length() < this.precision))[ FD ]
Line_22 $$ if (queryContext.getNeighbours().isEmpty() && geoHash.length() == this.precision) -->Line_24 $$ if (queryContext.getNeighbours().isEmpty() == false) [ CD ]
Line_19 $$ final Collection<String> locations = new HashSet()-->Line_28 $$ locations.add(truncatedGeoHash)[ FD ]
Line_4 $$ Token token = parser.nextToken()-->Line_7 $$ if (token == Token.START_ARRAY) [ FD ]
Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)-->Line_26 $$ if (neighbourPrecision < geoHash.length()) [ FD ]
Line_20 $$ String geoHash = GeoHashUtils.stringEncode(point.getLon(), point.getLat(), minPrecision)-->Line_27 $$ String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)[ FD ]
Line_27 $$ String truncatedGeoHash = geoHash.substring(0, neighbourPrecision)-->Line_29 $$ GeoHashUtils.addNeighbors(truncatedGeoHash, locations)[ FD ]
Line_3 $$ List<GeoQueryContext> queryContexts = new ArrayList()-->Line_9 $$ queryContexts.add(GeoQueryContext.parse(parser))[ FD ]
Line_13 $$ for (GeoQueryContext queryContext : queryContexts) -->Line_24 $$ if (queryContext.getNeighbours().isEmpty() == false) [ FD ]
