Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_6 $$ repository = repository.substring(serverRoot.length())[ FD ]
Line_3 $$ repository = repository.replace(File.separatorChar, '/')-->Line_5 $$ if (repository.startsWith(serverRoot)) [ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_4 $$ serverRoot = serverRoot.replace(File.separatorChar, '/')[ CD ]
Line_4 $$ serverRoot = serverRoot.replace(File.separatorChar, '/')-->Line_6 $$ repository = repository.substring(serverRoot.length())[ FD ]
Line_6 $$ repository = repository.substring(serverRoot.length())-->Line_7 $$ repository = StringUtil.trimStart(repository, "/")[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_3 $$ repository = repository.replace(File.separatorChar, '/')[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_9 $$ repository = StringUtil.trimStart(repository, "./")[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_10 $$ return repository[ CD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_4 $$ serverRoot = serverRoot.replace(File.separatorChar, '/')[ FD ]
Line_3 $$ repository = repository.replace(File.separatorChar, '/')-->Line_7 $$ repository = StringUtil.trimStart(repository, "/")[ FD ]
Line_5 $$ if (repository.startsWith(serverRoot)) -->Line_7 $$ repository = StringUtil.trimStart(repository, "/")[ CD ]
Line_3 $$ repository = repository.replace(File.separatorChar, '/')-->Line_9 $$ repository = StringUtil.trimStart(repository, "./")[ FD ]
Line_4 $$ serverRoot = serverRoot.replace(File.separatorChar, '/')-->Line_5 $$ if (repository.startsWith(serverRoot)) [ FD ]
Line_3 $$ repository = repository.replace(File.separatorChar, '/')-->Line_6 $$ repository = repository.substring(serverRoot.length())[ FD ]
Line_5 $$ if (repository.startsWith(serverRoot)) -->Line_6 $$ repository = repository.substring(serverRoot.length())[ CD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_9 $$ repository = StringUtil.trimStart(repository, "./")[ CD ]
Line_7 $$ repository = StringUtil.trimStart(repository, "/")-->Line_9 $$ repository = StringUtil.trimStart(repository, "./")[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_5 $$ if (repository.startsWith(serverRoot)) [ FD ]
Line_6 $$ repository = repository.substring(serverRoot.length())-->Line_9 $$ repository = StringUtil.trimStart(repository, "./")[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_5 $$ if (repository.startsWith(serverRoot)) [ CD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_7 $$ repository = StringUtil.trimStart(repository, "/")[ FD ]
Line_2 $$ public static String getRelativeRepositoryPath(String repository, String serverRoot) -->Line_3 $$ repository = repository.replace(File.separatorChar, '/')[ CD ]
