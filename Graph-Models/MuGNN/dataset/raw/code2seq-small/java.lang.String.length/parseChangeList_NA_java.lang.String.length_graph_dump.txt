Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_9 $$ String committerName = s.line()[ FD ]
Line_13 $$ String commentBody = s.boundedToken('', true)-->Line_16 $$ fullComment = commentBody[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_24 $$ final GitRevisionNumber parentRevision = parents.length > 0 ? resolveReference(project, root, parents[0]) : null[ FD ]
Line_9 $$ String committerName = s.line()-->Line_10 $$ committerName = GitUtil.adjustAuthorName(authorName, committerName)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_28 $$ final GitRevisionNumber parentRevision = resolveReference(project, root, parent)[ FD ]
Line_22 $$ GitRevisionNumber thisRevision = new GitRevisionNumber(revisionNumber, commitDate)-->Line_33 $$ parseChanges(project, root, thisRevision, parentRevision, diff, changes, null)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_5 $$ final String revisionNumber = s.line()[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_23 $$ if (skipDiffsForMerge || (parents.length <= 1)) [ CD ]
Line_3 $$ ArrayList<Change> changes = new ArrayList<Change>()-->Line_25 $$ parseChanges(project, root, thisRevision, local ? null : parentRevision, s, changes, null)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_7 $$ final String[] parents = parentsLine.length() == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : parentsLine.split(" ")[ CD ]
Line_11 $$ String commentSubject = s.boundedToken('', true)-->Line_15 $$ if (commentSubject.length() == 0) [ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_6 $$ final String parentsLine = s.line()[ CD ]
Line_17 $$ if (commentBody.length() == 0) -->Line_20 $$ fullComment = commentSubject + "\n" + commentBody[ CD ]
Line_15 $$ if (commentSubject.length() == 0) -->Line_16 $$ fullComment = commentBody[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_40 $$ return new GitCommittedChangeList(changeListName, fullComment, committerName, thisRevision, commitDate, changes, assertNotNull(GitVcs.getInstance(project)), revertable)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_9 $$ String committerName = s.line()[ CD ]
Line_16 $$ fullComment = commentBody-->Line_20 $$ fullComment = commentSubject + "\n" + commentBody[ FD ]
Line_18 $$ fullComment = commentSubject-->Line_20 $$ fullComment = commentSubject + "\n" + commentBody[ FD ]
Line_8 $$ String authorName = s.line()-->Line_10 $$ committerName = GitUtil.adjustAuthorName(authorName, committerName)[ FD ]
Line_23 $$ if (skipDiffsForMerge || (parents.length <= 1)) -->Line_24 $$ final GitRevisionNumber parentRevision = parents.length > 0 ? resolveReference(project, root, parents[0]) : null[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_8 $$ String authorName = s.line()[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_13 $$ String commentBody = s.boundedToken('', true)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_39 $$ String changeListName = String.format("%s(%s)", commentSubject, revisionNumber)[ CD ]
Line_11 $$ String commentSubject = s.boundedToken('', true)-->Line_18 $$ fullComment = commentSubject[ FD ]
Line_11 $$ String commentSubject = s.boundedToken('', true)-->Line_39 $$ String changeListName = String.format("%s(%s)", commentSubject, revisionNumber)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_12 $$ s.nextLine()[ FD ]
Line_27 $$ for (String parent : parents) -->Line_28 $$ final GitRevisionNumber parentRevision = resolveReference(project, root, parent)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_22 $$ GitRevisionNumber thisRevision = new GitRevisionNumber(revisionNumber, commitDate)[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_10 $$ committerName = GitUtil.adjustAuthorName(authorName, committerName)[ CD ]
Line_13 $$ String commentBody = s.boundedToken('', true)-->Line_17 $$ if (commentBody.length() == 0) [ FD ]
Line_6 $$ final String parentsLine = s.line()-->Line_7 $$ final String[] parents = parentsLine.length() == 0 ? ArrayUtil.EMPTY_STRING_ARRAY : parentsLine.split(" ")[ FD ]
Line_24 $$ final GitRevisionNumber parentRevision = parents.length > 0 ? resolveReference(project, root, parents[0]) : null-->Line_33 $$ parseChanges(project, root, thisRevision, parentRevision, diff, changes, null)[ FD ]
Line_29 $$ GitSimpleHandler diffHandler = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_32 $$ String diff = diffHandler.run()[ FD ]
Line_3 $$ ArrayList<Change> changes = new ArrayList<Change>()-->Line_33 $$ parseChanges(project, root, thisRevision, parentRevision, diff, changes, null)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_3 $$ ArrayList<Change> changes = new ArrayList<Change>()[ CD ]
Line_5 $$ final String revisionNumber = s.line()-->Line_39 $$ String changeListName = String.format("%s(%s)", commentSubject, revisionNumber)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_11 $$ String commentSubject = s.boundedToken('', true)[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_23 $$ if (skipDiffsForMerge || (parents.length <= 1)) [ FD ]
Line_29 $$ GitSimpleHandler diffHandler = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_31 $$ diffHandler.addParameters("--name-status", "-M", parentRevision.getRev(), thisRevision.getRev())[ FD ]
Line_24 $$ final GitRevisionNumber parentRevision = parents.length > 0 ? resolveReference(project, root, parents[0]) : null-->Line_31 $$ diffHandler.addParameters("--name-status", "-M", parentRevision.getRev(), thisRevision.getRev())[ FD ]
Line_23 $$ if (skipDiffsForMerge || (parents.length <= 1)) -->Line_25 $$ parseChanges(project, root, thisRevision, local ? null : parentRevision, s, changes, null)[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_4 $$ final Date commitDate = GitUtil.parseTimestampWithNFEReport(s.line(), handler, s.getAllText())[ CD ]
Line_13 $$ String commentBody = s.boundedToken('', true)-->Line_20 $$ fullComment = commentSubject + "\n" + commentBody[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_13 $$ String commentBody = s.boundedToken('', true)[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_15 $$ if (commentSubject.length() == 0) [ CD ]
Line_32 $$ String diff = diffHandler.run()-->Line_33 $$ parseChanges(project, root, thisRevision, parentRevision, diff, changes, null)[ FD ]
Line_29 $$ GitSimpleHandler diffHandler = new GitSimpleHandler(project, root, GitCommand.DIFF)-->Line_30 $$ diffHandler.setSilent(true)[ FD ]
Line_22 $$ GitRevisionNumber thisRevision = new GitRevisionNumber(revisionNumber, commitDate)-->Line_25 $$ parseChanges(project, root, thisRevision, local ? null : parentRevision, s, changes, null)[ FD ]
Line_3 $$ ArrayList<Change> changes = new ArrayList<Change>()-->Line_34 $$ if (changes.size() > 0) [ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_40 $$ return new GitCommittedChangeList(changeListName, fullComment, committerName, thisRevision, commitDate, changes, assertNotNull(GitVcs.getInstance(project)), revertable)[ CD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_14 $$ String fullComment[ CD ]
Line_15 $$ if (commentSubject.length() == 0) -->Line_17 $$ if (commentBody.length() == 0) [ CD ]
Line_16 $$ fullComment = commentBody-->Line_18 $$ fullComment = commentSubject[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_5 $$ final String revisionNumber = s.line()[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_4 $$ final Date commitDate = GitUtil.parseTimestampWithNFEReport(s.line(), handler, s.getAllText())[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_8 $$ String authorName = s.line()[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_25 $$ parseChanges(project, root, thisRevision, local ? null : parentRevision, s, changes, null)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_6 $$ final String parentsLine = s.line()[ FD ]
Line_14 $$ String fullComment-->Line_16 $$ fullComment = commentBody[ FD ]
Line_14 $$ String fullComment-->Line_20 $$ fullComment = commentSubject + "\n" + commentBody[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_33 $$ parseChanges(project, root, thisRevision, parentRevision, diff, changes, null)[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_12 $$ s.nextLine()[ CD ]
Line_17 $$ if (commentBody.length() == 0) -->Line_18 $$ fullComment = commentSubject[ CD ]
Line_14 $$ String fullComment-->Line_18 $$ fullComment = commentSubject[ FD ]
Line_2 $$ public static GitCommittedChangeList parseChangeList(Project project, VirtualFile root, StringScanner s, boolean skipDiffsForMerge, GitHandler handler, boolean local, boolean revertable) throws VcsException -->Line_11 $$ String commentSubject = s.boundedToken('', true)[ FD ]
Line_22 $$ GitRevisionNumber thisRevision = new GitRevisionNumber(revisionNumber, commitDate)-->Line_31 $$ diffHandler.addParameters("--name-status", "-M", parentRevision.getRev(), thisRevision.getRev())[ FD ]
