Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_3 $$ if (checkSchemaNamespace(name, context)) [ CD ]
Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_5 $$ if (STD_TYPES.contains(localNameByQualifiedName) && (name.length() == localNameByQualifiedName.length() || UNDECLARED_STD_TYPES.contains(localNameByQualifiedName)))[ FD ]
Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_8 $$ return findTypeDescriptor(name, context)[ FD ]
Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_8 $$ return findTypeDescriptor(name, context)[ CD ]
Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_3 $$ if (checkSchemaNamespace(name, context)) [ FD ]
Line_3 $$ if (checkSchemaNamespace(name, context)) -->Line_4 $$ final String localNameByQualifiedName = XmlUtil.findLocalNameByQualifiedName(name)[ CD ]
Line_2 $$ public TypeDescriptor getTypeDescriptor(final String name, XmlTag context) -->Line_4 $$ final String localNameByQualifiedName = XmlUtil.findLocalNameByQualifiedName(name)[ FD ]
Line_4 $$ final String localNameByQualifiedName = XmlUtil.findLocalNameByQualifiedName(name)-->Line_5 $$ if (STD_TYPES.contains(localNameByQualifiedName) && (name.length() == localNameByQualifiedName.length() || UNDECLARED_STD_TYPES.contains(localNameByQualifiedName)))[ FD ]
Line_5 $$ if (STD_TYPES.contains(localNameByQualifiedName) && (name.length() == localNameByQualifiedName.length() || UNDECLARED_STD_TYPES.contains(localNameByQualifiedName)))-->Line_6 $$ return new StdTypeDescriptor(localNameByQualifiedName)[ CD ]
Line_3 $$ if (checkSchemaNamespace(name, context)) -->Line_5 $$ if (STD_TYPES.contains(localNameByQualifiedName) && (name.length() == localNameByQualifiedName.length() || UNDECLARED_STD_TYPES.contains(localNameByQualifiedName)))[ CD ]
