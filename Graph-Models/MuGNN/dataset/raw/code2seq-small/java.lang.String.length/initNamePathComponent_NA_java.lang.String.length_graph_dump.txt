Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_6 $$ final String initialProjectName = projectName != null ? projectName : ProjectWizardUtil.findNonExistingFileName(baseDir, "untitled", "")[ CD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_10 $$ return component[ CD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_5 $$ final String projectName = context.getProjectName()[ FD ]
Line_3 $$ NamePathComponent component = new NamePathComponent(IdeBundle.message("label.project.name"), IdeBundle.message("label.project.files.location"), IdeBundle.message("title.select.project.file.directory", IdeBundle.message("project.new.wizard.project.identification")), IdeBundle.message("description.select.project.file.directory", StringUtil.capitalize(IdeBundle.message("project.new.wizard.project.identification"))), true, false)-->Line_7 $$ component.setPath(projectName == null ? (baseDir + File.separator + initialProjectName) : baseDir)[ FD ]
Line_6 $$ final String initialProjectName = projectName != null ? projectName : ProjectWizardUtil.findNonExistingFileName(baseDir, "untitled", "")-->Line_8 $$ component.setNameValue(initialProjectName)[ FD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_9 $$ component.getNameComponent().select(0, initialProjectName.length())[ CD ]
Line_3 $$ NamePathComponent component = new NamePathComponent(IdeBundle.message("label.project.name"), IdeBundle.message("label.project.files.location"), IdeBundle.message("title.select.project.file.directory", IdeBundle.message("project.new.wizard.project.identification")), IdeBundle.message("description.select.project.file.directory", StringUtil.capitalize(IdeBundle.message("project.new.wizard.project.identification"))), true, false)-->Line_9 $$ component.getNameComponent().select(0, initialProjectName.length())[ FD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_3 $$ NamePathComponent component = new NamePathComponent(IdeBundle.message("label.project.name"), IdeBundle.message("label.project.files.location"), IdeBundle.message("title.select.project.file.directory", IdeBundle.message("project.new.wizard.project.identification")), IdeBundle.message("description.select.project.file.directory", StringUtil.capitalize(IdeBundle.message("project.new.wizard.project.identification"))), true, false)[ CD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_5 $$ final String projectName = context.getProjectName()[ CD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_4 $$ final String baseDir = context.getProjectFileDirectory()[ FD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_4 $$ final String baseDir = context.getProjectFileDirectory()[ CD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_7 $$ component.setPath(projectName == null ? (baseDir + File.separator + initialProjectName) : baseDir)[ CD ]
Line_6 $$ final String initialProjectName = projectName != null ? projectName : ProjectWizardUtil.findNonExistingFileName(baseDir, "untitled", "")-->Line_9 $$ component.getNameComponent().select(0, initialProjectName.length())[ FD ]
Line_3 $$ NamePathComponent component = new NamePathComponent(IdeBundle.message("label.project.name"), IdeBundle.message("label.project.files.location"), IdeBundle.message("title.select.project.file.directory", IdeBundle.message("project.new.wizard.project.identification")), IdeBundle.message("description.select.project.file.directory", StringUtil.capitalize(IdeBundle.message("project.new.wizard.project.identification"))), true, false)-->Line_8 $$ component.setNameValue(initialProjectName)[ FD ]
Line_2 $$ public static NamePathComponent initNamePathComponent(WizardContext context) -->Line_8 $$ component.setNameValue(initialProjectName)[ CD ]
Line_4 $$ final String baseDir = context.getProjectFileDirectory()-->Line_6 $$ final String initialProjectName = projectName != null ? projectName : ProjectWizardUtil.findNonExistingFileName(baseDir, "untitled", "")[ FD ]
