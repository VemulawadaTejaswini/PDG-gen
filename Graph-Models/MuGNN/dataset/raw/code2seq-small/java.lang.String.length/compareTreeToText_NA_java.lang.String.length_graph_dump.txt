Line_16 $$ if (composite instanceof LazyParseableElement && !((LazyParseableElement) composite).isParsed()) -->Line_17 $$ matchText(composite)[ CD ]
Line_16 $$ if (composite instanceof LazyParseableElement && !((LazyParseableElement) composite).isParsed()) -->Line_19 $$ super.visitComposite(composite)[ CD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_9 $$ curOffset[0] = leaf.textMatches(text, curOffset[0])[ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_19 $$ super.visitComposite(composite)[ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_15 $$ myIndicator.checkCanceled()[ CD ]
Line_10 $$ if (curOffset[0] < 0) -->Line_11 $$ stopWalking()[ CD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_6 $$ matchText(leaf)[ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_16 $$ if (composite instanceof LazyParseableElement && !((LazyParseableElement) composite).isParsed()) [ CD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_17 $$ matchText(composite)[ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_9 $$ curOffset[0] = leaf.textMatches(text, curOffset[0])[ CD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_23 $$ return curOffset[0] == text.length()[ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_6 $$ matchText(leaf)[ CD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_23 $$ return curOffset[0] == text.length()[ CD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_9 $$ curOffset[0] = leaf.textMatches(text, curOffset[0])[ FD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() [ FD ]
Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() -->Line_10 $$ if (curOffset[0] < 0) [ CD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_4 $$ root.acceptTree(new RecursiveTreeElementWalkingVisitor() [ CD ]
Line_2 $$ private boolean compareTreeToText(@NotNull TreeElement root, @NotNull final String text) -->Line_3 $$ final int[] curOffset = [ CD ]
