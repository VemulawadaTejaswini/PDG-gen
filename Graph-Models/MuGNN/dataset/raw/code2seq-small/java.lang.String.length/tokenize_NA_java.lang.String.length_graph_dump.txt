Line_19 $$ if (!text.contains("\\")) -->Line_22 $$ processTextWithEscapeSequences(element, text, consumer)[ CD ]
Line_8 $$ String text = literalExpression.getInnerText()-->Line_22 $$ processTextWithEscapeSequences(element, text, consumer)[ FD ]
Line_19 $$ if (!text.contains("\\")) -->Line_20 $$ consumer.consumeToken(element, PlainTextSplitter.getInstance())[ CD ]
Line_8 $$ String text = literalExpression.getInnerText()-->Line_9 $$ if (StringUtil.isEmpty(text) || text.length() <= 2) [ FD ]
Line_15 $$ final PsiModifierListOwner listOwner = PsiTreeUtil.getParentOfType(element, PsiModifierListOwner.class)-->Line_16 $$ if (listOwner != null && AnnotationUtil.isAnnotated(listOwner, Collections.singleton(AnnotationUtil.NON_NLS), false, false)) [ FD ]
Line_4 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element-->Line_8 $$ String text = literalExpression.getInnerText()[ FD ]
Line_13 $$ if (InjectedLanguageUtil.hasInjections(literalExpression))-->Line_14 $$ return[ CD ]
Line_8 $$ String text = literalExpression.getInnerText()-->Line_19 $$ if (!text.contains("\\")) [ FD ]
Line_16 $$ if (listOwner != null && AnnotationUtil.isAnnotated(listOwner, Collections.singleton(AnnotationUtil.NON_NLS), false, false)) -->Line_17 $$ return[ CD ]
Line_4 $$ PsiLiteralExpressionImpl literalExpression = (PsiLiteralExpressionImpl) element-->Line_13 $$ if (InjectedLanguageUtil.hasInjections(literalExpression))[ FD ]
