Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_16 $$ fragment.setVisibilityChecker(JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE)[ CD ]
Line_38 $$ final RuntimeTypeEvaluator worker = new RuntimeTypeEvaluator(null, expression, debuggerContext, ProgressManager.getInstance().getProgressIndicator()) -->Line_43 $$ semaphore.up()[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_32 $$ final DebuggerContextImpl debuggerContext = DebuggerManagerEx.getInstanceEx(project).getContext()[ FD ]
Line_38 $$ final RuntimeTypeEvaluator worker = new RuntimeTypeEvaluator(null, expression, debuggerContext, ProgressManager.getInstance().getProgressIndicator()) -->Line_46 $$ debuggerSession.getProcess().getManagerThread().invoke(worker)[ FD ]
Line_34 $$ if (debuggerSession != null) -->Line_52 $$ return nameRef.get()[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)[ FD ]
Line_25 $$ if (parameters.getInvocationCount() <= 1 && JavaCompletionUtil.mayHaveSideEffects(expression)) -->Line_26 $$ final CompletionService service = CompletionService.getCompletionService()[ CD ]
Line_3 $$ final JavaCodeFragmentFactory factory = JavaCodeFragmentFactory.getInstance(project)-->Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ FD ]
Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)-->Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() [ FD ]
Line_35 $$ final Semaphore semaphore = new Semaphore()-->Line_43 $$ semaphore.up()[ FD ]
Line_47 $$ for (int i = 0; i < 50; i++) -->Line_49 $$ if (semaphore.waitFor(20))[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_57 $$ return fragment[ CD ]
Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)-->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ FD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_27 $$ if (parameters.getInvocationCount() < 2) [ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_6 $$ if (CodeFragmentKind.EXPRESSION == item.getKind()) [ CD ]
Line_25 $$ if (parameters.getInvocationCount() <= 1 && JavaCompletionUtil.mayHaveSideEffects(expression)) -->Line_30 $$ return null[ CD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_25 $$ if (parameters.getInvocationCount() <= 1 && JavaCompletionUtil.mayHaveSideEffects(expression)) [ CD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_32 $$ final DebuggerContextImpl debuggerContext = DebuggerManagerEx.getInstanceEx(project).getContext()[ CD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_54 $$ return null[ CD ]
Line_27 $$ if (parameters.getInvocationCount() < 2) -->Line_28 $$ service.setAdvertisementText("Invoke completion once more to see runtime type variants")[ CD ]
Line_5 $$ final JavaCodeFragment fragment-->Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() [ FD ]
Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)-->Line_14 $$ fragment.addImportsFromString(item.getImports())[ FD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_25 $$ if (parameters.getInvocationCount() <= 1 && JavaCompletionUtil.mayHaveSideEffects(expression)) [ FD ]
Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)-->Line_16 $$ fragment.setVisibilityChecker(JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE)[ FD ]
Line_7 $$ final String expressionText = StringUtil.endsWithChar(text, ';') ? text.substring(0, text.length() - 1) : text-->Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)[ FD ]
Line_38 $$ final RuntimeTypeEvaluator worker = new RuntimeTypeEvaluator(null, expression, debuggerContext, ProgressManager.getInstance().getProgressIndicator()) -->Line_42 $$ nameRef.set(type)[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_3 $$ final JavaCodeFragmentFactory factory = JavaCodeFragmentFactory.getInstance(project)[ FD ]
Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)-->Line_14 $$ fragment.addImportsFromString(item.getImports())[ FD ]
Line_34 $$ if (debuggerSession != null) -->Line_38 $$ final RuntimeTypeEvaluator worker = new RuntimeTypeEvaluator(null, expression, debuggerContext, ProgressManager.getInstance().getProgressIndicator()) [ CD ]
Line_22 $$ if (!RuntimeTypeEvaluator.isSubtypeable(expression)) -->Line_23 $$ return null[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_13 $$ if (item.getImports().length() > 0) [ FD ]
Line_47 $$ for (int i = 0; i < 50; i++) -->Line_48 $$ ProgressManager.checkCanceled()[ CD ]
Line_13 $$ if (item.getImports().length() > 0) -->Line_14 $$ fragment.addImportsFromString(item.getImports())[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_4 $$ final String text = item.getText()[ FD ]
Line_3 $$ final JavaCodeFragmentFactory factory = JavaCodeFragmentFactory.getInstance(project)-->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_3 $$ final JavaCodeFragmentFactory factory = JavaCodeFragmentFactory.getInstance(project)[ CD ]
Line_34 $$ if (debuggerSession != null) -->Line_37 $$ final AtomicReference<PsiType> nameRef = new AtomicReference<PsiType>()[ CD ]
Line_5 $$ final JavaCodeFragment fragment-->Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)[ FD ]
Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)-->Line_16 $$ fragment.setVisibilityChecker(JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE)[ FD ]
Line_4 $$ final String text = item.getText()-->Line_7 $$ final String expressionText = StringUtil.endsWithChar(text, ';') ? text.substring(0, text.length() - 1) : text[ FD ]
Line_5 $$ final JavaCodeFragment fragment-->Line_14 $$ fragment.addImportsFromString(item.getImports())[ FD ]
Line_26 $$ final CompletionService service = CompletionService.getCompletionService()-->Line_28 $$ service.setAdvertisementText("Invoke completion once more to see runtime type variants")[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_6 $$ if (CodeFragmentKind.EXPRESSION == item.getKind()) [ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_13 $$ if (item.getImports().length() > 0) [ CD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_33 $$ DebuggerSession debuggerSession = debuggerContext.getDebuggerSession()[ CD ]
Line_34 $$ if (debuggerSession != null) -->Line_35 $$ final Semaphore semaphore = new Semaphore()[ CD ]
Line_33 $$ DebuggerSession debuggerSession = debuggerContext.getDebuggerSession()-->Line_34 $$ if (debuggerSession != null) [ FD ]
Line_35 $$ final Semaphore semaphore = new Semaphore()-->Line_36 $$ semaphore.down()[ FD ]
Line_37 $$ final AtomicReference<PsiType> nameRef = new AtomicReference<PsiType>()-->Line_42 $$ nameRef.set(type)[ FD ]
Line_6 $$ if (CodeFragmentKind.EXPRESSION == item.getKind()) -->Line_7 $$ final String expressionText = StringUtil.endsWithChar(text, ';') ? text.substring(0, text.length() - 1) : text[ CD ]
Line_33 $$ DebuggerSession debuggerSession = debuggerContext.getDebuggerSession()-->Line_46 $$ debuggerSession.getProcess().getManagerThread().invoke(worker)[ FD ]
Line_5 $$ final JavaCodeFragment fragment-->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ FD ]
Line_35 $$ final Semaphore semaphore = new Semaphore()-->Line_49 $$ if (semaphore.waitFor(20))[ FD ]
Line_34 $$ if (debuggerSession != null) -->Line_47 $$ for (int i = 0; i < 50; i++) [ CD ]
Line_6 $$ if (CodeFragmentKind.EXPRESSION == item.getKind()) -->Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)[ CD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_14 $$ fragment.addImportsFromString(item.getImports())[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_4 $$ final String text = item.getText()[ CD ]
Line_34 $$ if (debuggerSession != null) -->Line_36 $$ semaphore.down()[ CD ]
Line_8 $$ fragment = factory.createExpressionCodeFragment(expressionText, context, null, true)-->Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() [ FD ]
Line_38 $$ final RuntimeTypeEvaluator worker = new RuntimeTypeEvaluator(null, expression, debuggerContext, ProgressManager.getInstance().getProgressIndicator()) -->Line_42 $$ nameRef.set(type)[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() [ CD ]
Line_37 $$ final AtomicReference<PsiType> nameRef = new AtomicReference<PsiType>()-->Line_52 $$ return nameRef.get()[ FD ]
Line_2 $$ public JavaCodeFragment createCodeFragment(TextWithImports item, PsiElement context, final Project project) -->Line_5 $$ final JavaCodeFragment fragment[ CD ]
Line_25 $$ if (parameters.getInvocationCount() <= 1 && JavaCompletionUtil.mayHaveSideEffects(expression)) -->Line_27 $$ if (parameters.getInvocationCount() < 2) [ CD ]
Line_4 $$ final String text = item.getText()-->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ FD ]
Line_5 $$ final JavaCodeFragment fragment-->Line_16 $$ fragment.setVisibilityChecker(JavaCodeFragment.VisibilityChecker.EVERYTHING_VISIBLE)[ FD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_22 $$ if (!RuntimeTypeEvaluator.isSubtypeable(expression)) [ CD ]
Line_32 $$ final DebuggerContextImpl debuggerContext = DebuggerManagerEx.getInstanceEx(project).getContext()-->Line_33 $$ DebuggerSession debuggerSession = debuggerContext.getDebuggerSession()[ FD ]
Line_34 $$ if (debuggerSession != null) -->Line_46 $$ debuggerSession.getProcess().getManagerThread().invoke(worker)[ CD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_22 $$ if (!RuntimeTypeEvaluator.isSubtypeable(expression)) [ FD ]
Line_19 $$ fragment.putCopyableUserData(JavaCompletionUtil.DYNAMIC_TYPE_EVALUATOR, new PairFunction<PsiExpression, CompletionParameters, PsiType>() -->Line_34 $$ if (debuggerSession != null) [ CD ]
Line_6 $$ if (CodeFragmentKind.EXPRESSION == item.getKind()) -->Line_11 $$ fragment = factory.createCodeBlockCodeFragment(text, context, true)[ CD ]
