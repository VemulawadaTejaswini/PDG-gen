Line_3 $$ int max = Math.min(a.length(), b.length())-->Line_4 $$ for (int i = 0; i < max; i++) [ FD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_4 $$ for (int i = 0; i < max; i++) [ CD ]
Line_6 $$ if (c != b.charAt(i)) -->Line_7 $$ return i[ CD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_10 $$ return max[ CD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_3 $$ int max = Math.min(a.length(), b.length())[ FD ]
Line_4 $$ for (int i = 0; i < max; i++) -->Line_6 $$ if (c != b.charAt(i)) [ FD ]
Line_4 $$ for (int i = 0; i < max; i++) -->Line_5 $$ final char c = a.charAt(i)[ CD ]
Line_4 $$ for (int i = 0; i < max; i++) -->Line_6 $$ if (c != b.charAt(i)) [ CD ]
Line_5 $$ final char c = a.charAt(i)-->Line_6 $$ if (c != b.charAt(i)) [ FD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_6 $$ if (c != b.charAt(i)) [ FD ]
Line_4 $$ for (int i = 0; i < max; i++) -->Line_5 $$ final char c = a.charAt(i)[ FD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_5 $$ final char c = a.charAt(i)[ FD ]
Line_2 $$ private static int indexOfFirstDifference(@NotNull String a, @NotNull String b) -->Line_3 $$ int max = Math.min(a.length(), b.length())[ CD ]
