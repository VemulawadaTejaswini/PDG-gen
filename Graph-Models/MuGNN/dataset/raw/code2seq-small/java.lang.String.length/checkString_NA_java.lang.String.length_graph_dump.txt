Line_12 $$ int length = value.length()-->Line_14 $$ for (int i = 0; i < length; ++i) [ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_11 $$ CharsetEncoder asciiEncoder = Charset.forName("US-ASCII").newEncoder()[ CD ]
Line_14 $$ for (int i = 0; i < length; ++i) -->Line_16 $$ if (!asciiEncoder.canEncode(c)) [ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_9 $$ final String charsetString = PythonFileType.getCharsetFromEncodingDeclaration(file)[ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_10 $$ boolean hasNonAscii = false[ CD ]
Line_21 $$ if (hasNonAscii) -->Line_22 $$ if (charsetString == null)[ CD ]
Line_14 $$ for (int i = 0; i < length; ++i) -->Line_15 $$ c = value.charAt(i)[ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_14 $$ for (int i = 0; i < length; ++i) [ CD ]
Line_3 $$ if (LanguageLevel.forElement(node).isPy3K())-->Line_4 $$ return[ CD ]
Line_14 $$ for (int i = 0; i < length; ++i) -->Line_15 $$ c = value.charAt(i)[ CD ]
Line_10 $$ boolean hasNonAscii = false-->Line_17 $$ hasNonAscii = true[ FD ]
Line_15 $$ c = value.charAt(i)-->Line_16 $$ if (!asciiEncoder.canEncode(c)) [ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_3 $$ if (LanguageLevel.forElement(node).isPy3K())[ CD ]
Line_22 $$ if (charsetString == null)-->Line_23 $$ registerProblem(node, "Non-ASCII character " + c + " in file, but no encoding declared", new AddEncodingQuickFix(myDefaultEncoding, myEncodingFormatIndex))[ CD ]
Line_9 $$ final String charsetString = PythonFileType.getCharsetFromEncodingDeclaration(file)-->Line_22 $$ if (charsetString == null)[ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_13 $$ char c = 0[ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_21 $$ if (hasNonAscii) [ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_12 $$ int length = value.length()[ FD ]
Line_7 $$ if (file == null)-->Line_8 $$ return[ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_7 $$ if (file == null)[ CD ]
Line_16 $$ if (!asciiEncoder.canEncode(c)) -->Line_17 $$ hasNonAscii = true[ CD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_15 $$ c = value.charAt(i)[ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_23 $$ registerProblem(node, "Non-ASCII character " + c + " in file, but no encoding declared", new AddEncodingQuickFix(myDefaultEncoding, myEncodingFormatIndex))[ FD ]
Line_13 $$ char c = 0-->Line_16 $$ if (!asciiEncoder.canEncode(c)) [ FD ]
Line_13 $$ char c = 0-->Line_15 $$ c = value.charAt(i)[ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_12 $$ int length = value.length()[ CD ]
Line_11 $$ CharsetEncoder asciiEncoder = Charset.forName("US-ASCII").newEncoder()-->Line_16 $$ if (!asciiEncoder.canEncode(c)) [ FD ]
Line_2 $$ private void checkString(PsiElement node, String value) -->Line_3 $$ if (LanguageLevel.forElement(node).isPy3K())[ FD ]
