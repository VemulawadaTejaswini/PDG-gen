Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_3 $$ StripFilter stripFilter = new StripFilter()[ CD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")[ FD ]
Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_44 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_25 $$ String code = "function()[ CD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_30 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_43 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_32 $$ logRecord = logRecords.get(1)-->Line_39 $$ logRecord = logRecords.get(0)[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_24 $$ Assert.assertEquals(20, charBuffer.position())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_7 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")[ FD ]
Line_36 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_43 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_21 $$ stringWriter = new StringWriter()[ CD ]
Line_34 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_38 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_36 $$ stringWriter = new StringWriter()-->Line_43 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
Line_25 $$ String code = "function()-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_11 $$ Assert.assertEquals("Missing </script>", logRecord.getMessage())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_16 $$ stringWriter = new StringWriter()[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_28 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_23 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ CD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_24 $$ Assert.assertEquals(20, charBuffer.position())[ FD ]
Line_39 $$ logRecord = logRecords.get(0)-->Line_40 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_36 $$ stringWriter = new StringWriter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ CD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_41 $$ logRecord = logRecords.get(1)[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_44 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_32 $$ logRecord = logRecords.get(1)-->Line_40 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_18 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_19 $$ Assert.assertEquals(16, charBuffer.position())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_7 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_14 $$ Assert.assertEquals(7, charBuffer.position())[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_19 $$ Assert.assertEquals(16, charBuffer.position())[ FD ]
Line_36 $$ stringWriter = new StringWriter()-->Line_46 $$ stringWriter = new StringWriter()[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_21 $$ stringWriter = new StringWriter()[ FD ]
Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_32 $$ logRecord = logRecords.get(1)-->Line_33 $$ Assert.assertEquals("[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")[ CD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_46 $$ stringWriter = new StringWriter()[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")[ FD ]
Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_24 $$ Assert.assertEquals(20, charBuffer.position())[ CD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_23 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ CD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_32 $$ logRecord = logRecords.get(1)-->Line_42 $$ Assert.assertEquals("[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_36 $$ stringWriter = new StringWriter()[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_39 $$ logRecord = logRecords.get(0)-->Line_41 $$ logRecord = logRecords.get(1)[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_39 $$ logRecord = logRecords.get(0)-->Line_42 $$ Assert.assertEquals("[ FD ]
Line_41 $$ logRecord = logRecords.get(1)-->Line_42 $$ Assert.assertEquals("[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_39 $$ logRecord = logRecords.get(0)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_9 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_23 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_12 $$ Assert.assertEquals("script>", stringWriter.toString())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_46 $$ stringWriter = new StringWriter()[ FD ]
Line_34 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_41 $$ logRecord = logRecords.get(1)[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_44 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_36 $$ stringWriter = new StringWriter()-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_7 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_19 $$ Assert.assertEquals(16, charBuffer.position())[ CD ]
Line_46 $$ stringWriter = new StringWriter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_23 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_21 $$ stringWriter = new StringWriter()[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_32 $$ logRecord = logRecords.get(1)[ FD ]
Line_32 $$ logRecord = logRecords.get(1)-->Line_41 $$ logRecord = logRecords.get(1)[ FD ]
Line_34 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)-->Line_39 $$ logRecord = logRecords.get(0)[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_41 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_16 $$ stringWriter = new StringWriter()[ CD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_44 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_36 $$ stringWriter = new StringWriter()[ FD ]
Line_25 $$ String code = "function()-->Line_44 $$ Assert.assertEquals(code.length() + 16, charBuffer.position())[ FD ]
Line_46 $$ stringWriter = new StringWriter()-->Line_48 $$ Assert.assertEquals("script>" + minifiedCode + "</script> ", stringWriter.toString())[ FD ]
Line_21 $$ stringWriter = new StringWriter()-->Line_36 $$ stringWriter = new StringWriter()[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_31 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ CD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_46 $$ stringWriter = new StringWriter()[ FD ]
Line_6 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(StripFilter.class.getName(), Level.WARNING)) -->Line_34 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_33 $$ Assert.assertEquals("[ FD ]
Line_3 $$ StripFilter stripFilter = new StripFilter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_38 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_17 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_24 $$ Assert.assertEquals(20, charBuffer.position())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_42 $$ Assert.assertEquals("[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")[ CD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_37 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")[ CD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_45 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script> \t\r\n")[ FD ]
Line_20 $$ charBuffer = CharBuffer.wrap("script> \t\r\n</script>")-->Line_22 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_39 $$ logRecord = logRecords.get(0)[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_32 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_5 $$ StringWriter stringWriter = new StringWriter()[ CD ]
Line_35 $$ charBuffer = CharBuffer.wrap("script>" + code + "</script>")-->Line_50 $$ Assert.assertEquals(code.length() + 20, charBuffer.position())[ FD ]
Line_5 $$ StringWriter stringWriter = new StringWriter()-->Line_18 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ FD ]
Line_25 $$ String code = "function()-->Line_27 $$ String minifiedCode = MinifierUtil.minifyJavaScript("test.js", code)[ FD ]
Line_15 $$ charBuffer = CharBuffer.wrap("script></script>")-->Line_47 $$ stripFilter.processJavaScript("test.js", charBuffer, stringWriter, "script".toCharArray())[ FD ]
Line_2 $$ public void testProcessJavaScript() throws Exception -->Line_18 $$ Assert.assertEquals("script></script>", stringWriter.toString())[ CD ]
Line_4 $$ CharBuffer charBuffer = CharBuffer.wrap("script>abc")-->Line_14 $$ Assert.assertEquals(7, charBuffer.position())[ FD ]
Line_10 $$ LogRecord logRecord = logRecords.get(0)-->Line_40 $$ Assert.assertEquals("(test.js:1): Parse error. unnamed function statement", logRecord.getMessage())[ FD ]
Line_8 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_34 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_16 $$ stringWriter = new StringWriter()-->Line_43 $$ Assert.assertEquals("script>" + minifiedCode + "</script>", stringWriter.toString())[ FD ]
