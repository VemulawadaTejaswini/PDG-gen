Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_4 $$ final String relativePath = VfsUtilCore.getRelativePath(directory.getVirtualFile(), rootDirectory.getVirtualFile(), '/')[ CD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_3 $$ final PsiElement[] children = directory.getChildren()[ FD ]
Line_4 $$ final String relativePath = VfsUtilCore.getRelativePath(directory.getVirtualFile(), rootDirectory.getVirtualFile(), '/')-->Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)[ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)[ CD ]
Line_8 $$ if (child instanceof PsiFile) -->Line_9 $$ files2Move.put((PsiFile) child, newTargetDirectory)[ CD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_6 $$ nestedDirsToMove.put(directory, newTargetDirectory)[ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_3 $$ final PsiElement[] children = directory.getChildren()[ CD ]
Line_8 $$ if (child instanceof PsiFile) -->Line_10 $$ if (child instanceof PsiDirectory) [ CD ]
Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)-->Line_6 $$ nestedDirsToMove.put(directory, newTargetDirectory)[ FD ]
Line_7 $$ for (PsiElement child : children) -->Line_8 $$ if (child instanceof PsiFile) [ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_6 $$ nestedDirsToMove.put(directory, newTargetDirectory)[ CD ]
Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)-->Line_11 $$ collectFiles2Move(files2Move, nestedDirsToMove, (PsiDirectory) child, directory, newTargetDirectory)[ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_4 $$ final String relativePath = VfsUtilCore.getRelativePath(directory.getVirtualFile(), rootDirectory.getVirtualFile(), '/')[ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_9 $$ files2Move.put((PsiFile) child, newTargetDirectory)[ FD ]
Line_10 $$ if (child instanceof PsiDirectory) -->Line_11 $$ collectFiles2Move(files2Move, nestedDirsToMove, (PsiDirectory) child, directory, newTargetDirectory)[ CD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_11 $$ collectFiles2Move(files2Move, nestedDirsToMove, (PsiDirectory) child, directory, newTargetDirectory)[ FD ]
Line_7 $$ for (PsiElement child : children) -->Line_10 $$ if (child instanceof PsiDirectory) [ FD ]
Line_2 $$ private static void collectFiles2Move(Map<PsiFile, TargetDirectoryWrapper> files2Move, Map<PsiDirectory, TargetDirectoryWrapper> nestedDirsToMove, PsiDirectory directory, PsiDirectory rootDirectory, @NotNull TargetDirectoryWrapper targetDirectory) -->Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)[ FD ]
Line_5 $$ final TargetDirectoryWrapper newTargetDirectory = relativePath.length() == 0 ? targetDirectory : targetDirectory.findOrCreateChild(relativePath)-->Line_9 $$ files2Move.put((PsiFile) child, newTargetDirectory)[ FD ]
