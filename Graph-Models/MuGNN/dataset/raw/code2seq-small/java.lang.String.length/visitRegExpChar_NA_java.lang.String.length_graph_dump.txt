Line_4 $$ if (value == null) -->Line_31 $$ if (ch.getType() == RegExpChar.Type.HEX) [ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_3 $$ final Character value = ch.getValue()[ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_7 $$ myHolder.createErrorAnnotation(ch, "Illegal/unsupported escape sequence")[ FD ]
Line_26 $$ if (astNode != null && astNode.getElementType() == RegExpTT.REDUNDANT_ESCAPE) -->Line_27 $$ final Annotation a = myHolder.createWeakWarningAnnotation(ch, "Redundant character escape")[ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_10 $$ myHolder.createErrorAnnotation(ch, "Illegal hexadecimal escape sequence")[ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_16 $$ myHolder.createErrorAnnotation(ch, "Illegal unicode escape sequence")[ FD ]
Line_26 $$ if (astNode != null && astNode.getElementType() == RegExpTT.REDUNDANT_ESCAPE) -->Line_28 $$ registerFix(a, new RemoveRedundantEscapeAction(ch))[ CD ]
Line_27 $$ final Annotation a = myHolder.createWeakWarningAnnotation(ch, "Redundant character escape")-->Line_28 $$ registerFix(a, new RemoveRedundantEscapeAction(ch))[ FD ]
Line_24 $$ if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch, text)) -->Line_26 $$ if (astNode != null && astNode.getElementType() == RegExpTT.REDUNDANT_ESCAPE) [ CD ]
Line_4 $$ if (value == null) -->Line_23 $$ final String text = ch.getUnescapedText()[ CD ]
Line_32 $$ if (text.charAt(text.length() - 1) == '}') -->Line_33 $$ if (!myLanguageHosts.supportsExtendedHexCharacter(ch)) [ CD ]
Line_23 $$ final String text = ch.getUnescapedText()-->Line_32 $$ if (text.charAt(text.length() - 1) == '}') [ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_27 $$ final Annotation a = myHolder.createWeakWarningAnnotation(ch, "Redundant character escape")[ FD ]
Line_31 $$ if (ch.getType() == RegExpChar.Type.HEX) -->Line_32 $$ if (text.charAt(text.length() - 1) == '}') [ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_13 $$ myHolder.createErrorAnnotation(ch, "Illegal octal escape sequence")[ FD ]
Line_33 $$ if (!myLanguageHosts.supportsExtendedHexCharacter(ch)) -->Line_34 $$ myHolder.createErrorAnnotation(ch, "This hex character syntax is not supported")[ CD ]
Line_23 $$ final String text = ch.getUnescapedText()-->Line_24 $$ if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch, text)) [ FD ]
Line_3 $$ final Character value = ch.getValue()-->Line_4 $$ if (value == null) [ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_5 $$ switch(ch.getType()) [ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_23 $$ final String text = ch.getUnescapedText()[ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_31 $$ if (ch.getType() == RegExpChar.Type.HEX) [ FD ]
Line_25 $$ final ASTNode astNode = ch.getNode().getFirstChildNode()-->Line_26 $$ if (astNode != null && astNode.getElementType() == RegExpTT.REDUNDANT_ESCAPE) [ FD ]
Line_4 $$ if (value == null) -->Line_24 $$ if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch, text)) [ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_24 $$ if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch, text)) [ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_34 $$ myHolder.createErrorAnnotation(ch, "This hex character syntax is not supported")[ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_33 $$ if (!myLanguageHosts.supportsExtendedHexCharacter(ch)) [ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_4 $$ if (value == null) [ CD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_3 $$ final Character value = ch.getValue()[ FD ]
Line_2 $$ public void visitRegExpChar(final RegExpChar ch) -->Line_25 $$ final ASTNode astNode = ch.getNode().getFirstChildNode()[ FD ]
Line_24 $$ if (text.startsWith("\\") && myLanguageHosts.isRedundantEscape(ch, text)) -->Line_25 $$ final ASTNode astNode = ch.getNode().getFirstChildNode()[ CD ]
