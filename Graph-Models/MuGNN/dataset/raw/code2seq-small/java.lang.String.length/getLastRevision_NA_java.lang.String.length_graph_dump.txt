Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)[ CD ]
Line_11 $$ GitLogParser parser = new GitLogParser(project, GitLogParser.NameStatus.STATUS, HASH, COMMIT_TIME, PARENTS)-->Line_13 $$ h.addParameters("-n1", parser.getPretty(), "--name-status", t.getFullName())[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_9 $$ filePath = getLastCommitName(project, filePath)[ FD ]
Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())-->Line_6 $$ if (t == null) [ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_21 $$ if (record == null) [ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_12 $$ h.setSilent(true)[ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_3 $$ VirtualFile root = GitUtil.getGitRoot(filePath)[ FD ]
Line_11 $$ GitLogParser parser = new GitLogParser(project, GitLogParser.NameStatus.STATUS, HASH, COMMIT_TIME, PARENTS)-->Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_16 $$ String result = h.run()[ CD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_13 $$ h.addParameters("-n1", parser.getPretty(), "--name-status", t.getFullName())[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_13 $$ h.addParameters("-n1", parser.getPretty(), "--name-status", t.getFullName())[ CD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_14 $$ h.endOptions()[ FD ]
Line_16 $$ String result = h.run()-->Line_17 $$ if (result.length() == 0) [ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_9 $$ filePath = getLastCommitName(project, filePath)[ CD ]
Line_9 $$ filePath = getLastCommitName(project, filePath)-->Line_15 $$ h.addRelativePaths(filePath)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_14 $$ h.endOptions()[ CD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_26 $$ record.setUsedHandler(h)[ FD ]
Line_3 $$ VirtualFile root = GitUtil.getGitRoot(filePath)-->Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_26 $$ record.setUsedHandler(h)[ CD ]
Line_4 $$ GitBranch c = GitBranchUtil.getCurrentBranch(project, root)-->Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_11 $$ GitLogParser parser = new GitLogParser(project, GitLogParser.NameStatus.STATUS, HASH, COMMIT_TIME, PARENTS)[ CD ]
Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)-->Line_27 $$ return new ItemLatestState(new GitRevisionNumber(record.getHash(), record.getDate()), exists, false)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)[ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_24 $$ final List<Change> changes = record.parseChanges(project, root)[ CD ]
Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)-->Line_24 $$ final List<Change> changes = record.parseChanges(project, root)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_25 $$ boolean exists = changes.isEmpty() || !FileStatus.DELETED.equals(changes.get(0).getFileStatus())[ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_4 $$ GitBranch c = GitBranchUtil.getCurrentBranch(project, root)[ CD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_15 $$ h.addRelativePaths(filePath)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_7 $$ return new ItemLatestState(getCurrentRevision(project, filePath, null), true, false)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_4 $$ GitBranch c = GitBranchUtil.getCurrentBranch(project, root)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_3 $$ VirtualFile root = GitUtil.getGitRoot(filePath)[ CD ]
Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())-->Line_13 $$ h.addParameters("-n1", parser.getPretty(), "--name-status", t.getFullName())[ FD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_16 $$ String result = h.run()[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())[ CD ]
Line_21 $$ if (record == null) -->Line_22 $$ return null[ CD ]
Line_17 $$ if (result.length() == 0) -->Line_18 $$ return null[ CD ]
Line_3 $$ VirtualFile root = GitUtil.getGitRoot(filePath)-->Line_4 $$ GitBranch c = GitBranchUtil.getCurrentBranch(project, root)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_27 $$ return new ItemLatestState(new GitRevisionNumber(record.getHash(), record.getDate()), exists, false)[ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_24 $$ final List<Change> changes = record.parseChanges(project, root)[ FD ]
Line_16 $$ String result = h.run()-->Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_6 $$ if (t == null) [ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_5 $$ GitBranch t = c == null ? null : GitBranchUtil.tracked(project, root, c.getName())[ FD ]
Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)-->Line_21 $$ if (record == null) [ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_15 $$ h.addRelativePaths(filePath)[ CD ]
Line_6 $$ if (t == null) -->Line_7 $$ return new ItemLatestState(getCurrentRevision(project, filePath, null), true, false)[ CD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_17 $$ if (result.length() == 0) [ CD ]
Line_3 $$ VirtualFile root = GitUtil.getGitRoot(filePath)-->Line_24 $$ final List<Change> changes = record.parseChanges(project, root)[ FD ]
Line_2 $$ public static ItemLatestState getLastRevision(final Project project, FilePath filePath) throws VcsException -->Line_15 $$ h.addRelativePaths(filePath)[ FD ]
Line_10 $$ GitSimpleHandler h = new GitSimpleHandler(project, root, GitCommand.LOG)-->Line_12 $$ h.setSilent(true)[ FD ]
Line_24 $$ final List<Change> changes = record.parseChanges(project, root)-->Line_25 $$ boolean exists = changes.isEmpty() || !FileStatus.DELETED.equals(changes.get(0).getFileStatus())[ FD ]
Line_20 $$ GitLogRecord record = parser.parseOneRecord(result)-->Line_26 $$ record.setUsedHandler(h)[ FD ]
