Line_21 $$ text = "<html>" + text.substring(("<html>" + changeColorString).length())-->Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) [ FD ]
Line_6 $$ if (component instanceof JPanel) -->Line_12 $$ if (component instanceof JLabel) [ CD ]
Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) -->Line_23 $$ text = "<html>" + changeColorString + text.substring("<html>".length())[ CD ]
Line_23 $$ text = "<html>" + changeColorString + text.substring("<html>".length())-->Line_25 $$ label.setText(text)[ FD ]
Line_27 $$ if (component instanceof JTable) -->Line_29 $$ for (int i = 0; i < columnModel.getColumnCount(); i++) [ CD ]
Line_6 $$ if (component instanceof JPanel) -->Line_8 $$ if (border instanceof TitledBorder) [ CD ]
Line_12 $$ if (component instanceof JLabel) -->Line_13 $$ Color color = UIUtil.getInactiveTextColor()[ CD ]
Line_12 $$ if (component instanceof JLabel) -->Line_18 $$ String text = label.getText()[ CD ]
Line_18 $$ String text = label.getText()-->Line_23 $$ text = "<html>" + changeColorString + text.substring("<html>".length())[ FD ]
Line_30 $$ TableCellRenderer cellRenderer = columnModel.getColumn(0).getCellRenderer()-->Line_31 $$ if (cellRenderer instanceof Component) [ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_6 $$ if (component instanceof JPanel) [ CD ]
Line_27 $$ if (component instanceof JTable) -->Line_28 $$ TableColumnModel columnModel = ((JTable) component).getColumnModel()[ CD ]
Line_18 $$ String text = label.getText()-->Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) [ FD ]
Line_8 $$ if (border instanceof TitledBorder) -->Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()[ CD ]
Line_12 $$ if (component instanceof JLabel) -->Line_14 $$ if (color == null)[ CD ]
Line_29 $$ for (int i = 0; i < columnModel.getColumnCount(); i++) -->Line_30 $$ TableCellRenderer cellRenderer = columnModel.getColumn(0).getCellRenderer()[ CD ]
Line_29 $$ for (int i = 0; i < columnModel.getColumnCount(); i++) -->Line_31 $$ if (cellRenderer instanceof Component) [ CD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_27 $$ if (component instanceof JTable) [ FD ]
Line_17 $$ final JLabel label = (JLabel) component-->Line_25 $$ label.setText(text)[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_3 $$ if (component.isEnabled() == enabled)[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) [ FD ]
Line_19 $$ if (text != null && text.startsWith("<html>")) -->Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) [ CD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_5 $$ component.setEnabled(enabled)[ FD ]
Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()-->Line_14 $$ if (color == null)[ FD ]
Line_12 $$ if (component instanceof JLabel) -->Line_17 $$ final JLabel label = (JLabel) component[ CD ]
Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) -->Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) [ CD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_15 $$ color = component.getForeground()[ FD ]
Line_28 $$ TableColumnModel columnModel = ((JTable) component).getColumnModel()-->Line_29 $$ for (int i = 0; i < columnModel.getColumnCount(); i++) [ FD ]
Line_6 $$ if (component instanceof JPanel) -->Line_7 $$ final Border border = ((JPanel) component).getBorder()[ CD ]
Line_8 $$ if (border instanceof TitledBorder) -->Line_10 $$ ((TitledBorder) border).setTitleColor(color)[ CD ]
Line_16 $$ String changeColorString = "<font color=#" + colorToHex(color) + ">"-->Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) [ FD ]
Line_7 $$ final Border border = ((JPanel) component).getBorder()-->Line_8 $$ if (border instanceof TitledBorder) [ FD ]
Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) -->Line_21 $$ text = "<html>" + text.substring(("<html>" + changeColorString).length())[ CD ]
Line_21 $$ text = "<html>" + text.substring(("<html>" + changeColorString).length())-->Line_23 $$ text = "<html>" + changeColorString + text.substring("<html>".length())[ FD ]
Line_31 $$ if (cellRenderer instanceof Component) -->Line_32 $$ enableComponent((Component) cellRenderer, enabled)[ CD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_3 $$ if (component.isEnabled() == enabled)[ CD ]
Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()-->Line_10 $$ ((TitledBorder) border).setTitleColor(color)[ FD ]
Line_12 $$ if (component instanceof JLabel) -->Line_19 $$ if (text != null && text.startsWith("<html>")) [ CD ]
Line_16 $$ String changeColorString = "<font color=#" + colorToHex(color) + ">"-->Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) [ FD ]
Line_18 $$ String text = label.getText()-->Line_20 $$ if (StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && enabled) [ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_22 $$ if (!StringUtil.startsWithConcatenation(text, "<html>", changeColorString) && !enabled) [ FD ]
Line_17 $$ final JLabel label = (JLabel) component-->Line_18 $$ String text = label.getText()[ FD ]
Line_3 $$ if (component.isEnabled() == enabled)-->Line_4 $$ return[ CD ]
Line_18 $$ String text = label.getText()-->Line_21 $$ text = "<html>" + text.substring(("<html>" + changeColorString).length())[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_5 $$ component.setEnabled(enabled)[ CD ]
Line_19 $$ if (text != null && text.startsWith("<html>")) -->Line_25 $$ label.setText(text)[ CD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_12 $$ if (component instanceof JLabel) [ FD ]
Line_14 $$ if (color == null)-->Line_15 $$ color = component.getForeground()[ CD ]
Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()-->Line_15 $$ color = component.getForeground()[ FD ]
Line_12 $$ if (component instanceof JLabel) -->Line_27 $$ if (component instanceof JTable) [ CD ]
Line_28 $$ TableColumnModel columnModel = ((JTable) component).getColumnModel()-->Line_30 $$ TableCellRenderer cellRenderer = columnModel.getColumn(0).getCellRenderer()[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_32 $$ enableComponent((Component) cellRenderer, enabled)[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()[ FD ]
Line_2 $$ private static void enableComponent(Component component, boolean enabled) -->Line_6 $$ if (component instanceof JPanel) [ FD ]
Line_18 $$ String text = label.getText()-->Line_25 $$ label.setText(text)[ FD ]
Line_12 $$ if (component instanceof JLabel) -->Line_16 $$ String changeColorString = "<font color=#" + colorToHex(color) + ">"[ CD ]
Line_9 $$ Color color = enabled ? component.getForeground() : UIUtil.getInactiveTextColor()-->Line_16 $$ String changeColorString = "<font color=#" + colorToHex(color) + ">"[ FD ]
Line_18 $$ String text = label.getText()-->Line_19 $$ if (text != null && text.startsWith("<html>")) [ FD ]
Line_15 $$ color = component.getForeground()-->Line_16 $$ String changeColorString = "<font color=#" + colorToHex(color) + ">"[ FD ]
Line_21 $$ text = "<html>" + text.substring(("<html>" + changeColorString).length())-->Line_25 $$ label.setText(text)[ FD ]
