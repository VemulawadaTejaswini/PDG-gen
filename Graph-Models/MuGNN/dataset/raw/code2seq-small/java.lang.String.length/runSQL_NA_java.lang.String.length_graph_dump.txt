Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_9 $$ if (sql.endsWith(";")) [ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_9 $$ if (sql.endsWith(";")) [ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_10 $$ sql = sql.substring(0, sql.length() - 1)[ FD ]
Line_6 $$ for (int i = 0; i < sqls.length; i++) -->Line_9 $$ if (sql.endsWith(";")) [ CD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_13 $$ sql = sql.substring(0, sql.length() - 2)[ FD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_16 $$ _log.debug(sql)[ FD ]
Line_6 $$ for (int i = 0; i < sqls.length; i++) -->Line_7 $$ String sql = buildSQL(sqls[i])[ CD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_10 $$ sql = sql.substring(0, sql.length() - 1)[ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_12 $$ if (sql.endsWith("go")) [ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_9 $$ if (sql.endsWith(";")) [ FD ]
Line_2 $$ public void runSQL(Connection con, String[] sqls) throws IOException, SQLException -->Line_5 $$ s = con.createStatement()[ FD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_2 $$ public void runSQL(Connection con, String[] sqls) throws IOException, SQLException -->Line_3 $$ Statement s = null[ CD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_9 $$ if (sql.endsWith(";")) [ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_10 $$ sql = sql.substring(0, sql.length() - 1)[ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_21 $$ handleSQLException(sql, sqle)[ FD ]
Line_6 $$ for (int i = 0; i < sqls.length; i++) -->Line_8 $$ sql = SQLTransformer.transform(sql.trim())[ CD ]
Line_3 $$ Statement s = null-->Line_5 $$ s = con.createStatement()[ FD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_21 $$ handleSQLException(sql, sqle)[ FD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_8 $$ sql = SQLTransformer.transform(sql.trim())[ FD ]
Line_6 $$ for (int i = 0; i < sqls.length; i++) -->Line_12 $$ if (sql.endsWith("go")) [ CD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_13 $$ sql = sql.substring(0, sql.length() - 2)[ FD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_21 $$ handleSQLException(sql, sqle)[ FD ]
Line_9 $$ if (sql.endsWith(";")) -->Line_10 $$ sql = sql.substring(0, sql.length() - 1)[ CD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_12 $$ if (sql.endsWith("go")) [ FD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_12 $$ if (sql.endsWith("go")) [ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_8 $$ sql = SQLTransformer.transform(sql.trim())[ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_13 $$ sql = sql.substring(0, sql.length() - 2)[ FD ]
Line_3 $$ Statement s = null-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_5 $$ s = con.createStatement()-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_6 $$ for (int i = 0; i < sqls.length; i++) -->Line_15 $$ if (_log.isDebugEnabled()) [ CD ]
Line_12 $$ if (sql.endsWith("go")) -->Line_13 $$ sql = sql.substring(0, sql.length() - 2)[ CD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_21 $$ handleSQLException(sql, sqle)[ FD ]
Line_5 $$ s = con.createStatement()-->Line_25 $$ DataAccess.cleanUp(s)[ FD ]
Line_10 $$ sql = sql.substring(0, sql.length() - 1)-->Line_19 $$ s.executeUpdate(sql)[ FD ]
Line_3 $$ Statement s = null-->Line_25 $$ DataAccess.cleanUp(s)[ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_12 $$ if (sql.endsWith("go")) [ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_8 $$ sql = SQLTransformer.transform(sql.trim())[ FD ]
Line_13 $$ sql = sql.substring(0, sql.length() - 2)-->Line_16 $$ _log.debug(sql)[ FD ]
Line_7 $$ String sql = buildSQL(sqls[i])-->Line_16 $$ _log.debug(sql)[ FD ]
Line_15 $$ if (_log.isDebugEnabled()) -->Line_16 $$ _log.debug(sql)[ CD ]
Line_8 $$ sql = SQLTransformer.transform(sql.trim())-->Line_16 $$ _log.debug(sql)[ FD ]
