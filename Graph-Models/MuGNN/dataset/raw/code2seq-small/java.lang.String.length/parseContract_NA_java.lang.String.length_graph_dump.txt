Line_12 $$ if (StringUtil.isNotEmpty(beforeArrow)) -->Line_15 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(beforeArrow)) -->Line_19 $$ args = new ValueConstraint[0][ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(beforeArrow)) -->Line_13 $$ String[] argStrings = beforeArrow.split(",")[ CD ]
Line_11 $$ ValueConstraint[] args-->Line_19 $$ args = new ValueConstraint[0][ FD ]
Line_4 $$ for (String clause : StringUtil.replace(text, " ", "").split(";")) -->Line_10 $$ String beforeArrow = clause.substring(0, arrowIndex)[ FD ]
Line_2 $$ public static List<MethodContract> parseContract(String text) throws ParseException -->Line_3 $$ List<MethodContract> result = ContainerUtil.newArrayList()[ CD ]
Line_5 $$ String arrow = "->"-->Line_6 $$ int arrowIndex = clause.indexOf(arrow)[ FD ]
Line_4 $$ for (String clause : StringUtil.replace(text, " ", "").split(";")) -->Line_21 $$ result.add(new MethodContract(args, parseConstraint(clause.substring(arrowIndex + arrow.length()))))[ FD ]
Line_6 $$ int arrowIndex = clause.indexOf(arrow)-->Line_10 $$ String beforeArrow = clause.substring(0, arrowIndex)[ FD ]
Line_2 $$ public static List<MethodContract> parseContract(String text) throws ParseException -->Line_4 $$ for (String clause : StringUtil.replace(text, " ", "").split(";")) [ FD ]
Line_2 $$ public static List<MethodContract> parseContract(String text) throws ParseException -->Line_23 $$ return result[ CD ]
Line_3 $$ List<MethodContract> result = ContainerUtil.newArrayList()-->Line_21 $$ result.add(new MethodContract(args, parseConstraint(clause.substring(arrowIndex + arrow.length()))))[ FD ]
Line_11 $$ ValueConstraint[] args-->Line_14 $$ args = new ValueConstraint[argStrings.length][ FD ]
Line_15 $$ for (int i = 0; i < args.length; i++) -->Line_16 $$ args[i] = parseConstraint(argStrings[i])[ CD ]
Line_10 $$ String beforeArrow = clause.substring(0, arrowIndex)-->Line_13 $$ String[] argStrings = beforeArrow.split(",")[ FD ]
Line_4 $$ for (String clause : StringUtil.replace(text, " ", "").split(";")) -->Line_6 $$ int arrowIndex = clause.indexOf(arrow)[ FD ]
Line_10 $$ String beforeArrow = clause.substring(0, arrowIndex)-->Line_12 $$ if (StringUtil.isNotEmpty(beforeArrow)) [ FD ]
Line_12 $$ if (StringUtil.isNotEmpty(beforeArrow)) -->Line_14 $$ args = new ValueConstraint[argStrings.length][ CD ]
Line_5 $$ String arrow = "->"-->Line_21 $$ result.add(new MethodContract(args, parseConstraint(clause.substring(arrowIndex + arrow.length()))))[ FD ]
Line_6 $$ int arrowIndex = clause.indexOf(arrow)-->Line_7 $$ if (arrowIndex < 0) [ FD ]
Line_14 $$ args = new ValueConstraint[argStrings.length]-->Line_19 $$ args = new ValueConstraint[0][ FD ]
