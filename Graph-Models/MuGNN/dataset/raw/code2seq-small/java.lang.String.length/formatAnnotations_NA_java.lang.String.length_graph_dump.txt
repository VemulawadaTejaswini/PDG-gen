Line_39 $$ annotation = StringPool.BLANK-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_16 $$ if (!match.endsWith("\n)\n") && !match.endsWith("\t)\n")) -->Line_18 $$ String replacement = StringUtil.replaceLast(match, ")", "\n" + tabs + ")")[ CD ]
Line_46 $$ annotation += line + "\n"-->Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_37 $$ annotation = line + "\n"[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_31 $$ return formatAnnotations(fileName, javaTermName, content, indent)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ FD ]
Line_40 $$ previousAnnotation = StringPool.BLANK-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_6 $$ String previousAnnotation = StringPool.BLANK-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_24 $$ return formatAnnotations(fileName, javaTermName, newContent, indent)[ FD ]
Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)-->Line_15 $$ String match = matcher.group()[ FD ]
Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) -->Line_14 $$ if (matcher.find()) [ CD ]
Line_46 $$ annotation += line + "\n"-->Line_34 $$ if (Validator.isNotNull(annotation)) [ FD ]
Line_15 $$ String match = matcher.group()-->Line_18 $$ String replacement = StringUtil.replaceLast(match, ")", "\n" + tabs + ")")[ FD ]
Line_15 $$ String match = matcher.group()-->Line_19 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_39 $$ annotation = StringPool.BLANK[ FD ]
Line_6 $$ String previousAnnotation = StringPool.BLANK-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_43 $$ if (Validator.isNull(annotation)) [ FD ]
Line_46 $$ annotation += line + "\n"-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) -->Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)[ CD ]
Line_37 $$ annotation = line + "\n"-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_46 $$ annotation += line + "\n"[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_35 $$ previousAnnotation = annotation[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_8 $$ if (line.equals(indent + StringPool.CLOSE_CURLY_BRACE)) -->Line_9 $$ return content[ CD ]
Line_14 $$ if (matcher.find()) -->Line_16 $$ if (!match.endsWith("\n)\n") && !match.endsWith("\t)\n")) [ CD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_8 $$ if (line.equals(indent + StringPool.CLOSE_CURLY_BRACE)) [ CD ]
Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_33 $$ if (line.startsWith(indent + StringPool.AT)) -->Line_34 $$ if (Validator.isNotNull(annotation)) [ CD ]
Line_23 $$ if (newContent != null) -->Line_24 $$ return formatAnnotations(fileName, javaTermName, newContent, indent)[ CD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_35 $$ previousAnnotation = annotation-->Line_40 $$ previousAnnotation = StringPool.BLANK[ FD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) [ CD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) -->Line_31 $$ return formatAnnotations(fileName, javaTermName, content, indent)[ CD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_33 $$ if (line.startsWith(indent + StringPool.AT)) [ FD ]
Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)-->Line_19 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_6 $$ String previousAnnotation = StringPool.BLANK-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_14 $$ if (matcher.find()) -->Line_15 $$ String match = matcher.group()[ CD ]
Line_40 $$ previousAnnotation = StringPool.BLANK-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) -->Line_43 $$ if (Validator.isNull(annotation)) [ CD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_35 $$ previousAnnotation = annotation[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_4 $$ String line = null-->Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)[ FD ]
Line_6 $$ String previousAnnotation = StringPool.BLANK-->Line_35 $$ previousAnnotation = annotation[ FD ]
Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_46 $$ annotation += line + "\n"[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_18 $$ String replacement = StringUtil.replaceLast(match, ")", "\n" + tabs + ")")-->Line_19 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) -->Line_23 $$ if (newContent != null) [ CD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_19 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)[ FD ]
Line_15 $$ String match = matcher.group()-->Line_16 $$ if (!match.endsWith("\n)\n") && !match.endsWith("\t)\n")) [ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_46 $$ annotation += line + "\n"[ FD ]
Line_4 $$ String line = null-->Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_40 $$ previousAnnotation = StringPool.BLANK-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_37 $$ annotation = line + "\n"-->Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_46 $$ annotation += line + "\n"-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_46 $$ annotation += line + "\n"-->Line_43 $$ if (Validator.isNull(annotation)) [ FD ]
Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)-->Line_17 $$ String tabs = matcher.group(1)[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) -->Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) [ CD ]
Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) -->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ CD ]
Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) -->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ CD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_3 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(content))[ CD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_39 $$ annotation = StringPool.BLANK[ FD ]
Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)-->Line_31 $$ return formatAnnotations(fileName, javaTermName, content, indent)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_43 $$ if (Validator.isNull(annotation)) [ FD ]
Line_37 $$ annotation = line + "\n"-->Line_34 $$ if (Validator.isNotNull(annotation)) [ FD ]
Line_35 $$ previousAnnotation = annotation-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) -->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ CD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_43 $$ if (Validator.isNull(annotation)) [ FD ]
Line_4 $$ String line = null-->Line_33 $$ if (line.startsWith(indent + StringPool.AT)) [ FD ]
Line_4 $$ String line = null-->Line_46 $$ annotation += line + "\n"[ FD ]
Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)-->Line_31 $$ return formatAnnotations(fileName, javaTermName, content, indent)[ FD ]
Line_33 $$ if (line.startsWith(indent + StringPool.AT)) -->Line_37 $$ annotation = line + "\n"[ CD ]
Line_35 $$ previousAnnotation = annotation-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_34 $$ if (Validator.isNotNull(annotation)) [ FD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ FD ]
Line_4 $$ String line = null-->Line_37 $$ annotation = line + "\n"[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_5 $$ String annotation = StringPool.BLANK[ CD ]
Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)-->Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ FD ]
Line_35 $$ previousAnnotation = annotation-->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_37 $$ annotation = line + "\n"-->Line_35 $$ previousAnnotation = annotation[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_4 $$ String line = null[ CD ]
Line_3 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(content))-->Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)-->Line_23 $$ if (newContent != null) [ FD ]
Line_22 $$ String newContent = checkAnnotationParameterProperties(content, annotation)-->Line_24 $$ return formatAnnotations(fileName, javaTermName, newContent, indent)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)[ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_49 $$ return content[ CD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_12 $$ if (Validator.isNotNull(annotation) && annotation.contains(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_34 $$ if (Validator.isNotNull(annotation)) [ FD ]
Line_37 $$ annotation = line + "\n"-->Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)[ FD ]
Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) -->Line_46 $$ annotation += line + "\n"[ CD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ CD ]
Line_33 $$ if (line.startsWith(indent + StringPool.AT)) -->Line_39 $$ annotation = StringPool.BLANK[ CD ]
Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)-->Line_19 $$ return StringUtil.replace(content, match, replacement)[ FD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_26 $$ checkAnnotationParameters(fileName, javaTermName, annotation)[ FD ]
Line_33 $$ if (line.startsWith(indent + StringPool.AT)) -->Line_40 $$ previousAnnotation = StringPool.BLANK[ CD ]
Line_43 $$ if (Validator.isNull(annotation)) -->Line_44 $$ return content[ CD ]
Line_16 $$ if (!match.endsWith("\n)\n") && !match.endsWith("\t)\n")) -->Line_19 $$ return StringUtil.replace(content, match, replacement)[ CD ]
Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) -->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ CD ]
Line_7 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_8 $$ if (line.equals(indent + StringPool.CLOSE_CURLY_BRACE)) [ FD ]
Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) -->Line_33 $$ if (line.startsWith(indent + StringPool.AT)) [ CD ]
Line_6 $$ String previousAnnotation = StringPool.BLANK-->Line_40 $$ previousAnnotation = StringPool.BLANK[ FD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_37 $$ annotation = line + "\n"[ FD ]
Line_4 $$ String line = null-->Line_8 $$ if (line.equals(indent + StringPool.CLOSE_CURLY_BRACE)) [ FD ]
Line_2 $$ protected String formatAnnotations(String fileName, String javaTermName, String content, String indent) throws IOException -->Line_6 $$ String previousAnnotation = StringPool.BLANK[ CD ]
Line_11 $$ if ((StringUtil.count(line, StringPool.TAB) == indent.length()) && !line.startsWith(indent + StringPool.CLOSE_PARENTHESIS)) -->Line_28 $$ if (Validator.isNotNull(previousAnnotation) && (previousAnnotation.compareToIgnoreCase(annotation) > 0)) [ CD ]
Line_39 $$ annotation = StringPool.BLANK-->Line_46 $$ annotation += line + "\n"[ FD ]
Line_16 $$ if (!match.endsWith("\n)\n") && !match.endsWith("\t)\n")) -->Line_17 $$ String tabs = matcher.group(1)[ CD ]
Line_5 $$ String annotation = StringPool.BLANK-->Line_35 $$ previousAnnotation = annotation[ FD ]
Line_30 $$ content = StringUtil.replaceLast(content, annotation, previousAnnotation)-->Line_29 $$ content = StringUtil.replaceFirst(content, previousAnnotation, annotation)[ FD ]
Line_34 $$ if (Validator.isNotNull(annotation)) -->Line_35 $$ previousAnnotation = annotation[ CD ]
Line_13 $$ Matcher matcher = _annotationPattern.matcher(annotation)-->Line_14 $$ if (matcher.find()) [ FD ]
