Line_50 $$ parent = stringElement-->Line_89 $$ parent = stringElement[ FD ]
Line_10 $$ String fileText = document.getText()-->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_59 $$ PsiElement exprSibling = stringElement.getNextSibling()[ FD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_67 $$ caretModel.moveToOffset(caretOffset + 2)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_11 $$ if (fileText.length() == caretOffset)[ CD ]
Line_9 $$ Document document = editor.getDocument()-->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_77 $$ EditorModificationUtil.insertStringAtCaret(editor, "\"")[ FD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_82 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ CD ]
Line_9 $$ Document document = editor.getDocument()-->Line_66 $$ document.insertString(parentRange.getStartOffset(), "\"\"")[ FD ]
Line_22 $$ final IElementType nodeElementType = node.getElementType()-->Line_49 $$ if (nodeElementType == GroovyTokenTypes.mGSTRING_LITERAL) [ FD ]
Line_22 $$ final IElementType nodeElementType = node.getElementType()-->Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) [ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_62 $$ caretOffset--[ FD ]
Line_21 $$ ASTNode node = stringElement.getNode()-->Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) [ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_19 $$ if (stringElement == null)[ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_9 $$ Document document = editor.getDocument()-->Line_78 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_108 $$ return false[ CD ]
Line_10 $$ String fileText = document.getText()-->Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)[ FD ]
Line_49 $$ if (nodeElementType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_50 $$ parent = stringElement[ CD ]
Line_61 $$ if (rightFromDollar)-->Line_62 $$ caretOffset--[ CD ]
Line_9 $$ Document document = editor.getDocument()-->Line_32 $$ document.insertString(range.getStartOffset(), "''")[ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_88 $$ if (nodeElementType == GroovyTokenTypes.mREGEX_LITERAL || nodeElementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) [ CD ]
Line_22 $$ final IElementType nodeElementType = node.getElementType()-->Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) [ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_48 $$ PsiElement parent = stringElement.getParent()[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_36 $$ EditorModificationUtil.insertStringAtCaret(editor, "'+")[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_4 $$ if (project == null)[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_13 $$ if (!checkStringApplicable(editor, caretOffset))-->Line_14 $$ return false[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_21 $$ ASTNode node = stringElement.getNode()[ CD ]
Line_10 $$ String fileText = document.getText()-->Line_31 $$ convertEndToMultiline(range.getEndOffset(), document, fileText, '\'')[ FD ]
Line_9 $$ Document document = editor.getDocument()-->Line_10 $$ String fileText = document.getText()[ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_106 $$ return true[ CD ]
Line_4 $$ if (project == null)-->Line_5 $$ return false[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_9 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_40 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_9 $$ Document document = editor.getDocument()-->Line_31 $$ convertEndToMultiline(range.getEndOffset(), document, fileText, '\'')[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_68 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_100 $$ caretModel.moveToOffset(caretOffset - 1)[ FD ]
Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)-->Line_43 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)-->Line_79 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_50 $$ parent = stringElement[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_21 $$ ASTNode node = stringElement.getNode()[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_30 $$ TextRange range = stringElement.getTextRange()[ FD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_61 $$ if (rightFromDollar)[ CD ]
Line_53 $$ parent = parent.getParent()-->Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) [ FD ]
Line_49 $$ if (nodeElementType == GroovyTokenTypes.mGSTRING_LITERAL) -->Line_52 $$ while (parent != null && !(parent instanceof GrLiteral)) [ CD ]
Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) -->Line_84 $$ return true[ CD ]
Line_53 $$ parent = parent.getParent()-->Line_92 $$ parent = parent.getParent()[ FD ]
Line_53 $$ parent = parent.getParent()-->Line_89 $$ parent = stringElement[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_82 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_79 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_92 $$ parent = parent.getParent()-->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ FD ]
Line_53 $$ parent = parent.getParent()-->Line_56 $$ if (parent == null)[ FD ]
Line_21 $$ ASTNode node = stringElement.getNode()-->Line_22 $$ final IElementType nodeElementType = node.getElementType()[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_53 $$ parent = parent.getParent()[ FD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_66 $$ document.insertString(parentRange.getStartOffset(), "\"\"")[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_78 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_91 $$ while (parent != null && !(parent instanceof GrLiteral)) -->Line_92 $$ parent = parent.getParent()[ CD ]
Line_10 $$ String fileText = document.getText()-->Line_27 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ FD ]
Line_27 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) [ CD ]
Line_6 $$ final VirtualFile vfile = FileDocumentManager.getInstance().getFile(editor.getDocument())-->Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_9 $$ Document document = editor.getDocument()[ CD ]
Line_53 $$ parent = parent.getParent()-->Line_58 $$ if (isDoubleQuotedString(parent)) [ FD ]
Line_53 $$ parent = parent.getParent()-->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ FD ]
Line_30 $$ TextRange range = stringElement.getTextRange()-->Line_31 $$ convertEndToMultiline(range.getEndOffset(), document, fileText, '\'')[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) [ CD ]
Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)-->Line_82 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_22 $$ final IElementType nodeElementType = node.getElementType()[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_28 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_40 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ CD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_40 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_52 $$ while (parent != null && !(parent instanceof GrLiteral)) -->Line_53 $$ parent = parent.getParent()[ CD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_59 $$ PsiElement exprSibling = stringElement.getNextSibling()[ CD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ FD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_68 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_37 $$ originalHandler.execute(editor, dataContext)[ FD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_73 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_73 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ FD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_77 $$ EditorModificationUtil.insertStringAtCaret(editor, "\"")[ CD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_102 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ CD ]
Line_88 $$ if (nodeElementType == GroovyTokenTypes.mREGEX_LITERAL || nodeElementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_91 $$ while (parent != null && !(parent instanceof GrLiteral)) [ CD ]
Line_50 $$ parent = stringElement-->Line_58 $$ if (isDoubleQuotedString(parent)) [ FD ]
Line_103 $$ if (rightFromDollar) -->Line_104 $$ caretModel.moveCaretRelatively(1, 0, false, false, true)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_102 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_56 $$ if (parent == null)[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_70 $$ caretModel.moveCaretRelatively(1, 0, false, false, true)[ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_87 $$ PsiElement parent = stringElement.getParent()[ CD ]
Line_59 $$ PsiElement exprSibling = stringElement.getNextSibling()-->Line_60 $$ boolean rightFromDollar = exprSibling instanceof GrExpression && exprSibling.getTextRange().getStartOffset() == caretOffset[ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_33 $$ caretModel.moveToOffset(caretOffset + 2)[ CD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_30 $$ TextRange range = stringElement.getTextRange()[ CD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_87 $$ PsiElement parent = stringElement.getParent()[ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_31 $$ convertEndToMultiline(range.getEndOffset(), document, fileText, '\'')[ CD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_32 $$ document.insertString(range.getStartOffset(), "''")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_38 $$ EditorModificationUtil.insertStringAtCaret(editor, "'")[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_58 $$ if (isDoubleQuotedString(parent)) [ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_43 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_11 $$ if (fileText.length() == caretOffset)-->Line_12 $$ return false[ CD ]
Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)-->Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_92 $$ parent = parent.getParent()[ FD ]
Line_50 $$ parent = stringElement-->Line_92 $$ parent = parent.getParent()[ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_97 $$ PsiElement exprSibling = stringElement.getNextSibling()[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_24 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_17 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_25 $$ if (nodeElementType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_26 $$ if (isSingleQuoteString(stringElement)) [ CD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_78 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_40 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_34 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_19 $$ if (stringElement == null)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ FD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ CD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) [ CD ]
Line_26 $$ if (isSingleQuoteString(stringElement)) -->Line_27 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ CD ]
Line_26 $$ if (isSingleQuoteString(stringElement)) -->Line_43 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ CD ]
Line_53 $$ parent = parent.getParent()-->Line_63 $$ TextRange parentRange = parent.getTextRange()[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_6 $$ final VirtualFile vfile = FileDocumentManager.getInstance().getFile(editor.getDocument())[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_17 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)[ CD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_69 $$ if (rightFromDollar) [ CD ]
Line_89 $$ parent = stringElement-->Line_92 $$ parent = parent.getParent()[ FD ]
Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)-->Line_96 $$ return false[ CD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_97 $$ PsiElement exprSibling = stringElement.getNextSibling()[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) [ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_13 $$ if (!checkStringApplicable(editor, caretOffset))[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)[ FD ]
Line_50 $$ parent = stringElement-->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ FD ]
Line_9 $$ Document document = editor.getDocument()-->Line_17 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_104 $$ caretModel.moveCaretRelatively(1, 0, false, false, true)[ FD ]
Line_88 $$ if (nodeElementType == GroovyTokenTypes.mREGEX_LITERAL || nodeElementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_89 $$ parent = stringElement[ CD ]
Line_19 $$ if (stringElement == null)-->Line_20 $$ return false[ CD ]
Line_10 $$ String fileText = document.getText()-->Line_11 $$ if (fileText.length() == caretOffset)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_10 $$ String fileText = document.getText()[ CD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_99 $$ if (rightFromDollar) [ CD ]
Line_30 $$ TextRange range = stringElement.getTextRange()-->Line_32 $$ document.insertString(range.getStartOffset(), "''")[ FD ]
Line_9 $$ Document document = editor.getDocument()-->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ FD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_63 $$ TextRange parentRange = parent.getTextRange()[ CD ]
Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) -->Line_58 $$ if (isDoubleQuotedString(parent)) [ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_15 $$ if (file == null)[ CD ]
Line_63 $$ TextRange parentRange = parent.getTextRange()-->Line_66 $$ document.insertString(parentRange.getStartOffset(), "\"\"")[ FD ]
Line_60 $$ boolean rightFromDollar = exprSibling instanceof GrExpression && exprSibling.getTextRange().getStartOffset() == caretOffset-->Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) [ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_103 $$ if (rightFromDollar) [ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_75 $$ EditorModificationUtil.insertStringAtCaret(editor, "\"+")[ FD ]
Line_15 $$ if (file == null)-->Line_16 $$ return false[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_76 $$ originalHandler.execute(editor, dataContext)[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_79 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) [ FD ]
Line_27 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_28 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_6 $$ final VirtualFile vfile = FileDocumentManager.getInstance().getFile(editor.getDocument())[ CD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_36 $$ EditorModificationUtil.insertStringAtCaret(editor, "'+")[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_4 $$ if (project == null)[ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_37 $$ originalHandler.execute(editor, dataContext)[ CD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_89 $$ parent = stringElement[ FD ]
Line_50 $$ parent = stringElement-->Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) [ FD ]
Line_50 $$ parent = stringElement-->Line_56 $$ if (parent == null)[ FD ]
Line_99 $$ if (rightFromDollar) -->Line_100 $$ caretModel.moveToOffset(caretOffset - 1)[ CD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_75 $$ EditorModificationUtil.insertStringAtCaret(editor, "\"+")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_11 $$ if (fileText.length() == caretOffset)[ FD ]
Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) -->Line_56 $$ if (parent == null)[ CD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_34 $$ EditorModificationUtil.insertStringAtCaret(editor, "\n")[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_13 $$ if (!checkStringApplicable(editor, caretOffset))[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_67 $$ caretModel.moveToOffset(caretOffset + 2)[ FD ]
Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)-->Line_15 $$ if (file == null)[ FD ]
Line_10 $$ String fileText = document.getText()-->Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ FD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_8 $$ PsiFile file = PsiManager.getInstance(project).findFile(vfile)-->Line_40 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_86 $$ if (REGEX_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && REGEX_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.REGEX) -->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_22 $$ final IElementType nodeElementType = node.getElementType()-->Line_25 $$ if (nodeElementType == GroovyTokenTypes.mSTRING_LITERAL) [ FD ]
Line_29 $$ if (stringElement.getParent() instanceof GrReferenceExpression) -->Line_38 $$ EditorModificationUtil.insertStringAtCaret(editor, "'")[ CD ]
Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) -->Line_49 $$ if (nodeElementType == GroovyTokenTypes.mGSTRING_LITERAL) [ CD ]
Line_50 $$ parent = stringElement-->Line_53 $$ parent = parent.getParent()[ FD ]
Line_59 $$ PsiElement exprSibling = stringElement.getNextSibling()-->Line_98 $$ boolean rightFromDollar = exprSibling instanceof GrExpression && exprSibling.getTextRange().getStartOffset() == caretOffset[ FD ]
Line_50 $$ parent = stringElement-->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_63 $$ TextRange parentRange = parent.getTextRange()[ FD ]
Line_50 $$ parent = stringElement-->Line_63 $$ TextRange parentRange = parent.getTextRange()[ FD ]
Line_23 $$ boolean isInsertIndent = isInsertIndent(caretOffset, stringElement.getTextRange().getStartOffset(), fileText)-->Line_102 $$ insertLineFeedInString(editor, dataContext, originalHandler, isInsertIndent)[ FD ]
Line_53 $$ parent = parent.getParent()-->Line_65 $$ convertEndToMultiline(parent.getTextRange().getEndOffset(), document, fileText, '"')[ FD ]
Line_21 $$ ASTNode node = stringElement.getNode()-->Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) [ FD ]
Line_47 $$ if (GSTRING_TOKENS.contains(nodeElementType) || nodeElementType == GroovyElementTypes.GSTRING_CONTENT && GSTRING_TOKENS.contains(node.getFirstChildNode().getElementType()) || nodeElementType == GroovyTokenTypes.mDOLLAR && node.getTreeParent().getTreeParent().getElementType() == GroovyElementTypes.GSTRING) -->Line_48 $$ PsiElement parent = stringElement.getParent()[ CD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_50 $$ parent = stringElement[ FD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_76 $$ originalHandler.execute(editor, dataContext)[ CD ]
Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) -->Line_79 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_79 $$ CodeStyleManager.getInstance(project).reformatRange(file, caretOffset, caretModel.getOffset())[ FD ]
Line_56 $$ if (parent == null)-->Line_57 $$ return false[ CD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_26 $$ if (isSingleQuoteString(stringElement)) [ FD ]
Line_69 $$ if (rightFromDollar) -->Line_70 $$ caretModel.moveCaretRelatively(1, 0, false, false, true)[ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_18 $$ final PsiElement stringElement = inferStringPair(file, caretOffset)-->Line_89 $$ parent = stringElement[ FD ]
Line_89 $$ parent = stringElement-->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ FD ]
Line_24 $$ CaretModel caretModel = editor.getCaretModel()-->Line_33 $$ caretModel.moveToOffset(caretOffset + 2)[ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_25 $$ if (nodeElementType == GroovyTokenTypes.mSTRING_LITERAL) [ CD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_27 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ FD ]
Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) -->Line_72 $$ if (isSlashBeforeCaret(caretOffset, fileText)) [ CD ]
Line_58 $$ if (isDoubleQuotedString(parent)) -->Line_60 $$ boolean rightFromDollar = exprSibling instanceof GrExpression && exprSibling.getTextRange().getStartOffset() == caretOffset[ CD ]
Line_25 $$ if (nodeElementType == GroovyTokenTypes.mSTRING_LITERAL) -->Line_45 $$ return true[ CD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_64 $$ if (rightFromDollar || parent.getParent() instanceof GrReferenceExpression) [ FD ]
Line_2 $$ private static boolean handleInString(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler) -->Line_24 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_48 $$ PsiElement parent = stringElement.getParent()-->Line_95 $$ if (parent == null || parent.getLastChild() instanceof PsiErrorElement)[ FD ]
