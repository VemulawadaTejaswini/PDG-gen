Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) -->Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) [ CD ]
Line_15 $$ if (selectedConfigurable == null || !Comparing.strEqual(selectedConfigurable.getDisplayName(), name)) -->Line_16 $$ selectNodeInTree(node)[ CD ]
Line_8 $$ final String name = scopeConfigurable.getDisplayName()-->Line_15 $$ if (selectedConfigurable == null || !Comparing.strEqual(selectedConfigurable.getDisplayName(), name)) [ FD ]
Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) -->Line_8 $$ final String name = scopeConfigurable.getDisplayName()[ CD ]
Line_3 $$ final Set<String> names = new HashSet<String>()-->Line_20 $$ names.add(name)[ FD ]
Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)-->Line_23 $$ checkForEmptyAndDuplicatedNames(node, prefix, title, configurableClass, true)[ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) [ FD ]
Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) -->Line_22 $$ if (recursively) [ CD ]
Line_22 $$ if (recursively) -->Line_23 $$ checkForEmptyAndDuplicatedNames(node, prefix, title, configurableClass, true)[ CD ]
Line_8 $$ final String name = scopeConfigurable.getDisplayName()-->Line_13 $$ if (names.contains(name)) [ FD ]
Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) -->Line_13 $$ if (names.contains(name)) [ CD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_23 $$ checkForEmptyAndDuplicatedNames(node, prefix, title, configurableClass, true)[ FD ]
Line_8 $$ final String name = scopeConfigurable.getDisplayName()-->Line_18 $$ throw new ConfigurationException(CommonBundle.message("smth.already.exist.error.message", prefix, name), title)[ FD ]
Line_14 $$ final NamedConfigurable selectedConfigurable = getSelectedConfigurable()-->Line_15 $$ if (selectedConfigurable == null || !Comparing.strEqual(selectedConfigurable.getDisplayName(), name)) [ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_18 $$ throw new ConfigurationException(CommonBundle.message("smth.already.exist.error.message", prefix, name), title)[ FD ]
Line_9 $$ if (name.trim().length() == 0) -->Line_10 $$ selectNodeInTree(node)[ CD ]
Line_13 $$ if (names.contains(name)) -->Line_14 $$ final NamedConfigurable selectedConfigurable = getSelectedConfigurable()[ CD ]
Line_6 $$ final NamedConfigurable scopeConfigurable = node.getConfigurable()-->Line_8 $$ final String name = scopeConfigurable.getDisplayName()[ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) [ FD ]
Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) -->Line_9 $$ if (name.trim().length() == 0) [ CD ]
Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) -->Line_20 $$ names.add(name)[ CD ]
Line_6 $$ final NamedConfigurable scopeConfigurable = node.getConfigurable()-->Line_7 $$ if (configurableClass.isInstance(scopeConfigurable)) [ FD ]
Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)-->Line_16 $$ selectNodeInTree(node)[ FD ]
Line_3 $$ final Set<String> names = new HashSet<String>()-->Line_13 $$ if (names.contains(name)) [ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)[ FD ]
Line_8 $$ final String name = scopeConfigurable.getDisplayName()-->Line_9 $$ if (name.trim().length() == 0) [ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) [ CD ]
Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)-->Line_10 $$ selectNodeInTree(node)[ FD ]
Line_8 $$ final String name = scopeConfigurable.getDisplayName()-->Line_20 $$ names.add(name)[ FD ]
Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) -->Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)[ FD ]
Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) -->Line_6 $$ final NamedConfigurable scopeConfigurable = node.getConfigurable()[ CD ]
Line_13 $$ if (names.contains(name)) -->Line_15 $$ if (selectedConfigurable == null || !Comparing.strEqual(selectedConfigurable.getDisplayName(), name)) [ CD ]
Line_4 $$ for (int i = 0; i < rootNode.getChildCount(); i++) -->Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)[ CD ]
Line_5 $$ final MyNode node = (MyNode) rootNode.getChildAt(i)-->Line_6 $$ final NamedConfigurable scopeConfigurable = node.getConfigurable()[ FD ]
Line_2 $$ private void checkForEmptyAndDuplicatedNames(MyNode rootNode, String prefix, String title, Class<? extends NamedConfigurable> configurableClass, boolean recursively) throws ConfigurationException -->Line_3 $$ final Set<String> names = new HashSet<String>()[ CD ]
