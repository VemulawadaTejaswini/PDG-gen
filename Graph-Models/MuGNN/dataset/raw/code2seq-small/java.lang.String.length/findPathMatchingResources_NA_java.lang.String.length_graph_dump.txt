Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)-->Line_12 $$ result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))[ FD ]
Line_6 $$ Set<Resource> result = new LinkedHashSet<Resource>(16)-->Line_20 $$ return result.toArray(new Resource[result.size()])[ FD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_6 $$ Set<Resource> result = new LinkedHashSet<Resource>(16)[ CD ]
Line_6 $$ Set<Resource> result = new LinkedHashSet<Resource>(16)-->Line_10 $$ result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))[ FD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)[ FD ]
Line_9 $$ if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) -->Line_10 $$ result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))[ CD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_20 $$ return result.toArray(new Resource[result.size()])[ CD ]
Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)-->Line_9 $$ if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) [ FD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_9 $$ if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) [ FD ]
Line_11 $$ if (isJarResource(rootDirResource)) -->Line_12 $$ result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))[ CD ]
Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)-->Line_14 $$ result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))[ FD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_5 $$ Resource[] rootDirResources = getResources(rootDirPath)[ CD ]
Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)-->Line_10 $$ result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))[ FD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_11 $$ if (isJarResource(rootDirResource)) [ FD ]
Line_6 $$ Set<Resource> result = new LinkedHashSet<Resource>(16)-->Line_12 $$ result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))[ FD ]
Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())-->Line_12 $$ result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))[ FD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())[ FD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_10 $$ result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))[ FD ]
Line_17 $$ if (logger.isDebugEnabled()) -->Line_18 $$ logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result)[ CD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_3 $$ String rootDirPath = determineRootDir(locationPattern)[ FD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_17 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_3 $$ String rootDirPath = determineRootDir(locationPattern)[ CD ]
Line_8 $$ rootDirResource = resolveRootDirResource(rootDirResource)-->Line_11 $$ if (isJarResource(rootDirResource)) [ FD ]
Line_2 $$ protected Resource[] findPathMatchingResources(String locationPattern) throws IOException -->Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())[ CD ]
Line_3 $$ String rootDirPath = determineRootDir(locationPattern)-->Line_5 $$ Resource[] rootDirResources = getResources(rootDirPath)[ FD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_14 $$ result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))[ FD ]
Line_11 $$ if (isJarResource(rootDirResource)) -->Line_14 $$ result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))[ CD ]
Line_3 $$ String rootDirPath = determineRootDir(locationPattern)-->Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())[ FD ]
Line_6 $$ Set<Resource> result = new LinkedHashSet<Resource>(16)-->Line_14 $$ result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))[ FD ]
Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())-->Line_10 $$ result.addAll(VfsResourceMatchingDelegate.findMatchingResources(rootDirResource, subPattern, getPathMatcher()))[ FD ]
Line_4 $$ String subPattern = locationPattern.substring(rootDirPath.length())-->Line_14 $$ result.addAll(doFindPathMatchingFileResources(rootDirResource, subPattern))[ FD ]
Line_9 $$ if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) -->Line_11 $$ if (isJarResource(rootDirResource)) [ CD ]
Line_7 $$ for (Resource rootDirResource : rootDirResources) -->Line_12 $$ result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern))[ FD ]
