Line_13 $$ String lineText-->Line_17 $$ lineText = line.substring(prefixLength)[ FD ]
Line_13 $$ String lineText-->Line_15 $$ lineText = ""[ FD ]
Line_14 $$ if (line.length() < prefixLength) -->Line_17 $$ lineText = line.substring(prefixLength)[ CD ]
Line_3 $$ PatchLine.Type type-->Line_9 $$ type = PatchLine.Type.CONTEXT[ FD ]
Line_5 $$ type = PatchLine.Type.ADD-->Line_9 $$ type = PatchLine.Type.CONTEXT[ FD ]
Line_6 $$ if (line.startsWith("-") && expectMeaningfulLines) -->Line_8 $$ if (line.startsWith(" ") || line.length() == 0) [ CD ]
Line_4 $$ if (line.startsWith("+") && expectMeaningfulLines) -->Line_6 $$ if (line.startsWith("-") && expectMeaningfulLines) [ CD ]
Line_3 $$ PatchLine.Type type-->Line_5 $$ type = PatchLine.Type.ADD[ FD ]
Line_3 $$ PatchLine.Type type-->Line_7 $$ type = PatchLine.Type.REMOVE[ FD ]
Line_14 $$ if (line.length() < prefixLength) -->Line_15 $$ lineText = ""[ CD ]
Line_4 $$ if (line.startsWith("+") && expectMeaningfulLines) -->Line_5 $$ type = PatchLine.Type.ADD[ CD ]
Line_8 $$ if (line.startsWith(" ") || line.length() == 0) -->Line_9 $$ type = PatchLine.Type.CONTEXT[ CD ]
Line_15 $$ lineText = ""-->Line_17 $$ lineText = line.substring(prefixLength)[ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_17 $$ lineText = line.substring(prefixLength)[ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_8 $$ if (line.startsWith(" ") || line.length() == 0) [ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_19 $$ return new PatchLine(type, lineText)[ CD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_6 $$ if (line.startsWith("-") && expectMeaningfulLines) [ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_3 $$ PatchLine.Type type[ CD ]
Line_6 $$ if (line.startsWith("-") && expectMeaningfulLines) -->Line_7 $$ type = PatchLine.Type.REMOVE[ CD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_14 $$ if (line.length() < prefixLength) [ FD ]
Line_5 $$ type = PatchLine.Type.ADD-->Line_7 $$ type = PatchLine.Type.REMOVE[ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_13 $$ String lineText[ CD ]
Line_8 $$ if (line.startsWith(" ") || line.length() == 0) -->Line_11 $$ return null[ CD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_14 $$ if (line.length() < prefixLength) [ CD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_4 $$ if (line.startsWith("+") && expectMeaningfulLines) [ FD ]
Line_2 $$ private static PatchLine parsePatchLine(final String line, final int prefixLength, boolean expectMeaningfulLines) -->Line_4 $$ if (line.startsWith("+") && expectMeaningfulLines) [ CD ]
Line_7 $$ type = PatchLine.Type.REMOVE-->Line_9 $$ type = PatchLine.Type.CONTEXT[ FD ]
