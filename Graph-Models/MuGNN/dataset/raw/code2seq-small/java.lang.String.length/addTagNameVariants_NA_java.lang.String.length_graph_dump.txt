Line_27 $$ PsiElement declaration = descriptor.getDeclaration()-->Line_28 $$ if (declaration != null && !declaration.isValid()) [ FD ]
Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_40 $$ if (descriptor instanceof PsiPresentableMetaData) [ FD ]
Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_14 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) [ CD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_24 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_21 $$ String qname = descriptor.getName(tag)[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_3 $$ final List<String> namespaces[ CD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_40 $$ if (descriptor instanceof PsiPresentableMetaData) [ CD ]
Line_3 $$ final List<String> namespaces-->Line_8 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_25 $$ qname = qname.substring(prefix.length() + 1)[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_43 $$ if (xmlExtension.useXmlTagInsertHandler()) [ CD ]
Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)[ FD ]
Line_25 $$ qname = qname.substring(prefix.length() + 1)-->Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_12 $$ List<String> nsInfo = new ArrayList<String>()-->Line_36 $$ String ns = nsInfo.get(i)[ FD ]
Line_8 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))-->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_22 $$ if (!visited.add(qname))[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_8 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ FD ]
Line_24 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) -->Line_25 $$ qname = qname.substring(prefix.length() + 1)[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_21 $$ String qname = descriptor.getName(tag)[ FD ]
Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_27 $$ PsiElement declaration = descriptor.getDeclaration()[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_19 $$ for (int i = 0; i < variants.size(); i++) [ CD ]
Line_25 $$ qname = qname.substring(prefix.length() + 1)-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_11 $$ XmlExtension xmlExtension = XmlExtension.getExtension(psiFile)[ CD ]
Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_4 $$ if (prefix.isEmpty()) -->Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))[ CD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_36 $$ String ns = nsInfo.get(i)[ CD ]
Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_14 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) [ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_37 $$ if (StringUtil.isNotEmpty(ns)) [ CD ]
Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))-->Line_6 $$ namespaces.add(XmlUtil.EMPTY_URI)[ FD ]
Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ CD ]
Line_11 $$ XmlExtension xmlExtension = XmlExtension.getExtension(psiFile)-->Line_43 $$ if (xmlExtension.useXmlTagInsertHandler()) [ FD ]
Line_25 $$ qname = qname.substring(prefix.length() + 1)-->Line_22 $$ if (!visited.add(qname))[ FD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_25 $$ qname = qname.substring(prefix.length() + 1)[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ CD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_27 $$ PsiElement declaration = descriptor.getDeclaration()[ CD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_28 $$ if (declaration != null && !declaration.isValid()) [ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_4 $$ if (prefix.isEmpty()) [ FD ]
Line_32 $$ final int separator = qname.indexOf(':')-->Line_33 $$ if (separator > 0) [ FD ]
Line_3 $$ final List<String> namespaces-->Line_6 $$ namespaces.add(XmlUtil.EMPTY_URI)[ FD ]
Line_27 $$ PsiElement declaration = descriptor.getDeclaration()-->Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)[ FD ]
Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))-->Line_8 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_10 $$ PsiFile psiFile = tag.getContainingFile()[ CD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_32 $$ final int separator = qname.indexOf(':')[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_24 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ CD ]
Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_21 $$ String qname = descriptor.getName(tag)[ FD ]
Line_36 $$ String ns = nsInfo.get(i)-->Line_37 $$ if (StringUtil.isNotEmpty(ns)) [ FD ]
Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_24 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ FD ]
Line_18 $$ final Set<String> visited = new HashSet<String>()-->Line_22 $$ if (!visited.add(qname))[ FD ]
Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_19 $$ for (int i = 0; i < variants.size(); i++) [ FD ]
Line_14 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) -->Line_15 $$ getRootTagsVariants(tag, elements)[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_36 $$ String ns = nsInfo.get(i)-->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_10 $$ PsiFile psiFile = tag.getContainingFile()-->Line_11 $$ XmlExtension xmlExtension = XmlExtension.getExtension(psiFile)[ FD ]
Line_3 $$ final List<String> namespaces-->Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_12 $$ List<String> nsInfo = new ArrayList<String>()-->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_21 $$ String qname = descriptor.getName(tag)-->Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
Line_43 $$ if (xmlExtension.useXmlTagInsertHandler()) -->Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ CD ]
Line_28 $$ if (declaration != null && !declaration.isValid()) -->Line_29 $$ LOG.error(descriptor + " contains invalid declaration: " + declaration)[ CD ]
Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))-->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_40 $$ if (descriptor instanceof PsiPresentableMetaData) -->Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ CD ]
Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_46 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_12 $$ List<String> nsInfo = new ArrayList<String>()[ CD ]
Line_25 $$ qname = qname.substring(prefix.length() + 1)-->Line_24 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ FD ]
Line_4 $$ if (prefix.isEmpty()) -->Line_6 $$ namespaces.add(XmlUtil.EMPTY_URI)[ CD ]
Line_33 $$ if (separator > 0) -->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ CD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_20 $$ XmlElementDescriptor descriptor = variants.get(i)[ CD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_32 $$ final int separator = qname.indexOf(':')[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_15 $$ getRootTagsVariants(tag, elements)[ FD ]
Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_3 $$ final List<String> namespaces-->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_10 $$ PsiFile psiFile = tag.getContainingFile()[ FD ]
Line_31 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_33 $$ if (separator > 0) [ CD ]
Line_14 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) -->Line_16 $$ return[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_18 $$ final Set<String> visited = new HashSet<String>()[ CD ]
Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_13 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_36 $$ String ns = nsInfo.get(i)[ FD ]
Line_4 $$ if (prefix.isEmpty()) -->Line_8 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ CD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_4 $$ if (prefix.isEmpty()) [ CD ]
Line_25 $$ qname = qname.substring(prefix.length() + 1)-->Line_32 $$ final int separator = qname.indexOf(':')[ FD ]
Line_34 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_2 $$ public void addTagNameVariants(List<LookupElement> elements, @NotNull XmlTag tag, String prefix) -->Line_5 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_19 $$ for (int i = 0; i < variants.size(); i++) -->Line_22 $$ if (!visited.add(qname))[ CD ]
Line_37 $$ if (StringUtil.isNotEmpty(ns)) -->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ CD ]
Line_41 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_44 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_38 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
