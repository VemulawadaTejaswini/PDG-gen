Line_4 $$ final List<String> namespaces-->Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_29 $$ PsiElement declaration = descriptor.getDeclaration()-->Line_30 $$ if (declaration != null && !declaration.isValid()) [ FD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_26 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ FD ]
Line_27 $$ qname = qname.substring(prefix.length() + 1)-->Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_34 $$ final int separator = qname.indexOf(':')[ CD ]
Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_42 $$ if (descriptor instanceof PsiPresentableMetaData) [ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_29 $$ PsiElement declaration = descriptor.getDeclaration()[ CD ]
Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_16 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) -->Line_18 $$ return[ CD ]
Line_38 $$ String ns = nsInfo.get(i)-->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_10 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))-->Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_29 $$ PsiElement declaration = descriptor.getDeclaration()-->Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_38 $$ String ns = nsInfo.get(i)[ CD ]
Line_39 $$ if (StringUtil.isNotEmpty(ns)) -->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ CD ]
Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_21 $$ for (int i = 0; i < variants.size(); i++) [ FD ]
Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_38 $$ String ns = nsInfo.get(i)-->Line_39 $$ if (StringUtil.isNotEmpty(ns)) [ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_45 $$ if (xmlExtension.useXmlTagInsertHandler()) [ CD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_27 $$ qname = qname.substring(prefix.length() + 1)[ FD ]
Line_42 $$ if (descriptor instanceof PsiPresentableMetaData) -->Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ CD ]
Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_26 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ CD ]
Line_6 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))-->Line_10 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ FD ]
Line_45 $$ if (xmlExtension.useXmlTagInsertHandler()) -->Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ CD ]
Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_34 $$ final int separator = qname.indexOf(':')-->Line_35 $$ if (separator > 0) [ FD ]
Line_5 $$ if (prefix.isEmpty()) -->Line_10 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ CD ]
Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_23 $$ String qname = descriptor.getName(tag)[ FD ]
Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)-->Line_29 $$ PsiElement declaration = descriptor.getDeclaration()[ FD ]
Line_4 $$ final List<String> namespaces-->Line_6 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))[ FD ]
Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_16 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) [ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)[ FD ]
Line_4 $$ final List<String> namespaces-->Line_10 $$ namespaces = new ArrayList<String>(Collections.singletonList(tag.getNamespace()))[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ CD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_38 $$ String ns = nsInfo.get(i)[ FD ]
Line_16 $$ if (variants.isEmpty() && psiFile instanceof XmlFile && ((XmlFile) psiFile).getRootTag() == tag) -->Line_17 $$ getRootTagsVariants(tag, elements)[ CD ]
Line_6 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))-->Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ CD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_34 $$ final int separator = qname.indexOf(':')[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_30 $$ if (declaration != null && !declaration.isValid()) [ CD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_24 $$ if (!visited.add(qname))[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_39 $$ if (StringUtil.isNotEmpty(ns)) [ CD ]
Line_20 $$ final Set<String> visited = new HashSet<String>()-->Line_24 $$ if (!visited.add(qname))[ FD ]
Line_35 $$ if (separator > 0) -->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ CD ]
Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_27 $$ qname = qname.substring(prefix.length() + 1)-->Line_26 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) [ FD ]
Line_30 $$ if (declaration != null && !declaration.isValid()) -->Line_31 $$ LOG.error(descriptor + " contains invalid declaration: " + declaration)[ CD ]
Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)-->Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_35 $$ if (separator > 0) [ CD ]
Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())[ FD ]
Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)[ CD ]
Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)-->Line_46 $$ lookupElement = lookupElement.withInsertHandler(XmlTagInsertHandler.INSTANCE)[ FD ]
Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))-->Line_48 $$ elements.add(PrioritizedLookupElement.withPriority(lookupElement, separator > 0 ? 0 : 1))[ FD ]
Line_12 $$ PsiFile psiFile = tag.getContainingFile()-->Line_13 $$ XmlExtension xmlExtension = XmlExtension.getExtension(psiFile)[ FD ]
Line_5 $$ if (prefix.isEmpty()) -->Line_6 $$ namespaces = new ArrayList<String>(Arrays.asList(tag.knownNamespaces()))[ CD ]
Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)-->Line_22 $$ XmlElementDescriptor descriptor = variants.get(i)[ FD ]
Line_27 $$ qname = qname.substring(prefix.length() + 1)-->Line_34 $$ final int separator = qname.indexOf(':')[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_42 $$ if (descriptor instanceof PsiPresentableMetaData) [ CD ]
Line_43 $$ lookupElement = lookupElement.withIcon(((PsiPresentableMetaData) descriptor).getIcon())-->Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)[ FD ]
Line_27 $$ qname = qname.substring(prefix.length() + 1)-->Line_24 $$ if (!visited.add(qname))[ FD ]
Line_27 $$ qname = qname.substring(prefix.length() + 1)-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_14 $$ List<String> nsInfo = new ArrayList<String>()-->Line_38 $$ String ns = nsInfo.get(i)[ FD ]
Line_40 $$ lookupElement = lookupElement.withTypeText(ns, true)-->Line_36 $$ lookupElement = lookupElement.withLookupString(qname.substring(separator + 1))[ FD ]
Line_14 $$ List<String> nsInfo = new ArrayList<String>()-->Line_15 $$ List<XmlElementDescriptor> variants = TagNameVariantCollector.getTagDescriptors(tag, namespaces, nsInfo)[ FD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_23 $$ String qname = descriptor.getName(tag)[ CD ]
Line_21 $$ for (int i = 0; i < variants.size(); i++) -->Line_24 $$ if (!visited.add(qname))[ CD ]
Line_26 $$ if (!prefix.isEmpty() && qname.startsWith(prefix + ":")) -->Line_27 $$ qname = qname.substring(prefix.length() + 1)[ CD ]
Line_13 $$ XmlExtension xmlExtension = XmlExtension.getExtension(psiFile)-->Line_45 $$ if (xmlExtension.useXmlTagInsertHandler()) [ FD ]
Line_23 $$ String qname = descriptor.getName(tag)-->Line_33 $$ LookupElementBuilder lookupElement = declaration == null ? LookupElementBuilder.create(qname) : LookupElementBuilder.create(declaration, qname)[ FD ]
