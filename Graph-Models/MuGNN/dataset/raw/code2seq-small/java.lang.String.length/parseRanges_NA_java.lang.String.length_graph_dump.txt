Line_12 $$ for (String token : tokens) -->Line_13 $$ result.add(parseRange(token))[ FD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_9 $$ ranges = ranges.substring(BYTE_RANGE_PREFIX.length())[ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_10 $$ String[] tokens = ranges.split(",\\s*")[ FD ]
Line_9 $$ ranges = ranges.substring(BYTE_RANGE_PREFIX.length())-->Line_10 $$ String[] tokens = ranges.split(",\\s*")[ FD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_6 $$ if (!ranges.startsWith(BYTE_RANGE_PREFIX)) [ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_11 $$ List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)[ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_3 $$ if (!StringUtils.hasLength(ranges)) [ CD ]
Line_3 $$ if (!StringUtils.hasLength(ranges)) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_10 $$ String[] tokens = ranges.split(",\\s*")[ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_9 $$ ranges = ranges.substring(BYTE_RANGE_PREFIX.length())[ FD ]
Line_11 $$ List<HttpRange> result = new ArrayList<HttpRange>(tokens.length)-->Line_13 $$ result.add(parseRange(token))[ FD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_15 $$ return result[ CD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_6 $$ if (!ranges.startsWith(BYTE_RANGE_PREFIX)) [ FD ]
Line_2 $$ public static List<HttpRange> parseRanges(String ranges) -->Line_3 $$ if (!StringUtils.hasLength(ranges)) [ FD ]
