Line_3 $$ InputStream inputStream = new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes())-->Line_5 $$ FileEntry fileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ FD ]
Line_3 $$ InputStream inputStream = new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes())-->Line_7 $$ FileEntry folderFileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), folder.getFolderId(), RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_4 $$ LocalRepository localRepository = RepositoryProviderUtil.getLocalRepository(repositoryId)[ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_5 $$ FileEntry fileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ CD ]
Line_6 $$ Folder folder = localRepository.addFolder(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), new ServiceContext())-->Line_8 $$ return new long[] [ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_6 $$ Folder folder = localRepository.addFolder(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), new ServiceContext())[ CD ]
Line_4 $$ LocalRepository localRepository = RepositoryProviderUtil.getLocalRepository(repositoryId)-->Line_5 $$ FileEntry fileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ FD ]
Line_7 $$ FileEntry folderFileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), folder.getFolderId(), RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())-->Line_8 $$ return new long[] [ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_4 $$ LocalRepository localRepository = RepositoryProviderUtil.getLocalRepository(repositoryId)[ CD ]
Line_4 $$ LocalRepository localRepository = RepositoryProviderUtil.getLocalRepository(repositoryId)-->Line_6 $$ Folder folder = localRepository.addFolder(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), new ServiceContext())[ FD ]
Line_4 $$ LocalRepository localRepository = RepositoryProviderUtil.getLocalRepository(repositoryId)-->Line_7 $$ FileEntry folderFileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), folder.getFolderId(), RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_8 $$ return new long[] [ CD ]
Line_6 $$ Folder folder = localRepository.addFolder(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), RandomTestUtil.randomString(), new ServiceContext())-->Line_7 $$ FileEntry folderFileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), folder.getFolderId(), RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_3 $$ InputStream inputStream = new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes())[ CD ]
Line_5 $$ FileEntry fileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())-->Line_8 $$ return new long[] [ FD ]
Line_2 $$ protected long[] populateRepository(long repositoryId) throws Exception -->Line_7 $$ FileEntry folderFileEntry = localRepository.addFileEntry(TestPropsValues.getUserId(), folder.getFolderId(), RandomTestUtil.randomString(), ContentTypes.TEXT_PLAIN, RandomTestUtil.randomString(), StringPool.BLANK, StringPool.BLANK, inputStream, _TEST_CONTENT.length(), new ServiceContext())[ CD ]
