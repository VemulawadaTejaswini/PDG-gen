Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_38 $$ if (Messages.showOkCancelDialog(project, promptMessage + "?", RefactoringBundle.message("warning.title"), Messages.getWarningIcon()) == Messages.OK) [ FD ]
Line_43 $$ final StringBuffer message = new StringBuffer()-->Line_47 $$ int ret = Messages.showYesNoCancelDialog(project, message.toString(), RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.package.button.text"), RefactoringBundle.message("rename.directory.button.text"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_4 $$ final T aPackage = getPackage(psiDirectory)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_13 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ FD ]
Line_48 $$ if (ret == Messages.YES) -->Line_49 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ CD ]
Line_21 $$ if (inLib) -->Line_32 $$ if (projectDirectories.length > 0) [ CD ]
Line_34 $$ if (ret == Messages.CANCEL)-->Line_35 $$ return[ CD ]
Line_50 $$ if (ret == Messages.NO) -->Line_51 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ CD ]
Line_43 $$ final StringBuffer message = new StringBuffer()-->Line_45 $$ buildMultipleDirectoriesInPackageMessage(message, getQualifiedName(aPackage), directories)[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element[ CD ]
Line_21 $$ if (inLib) -->Line_22 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(psiDirectory)[ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) [ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_45 $$ buildMultipleDirectoriesInPackageMessage(message, getQualifiedName(aPackage), directories)[ FD ]
Line_11 $$ final VirtualFile[] virtualFiles = occursInPackagePrefixes(aPackage)-->Line_44 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_39 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_32 $$ if (projectDirectories.length > 0) -->Line_33 $$ int ret = Messages.showYesNoCancelDialog(project, promptMessage + " or all directories in project?", RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.current.directory"), RefactoringBundle.message("rename.directories"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())[ CD ]
Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) -->Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) [ CD ]
Line_24 $$ PsiDirectory[] moduleDirs = null-->Line_28 $$ moduleDirs = null[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_46 $$ message.append(RefactoringBundle.message("directories.and.all.references.to.package.will.be.renamed", psiDirectory.getVirtualFile().getPresentableUrl()))[ FD ]
Line_33 $$ int ret = Messages.showYesNoCancelDialog(project, promptMessage + " or all directories in project?", RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.current.directory"), RefactoringBundle.message("rename.directories"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())-->Line_48 $$ if (ret == Messages.YES) [ FD ]
Line_15 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_18 $$ inLib |= !projectFileIndex.isInContent(directory.getVirtualFile())[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) [ CD ]
Line_21 $$ if (inLib) -->Line_24 $$ PsiDirectory[] moduleDirs = null[ CD ]
Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) -->Line_15 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_25 $$ if (nameSuggestionContext instanceof PsiPackageBase) [ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_10 $$ PsiDirectory[] directories = aPackage.getDirectories()[ FD ]
Line_32 $$ if (projectDirectories.length > 0) -->Line_38 $$ if (Messages.showOkCancelDialog(project, promptMessage + "?", RefactoringBundle.message("warning.title"), Messages.getWarningIcon()) == Messages.OK) [ CD ]
Line_21 $$ if (inLib) -->Line_43 $$ final StringBuffer message = new StringBuffer()[ CD ]
Line_21 $$ if (inLib) -->Line_23 $$ LOG.assertTrue(module != null)[ CD ]
Line_22 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(psiDirectory)-->Line_26 $$ moduleDirs = aPackage.getDirectories(GlobalSearchScope.moduleScope(module))[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_36 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, ret == Messages.YES ? (moduleDirs == null ? new PsiDirectory[] [ FD ]
Line_17 $$ for (PsiDirectory directory : directories) -->Line_18 $$ inLib |= !projectFileIndex.isInContent(directory.getVirtualFile())[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_47 $$ int ret = Messages.showYesNoCancelDialog(project, message.toString(), RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.package.button.text"), RefactoringBundle.message("rename.directory.button.text"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_49 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_20 $$ final PsiDirectory[] projectDirectories = aPackage.getDirectories(GlobalSearchScope.projectScope(project))[ FD ]
Line_43 $$ final StringBuffer message = new StringBuffer()-->Line_44 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName)[ FD ]
Line_21 $$ if (inLib) -->Line_45 $$ buildMultipleDirectoriesInPackageMessage(message, getQualifiedName(aPackage), directories)[ CD ]
Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) -->Line_8 $$ PsiElementRenameHandler.rename(element, project, nameSuggestionContext, editor)[ CD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_31 $$ final String promptMessage = "Package \'" + aPackage.getName() + "\' contains directories in libraries which cannot be renamed. Do you want to rename " + (moduleDirs == null ? "current directory" : "current module directories")[ FD ]
Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) -->Line_10 $$ PsiDirectory[] directories = aPackage.getDirectories()[ CD ]
Line_26 $$ moduleDirs = aPackage.getDirectories(GlobalSearchScope.moduleScope(module))-->Line_28 $$ moduleDirs = null[ FD ]
Line_21 $$ if (inLib) -->Line_46 $$ message.append(RefactoringBundle.message("directories.and.all.references.to.package.will.be.renamed", psiDirectory.getVirtualFile().getPresentableUrl()))[ CD ]
Line_32 $$ if (projectDirectories.length > 0) -->Line_36 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, ret == Messages.YES ? (moduleDirs == null ? new PsiDirectory[] [ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_13 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_20 $$ final PsiDirectory[] projectDirectories = aPackage.getDirectories(GlobalSearchScope.projectScope(project))[ FD ]
Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) -->Line_13 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ CD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_5 $$ final String qualifiedName = aPackage != null ? getQualifiedName(aPackage) : ""[ FD ]
Line_21 $$ if (inLib) -->Line_31 $$ final String promptMessage = "Package \'" + aPackage.getName() + "\' contains directories in libraries which cannot be renamed. Do you want to rename " + (moduleDirs == null ? "current directory" : "current module directories")[ CD ]
Line_48 $$ if (ret == Messages.YES) -->Line_50 $$ if (ret == Messages.NO) [ CD ]
Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) -->Line_20 $$ final PsiDirectory[] projectDirectories = aPackage.getDirectories(GlobalSearchScope.projectScope(project))[ CD ]
Line_21 $$ if (inLib) -->Line_25 $$ if (nameSuggestionContext instanceof PsiPackageBase) [ CD ]
Line_24 $$ PsiDirectory[] moduleDirs = null-->Line_26 $$ moduleDirs = aPackage.getDirectories(GlobalSearchScope.moduleScope(module))[ FD ]
Line_25 $$ if (nameSuggestionContext instanceof PsiPackageBase) -->Line_27 $$ if (moduleDirs.length <= 1) [ CD ]
Line_5 $$ final String qualifiedName = aPackage != null ? getQualifiedName(aPackage) : ""-->Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) [ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_4 $$ final T aPackage = getPackage(psiDirectory)[ CD ]
Line_43 $$ final StringBuffer message = new StringBuffer()-->Line_46 $$ message.append(RefactoringBundle.message("directories.and.all.references.to.package.will.be.renamed", psiDirectory.getVirtualFile().getPresentableUrl()))[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_33 $$ int ret = Messages.showYesNoCancelDialog(project, promptMessage + " or all directories in project?", RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.current.directory"), RefactoringBundle.message("rename.directories"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())[ FD ]
Line_25 $$ if (nameSuggestionContext instanceof PsiPackageBase) -->Line_26 $$ moduleDirs = aPackage.getDirectories(GlobalSearchScope.moduleScope(module))[ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_49 $$ PsiElementRenameHandler.rename(aPackage, project, nameSuggestionContext, editor)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_51 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_21 $$ if (inLib) -->Line_48 $$ if (ret == Messages.YES) [ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_5 $$ final String qualifiedName = aPackage != null ? getQualifiedName(aPackage) : ""[ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_15 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_22 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(psiDirectory)[ FD ]
Line_33 $$ int ret = Messages.showYesNoCancelDialog(project, promptMessage + " or all directories in project?", RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.current.directory"), RefactoringBundle.message("rename.directories"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())-->Line_50 $$ if (ret == Messages.NO) [ FD ]
Line_16 $$ boolean inLib = false-->Line_18 $$ inLib |= !projectFileIndex.isInContent(directory.getVirtualFile())[ FD ]
Line_32 $$ if (projectDirectories.length > 0) -->Line_34 $$ if (ret == Messages.CANCEL)[ CD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_51 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) [ FD ]
Line_21 $$ if (inLib) -->Line_44 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName)[ CD ]
Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) -->Line_21 $$ if (inLib) [ CD ]
Line_27 $$ if (moduleDirs.length <= 1) -->Line_28 $$ moduleDirs = null[ CD ]
Line_33 $$ int ret = Messages.showYesNoCancelDialog(project, promptMessage + " or all directories in project?", RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.current.directory"), RefactoringBundle.message("rename.directories"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())-->Line_34 $$ if (ret == Messages.CANCEL)[ FD ]
Line_5 $$ final String qualifiedName = aPackage != null ? getQualifiedName(aPackage) : ""-->Line_44 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, qualifiedName)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_26 $$ moduleDirs = aPackage.getDirectories(GlobalSearchScope.moduleScope(module))[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_51 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_10 $$ PsiDirectory[] directories = aPackage.getDirectories()-->Line_45 $$ buildMultipleDirectoriesInPackageMessage(message, getQualifiedName(aPackage), directories)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_11 $$ final VirtualFile[] virtualFiles = occursInPackagePrefixes(aPackage)[ FD ]
Line_6 $$ if (aPackage == null || qualifiedName.length() == 0 || !isIdentifier(psiDirectory.getName(), project)) -->Line_11 $$ final VirtualFile[] virtualFiles = occursInPackagePrefixes(aPackage)[ CD ]
Line_38 $$ if (Messages.showOkCancelDialog(project, promptMessage + "?", RefactoringBundle.message("warning.title"), Messages.getWarningIcon()) == Messages.OK) -->Line_39 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ CD ]
Line_12 $$ if (virtualFiles.length == 0 && directories.length == 1) -->Line_16 $$ boolean inLib = false[ CD ]
Line_21 $$ if (inLib) -->Line_47 $$ int ret = Messages.showYesNoCancelDialog(project, message.toString(), RefactoringBundle.message("warning.title"), RefactoringBundle.message("rename.package.button.text"), RefactoringBundle.message("rename.directory.button.text"), CommonBundle.getCancelButtonText(), Messages.getWarningIcon())[ CD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_8 $$ PsiElementRenameHandler.rename(element, project, nameSuggestionContext, editor)[ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_36 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, ret == Messages.YES ? (moduleDirs == null ? new PsiDirectory[] [ FD ]
Line_2 $$ private void doRename(PsiElement element, final Project project, PsiElement nameSuggestionContext, Editor editor) -->Line_39 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_3 $$ final PsiDirectory psiDirectory = (PsiDirectory) element-->Line_39 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, psiDirectory)[ FD ]
Line_4 $$ final T aPackage = getPackage(psiDirectory)-->Line_36 $$ renameDirs(project, nameSuggestionContext, editor, psiDirectory, aPackage, ret == Messages.YES ? (moduleDirs == null ? new PsiDirectory[] [ FD ]
