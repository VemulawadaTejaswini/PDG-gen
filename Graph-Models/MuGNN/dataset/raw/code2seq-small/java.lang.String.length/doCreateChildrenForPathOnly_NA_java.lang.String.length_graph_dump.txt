Line_4 $$ String name = StringUtil.trimStart(child.getName(), "/")-->Line_5 $$ if (!path.startsWith(name))[ FD ]
Line_7 $$ String rest = path.substring(name.length())-->Line_8 $$ if (!rest.isEmpty() && rest.charAt(0) != '/')[ FD ]
Line_13 $$ Entry e = doCreateEntryForPathOnly(child, rest)-->Line_16 $$ parent.addChild(e)[ FD ]
Line_7 $$ String rest = path.substring(name.length())-->Line_10 $$ if (!rest.isEmpty() && rest.charAt(0) == '/') [ FD ]
Line_4 $$ String name = StringUtil.trimStart(child.getName(), "/")-->Line_7 $$ String rest = path.substring(name.length())[ FD ]
Line_10 $$ if (!rest.isEmpty() && rest.charAt(0) == '/') -->Line_11 $$ rest = rest.substring(1)[ CD ]
Line_7 $$ String rest = path.substring(name.length())-->Line_11 $$ rest = rest.substring(1)[ FD ]
Line_7 $$ String rest = path.substring(name.length())-->Line_13 $$ Entry e = doCreateEntryForPathOnly(child, rest)[ FD ]
Line_3 $$ for (VirtualFile child : children) -->Line_4 $$ String name = StringUtil.trimStart(child.getName(), "/")[ FD ]
Line_3 $$ for (VirtualFile child : children) -->Line_13 $$ Entry e = doCreateEntryForPathOnly(child, rest)[ FD ]
Line_13 $$ Entry e = doCreateEntryForPathOnly(child, rest)-->Line_14 $$ if (e == null)[ FD ]
Line_11 $$ rest = rest.substring(1)-->Line_13 $$ Entry e = doCreateEntryForPathOnly(child, rest)[ FD ]
Line_2 $$ private void doCreateChildrenForPathOnly(@NotNull DirectoryEntry parent, @NotNull String path, @NotNull Iterable<VirtualFile> children) -->Line_7 $$ String rest = path.substring(name.length())[ FD ]
Line_2 $$ private void doCreateChildrenForPathOnly(@NotNull DirectoryEntry parent, @NotNull String path, @NotNull Iterable<VirtualFile> children) -->Line_5 $$ if (!path.startsWith(name))[ FD ]
Line_2 $$ private void doCreateChildrenForPathOnly(@NotNull DirectoryEntry parent, @NotNull String path, @NotNull Iterable<VirtualFile> children) -->Line_16 $$ parent.addChild(e)[ FD ]
