Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_53 $$ MetaIndexEntry e = it.next()[ CD ]
Line_16 $$ FileSystem fs = path.getFileSystem(conf)-->Line_18 $$ FSDataInputStream fsdis = fs.open(path)[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_41 $$ properties.put("Data Block Bytes", Long.toString(dataSize))[ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_99 $$ String endKey = "End-Key"[ CD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_124 $$ if (sampleLen < key.length) [ CD ]
Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ FD ]
Line_23 $$ int metaBlkCnt = reader.readerBCF.metaIndex.index.size()-->Line_131 $$ if (metaBlkCnt > 0) [ FD ]
Line_133 $$ int maxNameLen = 0-->Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_89 $$ int blkIDWidth = Align.calculateWidth(blkID, blockCnt)[ CD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_90 $$ int blkIDWidth2 = Align.calculateWidth("", blockCnt)[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_103 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)[ CD ]
Line_109 $$ for (int j = 0; j < sampleLen; ++j) -->Line_110 $$ byte b = key[j][ CD ]
Line_132 $$ String name = "Meta-Block"-->Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_82 $$ Map.Entry<String, String> e = it.next()[ FD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_36 $$ for (int i = 0; i < blockCnt; ++i) [ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_82 $$ Map.Entry<String, String> e = it.next()[ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_153 $$ String blkName = e.getValue().getMetaName()[ FD ]
Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ FD ]
Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_98 $$ int recordsWidth = Align.calculateWidth(records, reader.getEntryCount() / blockCnt * 10)[ FD ]
Line_50 $$ Collection<MetaIndexEntry> metaBlks = reader.readerBCF.metaIndex.index.values()-->Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) [ FD ]
Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_138 $$ maxNameLen = e.getKey().length()[ FD ]
Line_97 $$ String records = "Records"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_127 $$ out.println()[ CD ]
Line_42 $$ if (!reader.readerBCF.getDefaultCompressionName().equals("none")) -->Line_43 $$ properties.put("Data Block Uncompressed Bytes", Long.toString(dataSizeUncompressed))[ CD ]
Line_49 $$ if (metaBlkCnt > 0) -->Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) [ CD ]
Line_14 $$ final int maxKeySampleLen = 16-->Line_108 $$ int sampleLen = Math.min(maxKeySampleLen, key.length)[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_149 $$ int compressionWidth = compression.length()[ CD ]
Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_82 $$ Map.Entry<String, String> e = it.next()[ CD ]
Line_138 $$ maxNameLen = e.getKey().length()-->Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_54 $$ metaSize += e.getRegion().getCompressedSize()[ CD ]
Line_34 $$ long dataSize = 0, dataSizeUncompressed = 0-->Line_38 $$ dataSize += region.getCompressedSize()[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_47 $$ properties.put("Meta Block Count", Integer.toString(metaBlkCnt))[ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_55 $$ metaSizeUncompressed += e.getRegion().getRawSize()[ FD ]
Line_93 $$ String blkLen = "Length"-->Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)[ FD ]
Line_112 $$ asAscii = false-->Line_115 $$ if (!asAscii) [ FD ]
Line_91 $$ String offset = "Offset"-->Line_143 $$ int offsetWidth = Align.calculateWidth(offset, length)[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_148 $$ String compression = "Compression"[ CD ]
Line_93 $$ String blkLen = "Length"-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_78 $$ maxKeyLength = e.getKey().length()-->Line_77 $$ if (e.getKey().length() > maxKeyLength) [ FD ]
Line_133 $$ int maxNameLen = 0-->Line_138 $$ maxNameLen = e.getKey().length()[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) [ FD ]
Line_138 $$ maxNameLen = e.getKey().length()-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_95 $$ String rawSize = "Raw-Size"[ CD ]
Line_95 $$ String rawSize = "Raw-Size"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_83 $$ out.printf("%s : %s\n", Align.format(e.getKey(), maxKeyLength, Align.LEFT), e.getValue())[ FD ]
Line_69 $$ long metaIndexSize = leftOverBytes - miscSize-->Line_70 $$ properties.put("Meta Block Index Bytes", Long.toString(metaIndexSize))[ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_103 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_88 $$ String blkID = "Data-Block"[ CD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_103 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)[ CD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ CD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_71 $$ properties.put("Headers Etc Bytes", Long.toString(miscSize))[ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)[ FD ]
Line_107 $$ boolean asAscii = true-->Line_112 $$ asAscii = false[ FD ]
Line_107 $$ boolean asAscii = true-->Line_115 $$ if (!asAscii) [ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_145 $$ int blkLenWidth = Align.calculateWidth(blkLen, metaSize / metaBlkCnt * 10)[ CD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_56 $$ if (e.getCompressionAlgorithm() != Compression.Algorithm.NONE) [ CD ]
Line_87 $$ if (blockCnt > 0) -->Line_98 $$ int recordsWidth = Align.calculateWidth(records, reader.getEntryCount() / blockCnt * 10)[ CD ]
Line_49 $$ if (metaBlkCnt > 0) -->Line_61 $$ if (calculateCompression) [ CD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ CD ]
Line_115 $$ if (!asAscii) -->Line_122 $$ out.print(new String(key, 0, sampleLen))[ CD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_91 $$ String offset = "Offset"-->Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)[ FD ]
Line_56 $$ if (e.getCompressionAlgorithm() != Compression.Algorithm.NONE) -->Line_57 $$ calculateCompression = true[ CD ]
Line_90 $$ int blkIDWidth2 = Align.calculateWidth("", blockCnt)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_153 $$ String blkName = e.getValue().getMetaName()[ FD ]
Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_95 $$ String rawSize = "Raw-Size"-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ CD ]
Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_95 $$ String rawSize = "Raw-Size"-->Line_147 $$ int rawSizeWidth = Align.calculateWidth(rawSize, metaSizeUncompressed / metaBlkCnt * 10)[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_77 $$ if (e.getKey().length() > maxKeyLength) [ CD ]
Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_55 $$ metaSizeUncompressed += e.getRegion().getRawSize()-->Line_62 $$ properties.put("Meta Block Uncompressed Bytes", Long.toString(metaSizeUncompressed))[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_31 $$ properties.put("Comparator", reader.getComparatorName())[ FD ]
Line_149 $$ int compressionWidth = compression.length()-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ CD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ CD ]
Line_103 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_148 $$ String compression = "Compression"-->Line_149 $$ int compressionWidth = compression.length()[ FD ]
Line_103 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)[ CD ]
Line_35 $$ if (blockCnt > 0) -->Line_36 $$ for (int i = 0; i < blockCnt; ++i) [ CD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_132 $$ String name = "Meta-Block"[ CD ]
Line_91 $$ String offset = "Offset"-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_160 $$ IOUtils.cleanup(LOG, reader, fsdis)[ FD ]
Line_98 $$ int recordsWidth = Align.calculateWidth(records, reader.getEntryCount() / blockCnt * 10)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_117 $$ for (int j = 0; j < sampleLen; ++j) -->Line_119 $$ out.printf("%X", b)[ CD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_153 $$ String blkName = e.getValue().getMetaName()[ FD ]
Line_132 $$ String name = "Meta-Block"-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_62 $$ properties.put("Meta Block Uncompressed Bytes", Long.toString(metaSizeUncompressed))[ FD ]
Line_93 $$ String blkLen = "Length"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_109 $$ for (int j = 0; j < sampleLen; ++j) [ CD ]
Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_138 $$ maxNameLen = e.getKey().length()[ FD ]
Line_149 $$ int compressionWidth = compression.length()-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ FD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ CD ]
Line_38 $$ dataSize += region.getCompressedSize()-->Line_41 $$ properties.put("Data Block Bytes", Long.toString(dataSize))[ FD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) [ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_26 $$ properties.put("File Length", Long.toString(length))[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_55 $$ metaSizeUncompressed += e.getRegion().getRawSize()[ CD ]
Line_153 $$ String blkName = e.getValue().getMetaName()-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_77 $$ if (e.getKey().length() > maxKeyLength) [ FD ]
Line_115 $$ if (!asAscii) -->Line_116 $$ out.print("0X")[ CD ]
Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_137 $$ if (e.getKey().length() > maxNameLen) [ CD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_28 $$ properties.put("Record Count", Long.toString(reader.getEntryCount()))[ FD ]
Line_39 $$ dataSizeUncompressed += region.getRawSize()-->Line_43 $$ properties.put("Data Block Uncompressed Bytes", Long.toString(dataSizeUncompressed))[ FD ]
Line_99 $$ String endKey = "End-Key"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_108 $$ int sampleLen = Math.min(maxKeySampleLen, key.length)-->Line_124 $$ if (sampleLen < key.length) [ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_83 $$ out.printf("%s : %s\n", Align.format(e.getKey(), maxKeyLength, Align.LEFT), e.getValue())[ CD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_70 $$ properties.put("Meta Block Index Bytes", Long.toString(metaIndexSize))[ FD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_86 $$ reader.checkTFileDataIndex()[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_134 $$ Set<Map.Entry<String, MetaIndexEntry>> metaBlkEntrySet = reader.readerBCF.metaIndex.index.entrySet()[ CD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_153 $$ String blkName = e.getValue().getMetaName()[ FD ]
Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_34 $$ long dataSize = 0, dataSizeUncompressed = 0-->Line_43 $$ properties.put("Data Block Uncompressed Bytes", Long.toString(dataSizeUncompressed))[ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)[ CD ]
Line_87 $$ if (blockCnt > 0) -->Line_102 $$ for (int i = 0; i < blockCnt; ++i) [ CD ]
Line_108 $$ int sampleLen = Math.min(maxKeySampleLen, key.length)-->Line_117 $$ for (int j = 0; j < sampleLen; ++j) [ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_138 $$ maxNameLen = e.getKey().length()[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_148 $$ String compression = "Compression"-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_31 $$ properties.put("Comparator", reader.getComparatorName())[ FD ]
Line_18 $$ FSDataInputStream fsdis = fs.open(path)-->Line_160 $$ IOUtils.cleanup(LOG, reader, fsdis)[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_44 $$ properties.put("Data Block Compression Ratio", String.format("1:%.1f", (double) dataSizeUncompressed / dataSize))[ FD ]
Line_30 $$ if (reader.isSorted()) -->Line_31 $$ properties.put("Comparator", reader.getComparatorName())[ CD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_104 $$ TFileIndexEntry indexEntry = reader.tfileIndex.getEntry(i)[ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_88 $$ String blkID = "Data-Block"-->Line_89 $$ int blkIDWidth = Align.calculateWidth(blkID, blockCnt)[ FD ]
Line_88 $$ String blkID = "Data-Block"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_110 $$ byte b = key[j]-->Line_119 $$ out.printf("%X", b)[ FD ]
Line_115 $$ if (!asAscii) -->Line_117 $$ for (int j = 0; j < sampleLen; ++j) [ CD ]
Line_134 $$ Set<Map.Entry<String, MetaIndexEntry>> metaBlkEntrySet = reader.readerBCF.metaIndex.index.entrySet()-->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ FD ]
Line_49 $$ if (metaBlkCnt > 0) -->Line_50 $$ Collection<MetaIndexEntry> metaBlks = reader.readerBCF.metaIndex.index.values()[ CD ]
Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_54 $$ metaSize += e.getRegion().getCompressedSize()-->Line_60 $$ properties.put("Meta Block Bytes", Long.toString(metaSize))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_106 $$ byte[] key = indexEntry.key[ CD ]
Line_23 $$ int metaBlkCnt = reader.readerBCF.metaIndex.index.size()-->Line_47 $$ properties.put("Meta Block Count", Integer.toString(metaBlkCnt))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_108 $$ int sampleLen = Math.min(maxKeySampleLen, key.length)[ CD ]
Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_38 $$ dataSize += region.getCompressedSize()[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_76 $$ Map.Entry<String, String> e = it.next()[ FD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_87 $$ if (blockCnt > 0) [ FD ]
Line_17 $$ long length = fs.getFileStatus(path).getLen()-->Line_26 $$ properties.put("File Length", Long.toString(length))[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_100 $$ int endKeyWidth = Math.max(endKey.length(), maxKeySampleLen * 2 + 5)[ CD ]
Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_153 $$ String blkName = e.getValue().getMetaName()[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_91 $$ String offset = "Offset"[ CD ]
Line_48 $$ long metaSize = 0, metaSizeUncompressed = 0-->Line_54 $$ metaSize += e.getRegion().getCompressedSize()[ FD ]
Line_95 $$ String rawSize = "Raw-Size"-->Line_96 $$ int rawSizeWidth = Align.calculateWidth(rawSize, dataSizeUncompressed / blockCnt * 10)[ FD ]
Line_124 $$ if (sampleLen < key.length) -->Line_125 $$ out.print("...")[ CD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_147 $$ int rawSizeWidth = Align.calculateWidth(rawSize, metaSizeUncompressed / metaBlkCnt * 10)[ CD ]
Line_134 $$ Set<Map.Entry<String, MetaIndexEntry>> metaBlkEntrySet = reader.readerBCF.metaIndex.index.entrySet()-->Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_97 $$ String records = "Records"-->Line_98 $$ int recordsWidth = Align.calculateWidth(records, reader.getEntryCount() / blockCnt * 10)[ FD ]
Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_143 $$ int offsetWidth = Align.calculateWidth(offset, length)[ CD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_24 $$ properties.put("BCFile Version", reader.readerBCF.version.toString())[ FD ]
Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_77 $$ if (e.getKey().length() > maxKeyLength) -->Line_78 $$ maxKeyLength = e.getKey().length()[ CD ]
Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_33 $$ properties.put("Data Block Count", Integer.toString(blockCnt))[ FD ]
Line_23 $$ int metaBlkCnt = reader.readerBCF.metaIndex.index.size()-->Line_49 $$ if (metaBlkCnt > 0) [ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_102 $$ for (int i = 0; i < blockCnt; ++i) [ FD ]
Line_94 $$ int blkLenWidth = Align.calculateWidth(blkLen, dataSize / blockCnt * 10)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_61 $$ if (calculateCompression) -->Line_63 $$ properties.put("Meta Block Compression Ratio", String.format("1:%.1f", (double) metaSizeUncompressed / metaSize))[ CD ]
Line_34 $$ long dataSize = 0, dataSizeUncompressed = 0-->Line_41 $$ properties.put("Data Block Bytes", Long.toString(dataSize))[ FD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_102 $$ for (int i = 0; i < blockCnt; ++i) [ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_33 $$ properties.put("Data Block Count", Integer.toString(blockCnt))[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_133 $$ int maxNameLen = 0[ CD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_53 $$ MetaIndexEntry e = it.next()[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_76 $$ Map.Entry<String, String> e = it.next()[ CD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_138 $$ maxNameLen = e.getKey().length()[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_43 $$ properties.put("Data Block Uncompressed Bytes", Long.toString(dataSizeUncompressed))[ FD ]
Line_111 $$ if ((b < 32 && b != 9) || (b == 127)) -->Line_112 $$ asAscii = false[ CD ]
Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_15 $$ Path path = new Path(file)-->Line_17 $$ long length = fs.getFileStatus(path).getLen()[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)[ CD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ CD ]
Line_68 $$ long miscSize = BCFile.Magic.size() * 2 + Long.SIZE / Byte.SIZE + Version.size()-->Line_71 $$ properties.put("Headers Etc Bytes", Long.toString(miscSize))[ FD ]
Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_27 $$ properties.put("Data Compression", reader.readerBCF.getDefaultCompressionName())[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ CD ]
Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_76 $$ Map.Entry<String, String> e = it.next()[ FD ]
Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_136 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_93 $$ String blkLen = "Length"-->Line_145 $$ int blkLenWidth = Align.calculateWidth(blkLen, metaSize / metaBlkCnt * 10)[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_63 $$ properties.put("Meta Block Compression Ratio", String.format("1:%.1f", (double) metaSizeUncompressed / metaSize))[ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_77 $$ if (e.getKey().length() > maxKeyLength) [ FD ]
Line_37 $$ BlockRegion region = reader.readerBCF.dataIndex.getBlockRegionList().get(i)-->Line_39 $$ dataSizeUncompressed += region.getRawSize()[ FD ]
Line_48 $$ long metaSize = 0, metaSizeUncompressed = 0-->Line_55 $$ metaSizeUncompressed += e.getRegion().getRawSize()[ FD ]
Line_74 $$ Set<Map.Entry<String, String>> entrySet = properties.entrySet()-->Line_81 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) [ FD ]
Line_17 $$ long length = fs.getFileStatus(path).getLen()-->Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_25 $$ properties.put("TFile Version", reader.tfileMeta.version.toString())[ FD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_155 $$ String blkCompression = e.getValue().getCompressionAlgorithm().getName()[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_83 $$ out.printf("%s : %s\n", Align.format(e.getKey(), maxKeyLength, Align.LEFT), e.getValue())[ FD ]
Line_48 $$ long metaSize = 0, metaSizeUncompressed = 0-->Line_62 $$ properties.put("Meta Block Uncompressed Bytes", Long.toString(metaSizeUncompressed))[ FD ]
Line_117 $$ for (int j = 0; j < sampleLen; ++j) -->Line_118 $$ byte b = key[i][ CD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_99 $$ String endKey = "End-Key"-->Line_100 $$ int endKeyWidth = Math.max(endKey.length(), maxKeySampleLen * 2 + 5)[ FD ]
Line_48 $$ long metaSize = 0, metaSizeUncompressed = 0-->Line_60 $$ properties.put("Meta Block Bytes", Long.toString(metaSize))[ FD ]
Line_15 $$ Path path = new Path(file)-->Line_18 $$ FSDataInputStream fsdis = fs.open(path)[ FD ]
Line_89 $$ int blkIDWidth = Align.calculateWidth(blkID, blockCnt)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ FD ]
Line_109 $$ for (int j = 0; j < sampleLen; ++j) -->Line_117 $$ for (int j = 0; j < sampleLen; ++j) [ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)[ CD ]
Line_87 $$ if (blockCnt > 0) -->Line_93 $$ String blkLen = "Length"[ CD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_89 $$ int blkIDWidth = Align.calculateWidth(blkID, blockCnt)[ FD ]
Line_49 $$ if (metaBlkCnt > 0) -->Line_60 $$ properties.put("Meta Block Bytes", Long.toString(metaSize))[ CD ]
Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_17 $$ long length = fs.getFileStatus(path).getLen()-->Line_143 $$ int offsetWidth = Align.calculateWidth(offset, length)[ FD ]
Line_34 $$ long dataSize = 0, dataSizeUncompressed = 0-->Line_39 $$ dataSizeUncompressed += region.getRawSize()[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_66 $$ properties.put("Meta-Data Size Ratio", String.format("1:%.1f", (double) dataSize / metaSize))[ FD ]
Line_131 $$ if (metaBlkCnt > 0) -->Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ CD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_29 $$ properties.put("Sorted", Boolean.toString(reader.isSorted()))[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()[ FD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_38 $$ dataSize += region.getCompressedSize()[ CD ]
Line_154 $$ BlockRegion region = e.getValue().getRegion()-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ CD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_83 $$ out.printf("%s : %s\n", Align.format(e.getKey(), maxKeyLength, Align.LEFT), e.getValue())[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_74 $$ Set<Map.Entry<String, String>> entrySet = properties.entrySet()[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_97 $$ String records = "Records"[ CD ]
Line_15 $$ Path path = new Path(file)-->Line_16 $$ FileSystem fs = path.getFileSystem(conf)[ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_28 $$ properties.put("Record Count", Long.toString(reader.getEntryCount()))[ FD ]
Line_78 $$ maxKeyLength = e.getKey().length()-->Line_83 $$ out.printf("%s : %s\n", Align.format(e.getKey(), maxKeyLength, Align.LEFT), e.getValue())[ FD ]
Line_89 $$ int blkIDWidth = Align.calculateWidth(blkID, blockCnt)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_82 $$ Map.Entry<String, String> e = it.next()-->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_115 $$ if (!asAscii) [ CD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_29 $$ properties.put("Sorted", Boolean.toString(reader.isSorted()))[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_82 $$ Map.Entry<String, String> e = it.next()[ FD ]
Line_35 $$ if (blockCnt > 0) -->Line_42 $$ if (!reader.readerBCF.getDefaultCompressionName().equals("none")) [ CD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_54 $$ metaSize += e.getRegion().getCompressedSize()[ FD ]
Line_76 $$ Map.Entry<String, String> e = it.next()-->Line_78 $$ maxKeyLength = e.getKey().length()[ FD ]
Line_100 $$ int endKeyWidth = Math.max(endKey.length(), maxKeySampleLen * 2 + 5)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_151 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) -->Line_153 $$ String blkName = e.getValue().getMetaName()[ CD ]
Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)-->Line_156 $$ out.printf("%s %s %s %s %s\n", Align.format(blkName, nameWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(blkCompression, compressionWidth, Align.LEFT))[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_135 $$ for (Iterator<Map.Entry<String, MetaIndexEntry>> it = metaBlkEntrySet.iterator(); it.hasNext(); ) [ FD ]
Line_133 $$ int maxNameLen = 0-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_137 $$ if (e.getKey().length() > maxNameLen) [ FD ]
Line_22 $$ int blockCnt = reader.readerBCF.getBlockCount()-->Line_35 $$ if (blockCnt > 0) [ FD ]
Line_21 $$ LinkedHashMap<String, String> properties = new LinkedHashMap<String, String>()-->Line_60 $$ properties.put("Meta Block Bytes", Long.toString(metaSize))[ FD ]
Line_118 $$ byte b = key[i]-->Line_119 $$ out.printf("%X", b)[ FD ]
Line_74 $$ Set<Map.Entry<String, String>> entrySet = properties.entrySet()-->Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) [ FD ]
Line_61 $$ if (calculateCompression) -->Line_62 $$ properties.put("Meta Block Uncompressed Bytes", Long.toString(metaSizeUncompressed))[ CD ]
Line_42 $$ if (!reader.readerBCF.getDefaultCompressionName().equals("none")) -->Line_44 $$ properties.put("Data Block Compression Ratio", String.format("1:%.1f", (double) dataSizeUncompressed / dataSize))[ CD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_56 $$ if (e.getCompressionAlgorithm() != Compression.Algorithm.NONE) [ FD ]
Line_16 $$ FileSystem fs = path.getFileSystem(conf)-->Line_17 $$ long length = fs.getFileStatus(path).getLen()[ FD ]
Line_51 $$ boolean calculateCompression = false-->Line_57 $$ calculateCompression = true[ FD ]
Line_109 $$ for (int j = 0; j < sampleLen; ++j) -->Line_111 $$ if ((b < 32 && b != 9) || (b == 127)) [ CD ]
Line_49 $$ if (metaBlkCnt > 0) -->Line_51 $$ boolean calculateCompression = false[ CD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_78 $$ maxKeyLength = e.getKey().length()[ FD ]
Line_108 $$ int sampleLen = Math.min(maxKeySampleLen, key.length)-->Line_109 $$ for (int j = 0; j < sampleLen; ++j) [ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_107 $$ boolean asAscii = true[ CD ]
Line_92 $$ int offsetWidth = Align.calculateWidth(offset, length)-->Line_105 $$ out.printf("%s %s %s %s %s ", Align.format(Align.format(i, blkIDWidth2, Align.ZERO_PADDED), blkIDWidth, Align.LEFT), Align.format(region.getOffset(), offsetWidth, Align.LEFT), Align.format(region.getCompressedSize(), blkLenWidth, Align.LEFT), Align.format(region.getRawSize(), rawSizeWidth, Align.LEFT), Align.format(indexEntry.kvEntries, recordsWidth, Align.LEFT))[ FD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_104 $$ TFileIndexEntry indexEntry = reader.tfileIndex.getEntry(i)[ FD ]
Line_98 $$ int recordsWidth = Align.calculateWidth(records, reader.getEntryCount() / blockCnt * 10)-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_91 $$ String offset = "Offset"-->Line_101 $$ out.printf("%s %s %s %s %s %s\n", Align.format(blkID, blkIDWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(records, recordsWidth, Align.CENTER), Align.format(endKey, endKeyWidth, Align.LEFT))[ FD ]
Line_87 $$ if (blockCnt > 0) -->Line_90 $$ int blkIDWidth2 = Align.calculateWidth("", blockCnt)[ CD ]
Line_141 $$ int nameWidth = Math.max(name.length(), maxNameLen)-->Line_150 $$ out.printf("%s %s %s %s %s\n", Align.format(name, nameWidth, Align.CENTER), Align.format(offset, offsetWidth, Align.CENTER), Align.format(blkLen, blkLenWidth, Align.CENTER), Align.format(rawSize, rawSizeWidth, Align.CENTER), Align.format(compression, compressionWidth, Align.LEFT))[ FD ]
Line_152 $$ Map.Entry<String, MetaIndexEntry> e = it.next()-->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ FD ]
Line_52 $$ for (Iterator<MetaIndexEntry> it = metaBlks.iterator(); it.hasNext(); ) -->Line_75 $$ for (Iterator<Map.Entry<String, String>> it = entrySet.iterator(); it.hasNext(); ) [ FD ]
Line_19 $$ TFile.Reader reader = new TFile.Reader(fsdis, length, conf)-->Line_30 $$ if (reader.isSorted()) [ FD ]
Line_35 $$ if (blockCnt > 0) -->Line_41 $$ properties.put("Data Block Bytes", Long.toString(dataSize))[ CD ]
Line_102 $$ for (int i = 0; i < blockCnt; ++i) -->Line_104 $$ TFileIndexEntry indexEntry = reader.tfileIndex.getEntry(i)[ CD ]
Line_53 $$ MetaIndexEntry e = it.next()-->Line_154 $$ BlockRegion region = e.getValue().getRegion()[ FD ]
Line_137 $$ if (e.getKey().length() > maxNameLen) -->Line_138 $$ maxNameLen = e.getKey().length()[ CD ]
Line_36 $$ for (int i = 0; i < blockCnt; ++i) -->Line_39 $$ dataSizeUncompressed += region.getRawSize()[ CD ]
