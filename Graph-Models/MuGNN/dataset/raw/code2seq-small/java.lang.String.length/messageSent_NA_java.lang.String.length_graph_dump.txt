Line_12 $$ if (MERGE_PATTERN.matcher(message).matches()) -->Line_14 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_19 $$ if (MERGING_DIFFERENCES_PATTERN.matcher(message).matches()) [ FD ]
Line_5 $$ String relativeRepositoryPath = myCvsFileSystem.getRelativeRepositoryPath(normalizePath(pathInRepository))-->Line_6 $$ final File file = myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath))[ FD ]
Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)-->Line_23 $$ String secondRevision = matcher.group(4)[ FD ]
Line_15 $$ String relativeFileName = matcher.group(4)-->Line_16 $$ File file = myCvsFileSystem.getLocalFileSystem().getFile(relativeFileName)[ FD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_10 $$ processMessageWithPostfix(message, CREATED_BY_SECOND_PARTY_POSTFIX1)[ FD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_9 $$ if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX)) [ CD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_11 $$ processMessageWithPostfix(message, CREATED_BY_SECOND_PARTY_POSTFIX2)[ FD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_12 $$ if (MERGE_PATTERN.matcher(message).matches()) [ FD ]
Line_9 $$ if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX)) -->Line_12 $$ if (MERGE_PATTERN.matcher(message).matches()) [ CD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_4 $$ String pathInRepository = message.substring(MERGED_FILE_MESSAGE_PREFIX.length(), message.length() - MERGED_FILE_MESSAGE_POSTFIX.length())[ CD ]
Line_6 $$ final File file = myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath))-->Line_17 $$ ensureFileIsInMap(file)[ FD ]
Line_14 $$ if (matcher.matches()) -->Line_17 $$ ensureFileIsInMap(file)[ CD ]
Line_21 $$ if (matcher.matches()) -->Line_22 $$ String firstRevision = matcher.group(2)[ CD ]
Line_9 $$ if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX)) -->Line_10 $$ processMessageWithPostfix(message, CREATED_BY_SECOND_PARTY_POSTFIX1)[ CD ]
Line_21 $$ if (matcher.matches()) -->Line_23 $$ String secondRevision = matcher.group(4)[ CD ]
Line_19 $$ if (MERGING_DIFFERENCES_PATTERN.matcher(message).matches()) -->Line_21 $$ if (matcher.matches()) [ CD ]
Line_22 $$ String firstRevision = matcher.group(2)-->Line_24 $$ myCurrentMergedFile.addRevisions(firstRevision, secondRevision)[ FD ]
Line_23 $$ String secondRevision = matcher.group(4)-->Line_24 $$ myCurrentMergedFile.addRevisions(firstRevision, secondRevision)[ FD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_4 $$ String pathInRepository = message.substring(MERGED_FILE_MESSAGE_PREFIX.length(), message.length() - MERGED_FILE_MESSAGE_POSTFIX.length())[ FD ]
Line_9 $$ if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX)) -->Line_11 $$ processMessageWithPostfix(message, CREATED_BY_SECOND_PARTY_POSTFIX2)[ CD ]
Line_19 $$ if (MERGING_DIFFERENCES_PATTERN.matcher(message).matches()) -->Line_20 $$ Matcher matcher = MERGING_DIFFERENCES_PATTERN.matcher(message)[ CD ]
Line_6 $$ final File file = myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath))-->Line_8 $$ myCurrentMergedFile = myMergedFiles.get(file)[ FD ]
Line_14 $$ if (matcher.matches()) -->Line_15 $$ String relativeFileName = matcher.group(4)[ CD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_7 $$ ensureFileIsInMap(file)[ CD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) [ CD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_8 $$ myCurrentMergedFile = myMergedFiles.get(file)[ CD ]
Line_12 $$ if (MERGE_PATTERN.matcher(message).matches()) -->Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)[ CD ]
Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)-->Line_14 $$ if (matcher.matches()) [ FD ]
Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)-->Line_15 $$ String relativeFileName = matcher.group(4)[ FD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) [ FD ]
Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)-->Line_22 $$ String firstRevision = matcher.group(2)[ FD ]
Line_12 $$ if (MERGE_PATTERN.matcher(message).matches()) -->Line_19 $$ if (MERGING_DIFFERENCES_PATTERN.matcher(message).matches()) [ CD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)[ FD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_9 $$ if (message.startsWith(CREATED_BY_SECOND_PARTY_PREFIX)) [ FD ]
Line_4 $$ String pathInRepository = message.substring(MERGED_FILE_MESSAGE_PREFIX.length(), message.length() - MERGED_FILE_MESSAGE_POSTFIX.length())-->Line_5 $$ String relativeRepositoryPath = myCvsFileSystem.getRelativeRepositoryPath(normalizePath(pathInRepository))[ FD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_6 $$ final File file = myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath))[ CD ]
Line_13 $$ Matcher matcher = MERGE_PATTERN.matcher(message)-->Line_21 $$ if (matcher.matches()) [ FD ]
Line_14 $$ if (matcher.matches()) -->Line_16 $$ File file = myCvsFileSystem.getLocalFileSystem().getFile(relativeFileName)[ CD ]
Line_2 $$ public void messageSent(String message, final byte[] byteMessage, boolean error, boolean tagged) -->Line_20 $$ Matcher matcher = MERGING_DIFFERENCES_PATTERN.matcher(message)[ FD ]
Line_21 $$ if (matcher.matches()) -->Line_24 $$ myCurrentMergedFile.addRevisions(firstRevision, secondRevision)[ CD ]
Line_6 $$ final File file = myCvsFileSystem.getLocalFileSystem().getFile(removeModuleNameFrom(relativeRepositoryPath))-->Line_7 $$ ensureFileIsInMap(file)[ FD ]
Line_3 $$ if (message.startsWith(MERGED_FILE_MESSAGE_PREFIX)) -->Line_5 $$ String relativeRepositoryPath = myCvsFileSystem.getRelativeRepositoryPath(normalizePath(pathInRepository))[ CD ]
