Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_5 $$ boolean openOfficeEnabled = ParamUtil.getBoolean(actionRequest, "openOfficeEnabled")[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_9 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_GLOBAL_SEARCH_PATH, imageMagickPath)[ CD ]
Line_16 $$ if (name.startsWith("imageMagickLimit")) -->Line_18 $$ String value = ParamUtil.getString(actionRequest, name)[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_12 $$ portletPreferences.setValue(PropsKeys.XUGGLER_ENABLED, String.valueOf(xugglerEnabled))[ FD ]
Line_6 $$ int openOfficePort = ParamUtil.getInteger(actionRequest, "openOfficePort")-->Line_11 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_PORT, String.valueOf(openOfficePort))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_12 $$ portletPreferences.setValue(PropsKeys.XUGGLER_ENABLED, String.valueOf(xugglerEnabled))[ CD ]
Line_18 $$ String value = ParamUtil.getString(actionRequest, name)-->Line_19 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_RESOURCE_LIMIT + key, value)[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_19 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_RESOURCE_LIMIT + key, value)[ FD ]
Line_3 $$ boolean imageMagickEnabled = ParamUtil.getBoolean(actionRequest, "imageMagickEnabled")-->Line_8 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_ENABLED, String.valueOf(imageMagickEnabled))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_4 $$ String imageMagickPath = ParamUtil.getString(actionRequest, "imageMagickPath")[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_8 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_ENABLED, String.valueOf(imageMagickEnabled))[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_14 $$ while (enu.hasMoreElements()) [ CD ]
Line_16 $$ if (name.startsWith("imageMagickLimit")) -->Line_17 $$ String key = StringUtil.toLowerCase(name.substring(16, name.length()))[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_22 $$ portletPreferences.store()[ CD ]
Line_5 $$ boolean openOfficeEnabled = ParamUtil.getBoolean(actionRequest, "openOfficeEnabled")-->Line_10 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_ENABLED, String.valueOf(openOfficeEnabled))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_10 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_ENABLED, String.valueOf(openOfficeEnabled))[ CD ]
Line_13 $$ Enumeration<String> enu = actionRequest.getParameterNames()-->Line_15 $$ String name = enu.nextElement()[ FD ]
Line_4 $$ String imageMagickPath = ParamUtil.getString(actionRequest, "imageMagickPath")-->Line_9 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_GLOBAL_SEARCH_PATH, imageMagickPath)[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_18 $$ String value = ParamUtil.getString(actionRequest, name)[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_6 $$ int openOfficePort = ParamUtil.getInteger(actionRequest, "openOfficePort")[ CD ]
Line_15 $$ String name = enu.nextElement()-->Line_18 $$ String value = ParamUtil.getString(actionRequest, name)[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_13 $$ Enumeration<String> enu = actionRequest.getParameterNames()[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_3 $$ boolean imageMagickEnabled = ParamUtil.getBoolean(actionRequest, "imageMagickEnabled")[ CD ]
Line_13 $$ Enumeration<String> enu = actionRequest.getParameterNames()-->Line_14 $$ while (enu.hasMoreElements()) [ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_24 $$ ImageMagickUtil.reset()[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_6 $$ int openOfficePort = ParamUtil.getInteger(actionRequest, "openOfficePort")[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_23 $$ GhostscriptUtil.reset()[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_11 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_PORT, String.valueOf(openOfficePort))[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_7 $$ boolean xugglerEnabled = ParamUtil.getBoolean(actionRequest, "xugglerEnabled")[ CD ]
Line_16 $$ if (name.startsWith("imageMagickLimit")) -->Line_19 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_RESOURCE_LIMIT + key, value)[ CD ]
Line_15 $$ String name = enu.nextElement()-->Line_16 $$ if (name.startsWith("imageMagickLimit")) [ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_7 $$ boolean xugglerEnabled = ParamUtil.getBoolean(actionRequest, "xugglerEnabled")[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_10 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_ENABLED, String.valueOf(openOfficeEnabled))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_13 $$ Enumeration<String> enu = actionRequest.getParameterNames()[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_8 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_ENABLED, String.valueOf(imageMagickEnabled))[ FD ]
Line_7 $$ boolean xugglerEnabled = ParamUtil.getBoolean(actionRequest, "xugglerEnabled")-->Line_12 $$ portletPreferences.setValue(PropsKeys.XUGGLER_ENABLED, String.valueOf(xugglerEnabled))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_5 $$ boolean openOfficeEnabled = ParamUtil.getBoolean(actionRequest, "openOfficeEnabled")[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_9 $$ portletPreferences.setValue(PropsKeys.IMAGEMAGICK_GLOBAL_SEARCH_PATH, imageMagickPath)[ FD ]
Line_14 $$ while (enu.hasMoreElements()) -->Line_15 $$ String name = enu.nextElement()[ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_22 $$ portletPreferences.store()[ FD ]
Line_14 $$ while (enu.hasMoreElements()) -->Line_16 $$ if (name.startsWith("imageMagickLimit")) [ CD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_11 $$ portletPreferences.setValue(PropsKeys.OPENOFFICE_SERVER_PORT, String.valueOf(openOfficePort))[ FD ]
Line_15 $$ String name = enu.nextElement()-->Line_17 $$ String key = StringUtil.toLowerCase(name.substring(16, name.length()))[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_3 $$ boolean imageMagickEnabled = ParamUtil.getBoolean(actionRequest, "imageMagickEnabled")[ FD ]
Line_2 $$ protected void updateExternalServices(ActionRequest actionRequest, PortletPreferences portletPreferences) throws Exception -->Line_4 $$ String imageMagickPath = ParamUtil.getString(actionRequest, "imageMagickPath")[ FD ]
