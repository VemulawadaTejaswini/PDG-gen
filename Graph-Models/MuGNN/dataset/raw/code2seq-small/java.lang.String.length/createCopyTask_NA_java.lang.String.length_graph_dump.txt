Line_5 $$ final PatternSetRef resourcePatternsPatternSet = new PatternSetRef(BuildProperties.PROPERTY_COMPILER_RESOURCE_PATTERNS)-->Line_19 $$ fileSet.add(resourcePatternsPatternSet)[ FD ]
Line_8 $$ final Map<String, Copy> outputDirToTaskMap = new HashMap<String, Copy>()-->Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)[ FD ]
Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))-->Line_19 $$ fileSet.add(resourcePatternsPatternSet)[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_4 $$ final PatternSetRef excludes = CompilerExcludes.isAvailable(project) ? new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(chunk.getName())) : null-->Line_21 $$ if (excludes != null) [ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_3 $$ final Tag filesSelector = new Tag("type", Couple.of("type", "file"))[ CD ]
Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))-->Line_22 $$ fileSet.add(excludes)[ FD ]
Line_13 $$ if (copy == null) -->Line_14 $$ copy = new Copy(targetDir)[ CD ]
Line_4 $$ final PatternSetRef excludes = CompilerExcludes.isAvailable(project) ? new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(chunk.getName())) : null-->Line_22 $$ fileSet.add(excludes)[ FD ]
Line_9 $$ for (final VirtualFile root : sourceRoots) -->Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))[ FD ]
Line_14 $$ copy = new Copy(targetDir)-->Line_24 $$ copy.add(fileSet)[ FD ]
Line_21 $$ if (excludes != null) -->Line_22 $$ fileSet.add(excludes)[ CD ]
Line_10 $$ final String packagePrefix = fileIndex.getPackageNameByDirectory(root)-->Line_11 $$ final String targetDir = packagePrefix != null && packagePrefix.length() > 0 ? toDir + "/" + packagePrefix.replace('.', '/') : toDir[ FD ]
Line_13 $$ if (copy == null) -->Line_16 $$ composite.add(copy)[ CD ]
Line_8 $$ final Map<String, Copy> outputDirToTaskMap = new HashMap<String, Copy>()-->Line_15 $$ outputDirToTaskMap.put(targetDir, copy)[ FD ]
Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))-->Line_20 $$ fileSet.add(filesSelector)[ FD ]
Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)-->Line_15 $$ outputDirToTaskMap.put(targetDir, copy)[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_26 $$ return composite[ CD ]
Line_3 $$ final Tag filesSelector = new Tag("type", Couple.of("type", "file"))-->Line_20 $$ fileSet.add(filesSelector)[ FD ]
Line_14 $$ copy = new Copy(targetDir)-->Line_15 $$ outputDirToTaskMap.put(targetDir, copy)[ FD ]
Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)-->Line_16 $$ composite.add(copy)[ FD ]
Line_11 $$ final String targetDir = packagePrefix != null && packagePrefix.length() > 0 ? toDir + "/" + packagePrefix.replace('.', '/') : toDir-->Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_4 $$ final PatternSetRef excludes = CompilerExcludes.isAvailable(project) ? new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(chunk.getName())) : null[ CD ]
Line_14 $$ copy = new Copy(targetDir)-->Line_16 $$ composite.add(copy)[ FD ]
Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)-->Line_13 $$ if (copy == null) [ FD ]
Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))-->Line_24 $$ copy.add(fileSet)[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_8 $$ final Map<String, Copy> outputDirToTaskMap = new HashMap<String, Copy>()[ CD ]
Line_9 $$ for (final VirtualFile root : sourceRoots) -->Line_10 $$ final String packagePrefix = fileIndex.getPackageNameByDirectory(root)[ FD ]
Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)-->Line_24 $$ copy.add(fileSet)[ FD ]
Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_10 $$ final String packagePrefix = fileIndex.getPackageNameByDirectory(root)[ FD ]
Line_11 $$ final String targetDir = packagePrefix != null && packagePrefix.length() > 0 ? toDir + "/" + packagePrefix.replace('.', '/') : toDir-->Line_15 $$ outputDirToTaskMap.put(targetDir, copy)[ FD ]
Line_7 $$ final CompositeGenerator composite = new CompositeGenerator()-->Line_16 $$ composite.add(copy)[ FD ]
Line_13 $$ if (copy == null) -->Line_15 $$ outputDirToTaskMap.put(targetDir, copy)[ CD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_18 $$ final FileSet fileSet = new FileSet(GenerationUtils.toRelativePath(root, baseDir, BuildProperties.getModuleChunkBasedirProperty(chunk), genOptions))[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_7 $$ final CompositeGenerator composite = new CompositeGenerator()[ CD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_5 $$ final PatternSetRef resourcePatternsPatternSet = new PatternSetRef(BuildProperties.PROPERTY_COMPILER_RESOURCE_PATTERNS)[ CD ]
Line_12 $$ Copy copy = outputDirToTaskMap.get(targetDir)-->Line_14 $$ copy = new Copy(targetDir)[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_4 $$ final PatternSetRef excludes = CompilerExcludes.isAvailable(project) ? new PatternSetRef(BuildProperties.getExcludedFromCompilationProperty(chunk.getName())) : null[ FD ]
Line_2 $$ private static Generator createCopyTask(final Project project, ModuleChunk chunk, VirtualFile[] sourceRoots, String toDir, File baseDir, final GenerationOptions genOptions) -->Line_6 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
