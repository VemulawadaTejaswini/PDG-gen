Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_4 $$ if (!(target instanceof PsiClass)) [ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_9 $$ if (className == null || !className.endsWith("Listener")) [ CD ]
Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)-->Line_25 $$ final PsiReferenceList implementsList = adapterClass.getImplementsList()[ FD ]
Line_38 $$ if (!adapterImplementsListener) -->Line_39 $$ return[ CD ]
Line_7 $$ final PsiClass implementsClass = (PsiClass) target-->Line_8 $$ final String className = implementsClass.getQualifiedName()[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_7 $$ final PsiClass implementsClass = (PsiClass) target[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_22 $$ if (!adapterClass.hasModifierProperty(PsiModifier.ABSTRACT)) [ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_38 $$ if (!adapterImplementsListener) [ CD ]
Line_36 $$ adapterImplementsListener = true-->Line_38 $$ if (!adapterImplementsListener) [ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_25 $$ final PsiReferenceList implementsList = adapterClass.getImplementsList()[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_29 $$ final PsiJavaCodeReferenceElement[] referenceElements = implementsList.getReferenceElements()[ CD ]
Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)-->Line_22 $$ if (!adapterClass.hasModifierProperty(PsiModifier.ABSTRACT)) [ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_41 $$ if (checkForEmptyMethods) [ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_16 $$ if (adapterClass == null) [ CD ]
Line_12 $$ final String adapterName = className.substring(0, className.length() - 8) + "Adapter"-->Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)[ FD ]
Line_42 $$ boolean emptyMethodFound = false-->Line_56 $$ if (!emptyMethodFound) [ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_60 $$ registerError(implementsReference, aClass, adapterClass)[ FD ]
Line_19 $$ if (aClass.equals(adapterClass)) -->Line_20 $$ return[ CD ]
Line_41 $$ if (checkForEmptyMethods) -->Line_42 $$ boolean emptyMethodFound = false[ CD ]
Line_31 $$ for (PsiJavaCodeReferenceElement referenceElement : referenceElements) -->Line_32 $$ final PsiElement implementsTarget = referenceElement.resolve()[ FD ]
Line_44 $$ for (PsiMethod method : methods) -->Line_49 $$ final PsiMethod[] superMethods = method.findSuperMethods(implementsClass)[ FD ]
Line_32 $$ final PsiElement implementsTarget = referenceElement.resolve()-->Line_33 $$ if (!implementsClass.equals(implementsTarget)) [ FD ]
Line_7 $$ final PsiClass implementsClass = (PsiClass) target-->Line_33 $$ if (!implementsClass.equals(implementsTarget)) [ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_3 $$ final PsiElement target = implementsReference.resolve()[ FD ]
Line_53 $$ emptyMethodFound = true-->Line_56 $$ if (!emptyMethodFound) [ FD ]
Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)-->Line_19 $$ if (aClass.equals(adapterClass)) [ FD ]
Line_25 $$ final PsiReferenceList implementsList = adapterClass.getImplementsList()-->Line_26 $$ if (implementsList == null) [ FD ]
Line_25 $$ final PsiReferenceList implementsList = adapterClass.getImplementsList()-->Line_29 $$ final PsiJavaCodeReferenceElement[] referenceElements = implementsList.getReferenceElements()[ FD ]
Line_41 $$ if (checkForEmptyMethods) -->Line_56 $$ if (!emptyMethodFound) [ CD ]
Line_44 $$ for (PsiMethod method : methods) -->Line_45 $$ final PsiCodeBlock body = method.getBody()[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_43 $$ final PsiMethod[] methods = aClass.getMethods()[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_8 $$ final String className = implementsClass.getQualifiedName()[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_14 $$ final GlobalSearchScope scope = implementsClass.getResolveScope()[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_19 $$ if (aClass.equals(adapterClass)) [ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_12 $$ final String adapterName = className.substring(0, className.length() - 8) + "Adapter"[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_26 $$ if (implementsList == null) [ CD ]
Line_41 $$ if (checkForEmptyMethods) -->Line_43 $$ final PsiMethod[] methods = aClass.getMethods()[ CD ]
Line_7 $$ final PsiClass implementsClass = (PsiClass) target-->Line_49 $$ final PsiMethod[] superMethods = method.findSuperMethods(implementsClass)[ FD ]
Line_42 $$ boolean emptyMethodFound = false-->Line_53 $$ emptyMethodFound = true[ FD ]
Line_26 $$ if (implementsList == null) -->Line_27 $$ return[ CD ]
Line_45 $$ final PsiCodeBlock body = method.getBody()-->Line_46 $$ if (!ControlFlowUtils.isEmptyCodeBlock(body)) [ FD ]
Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(aClass.getProject())-->Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)[ FD ]
Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)-->Line_16 $$ if (adapterClass == null) [ FD ]
Line_30 $$ boolean adapterImplementsListener = false-->Line_36 $$ adapterImplementsListener = true[ FD ]
Line_7 $$ final PsiClass implementsClass = (PsiClass) target-->Line_14 $$ final GlobalSearchScope scope = implementsClass.getResolveScope()[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_19 $$ if (aClass.equals(adapterClass)) [ CD ]
Line_16 $$ if (adapterClass == null) -->Line_17 $$ return[ CD ]
Line_22 $$ if (!adapterClass.hasModifierProperty(PsiModifier.ABSTRACT)) -->Line_23 $$ return[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)[ CD ]
Line_9 $$ if (className == null || !className.endsWith("Listener")) -->Line_10 $$ return[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(aClass.getProject())[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_3 $$ final PsiElement target = implementsReference.resolve()[ CD ]
Line_14 $$ final GlobalSearchScope scope = implementsClass.getResolveScope()-->Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)[ FD ]
Line_8 $$ final String className = implementsClass.getQualifiedName()-->Line_12 $$ final String adapterName = className.substring(0, className.length() - 8) + "Adapter"[ FD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_13 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(aClass.getProject())[ CD ]
Line_15 $$ final PsiClass adapterClass = psiFacade.findClass(adapterName, scope)-->Line_60 $$ registerError(implementsReference, aClass, adapterClass)[ FD ]
Line_56 $$ if (!emptyMethodFound) -->Line_57 $$ return[ CD ]
Line_4 $$ if (!(target instanceof PsiClass)) -->Line_5 $$ return[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_30 $$ boolean adapterImplementsListener = false[ CD ]
Line_2 $$ private void checkReference(@NotNull PsiClass aClass, @NotNull PsiJavaCodeReferenceElement implementsReference) -->Line_60 $$ registerError(implementsReference, aClass, adapterClass)[ CD ]
Line_30 $$ boolean adapterImplementsListener = false-->Line_38 $$ if (!adapterImplementsListener) [ FD ]
Line_8 $$ final String className = implementsClass.getQualifiedName()-->Line_9 $$ if (className == null || !className.endsWith("Listener")) [ FD ]
