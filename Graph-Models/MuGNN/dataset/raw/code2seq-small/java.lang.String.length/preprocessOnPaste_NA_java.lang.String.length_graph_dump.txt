Line_20 $$ for (int i = 0; i < lines.length; i++) -->Line_21 $$ buffer.append(escapeCharCharacters(lines[i], token))[ CD ]
Line_15 $$ if (isStringLiteral(token)) -->Line_20 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_15 $$ if (isStringLiteral(token)) -->Line_16 $$ StringBuilder buffer = new StringBuilder(text.length())[ CD ]
Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_29 $$ if (isCharLiteral(token)) [ FD ]
Line_15 $$ if (isStringLiteral(token)) -->Line_29 $$ if (isCharLiteral(token)) [ CD ]
Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_15 $$ if (isStringLiteral(token)) [ FD ]
Line_10 $$ final int selectionEnd = selectionModel.getSelectionEnd()-->Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)[ FD ]
Line_20 $$ for (int i = 0; i < lines.length; i++) -->Line_22 $$ if (i != lines.length - 1) [ CD ]
Line_28 $$ text = buffer.toString()-->Line_30 $$ return escapeCharCharacters(text, token)[ FD ]
Line_16 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_25 $$ buffer.append("\\n")[ FD ]
Line_5 $$ final Document document = editor.getDocument()-->Line_6 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_21 $$ buffer.append(escapeCharCharacters(lines[i], token))[ FD ]
Line_20 $$ for (int i = 0; i < lines.length; i++) -->Line_22 $$ if (i != lines.length - 1) [ FD ]
Line_22 $$ if (i != lines.length - 1) -->Line_23 $$ buffer.append(breaker)[ CD ]
Line_15 $$ if (isStringLiteral(token)) -->Line_28 $$ text = buffer.toString()[ CD ]
Line_22 $$ if (i != lines.length - 1) -->Line_24 $$ if (text.endsWith("\n")) [ CD ]
Line_16 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_23 $$ buffer.append(breaker)[ FD ]
Line_29 $$ if (isCharLiteral(token)) -->Line_30 $$ return escapeCharCharacters(text, token)[ CD ]
Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_12 $$ if (token == null) [ FD ]
Line_15 $$ if (isStringLiteral(token)) -->Line_19 $$ final String[] lines = LineTokenizer.tokenize(text.toCharArray(), false, true)[ CD ]
Line_7 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_10 $$ final int selectionEnd = selectionModel.getSelectionEnd()[ FD ]
Line_12 $$ if (token == null) -->Line_13 $$ return text[ CD ]
Line_16 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_28 $$ text = buffer.toString()[ FD ]
Line_11 $$ PsiElement token = findLiteralTokenType(file, selectionStart, selectionEnd)-->Line_30 $$ return escapeCharCharacters(text, token)[ FD ]
Line_24 $$ if (text.endsWith("\n")) -->Line_25 $$ buffer.append("\\n")[ CD ]
Line_16 $$ StringBuilder buffer = new StringBuilder(text.length())-->Line_21 $$ buffer.append(escapeCharCharacters(lines[i], token))[ FD ]
