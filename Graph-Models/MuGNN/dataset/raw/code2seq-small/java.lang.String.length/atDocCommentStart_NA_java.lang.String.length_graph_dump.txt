Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_11 $$ if (pyString != null) [ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_3 $$ if (firstQuoteOffset < 0 || firstQuoteOffset > document.getTextLength() - 3) [ FD ]
Line_11 $$ if (pyString != null) -->Line_13 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(nodeText)[ CD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_6 $$ final String quotes = document.getText(TextRange.from(firstQuoteOffset, 3))[ FD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_23 $$ if (error != null) [ CD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_18 $$ PsiErrorElement error = PsiTreeUtil.getNextSiblingOfType(pyString, PsiErrorElement.class)[ CD ]
Line_12 $$ String nodeText = element.getText()-->Line_13 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(nodeText)[ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_11 $$ if (pyString != null) [ CD ]
Line_18 $$ PsiErrorElement error = PsiTreeUtil.getNextSiblingOfType(pyString, PsiErrorElement.class)-->Line_23 $$ if (error != null) [ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_29 $$ final String docstringIndent = PyIndentUtil.getLineIndent(document, document.getLineNumber(firstQuoteOffset))[ FD ]
Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_18 $$ PsiErrorElement error = PsiTreeUtil.getNextSiblingOfType(pyString, PsiErrorElement.class)[ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) [ FD ]
Line_18 $$ PsiErrorElement error = PsiTreeUtil.getNextSiblingOfType(pyString, PsiErrorElement.class)-->Line_19 $$ if (error != null) [ FD ]
Line_7 $$ if (!quotes.equals("\"\"\"") && !quotes.equals("'''")) -->Line_8 $$ return false[ CD ]
Line_30 $$ for (String line : LineTokenizer.tokenizeIntoList(nodeText, false)) -->Line_31 $$ final String lineIndent = (String) PyIndentUtil.getLineIndent(line)[ FD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_29 $$ final String docstringIndent = PyIndentUtil.getLineIndent(document, document.getLineNumber(firstQuoteOffset))[ CD ]
Line_6 $$ final String quotes = document.getText(TextRange.from(firstQuoteOffset, 3))-->Line_26 $$ if (nodeText.length() < 6 || !nodeText.endsWith(quotes)) [ FD ]
Line_14 $$ nodeText = nodeText.substring(prefixLength)-->Line_26 $$ if (nodeText.length() < 6 || !nodeText.endsWith(quotes)) [ FD ]
Line_31 $$ final String lineIndent = (String) PyIndentUtil.getLineIndent(line)-->Line_33 $$ if ((lineContent.startsWith("def ") || lineContent.startsWith("class ")) && docstringIndent.length() > lineIndent.length() && docstringIndent.startsWith(lineIndent)) [ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)[ FD ]
Line_12 $$ String nodeText = element.getText()-->Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) [ FD ]
Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) -->Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) [ CD ]
Line_11 $$ if (pyString != null) -->Line_14 $$ nodeText = nodeText.substring(prefixLength)[ CD ]
Line_12 $$ String nodeText = element.getText()-->Line_30 $$ for (String line : LineTokenizer.tokenizeIntoList(nodeText, false)) [ FD ]
Line_23 $$ if (error != null) -->Line_24 $$ return true[ CD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_26 $$ if (nodeText.length() < 6 || !nodeText.endsWith(quotes)) [ CD ]
Line_30 $$ for (String line : LineTokenizer.tokenizeIntoList(nodeText, false)) -->Line_32 $$ final String lineContent = line.substring(lineIndent.length())[ FD ]
Line_3 $$ if (firstQuoteOffset < 0 || firstQuoteOffset > document.getTextLength() - 3) -->Line_4 $$ return false[ CD ]
Line_32 $$ final String lineContent = line.substring(lineIndent.length())-->Line_33 $$ if ((lineContent.startsWith("def ") || lineContent.startsWith("class ")) && docstringIndent.length() > lineIndent.length() && docstringIndent.startsWith(lineIndent)) [ FD ]
Line_29 $$ final String docstringIndent = PyIndentUtil.getLineIndent(document, document.getLineNumber(firstQuoteOffset))-->Line_33 $$ if ((lineContent.startsWith("def ") || lineContent.startsWith("class ")) && docstringIndent.length() > lineIndent.length() && docstringIndent.startsWith(lineIndent)) [ FD ]
Line_31 $$ final String lineIndent = (String) PyIndentUtil.getLineIndent(line)-->Line_32 $$ final String lineContent = line.substring(lineIndent.length())[ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_12 $$ String nodeText = element.getText()[ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_6 $$ final String quotes = document.getText(TextRange.from(firstQuoteOffset, 3))[ CD ]
Line_11 $$ if (pyString != null) -->Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) [ CD ]
Line_11 $$ if (pyString != null) -->Line_12 $$ String nodeText = element.getText()[ CD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_3 $$ if (firstQuoteOffset < 0 || firstQuoteOffset > document.getTextLength() - 3) [ CD ]
Line_18 $$ PsiErrorElement error = PsiTreeUtil.getNextSiblingOfType(pyString, PsiErrorElement.class)-->Line_22 $$ error = PsiTreeUtil.getNextSiblingOfType(pyString.getParent(), PsiErrorElement.class)[ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_7 $$ if (!quotes.equals("\"\"\"") && !quotes.equals("'''")) [ CD ]
Line_14 $$ nodeText = nodeText.substring(prefixLength)-->Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) [ FD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_19 $$ if (error != null) [ CD ]
Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) -->Line_22 $$ error = PsiTreeUtil.getNextSiblingOfType(pyString.getParent(), PsiErrorElement.class)[ CD ]
Line_22 $$ error = PsiTreeUtil.getNextSiblingOfType(pyString.getParent(), PsiErrorElement.class)-->Line_23 $$ if (error != null) [ FD ]
Line_14 $$ nodeText = nodeText.substring(prefixLength)-->Line_30 $$ for (String line : LineTokenizer.tokenizeIntoList(nodeText, false)) [ FD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)[ CD ]
Line_15 $$ final String literalText = pyString.getText()-->Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) [ FD ]
Line_6 $$ final String quotes = document.getText(TextRange.from(firstQuoteOffset, 3))-->Line_7 $$ if (!quotes.equals("\"\"\"") && !quotes.equals("'''")) [ FD ]
Line_26 $$ if (nodeText.length() < 6 || !nodeText.endsWith(quotes)) -->Line_27 $$ return true[ CD ]
Line_2 $$ public static boolean atDocCommentStart(@NotNull PsiElement element, int firstQuoteOffset, @NotNull Document document) -->Line_40 $$ return false[ CD ]
Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_22 $$ error = PsiTreeUtil.getNextSiblingOfType(pyString.getParent(), PsiErrorElement.class)[ FD ]
Line_33 $$ if ((lineContent.startsWith("def ") || lineContent.startsWith("class ")) && docstringIndent.length() > lineIndent.length() && docstringIndent.startsWith(lineIndent)) -->Line_34 $$ return true[ CD ]
Line_11 $$ if (pyString != null) -->Line_15 $$ final String literalText = pyString.getText()[ CD ]
Line_13 $$ final int prefixLength = PyStringLiteralExpressionImpl.getPrefixLength(nodeText)-->Line_14 $$ nodeText = nodeText.substring(prefixLength)[ FD ]
Line_6 $$ final String quotes = document.getText(TextRange.from(firstQuoteOffset, 3))-->Line_16 $$ if (literalText.endsWith(nodeText) && nodeText.startsWith(quotes)) [ FD ]
Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_15 $$ final String literalText = pyString.getText()[ FD ]
Line_19 $$ if (error != null) -->Line_20 $$ return true[ CD ]
Line_12 $$ String nodeText = element.getText()-->Line_14 $$ nodeText = nodeText.substring(prefixLength)[ FD ]
Line_12 $$ String nodeText = element.getText()-->Line_26 $$ if (nodeText.length() < 6 || !nodeText.endsWith(quotes)) [ FD ]
Line_10 $$ final PyStringLiteralExpression pyString = DocStringUtil.getParentDefinitionDocString(element)-->Line_17 $$ if (firstQuoteOffset == pyString.getTextOffset() + prefixLength) [ FD ]
