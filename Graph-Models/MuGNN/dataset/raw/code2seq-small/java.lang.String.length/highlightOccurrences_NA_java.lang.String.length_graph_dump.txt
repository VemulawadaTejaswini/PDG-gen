Line_7 $$ int i = -1-->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ FD ]
Line_8 $$ while (true) -->Line_9 $$ int nextOccurrence = StringUtil.indexOfIgnoreCase(documentText, filter, i + 1)[ CD ]
Line_3 $$ final HighlightManager highlightManager = HighlightManager.getInstance(project)-->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ FD ]
Line_7 $$ int i = -1-->Line_13 $$ i = nextOccurrence[ FD ]
Line_9 $$ int nextOccurrence = StringUtil.indexOfIgnoreCase(documentText, filter, i + 1)-->Line_10 $$ if (nextOccurrence < 0) [ FD ]
Line_4 $$ EditorColorsManager colorManager = EditorColorsManager.getInstance()-->Line_5 $$ final TextAttributes attributes = colorManager.getGlobalScheme().getAttributes(EditorColors.TEXT_SEARCH_RESULT_ATTRIBUTES)[ FD ]
Line_8 $$ while (true) -->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_6 $$ String documentText = editor.getDocument().getText()[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_7 $$ int i = -1[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_5 $$ final TextAttributes attributes = colorManager.getGlobalScheme().getAttributes(EditorColors.TEXT_SEARCH_RESULT_ATTRIBUTES)[ CD ]
Line_6 $$ String documentText = editor.getDocument().getText()-->Line_9 $$ int nextOccurrence = StringUtil.indexOfIgnoreCase(documentText, filter, i + 1)[ FD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_3 $$ final HighlightManager highlightManager = HighlightManager.getInstance(project)[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_8 $$ while (true) [ CD ]
Line_5 $$ final TextAttributes attributes = colorManager.getGlobalScheme().getAttributes(EditorColors.TEXT_SEARCH_RESULT_ATTRIBUTES)-->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ FD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_3 $$ final HighlightManager highlightManager = HighlightManager.getInstance(project)[ FD ]
Line_8 $$ while (true) -->Line_10 $$ if (nextOccurrence < 0) [ CD ]
Line_9 $$ int nextOccurrence = StringUtil.indexOfIgnoreCase(documentText, filter, i + 1)-->Line_13 $$ i = nextOccurrence[ FD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_4 $$ EditorColorsManager colorManager = EditorColorsManager.getInstance()[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ FD ]
Line_8 $$ while (true) -->Line_13 $$ i = nextOccurrence[ CD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_6 $$ String documentText = editor.getDocument().getText()[ FD ]
Line_13 $$ i = nextOccurrence-->Line_14 $$ highlightManager.addOccurrenceHighlight(editor, i, i + filter.length(), attributes, HighlightManager.HIDE_BY_TEXT_CHANGE, null, null)[ FD ]
Line_2 $$ private static void highlightOccurrences(String filter, Project project, Editor editor) -->Line_9 $$ int nextOccurrence = StringUtil.indexOfIgnoreCase(documentText, filter, i + 1)[ FD ]
