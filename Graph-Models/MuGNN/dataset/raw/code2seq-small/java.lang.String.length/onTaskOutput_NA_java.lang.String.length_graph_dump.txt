Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_12 $$ String errorMessage = text.substring(start)[ FD ]
Line_4 $$ final Project project = id.findProject()-->Line_5 $$ if (project != null) [ FD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_24 $$ ExternalSystemNotificationManager.getInstance(project).showNotification(id.getProjectSystemId(), notification)[ CD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) [ FD ]
Line_10 $$ int start = (GROUP_TAG.length() * 2) + group.length()-->Line_19 $$ errorMessage = text.substring(start).replaceAll(EOL_TAG, "\n")[ FD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_8 $$ if (StringUtil.isEmpty(group))[ CD ]
Line_10 $$ int start = (GROUP_TAG.length() * 2) + group.length()-->Line_16 $$ start += (NAV_TAG.length() * 2) + path.length()[ FD ]
Line_7 $$ final String group = substringBetween(text, GROUP_TAG, GROUP_TAG)-->Line_10 $$ int start = (GROUP_TAG.length() * 2) + group.length()[ FD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_24 $$ ExternalSystemNotificationManager.getInstance(project).showNotification(id.getProjectSystemId(), notification)[ FD ]
Line_13 $$ if (StringUtil.startsWith(errorMessage, NAV_TAG)) -->Line_15 $$ if (!StringUtil.isEmpty(path)) [ CD ]
Line_8 $$ if (StringUtil.isEmpty(group))-->Line_9 $$ return[ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_10 $$ int start = (GROUP_TAG.length() * 2) + group.length()[ CD ]
Line_11 $$ String path = null-->Line_16 $$ start += (NAV_TAG.length() * 2) + path.length()[ FD ]
Line_21 $$ if (path != null) -->Line_22 $$ notification.setNavigatable(new MyNavigatable(new File(path), project))[ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_7 $$ final String group = substringBetween(text, GROUP_TAG, GROUP_TAG)[ CD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_7 $$ final String group = substringBetween(text, GROUP_TAG, GROUP_TAG)[ FD ]
Line_10 $$ int start = (GROUP_TAG.length() * 2) + group.length()-->Line_12 $$ String errorMessage = text.substring(start)[ FD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_4 $$ final Project project = id.findProject()[ FD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_3 $$ if (!stdOut && !StringUtil.isEmpty(text) && GradleConstants.SYSTEM_ID.getId().equals(id.getProjectSystemId().getId()) && id.getType() == ExternalSystemTaskType.RESOLVE_PROJECT) [ FD ]
Line_13 $$ if (StringUtil.startsWith(errorMessage, NAV_TAG)) -->Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)[ CD ]
Line_12 $$ String errorMessage = text.substring(start)-->Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)[ FD ]
Line_12 $$ String errorMessage = text.substring(start)-->Line_19 $$ errorMessage = text.substring(start).replaceAll(EOL_TAG, "\n")[ FD ]
Line_20 $$ NotificationData notification = new NotificationData(group, errorMessage, NotificationCategory.WARNING, NotificationSource.PROJECT_SYNC)-->Line_22 $$ notification.setNavigatable(new MyNavigatable(new File(path), project))[ FD ]
Line_7 $$ final String group = substringBetween(text, GROUP_TAG, GROUP_TAG)-->Line_8 $$ if (StringUtil.isEmpty(group))[ FD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_11 $$ String path = null[ CD ]
Line_4 $$ final Project project = id.findProject()-->Line_24 $$ ExternalSystemNotificationManager.getInstance(project).showNotification(id.getProjectSystemId(), notification)[ FD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_20 $$ NotificationData notification = new NotificationData(group, errorMessage, NotificationCategory.WARNING, NotificationSource.PROJECT_SYNC)[ CD ]
Line_5 $$ if (project != null) -->Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) [ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_13 $$ if (StringUtil.startsWith(errorMessage, NAV_TAG)) [ CD ]
Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)-->Line_15 $$ if (!StringUtil.isEmpty(path)) [ FD ]
Line_15 $$ if (!StringUtil.isEmpty(path)) -->Line_16 $$ start += (NAV_TAG.length() * 2) + path.length()[ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_12 $$ String errorMessage = text.substring(start)[ CD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_19 $$ errorMessage = text.substring(start).replaceAll(EOL_TAG, "\n")[ FD ]
Line_11 $$ String path = null-->Line_21 $$ if (path != null) [ FD ]
Line_3 $$ if (!stdOut && !StringUtil.isEmpty(text) && GradleConstants.SYSTEM_ID.getId().equals(id.getProjectSystemId().getId()) && id.getType() == ExternalSystemTaskType.RESOLVE_PROJECT) -->Line_5 $$ if (project != null) [ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_21 $$ if (path != null) [ CD ]
Line_12 $$ String errorMessage = text.substring(start)-->Line_13 $$ if (StringUtil.startsWith(errorMessage, NAV_TAG)) [ FD ]
Line_3 $$ if (!stdOut && !StringUtil.isEmpty(text) && GradleConstants.SYSTEM_ID.getId().equals(id.getProjectSystemId().getId()) && id.getType() == ExternalSystemTaskType.RESOLVE_PROJECT) -->Line_4 $$ final Project project = id.findProject()[ CD ]
Line_6 $$ if (StringUtil.startsWith(text, GROUP_TAG)) -->Line_19 $$ errorMessage = text.substring(start).replaceAll(EOL_TAG, "\n")[ CD ]
Line_16 $$ start += (NAV_TAG.length() * 2) + path.length()-->Line_19 $$ errorMessage = text.substring(start).replaceAll(EOL_TAG, "\n")[ FD ]
Line_11 $$ String path = null-->Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)[ FD ]
Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)-->Line_16 $$ start += (NAV_TAG.length() * 2) + path.length()[ FD ]
Line_20 $$ NotificationData notification = new NotificationData(group, errorMessage, NotificationCategory.WARNING, NotificationSource.PROJECT_SYNC)-->Line_24 $$ ExternalSystemNotificationManager.getInstance(project).showNotification(id.getProjectSystemId(), notification)[ FD ]
Line_11 $$ String path = null-->Line_15 $$ if (!StringUtil.isEmpty(path)) [ FD ]
Line_2 $$ public void onTaskOutput(@NotNull ExternalSystemTaskId id, @NotNull String text, boolean stdOut) -->Line_3 $$ if (!stdOut && !StringUtil.isEmpty(text) && GradleConstants.SYSTEM_ID.getId().equals(id.getProjectSystemId().getId()) && id.getType() == ExternalSystemTaskType.RESOLVE_PROJECT) [ CD ]
Line_14 $$ path = substringBetween(errorMessage, NAV_TAG, NAV_TAG)-->Line_21 $$ if (path != null) [ FD ]
