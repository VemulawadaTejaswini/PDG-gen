Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_9 $$ PropertyValue mergeinfoProperty = myVcs.getFactory(target).createPropertyClient().getProperty(target, SvnPropertyKeys.MERGE_INFO, false, SVNRevision.create(targetRevision))[ FD ]
Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))-->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ FD ]
Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)-->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_3 $$ SvnMergeInfoCache.MergeCheckResult result[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_8 $$ SvnTarget target = SvnTarget.fromURL(branchUrl)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_5 $$ if (mergeInfo != null) [ CD ]
Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))-->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_8 $$ SvnTarget target = SvnTarget.fromURL(branchUrl)-->Line_9 $$ PropertyValue mergeinfoProperty = myVcs.getFactory(target).createPropertyClient().getProperty(target, SvnPropertyKeys.MERGE_INFO, false, SVNRevision.create(targetRevision))[ FD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ FD ]
Line_5 $$ if (mergeInfo != null) -->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))[ CD ]
Line_11 $$ final String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()-->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_9 $$ PropertyValue mergeinfoProperty = myVcs.getFactory(target).createPropertyClient().getProperty(target, SvnPropertyKeys.MERGE_INFO, false, SVNRevision.create(targetRevision))-->Line_10 $$ if (mergeinfoProperty == null) [ FD ]
Line_13 $$ final String absoluteTrunk = SVNPathUtil.append(myInfo.getRepoUrl(), newTrunkUrl)-->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_10 $$ if (mergeinfoProperty == null) -->Line_12 $$ final SVNURL newBranchUrl = branchUrl.removePathTail()[ CD ]
Line_4 $$ Set<Long> mergeInfo = myPathMergedMap.get(branchUrl.toString() + "@" + targetRevision)-->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ FD ]
Line_10 $$ if (mergeinfoProperty == null) -->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ CD ]
Line_5 $$ if (mergeInfo != null) -->Line_9 $$ PropertyValue mergeinfoProperty = myVcs.getFactory(target).createPropertyClient().getProperty(target, SvnPropertyKeys.MERGE_INFO, false, SVNRevision.create(targetRevision))[ CD ]
Line_12 $$ final SVNURL newBranchUrl = branchUrl.removePathTail()-->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_4 $$ Set<Long> mergeInfo = myPathMergedMap.get(branchUrl.toString() + "@" + targetRevision)[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))[ FD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_5 $$ if (mergeInfo != null) -->Line_10 $$ if (mergeinfoProperty == null) [ CD ]
Line_10 $$ if (mergeinfoProperty == null) -->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ CD ]
Line_10 $$ if (mergeinfoProperty == null) -->Line_13 $$ final String absoluteTrunk = SVNPathUtil.append(myInfo.getRepoUrl(), newTrunkUrl)[ CD ]
Line_9 $$ PropertyValue mergeinfoProperty = myVcs.getFactory(target).createPropertyClient().getProperty(target, SvnPropertyKeys.MERGE_INFO, false, SVNRevision.create(targetRevision))-->Line_16 $$ result = processMergeinfoProperty(branchUrl.toString() + "@" + targetRevision, revisionAsked, mergeinfoProperty, trunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_19 $$ return result[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_12 $$ final SVNURL newBranchUrl = branchUrl.removePathTail()[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_11 $$ final String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_14 $$ result = newTrunkUrl.length() <= 1 || newBranchUrl.toString().length() <= myInfo.getRepoUrl().length() || newBranchUrl.toString().equals(absoluteTrunk) ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, newBranchUrl, newTrunkUrl)[ FD ]
Line_5 $$ if (mergeInfo != null) -->Line_8 $$ SvnTarget target = SvnTarget.fromURL(branchUrl)[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUpInRepo(final long revisionAsked, final long targetRevision, final SVNURL branchUrl, final String trunkUrl) throws VcsException, SVNException -->Line_4 $$ Set<Long> mergeInfo = myPathMergedMap.get(branchUrl.toString() + "@" + targetRevision)[ FD ]
Line_4 $$ Set<Long> mergeInfo = myPathMergedMap.get(branchUrl.toString() + "@" + targetRevision)-->Line_5 $$ if (mergeInfo != null) [ FD ]
Line_11 $$ final String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()-->Line_13 $$ final String absoluteTrunk = SVNPathUtil.append(myInfo.getRepoUrl(), newTrunkUrl)[ FD ]
Line_10 $$ if (mergeinfoProperty == null) -->Line_11 $$ final String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()[ CD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.getInstance(mergeInfo.contains(revisionAsked))[ FD ]
