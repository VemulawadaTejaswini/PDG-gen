Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()-->Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) [ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_9 $$ String textBeforeCaret = docText.subSequence(lineStartOffset, offset).toString()[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_18 $$ editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(0, 0))[ FD ]
Line_6 $$ final Document document = editor.getDocument()-->Line_7 $$ int lineStartOffset = document.getLineStartOffset(line)[ FD ]
Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) -->Line_14 $$ offset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_7 $$ int lineStartOffset = document.getLineStartOffset(line)[ CD ]
Line_37 $$ final PsiMember psiMember = member.getPsiMember()-->Line_39 $$ elements.add(psiMember)[ FD ]
Line_8 $$ CharSequence docText = document.getCharsSequence()-->Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()[ FD ]
Line_14 $$ offset = editor.getCaretModel().getOffset()-->Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_5 $$ int line = editor.getCaretModel().getLogicalPosition().line[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_8 $$ CharSequence docText = document.getCharsSequence()[ CD ]
Line_28 $$ if (newMembers.isEmpty()) -->Line_43 $$ GlobalInspectionContextBase.cleanupElements(project, null, elements.toArray(new PsiElement[elements.size()]))[ CD ]
Line_5 $$ int line = editor.getCaretModel().getLogicalPosition().line-->Line_16 $$ line = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_53 $$ runTemplates(project, editor, templates, 0)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_43 $$ GlobalInspectionContextBase.cleanupElements(project, null, elements.toArray(new PsiElement[elements.size()]))[ FD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_9 $$ String textBeforeCaret = docText.subSequence(lineStartOffset, offset).toString()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_4 $$ int col = editor.getCaretModel().getLogicalPosition().column[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_3 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_21 $$ List<? extends GenerationInfo> prototypes = generateMemberPrototypes(aClass, members)-->Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)[ FD ]
Line_35 $$ for (GenerationInfo member : newMembers) -->Line_37 $$ final PsiMember psiMember = member.getPsiMember()[ FD ]
Line_37 $$ final PsiMember psiMember = member.getPsiMember()-->Line_38 $$ if (psiMember != null) [ FD ]
Line_5 $$ int line = editor.getCaretModel().getLogicalPosition().line-->Line_7 $$ int lineStartOffset = document.getLineStartOffset(line)[ FD ]
Line_6 $$ final Document document = editor.getDocument()-->Line_8 $$ CharSequence docText = document.getCharsSequence()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_27 $$ editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(line, col))[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_19 $$ List<? extends GenerationInfo> newMembers[ CD ]
Line_45 $$ final ArrayList<TemplateGenerationInfo> templates = new ArrayList<TemplateGenerationInfo>()-->Line_51 $$ if (!templates.isEmpty()) [ FD ]
Line_8 $$ CharSequence docText = document.getCharsSequence()-->Line_9 $$ String textBeforeCaret = docText.subSequence(lineStartOffset, offset).toString()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) [ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_6 $$ final Document document = editor.getDocument()[ CD ]
Line_54 $$ if (!newMembers.isEmpty()) -->Line_55 $$ newMembers.get(0).positionCaret(editor, false)[ CD ]
Line_6 $$ final Document document = editor.getDocument()-->Line_13 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_28 $$ if (newMembers.isEmpty()) -->Line_34 $$ final List<PsiElement> elements = new ArrayList<PsiElement>()[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_13 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_51 $$ if (!templates.isEmpty()) -->Line_52 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ CD ]
Line_19 $$ List<? extends GenerationInfo> newMembers-->Line_54 $$ if (!newMembers.isEmpty()) [ FD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_14 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_55 $$ newMembers.get(0).positionCaret(editor, false)[ FD ]
Line_29 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_30 $$ HintManager.getInstance().showErrorHint(editor, getNothingFoundMessage())[ CD ]
Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) -->Line_12 $$ EnterAction.insertNewLineAtCaret(editor)[ CD ]
Line_36 $$ if (!(member instanceof TemplateGenerationInfo)) -->Line_37 $$ final PsiMember psiMember = member.getPsiMember()[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_5 $$ int line = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)-->Line_54 $$ if (!newMembers.isEmpty()) [ FD ]
Line_45 $$ final ArrayList<TemplateGenerationInfo> templates = new ArrayList<TemplateGenerationInfo>()-->Line_48 $$ templates.add((TemplateGenerationInfo) member)[ FD ]
Line_38 $$ if (psiMember != null) -->Line_39 $$ elements.add(psiMember)[ CD ]
Line_19 $$ List<? extends GenerationInfo> newMembers-->Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)[ FD ]
Line_28 $$ if (newMembers.isEmpty()) -->Line_29 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) -->Line_15 $$ col = editor.getCaretModel().getLogicalPosition().column[ CD ]
Line_7 $$ int lineStartOffset = document.getLineStartOffset(line)-->Line_9 $$ String textBeforeCaret = docText.subSequence(lineStartOffset, offset).toString()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()[ CD ]
Line_47 $$ if (member instanceof TemplateGenerationInfo) -->Line_48 $$ templates.add((TemplateGenerationInfo) member)[ CD ]
Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)-->Line_55 $$ newMembers.get(0).positionCaret(editor, false)[ FD ]
Line_5 $$ int line = editor.getCaretModel().getLogicalPosition().line-->Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_51 $$ if (!templates.isEmpty()) [ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_12 $$ EnterAction.insertNewLineAtCaret(editor)[ FD ]
Line_9 $$ String textBeforeCaret = docText.subSequence(lineStartOffset, offset).toString()-->Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) [ FD ]
Line_4 $$ int col = editor.getCaretModel().getLogicalPosition().column-->Line_15 $$ col = editor.getCaretModel().getLogicalPosition().column[ FD ]
Line_6 $$ final Document document = editor.getDocument()-->Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()[ FD ]
Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) -->Line_16 $$ line = editor.getCaretModel().getLogicalPosition().line[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_16 $$ line = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_45 $$ final ArrayList<TemplateGenerationInfo> templates = new ArrayList<TemplateGenerationInfo>()[ CD ]
Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)-->Line_28 $$ if (newMembers.isEmpty()) [ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_3 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) [ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_30 $$ HintManager.getInstance().showErrorHint(editor, getNothingFoundMessage())[ FD ]
Line_45 $$ final ArrayList<TemplateGenerationInfo> templates = new ArrayList<TemplateGenerationInfo>()-->Line_53 $$ runTemplates(project, editor, templates, 0)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_52 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_34 $$ final List<PsiElement> elements = new ArrayList<PsiElement>()-->Line_39 $$ elements.add(psiMember)[ FD ]
Line_6 $$ final Document document = editor.getDocument()-->Line_52 $$ PsiDocumentManager.getInstance(project).doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_27 $$ editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(line, col))[ FD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_10 $$ final String afterCaret = docText.subSequence(offset, document.getLineEndOffset(line)).toString()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_18 $$ editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(0, 0))[ CD ]
Line_11 $$ if (textBeforeCaret.trim().length() > 0 && StringUtil.isEmptyOrSpaces(afterCaret) && !editor.getSelectionModel().hasSelection()) -->Line_13 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_51 $$ if (!templates.isEmpty()) -->Line_53 $$ runTemplates(project, editor, templates, 0)[ CD ]
Line_19 $$ List<? extends GenerationInfo> newMembers-->Line_28 $$ if (newMembers.isEmpty()) [ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_28 $$ if (newMembers.isEmpty()) [ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_6 $$ final Document document = editor.getDocument()[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_15 $$ col = editor.getCaretModel().getLogicalPosition().column[ FD ]
Line_19 $$ List<? extends GenerationInfo> newMembers-->Line_55 $$ newMembers.get(0).positionCaret(editor, false)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_14 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_34 $$ final List<PsiElement> elements = new ArrayList<PsiElement>()-->Line_43 $$ GlobalInspectionContextBase.cleanupElements(project, null, elements.toArray(new PsiElement[elements.size()]))[ FD ]
Line_51 $$ if (!templates.isEmpty()) -->Line_54 $$ if (!newMembers.isEmpty()) [ CD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_21 $$ List<? extends GenerationInfo> prototypes = generateMemberPrototypes(aClass, members)[ FD ]
Line_2 $$ private void doGenerate(final Project project, final Editor editor, PsiClass aClass, ClassMember[] members) -->Line_4 $$ int col = editor.getCaretModel().getLogicalPosition().column[ CD ]
Line_3 $$ int offset = editor.getCaretModel().getOffset()-->Line_22 $$ newMembers = GenerateMembersUtil.insertMembersAtOffset(aClass.getContainingFile(), offset, prototypes)[ FD ]
Line_35 $$ for (GenerationInfo member : newMembers) -->Line_47 $$ if (member instanceof TemplateGenerationInfo) [ FD ]
Line_36 $$ if (!(member instanceof TemplateGenerationInfo)) -->Line_38 $$ if (psiMember != null) [ CD ]
Line_28 $$ if (newMembers.isEmpty()) -->Line_32 $$ return[ CD ]
