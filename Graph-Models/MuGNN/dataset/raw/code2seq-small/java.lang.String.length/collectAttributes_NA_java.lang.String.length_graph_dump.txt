Line_23 $$ Token firstToken = literal.getFirstToken()-->Line_25 $$ String s = StringUtil.unquoteString(firstToken.toString())[ FD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_21 $$ Node literal = apacheChild.jjtGetChild(0)[ FD ]
Line_9 $$ String s = apacheReference.literal()-->Line_26 $$ final FileTemplate includedTemplate = FileTemplateManager.getInstance(project).getTemplate(s)[ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_10 $$ s = referenceToAttribute(s, includeDummies)[ FD ]
Line_24 $$ if (firstToken != null) -->Line_25 $$ String s = StringUtil.unquoteString(firstToken.toString())[ CD ]
Line_14 $$ if (apacheChild instanceof ASTSetDirective) -->Line_15 $$ ASTReference lhs = (ASTReference) apacheChild.jjtGetChild(0)[ CD ]
Line_23 $$ Token firstToken = literal.getFirstToken()-->Line_24 $$ if (firstToken != null) [ FD ]
Line_21 $$ Node literal = apacheChild.jjtGetChild(0)-->Line_22 $$ if (literal instanceof ASTStringLiteral && literal.jjtGetNumChildren() == 0) [ FD ]
Line_20 $$ if (apacheChild instanceof ASTDirective && "parse".equals(((ASTDirective) apacheChild).getDirectiveName()) && apacheChild.jjtGetNumChildren() == 1) -->Line_21 $$ Node literal = apacheChild.jjtGetChild(0)[ CD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_14 $$ if (apacheChild instanceof ASTSetDirective) [ FD ]
Line_14 $$ if (apacheChild instanceof ASTSetDirective) -->Line_16 $$ String attr = referenceToAttribute(lhs.literal(), false)[ CD ]
Line_7 $$ if (apacheChild instanceof ASTReference) -->Line_8 $$ ASTReference apacheReference = (ASTReference) apacheChild[ CD ]
Line_10 $$ s = referenceToAttribute(s, includeDummies)-->Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) [ FD ]
Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) -->Line_29 $$ collectAttributes(referenced, defined, template, propertiesNames, includeDummies, visitedIncludes, project)[ CD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_11 $$ if (s != null && s.length() > 0 && !propertiesNames.contains(s)) [ FD ]
Line_22 $$ if (literal instanceof ASTStringLiteral && literal.jjtGetNumChildren() == 0) -->Line_23 $$ Token firstToken = literal.getFirstToken()[ CD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_7 $$ if (apacheChild instanceof ASTReference) [ FD ]
Line_14 $$ if (apacheChild instanceof ASTSetDirective) -->Line_17 $$ if (attr != null) [ CD ]
Line_22 $$ if (literal instanceof ASTStringLiteral && literal.jjtGetNumChildren() == 0) -->Line_24 $$ if (firstToken != null) [ CD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_20 $$ if (apacheChild instanceof ASTDirective && "parse".equals(((ASTDirective) apacheChild).getDirectiveName()) && apacheChild.jjtGetNumChildren() == 1) [ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_12 $$ referenced.add(s)[ FD ]
Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) -->Line_28 $$ SimpleNode template = VelocityWrapper.parse(new StringReader(includedTemplate.getText()), "MyTemplate")[ CD ]
Line_7 $$ if (apacheChild instanceof ASTReference) -->Line_10 $$ s = referenceToAttribute(s, includeDummies)[ CD ]
Line_16 $$ String attr = referenceToAttribute(lhs.literal(), false)-->Line_17 $$ if (attr != null) [ FD ]
Line_24 $$ if (firstToken != null) -->Line_26 $$ final FileTemplate includedTemplate = FileTemplateManager.getInstance(project).getTemplate(s)[ CD ]
Line_20 $$ if (apacheChild instanceof ASTDirective && "parse".equals(((ASTDirective) apacheChild).getDirectiveName()) && apacheChild.jjtGetNumChildren() == 1) -->Line_22 $$ if (literal instanceof ASTStringLiteral && literal.jjtGetNumChildren() == 0) [ CD ]
Line_9 $$ String s = apacheReference.literal()-->Line_10 $$ s = referenceToAttribute(s, includeDummies)[ FD ]
Line_7 $$ if (apacheChild instanceof ASTReference) -->Line_11 $$ if (s != null && s.length() > 0 && !propertiesNames.contains(s)) [ CD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_15 $$ ASTReference lhs = (ASTReference) apacheChild.jjtGetChild(0)[ FD ]
Line_9 $$ String s = apacheReference.literal()-->Line_11 $$ if (s != null && s.length() > 0 && !propertiesNames.contains(s)) [ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_26 $$ final FileTemplate includedTemplate = FileTemplateManager.getInstance(project).getTemplate(s)[ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_18 $$ defined.add(attr)[ FD ]
Line_14 $$ if (apacheChild instanceof ASTSetDirective) -->Line_20 $$ if (apacheChild instanceof ASTDirective && "parse".equals(((ASTDirective) apacheChild).getDirectiveName()) && apacheChild.jjtGetNumChildren() == 1) [ CD ]
Line_28 $$ SimpleNode template = VelocityWrapper.parse(new StringReader(includedTemplate.getText()), "MyTemplate")-->Line_29 $$ collectAttributes(referenced, defined, template, propertiesNames, includeDummies, visitedIncludes, project)[ FD ]
Line_7 $$ if (apacheChild instanceof ASTReference) -->Line_14 $$ if (apacheChild instanceof ASTSetDirective) [ CD ]
Line_7 $$ if (apacheChild instanceof ASTReference) -->Line_9 $$ String s = apacheReference.literal()[ CD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_3 $$ int childCount = apacheNode.jjtGetNumChildren()[ FD ]
Line_15 $$ ASTReference lhs = (ASTReference) apacheChild.jjtGetChild(0)-->Line_16 $$ String attr = referenceToAttribute(lhs.literal(), false)[ FD ]
Line_16 $$ String attr = referenceToAttribute(lhs.literal(), false)-->Line_18 $$ defined.add(attr)[ FD ]
Line_11 $$ if (s != null && s.length() > 0 && !propertiesNames.contains(s)) -->Line_12 $$ referenced.add(s)[ CD ]
Line_3 $$ int childCount = apacheNode.jjtGetNumChildren()-->Line_4 $$ for (int i = 0; i < childCount; i++) [ FD ]
Line_4 $$ for (int i = 0; i < childCount; i++) -->Line_6 $$ collectAttributes(referenced, defined, apacheChild, propertiesNames, includeDummies, visitedIncludes, project)[ CD ]
Line_8 $$ ASTReference apacheReference = (ASTReference) apacheChild-->Line_9 $$ String s = apacheReference.literal()[ FD ]
Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)-->Line_6 $$ collectAttributes(referenced, defined, apacheChild, propertiesNames, includeDummies, visitedIncludes, project)[ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_29 $$ collectAttributes(referenced, defined, template, propertiesNames, includeDummies, visitedIncludes, project)[ FD ]
Line_10 $$ s = referenceToAttribute(s, includeDummies)-->Line_12 $$ referenced.add(s)[ FD ]
Line_24 $$ if (firstToken != null) -->Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) [ CD ]
Line_4 $$ for (int i = 0; i < childCount; i++) -->Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)[ CD ]
Line_9 $$ String s = apacheReference.literal()-->Line_12 $$ referenced.add(s)[ FD ]
Line_4 $$ for (int i = 0; i < childCount; i++) -->Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)[ FD ]
Line_26 $$ final FileTemplate includedTemplate = FileTemplateManager.getInstance(project).getTemplate(s)-->Line_28 $$ SimpleNode template = VelocityWrapper.parse(new StringReader(includedTemplate.getText()), "MyTemplate")[ FD ]
Line_10 $$ s = referenceToAttribute(s, includeDummies)-->Line_11 $$ if (s != null && s.length() > 0 && !propertiesNames.contains(s)) [ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_5 $$ Node apacheChild = apacheNode.jjtGetChild(i)[ FD ]
Line_21 $$ Node literal = apacheChild.jjtGetChild(0)-->Line_23 $$ Token firstToken = literal.getFirstToken()[ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_3 $$ int childCount = apacheNode.jjtGetNumChildren()[ CD ]
Line_10 $$ s = referenceToAttribute(s, includeDummies)-->Line_26 $$ final FileTemplate includedTemplate = FileTemplateManager.getInstance(project).getTemplate(s)[ FD ]
Line_9 $$ String s = apacheReference.literal()-->Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) [ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_4 $$ for (int i = 0; i < childCount; i++) [ CD ]
Line_4 $$ for (int i = 0; i < childCount; i++) -->Line_7 $$ if (apacheChild instanceof ASTReference) [ CD ]
Line_17 $$ if (attr != null) -->Line_18 $$ defined.add(attr)[ CD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_27 $$ if (includedTemplate != null && visitedIncludes.add(s)) [ FD ]
Line_2 $$ private static void collectAttributes(Set<String> referenced, Set<String> defined, Node apacheNode, final Set<String> propertiesNames, final boolean includeDummies, Set<String> visitedIncludes, Project project) throws ParseException -->Line_6 $$ collectAttributes(referenced, defined, apacheChild, propertiesNames, includeDummies, visitedIncludes, project)[ FD ]
