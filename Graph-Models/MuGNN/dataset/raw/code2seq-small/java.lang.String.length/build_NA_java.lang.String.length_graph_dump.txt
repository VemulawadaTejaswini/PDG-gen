Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_3 $$ final File outputDir = temp.allocateTempFile("extractedDir")[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_21 $$ final LayoutFileSet fileSet = new LayoutFileSet()[ CD ]
Line_21 $$ final LayoutFileSet fileSet = new LayoutFileSet()-->Line_22 $$ fileSet.setDir(target)[ FD ]
Line_13 $$ if (pathInJar.length() > 0) -->Line_14 $$ final PatternSet patternSet = new PatternSet()[ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_4 $$ expandTask.setProject(getProject())[ CD ]
Line_3 $$ final File outputDir = temp.allocateTempFile("extractedDir")-->Line_19 $$ expandTask.setDest(outputDir)[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_3 $$ final File outputDir = temp.allocateTempFile("extractedDir")[ CD ]
Line_13 $$ if (pathInJar.length() > 0) -->Line_17 $$ target = new File(outputDir, pathInJar.replace('/', File.separatorChar))[ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_19 $$ expandTask.setDest(outputDir)[ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_5 $$ expandTask.setSrc(new File(jarPath.replace('/', File.separatorChar)))[ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_20 $$ expandTask.perform()[ CD ]
Line_6 $$ File target = outputDir-->Line_17 $$ target = new File(outputDir, pathInJar.replace('/', File.separatorChar))[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_6 $$ File target = outputDir[ CD ]
Line_21 $$ final LayoutFileSet fileSet = new LayoutFileSet()-->Line_23 $$ return Collections.singletonList(fileSet)[ FD ]
Line_10 $$ if (pathInJar.startsWith("/")) -->Line_11 $$ pathInJar = pathInJar.substring(1)[ CD ]
Line_17 $$ target = new File(outputDir, pathInJar.replace('/', File.separatorChar))-->Line_22 $$ fileSet.setDir(target)[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_7 $$ if (!pathInJar.endsWith("/")) [ CD ]
Line_14 $$ final PatternSet patternSet = new PatternSet()-->Line_15 $$ patternSet.createInclude().setName(pathInJar + "**")[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_10 $$ if (pathInJar.startsWith("/")) [ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_22 $$ fileSet.setDir(target)[ CD ]
Line_6 $$ File target = outputDir-->Line_22 $$ fileSet.setDir(target)[ FD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_23 $$ return Collections.singletonList(fileSet)[ CD ]
Line_2 $$ public List<LayoutFileSet> build(TempFileFactory temp) -->Line_13 $$ if (pathInJar.length() > 0) [ CD ]
Line_14 $$ final PatternSet patternSet = new PatternSet()-->Line_16 $$ expandTask.addPatternset(patternSet)[ FD ]
Line_13 $$ if (pathInJar.length() > 0) -->Line_15 $$ patternSet.createInclude().setName(pathInJar + "**")[ CD ]
Line_13 $$ if (pathInJar.length() > 0) -->Line_16 $$ expandTask.addPatternset(patternSet)[ CD ]
