Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_11 $$ data.setMainClass(testClass)[ FD ]
Line_3 $$ final String testObject = getTestObject()-->Line_23 $$ if (testObject == JUnitConfiguration.TEST_DIRECTORY) [ FD ]
Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) -->Line_35 $$ data.setPatterns(set)[ CD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_6 $$ if (testObject != JUnitConfiguration.TEST_PACKAGE && testObject != JUnitConfiguration.TEST_PATTERN && testObject != JUnitConfiguration.TEST_DIRECTORY && testObject != JUnitConfiguration.TEST_CATEGORY) [ CD ]
Line_21 $$ if (testObject == JUnitConfiguration.TEST_PACKAGE) -->Line_23 $$ if (testObject == JUnitConfiguration.TEST_DIRECTORY) [ CD ]
Line_3 $$ final String testObject = getTestObject()-->Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) [ FD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_5 $$ data.TEST_OBJECT = testObject[ CD ]
Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) -->Line_26 $$ data.setCategoryName(getJUnitTextValue(CATEGORY))[ CD ]
Line_6 $$ if (testObject != JUnitConfiguration.TEST_PACKAGE && testObject != JUnitConfiguration.TEST_PATTERN && testObject != JUnitConfiguration.TEST_DIRECTORY && testObject != JUnitConfiguration.TEST_CATEGORY) -->Line_38 $$ data.METHOD_NAME = ""[ CD ]
Line_4 $$ final String className = getJUnitTextValue(CLASS)-->Line_18 $$ data.MAIN_CLASS_NAME = className[ FD ]
Line_4 $$ final String className = getJUnitTextValue(CLASS)-->Line_16 $$ data.MAIN_CLASS_NAME = className[ FD ]
Line_31 $$ if (pattern.length() > 0) -->Line_32 $$ set.add(pattern)[ CD ]
Line_9 $$ final PsiClass testClass = !myProject.isDefault() && !StringUtil.isEmptyOrSpaces(className) ? JUnitUtil.findPsiClass(className, module, myProject) : null-->Line_11 $$ data.setMainClass(testClass)[ FD ]
Line_6 $$ if (testObject != JUnitConfiguration.TEST_PACKAGE && testObject != JUnitConfiguration.TEST_PATTERN && testObject != JUnitConfiguration.TEST_DIRECTORY && testObject != JUnitConfiguration.TEST_CATEGORY) -->Line_21 $$ if (testObject == JUnitConfiguration.TEST_PACKAGE) [ CD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_3 $$ final String testObject = getTestObject()[ CD ]
Line_28 $$ final LinkedHashSet<String> set = new LinkedHashSet<String>()-->Line_32 $$ set.add(pattern)[ FD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_26 $$ data.setCategoryName(getJUnitTextValue(CATEGORY))[ FD ]
Line_4 $$ final String className = getJUnitTextValue(CLASS)-->Line_13 $$ data.MAIN_CLASS_NAME = className[ FD ]
Line_3 $$ final String testObject = getTestObject()-->Line_5 $$ data.TEST_OBJECT = testObject[ FD ]
Line_10 $$ if (testClass != null && testClass.isValid()) -->Line_13 $$ data.MAIN_CLASS_NAME = className[ CD ]
Line_9 $$ final PsiClass testClass = !myProject.isDefault() && !StringUtil.isEmptyOrSpaces(className) ? JUnitUtil.findPsiClass(className, module, myProject) : null-->Line_10 $$ if (testClass != null && testClass.isValid()) [ FD ]
Line_4 $$ final String className = getJUnitTextValue(CLASS)-->Line_9 $$ final PsiClass testClass = !myProject.isDefault() && !StringUtil.isEmptyOrSpaces(className) ? JUnitUtil.findPsiClass(className, module, myProject) : null[ FD ]
Line_3 $$ final String testObject = getTestObject()-->Line_21 $$ if (testObject == JUnitConfiguration.TEST_PACKAGE) [ FD ]
Line_23 $$ if (testObject == JUnitConfiguration.TEST_DIRECTORY) -->Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) [ CD ]
Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) -->Line_28 $$ final LinkedHashSet<String> set = new LinkedHashSet<String>()[ CD ]
Line_23 $$ if (testObject == JUnitConfiguration.TEST_DIRECTORY) -->Line_24 $$ data.setDirName(getJUnitTextValue(DIR))[ CD ]
Line_6 $$ if (testObject != JUnitConfiguration.TEST_PACKAGE && testObject != JUnitConfiguration.TEST_PATTERN && testObject != JUnitConfiguration.TEST_DIRECTORY && testObject != JUnitConfiguration.TEST_CATEGORY) -->Line_37 $$ data.MAIN_CLASS_NAME = ""[ CD ]
Line_30 $$ for (String pattern : patterns) -->Line_31 $$ if (pattern.length() > 0) [ FD ]
Line_10 $$ if (testClass != null && testClass.isValid()) -->Line_11 $$ data.setMainClass(testClass)[ CD ]
Line_21 $$ if (testObject == JUnitConfiguration.TEST_PACKAGE) -->Line_22 $$ data.PACKAGE_NAME = getJUnitTextValue(ALL_IN_PACKAGE)[ CD ]
Line_25 $$ if (testObject == JUnitConfiguration.TEST_CATEGORY) -->Line_29 $$ final String[] patterns = getJUnitTextValue(PATTERN).split("\\|\\|")[ CD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_24 $$ data.setDirName(getJUnitTextValue(DIR))[ FD ]
Line_28 $$ final LinkedHashSet<String> set = new LinkedHashSet<String>()-->Line_35 $$ data.setPatterns(set)[ FD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_35 $$ data.setPatterns(set)[ FD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_4 $$ final String className = getJUnitTextValue(CLASS)[ CD ]
Line_30 $$ for (String pattern : patterns) -->Line_32 $$ set.add(pattern)[ FD ]
Line_2 $$ private void applyTo(final JUnitConfiguration.Data data, final Module module) -->Line_9 $$ final PsiClass testClass = !myProject.isDefault() && !StringUtil.isEmptyOrSpaces(className) ? JUnitUtil.findPsiClass(className, module, myProject) : null[ FD ]
