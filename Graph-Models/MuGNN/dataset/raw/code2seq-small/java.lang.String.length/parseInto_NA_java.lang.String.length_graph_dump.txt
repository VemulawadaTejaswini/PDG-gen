Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_5 $$ if ((isPositive && isTooLong) || bucket.getZone() != DateTimeZone.UTC || pattern.matcher(text).matches() == false) [ CD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_14 $$ bucket.saveField(DateTimeFieldType.monthOfYear(), dt.getMonthOfYear())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_15 $$ bucket.saveField(DateTimeFieldType.dayOfMonth(), dt.getDayOfMonth())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_5 $$ if ((isPositive && isTooLong) || bucket.getZone() != DateTimeZone.UTC || pattern.matcher(text).matches() == false) [ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_19 $$ bucket.saveField(DateTimeFieldType.millisOfSecond(), dt.getMillisOfSecond())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_13 $$ bucket.saveField(DateTimeFieldType.year(), dt.getYear())[ FD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_16 $$ bucket.saveField(DateTimeFieldType.hourOfDay(), dt.getHourOfDay())[ FD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_19 $$ bucket.saveField(DateTimeFieldType.millisOfSecond(), dt.getMillisOfSecond())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_4 $$ boolean isTooLong = text.length() > estimateParsedLength()[ CD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_18 $$ bucket.saveField(DateTimeFieldType.secondOfMinute(), dt.getSecondOfMinute())[ FD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_17 $$ bucket.saveField(DateTimeFieldType.minuteOfHour(), dt.getMinuteOfHour())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_18 $$ bucket.saveField(DateTimeFieldType.secondOfMinute(), dt.getSecondOfMinute())[ FD ]
Line_5 $$ if ((isPositive && isTooLong) || bucket.getZone() != DateTimeZone.UTC || pattern.matcher(text).matches() == false) -->Line_7 $$ return -1[ CD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_14 $$ bucket.saveField(DateTimeFieldType.monthOfYear(), dt.getMonthOfYear())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_16 $$ bucket.saveField(DateTimeFieldType.hourOfDay(), dt.getHourOfDay())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_4 $$ boolean isTooLong = text.length() > estimateParsedLength()[ FD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_15 $$ bucket.saveField(DateTimeFieldType.dayOfMonth(), dt.getDayOfMonth())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_9 $$ int factor = hasMilliSecondPrecision ? 1 : 1000[ CD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_24 $$ return text.length()[ CD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_3 $$ boolean isPositive = text.startsWith("-") == false[ CD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_17 $$ bucket.saveField(DateTimeFieldType.minuteOfHour(), dt.getMinuteOfHour())[ FD ]
Line_12 $$ DateTime dt = new DateTime(millis, DateTimeZone.UTC)-->Line_13 $$ bucket.saveField(DateTimeFieldType.year(), dt.getYear())[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_3 $$ boolean isPositive = text.startsWith("-") == false[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_20 $$ bucket.setZone(DateTimeZone.UTC)[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_11 $$ long millis = Long.valueOf(text) * factor[ FD ]
Line_2 $$ public int parseInto(DateTimeParserBucket bucket, String text, int position) -->Line_24 $$ return text.length()[ FD ]
