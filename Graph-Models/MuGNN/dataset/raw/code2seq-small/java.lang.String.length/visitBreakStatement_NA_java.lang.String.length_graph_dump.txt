Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_12 $$ if (exitedStatement == null) [ CD ]
Line_7 $$ final String labelText = labelIdentifier.getText()-->Line_8 $$ if (labelText == null || labelText.length() == 0) [ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_3 $$ final PsiIdentifier labelIdentifier = statement.getLabelIdentifier()[ FD ]
Line_8 $$ if (labelText == null || labelText.length() == 0) -->Line_9 $$ return[ CD ]
Line_15 $$ final PsiStatement labelEnabledParent = PsiTreeUtil.getParentOfType(statement, PsiForStatement.class, PsiDoWhileStatement.class, PsiForeachStatement.class, PsiWhileStatement.class, PsiSwitchStatement.class)-->Line_16 $$ if (labelEnabledParent == null) [ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_8 $$ if (labelText == null || labelText.length() == 0) [ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_3 $$ final PsiIdentifier labelIdentifier = statement.getLabelIdentifier()[ CD ]
Line_16 $$ if (labelEnabledParent == null) -->Line_17 $$ return[ CD ]
Line_12 $$ if (exitedStatement == null) -->Line_13 $$ return[ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_15 $$ final PsiStatement labelEnabledParent = PsiTreeUtil.getParentOfType(statement, PsiForStatement.class, PsiDoWhileStatement.class, PsiForeachStatement.class, PsiWhileStatement.class, PsiSwitchStatement.class)[ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_20 $$ registerStatementError(statement)[ FD ]
Line_19 $$ if (exitedStatement.equals(labelEnabledParent)) -->Line_20 $$ registerStatementError(statement)[ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_11 $$ final PsiStatement exitedStatement = statement.findExitedStatement()[ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_11 $$ final PsiStatement exitedStatement = statement.findExitedStatement()[ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_7 $$ final String labelText = labelIdentifier.getText()[ CD ]
Line_15 $$ final PsiStatement labelEnabledParent = PsiTreeUtil.getParentOfType(statement, PsiForStatement.class, PsiDoWhileStatement.class, PsiForeachStatement.class, PsiWhileStatement.class, PsiSwitchStatement.class)-->Line_19 $$ if (exitedStatement.equals(labelEnabledParent)) [ FD ]
Line_11 $$ final PsiStatement exitedStatement = statement.findExitedStatement()-->Line_12 $$ if (exitedStatement == null) [ FD ]
Line_4 $$ if (labelIdentifier == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_4 $$ if (labelIdentifier == null) [ CD ]
Line_3 $$ final PsiIdentifier labelIdentifier = statement.getLabelIdentifier()-->Line_7 $$ final String labelText = labelIdentifier.getText()[ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_19 $$ if (exitedStatement.equals(labelEnabledParent)) [ CD ]
Line_11 $$ final PsiStatement exitedStatement = statement.findExitedStatement()-->Line_19 $$ if (exitedStatement.equals(labelEnabledParent)) [ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_15 $$ final PsiStatement labelEnabledParent = PsiTreeUtil.getParentOfType(statement, PsiForStatement.class, PsiDoWhileStatement.class, PsiForeachStatement.class, PsiWhileStatement.class, PsiSwitchStatement.class)[ FD ]
Line_2 $$ public void visitBreakStatement(@NotNull PsiBreakStatement statement) -->Line_16 $$ if (labelEnabledParent == null) [ CD ]
Line_3 $$ final PsiIdentifier labelIdentifier = statement.getLabelIdentifier()-->Line_4 $$ if (labelIdentifier == null) [ FD ]
