Line_33 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_39 $$ current = child[ CD ]
Line_10 $$ for (String segment : segments) -->Line_11 $$ if (segment.equals("..")) [ FD ]
Line_32 $$ File current = File.listRoots()[0]-->Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ FD ]
Line_24 $$ File candidate = new File(resolvedPath)-->Line_28 $$ File canonical = candidate.getCanonicalFile()[ FD ]
Line_33 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ FD ]
Line_24 $$ File candidate = new File(resolvedPath)-->Line_29 $$ if (candidate.getPath().equalsIgnoreCase(canonical.getPath())) [ FD ]
Line_19 $$ String resolvedPath = CollectionUtils.join(File.separator, path)-->Line_22 $$ resolvedPath = File.separator + resolvedPath[ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_19 $$ String resolvedPath = CollectionUtils.join(File.separator, path)[ FD ]
Line_5 $$ if (OperatingSystem.current().isWindows()) -->Line_6 $$ return file.getCanonicalFile()[ CD ]
Line_34 $$ File child = findChild(current, path.get(pos))-->Line_39 $$ current = child[ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_13 $$ path.remove(path.size() - 1)[ FD ]
Line_2 $$ private File normalise(File file) -->Line_43 $$ throw new UncheckedIOException(String.format("Could not normalize path for file '%s'.", file), e)[ FD ]
Line_32 $$ File current = File.listRoots()[0]-->Line_34 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_16 $$ path.add(segment)[ FD ]
Line_28 $$ File canonical = candidate.getCanonicalFile()-->Line_29 $$ if (candidate.getPath().equalsIgnoreCase(canonical.getPath())) [ FD ]
Line_10 $$ for (String segment : segments) -->Line_15 $$ if (!segment.equals(".") && segment.length() > 0) [ FD ]
Line_34 $$ File child = findChild(current, path.get(pos))-->Line_35 $$ if (child == null) [ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_33 $$ for (int pos = 0; pos < path.size(); pos++) [ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_12 $$ if (!path.isEmpty()) [ FD ]
Line_2 $$ private File normalise(File file) -->Line_4 $$ assert file.isAbsolute() : String.format("Cannot normalize a relative file: '%s'", file)[ FD ]
Line_33 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_34 $$ File child = findChild(current, path.get(pos))[ CD ]
Line_35 $$ if (child == null) -->Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ CD ]
Line_39 $$ current = child-->Line_34 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_21 $$ if (needLeadingSeparator) -->Line_22 $$ resolvedPath = File.separator + resolvedPath[ CD ]
Line_12 $$ if (!path.isEmpty()) -->Line_13 $$ path.remove(path.size() - 1)[ CD ]
Line_11 $$ if (segment.equals("..")) -->Line_15 $$ if (!segment.equals(".") && segment.length() > 0) [ CD ]
Line_2 $$ private File normalise(File file) -->Line_8 $$ String[] segments = FILE_SEPARATOR_PATTERN.split(file.getPath())[ FD ]
Line_32 $$ File current = File.listRoots()[0]-->Line_39 $$ current = child[ FD ]
Line_25 $$ if (fileSystem.isCaseSensitive()) -->Line_26 $$ return candidate[ CD ]
Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))-->Line_34 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_15 $$ if (!segment.equals(".") && segment.length() > 0) -->Line_16 $$ path.add(segment)[ CD ]
Line_33 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_34 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_34 $$ File child = findChild(current, path.get(pos))[ FD ]
Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))-->Line_39 $$ current = child[ FD ]
Line_2 $$ private File normalise(File file) -->Line_6 $$ return file.getCanonicalFile()[ FD ]
Line_10 $$ for (String segment : segments) -->Line_16 $$ path.add(segment)[ FD ]
Line_33 $$ for (int pos = 0; pos < path.size(); pos++) -->Line_35 $$ if (child == null) [ CD ]
Line_9 $$ List<String> path = new ArrayList<String>(segments.length)-->Line_36 $$ current = new File(current, CollectionUtils.join(File.separator, path.subList(pos, path.size())))[ FD ]
Line_11 $$ if (segment.equals("..")) -->Line_12 $$ if (!path.isEmpty()) [ CD ]
Line_29 $$ if (candidate.getPath().equalsIgnoreCase(canonical.getPath())) -->Line_30 $$ return canonical[ CD ]
