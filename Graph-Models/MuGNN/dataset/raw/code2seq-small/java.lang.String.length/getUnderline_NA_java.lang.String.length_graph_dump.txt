Line_4 $$ final String text = getNode().getText().trim()-->Line_5 $$ if (text.length() < 2)[ FD ]
Line_10 $$ for (char ch = it.last(); ch != CharacterIterator.DONE; ch = it.previous()) -->Line_11 $$ if (ch != adorn) [ CD ]
Line_9 $$ int start = 0-->Line_12 $$ start = it.getIndex() + 1[ FD ]
Line_9 $$ int start = 0-->Line_16 $$ return text.substring(start, text.length())[ FD ]
Line_8 $$ final CharacterIterator it = new StringCharacterIterator(text)-->Line_12 $$ start = it.getIndex() + 1[ FD ]
Line_4 $$ final String text = getNode().getText().trim()-->Line_16 $$ return text.substring(start, text.length())[ FD ]
Line_8 $$ final CharacterIterator it = new StringCharacterIterator(text)-->Line_10 $$ for (char ch = it.last(); ch != CharacterIterator.DONE; ch = it.previous()) [ FD ]
Line_11 $$ if (ch != adorn) -->Line_12 $$ start = it.getIndex() + 1[ CD ]
Line_7 $$ final char adorn = text.charAt(text.length() - 2)-->Line_11 $$ if (ch != adorn) [ FD ]
Line_5 $$ if (text.length() < 2)-->Line_6 $$ return null[ CD ]
Line_4 $$ final String text = getNode().getText().trim()-->Line_7 $$ final char adorn = text.charAt(text.length() - 2)[ FD ]
Line_10 $$ for (char ch = it.last(); ch != CharacterIterator.DONE; ch = it.previous()) -->Line_11 $$ if (ch != adorn) [ FD ]
Line_12 $$ start = it.getIndex() + 1-->Line_16 $$ return text.substring(start, text.length())[ FD ]
