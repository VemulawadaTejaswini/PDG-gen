Line_31 $$ content = (RegExp) unary.content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_23 $$ content = (RegExp) unary.content[ FD ]
Line_26 $$ unary = (RegExp1) this-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_16 $$ return content.size(macros) + 2[ FD ]
Line_26 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_22 $$ unary = (RegExp1) this[ FD ]
Line_5 $$ RegExp content-->Line_27 $$ content = (RegExp) unary.content[ FD ]
Line_22 $$ unary = (RegExp1) this-->Line_26 $$ unary = (RegExp1) this[ FD ]
Line_23 $$ content = (RegExp) unary.content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_18 $$ unary = (RegExp1) this-->Line_30 $$ unary = (RegExp1) this[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_23 $$ content = (RegExp) unary.content[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_30 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_3 $$ RegExp1 unary-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_24 $$ return content.size(macros)[ FD ]
Line_23 $$ content = (RegExp) unary.content-->Line_24 $$ return content.size(macros)[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_26 $$ unary = (RegExp1) this[ FD ]
Line_5 $$ RegExp content-->Line_31 $$ content = (RegExp) unary.content[ FD ]
Line_4 $$ RegExp2 binary-->Line_11 $$ binary = (RegExp2) this[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_18 $$ unary = (RegExp1) this-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_20 $$ return content.size(macros) + 2[ FD ]
Line_5 $$ RegExp content-->Line_19 $$ content = (RegExp) unary.content[ FD ]
Line_5 $$ RegExp content-->Line_24 $$ return content.size(macros)[ FD ]
Line_30 $$ unary = (RegExp1) this-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_27 $$ content = (RegExp) unary.content-->Line_31 $$ content = (RegExp) unary.content[ FD ]
Line_3 $$ RegExp1 unary-->Line_14 $$ unary = (RegExp1) this[ FD ]
Line_27 $$ content = (RegExp) unary.content-->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_27 $$ content = (RegExp) unary.content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_22 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_3 $$ RegExp1 unary-->Line_18 $$ unary = (RegExp1) this[ FD ]
Line_5 $$ RegExp content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_23 $$ content = (RegExp) unary.content-->Line_27 $$ content = (RegExp) unary.content[ FD ]
Line_4 $$ RegExp2 binary-->Line_8 $$ binary = (RegExp2) this[ FD ]
Line_5 $$ RegExp content-->Line_15 $$ content = (RegExp) unary.content[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_24 $$ return content.size(macros)[ FD ]
Line_22 $$ unary = (RegExp1) this-->Line_30 $$ unary = (RegExp1) this[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_31 $$ content = (RegExp) unary.content[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_27 $$ content = (RegExp) unary.content[ FD ]
Line_5 $$ RegExp content-->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_8 $$ binary = (RegExp2) this-->Line_11 $$ binary = (RegExp2) this[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_31 $$ content = (RegExp) unary.content[ FD ]
Line_22 $$ unary = (RegExp1) this-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_18 $$ unary = (RegExp1) this-->Line_22 $$ unary = (RegExp1) this[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_9 $$ return binary.r1.size(macros) + binary.r2.size(macros) + 2[ FD ]
Line_5 $$ RegExp content-->Line_23 $$ content = (RegExp) unary.content[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_19 $$ content = (RegExp) unary.content[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_45 $$ return macros.getDefinition((String) unary.content).size(macros)[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_32 $$ return content.size(macros) * content.size(macros) * 3[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_24 $$ return content.size(macros)[ FD ]
Line_23 $$ content = (RegExp) unary.content-->Line_31 $$ content = (RegExp) unary.content[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_4 $$ RegExp2 binary[ CD ]
Line_18 $$ unary = (RegExp1) this-->Line_26 $$ unary = (RegExp1) this[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_30 $$ unary = (RegExp1) this[ FD ]
Line_3 $$ RegExp1 unary-->Line_22 $$ unary = (RegExp1) this[ FD ]
Line_26 $$ unary = (RegExp1) this-->Line_30 $$ unary = (RegExp1) this[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_3 $$ RegExp1 unary[ CD ]
Line_5 $$ RegExp content-->Line_16 $$ return content.size(macros) + 2[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_16 $$ return content.size(macros) + 2[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_12 $$ return binary.r1.size(macros) + binary.r2.size(macros)[ FD ]
Line_15 $$ content = (RegExp) unary.content-->Line_27 $$ content = (RegExp) unary.content[ FD ]
Line_3 $$ RegExp1 unary-->Line_26 $$ unary = (RegExp1) this[ FD ]
Line_35 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_18 $$ unary = (RegExp1) this-->Line_44 $$ unary = (RegExp1) this[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_20 $$ return content.size(macros) + 2[ FD ]
Line_3 $$ RegExp1 unary-->Line_35 $$ unary = (RegExp1) this[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_5 $$ RegExp content[ CD ]
Line_5 $$ RegExp content-->Line_20 $$ return content.size(macros) + 2[ FD ]
Line_3 $$ RegExp1 unary-->Line_30 $$ unary = (RegExp1) this[ FD ]
Line_23 $$ content = (RegExp) unary.content-->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_2 $$ public int size(Macros macros) -->Line_28 $$ return content.size(macros) * content.size(macros)[ FD ]
Line_19 $$ content = (RegExp) unary.content-->Line_20 $$ return content.size(macros) + 2[ FD ]
Line_14 $$ unary = (RegExp1) this-->Line_18 $$ unary = (RegExp1) this[ FD ]
