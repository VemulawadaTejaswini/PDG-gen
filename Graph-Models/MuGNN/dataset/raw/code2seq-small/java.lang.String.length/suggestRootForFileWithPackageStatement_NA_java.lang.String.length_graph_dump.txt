Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_3 $$ if (!isFile(file))[ CD ]
Line_13 $$ F root = getParentFile(file)-->Line_28 $$ if (root == null) [ FD ]
Line_12 $$ if (packageName != null) -->Line_33 $$ return Pair.create(root, "")[ CD ]
Line_27 $$ root = getParentFile(root)-->Line_18 $$ String dirName = getName(root)[ FD ]
Line_5 $$ final CharSequence chars-->Line_11 $$ String packageName = packageNameFetcher.fun(chars)[ FD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_35 $$ return null[ CD ]
Line_31 $$ index = index1-->Line_21 $$ String packagePrefix = packageName.substring(0, index)[ FD ]
Line_11 $$ String packageName = packageNameFetcher.fun(chars)-->Line_16 $$ int index1 = packageName.lastIndexOf('.', index - 1)[ FD ]
Line_12 $$ if (packageName != null) -->Line_14 $$ int index = packageName.length()[ CD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_5 $$ final CharSequence chars[ CD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_11 $$ String packageName = packageNameFetcher.fun(chars)[ FD ]
Line_27 $$ root = getParentFile(root)-->Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) [ FD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_11 $$ String packageName = packageNameFetcher.fun(chars)[ CD ]
Line_13 $$ F root = getParentFile(file)-->Line_25 $$ return Pair.create(root, packagePrefix)[ FD ]
Line_5 $$ final CharSequence chars-->Line_7 $$ chars = loadText(file)[ FD ]
Line_15 $$ while (index > 0) -->Line_27 $$ root = getParentFile(root)[ CD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_3 $$ if (!isFile(file))[ FD ]
Line_11 $$ String packageName = packageNameFetcher.fun(chars)-->Line_17 $$ String token = packageName.substring(index1 + 1, index)[ FD ]
Line_7 $$ chars = loadText(file)-->Line_11 $$ String packageName = packageNameFetcher.fun(chars)[ FD ]
Line_14 $$ int index = packageName.length()-->Line_17 $$ String token = packageName.substring(index1 + 1, index)[ FD ]
Line_15 $$ while (index > 0) -->Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) [ CD ]
Line_15 $$ while (index > 0) -->Line_17 $$ String token = packageName.substring(index1 + 1, index)[ CD ]
Line_31 $$ index = index1-->Line_17 $$ String token = packageName.substring(index1 + 1, index)[ FD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_7 $$ chars = loadText(file)[ FD ]
Line_12 $$ if (packageName != null) -->Line_15 $$ while (index > 0) [ CD ]
Line_27 $$ root = getParentFile(root)-->Line_25 $$ return Pair.create(root, packagePrefix)[ FD ]
Line_16 $$ int index1 = packageName.lastIndexOf('.', index - 1)-->Line_31 $$ index = index1[ FD ]
Line_3 $$ if (!isFile(file))-->Line_4 $$ return null[ CD ]
Line_14 $$ int index = packageName.length()-->Line_15 $$ while (index > 0) [ FD ]
Line_13 $$ F root = getParentFile(file)-->Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) [ FD ]
Line_13 $$ F root = getParentFile(file)-->Line_27 $$ root = getParentFile(root)[ FD ]
Line_31 $$ index = index1-->Line_15 $$ while (index > 0) [ FD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) [ FD ]
Line_12 $$ if (packageName != null) -->Line_13 $$ F root = getParentFile(file)[ CD ]
Line_14 $$ int index = packageName.length()-->Line_21 $$ String packagePrefix = packageName.substring(0, index)[ FD ]
Line_15 $$ while (index > 0) -->Line_19 $$ final boolean equalsToToken = SystemInfo.isFileSystemCaseSensitive ? dirName.equals(token) : dirName.equalsIgnoreCase(token)[ CD ]
Line_21 $$ String packagePrefix = packageName.substring(0, index)-->Line_22 $$ if (!packagePrefixSupported && packagePrefix.length() > 0) [ FD ]
Line_27 $$ root = getParentFile(root)-->Line_28 $$ if (root == null) [ FD ]
Line_15 $$ while (index > 0) -->Line_16 $$ int index1 = packageName.lastIndexOf('.', index - 1)[ CD ]
Line_15 $$ while (index > 0) -->Line_18 $$ String dirName = getName(root)[ CD ]
Line_14 $$ int index = packageName.length()-->Line_31 $$ index = index1[ FD ]
Line_11 $$ String packageName = packageNameFetcher.fun(chars)-->Line_14 $$ int index = packageName.length()[ FD ]
Line_13 $$ F root = getParentFile(file)-->Line_33 $$ return Pair.create(root, "")[ FD ]
Line_11 $$ String packageName = packageNameFetcher.fun(chars)-->Line_21 $$ String packagePrefix = packageName.substring(0, index)[ FD ]
Line_18 $$ String dirName = getName(root)-->Line_19 $$ final boolean equalsToToken = SystemInfo.isFileSystemCaseSensitive ? dirName.equals(token) : dirName.equalsIgnoreCase(token)[ FD ]
Line_11 $$ String packageName = packageNameFetcher.fun(chars)-->Line_12 $$ if (packageName != null) [ FD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_13 $$ F root = getParentFile(file)[ FD ]
Line_13 $$ F root = getParentFile(file)-->Line_18 $$ String dirName = getName(root)[ FD ]
Line_15 $$ while (index > 0) -->Line_31 $$ index = index1[ CD ]
Line_19 $$ final boolean equalsToToken = SystemInfo.isFileSystemCaseSensitive ? dirName.equals(token) : dirName.equalsIgnoreCase(token)-->Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) [ FD ]
Line_17 $$ String token = packageName.substring(index1 + 1, index)-->Line_19 $$ final boolean equalsToToken = SystemInfo.isFileSystemCaseSensitive ? dirName.equals(token) : dirName.equalsIgnoreCase(token)[ FD ]
Line_27 $$ root = getParentFile(root)-->Line_33 $$ return Pair.create(root, "")[ FD ]
Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) -->Line_25 $$ return Pair.create(root, packagePrefix)[ CD ]
Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) -->Line_21 $$ String packagePrefix = packageName.substring(0, index)[ CD ]
Line_20 $$ if (!equalsToToken || root.equals(topmostPossibleRoot)) -->Line_22 $$ if (!packagePrefixSupported && packagePrefix.length() > 0) [ CD ]
Line_22 $$ if (!packagePrefixSupported && packagePrefix.length() > 0) -->Line_23 $$ return null[ CD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_22 $$ if (!packagePrefixSupported && packagePrefix.length() > 0) [ FD ]
Line_28 $$ if (root == null) -->Line_29 $$ return null[ CD ]
Line_2 $$ public Pair<F, String> suggestRootForFileWithPackageStatement(F file, F topmostPossibleRoot, NullableFunction<CharSequence, String> packageNameFetcher, boolean packagePrefixSupported) -->Line_12 $$ if (packageName != null) [ CD ]
Line_15 $$ while (index > 0) -->Line_28 $$ if (root == null) [ CD ]
Line_21 $$ String packagePrefix = packageName.substring(0, index)-->Line_25 $$ return Pair.create(root, packagePrefix)[ FD ]
