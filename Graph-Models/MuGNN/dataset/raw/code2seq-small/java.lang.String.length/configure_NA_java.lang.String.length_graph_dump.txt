Line_28 $$ if (key.endsWith(".value")) -->Line_29 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ CD ]
Line_30 $$ if (key.endsWith(".type")) -->Line_33 $$ props.setProperty(key, value)[ CD ]
Line_30 $$ if (key.endsWith(".type")) -->Line_31 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ CD ]
Line_25 $$ String key = "log4j." + entry.getKey()-->Line_33 $$ props.setProperty(key, value)[ FD ]
Line_15 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_19 $$ settingsBuilder.putProperties("elasticsearch.", BootstrapInfo.getSystemProperties()).putProperties("es.", BootstrapInfo.getSystemProperties())[ FD ]
Line_23 $$ Properties props = new Properties()-->Line_33 $$ props.setProperty(key, value)[ FD ]
Line_15 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_17 $$ resolveConfig(environment, settingsBuilder)[ FD ]
Line_15 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_24 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) [ FD ]
Line_25 $$ String key = "log4j." + entry.getKey()-->Line_28 $$ if (key.endsWith(".value")) [ FD ]
Line_26 $$ String value = entry.getValue()-->Line_31 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_25 $$ String key = "log4j." + entry.getKey()-->Line_31 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_26 $$ String value = entry.getValue()-->Line_33 $$ props.setProperty(key, value)[ FD ]
Line_26 $$ String value = entry.getValue()-->Line_27 $$ value = REPLACEMENTS.getOrDefault(value, value)[ FD ]
Line_23 $$ Properties props = new Properties()-->Line_38 $$ PropertyConfigurator.configure(props)[ FD ]
Line_25 $$ String key = "log4j." + entry.getKey()-->Line_30 $$ if (key.endsWith(".type")) [ FD ]
Line_16 $$ if (resolveConfig) -->Line_17 $$ resolveConfig(environment, settingsBuilder)[ CD ]
Line_27 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_33 $$ props.setProperty(key, value)[ FD ]
Line_27 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_31 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_9 $$ if (loaded) -->Line_10 $$ return[ CD ]
Line_15 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_22 $$ settingsBuilder.replacePropertyPlaceholders()[ FD ]
Line_27 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_29 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_23 $$ Properties props = new Properties()-->Line_31 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_26 $$ String value = entry.getValue()-->Line_29 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_23 $$ Properties props = new Properties()-->Line_29 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_25 $$ String key = "log4j." + entry.getKey()-->Line_29 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_28 $$ if (key.endsWith(".value")) -->Line_30 $$ if (key.endsWith(".type")) [ CD ]
Line_24 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) -->Line_26 $$ String value = entry.getValue()[ FD ]
Line_24 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) -->Line_25 $$ String key = "log4j." + entry.getKey()[ FD ]
