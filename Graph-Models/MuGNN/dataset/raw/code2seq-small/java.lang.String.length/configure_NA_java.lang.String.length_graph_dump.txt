Line_22 $$ if (key.endsWith(".type")) -->Line_23 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_14 $$ settingsBuilder.replacePropertyPlaceholders()[ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_28 $$ props.setProperty("log4j.path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()))[ CD ]
Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_14 $$ settingsBuilder.replacePropertyPlaceholders()[ FD ]
Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_16 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) [ FD ]
Line_15 $$ Properties props = new Properties()-->Line_21 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_16 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) -->Line_18 $$ String value = entry.getValue()[ FD ]
Line_17 $$ String key = "log4j." + entry.getKey()-->Line_25 $$ props.setProperty(key, value)[ FD ]
Line_18 $$ String value = entry.getValue()-->Line_25 $$ props.setProperty(key, value)[ FD ]
Line_18 $$ String value = entry.getValue()-->Line_23 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_19 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_25 $$ props.setProperty(key, value)[ FD ]
Line_17 $$ String key = "log4j." + entry.getKey()-->Line_23 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_15 $$ Properties props = new Properties()-->Line_25 $$ props.setProperty(key, value)[ FD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_12 $$ settingsBuilder.putProperties("elasticsearch.", BootstrapInfo.getSystemProperties()).putProperties("es.", BootstrapInfo.getSystemProperties())[ CD ]
Line_15 $$ Properties props = new Properties()-->Line_29 $$ PropertyConfigurator.configure(props)[ FD ]
Line_7 $$ Environment environment = new Environment(settings)-->Line_10 $$ resolveConfig(environment, settingsBuilder)[ FD ]
Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_12 $$ settingsBuilder.putProperties("elasticsearch.", BootstrapInfo.getSystemProperties()).putProperties("es.", BootstrapInfo.getSystemProperties())[ FD ]
Line_16 $$ for (Map.Entry<String, String> entry : settingsBuilder.build().getAsMap().entrySet()) -->Line_17 $$ String key = "log4j." + entry.getKey()[ FD ]
Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_13 $$ settingsBuilder.put(settings)[ FD ]
Line_17 $$ String key = "log4j." + entry.getKey()-->Line_22 $$ if (key.endsWith(".type")) [ FD ]
Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()-->Line_10 $$ resolveConfig(environment, settingsBuilder)[ FD ]
Line_17 $$ String key = "log4j." + entry.getKey()-->Line_20 $$ if (key.endsWith(".value")) [ FD ]
Line_17 $$ String key = "log4j." + entry.getKey()-->Line_21 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_20 $$ if (key.endsWith(".value")) -->Line_22 $$ if (key.endsWith(".type")) [ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_29 $$ PropertyConfigurator.configure(props)[ CD ]
Line_19 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_23 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_3 $$ if (loaded) [ CD ]
Line_20 $$ if (key.endsWith(".value")) -->Line_21 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ CD ]
Line_7 $$ Environment environment = new Environment(settings)-->Line_28 $$ props.setProperty("log4j.path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()))[ FD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_8 $$ Settings.Builder settingsBuilder = settingsBuilder()[ CD ]
Line_15 $$ Properties props = new Properties()-->Line_28 $$ props.setProperty("log4j.path.logs", cleanPath(environment.logsFile().toAbsolutePath().toString()))[ FD ]
Line_18 $$ String value = entry.getValue()-->Line_21 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_19 $$ value = REPLACEMENTS.getOrDefault(value, value)-->Line_21 $$ props.setProperty(key.substring(0, key.length() - ".value".length()), value)[ FD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_7 $$ Environment environment = new Environment(settings)[ CD ]
Line_3 $$ if (loaded) -->Line_4 $$ return[ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_13 $$ settingsBuilder.put(settings)[ FD ]
Line_18 $$ String value = entry.getValue()-->Line_19 $$ value = REPLACEMENTS.getOrDefault(value, value)[ FD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_9 $$ if (resolveConfig) [ CD ]
Line_15 $$ Properties props = new Properties()-->Line_23 $$ props.setProperty(key.substring(0, key.length() - ".type".length()), value)[ FD ]
Line_9 $$ if (resolveConfig) -->Line_10 $$ resolveConfig(environment, settingsBuilder)[ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_15 $$ Properties props = new Properties()[ CD ]
Line_2 $$ public static void configure(Settings settings, boolean resolveConfig) -->Line_13 $$ settingsBuilder.put(settings)[ CD ]
Line_22 $$ if (key.endsWith(".type")) -->Line_25 $$ props.setProperty(key, value)[ CD ]
