Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_20 $$ container.put(qualifiedName, new HotSwapFile(file))[ FD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_6 $$ final File[] files = file.listFiles()[ FD ]
Line_8 $$ for (File child : files) -->Line_9 $$ if (!collectModifiedClasses(child, filePath + "/" + child.getName(), rootPath, container, progress, timeStamp)) [ FD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_3 $$ if (progress.isCancelled()) [ FD ]
Line_9 $$ if (!collectModifiedClasses(child, filePath + "/" + child.getName(), rootPath, container, progress, timeStamp)) -->Line_10 $$ return false[ CD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_7 $$ if (files != null) [ CD ]
Line_3 $$ if (progress.isCancelled()) -->Line_4 $$ return false[ CD ]
Line_6 $$ final File[] files = file.listFiles()-->Line_7 $$ if (files != null) [ FD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_16 $$ if (file.lastModified() > timeStamp) [ FD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_3 $$ if (progress.isCancelled()) [ CD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_6 $$ final File[] files = file.listFiles()[ CD ]
Line_16 $$ if (file.lastModified() > timeStamp) -->Line_17 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ CD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_17 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ FD ]
Line_16 $$ if (file.lastModified() > timeStamp) -->Line_20 $$ container.put(qualifiedName, new HotSwapFile(file))[ CD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_9 $$ if (!collectModifiedClasses(child, filePath + "/" + child.getName(), rootPath, container, progress, timeStamp)) [ FD ]
Line_2 $$ private static boolean collectModifiedClasses(File file, String filePath, String rootPath, Map<String, HotSwapFile> container, HotSwapProgress progress, long timeStamp) -->Line_24 $$ return true[ CD ]
