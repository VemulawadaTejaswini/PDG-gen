Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_9 $$ JavaClass tagJavaClass = getTagJavaClass(tag)[ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_9 $$ JavaClass tagJavaClass = getTagJavaClass(tag)[ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_6 $$ if (tag.startsWith("liferay-")) [ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_3 $$ if (!attributeAndValue.endsWith(StringPool.QUOTE) || attributeAndValue.contains("\"<%=")) [ FD ]
Line_9 $$ JavaClass tagJavaClass = getTagJavaClass(tag)-->Line_18 $$ JavaMethod setAttributeMethod = tagJavaClass.getMethodBySignature(setAttributeMethodName, new Type[] [ FD ]
Line_15 $$ String setAttributeMethodName = "set" + TextFormatter.format(attribute, TextFormatter.G)-->Line_18 $$ JavaMethod setAttributeMethod = tagJavaClass.getMethodBySignature(setAttributeMethodName, new Type[] [ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_10 $$ if (tagJavaClass == null) [ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_13 $$ int pos = attributeAndValue.indexOf("=\"")[ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_20 $$ String value = attributeAndValue.substring(pos + 2, attributeAndValue.length() - 1)[ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_14 $$ String attribute = attributeAndValue.substring(0, pos)[ FD ]
Line_9 $$ JavaClass tagJavaClass = getTagJavaClass(tag)-->Line_10 $$ if (tagJavaClass == null) [ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_3 $$ if (!attributeAndValue.endsWith(StringPool.QUOTE) || attributeAndValue.contains("\"<%=")) [ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_15 $$ String setAttributeMethodName = "set" + TextFormatter.format(attribute, TextFormatter.G)[ CD ]
Line_7 $$ tag = tag.substring(8)-->Line_9 $$ JavaClass tagJavaClass = getTagJavaClass(tag)[ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_7 $$ tag = tag.substring(8)[ FD ]
Line_20 $$ String value = attributeAndValue.substring(pos + 2, attributeAndValue.length() - 1)-->Line_21 $$ if (!isValidTagAttributeValue(value, dataType)) [ FD ]
Line_14 $$ String attribute = attributeAndValue.substring(0, pos)-->Line_15 $$ String setAttributeMethodName = "set" + TextFormatter.format(attribute, TextFormatter.G)[ FD ]
Line_6 $$ if (tag.startsWith("liferay-")) -->Line_7 $$ tag = tag.substring(8)[ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_6 $$ if (tag.startsWith("liferay-")) [ FD ]
Line_24 $$ String newAttributeAndValue = StringUtil.replace(attributeAndValue, StringPool.QUOTE + value + StringPool.QUOTE, "\"<%= " + value + " %>\"")-->Line_25 $$ return StringUtil.replace(line, attributeAndValue, newAttributeAndValue)[ FD ]
Line_19 $$ if (setAttributeMethod != null) -->Line_24 $$ String newAttributeAndValue = StringUtil.replace(attributeAndValue, StringPool.QUOTE + value + StringPool.QUOTE, "\"<%= " + value + " %>\"")[ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_25 $$ return StringUtil.replace(line, attributeAndValue, newAttributeAndValue)[ FD ]
Line_18 $$ JavaMethod setAttributeMethod = tagJavaClass.getMethodBySignature(setAttributeMethodName, new Type[] -->Line_19 $$ if (setAttributeMethod != null) [ FD ]
Line_3 $$ if (!attributeAndValue.endsWith(StringPool.QUOTE) || attributeAndValue.contains("\"<%=")) -->Line_4 $$ return line[ CD ]
Line_21 $$ if (!isValidTagAttributeValue(value, dataType)) -->Line_22 $$ return line[ CD ]
Line_13 $$ int pos = attributeAndValue.indexOf("=\"")-->Line_14 $$ String attribute = attributeAndValue.substring(0, pos)[ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_13 $$ int pos = attributeAndValue.indexOf("=\"")[ FD ]
Line_19 $$ if (setAttributeMethod != null) -->Line_20 $$ String value = attributeAndValue.substring(pos + 2, attributeAndValue.length() - 1)[ CD ]
Line_10 $$ if (tagJavaClass == null) -->Line_11 $$ return line[ CD ]
Line_19 $$ if (setAttributeMethod != null) -->Line_21 $$ if (!isValidTagAttributeValue(value, dataType)) [ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_28 $$ return line[ CD ]
Line_19 $$ if (setAttributeMethod != null) -->Line_25 $$ return StringUtil.replace(line, attributeAndValue, newAttributeAndValue)[ CD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_24 $$ String newAttributeAndValue = StringUtil.replace(attributeAndValue, StringPool.QUOTE + value + StringPool.QUOTE, "\"<%= " + value + " %>\"")[ FD ]
Line_16 $$ for (String dataType : getPrimitiveTagAttributeDataTypes()) -->Line_21 $$ if (!isValidTagAttributeValue(value, dataType)) [ FD ]
Line_2 $$ protected String formatTagAttributeType(String line, String tag, String attributeAndValue) throws Exception -->Line_14 $$ String attribute = attributeAndValue.substring(0, pos)[ CD ]
