Line_26 $$ text = ""-->Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)[ FD ]
Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")-->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ CD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_10 $$ if (e instanceof PsiDocComment) -->Line_12 $$ String text = cm.getText()[ CD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_17 $$ if (text.startsWith("/*")) [ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(text.substring(2).trim())[ FD ]
Line_34 $$ first = false-->Line_14 $$ if (!first)[ FD ]
Line_26 $$ text = ""-->Line_16 $$ sb.append(text.substring(2).trim())[ FD ]
Line_26 $$ text = ""-->Line_17 $$ if (text.startsWith("/*")) [ FD ]
Line_13 $$ if (text.startsWith("//")) -->Line_16 $$ sb.append(text.substring(2).trim())[ CD ]
Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")-->Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_29 $$ sb.append(text)[ FD ]
Line_17 $$ if (text.startsWith("/*")) -->Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) [ CD ]
Line_12 $$ String text = cm.getText()-->Line_19 $$ int commentFooterStartOffset = CharArrayUtil.shiftBackward(text, text.length() - 2, "*")[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)[ FD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ CD ]
Line_26 $$ text = ""-->Line_29 $$ sb.append(text)[ FD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_26 $$ text = ""[ CD ]
Line_4 $$ String commentHeader = null-->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")[ FD ]
Line_19 $$ int commentFooterStartOffset = CharArrayUtil.shiftBackward(text, text.length() - 2, "*")-->Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) [ FD ]
Line_10 $$ if (e instanceof PsiDocComment) -->Line_11 $$ PsiComment cm = (PsiComment) e[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append('\n')[ FD ]
Line_17 $$ if (text.startsWith("/*")) -->Line_19 $$ int commentFooterStartOffset = CharArrayUtil.shiftBackward(text, text.length() - 2, "*")[ CD ]
Line_5 $$ String commentFooter = null-->Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)[ FD ]
Line_9 $$ while (true) -->Line_10 $$ if (e instanceof PsiDocComment) [ CD ]
Line_10 $$ if (e instanceof PsiDocComment) -->Line_13 $$ if (text.startsWith("//")) [ CD ]
Line_26 $$ text = ""-->Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)[ FD ]
Line_14 $$ if (!first)-->Line_15 $$ sb.append('\n')[ CD ]
Line_26 $$ text = ""-->Line_13 $$ if (text.startsWith("//")) [ FD ]
Line_12 $$ String text = cm.getText()-->Line_26 $$ text = ""[ FD ]
Line_5 $$ String commentFooter = null-->Line_27 $$ commentFooter = ""[ FD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)[ CD ]
Line_26 $$ text = ""-->Line_19 $$ int commentFooterStartOffset = CharArrayUtil.shiftBackward(text, text.length() - 2, "*")[ FD ]
Line_26 $$ text = ""-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_4 $$ String commentHeader = null-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_7 $$ PsiElement e = element-->Line_35 $$ e = e.getNextSibling()[ FD ]
Line_12 $$ String text = cm.getText()-->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_10 $$ if (e instanceof PsiDocComment) -->Line_31 $$ if (!(e instanceof PsiWhiteSpace) && !(e instanceof PsiComment)) [ CD ]
Line_9 $$ while (true) -->Line_35 $$ e = e.getNextSibling()[ CD ]
Line_17 $$ if (text.startsWith("/*")) -->Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")[ CD ]
Line_12 $$ String text = cm.getText()-->Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)[ FD ]
Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_17 $$ if (text.startsWith("/*")) -->Line_29 $$ sb.append(text)[ CD ]
Line_12 $$ String text = cm.getText()-->Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")[ FD ]
Line_12 $$ String text = cm.getText()-->Line_29 $$ sb.append(text)[ FD ]
Line_8 $$ boolean first = true-->Line_34 $$ first = false[ FD ]
Line_13 $$ if (text.startsWith("//")) -->Line_17 $$ if (text.startsWith("/*")) [ CD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)[ CD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_13 $$ if (text.startsWith("//")) [ FD ]
Line_26 $$ text = ""-->Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")[ FD ]
Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_26 $$ text = ""[ FD ]
Line_12 $$ String text = cm.getText()-->Line_13 $$ if (text.startsWith("//")) [ FD ]
Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) -->Line_27 $$ commentFooter = ""[ CD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ return new CommentInfo(commentHeader, sb.toString(), commentFooter)[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_16 $$ sb.append(text.substring(2).trim())[ FD ]
Line_12 $$ String text = cm.getText()-->Line_17 $$ if (text.startsWith("/*")) [ FD ]
Line_18 $$ int commentHeaderEndOffset = CharArrayUtil.shiftForward(text, 1, "*")-->Line_20 $$ if (commentHeaderEndOffset <= commentFooterStartOffset) [ FD ]
Line_12 $$ String text = cm.getText()-->Line_25 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_22 $$ commentFooter = text.substring(commentFooterStartOffset + 1)-->Line_27 $$ commentFooter = ""[ FD ]
Line_8 $$ boolean first = true-->Line_14 $$ if (!first)[ FD ]
Line_26 $$ text = ""-->Line_21 $$ commentHeader = text.substring(0, commentHeaderEndOffset)[ FD ]
Line_9 $$ while (true) -->Line_34 $$ first = false[ CD ]
Line_35 $$ e = e.getNextSibling()-->Line_10 $$ if (e instanceof PsiDocComment) [ FD ]
Line_7 $$ PsiElement e = element-->Line_10 $$ if (e instanceof PsiDocComment) [ FD ]
Line_11 $$ PsiComment cm = (PsiComment) e-->Line_12 $$ String text = cm.getText()[ FD ]
Line_6 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append(text)[ FD ]
Line_12 $$ String text = cm.getText()-->Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)[ FD ]
Line_12 $$ String text = cm.getText()-->Line_16 $$ sb.append(text.substring(2).trim())[ FD ]
Line_13 $$ if (text.startsWith("//")) -->Line_14 $$ if (!first)[ CD ]
Line_23 $$ text = text.substring(commentHeaderEndOffset, commentFooterStartOffset + 1)-->Line_19 $$ int commentFooterStartOffset = CharArrayUtil.shiftBackward(text, text.length() - 2, "*")[ FD ]
