Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_29 $$ if (start < line.length() && line.charAt(start++) == ' ') [ CD ]
Line_19 $$ hash = line.substring(0, i)-->Line_23 $$ if (hash == null) [ FD ]
Line_4 $$ if (line.isEmpty()) -->Line_5 $$ return null[ CD ]
Line_18 $$ if (!Character.isLetterOrDigit(c)) -->Line_19 $$ hash = line.substring(0, i)[ CD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_18 $$ if (!Character.isLetterOrDigit(c)) [ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_23 $$ if (hash == null) [ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_29 $$ if (start < line.length() && line.charAt(start++) == ' ') [ FD ]
Line_30 $$ for (i = start; i < line.length(); i++) -->Line_31 $$ char c = line.charAt(i)[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_7 $$ char firstChar = line.charAt(0)[ CD ]
Line_15 $$ int i-->Line_16 $$ for (i = 0; i < line.length(); i++) [ FD ]
Line_31 $$ char c = line.charAt(i)-->Line_32 $$ if (Character.isWhitespace(c)) [ FD ]
Line_29 $$ if (start < line.length() && line.charAt(start++) == ' ') -->Line_36 $$ branch = line.substring(start, i)[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_17 $$ char c = line.charAt(i)[ FD ]
Line_23 $$ if (hash == null) -->Line_24 $$ LOG.warn("Ignoring invalid packed-refs line: [" + line + "]")[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_27 $$ String branch = null[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_28 $$ int start = i[ CD ]
Line_15 $$ int i-->Line_30 $$ for (i = start; i < line.length(); i++) [ FD ]
Line_15 $$ int i-->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_30 $$ for (i = start; i < line.length(); i++) -->Line_32 $$ if (Character.isWhitespace(c)) [ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_38 $$ if (branch == null || !branch.startsWith(REFS_HEADS_PREFIX) && !branch.startsWith(REFS_REMOTES_PREFIX)) [ CD ]
Line_23 $$ if (hash == null) -->Line_25 $$ return null[ CD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_31 $$ char c = line.charAt(i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_31 $$ char c = line.charAt(i)[ FD ]
Line_29 $$ if (start < line.length() && line.charAt(start++) == ' ') -->Line_30 $$ for (i = start; i < line.length(); i++) [ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_30 $$ for (i = start; i < line.length(); i++) [ FD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_15 $$ int i-->Line_31 $$ char c = line.charAt(i)[ FD ]
Line_38 $$ if (branch == null || !branch.startsWith(REFS_HEADS_PREFIX) && !branch.startsWith(REFS_REMOTES_PREFIX)) -->Line_39 $$ return null[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_4 $$ if (line.isEmpty()) [ FD ]
Line_17 $$ char c = line.charAt(i)-->Line_18 $$ if (!Character.isLetterOrDigit(c)) [ FD ]
Line_14 $$ String hash = null-->Line_41 $$ return Pair.create(shortBuffer(branch), shortBuffer(hash.trim()))[ FD ]
Line_15 $$ int i-->Line_19 $$ hash = line.substring(0, i)[ FD ]
Line_11 $$ if (firstChar == '^') -->Line_12 $$ return null[ CD ]
Line_28 $$ int start = i-->Line_30 $$ for (i = start; i < line.length(); i++) [ FD ]
Line_27 $$ String branch = null-->Line_38 $$ if (branch == null || !branch.startsWith(REFS_HEADS_PREFIX) && !branch.startsWith(REFS_REMOTES_PREFIX)) [ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_3 $$ line = line.trim()[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_19 $$ hash = line.substring(0, i)[ FD ]
Line_15 $$ int i-->Line_17 $$ char c = line.charAt(i)[ FD ]
Line_28 $$ int start = i-->Line_29 $$ if (start < line.length() && line.charAt(start++) == ' ') [ FD ]
Line_28 $$ int start = i-->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_7 $$ char firstChar = line.charAt(0)[ FD ]
Line_14 $$ String hash = null-->Line_23 $$ if (hash == null) [ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_3 $$ line = line.trim()[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_16 $$ for (i = 0; i < line.length(); i++) [ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_41 $$ return Pair.create(shortBuffer(branch), shortBuffer(hash.trim()))[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_14 $$ String hash = null[ CD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_16 $$ for (i = 0; i < line.length(); i++) [ CD ]
Line_17 $$ char c = line.charAt(i)-->Line_32 $$ if (Character.isWhitespace(c)) [ FD ]
Line_27 $$ String branch = null-->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_15 $$ int i[ CD ]
Line_30 $$ for (i = start; i < line.length(); i++) -->Line_31 $$ char c = line.charAt(i)[ FD ]
Line_7 $$ char firstChar = line.charAt(0)-->Line_11 $$ if (firstChar == '^') [ FD ]
Line_19 $$ hash = line.substring(0, i)-->Line_41 $$ return Pair.create(shortBuffer(branch), shortBuffer(hash.trim()))[ FD ]
Line_14 $$ String hash = null-->Line_19 $$ hash = line.substring(0, i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_11 $$ if (firstChar == '^') [ CD ]
Line_36 $$ branch = line.substring(start, i)-->Line_38 $$ if (branch == null || !branch.startsWith(REFS_HEADS_PREFIX) && !branch.startsWith(REFS_REMOTES_PREFIX)) [ FD ]
Line_27 $$ String branch = null-->Line_41 $$ return Pair.create(shortBuffer(branch), shortBuffer(hash.trim()))[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_8 $$ if (firstChar == '#') [ CD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_17 $$ char c = line.charAt(i)[ CD ]
Line_36 $$ branch = line.substring(start, i)-->Line_41 $$ return Pair.create(shortBuffer(branch), shortBuffer(hash.trim()))[ FD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_30 $$ for (i = start; i < line.length(); i++) [ FD ]
Line_7 $$ char firstChar = line.charAt(0)-->Line_8 $$ if (firstChar == '#') [ FD ]
Line_8 $$ if (firstChar == '#') -->Line_9 $$ return null[ CD ]
Line_30 $$ for (i = start; i < line.length(); i++) -->Line_36 $$ branch = line.substring(start, i)[ FD ]
Line_2 $$ private static Pair<String, String> parsePackedRefsLine(@NotNull String line) -->Line_4 $$ if (line.isEmpty()) [ CD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_19 $$ hash = line.substring(0, i)[ FD ]
Line_16 $$ for (i = 0; i < line.length(); i++) -->Line_17 $$ char c = line.charAt(i)[ FD ]
