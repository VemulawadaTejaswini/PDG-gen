Line_3 $$ final PsiClass throwableClass = JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_THROWABLE, GlobalSearchScope.allScope(project))-->Line_4 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(DebuggerBundle.message("add.exception.breakpoint.classchooser.title"), GlobalSearchScope.allScope(project), throwableClass, true, true, null)[ FD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_3 $$ final PsiClass throwableClass = JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_THROWABLE, GlobalSearchScope.allScope(project))[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_6 $$ final PsiClass selectedClass = chooser.getSelected()[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_8 $$ if (qName != null && qName.length() > 0) [ CD ]
Line_6 $$ final PsiClass selectedClass = chooser.getSelected()-->Line_7 $$ final String qName = selectedClass == null ? null : JVMNameUtil.getNonAnonymousClassName(selectedClass)[ FD ]
Line_4 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(DebuggerBundle.message("add.exception.breakpoint.classchooser.title"), GlobalSearchScope.allScope(project), throwableClass, true, true, null)-->Line_5 $$ chooser.showDialog()[ FD ]
Line_7 $$ final String qName = selectedClass == null ? null : JVMNameUtil.getNonAnonymousClassName(selectedClass)-->Line_8 $$ if (qName != null && qName.length() > 0) [ FD ]
Line_6 $$ final PsiClass selectedClass = chooser.getSelected()-->Line_11 $$ return XDebuggerManager.getInstance(project).getBreakpointManager().addBreakpoint(JavaExceptionBreakpointType.this, new JavaExceptionBreakpointProperties(qName, ((PsiClassOwner) selectedClass.getContainingFile()).getPackageName()))[ FD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_5 $$ chooser.showDialog()[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_15 $$ return null[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_4 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(DebuggerBundle.message("add.exception.breakpoint.classchooser.title"), GlobalSearchScope.allScope(project), throwableClass, true, true, null)[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_7 $$ final String qName = selectedClass == null ? null : JVMNameUtil.getNonAnonymousClassName(selectedClass)[ CD ]
Line_8 $$ if (qName != null && qName.length() > 0) -->Line_9 $$ return ApplicationManager.getApplication().runWriteAction(new Computable<XBreakpoint<JavaExceptionBreakpointProperties>>() [ CD ]
Line_9 $$ return ApplicationManager.getApplication().runWriteAction(new Computable<XBreakpoint<JavaExceptionBreakpointProperties>>() -->Line_11 $$ return XDebuggerManager.getInstance(project).getBreakpointManager().addBreakpoint(JavaExceptionBreakpointType.this, new JavaExceptionBreakpointProperties(qName, ((PsiClassOwner) selectedClass.getContainingFile()).getPackageName()))[ CD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_4 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(DebuggerBundle.message("add.exception.breakpoint.classchooser.title"), GlobalSearchScope.allScope(project), throwableClass, true, true, null)[ FD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_3 $$ final PsiClass throwableClass = JavaPsiFacade.getInstance(project).findClass(CommonClassNames.JAVA_LANG_THROWABLE, GlobalSearchScope.allScope(project))[ FD ]
Line_4 $$ TreeClassChooser chooser = TreeClassChooserFactory.getInstance(project).createInheritanceClassChooser(DebuggerBundle.message("add.exception.breakpoint.classchooser.title"), GlobalSearchScope.allScope(project), throwableClass, true, true, null)-->Line_6 $$ final PsiClass selectedClass = chooser.getSelected()[ FD ]
Line_2 $$ public XBreakpoint<JavaExceptionBreakpointProperties> addBreakpoint(final Project project, JComponent parentComponent) -->Line_11 $$ return XDebuggerManager.getInstance(project).getBreakpointManager().addBreakpoint(JavaExceptionBreakpointType.this, new JavaExceptionBreakpointProperties(qName, ((PsiClassOwner) selectedClass.getContainingFile()).getPackageName()))[ FD ]
