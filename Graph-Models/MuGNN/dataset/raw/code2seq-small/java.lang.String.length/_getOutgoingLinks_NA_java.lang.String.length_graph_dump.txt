Line_22 $$ Map<String, String> routeParameters = new HashMap()-->Line_29 $$ String title = routeParameters.get("title")[ FD ]
Line_9 $$ for (StartTag startTag : startTags) -->Line_10 $$ String href = startTag.getAttributeValue("href")[ FD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_43 $$ return links[ CD ]
Line_14 $$ int pos = href.lastIndexOf(_friendlyURLMapping)-->Line_15 $$ if (pos == -1) [ FD ]
Line_18 $$ String friendlyURL = href.substring(pos + _friendlyURLMapping.length())-->Line_23 $$ if (!_router.urlToParameters(friendlyURL, routeParameters)) [ FD ]
Line_22 $$ Map<String, String> routeParameters = new HashMap()-->Line_30 $$ String nodeName = routeParameters.get("nodeName")[ FD ]
Line_29 $$ String title = routeParameters.get("title")-->Line_36 $$ links.put(StringUtil.toLowerCase(title), Boolean.TRUE)[ FD ]
Line_10 $$ String href = startTag.getAttributeValue("href")-->Line_11 $$ if (Validator.isNull(href)) [ FD ]
Line_10 $$ String href = startTag.getAttributeValue("href")-->Line_14 $$ int pos = href.lastIndexOf(_friendlyURLMapping)[ FD ]
Line_22 $$ Map<String, String> routeParameters = new HashMap()-->Line_23 $$ if (!_router.urlToParameters(friendlyURL, routeParameters)) [ FD ]
Line_19 $$ if (friendlyURL.endsWith(StringPool.SLASH)) -->Line_20 $$ friendlyURL = friendlyURL.substring(0, friendlyURL.length() - 1)[ CD ]
Line_20 $$ friendlyURL = friendlyURL.substring(0, friendlyURL.length() - 1)-->Line_23 $$ if (!_router.urlToParameters(friendlyURL, routeParameters)) [ FD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_3 $$ if (Validator.isNull(page.getContent())) [ FD ]
Line_23 $$ if (!_router.urlToParameters(friendlyURL, routeParameters)) -->Line_24 $$ if (_log.isWarnEnabled()) [ CD ]
Line_7 $$ Source source = new Source(page.getContent())-->Line_8 $$ List<StartTag> startTags = source.getAllStartTags("a")[ FD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_6 $$ Map<String, Boolean> links = new HashMap()[ CD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_3 $$ if (Validator.isNull(page.getContent())) [ CD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_8 $$ List<StartTag> startTags = source.getAllStartTags("a")[ CD ]
Line_18 $$ String friendlyURL = href.substring(pos + _friendlyURLMapping.length())-->Line_19 $$ if (friendlyURL.endsWith(StringPool.SLASH)) [ FD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_7 $$ Source source = new Source(page.getContent())[ FD ]
Line_30 $$ String nodeName = routeParameters.get("nodeName")-->Line_35 $$ _wikiNodeLocalService.getNode(page.getGroupId(), nodeName)[ FD ]
Line_18 $$ String friendlyURL = href.substring(pos + _friendlyURLMapping.length())-->Line_20 $$ friendlyURL = friendlyURL.substring(0, friendlyURL.length() - 1)[ FD ]
Line_29 $$ String title = routeParameters.get("title")-->Line_31 $$ if (Validator.isNull(title) || Validator.isNull(nodeName)) [ FD ]
Line_6 $$ Map<String, Boolean> links = new HashMap()-->Line_36 $$ links.put(StringUtil.toLowerCase(title), Boolean.TRUE)[ FD ]
Line_3 $$ if (Validator.isNull(page.getContent())) -->Line_4 $$ return Collections.emptyMap()[ CD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_35 $$ _wikiNodeLocalService.getNode(page.getGroupId(), nodeName)[ FD ]
Line_24 $$ if (_log.isWarnEnabled()) -->Line_25 $$ _log.warn("No route could be found to match URL " + friendlyURL)[ CD ]
Line_2 $$ private Map<String, Boolean> _getOutgoingLinks(WikiPage page) throws PortalException -->Line_7 $$ Source source = new Source(page.getContent())[ CD ]
Line_10 $$ String href = startTag.getAttributeValue("href")-->Line_18 $$ String friendlyURL = href.substring(pos + _friendlyURLMapping.length())[ FD ]
Line_30 $$ String nodeName = routeParameters.get("nodeName")-->Line_31 $$ if (Validator.isNull(title) || Validator.isNull(nodeName)) [ FD ]
Line_38 $$ if (_log.isWarnEnabled()) -->Line_39 $$ _log.warn(nsne.getMessage())[ CD ]
