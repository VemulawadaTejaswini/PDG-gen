Line_11 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_34 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_16 $$ if (promise == null) -->Line_18 $$ return[ CD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_20 $$ promise.setResult(JsonUtil.nextAny(reader))[ FD ]
Line_26 $$ NotNullLazyValue domainHolder = domains.get(domainName)-->Line_31 $$ Object domain = domainHolder.getValue()[ FD ]
Line_38 $$ if (reader.hasNext()) -->Line_39 $$ List<Object> list = new SmartList<Object>()[ CD ]
Line_56 $$ for (Method method : methods) -->Line_57 $$ if (method.getName().equals(command)) [ FD ]
Line_52 $$ methods = ((Class) domain).getDeclaredMethods()-->Line_54 $$ methods = domain.getClass().getMethods()[ FD ]
Line_31 $$ Object domain = domainHolder.getValue()-->Line_54 $$ methods = domain.getClass().getMethods()[ FD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_12 $$ String domainName = reader.nextString()[ FD ]
Line_57 $$ if (method.getName().equals(command)) -->Line_63 $$ return[ CD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_32 $$ String command = reader.nextString()[ FD ]
Line_13 $$ if (domainName.length() == 1) -->Line_14 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)[ CD ]
Line_56 $$ for (Method method : methods) -->Line_58 $$ method.setAccessible(true)[ FD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_46 $$ reader.endArray()[ FD ]
Line_51 $$ if (isStatic) -->Line_54 $$ methods = domain.getClass().getMethods()[ CD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_9 $$ reader.beginArray()[ FD ]
Line_12 $$ String domainName = reader.nextString()-->Line_26 $$ NotNullLazyValue domainHolder = domains.get(domainName)[ FD ]
Line_11 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_61 $$ client.send(encodeMessage(client.getByteBufAllocator(), messageId, null, null, null, new Object[] [ FD ]
Line_13 $$ if (domainName.length() == 1) -->Line_24 $$ return[ CD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_34 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_50 $$ Method[] methods-->Line_54 $$ methods = domain.getClass().getMethods()[ FD ]
Line_43 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY-->Line_59 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_12 $$ String domainName = reader.nextString()-->Line_15 $$ if (domainName.charAt(0) == 'r') [ FD ]
Line_37 $$ Object[] parameters-->Line_41 $$ parameters = ArrayUtil.toObjectArray(list)[ FD ]
Line_4 $$ if (LOG.isDebugEnabled()) -->Line_5 $$ LOG.debug("IN " + message)[ CD ]
Line_38 $$ if (reader.hasNext()) -->Line_40 $$ JsonUtil.readListBody(reader, list)[ CD ]
Line_31 $$ Object domain = domainHolder.getValue()-->Line_33 $$ if (domain instanceof JsonServiceInvocator) [ FD ]
Line_37 $$ Object[] parameters-->Line_43 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ FD ]
Line_11 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_14 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)[ FD ]
Line_56 $$ for (Method method : methods) -->Line_59 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_57 $$ if (method.getName().equals(command)) -->Line_59 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ CD ]
Line_27 $$ if (domainHolder == null) -->Line_29 $$ return[ CD ]
Line_26 $$ NotNullLazyValue domainHolder = domains.get(domainName)-->Line_27 $$ if (domainHolder == null) [ FD ]
Line_39 $$ List<Object> list = new SmartList<Object>()-->Line_40 $$ JsonUtil.readListBody(reader, list)[ FD ]
Line_38 $$ if (reader.hasNext()) -->Line_43 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ CD ]
Line_15 $$ if (domainName.charAt(0) == 'r') -->Line_16 $$ if (promise == null) [ CD ]
Line_37 $$ Object[] parameters-->Line_59 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_51 $$ if (isStatic) -->Line_52 $$ methods = ((Class) domain).getDeclaredMethods()[ CD ]
Line_41 $$ parameters = ArrayUtil.toObjectArray(list)-->Line_43 $$ parameters = ArrayUtilRt.EMPTY_OBJECT_ARRAY[ FD ]
Line_45 $$ if (!isBinary) -->Line_46 $$ reader.endArray()[ CD ]
Line_38 $$ if (reader.hasNext()) -->Line_41 $$ parameters = ArrayUtil.toObjectArray(list)[ CD ]
Line_32 $$ String command = reader.nextString()-->Line_57 $$ if (method.getName().equals(command)) [ FD ]
Line_33 $$ if (domain instanceof JsonServiceInvocator) -->Line_34 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ CD ]
Line_15 $$ if (domainName.charAt(0) == 'r') -->Line_20 $$ promise.setResult(JsonUtil.nextAny(reader))[ CD ]
Line_60 $$ if (messageId != -1) -->Line_61 $$ client.send(encodeMessage(client.getByteBufAllocator(), messageId, null, null, null, new Object[] [ CD ]
Line_16 $$ if (promise == null) -->Line_17 $$ LOG.error("Response with id " + messageId + " was already processed")[ CD ]
Line_13 $$ if (domainName.length() == 1) -->Line_15 $$ if (domainName.charAt(0) == 'r') [ CD ]
Line_57 $$ if (method.getName().equals(command)) -->Line_60 $$ if (messageId != -1) [ CD ]
Line_11 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1-->Line_60 $$ if (messageId != -1) [ FD ]
Line_14 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_22 $$ promise.setError("error")[ FD ]
Line_32 $$ String command = reader.nextString()-->Line_34 $$ ((JsonServiceInvocator) domain).invoke(command, client, reader, messageId, message)[ FD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_40 $$ JsonUtil.readListBody(reader, list)[ FD ]
Line_50 $$ Method[] methods-->Line_52 $$ methods = ((Class) domain).getDeclaredMethods()[ FD ]
Line_12 $$ String domainName = reader.nextString()-->Line_13 $$ if (domainName.length() == 1) [ FD ]
Line_14 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_20 $$ promise.setResult(JsonUtil.nextAny(reader))[ FD ]
Line_27 $$ if (domainHolder == null) -->Line_28 $$ LOG.error("Cannot find domain " + domainName)[ CD ]
Line_33 $$ if (domain instanceof JsonServiceInvocator) -->Line_35 $$ return[ CD ]
Line_57 $$ if (method.getName().equals(command)) -->Line_58 $$ method.setAccessible(true)[ CD ]
Line_41 $$ parameters = ArrayUtil.toObjectArray(list)-->Line_59 $$ Object result = method.invoke(isStatic ? null : domain, parameters)[ FD ]
Line_14 $$ AsyncPromise<Object> promise = client.messageCallbackMap.remove(messageId)-->Line_16 $$ if (promise == null) [ FD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_11 $$ int messageId = reader.peek() == JsonToken.NUMBER ? reader.nextInt() : -1[ FD ]
Line_8 $$ if (!isBinary) -->Line_9 $$ reader.beginArray()[ CD ]
Line_39 $$ List<Object> list = new SmartList<Object>()-->Line_41 $$ parameters = ArrayUtil.toObjectArray(list)[ FD ]
Line_7 $$ JsonReaderEx reader = new JsonReaderEx(message)-->Line_38 $$ if (reader.hasNext()) [ FD ]
Line_15 $$ if (domainName.charAt(0) == 'r') -->Line_22 $$ promise.setError("error")[ CD ]
