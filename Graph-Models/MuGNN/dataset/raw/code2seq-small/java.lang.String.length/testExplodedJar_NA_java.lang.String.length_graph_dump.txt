Line_5 $$ String dirPath = explodedPar.getAbsolutePath()-->Line_6 $$ if (dirPath.endsWith("/")) [ FD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_4 $$ addPackageToClasspath(explodedPar)[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_9 $$ final VirtualFile virtualFile = VFS.getChild(dirPath)[ CD ]
Line_19 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_21 $$ stream.close()[ FD ]
Line_3 $$ File explodedPar = buildExplodedPar()-->Line_5 $$ String dirPath = explodedPar.getAbsolutePath()[ FD ]
Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())-->Line_15 $$ assertEquals(1, resultCollector.getMappingFileSet().size())[ FD ]
Line_5 $$ String dirPath = explodedPar.getAbsolutePath()-->Line_9 $$ final VirtualFile virtualFile = VFS.getChild(dirPath)[ FD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_6 $$ if (dirPath.endsWith("/")) [ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_13 $$ assertEquals(1, resultCollector.getClassDescriptorSet().size())[ CD ]
Line_19 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()-->Line_20 $$ assertNotNull(stream)[ FD ]
Line_10 $$ ArchiveDescriptor archiveDescriptor = VirtualFileSystemArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(virtualFile.toURL())-->Line_12 $$ archiveDescriptor.visitArchive(new AbstractScannerImpl.ArchiveContextImpl(new PersistenceUnitDescriptorAdapter(), true, resultCollector))[ FD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_16 $$ assertTrue(resultCollector.getClassDescriptorSet().contains(new ClassDescriptorImpl(Carpet.class.getName(), null)))[ CD ]
Line_5 $$ String dirPath = explodedPar.getAbsolutePath()-->Line_7 $$ dirPath = dirPath.substring(0, dirPath.length() - 1)[ FD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_15 $$ assertEquals(1, resultCollector.getMappingFileSet().size())[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_5 $$ String dirPath = explodedPar.getAbsolutePath()[ CD ]
Line_3 $$ File explodedPar = buildExplodedPar()-->Line_4 $$ addPackageToClasspath(explodedPar)[ FD ]
Line_17 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) -->Line_18 $$ assertNotNull(mappingFileDescriptor.getStreamAccess())[ FD ]
Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())-->Line_13 $$ assertEquals(1, resultCollector.getClassDescriptorSet().size())[ FD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_10 $$ ArchiveDescriptor archiveDescriptor = VirtualFileSystemArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(virtualFile.toURL())[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_3 $$ File explodedPar = buildExplodedPar()[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_12 $$ archiveDescriptor.visitArchive(new AbstractScannerImpl.ArchiveContextImpl(new PersistenceUnitDescriptorAdapter(), true, resultCollector))[ CD ]
Line_2 $$ public void testExplodedJar() throws Exception -->Line_14 $$ assertEquals(1, resultCollector.getPackageDescriptorSet().size())[ CD ]
Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())-->Line_14 $$ assertEquals(1, resultCollector.getPackageDescriptorSet().size())[ FD ]
Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())-->Line_16 $$ assertTrue(resultCollector.getClassDescriptorSet().contains(new ClassDescriptorImpl(Carpet.class.getName(), null)))[ FD ]
Line_9 $$ final VirtualFile virtualFile = VFS.getChild(dirPath)-->Line_10 $$ ArchiveDescriptor archiveDescriptor = VirtualFileSystemArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(virtualFile.toURL())[ FD ]
Line_17 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) -->Line_19 $$ final InputStream stream = mappingFileDescriptor.getStreamAccess().accessInputStream()[ FD ]
Line_7 $$ dirPath = dirPath.substring(0, dirPath.length() - 1)-->Line_9 $$ final VirtualFile virtualFile = VFS.getChild(dirPath)[ FD ]
Line_6 $$ if (dirPath.endsWith("/")) -->Line_7 $$ dirPath = dirPath.substring(0, dirPath.length() - 1)[ CD ]
Line_11 $$ AbstractScannerImpl.ResultCollector resultCollector = new AbstractScannerImpl.ResultCollector(new StandardScanOptions())-->Line_17 $$ for (MappingFileDescriptor mappingFileDescriptor : resultCollector.getMappingFileSet()) [ FD ]
