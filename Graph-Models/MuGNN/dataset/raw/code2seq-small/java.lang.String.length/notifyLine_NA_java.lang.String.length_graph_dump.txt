Line_12 $$ if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_16 $$ LOG.debug(line.trim())[ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_8 $$ LOG.info(line.trim())[ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_19 $$ myLineListeners.getMulticaster().onLineAvailable(trimmed, outputType)[ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_4 $$ if (myVcs != null && !"\r".equals(line.substring(trimmed.length()))) [ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)[ FD ]
Line_12 $$ if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_13 $$ myVcs.showErrorMessages(trimmed)[ CD ]
Line_4 $$ if (myVcs != null && !"\r".equals(line.substring(trimmed.length()))) -->Line_5 $$ if (outputType == ProcessOutputTypes.STDOUT) [ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_5 $$ if (outputType == ProcessOutputTypes.STDOUT) [ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_6 $$ if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) [ FD ]
Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)-->Line_13 $$ myVcs.showErrorMessages(trimmed)[ FD ]
Line_6 $$ if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_8 $$ LOG.info(line.trim())[ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_12 $$ if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) [ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_14 $$ LOG.info(line.trim())[ FD ]
Line_6 $$ if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_7 $$ myVcs.showMessages(trimmed)[ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_19 $$ myLineListeners.getMulticaster().onLineAvailable(trimmed, outputType)[ CD ]
Line_6 $$ if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_10 $$ OUTPUT_LOG.debug(line.trim())[ CD ]
Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)-->Line_4 $$ if (myVcs != null && !"\r".equals(line.substring(trimmed.length()))) [ FD ]
Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)-->Line_19 $$ myLineListeners.getMulticaster().onLineAvailable(trimmed, outputType)[ FD ]
Line_5 $$ if (outputType == ProcessOutputTypes.STDOUT) -->Line_12 $$ if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) [ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_4 $$ if (myVcs != null && !"\r".equals(line.substring(trimmed.length()))) [ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_16 $$ LOG.debug(line.trim())[ FD ]
Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)-->Line_7 $$ myVcs.showMessages(trimmed)[ FD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_10 $$ OUTPUT_LOG.debug(line.trim())[ FD ]
Line_5 $$ if (outputType == ProcessOutputTypes.STDOUT) -->Line_6 $$ if (!isStdoutSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) [ CD ]
Line_2 $$ private void notifyLine(final String line, final Key outputType) -->Line_3 $$ String trimmed = LineHandlerHelper.trimLineSeparator(line)[ CD ]
Line_12 $$ if (outputType == ProcessOutputTypes.STDERR && !isStderrSuppressed() && !mySilent && !StringUtil.isEmptyOrSpaces(line)) -->Line_14 $$ LOG.info(line.trim())[ CD ]
