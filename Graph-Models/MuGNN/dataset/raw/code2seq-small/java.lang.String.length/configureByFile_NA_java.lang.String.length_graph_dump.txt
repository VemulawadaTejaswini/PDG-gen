Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_4 $$ final VirtualFile file = testDataRoot.findFileByRelativePath(filePath)[ FD ]
Line_12 $$ int offset = fileText.indexOf(MARKER)-->Line_14 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + MARKER.length())[ FD ]
Line_8 $$ fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(file))-->Line_12 $$ int offset = fileText.indexOf(MARKER)[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_6 $$ String fileText[ CD ]
Line_4 $$ final VirtualFile file = testDataRoot.findFileByRelativePath(filePath)-->Line_5 $$ assertNotNull(file)[ FD ]
Line_8 $$ fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(file))-->Line_14 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + MARKER.length())[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_4 $$ final VirtualFile file = testDataRoot.findFileByRelativePath(filePath)[ CD ]
Line_4 $$ final VirtualFile file = testDataRoot.findFileByRelativePath(filePath)-->Line_8 $$ fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(file))[ FD ]
Line_6 $$ String fileText-->Line_14 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + MARKER.length())[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_15 $$ final String finalFileText = fileText[ CD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_3 $$ VirtualFile testDataRoot = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(getTestDataPath()))[ CD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_12 $$ int offset = fileText.indexOf(MARKER)[ CD ]
Line_15 $$ final String finalFileText = fileText-->Line_16 $$ myFixture.configureByText(new File(filePath).getName(), finalFileText)[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_18 $$ return reference[ CD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_5 $$ assertNotNull(file)[ CD ]
Line_3 $$ VirtualFile testDataRoot = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(getTestDataPath()))-->Line_4 $$ final VirtualFile file = testDataRoot.findFileByRelativePath(filePath)[ FD ]
Line_12 $$ int offset = fileText.indexOf(MARKER)-->Line_17 $$ final PsiReference reference = myFixture.getFile().findReferenceAt(offset)[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_16 $$ myFixture.configureByText(new File(filePath).getName(), finalFileText)[ CD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_17 $$ final PsiReference reference = myFixture.getFile().findReferenceAt(offset)[ CD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_13 $$ assertTrue(offset >= 0)[ CD ]
Line_6 $$ String fileText-->Line_12 $$ int offset = fileText.indexOf(MARKER)[ FD ]
Line_6 $$ String fileText-->Line_8 $$ fileText = StringUtil.convertLineSeparators(VfsUtil.loadText(file))[ FD ]
Line_2 $$ protected PsiReference configureByFile(@TestDataFile final String filePath) -->Line_14 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + MARKER.length())[ CD ]
