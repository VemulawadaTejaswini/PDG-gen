Line_24 $$ if (!(element instanceof PsiFileSystemItem))-->Line_25 $$ return null[ CD ]
Line_4 $$ for (PsiElement element : elements) -->Line_9 $$ PsiClass[] topLevelClasses = getTopLevelClasses(element)[ FD ]
Line_3 $$ final Map<PsiFile, PsiClass[]> result = new HashMap<PsiFile, PsiClass[]>()-->Line_33 $$ if (result.isEmpty()) [ FD ]
Line_12 $$ if (!fromUpdate) -->Line_16 $$ if (map == null)[ CD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_33 $$ if (result.isEmpty()) [ CD ]
Line_33 $$ if (result.isEmpty()) -->Line_43 $$ return hasClasses ? result : null[ CD ]
Line_7 $$ final PsiFile containingFile = navigationElement.getContainingFile()-->Line_27 $$ fillResultsMap(result, containingFile, topLevelClasses)[ FD ]
Line_8 $$ if (!(containingFile instanceof PsiClassOwner && JavaProjectRootsUtil.isOutsideJavaSourceRoot(containingFile))) -->Line_27 $$ fillResultsMap(result, containingFile, topLevelClasses)[ CD ]
Line_4 $$ for (PsiElement element : elements) -->Line_11 $$ if (element instanceof PsiDirectory) [ FD ]
Line_33 $$ if (result.isEmpty()) -->Line_36 $$ boolean hasClasses = false[ CD ]
Line_5 $$ final PsiElement navigationElement = element.getNavigationElement()-->Line_7 $$ final PsiFile containingFile = navigationElement.getContainingFile()[ FD ]
Line_4 $$ for (PsiElement element : elements) -->Line_5 $$ final PsiElement navigationElement = element.getNavigationElement()[ FD ]
Line_4 $$ for (PsiElement element : elements) -->Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)[ FD ]
Line_12 $$ if (!fromUpdate) -->Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)[ CD ]
Line_12 $$ if (!fromUpdate) -->Line_13 $$ final String name = ((PsiDirectory) element).getName()[ CD ]
Line_9 $$ PsiClass[] topLevelClasses = getTopLevelClasses(element)-->Line_27 $$ fillResultsMap(result, containingFile, topLevelClasses)[ FD ]
Line_3 $$ final Map<PsiFile, PsiClass[]> result = new HashMap<PsiFile, PsiClass[]>()-->Line_19 $$ fillResultsMap(result, entry.getKey(), entry.getValue())[ FD ]
Line_36 $$ boolean hasClasses = false-->Line_39 $$ hasClasses = true[ FD ]
Line_7 $$ final PsiFile containingFile = navigationElement.getContainingFile()-->Line_8 $$ if (!(containingFile instanceof PsiClassOwner && JavaProjectRootsUtil.isOutsideJavaSourceRoot(containingFile))) [ FD ]
Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)-->Line_16 $$ if (map == null)[ FD ]
Line_8 $$ if (!(containingFile instanceof PsiClassOwner && JavaProjectRootsUtil.isOutsideJavaSourceRoot(containingFile))) -->Line_28 $$ if (relativeMap != null) [ CD ]
Line_16 $$ if (map == null)-->Line_17 $$ return null[ CD ]
Line_11 $$ if (element instanceof PsiDirectory) -->Line_12 $$ if (!fromUpdate) [ CD ]
Line_10 $$ if (topLevelClasses == null) -->Line_24 $$ if (!(element instanceof PsiFileSystemItem))[ CD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_28 $$ if (relativeMap != null) [ FD ]
Line_9 $$ PsiClass[] topLevelClasses = getTopLevelClasses(element)-->Line_10 $$ if (topLevelClasses == null) [ FD ]
Line_3 $$ final Map<PsiFile, PsiClass[]> result = new HashMap<PsiFile, PsiClass[]>()-->Line_27 $$ fillResultsMap(result, containingFile, topLevelClasses)[ FD ]
Line_12 $$ if (!fromUpdate) -->Line_14 $$ final String path = relativePath != null ? (relativePath.length() > 0 ? (relativePath + "/") : "") + name : null[ CD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_14 $$ final String path = relativePath != null ? (relativePath.length() > 0 ? (relativePath + "/") : "") + name : null[ FD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_29 $$ relativeMap.put(containingFile, relativePath)[ FD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_12 $$ if (!fromUpdate) [ FD ]
Line_7 $$ final PsiFile containingFile = navigationElement.getContainingFile()-->Line_29 $$ relativeMap.put(containingFile, relativePath)[ FD ]
Line_37 $$ for (PsiClass[] classes : result.values()) -->Line_38 $$ if (classes != null) [ FD ]
Line_28 $$ if (relativeMap != null) -->Line_29 $$ relativeMap.put(containingFile, relativePath)[ CD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)[ FD ]
Line_14 $$ final String path = relativePath != null ? (relativePath.length() > 0 ? (relativePath + "/") : "") + name : null-->Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)[ FD ]
Line_3 $$ final Map<PsiFile, PsiClass[]> result = new HashMap<PsiFile, PsiClass[]>()-->Line_37 $$ for (PsiClass[] classes : result.values()) [ FD ]
Line_18 $$ for (Map.Entry<PsiFile, PsiClass[]> entry : map.entrySet()) -->Line_19 $$ fillResultsMap(result, entry.getKey(), entry.getValue())[ FD ]
Line_4 $$ for (PsiElement element : elements) -->Line_6 $$ LOG.assertTrue(navigationElement != null, element)[ FD ]
Line_2 $$ private static Map<PsiFile, PsiClass[]> convertToTopLevelClasses(final PsiElement[] elements, final boolean fromUpdate, String relativePath, Map<PsiFile, String> relativeMap) -->Line_3 $$ final Map<PsiFile, PsiClass[]> result = new HashMap<PsiFile, PsiClass[]>()[ CD ]
Line_33 $$ if (result.isEmpty()) -->Line_34 $$ return null[ CD ]
Line_15 $$ final Map<PsiFile, PsiClass[]> map = convertToTopLevelClasses(element.getChildren(), fromUpdate, path, relativeMap)-->Line_18 $$ for (Map.Entry<PsiFile, PsiClass[]> entry : map.entrySet()) [ FD ]
Line_38 $$ if (classes != null) -->Line_39 $$ hasClasses = true[ CD ]
Line_10 $$ if (topLevelClasses == null) -->Line_11 $$ if (element instanceof PsiDirectory) [ CD ]
Line_8 $$ if (!(containingFile instanceof PsiClassOwner && JavaProjectRootsUtil.isOutsideJavaSourceRoot(containingFile))) -->Line_9 $$ PsiClass[] topLevelClasses = getTopLevelClasses(element)[ CD ]
Line_8 $$ if (!(containingFile instanceof PsiClassOwner && JavaProjectRootsUtil.isOutsideJavaSourceRoot(containingFile))) -->Line_10 $$ if (topLevelClasses == null) [ CD ]
