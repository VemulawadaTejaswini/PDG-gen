Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_20 $$ if (!myUpdatePathsWhenNameIsChanged) [ CD ]
Line_64 $$ myModuleFileLocation.getTextField().getDocument().addDocumentListener(new DocumentAdapter() -->Line_66 $$ if (myImlLocationDocListenerEnabled) [ CD ]
Line_27 $$ final String moduleName = getModuleName()-->Line_99 $$ myModuleName.select(0, moduleName.length())[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_3 $$ namePathComponent.getNameComponent().getDocument().addDocumentListener(new DocumentAdapter() [ FD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_34 $$ setModuleContentRoot(path)[ FD ]
Line_42 $$ myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter() -->Line_50 $$ if (!myModuleNameChangedByUser) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_80 $$ setModuleName(namePathComponent.getNameValue())[ FD ]
Line_11 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() -->Line_13 $$ if (!myContentRootChangedByUser) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_10 $$ myModuleContentRoot.addBrowseFolderListener(ProjectBundle.message("project.new.wizard.module.content.root.chooser.title"), ProjectBundle.message("project.new.wizard.module.content.root.chooser.description"), myWizardContext.getProject(), BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR)[ CD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_81 $$ setModuleContentRoot(namePathComponent.getPath())[ CD ]
Line_50 $$ if (!myModuleNameChangedByUser) -->Line_53 $$ boolean f = myContentRootChangedByUser[ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)[ FD ]
Line_50 $$ if (!myModuleNameChangedByUser) -->Line_55 $$ boolean i = myImlLocationChangedByUser[ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_74 $$ setImlFileLocation(namePathComponent.getPath())[ FD ]
Line_27 $$ final String moduleName = getModuleName()-->Line_28 $$ if (path.length() > 0 && !Comparing.strEqual(moduleName, namePathComponent.getNameValue())) [ FD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_28 $$ if (path.length() > 0 && !Comparing.strEqual(moduleName, namePathComponent.getNameValue())) [ FD ]
Line_51 $$ final String path = FileUtil.toSystemIndependentName(getModuleContentRoot())-->Line_52 $$ final int idx = path.lastIndexOf("/")[ FD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_80 $$ setModuleName(namePathComponent.getNameValue())[ CD ]
Line_87 $$ if (baseDir != null) -->Line_91 $$ if (!Comparing.strEqual(project.getName(), myWizardContext.getProjectName()) && !myWizardContext.isCreatingNewProject() && myWizardContext.getProjectName() != null) [ CD ]
Line_31 $$ if (!myContentRootChangedByUser) -->Line_34 $$ setModuleContentRoot(path)[ CD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_86 $$ VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_64 $$ myModuleFileLocation.getTextField().getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_29 $$ path += "/" + moduleName[ FD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)[ CD ]
Line_29 $$ path += "/" + moduleName-->Line_52 $$ final int idx = path.lastIndexOf("/")[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_63 $$ myModuleFileLocation.addBrowseFolderListener(ProjectBundle.message("project.new.wizard.module.file.chooser.title"), ProjectBundle.message("project.new.wizard.module.file.description"), myWizardContext.getProject(), BrowseFilesListener.SINGLE_DIRECTORY_DESCRIPTOR)[ CD ]
Line_87 $$ if (baseDir != null) -->Line_99 $$ myModuleName.select(0, moduleName.length())[ CD ]
Line_50 $$ if (!myModuleNameChangedByUser) -->Line_52 $$ final int idx = path.lastIndexOf("/")[ CD ]
Line_13 $$ if (!myContentRootChangedByUser) -->Line_14 $$ setModuleContentRoot(namePathComponent.getPath())[ CD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_52 $$ final int idx = path.lastIndexOf("/")[ FD ]
Line_87 $$ if (baseDir != null) -->Line_97 $$ setModuleContentRoot(contentRoot)[ CD ]
Line_51 $$ final String path = FileUtil.toSystemIndependentName(getModuleContentRoot())-->Line_57 $$ setModuleName(idx >= 0 ? path.substring(idx + 1) : "")[ FD ]
Line_31 $$ if (!myContentRootChangedByUser) -->Line_32 $$ final boolean f = myModuleNameChangedByUser[ CD ]
Line_87 $$ if (baseDir != null) -->Line_96 $$ setModuleName(moduleName)[ CD ]
Line_71 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() -->Line_73 $$ if (!myImlLocationChangedByUser) [ CD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_28 $$ if (path.length() > 0 && !Comparing.strEqual(moduleName, namePathComponent.getNameValue())) [ CD ]
Line_91 $$ if (!Comparing.strEqual(project.getName(), myWizardContext.getProjectName()) && !myWizardContext.isCreatingNewProject() && myWizardContext.getProjectName() != null) -->Line_94 $$ myUpdatePathsWhenNameIsChanged = !myWizardContext.isProjectFileDirectorySetExplicitly()[ CD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_27 $$ final String moduleName = getModuleName()[ CD ]
Line_20 $$ if (!myUpdatePathsWhenNameIsChanged) -->Line_21 $$ return[ CD ]
Line_91 $$ if (!Comparing.strEqual(project.getName(), myWizardContext.getProjectName()) && !myWizardContext.isCreatingNewProject() && myWizardContext.getProjectName() != null) -->Line_93 $$ contentRoot = myWizardContext.getProjectFileDirectory()[ CD ]
Line_37 $$ if (!myImlLocationChangedByUser) -->Line_38 $$ setImlFileLocation(path)[ CD ]
Line_91 $$ if (!Comparing.strEqual(project.getName(), myWizardContext.getProjectName()) && !myWizardContext.isCreatingNewProject() && myWizardContext.getProjectName() != null) -->Line_92 $$ moduleName = ProjectWizardUtil.findNonExistingFileName(myWizardContext.getProjectFileDirectory(), myWizardContext.getProjectName(), "")[ CD ]
Line_87 $$ if (baseDir != null) -->Line_89 $$ String moduleName = ProjectWizardUtil.findNonExistingFileName(baseDirPath, "untitled", "")[ CD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_57 $$ setModuleName(idx >= 0 ? path.substring(idx + 1) : "")[ FD ]
Line_5 $$ if (!myModuleNameChangedByUser) -->Line_6 $$ setModuleName(namePathComponent.getNameValue())[ CD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_82 $$ setImlFileLocation(namePathComponent.getPath())[ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_6 $$ setModuleName(namePathComponent.getNameValue())[ FD ]
Line_26 $$ String path = getDefaultBaseDir(myWizardContext, namePathComponent)-->Line_38 $$ setImlFileLocation(path)[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_11 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() [ FD ]
Line_87 $$ if (baseDir != null) -->Line_88 $$ final String baseDirPath = baseDir.getPath()[ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_28 $$ if (path.length() > 0 && !Comparing.strEqual(moduleName, namePathComponent.getNameValue())) [ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_3 $$ namePathComponent.getNameComponent().getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_14 $$ setModuleContentRoot(namePathComponent.getPath())[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_82 $$ setImlFileLocation(namePathComponent.getPath())[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_50 $$ if (!myModuleNameChangedByUser) -->Line_51 $$ final String path = FileUtil.toSystemIndependentName(getModuleContentRoot())[ CD ]
Line_42 $$ myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter() -->Line_44 $$ if (myContentRootDocListenerEnabled) [ CD ]
Line_87 $$ if (baseDir != null) -->Line_98 $$ setImlFileLocation(contentRoot)[ CD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_31 $$ if (!myContentRootChangedByUser) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_71 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_29 $$ path += "/" + moduleName-->Line_57 $$ setModuleName(idx >= 0 ? path.substring(idx + 1) : "")[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_11 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_42 $$ myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter() -->Line_47 $$ if (!myImlLocationChangedByUser) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_71 $$ namePathComponent.getPathComponent().getDocument().addDocumentListener(new DocumentAdapter() [ FD ]
Line_27 $$ final String moduleName = getModuleName()-->Line_96 $$ setModuleName(moduleName)[ FD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_81 $$ setModuleContentRoot(namePathComponent.getPath())[ FD ]
Line_29 $$ path += "/" + moduleName-->Line_38 $$ setImlFileLocation(path)[ FD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_37 $$ if (!myImlLocationChangedByUser) [ CD ]
Line_50 $$ if (!myModuleNameChangedByUser) -->Line_57 $$ setModuleName(idx >= 0 ? path.substring(idx + 1) : "")[ CD ]
Line_3 $$ namePathComponent.getNameComponent().getDocument().addDocumentListener(new DocumentAdapter() -->Line_5 $$ if (!myModuleNameChangedByUser) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_42 $$ myModuleContentRoot.getTextField().getDocument().addDocumentListener(new DocumentAdapter() [ CD ]
Line_27 $$ final String moduleName = getModuleName()-->Line_29 $$ path += "/" + moduleName[ FD ]
Line_28 $$ if (path.length() > 0 && !Comparing.strEqual(moduleName, namePathComponent.getNameValue())) -->Line_29 $$ path += "/" + moduleName[ CD ]
Line_73 $$ if (!myImlLocationChangedByUser) -->Line_74 $$ setImlFileLocation(namePathComponent.getPath())[ CD ]
Line_29 $$ path += "/" + moduleName-->Line_34 $$ setModuleContentRoot(path)[ FD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_87 $$ if (baseDir != null) [ CD ]
Line_2 $$ public void bindModuleSettings(final NamePathComponent namePathComponent) -->Line_79 $$ if (myWizardContext.isCreatingNewProject()) [ CD ]
Line_79 $$ if (myWizardContext.isCreatingNewProject()) -->Line_84 $$ final Project project = myWizardContext.getProject()[ CD ]
Line_47 $$ if (!myImlLocationChangedByUser) -->Line_48 $$ setImlFileLocation(getModuleContentRoot())[ CD ]
Line_18 $$ myModuleName.getDocument().addDocumentListener(new DocumentAdapter() -->Line_23 $$ if (myModuleNameDocListenerEnabled) [ CD ]
