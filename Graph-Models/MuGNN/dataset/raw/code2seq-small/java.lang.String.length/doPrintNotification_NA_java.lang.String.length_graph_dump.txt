Line_2 $$ void doPrintNotification(final Notification notification) -->Line_12 $$ EventLog.LogEntry pair = EventLog.formatForLog(notification, StringUtil.repeatSymbol(' ', date.length()))[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_10 $$ append(document, date)[ CD ]
Line_22 $$ final RangeHighlighter rangeHighlighter = myHyperlinkSupport.getValue().createHyperlink(link.first.getStartOffset() + msgStart, link.first.getEndOffset() + msgStart, null, link.second)-->Line_24 $$ ((EventLog.ShowBalloon) link.second).setRangeHighlighter(rangeHighlighter)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_32 $$ if (notification.isImportant()) [ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_11 $$ int startLine = document.getLineCount() - 1[ CD ]
Line_14 $$ TextAttributesKey key = type == NotificationType.ERROR ? ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY : type == NotificationType.INFORMATION ? ConsoleViewContentType.NORMAL_OUTPUT_KEY : ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY-->Line_18 $$ TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_4 $$ if (editor.isDisposed()) [ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_15 $$ int msgStart = document.getTextLength()[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_33 $$ highlightNotification(notification, pair.status, startLine, document.getLineCount() - 1)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_8 $$ boolean scroll = document.getTextLength() == editor.getCaretModel().getOffset() || !editor.getContentComponent().hasFocus()[ FD ]
Line_15 $$ int msgStart = document.getTextLength()-->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_10 $$ append(document, date)[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_11 $$ int startLine = document.getLineCount() - 1[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_17 $$ append(document, message)[ FD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_19 $$ int layer = HighlighterLayer.CARET_ROW + 1-->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_4 $$ if (editor.isDisposed()) [ FD ]
Line_9 $$ String date = DateFormatUtil.formatTimeWithSeconds(notification.getTimestamp()) + " "-->Line_12 $$ EventLog.LogEntry pair = EventLog.formatForLog(notification, StringUtil.repeatSymbol(' ', date.length()))[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_7 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_13 $$ final NotificationType type = notification.getType()[ FD ]
Line_16 $$ String message = pair.message-->Line_17 $$ append(document, message)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_27 $$ append(document, "\n")[ CD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_30 $$ editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_3 $$ Editor editor = myLogEditor.getValue()[ CD ]
Line_28 $$ if (scroll) -->Line_29 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ CD ]
Line_32 $$ if (notification.isImportant()) -->Line_33 $$ highlightNotification(notification, pair.status, startLine, document.getLineCount() - 1)[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_16 $$ String message = pair.message[ CD ]
Line_4 $$ if (editor.isDisposed()) -->Line_5 $$ return[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_8 $$ boolean scroll = document.getTextLength() == editor.getCaretModel().getOffset() || !editor.getContentComponent().hasFocus()[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_17 $$ append(document, message)[ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_27 $$ append(document, "\n")[ FD ]
Line_28 $$ if (scroll) -->Line_30 $$ editor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE)[ CD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_8 $$ boolean scroll = document.getTextLength() == editor.getCaretModel().getOffset() || !editor.getContentComponent().hasFocus()[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_9 $$ String date = DateFormatUtil.formatTimeWithSeconds(notification.getTimestamp()) + " "-->Line_10 $$ append(document, date)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_9 $$ String date = DateFormatUtil.formatTimeWithSeconds(notification.getTimestamp()) + " "[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_15 $$ int msgStart = document.getTextLength()[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_18 $$ TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key)[ CD ]
Line_23 $$ if (link.second instanceof EventLog.ShowBalloon) -->Line_24 $$ ((EventLog.ShowBalloon) link.second).setRangeHighlighter(rangeHighlighter)[ CD ]
Line_7 $$ Document document = editor.getDocument()-->Line_33 $$ highlightNotification(notification, pair.status, startLine, document.getLineCount() - 1)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_28 $$ if (scroll) [ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_13 $$ final NotificationType type = notification.getType()[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_32 $$ if (notification.isImportant()) [ CD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_7 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_12 $$ EventLog.LogEntry pair = EventLog.formatForLog(notification, StringUtil.repeatSymbol(' ', date.length()))[ FD ]
Line_7 $$ Document document = editor.getDocument()-->Line_29 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ FD ]
Line_18 $$ TextAttributes attributes = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(key)-->Line_20 $$ editor.getMarkupModel().addRangeHighlighter(msgStart, document.getTextLength(), layer, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_3 $$ Editor editor = myLogEditor.getValue()-->Line_29 $$ editor.getCaretModel().moveToOffset(document.getTextLength())[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_19 $$ int layer = HighlighterLayer.CARET_ROW + 1[ CD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_14 $$ TextAttributesKey key = type == NotificationType.ERROR ? ConsoleViewContentType.LOG_ERROR_OUTPUT_KEY : type == NotificationType.INFORMATION ? ConsoleViewContentType.NORMAL_OUTPUT_KEY : ConsoleViewContentType.LOG_WARNING_OUTPUT_KEY[ CD ]
Line_11 $$ int startLine = document.getLineCount() - 1-->Line_33 $$ highlightNotification(notification, pair.status, startLine, document.getLineCount() - 1)[ FD ]
Line_2 $$ void doPrintNotification(final Notification notification) -->Line_9 $$ String date = DateFormatUtil.formatTimeWithSeconds(notification.getTimestamp()) + " "[ FD ]
