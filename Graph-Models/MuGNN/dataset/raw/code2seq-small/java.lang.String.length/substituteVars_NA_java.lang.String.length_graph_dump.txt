Line_2 $$ private String substituteVars(String expr) -->Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) [ CD ]
Line_18 $$ String var = match.group()-->Line_27 $$ val = getRaw(var)[ FD ]
Line_8 $$ Set<String> evalSet = new HashSet<String>()-->Line_13 $$ evalSet.add(eval)[ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_19 $$ var = var.substring(2, var.length() - 1)[ CD ]
Line_29 $$ if (val == null) -->Line_30 $$ return eval[ CD ]
Line_27 $$ val = getRaw(var)-->Line_26 $$ if (val == null) [ FD ]
Line_2 $$ private String substituteVars(String expr) -->Line_8 $$ Set<String> evalSet = new HashSet<String>()[ CD ]
Line_20 $$ String val = null-->Line_26 $$ if (val == null) [ FD ]
Line_20 $$ String val = null-->Line_27 $$ val = getRaw(var)[ FD ]
Line_15 $$ if (!match.find()) -->Line_16 $$ return eval[ CD ]
Line_22 $$ val = System.getProperty(var)-->Line_29 $$ if (val == null) [ FD ]
Line_2 $$ private String substituteVars(String expr) -->Line_7 $$ String eval = expr[ CD ]
Line_22 $$ val = System.getProperty(var)-->Line_26 $$ if (val == null) [ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_13 $$ evalSet.add(eval)[ CD ]
Line_18 $$ String var = match.group()-->Line_22 $$ val = System.getProperty(var)[ FD ]
Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())-->Line_13 $$ evalSet.add(eval)[ FD ]
Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())-->Line_14 $$ match.reset(eval)[ FD ]
Line_19 $$ var = var.substring(2, var.length() - 1)-->Line_22 $$ val = System.getProperty(var)[ FD ]
Line_6 $$ Matcher match = VAR_PATTERN.matcher("")-->Line_18 $$ String var = match.group()[ FD ]
Line_10 $$ if (evalSet.contains(eval)) -->Line_11 $$ return eval[ CD ]
Line_8 $$ Set<String> evalSet = new HashSet<String>()-->Line_10 $$ if (evalSet.contains(eval)) [ FD ]
Line_6 $$ Matcher match = VAR_PATTERN.matcher("")-->Line_14 $$ match.reset(eval)[ FD ]
Line_2 $$ private String substituteVars(String expr) -->Line_3 $$ if (expr == null) [ FD ]
Line_2 $$ private String substituteVars(String expr) -->Line_6 $$ Matcher match = VAR_PATTERN.matcher("")[ CD ]
Line_20 $$ String val = null-->Line_22 $$ val = System.getProperty(var)[ FD ]
Line_7 $$ String eval = expr-->Line_10 $$ if (evalSet.contains(eval)) [ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_10 $$ if (evalSet.contains(eval)) [ CD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_14 $$ match.reset(eval)[ CD ]
Line_7 $$ String eval = expr-->Line_14 $$ match.reset(eval)[ FD ]
Line_26 $$ if (val == null) -->Line_27 $$ val = getRaw(var)[ CD ]
Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())-->Line_10 $$ if (evalSet.contains(eval)) [ FD ]
Line_22 $$ val = System.getProperty(var)-->Line_27 $$ val = getRaw(var)[ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_18 $$ String var = match.group()[ CD ]
Line_2 $$ private String substituteVars(String expr) -->Line_3 $$ if (expr == null) [ CD ]
Line_27 $$ val = getRaw(var)-->Line_29 $$ if (val == null) [ FD ]
Line_6 $$ Matcher match = VAR_PATTERN.matcher("")-->Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())[ FD ]
Line_20 $$ String val = null-->Line_29 $$ if (val == null) [ FD ]
Line_19 $$ var = var.substring(2, var.length() - 1)-->Line_27 $$ val = getRaw(var)[ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())[ CD ]
Line_3 $$ if (expr == null) -->Line_4 $$ return null[ CD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_29 $$ if (val == null) [ CD ]
Line_7 $$ String eval = expr-->Line_32 $$ eval = eval.substring(0, match.start()) + val + eval.substring(match.end())[ FD ]
Line_7 $$ String eval = expr-->Line_13 $$ evalSet.add(eval)[ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_20 $$ String val = null[ CD ]
Line_6 $$ Matcher match = VAR_PATTERN.matcher("")-->Line_15 $$ if (!match.find()) [ FD ]
Line_18 $$ String var = match.group()-->Line_19 $$ var = var.substring(2, var.length() - 1)[ FD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_26 $$ if (val == null) [ CD ]
Line_9 $$ for (int s = 0; s < MAX_SUBST; s++) -->Line_15 $$ if (!match.find()) [ CD ]
