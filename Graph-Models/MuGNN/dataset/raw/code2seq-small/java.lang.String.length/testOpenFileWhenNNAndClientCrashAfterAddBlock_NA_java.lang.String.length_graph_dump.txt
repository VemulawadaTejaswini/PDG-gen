Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_18 $$ FileStatus fileStatus = dfs.getFileStatus(filePath)[ FD ]
Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_26 $$ FSDataInputStream is = dfs.open(filePath)[ FD ]
Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_28 $$ dfs.recoverLease(filePath)[ FD ]
Line_2 $$ public void testOpenFileWhenNNAndClientCrashAfterAddBlock() throws Exception -->Line_6 $$ cluster.restartNameNode(0)[ CD ]
Line_13 $$ Path filePath = new Path(pathString)-->Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)[ FD ]
Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)-->Line_15 $$ create.write(testData.getBytes())[ FD ]
Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)-->Line_16 $$ create.hflush()[ FD ]
Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)[ FD ]
Line_13 $$ Path filePath = new Path(pathString)-->Line_28 $$ dfs.recoverLease(filePath)[ FD ]
Line_12 $$ String pathString = "/tmp1.txt"-->Line_21 $$ DFSClientAdapter.getNamenode(client).addBlock(pathString, client.getClientName(), new ExtendedBlock(previousBlock), new DatanodeInfo[0], DFSClientAdapter.getFileId((DFSOutputStream) create.getWrappedStream()), null)[ FD ]
Line_13 $$ Path filePath = new Path(pathString)-->Line_18 $$ FileStatus fileStatus = dfs.getFileStatus(filePath)[ FD ]
Line_2 $$ public void testOpenFileWhenNNAndClientCrashAfterAddBlock() throws Exception -->Line_4 $$ String testData = "testData"[ CD ]
Line_19 $$ DFSClient client = DFSClientAdapter.getClient(dfs)-->Line_20 $$ ExtendedBlock previousBlock = DFSClientAdapter.getPreviousBlock(client, fileId)[ FD ]
Line_26 $$ FSDataInputStream is = dfs.open(filePath)-->Line_27 $$ is.close()[ FD ]
Line_4 $$ String testData = "testData"-->Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)[ FD ]
Line_13 $$ Path filePath = new Path(pathString)-->Line_26 $$ FSDataInputStream is = dfs.open(filePath)[ FD ]
Line_13 $$ Path filePath = new Path(pathString)-->Line_29 $$ assertTrue("Recovery also should be success", dfs.recoverLease(filePath))[ FD ]
Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_19 $$ DFSClient client = DFSClientAdapter.getClient(dfs)[ FD ]
Line_11 $$ DistributedFileSystem dfs = cluster.getFileSystem(0)-->Line_29 $$ assertTrue("Recovery also should be success", dfs.recoverLease(filePath))[ FD ]
Line_17 $$ long fileId = ((DFSOutputStream) create.getWrappedStream()).getFileId()-->Line_20 $$ ExtendedBlock previousBlock = DFSClientAdapter.getPreviousBlock(client, fileId)[ FD ]
Line_4 $$ String testData = "testData"-->Line_5 $$ cluster.getConfiguration(0).setInt("io.bytes.per.checksum", testData.length())[ FD ]
Line_2 $$ public void testOpenFileWhenNNAndClientCrashAfterAddBlock() throws Exception -->Line_3 $$ cluster.getConfiguration(0).set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY, "1.0f")[ CD ]
Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)-->Line_21 $$ DFSClientAdapter.getNamenode(client).addBlock(pathString, client.getClientName(), new ExtendedBlock(previousBlock), new DatanodeInfo[0], DFSClientAdapter.getFileId((DFSOutputStream) create.getWrappedStream()), null)[ FD ]
Line_14 $$ FSDataOutputStream create = dfs.create(filePath, FsPermission.getDefault(), true, 1024, (short) 3, testData.length(), null)-->Line_17 $$ long fileId = ((DFSOutputStream) create.getWrappedStream()).getFileId()[ FD ]
Line_4 $$ String testData = "testData"-->Line_15 $$ create.write(testData.getBytes())[ FD ]
Line_19 $$ DFSClient client = DFSClientAdapter.getClient(dfs)-->Line_21 $$ DFSClientAdapter.getNamenode(client).addBlock(pathString, client.getClientName(), new ExtendedBlock(previousBlock), new DatanodeInfo[0], DFSClientAdapter.getFileId((DFSOutputStream) create.getWrappedStream()), null)[ FD ]
Line_2 $$ public void testOpenFileWhenNNAndClientCrashAfterAddBlock() throws Exception -->Line_5 $$ cluster.getConfiguration(0).setInt("io.bytes.per.checksum", testData.length())[ CD ]
