Line_16 $$ final SVNURL rootURL = SvnUtil.getRepositoryRoot(myVcs, svnurl)-->Line_20 $$ final String root = rootURL.toString()[ FD ]
Line_3 $$ if (myPI != null) -->Line_4 $$ myPI.setText2(SvnBundle.message("progress.text2.changes.establishing.connection", myUrl))[ CD ]
Line_21 $$ String relativeUrl = myUrl-->Line_23 $$ relativeUrl = myUrl.substring(root.length())[ FD ]
Line_8 $$ SVNURL svnurl = SVNURL.parseURIEncoded(myUrl)-->Line_25 $$ SvnTarget target = SvnTarget.fromURL(svnurl, myPeg == null ? myFrom : myPeg)[ FD ]
Line_7 $$ if (myForceBackwards) -->Line_9 $$ if (!existsNow(svnurl)) [ CD ]
Line_25 $$ SvnTarget target = SvnTarget.fromURL(svnurl, myPeg == null ? myFrom : myPeg)-->Line_27 $$ myVcs.getFactory(target).createHistoryClient().doLog(target, operationalFrom, myTo == null ? SVNRevision.create(1) : myTo, false, true, myShowMergeSources && mySupport15, myLimit, null, handler)[ FD ]
Line_26 $$ RepositoryLogEntryHandler handler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, createConsumerAdapter(myConsumer), rootURL)-->Line_27 $$ myVcs.getFactory(target).createHistoryClient().doLog(target, operationalFrom, myTo == null ? SVNRevision.create(1) : myTo, false, true, myShowMergeSources && mySupport15, myLimit, null, handler)[ FD ]
Line_9 $$ if (!existsNow(svnurl)) -->Line_11 $$ return[ CD ]
Line_22 $$ if (myUrl.startsWith(root)) -->Line_23 $$ relativeUrl = myUrl.substring(root.length())[ CD ]
Line_20 $$ final String root = rootURL.toString()-->Line_23 $$ relativeUrl = myUrl.substring(root.length())[ FD ]
Line_8 $$ SVNURL svnurl = SVNURL.parseURIEncoded(myUrl)-->Line_10 $$ loadBackwards(svnurl)[ FD ]
Line_2 $$ protected void load() -->Line_3 $$ if (myPI != null) [ CD ]
Line_9 $$ if (!existsNow(svnurl)) -->Line_10 $$ loadBackwards(svnurl)[ CD ]
Line_16 $$ final SVNURL rootURL = SvnUtil.getRepositoryRoot(myVcs, svnurl)-->Line_17 $$ if (rootURL == null) [ FD ]
Line_20 $$ final String root = rootURL.toString()-->Line_22 $$ if (myUrl.startsWith(root)) [ FD ]
Line_15 $$ SVNRevision operationalFrom = myFrom == null ? SVNRevision.HEAD : myFrom-->Line_27 $$ myVcs.getFactory(target).createHistoryClient().doLog(target, operationalFrom, myTo == null ? SVNRevision.create(1) : myTo, false, true, myShowMergeSources && mySupport15, myLimit, null, handler)[ FD ]
Line_7 $$ if (myForceBackwards) -->Line_8 $$ SVNURL svnurl = SVNURL.parseURIEncoded(myUrl)[ CD ]
Line_8 $$ SVNURL svnurl = SVNURL.parseURIEncoded(myUrl)-->Line_9 $$ if (!existsNow(svnurl)) [ FD ]
Line_8 $$ SVNURL svnurl = SVNURL.parseURIEncoded(myUrl)-->Line_16 $$ final SVNURL rootURL = SvnUtil.getRepositoryRoot(myVcs, svnurl)[ FD ]
