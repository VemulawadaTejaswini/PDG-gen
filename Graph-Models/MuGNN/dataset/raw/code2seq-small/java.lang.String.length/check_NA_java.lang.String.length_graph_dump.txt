Line_3 $$ final PsiElement startElement = myFile.findElementAt(beginMarker)-->Line_5 $$ PsiElement context = PsiTreeUtil.findCommonParent(startElement, endElement)[ FD ]
Line_5 $$ PsiElement context = PsiTreeUtil.findCommonParent(startElement, endElement)-->Line_7 $$ context = PsiTreeUtil.getParentOfType(context, ScopeOwner.class)[ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_4 $$ final PsiElement endElement = myFile.findElementAt(endMarker - BEGIN_MARKER.length())[ CD ]
Line_6 $$ if (!(context instanceof ScopeOwner)) -->Line_7 $$ context = PsiTreeUtil.getParentOfType(context, ScopeOwner.class)[ CD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_17 $$ buffer.append(inputVariable).append('\n')[ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_3 $$ final PsiElement startElement = myFile.findElementAt(beginMarker)[ FD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_27 $$ assertEquals(result.trim(), buffer.toString().trim())[ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_24 $$ assertEquals(result.trim(), e.getMessage())[ FD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_13 $$ buffer.append("Return instruction inside found").append("\n")[ FD ]
Line_20 $$ for (String outputVariable : new TreeSet<String>(fragment.getOutputVariables())) -->Line_21 $$ buffer.append(outputVariable).append('\n')[ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_4 $$ final PsiElement endElement = myFile.findElementAt(endMarker - BEGIN_MARKER.length())[ FD ]
Line_16 $$ for (String inputVariable : new TreeSet<String>(fragment.getInputVariables())) -->Line_17 $$ buffer.append(inputVariable).append('\n')[ FD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_21 $$ buffer.append(outputVariable).append('\n')[ FD ]
Line_4 $$ final PsiElement endElement = myFile.findElementAt(endMarker - BEGIN_MARKER.length())-->Line_5 $$ PsiElement context = PsiTreeUtil.findCommonParent(startElement, endElement)[ FD ]
Line_11 $$ final CodeFragment fragment = PyCodeFragmentUtil.createCodeFragment((ScopeOwner) context, startElement, endElement)-->Line_12 $$ if (fragment.isReturnInstructionInside()) [ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_6 $$ if (!(context instanceof ScopeOwner)) [ CD ]
Line_11 $$ final CodeFragment fragment = PyCodeFragmentUtil.createCodeFragment((ScopeOwner) context, startElement, endElement)-->Line_16 $$ for (String inputVariable : new TreeSet<String>(fragment.getInputVariables())) [ FD ]
Line_11 $$ final CodeFragment fragment = PyCodeFragmentUtil.createCodeFragment((ScopeOwner) context, startElement, endElement)-->Line_20 $$ for (String outputVariable : new TreeSet<String>(fragment.getOutputVariables())) [ FD ]
Line_4 $$ final PsiElement endElement = myFile.findElementAt(endMarker - BEGIN_MARKER.length())-->Line_11 $$ final CodeFragment fragment = PyCodeFragmentUtil.createCodeFragment((ScopeOwner) context, startElement, endElement)[ FD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_19 $$ buffer.append("Out:\n")[ FD ]
Line_9 $$ final StringBuffer buffer = new StringBuffer()-->Line_15 $$ buffer.append("In:\n")[ FD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_9 $$ final StringBuffer buffer = new StringBuffer()[ CD ]
Line_12 $$ if (fragment.isReturnInstructionInside()) -->Line_13 $$ buffer.append("Return instruction inside found").append("\n")[ CD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_5 $$ PsiElement context = PsiTreeUtil.findCommonParent(startElement, endElement)[ CD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_3 $$ final PsiElement startElement = myFile.findElementAt(beginMarker)[ CD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_27 $$ assertEquals(result.trim(), buffer.toString().trim())[ CD ]
Line_2 $$ private void check(final PyFile myFile, final int beginMarker, final int endMarker, final String result) -->Line_27 $$ assertEquals(result.trim(), buffer.toString().trim())[ FD ]
Line_3 $$ final PsiElement startElement = myFile.findElementAt(beginMarker)-->Line_11 $$ final CodeFragment fragment = PyCodeFragmentUtil.createCodeFragment((ScopeOwner) context, startElement, endElement)[ FD ]
