Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_4 $$ final String text = map.getText()[ CD ]
Line_9 $$ if (text.endsWith("]"))-->Line_10 $$ end--[ CD ]
Line_15 $$ final GrMethod method = PsiTreeUtil.getParentOfType(replacedNewExpression, GrMethod.class, true, GrClosableBlock.class)-->Line_17 $$ GrReferenceAdjuster.shortenAllReferencesIn(method.setReturnType(type))[ FD ]
Line_7 $$ if (text.startsWith("["))-->Line_8 $$ begin++[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_19 $$ if (variableDeclaration) [ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_6 $$ int end = text.length()[ CD ]
Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")-->Line_24 $$ parameter.setType(newExpression.getType())[ FD ]
Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))-->Line_14 $$ final PsiType type = replacedNewExpression.getType()[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))[ CD ]
Line_19 $$ if (variableDeclaration) -->Line_21 $$ ((GrVariable) parent).setType(replacedNewExpression.getType())[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_27 $$ IntentionUtils.positionCursor(project, generatedClass.getContainingFile(), generatedClass)[ FD ]
Line_23 $$ if (parameter != null) -->Line_24 $$ parameter.setType(newExpression.getType())[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_9 $$ if (text.endsWith("]"))[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))[ FD ]
Line_13 $$ if (replaceReturnType) -->Line_16 $$ LOG.assertTrue(method != null)[ CD ]
Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")-->Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")[ FD ]
Line_13 $$ if (replaceReturnType) -->Line_14 $$ final PsiType type = replacedNewExpression.getType()[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_3 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(generatedClass)[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_7 $$ if (text.startsWith("["))[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_26 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(replacedNewExpression)[ CD ]
Line_4 $$ final String text = map.getText()-->Line_7 $$ if (text.startsWith("["))[ FD ]
Line_14 $$ final PsiType type = replacedNewExpression.getType()-->Line_17 $$ GrReferenceAdjuster.shortenAllReferencesIn(method.setReturnType(type))[ FD ]
Line_19 $$ if (variableDeclaration) -->Line_20 $$ final PsiElement parent = PsiUtil.skipParentheses(replacedNewExpression.getParent(), true)[ CD ]
Line_4 $$ final String text = map.getText()-->Line_9 $$ if (text.endsWith("]"))[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_4 $$ final String text = map.getText()[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_26 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(replacedNewExpression)[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")[ CD ]
Line_13 $$ if (replaceReturnType) -->Line_15 $$ final GrMethod method = PsiTreeUtil.getParentOfType(replacedNewExpression, GrMethod.class, true, GrClosableBlock.class)[ CD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_5 $$ int begin = 0[ CD ]
Line_5 $$ int begin = 0-->Line_8 $$ begin++[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_23 $$ if (parameter != null) [ FD ]
Line_6 $$ int end = text.length()-->Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_13 $$ if (replaceReturnType) [ CD ]
Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))-->Line_15 $$ final GrMethod method = PsiTreeUtil.getParentOfType(replacedNewExpression, GrMethod.class, true, GrClosableBlock.class)[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_3 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(generatedClass)[ FD ]
Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))-->Line_20 $$ final PsiElement parent = PsiUtil.skipParentheses(replacedNewExpression.getParent(), true)[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_23 $$ if (parameter != null) [ CD ]
Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))-->Line_21 $$ ((GrVariable) parent).setType(replacedNewExpression.getType())[ FD ]
Line_6 $$ int end = text.length()-->Line_10 $$ end--[ FD ]
Line_4 $$ final String text = map.getText()-->Line_6 $$ int end = text.length()[ FD ]
Line_4 $$ final String text = map.getText()-->Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_27 $$ IntentionUtils.positionCursor(project, generatedClass.getContainingFile(), generatedClass)[ CD ]
Line_13 $$ if (replaceReturnType) -->Line_17 $$ GrReferenceAdjuster.shortenAllReferencesIn(method.setReturnType(type))[ CD ]
Line_5 $$ int begin = 0-->Line_11 $$ final GrExpression newExpression = GroovyPsiElementFactory.getInstance(project).createExpressionFromText("new " + generatedClass.getQualifiedName() + "(" + text.substring(begin, end) + ")")[ FD ]
Line_2 $$ public static void replaceMapWithClass(Project project, final GrListOrMap map, PsiClass generatedClass, boolean replaceReturnType, boolean variableDeclaration, GrParameter parameter) -->Line_24 $$ parameter.setType(newExpression.getType())[ FD ]
Line_12 $$ final GrExpression replacedNewExpression = ((GrExpression) map.replace(newExpression))-->Line_26 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(replacedNewExpression)[ FD ]
