Line_8 $$ final Status deletedStatus = deletedFile.getStatus()-->Line_9 $$ if (deletedStatus.getURL() != null && Comparing.equal(copyFromURL, deletedStatus.getURL().toString())) [ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_6 $$ final Set<SvnChangedFile> deletedToDelete = new HashSet<SvnChangedFile>()[ CD ]
Line_38 $$ Status status-->Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)[ FD ]
Line_4 $$ final Status copiedStatus = copiedFile.getStatus()-->Line_55 $$ context.processStatus(copiedFile.getFilePath(), copiedStatus)[ FD ]
Line_4 $$ final Status copiedStatus = copiedFile.getStatus()-->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_4 $$ final Status copiedStatus = copiedFile.getStatus()[ CD ]
Line_22 $$ FilePath newFilePath = myFactory.createFilePathOn(newPath)-->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_13 $$ final Status childStatus = deletedChild.getStatus()-->Line_14 $$ final SVNURL childUrl = childStatus.getURL()[ FD ]
Line_43 $$ status = null-->Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())[ FD ]
Line_53 $$ if (!foundRename) -->Line_55 $$ context.processStatus(copiedFile.getFilePath(), copiedStatus)[ CD ]
Line_28 $$ foundRename = true-->Line_53 $$ if (!foundRename) [ FD ]
Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) -->Line_23 $$ if (!context.isDeleted(newFilePath)) [ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_10 $$ final String clName = SvnUtil.getChangelistName(copiedFile.getStatus())[ FD ]
Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) -->Line_20 $$ String relativePath = childURL.substring(copyFromURL.length())[ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_12 $$ for (SvnChangedFile deletedChild : context.getDeletedFiles()) [ FD ]
Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()-->Line_20 $$ String relativePath = childURL.substring(copyFromURL.length())[ FD ]
Line_53 $$ if (!foundRename) -->Line_54 $$ LOG.info("Rename not found for " + copiedFile.getFilePath().getPresentableUrl())[ CD ]
Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()-->Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) [ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_3 $$ boolean foundRename = false[ CD ]
Line_21 $$ File newPath = new File(copiedFile.getFilePath().getIOFile(), relativePath)-->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_28 $$ foundRename = true-->Line_50 $$ foundRename = true[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_21 $$ File newPath = new File(copiedFile.getFilePath().getIOFile(), relativePath)[ FD ]
Line_22 $$ FilePath newFilePath = myFactory.createFilePathOn(newPath)-->Line_23 $$ if (!context.isDeleted(newFilePath)) [ FD ]
Line_7 $$ for (SvnChangedFile deletedFile : context.getDeletedFiles()) -->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ FD ]
Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ FD ]
Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_14 $$ final SVNURL childUrl = childStatus.getURL()-->Line_18 $$ final String childURL = childUrl.toDecodedString()[ FD ]
Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) -->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ CD ]
Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)-->Line_43 $$ status = null[ FD ]
Line_4 $$ final Status copiedStatus = copiedFile.getStatus()-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_18 $$ final String childURL = childUrl.toDecodedString()-->Line_20 $$ String relativePath = childURL.substring(copyFromURL.length())[ FD ]
Line_4 $$ final Status copiedStatus = copiedFile.getStatus()-->Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) [ FD ]
Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) -->Line_48 $$ final ContentRevision afterRevision = CurrentContentRevision.create(copiedFile.getFilePath())[ CD ]
Line_38 $$ Status status-->Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())[ FD ]
Line_38 $$ Status status-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_46 $$ final FilePath filePath = myFactory.createFilePathOnDeleted(wcPath, false)-->Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_54 $$ LOG.info("Rename not found for " + copiedFile.getFilePath().getPresentableUrl())[ FD ]
Line_38 $$ Status status-->Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) [ FD ]
Line_28 $$ foundRename = true-->Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) [ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()[ CD ]
Line_9 $$ if (deletedStatus.getURL() != null && Comparing.equal(copyFromURL, deletedStatus.getURL().toString())) -->Line_28 $$ foundRename = true[ CD ]
Line_3 $$ boolean foundRename = false-->Line_50 $$ foundRename = true[ FD ]
Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) -->Line_37 $$ File wcPath = guessWorkingCopyPath(copiedStatus.getFile(), copiedStatus.getURL(), copyFromURL)[ CD ]
Line_48 $$ final ContentRevision afterRevision = CurrentContentRevision.create(copiedFile.getFilePath())-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_3 $$ boolean foundRename = false-->Line_28 $$ foundRename = true[ FD ]
Line_38 $$ Status status-->Line_43 $$ status = null[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_32 $$ final List<SvnChangedFile> deletedFiles = context.getDeletedFiles()[ CD ]
Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) -->Line_21 $$ File newPath = new File(copiedFile.getFilePath().getIOFile(), relativePath)[ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_53 $$ if (!foundRename) [ CD ]
Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) -->Line_22 $$ FilePath newFilePath = myFactory.createFilePathOn(newPath)[ CD ]
Line_12 $$ for (SvnChangedFile deletedChild : context.getDeletedFiles()) -->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_43 $$ status = null-->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_14 $$ final SVNURL childUrl = childStatus.getURL()-->Line_15 $$ if (childUrl == null) [ FD ]
Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) -->Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())[ CD ]
Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) -->Line_46 $$ final FilePath filePath = myFactory.createFilePathOnDeleted(wcPath, false)[ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_7 $$ for (SvnChangedFile deletedFile : context.getDeletedFiles()) [ FD ]
Line_3 $$ boolean foundRename = false-->Line_53 $$ if (!foundRename) [ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_49 $$ context.getBuilder().processChangeInList(context.createMovedChange(beforeRevision, afterRevision, copiedStatus, status), SvnUtil.getChangelistName(status), SvnVcs.getKey())[ FD ]
Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()-->Line_9 $$ if (deletedStatus.getURL() != null && Comparing.equal(copyFromURL, deletedStatus.getURL().toString())) [ FD ]
Line_9 $$ if (deletedStatus.getURL() != null && Comparing.equal(copyFromURL, deletedStatus.getURL().toString())) -->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ CD ]
Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) -->Line_38 $$ Status status[ CD ]
Line_18 $$ final String childURL = childUrl.toDecodedString()-->Line_19 $$ if (StringUtil.startsWithConcatenation(childURL, copyFromURL, "/")) [ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_32 $$ final List<SvnChangedFile> deletedFiles = context.getDeletedFiles()[ FD ]
Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()-->Line_37 $$ File wcPath = guessWorkingCopyPath(copiedStatus.getFile(), copiedStatus.getURL(), copyFromURL)[ FD ]
Line_23 $$ if (!context.isDeleted(newFilePath)) -->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ CD ]
Line_10 $$ final String clName = SvnUtil.getChangelistName(copiedFile.getStatus())-->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_3 $$ boolean foundRename = false-->Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) [ FD ]
Line_12 $$ for (SvnChangedFile deletedChild : context.getDeletedFiles()) -->Line_13 $$ final Status childStatus = deletedChild.getStatus()[ FD ]
Line_43 $$ status = null-->Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) [ FD ]
Line_33 $$ for (SvnChangedFile file : deletedToDelete) -->Line_34 $$ deletedFiles.remove(file)[ FD ]
Line_4 $$ final Status copiedStatus = copiedFile.getStatus()-->Line_37 $$ File wcPath = guessWorkingCopyPath(copiedStatus.getFile(), copiedStatus.getURL(), copyFromURL)[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_6 $$ final Set<SvnChangedFile> deletedToDelete = new HashSet<SvnChangedFile>()-->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_55 $$ context.processStatus(copiedFile.getFilePath(), copiedStatus)[ FD ]
Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)-->Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) [ FD ]
Line_6 $$ final Set<SvnChangedFile> deletedToDelete = new HashSet<SvnChangedFile>()-->Line_24 $$ applyMovedChange(context, newFilePath, dirtyScope, deletedToDelete, deletedChild, context.getTreeConflictStatus(newPath), clName)[ FD ]
Line_9 $$ if (deletedStatus.getURL() != null && Comparing.equal(copyFromURL, deletedStatus.getURL().toString())) -->Line_10 $$ final String clName = SvnUtil.getChangelistName(copiedFile.getStatus())[ CD ]
Line_32 $$ final List<SvnChangedFile> deletedFiles = context.getDeletedFiles()-->Line_34 $$ deletedFiles.remove(file)[ FD ]
Line_50 $$ foundRename = true-->Line_53 $$ if (!foundRename) [ FD ]
Line_37 $$ File wcPath = guessWorkingCopyPath(copiedStatus.getFile(), copiedStatus.getURL(), copyFromURL)-->Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)[ FD ]
Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) -->Line_50 $$ foundRename = true[ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_4 $$ final Status copiedStatus = copiedFile.getStatus()[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_23 $$ if (!context.isDeleted(newFilePath)) [ FD ]
Line_37 $$ File wcPath = guessWorkingCopyPath(copiedStatus.getFile(), copiedStatus.getURL(), copyFromURL)-->Line_46 $$ final FilePath filePath = myFactory.createFilePathOnDeleted(wcPath, false)[ FD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) [ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_48 $$ final ContentRevision afterRevision = CurrentContentRevision.create(copiedFile.getFilePath())[ FD ]
Line_10 $$ final String clName = SvnUtil.getChangelistName(copiedFile.getStatus())-->Line_11 $$ applyMovedChange(context, copiedFile.getFilePath(), dirtyScope, deletedToDelete, deletedFile, copiedStatus, clName)[ FD ]
Line_40 $$ status = myVcs.getFactory(wcPath).createStatusClient().doStatus(wcPath, false)-->Line_47 $$ final SvnContentRevision beforeRevision = SvnContentRevision.createBaseRevision(myVcs, filePath, status.getRevision())[ FD ]
Line_21 $$ File newPath = new File(copiedFile.getFilePath().getIOFile(), relativePath)-->Line_22 $$ FilePath newFilePath = myFactory.createFilePathOn(newPath)[ FD ]
Line_36 $$ if (!foundRename && copiedStatus.getURL() != null) -->Line_45 $$ if (status != null && status.is(StatusType.STATUS_DELETED)) [ CD ]
Line_2 $$ private void processCopiedFile(@NotNull SvnChangedFile copiedFile, @NotNull SvnChangeProviderContext context, @Nullable VcsDirtyScope dirtyScope) throws SVNException -->Line_5 $$ final String copyFromURL = copiedFile.getCopyFromURL()[ FD ]
Line_7 $$ for (SvnChangedFile deletedFile : context.getDeletedFiles()) -->Line_8 $$ final Status deletedStatus = deletedFile.getStatus()[ FD ]
