Line_2 $$ public void testNonSmartHome() throws IOException -->Line_15 $$ caretModel.moveToOffset(text.length())[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_16 $$ home()[ CD ]
Line_9 $$ SoftWrap softWrap = softWraps.get(0)-->Line_11 $$ caretModel.moveToOffset(softWrap.getStart() + 1)[ FD ]
Line_3 $$ String text = "     this is a string that starts with white space and is long enough to be soft-wrapped\n" + " this is a 'prefix' text before collapsed multi-line folding that is long enough to be soft-wrapped first fold line\n" + "second fold line"-->Line_5 $$ addCollapsedFoldRegion(text.indexOf("first fold line"), text.length(), "...")[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_9 $$ SoftWrap softWrap = softWraps.get(0)[ CD ]
Line_3 $$ String text = "     this is a string that starts with white space and is long enough to be soft-wrapped\n" + " this is a 'prefix' text before collapsed multi-line folding that is long enough to be soft-wrapped first fold line\n" + "second fold line"-->Line_15 $$ caretModel.moveToOffset(text.length())[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_10 $$ myEditor.getSettings().setSmartHome(false)[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_18 $$ assertEquals(new VisualPosition(visLine, 0), caretModel.getVisualPosition())[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_3 $$ String text = "     this is a string that starts with white space and is long enough to be soft-wrapped\n" + " this is a 'prefix' text before collapsed multi-line folding that is long enough to be soft-wrapped first fold line\n" + "second fold line"[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()[ CD ]
Line_6 $$ List<? extends SoftWrap> softWraps = getSoftWrapModel().getRegisteredSoftWraps()-->Line_9 $$ SoftWrap softWrap = softWraps.get(0)[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_18 $$ assertEquals(new VisualPosition(visLine, 0), caretModel.getVisualPosition())[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_17 $$ visLine = caretModel.getVisualPosition().line[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_11 $$ caretModel.moveToOffset(softWrap.getStart() + 1)[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_13 $$ home()[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_11 $$ caretModel.moveToOffset(softWrap.getStart() + 1)[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_4 $$ init(30, text)[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_12 $$ int visLine = caretModel.getVisualPosition().line[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_14 $$ assertEquals(new VisualPosition(visLine, 0), caretModel.getVisualPosition())[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_12 $$ int visLine = caretModel.getVisualPosition().line[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_5 $$ addCollapsedFoldRegion(text.indexOf("first fold line"), text.length(), "...")[ CD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_15 $$ caretModel.moveToOffset(text.length())[ FD ]
Line_8 $$ CaretModel caretModel = myEditor.getCaretModel()-->Line_17 $$ visLine = caretModel.getVisualPosition().line[ FD ]
Line_12 $$ int visLine = caretModel.getVisualPosition().line-->Line_17 $$ visLine = caretModel.getVisualPosition().line[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_6 $$ List<? extends SoftWrap> softWraps = getSoftWrapModel().getRegisteredSoftWraps()[ CD ]
Line_6 $$ List<? extends SoftWrap> softWraps = getSoftWrapModel().getRegisteredSoftWraps()-->Line_7 $$ assertTrue(!softWraps.isEmpty())[ FD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_7 $$ assertTrue(!softWraps.isEmpty())[ CD ]
Line_2 $$ public void testNonSmartHome() throws IOException -->Line_14 $$ assertEquals(new VisualPosition(visLine, 0), caretModel.getVisualPosition())[ CD ]
Line_3 $$ String text = "     this is a string that starts with white space and is long enough to be soft-wrapped\n" + " this is a 'prefix' text before collapsed multi-line folding that is long enough to be soft-wrapped first fold line\n" + "second fold line"-->Line_4 $$ init(30, text)[ FD ]
