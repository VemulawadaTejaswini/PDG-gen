Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_40 $$ String leftText = " [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_45 $$ FoldingGroup group = FoldingGroup.newGroup("one-liner")[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_7 $$ PsiCodeBlock body = method.getBody()[ FD ]
Line_12 $$ if (document.getLineNumber(nameIdentifier.getTextRange().getStartOffset()) != document.getLineNumber(method.getParameterList().getTextRange().getEndOffset())) -->Line_13 $$ return false[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_22 $$ if (statement.textContains('\n')) [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_29 $$ int leftStart = method.getParameterList().getTextRange().getEndOffset()[ FD ]
Line_3 $$ if (!JavaCodeFoldingSettings.getInstance().isCollapseOneLineMethods()) -->Line_4 $$ return false[ CD ]
Line_21 $$ PsiStatement statement = statements[0]-->Line_22 $$ if (statement.textContains('\n')) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_37 $$ if (leftEnd <= leftStart + 1 || rightEnd <= rightStart + 1) [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_25 $$ if (!areOnAdjacentLines(lBrace, statement, document) || !areOnAdjacentLines(statement, rBrace, document)) [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_17 $$ PsiStatement[] statements = body.getStatements()[ CD ]
Line_22 $$ if (statement.textContains('\n')) -->Line_23 $$ return false[ CD ]
Line_30 $$ int bodyStart = body.getTextRange().getStartOffset()-->Line_31 $$ if (bodyStart > leftStart && !StringUtil.isEmptyOrSpaces(document.getCharsSequence().subSequence(leftStart + 1, bodyStart))) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_21 $$ PsiStatement statement = statements[0][ CD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_36 $$ int rightEnd = body.getTextRange().getEndOffset()[ FD ]
Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) -->Line_43 $$ return false[ CD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_30 $$ int bodyStart = body.getTextRange().getStartOffset()[ FD ]
Line_21 $$ PsiStatement statement = statements[0]-->Line_35 $$ int rightStart = statement.getTextRange().getEndOffset()[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_7 $$ PsiCodeBlock body = method.getBody()[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_29 $$ int leftStart = method.getParameterList().getTextRange().getEndOffset()[ CD ]
Line_21 $$ PsiStatement statement = statements[0]-->Line_25 $$ if (!areOnAdjacentLines(lBrace, statement, document) || !areOnAdjacentLines(statement, rBrace, document)) [ FD ]
Line_37 $$ if (leftEnd <= leftStart + 1 || rightEnd <= rightStart + 1) -->Line_38 $$ return false[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_41 $$ String rightText = " }"[ CD ]
Line_36 $$ int rightEnd = body.getTextRange().getEndOffset()-->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_16 $$ PsiJavaToken rBrace = body.getRBrace()[ CD ]
Line_41 $$ String rightText = " }"-->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_47 $$ descriptorList.add(new NamedFoldingDescriptor(rBrace, rightStart, rightEnd, group, rightText))[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_12 $$ if (document.getLineNumber(nameIdentifier.getTextRange().getStartOffset()) != document.getLineNumber(method.getParameterList().getTextRange().getEndOffset())) [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_8 $$ PsiIdentifier nameIdentifier = method.getNameIdentifier()[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_8 $$ PsiIdentifier nameIdentifier = method.getNameIdentifier()[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()[ FD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_17 $$ PsiStatement[] statements = body.getStatements()[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_47 $$ descriptorList.add(new NamedFoldingDescriptor(rBrace, rightStart, rightEnd, group, rightText))[ CD ]
Line_15 $$ PsiJavaToken lBrace = body.getLBrace()-->Line_25 $$ if (!areOnAdjacentLines(lBrace, statement, document) || !areOnAdjacentLines(statement, rBrace, document)) [ FD ]
Line_21 $$ PsiStatement statement = statements[0]-->Line_34 $$ int leftEnd = statement.getTextRange().getStartOffset()[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_12 $$ if (document.getLineNumber(nameIdentifier.getTextRange().getStartOffset()) != document.getLineNumber(method.getParameterList().getTextRange().getEndOffset())) [ FD ]
Line_8 $$ PsiIdentifier nameIdentifier = method.getNameIdentifier()-->Line_12 $$ if (document.getLineNumber(nameIdentifier.getTextRange().getStartOffset()) != document.getLineNumber(method.getParameterList().getTextRange().getEndOffset())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_35 $$ int rightStart = statement.getTextRange().getEndOffset()[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()[ CD ]
Line_31 $$ if (bodyStart > leftStart && !StringUtil.isEmptyOrSpaces(document.getCharsSequence().subSequence(leftStart + 1, bodyStart))) -->Line_32 $$ return false[ CD ]
Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()-->Line_25 $$ if (!areOnAdjacentLines(lBrace, statement, document) || !areOnAdjacentLines(statement, rBrace, document)) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_30 $$ int bodyStart = body.getTextRange().getStartOffset()[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_18 $$ if (lBrace == null || rBrace == null || statements.length != 1) [ CD ]
Line_16 $$ PsiJavaToken rBrace = body.getRBrace()-->Line_25 $$ if (!areOnAdjacentLines(lBrace, statement, document) || !areOnAdjacentLines(statement, rBrace, document)) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_3 $$ if (!JavaCodeFoldingSettings.getInstance().isCollapseOneLineMethods()) [ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_31 $$ if (bodyStart > leftStart && !StringUtil.isEmptyOrSpaces(document.getCharsSequence().subSequence(leftStart + 1, bodyStart))) [ CD ]
Line_9 $$ if (body == null || document == null || nameIdentifier == null) -->Line_10 $$ return false[ CD ]
Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()-->Line_12 $$ if (document.getLineNumber(nameIdentifier.getTextRange().getStartOffset()) != document.getLineNumber(method.getParameterList().getTextRange().getEndOffset())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_46 $$ descriptorList.add(new NamedFoldingDescriptor(lBrace, leftStart, leftEnd, group, leftText))[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_48 $$ return true[ CD ]
Line_29 $$ int leftStart = method.getParameterList().getTextRange().getEndOffset()-->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_34 $$ int leftEnd = statement.getTextRange().getStartOffset()[ CD ]
Line_40 $$ String leftText = " -->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_15 $$ PsiJavaToken lBrace = body.getLBrace()[ CD ]
Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()-->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_36 $$ int rightEnd = body.getTextRange().getEndOffset()[ CD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_16 $$ PsiJavaToken rBrace = body.getRBrace()[ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_46 $$ descriptorList.add(new NamedFoldingDescriptor(lBrace, leftStart, leftEnd, group, leftText))[ CD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_9 $$ if (body == null || document == null || nameIdentifier == null) [ CD ]
Line_18 $$ if (lBrace == null || rBrace == null || statements.length != 1) -->Line_19 $$ return false[ CD ]
Line_7 $$ PsiCodeBlock body = method.getBody()-->Line_15 $$ PsiJavaToken lBrace = body.getLBrace()[ FD ]
Line_6 $$ Document document = method.getContainingFile().getViewProvider().getDocument()-->Line_31 $$ if (bodyStart > leftStart && !StringUtil.isEmptyOrSpaces(document.getCharsSequence().subSequence(leftStart + 1, bodyStart))) [ FD ]
Line_2 $$ private boolean addOneLineMethodFolding(List<FoldingDescriptor> descriptorList, PsiMethod method) -->Line_42 $$ if (!fitsRightMargin(method, document, leftStart, rightEnd, rightStart - leftEnd + leftText.length() + rightText.length())) [ CD ]
