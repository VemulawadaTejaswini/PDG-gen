Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_28 $$ if (!newArea.isEmpty()) [ FD ]
Line_8 $$ int delta = newArea.width - myOldArea.width-->Line_10 $$ if (delta != 0) [ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_6 $$ String newText = e.getNewFragment().toString()[ CD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_36 $$ fill(g, newArea, background)[ FD ]
Line_11 $$ if (delta < 0) -->Line_13 $$ if (caretRectangles != null) [ CD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())[ CD ]
Line_5 $$ int offset = e.getOffset()-->Line_29 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()[ FD ]
Line_23 $$ if (delta < 0) -->Line_24 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)[ CD ]
Line_34 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()-->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_8 $$ int delta = newArea.width - myOldArea.width-->Line_23 $$ if (delta < 0) [ FD ]
Line_24 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)-->Line_25 $$ fill(g, remainingArea, background)[ FD ]
Line_16 $$ if (myOldArea.contains(r) && !newArea.contains(r)) -->Line_17 $$ myEditor.getCaretCursor().paintAt(g, it.myPoint.x - delta, it.myPoint.y, it.myWidth, it.myCaret)[ CD ]
Line_23 $$ if (delta < 0) -->Line_25 $$ fill(g, remainingArea, background)[ CD ]
Line_30 $$ Point point = newArea.getLocation()-->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_9 $$ Color background = getCaretRowBackground()-->Line_36 $$ fill(g, newArea, background)[ FD ]
Line_40 $$ if (isZeroLatencyTypingDebugEnabled()) -->Line_41 $$ pause()[ CD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_22 $$ shift(g, myOldTailArea, delta)[ FD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ CD ]
Line_33 $$ Font font = fontInfo.getFont()-->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_25 $$ fill(g, remainingArea, background)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_17 $$ myEditor.getCaretCursor().paintAt(g, it.myPoint.x - delta, it.myPoint.y, it.myWidth, it.myCaret)[ FD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_32 $$ FontInfo fontInfo = EditorUtil.fontForChar(newText.charAt(0), attributes.getFontType(), myEditor)[ CD ]
Line_32 $$ FontInfo fontInfo = EditorUtil.fontForChar(newText.charAt(0), attributes.getFontType(), myEditor)-->Line_33 $$ Font font = fontInfo.getFont()[ FD ]
Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_30 $$ Point point = newArea.getLocation()[ FD ]
Line_14 $$ for (EditorImpl.CaretRectangle it : caretRectangles) -->Line_15 $$ Rectangle r = toRectangle(it)[ FD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_36 $$ fill(g, newArea, background)[ CD ]
Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_36 $$ fill(g, newArea, background)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_6 $$ String newText = e.getNewFragment().toString()[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_39 $$ Toolkit.getDefaultToolkit().sync()[ CD ]
Line_8 $$ int delta = newArea.width - myOldArea.width-->Line_24 $$ Rectangle remainingArea = new Rectangle(myOldTailArea.x + myOldTailArea.width + delta, myOldTailArea.y, -delta, myOldTailArea.height)[ FD ]
Line_6 $$ String newText = e.getNewFragment().toString()-->Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_5 $$ int offset = e.getOffset()[ FD ]
Line_10 $$ if (delta != 0) -->Line_22 $$ shift(g, myOldTailArea, delta)[ CD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_29 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()[ CD ]
Line_31 $$ int ascent = myEditor.getAscent()-->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_10 $$ if (delta != 0) -->Line_11 $$ if (delta < 0) [ CD ]
Line_15 $$ Rectangle r = toRectangle(it)-->Line_16 $$ if (myOldArea.contains(r) && !newArea.contains(r)) [ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_3 $$ if (g == null)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_28 $$ if (!newArea.isEmpty()) [ CD ]
Line_5 $$ int offset = e.getOffset()-->Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_40 $$ if (isZeroLatencyTypingDebugEnabled()) [ CD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_31 $$ int ascent = myEditor.getAscent()[ CD ]
Line_3 $$ if (g == null)-->Line_4 $$ return[ CD ]
Line_7 $$ Rectangle newArea = lineRectangleBetween(offset, offset + newText.length())-->Line_16 $$ if (myOldArea.contains(r) && !newArea.contains(r)) [ FD ]
Line_29 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()-->Line_32 $$ FontInfo fontInfo = EditorUtil.fontForChar(newText.charAt(0), attributes.getFontType(), myEditor)[ FD ]
Line_11 $$ if (delta < 0) -->Line_12 $$ EditorImpl.CaretRectangle[] caretRectangles = myEditor.getCaretCursor().getCaretLocations(true)[ CD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_3 $$ if (g == null)[ CD ]
Line_29 $$ TextAttributes attributes = getHighlighter().createIterator(offset).getTextAttributes()-->Line_34 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()[ FD ]
Line_12 $$ EditorImpl.CaretRectangle[] caretRectangles = myEditor.getCaretCursor().getCaretLocations(true)-->Line_13 $$ if (caretRectangles != null) [ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_8 $$ int delta = newArea.width - myOldArea.width[ CD ]
Line_8 $$ int delta = newArea.width - myOldArea.width-->Line_11 $$ if (delta < 0) [ FD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_30 $$ Point point = newArea.getLocation()[ CD ]
Line_9 $$ Color background = getCaretRowBackground()-->Line_25 $$ fill(g, remainingArea, background)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_5 $$ int offset = e.getOffset()[ CD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_9 $$ Color background = getCaretRowBackground()[ CD ]
Line_6 $$ String newText = e.getNewFragment().toString()-->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_33 $$ Font font = fontInfo.getFont()[ CD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_34 $$ Color foreground = attributes.getForegroundColor() == null ? myEditor.getForegroundColor() : attributes.getForegroundColor()[ CD ]
Line_28 $$ if (!newArea.isEmpty()) -->Line_35 $$ EditorUIUtil.setupAntialiasing(g)[ CD ]
Line_6 $$ String newText = e.getNewFragment().toString()-->Line_32 $$ FontInfo fontInfo = EditorUtil.fontForChar(newText.charAt(0), attributes.getFontType(), myEditor)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_37 $$ print(g, newText, point, ascent, font, foreground)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_10 $$ if (delta != 0) [ CD ]
Line_8 $$ int delta = newArea.width - myOldArea.width-->Line_22 $$ shift(g, myOldTailArea, delta)[ FD ]
Line_2 $$ private void paintImmediately(Graphics g, @NotNull DocumentEvent e) -->Line_35 $$ EditorUIUtil.setupAntialiasing(g)[ FD ]
Line_10 $$ if (delta != 0) -->Line_23 $$ if (delta < 0) [ CD ]
