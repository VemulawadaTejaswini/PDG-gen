Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() [ CD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_39 $$ int bySeverity = i2.getSeverity().compareTo(i1.getSeverity())[ CD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_40 $$ if (bySeverity != 0)[ CD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_47 $$ sb.insert(0, text.substring(0, result.second))[ CD ]
Line_28 $$ if (byEnds != 0)-->Line_29 $$ return byEnds[ CD ]
Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() -->Line_46 $$ Couple<Integer> result = composeText(sb, list, 0, text, text.length(), 0, showAttributesKeys)[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() [ CD ]
Line_7 $$ if (set.enabled && set.severity == info.getSeverity() && set.endOfLine == info.isAfterEndOfLine()) -->Line_8 $$ return Pair.create(entry.getKey(), info)[ CD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_26 $$ HighlightInfo i2 = o2.second[ CD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_42 $$ return Comparing.compare(i1.getDescription(), i2.getDescription())[ CD ]
Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() -->Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() [ FD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_25 $$ HighlightInfo i1 = o1.second[ CD ]
Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) -->Line_32 $$ if (byStarts != 0)[ CD ]
Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) -->Line_31 $$ int byStarts = i1.startOffset - i2.startOffset[ CD ]
Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) -->Line_35 $$ int byEOL = Comparing.compare(i2.isAfterEndOfLine(), i1.isAfterEndOfLine())[ CD ]
Line_25 $$ HighlightInfo i1 = o1.second-->Line_42 $$ return Comparing.compare(i1.getDescription(), i2.getDescription())[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_47 $$ sb.insert(0, text.substring(0, result.second))[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() [ FD ]
Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) -->Line_36 $$ if (byEOL != 0)[ CD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_46 $$ Couple<Integer> result = composeText(sb, list, 0, text, text.length(), 0, showAttributesKeys)[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_48 $$ return sb.toString()[ CD ]
Line_25 $$ HighlightInfo i1 = o1.second-->Line_35 $$ int byEOL = Comparing.compare(i2.isAfterEndOfLine(), i1.isAfterEndOfLine())[ FD ]
Line_26 $$ HighlightInfo i2 = o2.second-->Line_35 $$ int byEOL = Comparing.compare(i2.isAfterEndOfLine(), i1.isAfterEndOfLine())[ FD ]
Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() -->Line_11 $$ return null[ CD ]
Line_26 $$ HighlightInfo i2 = o2.second-->Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) [ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_15 $$ for (ExpectedHighlightingSet eachSet : types.values()) [ FD ]
Line_36 $$ if (byEOL != 0)-->Line_37 $$ return byEOL[ CD ]
Line_26 $$ HighlightInfo i2 = o2.second-->Line_39 $$ int bySeverity = i2.getSeverity().compareTo(i1.getSeverity())[ FD ]
Line_5 $$ for (Map.Entry<String, ExpectedHighlightingSet> entry : types.entrySet()) -->Line_6 $$ final ExpectedHighlightingSet set = entry.getValue()[ FD ]
Line_32 $$ if (byStarts != 0)-->Line_33 $$ return byStarts[ CD ]
Line_31 $$ int byStarts = i1.startOffset - i2.startOffset-->Line_32 $$ if (byStarts != 0)[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_5 $$ for (Map.Entry<String, ExpectedHighlightingSet> entry : types.entrySet()) [ FD ]
Line_26 $$ HighlightInfo i2 = o2.second-->Line_42 $$ return Comparing.compare(i1.getDescription(), i2.getDescription())[ FD ]
Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() -->Line_7 $$ if (set.enabled && set.severity == info.getSeverity() && set.endOfLine == info.isAfterEndOfLine()) [ FD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_28 $$ if (byEnds != 0)[ CD ]
Line_25 $$ HighlightInfo i1 = o1.second-->Line_39 $$ int bySeverity = i2.getSeverity().compareTo(i1.getSeverity())[ FD ]
Line_35 $$ int byEOL = Comparing.compare(i2.isAfterEndOfLine(), i1.isAfterEndOfLine())-->Line_36 $$ if (byEOL != 0)[ FD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_27 $$ int byEnds = i2.endOffset - i1.endOffset[ CD ]
Line_40 $$ if (bySeverity != 0)-->Line_41 $$ return bySeverity[ CD ]
Line_3 $$ List<Pair<String, HighlightInfo>> list = ContainerUtil.mapNotNull(infos, new NullableFunction<HighlightInfo, Pair<String, HighlightInfo>>() -->Line_8 $$ return Pair.create(entry.getKey(), info)[ FD ]
Line_5 $$ for (Map.Entry<String, ExpectedHighlightingSet> entry : types.entrySet()) -->Line_8 $$ return Pair.create(entry.getKey(), info)[ FD ]
Line_2 $$ public static String composeText(final Map<String, ExpectedHighlightingSet> types, Collection<HighlightInfo> infos, String text) -->Line_46 $$ Couple<Integer> result = composeText(sb, list, 0, text, text.length(), 0, showAttributesKeys)[ CD ]
Line_25 $$ HighlightInfo i1 = o1.second-->Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) [ FD ]
Line_23 $$ Collections.sort(list, new Comparator<Pair<String, HighlightInfo>>() -->Line_30 $$ if (!i1.isAfterEndOfLine() && !i2.isAfterEndOfLine()) [ CD ]
Line_27 $$ int byEnds = i2.endOffset - i1.endOffset-->Line_28 $$ if (byEnds != 0)[ FD ]
Line_39 $$ int bySeverity = i2.getSeverity().compareTo(i1.getSeverity())-->Line_40 $$ if (bySeverity != 0)[ FD ]
