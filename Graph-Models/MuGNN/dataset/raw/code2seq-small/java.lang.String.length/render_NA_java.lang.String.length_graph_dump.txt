Line_2 $$ public static String render(PsiExpression expression) -->Line_6 $$ int firstNewLinePos = text.indexOf('\n')[ CD ]
Line_7 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))-->Line_8 $$ if (trimmedText.length() != text.length())[ FD ]
Line_3 $$ StringBuilder buf = new StringBuilder()-->Line_5 $$ final String text = buf.toString()[ FD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_5 $$ final String text = buf.toString()[ CD ]
Line_5 $$ final String text = buf.toString()-->Line_6 $$ int firstNewLinePos = text.indexOf('\n')[ FD ]
Line_5 $$ final String text = buf.toString()-->Line_7 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))[ FD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_3 $$ StringBuilder buf = new StringBuilder()[ CD ]
Line_8 $$ if (trimmedText.length() != text.length())-->Line_9 $$ trimmedText += " ..."[ CD ]
Line_5 $$ final String text = buf.toString()-->Line_8 $$ if (trimmedText.length() != text.length())[ FD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_4 $$ expression.accept(new PsiExpressionTrimRenderer(buf))[ CD ]
Line_7 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))-->Line_9 $$ trimmedText += " ..."[ FD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_8 $$ if (trimmedText.length() != text.length())[ CD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_7 $$ String trimmedText = text.substring(0, firstNewLinePos != -1 ? firstNewLinePos : Math.min(100, text.length()))[ CD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_10 $$ return trimmedText[ CD ]
Line_2 $$ public static String render(PsiExpression expression) -->Line_4 $$ expression.accept(new PsiExpressionTrimRenderer(buf))[ FD ]
