Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_30 $$ if (locationAttribute == null) [ FD ]
Line_35 $$ if (!StringUtil.notNullize(value).contains(namespace)) -->Line_36 $$ if (value == null || StringUtil.isEmptyOrSpaces(value)) [ CD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_17 $$ rootTag.add(elementFactory.createXmlAttribute("xmlns:xsi", XmlUtil.XML_SCHEMA_INSTANCE_URI))[ FD ]
Line_7 $$ XmlAttribute anchor = getAnchor(rootTag)-->Line_25 $$ rootTag.addAfter(attribute, anchor)[ FD ]
Line_46 $$ final XmlAttribute xmlAttribute = rootTag.getAttribute(qname)-->Line_47 $$ if (xmlAttribute != null) [ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_45 $$ if (editor != null && namespace.length() == 0) [ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_44 $$ XmlUtil.reformatTagStart(rootTag)[ CD ]
Line_30 $$ if (locationAttribute == null) -->Line_32 $$ rootTag.add(locationAttribute)[ CD ]
Line_3 $$ final String namespace = possibleNamespaces.iterator().next()-->Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)[ FD ]
Line_3 $$ final String namespace = possibleNamespaces.iterator().next()-->Line_11 $$ String location = getLocation(file, namespace, providers)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_3 $$ final String namespace = possibleNamespaces.iterator().next()[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_7 $$ XmlAttribute anchor = getAnchor(rootTag)[ FD ]
Line_27 $$ if (location != null) -->Line_30 $$ if (locationAttribute == null) [ CD ]
Line_14 $$ xsiPrefix = rootTag.getPrefixByNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_15 $$ if (xsiPrefix == null) [ FD ]
Line_22 $$ if (anchor == null) -->Line_25 $$ rootTag.addAfter(attribute, anchor)[ CD ]
Line_27 $$ if (location != null) -->Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)[ CD ]
Line_34 $$ final String value = locationAttribute.getValue()-->Line_50 $$ final int startOffset = value.getTextOffset()[ FD ]
Line_30 $$ if (locationAttribute == null) -->Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)[ CD ]
Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)[ FD ]
Line_7 $$ XmlAttribute anchor = getAnchor(rootTag)-->Line_22 $$ if (anchor == null) [ FD ]
Line_15 $$ if (xsiPrefix == null) -->Line_16 $$ xsiPrefix = "xsi"[ CD ]
Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)-->Line_32 $$ rootTag.add(locationAttribute)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_27 $$ if (location != null) [ CD ]
Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)-->Line_25 $$ rootTag.addAfter(attribute, anchor)[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_46 $$ final XmlAttribute xmlAttribute = rootTag.getAttribute(qname)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_51 $$ editor.getCaretModel().moveToOffset(startOffset)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)[ FD ]
Line_10 $$ final XmlElementFactory elementFactory = XmlElementFactory.getInstance(project)-->Line_17 $$ rootTag.add(elementFactory.createXmlAttribute("xmlns:xsi", XmlUtil.XML_SCHEMA_INSTANCE_URI))[ FD ]
Line_3 $$ final String namespace = possibleNamespaces.iterator().next()-->Line_45 $$ if (editor != null && namespace.length() == 0) [ FD ]
Line_4 $$ final Project project = file.getProject()-->Line_10 $$ final XmlElementFactory elementFactory = XmlElementFactory.getInstance(project)[ FD ]
Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_39 $$ locationAttribute.setValue(value.trim() + " " + pair)[ FD ]
Line_20 $$ final String qname = "xmlns" + (prefix.length() > 0 ? ":" + prefix : "")-->Line_46 $$ final XmlAttribute xmlAttribute = rootTag.getAttribute(qname)[ FD ]
Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)-->Line_23 $$ rootTag.add(attribute)[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_23 $$ rootTag.add(attribute)[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_25 $$ rootTag.addAfter(attribute, anchor)[ FD ]
Line_45 $$ if (editor != null && namespace.length() == 0) -->Line_47 $$ if (xmlAttribute != null) [ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)[ CD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_32 $$ rootTag.add(locationAttribute)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_4 $$ final Project project = file.getProject()[ FD ]
Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)-->Line_37 $$ locationAttribute.setValue(pair)[ FD ]
Line_36 $$ if (value == null || StringUtil.isEmptyOrSpaces(value)) -->Line_39 $$ locationAttribute.setValue(value.trim() + " " + pair)[ CD ]
Line_11 $$ String location = getLocation(file, namespace, providers)-->Line_13 $$ if (location != null) [ FD ]
Line_55 $$ if (runAfter != null) -->Line_56 $$ runAfter.run(prefix)[ CD ]
Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_37 $$ locationAttribute.setValue(pair)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_12 $$ String xsiPrefix = null[ CD ]
Line_45 $$ if (editor != null && namespace.length() == 0) -->Line_46 $$ final XmlAttribute xmlAttribute = rootTag.getAttribute(qname)[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_10 $$ final XmlElementFactory elementFactory = XmlElementFactory.getInstance(project)[ CD ]
Line_27 $$ if (location != null) -->Line_29 $$ final String pair = namespace + " " + location[ CD ]
Line_12 $$ String xsiPrefix = null-->Line_15 $$ if (xsiPrefix == null) [ FD ]
Line_30 $$ if (locationAttribute == null) -->Line_34 $$ final String value = locationAttribute.getValue()[ CD ]
Line_47 $$ if (xmlAttribute != null) -->Line_50 $$ final int startOffset = value.getTextOffset()[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_11 $$ String location = getLocation(file, namespace, providers)[ CD ]
Line_10 $$ final XmlElementFactory elementFactory = XmlElementFactory.getInstance(project)-->Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)[ FD ]
Line_3 $$ final String namespace = possibleNamespaces.iterator().next()-->Line_35 $$ if (!StringUtil.notNullize(value).contains(namespace)) [ FD ]
Line_46 $$ final XmlAttribute xmlAttribute = rootTag.getAttribute(qname)-->Line_48 $$ final XmlAttributeValue value = xmlAttribute.getValueElement()[ FD ]
Line_12 $$ String xsiPrefix = null-->Line_16 $$ xsiPrefix = "xsi"[ FD ]
Line_8 $$ final List<XmlSchemaProvider> providers = XmlSchemaProvider.getAvailableProviders(file)-->Line_11 $$ String location = getLocation(file, namespace, providers)[ FD ]
Line_29 $$ final String pair = namespace + " " + location-->Line_37 $$ locationAttribute.setValue(pair)[ FD ]
Line_30 $$ if (locationAttribute == null) -->Line_35 $$ if (!StringUtil.notNullize(value).contains(namespace)) [ CD ]
Line_34 $$ final String value = locationAttribute.getValue()-->Line_36 $$ if (value == null || StringUtil.isEmptyOrSpaces(value)) [ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_11 $$ String location = getLocation(file, namespace, providers)[ FD ]
Line_12 $$ String xsiPrefix = null-->Line_14 $$ xsiPrefix = rootTag.getPrefixByNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)[ FD ]
Line_11 $$ String location = getLocation(file, namespace, providers)-->Line_27 $$ if (location != null) [ FD ]
Line_29 $$ final String pair = namespace + " " + location-->Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)[ FD ]
Line_8 $$ final List<XmlSchemaProvider> providers = XmlSchemaProvider.getAvailableProviders(file)-->Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)[ FD ]
Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)-->Line_34 $$ final String value = locationAttribute.getValue()[ FD ]
Line_47 $$ if (xmlAttribute != null) -->Line_52 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_7 $$ XmlAttribute anchor = getAnchor(rootTag)[ CD ]
Line_15 $$ if (xsiPrefix == null) -->Line_17 $$ rootTag.add(elementFactory.createXmlAttribute("xmlns:xsi", XmlUtil.XML_SCHEMA_INSTANCE_URI))[ CD ]
Line_34 $$ final String value = locationAttribute.getValue()-->Line_39 $$ locationAttribute.setValue(value.trim() + " " + pair)[ FD ]
Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_32 $$ rootTag.add(locationAttribute)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_52 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_13 $$ if (location != null) -->Line_14 $$ xsiPrefix = rootTag.getPrefixByNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)[ CD ]
Line_20 $$ final String qname = "xmlns" + (prefix.length() > 0 ? ":" + prefix : "")-->Line_21 $$ final XmlAttribute attribute = elementFactory.createXmlAttribute(qname, namespace)[ FD ]
Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)-->Line_56 $$ runAfter.run(prefix)[ FD ]
Line_36 $$ if (value == null || StringUtil.isEmptyOrSpaces(value)) -->Line_37 $$ locationAttribute.setValue(pair)[ CD ]
Line_14 $$ xsiPrefix = rootTag.getPrefixByNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_16 $$ xsiPrefix = "xsi"[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_5 $$ final XmlTag rootTag = file.getRootTag()[ CD ]
Line_50 $$ final int startOffset = value.getTextOffset()-->Line_51 $$ editor.getCaretModel().moveToOffset(startOffset)[ FD ]
Line_47 $$ if (xmlAttribute != null) -->Line_51 $$ editor.getCaretModel().moveToOffset(startOffset)[ CD ]
Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)-->Line_39 $$ locationAttribute.setValue(value.trim() + " " + pair)[ FD ]
Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)-->Line_20 $$ final String qname = "xmlns" + (prefix.length() > 0 ? ":" + prefix : "")[ FD ]
Line_22 $$ if (anchor == null) -->Line_23 $$ rootTag.add(attribute)[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_5 $$ final XmlTag rootTag = file.getRootTag()[ FD ]
Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)-->Line_34 $$ final String value = locationAttribute.getValue()[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_55 $$ if (runAfter != null) [ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_8 $$ final List<XmlSchemaProvider> providers = XmlSchemaProvider.getAvailableProviders(file)[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_56 $$ runAfter.run(prefix)[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_28 $$ XmlAttribute locationAttribute = rootTag.getAttribute(XmlUtil.SCHEMA_LOCATION_ATT, XmlUtil.XML_SCHEMA_INSTANCE_URI)[ FD ]
Line_13 $$ if (location != null) -->Line_15 $$ if (xsiPrefix == null) [ CD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_14 $$ xsiPrefix = rootTag.getPrefixByNamespace(XmlUtil.XML_SCHEMA_INSTANCE_URI)[ FD ]
Line_47 $$ if (xmlAttribute != null) -->Line_48 $$ final XmlAttributeValue value = xmlAttribute.getValueElement()[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_13 $$ if (location != null) [ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_22 $$ if (anchor == null) [ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_20 $$ final String qname = "xmlns" + (prefix.length() > 0 ? ":" + prefix : "")[ CD ]
Line_3 $$ final String namespace = possibleNamespaces.iterator().next()-->Line_9 $$ String prefix = getPrefix(file, nsPrefix, namespace, providers)[ FD ]
Line_10 $$ final XmlElementFactory elementFactory = XmlElementFactory.getInstance(project)-->Line_31 $$ locationAttribute = elementFactory.createXmlAttribute(xsiPrefix + ":" + XmlUtil.SCHEMA_LOCATION_ATT, pair)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_3 $$ final String namespace = possibleNamespaces.iterator().next()[ CD ]
Line_34 $$ final String value = locationAttribute.getValue()-->Line_35 $$ if (!StringUtil.notNullize(value).contains(namespace)) [ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_4 $$ final Project project = file.getProject()[ CD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_8 $$ final List<XmlSchemaProvider> providers = XmlSchemaProvider.getAvailableProviders(file)[ FD ]
Line_5 $$ final XmlTag rootTag = file.getRootTag()-->Line_44 $$ XmlUtil.reformatTagStart(rootTag)[ FD ]
Line_2 $$ public void insertNamespaceDeclaration(@NotNull final XmlFile file, @Nullable final Editor editor, @NotNull final Set<String> possibleNamespaces, @Nullable String nsPrefix, @Nullable final Runner<String, IncorrectOperationException> runAfter) throws IncorrectOperationException -->Line_55 $$ if (runAfter != null) [ CD ]
