Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_3 $$ final List<Pair<String, Integer>> searchTerms = new ArrayList<Pair<String, Integer>>()[ CD ]
Line_4 $$ for (TextRange fragment : colored) -->Line_5 $$ searchTerms.add(Pair.create(fragment.substring(text), fragment.getStartOffset()))[ FD ]
Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() -->Line_10 $$ if (pair.second > lastOffset[0]) [ CD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_13 $$ simpleColoredComponent.append(text.substring(pair.second, pair.second + pair.first.length()), highlighted)[ FD ]
Line_18 $$ if (lastOffset[0] < text.length()) -->Line_19 $$ simpleColoredComponent.append(text.substring(lastOffset[0]), plain)[ CD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_11 $$ simpleColoredComponent.append(text.substring(lastOffset[0], pair.second), plain)[ FD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_18 $$ if (lastOffset[0] < text.length()) [ FD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_7 $$ final int[] lastOffset = [ CD ]
Line_3 $$ final List<Pair<String, Integer>> searchTerms = new ArrayList<Pair<String, Integer>>()-->Line_5 $$ searchTerms.add(Pair.create(fragment.substring(text), fragment.getStartOffset()))[ FD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() [ CD ]
Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() -->Line_13 $$ simpleColoredComponent.append(text.substring(pair.second, pair.second + pair.first.length()), highlighted)[ CD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_19 $$ simpleColoredComponent.append(text.substring(lastOffset[0]), plain)[ FD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_5 $$ searchTerms.add(Pair.create(fragment.substring(text), fragment.getStartOffset()))[ FD ]
Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() -->Line_15 $$ return true[ CD ]
Line_3 $$ final List<Pair<String, Integer>> searchTerms = new ArrayList<Pair<String, Integer>>()-->Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() [ FD ]
Line_10 $$ if (pair.second > lastOffset[0]) -->Line_11 $$ simpleColoredComponent.append(text.substring(lastOffset[0], pair.second), plain)[ CD ]
Line_8 $$ ContainerUtil.process(searchTerms, new Processor<Pair<String, Integer>>() -->Line_14 $$ lastOffset[0] = pair.second + pair.first.length()[ CD ]
Line_2 $$ public static void appendColoredFragments(final SimpleColoredComponent simpleColoredComponent, final String text, Iterable<TextRange> colored, final SimpleTextAttributes plain, final SimpleTextAttributes highlighted) -->Line_18 $$ if (lastOffset[0] < text.length()) [ CD ]
