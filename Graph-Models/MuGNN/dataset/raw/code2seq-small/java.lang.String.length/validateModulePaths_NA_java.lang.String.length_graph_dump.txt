Line_18 $$ if (moduleFile.exists()) -->Line_19 $$ int answer = Messages.showYesNoDialog(IdeBundle.message("prompt.overwrite.project.file", moduleFile.getAbsolutePath(), IdeBundle.message("project.new.wizard.module.identification")), IdeBundle.message("title.file.already.exists"), Messages.getQuestionIcon())[ CD ]
Line_18 $$ if (moduleFile.exists()) -->Line_20 $$ if (answer != Messages.YES) [ CD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_14 $$ if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.module.content.root"), myModuleContentRoot.getText(), myContentRootChangedByUser)) [ CD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_11 $$ if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.module.file"), moduleFileDirectory, myImlLocationChangedByUser)) [ CD ]
Line_17 $$ File moduleFile = new File(moduleFileDirectory, moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)-->Line_19 $$ int answer = Messages.showYesNoDialog(IdeBundle.message("prompt.overwrite.project.file", moduleFile.getAbsolutePath(), IdeBundle.message("project.new.wizard.module.identification")), IdeBundle.message("title.file.already.exists"), Messages.getQuestionIcon())[ FD ]
Line_20 $$ if (answer != Messages.YES) -->Line_21 $$ return false[ CD ]
Line_19 $$ int answer = Messages.showYesNoDialog(IdeBundle.message("prompt.overwrite.project.file", moduleFile.getAbsolutePath(), IdeBundle.message("project.new.wizard.module.identification")), IdeBundle.message("title.file.already.exists"), Messages.getQuestionIcon())-->Line_20 $$ if (answer != Messages.YES) [ FD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_8 $$ if (moduleName.length() == 0) [ CD ]
Line_17 $$ File moduleFile = new File(moduleFileDirectory, moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)-->Line_18 $$ if (moduleFile.exists()) [ FD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_18 $$ if (moduleFile.exists()) [ CD ]
Line_4 $$ final String moduleFileDirectory = myModuleFileLocation.getText()-->Line_11 $$ if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.module.file"), moduleFileDirectory, myImlLocationChangedByUser)) [ FD ]
Line_11 $$ if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.module.file"), moduleFileDirectory, myImlLocationChangedByUser)) -->Line_12 $$ return false[ CD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_24 $$ return true[ CD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_17 $$ File moduleFile = new File(moduleFileDirectory, moduleName + ModuleFileType.DOT_DEFAULT_EXTENSION)[ CD ]
Line_3 $$ final String moduleName = getModuleName()-->Line_8 $$ if (moduleName.length() == 0) [ FD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_4 $$ final String moduleFileDirectory = myModuleFileLocation.getText()[ CD ]
Line_14 $$ if (!ProjectWizardUtil.createDirectoryIfNotExists(IdeBundle.message("directory.module.content.root"), myModuleContentRoot.getText(), myContentRootChangedByUser)) -->Line_15 $$ return false[ CD ]
Line_4 $$ final String moduleFileDirectory = myModuleFileLocation.getText()-->Line_5 $$ if (moduleFileDirectory.length() == 0) [ FD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_5 $$ if (moduleFileDirectory.length() == 0) [ CD ]
Line_2 $$ public boolean validateModulePaths() throws ConfigurationException -->Line_3 $$ final String moduleName = getModuleName()[ CD ]
