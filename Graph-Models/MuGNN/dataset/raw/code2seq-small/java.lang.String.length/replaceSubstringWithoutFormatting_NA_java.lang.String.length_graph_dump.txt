Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_15 $$ final int pos = builder.toString().length()[ CD ]
Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)-->Line_20 $$ final PyExpression expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_14 $$ builder.append(" % ")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_5 $$ final PsiElement parent = oldExpression.getParent()[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_7 $$ final StringBuilder builder = new StringBuilder()[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_11 $$ builder.append(prefix)[ FD ]
Line_15 $$ final int pos = builder.toString().length()-->Line_22 $$ return newElement.findElementAt(pos)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_9 $$ builder.append("(")[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_21 $$ final PsiElement newElement = oldExpression.replace(expression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_13 $$ builder.append(suffix)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(newText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_16 $$ builder.append(newText)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_17 $$ if (parensNeeded) [ CD ]
Line_8 $$ if (parensNeeded) -->Line_9 $$ builder.append("(")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_8 $$ if (parensNeeded) [ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_12 $$ builder.append("%s")[ CD ]
Line_3 $$ final PyElementGenerator generator = PyElementGenerator.getInstance(oldExpression.getProject())-->Line_20 $$ final PyExpression expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_20 $$ final PyExpression expression = generator.createExpressionFromText(languageLevel, builder.toString())-->Line_21 $$ final PsiElement newElement = oldExpression.replace(expression)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_22 $$ return newElement.findElementAt(pos)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_5 $$ final PsiElement parent = oldExpression.getParent()[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_11 $$ builder.append(prefix)[ FD ]
Line_17 $$ if (parensNeeded) -->Line_18 $$ builder.append(")")[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_11 $$ builder.append(prefix)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_21 $$ final PsiElement newElement = oldExpression.replace(expression)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_15 $$ final int pos = builder.toString().length()[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(suffix)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_13 $$ builder.append(suffix)[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_18 $$ builder.append(")")[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(" % ")[ FD ]
Line_21 $$ final PsiElement newElement = oldExpression.replace(expression)-->Line_22 $$ return newElement.findElementAt(pos)[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_6 $$ final boolean parensNeeded = parent instanceof PyExpression && !(parent instanceof PyParenthesizedExpression)[ CD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append("%s")[ FD ]
Line_7 $$ final StringBuilder builder = new StringBuilder()-->Line_20 $$ final PyExpression expression = generator.createExpressionFromText(languageLevel, builder.toString())[ FD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_16 $$ builder.append(newText)[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_20 $$ final PyExpression expression = generator.createExpressionFromText(languageLevel, builder.toString())[ CD ]
Line_2 $$ private static PsiElement replaceSubstringWithoutFormatting(@NotNull PyStringLiteralExpression oldExpression, @NotNull String prefix, @NotNull String suffix, @NotNull String newText) -->Line_4 $$ final LanguageLevel languageLevel = LanguageLevel.forElement(oldExpression)[ CD ]
