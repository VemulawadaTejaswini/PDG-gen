Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_13 $$ patternIndex++[ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_6 $$ if (!isWildcard(patternIndex)) [ FD ]
Line_15 $$ if (patternIndex == myPattern.length) -->Line_24 $$ return FList.emptyList()[ CD ]
Line_6 $$ if (!isWildcard(patternIndex)) -->Line_7 $$ if (patternIndex == myPattern.length) [ CD ]
Line_17 $$ if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) -->Line_18 $$ int spaceIndex = name.indexOf(' ', nameIndex)[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_3 $$ if (nameIndex < 0) [ CD ]
Line_18 $$ int spaceIndex = name.indexOf(' ', nameIndex)-->Line_20 $$ return FList.<TextRange>emptyList().prepend(TextRange.from(spaceIndex, 1))[ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_15 $$ if (patternIndex == myPattern.length) [ FD ]
Line_19 $$ if (spaceIndex >= 0) -->Line_20 $$ return FList.<TextRange>emptyList().prepend(TextRange.from(spaceIndex, 1))[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_10 $$ return matchFragment(name, patternIndex, nameIndex, matchingState)[ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_30 $$ return matchSkippingWords(name, patternIndex, nameIndex, true, matchingState)[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_6 $$ if (!isWildcard(patternIndex)) [ CD ]
Line_26 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nameIndex, matchingState)-->Line_27 $$ if (ranges != null) [ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_3 $$ if (nameIndex < 0) [ FD ]
Line_7 $$ if (patternIndex == myPattern.length) -->Line_8 $$ return FList.emptyList()[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_15 $$ if (patternIndex == myPattern.length) [ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_26 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nameIndex, matchingState)[ CD ]
Line_12 $$ do -->Line_13 $$ patternIndex++[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_18 $$ int spaceIndex = name.indexOf(' ', nameIndex)[ FD ]
Line_15 $$ if (patternIndex == myPattern.length) -->Line_17 $$ if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) [ CD ]
Line_18 $$ int spaceIndex = name.indexOf(' ', nameIndex)-->Line_19 $$ if (spaceIndex >= 0) [ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_26 $$ FList<TextRange> ranges = matchFragment(name, patternIndex, nameIndex, matchingState)[ FD ]
Line_6 $$ if (!isWildcard(patternIndex)) -->Line_10 $$ return matchFragment(name, patternIndex, nameIndex, matchingState)[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_17 $$ if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) [ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_12 $$ do [ CD ]
Line_15 $$ if (patternIndex == myPattern.length) -->Line_16 $$ boolean space = isPatternChar(patternIndex - 1, ' ')[ CD ]
Line_17 $$ if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) -->Line_22 $$ return null[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_7 $$ if (patternIndex == myPattern.length) [ FD ]
Line_17 $$ if (space && nameIndex != name.length() && (patternIndex < 2 || !NameUtil.isWordStart(myPattern[patternIndex - 2]))) -->Line_19 $$ if (spaceIndex >= 0) [ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_27 $$ if (ranges != null) [ CD ]
Line_27 $$ if (ranges != null) -->Line_28 $$ return ranges[ CD ]
Line_3 $$ if (nameIndex < 0) -->Line_4 $$ return null[ CD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_30 $$ return matchSkippingWords(name, patternIndex, nameIndex, true, matchingState)[ FD ]
Line_2 $$ private FList<TextRange> matchWildcards(@NotNull String name, int patternIndex, int nameIndex, MatchingState matchingState) -->Line_12 $$ do [ FD ]
