Line_10 $$ if (fileName.contains(StringPool.SLASH)) -->Line_12 $$ fileName = fileName.substring(path.length() + 1)[ CD ]
Line_25 $$ VersionHistory versionHistory = versionManager.getVersionHistory(contentNode.getPath())-->Line_26 $$ if (versionHistory.hasVersionLabel(versionLabel)) [ FD ]
Line_3 $$ Session session = null-->Line_23 $$ session.save()[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_17 $$ versionManager.checkout(contentNode.getPath())[ FD ]
Line_3 $$ Session session = null-->Line_5 $$ session = _jcrFactoryWrapper.createSession()[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_29 $$ versionHistory.addVersionLabel(version.getName(), versionLabel, _jcrStoreConfiguration.moveVersionLabels())[ FD ]
Line_9 $$ Node repositoryNode = getFolderNode(rootNode, repositoryId)-->Line_13 $$ repositoryNode = getFolderNode(repositoryNode, path)[ FD ]
Line_5 $$ session = _jcrFactoryWrapper.createSession()-->Line_23 $$ session.save()[ FD ]
Line_13 $$ repositoryNode = getFolderNode(repositoryNode, path)-->Line_15 $$ Node fileNode = repositoryNode.getNode(fileName)[ FD ]
Line_3 $$ Session session = null-->Line_19 $$ ValueFactory valueFactory = session.getValueFactory()[ FD ]
Line_8 $$ Node rootNode = getRootNode(session, companyId)-->Line_9 $$ Node repositoryNode = getFolderNode(rootNode, repositoryId)[ FD ]
Line_3 $$ Session session = null-->Line_6 $$ Workspace workspace = session.getWorkspace()[ FD ]
Line_20 $$ Binary binary = valueFactory.createBinary(is)-->Line_21 $$ contentNode.setProperty(JCRConstants.JCR_DATA, binary)[ FD ]
Line_7 $$ VersionManager versionManager = workspace.getVersionManager()-->Line_25 $$ VersionHistory versionHistory = versionManager.getVersionHistory(contentNode.getPath())[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_15 $$ Node fileNode = repositoryNode.getNode(fileName)[ FD ]
Line_6 $$ Workspace workspace = session.getWorkspace()-->Line_7 $$ VersionManager versionManager = workspace.getVersionManager()[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_3 $$ Session session = null[ CD ]
Line_5 $$ session = _jcrFactoryWrapper.createSession()-->Line_8 $$ Node rootNode = getRootNode(session, companyId)[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_25 $$ VersionHistory versionHistory = versionManager.getVersionHistory(contentNode.getPath())[ FD ]
Line_7 $$ VersionManager versionManager = workspace.getVersionManager()-->Line_17 $$ versionManager.checkout(contentNode.getPath())[ FD ]
Line_10 $$ if (fileName.contains(StringPool.SLASH)) -->Line_13 $$ repositoryNode = getFolderNode(repositoryNode, path)[ CD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_12 $$ fileName = fileName.substring(path.length() + 1)[ FD ]
Line_7 $$ VersionManager versionManager = workspace.getVersionManager()-->Line_24 $$ Version version = versionManager.checkin(contentNode.getPath())[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_24 $$ Version version = versionManager.checkin(contentNode.getPath())[ FD ]
Line_9 $$ Node repositoryNode = getFolderNode(rootNode, repositoryId)-->Line_15 $$ Node fileNode = repositoryNode.getNode(fileName)[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_18 $$ contentNode.setProperty(JCRConstants.JCR_MIME_TYPE, ContentTypes.TEXT_PLAIN)[ FD ]
Line_5 $$ session = _jcrFactoryWrapper.createSession()-->Line_6 $$ Workspace workspace = session.getWorkspace()[ FD ]
Line_19 $$ ValueFactory valueFactory = session.getValueFactory()-->Line_20 $$ Binary binary = valueFactory.createBinary(is)[ FD ]
Line_3 $$ Session session = null-->Line_35 $$ _jcrFactoryWrapper.closeSession(session)[ FD ]
Line_24 $$ Version version = versionManager.checkin(contentNode.getPath())-->Line_29 $$ versionHistory.addVersionLabel(version.getName(), versionLabel, _jcrStoreConfiguration.moveVersionLabels())[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_8 $$ Node rootNode = getRootNode(session, companyId)[ FD ]
Line_11 $$ String path = fileName.substring(0, fileName.lastIndexOf(StringPool.SLASH))-->Line_13 $$ repositoryNode = getFolderNode(repositoryNode, path)[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_10 $$ if (fileName.contains(StringPool.SLASH)) [ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_20 $$ Binary binary = valueFactory.createBinary(is)[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_21 $$ contentNode.setProperty(JCRConstants.JCR_DATA, binary)[ FD ]
Line_25 $$ VersionHistory versionHistory = versionManager.getVersionHistory(contentNode.getPath())-->Line_29 $$ versionHistory.addVersionLabel(version.getName(), versionLabel, _jcrStoreConfiguration.moveVersionLabels())[ FD ]
Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)-->Line_22 $$ contentNode.setProperty(JCRConstants.JCR_LAST_MODIFIED, Calendar.getInstance())[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_11 $$ String path = fileName.substring(0, fileName.lastIndexOf(StringPool.SLASH))[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_9 $$ Node repositoryNode = getFolderNode(rootNode, repositoryId)[ FD ]
Line_12 $$ fileName = fileName.substring(path.length() + 1)-->Line_15 $$ Node fileNode = repositoryNode.getNode(fileName)[ FD ]
Line_5 $$ session = _jcrFactoryWrapper.createSession()-->Line_35 $$ _jcrFactoryWrapper.closeSession(session)[ FD ]
Line_2 $$ public void updateFile(long companyId, long repositoryId, String fileName, String versionLabel, InputStream is) throws DuplicateFileException, NoSuchFileException -->Line_26 $$ if (versionHistory.hasVersionLabel(versionLabel)) [ FD ]
Line_11 $$ String path = fileName.substring(0, fileName.lastIndexOf(StringPool.SLASH))-->Line_12 $$ fileName = fileName.substring(path.length() + 1)[ FD ]
Line_10 $$ if (fileName.contains(StringPool.SLASH)) -->Line_11 $$ String path = fileName.substring(0, fileName.lastIndexOf(StringPool.SLASH))[ CD ]
Line_3 $$ Session session = null-->Line_8 $$ Node rootNode = getRootNode(session, companyId)[ FD ]
Line_15 $$ Node fileNode = repositoryNode.getNode(fileName)-->Line_16 $$ Node contentNode = fileNode.getNode(JCRConstants.JCR_CONTENT)[ FD ]
Line_5 $$ session = _jcrFactoryWrapper.createSession()-->Line_19 $$ ValueFactory valueFactory = session.getValueFactory()[ FD ]
