Line_2 $$ public void testFindExceptComments() -->Line_13 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ CD ]
Line_2 $$ public void testFindExceptComments() -->Line_5 $$ findModel.setSearchContext(FindModel.SearchContext.EXCEPT_COMMENTS)[ CD ]
Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_13 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_5 $$ findModel.setSearchContext(FindModel.SearchContext.EXCEPT_COMMENTS)[ FD ]
Line_2 $$ public void testFindExceptComments() -->Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ CD ]
Line_2 $$ public void testFindExceptComments() -->Line_9 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ CD ]
Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_12 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public void testFindExceptComments() -->Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")[ CD ]
Line_2 $$ public void testFindExceptComments() -->Line_10 $$ findModel.setRegularExpressions(true)[ CD ]
Line_2 $$ public void testFindExceptComments() -->Line_12 $$ assertTrue(findResult.isStringFound())[ CD ]
Line_2 $$ public void testFindExceptComments() -->Line_4 $$ String prefix = "done"[ CD ]
Line_4 $$ String prefix = "done"-->Line_13 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_9 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_12 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_2 $$ public void testFindExceptComments() -->Line_8 $$ assertTrue(findResult.isStringFound())[ CD ]
Line_4 $$ String prefix = "done"-->Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_2 $$ public void testFindExceptComments() -->Line_6 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)[ CD ]
Line_4 $$ String prefix = "done"-->Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_6 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)-->Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_8 $$ assertTrue(findResult.isStringFound())[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_10 $$ findModel.setRegularExpressions(true)[ FD ]
Line_3 $$ FindModel findModel = FindManagerTestUtils.configureFindModel("done")-->Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_6 $$ LightVirtualFile file = new LightVirtualFile("A.java", text)-->Line_7 $$ FindResult findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ FD ]
Line_4 $$ String prefix = "done"-->Line_9 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)-->Line_13 $$ assertTrue(findResult.getStartOffset() > prefix.length())[ FD ]
Line_2 $$ public void testFindExceptComments() -->Line_11 $$ findResult = myFindManager.findString(text, prefix.length(), findModel, file)[ CD ]
