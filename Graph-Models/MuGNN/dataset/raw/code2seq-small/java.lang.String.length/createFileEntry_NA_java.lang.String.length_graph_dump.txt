Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_4 $$ long folderId = _folder.getFolderId()[ CD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_10 $$ Assert.assertNotNull(assetEntry)[ CD ]
Line_5 $$ InputStream inputStream = new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes())-->Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)[ FD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_11 $$ return fileEntry[ CD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_9 $$ AssetEntry assetEntry = getAssetEntry(fileEntry.getFileEntryId(), true)[ CD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_5 $$ InputStream inputStream = new UnsyncByteArrayInputStream(_TEST_CONTENT.getBytes())[ CD ]
Line_9 $$ AssetEntry assetEntry = getAssetEntry(fileEntry.getFileEntryId(), true)-->Line_10 $$ Assert.assertNotNull(assetEntry)[ FD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)[ FD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)[ CD ]
Line_3 $$ long repositoryId = _group.getGroupId()-->Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)[ FD ]
Line_4 $$ long folderId = _folder.getFolderId()-->Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)[ FD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_7 $$ Assert.assertNotNull(fileEntry)[ CD ]
Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)-->Line_9 $$ AssetEntry assetEntry = getAssetEntry(fileEntry.getFileEntryId(), true)[ FD ]
Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)-->Line_8 $$ Assert.assertEquals("1.0", fileEntry.getVersion())[ FD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_3 $$ long repositoryId = _group.getGroupId()[ CD ]
Line_2 $$ protected FileEntry createFileEntry(String fileName) throws Exception -->Line_8 $$ Assert.assertEquals("1.0", fileEntry.getVersion())[ CD ]
Line_6 $$ FileEntry fileEntry = DLAppServiceUtil.addFileEntry(repositoryId, folderId, fileName, ContentTypes.TEXT_PLAIN, fileName, null, null, inputStream, _TEST_CONTENT.length(), _serviceContext)-->Line_7 $$ Assert.assertNotNull(fileEntry)[ FD ]
