Line_7 $$ for (int offset = 0; offset < text.length(); offset++) -->Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) [ FD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_13 $$ if (c != ' ' && c != '\t')[ CD ]
Line_42 $$ if (next.getElementType() == TokenType.WHITE_SPACE) -->Line_46 $$ if (!newSpace.isEmpty()) [ CD ]
Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_27 $$ if (offset1 < text.length()) [ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) [ CD ]
Line_6 $$ String text = element.getText()-->Line_18 $$ String space = text.substring(offset + 1, offset1)[ FD ]
Line_10 $$ int offset1-->Line_12 $$ c = text.charAt(offset1)[ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_39 $$ int leafOffset = getStartOffset(element, leaf)[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_10 $$ int offset1[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_66 $$ if (leaf == element) [ FD ]
Line_5 $$ final CharTable charTableByTree = SharedImplUtil.findCharTableByTree(element)-->Line_62 $$ LeafElement newLeaf = Factory.createSingleLeafElement(leaf.getElementType(), newLeafText, charTableByTree, SharedImplUtil.getManagerByTree(leaf))[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_16 $$ if (c == '\n' || c == '\r')[ CD ]
Line_10 $$ int offset1-->Line_18 $$ String space = text.substring(offset + 1, offset1)[ FD ]
Line_10 $$ int offset1-->Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_10 $$ int offset1-->Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_7 $$ for (int offset = 0; offset < text.length(); offset++) -->Line_23 $$ ASTNode leaf = element.findLeafElementAt(offset)[ FD ]
Line_6 $$ String text = element.getText()-->Line_27 $$ if (offset1 < text.length()) [ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_5 $$ final CharTable charTableByTree = SharedImplUtil.findCharTableByTree(element)[ FD ]
Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_7 $$ for (int offset = 0; offset < text.length(); offset++) [ FD ]
Line_71 $$ if (parent != null) -->Line_72 $$ parent.removeChild(leaf)[ CD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_42 $$ if (next.getElementType() == TokenType.WHITE_SPACE) -->Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ CD ]
Line_61 $$ if (!newLeafText.isEmpty()) -->Line_70 $$ ASTNode parent = leaf.getTreeParent()[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_67 $$ element = newLeaf[ FD ]
Line_63 $$ if (leaf.getTreeParent() != null) -->Line_64 $$ leaf.getTreeParent().replaceChild(leaf, newLeaf)[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_41 $$ ASTNode next = element.findLeafElementAt(offset + 1)[ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_7 $$ for (int offset = 0; offset < text.length(); offset++) [ CD ]
Line_67 $$ element = newLeaf-->Line_39 $$ int leafOffset = getStartOffset(element, leaf)[ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_44 $$ leafOffset = getStartOffset(element, leaf)[ FD ]
Line_6 $$ String text = element.getText()-->Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) [ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_28 $$ ASTNode next = element.findLeafElementAt(offset1)[ FD ]
Line_67 $$ element = newLeaf-->Line_28 $$ ASTNode next = element.findLeafElementAt(offset1)[ FD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_27 $$ if (offset1 < text.length()) [ FD ]
Line_67 $$ element = newLeaf-->Line_23 $$ ASTNode leaf = element.findLeafElementAt(offset)[ FD ]
Line_6 $$ String text = element.getText()-->Line_12 $$ c = text.charAt(offset1)[ FD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_12 $$ c = text.charAt(offset1)[ CD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_28 $$ ASTNode next = element.findLeafElementAt(offset1)[ FD ]
Line_46 $$ if (!newSpace.isEmpty()) -->Line_48 $$ next.getTreeParent().addChild(newLeaf, next)[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_6 $$ String text = element.getText()[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_5 $$ final CharTable charTableByTree = SharedImplUtil.findCharTableByTree(element)[ CD ]
Line_10 $$ int offset1-->Line_27 $$ if (offset1 < text.length()) [ FD ]
Line_46 $$ if (!newSpace.isEmpty()) -->Line_47 $$ LeafElement newLeaf = ASTFactory.whitespace(newSpace)[ CD ]
Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_27 $$ if (offset1 < text.length()) [ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ CD ]
Line_67 $$ element = newLeaf-->Line_44 $$ leafOffset = getStartOffset(element, leaf)[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_56 $$ if (!LOG.assertTrue(0 <= startOffset && startOffset <= endOffset && endOffset <= leaf.getTextLength())) [ CD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_24 $$ if (!mayShiftIndentInside(leaf)) -->Line_25 $$ LOG.error("Error", leaf.getElementType().toString(), "Type: " + leaf.getElementType() + " text: " + leaf.getText())[ CD ]
Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_8 $$ char c = text.charAt(offset)[ FD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_78 $$ return element[ CD ]
Line_8 $$ char c = text.charAt(offset)-->Line_12 $$ c = text.charAt(offset1)[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_22 $$ String newSpace = IndentHelperImpl.fillIndent(myProject, myFileType, newIndent)[ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_40 $$ if (leaf.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA && leafOffset + leaf.getTextLength() == offset + 1) [ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_61 $$ if (!newLeafText.isEmpty()) [ CD ]
Line_10 $$ int offset1-->Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) [ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_59 $$ String leafText = leaf.getText()[ CD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_12 $$ c = text.charAt(offset1)[ FD ]
Line_42 $$ if (next.getElementType() == TokenType.WHITE_SPACE) -->Line_44 $$ leafOffset = getStartOffset(element, leaf)[ CD ]
Line_10 $$ int offset1-->Line_28 $$ ASTNode next = element.findLeafElementAt(offset1)[ FD ]
Line_40 $$ if (leaf.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA && leafOffset + leaf.getTextLength() == offset + 1) -->Line_42 $$ if (next.getElementType() == TokenType.WHITE_SPACE) [ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_18 $$ String space = text.substring(offset + 1, offset1)[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_3 $$ if (indentShift == 0)[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_6 $$ String text = element.getText()[ FD ]
Line_7 $$ for (int offset = 0; offset < text.length(); offset++) -->Line_9 $$ if (c == '\n' || c == '\r') [ CD ]
Line_61 $$ if (!newLeafText.isEmpty()) -->Line_71 $$ if (parent != null) [ CD ]
Line_6 $$ String text = element.getText()-->Line_8 $$ char c = text.charAt(offset)[ FD ]
Line_29 $$ if ((next.getElementType() == JavaTokenType.END_OF_LINE_COMMENT || next.getElementType() == JavaTokenType.C_STYLE_COMMENT || next.getElementType() == JspTokenType.JSP_COMMENT) && next != element) -->Line_30 $$ if (mySettings.KEEP_FIRST_COLUMN_COMMENT) [ CD ]
Line_7 $$ for (int offset = 0; offset < text.length(); offset++) -->Line_8 $$ char c = text.charAt(offset)[ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_21 $$ newIndent = Math.max(newIndent, 0)[ CD ]
Line_61 $$ if (!newLeafText.isEmpty()) -->Line_62 $$ LeafElement newLeaf = Factory.createSingleLeafElement(leaf.getElementType(), newLeafText, charTableByTree, SharedImplUtil.getManagerByTree(leaf))[ CD ]
Line_67 $$ element = newLeaf-->Line_41 $$ ASTNode next = element.findLeafElementAt(offset + 1)[ FD ]
Line_61 $$ if (!newLeafText.isEmpty()) -->Line_66 $$ if (leaf == element) [ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_23 $$ ASTNode leaf = element.findLeafElementAt(offset)[ FD ]
Line_67 $$ element = newLeaf-->Line_66 $$ if (leaf == element) [ FD ]
Line_27 $$ if (offset1 < text.length()) -->Line_28 $$ ASTNode next = element.findLeafElementAt(offset1)[ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_24 $$ if (!mayShiftIndentInside(leaf)) [ CD ]
Line_40 $$ if (leaf.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA && leafOffset + leaf.getTextLength() == offset + 1) -->Line_41 $$ ASTNode next = element.findLeafElementAt(offset + 1)[ CD ]
Line_2 $$ public ASTNode shiftIndentInside(ASTNode element, int indentShift) -->Line_3 $$ if (indentShift == 0)[ FD ]
Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_8 $$ char c = text.charAt(offset)[ FD ]
Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_18 $$ String space = text.substring(offset + 1, offset1)[ FD ]
Line_30 $$ if (mySettings.KEEP_FIRST_COLUMN_COMMENT) -->Line_32 $$ if (commentIndent == 0)[ CD ]
Line_11 $$ for (offset1 = offset + 1; offset1 < text.length(); offset1++) -->Line_18 $$ String space = text.substring(offset + 1, offset1)[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_19 $$ int indent = IndentHelperImpl.getIndent(myProject, myFileType, space, true)[ CD ]
Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_7 $$ for (int offset = 0; offset < text.length(); offset++) [ FD ]
Line_3 $$ if (indentShift == 0)-->Line_4 $$ return element[ CD ]
Line_6 $$ String text = element.getText()-->Line_7 $$ for (int offset = 0; offset < text.length(); offset++) [ FD ]
Line_27 $$ if (offset1 < text.length()) -->Line_29 $$ if ((next.getElementType() == JavaTokenType.END_OF_LINE_COMMENT || next.getElementType() == JavaTokenType.C_STYLE_COMMENT || next.getElementType() == JspTokenType.JSP_COMMENT) && next != element) [ CD ]
Line_6 $$ String text = element.getText()-->Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_66 $$ if (leaf == element) -->Line_67 $$ element = newLeaf[ CD ]
Line_6 $$ String text = element.getText()-->Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_75 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)[ FD ]
Line_7 $$ for (int offset = 0; offset < text.length(); offset++) -->Line_8 $$ char c = text.charAt(offset)[ FD ]
Line_29 $$ if ((next.getElementType() == JavaTokenType.END_OF_LINE_COMMENT || next.getElementType() == JavaTokenType.C_STYLE_COMMENT || next.getElementType() == JspTokenType.JSP_COMMENT) && next != element) -->Line_35 $$ if (next.getElementType() == XmlTokenType.XML_DATA_CHARACTERS) [ CD ]
Line_61 $$ if (!newLeafText.isEmpty()) -->Line_63 $$ if (leaf.getTreeParent() != null) [ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_23 $$ ASTNode leaf = element.findLeafElementAt(offset)[ CD ]
Line_50 $$ text = text.substring(0, offset + 1) + newSpace + text.substring(offset1)-->Line_18 $$ String space = text.substring(offset + 1, offset1)[ FD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_39 $$ int leafOffset = getStartOffset(element, leaf)[ CD ]
Line_30 $$ if (mySettings.KEEP_FIRST_COLUMN_COMMENT) -->Line_31 $$ int commentIndent = myIndentIndentHelper.getIndent(myProject, myFileType, next, true)[ CD ]
Line_9 $$ if (c == '\n' || c == '\r') -->Line_27 $$ if (offset1 < text.length()) [ CD ]
