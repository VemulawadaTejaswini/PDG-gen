Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_60 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ FD ]
Line_11 $$ if (moduleVersion == null) -->Line_13 $$ if (binaryPath.isFile()) [ CD ]
Line_12 $$ level = LibraryLevel.MODULE-->Line_69 $$ if (level == LibraryLevel.PROJECT) [ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_72 $$ return new LibraryDependencyData(ownerModule.getData(), library, level)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_58 $$ File sourcePath = dependency.getSource()[ FD ]
Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)-->Line_27 $$ if (i > 0) [ FD ]
Line_7 $$ String libraryName-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_58 $$ File sourcePath = dependency.getSource()-->Line_60 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_65 $$ File javadocPath = dependency.getJavadoc()[ FD ]
Line_41 $$ if (matcher.matches()) -->Line_43 $$ libraryName += (":" + classifier)[ CD ]
Line_36 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_45 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ FD ]
Line_21 $$ if (i >= 0) -->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ CD ]
Line_11 $$ if (moduleVersion == null) -->Line_33 $$ level = LibraryLevel.PROJECT[ CD ]
Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) -->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ CD ]
Line_35 $$ if (binaryPath.isFile()) -->Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_3 $$ File binaryPath = dependency.getFile()[ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_41 $$ if (matcher.matches()) -->Line_42 $$ final String classifier = matcher.group(1)[ CD ]
Line_11 $$ if (moduleVersion == null) -->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ CD ]
Line_24 $$ if (i >= 0 && i < libraryName.length()) -->Line_27 $$ if (i > 0) [ CD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()[ CD ]
Line_11 $$ if (moduleVersion == null) -->Line_18 $$ if (unresolved) [ CD ]
Line_27 $$ if (i > 0) -->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ CD ]
Line_25 $$ int dependencyNameIndex = i-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ CD ]
Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_40 $$ Matcher matcher = pattern.matcher(libraryFileName)[ CD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_56 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_24 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_55 $$ if (!unresolved) [ CD ]
Line_36 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_40 $$ Matcher matcher = pattern.matcher(libraryFileName)[ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_58 $$ File sourcePath = dependency.getSource()[ CD ]
Line_13 $$ if (binaryPath.isFile()) -->Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ CD ]
Line_16 $$ libraryName = ""-->Line_24 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_39 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")[ FD ]
Line_41 $$ if (matcher.matches()) -->Line_45 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ CD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_20 $$ int i = libraryName.indexOf(' ')-->Line_27 $$ if (i > 0) [ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_36 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_20 $$ int i = libraryName.indexOf(' ')-->Line_21 $$ if (i >= 0) [ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_11 $$ if (moduleVersion == null) [ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())[ FD ]
Line_16 $$ libraryName = ""-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_66 $$ if (!unresolved && javadocPath != null) [ CD ]
Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_9 $$ final LibraryLevel level-->Line_33 $$ level = LibraryLevel.PROJECT[ FD ]
Line_18 $$ if (unresolved) -->Line_21 $$ if (i >= 0) [ CD ]
Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)-->Line_55 $$ if (!unresolved) [ FD ]
Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_63 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ FD ]
Line_7 $$ String libraryName-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_43 $$ libraryName += (":" + classifier)-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_9 $$ final LibraryLevel level-->Line_69 $$ if (level == LibraryLevel.PROJECT) [ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_16 $$ libraryName = ""[ FD ]
Line_24 $$ if (i >= 0 && i < libraryName.length()) -->Line_25 $$ int dependencyNameIndex = i[ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_62 $$ if (!unresolved && sourcePath == null) [ CD ]
Line_24 $$ if (i >= 0 && i < libraryName.length()) -->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ CD ]
Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_35 $$ if (binaryPath.isFile()) -->Line_37 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())[ CD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)[ FD ]
Line_7 $$ String libraryName-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_63 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ FD ]
Line_20 $$ int i = libraryName.indexOf(' ')-->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_16 $$ libraryName = ""-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_13 $$ if (binaryPath.isFile()) [ FD ]
Line_7 $$ String libraryName-->Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())[ FD ]
Line_11 $$ if (moduleVersion == null) -->Line_35 $$ if (binaryPath.isFile()) [ CD ]
Line_43 $$ libraryName += (":" + classifier)-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_62 $$ if (!unresolved && sourcePath == null) -->Line_63 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ CD ]
Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_41 $$ if (matcher.matches()) [ CD ]
Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_56 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_70 $$ linkProjectLibrary(ideProject, library)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_72 $$ return new LibraryDependencyData(ownerModule.getData(), library, level)[ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_7 $$ String libraryName[ CD ]
Line_18 $$ if (unresolved) -->Line_20 $$ int i = libraryName.indexOf(' ')[ CD ]
Line_35 $$ if (binaryPath.isFile()) -->Line_36 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)[ CD ]
Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)-->Line_66 $$ if (!unresolved && javadocPath != null) [ FD ]
Line_66 $$ if (!unresolved && javadocPath != null) -->Line_67 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ CD ]
Line_25 $$ int dependencyNameIndex = i-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)[ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_9 $$ final LibraryLevel level[ CD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_24 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_7 $$ String libraryName-->Line_20 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)[ CD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_63 $$ attachGradleSdkSources(gradleModule, binaryPath, library, resolverCtx)[ FD ]
Line_7 $$ String libraryName-->Line_24 $$ if (i >= 0 && i < libraryName.length()) [ FD ]
Line_59 $$ if (!unresolved && sourcePath != null) -->Line_60 $$ library.addPath(LibraryPathType.SOURCE, sourcePath.getAbsolutePath())[ CD ]
Line_12 $$ level = LibraryLevel.MODULE-->Line_33 $$ level = LibraryLevel.PROJECT[ FD ]
Line_16 $$ libraryName = ""-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_37 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_67 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ FD ]
Line_18 $$ if (unresolved) -->Line_24 $$ if (i >= 0 && i < libraryName.length()) [ CD ]
Line_7 $$ String libraryName-->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_16 $$ libraryName = ""-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())[ FD ]
Line_41 $$ if (matcher.matches()) -->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ CD ]
Line_65 $$ File javadocPath = dependency.getJavadoc()-->Line_67 $$ library.addPath(LibraryPathType.DOC, javadocPath.getAbsolutePath())[ FD ]
Line_16 $$ libraryName = ""-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_5 $$ throw new IllegalStateException(String.format("Can't parse external library dependency '%s'. Reason: it doesn't specify path to the binaries", dependency))[ FD ]
Line_69 $$ if (level == LibraryLevel.PROJECT) -->Line_70 $$ linkProjectLibrary(ideProject, library)[ CD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_7 $$ String libraryName-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_7 $$ String libraryName-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_16 $$ libraryName = ""-->Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")[ FD ]
Line_54 $$ final LibraryData library = new LibraryData(GradleConstants.SYSTEM_ID, libraryName, unresolved)-->Line_70 $$ linkProjectLibrary(ideProject, library)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_59 $$ if (!unresolved && sourcePath != null) [ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()[ FD ]
Line_16 $$ libraryName = ""-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_3 $$ File binaryPath = dependency.getFile()[ CD ]
Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_16 $$ libraryName = ""-->Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())[ FD ]
Line_8 $$ final GradleModuleVersion moduleVersion = dependency.getGradleModuleVersion()-->Line_45 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_16 $$ libraryName = ""-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_20 $$ int i = libraryName.indexOf(' ')-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_18 $$ if (unresolved) -->Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())[ CD ]
Line_7 $$ String libraryName-->Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())[ FD ]
Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_4 $$ if (binaryPath == null) [ FD ]
Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_7 $$ String libraryName-->Line_16 $$ libraryName = ""[ FD ]
Line_16 $$ libraryName = ""-->Line_20 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_13 $$ if (binaryPath.isFile()) -->Line_16 $$ libraryName = ""[ CD ]
Line_39 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")-->Line_40 $$ Matcher matcher = pattern.matcher(libraryFileName)[ FD ]
Line_40 $$ Matcher matcher = pattern.matcher(libraryFileName)-->Line_42 $$ final String classifier = matcher.group(1)[ FD ]
Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_28 $$ libraryName = String.format("%s-%s", libraryName.substring(dependencyNameIndex, i), libraryName.substring(i + 1))[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_69 $$ if (level == LibraryLevel.PROJECT) [ CD ]
Line_37 $$ final String mavenLibraryFileName = String.format("%s-%s", moduleVersion.getName(), moduleVersion.getVersion())-->Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ FD ]
Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) -->Line_39 $$ Pattern pattern = Pattern.compile(moduleVersion.getName() + "-" + moduleVersion.getVersion() + "-(.*)")[ CD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_11 $$ if (moduleVersion == null) [ CD ]
Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)-->Line_62 $$ if (!unresolved && sourcePath == null) [ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_20 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_9 $$ final LibraryLevel level-->Line_12 $$ level = LibraryLevel.MODULE[ FD ]
Line_36 $$ String libraryFileName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_38 $$ if (!mavenLibraryFileName.equals(libraryFileName)) [ FD ]
Line_14 $$ libraryName = FileUtil.getNameWithoutExtension(binaryPath)-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_43 $$ libraryName += (":" + classifier)[ FD ]
Line_3 $$ File binaryPath = dependency.getFile()-->Line_35 $$ if (binaryPath.isFile()) [ FD ]
Line_34 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), moduleVersion.getName(), moduleVersion.getVersion())-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_22 $$ i = CharArrayUtil.shiftForward(libraryName, i + 1, " ")-->Line_27 $$ if (i > 0) [ FD ]
Line_45 $$ final String artifactId = StringUtil.trimEnd(StringUtil.trimEnd(libraryFileName, moduleVersion.getVersion()), "-")-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_20 $$ int i = libraryName.indexOf(' ')[ FD ]
Line_20 $$ int i = libraryName.indexOf(' ')-->Line_26 $$ i = libraryName.indexOf(' ', dependencyNameIndex)[ FD ]
Line_33 $$ level = LibraryLevel.PROJECT-->Line_69 $$ if (level == LibraryLevel.PROJECT) [ FD ]
Line_11 $$ if (moduleVersion == null) -->Line_12 $$ level = LibraryLevel.MODULE[ CD ]
Line_19 $$ libraryName = binaryPath.getPath().substring(UNRESOLVED_DEPENDENCY_PREFIX.length())-->Line_51 $$ if (StringUtil.isNotEmpty(libraryName) && !FileUtilRt.extensionEquals(binaryPath.getPath(), "jar")) [ FD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_65 $$ File javadocPath = dependency.getJavadoc()[ CD ]
Line_2 $$ private LibraryDependencyData buildDependency(@NotNull IdeaModule gradleModule, @NotNull DataNode<ModuleData> ownerModule, @NotNull IdeaSingleEntryLibraryDependency dependency, @NotNull DataNode<ProjectData> ideProject) throws IllegalStateException -->Line_4 $$ if (binaryPath == null) [ CD ]
Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_10 $$ boolean unresolved = binaryPath.getPath().startsWith(UNRESOLVED_DEPENDENCY_PREFIX)-->Line_59 $$ if (!unresolved && sourcePath != null) [ FD ]
Line_40 $$ Matcher matcher = pattern.matcher(libraryFileName)-->Line_41 $$ if (matcher.matches()) [ FD ]
Line_7 $$ String libraryName-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_7 $$ String libraryName-->Line_52 $$ libraryName += (":" + FileUtilRt.getExtension(binaryPath.getPath()))[ FD ]
Line_43 $$ libraryName += (":" + classifier)-->Line_46 $$ libraryName = String.format("%s:%s:%s", moduleVersion.getGroup(), artifactId, moduleVersion.getVersion())[ FD ]
Line_55 $$ if (!unresolved) -->Line_56 $$ library.addPath(LibraryPathType.BINARY, binaryPath.getAbsolutePath())[ CD ]
