Line_114 $$ pw = new PrintWriter(baos)-->Line_160 $$ pw.println("\t                                N/A")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_152 $$ pw.print("\t    Application-Type")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_170 $$ pw = new PrintWriter(baos)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_144 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_126 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_84 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_240 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_241 $$ appState6.add(YarnApplicationState.FINISHED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_160 $$ pw.println("\t                                N/A")[ FD ]
Line_75 $$ Set<String> appType2 = new HashSet<String>()-->Line_82 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_63 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_85 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_168 $$ assertEquals(-1, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_99 $$ pw.close()[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_115 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_167 $$ result = cli.run(new String[] [ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_82 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_172 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_97 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_145 $$ result = cli.run(new String[] [ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_171 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_111 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_61 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_170 $$ pw = new PrintWriter(baos)[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_133 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_167 $$ result = cli.run(new String[] -->Line_168 $$ assertEquals(-1, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_75 $$ Set<String> appType2 = new HashSet<String>()-->Line_85 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_121 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_148 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_60 $$ pw.println("\t                                N/A")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_88 $$ pw.println("Total number of applications (application-types: " + appType2 + " and states: " + appState2 + ")" + ":" + 1)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_56 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_232 $$ appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_168 $$ assertEquals(-1, result)[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_169 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_113 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_116 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_154 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_127 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_181 $$ appsReportStr = baos.toString("UTF-8")-->Line_182 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_127 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_161 $$ pw.close()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_167 $$ result = cli.run(new String[] [ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_99 $$ pw.close()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_260 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_158 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_36 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_156 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_11 $$ applicationReports.add(newApplicationReport2)[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_43 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_121 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_91 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_30 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_34 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_193 $$ baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_133 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_151 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_145 $$ result = cli.run(new String[] [ FD ]
Line_15 $$ ApplicationId applicationId4 = ApplicationId.newInstance(1234, 8)-->Line_16 $$ ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), "user4", "queue4", "appname4", "host4", 127, null, YarnApplicationState.FAILED, "diagnostics4", "url4", 4, 4, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.83789f, "NON-MAPREDUCE", null)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_193 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_98 $$ pw.println("\t                                N/A")[ FD ]
Line_30 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_32 $$ appState1.add(YarnApplicationState.ACCEPTED)[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_145 $$ result = cli.run(new String[] [ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_232 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_129 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_116 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_182 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_173 $$ StringBuilder sb = new StringBuilder()-->Line_174 $$ sb.append("ALL,")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_182 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_82 $$ when(client.getApplications(appType2, appState2)).thenReturn(getApplicationReports(applicationReports, appType2, appState2, false))[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_30 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_31 $$ appState1.add(YarnApplicationState.RUNNING)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_90 $$ pw.print("\t    Application-Type")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_180 $$ pw.close()[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_170 $$ pw = new PrintWriter(baos)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_151 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_81 $$ appState2.add(YarnApplicationState.SUBMITTED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_42 $$ pw.print("\t    Application-Type")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_96 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_155 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_169 $$ baos = new ByteArrayOutputStream()-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_122 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_88 $$ pw.println("Total number of applications (application-types: " + appType2 + " and states: " + appState2 + ")" + ":" + 1)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_66 $$ pw.close()[ FD ]
Line_186 $$ Set<String> appType5 = new HashSet<String>()-->Line_192 $$ verify(client).getApplications(appType5, appState5)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_243 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_237 $$ Set<String> appType6 = new HashSet<String>()-->Line_239 $$ appType6.add("NON-YARN")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_123 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_151 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_167 $$ result = cli.run(new String[] [ FD ]
Line_173 $$ StringBuilder sb = new StringBuilder()-->Line_176 $$ sb.append(state + ",")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_12 $$ ApplicationId applicationId3 = ApplicationId.newInstance(1234, 7)-->Line_13 $$ ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), "user3", "queue3", "appname3", "host3", 126, null, YarnApplicationState.RUNNING, "diagnostics3", "url3", 3, 3, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.73789f, "MAPREDUCE", null)[ FD ]
Line_193 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_35 $$ int result = cli.run(new String[] [ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_237 $$ Set<String> appType6 = new HashSet<String>()-->Line_238 $$ appType6.add("YARN")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_44 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_118 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_237 $$ Set<String> appType6 = new HashSet<String>()-->Line_245 $$ verify(client).getApplications(appType6, appState6)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_150 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_106 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_109 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.close()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_172 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_119 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_163 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_149 $$ pw = new PrintWriter(baos)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_167 $$ result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_23 $$ applicationReports.add(newApplicationReport6)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_117 $$ pw.print("\t    Application-Type")[ FD ]
Line_169 $$ baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_55 $$ pw.println("\t                                N/A")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_178 $$ String output = sb.toString()-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_124 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_119 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_163 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_150 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_106 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_112 $$ verify(client).getApplications(appType3, appState3)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_116 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_101 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_40 $$ pw.println("Total number of applications (application-types: " + appType1 + " and states: " + appState1 + ")" + ":" + 4)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_146 $$ assertEquals(0, result)[ FD ]
Line_181 $$ appsReportStr = baos.toString("UTF-8")-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_148 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_146 $$ assertEquals(0, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_130 $$ pw.println("\t                                N/A")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_105 $$ Set<String> appType3 = new HashSet<String>()-->Line_112 $$ verify(client).getApplications(appType3, appState3)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_122 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_159 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_118 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_128 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_160 $$ pw.println("\t                                N/A")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_242 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_124 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_152 $$ pw.print("\t    Application-Type")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_169 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_92 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_132 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_172 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_190 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_47 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_190 $$ result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_117 $$ pw.print("\t    Application-Type")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_189 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_114 $$ pw = new PrintWriter(baos)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_57 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_155 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_138 $$ Set<String> appType4 = new HashSet<String>()-->Line_140 $$ appType4.add("NON-YARN")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_92 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_120 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_129 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_49 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_152 $$ pw.print("\t    Application-Type")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_84 $$ assertEquals(0, result)[ FD ]
Line_5 $$ ApplicationId applicationId = ApplicationId.newInstance(1234, 5)-->Line_6 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_95 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_150 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_169 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_79 $$ appState2.add(YarnApplicationState.RUNNING)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_154 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_80 $$ appState2.add(YarnApplicationState.ACCEPTED)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_169 $$ baos = new ByteArrayOutputStream()-->Line_193 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_87 $$ pw = new PrintWriter(baos)[ FD ]
Line_6 $$ ApplicationReport newApplicationReport = ApplicationReport.newInstance(applicationId, ApplicationAttemptId.newInstance(applicationId, 1), "user", "queue", "appname", "host", 124, null, YarnApplicationState.RUNNING, "diagnostics", "url", 0, 0, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.53789f, "YARN", null)-->Line_8 $$ applicationReports.add(newApplicationReport)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_181 $$ appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_117 $$ pw.print("\t    Application-Type")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_194 $$ pw = new PrintWriter(baos)[ FD ]
Line_187 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_188 $$ appState5.add(YarnApplicationState.FINISHED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_250 $$ pw.print("\t    Application-Type")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_86 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_110 $$ result = cli.run(new String[] [ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_168 $$ assertEquals(-1, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_22 $$ ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), "user6", "queue6", "appname6", "host6", 129, null, YarnApplicationState.SUBMITTED, "diagnostics6", "url6", 6, 6, FinalApplicationStatus.KILLED, null, "N/A", 0.99789f, "PIG", null)-->Line_23 $$ applicationReports.add(newApplicationReport6)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_169 $$ baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_160 $$ pw.println("\t                                N/A")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_97 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_64 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_157 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_94 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_155 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_105 $$ Set<String> appType3 = new HashSet<String>()-->Line_109 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_30 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_37 $$ verify(client).getApplications(appType1, appState1)[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_111 $$ assertEquals(0, result)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_100 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_106 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_108 $$ appState3.add(YarnApplicationState.FAILED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_109 $$ when(client.getApplications(appType3, appState3)).thenReturn(getApplicationReports(applicationReports, appType3, appState3, false))[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_75 $$ Set<String> appType2 = new HashSet<String>()-->Line_76 $$ appType2.add("YARN")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_216 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_167 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_100 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_154 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_45 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_4 $$ ApplicationCLI cli = createAndGetAppCLI()-->Line_83 $$ result = cli.run(new String[] [ FD ]
Line_237 $$ Set<String> appType6 = new HashSet<String>()-->Line_242 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_154 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_153 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_167 $$ result = cli.run(new String[] -->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_138 $$ Set<String> appType4 = new HashSet<String>()-->Line_139 $$ appType4.add("YARN")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_145 $$ result = cli.run(new String[] [ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_122 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_146 $$ assertEquals(0, result)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_171 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_152 $$ pw.print("\t    Application-Type")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.close()[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_167 $$ result = cli.run(new String[] [ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_141 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_144 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_46 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_78 $$ EnumSet<YarnApplicationState> appState2 = EnumSet.noneOf(YarnApplicationState.class)-->Line_147 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_120 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_51 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_52 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_17 $$ applicationReports.add(newApplicationReport4)[ FD ]
Line_141 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_142 $$ appState4.add(YarnApplicationState.FINISHED)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_161 $$ pw.close()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_133 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_9 $$ ApplicationId applicationId2 = ApplicationId.newInstance(1234, 6)-->Line_10 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), "user2", "queue2", "appname2", "host2", 125, null, YarnApplicationState.FINISHED, "diagnostics2", "url2", 2, 2, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.63789f, "NON-YARN", null)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_125 $$ pw.println("\t                                N/A")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_114 $$ pw = new PrintWriter(baos)[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_182 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_145 $$ result = cli.run(new String[] -->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_67 $$ String appsReportStr = baos.toString("UTF-8")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_8 $$ applicationReports.add(newApplicationReport)[ FD ]
Line_16 $$ ApplicationReport newApplicationReport4 = ApplicationReport.newInstance(applicationId4, ApplicationAttemptId.newInstance(applicationId4, 4), "user4", "queue4", "appname4", "host4", 127, null, YarnApplicationState.FAILED, "diagnostics4", "url4", 4, 4, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.83789f, "NON-MAPREDUCE", null)-->Line_17 $$ applicationReports.add(newApplicationReport4)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_126 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_130 $$ pw.println("\t                                N/A")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_90 $$ pw.print("\t    Application-Type")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_181 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_53 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_187 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_192 $$ verify(client).getApplications(appType5, appState5)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.close()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_141 $$ EnumSet<YarnApplicationState> appState4 = EnumSet.noneOf(YarnApplicationState.class)-->Line_143 $$ appState4.add(YarnApplicationState.FAILED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_125 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_162 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_153 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_30 $$ EnumSet<YarnApplicationState> appState1 = EnumSet.noneOf(YarnApplicationState.class)-->Line_33 $$ appState1.add(YarnApplicationState.SUBMITTED)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_89 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_130 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_110 $$ result = cli.run(new String[] [ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_93 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_123 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_167 $$ result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_169 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_121 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_94 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_193 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_157 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_34 $$ when(client.getApplications(appType1, appState1)).thenReturn(getApplicationReports(applicationReports, appType1, appState1, false))[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_179 $$ pw.println(output.substring(0, output.length() - 1))[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_249 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_41 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_232 $$ appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_125 $$ pw.println("\t                                N/A")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_171 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_182 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw = new PrintWriter(baos)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_158 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_213 $$ pw.print("queue3\t           RUNNING\t         ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_227 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_240 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_245 $$ verify(client).getApplications(appType6, appState6)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_115 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_151 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_96 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_14 $$ applicationReports.add(newApplicationReport3)[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_163 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_214 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_115 $$ pw.println("Total number of applications (application-types: " + appType3 + " and states: " + appState3 + ")" + ":" + 2)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_126 $$ pw.print("         application_1234_0008\t            ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_229 $$ pw.print("KILLED\t         99.79%")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_98 $$ pw.println("\t                                N/A")[ FD ]
Line_190 $$ result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_106 $$ EnumSet<YarnApplicationState> appState3 = EnumSet.noneOf(YarnApplicationState.class)-->Line_107 $$ appState3.add(YarnApplicationState.FINISHED)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw = new PrintWriter(baos)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_173 $$ StringBuilder sb = new StringBuilder()-->Line_178 $$ String output = sb.toString()[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_101 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_168 $$ assertEquals(-1, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_120 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_50 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_203 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_48 $$ pw.print("queue\t           RUNNING\t         ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_150 $$ pw.println("Total number of applications (application-types: " + appType4 + " and states: " + appState4 + ")" + ":" + 1)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_159 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_18 $$ ApplicationId applicationId5 = ApplicationId.newInstance(1234, 9)-->Line_19 $$ ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), "user5", "queue5", "appname5", "host5", 128, null, YarnApplicationState.ACCEPTED, "diagnostics5", "url5", 5, 5, FinalApplicationStatus.KILLED, null, "N/A", 0.93789f, "HIVE", null)[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_244 $$ assertEquals(0, result)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_202 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_149 $$ pw = new PrintWriter(baos)[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_256 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_225 $$ pw.println("\t                                N/A")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_167 $$ result = cli.run(new String[] [ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_159 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_131 $$ pw.close()[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_111 $$ assertEquals(0, result)[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_153 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_252 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_198 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_13 $$ ApplicationReport newApplicationReport3 = ApplicationReport.newInstance(applicationId3, ApplicationAttemptId.newInstance(applicationId3, 3), "user3", "queue3", "appname3", "host3", 126, null, YarnApplicationState.RUNNING, "diagnostics3", "url3", 3, 3, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.73789f, "MAPREDUCE", null)-->Line_14 $$ applicationReports.add(newApplicationReport3)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_95 $$ pw.print("appname\t                YARN\t      user\t     ")[ FD ]
Line_75 $$ Set<String> appType2 = new HashSet<String>()-->Line_147 $$ verify(client).getApplications(appType2, appState2)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_197 $$ pw.print("\t    Application-Type")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_124 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_171 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_118 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_132 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_93 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_246 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_127 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_171 $$ pw.println("The application state  INVALID is invalid.")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_199 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_129 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_181 $$ appsReportStr = baos.toString("UTF-8")-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_132 $$ appsReportStr = baos.toString("UTF-8")-->Line_233 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_223 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_258 $$ pw.println("\t                                N/A")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_132 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_251 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_162 $$ appsReportStr = baos.toString("UTF-8")-->Line_163 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_219 $$ pw.print("SUCCEEDED\t         83.79%")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_247 $$ pw = new PrintWriter(baos)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_149 $$ pw = new PrintWriter(baos)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_255 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_243 $$ result = cli.run(new String[] [ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_195 $$ pw.println("Total number of applications (application-types: " + appType5 + " and states: " + appState5 + ")" + ":" + 6)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_58 $$ pw.print("queue5\t          ACCEPTED\t            ")[ FD ]
Line_169 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_131 $$ pw.close()[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_153 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_100 $$ appsReportStr = baos.toString("UTF-8")-->Line_261 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_59 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw = new PrintWriter(baos)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_210 $$ pw.println("\t                                N/A")[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_146 $$ assertEquals(0, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_172 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_246 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_159 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_204 $$ pw.print("SUCCEEDED\t         53.79%")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_221 $$ pw.print("         application_1234_0009\t            ")[ FD ]
Line_10 $$ ApplicationReport newApplicationReport2 = ApplicationReport.newInstance(applicationId2, ApplicationAttemptId.newInstance(applicationId2, 2), "user2", "queue2", "appname2", "host2", 125, null, YarnApplicationState.FINISHED, "diagnostics2", "url2", 2, 2, FinalApplicationStatus.SUCCEEDED, null, "N/A", 0.63789f, "NON-YARN", null)-->Line_11 $$ applicationReports.add(newApplicationReport2)[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_68 $$ Assert.assertEquals(appsReportStr, sysOutStream.toString())[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_170 $$ pw = new PrintWriter(baos)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_132 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_54 $$ pw.print("SUCCEEDED\t         73.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_211 $$ pw.print("         application_1234_0007\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_196 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_193 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_123 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_187 $$ EnumSet<YarnApplicationState> appState5 = EnumSet.noneOf(YarnApplicationState.class)-->Line_189 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_128 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_100 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_193 $$ baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_248 $$ pw.println("Total number of applications (application-types: " + appType6 + " and states: " + appState6 + ")" + ":" + 1)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_228 $$ pw.print("queue6\t         SUBMITTED\t            ")[ FD ]
Line_247 $$ pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_209 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_200 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_21 $$ ApplicationId applicationId6 = ApplicationId.newInstance(1234, 10)-->Line_22 $$ ApplicationReport newApplicationReport6 = ApplicationReport.newInstance(applicationId6, ApplicationAttemptId.newInstance(applicationId6, 6), "user6", "queue6", "appname6", "host6", 129, null, YarnApplicationState.SUBMITTED, "diagnostics6", "url6", 6, 6, FinalApplicationStatus.KILLED, null, "N/A", 0.99789f, "PIG", null)[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_65 $$ pw.println("\t                                N/A")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_194 $$ pw = new PrintWriter(baos)[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_212 $$ pw.print("appname3\t           MAPREDUCE\t     user3\t    ")[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_230 $$ pw.println("\t                                N/A")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_218 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_259 $$ pw.close()[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_180 $$ pw.close()[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_231 $$ pw.close()[ FD ]
Line_67 $$ String appsReportStr = baos.toString("UTF-8")-->Line_181 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_128 $$ pw.print("queue4\t            FAILED\t         ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_193 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_224 $$ pw.print("KILLED\t         93.79%")[ FD ]
Line_148 $$ baos = new ByteArrayOutputStream()-->Line_260 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_253 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_257 $$ pw.print("SUCCEEDED\t         63.79%")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_91 $$ pw.print("\t      User\t     Queue\t             State\t       ")[ FD ]
Line_83 $$ result = cli.run(new String[] -->Line_190 $$ result = cli.run(new String[] [ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_207 $$ pw.print("appname2\t            NON-YARN\t     user2\t    ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_161 $$ pw.close()[ FD ]
Line_75 $$ Set<String> appType2 = new HashSet<String>()-->Line_77 $$ appType2.add("NON-YARN")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_110 $$ result = cli.run(new String[] [ FD ]
Line_113 $$ baos = new ByteArrayOutputStream()-->Line_132 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_148 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_119 $$ pw.print("Final-State\t       Progress")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_156 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_35 $$ int result = cli.run(new String[] -->Line_83 $$ result = cli.run(new String[] [ FD ]
Line_186 $$ Set<String> appType5 = new HashSet<String>()-->Line_189 $$ when(client.getApplications(appType5, appState5)).thenReturn(getApplicationReports(applicationReports, appType5, appState5, true))[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_208 $$ pw.print("queue2\t          FINISHED\t         ")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_217 $$ pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_206 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_220 $$ pw.println("\t                                N/A")[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_226 $$ pw.print("         application_1234_0010\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_161 $$ pw.close()[ FD ]
Line_194 $$ pw = new PrintWriter(baos)-->Line_205 $$ pw.println("\t                                N/A")[ FD ]
Line_38 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_113 $$ baos = new ByteArrayOutputStream()[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_254 $$ pw.print("         application_1234_0006\t            ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_89 $$ pw.print("                Application-Id\t    Application-Name")[ FD ]
Line_138 $$ Set<String> appType4 = new HashSet<String>()-->Line_144 $$ when(client.getApplications(appType4, appState4)).thenReturn(getApplicationReports(applicationReports, appType4, appState4, false))[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_222 $$ pw.print("appname5\t                HIVE\t     user5\t    ")[ FD ]
Line_19 $$ ApplicationReport newApplicationReport5 = ApplicationReport.newInstance(applicationId5, ApplicationAttemptId.newInstance(applicationId5, 5), "user5", "queue5", "appname5", "host5", 128, null, YarnApplicationState.ACCEPTED, "diagnostics5", "url5", 5, 5, FinalApplicationStatus.KILLED, null, "N/A", 0.93789f, "HIVE", null)-->Line_20 $$ applicationReports.add(newApplicationReport5)[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_86 $$ baos = new ByteArrayOutputStream()-->Line_232 $$ appsReportStr = baos.toString("UTF-8")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_201 $$ pw.print("         application_1234_0005\t             ")[ FD ]
Line_7 $$ List<ApplicationReport> applicationReports = new ArrayList<ApplicationReport>()-->Line_20 $$ applicationReports.add(newApplicationReport5)[ FD ]
Line_110 $$ result = cli.run(new String[] -->Line_191 $$ assertEquals(0, result)[ FD ]
Line_114 $$ pw = new PrintWriter(baos)-->Line_155 $$ pw.println("\t                       Tracking-URL")[ FD ]
Line_39 $$ PrintWriter pw = new PrintWriter(baos)-->Line_62 $$ pw.print("appname6\t                 PIG\t     user6\t    ")[ FD ]
Line_87 $$ pw = new PrintWriter(baos)-->Line_131 $$ pw.close()[ FD ]
Line_170 $$ pw = new PrintWriter(baos)-->Line_172 $$ pw.print("The valid application state can be one of the following: ")[ FD ]
Line_149 $$ pw = new PrintWriter(baos)-->Line_215 $$ pw.println("\t                                N/A")[ FD ]
Line_240 $$ EnumSet<YarnApplicationState> appState6 = EnumSet.noneOf(YarnApplicationState.class)-->Line_242 $$ when(client.getApplications(appType6, appState6)).thenReturn(getApplicationReports(applicationReports, appType6, appState6, false))[ FD ]
