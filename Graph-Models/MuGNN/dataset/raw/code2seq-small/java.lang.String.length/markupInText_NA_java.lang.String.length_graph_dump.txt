Line_5 $$ int idx-->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ FD ]
Line_5 $$ int idx-->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ FD ]
Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) -->Line_12 $$ beg = lastIdx + 1[ CD ]
Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) -->Line_15 $$ beg = idx + option.length()[ CD ]
Line_15 $$ beg = idx + option.length()-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_5 $$ int idx[ CD ]
Line_12 $$ beg = lastIdx + 1-->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
Line_5 $$ int idx-->Line_15 $$ beg = idx + option.length()[ FD ]
Line_5 $$ int idx-->Line_10 $$ final int lastIdx = textToMarkup.indexOf(">", idx)[ FD ]
Line_3 $$ String result = ""-->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ FD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_8 $$ final String toMark = textToMarkup.substring(idx, idx + option.length())[ CD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_8 $$ final String toMark = textToMarkup.substring(idx, idx + option.length())[ FD ]
Line_4 $$ int beg = 0-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_10 $$ final int lastIdx = textToMarkup.indexOf(">", idx)[ FD ]
Line_12 $$ beg = lastIdx + 1-->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ FD ]
Line_4 $$ int beg = 0-->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ FD ]
Line_3 $$ String result = ""-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_19 $$ return result[ CD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) [ CD ]
Line_12 $$ beg = lastIdx + 1-->Line_15 $$ beg = idx + option.length()[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_4 $$ int beg = 0[ CD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_3 $$ String result = ""[ CD ]
Line_5 $$ int idx-->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ FD ]
Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) -->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ CD ]
Line_14 $$ result += prefix + "<font color='#ffffff' bgColor='#1d5da7'>" + toMark + "</font>"-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_15 $$ beg = idx + option.length()-->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_18 $$ result += textToMarkup.substring(beg)[ CD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ CD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_8 $$ final String toMark = textToMarkup.substring(idx, idx + option.length())[ FD ]
Line_15 $$ beg = idx + option.length()-->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
Line_4 $$ int beg = 0-->Line_12 $$ beg = lastIdx + 1[ FD ]
Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)-->Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)[ FD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_15 $$ beg = idx + option.length()[ FD ]
Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) -->Line_14 $$ result += prefix + "<font color='#ffffff' bgColor='#1d5da7'>" + toMark + "</font>"[ CD ]
Line_3 $$ String result = ""-->Line_14 $$ result += prefix + "<font color='#ffffff' bgColor='#1d5da7'>" + toMark + "</font>"[ FD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)-->Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) [ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) [ FD ]
Line_11 $$ result += prefix + textToMarkup.substring(idx, lastIdx + 1)-->Line_14 $$ result += prefix + "<font color='#ffffff' bgColor='#1d5da7'>" + toMark + "</font>"[ FD ]
Line_4 $$ int beg = 0-->Line_15 $$ beg = idx + option.length()[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_15 $$ beg = idx + option.length()[ FD ]
Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) -->Line_10 $$ final int lastIdx = textToMarkup.indexOf(">", idx)[ FD ]
Line_12 $$ beg = lastIdx + 1-->Line_18 $$ result += textToMarkup.substring(beg)[ FD ]
Line_9 $$ if (insideHtmlTagPattern.matcher(prefix).matches()) -->Line_10 $$ final int lastIdx = textToMarkup.indexOf(">", idx)[ CD ]
Line_10 $$ final int lastIdx = textToMarkup.indexOf(">", idx)-->Line_12 $$ beg = lastIdx + 1[ FD ]
Line_5 $$ int idx-->Line_8 $$ final String toMark = textToMarkup.substring(idx, idx + option.length())[ FD ]
Line_2 $$ private static String markupInText(String textToMarkup, Pattern insideHtmlTagPattern, String option) -->Line_6 $$ while ((idx = StringUtil.indexOfIgnoreCase(textToMarkup, option, beg)) != -1) [ CD ]
Line_4 $$ int beg = 0-->Line_7 $$ final String prefix = textToMarkup.substring(beg, idx)[ FD ]
