Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_3 $$ Check.notEmpty(value, name)[ CD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_4 $$ if (value.length() > maxLen) [ FD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_4 $$ if (value.length() > maxLen) [ CD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_3 $$ Check.notEmpty(value, name)[ FD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_8 $$ throw new IllegalArgumentException(MessageFormat.format("[[ FD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_10 $$ return value[ CD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_7 $$ if (!IDENTIFIER_PATTERN.matcher(value).find()) [ CD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_7 $$ if (!IDENTIFIER_PATTERN.matcher(value).find()) [ FD ]
Line_2 $$ public static String validIdentifier(String value, int maxLen, String name) -->Line_5 $$ throw new IllegalArgumentException(MessageFormat.format("[[ FD ]
