Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_13 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_6 $$ int end = checkForR(value, pos)-->Line_7 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_8 $$ prev = end-->Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_6 $$ int end = checkForR(value, pos)-->Line_8 $$ prev = end[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_3 $$ int prev = 0[ CD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_14 $$ buffer.append(quote)[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_10 $$ buffer.append("+\n")[ FD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_6 $$ int end = checkForR(value, pos)[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_3 $$ int prev = 0-->Line_13 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_10 $$ buffer.append("+\n")[ CD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_9 $$ buffer.append(quote)[ FD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_7 $$ buffer.append(value.substring(prev, end))[ CD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_6 $$ int end = checkForR(value, pos)[ CD ]
Line_3 $$ int prev = 0-->Line_7 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_8 $$ prev = end[ CD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_7 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_5 $$ buffer.append(quote)[ CD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_12 $$ buffer.append(quote)[ FD ]
Line_3 $$ int prev = 0-->Line_8 $$ prev = end[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_12 $$ buffer.append(quote)[ CD ]
Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) -->Line_9 $$ buffer.append(quote)[ CD ]
Line_8 $$ prev = end-->Line_7 $$ buffer.append(value.substring(prev, end))[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_6 $$ int end = checkForR(value, pos)[ FD ]
Line_8 $$ prev = end-->Line_13 $$ buffer.append(value.substring(prev, value.length()))[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ CD ]
Line_3 $$ int prev = 0-->Line_4 $$ for (int pos = value.indexOf("\\n"); pos >= 0; pos = value.indexOf("\\n", prev)) [ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_5 $$ buffer.append(quote)[ FD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_13 $$ buffer.append(value.substring(prev, value.length()))[ CD ]
Line_2 $$ private static void processSimpleString(String quote, String value, StringBuilder buffer) -->Line_14 $$ buffer.append(quote)[ CD ]
