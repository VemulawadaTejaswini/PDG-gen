Line_15 $$ for (String key : properties.stringPropertyNames()) -->Line_17 $$ darculaGlobalSettings.put(key.substring(prefix.length()), parseValue(key, properties.getProperty(key)))[ FD ]
Line_13 $$ HashMap<String, Object> darculaGlobalSettings = new HashMap<String, Object>()-->Line_25 $$ defaults.put(key, darculaGlobalSettings.get(darculaKey))[ FD ]
Line_13 $$ HashMap<String, Object> darculaGlobalSettings = new HashMap<String, Object>()-->Line_24 $$ if (darculaGlobalSettings.containsKey(darculaKey)) [ FD ]
Line_14 $$ final String prefix = getPrefix() + "."-->Line_16 $$ if (key.startsWith(prefix)) [ FD ]
Line_15 $$ for (String key : properties.stringPropertyNames()) -->Line_31 $$ defaults.put(key, parseValue(key, value))[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_30 $$ final String value = properties.getProperty(key)[ FD ]
Line_24 $$ if (darculaGlobalSettings.containsKey(darculaKey)) -->Line_25 $$ defaults.put(key, darculaGlobalSettings.get(darculaKey))[ CD ]
Line_7 $$ InputStream stream = getClass().getResourceAsStream(getPrefix() + ".properties")-->Line_8 $$ properties.load(stream)[ FD ]
Line_16 $$ if (key.startsWith(prefix)) -->Line_17 $$ darculaGlobalSettings.put(key.substring(prefix.length()), parseValue(key, properties.getProperty(key)))[ CD ]
Line_10 $$ stream = getClass().getResourceAsStream(getPrefix() + "_" + osSuffix + ".properties")-->Line_11 $$ properties.load(stream)[ FD ]
Line_22 $$ final String s = (String) key-->Line_23 $$ final String darculaKey = s.substring(s.lastIndexOf('.') + 1)[ FD ]
Line_7 $$ InputStream stream = getClass().getResourceAsStream(getPrefix() + ".properties")-->Line_9 $$ stream.close()[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_15 $$ for (String key : properties.stringPropertyNames()) [ FD ]
Line_15 $$ for (String key : properties.stringPropertyNames()) -->Line_16 $$ if (key.startsWith(prefix)) [ FD ]
Line_30 $$ final String value = properties.getProperty(key)-->Line_31 $$ defaults.put(key, parseValue(key, value))[ FD ]
Line_7 $$ InputStream stream = getClass().getResourceAsStream(getPrefix() + ".properties")-->Line_10 $$ stream = getClass().getResourceAsStream(getPrefix() + "_" + osSuffix + ".properties")[ FD ]
Line_13 $$ HashMap<String, Object> darculaGlobalSettings = new HashMap<String, Object>()-->Line_17 $$ darculaGlobalSettings.put(key.substring(prefix.length()), parseValue(key, properties.getProperty(key)))[ FD ]
Line_15 $$ for (String key : properties.stringPropertyNames()) -->Line_25 $$ defaults.put(key, darculaGlobalSettings.get(darculaKey))[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_17 $$ darculaGlobalSettings.put(key.substring(prefix.length()), parseValue(key, properties.getProperty(key)))[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_29 $$ for (String key : properties.stringPropertyNames()) [ FD ]
Line_23 $$ final String darculaKey = s.substring(s.lastIndexOf('.') + 1)-->Line_25 $$ defaults.put(key, darculaGlobalSettings.get(darculaKey))[ FD ]
Line_7 $$ InputStream stream = getClass().getResourceAsStream(getPrefix() + ".properties")-->Line_11 $$ properties.load(stream)[ FD ]
Line_21 $$ if (key instanceof String && ((String) key).contains(".")) -->Line_23 $$ final String darculaKey = s.substring(s.lastIndexOf('.') + 1)[ CD ]
Line_7 $$ InputStream stream = getClass().getResourceAsStream(getPrefix() + ".properties")-->Line_12 $$ stream.close()[ FD ]
Line_10 $$ stream = getClass().getResourceAsStream(getPrefix() + "_" + osSuffix + ".properties")-->Line_12 $$ stream.close()[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_11 $$ properties.load(stream)[ FD ]
Line_23 $$ final String darculaKey = s.substring(s.lastIndexOf('.') + 1)-->Line_24 $$ if (darculaGlobalSettings.containsKey(darculaKey)) [ FD ]
Line_14 $$ final String prefix = getPrefix() + "."-->Line_17 $$ darculaGlobalSettings.put(key.substring(prefix.length()), parseValue(key, properties.getProperty(key)))[ FD ]
Line_4 $$ final Properties properties = new Properties()-->Line_8 $$ properties.load(stream)[ FD ]
Line_15 $$ for (String key : properties.stringPropertyNames()) -->Line_30 $$ final String value = properties.getProperty(key)[ FD ]
Line_21 $$ if (key instanceof String && ((String) key).contains(".")) -->Line_22 $$ final String s = (String) key[ CD ]
Line_21 $$ if (key instanceof String && ((String) key).contains(".")) -->Line_24 $$ if (darculaGlobalSettings.containsKey(darculaKey)) [ CD ]
