Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_5 $$ pattern = pattern.substring(1)[ CD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_13 $$ pattern = pattern.trim()[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_15 $$ pattern = pattern.substring(id.length()).trim().toLowerCase()[ FD ]
Line_11 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) -->Line_12 $$ if (pattern.startsWith(" ")) [ CD ]
Line_12 $$ if (pattern.startsWith(" ")) -->Line_15 $$ pattern = pattern.substring(id.length()).trim().toLowerCase()[ CD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_11 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) [ CD ]
Line_19 $$ if (matcher.matches(option.getOption())) -->Line_20 $$ collector.consume(option)[ CD ]
Line_6 $$ final List<String> parts = StringUtil.split(pattern, " ")-->Line_7 $$ if (parts.size() == 0) [ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_6 $$ final List<String> parts = StringUtil.split(pattern, " ")[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_11 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) [ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_18 $$ for (BooleanOptionDescription option : getOptions(project)) [ FD ]
Line_10 $$ String id = parts.get(0)-->Line_15 $$ pattern = pattern.substring(id.length()).trim().toLowerCase()[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_3 $$ if (!pattern.startsWith("#"))[ CD ]
Line_7 $$ if (parts.size() == 0) -->Line_8 $$ return[ CD ]
Line_11 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) -->Line_17 $$ final MinusculeMatcher matcher = NameUtil.buildMatcher("*" + pattern, NameUtil.MatchingCaseSensitivity.NONE)[ CD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_3 $$ if (!pattern.startsWith("#"))[ FD ]
Line_18 $$ for (BooleanOptionDescription option : getOptions(project)) -->Line_20 $$ collector.consume(option)[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_20 $$ collector.consume(option)[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_6 $$ final List<String> parts = StringUtil.split(pattern, " ")[ CD ]
Line_6 $$ final List<String> parts = StringUtil.split(pattern, " ")-->Line_10 $$ String id = parts.get(0)[ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_5 $$ pattern = pattern.substring(1)[ FD ]
Line_10 $$ String id = parts.get(0)-->Line_11 $$ if (getId().startsWith(id) || pattern.startsWith(" ")) [ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_12 $$ if (pattern.startsWith(" ")) [ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_7 $$ if (parts.size() == 0) [ CD ]
Line_17 $$ final MinusculeMatcher matcher = NameUtil.buildMatcher("*" + pattern, NameUtil.MatchingCaseSensitivity.NONE)-->Line_19 $$ if (matcher.matches(option.getOption())) [ FD ]
Line_18 $$ for (BooleanOptionDescription option : getOptions(project)) -->Line_19 $$ if (matcher.matches(option.getOption())) [ FD ]
Line_2 $$ public final void consumeTopHits(@NonNls String pattern, Consumer<Object> collector, Project project) -->Line_10 $$ String id = parts.get(0)[ CD ]
Line_3 $$ if (!pattern.startsWith("#"))-->Line_4 $$ return[ CD ]
Line_12 $$ if (pattern.startsWith(" ")) -->Line_13 $$ pattern = pattern.trim()[ CD ]
