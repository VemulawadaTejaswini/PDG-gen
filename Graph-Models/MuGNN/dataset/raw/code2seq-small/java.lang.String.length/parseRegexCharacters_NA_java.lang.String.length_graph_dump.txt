Line_16 $$ char c = chars.charAt(index++)-->Line_22 $$ outChars.append(c)[ FD ]
Line_50 $$ if (index + 4 <= chars.length()) -->Line_65 $$ return false[ CD ]
Line_32 $$ if (escapeSlash) -->Line_33 $$ outChars.append(c)[ CD ]
Line_57 $$ index += 4-->Line_53 $$ c = chars.charAt(index)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_3 $$ assert sourceOffsets == null || sourceOffsets.length == chars.length() + 1[ FD ]
Line_13 $$ int index = 0-->Line_16 $$ char c = chars.charAt(index++)[ FD ]
Line_13 $$ int index = 0-->Line_43 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_15 $$ while (index < chars.length()) [ CD ]
Line_25 $$ if (index == chars.length()) -->Line_26 $$ outChars.append('\\')[ CD ]
Line_13 $$ int index = 0-->Line_48 $$ index++[ FD ]
Line_57 $$ index += 4-->Line_71 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_17 $$ if (sourceOffsets != null) -->Line_19 $$ sourceOffsets[outChars.length() + 1 - outOffset] = index[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_15 $$ while (index < chars.length()) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_19 $$ sourceOffsets[outChars.length() + 1 - outOffset] = index[ FD ]
Line_15 $$ while (index < chars.length()) -->Line_21 $$ if (c != '\\') [ CD ]
Line_13 $$ int index = 0-->Line_19 $$ sourceOffsets[outChars.length() + 1 - outOffset] = index[ FD ]
Line_16 $$ char c = chars.charAt(index++)-->Line_33 $$ outChars.append(c)[ FD ]
Line_57 $$ index += 4-->Line_59 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_15 $$ while (index < chars.length()) -->Line_17 $$ if (sourceOffsets != null) [ CD ]
Line_13 $$ int index = 0-->Line_59 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_22 $$ outChars.append(c)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_35 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_32 $$ if (escapeSlash) -->Line_38 $$ outChars.append('\\').append('/')[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_14 $$ final int outOffset = outChars.length()[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_16 $$ char c = chars.charAt(index++)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_53 $$ c = chars.charAt(index)[ FD ]
Line_47 $$ while (index != chars.length() && chars.charAt(index) == 'u') -->Line_48 $$ index++[ CD ]
Line_53 $$ c = chars.charAt(index)-->Line_22 $$ outChars.append(c)[ FD ]
Line_42 $$ if (sourceOffsets != null) -->Line_43 $$ sourceOffsets[outChars.length() - outOffset] = index[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_13 $$ int index = 0[ CD ]
Line_29 $$ c = chars.charAt(index++)-->Line_33 $$ outChars.append(c)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_71 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_57 $$ index += 4-->Line_25 $$ if (index == chars.length()) [ FD ]
Line_4 $$ if (chars.indexOf('\\') < 0) -->Line_6 $$ if (sourceOffsets != null) [ CD ]
Line_32 $$ if (escapeSlash) -->Line_34 $$ if (sourceOffsets != null) [ CD ]
Line_57 $$ index += 4-->Line_52 $$ int code = Integer.parseInt(chars.substring(index, index + 4), 16)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_59 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_7 $$ for (int i = 0; i < sourceOffsets.length; i++) -->Line_8 $$ sourceOffsets[i] = i[ FD ]
Line_4 $$ if (chars.indexOf('\\') < 0) -->Line_5 $$ outChars.append(chars)[ CD ]
Line_13 $$ int index = 0-->Line_52 $$ int code = Integer.parseInt(chars.substring(index, index + 4), 16)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_50 $$ if (index + 4 <= chars.length()) [ FD ]
Line_25 $$ if (index == chars.length()) -->Line_27 $$ return true[ CD ]
Line_13 $$ int index = 0-->Line_15 $$ while (index < chars.length()) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_42 $$ if (sourceOffsets != null) [ FD ]
Line_54 $$ if (c == '+' || c == '-')-->Line_55 $$ return false[ CD ]
Line_13 $$ int index = 0-->Line_18 $$ sourceOffsets[outChars.length() - outOffset] = index - 1[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_34 $$ if (sourceOffsets != null) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_56 $$ outChars.append((char) code)[ FD ]
Line_53 $$ c = chars.charAt(index)-->Line_33 $$ outChars.append(c)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_69 $$ outChars.append('\\').append(c)[ FD ]
Line_13 $$ int index = 0-->Line_71 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_38 $$ outChars.append('\\').append('/')[ FD ]
Line_16 $$ char c = chars.charAt(index++)-->Line_53 $$ c = chars.charAt(index)[ FD ]
Line_57 $$ index += 4-->Line_16 $$ char c = chars.charAt(index++)[ FD ]
Line_16 $$ char c = chars.charAt(index++)-->Line_69 $$ outChars.append('\\').append(c)[ FD ]
Line_6 $$ if (sourceOffsets != null) -->Line_7 $$ for (int i = 0; i < sourceOffsets.length; i++) [ CD ]
Line_53 $$ c = chars.charAt(index)-->Line_69 $$ outChars.append('\\').append(c)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_4 $$ if (chars.indexOf('\\') < 0) [ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_14 $$ final int outOffset = outChars.length()[ FD ]
Line_34 $$ if (sourceOffsets != null) -->Line_35 $$ sourceOffsets[outChars.length() - outOffset] = index[ CD ]
Line_70 $$ if (sourceOffsets != null) -->Line_71 $$ sourceOffsets[outChars.length() - outOffset] = index[ CD ]
Line_53 $$ c = chars.charAt(index)-->Line_21 $$ if (c != '\\') [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_25 $$ if (index == chars.length()) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_75 $$ return true[ CD ]
Line_7 $$ for (int i = 0; i < sourceOffsets.length; i++) -->Line_8 $$ sourceOffsets[i] = i[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_6 $$ if (sourceOffsets != null) [ FD ]
Line_16 $$ char c = chars.charAt(index++)-->Line_29 $$ c = chars.charAt(index++)[ FD ]
Line_15 $$ while (index < chars.length()) -->Line_25 $$ if (index == chars.length()) [ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_52 $$ int code = Integer.parseInt(chars.substring(index, index + 4), 16)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_70 $$ if (sourceOffsets != null) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_47 $$ while (index != chars.length() && chars.charAt(index) == 'u') [ FD ]
Line_29 $$ c = chars.charAt(index++)-->Line_53 $$ c = chars.charAt(index)[ FD ]
Line_57 $$ index += 4-->Line_29 $$ c = chars.charAt(index++)[ FD ]
Line_15 $$ while (index < chars.length()) -->Line_16 $$ char c = chars.charAt(index++)[ CD ]
Line_16 $$ char c = chars.charAt(index++)-->Line_21 $$ if (c != '\\') [ FD ]
Line_13 $$ int index = 0-->Line_25 $$ if (index == chars.length()) [ FD ]
Line_13 $$ int index = 0-->Line_29 $$ c = chars.charAt(index++)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_29 $$ c = chars.charAt(index++)[ FD ]
Line_29 $$ c = chars.charAt(index++)-->Line_22 $$ outChars.append(c)[ FD ]
Line_57 $$ index += 4-->Line_19 $$ sourceOffsets[outChars.length() + 1 - outOffset] = index[ FD ]
Line_13 $$ int index = 0-->Line_53 $$ c = chars.charAt(index)[ FD ]
Line_57 $$ index += 4-->Line_43 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_17 $$ if (sourceOffsets != null) -->Line_18 $$ sourceOffsets[outChars.length() - outOffset] = index - 1[ CD ]
Line_57 $$ index += 4-->Line_18 $$ sourceOffsets[outChars.length() - outOffset] = index - 1[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_18 $$ sourceOffsets[outChars.length() - outOffset] = index - 1[ FD ]
Line_13 $$ int index = 0-->Line_57 $$ index += 4[ FD ]
Line_29 $$ c = chars.charAt(index++)-->Line_21 $$ if (c != '\\') [ FD ]
Line_57 $$ index += 4-->Line_15 $$ while (index < chars.length()) [ FD ]
Line_57 $$ index += 4-->Line_35 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_58 $$ if (sourceOffsets != null) -->Line_59 $$ sourceOffsets[outChars.length() - outOffset] = index[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_33 $$ outChars.append(c)[ FD ]
Line_4 $$ if (chars.indexOf('\\') < 0) -->Line_11 $$ return true[ CD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_4 $$ if (chars.indexOf('\\') < 0) [ FD ]
Line_21 $$ if (c != '\\') -->Line_22 $$ outChars.append(c)[ CD ]
Line_13 $$ int index = 0-->Line_47 $$ while (index != chars.length() && chars.charAt(index) == 'u') [ FD ]
Line_15 $$ while (index < chars.length()) -->Line_29 $$ c = chars.charAt(index++)[ CD ]
Line_13 $$ int index = 0-->Line_35 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_5 $$ outChars.append(chars)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_58 $$ if (sourceOffsets != null) [ FD ]
Line_29 $$ c = chars.charAt(index++)-->Line_69 $$ outChars.append('\\').append(c)[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_17 $$ if (sourceOffsets != null) [ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_26 $$ outChars.append('\\')[ FD ]
Line_2 $$ public static boolean parseRegexCharacters(@NotNull String chars, @NotNull StringBuilder outChars, @Nullable int[] sourceOffsets, boolean escapeSlash) -->Line_43 $$ sourceOffsets[outChars.length() - outOffset] = index[ FD ]
