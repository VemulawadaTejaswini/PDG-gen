Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_21 $$ if (record == null) [ FD ]
Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_26 $$ return new VcsRevisionDescriptionImpl(new GitRevisionNumber(record.getHash(), record.getDate()), record.getDate(), author, record.getFullMessage())[ FD ]
Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_25 $$ final String author = Comparing.equal(record.getAuthorName(), record.getCommitterName()) ? record.getAuthorName() : record.getAuthorName() + " (" + record.getCommitterName() + ")"[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_10 $$ h.addParameters(branch)[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_12 $$ h.addParameters("--all")[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_24 $$ record.setUsedHandler(h)[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_14 $$ h.endOptions()[ FD ]
Line_4 $$ filePath = getLastCommitName(project, filePath)-->Line_15 $$ h.addRelativePaths(filePath)[ FD ]
Line_21 $$ if (record == null) -->Line_22 $$ return null[ CD ]
Line_9 $$ if (branch != null && !branch.isEmpty()) -->Line_12 $$ h.addParameters("--all")[ CD ]
Line_6 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME, AUTHOR_NAME, COMMITTER_NAME, SUBJECT, BODY, RAW_BODY)-->Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_24 $$ record.setUsedHandler(h)[ FD ]
Line_6 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME, AUTHOR_NAME, COMMITTER_NAME, SUBJECT, BODY, RAW_BODY)-->Line_8 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_4 $$ filePath = getLastCommitName(project, filePath)-->Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ FD ]
Line_17 $$ if (result.length() == 0) -->Line_18 $$ return null[ CD ]
Line_16 $$ String result = h.run()-->Line_20 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_16 $$ String result = h.run()[ FD ]
Line_16 $$ String result = h.run()-->Line_17 $$ if (result.length() == 0) [ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_15 $$ h.addRelativePaths(filePath)[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_7 $$ h.setSilent(true)[ FD ]
Line_5 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_8 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_9 $$ if (branch != null && !branch.isEmpty()) -->Line_10 $$ h.addParameters(branch)[ CD ]
