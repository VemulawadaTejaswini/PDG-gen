Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_15 $$ String result = h.run()[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_16 $$ if (result.length() == 0) [ CD ]
Line_15 $$ String result = h.run()-->Line_16 $$ if (result.length() == 0) [ FD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_6 $$ h.setSilent(true)[ FD ]
Line_20 $$ if (record == null) -->Line_21 $$ return null[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_9 $$ h.addParameters(branch)[ FD ]
Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_20 $$ if (record == null) [ FD ]
Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_23 $$ record.setUsedHandler(h)[ FD ]
Line_16 $$ if (result.length() == 0) -->Line_17 $$ return null[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_14 $$ h.addRelativePaths(filePath)[ FD ]
Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME, AUTHOR_NAME, COMMITTER_NAME, SUBJECT, BODY, RAW_BODY)-->Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_20 $$ if (record == null) [ CD ]
Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME, AUTHOR_NAME, COMMITTER_NAME, SUBJECT, BODY, RAW_BODY)-->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_25 $$ return new VcsRevisionDescriptionImpl(new GitRevisionNumber(record.getHash(), record.getDate()), record.getDate(), author, record.getFullMessage())[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_14 $$ h.addRelativePaths(filePath)[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_23 $$ record.setUsedHandler(h)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_5 $$ GitLogParser parser = new GitLogParser(project, HASH, COMMIT_TIME, AUTHOR_NAME, COMMITTER_NAME, SUBJECT, BODY, RAW_BODY)[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_13 $$ h.endOptions()[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_14 $$ h.addRelativePaths(filePath)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_13 $$ h.endOptions()[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_3 $$ filePath = getLastCommitName(project, filePath)[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ CD ]
Line_3 $$ filePath = getLastCommitName(project, filePath)-->Line_14 $$ h.addRelativePaths(filePath)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_24 $$ final String author = Comparing.equal(record.getAuthorName(), record.getCommitterName()) ? record.getAuthorName() : record.getAuthorName() + " (" + record.getCommitterName() + ")"[ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_15 $$ String result = h.run()[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_23 $$ record.setUsedHandler(h)[ CD ]
Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_24 $$ final String author = Comparing.equal(record.getAuthorName(), record.getCommitterName()) ? record.getAuthorName() : record.getAuthorName() + " (" + record.getCommitterName() + ")"[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_8 $$ if (branch != null && !branch.isEmpty()) [ CD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ FD ]
Line_8 $$ if (branch != null && !branch.isEmpty()) -->Line_9 $$ h.addParameters(branch)[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_9 $$ h.addParameters(branch)[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_8 $$ if (branch != null && !branch.isEmpty()) [ FD ]
Line_15 $$ String result = h.run()-->Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)[ FD ]
Line_3 $$ filePath = getLastCommitName(project, filePath)-->Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)[ FD ]
Line_4 $$ GitSimpleHandler h = new GitSimpleHandler(project, GitUtil.getGitRoot(filePath), GitCommand.LOG)-->Line_11 $$ h.addParameters("--all")[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_3 $$ filePath = getLastCommitName(project, filePath)[ FD ]
Line_19 $$ final GitLogRecord record = parser.parseOneRecord(result)-->Line_25 $$ return new VcsRevisionDescriptionImpl(new GitRevisionNumber(record.getHash(), record.getDate()), record.getDate(), author, record.getFullMessage())[ FD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_7 $$ h.addParameters("-n1", parser.getPretty())[ CD ]
Line_2 $$ public static VcsRevisionDescription getCurrentRevisionDescription(final Project project, FilePath filePath, @Nullable String branch) throws VcsException -->Line_6 $$ h.setSilent(true)[ CD ]
Line_8 $$ if (branch != null && !branch.isEmpty()) -->Line_11 $$ h.addParameters("--all")[ CD ]
