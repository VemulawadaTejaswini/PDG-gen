Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_59 $$ checkClass(clazzes, entry, path)[ FD ]
Line_30 $$ try (JarFile file = new JarFile(path.toString())) -->Line_31 $$ Manifest manifest = file.getManifest()[ FD ]
Line_37 $$ while (elements.hasMoreElements()) -->Line_38 $$ String entry = elements.nextElement().getName()[ CD ]
Line_15 $$ Set<Path> seenJars = new HashSet()-->Line_24 $$ if (!seenJars.add(path)) [ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_30 $$ try (JarFile file = new JarFile(path.toString())) [ FD ]
Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_61 $$ return super.visitFile(file, attrs)[ FD ]
Line_37 $$ while (elements.hasMoreElements()) -->Line_39 $$ if (entry.endsWith(".class")) [ CD ]
Line_8 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_29 $$ logger.debug("examining jar: [ FD ]
Line_38 $$ String entry = elements.nextElement().getName()-->Line_42 $$ checkClass(clazzes, entry, path)[ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_47 $$ logger.debug("examining directory: [ FD ]
Line_31 $$ Manifest manifest = file.getManifest()-->Line_33 $$ checkManifest(manifest, path)[ FD ]
Line_23 $$ if (path.toString().endsWith(".jar")) -->Line_50 $$ final String sep = root.getFileSystem().getSeparator()[ CD ]
Line_30 $$ try (JarFile file = new JarFile(path.toString())) -->Line_61 $$ return super.visitFile(file, attrs)[ FD ]
Line_39 $$ if (entry.endsWith(".class")) -->Line_42 $$ checkClass(clazzes, entry, path)[ CD ]
Line_23 $$ if (path.toString().endsWith(".jar")) -->Line_29 $$ logger.debug("examining jar: [ CD ]
Line_56 $$ if (entry.endsWith(".class")) -->Line_59 $$ checkClass(clazzes, entry, path)[ CD ]
Line_55 $$ String entry = root.relativize(file).toString()-->Line_59 $$ checkClass(clazzes, entry, path)[ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_24 $$ if (!seenJars.add(path)) [ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_33 $$ checkManifest(manifest, path)[ FD ]
Line_8 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_47 $$ logger.debug("examining directory: [ FD ]
Line_31 $$ Manifest manifest = file.getManifest()-->Line_32 $$ if (manifest != null) [ FD ]
Line_32 $$ if (manifest != null) -->Line_33 $$ checkManifest(manifest, path)[ CD ]
Line_16 $$ for (final URL url : urls) -->Line_17 $$ final Path path = PathUtils.get(url.toURI())[ FD ]
Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_61 $$ return super.visitFile(file, attrs)[ CD ]
Line_38 $$ String entry = elements.nextElement().getName()-->Line_56 $$ if (entry.endsWith(".class")) [ FD ]
Line_23 $$ if (path.toString().endsWith(".jar")) -->Line_47 $$ logger.debug("examining directory: [ CD ]
Line_8 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_25 $$ logger.debug("excluding duplicate classpath element: [ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_23 $$ if (path.toString().endsWith(".jar")) [ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_25 $$ logger.debug("excluding duplicate classpath element: [ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_20 $$ logger.debug("excluding system resource: [ FD ]
Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_56 $$ if (entry.endsWith(".class")) [ CD ]
Line_14 $$ final Map<String, Path> clazzes = new HashMap(32768)-->Line_42 $$ checkClass(clazzes, entry, path)[ FD ]
Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_55 $$ String entry = root.relativize(file).toString()[ CD ]
Line_30 $$ try (JarFile file = new JarFile(path.toString())) -->Line_55 $$ String entry = root.relativize(file).toString()[ FD ]
Line_23 $$ if (path.toString().endsWith(".jar")) -->Line_24 $$ if (!seenJars.add(path)) [ CD ]
Line_24 $$ if (!seenJars.add(path)) -->Line_25 $$ logger.debug("excluding duplicate classpath element: [ CD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_42 $$ checkClass(clazzes, entry, path)[ FD ]
Line_17 $$ final Path path = PathUtils.get(url.toURI())-->Line_29 $$ logger.debug("examining jar: [ FD ]
Line_38 $$ String entry = elements.nextElement().getName()-->Line_59 $$ checkClass(clazzes, entry, path)[ FD ]
Line_23 $$ if (path.toString().endsWith(".jar")) -->Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() [ CD ]
Line_51 $$ Files.walkFileTree(root, new SimpleFileVisitor<Path>() -->Line_55 $$ String entry = root.relativize(file).toString()[ FD ]
Line_8 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_20 $$ logger.debug("excluding system resource: [ FD ]
Line_55 $$ String entry = root.relativize(file).toString()-->Line_56 $$ if (entry.endsWith(".class")) [ FD ]
Line_8 $$ ESLogger logger = Loggers.getLogger(JarHell.class)-->Line_13 $$ logger.debug("java.home: [ FD ]
Line_14 $$ final Map<String, Path> clazzes = new HashMap(32768)-->Line_59 $$ checkClass(clazzes, entry, path)[ FD ]
Line_38 $$ String entry = elements.nextElement().getName()-->Line_39 $$ if (entry.endsWith(".class")) [ FD ]
