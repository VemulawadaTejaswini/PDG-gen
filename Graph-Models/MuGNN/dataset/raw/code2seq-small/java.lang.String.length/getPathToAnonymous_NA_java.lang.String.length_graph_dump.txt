Line_2 $$ public String getPathToAnonymous() -->Line_15 $$ return null[ CD ]
Line_5 $$ String path = matcher.group(2)-->Line_9 $$ path = path.substring(0, path.length() - 2)[ FD ]
Line_5 $$ String path = matcher.group(2)-->Line_6 $$ if (path != null) [ FD ]
Line_5 $$ String path = matcher.group(2)-->Line_8 $$ if (path.endsWith("$") && path.length() >= 2) [ FD ]
Line_6 $$ if (path != null) -->Line_7 $$ path = path.trim()[ CD ]
Line_5 $$ String path = matcher.group(2)-->Line_7 $$ path = path.trim()[ FD ]
Line_5 $$ String path = matcher.group(2)-->Line_11 $$ if (!path.isEmpty())[ FD ]
Line_6 $$ if (path != null) -->Line_8 $$ if (path.endsWith("$") && path.length() >= 2) [ CD ]
Line_3 $$ final Matcher matcher = patternToDetectAnonymousClasses.matcher(getTrimmedText())-->Line_5 $$ String path = matcher.group(2)[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_6 $$ if (path != null) [ CD ]
Line_2 $$ public String getPathToAnonymous() -->Line_4 $$ if (matcher.matches()) [ CD ]
Line_7 $$ path = path.trim()-->Line_11 $$ if (!path.isEmpty())[ FD ]
Line_8 $$ if (path.endsWith("$") && path.length() >= 2) -->Line_9 $$ path = path.substring(0, path.length() - 2)[ CD ]
Line_7 $$ path = path.trim()-->Line_9 $$ path = path.substring(0, path.length() - 2)[ FD ]
Line_7 $$ path = path.trim()-->Line_8 $$ if (path.endsWith("$") && path.length() >= 2) [ FD ]
Line_11 $$ if (!path.isEmpty())-->Line_12 $$ return path[ CD ]
Line_6 $$ if (path != null) -->Line_11 $$ if (!path.isEmpty())[ CD ]
Line_2 $$ public String getPathToAnonymous() -->Line_3 $$ final Matcher matcher = patternToDetectAnonymousClasses.matcher(getTrimmedText())[ CD ]
Line_3 $$ final Matcher matcher = patternToDetectAnonymousClasses.matcher(getTrimmedText())-->Line_4 $$ if (matcher.matches()) [ FD ]
Line_9 $$ path = path.substring(0, path.length() - 2)-->Line_11 $$ if (!path.isEmpty())[ FD ]
Line_4 $$ if (matcher.matches()) -->Line_5 $$ String path = matcher.group(2)[ CD ]
