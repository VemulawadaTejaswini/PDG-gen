Line_4 $$ String text-->Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ CD ]
Line_57 $$ if (valueDescriptor.isDirty()) -->Line_60 $$ TextAttributes attributes = null[ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_51 $$ String objectId = valueLabel.substring(0, idx + 1)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_48 $$ if (appendValue && strings[1] != null) [ FD ]
Line_7 $$ text = ""-->Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_23 $$ String[] strings = breakString(text, nodeName)-->Line_37 $$ strings = breakString(strings[2], "=")[ FD ]
Line_71 $$ if (valueLabel.endsWith(errorMessage)) -->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ CD ]
Line_4 $$ String text-->Line_10 $$ text = descriptor.getLabel()[ FD ]
Line_51 $$ String objectId = valueLabel.substring(0, idx + 1)-->Line_53 $$ descriptorText.append(objectId, OBJECT_ID_HIGHLIGHT_ATTRIBUTES)[ FD ]
Line_70 $$ final String errorMessage = exception.getMessage()-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES-->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ FD ]
Line_6 $$ if (descriptor == null) -->Line_10 $$ text = descriptor.getLabel()[ CD ]
Line_60 $$ TextAttributes attributes = null-->Line_64 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.STRING)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_23 $$ String[] strings = breakString(text, nodeName)[ CD ]
Line_17 $$ if (descriptor instanceof ValueDescriptor) -->Line_19 $$ if (markup != null) [ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_80 $$ descriptorText.append(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE, XDebuggerUIConstants.COLLECTING_DATA_HIGHLIGHT_ATTRIBUTES)[ FD ]
Line_34 $$ if (strings[2] != null) -->Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) [ CD ]
Line_62 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.KEYWORD)-->Line_64 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.STRING)[ FD ]
Line_6 $$ if (descriptor == null) -->Line_7 $$ text = ""[ CD ]
Line_57 $$ if (valueDescriptor.isDirty()) -->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ CD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_68 $$ final EvaluateException exception = descriptor.getEvaluateException()[ CD ]
Line_6 $$ if (descriptor == null) -->Line_11 $$ nodeName = descriptor.getName()[ CD ]
Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) -->Line_80 $$ descriptorText.append(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE, XDebuggerUIConstants.COLLECTING_DATA_HIGHLIGHT_ATTRIBUTES)[ CD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_10 $$ text = descriptor.getLabel()-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_11 $$ nodeName = descriptor.getName()-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_45 $$ if (strings[0] != null) [ CD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_56 $$ final SimpleTextAttributes valueLabelAttribs[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_31 $$ if (strings[1] != null) [ CD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_46 $$ descriptorText.append(strings[0], DEFAULT_ATTRIBUTES)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_48 $$ if (appendValue && strings[1] != null) [ CD ]
Line_63 $$ if (valueDescriptor.isString()) -->Line_64 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.STRING)[ CD ]
Line_36 $$ if (multiline && strings[2].indexOf('\n') >= 0) -->Line_38 $$ if (strings[2] != null) [ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_34 $$ if (strings[2] != null) [ CD ]
Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '-->Line_50 $$ int idx = valueLabel.indexOf('}')[ CD ]
Line_23 $$ String[] strings = breakString(text, nodeName)-->Line_44 $$ strings = breakString(strings[2], valueLabel)[ FD ]
Line_68 $$ final EvaluateException exception = descriptor.getEvaluateException()-->Line_70 $$ final String errorMessage = exception.getMessage()[ FD ]
Line_5 $$ String nodeName-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_25 $$ if (descriptor instanceof MessageDescriptor && ((MessageDescriptor) descriptor).getKind() == MessageDescriptor.SPECIAL) -->Line_28 $$ descriptorText.append(strings[0], DEFAULT_ATTRIBUTES)[ CD ]
Line_60 $$ TextAttributes attributes = null-->Line_62 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.KEYWORD)[ FD ]
Line_56 $$ final SimpleTextAttributes valueLabelAttribs-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_24 $$ if (strings[0] != null) [ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_5 $$ String nodeName[ CD ]
Line_31 $$ if (strings[1] != null) -->Line_32 $$ descriptorText.append(strings[1], XDebuggerUIConstants.VALUE_NAME_ATTRIBUTES)[ CD ]
Line_61 $$ if (valueDescriptor.isNull()) -->Line_63 $$ if (valueDescriptor.isString()) [ CD ]
Line_64 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.STRING)-->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ FD ]
Line_4 $$ String text-->Line_7 $$ text = ""[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_6 $$ if (descriptor == null) [ FD ]
Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) -->Line_14 $$ descriptorText.append(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE, XDebuggerUIConstants.COLLECTING_DATA_HIGHLIGHT_ATTRIBUTES)[ CD ]
Line_24 $$ if (strings[0] != null) -->Line_25 $$ if (descriptor instanceof MessageDescriptor && ((MessageDescriptor) descriptor).getKind() == MessageDescriptor.SPECIAL) [ CD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_26 $$ descriptorText.append(strings[0], SPECIAL_NODE_ATTRIBUTES)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_42 $$ ValueDescriptorImpl valueDescriptor = (ValueDescriptorImpl) descriptor[ CD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_53 $$ descriptorText.append(objectId, OBJECT_ID_HIGHLIGHT_ATTRIBUTES)[ FD ]
Line_42 $$ ValueDescriptorImpl valueDescriptor = (ValueDescriptorImpl) descriptor-->Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_32 $$ descriptorText.append(strings[1], XDebuggerUIConstants.VALUE_NAME_ATTRIBUTES)[ FD ]
Line_42 $$ ValueDescriptorImpl valueDescriptor = (ValueDescriptorImpl) descriptor-->Line_57 $$ if (valueDescriptor.isDirty()) [ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_64 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.STRING)[ FD ]
Line_36 $$ if (multiline && strings[2].indexOf('\n') >= 0) -->Line_37 $$ strings = breakString(strings[2], "=")[ CD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '[ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_71 $$ if (valueLabel.endsWith(errorMessage)) [ FD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_71 $$ if (valueLabel.endsWith(errorMessage)) [ FD ]
Line_57 $$ if (valueDescriptor.isDirty()) -->Line_61 $$ if (valueDescriptor.isNull()) [ CD ]
Line_71 $$ if (valueLabel.endsWith(errorMessage)) -->Line_73 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ CD ]
Line_8 $$ nodeName = null-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '-->Line_53 $$ descriptorText.append(objectId, OBJECT_ID_HIGHLIGHT_ATTRIBUTES)[ CD ]
Line_71 $$ if (valueLabel.endsWith(errorMessage)) -->Line_76 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_52 $$ valueLabel = valueLabel.substring(idx + 1)[ FD ]
Line_19 $$ if (markup != null) -->Line_20 $$ descriptorText.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ CD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_76 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_14 $$ descriptorText.append(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE, XDebuggerUIConstants.COLLECTING_DATA_HIGHLIGHT_ATTRIBUTES)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_44 $$ strings = breakString(strings[2], valueLabel)[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_17 $$ if (descriptor instanceof ValueDescriptor) [ CD ]
Line_4 $$ String text-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)[ FD ]
Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) -->Line_15 $$ return descriptorText[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) [ FD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)[ FD ]
Line_25 $$ if (descriptor instanceof MessageDescriptor && ((MessageDescriptor) descriptor).getKind() == MessageDescriptor.SPECIAL) -->Line_26 $$ descriptorText.append(strings[0], SPECIAL_NODE_ATTRIBUTES)[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_11 $$ nodeName = descriptor.getName()[ FD ]
Line_56 $$ final SimpleTextAttributes valueLabelAttribs-->Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES[ FD ]
Line_60 $$ TextAttributes attributes = null-->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_87 $$ descriptorText.append(strings[2], DEFAULT_ATTRIBUTES)[ FD ]
Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_7 $$ text = ""-->Line_10 $$ text = descriptor.getLabel()[ FD ]
Line_38 $$ if (strings[2] != null) -->Line_39 $$ strings[2] = strings[0] + strings[1] + "\n" + strings[2][ CD ]
Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_6 $$ if (descriptor == null) [ CD ]
Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)-->Line_71 $$ if (valueLabel.endsWith(errorMessage)) [ FD ]
Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '-->Line_51 $$ String objectId = valueLabel.substring(0, idx + 1)[ CD ]
Line_70 $$ final String errorMessage = exception.getMessage()-->Line_73 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_28 $$ descriptorText.append(strings[0], DEFAULT_ATTRIBUTES)[ FD ]
Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_73 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ FD ]
Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_8 $$ nodeName = null-->Line_11 $$ nodeName = descriptor.getName()[ FD ]
Line_42 $$ ValueDescriptorImpl valueDescriptor = (ValueDescriptorImpl) descriptor-->Line_63 $$ if (valueDescriptor.isString()) [ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_10 $$ text = descriptor.getLabel()[ FD ]
Line_45 $$ if (strings[0] != null) -->Line_46 $$ descriptorText.append(strings[0], DEFAULT_ATTRIBUTES)[ CD ]
Line_56 $$ final SimpleTextAttributes valueLabelAttribs-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_36 $$ if (multiline && strings[2].indexOf('\n') >= 0) [ CD ]
Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) -->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_4 $$ String text[ CD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_17 $$ if (descriptor instanceof ValueDescriptor) [ FD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_69 $$ if (exception != null) [ CD ]
Line_70 $$ final String errorMessage = exception.getMessage()-->Line_71 $$ if (valueLabel.endsWith(errorMessage)) [ FD ]
Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_17 $$ if (descriptor instanceof ValueDescriptor) -->Line_18 $$ final ValueMarkup markup = ((ValueDescriptor) descriptor).getMarkup(debuggerContext.getDebugProcess())[ CD ]
Line_18 $$ final ValueMarkup markup = ((ValueDescriptor) descriptor).getMarkup(debuggerContext.getDebugProcess())-->Line_20 $$ descriptorText.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ FD ]
Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_57 $$ if (valueDescriptor.isDirty()) -->Line_58 $$ valueLabelAttribs = XDebuggerUIConstants.CHANGED_VALUE_ATTRIBUTES[ CD ]
Line_5 $$ String nodeName-->Line_8 $$ nodeName = null[ FD ]
Line_56 $$ final SimpleTextAttributes valueLabelAttribs-->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()[ CD ]
Line_69 $$ if (exception != null) -->Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ CD ]
Line_37 $$ strings = breakString(strings[2], "=")-->Line_44 $$ strings = breakString(strings[2], valueLabel)[ FD ]
Line_61 $$ if (valueDescriptor.isNull()) -->Line_62 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.KEYWORD)[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_68 $$ final EvaluateException exception = descriptor.getEvaluateException()[ FD ]
Line_68 $$ final EvaluateException exception = descriptor.getEvaluateException()-->Line_69 $$ if (exception != null) [ FD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_87 $$ descriptorText.append(strings[2], DEFAULT_ATTRIBUTES)[ CD ]
Line_7 $$ text = ""-->Line_23 $$ String[] strings = breakString(text, nodeName)[ FD ]
Line_48 $$ if (appendValue && strings[1] != null) -->Line_57 $$ if (valueDescriptor.isDirty()) [ CD ]
Line_49 $$ if (valueLabel != null && StringUtil.startsWithChar(valueLabel, '-->Line_52 $$ valueLabel = valueLabel.substring(idx + 1)[ CD ]
Line_69 $$ if (exception != null) -->Line_70 $$ final String errorMessage = exception.getMessage()[ CD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_18 $$ final ValueMarkup markup = ((ValueDescriptor) descriptor).getMarkup(debuggerContext.getDebugProcess())[ FD ]
Line_62 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.KEYWORD)-->Line_66 $$ valueLabelAttribs = attributes != null ? SimpleTextAttributes.fromTextAttributes(attributes) : DEFAULT_ATTRIBUTES[ FD ]
Line_70 $$ final String errorMessage = exception.getMessage()-->Line_76 $$ descriptorText.append(errorMessage, XDebuggerUIConstants.EXCEPTION_ATTRIBUTES)[ FD ]
Line_6 $$ if (descriptor == null) -->Line_8 $$ nodeName = null[ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_18 $$ final ValueMarkup markup = ((ValueDescriptor) descriptor).getMarkup(debuggerContext.getDebugProcess())-->Line_19 $$ if (markup != null) [ FD ]
Line_35 $$ if (descriptor instanceof ValueDescriptorImpl) -->Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()[ CD ]
Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)-->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_56 $$ final SimpleTextAttributes valueLabelAttribs-->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)-->Line_72 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel.substring(0, valueLabel.length() - errorMessage.length()), valueLabelAttribs, colorScheme)[ FD ]
Line_52 $$ valueLabel = valueLabel.substring(idx + 1)-->Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_82 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ FD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_50 $$ int idx = valueLabel.indexOf('}')[ FD ]
Line_3 $$ SimpleColoredText descriptorText = new SimpleColoredText()-->Line_20 $$ descriptorText.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ FD ]
Line_5 $$ String nodeName-->Line_11 $$ nodeName = descriptor.getName()[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_90 $$ return descriptorText[ CD ]
Line_43 $$ String valueLabel = valueDescriptor.getValueLabel()-->Line_44 $$ strings = breakString(strings[2], valueLabel)[ FD ]
Line_10 $$ text = descriptor.getLabel()-->Line_13 $$ if (text.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_71 $$ if (valueLabel.endsWith(errorMessage)) -->Line_75 $$ appendValueTextWithEscapesRendering(descriptorText, valueLabel, valueLabelAttribs, colorScheme)[ CD ]
Line_55 $$ valueLabel = DebuggerUtilsEx.truncateString(valueLabel)-->Line_79 $$ if (valueLabel.equals(XDebuggerUIConstants.COLLECTING_DATA_MESSAGE)) [ FD ]
Line_42 $$ ValueDescriptorImpl valueDescriptor = (ValueDescriptorImpl) descriptor-->Line_61 $$ if (valueDescriptor.isNull()) [ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_62 $$ attributes = colorScheme.getAttributes(JavaHighlightingColors.KEYWORD)[ FD ]
Line_2 $$ private static SimpleColoredText getDescriptorText(DebuggerContextImpl debuggerContext, NodeDescriptorImpl descriptor, EditorColorsScheme colorScheme, boolean multiline, boolean appendValue) -->Line_36 $$ if (multiline && strings[2].indexOf('\n') >= 0) [ FD ]
Line_69 $$ if (exception != null) -->Line_71 $$ if (valueLabel.endsWith(errorMessage)) [ CD ]
