Line_17 $$ final NamespaceDesc nsDesc = new NamespaceDesc(name, def)-->Line_55 $$ model.nsdMap.put(name, nsDesc)[ FD ]
Line_21 $$ final String imports = nsElement.getAttributeValue("imports")-->Line_44 $$ nsDesc.imports = imports[ FD ]
Line_4 $$ for (Element e : (List<Element>) namespaceEl.getChildren("schemaLocation")) -->Line_5 $$ final String name = e.getAttributeValue("name")[ FD ]
Line_28 $$ final String fileName = pkgElement.getAttributeValue("file")-->Line_29 $$ list.add(fileName)[ FD ]
Line_20 $$ final String superC = nsElement.getAttributeValue("super")-->Line_42 $$ nsDesc.superClass = superC[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_21 $$ final String imports = nsElement.getAttributeValue("imports")[ FD ]
Line_23 $$ final String packageEnumS = nsElement.getAttributeValue("enums")-->Line_47 $$ if (packageEnumS != null)[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_24 $$ final String interfaces = nsElement.getAttributeValue("interfaces")[ FD ]
Line_18 $$ final String skip = nsElement.getAttributeValue("skip")-->Line_37 $$ if (skip != null)[ FD ]
Line_41 $$ if (superC != null)-->Line_42 $$ nsDesc.superClass = superC[ CD ]
Line_43 $$ if (imports != null)-->Line_44 $$ nsDesc.imports = imports[ CD ]
Line_25 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_30 $$ list.add(pkgName)[ FD ]
Line_47 $$ if (packageEnumS != null)-->Line_48 $$ nsDesc.enumPkg = packageEnumS[ CD ]
Line_27 $$ final String pkgName = pkgElement.getAttributeValue("name")-->Line_30 $$ list.add(pkgName)[ FD ]
Line_24 $$ final String interfaces = nsElement.getAttributeValue("interfaces")-->Line_50 $$ nsDesc.intfs = interfaces[ FD ]
Line_51 $$ if (!list.isEmpty())-->Line_52 $$ nsDesc.pkgNames = ArrayUtil.toStringArray(list)[ CD ]
Line_6 $$ final String file = e.getAttributeValue("file")-->Line_7 $$ schemaLocationMap.put(name, file)[ FD ]
Line_18 $$ final String skip = nsElement.getAttributeValue("skip")-->Line_38 $$ nsDesc.skip = skip.equalsIgnoreCase("true")[ FD ]
Line_25 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_29 $$ list.add(fileName)[ FD ]
Line_3 $$ final Element namespaceEl = element.getChild("namespaces")-->Line_4 $$ for (Element e : (List<Element>) namespaceEl.getChildren("schemaLocation")) [ FD ]
Line_4 $$ for (Element e : (List<Element>) namespaceEl.getChildren("schemaLocation")) -->Line_10 $$ final String name = e.getAttributeValue("name")[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_20 $$ final String superC = nsElement.getAttributeValue("super")[ FD ]
Line_3 $$ final Element namespaceEl = element.getChild("namespaces")-->Line_9 $$ for (Element e : (List<Element>) namespaceEl.getChildren("reserved-name")) [ FD ]
Line_23 $$ final String packageEnumS = nsElement.getAttributeValue("enums")-->Line_48 $$ nsDesc.enumPkg = packageEnumS[ FD ]
Line_2 $$ public void loadConfig(Element element) -->Line_3 $$ final Element namespaceEl = element.getChild("namespaces")[ FD ]
Line_2 $$ public void loadConfig(Element element) -->Line_3 $$ final Element namespaceEl = element.getChild("namespaces")[ CD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_16 $$ final String name = nsElement.getAttributeValue("name")[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_18 $$ final String skip = nsElement.getAttributeValue("skip")[ FD ]
Line_26 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("package")) -->Line_27 $$ final String pkgName = pkgElement.getAttributeValue("name")[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_19 $$ final String prefix = nsElement.getAttributeValue("prefix")[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_22 $$ final String packageS = nsElement.getAttributeValue("package")[ FD ]
Line_19 $$ final String prefix = nsElement.getAttributeValue("prefix")-->Line_40 $$ nsDesc.prefix = prefix[ FD ]
Line_20 $$ final String superC = nsElement.getAttributeValue("super")-->Line_41 $$ if (superC != null)[ FD ]
Line_45 $$ if (packageS != null)-->Line_46 $$ nsDesc.pkgName = packageS[ CD ]
Line_22 $$ final String packageS = nsElement.getAttributeValue("package")-->Line_46 $$ nsDesc.pkgName = packageS[ FD ]
Line_53 $$ if (name.length() == 0)-->Line_54 $$ def = nsDesc[ CD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_26 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("package")) [ FD ]
Line_37 $$ if (skip != null)-->Line_38 $$ nsDesc.skip = skip.equalsIgnoreCase("true")[ CD ]
Line_22 $$ final String packageS = nsElement.getAttributeValue("package")-->Line_45 $$ if (packageS != null)[ FD ]
Line_5 $$ final String name = e.getAttributeValue("name")-->Line_55 $$ model.nsdMap.put(name, nsDesc)[ FD ]
Line_21 $$ final String imports = nsElement.getAttributeValue("imports")-->Line_43 $$ if (imports != null)[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_23 $$ final String packageEnumS = nsElement.getAttributeValue("enums")[ FD ]
Line_26 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("package")) -->Line_34 $$ final String propertyValue = pkgElement.getAttributeValue("value")[ FD ]
Line_5 $$ final String name = e.getAttributeValue("name")-->Line_7 $$ schemaLocationMap.put(name, file)[ FD ]
Line_4 $$ for (Element e : (List<Element>) namespaceEl.getChildren("schemaLocation")) -->Line_11 $$ final String replacement = e.getAttributeValue("replace-with")[ FD ]
Line_17 $$ final NamespaceDesc nsDesc = new NamespaceDesc(name, def)-->Line_54 $$ def = nsDesc[ FD ]
Line_26 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("package")) -->Line_28 $$ final String fileName = pkgElement.getAttributeValue("file")[ FD ]
Line_11 $$ final String replacement = e.getAttributeValue("replace-with")-->Line_12 $$ model.name2replaceMap.put(name, replacement)[ FD ]
Line_4 $$ for (Element e : (List<Element>) namespaceEl.getChildren("schemaLocation")) -->Line_6 $$ final String file = e.getAttributeValue("file")[ FD ]
Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) -->Line_32 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("property")) [ FD ]
Line_33 $$ final String propertyName = pkgElement.getAttributeValue("name")-->Line_35 $$ nsDesc.props.put(propertyName, propertyValue)[ FD ]
Line_49 $$ if (interfaces != null)-->Line_50 $$ nsDesc.intfs = interfaces[ CD ]
Line_5 $$ final String name = e.getAttributeValue("name")-->Line_12 $$ model.name2replaceMap.put(name, replacement)[ FD ]
Line_2 $$ public void loadConfig(Element element) -->Line_14 $$ NamespaceDesc def = new NamespaceDesc("", "generated", "java.lang.Object", "", null, null, null, null)[ CD ]
Line_14 $$ NamespaceDesc def = new NamespaceDesc("", "generated", "java.lang.Object", "", null, null, null, null)-->Line_54 $$ def = nsDesc[ FD ]
Line_5 $$ final String name = e.getAttributeValue("name")-->Line_53 $$ if (name.length() == 0)[ FD ]
Line_25 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_51 $$ if (!list.isEmpty())[ FD ]
Line_26 $$ for (Element pkgElement : (List<Element>) nsElement.getChildren("package")) -->Line_33 $$ final String propertyName = pkgElement.getAttributeValue("name")[ FD ]
Line_3 $$ final Element namespaceEl = element.getChild("namespaces")-->Line_15 $$ for (Element nsElement : (List<Element>) namespaceEl.getChildren("namespace")) [ FD ]
Line_39 $$ if (prefix != null)-->Line_40 $$ nsDesc.prefix = prefix[ CD ]
Line_34 $$ final String propertyValue = pkgElement.getAttributeValue("value")-->Line_35 $$ nsDesc.props.put(propertyName, propertyValue)[ FD ]
Line_24 $$ final String interfaces = nsElement.getAttributeValue("interfaces")-->Line_49 $$ if (interfaces != null)[ FD ]
Line_25 $$ final ArrayList<String> list = new ArrayList<String>()-->Line_52 $$ nsDesc.pkgNames = ArrayUtil.toStringArray(list)[ FD ]
Line_19 $$ final String prefix = nsElement.getAttributeValue("prefix")-->Line_39 $$ if (prefix != null)[ FD ]
