Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_41 $$ List<Element> fieldElements = rootElement.elements("field")[ CD ]
Line_24 $$ String indent = _getIndent(lines, javaMethod)-->Line_53 $$ javaFieldComment = _addDeprecatedTag(javaFieldComment, javaField, indent)[ FD ]
Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) -->Line_30 $$ String overrideLine = indent + "@Override\n"[ CD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_19 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ FD ]
Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())-->Line_64 $$ sb.append("\n")[ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_63 $$ sb.append(line)[ CD ]
Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)-->Line_34 $$ javaMethodComment = overrideLine[ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_59 $$ String comments = commentsMap.get(lineNumber)[ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_8 $$ Element rootElement = document.getRootElement()[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_10 $$ String javaClassComment = _getJavaClassComment(rootElement, javaClass)[ FD ]
Line_59 $$ String comments = commentsMap.get(lineNumber)-->Line_61 $$ sb.append(comments)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_8 $$ Element rootElement = document.getRootElement()[ CD ]
Line_11 $$ javaClassComment = _addDeprecatedTag(javaClassComment, javaClass, StringPool.BLANK)-->Line_12 $$ commentsMap.put(_getJavaClassLineNumber(javaClass), javaClassComment)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()[ CD ]
Line_42 $$ for (Element fieldElement : fieldElements) -->Line_44 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_40 $$ Map<String, Element> fieldElementsMap = new HashMap()[ CD ]
Line_66 $$ String formattedContent = sb.toString()-->Line_67 $$ return formattedContent.trim()[ FD ]
Line_24 $$ String indent = _getIndent(lines, javaMethod)-->Line_52 $$ String javaFieldComment = _getJavaFieldComment(fieldElementsMap, javaField, indent)[ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_64 $$ sb.append("\n")[ CD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_41 $$ List<Element> fieldElements = rootElement.elements("field")[ FD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_5 $$ _updateLanguageProperties(document, javaClass.getName())[ FD ]
Line_52 $$ String javaFieldComment = _getJavaFieldComment(fieldElementsMap, javaField, indent)-->Line_54 $$ commentsMap.put(javaField.getLineNumber(), javaFieldComment)[ FD ]
Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)-->Line_32 $$ javaMethodComment = javaMethodComment + overrideLine[ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_59 $$ String comments = commentsMap.get(lineNumber)[ FD ]
Line_40 $$ Map<String, Element> fieldElementsMap = new HashMap()-->Line_44 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_46 $$ JavaField[] javaFields = javaClass.getFields()[ FD ]
Line_13 $$ Map<String, Element> methodElementsMap = new HashMap()-->Line_17 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_15 $$ for (Element methodElement : methodElements) -->Line_17 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_53 $$ javaFieldComment = _addDeprecatedTag(javaFieldComment, javaField, indent)-->Line_54 $$ commentsMap.put(javaField.getLineNumber(), javaFieldComment)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_5 $$ _updateLanguageProperties(document, javaClass.getName())[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_3 $$ String[] lines = StringUtil.splitLines(javadocLessContent)[ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_12 $$ commentsMap.put(_getJavaClassLineNumber(javaClass), javaClassComment)[ CD ]
Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)-->Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_13 $$ Map<String, Element> methodElementsMap = new HashMap()[ CD ]
Line_24 $$ String indent = _getIndent(lines, javaMethod)-->Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)[ FD ]
Line_3 $$ String[] lines = StringUtil.splitLines(javadocLessContent)-->Line_51 $$ String indent = _getIndent(lines, javaField)[ FD ]
Line_47 $$ for (JavaField javaField : javaFields) -->Line_52 $$ String javaFieldComment = _getJavaFieldComment(fieldElementsMap, javaField, indent)[ FD ]
Line_13 $$ Map<String, Element> methodElementsMap = new HashMap()-->Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_19 $$ JavaMethod[] javaMethods = javaClass.getMethods()[ CD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_54 $$ commentsMap.put(javaField.getLineNumber(), javaFieldComment)[ FD ]
Line_47 $$ for (JavaField javaField : javaFields) -->Line_54 $$ commentsMap.put(javaField.getLineNumber(), javaFieldComment)[ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_60 $$ if (comments != null) [ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_10 $$ String javaClassComment = _getJavaClassComment(rootElement, javaClass)[ CD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_7 $$ ancestorJavaClassTuples = _addAncestorJavaClassTuples(javaClass, ancestorJavaClassTuples)[ FD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())[ CD ]
Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)-->Line_31 $$ if (Validator.isNotNull(javaMethodComment)) [ FD ]
Line_6 $$ List<Tuple> ancestorJavaClassTuples = new ArrayList()-->Line_7 $$ ancestorJavaClassTuples = _addAncestorJavaClassTuples(javaClass, ancestorJavaClassTuples)[ FD ]
Line_30 $$ String overrideLine = indent + "@Override\n"-->Line_34 $$ javaMethodComment = overrideLine[ FD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_48 $$ if (commentsMap.containsKey(javaField.getLineNumber())) [ FD ]
Line_32 $$ javaMethodComment = javaMethodComment + overrideLine-->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_16 $$ String methodKey = _getMethodKey(methodElement)-->Line_17 $$ methodElementsMap.put(methodKey, methodElement)[ FD ]
Line_6 $$ List<Tuple> ancestorJavaClassTuples = new ArrayList()-->Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) [ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_66 $$ String formattedContent = sb.toString()[ CD ]
Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)-->Line_34 $$ javaMethodComment = overrideLine[ FD ]
Line_58 $$ String line = lines[lineNumber - 1]-->Line_63 $$ sb.append(line)[ FD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_12 $$ commentsMap.put(_getJavaClassLineNumber(javaClass), javaClassComment)[ FD ]
Line_8 $$ Element rootElement = document.getRootElement()-->Line_14 $$ List<Element> methodElements = rootElement.elements("method")[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_5 $$ _updateLanguageProperties(document, javaClass.getName())[ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_67 $$ return formattedContent.trim()[ CD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_21 $$ if (commentsMap.containsKey(javaMethod.getLineNumber())) [ FD ]
Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)-->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)-->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))[ FD ]
Line_59 $$ String comments = commentsMap.get(lineNumber)-->Line_60 $$ if (comments != null) [ FD ]
Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)-->Line_32 $$ javaMethodComment = javaMethodComment + overrideLine[ FD ]
Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())-->Line_63 $$ sb.append(line)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())-->Line_61 $$ sb.append(comments)[ FD ]
Line_47 $$ for (JavaField javaField : javaFields) -->Line_48 $$ if (commentsMap.containsKey(javaField.getLineNumber())) [ FD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_10 $$ String javaClassComment = _getJavaClassComment(rootElement, javaClass)[ FD ]
Line_10 $$ String javaClassComment = _getJavaClassComment(rootElement, javaClass)-->Line_11 $$ javaClassComment = _addDeprecatedTag(javaClassComment, javaClass, StringPool.BLANK)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_46 $$ JavaField[] javaFields = javaClass.getFields()[ CD ]
Line_32 $$ javaMethodComment = javaMethodComment + overrideLine-->Line_34 $$ javaMethodComment = overrideLine[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_7 $$ ancestorJavaClassTuples = _addAncestorJavaClassTuples(javaClass, ancestorJavaClassTuples)[ CD ]
Line_34 $$ javaMethodComment = overrideLine-->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())-->Line_66 $$ String formattedContent = sb.toString()[ FD ]
Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)-->Line_31 $$ if (Validator.isNotNull(javaMethodComment)) [ FD ]
Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) -->Line_58 $$ String line = lines[lineNumber - 1][ CD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_25 $$ String javaMethodComment = _getJavaMethodComment(methodElementsMap, javaMethod, indent)[ FD ]
Line_47 $$ for (JavaField javaField : javaFields) -->Line_51 $$ String indent = _getIndent(lines, javaField)[ FD ]
Line_31 $$ if (Validator.isNotNull(javaMethodComment)) -->Line_32 $$ javaMethodComment = javaMethodComment + overrideLine[ CD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_11 $$ javaClassComment = _addDeprecatedTag(javaClassComment, javaClass, StringPool.BLANK)[ FD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) [ FD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_21 $$ if (commentsMap.containsKey(javaMethod.getLineNumber())) [ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_3 $$ String[] lines = StringUtil.splitLines(javadocLessContent)[ FD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_59 $$ String comments = commentsMap.get(lineNumber)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_14 $$ List<Element> methodElements = rootElement.elements("method")[ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_6 $$ List<Tuple> ancestorJavaClassTuples = new ArrayList()[ CD ]
Line_7 $$ ancestorJavaClassTuples = _addAncestorJavaClassTuples(javaClass, ancestorJavaClassTuples)-->Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) [ FD ]
Line_43 $$ String fieldKey = _getFieldKey(fieldElement)-->Line_44 $$ fieldElementsMap.put(fieldKey, fieldElement)[ FD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_38 $$ commentsMap.put(javaMethod.getLineNumber(), javaMethodComment)[ FD ]
Line_3 $$ String[] lines = StringUtil.splitLines(javadocLessContent)-->Line_24 $$ String indent = _getIndent(lines, javaMethod)[ FD ]
Line_52 $$ String javaFieldComment = _getJavaFieldComment(fieldElementsMap, javaField, indent)-->Line_53 $$ javaFieldComment = _addDeprecatedTag(javaFieldComment, javaField, indent)[ FD ]
Line_30 $$ String overrideLine = indent + "@Override\n"-->Line_32 $$ javaMethodComment = javaMethodComment + overrideLine[ FD ]
Line_42 $$ for (Element fieldElement : fieldElements) -->Line_43 $$ String fieldKey = _getFieldKey(fieldElement)[ FD ]
Line_9 $$ Map<Integer, String> commentsMap = new TreeMap()-->Line_12 $$ commentsMap.put(_getJavaClassLineNumber(javaClass), javaClassComment)[ FD ]
Line_15 $$ for (Element methodElement : methodElements) -->Line_16 $$ String methodKey = _getMethodKey(methodElement)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_56 $$ StringBundler sb = new StringBundler(javadocLessContent.length())[ FD ]
Line_10 $$ String javaClassComment = _getJavaClassComment(rootElement, javaClass)-->Line_12 $$ commentsMap.put(_getJavaClassLineNumber(javaClass), javaClassComment)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))[ CD ]
Line_24 $$ String indent = _getIndent(lines, javaMethod)-->Line_26 $$ javaMethodComment = _addDeprecatedTag(javaMethodComment, javaMethod, indent)[ FD ]
Line_60 $$ if (comments != null) -->Line_61 $$ sb.append(comments)[ CD ]
Line_31 $$ if (Validator.isNotNull(javaMethodComment)) -->Line_34 $$ javaMethodComment = overrideLine[ CD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_57 $$ for (int lineNumber = 1; lineNumber <= lines.length; lineNumber++) [ CD ]
Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) -->Line_31 $$ if (Validator.isNotNull(javaMethodComment)) [ CD ]
Line_20 $$ for (JavaMethod javaMethod : javaMethods) -->Line_24 $$ String indent = _getIndent(lines, javaMethod)[ FD ]
Line_4 $$ JavaClass javaClass = _getJavaClass(fileName, new UnsyncStringReader(javadocLessContent))-->Line_29 $$ if (_isOverrideMethod(javaClass, javaMethod, ancestorJavaClassTuples)) [ FD ]
Line_40 $$ Map<String, Element> fieldElementsMap = new HashMap()-->Line_52 $$ String javaFieldComment = _getJavaFieldComment(fieldElementsMap, javaField, indent)[ FD ]
Line_47 $$ for (JavaField javaField : javaFields) -->Line_53 $$ javaFieldComment = _addDeprecatedTag(javaFieldComment, javaField, indent)[ FD ]
Line_2 $$ private String _getUpdateJavaFromDocument(String fileName, String javadocLessContent, Document document) throws Exception -->Line_11 $$ javaClassComment = _addDeprecatedTag(javaClassComment, javaClass, StringPool.BLANK)[ CD ]
