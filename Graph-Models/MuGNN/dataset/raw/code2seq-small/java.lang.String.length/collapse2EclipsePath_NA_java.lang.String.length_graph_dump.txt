Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_14 $$ file = jarFile[ FD ]
Line_6 $$ if (file != null) -->Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) [ CD ]
Line_8 $$ if (file.getFileSystem() instanceof JarFileSystem) -->Line_14 $$ file = jarFile[ CD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_9 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getVirtualFileForJar(file)[ FD ]
Line_27 $$ final String rootUrl = contentRoot.getUrl()-->Line_28 $$ if (url.startsWith(rootUrl) && url.length() > rootUrl.length()) [ FD ]
Line_34 $$ final String projectUrl = projectBaseDir.getUrl()-->Line_36 $$ return url.substring(projectUrl.length())[ FD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_28 $$ if (url.startsWith(rootUrl) && url.length() > rootUrl.length()) [ FD ]
Line_27 $$ final String rootUrl = contentRoot.getUrl()-->Line_29 $$ return url.substring(rootUrl.length() + 1)[ FD ]
Line_6 $$ if (file != null) -->Line_38 $$ final String path = VfsUtilCore.urlToPath(url)[ CD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_7 $$ LOG.assertTrue(file.isValid())[ FD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_12 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ FD ]
Line_40 $$ if (path.startsWith(projectPath)) -->Line_41 $$ return ProjectRootManagerImpl.extractLocalPath(path.substring(projectPath.length()))[ CD ]
Line_14 $$ file = jarFile-->Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)[ FD ]
Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)-->Line_41 $$ return ProjectRootManagerImpl.extractLocalPath(path.substring(projectPath.length()))[ FD ]
Line_14 $$ file = jarFile-->Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) [ FD ]
Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) -->Line_17 $$ return VfsUtilCore.getRelativePath(file, contentRoot, '/')[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_38 $$ final String path = VfsUtilCore.urlToPath(url)[ FD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_6 $$ if (file != null) [ FD ]
Line_20 $$ if (path != null) -->Line_21 $$ return path[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)[ FD ]
Line_6 $$ if (file != null) -->Line_39 $$ final String projectPath = projectBaseDir.getPath()[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_3 $$ final Project project = model.getModule().getProject()[ FD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_8 $$ if (file.getFileSystem() instanceof JarFileSystem) [ FD ]
Line_9 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getVirtualFileForJar(file)-->Line_10 $$ if (jarFile == null) [ FD ]
Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)-->Line_26 $$ if (contentRoot != null) [ FD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_35 $$ if (url.startsWith(projectUrl)) [ FD ]
Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)-->Line_27 $$ final String rootUrl = contentRoot.getUrl()[ FD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_17 $$ return VfsUtilCore.getRelativePath(file, contentRoot, '/')[ FD ]
Line_28 $$ if (url.startsWith(rootUrl) && url.length() > rootUrl.length()) -->Line_29 $$ return url.substring(rootUrl.length() + 1)[ CD ]
Line_6 $$ if (file != null) -->Line_34 $$ final String projectUrl = projectBaseDir.getUrl()[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)[ CD ]
Line_10 $$ if (jarFile == null) -->Line_11 $$ LOG.error("Url: \'" + url + "\'; file: " + file)[ CD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) [ FD ]
Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)[ FD ]
Line_6 $$ if (file != null) -->Line_35 $$ if (url.startsWith(projectUrl)) [ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_24 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ FD ]
Line_8 $$ if (file.getFileSystem() instanceof JarFileSystem) -->Line_10 $$ if (jarFile == null) [ CD ]
Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)-->Line_17 $$ return VfsUtilCore.getRelativePath(file, contentRoot, '/')[ FD ]
Line_6 $$ if (file != null) -->Line_26 $$ if (contentRoot != null) [ CD ]
Line_6 $$ if (file != null) -->Line_40 $$ if (path.startsWith(projectPath)) [ CD ]
Line_9 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getVirtualFileForJar(file)-->Line_14 $$ file = jarFile[ FD ]
Line_39 $$ final String projectPath = projectBaseDir.getPath()-->Line_41 $$ return ProjectRootManagerImpl.extractLocalPath(path.substring(projectPath.length()))[ FD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)[ FD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_43 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ FD ]
Line_6 $$ if (file != null) -->Line_8 $$ if (file.getFileSystem() instanceof JarFileSystem) [ CD ]
Line_6 $$ if (file != null) -->Line_7 $$ LOG.assertTrue(file.isValid())[ CD ]
Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) -->Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_36 $$ return url.substring(projectUrl.length())[ FD ]
Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)-->Line_20 $$ if (path != null) [ FD ]
Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)-->Line_40 $$ if (path.startsWith(projectPath)) [ FD ]
Line_6 $$ if (file != null) -->Line_43 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ CD ]
Line_32 $$ final VirtualFile projectBaseDir = contentRoot != null ? contentRoot.getParent() : project.getBaseDir()-->Line_39 $$ final String projectPath = projectBaseDir.getPath()[ FD ]
Line_3 $$ final Project project = model.getModule().getProject()-->Line_19 $$ final String path = collapse2eclipseRelative2OtherModule(project, file)[ FD ]
Line_10 $$ if (jarFile == null) -->Line_12 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ CD ]
Line_14 $$ file = jarFile-->Line_17 $$ return VfsUtilCore.getRelativePath(file, contentRoot, '/')[ FD ]
Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)-->Line_32 $$ final VirtualFile projectBaseDir = contentRoot != null ? contentRoot.getParent() : project.getBaseDir()[ FD ]
Line_4 $$ final VirtualFile contentRoot = getContentRoot(model)-->Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) [ FD ]
Line_34 $$ final String projectUrl = projectBaseDir.getUrl()-->Line_35 $$ if (url.startsWith(projectUrl)) [ FD ]
Line_16 $$ if (contentRoot != null && VfsUtilCore.isAncestor(contentRoot, file, false)) -->Line_20 $$ if (path != null) [ CD ]
Line_3 $$ final Project project = model.getModule().getProject()-->Line_32 $$ final VirtualFile projectBaseDir = contentRoot != null ? contentRoot.getParent() : project.getBaseDir()[ FD ]
Line_6 $$ if (file != null) -->Line_32 $$ final VirtualFile projectBaseDir = contentRoot != null ? contentRoot.getParent() : project.getBaseDir()[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_29 $$ return url.substring(rootUrl.length() + 1)[ FD ]
Line_6 $$ if (file != null) -->Line_24 $$ return ProjectRootManagerImpl.extractLocalPath(url)[ CD ]
Line_26 $$ if (contentRoot != null) -->Line_27 $$ final String rootUrl = contentRoot.getUrl()[ CD ]
Line_8 $$ if (file.getFileSystem() instanceof JarFileSystem) -->Line_9 $$ final VirtualFile jarFile = JarFileSystem.getInstance().getVirtualFileForJar(file)[ CD ]
Line_32 $$ final VirtualFile projectBaseDir = contentRoot != null ? contentRoot.getParent() : project.getBaseDir()-->Line_34 $$ final String projectUrl = projectBaseDir.getUrl()[ FD ]
Line_39 $$ final String projectPath = projectBaseDir.getPath()-->Line_40 $$ if (path.startsWith(projectPath)) [ FD ]
Line_35 $$ if (url.startsWith(projectUrl)) -->Line_36 $$ return url.substring(projectUrl.length())[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_5 $$ VirtualFile file = VirtualFileManager.getInstance().findFileByUrl(url)[ CD ]
Line_26 $$ if (contentRoot != null) -->Line_28 $$ if (url.startsWith(rootUrl) && url.length() > rootUrl.length()) [ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_3 $$ final Project project = model.getModule().getProject()[ CD ]
Line_2 $$ static String collapse2EclipsePath(final String url, final ModuleRootModel model) -->Line_6 $$ if (file != null) [ CD ]
