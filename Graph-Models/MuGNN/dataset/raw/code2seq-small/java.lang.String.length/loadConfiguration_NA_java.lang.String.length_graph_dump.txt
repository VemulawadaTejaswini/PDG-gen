Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_8 $$ copyProperty(AvailableSettings.PASS, props, "password", hikariProps)[ CD ]
Line_14 $$ String key = (String) keyo-->Line_16 $$ hikariProps.setProperty(key.substring(CONFIG_PREFIX.length()), (String) props.get(key))[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_7 $$ copyProperty(AvailableSettings.USER, props, "username", hikariProps)[ CD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_4 $$ copyProperty(AvailableSettings.AUTOCOMMIT, props, "autoCommit", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_3 $$ Properties hikariProps = new Properties()[ CD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_9 $$ copyIsolationSetting(props, hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_10 $$ for (Object keyo : props.keySet()) [ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_16 $$ hikariProps.setProperty(key.substring(CONFIG_PREFIX.length()), (String) props.get(key))[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_19 $$ return new HikariConfig(hikariProps)[ CD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_4 $$ copyProperty(AvailableSettings.AUTOCOMMIT, props, "autoCommit", hikariProps)[ CD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_8 $$ copyProperty(AvailableSettings.PASS, props, "password", hikariProps)[ FD ]
Line_14 $$ String key = (String) keyo-->Line_15 $$ if (key.startsWith(CONFIG_PREFIX)) [ FD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_5 $$ copyProperty(AvailableSettings.DRIVER, props, "driverClassName", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_5 $$ copyProperty(AvailableSettings.DRIVER, props, "driverClassName", hikariProps)[ CD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_7 $$ copyProperty(AvailableSettings.USER, props, "username", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_4 $$ copyProperty(AvailableSettings.AUTOCOMMIT, props, "autoCommit", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_6 $$ copyProperty(AvailableSettings.URL, props, "jdbcUrl", hikariProps)[ FD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_16 $$ hikariProps.setProperty(key.substring(CONFIG_PREFIX.length()), (String) props.get(key))[ FD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_8 $$ copyProperty(AvailableSettings.PASS, props, "password", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_9 $$ copyIsolationSetting(props, hikariProps)[ FD ]
Line_15 $$ if (key.startsWith(CONFIG_PREFIX)) -->Line_16 $$ hikariProps.setProperty(key.substring(CONFIG_PREFIX.length()), (String) props.get(key))[ CD ]
Line_3 $$ Properties hikariProps = new Properties()-->Line_6 $$ copyProperty(AvailableSettings.URL, props, "jdbcUrl", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_7 $$ copyProperty(AvailableSettings.USER, props, "username", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_6 $$ copyProperty(AvailableSettings.URL, props, "jdbcUrl", hikariProps)[ CD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_5 $$ copyProperty(AvailableSettings.DRIVER, props, "driverClassName", hikariProps)[ FD ]
Line_2 $$ public static HikariConfig loadConfiguration(Map props) -->Line_9 $$ copyIsolationSetting(props, hikariProps)[ CD ]
