Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_5 $$ if (length >= 2 * n && text.startsWith(quote) && text.endsWith(quote)) [ CD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_4 $$ final int n = quote.length()[ FD ]
Line_5 $$ if (length >= 2 * n && text.startsWith(quote) && text.endsWith(quote)) -->Line_6 $$ return Pair.create(prefix + text.substring(0, n), text.substring(length - n))[ CD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_4 $$ final int n = quote.length()[ CD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_3 $$ final int length = text.length()[ CD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_6 $$ return Pair.create(prefix + text.substring(0, n), text.substring(length - n))[ FD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_8 $$ return null[ CD ]
Line_4 $$ final int n = quote.length()-->Line_6 $$ return Pair.create(prefix + text.substring(0, n), text.substring(length - n))[ FD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_5 $$ if (length >= 2 * n && text.startsWith(quote) && text.endsWith(quote)) [ FD ]
Line_2 $$ private static Pair<String, String> getQuotes(@NotNull String text, @NotNull String prefix, @NotNull String quote) -->Line_3 $$ final int length = text.length()[ FD ]
