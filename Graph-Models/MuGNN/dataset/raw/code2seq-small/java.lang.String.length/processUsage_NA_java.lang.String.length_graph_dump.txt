Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_7 $$ PsiField field = fieldDescriptor.getField()[ CD ]
Line_22 $$ if (opType == JavaTokenType.EQ) -->Line_24 $$ if (!processSet)[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_74 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) [ FD ]
Line_4 $$ if (!(element instanceof PsiReferenceExpression))-->Line_5 $$ return false[ CD ]
Line_22 $$ if (opType == JavaTokenType.EQ) -->Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)[ CD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_38 $$ opName = opName.substring(0, opName.length() - 1)[ CD ]
Line_43 $$ getExpr = getterCall-->Line_49 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_52 $$ if (processSet) [ CD ]
Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_61 $$ assignment.replace(setExpr)[ FD ]
Line_59 $$ setExpr = assignment1-->Line_61 $$ assignment.replace(setExpr)[ FD ]
Line_66 $$ IElementType sign-->Line_68 $$ sign = ((PsiPrefixExpression) parent).getOperationTokenType()[ FD ]
Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()-->Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_84 $$ text = "a-1"-->Line_86 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_70 $$ sign = ((PsiPostfixExpression) parent).getOperationTokenType()-->Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) [ FD ]
Line_59 $$ setExpr = assignment1-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_102 $$ PsiMethodCallExpression methodCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()[ FD ]
Line_26 $$ final PsiExpression setterArgument = assignment.getRExpression()-->Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_58 $$ assignment1.getRExpression().replace(binExpr)[ FD ]
Line_73 $$ if (processGet) -->Line_74 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ CD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_68 $$ sign = ((PsiPrefixExpression) parent).getOperationTokenType()-->Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) [ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_104 $$ expr.replace(methodCall)[ FD ]
Line_52 $$ if (processSet) -->Line_55 $$ text = "a = b"[ CD ]
Line_51 $$ PsiExpression setExpr-->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_7 $$ PsiField field = fieldDescriptor.getField()-->Line_9 $$ boolean processSet = descriptor.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)[ FD ]
Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_96 $$ setExpr = assignment[ FD ]
Line_15 $$ final PsiElement parent = expr.getParent()-->Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) [ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_22 $$ if (opType == JavaTokenType.EQ) [ CD ]
Line_82 $$ text = "a+1"-->Line_84 $$ text = "a-1"[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_50 $$ binExpr.getROperand().replace(assignment.getRExpression())[ CD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_103 $$ if (methodCall != null) [ CD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_87 $$ binExpr.getLOperand().replace(getExpr)[ CD ]
Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)-->Line_43 $$ getExpr = getterCall[ FD ]
Line_22 $$ if (opType == JavaTokenType.EQ) -->Line_28 $$ if (methodCall != null) [ CD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_29 $$ assignment.replace(methodCall)[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_57 $$ assignment1.getLExpression().replace(expr)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_37 $$ LOG.assertTrue(StringUtil.endsWithChar(opName, '='))[ CD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)[ FD ]
Line_59 $$ setExpr = assignment1-->Line_96 $$ setExpr = assignment[ FD ]
Line_89 $$ if (processSet) -->Line_95 $$ assignment.getRExpression().replace(binExpr)[ CD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_96 $$ setExpr = assignment[ FD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) [ CD ]
Line_103 $$ if (methodCall != null) -->Line_104 $$ expr.replace(methodCall)[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_3 $$ final PsiElement element = usage.getElement()[ CD ]
Line_55 $$ text = "a = b"-->Line_92 $$ text = "a = b"[ FD ]
Line_10 $$ if (!processGet && !processSet)-->Line_11 $$ return true[ CD ]
Line_55 $$ text = "a = b"-->Line_93 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_10 $$ if (!processGet && !processSet)[ CD ]
Line_52 $$ if (processSet) -->Line_57 $$ assignment1.getLExpression().replace(expr)[ CD ]
Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()-->Line_93 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_22 $$ if (opType == JavaTokenType.EQ) -->Line_26 $$ final PsiExpression setterArgument = assignment.getRExpression()[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_3 $$ final PsiElement element = usage.getElement()[ FD ]
Line_55 $$ text = "a = b"-->Line_82 $$ text = "a+1"[ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent[ CD ]
Line_28 $$ if (methodCall != null) -->Line_29 $$ assignment.replace(methodCall)[ CD ]
Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) -->Line_82 $$ text = "a+1"[ CD ]
Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()[ CD ]
Line_51 $$ PsiExpression setExpr-->Line_96 $$ setExpr = assignment[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_40 $$ if (processGet) [ CD ]
Line_89 $$ if (processSet) -->Line_94 $$ assignment.getLExpression().replace(expr)[ CD ]
Line_52 $$ if (processSet) -->Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ CD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_87 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_89 $$ if (processSet) -->Line_96 $$ setExpr = assignment[ CD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_102 $$ PsiMethodCallExpression methodCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ CD ]
Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)-->Line_57 $$ assignment1.getLExpression().replace(expr)[ FD ]
Line_18 $$ if (assignment.getRExpression() == null)-->Line_19 $$ return true[ CD ]
Line_76 $$ getExpr = getterCall-->Line_87 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_51 $$ PsiExpression setExpr[ CD ]
Line_82 $$ text = "a+1"-->Line_92 $$ text = "a = b"[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)-->Line_75 $$ if (getterCall != null) [ FD ]
Line_15 $$ final PsiElement parent = expr.getParent()-->Line_67 $$ if (parent instanceof PsiPrefixExpression) [ FD ]
Line_67 $$ if (parent instanceof PsiPrefixExpression) -->Line_70 $$ sign = ((PsiPostfixExpression) parent).getOperationTokenType()[ CD ]
Line_55 $$ text = "a = b"-->Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_21 $$ IElementType opType = opSign.getTokenType()[ CD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_74 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_39 $$ PsiExpression getExpr = expr-->Line_49 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_66 $$ IElementType sign[ CD ]
Line_82 $$ text = "a+1"-->Line_93 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_96 $$ setExpr = assignment[ FD ]
Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)-->Line_104 $$ expr.replace(methodCall)[ FD ]
Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)-->Line_29 $$ assignment.replace(methodCall)[ FD ]
Line_96 $$ setExpr = assignment-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_75 $$ if (getterCall != null) -->Line_76 $$ getExpr = getterCall[ CD ]
Line_20 $$ PsiJavaToken opSign = assignment.getOperationSign()-->Line_21 $$ IElementType opType = opSign.getTokenType()[ FD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_18 $$ if (assignment.getRExpression() == null)[ FD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_95 $$ assignment.getRExpression().replace(binExpr)[ FD ]
Line_40 $$ if (processGet) -->Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ CD ]
Line_8 $$ boolean processGet = descriptor.isToEncapsulateGet()-->Line_10 $$ if (!processGet && !processSet)[ FD ]
Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()-->Line_86 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_26 $$ final PsiExpression setterArgument = assignment.getRExpression()[ FD ]
Line_89 $$ if (processSet) -->Line_92 $$ text = "a = b"[ CD ]
Line_55 $$ text = "a = b"-->Line_84 $$ text = "a-1"[ FD ]
Line_51 $$ PsiExpression setExpr-->Line_59 $$ setExpr = assignment1[ FD ]
Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_59 $$ setExpr = assignment1[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_49 $$ binExpr.getLOperand().replace(getExpr)[ CD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_102 $$ PsiMethodCallExpression methodCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_52 $$ if (processSet) -->Line_58 $$ assignment1.getRExpression().replace(binExpr)[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_102 $$ PsiMethodCallExpression methodCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_68 $$ sign = ((PsiPrefixExpression) parent).getOperationTokenType()-->Line_70 $$ sign = ((PsiPostfixExpression) parent).getOperationTokenType()[ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) [ CD ]
Line_40 $$ if (processGet) -->Line_42 $$ if (getterCall != null) [ CD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_49 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_39 $$ PsiExpression getExpr = expr-->Line_87 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_110 $$ return true[ CD ]
Line_84 $$ text = "a-1"-->Line_92 $$ text = "a = b"[ FD ]
Line_39 $$ PsiExpression getExpr = expr-->Line_76 $$ getExpr = getterCall[ FD ]
Line_66 $$ IElementType sign-->Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) [ FD ]
Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)-->Line_42 $$ if (getterCall != null) [ FD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_61 $$ assignment.replace(setExpr)[ FD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_73 $$ if (processGet) [ CD ]
Line_51 $$ PsiExpression setExpr-->Line_61 $$ assignment.replace(setExpr)[ FD ]
Line_66 $$ IElementType sign-->Line_70 $$ sign = ((PsiPostfixExpression) parent).getOperationTokenType()[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_4 $$ if (!(element instanceof PsiReferenceExpression))[ CD ]
Line_81 $$ if (sign == JavaTokenType.PLUSPLUS) -->Line_84 $$ text = "a-1"[ CD ]
Line_52 $$ if (processSet) -->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ CD ]
Line_9 $$ boolean processSet = descriptor.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)-->Line_24 $$ if (!processSet)[ FD ]
Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)-->Line_59 $$ setExpr = assignment1[ FD ]
Line_51 $$ PsiExpression setExpr-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_15 $$ final PsiElement parent = expr.getParent()[ FD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_7 $$ PsiField field = fieldDescriptor.getField()[ FD ]
Line_67 $$ if (parent instanceof PsiPrefixExpression) -->Line_68 $$ sign = ((PsiPrefixExpression) parent).getOperationTokenType()[ CD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_100 $$ if (!processGet)[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_9 $$ boolean processSet = descriptor.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)[ CD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_74 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)[ FD ]
Line_21 $$ IElementType opType = opSign.getTokenType()-->Line_22 $$ if (opType == JavaTokenType.EQ) [ FD ]
Line_73 $$ if (processGet) -->Line_75 $$ if (getterCall != null) [ CD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_20 $$ PsiJavaToken opSign = assignment.getOperationSign()[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()[ FD ]
Line_52 $$ if (processSet) -->Line_59 $$ setExpr = assignment1[ CD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_94 $$ assignment.getLExpression().replace(expr)[ FD ]
Line_9 $$ boolean processSet = descriptor.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)-->Line_10 $$ if (!processGet && !processSet)[ FD ]
Line_84 $$ text = "a-1"-->Line_93 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_39 $$ PsiExpression getExpr = expr[ CD ]
Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_8 $$ boolean processGet = descriptor.isToEncapsulateGet()[ CD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_67 $$ if (parent instanceof PsiPrefixExpression) [ CD ]
Line_56 $$ PsiAssignmentExpression assignment1 = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)-->Line_58 $$ assignment1.getRExpression().replace(binExpr)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_100 $$ if (!processGet)-->Line_101 $$ return true[ CD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_50 $$ binExpr.getROperand().replace(assignment.getRExpression())[ FD ]
Line_8 $$ boolean processGet = descriptor.isToEncapsulateGet()-->Line_100 $$ if (!processGet)[ FD ]
Line_82 $$ text = "a+1"-->Line_86 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()[ CD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_9 $$ boolean processSet = descriptor.isToEncapsulateSet() && !field.hasModifierProperty(PsiModifier.FINAL)[ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_20 $$ PsiJavaToken opSign = assignment.getOperationSign()[ CD ]
Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)-->Line_28 $$ if (methodCall != null) [ FD ]
Line_14 $$ final PsiReferenceExpression expr = (PsiReferenceExpression) element-->Line_94 $$ assignment.getLExpression().replace(expr)[ FD ]
Line_43 $$ getExpr = getterCall-->Line_87 $$ binExpr.getLOperand().replace(getExpr)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_61 $$ assignment.replace(setExpr)[ CD ]
Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_42 $$ if (getterCall != null) -->Line_43 $$ getExpr = getterCall[ CD ]
Line_89 $$ if (processSet) -->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ CD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_98 $$ parent.replace(setExpr)[ CD ]
Line_27 $$ PsiMethodCallExpression methodCall = createSetterCall(fieldDescriptor, setterArgument, expr, descriptor.getTargetClass(), setter)-->Line_103 $$ if (methodCall != null) [ FD ]
Line_39 $$ PsiExpression getExpr = expr-->Line_43 $$ getExpr = getterCall[ FD ]
Line_12 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(descriptor.getTargetClass().getProject()).getElementFactory()-->Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)[ FD ]
Line_65 $$ if (RefactoringUtil.isPlusPlusOrMinusMinus(parent)) -->Line_89 $$ if (processSet) [ CD ]
Line_59 $$ setExpr = assignment1-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_92 $$ text = "a = b"-->Line_93 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) -->Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)[ CD ]
Line_51 $$ PsiExpression setExpr-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_15 $$ final PsiElement parent = expr.getParent()-->Line_98 $$ parent.replace(setExpr)[ FD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_48 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, expr)-->Line_50 $$ binExpr.getROperand().replace(assignment.getRExpression())[ FD ]
Line_17 $$ PsiAssignmentExpression assignment = (PsiAssignmentExpression) parent-->Line_95 $$ assignment.getRExpression().replace(binExpr)[ FD ]
Line_41 $$ final PsiMethodCallExpression getterCall = createGetterCall(fieldDescriptor, expr, descriptor.getTargetClass(), getter)-->Line_76 $$ getExpr = getterCall[ FD ]
Line_22 $$ if (opType == JavaTokenType.EQ) -->Line_33 $$ if (opType == JavaTokenType.ASTERISKEQ || opType == JavaTokenType.DIVEQ || opType == JavaTokenType.PERCEQ || opType == JavaTokenType.PLUSEQ || opType == JavaTokenType.MINUSEQ || opType == JavaTokenType.LTLTEQ || opType == JavaTokenType.GTGTEQ || opType == JavaTokenType.GTGTGTEQ || opType == JavaTokenType.ANDEQ || opType == JavaTokenType.OREQ || opType == JavaTokenType.XOREQ) [ CD ]
Line_55 $$ text = "a = b"-->Line_86 $$ PsiBinaryExpression binExpr = (PsiBinaryExpression) factory.createExpressionFromText(text, null)[ FD ]
Line_16 $$ if (parent instanceof PsiAssignmentExpression && expr.equals(((PsiAssignmentExpression) parent).getLExpression())) -->Line_18 $$ if (assignment.getRExpression() == null)[ CD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_90 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_6 $$ final FieldDescriptor fieldDescriptor = usage.getFieldDescriptor()-->Line_53 $$ setExpr = createSetterCall(fieldDescriptor, binExpr, expr, descriptor.getTargetClass(), setter)[ FD ]
Line_24 $$ if (!processSet)-->Line_25 $$ return true[ CD ]
Line_43 $$ getExpr = getterCall-->Line_76 $$ getExpr = getterCall[ FD ]
Line_2 $$ public boolean processUsage(@NotNull EncapsulateFieldUsageInfo usage, @NotNull EncapsulateFieldsDescriptor descriptor, PsiMethod setter, PsiMethod getter) -->Line_8 $$ boolean processGet = descriptor.isToEncapsulateGet()[ FD ]
