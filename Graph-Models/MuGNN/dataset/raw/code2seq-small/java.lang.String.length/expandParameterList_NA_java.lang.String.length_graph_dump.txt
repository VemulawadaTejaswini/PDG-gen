Line_22 $$ int loc = query.indexOf(placeholder)-->Line_23 $$ if (loc < 0) [ FD ]
Line_7 $$ Collection vals = (Collection) typedList.getValue()-->Line_38 $$ Iterator iter = vals.iterator()[ FD ]
Line_19 $$ if (query == null) -->Line_20 $$ return null[ CD ]
Line_48 $$ if (iter.hasNext()) -->Line_49 $$ list.append(", ")[ CD ]
Line_12 $$ if (inExprLimit > 0 && vals.size() > inExprLimit) -->Line_13 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ CD ]
Line_38 $$ Iterator iter = vals.iterator()-->Line_40 $$ while (iter.hasNext()) [ FD ]
Line_18 $$ String placeholder = paramPrefix + name-->Line_52 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_7 $$ Collection vals = (Collection) typedList.getValue()-->Line_13 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_40 $$ while (iter.hasNext()) -->Line_44 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ CD ]
Line_38 $$ Iterator iter = vals.iterator()-->Line_48 $$ if (iter.hasNext()) [ FD ]
Line_18 $$ String placeholder = paramPrefix + name-->Line_27 $$ String afterPlaceholder = query.substring(loc + placeholder.length())[ FD ]
Line_7 $$ Collection vals = (Collection) typedList.getValue()-->Line_12 $$ if (inExprLimit > 0 && vals.size() > inExprLimit) [ FD ]
Line_37 $$ StringBuilder list = new StringBuilder(16)-->Line_52 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_38 $$ Iterator iter = vals.iterator()-->Line_44 $$ if (namedParamsCopy.put(alias, new TypedValue(type, iter.next())) != null) [ FD ]
Line_40 $$ while (iter.hasNext()) -->Line_48 $$ if (iter.hasNext()) [ CD ]
Line_26 $$ String beforePlaceholder = query.substring(0, loc)-->Line_52 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_22 $$ int loc = query.indexOf(placeholder)-->Line_26 $$ String beforePlaceholder = query.substring(0, loc)[ FD ]
Line_40 $$ while (iter.hasNext()) -->Line_47 $$ list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias)[ CD ]
Line_37 $$ StringBuilder list = new StringBuilder(16)-->Line_47 $$ list.append(ParserHelper.HQL_VARIABLE_PREFIX).append(alias)[ FD ]
Line_23 $$ if (loc < 0) -->Line_24 $$ return query[ CD ]
Line_27 $$ String afterPlaceholder = query.substring(loc + placeholder.length())-->Line_52 $$ return StringHelper.replace(beforePlaceholder, afterPlaceholder, placeholder.toString(), list.toString(), true, true)[ FD ]
Line_11 $$ final int inExprLimit = dialect.getInExpressionCountLimit()-->Line_13 $$ log.tooManyInExpressions(dialect.getClass().getName(), inExprLimit, name, vals.size())[ FD ]
Line_18 $$ String placeholder = paramPrefix + name-->Line_22 $$ int loc = query.indexOf(placeholder)[ FD ]
Line_7 $$ Collection vals = (Collection) typedList.getValue()-->Line_31 $$ if (vals.size() == 1 && isEnclosedInParens) [ FD ]
Line_37 $$ StringBuilder list = new StringBuilder(16)-->Line_49 $$ list.append(", ")[ FD ]
Line_31 $$ if (vals.size() == 1 && isEnclosedInParens) -->Line_35 $$ return query[ CD ]
