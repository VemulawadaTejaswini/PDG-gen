Line_9 $$ if (terminalWidth < 75) -->Line_12 $$ reprintLine("80 characters wide")[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_5 $$ int progressPercentage = (int) min(99, percentage(stats.getCompletedSplits(), stats.getTotalSplits()))[ FD ]
Line_5 $$ int progressPercentage = (int) min(99, percentage(stats.getCompletedSplits(), stats.getTotalSplits()))-->Line_15 $$ reprintLine(String.format("%s %d%%", formatTime(wallTime), progressPercentage))[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_28 $$ if (debug) [ CD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_6 $$ if (console.isRealTerminal()) [ CD ]
Line_22 $$ if (debug && (url.length() < terminalWidth)) -->Line_23 $$ reprintLine(url)[ CD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_55 $$ String querySummary = String.format("Query %s [%s] i[%s %s %s] o[%s %s %s] splits[%,d/%,d/%,d]", results.getId(), stats.getState(), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ FD ]
Line_41 $$ if (stats.isScheduled()) -->Line_44 $$ reprintLine(progressLine)[ CD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())[ FD ]
Line_31 $$ Duration cpuTime = millis(stats.getCpuTimeMillis())-->Line_32 $$ String cpuTimeSummary = String.format("CPU Time: %.1fs total, %5s rows/s, %8s, %d%% active", cpuTime.getValue(SECONDS), formatCountRate(stats.getProcessedRows(), cpuTime, false), formatDataRate(bytes(stats.getProcessedBytes()), cpuTime, true), (int) percentage(stats.getCpuTimeMillis(), stats.getWallTimeMillis()))[ FD ]
Line_40 $$ int progressWidth = (min(terminalWidth, 100) - 75) + 17-->Line_46 $$ String progressBar = formatProgressBar(progressWidth, Ints.saturatedCast(nanosSince(start).roundTo(SECONDS)))[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_32 $$ String cpuTimeSummary = String.format("CPU Time: %.1fs total, %5s rows/s, %8s, %d%% active", cpuTime.getValue(SECONDS), formatCountRate(stats.getProcessedRows(), cpuTime, false), formatDataRate(bytes(stats.getProcessedBytes()), cpuTime, true), (int) percentage(stats.getCpuTimeMillis(), stats.getWallTimeMillis()))[ FD ]
Line_35 $$ String perNodeSummary = String.format("Per Node: %.1f parallelism, %5s rows/s, %8s", parallelism / nodes, formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false), formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true))-->Line_36 $$ reprintLine(perNodeSummary)[ FD ]
Line_9 $$ if (terminalWidth < 75) -->Line_11 $$ reprintLine("must be at least")[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_53 $$ printStageTree(stats.getRootStage(), "", new AtomicInteger())[ FD ]
Line_41 $$ if (stats.isScheduled()) -->Line_48 $$ reprintLine(progressLine)[ CD ]
Line_41 $$ if (stats.isScheduled()) -->Line_47 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s]", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar)[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_25 $$ if ((nodes == 0) || (stats.getTotalSplits() == 0)) [ FD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_4 $$ Duration wallTime = nanosSince(start)[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_22 $$ if (debug && (url.length() < terminalWidth)) [ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_8 $$ int terminalWidth = console.getWidth()[ CD ]
Line_28 $$ if (debug) -->Line_30 $$ reprintLine(splitsSummary)[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_7 $$ reprintLine("")[ CD ]
Line_42 $$ String progressBar = formatProgressBar(progressWidth, stats.getCompletedSplits(), max(0, stats.getRunningSplits()), stats.getTotalSplits())-->Line_47 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s]", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar)[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_55 $$ String querySummary = String.format("Query %s [%s] i[%s %s %s] o[%s %s %s] splits[%,d/%,d/%,d]", results.getId(), stats.getState(), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ FD ]
Line_40 $$ int progressWidth = (min(terminalWidth, 100) - 75) + 17-->Line_42 $$ String progressBar = formatProgressBar(progressWidth, stats.getCompletedSplits(), max(0, stats.getRunningSplits()), stats.getTotalSplits())[ FD ]
Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())-->Line_56 $$ reprintLine(querySummary)[ FD ]
Line_21 $$ String url = results.getInfoUri() + "?pretty"-->Line_23 $$ reprintLine(url)[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_55 $$ String querySummary = String.format("Query %s [%s] i[%s %s %s] o[%s %s %s] splits[%,d/%,d/%,d]", results.getId(), stats.getState(), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ CD ]
Line_28 $$ if (debug) -->Line_29 $$ String splitsSummary = String.format("Splits:   %,d queued, %,d running, %,d done", stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ CD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_55 $$ String querySummary = String.format("Query %s [%s] i[%s %s %s] o[%s %s %s] splits[%,d/%,d/%,d]", results.getId(), stats.getState(), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, false), stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ FD ]
Line_18 $$ int nodes = stats.getNodes()-->Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_50 $$ reprintLine("")[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_53 $$ printStageTree(stats.getRootStage(), "", new AtomicInteger())[ CD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_3 $$ StatementStats stats = results.getStats()[ FD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_3 $$ StatementStats stats = results.getStats()[ CD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_5 $$ int progressPercentage = (int) min(99, percentage(stats.getCompletedSplits(), stats.getTotalSplits()))[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_56 $$ reprintLine(querySummary)[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_31 $$ Duration cpuTime = millis(stats.getCpuTimeMillis())[ FD ]
Line_28 $$ if (debug) -->Line_35 $$ String perNodeSummary = String.format("Per Node: %.1f parallelism, %5s rows/s, %8s", parallelism / nodes, formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false), formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true))[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_47 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s]", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar)[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_18 $$ int nodes = stats.getNodes()[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_18 $$ int nodes = stats.getNodes()[ CD ]
Line_9 $$ if (terminalWidth < 75) -->Line_15 $$ reprintLine(String.format("%s %d%%", formatTime(wallTime), progressPercentage))[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())[ FD ]
Line_8 $$ int terminalWidth = console.getWidth()-->Line_9 $$ if (terminalWidth < 75) [ FD ]
Line_8 $$ int terminalWidth = console.getWidth()-->Line_40 $$ int progressWidth = (min(terminalWidth, 100) - 75) + 17[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_21 $$ String url = results.getInfoUri() + "?pretty"[ CD ]
Line_28 $$ if (debug) -->Line_32 $$ String cpuTimeSummary = String.format("CPU Time: %.1fs total, %5s rows/s, %8s, %d%% active", cpuTime.getValue(SECONDS), formatCountRate(stats.getProcessedRows(), cpuTime, false), formatDataRate(bytes(stats.getProcessedBytes()), cpuTime, true), (int) percentage(stats.getCpuTimeMillis(), stats.getWallTimeMillis()))[ CD ]
Line_41 $$ if (stats.isScheduled()) -->Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_25 $$ if ((nodes == 0) || (stats.getTotalSplits() == 0)) [ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_42 $$ String progressBar = formatProgressBar(progressWidth, stats.getCompletedSplits(), max(0, stats.getRunningSplits()), stats.getTotalSplits())[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)[ FD ]
Line_41 $$ if (stats.isScheduled()) -->Line_42 $$ String progressBar = formatProgressBar(progressWidth, stats.getCompletedSplits(), max(0, stats.getRunningSplits()), stats.getTotalSplits())[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_35 $$ String perNodeSummary = String.format("Per Node: %.1f parallelism, %5s rows/s, %8s", parallelism / nodes, formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false), formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true))[ FD ]
Line_41 $$ if (stats.isScheduled()) -->Line_46 $$ String progressBar = formatProgressBar(progressWidth, Ints.saturatedCast(nanosSince(start).roundTo(SECONDS)))[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_52 $$ reprintLine(stagesHeader)[ CD ]
Line_28 $$ if (debug) -->Line_37 $$ reprintLine(String.format("Parallelism: %.1f", parallelism))[ CD ]
Line_34 $$ double parallelism = cpuTime.getValue(MILLISECONDS) / wallTime.getValue(MILLISECONDS)-->Line_37 $$ reprintLine(String.format("Parallelism: %.1f", parallelism))[ FD ]
Line_28 $$ if (debug) -->Line_36 $$ reprintLine(perNodeSummary)[ CD ]
Line_9 $$ if (terminalWidth < 75) -->Line_16 $$ return[ CD ]
Line_9 $$ if (terminalWidth < 75) -->Line_13 $$ reprintLine("")[ CD ]
Line_28 $$ if (debug) -->Line_33 $$ reprintLine(cpuTimeSummary)[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_9 $$ if (terminalWidth < 75) [ CD ]
Line_5 $$ int progressPercentage = (int) min(99, percentage(stats.getCompletedSplits(), stats.getTotalSplits()))-->Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)[ FD ]
Line_42 $$ String progressBar = formatProgressBar(progressWidth, stats.getCompletedSplits(), max(0, stats.getRunningSplits()), stats.getTotalSplits())-->Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_41 $$ if (stats.isScheduled()) [ FD ]
Line_9 $$ if (terminalWidth < 75) -->Line_14 $$ reprintLine(stats.getState())[ CD ]
Line_28 $$ if (debug) -->Line_31 $$ Duration cpuTime = millis(stats.getCpuTimeMillis())[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_20 $$ reprintLine(querySummary)[ CD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_15 $$ reprintLine(String.format("%s %d%%", formatTime(wallTime), progressPercentage))[ FD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_29 $$ String splitsSummary = String.format("Splits:   %,d queued, %,d running, %,d done", stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())[ FD ]
Line_32 $$ String cpuTimeSummary = String.format("CPU Time: %.1fs total, %5s rows/s, %8s, %d%% active", cpuTime.getValue(SECONDS), formatCountRate(stats.getProcessedRows(), cpuTime, false), formatDataRate(bytes(stats.getProcessedBytes()), cpuTime, true), (int) percentage(stats.getCpuTimeMillis(), stats.getWallTimeMillis()))-->Line_33 $$ reprintLine(cpuTimeSummary)[ FD ]
Line_51 $$ String stagesHeader = String.format("%10s%1s  %5s  %6s  %5s  %7s  %6s  %5s  %5s", "STAGE", "S", "ROWS", "ROWS/s", "BYTES", "BYTES/s", "QUEUED", "RUN", "DONE")-->Line_52 $$ reprintLine(stagesHeader)[ FD ]
Line_31 $$ Duration cpuTime = millis(stats.getCpuTimeMillis())-->Line_34 $$ double parallelism = cpuTime.getValue(MILLISECONDS) / wallTime.getValue(MILLISECONDS)[ FD ]
Line_25 $$ if ((nodes == 0) || (stats.getTotalSplits() == 0)) -->Line_26 $$ return[ CD ]
Line_3 $$ StatementStats stats = results.getStats()-->Line_14 $$ reprintLine(stats.getState())[ FD ]
Line_21 $$ String url = results.getInfoUri() + "?pretty"-->Line_22 $$ if (debug && (url.length() < terminalWidth)) [ FD ]
Line_28 $$ if (debug) -->Line_34 $$ double parallelism = cpuTime.getValue(MILLISECONDS) / wallTime.getValue(MILLISECONDS)[ CD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_47 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s]", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar)[ FD ]
Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)-->Line_48 $$ reprintLine(progressLine)[ FD ]
Line_2 $$ private void printQueryInfo(QueryResults results) -->Line_21 $$ String url = results.getInfoUri() + "?pretty"[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_51 $$ String stagesHeader = String.format("%10s%1s  %5s  %6s  %5s  %7s  %6s  %5s  %5s", "STAGE", "S", "ROWS", "ROWS/s", "BYTES", "BYTES/s", "QUEUED", "RUN", "DONE")[ CD ]
Line_29 $$ String splitsSummary = String.format("Splits:   %,d queued, %,d running, %,d done", stats.getQueuedSplits(), stats.getRunningSplits(), stats.getCompletedSplits())-->Line_30 $$ reprintLine(splitsSummary)[ FD ]
Line_9 $$ if (terminalWidth < 75) -->Line_10 $$ reprintLine("WARNING: Terminal")[ CD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_35 $$ String perNodeSummary = String.format("Per Node: %.1f parallelism, %5s rows/s, %8s", parallelism / nodes, formatCountRate((double) stats.getProcessedRows() / nodes, wallTime, false), formatDataRate(bytes(stats.getProcessedBytes() / nodes), wallTime, true))[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_41 $$ if (stats.isScheduled()) [ CD ]
Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)-->Line_44 $$ reprintLine(progressLine)[ FD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_43 $$ String progressLine = String.format("%s [%5s rows, %6s] [%5s rows/s, %8s] [%s] %d%%", formatTime(wallTime), formatCount(stats.getProcessedRows()), formatDataSize(bytes(stats.getProcessedBytes()), true), formatCountRate(stats.getProcessedRows(), wallTime, false), formatDataRate(bytes(stats.getProcessedBytes()), wallTime, true), progressBar, progressPercentage)[ FD ]
Line_4 $$ Duration wallTime = nanosSince(start)-->Line_34 $$ double parallelism = cpuTime.getValue(MILLISECONDS) / wallTime.getValue(MILLISECONDS)[ FD ]
Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())-->Line_20 $$ reprintLine(querySummary)[ FD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_19 $$ String querySummary = String.format("Query %s, %s, %,d %s, %,d splits", results.getId(), stats.getState(), nodes, pluralize("node", nodes), stats.getTotalSplits())[ CD ]
Line_6 $$ if (console.isRealTerminal()) -->Line_40 $$ int progressWidth = (min(terminalWidth, 100) - 75) + 17[ CD ]
