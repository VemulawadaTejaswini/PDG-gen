Line_30 $$ Properties properties = readProperties(resolveMapFile)-->Line_34 $$ assertNull(properties.getProperty("test:moduleIgnored:jar:1"))[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_6 $$ VirtualFile moduleB = createModulePom("moduleB", "<groupId>test</groupId>" + "<artifactId>moduleB</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>moduleA</artifactId>" + "    <version>1</version>" + "  </dependency>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>moduleIgnored</artifactId>" + "    <version>1</version>" + "  </dependency>" + "</dependencies>")[ CD ]
Line_30 $$ Properties properties = readProperties(resolveMapFile)-->Line_31 $$ assertEquals(moduleA.getPath(), properties.getProperty("test:moduleA:pom:1"))[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_7 $$ MavenProjectsManager.getInstance(myProject).setIgnoredFilesPaths(Collections.singletonList(moduleIgnored.getPath()))[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_34 $$ assertNull(properties.getProperty("test:moduleIgnored:jar:1"))[ CD ]
Line_5 $$ VirtualFile moduleIgnored = createModulePom("moduleIgnored", "<groupId>test</groupId>" + "<artifactId>moduleIgnored</artifactId>" + "<version>1</version>")-->Line_7 $$ MavenProjectsManager.getInstance(myProject).setIgnoredFilesPaths(Collections.singletonList(moduleIgnored.getPath()))[ FD ]
Line_23 $$ for (String param : parameters.getVMParametersList().getParameters()) -->Line_24 $$ if (param.startsWith(prefix)) [ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_4 $$ VirtualFile moduleA = createModulePom("moduleA", "<groupId>test</groupId>" + "<artifactId>moduleA</artifactId>" + "<version>1</version>")[ CD ]
Line_18 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(myProject).getSettings().clone()-->Line_20 $$ JavaParameters parameters = MavenExternalParameters.createJavaParameters(myProject, runnerParameters, MavenProjectsManager.getInstance(myProject).getGeneralSettings(), runnerSettings)[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_22 $$ String prefix = "-D" + MavenModuleMap.PATHS_FILE_PROPERTY + "="[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_8 $$ importProject()[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_18 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(myProject).getSettings().clone()[ CD ]
Line_4 $$ VirtualFile moduleA = createModulePom("moduleA", "<groupId>test</groupId>" + "<artifactId>moduleA</artifactId>" + "<version>1</version>")-->Line_31 $$ assertEquals(moduleA.getPath(), properties.getProperty("test:moduleA:pom:1"))[ FD ]
Line_30 $$ Properties properties = readProperties(resolveMapFile)-->Line_32 $$ assert properties.getProperty("test:moduleA:jar:1").endsWith("/moduleA/target/classes")[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_17 $$ runnerParameters.setResolveToWorkspace(true)[ CD ]
Line_24 $$ if (param.startsWith(prefix)) -->Line_25 $$ resolveMapFile = param.substring(prefix.length())[ CD ]
Line_16 $$ MavenRunnerParameters runnerParameters = new MavenRunnerParameters(moduleB.getParent().getPath(), false, Collections.singletonList("jetty:run"), Collections.<String, Boolean>emptyMap())-->Line_20 $$ JavaParameters parameters = MavenExternalParameters.createJavaParameters(myProject, runnerParameters, MavenProjectsManager.getInstance(myProject).getGeneralSettings(), runnerSettings)[ FD ]
Line_21 $$ String resolveMapFile = null-->Line_29 $$ assertNotNull(resolveMapFile)[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_20 $$ JavaParameters parameters = MavenExternalParameters.createJavaParameters(myProject, runnerParameters, MavenProjectsManager.getInstance(myProject).getGeneralSettings(), runnerSettings)[ CD ]
Line_6 $$ VirtualFile moduleB = createModulePom("moduleB", "<groupId>test</groupId>" + "<artifactId>moduleB</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>moduleA</artifactId>" + "    <version>1</version>" + "  </dependency>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>moduleIgnored</artifactId>" + "    <version>1</version>" + "  </dependency>" + "</dependencies>")-->Line_16 $$ MavenRunnerParameters runnerParameters = new MavenRunnerParameters(moduleB.getParent().getPath(), false, Collections.singletonList("jetty:run"), Collections.<String, Boolean>emptyMap())[ FD ]
Line_16 $$ MavenRunnerParameters runnerParameters = new MavenRunnerParameters(moduleB.getParent().getPath(), false, Collections.singletonList("jetty:run"), Collections.<String, Boolean>emptyMap())-->Line_17 $$ runnerParameters.setResolveToWorkspace(true)[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_21 $$ String resolveMapFile = null[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_10 $$ AccessToken accessToken = WriteAction.start()[ CD ]
Line_20 $$ JavaParameters parameters = MavenExternalParameters.createJavaParameters(myProject, runnerParameters, MavenProjectsManager.getInstance(myProject).getGeneralSettings(), runnerSettings)-->Line_23 $$ for (String param : parameters.getVMParametersList().getParameters()) [ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_30 $$ Properties properties = readProperties(resolveMapFile)[ CD ]
Line_21 $$ String resolveMapFile = null-->Line_25 $$ resolveMapFile = param.substring(prefix.length())[ FD ]
Line_10 $$ AccessToken accessToken = WriteAction.start()-->Line_14 $$ accessToken.finish()[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_29 $$ assertNotNull(resolveMapFile)[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_31 $$ assertEquals(moduleA.getPath(), properties.getProperty("test:moduleA:pom:1"))[ CD ]
Line_22 $$ String prefix = "-D" + MavenModuleMap.PATHS_FILE_PROPERTY + "="-->Line_24 $$ if (param.startsWith(prefix)) [ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_16 $$ MavenRunnerParameters runnerParameters = new MavenRunnerParameters(moduleB.getParent().getPath(), false, Collections.singletonList("jetty:run"), Collections.<String, Boolean>emptyMap())[ CD ]
Line_21 $$ String resolveMapFile = null-->Line_30 $$ Properties properties = readProperties(resolveMapFile)[ FD ]
Line_25 $$ resolveMapFile = param.substring(prefix.length())-->Line_30 $$ Properties properties = readProperties(resolveMapFile)[ FD ]
Line_23 $$ for (String param : parameters.getVMParametersList().getParameters()) -->Line_25 $$ resolveMapFile = param.substring(prefix.length())[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_9 $$ MavenProjectsManager.getInstance(myProject).setIgnoredFilesPaths(Collections.singletonList(moduleIgnored.getPath()))[ CD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_19 $$ runnerSettings.setJreName(MavenRunnerSettings.USE_INTERNAL_JAVA)[ CD ]
Line_25 $$ resolveMapFile = param.substring(prefix.length())-->Line_29 $$ assertNotNull(resolveMapFile)[ FD ]
Line_30 $$ Properties properties = readProperties(resolveMapFile)-->Line_33 $$ assertNull(properties.getProperty("test:moduleIgnored:pom:1"))[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_3 $$ createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>" + "<modules>" + "  <module>moduleA</module>" + "  <module>moduleIgnored</module>" + "  <module>moduleB</module>" + "</modules>")[ CD ]
Line_5 $$ VirtualFile moduleIgnored = createModulePom("moduleIgnored", "<groupId>test</groupId>" + "<artifactId>moduleIgnored</artifactId>" + "<version>1</version>")-->Line_9 $$ MavenProjectsManager.getInstance(myProject).setIgnoredFilesPaths(Collections.singletonList(moduleIgnored.getPath()))[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_33 $$ assertNull(properties.getProperty("test:moduleIgnored:pom:1"))[ CD ]
Line_18 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(myProject).getSettings().clone()-->Line_19 $$ runnerSettings.setJreName(MavenRunnerSettings.USE_INTERNAL_JAVA)[ FD ]
Line_22 $$ String prefix = "-D" + MavenModuleMap.PATHS_FILE_PROPERTY + "="-->Line_25 $$ resolveMapFile = param.substring(prefix.length())[ FD ]
Line_2 $$ public void testIgnoredProject() throws Exception -->Line_5 $$ VirtualFile moduleIgnored = createModulePom("moduleIgnored", "<groupId>test</groupId>" + "<artifactId>moduleIgnored</artifactId>" + "<version>1</version>")[ CD ]
