Line_11 $$ if (preference.charAt(0) == '_') -->Line_46 $$ preferenceType = Preference.parse(preference)[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_67 $$ String nodeAttribute = preference.substring(Preference.ONLY_NODES.type().length() + 1)[ FD ]
Line_16 $$ String shards-->Line_18 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1)[ FD ]
Line_17 $$ if (index == -1) -->Line_20 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1, index)[ CD ]
Line_63 $$ String nodeId = preference.substring(Preference.ONLY_NODE.type().length() + 1)-->Line_64 $$ ensureNodeIdExists(nodes, nodeId)[ FD ]
Line_16 $$ String shards-->Line_20 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1, index)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_63 $$ String nodeId = preference.substring(Preference.ONLY_NODE.type().length() + 1)[ FD ]
Line_4 $$ String[] awarenessAttributes = awarenessAllocationDecider.awarenessAttributes()-->Line_78 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference))[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_59 $$ return indexShard.replicaFirstActiveInitializingShardsIt()[ FD ]
Line_67 $$ String nodeAttribute = preference.substring(Preference.ONLY_NODES.type().length() + 1)-->Line_68 $$ return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttribute, nodes)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_8 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_25 $$ if (Integer.parseInt(id) == indexShard.shardId().id()) [ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_3 $$ if (preference == null || preference.isEmpty()) [ FD ]
Line_23 $$ boolean found = false-->Line_26 $$ found = true[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_68 $$ return indexShard.onlyNodeSelectorActiveInitializingShardsIt(nodeAttribute, nodes)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_12 $$ Preference preferenceType = Preference.parse(preference)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_39 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ FD ]
Line_13 $$ if (preferenceType == Preference.SHARDS) -->Line_22 $$ String[] ids = Strings.splitStringByCommaToArray(shards)[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_55 $$ return indexShard.replicaActiveInitializingShardIt()[ FD ]
Line_18 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1)-->Line_20 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1, index)[ FD ]
Line_30 $$ if (!found) -->Line_31 $$ return null[ CD ]
Line_11 $$ if (preference.charAt(0) == '_') -->Line_13 $$ if (preferenceType == Preference.SHARDS) [ CD ]
Line_4 $$ String[] awarenessAttributes = awarenessAllocationDecider.awarenessAttributes()-->Line_39 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_11 $$ if (preference.charAt(0) == '_') [ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_6 $$ return indexShard.activeInitializingShardsRandomIt()[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_76 $$ return indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference))[ FD ]
Line_12 $$ Preference preferenceType = Preference.parse(preference)-->Line_13 $$ if (preferenceType == Preference.SHARDS) [ FD ]
Line_13 $$ if (preferenceType == Preference.SHARDS) -->Line_23 $$ boolean found = false[ CD ]
Line_75 $$ if (awarenessAttributes.length == 0) -->Line_76 $$ return indexShard.activeInitializingShardsIt(Murmur3HashFunction.hash(preference))[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_64 $$ ensureNodeIdExists(nodes, nodeId)[ FD ]
Line_13 $$ if (preferenceType == Preference.SHARDS) -->Line_16 $$ String shards[ CD ]
Line_24 $$ for (String id : ids) -->Line_25 $$ if (Integer.parseInt(id) == indexShard.shardId().id()) [ FD ]
Line_5 $$ if (awarenessAttributes.length == 0) -->Line_8 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ CD ]
Line_16 $$ String shards-->Line_22 $$ String[] ids = Strings.splitStringByCommaToArray(shards)[ FD ]
Line_17 $$ if (index == -1) -->Line_18 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1)[ CD ]
Line_4 $$ String[] awarenessAttributes = awarenessAllocationDecider.awarenessAttributes()-->Line_8 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ FD ]
Line_36 $$ if (awarenessAttributes.length == 0) -->Line_37 $$ return indexShard.activeInitializingShardsRandomIt()[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_57 $$ return indexShard.primaryFirstActiveInitializingShardsIt()[ FD ]
Line_11 $$ if (preference.charAt(0) == '_') -->Line_12 $$ Preference preferenceType = Preference.parse(preference)[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_61 $$ return indexShard.onlyNodeActiveInitializingShardsIt(localNodeId)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_37 $$ return indexShard.activeInitializingShardsRandomIt()[ FD ]
Line_25 $$ if (Integer.parseInt(id) == indexShard.shardId().id()) -->Line_26 $$ found = true[ CD ]
Line_26 $$ found = true-->Line_30 $$ if (!found) [ FD ]
Line_36 $$ if (awarenessAttributes.length == 0) -->Line_39 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes)[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_49 $$ return indexShard.preferNodeActiveInitializingShardsIt(preference.substring(Preference.PREFER_NODE.type().length() + 1))[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_20 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1, index)[ FD ]
Line_75 $$ if (awarenessAttributes.length == 0) -->Line_78 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference))[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_3 $$ if (preference == null || preference.isEmpty()) [ CD ]
Line_23 $$ boolean found = false-->Line_30 $$ if (!found) [ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_53 $$ return indexShard.primaryActiveInitializingShardIt()[ FD ]
Line_3 $$ if (preference == null || preference.isEmpty()) -->Line_4 $$ String[] awarenessAttributes = awarenessAllocationDecider.awarenessAttributes()[ CD ]
Line_20 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1, index)-->Line_22 $$ String[] ids = Strings.splitStringByCommaToArray(shards)[ FD ]
Line_63 $$ String nodeId = preference.substring(Preference.ONLY_NODE.type().length() + 1)-->Line_65 $$ return indexShard.onlyNodeActiveInitializingShardsIt(nodeId)[ FD ]
Line_3 $$ if (preference == null || preference.isEmpty()) -->Line_5 $$ if (awarenessAttributes.length == 0) [ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_46 $$ preferenceType = Preference.parse(preference)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_18 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1)[ FD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_51 $$ return indexShard.preferNodeActiveInitializingShardsIt(localNodeId)[ FD ]
Line_5 $$ if (awarenessAttributes.length == 0) -->Line_6 $$ return indexShard.activeInitializingShardsRandomIt()[ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_75 $$ if (awarenessAttributes.length == 0) [ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_78 $$ return indexShard.preferAttributesActiveInitializingShardsIt(awarenessAttributes, nodes, Murmur3HashFunction.hash(preference))[ FD ]
Line_12 $$ Preference preferenceType = Preference.parse(preference)-->Line_46 $$ preferenceType = Preference.parse(preference)[ FD ]
Line_18 $$ shards = preference.substring(Preference.SHARDS.type().length() + 1)-->Line_22 $$ String[] ids = Strings.splitStringByCommaToArray(shards)[ FD ]
Line_13 $$ if (preferenceType == Preference.SHARDS) -->Line_30 $$ if (!found) [ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_65 $$ return indexShard.onlyNodeActiveInitializingShardsIt(nodeId)[ FD ]
Line_13 $$ if (preferenceType == Preference.SHARDS) -->Line_17 $$ if (index == -1) [ CD ]
Line_2 $$ private ShardIterator preferenceActiveShardIterator(IndexShardRoutingTable indexShard, String localNodeId, DiscoveryNodes nodes, @Nullable String preference) -->Line_11 $$ if (preference.charAt(0) == '_') [ CD ]
