Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_4 $$ renderer.renderSpecialSymbol(" [ CD ]
Line_6 $$ for (Variable property : properties) -->Line_12 $$ renderer.renderValue(property.getName())[ FD ]
Line_28 $$ int actualStringLength = value instanceof StringValue ? ((StringValue) value).getLength() : string.length()-->Line_29 $$ if (actualStringLength > XValueNode.MAX_VALUE_LENGTH) [ FD ]
Line_14 $$ Value value = property.getValue()-->Line_26 $$ String string = value.getValueString()[ FD ]
Line_29 $$ if (actualStringLength > XValueNode.MAX_VALUE_LENGTH) -->Line_30 $$ renderer.renderComment(XDebuggerBundle.message("node.text.ellipsis.truncated", actualStringLength))[ CD ]
Line_6 $$ for (Variable property : properties) -->Line_14 $$ Value value = property.getValue()[ FD ]
Line_14 $$ Value value = property.getValue()-->Line_40 $$ renderer.renderValue(value.getValueString())[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_10 $$ renderer.renderSpecialSymbol(", ")[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_43 $$ renderer.renderSpecialSymbol("}")[ FD ]
Line_7 $$ if (isFirst) -->Line_10 $$ renderer.renderSpecialSymbol(", ")[ CD ]
Line_28 $$ int actualStringLength = value instanceof StringValue ? ((StringValue) value).getLength() : string.length()-->Line_30 $$ renderer.renderComment(XDebuggerBundle.message("node.text.ellipsis.truncated", actualStringLength))[ FD ]
Line_7 $$ if (isFirst) -->Line_8 $$ isFirst = false[ CD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_3 $$ renderer.renderComment(VariableViewKt.getObjectValueDescription(value))[ FD ]
Line_14 $$ Value value = property.getValue()-->Line_34 $$ renderer.renderComment(VariableViewKt.trimFunctionDescription(value))[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_43 $$ renderer.renderSpecialSymbol("}")[ CD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_3 $$ renderer.renderComment(VariableViewKt.getObjectValueDescription(value))[ CD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_37 $$ renderer.renderComment(VariableViewKt.getObjectValueDescription((ObjectValue) value))[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_27 $$ renderer.renderStringValue(string, "\"\\", XValueNode.MAX_VALUE_LENGTH)[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_40 $$ renderer.renderValue(value.getValueString())[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_5 $$ boolean isFirst = true[ CD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_34 $$ renderer.renderComment(VariableViewKt.trimFunctionDescription(value))[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_4 $$ renderer.renderSpecialSymbol(" [ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_20 $$ renderer.renderKeywordValue(value.getValueString())[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_30 $$ renderer.renderComment(XDebuggerBundle.message("node.text.ellipsis.truncated", actualStringLength))[ FD ]
Line_5 $$ boolean isFirst = true-->Line_8 $$ isFirst = false[ FD ]
Line_14 $$ Value value = property.getValue()-->Line_16 $$ switch(value.getType()) [ FD ]
Line_14 $$ Value value = property.getValue()-->Line_20 $$ renderer.renderKeywordValue(value.getValueString())[ FD ]
Line_26 $$ String string = value.getValueString()-->Line_28 $$ int actualStringLength = value instanceof StringValue ? ((StringValue) value).getLength() : string.length()[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_13 $$ renderer.renderSpecialSymbol(": ")[ FD ]
Line_14 $$ Value value = property.getValue()-->Line_23 $$ renderer.renderNumericValue(value.getValueString())[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_23 $$ renderer.renderNumericValue(value.getValueString())[ FD ]
Line_2 $$ public void renderValue(@NotNull XValueTextRenderer renderer) -->Line_12 $$ renderer.renderValue(property.getName())[ FD ]
Line_26 $$ String string = value.getValueString()-->Line_27 $$ renderer.renderStringValue(string, "\"\\", XValueNode.MAX_VALUE_LENGTH)[ FD ]
