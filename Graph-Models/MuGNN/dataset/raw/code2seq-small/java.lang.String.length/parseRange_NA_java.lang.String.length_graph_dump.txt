Line_2 $$ private static HttpRange parseRange(String range) -->Line_5 $$ if (dashIdx > 0) [ CD ]
Line_7 $$ if (dashIdx < range.length() - 1) -->Line_8 $$ Long lastPos = Long.parseLong(range.substring(dashIdx + 1, range.length()))[ CD ]
Line_5 $$ if (dashIdx > 0) -->Line_6 $$ long firstPos = Long.parseLong(range.substring(0, dashIdx))[ CD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_7 $$ if (dashIdx < range.length() - 1) [ FD ]
Line_4 $$ int dashIdx = range.indexOf('-')-->Line_5 $$ if (dashIdx > 0) [ FD ]
Line_4 $$ int dashIdx = range.indexOf('-')-->Line_6 $$ long firstPos = Long.parseLong(range.substring(0, dashIdx))[ FD ]
Line_4 $$ int dashIdx = range.indexOf('-')-->Line_13 $$ if (dashIdx == 0) [ FD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_3 $$ Assert.hasLength(range, "Range String must not be empty")[ CD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_14 $$ long suffixLength = Long.parseLong(range.substring(1))[ FD ]
Line_4 $$ int dashIdx = range.indexOf('-')-->Line_7 $$ if (dashIdx < range.length() - 1) [ FD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_4 $$ int dashIdx = range.indexOf('-')[ FD ]
Line_7 $$ if (dashIdx < range.length() - 1) -->Line_9 $$ return new ByteRange(firstPos, lastPos)[ CD ]
Line_13 $$ if (dashIdx == 0) -->Line_15 $$ return new SuffixByteRange(suffixLength)[ CD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_8 $$ Long lastPos = Long.parseLong(range.substring(dashIdx + 1, range.length()))[ FD ]
Line_5 $$ if (dashIdx > 0) -->Line_13 $$ if (dashIdx == 0) [ CD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_6 $$ long firstPos = Long.parseLong(range.substring(0, dashIdx))[ FD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_4 $$ int dashIdx = range.indexOf('-')[ CD ]
Line_13 $$ if (dashIdx == 0) -->Line_14 $$ long suffixLength = Long.parseLong(range.substring(1))[ CD ]
Line_5 $$ if (dashIdx > 0) -->Line_7 $$ if (dashIdx < range.length() - 1) [ CD ]
Line_2 $$ private static HttpRange parseRange(String range) -->Line_3 $$ Assert.hasLength(range, "Range String must not be empty")[ FD ]
Line_7 $$ if (dashIdx < range.length() - 1) -->Line_11 $$ return new ByteRange(firstPos, null)[ CD ]
