Line_25 $$ final GlobalSearchScope scope_ = scope-->Line_28 $$ return scope_.contains(virtualFile) ? PsiManager.getInstance(project).findDirectory(virtualFile) : null[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_10 $$ if (packageName.length() > 0) [ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_35 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)[ FD ]
Line_20 $$ VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(baseDir.getVirtualFile())-->Line_35 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
Line_40 $$ while (restOfName.length() > 0) -->Line_43 $$ if (foundExistingDirectory == null) [ CD ]
Line_32 $$ if (psiDirectory == null)-->Line_33 $$ return null[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_26 $$ List<PsiDirectory> dirs = ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(), new Function<VirtualFile, PsiDirectory>() [ FD ]
Line_41 $$ final String name = getLeftPart(restOfName)-->Line_57 $$ return psiDirectory_.createSubdirectory(name)[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_44 $$ if (!askedToCreate && askUserToCreate) [ FD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_34 $$ final VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile())[ CD ]
Line_9 $$ String postfixToShow = packageName.replace('.', File.separatorChar)-->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ FD ]
Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)-->Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)[ FD ]
Line_14 $$ if (psiDirectory == null)-->Line_15 $$ return null[ CD ]
Line_18 $$ if (psiDirectory == null) -->Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) [ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_46 $$ int toCreate = Messages.showYesNoDialog(project, IdeBundle.message("prompt.create.non.existing.package", packageName), IdeBundle.message("title.package.not.found"), Messages.getQuestionIcon())[ FD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_23 $$ if (module != null && !checkSourceRootsConfigured(module))[ CD ]
Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""-->Line_46 $$ int toCreate = Messages.showYesNoDialog(project, IdeBundle.message("prompt.create.non.existing.package", packageName), IdeBundle.message("title.package.not.found"), Messages.getQuestionIcon())[ FD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_14 $$ if (psiDirectory == null)[ FD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_14 $$ if (psiDirectory == null)[ FD ]
Line_11 $$ postfixToShow = File.separatorChar + postfixToShow-->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ FD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_18 $$ if (psiDirectory == null) [ FD ]
Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""-->Line_9 $$ String postfixToShow = packageName.replace('.', File.separatorChar)[ FD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_32 $$ if (psiDirectory == null)[ FD ]
Line_40 $$ while (restOfName.length() > 0) -->Line_70 $$ restOfName = cutLeftPart(restOfName)[ CD ]
Line_5 $$ String rootPackage = findLongestExistingPackage(project, packageName, scope)-->Line_6 $$ if (rootPackage != null) [ FD ]
Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)-->Line_32 $$ if (psiDirectory == null)[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_5 $$ String rootPackage = findLongestExistingPackage(project, packageName, scope)[ FD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ FD ]
Line_6 $$ if (rootPackage != null) -->Line_9 $$ String postfixToShow = packageName.replace('.', File.separatorChar)[ CD ]
Line_9 $$ String postfixToShow = packageName.replace('.', File.separatorChar)-->Line_11 $$ postfixToShow = File.separatorChar + postfixToShow[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_40 $$ while (restOfName.length() > 0) [ CD ]
Line_26 $$ List<PsiDirectory> dirs = ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(), new Function<VirtualFile, PsiDirectory>() -->Line_31 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, dirs.toArray(new PsiDirectory[dirs.size()]), baseDir, File.separatorChar + packageName.replace('.', File.separatorChar))[ FD ]
Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)-->Line_43 $$ if (foundExistingDirectory == null) [ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_4 $$ if (chooseFlag == ThreeState.UNSURE && !"".equals(packageName)) [ FD ]
Line_40 $$ while (restOfName.length() > 0) -->Line_41 $$ final String name = getLeftPart(restOfName)[ CD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_32 $$ if (psiDirectory == null)[ CD ]
Line_43 $$ if (foundExistingDirectory == null) -->Line_53 $$ final PsiDirectory psiDirectory_ = psiDirectory[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_9 $$ String postfixToShow = packageName.replace('.', File.separatorChar)[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_23 $$ if (module != null && !checkSourceRootsConfigured(module))[ FD ]
Line_40 $$ while (restOfName.length() > 0) -->Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)[ CD ]
Line_5 $$ String rootPackage = findLongestExistingPackage(project, packageName, scope)-->Line_7 $$ int beginIndex = rootPackage.length() + 1[ FD ]
Line_5 $$ String rootPackage = findLongestExistingPackage(project, packageName, scope)-->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ FD ]
Line_53 $$ final PsiDirectory psiDirectory_ = psiDirectory-->Line_57 $$ return psiDirectory_.createSubdirectory(name)[ FD ]
Line_6 $$ if (rootPackage != null) -->Line_7 $$ int beginIndex = rootPackage.length() + 1[ CD ]
Line_10 $$ if (packageName.length() > 0) -->Line_11 $$ postfixToShow = File.separatorChar + postfixToShow[ CD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_34 $$ final VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile())[ FD ]
Line_43 $$ if (foundExistingDirectory == null) -->Line_44 $$ if (!askedToCreate && askUserToCreate) [ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_18 $$ if (psiDirectory == null) [ CD ]
Line_6 $$ if (rootPackage != null) -->Line_14 $$ if (psiDirectory == null)[ CD ]
Line_26 $$ List<PsiDirectory> dirs = ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(), new Function<VirtualFile, PsiDirectory>() -->Line_28 $$ return scope_.contains(virtualFile) ? PsiManager.getInstance(project).findDirectory(virtualFile) : null[ FD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_25 $$ final GlobalSearchScope scope_ = scope[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_3 $$ PsiDirectory psiDirectory = null[ CD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_32 $$ if (psiDirectory == null)[ FD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_31 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, dirs.toArray(new PsiDirectory[dirs.size()]), baseDir, File.separatorChar + packageName.replace('.', File.separatorChar))[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_34 $$ final VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile())[ FD ]
Line_45 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_46 $$ int toCreate = Messages.showYesNoDialog(project, IdeBundle.message("prompt.create.non.existing.package", packageName), IdeBundle.message("title.package.not.found"), Messages.getQuestionIcon())[ CD ]
Line_47 $$ if (toCreate != Messages.YES) -->Line_48 $$ return null[ CD ]
Line_26 $$ List<PsiDirectory> dirs = ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(), new Function<VirtualFile, PsiDirectory>() -->Line_28 $$ return scope_.contains(virtualFile) ? PsiManager.getInstance(project).findDirectory(virtualFile) : null[ CD ]
Line_7 $$ int beginIndex = rootPackage.length() + 1-->Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""[ FD ]
Line_6 $$ if (rootPackage != null) -->Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""[ CD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_20 $$ VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(baseDir.getVirtualFile())[ FD ]
Line_45 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) -->Line_47 $$ if (toCreate != Messages.YES) [ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_72 $$ return psiDirectory[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_4 $$ if (chooseFlag == ThreeState.UNSURE && !"".equals(packageName)) [ CD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_20 $$ VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(baseDir.getVirtualFile())[ CD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ FD ]
Line_4 $$ if (chooseFlag == ThreeState.UNSURE && !"".equals(packageName)) -->Line_5 $$ String rootPackage = findLongestExistingPackage(project, packageName, scope)[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_31 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, dirs.toArray(new PsiDirectory[dirs.size()]), baseDir, File.separatorChar + packageName.replace('.', File.separatorChar))[ FD ]
Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""-->Line_31 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, dirs.toArray(new PsiDirectory[dirs.size()]), baseDir, File.separatorChar + packageName.replace('.', File.separatorChar))[ FD ]
Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)-->Line_34 $$ final VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile())[ FD ]
Line_41 $$ final String name = getLeftPart(restOfName)-->Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)[ FD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_18 $$ if (psiDirectory == null) [ FD ]
Line_44 $$ if (!askedToCreate && askUserToCreate) -->Line_45 $$ if (!ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)-->Line_34 $$ final VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(psiDirectory.getVirtualFile())[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""[ FD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_26 $$ List<PsiDirectory> dirs = ContainerUtil.mapNotNull(ProjectRootManager.getInstance(project).getContentSourceRoots(), new Function<VirtualFile, PsiDirectory>() [ CD ]
Line_3 $$ PsiDirectory psiDirectory = null-->Line_42 $$ PsiDirectory foundExistingDirectory = psiDirectory.findSubdirectory(name)[ FD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_28 $$ return scope_.contains(virtualFile) ? PsiManager.getInstance(project).findDirectory(virtualFile) : null[ FD ]
Line_46 $$ int toCreate = Messages.showYesNoDialog(project, IdeBundle.message("prompt.create.non.existing.package", packageName), IdeBundle.message("title.package.not.found"), Messages.getQuestionIcon())-->Line_47 $$ if (toCreate != Messages.YES) [ FD ]
Line_23 $$ if (module != null && !checkSourceRootsConfigured(module))-->Line_24 $$ return null[ CD ]
Line_6 $$ if (rootPackage != null) -->Line_10 $$ if (packageName.length() > 0) [ CD ]
Line_55 $$ psiDirectory = ActionRunner.runInsideWriteAction(new ActionRunner.InterruptibleRunnableWithResult<PsiDirectory>() -->Line_57 $$ return psiDirectory_.createSubdirectory(name)[ CD ]
Line_8 $$ packageName = beginIndex < packageName.length() ? packageName.substring(beginIndex) : ""-->Line_10 $$ if (packageName.length() > 0) [ FD ]
Line_4 $$ if (chooseFlag == ThreeState.UNSURE && !"".equals(packageName)) -->Line_6 $$ if (rootPackage != null) [ CD ]
Line_20 $$ VirtualFile sourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(baseDir.getVirtualFile())-->Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
Line_6 $$ if (rootPackage != null) -->Line_13 $$ psiDirectory = DirectoryChooserUtil.selectDirectory(project, getPackageDirectories(project, rootPackage, scope), baseDir, postfixToShow)[ CD ]
Line_19 $$ if (chooseFlag == ThreeState.NO && baseDir != null) -->Line_35 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ CD ]
Line_2 $$ public static PsiDirectory findOrCreateDirectoryForPackage(@NotNull final Project project, @Nullable Module module, GlobalSearchScope scope, String packageName, PsiDirectory baseDir, boolean askUserToCreate, ThreeState chooseFlag) throws IncorrectOperationException -->Line_21 $$ psiDirectory = PsiManager.getInstance(project).findDirectory(sourceRoot)[ FD ]
