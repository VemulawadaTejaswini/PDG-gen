Line_11 $$ String templateKey = template.getKey()-->Line_16 $$ matchingTemplates.put(template, templateKey)[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_3 $$ if (offset > editor.getDocument().getTextLength()) [ CD ]
Line_3 $$ if (offset > editor.getDocument().getTextLength()) -->Line_4 $$ LOG.error("Cannot filter templates, index out of bounds. Offset: " + offset, AttachmentFactory.createAttachment(editor.getDocument()))[ CD ]
Line_11 $$ String templateKey = template.getKey()-->Line_13 $$ int startOffset = documentText.length() - templateKey.length()[ FD ]
Line_33 $$ String templateDescription = template.getDescription()-->Line_34 $$ if (!prefixWithoutDots.isEmpty() && templateDescription != null && prefixSearchPattern.matcher(templateDescription).matches()) [ FD ]
Line_20 $$ for (int i = templateKey.length(); i > 0; i--) -->Line_23 $$ if (startOffset > 0 && Character.isJavaIdentifierPart(documentText.charAt(startOffset - 1))) [ CD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_26 $$ if (StringUtil.endsWith(documentText, prefix)) [ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_22 $$ int startOffset = documentText.length() - i[ FD ]
Line_32 $$ if (searchInDescription && !matchingTemplates.containsKey(template)) -->Line_34 $$ if (!prefixWithoutDots.isEmpty() && templateDescription != null && prefixSearchPattern.matcher(templateDescription).matches()) [ CD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_16 $$ matchingTemplates.put(template, templateKey)[ FD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_27 $$ matchingTemplates.put(template, prefix)[ FD ]
Line_21 $$ String prefix = templateKey.substring(0, i)-->Line_27 $$ matchingTemplates.put(template, prefix)[ FD ]
Line_20 $$ for (int i = templateKey.length(); i > 0; i--) -->Line_22 $$ int startOffset = documentText.length() - i[ CD ]
Line_11 $$ String templateKey = template.getKey()-->Line_15 $$ if (StringUtil.endsWith(documentText, templateKey)) [ FD ]
Line_32 $$ if (searchInDescription && !matchingTemplates.containsKey(template)) -->Line_33 $$ String templateDescription = template.getDescription()[ CD ]
Line_12 $$ if (fullMatch) -->Line_13 $$ int startOffset = documentText.length() - templateKey.length()[ CD ]
Line_7 $$ String prefixWithoutDots = computeDescriptionMatchingPrefix(editor.getDocument(), offset)-->Line_34 $$ if (!prefixWithoutDots.isEmpty() && templateDescription != null && prefixSearchPattern.matcher(templateDescription).matches()) [ FD ]
Line_8 $$ Pattern prefixSearchPattern = Pattern.compile(".*\\b" + prefixWithoutDots + ".*")-->Line_34 $$ if (!prefixWithoutDots.isEmpty() && templateDescription != null && prefixSearchPattern.matcher(templateDescription).matches()) [ FD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_32 $$ if (searchInDescription && !matchingTemplates.containsKey(template)) [ FD ]
Line_9 $$ Map<TemplateImpl, String> matchingTemplates = new TreeMap<TemplateImpl, String>(TemplateListPanel.TEMPLATE_COMPARATOR)-->Line_35 $$ matchingTemplates.put(template, prefixWithoutDots)[ FD ]
Line_7 $$ String prefixWithoutDots = computeDescriptionMatchingPrefix(editor.getDocument(), offset)-->Line_35 $$ matchingTemplates.put(template, prefixWithoutDots)[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_3 $$ if (offset > editor.getDocument().getTextLength()) [ FD ]
Line_21 $$ String prefix = templateKey.substring(0, i)-->Line_26 $$ if (StringUtil.endsWith(documentText, prefix)) [ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_13 $$ int startOffset = documentText.length() - templateKey.length()[ FD ]
Line_20 $$ for (int i = templateKey.length(); i > 0; i--) -->Line_21 $$ String prefix = templateKey.substring(0, i)[ CD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_35 $$ matchingTemplates.put(template, prefixWithoutDots)[ FD ]
Line_9 $$ Map<TemplateImpl, String> matchingTemplates = new TreeMap<TemplateImpl, String>(TemplateListPanel.TEMPLATE_COMPARATOR)-->Line_32 $$ if (searchInDescription && !matchingTemplates.containsKey(template)) [ FD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_11 $$ String templateKey = template.getKey()[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_32 $$ if (searchInDescription && !matchingTemplates.containsKey(template)) [ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_39 $$ return matchingTemplates[ CD ]
Line_20 $$ for (int i = templateKey.length(); i > 0; i--) -->Line_26 $$ if (StringUtil.endsWith(documentText, prefix)) [ CD ]
Line_10 $$ for (TemplateImpl template : templates) -->Line_33 $$ String templateDescription = template.getDescription()[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_8 $$ Pattern prefixSearchPattern = Pattern.compile(".*\\b" + prefixWithoutDots + ".*")[ CD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_9 $$ Map<TemplateImpl, String> matchingTemplates = new TreeMap<TemplateImpl, String>(TemplateListPanel.TEMPLATE_COMPARATOR)[ CD ]
Line_11 $$ String templateKey = template.getKey()-->Line_21 $$ String prefix = templateKey.substring(0, i)[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_7 $$ String prefixWithoutDots = computeDescriptionMatchingPrefix(editor.getDocument(), offset)[ FD ]
Line_12 $$ if (fullMatch) -->Line_20 $$ for (int i = templateKey.length(); i > 0; i--) [ CD ]
Line_14 $$ if (startOffset <= 0 || !Character.isJavaIdentifierPart(documentText.charAt(startOffset - 1))) -->Line_15 $$ if (StringUtil.endsWith(documentText, templateKey)) [ CD ]
Line_26 $$ if (StringUtil.endsWith(documentText, prefix)) -->Line_27 $$ matchingTemplates.put(template, prefix)[ CD ]
Line_9 $$ Map<TemplateImpl, String> matchingTemplates = new TreeMap<TemplateImpl, String>(TemplateListPanel.TEMPLATE_COMPARATOR)-->Line_27 $$ matchingTemplates.put(template, prefix)[ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_23 $$ if (startOffset > 0 && Character.isJavaIdentifierPart(documentText.charAt(startOffset - 1))) [ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_7 $$ String prefixWithoutDots = computeDescriptionMatchingPrefix(editor.getDocument(), offset)[ CD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_4 $$ LOG.error("Cannot filter templates, index out of bounds. Offset: " + offset, AttachmentFactory.createAttachment(editor.getDocument()))[ FD ]
Line_20 $$ for (int i = templateKey.length(); i > 0; i--) -->Line_21 $$ String prefix = templateKey.substring(0, i)[ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_14 $$ if (startOffset <= 0 || !Character.isJavaIdentifierPart(documentText.charAt(startOffset - 1))) [ FD ]
Line_12 $$ if (fullMatch) -->Line_14 $$ if (startOffset <= 0 || !Character.isJavaIdentifierPart(documentText.charAt(startOffset - 1))) [ CD ]
Line_15 $$ if (StringUtil.endsWith(documentText, templateKey)) -->Line_16 $$ matchingTemplates.put(template, templateKey)[ CD ]
Line_34 $$ if (!prefixWithoutDots.isEmpty() && templateDescription != null && prefixSearchPattern.matcher(templateDescription).matches()) -->Line_35 $$ matchingTemplates.put(template, prefixWithoutDots)[ CD ]
Line_9 $$ Map<TemplateImpl, String> matchingTemplates = new TreeMap<TemplateImpl, String>(TemplateListPanel.TEMPLATE_COMPARATOR)-->Line_16 $$ matchingTemplates.put(template, templateKey)[ FD ]
Line_2 $$ public static Map<TemplateImpl, String> filterTemplatesByPrefix(@NotNull Collection<TemplateImpl> templates, @NotNull Editor editor, int offset, boolean fullMatch, boolean searchInDescription) -->Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)[ CD ]
Line_11 $$ String templateKey = template.getKey()-->Line_20 $$ for (int i = templateKey.length(); i > 0; i--) [ FD ]
Line_6 $$ CharSequence documentText = editor.getDocument().getCharsSequence().subSequence(0, offset)-->Line_15 $$ if (StringUtil.endsWith(documentText, templateKey)) [ FD ]
