Line_41 $$ for (String addedPath : myAddedPaths) -->Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) [ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_9 $$ if (myCopiedAddedPaths.containsKey(path)) [ FD ]
Line_49 $$ moveAndChange = true-->Line_58 $$ if (!moveAndChange) [ FD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_62 $$ myListsHolder.add(path, renamedChange)[ FD ]
Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)-->Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_41 $$ for (String addedPath : myAddedPaths) -->Line_45 $$ final String relative = SVNPathUtil.getRelativePath(addedPath, path)[ FD ]
Line_41 $$ for (String addedPath : myAddedPaths) -->Line_42 $$ String copyFromPath = myCopiedAddedPaths.get(addedPath)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)[ FD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_61 $$ renamedChange.setCopied(false)[ FD ]
Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))[ FD ]
Line_9 $$ if (myCopiedAddedPaths.containsKey(path)) -->Line_11 $$ if (copyDeleted.contains(copyTarget)) [ CD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_54 $$ myListsHolder.add(path, renamedChange)[ FD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ CD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()[ FD ]
Line_58 $$ if (!moveAndChange) -->Line_62 $$ myListsHolder.add(path, renamedChange)[ CD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))[ FD ]
Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)-->Line_19 $$ copiedAddedChanges.put(copyTarget, (ExternallyRenamedChange) addedChange)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_30 $$ deletedChange = new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path, true), null, path)[ FD ]
Line_8 $$ final Change addedChange-->Line_13 $$ addedChange.getMoveRelativePath(myVcs.getProject())[ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_34 $$ deletedChange = new Change(myListsHolder.createDeletedItemRevision(path, true), null)[ CD ]
Line_11 $$ if (copyDeleted.contains(copyTarget)) -->Line_14 $$ ((ExternallyRenamedChange) addedChange).setCopied(false)[ CD ]
Line_4 $$ final Map<String, ExternallyRenamedChange> copiedAddedChanges = new HashMap<String, ExternallyRenamedChange>()-->Line_28 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(path)[ FD ]
Line_11 $$ if (copyDeleted.contains(copyTarget)) -->Line_13 $$ addedChange.getMoveRelativePath(myVcs.getProject())[ CD ]
Line_41 $$ for (String addedPath : myAddedPaths) -->Line_52 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(myCopiedAddedPaths.get(addedPath))[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_59 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(path, true), myListsHolder.createRevisionLazily(path, false), null)[ FD ]
Line_8 $$ final Change addedChange-->Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_34 $$ deletedChange = new Change(myListsHolder.createDeletedItemRevision(path, true), null)-->Line_36 $$ myListsHolder.add(path, deletedChange)[ FD ]
Line_40 $$ final boolean replaced = myReplacedPaths.contains(path)-->Line_60 $$ renamedChange.setIsReplaced(replaced)[ FD ]
Line_8 $$ final Change addedChange-->Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()[ FD ]
Line_26 $$ final Change deletedChange-->Line_36 $$ myListsHolder.add(path, deletedChange)[ FD ]
Line_2 $$ private void createLists() -->Line_6 $$ final List<String> copyDeleted = new ArrayList<String>(myDeletedPaths)[ CD ]
Line_44 $$ if (addedPath.length() < path.length()) -->Line_46 $$ copyFromPath = SVNPathUtil.append(copyFromPath, relative)[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_23 $$ myListsHolder.add(path, addedChange)[ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)[ FD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ FD ]
Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))-->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ FD ]
Line_44 $$ if (addedPath.length() < path.length()) -->Line_45 $$ final String relative = SVNPathUtil.getRelativePath(addedPath, path)[ CD ]
Line_58 $$ if (!moveAndChange) -->Line_61 $$ renamedChange.setCopied(false)[ CD ]
Line_45 $$ final String relative = SVNPathUtil.getRelativePath(addedPath, path)-->Line_46 $$ copyFromPath = SVNPathUtil.append(copyFromPath, relative)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_39 $$ boolean moveAndChange = false-->Line_58 $$ if (!moveAndChange) [ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_27 $$ if (copiedAddedChanges.containsKey(path)) [ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_30 $$ deletedChange = new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path, true), null, path)[ CD ]
Line_46 $$ copyFromPath = SVNPathUtil.append(copyFromPath, relative)-->Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)[ FD ]
Line_8 $$ final Change addedChange-->Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_62 $$ myListsHolder.add(path, renamedChange)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_28 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(path)[ FD ]
Line_26 $$ final Change deletedChange-->Line_30 $$ deletedChange = new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path, true), null, path)[ FD ]
Line_40 $$ final boolean replaced = myReplacedPaths.contains(path)-->Line_51 $$ renamedChange.setIsReplaced(replaced)[ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_31 $$ ((ExternallyRenamedChange) deletedChange).setCopied(false)[ CD ]
Line_4 $$ final Map<String, ExternallyRenamedChange> copiedAddedChanges = new HashMap<String, ExternallyRenamedChange>()-->Line_52 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(myCopiedAddedPaths.get(addedPath))[ FD ]
Line_2 $$ private void createLists() -->Line_5 $$ correctBeforePaths()[ CD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)[ CD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_51 $$ renamedChange.setIsReplaced(replaced)[ FD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_23 $$ myListsHolder.add(path, addedChange)[ FD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_50 $$ renamedChange.getMoveRelativePath(myVcs.getProject())[ CD ]
Line_4 $$ final Map<String, ExternallyRenamedChange> copiedAddedChanges = new HashMap<String, ExternallyRenamedChange>()-->Line_19 $$ copiedAddedChanges.put(copyTarget, (ExternallyRenamedChange) addedChange)[ FD ]
Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))-->Line_23 $$ myListsHolder.add(path, addedChange)[ FD ]
Line_11 $$ if (copyDeleted.contains(copyTarget)) -->Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)[ CD ]
Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)-->Line_11 $$ if (copyDeleted.contains(copyTarget)) [ FD ]
Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()-->Line_32 $$ ((ExternallyRenamedChange) deletedChange).setRenamedOrMovedTarget(source)[ FD ]
Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))-->Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()[ FD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_51 $$ renamedChange.setIsReplaced(replaced)[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) [ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))[ FD ]
Line_6 $$ final List<String> copyDeleted = new ArrayList<String>(myDeletedPaths)-->Line_15 $$ copyDeleted.remove(copyTarget)[ FD ]
Line_39 $$ boolean moveAndChange = false-->Line_49 $$ moveAndChange = true[ FD ]
Line_6 $$ final List<String> copyDeleted = new ArrayList<String>(myDeletedPaths)-->Line_11 $$ if (copyDeleted.contains(copyTarget)) [ FD ]
Line_9 $$ if (myCopiedAddedPaths.containsKey(path)) -->Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))[ CD ]
Line_26 $$ final Change deletedChange-->Line_34 $$ deletedChange = new Change(myListsHolder.createDeletedItemRevision(path, true), null)[ FD ]
Line_41 $$ for (String addedPath : myAddedPaths) -->Line_44 $$ if (addedPath.length() < path.length()) [ FD ]
Line_8 $$ final Change addedChange-->Line_21 $$ addedChange = new Change(null, myListsHolder.createRevisionLazily(path, false))[ FD ]
Line_8 $$ final Change addedChange-->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ FD ]
Line_58 $$ if (!moveAndChange) -->Line_60 $$ renamedChange.setIsReplaced(replaced)[ CD ]
Line_42 $$ String copyFromPath = myCopiedAddedPaths.get(addedPath)-->Line_46 $$ copyFromPath = SVNPathUtil.append(copyFromPath, relative)[ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_28 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(path)[ CD ]
Line_30 $$ deletedChange = new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path, true), null, path)-->Line_36 $$ myListsHolder.add(path, deletedChange)[ FD ]
Line_11 $$ if (copyDeleted.contains(copyTarget)) -->Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)[ CD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_49 $$ moveAndChange = true[ CD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ FD ]
Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_29 $$ final FilePath source = addedChange.getAfterRevision().getFile()[ FD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_50 $$ renamedChange.getMoveRelativePath(myVcs.getProject())[ FD ]
Line_8 $$ final Change addedChange-->Line_23 $$ myListsHolder.add(path, addedChange)[ FD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_13 $$ addedChange.getMoveRelativePath(myVcs.getProject())[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_36 $$ myListsHolder.add(path, deletedChange)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_45 $$ final String relative = SVNPathUtil.getRelativePath(addedPath, path)[ FD ]
Line_9 $$ if (myCopiedAddedPaths.containsKey(path)) -->Line_19 $$ copiedAddedChanges.put(copyTarget, (ExternallyRenamedChange) addedChange)[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_44 $$ if (addedPath.length() < path.length()) [ FD ]
Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)-->Line_15 $$ copyDeleted.remove(copyTarget)[ FD ]
Line_27 $$ if (copiedAddedChanges.containsKey(path)) -->Line_32 $$ ((ExternallyRenamedChange) deletedChange).setRenamedOrMovedTarget(source)[ CD ]
Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)-->Line_60 $$ renamedChange.setIsReplaced(replaced)[ FD ]
Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_53 $$ renamedChange.setCopied(addedChange != null && addedChange.isCopied())[ FD ]
Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_23 $$ myListsHolder.add(path, addedChange)[ FD ]
Line_30 $$ deletedChange = new ExternallyRenamedChange(myListsHolder.createDeletedItemRevision(path, true), null, path)-->Line_34 $$ deletedChange = new Change(myListsHolder.createDeletedItemRevision(path, true), null)[ FD ]
Line_11 $$ if (copyDeleted.contains(copyTarget)) -->Line_15 $$ copyDeleted.remove(copyTarget)[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_34 $$ deletedChange = new Change(myListsHolder.createDeletedItemRevision(path, true), null)[ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_9 $$ if (myCopiedAddedPaths.containsKey(path)) -->Line_10 $$ final String copyTarget = myCopiedAddedPaths.get(path)[ CD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_40 $$ final boolean replaced = myReplacedPaths.contains(path)[ FD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_52 $$ final ExternallyRenamedChange addedChange = copiedAddedChanges.get(myCopiedAddedPaths.get(addedPath))[ CD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_54 $$ myListsHolder.add(path, renamedChange)[ CD ]
Line_43 $$ if ((copyFromPath != null) && (SVNPathUtil.isAncestor(addedPath, path))) -->Line_44 $$ if (addedPath.length() < path.length()) [ CD ]
Line_42 $$ String copyFromPath = myCopiedAddedPaths.get(addedPath)-->Line_48 $$ final ExternallyRenamedChange renamedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyFromPath, true), myListsHolder.createRevisionLazily(path, false), copyFromPath)[ FD ]
Line_12 $$ addedChange = new ExternallyRenamedChange(myListsHolder.createRevisionLazily(copyTarget, true), myListsHolder.createRevisionLazily(path, false), copyTarget)-->Line_17 $$ addedChange = new ExternallyRenamedChange(null, myListsHolder.createRevisionLazily(path, false), copyTarget)[ FD ]
Line_4 $$ final Map<String, ExternallyRenamedChange> copiedAddedChanges = new HashMap<String, ExternallyRenamedChange>()-->Line_27 $$ if (copiedAddedChanges.containsKey(path)) [ FD ]
Line_7 $$ for (String path : myAddedPaths) -->Line_54 $$ myListsHolder.add(path, renamedChange)[ FD ]
Line_2 $$ private void createLists() -->Line_4 $$ final Map<String, ExternallyRenamedChange> copiedAddedChanges = new HashMap<String, ExternallyRenamedChange>()[ CD ]
