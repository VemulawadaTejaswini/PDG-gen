Line_11 $$ if (fileName.startsWith("input")) -->Line_15 $$ LoggedDiscreteCDF newResult = histogramFileToCDF(filePath, lfs)[ CD ]
Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)-->Line_7 $$ FileStatus[] tests = lfs.listStatus(rootInputFile)[ FD ]
Line_8 $$ for (int i = 0; i < tests.length; ++i) -->Line_10 $$ String fileName = filePath.getName()[ CD ]
Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)-->Line_15 $$ LoggedDiscreteCDF newResult = histogramFileToCDF(filePath, lfs)[ FD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_6 $$ final Path rootInputFile = new Path(rootInputDir, "rumen/histogram-tests")[ CD ]
Line_20 $$ LoggedDiscreteCDF dcdf = parser.getNext()-->Line_21 $$ dcdf.deepCompare(newResult, new TreePath(null, "<root>"))[ FD ]
Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)-->Line_17 $$ FSDataInputStream goldStream = lfs.open(goldFilePath)[ FD ]
Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)-->Line_14 $$ assertTrue("Gold file dies not exist", lfs.exists(goldFilePath))[ FD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_17 $$ FSDataInputStream goldStream = lfs.open(goldFilePath)[ CD ]
Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)-->Line_5 $$ final Path rootInputDir = new Path(System.getProperty("test.tools.input.dir", "")).makeQualified(lfs)[ FD ]
Line_8 $$ for (int i = 0; i < tests.length; ++i) -->Line_11 $$ if (fileName.startsWith("input")) [ CD ]
Line_18 $$ JsonObjectMapperParser<LoggedDiscreteCDF> parser = new JsonObjectMapperParser<LoggedDiscreteCDF>(goldStream, LoggedDiscreteCDF.class)-->Line_25 $$ parser.close()[ FD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_5 $$ final Path rootInputDir = new Path(System.getProperty("test.tools.input.dir", "")).makeQualified(lfs)[ CD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_12 $$ String testName = fileName.substring("input".length())[ CD ]
Line_10 $$ String fileName = filePath.getName()-->Line_12 $$ String testName = fileName.substring("input".length())[ FD ]
Line_18 $$ JsonObjectMapperParser<LoggedDiscreteCDF> parser = new JsonObjectMapperParser<LoggedDiscreteCDF>(goldStream, LoggedDiscreteCDF.class)-->Line_20 $$ LoggedDiscreteCDF dcdf = parser.getNext()[ FD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_16 $$ System.out.println("Testing a Histogram for " + fileName)[ CD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_3 $$ final Configuration conf = new Configuration()[ CD ]
Line_13 $$ Path goldFilePath = new Path(rootInputFile, "gold" + testName)-->Line_17 $$ FSDataInputStream goldStream = lfs.open(goldFilePath)[ FD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_7 $$ FileStatus[] tests = lfs.listStatus(rootInputFile)[ CD ]
Line_3 $$ final Configuration conf = new Configuration()-->Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)[ FD ]
Line_10 $$ String fileName = filePath.getName()-->Line_11 $$ if (fileName.startsWith("input")) [ FD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_13 $$ Path goldFilePath = new Path(rootInputFile, "gold" + testName)[ CD ]
Line_6 $$ final Path rootInputFile = new Path(rootInputDir, "rumen/histogram-tests")-->Line_7 $$ FileStatus[] tests = lfs.listStatus(rootInputFile)[ FD ]
Line_8 $$ for (int i = 0; i < tests.length; ++i) -->Line_9 $$ Path filePath = tests[i].getPath()[ CD ]
Line_15 $$ LoggedDiscreteCDF newResult = histogramFileToCDF(filePath, lfs)-->Line_21 $$ dcdf.deepCompare(newResult, new TreePath(null, "<root>"))[ FD ]
Line_9 $$ Path filePath = tests[i].getPath()-->Line_10 $$ String fileName = filePath.getName()[ FD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_4 $$ final FileSystem lfs = FileSystem.getLocal(conf)[ CD ]
Line_13 $$ Path goldFilePath = new Path(rootInputFile, "gold" + testName)-->Line_14 $$ assertTrue("Gold file dies not exist", lfs.exists(goldFilePath))[ FD ]
Line_9 $$ Path filePath = tests[i].getPath()-->Line_15 $$ LoggedDiscreteCDF newResult = histogramFileToCDF(filePath, lfs)[ FD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_18 $$ JsonObjectMapperParser<LoggedDiscreteCDF> parser = new JsonObjectMapperParser<LoggedDiscreteCDF>(goldStream, LoggedDiscreteCDF.class)[ CD ]
Line_11 $$ if (fileName.startsWith("input")) -->Line_14 $$ assertTrue("Gold file dies not exist", lfs.exists(goldFilePath))[ CD ]
Line_2 $$ public void testHistograms() throws IOException -->Line_8 $$ for (int i = 0; i < tests.length; ++i) [ CD ]
