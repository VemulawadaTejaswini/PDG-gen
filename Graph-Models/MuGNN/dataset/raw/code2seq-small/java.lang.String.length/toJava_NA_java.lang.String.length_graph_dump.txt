Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_3 $$ String new_line_separator = DecompilerContext.getNewLineSeparator()[ CD ]
Line_25 $$ if (monitor != null) -->Line_27 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_29 $$ buf.append(ExprProcessor.jmpWrapper(handler, indent + 1 + (monitor != null ? 1 : 0), true, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_25 $$ if (monitor != null) [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_6 $$ boolean labeled = isLabeled()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_26 $$ buf.appendIndent(indent + 1).append("if(").append(monitor.toJava(indent, tracer)).append(") [ FD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_15 $$ tracer.incrementCurrentSourceLine(-1)[ CD ]
Line_6 $$ boolean labeled = isLabeled()-->Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) [ FD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_19 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_11 $$ List<StatEdge> lstSuccs = first.getSuccessorEdges(STATEDGE_DIRECT_ALL)-->Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) [ FD ]
Line_13 $$ TextBuffer content = ExprProcessor.jmpWrapper(first, indent, true, tracer)-->Line_14 $$ content.setLength(content.length() - new_line_separator.length())[ FD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_16 $$ buf.append(content)[ FD ]
Line_3 $$ String new_line_separator = DecompilerContext.getNewLineSeparator()-->Line_14 $$ content.setLength(content.length() - new_line_separator.length())[ FD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_18 $$ buf.appendIndent(indent).append("try [ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_23 $$ buf.append(isFinally ? " finally" : " catch (" + vars.get(0).toJava(indent, tracer) + ")").append(" [ FD ]
Line_30 $$ if (monitor != null) -->Line_32 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_23 $$ buf.append(isFinally ? " finally" : " catch (" + vars.get(0).toJava(indent, tracer) + ")").append(" [ FD ]
Line_30 $$ if (monitor != null) -->Line_31 $$ buf.appendIndent(indent + 1).append("}").appendLineSeparator()[ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_5 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_30 $$ if (monitor != null) [ CD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_21 $$ buf.appendIndent(indent).append("}")[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_4 $$ TextBuffer buf = new TextBuffer()[ CD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_20 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_20 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_35 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_7 $$ if (labeled) [ CD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_14 $$ content.setLength(content.length() - new_line_separator.length())[ CD ]
Line_13 $$ TextBuffer content = ExprProcessor.jmpWrapper(first, indent, true, tracer)-->Line_16 $$ buf.append(content)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_20 $$ buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer))[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_34 $$ buf.appendIndent(indent).append("}").appendLineSeparator()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_18 $$ buf.appendIndent(indent).append("try [ FD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_34 $$ buf.appendIndent(indent).append("}").appendLineSeparator()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_36 $$ return buf[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_13 $$ TextBuffer content = ExprProcessor.jmpWrapper(first, indent, true, tracer)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_5 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_8 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_24 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_29 $$ buf.append(ExprProcessor.jmpWrapper(handler, indent + 1 + (monitor != null ? 1 : 0), true, tracer))[ FD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_31 $$ buf.appendIndent(indent + 1).append("}").appendLineSeparator()[ FD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_13 $$ TextBuffer content = ExprProcessor.jmpWrapper(first, indent, true, tracer)[ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_26 $$ buf.appendIndent(indent + 1).append("if(").append(monitor.toJava(indent, tracer)).append(") [ FD ]
Line_7 $$ if (labeled) -->Line_8 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ CD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_16 $$ buf.append(content)[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_11 $$ List<StatEdge> lstSuccs = first.getSuccessorEdges(STATEDGE_DIRECT_ALL)[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_9 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_23 $$ buf.append(isFinally ? " finally" : " catch (" + vars.get(0).toJava(indent, tracer) + ")").append(" [ CD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_8 $$ buf.appendIndent(indent).append("label").append(this.id.toString()).append(":").appendLineSeparator()[ FD ]
Line_7 $$ if (labeled) -->Line_9 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_21 $$ buf.appendIndent(indent).append("}")[ FD ]
Line_25 $$ if (monitor != null) -->Line_26 $$ buf.appendIndent(indent + 1).append("if(").append(monitor.toJava(indent, tracer)).append(") [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_35 $$ tracer.incrementCurrentSourceLine()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_19 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_15 $$ tracer.incrementCurrentSourceLine(-1)[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_24 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_4 $$ TextBuffer buf = new TextBuffer()-->Line_21 $$ buf.appendIndent(indent).append("}")[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_27 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_12 $$ if (first.type == TYPE_TRYCATCH && first.varDefinitions.isEmpty() && isFinally && !labeled && !first.isLabeled() && (lstSuccs.isEmpty() || !lstSuccs.get(0).explicit)) -->Line_18 $$ buf.appendIndent(indent).append("try [ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_29 $$ buf.append(ExprProcessor.jmpWrapper(handler, indent + 1 + (monitor != null ? 1 : 0), true, tracer))[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_32 $$ tracer.incrementCurrentSourceLine()[ FD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_34 $$ buf.appendIndent(indent).append("}").appendLineSeparator()[ CD ]
Line_2 $$ public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) -->Line_5 $$ buf.append(ExprProcessor.listToJava(varDefinitions, indent, tracer))[ FD ]
