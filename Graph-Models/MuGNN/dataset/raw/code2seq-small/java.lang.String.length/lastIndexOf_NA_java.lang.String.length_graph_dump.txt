Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_17 $$ if (pattern.charAt(j) != buffer.charAt(i + j)) [ FD ]
Line_3 $$ int patternLength = pattern.length()-->Line_10 $$ for (int j = 0; j < patternLength; j++) [ FD ]
Line_10 $$ for (int j = 0; j < patternLength; j++) -->Line_17 $$ if (pattern.charAt(j) != buffer.charAt(i + j)) [ FD ]
Line_8 $$ for (int i = maxIndex; i >= 0; i--) -->Line_9 $$ boolean found = true[ CD ]
Line_4 $$ int end = buffer.length() - patternLength-->Line_6 $$ maxIndex = end[ FD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_4 $$ int end = buffer.length() - patternLength[ FD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_8 $$ for (int i = maxIndex; i >= 0; i--) [ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_3 $$ int patternLength = pattern.length()[ FD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_27 $$ return -1[ CD ]
Line_8 $$ for (int i = maxIndex; i >= 0; i--) -->Line_10 $$ for (int j = 0; j < patternLength; j++) [ CD ]
Line_23 $$ if (found) -->Line_24 $$ return i[ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_5 $$ if (maxIndex > end) [ FD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_4 $$ int end = buffer.length() - patternLength[ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_6 $$ maxIndex = end[ FD ]
Line_9 $$ boolean found = true-->Line_18 $$ found = false[ FD ]
Line_11 $$ if (ignoreCase) -->Line_12 $$ if (!StringUtil.charsEqualIgnoreCase(pattern.charAt(j), buffer.charAt(i + j))) [ CD ]
Line_13 $$ found = false-->Line_18 $$ found = false[ FD ]
Line_10 $$ for (int j = 0; j < patternLength; j++) -->Line_11 $$ if (ignoreCase) [ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_3 $$ int patternLength = pattern.length()[ CD ]
Line_11 $$ if (ignoreCase) -->Line_17 $$ if (pattern.charAt(j) != buffer.charAt(i + j)) [ CD ]
Line_12 $$ if (!StringUtil.charsEqualIgnoreCase(pattern.charAt(j), buffer.charAt(i + j))) -->Line_13 $$ found = false[ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_12 $$ if (!StringUtil.charsEqualIgnoreCase(pattern.charAt(j), buffer.charAt(i + j))) [ FD ]
Line_9 $$ boolean found = true-->Line_13 $$ found = false[ FD ]
Line_10 $$ for (int j = 0; j < patternLength; j++) -->Line_12 $$ if (!StringUtil.charsEqualIgnoreCase(pattern.charAt(j), buffer.charAt(i + j))) [ FD ]
Line_8 $$ for (int i = maxIndex; i >= 0; i--) -->Line_23 $$ if (found) [ CD ]
Line_17 $$ if (pattern.charAt(j) != buffer.charAt(i + j)) -->Line_18 $$ found = false[ CD ]
Line_2 $$ private static int lastIndexOf(@NotNull CharSequence buffer, @NotNull String pattern, int maxIndex, boolean ignoreCase) -->Line_5 $$ if (maxIndex > end) [ CD ]
Line_5 $$ if (maxIndex > end) -->Line_6 $$ maxIndex = end[ CD ]
Line_4 $$ int end = buffer.length() - patternLength-->Line_5 $$ if (maxIndex > end) [ FD ]
