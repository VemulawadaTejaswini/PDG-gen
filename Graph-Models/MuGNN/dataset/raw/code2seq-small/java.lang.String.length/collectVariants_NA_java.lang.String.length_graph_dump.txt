Line_15 $$ PsiPackage p = facade.findPackage(prefix.substring(0, prefix.length() - 1))-->Line_17 $$ for (PsiClass aClass : p.getClasses(scope)) [ FD ]
Line_13 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(module.getProject())-->Line_15 $$ PsiPackage p = facade.findPackage(prefix.substring(0, prefix.length() - 1))[ FD ]
Line_6 $$ List<LookupElement> res = new ArrayList<LookupElement>()-->Line_27 $$ collectClassesAndPackageNames(res, defaultPackage, scope)[ FD ]
Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) -->Line_14 $$ if (prefix.endsWith(".") && prefix.length() > 1) [ CD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_14 $$ if (prefix.endsWith(".") && prefix.length() > 1) [ FD ]
Line_6 $$ List<LookupElement> res = new ArrayList<LookupElement>()-->Line_20 $$ res.add(LookupElementBuilder.create(aClass, qualifiedName))[ FD ]
Line_13 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(module.getProject())-->Line_25 $$ PsiPackage defaultPackage = facade.findPackage("")[ FD ]
Line_25 $$ PsiPackage defaultPackage = facade.findPackage("")-->Line_26 $$ if (defaultPackage != null) [ FD ]
Line_26 $$ if (defaultPackage != null) -->Line_27 $$ collectClassesAndPackageNames(res, defaultPackage, scope)[ CD ]
Line_18 $$ String qualifiedName = aClass.getQualifiedName()-->Line_19 $$ if (qualifiedName != null) [ FD ]
Line_18 $$ String qualifiedName = aClass.getQualifiedName()-->Line_20 $$ res.add(LookupElementBuilder.create(aClass, qualifiedName))[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_3 $$ if (prefix.startsWith("-D")) [ CD ]
Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) -->Line_26 $$ if (defaultPackage != null) [ CD ]
Line_6 $$ List<LookupElement> res = new ArrayList<LookupElement>()-->Line_9 $$ res.add(TailTypeDecorator.withTail(LookupElementBuilder.create(completionVariant), TailType.SPACE))[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_30 $$ return res[ CD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) [ FD ]
Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) -->Line_25 $$ PsiPackage defaultPackage = facade.findPackage("")[ CD ]
Line_3 $$ if (prefix.startsWith("-D")) -->Line_4 $$ return getSystemPropertiesVariants()[ CD ]
Line_15 $$ PsiPackage p = facade.findPackage(prefix.substring(0, prefix.length() - 1))-->Line_16 $$ if (p != null) [ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_13 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(module.getProject())[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_15 $$ PsiPackage p = facade.findPackage(prefix.substring(0, prefix.length() - 1))[ FD ]
Line_12 $$ GlobalSearchScope scope = GlobalSearchScope.moduleScope(module)-->Line_17 $$ for (PsiClass aClass : p.getClasses(scope)) [ FD ]
Line_17 $$ for (PsiClass aClass : p.getClasses(scope)) -->Line_18 $$ String qualifiedName = aClass.getQualifiedName()[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_3 $$ if (prefix.startsWith("-D")) [ FD ]
Line_12 $$ GlobalSearchScope scope = GlobalSearchScope.moduleScope(module)-->Line_27 $$ collectClassesAndPackageNames(res, defaultPackage, scope)[ FD ]
Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) -->Line_12 $$ GlobalSearchScope scope = GlobalSearchScope.moduleScope(module)[ CD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_6 $$ List<LookupElement> res = new ArrayList<LookupElement>()[ CD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_8 $$ for (String completionVariant : getAllTargetNames(module)) [ FD ]
Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) -->Line_13 $$ JavaPsiFacade facade = JavaPsiFacade.getInstance(module.getProject())[ CD ]
Line_8 $$ for (String completionVariant : getAllTargetNames(module)) -->Line_9 $$ res.add(TailTypeDecorator.withTail(LookupElementBuilder.create(completionVariant), TailType.SPACE))[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_7 $$ if (text.substring(0, offset).matches("\\s*(grails\\s*)?(?:(:?-D\\S+|dev|prod|test)\\s+)*\\S*")) [ CD ]
Line_14 $$ if (prefix.endsWith(".") && prefix.length() > 1) -->Line_16 $$ if (p != null) [ CD ]
Line_14 $$ if (prefix.endsWith(".") && prefix.length() > 1) -->Line_15 $$ PsiPackage p = facade.findPackage(prefix.substring(0, prefix.length() - 1))[ CD ]
Line_17 $$ for (PsiClass aClass : p.getClasses(scope)) -->Line_20 $$ res.add(LookupElementBuilder.create(aClass, qualifiedName))[ FD ]
Line_2 $$ public static Collection<LookupElement> collectVariants(@NotNull Module module, @NotNull String text, int offset, @NotNull String prefix) -->Line_12 $$ GlobalSearchScope scope = GlobalSearchScope.moduleScope(module)[ FD ]
Line_25 $$ PsiPackage defaultPackage = facade.findPackage("")-->Line_27 $$ collectClassesAndPackageNames(res, defaultPackage, scope)[ FD ]
Line_19 $$ if (qualifiedName != null) -->Line_20 $$ res.add(LookupElementBuilder.create(aClass, qualifiedName))[ CD ]
