Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_18 $$ insertSpacesByGroovyContinuationIndent(editor, project)[ FD ]
Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) -->Line_16 $$ originalHandler.execute(editor, context)[ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_7 $$ if (caret < 1 || caret > text.length() - 1) [ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_15 $$ originalHandler.execute(editor, context)[ FD ]
Line_3 $$ String text = editor.getDocument().getText()-->Line_12 $$ if (text.length() > caret) [ FD ]
Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) -->Line_17 $$ editor.getCaretModel().moveCaretRelatively(0, -1, false, false, true)[ CD ]
Line_12 $$ if (text.length() > caret) -->Line_13 $$ iterator = highlighter.createIterator(caret)[ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_11 $$ if (GroovyTokenTypes.mLBRACK == iterator.getTokenType()) [ CD ]
Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) -->Line_15 $$ originalHandler.execute(editor, context)[ CD ]
Line_10 $$ HighlighterIterator iterator = highlighter.createIterator(caret - 1)-->Line_11 $$ if (GroovyTokenTypes.mLBRACK == iterator.getTokenType()) [ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_12 $$ if (text.length() > caret) [ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_3 $$ String text = editor.getDocument().getText()[ CD ]
Line_4 $$ if (text == null || text.isEmpty())-->Line_5 $$ return false[ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_23 $$ return false[ CD ]
Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) -->Line_18 $$ insertSpacesByGroovyContinuationIndent(editor, project)[ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_4 $$ if (text == null || text.isEmpty())[ CD ]
Line_3 $$ String text = editor.getDocument().getText()-->Line_7 $$ if (caret < 1 || caret > text.length() - 1) [ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_6 $$ final EditorHighlighter highlighter = ((EditorEx) editor).getHighlighter()[ CD ]
Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) -->Line_19 $$ return true[ CD ]
Line_10 $$ HighlighterIterator iterator = highlighter.createIterator(caret - 1)-->Line_13 $$ iterator = highlighter.createIterator(caret)[ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_17 $$ editor.getCaretModel().moveCaretRelatively(0, -1, false, false, true)[ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_13 $$ iterator = highlighter.createIterator(caret)[ FD ]
Line_12 $$ if (text.length() > caret) -->Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) [ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_16 $$ originalHandler.execute(editor, context)[ FD ]
Line_6 $$ final EditorHighlighter highlighter = ((EditorEx) editor).getHighlighter()-->Line_10 $$ HighlighterIterator iterator = highlighter.createIterator(caret - 1)[ FD ]
Line_10 $$ HighlighterIterator iterator = highlighter.createIterator(caret - 1)-->Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) [ FD ]
Line_7 $$ if (caret < 1 || caret > text.length() - 1) -->Line_8 $$ return false[ CD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_10 $$ HighlighterIterator iterator = highlighter.createIterator(caret - 1)[ CD ]
Line_6 $$ final EditorHighlighter highlighter = ((EditorEx) editor).getHighlighter()-->Line_13 $$ iterator = highlighter.createIterator(caret)[ FD ]
Line_2 $$ private static boolean handleBetweenSquareBraces(Editor editor, int caret, DataContext context, Project project, EditorActionHandler originalHandler) -->Line_3 $$ String text = editor.getDocument().getText()[ FD ]
Line_13 $$ iterator = highlighter.createIterator(caret)-->Line_14 $$ if (GroovyTokenTypes.mRBRACK == iterator.getTokenType()) [ FD ]
Line_3 $$ String text = editor.getDocument().getText()-->Line_4 $$ if (text == null || text.isEmpty())[ FD ]
Line_11 $$ if (GroovyTokenTypes.mLBRACK == iterator.getTokenType()) -->Line_12 $$ if (text.length() > caret) [ CD ]
