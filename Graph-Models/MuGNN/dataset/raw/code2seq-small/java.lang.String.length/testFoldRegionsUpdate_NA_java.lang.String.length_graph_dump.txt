Line_5 $$ final int foldStartOffset = "import".length() + 1-->Line_15 $$ FoldRegion newFoldRegion = foldingModel.addFoldRegion(foldStartOffset, newFoldEndOffset, "...")[ FD ]
Line_3 $$ String text = "import java.util.List;\n" + "import java.util.ArrayList;\n" + "\n" + "class Test -->Line_4 $$ init(40, text)[ FD ]
Line_5 $$ final int foldStartOffset = "import".length() + 1-->Line_11 $$ FoldRegion oldFoldRegion = getFoldRegion(foldStartOffset)[ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_6 $$ int foldEndOffset = text.indexOf("class") - 2[ CD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_4 $$ init(40, text)[ CD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_9 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()[ CD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_7 $$ addCollapsedFoldRegion(foldStartOffset, foldEndOffset, "...")[ CD ]
Line_9 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()-->Line_10 $$ foldingModel.runBatchFoldingOperation(() -> [ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_19 $$ CodeFoldingManager.getInstance(getProject()).updateFoldRegions(myEditor)[ CD ]
Line_11 $$ FoldRegion oldFoldRegion = getFoldRegion(foldStartOffset)-->Line_13 $$ foldingModel.removeFoldRegion(oldFoldRegion)[ FD ]
Line_15 $$ FoldRegion newFoldRegion = foldingModel.addFoldRegion(foldStartOffset, newFoldEndOffset, "...")-->Line_16 $$ assertNotNull(newFoldRegion)[ FD ]
Line_11 $$ FoldRegion oldFoldRegion = getFoldRegion(foldStartOffset)-->Line_12 $$ assertNotNull(oldFoldRegion)[ FD ]
Line_9 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()-->Line_13 $$ foldingModel.removeFoldRegion(oldFoldRegion)[ FD ]
Line_14 $$ int newFoldEndOffset = myEditor.getDocument().getText().indexOf("class") - 2-->Line_15 $$ FoldRegion newFoldRegion = foldingModel.addFoldRegion(foldStartOffset, newFoldEndOffset, "...")[ FD ]
Line_15 $$ FoldRegion newFoldRegion = foldingModel.addFoldRegion(foldStartOffset, newFoldEndOffset, "...")-->Line_17 $$ newFoldRegion.setExpanded(false)[ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_20 $$ assertEquals(new VisualPosition(2, 0), myEditor.logicalToVisualPosition(new LogicalPosition(5, 0)))[ CD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_10 $$ foldingModel.runBatchFoldingOperation(() -> [ CD ]
Line_3 $$ String text = "import java.util.List;\n" + "import java.util.ArrayList;\n" + "\n" + "class Test -->Line_6 $$ int foldEndOffset = text.indexOf("class") - 2[ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_8 $$ myEditor.getDocument().insertString(foldEndOffset, "\nimport java.util.Date;\n")[ CD ]
Line_6 $$ int foldEndOffset = text.indexOf("class") - 2-->Line_8 $$ myEditor.getDocument().insertString(foldEndOffset, "\nimport java.util.Date;\n")[ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_3 $$ String text = "import java.util.List;\n" + "import java.util.ArrayList;\n" + "\n" + "class Test [ CD ]
Line_6 $$ int foldEndOffset = text.indexOf("class") - 2-->Line_7 $$ addCollapsedFoldRegion(foldStartOffset, foldEndOffset, "...")[ FD ]
Line_2 $$ public void testFoldRegionsUpdate() throws IOException -->Line_5 $$ final int foldStartOffset = "import".length() + 1[ CD ]
Line_5 $$ final int foldStartOffset = "import".length() + 1-->Line_7 $$ addCollapsedFoldRegion(foldStartOffset, foldEndOffset, "...")[ FD ]
Line_9 $$ final FoldingModel foldingModel = myEditor.getFoldingModel()-->Line_15 $$ FoldRegion newFoldRegion = foldingModel.addFoldRegion(foldStartOffset, newFoldEndOffset, "...")[ FD ]
