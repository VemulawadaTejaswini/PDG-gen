Line_16 $$ String space = buffer.toString()-->Line_17 $$ Indent indent = myCodeStyleManager.getIndent(space, fileType)[ FD ]
Line_5 $$ final FileType fileType = block.psiFile.getFileType()-->Line_6 $$ final Indent minIndent = computeMinIndent(block.editor, block.psiFile, block.startLine, block.endLine, fileType)[ FD ]
Line_4 $$ final CharSequence chars = document.getCharsSequence()-->Line_20 $$ char c = chars.charAt(offset)[ FD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_30 $$ commentLine(block, line, offset)[ CD ]
Line_13 $$ int offset = lineStart-->Line_24 $$ offset = lineStart + newSpace.length()[ FD ]
Line_17 $$ Indent indent = myCodeStyleManager.getIndent(space, fileType)-->Line_18 $$ if (indent.isGreaterThan(minIndent) || indent.equals(minIndent))[ FD ]
Line_24 $$ offset = lineStart + newSpace.length()-->Line_30 $$ commentLine(block, line, offset)[ FD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_12 $$ int lineStart = document.getLineStartOffset(line)[ CD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_7 $$ DocumentUtil.executeInBulk(document, block.endLine - block.startLine > Registry.intValue("comment.by.line.bulk.lines.trigger"), new Runnable() [ CD ]
Line_15 $$ while (true) -->Line_20 $$ char c = chars.charAt(offset)[ CD ]
Line_3 $$ final Document document = block.editor.getDocument()-->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ FD ]
Line_14 $$ final StringBuilder buffer = new StringBuilder()-->Line_16 $$ String space = buffer.toString()[ FD ]
Line_3 $$ final Document document = block.editor.getDocument()-->Line_7 $$ DocumentUtil.executeInBulk(document, block.endLine - block.startLine > Registry.intValue("comment.by.line.bulk.lines.trigger"), new Runnable() [ FD ]
Line_5 $$ final FileType fileType = block.psiFile.getFileType()-->Line_22 $$ String newSpace = myCodeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_15 $$ while (true) -->Line_28 $$ offset++[ CD ]
Line_13 $$ int offset = lineStart-->Line_28 $$ offset++[ FD ]
Line_24 $$ offset = lineStart + newSpace.length()-->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ FD ]
Line_21 $$ if (c != ' ' && c != '\t') -->Line_22 $$ String newSpace = myCodeStyleManager.fillIndent(minIndent, fileType)[ CD ]
Line_21 $$ if (c != ' ' && c != '\t') -->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ CD ]
Line_7 $$ DocumentUtil.executeInBulk(document, block.endLine - block.startLine > Registry.intValue("comment.by.line.bulk.lines.trigger"), new Runnable() -->Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) [ CD ]
Line_15 $$ while (true) -->Line_27 $$ buffer.append(c)[ CD ]
Line_15 $$ while (true) -->Line_17 $$ Indent indent = myCodeStyleManager.getIndent(space, fileType)[ CD ]
Line_13 $$ int offset = lineStart-->Line_30 $$ commentLine(block, line, offset)[ FD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_30 $$ commentLine(block, line, offset)[ FD ]
Line_6 $$ final Indent minIndent = computeMinIndent(block.editor, block.psiFile, block.startLine, block.endLine, fileType)-->Line_18 $$ if (indent.isGreaterThan(minIndent) || indent.equals(minIndent))[ FD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_5 $$ final FileType fileType = block.psiFile.getFileType()[ CD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_3 $$ final Document document = block.editor.getDocument()[ CD ]
Line_21 $$ if (c != ' ' && c != '\t') -->Line_24 $$ offset = lineStart + newSpace.length()[ CD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_30 $$ commentLine(block, line, offset)[ FD ]
Line_3 $$ final Document document = block.editor.getDocument()-->Line_12 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_4 $$ final CharSequence chars = document.getCharsSequence()[ CD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_15 $$ while (true) [ CD ]
Line_24 $$ offset = lineStart + newSpace.length()-->Line_20 $$ char c = chars.charAt(offset)[ FD ]
Line_6 $$ final Indent minIndent = computeMinIndent(block.editor, block.psiFile, block.startLine, block.endLine, fileType)-->Line_22 $$ String newSpace = myCodeStyleManager.fillIndent(minIndent, fileType)[ FD ]
Line_12 $$ int lineStart = document.getLineStartOffset(line)-->Line_24 $$ offset = lineStart + newSpace.length()[ FD ]
Line_15 $$ while (true) -->Line_16 $$ String space = buffer.toString()[ CD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_12 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
Line_13 $$ int offset = lineStart-->Line_20 $$ char c = chars.charAt(offset)[ FD ]
Line_22 $$ String newSpace = myCodeStyleManager.fillIndent(minIndent, fileType)-->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ FD ]
Line_5 $$ final FileType fileType = block.psiFile.getFileType()-->Line_17 $$ Indent indent = myCodeStyleManager.getIndent(space, fileType)[ FD ]
Line_14 $$ final StringBuilder buffer = new StringBuilder()-->Line_27 $$ buffer.append(c)[ FD ]
Line_24 $$ offset = lineStart + newSpace.length()-->Line_28 $$ offset++[ FD ]
Line_15 $$ while (true) -->Line_18 $$ if (indent.isGreaterThan(minIndent) || indent.equals(minIndent))[ CD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_13 $$ int offset = lineStart[ CD ]
Line_2 $$ private void doIndentCommenting(final Block block) -->Line_6 $$ final Indent minIndent = computeMinIndent(block.editor, block.psiFile, block.startLine, block.endLine, fileType)[ CD ]
Line_3 $$ final Document document = block.editor.getDocument()-->Line_4 $$ final CharSequence chars = document.getCharsSequence()[ FD ]
Line_12 $$ int lineStart = document.getLineStartOffset(line)-->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ FD ]
Line_15 $$ while (true) -->Line_21 $$ if (c != ' ' && c != '\t') [ CD ]
Line_13 $$ int offset = lineStart-->Line_23 $$ document.replaceString(lineStart, offset, newSpace)[ FD ]
Line_20 $$ char c = chars.charAt(offset)-->Line_27 $$ buffer.append(c)[ FD ]
Line_22 $$ String newSpace = myCodeStyleManager.fillIndent(minIndent, fileType)-->Line_24 $$ offset = lineStart + newSpace.length()[ FD ]
Line_11 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_14 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
