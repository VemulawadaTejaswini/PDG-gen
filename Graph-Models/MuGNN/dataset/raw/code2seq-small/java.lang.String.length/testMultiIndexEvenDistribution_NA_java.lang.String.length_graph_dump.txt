Line_44 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))-->Line_53 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_44 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))-->Line_45 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_78 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_74 $$ int numberOfRelocatingShards = 0[ CD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_87 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_73 $$ assertThat(prevRoutingTable != routingTable, equalTo(true))[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_59 $$ logger.info("Adding additional " + (numberOfIndices / 2) + " nodes, nothing should change")[ CD ]
Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_70 $$ prevRoutingTable = routingTable[ CD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_20 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ CD ]
Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()-->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_52 $$ int nodeIndex = Integer.parseInt(routingNode.nodeId().substring("node".length()))-->Line_90 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ CD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_19 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_68 $$ assertThat(prevRoutingTable != routingTable, equalTo(false))[ CD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) -->Line_62 $$ nodesBuilder.put(newNode("node" + i))[ CD ]
Line_10 $$ MetaData metaData = metaDataBuilder.build()-->Line_13 $$ routingTableBuilder.addAsNew(metaData.index("test" + i))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ CD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_80 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_54 $$ for (ShardRouting shardRoutingEntry : routingNode) -->Line_56 $$ encounteredIndices.add(shardRoutingEntry.index())[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ CD ]
Line_47 $$ RoutingNodes routingNodes = clusterState.getRoutingNodes()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_79 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ CD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_41 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), equalTo(INITIALIZING))[ CD ]
Line_49 $$ for (RoutingNode routingNode : routingNodes) -->Line_51 $$ assertThat(routingNode.size(), equalTo(2))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_21 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ CD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_92 $$ assertThat(numberOfRelocatingShards, equalTo(25))[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_6 $$ MetaData.Builder metaDataBuilder = MetaData.builder()[ CD ]
Line_49 $$ for (RoutingNode routingNode : routingNodes) -->Line_52 $$ int nodeIndex = Integer.parseInt(routingNode.nodeId().substring("node".length()))[ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_23 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId(), nullValue())[ CD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_70 $$ prevRoutingTable = routingTable[ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) -->Line_85 $$ numberOfRelocatingShards++[ CD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())[ CD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_87 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ CD ]
Line_75 $$ int numberOfStartedShards = 0-->Line_93 $$ assertThat(numberOfStartedShards, equalTo(25))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_43 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_40 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_5 $$ logger.info("Building initial routing table with " + numberOfIndices + " indices")[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_64 $$ prevRoutingTable = routingTable[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_20 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()[ CD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_77 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()-->Line_89 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_23 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId(), nullValue())[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) [ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_87 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_41 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), equalTo(INITIALIZING))[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_21 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_11 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder()-->Line_13 $$ routingTableBuilder.addAsNew(metaData.index("test" + i))[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_35 $$ assertThat(prevRoutingTable != routingTable, equalTo(true))[ CD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) [ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_39 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_17 $$ assertThat(routingTable.indicesRouting().size(), equalTo(numberOfIndices))[ CD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_81 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), anyOf(equalTo(STARTED), equalTo(RELOCATING)))[ CD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.cluster_concurrent_rebalance", -1).build())-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_77 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_18 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.cluster_concurrent_rebalance", -1).build())-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_69 $$ logger.info("Marking the shard as started")[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_79 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_41 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), equalTo(INITIALIZING))[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_81 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), anyOf(equalTo(STARTED), equalTo(RELOCATING)))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ CD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_47 $$ RoutingNodes routingNodes = clusterState.getRoutingNodes()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_4 $$ final int numberOfIndices = 50[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_39 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())-->Line_62 $$ nodesBuilder.put(newNode("node" + i))[ FD ]
Line_11 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder()-->Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()[ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_64 $$ prevRoutingTable = routingTable[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_81 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), anyOf(equalTo(STARTED), equalTo(RELOCATING)))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_80 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_80 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_77 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_79 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_37 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) [ FD ]
Line_54 $$ for (ShardRouting shardRoutingEntry : routingNode) -->Line_55 $$ assertThat(encounteredIndices, not(hasItem(shardRoutingEntry.index())))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_87 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_45 $$ assertThat(nodeIndex, lessThan(25))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_7 $$ for (int i = 0; i < numberOfIndices; i++) [ CD ]
Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) -->Line_29 $$ nodesBuilder.put(newNode("node" + i))[ CD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_70 $$ prevRoutingTable = routingTable[ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_80 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ CD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_64 $$ prevRoutingTable = routingTable-->Line_70 $$ prevRoutingTable = routingTable[ FD ]
Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) -->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_40 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()-->Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_87 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_52 $$ int nodeIndex = Integer.parseInt(routingNode.nodeId().substring("node".length()))-->Line_53 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_48 $$ Set<String> encounteredIndices = new HashSet()[ CD ]
Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_74 $$ int numberOfRelocatingShards = 0-->Line_85 $$ numberOfRelocatingShards++[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_42 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ CD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_18 $$ for (int i = 0; i < numberOfIndices; i++) [ CD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_81 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), anyOf(equalTo(STARTED), equalTo(RELOCATING)))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_70 $$ prevRoutingTable = routingTable[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_12 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_44 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))[ CD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_89 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))[ CD ]
Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) -->Line_83 $$ numberOfStartedShards++[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) [ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_47 $$ RoutingNodes routingNodes = clusterState.getRoutingNodes()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_88 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_77 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_6 $$ MetaData.Builder metaDataBuilder = MetaData.builder()-->Line_10 $$ MetaData metaData = metaDataBuilder.build()[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_18 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_25 $$ logger.info("Adding " + (numberOfIndices / 2) + " nodes")[ CD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_80 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_43 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()-->Line_89 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_37 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) [ CD ]
Line_49 $$ for (RoutingNode routingNode : routingNodes) -->Line_50 $$ assertThat(routingNode.numberOfShardsWithState(STARTED), equalTo(0))[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_13 $$ routingTableBuilder.addAsNew(metaData.index("test" + i))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_64 $$ prevRoutingTable = routingTable[ FD ]
Line_12 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_79 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_81 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), anyOf(equalTo(STARTED), equalTo(RELOCATING)))[ FD ]
Line_75 $$ int numberOfStartedShards = 0-->Line_83 $$ numberOfStartedShards++[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_43 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ CD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_11 $$ RoutingTable.Builder routingTableBuilder = RoutingTable.builder()[ CD ]
Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()-->Line_62 $$ nodesBuilder.put(newNode("node" + i))[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_78 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_39 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ CD ]
Line_10 $$ MetaData metaData = metaDataBuilder.build()-->Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()[ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_12 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_19 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_44 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))-->Line_90 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_38 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_17 $$ assertThat(routingTable.indicesRouting().size(), equalTo(numberOfIndices))[ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_18 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_6 $$ MetaData.Builder metaDataBuilder = MetaData.builder()-->Line_8 $$ metaDataBuilder.put(IndexMetaData.builder("test" + i).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))[ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_12 $$ for (int i = 0; i < numberOfIndices; i++) [ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_43 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_37 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) -->Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) [ CD ]
Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_42 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) [ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_47 $$ RoutingNodes routingNodes = clusterState.getRoutingNodes()[ FD ]
Line_43 $$ String nodeId = routingTable.index("test" + i).shard(0).shards().get(0).currentNodeId()-->Line_44 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))[ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) [ CD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_36 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_22 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), equalTo(UNASSIGNED))[ CD ]
Line_48 $$ Set<String> encounteredIndices = new HashSet()-->Line_56 $$ encounteredIndices.add(shardRoutingEntry.index())[ FD ]
Line_16 $$ ClusterState clusterState = ClusterState.builder(org.elasticsearch.cluster.ClusterName.DEFAULT).metaData(metaData).routingTable(routingTable).build()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_72 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_34 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()-->Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()[ FD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_78 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ CD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_77 $$ assertThat(routingTable.index("test" + i).shards().size(), equalTo(1))[ FD ]
Line_7 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_8 $$ metaDataBuilder.put(IndexMetaData.builder("test" + i).settings(settings(Version.CURRENT)).numberOfShards(1).numberOfReplicas(0))[ CD ]
Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.cluster_concurrent_rebalance", -1).build())-->Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()[ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) [ FD ]
Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()-->Line_29 $$ nodesBuilder.put(newNode("node" + i))[ FD ]
Line_26 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) -->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ FD ]
Line_66 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_78 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_74 $$ int numberOfRelocatingShards = 0-->Line_92 $$ assertThat(numberOfRelocatingShards, equalTo(25))[ FD ]
Line_60 $$ nodesBuilder = DiscoveryNodes.builder(clusterState.nodes())-->Line_65 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_7 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_42 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).primary(), equalTo(true))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_40 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).unassigned(), equalTo(false))[ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_79 $$ assertThat(routingTable.index("test" + i).shard(0).shards().size(), equalTo(1))[ FD ]
Line_76 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_90 $$ assertThat(nodeIndex, lessThan(25))[ CD ]
Line_31 $$ RoutingTable prevRoutingTable = routingTable-->Line_64 $$ prevRoutingTable = routingTable[ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_47 $$ RoutingNodes routingNodes = clusterState.getRoutingNodes()[ CD ]
Line_31 $$ RoutingTable prevRoutingTable = routingTable-->Line_70 $$ prevRoutingTable = routingTable[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_93 $$ assertThat(numberOfStartedShards, equalTo(25))[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_3 $$ AllocationService strategy = createAllocationService(settingsBuilder().put("cluster.routing.allocation.concurrent_recoveries", 10).put(ClusterRebalanceAllocationDecider.CLUSTER_ROUTING_ALLOCATION_ALLOW_REBALANCE_SETTING.getKey(), "always").put("cluster.routing.allocation.cluster_concurrent_rebalance", -1).build())[ CD ]
Line_48 $$ Set<String> encounteredIndices = new HashSet()-->Line_55 $$ assertThat(encounteredIndices, not(hasItem(shardRoutingEntry.index())))[ FD ]
Line_89 $$ int nodeIndex = Integer.parseInt(nodeId.substring("node".length()))-->Line_90 $$ assertThat(nodeIndex, lessThan(25))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_31 $$ RoutingTable prevRoutingTable = routingTable[ CD ]
Line_36 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_38 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ CD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_84 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == RELOCATING) [ FD ]
Line_71 $$ routingTable = strategy.applyStartedShards(clusterState, routingNodes.shardsWithState(INITIALIZING)).routingTable()-->Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) [ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_82 $$ if (routingTable.index("test" + i).shard(0).shards().get(0).state() == STARTED) [ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_67 $$ clusterState = ClusterState.builder(clusterState).routingTable(routingTable).build()[ CD ]
Line_18 $$ for (int i = 0; i < numberOfIndices; i++) -->Line_28 $$ for (int i = 0; i < (numberOfIndices / 2); i++) [ FD ]
Line_4 $$ final int numberOfIndices = 50-->Line_17 $$ assertThat(routingTable.indicesRouting().size(), equalTo(numberOfIndices))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_38 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_27 $$ List<DiscoveryNode> nodes = new ArrayList()[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_75 $$ int numberOfStartedShards = 0[ CD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_10 $$ MetaData metaData = metaDataBuilder.build()[ CD ]
Line_15 $$ RoutingTable routingTable = routingTableBuilder.build()-->Line_22 $$ assertThat(routingTable.index("test" + i).shard(0).shards().get(0).state(), equalTo(UNASSIGNED))[ FD ]
Line_33 $$ routingTable = strategy.reroute(clusterState, "reroute").routingTable()-->Line_78 $$ assertThat(routingTable.index("test" + i).shard(0).size(), equalTo(1))[ FD ]
Line_2 $$ public void testMultiIndexEvenDistribution() -->Line_32 $$ clusterState = ClusterState.builder(clusterState).nodes(nodesBuilder).build()[ CD ]
Line_61 $$ for (int i = (numberOfIndices / 2); i < numberOfIndices; i++) -->Line_76 $$ for (int i = 0; i < numberOfIndices; i++) [ FD ]
