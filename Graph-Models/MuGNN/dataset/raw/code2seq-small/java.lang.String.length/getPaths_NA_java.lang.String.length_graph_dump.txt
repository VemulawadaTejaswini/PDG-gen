Line_7 $$ int dirIndex = myPathPattern.lastIndexOf(File.separator)-->Line_8 $$ if (dirIndex == -1) [ FD ]
Line_7 $$ int dirIndex = myPathPattern.lastIndexOf(File.separator)-->Line_12 $$ collectMatchedFiles(new File(myPathPattern.substring(0, dirIndex)), Pattern.compile(FileUtil.convertAntToRegexp(myPathPattern.substring(dirIndex + File.separator.length()))), files)[ FD ]
Line_16 $$ if (myShowAll) -->Line_22 $$ return result[ CD ]
Line_17 $$ SmartHashSet<String> result = new SmartHashSet<String>()-->Line_18 $$ result.ensureCapacity(files.size())[ FD ]
Line_26 $$ if (lastFile != null) -->Line_31 $$ lastFile = file[ CD ]
Line_11 $$ List<File> files = new SmartList<File>()-->Line_13 $$ if (files.isEmpty()) [ FD ]
Line_2 $$ public Set<String> getPaths() -->Line_4 $$ if (logFile.exists()) [ CD ]
Line_16 $$ if (myShowAll) -->Line_24 $$ File lastFile = null[ CD ]
Line_28 $$ lastFile = file-->Line_31 $$ lastFile = file[ FD ]
Line_19 $$ for (File file : files) -->Line_31 $$ lastFile = file[ FD ]
Line_2 $$ public Set<String> getPaths() -->Line_13 $$ if (files.isEmpty()) [ CD ]
Line_24 $$ File lastFile = null-->Line_27 $$ if (file.lastModified() > lastFile.lastModified()) [ FD ]
Line_3 $$ File logFile = new File(myPathPattern)-->Line_4 $$ if (logFile.exists()) [ FD ]
Line_24 $$ File lastFile = null-->Line_26 $$ if (lastFile != null) [ FD ]
Line_19 $$ for (File file : files) -->Line_28 $$ lastFile = file[ FD ]
Line_24 $$ File lastFile = null-->Line_31 $$ lastFile = file[ FD ]
Line_19 $$ for (File file : files) -->Line_20 $$ result.add(file.getPath())[ FD ]
Line_16 $$ if (myShowAll) -->Line_35 $$ return Collections.singleton(lastFile.getPath())[ CD ]
Line_2 $$ public Set<String> getPaths() -->Line_3 $$ File logFile = new File(myPathPattern)[ CD ]
Line_24 $$ File lastFile = null-->Line_28 $$ lastFile = file[ FD ]
Line_26 $$ if (lastFile != null) -->Line_27 $$ if (file.lastModified() > lastFile.lastModified()) [ CD ]
Line_11 $$ List<File> files = new SmartList<File>()-->Line_18 $$ result.ensureCapacity(files.size())[ FD ]
Line_2 $$ public Set<String> getPaths() -->Line_8 $$ if (dirIndex == -1) [ CD ]
Line_4 $$ if (logFile.exists()) -->Line_5 $$ return Collections.singleton(myPathPattern)[ CD ]
Line_27 $$ if (file.lastModified() > lastFile.lastModified()) -->Line_28 $$ lastFile = file[ CD ]
Line_2 $$ public Set<String> getPaths() -->Line_11 $$ List<File> files = new SmartList<File>()[ CD ]
Line_28 $$ lastFile = file-->Line_35 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_2 $$ public Set<String> getPaths() -->Line_12 $$ collectMatchedFiles(new File(myPathPattern.substring(0, dirIndex)), Pattern.compile(FileUtil.convertAntToRegexp(myPathPattern.substring(dirIndex + File.separator.length()))), files)[ CD ]
Line_31 $$ lastFile = file-->Line_35 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_17 $$ SmartHashSet<String> result = new SmartHashSet<String>()-->Line_20 $$ result.add(file.getPath())[ FD ]
Line_13 $$ if (files.isEmpty()) -->Line_14 $$ return Collections.emptySet()[ CD ]
Line_19 $$ for (File file : files) -->Line_27 $$ if (file.lastModified() > lastFile.lastModified()) [ FD ]
Line_16 $$ if (myShowAll) -->Line_17 $$ SmartHashSet<String> result = new SmartHashSet<String>()[ CD ]
Line_24 $$ File lastFile = null-->Line_35 $$ return Collections.singleton(lastFile.getPath())[ FD ]
Line_11 $$ List<File> files = new SmartList<File>()-->Line_12 $$ collectMatchedFiles(new File(myPathPattern.substring(0, dirIndex)), Pattern.compile(FileUtil.convertAntToRegexp(myPathPattern.substring(dirIndex + File.separator.length()))), files)[ FD ]
Line_2 $$ public Set<String> getPaths() -->Line_16 $$ if (myShowAll) [ CD ]
Line_16 $$ if (myShowAll) -->Line_18 $$ result.ensureCapacity(files.size())[ CD ]
Line_8 $$ if (dirIndex == -1) -->Line_9 $$ return Collections.emptySet()[ CD ]
Line_2 $$ public Set<String> getPaths() -->Line_7 $$ int dirIndex = myPathPattern.lastIndexOf(File.separator)[ CD ]
