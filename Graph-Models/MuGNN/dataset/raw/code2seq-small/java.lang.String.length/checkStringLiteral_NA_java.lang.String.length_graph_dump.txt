Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_4 $$ String text[ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_20 $$ int[] offsets = new int[substring.length() + 1][ CD ]
Line_15 $$ String substring = text.substring(quote.length())-->Line_21 $$ boolean result = GrStringUtil.parseStringCharacters(substring, builder, offsets)[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_3 $$ InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(literal.getProject())[ FD ]
Line_11 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_23 $$ if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') [ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_8 $$ text = literal.getText()[ FD ]
Line_4 $$ String text-->Line_12 $$ String quote = GrStringUtil.getStartQuote(text)[ FD ]
Line_13 $$ if (quote.isEmpty())-->Line_14 $$ return[ CD ]
Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)-->Line_8 $$ text = literal.getText()[ FD ]
Line_4 $$ String text-->Line_15 $$ String substring = text.substring(quote.length())[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_22 $$ LOG.assertTrue(result)[ CD ]
Line_21 $$ boolean result = GrStringUtil.parseStringCharacters(substring, builder, offsets)-->Line_22 $$ LOG.assertTrue(result)[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_13 $$ if (quote.isEmpty())[ CD ]
Line_5 $$ if (injectedLanguageManager.isInjectedFragment(literal.getContainingFile())) -->Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)[ CD ]
Line_20 $$ int[] offsets = new int[substring.length() + 1]-->Line_21 $$ boolean result = GrStringUtil.parseStringCharacters(substring, builder, offsets)[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_24 $$ myHolder.createErrorAnnotation(literal, GroovyBundle.message("string.end.expected"))[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_23 $$ if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') [ CD ]
Line_4 $$ String text-->Line_11 $$ StringBuilder builder = new StringBuilder(text.length())[ FD ]
Line_8 $$ text = literal.getText()-->Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) [ FD ]
Line_8 $$ text = literal.getText()-->Line_11 $$ StringBuilder builder = new StringBuilder(text.length())[ FD ]
Line_3 $$ InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(literal.getProject())-->Line_5 $$ if (injectedLanguageManager.isInjectedFragment(literal.getContainingFile())) [ FD ]
Line_4 $$ String text-->Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)[ FD ]
Line_12 $$ String quote = GrStringUtil.getStartQuote(text)-->Line_23 $$ if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') [ FD ]
Line_15 $$ String substring = text.substring(quote.length())-->Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) [ FD ]
Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)-->Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) [ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_21 $$ boolean result = GrStringUtil.parseStringCharacters(substring, builder, offsets)[ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_5 $$ if (injectedLanguageManager.isInjectedFragment(literal.getContainingFile())) [ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) [ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_12 $$ String quote = GrStringUtil.getStartQuote(text)[ CD ]
Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) -->Line_18 $$ return[ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_5 $$ if (injectedLanguageManager.isInjectedFragment(literal.getContainingFile())) [ CD ]
Line_3 $$ InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(literal.getProject())-->Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)[ FD ]
Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)-->Line_15 $$ String substring = text.substring(quote.length())[ FD ]
Line_8 $$ text = literal.getText()-->Line_12 $$ String quote = GrStringUtil.getStartQuote(text)[ FD ]
Line_15 $$ String substring = text.substring(quote.length())-->Line_20 $$ int[] offsets = new int[substring.length() + 1][ FD ]
Line_4 $$ String text-->Line_8 $$ text = literal.getText()[ FD ]
Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)-->Line_11 $$ StringBuilder builder = new StringBuilder(text.length())[ FD ]
Line_5 $$ if (injectedLanguageManager.isInjectedFragment(literal.getContainingFile())) -->Line_8 $$ text = literal.getText()[ CD ]
Line_4 $$ String text-->Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) [ FD ]
Line_12 $$ String quote = GrStringUtil.getStartQuote(text)-->Line_13 $$ if (quote.isEmpty())[ FD ]
Line_8 $$ text = literal.getText()-->Line_15 $$ String substring = text.substring(quote.length())[ FD ]
Line_15 $$ String substring = text.substring(quote.length())-->Line_23 $$ if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') [ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_15 $$ String substring = text.substring(quote.length())[ CD ]
Line_16 $$ if (!GrStringUtil.parseStringCharacters(substring, new StringBuilder(text.length()), null)) -->Line_17 $$ myHolder.createErrorAnnotation(literal, GroovyBundle.message("illegal.escape.character.in.string.literal"))[ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_17 $$ myHolder.createErrorAnnotation(literal, GroovyBundle.message("illegal.escape.character.in.string.literal"))[ FD ]
Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)-->Line_12 $$ String quote = GrStringUtil.getStartQuote(text)[ FD ]
Line_12 $$ String quote = GrStringUtil.getStartQuote(text)-->Line_15 $$ String substring = text.substring(quote.length())[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_11 $$ StringBuilder builder = new StringBuilder(text.length())[ CD ]
Line_23 $$ if (!builder.toString().endsWith(quote) || substring.charAt(offsets[builder.length() - quote.length()]) == '\\') -->Line_24 $$ myHolder.createErrorAnnotation(literal, GroovyBundle.message("string.end.expected"))[ CD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_6 $$ text = injectedLanguageManager.getUnescapedText(literal)[ FD ]
Line_2 $$ private void checkStringLiteral(PsiElement literal) -->Line_3 $$ InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(literal.getProject())[ CD ]
Line_11 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_21 $$ boolean result = GrStringUtil.parseStringCharacters(substring, builder, offsets)[ FD ]
