Line_9 $$ final String url = pair[0]-->Line_14 $$ ExternalResourceManagerExImpl.registerResourceTemporarily(url, virtualFile.getPath(), getTestRootDisposable())[ FD ]
Line_2 $$ private void doSchemaTestWithManyFilesFromSeparateDir(final String[][] urls, @Nullable Processor<List<VirtualFile>> additionalTestingProcessor) throws Exception -->Line_23 $$ if (additionalTestingProcessor != null)[ FD ]
Line_6 $$ final Set<VirtualFile> usedFiles = new THashSet<VirtualFile>()-->Line_18 $$ if (!usedFiles.contains(file)) [ FD ]
Line_11 $$ final VirtualFile virtualFile = getVirtualFile(base + filename)-->Line_12 $$ usedFiles.add(virtualFile)[ FD ]
Line_4 $$ List<VirtualFile> files = new ArrayList<VirtualFile>(6)-->Line_5 $$ files.add(getVirtualFile(BASE_PATH + getTestName(false) + ".xml"))[ FD ]
Line_4 $$ List<VirtualFile> files = new ArrayList<VirtualFile>(6)-->Line_19 $$ files.add(file)[ FD ]
Line_9 $$ final String url = pair[0]-->Line_10 $$ final String filename = pair.length > 1 ? pair[1] : url.substring(url.lastIndexOf('/') + 1) + (url.endsWith(".xsd") ? "" : ".xsd")[ FD ]
Line_17 $$ for (VirtualFile file : LocalFileSystem.getInstance().findFileByPath(getTestDataPath() + base.substring(0, base.length() - 1)).getChildren()) -->Line_19 $$ files.add(file)[ FD ]
Line_2 $$ private void doSchemaTestWithManyFilesFromSeparateDir(final String[][] urls, @Nullable Processor<List<VirtualFile>> additionalTestingProcessor) throws Exception -->Line_24 $$ additionalTestingProcessor.process(files)[ FD ]
Line_18 $$ if (!usedFiles.contains(file)) -->Line_19 $$ files.add(file)[ CD ]
Line_23 $$ if (additionalTestingProcessor != null)-->Line_24 $$ additionalTestingProcessor.process(files)[ CD ]
Line_2 $$ private void doSchemaTestWithManyFilesFromSeparateDir(final String[][] urls, @Nullable Processor<List<VirtualFile>> additionalTestingProcessor) throws Exception -->Line_26 $$ unregisterResources(urls)[ FD ]
Line_11 $$ final VirtualFile virtualFile = getVirtualFile(base + filename)-->Line_14 $$ ExternalResourceManagerExImpl.registerResourceTemporarily(url, virtualFile.getPath(), getTestRootDisposable())[ FD ]
Line_17 $$ for (VirtualFile file : LocalFileSystem.getInstance().findFileByPath(getTestDataPath() + base.substring(0, base.length() - 1)).getChildren()) -->Line_18 $$ if (!usedFiles.contains(file)) [ FD ]
Line_11 $$ final VirtualFile virtualFile = getVirtualFile(base + filename)-->Line_15 $$ files.add(virtualFile)[ FD ]
Line_4 $$ List<VirtualFile> files = new ArrayList<VirtualFile>(6)-->Line_24 $$ additionalTestingProcessor.process(files)[ FD ]
Line_4 $$ List<VirtualFile> files = new ArrayList<VirtualFile>(6)-->Line_22 $$ doTest(VfsUtilCore.toVirtualFileArray(files), true, false)[ FD ]
Line_6 $$ final Set<VirtualFile> usedFiles = new THashSet<VirtualFile>()-->Line_12 $$ usedFiles.add(virtualFile)[ FD ]
Line_9 $$ final String url = pair[0]-->Line_13 $$ if (url != null)[ FD ]
Line_4 $$ List<VirtualFile> files = new ArrayList<VirtualFile>(6)-->Line_15 $$ files.add(virtualFile)[ FD ]
Line_13 $$ if (url != null)-->Line_14 $$ ExternalResourceManagerExImpl.registerResourceTemporarily(url, virtualFile.getPath(), getTestRootDisposable())[ CD ]
Line_7 $$ final String base = BASE_PATH + getTestName(false) + "Schemas/"-->Line_17 $$ for (VirtualFile file : LocalFileSystem.getInstance().findFileByPath(getTestDataPath() + base.substring(0, base.length() - 1)).getChildren()) [ FD ]
