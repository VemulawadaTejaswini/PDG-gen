Line_2 $$ public void testExternalValues() throws Exception -->Line_35 $$ assertThat(doc.rootDoc().getField("file.name.suggest"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_32 $$ assertThat(doc.rootDoc().getField("file.name"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_12 $$ assertThat(doc.rootDoc().getField("file.content").stringValue(), is(originalText + "\n"))[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_37 $$ assertThat(doc.rootDoc().getField("file.name.suggest").fieldType().stored(), is(true))[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_11 $$ assertThat(doc.rootDoc().getField("file.content"), notNullValue())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_14 $$ assertThat(doc.rootDoc().getField("file.content_type").stringValue(), startsWith("text/plain;"))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_3 $$ String originalText = "This is an elasticsearch mapper attachment test."[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_18 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ CD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_26 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_37 $$ assertThat(doc.rootDoc().getField("file.name.suggest").fieldType().stored(), is(true))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_12 $$ assertThat(doc.rootDoc().getField("file.content").stringValue(), is(originalText + "\n"))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_34 $$ assertThat(doc.rootDoc().getField("file.name").fieldType().stored(), is(false))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_23 $$ assertThat(doc.rootDoc().getField("file.content").stringValue(), is(originalText + "\n"))[ FD ]
Line_3 $$ String originalText = "This is an elasticsearch mapper attachment test."-->Line_18 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_27 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest").stringValue(), startsWith("text/plain;"))[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_4 $$ String forcedName = "dummyname.txt"[ CD ]
Line_4 $$ String forcedName = "dummyname.txt"-->Line_36 $$ assertThat(doc.rootDoc().getField("file.name.suggest").stringValue(), is(forcedName))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_24 $$ assertThat(doc.rootDoc().getField("file.content_type"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_26 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_33 $$ assertThat(doc.rootDoc().getField("file.name").stringValue(), is(forcedName))[ CD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_35 $$ assertThat(doc.rootDoc().getField("file.name.suggest"), notNullValue())[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_29 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_19 $$ assertThat(doc.rootDoc().getField("file.content.suggest"), notNullValue())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_24 $$ assertThat(doc.rootDoc().getField("file.content_type"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_16 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest").stringValue(), startsWith("text/plain;"))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_5 $$ String bytes = Base64.encodeBytes(originalText.getBytes(StandardCharsets.ISO_8859_1))[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_17 $$ assertThat(doc.rootDoc().getField("file.content_length"), notNullValue())[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_30 $$ assertThat(doc.rootDoc().getField("file.content.suggest"), notNullValue())[ FD ]
Line_4 $$ String forcedName = "dummyname.txt"-->Line_33 $$ assertThat(doc.rootDoc().getField("file.name").stringValue(), is(forcedName))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_9 $$ DocumentMapper documentMapper = mapperService.documentMapperParser().parse("person", new CompressedXContent(mapping))[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_15 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_27 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest").stringValue(), startsWith("text/plain;"))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_27 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest").stringValue(), startsWith("text/plain;"))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_25 $$ assertThat(doc.rootDoc().getField("file.content_type").stringValue(), startsWith("text/plain;"))[ CD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_25 $$ assertThat(doc.rootDoc().getField("file.content_type").stringValue(), startsWith("text/plain;"))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_20 $$ assertThat(doc.rootDoc().getField("file.content.suggest").stringValue(), is(originalText + "\n"))[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_7 $$ MapperService mapperService = MapperTestUtils.newMapperService(createTempDir(), Settings.EMPTY, getIndicesModuleWithRegisteredAttachmentMapper())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_35 $$ assertThat(doc.rootDoc().getField("file.name.suggest"), notNullValue())[ FD ]
Line_7 $$ MapperService mapperService = MapperTestUtils.newMapperService(createTempDir(), Settings.EMPTY, getIndicesModuleWithRegisteredAttachmentMapper())-->Line_9 $$ DocumentMapper documentMapper = mapperService.documentMapperParser().parse("person", new CompressedXContent(mapping))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_36 $$ assertThat(doc.rootDoc().getField("file.name.suggest").stringValue(), is(forcedName))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_15 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_22 $$ assertThat(doc.rootDoc().getField("file.content"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_16 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest").stringValue(), startsWith("text/plain;"))[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_36 $$ assertThat(doc.rootDoc().getField("file.name.suggest").stringValue(), is(forcedName))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_28 $$ assertThat(doc.rootDoc().getField("file.content_length"), notNullValue())[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_33 $$ assertThat(doc.rootDoc().getField("file.name").stringValue(), is(forcedName))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_13 $$ assertThat(doc.rootDoc().getField("file.content_type"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_25 $$ assertThat(doc.rootDoc().getField("file.content_type").stringValue(), startsWith("text/plain;"))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_26 $$ assertThat(doc.rootDoc().getField("file.content_type.suggest"), notNullValue())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_19 $$ assertThat(doc.rootDoc().getField("file.content.suggest"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_36 $$ assertThat(doc.rootDoc().getField("file.name.suggest").stringValue(), is(forcedName))[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_23 $$ assertThat(doc.rootDoc().getField("file.content").stringValue(), is(originalText + "\n"))[ FD ]
Line_9 $$ DocumentMapper documentMapper = mapperService.documentMapperParser().parse("person", new CompressedXContent(mapping))-->Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_29 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ FD ]
Line_3 $$ String originalText = "This is an elasticsearch mapper attachment test."-->Line_29 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_32 $$ assertThat(doc.rootDoc().getField("file.name"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_11 $$ assertThat(doc.rootDoc().getField("file.content"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_29 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ CD ]
Line_3 $$ String originalText = "This is an elasticsearch mapper attachment test."-->Line_5 $$ String bytes = Base64.encodeBytes(originalText.getBytes(StandardCharsets.ISO_8859_1))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_34 $$ assertThat(doc.rootDoc().getField("file.name").fieldType().stored(), is(false))[ FD ]
Line_5 $$ String bytes = Base64.encodeBytes(originalText.getBytes(StandardCharsets.ISO_8859_1))-->Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_14 $$ assertThat(doc.rootDoc().getField("file.content_type").stringValue(), startsWith("text/plain;"))[ CD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_37 $$ assertThat(doc.rootDoc().getField("file.name.suggest").fieldType().stored(), is(true))[ FD ]
Line_5 $$ String bytes = Base64.encodeBytes(originalText.getBytes(StandardCharsets.ISO_8859_1))-->Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_28 $$ assertThat(doc.rootDoc().getField("file.content_length"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_8 $$ String mapping = copyToStringFromClasspath("/org/elasticsearch/index/mapper/attachment/test/unit/multifield/multifield-mapping.json")[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_31 $$ assertThat(doc.rootDoc().getField("file.content.suggest").stringValue(), is(originalText + "\n"))[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_22 $$ assertThat(doc.rootDoc().getField("file.content"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_34 $$ assertThat(doc.rootDoc().getField("file.name").fieldType().stored(), is(false))[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_17 $$ assertThat(doc.rootDoc().getField("file.content_length"), notNullValue())[ CD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_30 $$ assertThat(doc.rootDoc().getField("file.content.suggest"), notNullValue())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_28 $$ assertThat(doc.rootDoc().getField("file.content_length"), notNullValue())[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_32 $$ assertThat(doc.rootDoc().getField("file.name"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_33 $$ assertThat(doc.rootDoc().getField("file.name").stringValue(), is(forcedName))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_24 $$ assertThat(doc.rootDoc().getField("file.content_type"), notNullValue())[ CD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_31 $$ assertThat(doc.rootDoc().getField("file.content.suggest").stringValue(), is(originalText + "\n"))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_30 $$ assertThat(doc.rootDoc().getField("file.content.suggest"), notNullValue())[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_23 $$ assertThat(doc.rootDoc().getField("file.content").stringValue(), is(originalText + "\n"))[ CD ]
Line_9 $$ DocumentMapper documentMapper = mapperService.documentMapperParser().parse("person", new CompressedXContent(mapping))-->Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_31 $$ assertThat(doc.rootDoc().getField("file.content.suggest").stringValue(), is(originalText + "\n"))[ FD ]
Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())-->Line_22 $$ assertThat(doc.rootDoc().getField("file.content"), notNullValue())[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_20 $$ assertThat(doc.rootDoc().getField("file.content.suggest").stringValue(), is(originalText + "\n"))[ FD ]
Line_10 $$ ParsedDocument doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().field("file", bytes).endObject().bytes())-->Line_18 $$ assertThat(doc.rootDoc().getField("file.content_length").numericValue().intValue(), is(originalText.length()))[ FD ]
Line_2 $$ public void testExternalValues() throws Exception -->Line_13 $$ assertThat(doc.rootDoc().getField("file.content_type"), notNullValue())[ CD ]
Line_4 $$ String forcedName = "dummyname.txt"-->Line_21 $$ doc = documentMapper.parse("person", "person", "1", XContentFactory.jsonBuilder().startObject().startObject("file").field("_content", bytes).field("_name", forcedName).endObject().endObject().bytes())[ FD ]
