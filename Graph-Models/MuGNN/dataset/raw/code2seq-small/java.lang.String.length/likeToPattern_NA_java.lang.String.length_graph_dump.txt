Line_5 $$ boolean escaped = false-->Line_7 $$ if (shouldEscape && !escaped && (currentChar == escapeChar)) [ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_33 $$ regex.append('$')[ FD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)[ CD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_34 $$ byte[] bytes = regex.toString().getBytes(UTF_8)[ CD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_35 $$ return new Regex(bytes, 0, bytes.length, Option.MULTILINE, NonStrictUTF8Encoding.INSTANCE, SYNTAX)[ CD ]
Line_13 $$ escaped = false-->Line_17 $$ escaped = false[ FD ]
Line_5 $$ boolean escaped = false-->Line_17 $$ escaped = false[ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_4 $$ regex.append('^')[ FD ]
Line_8 $$ escaped = true-->Line_29 $$ escaped = false[ FD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)[ FD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_33 $$ regex.append('$')[ CD ]
Line_5 $$ boolean escaped = false-->Line_29 $$ escaped = false[ FD ]
Line_5 $$ boolean escaped = false-->Line_8 $$ escaped = true[ FD ]
Line_7 $$ if (shouldEscape && !escaped && (currentChar == escapeChar)) -->Line_8 $$ escaped = true[ CD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_12 $$ regex.append(escaped ? "%" : ".*")[ FD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_5 $$ boolean escaped = false[ CD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_6 $$ for (char currentChar : patternString.toCharArray()) [ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_34 $$ byte[] bytes = regex.toString().getBytes(UTF_8)[ FD ]
Line_17 $$ escaped = false-->Line_29 $$ escaped = false[ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_16 $$ regex.append(escaped ? "_" : ".")[ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_26 $$ regex.append('\\')[ FD ]
Line_6 $$ for (char currentChar : patternString.toCharArray()) -->Line_28 $$ regex.append(currentChar)[ FD ]
Line_2 $$ private static Regex likeToPattern(String patternString, char escapeChar, boolean shouldEscape) -->Line_4 $$ regex.append('^')[ CD ]
Line_13 $$ escaped = false-->Line_29 $$ escaped = false[ FD ]
Line_3 $$ StringBuilder regex = new StringBuilder(patternString.length() * 2)-->Line_28 $$ regex.append(currentChar)[ FD ]
Line_8 $$ escaped = true-->Line_17 $$ escaped = false[ FD ]
Line_5 $$ boolean escaped = false-->Line_13 $$ escaped = false[ FD ]
Line_8 $$ escaped = true-->Line_13 $$ escaped = false[ FD ]
