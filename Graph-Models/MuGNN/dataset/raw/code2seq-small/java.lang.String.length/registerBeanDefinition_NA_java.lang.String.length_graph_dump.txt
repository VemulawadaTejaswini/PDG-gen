Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_77 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_43 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))-->Line_44 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_38 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_40 $$ lazyInit = TRUE_VALUE.equals(val)[ CD ]
Line_42 $$ if (property.endsWith(REF_SUFFIX)) -->Line_47 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ CD ]
Line_43 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))-->Line_47 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_25 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_30 $$ isAbstract = TRUE_VALUE.equals(val)-->Line_76 $$ bd.setAbstract(isAbstract)[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_27 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_75 $$ bd.setScope(scope)[ FD ]
Line_49 $$ if (property.endsWith(REF_SUFFIX)) -->Line_57 $$ pvs.add(property, val)[ CD ]
Line_16 $$ boolean isAbstract = false-->Line_76 $$ bd.setAbstract(isAbstract)[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_53 $$ String ref = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_26 $$ if (PARENT_KEY.equals(property)) -->Line_28 $$ if (ABSTRACT_KEY.equals(property)) [ CD ]
Line_37 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))-->Line_75 $$ bd.setScope(scope)[ FD ]
Line_19 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_79 $$ bd.setPropertyValues(pvs)[ FD ]
Line_17 $$ boolean lazyInit = false-->Line_77 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_13 $$ String className = null-->Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_24 $$ if (CLASS_KEY.equals(property)) [ FD ]
Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_76 $$ bd.setAbstract(isAbstract)[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_49 $$ if (property.endsWith(REF_SUFFIX)) [ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_46 $$ int index = Integer.parseInt(property.substring(1))[ FD ]
Line_24 $$ if (CLASS_KEY.equals(property)) -->Line_26 $$ if (PARENT_KEY.equals(property)) [ CD ]
Line_22 $$ if (key.startsWith(prefix + SEPARATOR)) -->Line_24 $$ if (CLASS_KEY.equals(property)) [ CD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_21 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())[ FD ]
Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_40 $$ lazyInit = TRUE_VALUE.equals(val)[ FD ]
Line_40 $$ lazyInit = TRUE_VALUE.equals(val)-->Line_77 $$ bd.setLazyInit(lazyInit)[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_44 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_19 $$ MutablePropertyValues pvs = new MutablePropertyValues()-->Line_57 $$ pvs.add(property, val)[ FD ]
Line_42 $$ if (property.endsWith(REF_SUFFIX)) -->Line_44 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ CD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_28 $$ if (ABSTRACT_KEY.equals(property)) [ FD ]
Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_30 $$ isAbstract = TRUE_VALUE.equals(val)[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_41 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) [ FD ]
Line_18 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_78 $$ bd.setConstructorArgumentValues(cas)[ FD ]
Line_49 $$ if (property.endsWith(REF_SUFFIX)) -->Line_53 $$ String ref = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_18 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_44 $$ cas.addIndexedArgumentValue(index, new RuntimeBeanReference(entry.getValue().toString()))[ FD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_31 $$ if (SCOPE_KEY.equals(property)) -->Line_34 $$ if (SINGLETON_KEY.equals(property)) [ CD ]
Line_15 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON-->Line_37 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ FD ]
Line_28 $$ if (ABSTRACT_KEY.equals(property)) -->Line_31 $$ if (SCOPE_KEY.equals(property)) [ CD ]
Line_14 $$ String parent = null-->Line_27 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_34 $$ if (SINGLETON_KEY.equals(property)) -->Line_38 $$ if (LAZY_INIT_KEY.equals(property)) [ CD ]
Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_57 $$ pvs.add(property, val)[ FD ]
Line_25 $$ className = StringUtils.trimWhitespace((String) entry.getValue())-->Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_24 $$ if (CLASS_KEY.equals(property)) -->Line_25 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_31 $$ if (SCOPE_KEY.equals(property)) [ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_38 $$ if (LAZY_INIT_KEY.equals(property)) [ FD ]
Line_15 $$ String scope = GenericBeanDefinition.SCOPE_SINGLETON-->Line_75 $$ bd.setScope(scope)[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_57 $$ pvs.add(property, val)[ FD ]
Line_16 $$ boolean isAbstract = false-->Line_30 $$ isAbstract = TRUE_VALUE.equals(val)[ FD ]
Line_41 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) -->Line_49 $$ if (property.endsWith(REF_SUFFIX)) [ CD ]
Line_18 $$ ConstructorArgumentValues cas = new ConstructorArgumentValues()-->Line_47 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_27 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())-->Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_21 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())-->Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_43 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))[ FD ]
Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_78 $$ bd.setConstructorArgumentValues(cas)[ FD ]
Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_80 $$ getRegistry().registerBeanDefinition(beanName, bd)[ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_26 $$ if (PARENT_KEY.equals(property)) [ FD ]
Line_17 $$ boolean lazyInit = false-->Line_40 $$ lazyInit = TRUE_VALUE.equals(val)[ FD ]
Line_42 $$ if (property.endsWith(REF_SUFFIX)) -->Line_46 $$ int index = Integer.parseInt(property.substring(1))[ CD ]
Line_14 $$ String parent = null-->Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_34 $$ if (SINGLETON_KEY.equals(property)) -->Line_37 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ CD ]
Line_28 $$ if (ABSTRACT_KEY.equals(property)) -->Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_71 $$ parent = this.defaultParentBean-->Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())[ FD ]
Line_64 $$ if (logger.isDebugEnabled()) -->Line_65 $$ logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs)[ CD ]
Line_41 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) -->Line_42 $$ if (property.endsWith(REF_SUFFIX)) [ CD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_39 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_38 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_41 $$ if (property.startsWith(CONSTRUCTOR_ARG_PREFIX)) [ CD ]
Line_42 $$ if (property.endsWith(REF_SUFFIX)) -->Line_43 $$ int index = Integer.parseInt(property.substring(1, property.length() - REF_SUFFIX.length()))[ CD ]
Line_20 $$ for (Map.Entry<?, ?> entry : map.entrySet()) -->Line_47 $$ cas.addIndexedArgumentValue(index, readValue(entry))[ FD ]
Line_21 $$ String key = StringUtils.trimWhitespace((String) entry.getKey())-->Line_22 $$ if (key.startsWith(prefix + SEPARATOR)) [ FD ]
Line_38 $$ if (LAZY_INIT_KEY.equals(property)) -->Line_39 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_34 $$ if (SINGLETON_KEY.equals(property)) [ FD ]
Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())-->Line_42 $$ if (property.endsWith(REF_SUFFIX)) [ FD ]
Line_22 $$ if (key.startsWith(prefix + SEPARATOR)) -->Line_23 $$ String property = key.substring(prefix.length() + SEPARATOR.length())[ CD ]
Line_29 $$ String val = StringUtils.trimWhitespace((String) entry.getValue())-->Line_37 $$ scope = ((val == null || TRUE_VALUE.equals(val) ? GenericBeanDefinition.SCOPE_SINGLETON : GenericBeanDefinition.SCOPE_PROTOTYPE))[ FD ]
Line_26 $$ if (PARENT_KEY.equals(property)) -->Line_27 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())[ CD ]
Line_28 $$ if (ABSTRACT_KEY.equals(property)) -->Line_30 $$ isAbstract = TRUE_VALUE.equals(val)[ CD ]
Line_27 $$ parent = StringUtils.trimWhitespace((String) entry.getValue())-->Line_71 $$ parent = this.defaultParentBean[ FD ]
Line_13 $$ String className = null-->Line_25 $$ className = StringUtils.trimWhitespace((String) entry.getValue())[ FD ]
Line_74 $$ AbstractBeanDefinition bd = BeanDefinitionReaderUtils.createBeanDefinition(parent, className, getBeanClassLoader())-->Line_79 $$ bd.setPropertyValues(pvs)[ FD ]
Line_14 $$ String parent = null-->Line_71 $$ parent = this.defaultParentBean[ FD ]
