Line_47 $$ stripped = text.substring(1)-->Line_60 $$ if (StringUtil.endsWithChar(stripped, '\"') || StringUtil.endsWithChar(stripped, '\'')) [ FD ]
Line_81 $$ text = stripped-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_104 $$ final RangeMarker rangeMarker = FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset, endOffset)[ FD ]
Line_52 $$ prefix = "\" + "-->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_37 $$ String text = null-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)-->Line_8 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_26 $$ final PsiExpression containingExpression = PsiTreeUtil.getParentOfType(elementAt, PsiExpression.class, false)[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)[ CD ]
Line_59 $$ if (endOffset == endExpressionOffset) -->Line_63 $$ if (endOffset == endExpressionOffset - 1) [ CD ]
Line_64 $$ text += "\""-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_31 $$ elementAt = null-->Line_143 $$ if (elementAt instanceof PsiExpressionList) [ FD ]
Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)-->Line_33 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(elementAt, PsiLiteralExpression.class)[ FD ]
Line_80 $$ if (primitive) -->Line_81 $$ text = stripped[ CD ]
Line_38 $$ PsiExpression tempExpr-->Line_102 $$ tempExpr.putUserData(ElementToWorkOn.PREFIX, prefix)[ FD ]
Line_106 $$ if (parent != null) -->Line_117 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, errorElement)[ CD ]
Line_51 $$ if (startOffset > startExpressionOffset + 1) -->Line_52 $$ prefix = "\" + "[ CD ]
Line_19 $$ if (elementAtEnd == null)-->Line_20 $$ return null[ CD ]
Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)-->Line_19 $$ if (elementAtEnd == null)[ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()[ FD ]
Line_53 $$ text = "\"" + text-->Line_64 $$ text += "\""[ FD ]
Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)-->Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)[ FD ]
Line_53 $$ text = "\"" + text-->Line_67 $$ text += "\""[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_47 $$ stripped = text.substring(1)-->Line_75 $$ Integer.parseInt(stripped)[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()[ FD ]
Line_57 $$ if (endLiteralExpression != null) -->Line_58 $$ final int endExpressionOffset = endLiteralExpression.getTextOffset() + endLiteralExpression.getTextLength()[ CD ]
Line_17 $$ if (elementAtEnd == null || elementAtEnd instanceof PsiWhiteSpace || elementAtEnd instanceof PsiComment) -->Line_18 $$ elementAtEnd = PsiTreeUtil.skipSiblingsBackward(elementAtEnd, PsiWhiteSpace.class, PsiComment.class)[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_17 $$ if (elementAtEnd == null || elementAtEnd instanceof PsiWhiteSpace || elementAtEnd instanceof PsiComment) [ CD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_53 $$ text = "\"" + text[ FD ]
Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)-->Line_31 $$ elementAt = null[ FD ]
Line_47 $$ stripped = text.substring(1)-->Line_71 $$ if (stripped.equals("true") || stripped.equals("false")) [ FD ]
Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)-->Line_75 $$ Integer.parseInt(stripped)[ FD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_103 $$ tempExpr.putUserData(ElementToWorkOn.SUFFIX, suffix)[ FD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_118 $$ tempExpr.putUserData(ElementToWorkOn.OUT_OF_CODE_BLOCK, Boolean.TRUE)[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_81 $$ text = stripped[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_49 $$ if (startOffset == startExpressionOffset + 1) [ FD ]
Line_49 $$ if (startOffset == startExpressionOffset + 1) -->Line_51 $$ if (startOffset > startExpressionOffset + 1) [ CD ]
Line_106 $$ if (parent != null) -->Line_107 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, parent)[ CD ]
Line_50 $$ text = "\"" + text-->Line_67 $$ text += "\""[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_29 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_85 $$ final PsiElement parent = literalExpression != null ? literalExpression : elementAt-->Line_107 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, parent)[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_46 $$ if (StringUtil.startsWithChar(text, '\"') || StringUtil.startsWithChar(text, '\'')) [ FD ]
Line_45 $$ if (startOffset == startExpressionOffset) -->Line_49 $$ if (startOffset == startExpressionOffset + 1) [ CD ]
Line_126 $$ if (literalExpression != null && toBeExpression instanceof PsiExpression) -->Line_128 $$ if (type != null && !type.equals(literalExpression.getType())) [ CD ]
Line_143 $$ if (elementAt instanceof PsiExpressionList) -->Line_144 $$ final PsiElement parent = elementAt.getParent()[ CD ]
Line_8 $$ if (injectedLanguageManager.isInjectedFragment(file)) -->Line_9 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ CD ]
Line_42 $$ String stripped = text-->Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_45 $$ if (startOffset == startExpressionOffset) [ FD ]
Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))-->Line_84 $$ return literalExpression[ CD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_50 $$ text = "\"" + text[ FD ]
Line_70 $$ boolean primitive = false-->Line_76 $$ primitive = true[ FD ]
Line_135 $$ if (toBeExpression == refExpr && refIdx[0] > 0) -->Line_136 $$ return null[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_5 $$ if (elementAtStart == null || elementAtStart instanceof PsiWhiteSpace || elementAtStart instanceof PsiComment) [ CD ]
Line_56 $$ String suffix = null-->Line_66 $$ suffix = " + \""[ FD ]
Line_59 $$ if (endOffset == endExpressionOffset) -->Line_60 $$ if (StringUtil.endsWithChar(stripped, '\"') || StringUtil.endsWithChar(stripped, '\'')) [ CD ]
Line_35 $$ final PsiLiteralExpression endLiteralExpression = PsiTreeUtil.getParentOfType(file.findElementAt(endOffset), PsiLiteralExpression.class)-->Line_57 $$ if (endLiteralExpression != null) [ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_149 $$ return tempExpr[ CD ]
Line_34 $$ final PsiLiteralExpression startLiteralExpression = PsiTreeUtil.getParentOfType(elementAtStart, PsiLiteralExpression.class)-->Line_44 $$ final int startExpressionOffset = startLiteralExpression.getTextOffset()[ FD ]
Line_42 $$ String stripped = text-->Line_75 $$ Integer.parseInt(stripped)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_35 $$ final PsiLiteralExpression endLiteralExpression = PsiTreeUtil.getParentOfType(file.findElementAt(endOffset), PsiLiteralExpression.class)[ CD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_14 $$ startOffset = elementAtStart.getTextOffset()[ FD ]
Line_37 $$ String text = null-->Line_46 $$ if (StringUtil.startsWithChar(text, '\"') || StringUtil.startsWithChar(text, '\'')) [ FD ]
Line_63 $$ if (endOffset == endExpressionOffset - 1) -->Line_64 $$ text += "\""[ CD ]
Line_67 $$ text += "\""-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_138 $$ if (ReplaceExpressionUtil.isNeedParenthesis(refExpr.getNode(), tempExpr.getNode())) [ FD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_93 $$ super.visitElement(element)[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_117 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, errorElement)[ FD ]
Line_18 $$ elementAtEnd = PsiTreeUtil.skipSiblingsBackward(elementAtEnd, PsiWhiteSpace.class, PsiComment.class)-->Line_19 $$ if (elementAtEnd == null)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_63 $$ if (endOffset == endExpressionOffset - 1) [ FD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_7 $$ if (elementAtStart == null) [ FD ]
Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)-->Line_28 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ FD ]
Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)-->Line_81 $$ text = stripped[ FD ]
Line_72 $$ primitive = true-->Line_76 $$ primitive = true[ FD ]
Line_18 $$ elementAtEnd = PsiTreeUtil.skipSiblingsBackward(elementAtEnd, PsiWhiteSpace.class, PsiComment.class)-->Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_104 $$ final RangeMarker rangeMarker = FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset, endOffset)[ FD ]
Line_17 $$ if (elementAtEnd == null || elementAtEnd instanceof PsiWhiteSpace || elementAtEnd instanceof PsiComment) -->Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()[ CD ]
Line_57 $$ if (endLiteralExpression != null) -->Line_59 $$ if (endOffset == endExpressionOffset) [ CD ]
Line_138 $$ if (ReplaceExpressionUtil.isNeedParenthesis(refExpr.getNode(), tempExpr.getNode())) -->Line_139 $$ tempExpr.putCopyableUserData(NEED_PARENTHESIS, Boolean.TRUE)[ CD ]
Line_50 $$ text = "\"" + text-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_71 $$ if (stripped.equals("true") || stripped.equals("false")) -->Line_72 $$ primitive = true[ CD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_67 $$ text += "\""-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_93 $$ super.visitElement(element)[ CD ]
Line_37 $$ String text = null-->Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()[ FD ]
Line_46 $$ if (StringUtil.startsWithChar(text, '\"') || StringUtil.startsWithChar(text, '\'')) -->Line_47 $$ stripped = text.substring(1)[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_51 $$ if (startOffset > startExpressionOffset + 1) [ FD ]
Line_50 $$ text = "\"" + text-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_64 $$ text += "\""-->Line_67 $$ text += "\""[ FD ]
Line_85 $$ final PsiElement parent = literalExpression != null ? literalExpression : elementAt-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_111 $$ errorElement = PsiTreeUtil.getParentOfType(elementAtStart, PsiErrorElement.class)[ FD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_99 $$ tempExpr.accept(errorsVisitor)[ FD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_107 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, parent)[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_47 $$ stripped = text.substring(1)[ FD ]
Line_60 $$ if (StringUtil.endsWithChar(stripped, '\"') || StringUtil.endsWithChar(stripped, '\'')) -->Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)[ CD ]
Line_49 $$ if (startOffset == startExpressionOffset + 1) -->Line_50 $$ text = "\"" + text[ CD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_67 $$ text += "\""[ FD ]
Line_50 $$ text = "\"" + text-->Line_81 $$ text = stripped[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_37 $$ String text = null[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_5 $$ if (elementAtStart == null || elementAtStart instanceof PsiWhiteSpace || elementAtStart instanceof PsiComment) -->Line_7 $$ if (elementAtStart == null) [ CD ]
Line_110 $$ if (errorElement == null) -->Line_111 $$ errorElement = PsiTreeUtil.getParentOfType(elementAtStart, PsiErrorElement.class)[ CD ]
Line_124 $$ if (hasErrors[0])-->Line_125 $$ return null[ CD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)[ FD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_14 $$ startOffset = elementAtStart.getTextOffset()[ FD ]
Line_85 $$ final PsiElement parent = literalExpression != null ? literalExpression : elementAt-->Line_106 $$ if (parent != null) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)[ CD ]
Line_106 $$ if (parent != null) -->Line_118 $$ tempExpr.putUserData(ElementToWorkOn.OUT_OF_CODE_BLOCK, Boolean.TRUE)[ CD ]
Line_128 $$ if (type != null && !type.equals(literalExpression.getType())) -->Line_129 $$ return null[ CD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_99 $$ tempExpr.accept(errorsVisitor)[ FD ]
Line_64 $$ text += "\""-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_33 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(elementAt, PsiLiteralExpression.class)-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_23 $$ if (endOffset <= startOffset)-->Line_24 $$ return null[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_8 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)[ FD ]
Line_42 $$ String stripped = text-->Line_81 $$ text = stripped[ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_45 $$ if (startOffset == startExpressionOffset) [ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_49 $$ if (startOffset == startExpressionOffset + 1) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_23 $$ if (endOffset <= startOffset)[ CD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_7 $$ if (elementAtStart == null) [ FD ]
Line_53 $$ text = "\"" + text-->Line_81 $$ text = stripped[ FD ]
Line_87 $$ final boolean[] hasErrors = new boolean[1]-->Line_100 $$ if (hasErrors[0])[ FD ]
Line_37 $$ String text = null-->Line_67 $$ text += "\""[ FD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_109 $$ PsiErrorElement errorElement = elementAtStart instanceof PsiErrorElement ? (PsiErrorElement) elementAtStart : PsiTreeUtil.getNextSiblingOfType(elementAtStart, PsiErrorElement.class)[ FD ]
Line_87 $$ final boolean[] hasErrors = new boolean[1]-->Line_124 $$ if (hasErrors[0])[ FD ]
Line_53 $$ text = "\"" + text-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_90 $$ if (hasErrors[0]) -->Line_91 $$ return[ CD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_65 $$ if (endOffset < endExpressionOffset - 1) [ FD ]
Line_42 $$ String stripped = text-->Line_71 $$ if (stripped.equals("true") || stripped.equals("false")) [ FD ]
Line_53 $$ text = "\"" + text-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_70 $$ boolean primitive = false-->Line_72 $$ primitive = true[ FD ]
Line_41 $$ String prefix = null-->Line_102 $$ tempExpr.putUserData(ElementToWorkOn.PREFIX, prefix)[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_23 $$ if (endOffset <= startOffset)[ FD ]
Line_51 $$ if (startOffset > startExpressionOffset + 1) -->Line_53 $$ text = "\"" + text[ CD ]
Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)-->Line_144 $$ final PsiElement parent = elementAt.getParent()[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_29 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_33 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(elementAt, PsiLiteralExpression.class)[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_34 $$ final PsiLiteralExpression startLiteralExpression = PsiTreeUtil.getParentOfType(elementAtStart, PsiLiteralExpression.class)[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)[ CD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_105 $$ tempExpr.putUserData(ElementToWorkOn.TEXT_RANGE, rangeMarker)[ FD ]
Line_37 $$ String text = null-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_50 $$ text = "\"" + text-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_65 $$ if (endOffset < endExpressionOffset - 1) -->Line_66 $$ suffix = " + \""[ CD ]
Line_44 $$ final int startExpressionOffset = startLiteralExpression.getTextOffset()-->Line_45 $$ if (startOffset == startExpressionOffset) [ FD ]
Line_37 $$ String text = null-->Line_53 $$ text = "\"" + text[ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_51 $$ if (startOffset > startExpressionOffset + 1) [ FD ]
Line_66 $$ suffix = " + \""-->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_38 $$ PsiExpression tempExpr[ CD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_111 $$ errorElement = PsiTreeUtil.getParentOfType(elementAtStart, PsiErrorElement.class)[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_59 $$ if (endOffset == endExpressionOffset) [ FD ]
Line_34 $$ final PsiLiteralExpression startLiteralExpression = PsiTreeUtil.getParentOfType(elementAtStart, PsiLiteralExpression.class)-->Line_43 $$ if (startLiteralExpression != null) [ FD ]
Line_50 $$ text = "\"" + text-->Line_64 $$ text += "\""[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_107 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, parent)[ FD ]
Line_56 $$ String suffix = null-->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_8 $$ if (injectedLanguageManager.isInjectedFragment(file)) -->Line_11 $$ return null[ CD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_139 $$ tempExpr.putCopyableUserData(NEED_PARENTHESIS, Boolean.TRUE)[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_103 $$ tempExpr.putUserData(ElementToWorkOn.SUFFIX, suffix)[ FD ]
Line_7 $$ if (elementAtStart == null) -->Line_8 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ CD ]
Line_18 $$ elementAtEnd = PsiTreeUtil.skipSiblingsBackward(elementAtEnd, PsiWhiteSpace.class, PsiComment.class)-->Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()[ FD ]
Line_47 $$ stripped = text.substring(1)-->Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)[ FD ]
Line_5 $$ if (elementAtStart == null || elementAtStart instanceof PsiWhiteSpace || elementAtStart instanceof PsiComment) -->Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)[ CD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_104 $$ final RangeMarker rangeMarker = FileDocumentManager.getInstance().getDocument(file.getVirtualFile()).createRangeMarker(startOffset, endOffset)[ FD ]
Line_47 $$ stripped = text.substring(1)-->Line_81 $$ text = stripped[ FD ]
Line_35 $$ final PsiLiteralExpression endLiteralExpression = PsiTreeUtil.getParentOfType(file.findElementAt(endOffset), PsiLiteralExpression.class)-->Line_58 $$ final int endExpressionOffset = endLiteralExpression.getTextOffset() + endLiteralExpression.getTextLength()[ FD ]
Line_67 $$ text += "\""-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_43 $$ if (startLiteralExpression != null) -->Line_45 $$ if (startOffset == startExpressionOffset) [ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)[ CD ]
Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)-->Line_9 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_56 $$ String suffix = null-->Line_103 $$ tempExpr.putUserData(ElementToWorkOn.SUFFIX, suffix)[ FD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)[ FD ]
Line_31 $$ elementAt = null-->Line_33 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(elementAt, PsiLiteralExpression.class)[ FD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_102 $$ tempExpr.putUserData(ElementToWorkOn.PREFIX, prefix)[ FD ]
Line_65 $$ if (endOffset < endExpressionOffset - 1) -->Line_67 $$ text += "\""[ CD ]
Line_5 $$ if (elementAtStart == null || elementAtStart instanceof PsiWhiteSpace || elementAtStart instanceof PsiComment) -->Line_14 $$ startOffset = elementAtStart.getTextOffset()[ CD ]
Line_87 $$ final boolean[] hasErrors = new boolean[1]-->Line_90 $$ if (hasErrors[0]) [ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_17 $$ if (elementAtEnd == null || elementAtEnd instanceof PsiWhiteSpace || elementAtEnd instanceof PsiComment) -->Line_19 $$ if (elementAtEnd == null)[ CD ]
Line_37 $$ String text = null-->Line_47 $$ stripped = text.substring(1)[ FD ]
Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)-->Line_26 $$ final PsiExpression containingExpression = PsiTreeUtil.getParentOfType(elementAt, PsiExpression.class, false)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_23 $$ if (endOffset <= startOffset)[ FD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_109 $$ PsiErrorElement errorElement = elementAtStart instanceof PsiErrorElement ? (PsiErrorElement) elementAtStart : PsiTreeUtil.getNextSiblingOfType(elementAtStart, PsiErrorElement.class)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_28 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)[ FD ]
Line_36 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(project).getElementFactory()-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_37 $$ String text = null-->Line_81 $$ text = stripped[ FD ]
Line_33 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(elementAt, PsiLiteralExpression.class)-->Line_128 $$ if (type != null && !type.equals(literalExpression.getType())) [ FD ]
Line_53 $$ text = "\"" + text-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()[ FD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_63 $$ if (endOffset == endExpressionOffset - 1) [ FD ]
Line_6 $$ elementAtStart = PsiTreeUtil.skipSiblingsForward(elementAtStart, PsiWhiteSpace.class, PsiComment.class)-->Line_34 $$ final PsiLiteralExpression startLiteralExpression = PsiTreeUtil.getParentOfType(elementAtStart, PsiLiteralExpression.class)[ FD ]
Line_61 $$ stripped = stripped.substring(0, stripped.length() - 1)-->Line_71 $$ if (stripped.equals("true") || stripped.equals("false")) [ FD ]
Line_27 $$ if (containingExpression == null || containingExpression instanceof PsiLambdaExpression) -->Line_31 $$ elementAt = null[ CD ]
Line_64 $$ text += "\""-->Line_81 $$ text = stripped[ FD ]
Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)-->Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_118 $$ tempExpr.putUserData(ElementToWorkOn.OUT_OF_CODE_BLOCK, Boolean.TRUE)[ FD ]
Line_85 $$ final PsiElement parent = literalExpression != null ? literalExpression : elementAt-->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_42 $$ String stripped = text-->Line_47 $$ stripped = text.substring(1)[ FD ]
Line_41 $$ String prefix = null-->Line_52 $$ prefix = "\" + "[ FD ]
Line_25 $$ PsiElement elementAt = PsiTreeUtil.findCommonParent(elementAtStart, elementAtEnd)-->Line_143 $$ if (elementAt instanceof PsiExpressionList) [ FD ]
Line_31 $$ elementAt = null-->Line_144 $$ final PsiElement parent = elementAt.getParent()[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_27 $$ if (containingExpression == null || containingExpression instanceof PsiLambdaExpression) [ CD ]
Line_106 $$ if (parent != null) -->Line_115 $$ if (!(errorElement.getParent() instanceof PsiClass))[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_59 $$ if (endOffset == endExpressionOffset) [ FD ]
Line_138 $$ if (ReplaceExpressionUtil.isNeedParenthesis(refExpr.getNode(), tempExpr.getNode())) -->Line_140 $$ return tempExpr[ CD ]
Line_50 $$ text = "\"" + text-->Line_53 $$ text = "\"" + text[ FD ]
Line_37 $$ String text = null-->Line_50 $$ text = "\"" + text[ FD ]
Line_58 $$ final int endExpressionOffset = endLiteralExpression.getTextOffset() + endLiteralExpression.getTextLength()-->Line_59 $$ if (endOffset == endExpressionOffset) [ FD ]
Line_37 $$ String text = null-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_113 $$ if (errorElement == null)-->Line_114 $$ return null[ CD ]
Line_52 $$ prefix = "\" + "-->Line_102 $$ tempExpr.putUserData(ElementToWorkOn.PREFIX, prefix)[ FD ]
Line_81 $$ text = stripped-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_36 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(project).getElementFactory()[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_9 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_23 $$ if (endOffset <= startOffset)[ FD ]
Line_28 $$ if (injectedLanguageManager.isInjectedFragment(file)) -->Line_29 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ CD ]
Line_14 $$ startOffset = elementAtStart.getTextOffset()-->Line_29 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_41 $$ String prefix = null-->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_64 $$ text += "\""[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_139 $$ tempExpr.putCopyableUserData(NEED_PARENTHESIS, Boolean.TRUE)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_35 $$ final PsiLiteralExpression endLiteralExpression = PsiTreeUtil.getParentOfType(file.findElementAt(endOffset), PsiLiteralExpression.class)[ FD ]
Line_100 $$ if (hasErrors[0])-->Line_101 $$ return null[ CD ]
Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)-->Line_117 $$ tempExpr.putUserData(ElementToWorkOn.PARENT, errorElement)[ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_36 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getInstance(project).getElementFactory()[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_122 $$ final PsiElement toBeExpression = createReplacement(fakeInitializer, project, prefix, suffix, parent, rangeMarker, refIdx)[ FD ]
Line_143 $$ if (elementAt instanceof PsiExpressionList) -->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ CD ]
Line_67 $$ text += "\""-->Line_81 $$ text = stripped[ FD ]
Line_64 $$ text += "\""-->Line_86 $$ tempExpr = elementFactory.createExpressionFromText(text, parent)[ FD ]
Line_106 $$ if (parent != null) -->Line_113 $$ if (errorElement == null)[ CD ]
Line_4 $$ PsiElement elementAtStart = file.findElementAt(startOffset)-->Line_34 $$ final PsiLiteralExpression startLiteralExpression = PsiTreeUtil.getParentOfType(elementAtStart, PsiLiteralExpression.class)[ FD ]
Line_63 $$ if (endOffset == endExpressionOffset - 1) -->Line_65 $$ if (endOffset < endExpressionOffset - 1) [ CD ]
Line_40 $$ text = file.getText().subSequence(startOffset, endOffset).toString()-->Line_83 $$ if (literalExpression != null && text.equals(literalExpression.getText()))[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_99 $$ tempExpr.accept(errorsVisitor)[ FD ]
Line_66 $$ suffix = " + \""-->Line_103 $$ tempExpr.putUserData(ElementToWorkOn.SUFFIX, suffix)[ FD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_123 $$ toBeExpression.accept(errorsVisitor)[ FD ]
Line_126 $$ if (literalExpression != null && toBeExpression instanceof PsiExpression) -->Line_127 $$ PsiType type = ((PsiExpression) toBeExpression).getType()[ CD ]
Line_3 $$ final InjectedLanguageManager injectedLanguageManager = InjectedLanguageManager.getInstance(project)-->Line_29 $$ return getSelectionFromInjectedHost(project, file, injectedLanguageManager, startOffset, endOffset)[ FD ]
Line_27 $$ if (containingExpression == null || containingExpression instanceof PsiLambdaExpression) -->Line_28 $$ if (injectedLanguageManager.isInjectedFragment(file)) [ CD ]
Line_38 $$ PsiExpression tempExpr-->Line_105 $$ tempExpr.putUserData(ElementToWorkOn.TEXT_RANGE, rangeMarker)[ FD ]
Line_37 $$ String text = null-->Line_64 $$ text += "\""[ FD ]
Line_45 $$ if (startOffset == startExpressionOffset) -->Line_46 $$ if (StringUtil.startsWithChar(text, '\"') || StringUtil.startsWithChar(text, '\'')) [ CD ]
Line_43 $$ if (startLiteralExpression != null) -->Line_44 $$ final int startExpressionOffset = startLiteralExpression.getTextOffset()[ CD ]
Line_106 $$ if (parent != null) -->Line_110 $$ if (errorElement == null) [ CD ]
Line_133 $$ if (refExpr == null)-->Line_134 $$ return null[ CD ]
Line_21 $$ endOffset = elementAtEnd.getTextRange().getEndOffset()-->Line_35 $$ final PsiLiteralExpression endLiteralExpression = PsiTreeUtil.getParentOfType(file.findElementAt(endOffset), PsiLiteralExpression.class)[ FD ]
Line_81 $$ text = stripped-->Line_145 $$ return parent instanceof PsiCallExpression ? createArrayCreationExpression(text, startOffset, endOffset, (PsiCallExpression) parent) : null[ FD ]
Line_115 $$ if (!(errorElement.getParent() instanceof PsiClass))-->Line_116 $$ return null[ CD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_65 $$ if (endOffset < endExpressionOffset - 1) [ FD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_96 $$ hasErrors[0] = true[ CD ]
Line_88 $$ final JavaRecursiveElementWalkingVisitor errorsVisitor = new JavaRecursiveElementWalkingVisitor() -->Line_90 $$ if (hasErrors[0]) [ CD ]
Line_42 $$ String stripped = text-->Line_60 $$ if (StringUtil.endsWithChar(stripped, '\"') || StringUtil.endsWithChar(stripped, '\'')) [ FD ]
Line_16 $$ PsiElement elementAtEnd = file.findElementAt(endOffset - 1)-->Line_18 $$ elementAtEnd = PsiTreeUtil.skipSiblingsBackward(elementAtEnd, PsiWhiteSpace.class, PsiComment.class)[ FD ]
Line_38 $$ PsiExpression tempExpr-->Line_138 $$ if (ReplaceExpressionUtil.isNeedParenthesis(refExpr.getNode(), tempExpr.getNode())) [ FD ]
Line_2 $$ public static PsiExpression getSelectedExpression(final Project project, PsiFile file, int startOffset, int endOffset) -->Line_14 $$ startOffset = elementAtStart.getTextOffset()[ FD ]
