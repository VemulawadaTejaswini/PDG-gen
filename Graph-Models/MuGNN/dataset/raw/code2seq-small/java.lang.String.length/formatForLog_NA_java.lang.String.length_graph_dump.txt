Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_11 $$ if (StringUtil.isNotEmpty(title)) [ CD ]
Line_6 $$ List<RangeMarker> lineSeparators = new ArrayList<RangeMarker>()-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)[ CD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_28 $$ if (showMore.get()) [ CD ]
Line_22 $$ if (!marker.isValid()) -->Line_23 $$ showMore.set(true)[ CD ]
Line_8 $$ String content = truncateLongString(showMore, notification.getContent())-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_33 $$ appendText(logDoc, "(" + sb + ")")[ FD ]
Line_11 $$ if (StringUtil.isNotEmpty(title)) -->Line_12 $$ if (StringUtil.isNotEmpty(content)) [ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(content)) -->Line_13 $$ appendText(logDoc, ": ")[ CD ]
Line_9 $$ RangeMarker afterTitle = null-->Line_14 $$ afterTitle = logDoc.createRangeMarker(logDoc.getTextLength() - 2, logDoc.getTextLength())[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_6 $$ List<RangeMarker> lineSeparators = new ArrayList<RangeMarker>()[ CD ]
Line_21 $$ for (RangeMarker marker : links.keySet()) -->Line_22 $$ if (!marker.isValid()) [ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_23 $$ showMore.set(true)[ FD ]
Line_20 $$ ArrayList<Pair<TextRange, HyperlinkInfo>> list = new ArrayList<Pair<TextRange, HyperlinkInfo>>()-->Line_26 $$ list.add(Pair.create(new TextRange(marker.getStartOffset(), marker.getEndOffset()), links.get(marker)))[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ CD ]
Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)-->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ FD ]
Line_6 $$ List<RangeMarker> lineSeparators = new ArrayList<RangeMarker>()-->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ FD ]
Line_9 $$ RangeMarker afterTitle = null-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_5 $$ Map<RangeMarker, HyperlinkInfo> links = new LinkedHashMap<RangeMarker, HyperlinkInfo>()-->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_9 $$ RangeMarker afterTitle = null[ CD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_28 $$ if (showMore.get()) -->Line_29 $$ String sb = "show balloon"[ CD ]
Line_28 $$ if (showMore.get()) -->Line_33 $$ appendText(logDoc, "(" + sb + ")")[ CD ]
Line_5 $$ Map<RangeMarker, HyperlinkInfo> links = new LinkedHashMap<RangeMarker, HyperlinkInfo>()-->Line_26 $$ list.add(Pair.create(new TextRange(marker.getStartOffset(), marker.getEndOffset()), links.get(marker)))[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_13 $$ appendText(logDoc, ": ")[ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ FD ]
Line_28 $$ if (showMore.get()) -->Line_30 $$ if (!logDoc.getText().endsWith(" ")) [ CD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_31 $$ appendText(logDoc, " ")[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ CD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_36 $$ return new LogEntry(logDoc.getText(), status, list)[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_30 $$ if (!logDoc.getText().endsWith(" ")) [ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_14 $$ afterTitle = logDoc.createRangeMarker(logDoc.getTextLength() - 2, logDoc.getTextLength())[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ CD ]
Line_29 $$ String sb = "show balloon"-->Line_34 $$ list.add(new Pair<TextRange, HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(), sb.length()), new ShowBalloon(notification)))[ FD ]
Line_30 $$ if (!logDoc.getText().endsWith(" ")) -->Line_31 $$ appendText(logDoc, " ")[ CD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_20 $$ ArrayList<Pair<TextRange, HyperlinkInfo>> list = new ArrayList<Pair<TextRange, HyperlinkInfo>>()[ CD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_7 $$ String title = truncateLongString(showMore, notification.getTitle())[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)[ CD ]
Line_28 $$ if (showMore.get()) -->Line_34 $$ list.add(new Pair<TextRange, HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(), sb.length()), new ShowBalloon(notification)))[ CD ]
Line_7 $$ String title = truncateLongString(showMore, notification.getTitle())-->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_8 $$ String content = truncateLongString(showMore, notification.getContent())[ FD ]
Line_7 $$ String title = truncateLongString(showMore, notification.getTitle())-->Line_11 $$ if (StringUtil.isNotEmpty(title)) [ FD ]
Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_5 $$ Map<RangeMarker, HyperlinkInfo> links = new LinkedHashMap<RangeMarker, HyperlinkInfo>()-->Line_21 $$ for (RangeMarker marker : links.keySet()) [ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_34 $$ list.add(new Pair<TextRange, HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(), sb.length()), new ShowBalloon(notification)))[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ CD ]
Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_8 $$ String content = truncateLongString(showMore, notification.getContent())[ CD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_36 $$ return new LogEntry(logDoc.getText(), status, list)[ CD ]
Line_14 $$ afterTitle = logDoc.createRangeMarker(logDoc.getTextLength() - 2, logDoc.getTextLength())-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_8 $$ String content = truncateLongString(showMore, notification.getContent())-->Line_12 $$ if (StringUtil.isNotEmpty(content)) [ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_8 $$ String content = truncateLongString(showMore, notification.getContent())[ FD ]
Line_6 $$ List<RangeMarker> lineSeparators = new ArrayList<RangeMarker>()-->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_5 $$ Map<RangeMarker, HyperlinkInfo> links = new LinkedHashMap<RangeMarker, HyperlinkInfo>()[ CD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_7 $$ String title = truncateLongString(showMore, notification.getTitle())[ CD ]
Line_5 $$ Map<RangeMarker, HyperlinkInfo> links = new LinkedHashMap<RangeMarker, HyperlinkInfo>()-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_7 $$ String title = truncateLongString(showMore, notification.getTitle())[ FD ]
Line_2 $$ public static LogEntry formatForLog(@NotNull final Notification notification, String indent) -->Line_10 $$ boolean hasHtml = parseHtmlContent(title, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_12 $$ if (StringUtil.isNotEmpty(content)) -->Line_14 $$ afterTitle = logDoc.createRangeMarker(logDoc.getTextLength() - 2, logDoc.getTextLength())[ CD ]
Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)-->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_19 $$ indentNewLines(logDoc, lineSeparators, afterTitle, hasHtml, indent)[ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_28 $$ if (showMore.get()) [ FD ]
Line_6 $$ List<RangeMarker> lineSeparators = new ArrayList<RangeMarker>()-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_21 $$ for (RangeMarker marker : links.keySet()) -->Line_26 $$ list.add(Pair.create(new TextRange(marker.getStartOffset(), marker.getEndOffset()), links.get(marker)))[ FD ]
Line_4 $$ AtomicBoolean showMore = new AtomicBoolean(false)-->Line_17 $$ hasHtml |= parseHtmlContent(content, notification, logDoc, showMore, links, lineSeparators)[ FD ]
Line_3 $$ DocumentImpl logDoc = new DocumentImpl("", true)-->Line_18 $$ String status = getStatusText(logDoc, showMore, lineSeparators, hasHtml)[ FD ]
Line_20 $$ ArrayList<Pair<TextRange, HyperlinkInfo>> list = new ArrayList<Pair<TextRange, HyperlinkInfo>>()-->Line_34 $$ list.add(new Pair<TextRange, HyperlinkInfo>(TextRange.from(logDoc.getTextLength() - 1 - sb.length(), sb.length()), new ShowBalloon(notification)))[ FD ]
