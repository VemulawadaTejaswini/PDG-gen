Line_12 $$ BinaryObject object = new BinaryObject(bytes, dataHandler)-->Line_14 $$ marshaller.marshal(object, new StreamResult(writer), mimeContainer)[ FD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_13 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_10 $$ given(mimeContainer.convertToXopPackage()).willReturn(true)[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_12 $$ BinaryObject object = new BinaryObject(bytes, dataHandler)[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_6 $$ marshaller.afterPropertiesSet()[ CD ]
Line_13 $$ StringWriter writer = new StringWriter()-->Line_15 $$ assertTrue("No XML written", writer.toString().length() > 0)[ FD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_11 $$ byte[] bytes = FileCopyUtils.copyToByteArray(logo.getInputStream())[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_15 $$ assertTrue("No XML written", writer.toString().length() > 0)[ CD ]
Line_8 $$ Resource logo = new ClassPathResource("spring-ws.png", getClass())-->Line_11 $$ byte[] bytes = FileCopyUtils.copyToByteArray(logo.getInputStream())[ FD ]
Line_8 $$ Resource logo = new ClassPathResource("spring-ws.png", getClass())-->Line_9 $$ DataHandler dataHandler = new DataHandler(new FileDataSource(logo.getFile()))[ FD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_7 $$ MimeContainer mimeContainer = mock(MimeContainer.class)[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_4 $$ marshaller.setClassesToBeBound(BinaryObject.class)[ CD ]
Line_7 $$ MimeContainer mimeContainer = mock(MimeContainer.class)-->Line_14 $$ marshaller.marshal(object, new StreamResult(writer), mimeContainer)[ FD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_16 $$ verify(mimeContainer, times(3)).addAttachment(isA(String.class), isA(DataHandler.class))[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_14 $$ marshaller.marshal(object, new StreamResult(writer), mimeContainer)[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_8 $$ Resource logo = new ClassPathResource("spring-ws.png", getClass())[ CD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_5 $$ marshaller.setMtomEnabled(true)[ CD ]
Line_7 $$ MimeContainer mimeContainer = mock(MimeContainer.class)-->Line_10 $$ given(mimeContainer.convertToXopPackage()).willReturn(true)[ FD ]
Line_2 $$ public void marshalAttachments() throws Exception -->Line_9 $$ DataHandler dataHandler = new DataHandler(new FileDataSource(logo.getFile()))[ CD ]
Line_7 $$ MimeContainer mimeContainer = mock(MimeContainer.class)-->Line_16 $$ verify(mimeContainer, times(3)).addAttachment(isA(String.class), isA(DataHandler.class))[ FD ]
