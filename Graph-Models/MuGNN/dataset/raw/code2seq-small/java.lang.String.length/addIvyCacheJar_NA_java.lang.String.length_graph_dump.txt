Line_33 $$ for (Element dependencyElement : dependencyElements) -->Line_38 $$ String name = GetterUtil.getString(dependencyElement.attributeValue("name"))[ FD ]
Line_14 $$ File file = files[i]-->Line_63 $$ String fileName = file.getName()[ FD ]
Line_27 $$ if (_fileUtil.exists(ivyFileName)) -->Line_29 $$ Element rootElement = document.getRootElement()[ CD ]
Line_27 $$ if (_fileUtil.exists(ivyFileName)) -->Line_28 $$ Document document = _saxReader.read(new File(ivyFileName))[ CD ]
Line_52 $$ if (!_fileUtil.exists(dirName)) -->Line_53 $$ System.out.println("Unable to find jars in " + dirName)[ CD ]
Line_51 $$ dirName = ivyDirName + "/cache/" + dependencyName + "/jars"-->Line_67 $$ int index = dirName.indexOf("/.ivy")[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_45 $$ addIvyCacheJar(sb, ivyDirName, org + "/" + name, rev)[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_22 $$ version = fileName.substring(4, fileName.length() - 4)[ FD ]
Line_18 $$ String fileName = file.getName()-->Line_22 $$ version = fileName.substring(4, fileName.length() - 4)[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_4 $$ if (string.contains(dependencyName)) [ FD ]
Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"-->Line_51 $$ dirName = ivyDirName + "/cache/" + dependencyName + "/jars"[ FD ]
Line_14 $$ File file = files[i]-->Line_18 $$ String fileName = file.getName()[ FD ]
Line_51 $$ dirName = ivyDirName + "/cache/" + dependencyName + "/jars"-->Line_52 $$ if (!_fileUtil.exists(dirName)) [ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_41 $$ string = sb.toString()[ FD ]
Line_63 $$ String fileName = file.getName()-->Line_64 $$ if (!fileName.endsWith("-" + version + ".jar")) [ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_72 $$ System.out.println("Unable to find jars in " + dirName + " for " + version)[ CD ]
Line_50 $$ if (!_fileUtil.exists(dirName)) -->Line_51 $$ dirName = ivyDirName + "/cache/" + dependencyName + "/jars"[ CD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_8 $$ System.out.println("Adding " + dependencyName + " " + version)[ CD ]
Line_4 $$ if (string.contains(dependencyName)) -->Line_5 $$ System.out.println("Skipping duplicate " + dependencyName + " " + version)[ CD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_3 $$ String string = sb.toString()[ FD ]
Line_33 $$ for (Element dependencyElement : dependencyElements) -->Line_40 $$ String rev = GetterUtil.getString(dependencyElement.attributeValue("rev"))[ FD ]
Line_18 $$ String fileName = file.getName()-->Line_19 $$ if (!fileName.endsWith(".xml")) [ FD ]
Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"-->Line_52 $$ if (!_fileUtil.exists(dirName)) [ FD ]
Line_3 $$ String string = sb.toString()-->Line_4 $$ if (string.contains(dependencyName)) [ FD ]
Line_14 $$ File file = files[i]-->Line_60 $$ if (!file.isFile()) [ FD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_14 $$ File file = files[i][ CD ]
Line_9 $$ if (version.equals("latest.integration")) -->Line_12 $$ Arrays.sort(files, new FileComparator())[ CD ]
Line_38 $$ String name = GetterUtil.getString(dependencyElement.attributeValue("name"))-->Line_42 $$ if (string.contains(name)) [ FD ]
Line_30 $$ Element dependenciesElement = rootElement.element("dependencies")-->Line_31 $$ if (dependenciesElement != null) [ FD ]
Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"-->Line_67 $$ int index = dirName.indexOf("/.ivy")[ FD ]
Line_40 $$ String rev = GetterUtil.getString(dependencyElement.attributeValue("rev"))-->Line_45 $$ addIvyCacheJar(sb, ivyDirName, org + "/" + name, rev)[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_58 $$ File[] files = dir.listFiles()[ CD ]
Line_11 $$ File[] files = dir.listFiles()-->Line_12 $$ Arrays.sort(files, new FileComparator())[ FD ]
Line_28 $$ Document document = _saxReader.read(new File(ivyFileName))-->Line_29 $$ Element rootElement = document.getRootElement()[ FD ]
Line_33 $$ for (Element dependencyElement : dependencyElements) -->Line_39 $$ String org = GetterUtil.getString(dependencyElement.attributeValue("org"))[ FD ]
Line_3 $$ String string = sb.toString()-->Line_42 $$ if (string.contains(name)) [ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_27 $$ if (_fileUtil.exists(ivyFileName)) [ CD ]
Line_27 $$ if (_fileUtil.exists(ivyFileName)) -->Line_30 $$ Element dependenciesElement = rootElement.element("dependencies")[ CD ]
Line_27 $$ if (_fileUtil.exists(ivyFileName)) -->Line_31 $$ if (dependenciesElement != null) [ CD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_4 $$ if (string.contains(dependencyName)) [ CD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_18 $$ String fileName = file.getName()[ CD ]
Line_10 $$ File dir = new File(ivyDirName + "/cache/" + dependencyName)-->Line_11 $$ File[] files = dir.listFiles()[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_26 $$ String ivyFileName = ivyDirName + "/cache/" + dependencyName + "/ivy-" + version + ".xml"[ CD ]
Line_30 $$ Element dependenciesElement = rootElement.element("dependencies")-->Line_32 $$ List<Element> dependencyElements = dependenciesElement.elements("dependency")[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_69 $$ addClasspathEntry(sb, eclipseRelativeDirName + "/" + fileName)[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_9 $$ if (version.equals("latest.integration")) [ FD ]
Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"-->Line_68 $$ String eclipseRelativeDirName = "/portal" + dirName.substring(index)[ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_50 $$ if (!_fileUtil.exists(dirName)) [ CD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_3 $$ String string = sb.toString()[ CD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_23 $$ System.out.println("Substituting " + version + " for latest.integration")[ CD ]
Line_67 $$ int index = dirName.indexOf("/.ivy")-->Line_68 $$ String eclipseRelativeDirName = "/portal" + dirName.substring(index)[ FD ]
Line_9 $$ if (version.equals("latest.integration")) -->Line_10 $$ File dir = new File(ivyDirName + "/cache/" + dependencyName)[ CD ]
Line_41 $$ string = sb.toString()-->Line_42 $$ if (string.contains(name)) [ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"[ CD ]
Line_52 $$ if (!_fileUtil.exists(dirName)) -->Line_54 $$ return[ CD ]
Line_50 $$ if (!_fileUtil.exists(dirName)) -->Line_52 $$ if (!_fileUtil.exists(dirName)) [ CD ]
Line_29 $$ Element rootElement = document.getRootElement()-->Line_30 $$ Element dependenciesElement = rootElement.element("dependencies")[ FD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_15 $$ if (!file.isFile()) [ CD ]
Line_34 $$ String conf = GetterUtil.getString(dependencyElement.attributeValue("conf"))-->Line_35 $$ if (!conf.startsWith("compile")) [ FD ]
Line_51 $$ dirName = ivyDirName + "/cache/" + dependencyName + "/jars"-->Line_68 $$ String eclipseRelativeDirName = "/portal" + dirName.substring(index)[ FD ]
Line_14 $$ File file = files[i]-->Line_15 $$ if (!file.isFile()) [ FD ]
Line_59 $$ for (File file : files) -->Line_60 $$ if (!file.isFile()) [ FD ]
Line_2 $$ protected void addIvyCacheJar(StringBundler sb, String ivyDirName, String dependencyName, String version) throws Exception -->Line_9 $$ if (version.equals("latest.integration")) [ CD ]
Line_10 $$ File dir = new File(ivyDirName + "/cache/" + dependencyName)-->Line_58 $$ File[] files = dir.listFiles()[ FD ]
Line_4 $$ if (string.contains(dependencyName)) -->Line_6 $$ return[ CD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_19 $$ if (!fileName.endsWith(".xml")) [ CD ]
Line_9 $$ if (version.equals("latest.integration")) -->Line_11 $$ File[] files = dir.listFiles()[ CD ]
Line_13 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_22 $$ version = fileName.substring(4, fileName.length() - 4)[ CD ]
Line_26 $$ String ivyFileName = ivyDirName + "/cache/" + dependencyName + "/ivy-" + version + ".xml"-->Line_27 $$ if (_fileUtil.exists(ivyFileName)) [ FD ]
Line_31 $$ if (dependenciesElement != null) -->Line_32 $$ List<Element> dependencyElements = dependenciesElement.elements("dependency")[ CD ]
Line_9 $$ if (version.equals("latest.integration")) -->Line_13 $$ for (int i = files.length - 1; i >= 0; i--) [ CD ]
Line_33 $$ for (Element dependencyElement : dependencyElements) -->Line_34 $$ String conf = GetterUtil.getString(dependencyElement.attributeValue("conf"))[ FD ]
Line_3 $$ String string = sb.toString()-->Line_41 $$ string = sb.toString()[ FD ]
Line_59 $$ for (File file : files) -->Line_63 $$ String fileName = file.getName()[ FD ]
Line_18 $$ String fileName = file.getName()-->Line_64 $$ if (!fileName.endsWith("-" + version + ".jar")) [ FD ]
Line_49 $$ String dirName = ivyDirName + "/cache/" + dependencyName + "/bundles"-->Line_50 $$ if (!_fileUtil.exists(dirName)) [ FD ]
