Line_23 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_26 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ FD ]
Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_47 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_64 $$ ROOT_LOGGER.tracef("added PersistenceUnitService (phase 2 of 2) for '%s'.  PU is ready for injector action.", puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_55 $$ adaptor.addProviderDependencies(pu)[ FD ]
Line_8 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_61 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_7 $$ ValidatorFactory validatorFactory = null-->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_34 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_17 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_29 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_22 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_27 $$ useDefaultDataSource = true[ FD ]
Line_50 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) -->Line_51 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_13 $$ deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor))[ FD ]
Line_25 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) -->Line_26 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ CD ]
Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_42 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_23 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())[ FD ]
Line_33 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_34 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_34 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_24 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_33 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) [ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_9 $$ if (!ValidationMode.NONE.equals(pu.getValidationMode())) [ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_29 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_21 $$ builder.addDependency(puServiceName.append(FIRST_PHASE), new CastingInjector(service.getPhaseOnePersistenceUnitServiceImplInjector(), PhaseOnePersistenceUnitServiceImpl.class))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_50 $$ if (WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_18 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_26 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_29 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_33 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_35 $$ useDefaultDataSource = false[ CD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_37 $$ if (useDefaultDataSource) -->Line_38 $$ String defaultJtaDataSource = null[ CD ]
Line_22 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_35 $$ useDefaultDataSource = false[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_16 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_22 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)[ FD ]
Line_42 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) -->Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ CD ]
Line_23 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_25 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) [ FD ]
Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_37 $$ if (useDefaultDataSource) -->Line_39 $$ if (eeModuleDescription != null) [ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_24 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())[ FD ]
Line_26 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_27 $$ useDefaultDataSource = true[ CD ]
Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_18 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_29 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_59 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_59 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_47 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_62 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_20 $$ builder.addDependency(JPAServiceNames.getJPAServiceName())[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_61 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_60 $$ entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_4 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_47 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ CD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_3 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_21 $$ builder.addDependency(puServiceName.append(FIRST_PHASE), new CastingInjector(service.getPhaseOnePersistenceUnitServiceImplInjector(), PhaseOnePersistenceUnitServiceImpl.class))[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_51 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_21 $$ builder.addDependency(puServiceName.append(FIRST_PHASE), new CastingInjector(service.getPhaseOnePersistenceUnitServiceImplInjector(), PhaseOnePersistenceUnitServiceImpl.class))[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_54 $$ CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_39 $$ if (eeModuleDescription != null) [ FD ]
Line_37 $$ if (useDefaultDataSource) -->Line_42 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ CD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_5 $$ pu.setClassLoader(classLoader)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_16 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)[ FD ]
Line_24 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_34 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_34 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_3 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)-->Line_59 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_8 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_14 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_47 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_3 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)[ CD ]
Line_37 $$ if (useDefaultDataSource) -->Line_45 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ CD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_61 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ FD ]
Line_9 $$ if (!ValidationMode.NONE.equals(pu.getValidationMode())) -->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ CD ]
Line_27 $$ useDefaultDataSource = true-->Line_30 $$ useDefaultDataSource = false[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_5 $$ pu.setClassLoader(classLoader)[ CD ]
Line_23 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_29 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_46 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_43 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_47 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_27 $$ useDefaultDataSource = true-->Line_35 $$ useDefaultDataSource = false[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_62 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_65 $$ addManagementConsole(deploymentUnit, pu, adaptor)[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_14 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_26 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_30 $$ useDefaultDataSource = false[ CD ]
Line_22 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_30 $$ useDefaultDataSource = false[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_17 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_4 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)-->Line_59 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_51 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_51 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_63 $$ builder.install()[ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_4 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)[ CD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_60 $$ entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName)[ FD ]
Line_30 $$ useDefaultDataSource = false-->Line_35 $$ useDefaultDataSource = false[ FD ]
Line_38 $$ String defaultJtaDataSource = null-->Line_42 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_2 $$ private static void deployPersistenceUnitPhaseTwo(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor) throws DeploymentUnitProcessingException -->Line_67 $$ throw JpaLogger.ROOT_LOGGER.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName())[ FD ]
Line_39 $$ if (eeModuleDescription != null) -->Line_40 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ CD ]
