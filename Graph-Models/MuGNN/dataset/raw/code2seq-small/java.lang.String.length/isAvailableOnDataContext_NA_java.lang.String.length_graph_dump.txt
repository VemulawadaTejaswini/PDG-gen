Line_13 $$ Editor editor = getEditor(dataContext)-->Line_15 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_10 $$ XmlTag tag = (XmlTag) parent[ CD ]
Line_4 $$ if (element == null || PsiElementRenameHandler.isVetoed(element))-->Line_5 $$ return false[ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_20 $$ return isDeclarationOutOfProjectOrAbsent(element.getProject(), dataContext)[ FD ]
Line_3 $$ final PsiElement element = getElement(dataContext)-->Line_20 $$ return isDeclarationOutOfProjectOrAbsent(element.getProject(), dataContext)[ FD ]
Line_11 $$ String prefix = tag.getNamespacePrefix()-->Line_16 $$ if (offset <= element.getTextRange().getStartOffset() + prefix.length()) [ FD ]
Line_11 $$ String prefix = tag.getNamespacePrefix()-->Line_12 $$ if (StringUtil.isNotEmpty(prefix)) [ FD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_3 $$ final PsiElement element = getElement(dataContext)[ CD ]
Line_16 $$ if (offset <= element.getTextRange().getStartOffset() + prefix.length()) -->Line_17 $$ return false[ CD ]
Line_3 $$ final PsiElement element = getElement(dataContext)-->Line_16 $$ if (offset <= element.getTextRange().getStartOffset() + prefix.length()) [ FD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_6 $$ PsiElement parent = element.getParent()[ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(prefix)) -->Line_13 $$ Editor editor = getEditor(dataContext)[ CD ]
Line_7 $$ if (!(parent instanceof XmlTag)) -->Line_8 $$ return false[ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_7 $$ if (!(parent instanceof XmlTag)) [ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_4 $$ if (element == null || PsiElementRenameHandler.isVetoed(element))[ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_12 $$ if (StringUtil.isNotEmpty(prefix)) [ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(prefix)) -->Line_16 $$ if (offset <= element.getTextRange().getStartOffset() + prefix.length()) [ CD ]
Line_3 $$ final PsiElement element = getElement(dataContext)-->Line_6 $$ PsiElement parent = element.getParent()[ FD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_11 $$ String prefix = tag.getNamespacePrefix()[ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_13 $$ Editor editor = getEditor(dataContext)[ FD ]
Line_10 $$ XmlTag tag = (XmlTag) parent-->Line_11 $$ String prefix = tag.getNamespacePrefix()[ FD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_20 $$ return isDeclarationOutOfProjectOrAbsent(element.getProject(), dataContext)[ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(prefix)) -->Line_15 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ public boolean isAvailableOnDataContext(final DataContext dataContext) -->Line_3 $$ final PsiElement element = getElement(dataContext)[ FD ]
Line_3 $$ final PsiElement element = getElement(dataContext)-->Line_4 $$ if (element == null || PsiElementRenameHandler.isVetoed(element))[ FD ]
Line_15 $$ int offset = editor.getCaretModel().getOffset()-->Line_16 $$ if (offset <= element.getTextRange().getStartOffset() + prefix.length()) [ FD ]
