Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_18 $$ builder.add(classpath)[ FD ]
Line_11 $$ if (myDynamicClasspath.length() > 0) -->Line_18 $$ builder.add(classpath)[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_6 $$ tempFile.deleteOnExit()[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_25 $$ final int result = exec.waitFor()[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_27 $$ return result[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_24 $$ final Process exec = builder.createProcess()[ FD ]
Line_7 $$ final String testOutputPath = tempFile.getAbsolutePath()-->Line_26 $$ ForkedVMWrapper.readWrapped(testOutputPath, myOut, myErr)[ FD ]
Line_3 $$ List vmParameters = new ArrayList(myVMParameters)-->Line_9 $$ builder.add(vmParameters)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_23 $$ builder.setWorkingDir(workingDir)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_23 $$ builder.setWorkingDir(workingDir)[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_13 $$ builder.add(createClasspathJarFile(new Manifest(), classpath).getAbsolutePath())[ FD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_13 $$ builder.add(createClasspathJarFile(new Manifest(), classpath).getAbsolutePath())[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_7 $$ final String testOutputPath = tempFile.getAbsolutePath()[ CD ]
Line_3 $$ List vmParameters = new ArrayList(myVMParameters)-->Line_4 $$ myForkedDebuggerHelper.setupDebugger(vmParameters)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_21 $$ builder.add(testOutputPath)[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_23 $$ builder.setWorkingDir(workingDir)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_9 $$ builder.add(vmParameters)[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_3 $$ List vmParameters = new ArrayList(myVMParameters)[ CD ]
Line_5 $$ final File tempFile = File.createTempFile("fork", "test")-->Line_6 $$ tempFile.deleteOnExit()[ FD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_21 $$ builder.add(testOutputPath)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_10 $$ builder.add("-classpath")[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_15 $$ builder.add(classpath)[ FD ]
Line_5 $$ final File tempFile = File.createTempFile("fork", "test")-->Line_7 $$ final String testOutputPath = tempFile.getAbsolutePath()[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_24 $$ final Process exec = builder.createProcess()[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_22 $$ builder.add(args)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_18 $$ builder.add(classpath)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_11 $$ if (myDynamicClasspath.length() > 0) [ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_9 $$ builder.add(vmParameters)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_5 $$ final File tempFile = File.createTempFile("fork", "test")[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_4 $$ myForkedDebuggerHelper.setupDebugger(vmParameters)[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_15 $$ builder.add(classpath)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_26 $$ ForkedVMWrapper.readWrapped(testOutputPath, myOut, myErr)[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_22 $$ builder.add(args)[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_22 $$ builder.add(args)[ FD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_20 $$ builder.add(getStarterName())[ CD ]
Line_2 $$ protected int startChildFork(List args, File workingDir, String classpath) throws IOException, InterruptedException -->Line_10 $$ builder.add("-classpath")[ CD ]
Line_8 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_20 $$ builder.add(getStarterName())[ FD ]
Line_7 $$ final String testOutputPath = tempFile.getAbsolutePath()-->Line_21 $$ builder.add(testOutputPath)[ FD ]
Line_24 $$ final Process exec = builder.createProcess()-->Line_25 $$ final int result = exec.waitFor()[ FD ]
