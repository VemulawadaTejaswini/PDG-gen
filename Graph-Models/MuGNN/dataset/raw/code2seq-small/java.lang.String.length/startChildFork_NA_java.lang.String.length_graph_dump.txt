Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_12 $$ builder.add("-classpath")[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_25 $$ builder.setWorkingDir(workingDir)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_20 $$ builder.add(classpath)[ FD ]
Line_9 $$ final String testOutputPath = tempFile.getAbsolutePath()-->Line_28 $$ ForkedVMWrapper.readWrapped(testOutputPath, myOut, myErr)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_24 $$ builder.add(args)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_17 $$ builder.add(classpath)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_11 $$ builder.add(vmParameters)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_23 $$ builder.add(testOutputPath)[ FD ]
Line_9 $$ final String testOutputPath = tempFile.getAbsolutePath()-->Line_23 $$ builder.add(testOutputPath)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_15 $$ builder.add(createClasspathJarFile(new Manifest(), classpath).getAbsolutePath())[ FD ]
Line_26 $$ final Process exec = builder.createProcess()-->Line_27 $$ final int result = exec.waitFor()[ FD ]
Line_4 $$ List vmParameters = new ArrayList(myVMParameters)-->Line_11 $$ builder.add(vmParameters)[ FD ]
Line_13 $$ if (myDynamicClasspath.length() > 0) -->Line_20 $$ builder.add(classpath)[ CD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_22 $$ builder.add(getStarterName())[ FD ]
Line_4 $$ List vmParameters = new ArrayList(myVMParameters)-->Line_5 $$ myForkedDebuggerHelper.setupDebugger(vmParameters)[ FD ]
Line_10 $$ final ProcessBuilder builder = new ProcessBuilder()-->Line_26 $$ final Process exec = builder.createProcess()[ FD ]
