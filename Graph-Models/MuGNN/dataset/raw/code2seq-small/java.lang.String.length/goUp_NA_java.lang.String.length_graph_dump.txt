Line_9 $$ if (newPath.length() < branchRootPath.length()) -->Line_10 $$ if (targetRevision == -1) [ CD ]
Line_11 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_4 $$ String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()-->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_13 $$ Info svnInfo = myVcs.getInfo(new File(branchRootPath))-->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_20 $$ return result[ CD ]
Line_10 $$ if (targetRevision == -1) -->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ CD ]
Line_10 $$ if (targetRevision == -1) -->Line_13 $$ Info svnInfo = myVcs.getInfo(new File(branchRootPath))[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_4 $$ String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()[ CD ]
Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_11 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS[ FD ]
Line_4 $$ String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_11 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_10 $$ if (targetRevision == -1) [ FD ]
Line_8 $$ String newPath = new File(path).getParent()-->Line_9 $$ if (newPath.length() < branchRootPath.length()) [ FD ]
Line_5 $$ if (newTrunkUrl.length() == 0 || "/".equals(newTrunkUrl)) -->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_4 $$ String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()[ FD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_9 $$ if (newPath.length() < branchRootPath.length()) [ FD ]
Line_8 $$ String newPath = new File(path).getParent()-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_5 $$ if (newTrunkUrl.length() == 0 || "/".equals(newTrunkUrl)) [ CD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_5 $$ if (newTrunkUrl.length() == 0 || "/".equals(newTrunkUrl)) -->Line_9 $$ if (newPath.length() < branchRootPath.length()) [ CD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_3 $$ SvnMergeInfoCache.MergeCheckResult result-->Line_11 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
Line_2 $$ private SvnMergeInfoCache.MergeCheckResult goUp(final long revisionAsked, final long targetRevision, final String branchRootPath, final String path, @NotNull String trunkUrl) throws SVNException, VcsException -->Line_3 $$ SvnMergeInfoCache.MergeCheckResult result[ CD ]
Line_9 $$ if (newPath.length() < branchRootPath.length()) -->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ CD ]
Line_5 $$ if (newTrunkUrl.length() == 0 || "/".equals(newTrunkUrl)) -->Line_8 $$ String newPath = new File(path).getParent()[ CD ]
Line_10 $$ if (targetRevision == -1) -->Line_11 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS[ CD ]
Line_4 $$ String newTrunkUrl = SVNPathUtil.removeTail(trunkUrl).trim()-->Line_5 $$ if (newTrunkUrl.length() == 0 || "/".equals(newTrunkUrl)) [ FD ]
Line_6 $$ result = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)[ FD ]
Line_14 $$ result = svnInfo == null || svnInfo.getURL() == null ? SvnMergeInfoCache.MergeCheckResult.NOT_MERGED : goUpInRepo(revisionAsked, targetRevision, svnInfo.getURL().removePathTail(), newTrunkUrl)-->Line_17 $$ result = checkPathGoingUp(revisionAsked, targetRevision, branchRootPath, newPath, newTrunkUrl, false)[ FD ]
