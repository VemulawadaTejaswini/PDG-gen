Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)[ FD ]
Line_8 $$ if (!absoluteInTrunkPath.startsWith(myTrunkPathCorrespondingToLocalBranchPath)) -->Line_12 $$ String localPathInBranch = new File(branchPath, relativeToTrunkPath).getAbsolutePath()[ CD ]
Line_12 $$ String localPathInBranch = new File(branchPath, relativeToTrunkPath).getAbsolutePath()-->Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)[ FD ]
Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)-->Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_24 $$ if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(mergeCheckResult)) [ FD ]
Line_8 $$ if (!absoluteInTrunkPath.startsWith(myTrunkPathCorrespondingToLocalBranchPath)) -->Line_11 $$ String relativeToTrunkPath = absoluteInTrunkPath.substring(myTrunkPathCorrespondingToLocalBranchPath.length())[ CD ]
Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)[ FD ]
Line_4 $$ String myTrunkPathCorrespondingToLocalBranchPath = SVNPathUtil.append(myInfo.getCurrentBranch().getUrl(), subPathUnderBranch)-->Line_8 $$ if (!absoluteInTrunkPath.startsWith(myTrunkPathCorrespondingToLocalBranchPath)) [ FD ]
Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)-->Line_24 $$ if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(mergeCheckResult)) [ FD ]
Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_5 $$ for (String path : list.getAffectedPaths()) [ FD ]
Line_4 $$ String myTrunkPathCorrespondingToLocalBranchPath = SVNPathUtil.append(myInfo.getCurrentBranch().getUrl(), subPathUnderBranch)-->Line_11 $$ String relativeToTrunkPath = absoluteInTrunkPath.substring(myTrunkPathCorrespondingToLocalBranchPath.length())[ FD ]
Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_4 $$ String myTrunkPathCorrespondingToLocalBranchPath = SVNPathUtil.append(myInfo.getCurrentBranch().getUrl(), subPathUnderBranch)[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_5 $$ for (String path : list.getAffectedPaths()) -->Line_6 $$ String absoluteInTrunkPath = SVNPathUtil.append(myInfo.getRepoUrl(), path)[ FD ]
Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_3 $$ MultiMap<SvnMergeInfoCache.MergeCheckResult, String> result = MultiMap.create()[ CD ]
Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)-->Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_5 $$ for (String path : list.getAffectedPaths()) -->Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)[ FD ]
Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_24 $$ if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(mergeCheckResult)) [ FD ]
Line_5 $$ for (String path : list.getAffectedPaths()) -->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS[ FD ]
Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_28 $$ return result[ CD ]
Line_6 $$ String absoluteInTrunkPath = SVNPathUtil.append(myInfo.getRepoUrl(), path)-->Line_11 $$ String relativeToTrunkPath = absoluteInTrunkPath.substring(myTrunkPathCorrespondingToLocalBranchPath.length())[ FD ]
Line_3 $$ MultiMap<SvnMergeInfoCache.MergeCheckResult, String> result = MultiMap.create()-->Line_23 $$ result.putValue(mergeCheckResult, path)[ FD ]
Line_8 $$ if (!absoluteInTrunkPath.startsWith(myTrunkPathCorrespondingToLocalBranchPath)) -->Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS[ CD ]
Line_2 $$ private MultiMap<SvnMergeInfoCache.MergeCheckResult, String> checkPaths(@NotNull SvnChangeList list, @NotNull String branchPath, final String subPathUnderBranch) -->Line_4 $$ String myTrunkPathCorrespondingToLocalBranchPath = SVNPathUtil.append(myInfo.getCurrentBranch().getUrl(), subPathUnderBranch)[ CD ]
Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_17 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED[ FD ]
Line_7 $$ SvnMergeInfoCache.MergeCheckResult mergeCheckResult-->Line_14 $$ mergeCheckResult = checkPathGoingUp(list.getNumber(), -1, branchPath, localPathInBranch, path, true)[ FD ]
Line_9 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS-->Line_24 $$ if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(mergeCheckResult)) [ FD ]
Line_6 $$ String absoluteInTrunkPath = SVNPathUtil.append(myInfo.getRepoUrl(), path)-->Line_8 $$ if (!absoluteInTrunkPath.startsWith(myTrunkPathCorrespondingToLocalBranchPath)) [ FD ]
Line_20 $$ mergeCheckResult = SvnMergeInfoCache.MergeCheckResult.NOT_MERGED-->Line_24 $$ if (SvnMergeInfoCache.MergeCheckResult.NOT_EXISTS.equals(mergeCheckResult)) [ FD ]
