Line_48 $$ if (settings.lenient()) -->Line_49 $$ return null[ CD ]
Line_3 $$ if (!quoted && queryText.length() > 1) -->Line_4 $$ if (queryText.charAt(0) == '>') [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_6 $$ if (queryText.charAt(1) == '=') [ FD ]
Line_4 $$ if (queryText.charAt(0) == '>') -->Line_10 $$ return getRangeQuerySingle(field, queryText.substring(1), null, false, true)[ CD ]
Line_29 $$ if (currentFieldType == null) -->Line_30 $$ currentFieldType = context.fieldMapper(field)[ CD ]
Line_38 $$ if (!settings.forceAnalyzer()) -->Line_39 $$ setAnalyzer(context.getSearchAnalyzer(currentFieldType))[ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_12 $$ if (queryText.length() > 2) [ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_17 $$ return getRangeQuerySingle(field, null, queryText.substring(1), true, false)[ FD ]
Line_6 $$ if (queryText.charAt(1) == '=') -->Line_7 $$ return getRangeQuerySingle(field, queryText.substring(2), null, true, true)[ CD ]
Line_32 $$ if (currentFieldType != null) -->Line_42 $$ if (currentFieldType != null) [ CD ]
Line_46 $$ query = currentFieldType.termQuery(queryText, context)-->Line_56 $$ query = super.getFieldQuery(currentFieldType.name(), queryText, quoted)[ FD ]
Line_4 $$ if (queryText.charAt(0) == '>') -->Line_11 $$ if (queryText.charAt(0) == '<') [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_21 $$ Analyzer oldAnalyzer = getAnalyzer()[ CD ]
Line_23 $$ if (quoted) -->Line_25 $$ if (settings.quoteFieldSuffix() != null) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_13 $$ if (queryText.charAt(1) == '=') [ FD ]
Line_43 $$ Query query = null-->Line_46 $$ query = currentFieldType.termQuery(queryText, context)[ FD ]
Line_33 $$ if (quoted) -->Line_34 $$ if (!settings.forceQuoteAnalyzer()) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_5 $$ if (queryText.length() > 2) [ FD ]
Line_43 $$ Query query = null-->Line_56 $$ query = super.getFieldQuery(currentFieldType.name(), queryText, quoted)[ FD ]
Line_46 $$ query = currentFieldType.termQuery(queryText, context)-->Line_55 $$ if (query == null) [ FD ]
Line_34 $$ if (!settings.forceQuoteAnalyzer()) -->Line_35 $$ setAnalyzer(context.getSearchQuoteAnalyzer(currentFieldType))[ CD ]
Line_33 $$ if (quoted) -->Line_38 $$ if (!settings.forceAnalyzer()) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_4 $$ if (queryText.charAt(0) == '>') [ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_3 $$ if (!quoted && queryText.length() > 1) [ FD ]
Line_32 $$ if (currentFieldType != null) -->Line_33 $$ if (quoted) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_61 $$ return super.getFieldQuery(field, queryText, quoted)[ FD ]
Line_5 $$ if (queryText.length() > 2) -->Line_6 $$ if (queryText.charAt(1) == '=') [ CD ]
Line_42 $$ if (currentFieldType != null) -->Line_58 $$ return query[ CD ]
Line_4 $$ if (queryText.charAt(0) == '>') -->Line_5 $$ if (queryText.length() > 2) [ CD ]
Line_25 $$ if (settings.quoteFieldSuffix() != null) -->Line_26 $$ currentFieldType = context.fieldMapper(field + settings.quoteFieldSuffix())[ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_3 $$ if (!quoted && queryText.length() > 1) [ CD ]
Line_11 $$ if (queryText.charAt(0) == '<') -->Line_12 $$ if (queryText.length() > 2) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_30 $$ currentFieldType = context.fieldMapper(field)[ FD ]
Line_42 $$ if (currentFieldType != null) -->Line_43 $$ Query query = null[ CD ]
Line_43 $$ Query query = null-->Line_55 $$ if (query == null) [ FD ]
Line_55 $$ if (query == null) -->Line_56 $$ query = super.getFieldQuery(currentFieldType.name(), queryText, quoted)[ CD ]
Line_11 $$ if (queryText.charAt(0) == '<') -->Line_17 $$ return getRangeQuerySingle(field, null, queryText.substring(1), true, false)[ CD ]
Line_12 $$ if (queryText.length() > 2) -->Line_13 $$ if (queryText.charAt(1) == '=') [ CD ]
Line_23 $$ if (quoted) -->Line_24 $$ setAnalyzer(settings.quoteAnalyzer())[ CD ]
Line_42 $$ if (currentFieldType != null) -->Line_44 $$ if (currentFieldType.useTermQueryWithQueryString()) [ CD ]
Line_42 $$ if (currentFieldType != null) -->Line_55 $$ if (query == null) [ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_56 $$ query = super.getFieldQuery(currentFieldType.name(), queryText, quoted)[ FD ]
Line_21 $$ Analyzer oldAnalyzer = getAnalyzer()-->Line_63 $$ setAnalyzer(oldAnalyzer)[ FD ]
Line_13 $$ if (queryText.charAt(1) == '=') -->Line_14 $$ return getRangeQuerySingle(field, null, queryText.substring(2), true, true)[ CD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_46 $$ query = currentFieldType.termQuery(queryText, context)[ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_11 $$ if (queryText.charAt(0) == '<') [ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_14 $$ return getRangeQuerySingle(field, null, queryText.substring(2), true, true)[ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_7 $$ return getRangeQuerySingle(field, queryText.substring(2), null, true, true)[ FD ]
Line_2 $$ private Query getFieldQuerySingle(String field, String queryText, boolean quoted) throws ParseException -->Line_10 $$ return getRangeQuerySingle(field, queryText.substring(1), null, false, true)[ FD ]
